// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39259 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39259 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39259 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39259 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39259 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39259 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39259 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39259 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41361 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39259 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39259 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39259 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39259 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39259 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39259 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39259 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 76552 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 76552 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 76978 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 39259 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 76552 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 76552 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 39259 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 4 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 4
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 39259 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 39259 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16589
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16552: LD_INT 70
16554: PPUSH
16555: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16559: LD_EXP 44
16563: PPUSH
16564: LD_INT 208
16566: PPUSH
16567: LD_INT 62
16569: PPUSH
16570: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16574: LD_EXP 44
16578: PPUSH
16579: LD_INT 16
16581: PPUSH
16582: CALL_OW 308
16586: NOT
16587: IFFALSE 16552
// end ; end_of_file
16589: PPOPN 3
16591: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16592: LD_EXP 53
16596: PUSH
16597: LD_EXP 31
16601: NOT
16602: AND
16603: PUSH
16604: LD_EXP 32
16608: NOT
16609: AND
16610: IFFALSE 17060
16612: GO 16614
16614: DISABLE
16615: LD_INT 0
16617: PPUSH
16618: PPUSH
16619: PPUSH
16620: PPUSH
// begin enable ;
16621: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16622: LD_ADDR_VAR 0 4
16626: PUSH
16627: LD_INT 81
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: ST_TO_ADDR
// for i = 1 to ru_patrol do
16642: LD_ADDR_VAR 0 2
16646: PUSH
16647: DOUBLE
16648: LD_INT 1
16650: DEC
16651: ST_TO_ADDR
16652: LD_EXP 53
16656: PUSH
16657: FOR_TO
16658: IFFALSE 17058
// begin un := ru_patrol [ i ] ;
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_EXP 53
16669: PUSH
16670: LD_VAR 0 2
16674: ARRAY
16675: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16676: LD_VAR 0 1
16680: PPUSH
16681: LD_INT 13
16683: PPUSH
16684: CALL_OW 308
16688: IFFALSE 16793
// begin if not ru_alert then
16690: LD_EXP 60
16694: NOT
16695: IFFALSE 16705
// ru_alert := true ;
16697: LD_ADDR_EXP 60
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// if not See ( 1 , un ) then
16705: LD_INT 1
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 292
16717: NOT
16718: IFFALSE 16732
// SetLives ( un , 1000 ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 1000
16727: PPUSH
16728: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16732: LD_ADDR_EXP 53
16736: PUSH
16737: LD_EXP 53
16741: PUSH
16742: LD_VAR 0 1
16746: DIFF
16747: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 22
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 30
16765: PUSH
16766: LD_INT 4
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: PPUSH
16782: CALL 1007 0 1
16786: PPUSH
16787: CALL_OW 120
// continue ;
16791: GO 16657
// end ; if IsOk ( un ) and not HasTask ( un ) then
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 302
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 314
16812: NOT
16813: AND
16814: IFFALSE 16907
// begin for j = 1 to ru_firepoints_south [ i ] do
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: DOUBLE
16822: LD_INT 1
16824: DEC
16825: ST_TO_ADDR
16826: LD_EXP 59
16830: PUSH
16831: LD_VAR 0 2
16835: ARRAY
16836: PUSH
16837: FOR_TO
16838: IFFALSE 16905
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16840: LD_VAR 0 1
16844: PPUSH
16845: LD_EXP 59
16849: PUSH
16850: LD_VAR 0 2
16854: ARRAY
16855: PUSH
16856: LD_VAR 0 3
16860: ARRAY
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_EXP 59
16870: PUSH
16871: LD_VAR 0 2
16875: ARRAY
16876: PUSH
16877: LD_VAR 0 3
16881: ARRAY
16882: PUSH
16883: LD_INT 2
16885: ARRAY
16886: PPUSH
16887: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 70
16898: PPUSH
16899: CALL_OW 202
// end ;
16903: GO 16837
16905: POP
16906: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 256
16916: PUSH
16917: LD_INT 700
16919: LESS
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 13
16928: PPUSH
16929: CALL_OW 308
16933: NOT
16934: AND
16935: IFFALSE 16987
// begin ComMoveToArea ( un , retreatArea ) ;
16937: LD_VAR 0 1
16941: PPUSH
16942: LD_INT 13
16944: PPUSH
16945: CALL_OW 113
// if not ru_alert_xy then
16949: LD_EXP 61
16953: NOT
16954: IFFALSE 16985
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16956: LD_ADDR_EXP 61
16960: PUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 250
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 251
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: ST_TO_ADDR
// end else
16985: GO 17056
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_VAR 0 4
16996: PPUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 74
17006: PPUSH
17007: CALL_OW 296
17011: PUSH
17012: LD_INT 9
17014: LESS
17015: PUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 256
17025: PUSH
17026: LD_INT 500
17028: GREATER
17029: AND
17030: IFFALSE 17056
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_VAR 0 4
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 74
17051: PPUSH
17052: CALL_OW 115
// end ;
17056: GO 16657
17058: POP
17059: POP
// end ;
17060: PPOPN 4
17062: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17063: LD_EXP 60
17067: PUSH
17068: LD_EXP 61
17072: AND
17073: PUSH
17074: LD_EXP 31
17078: NOT
17079: AND
17080: PUSH
17081: LD_EXP 32
17085: NOT
17086: AND
17087: IFFALSE 17297
17089: GO 17091
17091: DISABLE
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
// begin enable ;
17096: ENABLE
// if not ru_vehicles then
17097: LD_EXP 56
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17297
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17106: LD_ADDR_VAR 0 2
17110: PUSH
17111: LD_INT 81
17113: PUSH
17114: LD_INT 3
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 69
17125: ST_TO_ADDR
// if ru_vehicles then
17126: LD_EXP 56
17130: IFFALSE 17297
// begin for i in ru_vehicles do
17132: LD_ADDR_VAR 0 1
17136: PUSH
17137: LD_EXP 56
17141: PUSH
17142: FOR_IN
17143: IFFALSE 17295
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 302
17154: PUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_VAR 0 2
17164: PPUSH
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 74
17174: PPUSH
17175: CALL_OW 296
17179: PUSH
17180: LD_INT 9
17182: LESS
17183: AND
17184: IFFALSE 17210
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: LD_VAR 0 2
17195: PPUSH
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 74
17205: PPUSH
17206: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 314
17219: NOT
17220: PUSH
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 302
17230: AND
17231: PUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: LD_EXP 61
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: LD_EXP 61
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PPUSH
17255: CALL_OW 297
17259: PUSH
17260: LD_INT 10
17262: GREATER
17263: AND
17264: IFFALSE 17293
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_EXP 61
17275: PUSH
17276: LD_INT 1
17278: ARRAY
17279: PPUSH
17280: LD_EXP 61
17284: PUSH
17285: LD_INT 2
17287: ARRAY
17288: PPUSH
17289: CALL_OW 114
// end ;
17293: GO 17142
17295: POP
17296: POP
// end ; end ;
17297: PPOPN 2
17299: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17300: LD_EXP 61
17304: PUSH
17305: LD_EXP 60
17309: AND
17310: PUSH
17311: LD_INT 3
17313: PPUSH
17314: CALL_OW 463
17318: NOT
17319: AND
17320: PUSH
17321: LD_EXP 31
17325: NOT
17326: AND
17327: PUSH
17328: LD_EXP 32
17332: NOT
17333: AND
17334: IFFALSE 17429
17336: GO 17338
17338: DISABLE
17339: LD_INT 0
17341: PPUSH
// begin enable ;
17342: ENABLE
// ru_alert_xy := false ;
17343: LD_ADDR_EXP 61
17347: PUSH
17348: LD_INT 0
17350: ST_TO_ADDR
// ru_alert := false ;
17351: LD_ADDR_EXP 60
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// if ru_vehicles then
17359: LD_EXP 56
17363: IFFALSE 17429
// for i in ru_vehicles do
17365: LD_ADDR_VAR 0 1
17369: PUSH
17370: LD_EXP 56
17374: PUSH
17375: FOR_IN
17376: IFFALSE 17427
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 302
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 89
17395: PPUSH
17396: LD_INT 36
17398: PPUSH
17399: CALL_OW 297
17403: PUSH
17404: LD_INT 10
17406: GREATER
17407: AND
17408: IFFALSE 17425
// ComMoveXY ( i , 89 , 36 ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_INT 89
17417: PPUSH
17418: LD_INT 36
17420: PPUSH
17421: CALL_OW 111
17425: GO 17375
17427: POP
17428: POP
// end ;
17429: PPOPN 1
17431: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17432: LD_EXP 55
17436: PUSH
17437: LD_EXP 31
17441: NOT
17442: AND
17443: PUSH
17444: LD_EXP 32
17448: NOT
17449: AND
17450: IFFALSE 17734
17452: GO 17454
17454: DISABLE
17455: LD_INT 0
17457: PPUSH
17458: PPUSH
17459: PPUSH
// begin enable ;
17460: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_INT 81
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PPUSH
17476: CALL_OW 69
17480: ST_TO_ADDR
// for i = 1 to ru_forest do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_EXP 55
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17732
// begin un := ru_forest [ i ] ;
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: LD_EXP 55
17508: PUSH
17509: LD_VAR 0 1
17513: ARRAY
17514: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17515: LD_VAR 0 2
17519: PPUSH
17520: LD_INT 13
17522: PPUSH
17523: CALL_OW 308
17527: IFFALSE 17617
// begin if not See ( 1 , un ) then
17529: LD_INT 1
17531: PPUSH
17532: LD_VAR 0 2
17536: PPUSH
17537: CALL_OW 292
17541: NOT
17542: IFFALSE 17556
// SetLives ( un , 1000 ) ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 1000
17551: PPUSH
17552: CALL_OW 234
// ru_forest := ru_forest diff un ;
17556: LD_ADDR_EXP 55
17560: PUSH
17561: LD_EXP 55
17565: PUSH
17566: LD_VAR 0 2
17570: DIFF
17571: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17572: LD_VAR 0 2
17576: PPUSH
17577: LD_INT 22
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 30
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 69
17605: PPUSH
17606: CALL 1007 0 1
17610: PPUSH
17611: CALL_OW 120
// continue ;
17615: GO 17496
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17617: LD_VAR 0 2
17621: PPUSH
17622: CALL_OW 256
17626: PUSH
17627: LD_INT 700
17629: LESS
17630: PUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: LD_INT 13
17638: PPUSH
17639: CALL_OW 308
17643: NOT
17644: AND
17645: IFFALSE 17661
// ComMoveToArea ( un , retreatArea ) else
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_INT 13
17654: PPUSH
17655: CALL_OW 113
17659: GO 17730
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_VAR 0 2
17675: PPUSH
17676: CALL_OW 74
17680: PPUSH
17681: CALL_OW 296
17685: PUSH
17686: LD_INT 9
17688: LESS
17689: PUSH
17690: LD_VAR 0 2
17694: PPUSH
17695: CALL_OW 256
17699: PUSH
17700: LD_INT 500
17702: GREATER
17703: AND
17704: IFFALSE 17730
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 74
17725: PPUSH
17726: CALL_OW 115
// end ;
17730: GO 17496
17732: POP
17733: POP
// end ;
17734: PPOPN 3
17736: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17737: LD_EXP 32
17741: NOT
17742: PUSH
17743: LD_EXP 44
17747: PPUSH
17748: CALL_OW 301
17752: OR
17753: IFFALSE 17914
17755: GO 17757
17757: DISABLE
17758: LD_INT 0
17760: PPUSH
17761: PPUSH
// begin enable ;
17762: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_INT 22
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: LD_INT 95
17783: PUSH
17784: LD_INT 18
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 21
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 3
17807: PUSH
17808: LD_INT 24
17810: PUSH
17811: LD_INT 990
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: ST_TO_ADDR
// if filter then
17833: LD_VAR 0 2
17837: IFFALSE 17914
// for i in filter do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17912
// if GetY ( i ) > 70 then
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 251
17861: PUSH
17862: LD_INT 70
17864: GREATER
17865: IFFALSE 17871
// continue else
17867: GO 17849
17869: GO 17910
// begin ru_alert := true ;
17871: LD_ADDR_EXP 60
17875: PUSH
17876: LD_INT 1
17878: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17879: LD_ADDR_EXP 61
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 250
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 251
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: ST_TO_ADDR
// break ;
17908: GO 17912
// end ;
17910: GO 17849
17912: POP
17913: POP
// end ;
17914: PPOPN 2
17916: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17917: LD_EXP 31
17921: IFFALSE 18070
17923: GO 17925
17925: DISABLE
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17932: LD_ADDR_VAR 0 4
17936: PUSH
17937: LD_EXP 56
17941: PUSH
17942: LD_EXP 55
17946: ADD
17947: PUSH
17948: LD_EXP 53
17952: ADD
17953: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_INT 3
17961: PPUSH
17962: LD_INT 81
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 70
17976: ST_TO_ADDR
// if filter and enemy then
17977: LD_VAR 0 4
17981: PUSH
17982: LD_VAR 0 3
17986: AND
17987: IFFALSE 18070
// repeat wait ( 0 0$01 ) ;
17989: LD_INT 35
17991: PPUSH
17992: CALL_OW 67
// for i in filter do
17996: LD_ADDR_VAR 0 1
18000: PUSH
18001: LD_VAR 0 4
18005: PUSH
18006: FOR_IN
18007: IFFALSE 18035
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18009: LD_VAR 0 1
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 74
18028: PPUSH
18029: CALL_OW 115
// end ;
18033: GO 18006
18035: POP
18036: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18037: LD_INT 3
18039: PPUSH
18040: LD_INT 81
18042: PUSH
18043: LD_INT 3
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 70
18054: PUSH
18055: LD_INT 0
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 4
18063: PUSH
18064: LD_INT 0
18066: EQUAL
18067: OR
18068: IFFALSE 17989
// end ;
18070: PPOPN 4
18072: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18073: LD_EXP 26
18077: PUSH
18078: LD_INT 22
18080: PUSH
18081: LD_INT 4
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 3
18100: PUSH
18101: LD_INT 57
18103: PUSH
18104: EMPTY
18105: LIST
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: AND
18121: IFFALSE 18170
18123: GO 18125
18125: DISABLE
18126: LD_INT 0
18128: PPUSH
// begin if not ru_cornel_attack then
18129: LD_EXP 58
18133: NOT
18134: IFFALSE 18138
// exit ;
18136: GO 18170
// for i in ru_cornel_attack do
18138: LD_ADDR_VAR 0 1
18142: PUSH
18143: LD_EXP 58
18147: PUSH
18148: FOR_IN
18149: IFFALSE 18168
// ComAgressiveMove ( i , 258 , 119 ) ;
18151: LD_VAR 0 1
18155: PPUSH
18156: LD_INT 258
18158: PPUSH
18159: LD_INT 119
18161: PPUSH
18162: CALL_OW 114
18166: GO 18148
18168: POP
18169: POP
// end ; end_of_file
18170: PPOPN 1
18172: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18173: LD_EXP 5
18177: PUSH
18178: LD_EXP 9
18182: NOT
18183: AND
18184: PUSH
18185: LD_EXP 20
18189: AND
18190: IFFALSE 18302
18192: GO 18194
18194: DISABLE
18195: LD_INT 0
18197: PPUSH
// begin enable ;
18198: ENABLE
// crates_counter := crates_counter - 50 ;
18199: LD_ADDR_EXP 20
18203: PUSH
18204: LD_EXP 20
18208: PUSH
18209: LD_INT 50
18211: MINUS
18212: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18213: LD_INT 8
18215: PPUSH
18216: LD_INT 2
18218: PPUSH
18219: LD_INT 5
18221: PPUSH
18222: CALL_OW 12
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18234: LD_INT 1785
18236: PPUSH
18237: LD_INT 2345
18239: PPUSH
18240: CALL_OW 12
18244: PPUSH
18245: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18249: LD_ADDR_VAR 0 1
18253: PUSH
18254: LD_INT 1
18256: PPUSH
18257: LD_OWVAR 67
18261: PUSH
18262: LD_INT 2
18264: PLUS
18265: PPUSH
18266: CALL_OW 12
18270: ST_TO_ADDR
// if r < 3 then
18271: LD_VAR 0 1
18275: PUSH
18276: LD_INT 3
18278: LESS
18279: IFFALSE 18302
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18281: LD_INT 4
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_INT 5
18289: PPUSH
18290: CALL_OW 12
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 55
// end ;
18302: PPOPN 1
18304: END
// every 0 0$01 trigger cornel_active do
18305: LD_EXP 8
18309: IFFALSE 18398
18311: GO 18313
18313: DISABLE
// begin Wait ( 0 0$03 ) ;
18314: LD_INT 105
18316: PPUSH
18317: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18321: LD_INT 2
18323: PPUSH
18324: LD_INT 5
18326: PPUSH
18327: CALL_OW 12
18331: PPUSH
18332: LD_INT 10
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 55
// Wait ( 0 0$13 ) ;
18342: LD_INT 455
18344: PPUSH
18345: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18349: LD_INT 2
18351: PPUSH
18352: LD_INT 5
18354: PPUSH
18355: CALL_OW 12
18359: PPUSH
18360: LD_INT 10
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 55
// Wait ( 0 0$16 ) ;
18370: LD_INT 560
18372: PPUSH
18373: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18377: LD_INT 2
18379: PPUSH
18380: LD_INT 5
18382: PPUSH
18383: CALL_OW 12
18387: PPUSH
18388: LD_INT 10
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 55
// end ; end_of_file
18398: END
// every 0 0$01 trigger cornel_prepared do
18399: LD_EXP 11
18403: IFFALSE 18462
18405: GO 18407
18407: DISABLE
// begin enable ;
18408: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18409: LD_ADDR_OWVAR 47
18413: PUSH
18414: LD_STRING #Am03-1
18416: PUSH
18417: LD_EXP 10
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18426: LD_ADDR_EXP 10
18430: PUSH
18431: LD_EXP 10
18435: PPUSH
18436: LD_STRING -
18438: PPUSH
18439: CALL 1077 0 2
18443: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18444: LD_EXP 10
18448: PUSH
18449: LD_INT 0
18451: EQUAL
18452: IFFALSE 18462
// begin Display_Strings := [ ] ;
18454: LD_ADDR_OWVAR 47
18458: PUSH
18459: EMPTY
18460: ST_TO_ADDR
// disable ;
18461: DISABLE
// end ; end ;
18462: END
// every 0 0$01 trigger debug and debug_strings do
18463: LD_EXP 1
18467: PUSH
18468: LD_OWVAR 48
18472: AND
18473: IFFALSE 18489
18475: GO 18477
18477: DISABLE
// begin enable ;
18478: ENABLE
// Display_Strings := debug_strings ;
18479: LD_ADDR_OWVAR 47
18483: PUSH
18484: LD_OWVAR 48
18488: ST_TO_ADDR
// end ; end_of_file
18489: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18490: LD_VAR 0 1
18494: PPUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: CALL 35090 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 1
18516: EQUAL
18517: PUSH
18518: LD_EXP 14
18522: NOT
18523: AND
18524: IFFALSE 18534
// solar_builded := true ;
18526: LD_ADDR_EXP 14
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL_OW 255
18543: PUSH
18544: LD_INT 1
18546: EQUAL
18547: PUSH
18548: LD_EXP 29
18552: AND
18553: IFFALSE 18590
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18555: LD_ADDR_EXP 29
18559: PUSH
18560: LD_EXP 29
18564: PUSH
18565: LD_INT 1750
18567: PUSH
18568: LD_INT 1400
18570: PUSH
18571: LD_INT 1225
18573: PUSH
18574: LD_INT 1050
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: PUSH
18583: LD_OWVAR 67
18587: ARRAY
18588: PLUS
18589: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 255
18599: PUSH
18600: LD_INT 3
18602: EQUAL
18603: IFFALSE 18621
// ru_vehicles := ru_vehicles ^ veh ;
18605: LD_ADDR_EXP 56
18609: PUSH
18610: LD_EXP 56
18614: PUSH
18615: LD_VAR 0 1
18619: ADD
18620: ST_TO_ADDR
// end ;
18621: PPOPN 2
18623: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL 34970 0 1
// if un in ru_patrol then
18633: LD_VAR 0 1
18637: PUSH
18638: LD_EXP 53
18642: IN
18643: IFFALSE 18661
// ru_patrol := ru_patrol diff un ;
18645: LD_ADDR_EXP 53
18649: PUSH
18650: LD_EXP 53
18654: PUSH
18655: LD_VAR 0 1
18659: DIFF
18660: ST_TO_ADDR
// if un in ru_forest then
18661: LD_VAR 0 1
18665: PUSH
18666: LD_EXP 55
18670: IN
18671: IFFALSE 18689
// ru_forest := ru_forest diff un ;
18673: LD_ADDR_EXP 55
18677: PUSH
18678: LD_EXP 55
18682: PUSH
18683: LD_VAR 0 1
18687: DIFF
18688: ST_TO_ADDR
// if un in ru_vehicles then
18689: LD_VAR 0 1
18693: PUSH
18694: LD_EXP 56
18698: IN
18699: IFFALSE 18805
// begin ru_vehicles := ru_vehicles diff un ;
18701: LD_ADDR_EXP 56
18705: PUSH
18706: LD_EXP 56
18710: PUSH
18711: LD_VAR 0 1
18715: DIFF
18716: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18717: LD_ADDR_EXP 57
18721: PUSH
18722: LD_EXP 57
18726: PUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 265
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 262
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 263
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 264
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: ADD
18773: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18774: LD_ADDR_EXP 13
18778: PUSH
18779: LD_EXP 13
18783: PUSH
18784: LD_INT 1
18786: PLUS
18787: ST_TO_ADDR
// if ach_counter = 10 then
18788: LD_EXP 13
18792: PUSH
18793: LD_INT 10
18795: EQUAL
18796: IFFALSE 18805
// SetAchievement ( ACH_FAUST ) ;
18798: LD_STRING ACH_FAUST
18800: PPUSH
18801: CALL_OW 543
// end ; if un = Pokryshkin then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_EXP 52
18814: EQUAL
18815: IFFALSE 18824
// SetAchievement ( ACH_POKR ) ;
18817: LD_STRING ACH_POKR
18819: PPUSH
18820: CALL_OW 543
// if un = JMM then
18824: LD_VAR 0 1
18828: PUSH
18829: LD_EXP 37
18833: EQUAL
18834: IFFALSE 18843
// YouLost ( 0 ) ;
18836: LD_STRING 0
18838: PPUSH
18839: CALL_OW 104
// if un = us_dep_west then
18843: LD_VAR 0 1
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: IFFALSE 18860
// YouLost ( 2 ) ;
18853: LD_STRING 2
18855: PPUSH
18856: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 255
18869: PUSH
18870: LD_INT 8
18872: EQUAL
18873: PUSH
18874: LD_EXP 5
18878: NOT
18879: AND
18880: IFFALSE 18889
// YouLost ( 4 ) ;
18882: LD_STRING 4
18884: PPUSH
18885: CALL_OW 104
// if un in jmm_units then
18889: LD_VAR 0 1
18893: PUSH
18894: LD_EXP 4
18898: IN
18899: IFFALSE 18915
// lose_counter := lose_counter + 1 ;
18901: LD_ADDR_EXP 34
18905: PUSH
18906: LD_EXP 34
18910: PUSH
18911: LD_INT 1
18913: PLUS
18914: ST_TO_ADDR
// end ;
18915: PPOPN 1
18917: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
// begin if GetSide ( driver ) = 3 then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 255
18931: PUSH
18932: LD_INT 3
18934: EQUAL
18935: IFFALSE 19013
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18937: LD_ADDR_VAR 0 6
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 3
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PPUSH
18971: CALL 1007 0 1
18975: ST_TO_ADDR
// if place then
18976: LD_VAR 0 6
18980: IFFALSE 18998
// ComEnterUnit ( driver , place ) else
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_VAR 0 6
18991: PPUSH
18992: CALL_OW 120
18996: GO 19013
// ComMoveXY ( driver , 70 , 22 ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_INT 70
19005: PPUSH
19006: LD_INT 22
19008: PPUSH
19009: CALL_OW 111
// end ; end ;
19013: PPOPN 6
19015: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19016: LD_VAR 0 1
19020: PUSH
19021: LD_INT 1
19023: EQUAL
19024: PUSH
19025: LD_VAR 0 2
19029: PUSH
19030: LD_INT 4
19032: EQUAL
19033: PUSH
19034: LD_VAR 0 2
19038: PUSH
19039: LD_INT 8
19041: EQUAL
19042: PUSH
19043: LD_EXP 5
19047: NOT
19048: AND
19049: OR
19050: AND
19051: IFFALSE 19060
// YouLost ( 5 ) ;
19053: LD_STRING 5
19055: PPUSH
19056: CALL_OW 104
// end ;
19060: PPOPN 2
19062: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19063: LD_EXP 36
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL_OW 69
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_INT 8
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PPUSH
19121: CALL_OW 69
19125: ADD
19126: PLUS
19127: PUSH
19128: LD_INT 5
19130: LESS
19131: IFFALSE 19143
19133: GO 19135
19135: DISABLE
// YouLost ( 1 ) ;
19136: LD_STRING 1
19138: PPUSH
19139: CALL_OW 104
19143: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19144: LD_INT 1
19146: PPUSH
19147: CALL_OW 255
19151: PUSH
19152: LD_INT 3
19154: EQUAL
19155: IFFALSE 19167
19157: GO 19159
19159: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19160: LD_STRING 3
19162: PPUSH
19163: CALL_OW 104
19167: END
// export globalGameSaveCounter ; every 0 0$1 do
19168: GO 19170
19170: DISABLE
// begin enable ;
19171: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19172: LD_STRING updateTimer(
19174: PUSH
19175: LD_OWVAR 1
19179: STR
19180: PUSH
19181: LD_STRING );
19183: STR
19184: PPUSH
19185: CALL_OW 559
// end ;
19189: END
// every 0 0$1 do
19190: GO 19192
19192: DISABLE
// begin globalGameSaveCounter := 0 ;
19193: LD_ADDR_EXP 62
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19201: LD_STRING setGameSaveCounter(0)
19203: PPUSH
19204: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19208: LD_STRING initStreamRollete();
19210: PPUSH
19211: CALL_OW 559
// InitStreamMode ;
19215: CALL 20541 0 0
// DefineStreamItems ( false ) ;
19219: LD_INT 0
19221: PPUSH
19222: CALL 21005 0 1
// end ;
19226: END
// export function SOS_MapStart ( ) ; begin
19227: LD_INT 0
19229: PPUSH
// if streamModeActive then
19230: LD_EXP 63
19234: IFFALSE 19243
// DefineStreamItems ( true ) ;
19236: LD_INT 1
19238: PPUSH
19239: CALL 21005 0 1
// UpdateLuaVariables ( ) ;
19243: CALL 19260 0 0
// UpdateFactoryWaypoints ( ) ;
19247: CALL 33874 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19251: CALL 34131 0 0
// end ;
19255: LD_VAR 0 1
19259: RET
// function UpdateLuaVariables ( ) ; begin
19260: LD_INT 0
19262: PPUSH
// if globalGameSaveCounter then
19263: LD_EXP 62
19267: IFFALSE 19301
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19269: LD_ADDR_EXP 62
19273: PUSH
19274: LD_EXP 62
19278: PPUSH
19279: CALL 77941 0 1
19283: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19284: LD_STRING setGameSaveCounter(
19286: PUSH
19287: LD_EXP 62
19291: STR
19292: PUSH
19293: LD_STRING )
19295: STR
19296: PPUSH
19297: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19301: LD_STRING setGameDifficulty(
19303: PUSH
19304: LD_OWVAR 67
19308: STR
19309: PUSH
19310: LD_STRING )
19312: STR
19313: PPUSH
19314: CALL_OW 559
// end ;
19318: LD_VAR 0 1
19322: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19323: LD_INT 0
19325: PPUSH
// if p2 = stream_mode then
19326: LD_VAR 0 2
19330: PUSH
19331: LD_INT 100
19333: EQUAL
19334: IFFALSE 20337
// begin if not StreamModeActive then
19336: LD_EXP 63
19340: NOT
19341: IFFALSE 19351
// StreamModeActive := true ;
19343: LD_ADDR_EXP 63
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 0 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 0
19358: EQUAL
19359: IFFALSE 19365
// InitStreamMode ;
19361: CALL 20541 0 0
// if p3 = 1 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 1
19372: EQUAL
19373: IFFALSE 19383
// sRocket := true ;
19375: LD_ADDR_EXP 68
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 2 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 2
19390: EQUAL
19391: IFFALSE 19401
// sSpeed := true ;
19393: LD_ADDR_EXP 67
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 3 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 3
19408: EQUAL
19409: IFFALSE 19419
// sEngine := true ;
19411: LD_ADDR_EXP 69
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 4 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 4
19426: EQUAL
19427: IFFALSE 19437
// sSpec := true ;
19429: LD_ADDR_EXP 66
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 5 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 5
19444: EQUAL
19445: IFFALSE 19455
// sLevel := true ;
19447: LD_ADDR_EXP 70
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 6 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 6
19462: EQUAL
19463: IFFALSE 19473
// sArmoury := true ;
19465: LD_ADDR_EXP 71
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 7 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 7
19480: EQUAL
19481: IFFALSE 19491
// sRadar := true ;
19483: LD_ADDR_EXP 72
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 8 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 8
19498: EQUAL
19499: IFFALSE 19509
// sBunker := true ;
19501: LD_ADDR_EXP 73
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 9 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 9
19516: EQUAL
19517: IFFALSE 19527
// sHack := true ;
19519: LD_ADDR_EXP 74
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 10 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 10
19534: EQUAL
19535: IFFALSE 19545
// sFire := true ;
19537: LD_ADDR_EXP 75
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 11 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 11
19552: EQUAL
19553: IFFALSE 19563
// sRefresh := true ;
19555: LD_ADDR_EXP 76
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 12 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 12
19570: EQUAL
19571: IFFALSE 19581
// sExp := true ;
19573: LD_ADDR_EXP 77
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 13 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 13
19588: EQUAL
19589: IFFALSE 19599
// sDepot := true ;
19591: LD_ADDR_EXP 78
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 14 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 14
19606: EQUAL
19607: IFFALSE 19617
// sFlag := true ;
19609: LD_ADDR_EXP 79
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 15 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 15
19624: EQUAL
19625: IFFALSE 19635
// sKamikadze := true ;
19627: LD_ADDR_EXP 87
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 16 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 16
19642: EQUAL
19643: IFFALSE 19653
// sTroll := true ;
19645: LD_ADDR_EXP 88
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 17 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 17
19660: EQUAL
19661: IFFALSE 19671
// sSlow := true ;
19663: LD_ADDR_EXP 89
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 18 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 18
19678: EQUAL
19679: IFFALSE 19689
// sLack := true ;
19681: LD_ADDR_EXP 90
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 19 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 19
19696: EQUAL
19697: IFFALSE 19707
// sTank := true ;
19699: LD_ADDR_EXP 92
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 20 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 20
19714: EQUAL
19715: IFFALSE 19725
// sRemote := true ;
19717: LD_ADDR_EXP 93
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 21 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 21
19732: EQUAL
19733: IFFALSE 19743
// sPowell := true ;
19735: LD_ADDR_EXP 94
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 22 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 22
19750: EQUAL
19751: IFFALSE 19761
// sTeleport := true ;
19753: LD_ADDR_EXP 97
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 23 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 23
19768: EQUAL
19769: IFFALSE 19779
// sOilTower := true ;
19771: LD_ADDR_EXP 99
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 24 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 24
19786: EQUAL
19787: IFFALSE 19797
// sShovel := true ;
19789: LD_ADDR_EXP 100
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 25 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 25
19804: EQUAL
19805: IFFALSE 19815
// sSheik := true ;
19807: LD_ADDR_EXP 101
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 26 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 26
19822: EQUAL
19823: IFFALSE 19833
// sEarthquake := true ;
19825: LD_ADDR_EXP 103
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 27 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 27
19840: EQUAL
19841: IFFALSE 19851
// sAI := true ;
19843: LD_ADDR_EXP 104
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 28 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 28
19858: EQUAL
19859: IFFALSE 19869
// sCargo := true ;
19861: LD_ADDR_EXP 107
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 29 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 29
19876: EQUAL
19877: IFFALSE 19887
// sDLaser := true ;
19879: LD_ADDR_EXP 108
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if p3 = 30 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 30
19894: EQUAL
19895: IFFALSE 19905
// sExchange := true ;
19897: LD_ADDR_EXP 109
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 31 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 31
19912: EQUAL
19913: IFFALSE 19923
// sFac := true ;
19915: LD_ADDR_EXP 110
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 32 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 32
19930: EQUAL
19931: IFFALSE 19941
// sPower := true ;
19933: LD_ADDR_EXP 111
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 33 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 33
19948: EQUAL
19949: IFFALSE 19959
// sRandom := true ;
19951: LD_ADDR_EXP 112
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 34 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 34
19966: EQUAL
19967: IFFALSE 19977
// sShield := true ;
19969: LD_ADDR_EXP 113
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 35 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 35
19984: EQUAL
19985: IFFALSE 19995
// sTime := true ;
19987: LD_ADDR_EXP 114
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 36 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 36
20002: EQUAL
20003: IFFALSE 20013
// sTools := true ;
20005: LD_ADDR_EXP 115
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 101 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 101
20020: EQUAL
20021: IFFALSE 20031
// sSold := true ;
20023: LD_ADDR_EXP 80
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 102 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 102
20038: EQUAL
20039: IFFALSE 20049
// sDiff := true ;
20041: LD_ADDR_EXP 81
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 103 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 103
20056: EQUAL
20057: IFFALSE 20067
// sFog := true ;
20059: LD_ADDR_EXP 84
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 104 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 104
20074: EQUAL
20075: IFFALSE 20085
// sReset := true ;
20077: LD_ADDR_EXP 85
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 105 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 105
20092: EQUAL
20093: IFFALSE 20103
// sSun := true ;
20095: LD_ADDR_EXP 86
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 106 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 106
20110: EQUAL
20111: IFFALSE 20121
// sTiger := true ;
20113: LD_ADDR_EXP 82
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 107 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 107
20128: EQUAL
20129: IFFALSE 20139
// sBomb := true ;
20131: LD_ADDR_EXP 83
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 108 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 108
20146: EQUAL
20147: IFFALSE 20157
// sWound := true ;
20149: LD_ADDR_EXP 91
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 109 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 109
20164: EQUAL
20165: IFFALSE 20175
// sBetray := true ;
20167: LD_ADDR_EXP 95
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 110 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 110
20182: EQUAL
20183: IFFALSE 20193
// sContamin := true ;
20185: LD_ADDR_EXP 96
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 111 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 111
20200: EQUAL
20201: IFFALSE 20211
// sOil := true ;
20203: LD_ADDR_EXP 98
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 112 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 112
20218: EQUAL
20219: IFFALSE 20229
// sStu := true ;
20221: LD_ADDR_EXP 102
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 113 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 113
20236: EQUAL
20237: IFFALSE 20247
// sBazooka := true ;
20239: LD_ADDR_EXP 105
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 114 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 114
20254: EQUAL
20255: IFFALSE 20265
// sMortar := true ;
20257: LD_ADDR_EXP 106
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 115 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 115
20272: EQUAL
20273: IFFALSE 20283
// sRanger := true ;
20275: LD_ADDR_EXP 116
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 116 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 116
20290: EQUAL
20291: IFFALSE 20301
// sComputer := true ;
20293: LD_ADDR_EXP 117
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 117 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 117
20308: EQUAL
20309: IFFALSE 20319
// s30 := true ;
20311: LD_ADDR_EXP 118
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 118 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 118
20326: EQUAL
20327: IFFALSE 20337
// s60 := true ;
20329: LD_ADDR_EXP 119
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// end ; if p2 = hack_mode then
20337: LD_VAR 0 2
20341: PUSH
20342: LD_INT 101
20344: EQUAL
20345: IFFALSE 20473
// begin case p3 of 1 :
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 1
20354: DOUBLE
20355: EQUAL
20356: IFTRUE 20360
20358: GO 20367
20360: POP
// hHackUnlimitedResources ; 2 :
20361: CALL 32620 0 0
20365: GO 20473
20367: LD_INT 2
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20382
20375: POP
// hHackSetLevel10 ; 3 :
20376: CALL 32753 0 0
20380: GO 20473
20382: LD_INT 3
20384: DOUBLE
20385: EQUAL
20386: IFTRUE 20390
20388: GO 20397
20390: POP
// hHackSetLevel10YourUnits ; 4 :
20391: CALL 32838 0 0
20395: GO 20473
20397: LD_INT 4
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20412
20405: POP
// hHackInvincible ; 5 :
20406: CALL 33286 0 0
20410: GO 20473
20412: LD_INT 5
20414: DOUBLE
20415: EQUAL
20416: IFTRUE 20420
20418: GO 20427
20420: POP
// hHackInvisible ; 6 :
20421: CALL 33397 0 0
20425: GO 20473
20427: LD_INT 6
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20442
20435: POP
// hHackChangeYourSide ; 7 :
20436: CALL 33454 0 0
20440: GO 20473
20442: LD_INT 7
20444: DOUBLE
20445: EQUAL
20446: IFTRUE 20450
20448: GO 20457
20450: POP
// hHackChangeUnitSide ; 8 :
20451: CALL 33496 0 0
20455: GO 20473
20457: LD_INT 8
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20472
20465: POP
// hHackFog ; end ;
20466: CALL 33597 0 0
20470: GO 20473
20472: POP
// end ; if p2 = game_save_mode then
20473: LD_VAR 0 2
20477: PUSH
20478: LD_INT 102
20480: EQUAL
20481: IFFALSE 20536
// begin if p3 = 1 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 1
20490: EQUAL
20491: IFFALSE 20503
// globalGameSaveCounter := p4 ;
20493: LD_ADDR_EXP 62
20497: PUSH
20498: LD_VAR 0 4
20502: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 2
20510: EQUAL
20511: PUSH
20512: LD_EXP 62
20516: AND
20517: IFFALSE 20536
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20519: LD_STRING setGameSaveCounter(
20521: PUSH
20522: LD_EXP 62
20526: STR
20527: PUSH
20528: LD_STRING )
20530: STR
20531: PPUSH
20532: CALL_OW 559
// end ; end ;
20536: LD_VAR 0 7
20540: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20541: LD_INT 0
20543: PPUSH
// streamModeActive := false ;
20544: LD_ADDR_EXP 63
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// normalCounter := 36 ;
20552: LD_ADDR_EXP 64
20556: PUSH
20557: LD_INT 36
20559: ST_TO_ADDR
// hardcoreCounter := 18 ;
20560: LD_ADDR_EXP 65
20564: PUSH
20565: LD_INT 18
20567: ST_TO_ADDR
// sRocket := false ;
20568: LD_ADDR_EXP 68
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sSpeed := false ;
20576: LD_ADDR_EXP 67
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sEngine := false ;
20584: LD_ADDR_EXP 69
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sSpec := false ;
20592: LD_ADDR_EXP 66
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sLevel := false ;
20600: LD_ADDR_EXP 70
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sArmoury := false ;
20608: LD_ADDR_EXP 71
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sRadar := false ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sBunker := false ;
20624: LD_ADDR_EXP 73
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// sHack := false ;
20632: LD_ADDR_EXP 74
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// sFire := false ;
20640: LD_ADDR_EXP 75
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// sRefresh := false ;
20648: LD_ADDR_EXP 76
20652: PUSH
20653: LD_INT 0
20655: ST_TO_ADDR
// sExp := false ;
20656: LD_ADDR_EXP 77
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// sDepot := false ;
20664: LD_ADDR_EXP 78
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sFlag := false ;
20672: LD_ADDR_EXP 79
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sKamikadze := false ;
20680: LD_ADDR_EXP 87
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sTroll := false ;
20688: LD_ADDR_EXP 88
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sSlow := false ;
20696: LD_ADDR_EXP 89
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sLack := false ;
20704: LD_ADDR_EXP 90
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sTank := false ;
20712: LD_ADDR_EXP 92
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sRemote := false ;
20720: LD_ADDR_EXP 93
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sPowell := false ;
20728: LD_ADDR_EXP 94
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sTeleport := false ;
20736: LD_ADDR_EXP 97
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sOilTower := false ;
20744: LD_ADDR_EXP 99
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sShovel := false ;
20752: LD_ADDR_EXP 100
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// sSheik := false ;
20760: LD_ADDR_EXP 101
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// sEarthquake := false ;
20768: LD_ADDR_EXP 103
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// sAI := false ;
20776: LD_ADDR_EXP 104
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// sCargo := false ;
20784: LD_ADDR_EXP 107
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// sDLaser := false ;
20792: LD_ADDR_EXP 108
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// sExchange := false ;
20800: LD_ADDR_EXP 109
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// sFac := false ;
20808: LD_ADDR_EXP 110
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// sPower := false ;
20816: LD_ADDR_EXP 111
20820: PUSH
20821: LD_INT 0
20823: ST_TO_ADDR
// sRandom := false ;
20824: LD_ADDR_EXP 112
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// sShield := false ;
20832: LD_ADDR_EXP 113
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sTime := false ;
20840: LD_ADDR_EXP 114
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sTools := false ;
20848: LD_ADDR_EXP 115
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sSold := false ;
20856: LD_ADDR_EXP 80
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// sDiff := false ;
20864: LD_ADDR_EXP 81
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sFog := false ;
20872: LD_ADDR_EXP 84
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sReset := false ;
20880: LD_ADDR_EXP 85
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sSun := false ;
20888: LD_ADDR_EXP 86
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sTiger := false ;
20896: LD_ADDR_EXP 82
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sBomb := false ;
20904: LD_ADDR_EXP 83
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sWound := false ;
20912: LD_ADDR_EXP 91
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sBetray := false ;
20920: LD_ADDR_EXP 95
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sContamin := false ;
20928: LD_ADDR_EXP 96
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sOil := false ;
20936: LD_ADDR_EXP 98
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sStu := false ;
20944: LD_ADDR_EXP 102
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sBazooka := false ;
20952: LD_ADDR_EXP 105
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sMortar := false ;
20960: LD_ADDR_EXP 106
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sRanger := false ;
20968: LD_ADDR_EXP 116
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sComputer := false ;
20976: LD_ADDR_EXP 117
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// s30 := false ;
20984: LD_ADDR_EXP 118
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// s60 := false ;
20992: LD_ADDR_EXP 119
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// end ;
21000: LD_VAR 0 1
21004: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21005: LD_INT 0
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
// result := [ ] ;
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: EMPTY
21020: ST_TO_ADDR
// if campaign_id = 1 then
21021: LD_OWVAR 69
21025: PUSH
21026: LD_INT 1
21028: EQUAL
21029: IFFALSE 24195
// begin case mission_number of 1 :
21031: LD_OWVAR 70
21035: PUSH
21036: LD_INT 1
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21120
21044: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 15
21064: PUSH
21065: LD_INT 16
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_INT 23
21073: PUSH
21074: LD_INT 26
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 101
21090: PUSH
21091: LD_INT 102
21093: PUSH
21094: LD_INT 106
21096: PUSH
21097: LD_INT 116
21099: PUSH
21100: LD_INT 117
21102: PUSH
21103: LD_INT 118
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 24193
21120: LD_INT 2
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21212
21128: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: LD_INT 4
21139: PUSH
21140: LD_INT 11
21142: PUSH
21143: LD_INT 12
21145: PUSH
21146: LD_INT 15
21148: PUSH
21149: LD_INT 16
21151: PUSH
21152: LD_INT 22
21154: PUSH
21155: LD_INT 23
21157: PUSH
21158: LD_INT 26
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 101
21174: PUSH
21175: LD_INT 102
21177: PUSH
21178: LD_INT 105
21180: PUSH
21181: LD_INT 106
21183: PUSH
21184: LD_INT 108
21186: PUSH
21187: LD_INT 116
21189: PUSH
21190: LD_INT 117
21192: PUSH
21193: LD_INT 118
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 24193
21212: LD_INT 3
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21308
21220: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21221: LD_ADDR_VAR 0 2
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: LD_INT 4
21231: PUSH
21232: LD_INT 5
21234: PUSH
21235: LD_INT 11
21237: PUSH
21238: LD_INT 12
21240: PUSH
21241: LD_INT 15
21243: PUSH
21244: LD_INT 16
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_INT 26
21252: PUSH
21253: LD_INT 36
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 105
21276: PUSH
21277: LD_INT 106
21279: PUSH
21280: LD_INT 108
21282: PUSH
21283: LD_INT 116
21285: PUSH
21286: LD_INT 117
21288: PUSH
21289: LD_INT 118
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 24193
21308: LD_INT 4
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21412
21316: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 8
21333: PUSH
21334: LD_INT 11
21336: PUSH
21337: LD_INT 12
21339: PUSH
21340: LD_INT 15
21342: PUSH
21343: LD_INT 16
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 26
21354: PUSH
21355: LD_INT 36
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 101
21374: PUSH
21375: LD_INT 102
21377: PUSH
21378: LD_INT 105
21380: PUSH
21381: LD_INT 106
21383: PUSH
21384: LD_INT 108
21386: PUSH
21387: LD_INT 116
21389: PUSH
21390: LD_INT 117
21392: PUSH
21393: LD_INT 118
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: ST_TO_ADDR
21410: GO 24193
21412: LD_INT 5
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21532
21420: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21421: LD_ADDR_VAR 0 2
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 4
21431: PUSH
21432: LD_INT 5
21434: PUSH
21435: LD_INT 6
21437: PUSH
21438: LD_INT 8
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 23
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 26
21464: PUSH
21465: LD_INT 36
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 101
21486: PUSH
21487: LD_INT 102
21489: PUSH
21490: LD_INT 105
21492: PUSH
21493: LD_INT 106
21495: PUSH
21496: LD_INT 108
21498: PUSH
21499: LD_INT 109
21501: PUSH
21502: LD_INT 112
21504: PUSH
21505: LD_INT 116
21507: PUSH
21508: LD_INT 117
21510: PUSH
21511: LD_INT 118
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 24193
21532: LD_INT 6
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21672
21540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 4
21551: PUSH
21552: LD_INT 5
21554: PUSH
21555: LD_INT 6
21557: PUSH
21558: LD_INT 8
21560: PUSH
21561: LD_INT 11
21563: PUSH
21564: LD_INT 12
21566: PUSH
21567: LD_INT 15
21569: PUSH
21570: LD_INT 16
21572: PUSH
21573: LD_INT 20
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_INT 23
21584: PUSH
21585: LD_INT 25
21587: PUSH
21588: LD_INT 26
21590: PUSH
21591: LD_INT 30
21593: PUSH
21594: LD_INT 31
21596: PUSH
21597: LD_INT 32
21599: PUSH
21600: LD_INT 36
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 101
21626: PUSH
21627: LD_INT 102
21629: PUSH
21630: LD_INT 105
21632: PUSH
21633: LD_INT 106
21635: PUSH
21636: LD_INT 108
21638: PUSH
21639: LD_INT 109
21641: PUSH
21642: LD_INT 112
21644: PUSH
21645: LD_INT 116
21647: PUSH
21648: LD_INT 117
21650: PUSH
21651: LD_INT 118
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 24193
21672: LD_INT 7
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21792
21680: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21681: LD_ADDR_VAR 0 2
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: LD_INT 7
21697: PUSH
21698: LD_INT 11
21700: PUSH
21701: LD_INT 12
21703: PUSH
21704: LD_INT 15
21706: PUSH
21707: LD_INT 16
21709: PUSH
21710: LD_INT 20
21712: PUSH
21713: LD_INT 21
21715: PUSH
21716: LD_INT 22
21718: PUSH
21719: LD_INT 23
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 26
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 101
21746: PUSH
21747: LD_INT 102
21749: PUSH
21750: LD_INT 103
21752: PUSH
21753: LD_INT 105
21755: PUSH
21756: LD_INT 106
21758: PUSH
21759: LD_INT 108
21761: PUSH
21762: LD_INT 112
21764: PUSH
21765: LD_INT 116
21767: PUSH
21768: LD_INT 117
21770: PUSH
21771: LD_INT 118
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 24193
21792: LD_INT 8
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21940
21800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: LD_INT 7
21820: PUSH
21821: LD_INT 8
21823: PUSH
21824: LD_INT 11
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 15
21832: PUSH
21833: LD_INT 16
21835: PUSH
21836: LD_INT 20
21838: PUSH
21839: LD_INT 21
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_INT 23
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 26
21853: PUSH
21854: LD_INT 30
21856: PUSH
21857: LD_INT 31
21859: PUSH
21860: LD_INT 32
21862: PUSH
21863: LD_INT 36
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 101
21890: PUSH
21891: LD_INT 102
21893: PUSH
21894: LD_INT 103
21896: PUSH
21897: LD_INT 105
21899: PUSH
21900: LD_INT 106
21902: PUSH
21903: LD_INT 108
21905: PUSH
21906: LD_INT 109
21908: PUSH
21909: LD_INT 112
21911: PUSH
21912: LD_INT 116
21914: PUSH
21915: LD_INT 117
21917: PUSH
21918: LD_INT 118
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: ST_TO_ADDR
21938: GO 24193
21940: LD_INT 9
21942: DOUBLE
21943: EQUAL
21944: IFTRUE 21948
21946: GO 22096
21948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 4
21959: PUSH
21960: LD_INT 5
21962: PUSH
21963: LD_INT 6
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 8
21971: PUSH
21972: LD_INT 11
21974: PUSH
21975: LD_INT 12
21977: PUSH
21978: LD_INT 15
21980: PUSH
21981: LD_INT 16
21983: PUSH
21984: LD_INT 20
21986: PUSH
21987: LD_INT 21
21989: PUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 23
21995: PUSH
21996: LD_INT 25
21998: PUSH
21999: LD_INT 26
22001: PUSH
22002: LD_INT 28
22004: PUSH
22005: LD_INT 30
22007: PUSH
22008: LD_INT 31
22010: PUSH
22011: LD_INT 32
22013: PUSH
22014: LD_INT 36
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 101
22042: PUSH
22043: LD_INT 102
22045: PUSH
22046: LD_INT 103
22048: PUSH
22049: LD_INT 105
22051: PUSH
22052: LD_INT 106
22054: PUSH
22055: LD_INT 108
22057: PUSH
22058: LD_INT 109
22060: PUSH
22061: LD_INT 112
22063: PUSH
22064: LD_INT 114
22066: PUSH
22067: LD_INT 116
22069: PUSH
22070: LD_INT 117
22072: PUSH
22073: LD_INT 118
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: ST_TO_ADDR
22094: GO 24193
22096: LD_INT 10
22098: DOUBLE
22099: EQUAL
22100: IFTRUE 22104
22102: GO 22300
22104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22105: LD_ADDR_VAR 0 2
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 4
22115: PUSH
22116: LD_INT 5
22118: PUSH
22119: LD_INT 6
22121: PUSH
22122: LD_INT 7
22124: PUSH
22125: LD_INT 8
22127: PUSH
22128: LD_INT 9
22130: PUSH
22131: LD_INT 10
22133: PUSH
22134: LD_INT 11
22136: PUSH
22137: LD_INT 12
22139: PUSH
22140: LD_INT 13
22142: PUSH
22143: LD_INT 14
22145: PUSH
22146: LD_INT 15
22148: PUSH
22149: LD_INT 16
22151: PUSH
22152: LD_INT 17
22154: PUSH
22155: LD_INT 18
22157: PUSH
22158: LD_INT 19
22160: PUSH
22161: LD_INT 20
22163: PUSH
22164: LD_INT 21
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 24
22175: PUSH
22176: LD_INT 25
22178: PUSH
22179: LD_INT 26
22181: PUSH
22182: LD_INT 28
22184: PUSH
22185: LD_INT 30
22187: PUSH
22188: LD_INT 31
22190: PUSH
22191: LD_INT 32
22193: PUSH
22194: LD_INT 36
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 101
22230: PUSH
22231: LD_INT 102
22233: PUSH
22234: LD_INT 103
22236: PUSH
22237: LD_INT 104
22239: PUSH
22240: LD_INT 105
22242: PUSH
22243: LD_INT 106
22245: PUSH
22246: LD_INT 107
22248: PUSH
22249: LD_INT 108
22251: PUSH
22252: LD_INT 109
22254: PUSH
22255: LD_INT 110
22257: PUSH
22258: LD_INT 111
22260: PUSH
22261: LD_INT 112
22263: PUSH
22264: LD_INT 114
22266: PUSH
22267: LD_INT 116
22269: PUSH
22270: LD_INT 117
22272: PUSH
22273: LD_INT 118
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: ST_TO_ADDR
22298: GO 24193
22300: LD_INT 11
22302: DOUBLE
22303: EQUAL
22304: IFTRUE 22308
22306: GO 22512
22308: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: LD_INT 4
22322: PUSH
22323: LD_INT 5
22325: PUSH
22326: LD_INT 6
22328: PUSH
22329: LD_INT 7
22331: PUSH
22332: LD_INT 8
22334: PUSH
22335: LD_INT 9
22337: PUSH
22338: LD_INT 10
22340: PUSH
22341: LD_INT 11
22343: PUSH
22344: LD_INT 12
22346: PUSH
22347: LD_INT 13
22349: PUSH
22350: LD_INT 14
22352: PUSH
22353: LD_INT 15
22355: PUSH
22356: LD_INT 16
22358: PUSH
22359: LD_INT 17
22361: PUSH
22362: LD_INT 18
22364: PUSH
22365: LD_INT 19
22367: PUSH
22368: LD_INT 20
22370: PUSH
22371: LD_INT 21
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 23
22379: PUSH
22380: LD_INT 24
22382: PUSH
22383: LD_INT 25
22385: PUSH
22386: LD_INT 26
22388: PUSH
22389: LD_INT 28
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 31
22397: PUSH
22398: LD_INT 32
22400: PUSH
22401: LD_INT 34
22403: PUSH
22404: LD_INT 36
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 101
22442: PUSH
22443: LD_INT 102
22445: PUSH
22446: LD_INT 103
22448: PUSH
22449: LD_INT 104
22451: PUSH
22452: LD_INT 105
22454: PUSH
22455: LD_INT 106
22457: PUSH
22458: LD_INT 107
22460: PUSH
22461: LD_INT 108
22463: PUSH
22464: LD_INT 109
22466: PUSH
22467: LD_INT 110
22469: PUSH
22470: LD_INT 111
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 114
22478: PUSH
22479: LD_INT 116
22481: PUSH
22482: LD_INT 117
22484: PUSH
22485: LD_INT 118
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 24193
22512: LD_INT 12
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22740
22520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22521: LD_ADDR_VAR 0 2
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 4
22537: PUSH
22538: LD_INT 5
22540: PUSH
22541: LD_INT 6
22543: PUSH
22544: LD_INT 7
22546: PUSH
22547: LD_INT 8
22549: PUSH
22550: LD_INT 9
22552: PUSH
22553: LD_INT 10
22555: PUSH
22556: LD_INT 11
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: LD_INT 13
22564: PUSH
22565: LD_INT 14
22567: PUSH
22568: LD_INT 15
22570: PUSH
22571: LD_INT 16
22573: PUSH
22574: LD_INT 17
22576: PUSH
22577: LD_INT 18
22579: PUSH
22580: LD_INT 19
22582: PUSH
22583: LD_INT 20
22585: PUSH
22586: LD_INT 21
22588: PUSH
22589: LD_INT 22
22591: PUSH
22592: LD_INT 23
22594: PUSH
22595: LD_INT 24
22597: PUSH
22598: LD_INT 25
22600: PUSH
22601: LD_INT 26
22603: PUSH
22604: LD_INT 27
22606: PUSH
22607: LD_INT 28
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: LD_INT 31
22615: PUSH
22616: LD_INT 32
22618: PUSH
22619: LD_INT 33
22621: PUSH
22622: LD_INT 34
22624: PUSH
22625: LD_INT 36
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 101
22666: PUSH
22667: LD_INT 102
22669: PUSH
22670: LD_INT 103
22672: PUSH
22673: LD_INT 104
22675: PUSH
22676: LD_INT 105
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 107
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 110
22693: PUSH
22694: LD_INT 111
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 113
22702: PUSH
22703: LD_INT 114
22705: PUSH
22706: LD_INT 116
22708: PUSH
22709: LD_INT 117
22711: PUSH
22712: LD_INT 118
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 24193
22740: LD_INT 13
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22956
22748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22749: LD_ADDR_VAR 0 2
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: LD_INT 4
22765: PUSH
22766: LD_INT 5
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: LD_INT 9
22774: PUSH
22775: LD_INT 10
22777: PUSH
22778: LD_INT 11
22780: PUSH
22781: LD_INT 12
22783: PUSH
22784: LD_INT 14
22786: PUSH
22787: LD_INT 15
22789: PUSH
22790: LD_INT 16
22792: PUSH
22793: LD_INT 17
22795: PUSH
22796: LD_INT 18
22798: PUSH
22799: LD_INT 19
22801: PUSH
22802: LD_INT 20
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 24
22816: PUSH
22817: LD_INT 25
22819: PUSH
22820: LD_INT 26
22822: PUSH
22823: LD_INT 27
22825: PUSH
22826: LD_INT 28
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 31
22834: PUSH
22835: LD_INT 32
22837: PUSH
22838: LD_INT 33
22840: PUSH
22841: LD_INT 34
22843: PUSH
22844: LD_INT 36
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 101
22882: PUSH
22883: LD_INT 102
22885: PUSH
22886: LD_INT 103
22888: PUSH
22889: LD_INT 104
22891: PUSH
22892: LD_INT 105
22894: PUSH
22895: LD_INT 106
22897: PUSH
22898: LD_INT 107
22900: PUSH
22901: LD_INT 108
22903: PUSH
22904: LD_INT 109
22906: PUSH
22907: LD_INT 110
22909: PUSH
22910: LD_INT 111
22912: PUSH
22913: LD_INT 112
22915: PUSH
22916: LD_INT 113
22918: PUSH
22919: LD_INT 114
22921: PUSH
22922: LD_INT 116
22924: PUSH
22925: LD_INT 117
22927: PUSH
22928: LD_INT 118
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: ST_TO_ADDR
22954: GO 24193
22956: LD_INT 14
22958: DOUBLE
22959: EQUAL
22960: IFTRUE 22964
22962: GO 23188
22964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22965: LD_ADDR_VAR 0 2
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 4
22981: PUSH
22982: LD_INT 5
22984: PUSH
22985: LD_INT 6
22987: PUSH
22988: LD_INT 7
22990: PUSH
22991: LD_INT 8
22993: PUSH
22994: LD_INT 9
22996: PUSH
22997: LD_INT 10
22999: PUSH
23000: LD_INT 11
23002: PUSH
23003: LD_INT 12
23005: PUSH
23006: LD_INT 13
23008: PUSH
23009: LD_INT 14
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 17
23020: PUSH
23021: LD_INT 18
23023: PUSH
23024: LD_INT 19
23026: PUSH
23027: LD_INT 20
23029: PUSH
23030: LD_INT 21
23032: PUSH
23033: LD_INT 22
23035: PUSH
23036: LD_INT 23
23038: PUSH
23039: LD_INT 24
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: LD_INT 27
23050: PUSH
23051: LD_INT 28
23053: PUSH
23054: LD_INT 29
23056: PUSH
23057: LD_INT 30
23059: PUSH
23060: LD_INT 31
23062: PUSH
23063: LD_INT 32
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 34
23071: PUSH
23072: LD_INT 36
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 101
23114: PUSH
23115: LD_INT 102
23117: PUSH
23118: LD_INT 103
23120: PUSH
23121: LD_INT 104
23123: PUSH
23124: LD_INT 105
23126: PUSH
23127: LD_INT 106
23129: PUSH
23130: LD_INT 107
23132: PUSH
23133: LD_INT 108
23135: PUSH
23136: LD_INT 109
23138: PUSH
23139: LD_INT 110
23141: PUSH
23142: LD_INT 111
23144: PUSH
23145: LD_INT 112
23147: PUSH
23148: LD_INT 113
23150: PUSH
23151: LD_INT 114
23153: PUSH
23154: LD_INT 116
23156: PUSH
23157: LD_INT 117
23159: PUSH
23160: LD_INT 118
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: ST_TO_ADDR
23186: GO 24193
23188: LD_INT 15
23190: DOUBLE
23191: EQUAL
23192: IFTRUE 23196
23194: GO 23420
23196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23197: LD_ADDR_VAR 0 2
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 4
23213: PUSH
23214: LD_INT 5
23216: PUSH
23217: LD_INT 6
23219: PUSH
23220: LD_INT 7
23222: PUSH
23223: LD_INT 8
23225: PUSH
23226: LD_INT 9
23228: PUSH
23229: LD_INT 10
23231: PUSH
23232: LD_INT 11
23234: PUSH
23235: LD_INT 12
23237: PUSH
23238: LD_INT 13
23240: PUSH
23241: LD_INT 14
23243: PUSH
23244: LD_INT 15
23246: PUSH
23247: LD_INT 16
23249: PUSH
23250: LD_INT 17
23252: PUSH
23253: LD_INT 18
23255: PUSH
23256: LD_INT 19
23258: PUSH
23259: LD_INT 20
23261: PUSH
23262: LD_INT 21
23264: PUSH
23265: LD_INT 22
23267: PUSH
23268: LD_INT 23
23270: PUSH
23271: LD_INT 24
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 26
23279: PUSH
23280: LD_INT 27
23282: PUSH
23283: LD_INT 28
23285: PUSH
23286: LD_INT 29
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 31
23294: PUSH
23295: LD_INT 32
23297: PUSH
23298: LD_INT 33
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: LD_INT 36
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 101
23346: PUSH
23347: LD_INT 102
23349: PUSH
23350: LD_INT 103
23352: PUSH
23353: LD_INT 104
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 107
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 109
23370: PUSH
23371: LD_INT 110
23373: PUSH
23374: LD_INT 111
23376: PUSH
23377: LD_INT 112
23379: PUSH
23380: LD_INT 113
23382: PUSH
23383: LD_INT 114
23385: PUSH
23386: LD_INT 116
23388: PUSH
23389: LD_INT 117
23391: PUSH
23392: LD_INT 118
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 24193
23420: LD_INT 16
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23564
23428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 4
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: LD_INT 7
23445: PUSH
23446: LD_INT 11
23448: PUSH
23449: LD_INT 12
23451: PUSH
23452: LD_INT 15
23454: PUSH
23455: LD_INT 16
23457: PUSH
23458: LD_INT 20
23460: PUSH
23461: LD_INT 21
23463: PUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 23
23469: PUSH
23470: LD_INT 25
23472: PUSH
23473: LD_INT 26
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 31
23481: PUSH
23482: LD_INT 32
23484: PUSH
23485: LD_INT 33
23487: PUSH
23488: LD_INT 34
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 101
23514: PUSH
23515: LD_INT 102
23517: PUSH
23518: LD_INT 103
23520: PUSH
23521: LD_INT 106
23523: PUSH
23524: LD_INT 108
23526: PUSH
23527: LD_INT 112
23529: PUSH
23530: LD_INT 113
23532: PUSH
23533: LD_INT 114
23535: PUSH
23536: LD_INT 116
23538: PUSH
23539: LD_INT 117
23541: PUSH
23542: LD_INT 118
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 24193
23564: LD_INT 17
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23796
23572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 4
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: LD_INT 6
23595: PUSH
23596: LD_INT 7
23598: PUSH
23599: LD_INT 8
23601: PUSH
23602: LD_INT 9
23604: PUSH
23605: LD_INT 10
23607: PUSH
23608: LD_INT 11
23610: PUSH
23611: LD_INT 12
23613: PUSH
23614: LD_INT 13
23616: PUSH
23617: LD_INT 14
23619: PUSH
23620: LD_INT 15
23622: PUSH
23623: LD_INT 16
23625: PUSH
23626: LD_INT 17
23628: PUSH
23629: LD_INT 18
23631: PUSH
23632: LD_INT 19
23634: PUSH
23635: LD_INT 20
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 22
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 24
23649: PUSH
23650: LD_INT 25
23652: PUSH
23653: LD_INT 26
23655: PUSH
23656: LD_INT 27
23658: PUSH
23659: LD_INT 28
23661: PUSH
23662: LD_INT 29
23664: PUSH
23665: LD_INT 30
23667: PUSH
23668: LD_INT 31
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 33
23676: PUSH
23677: LD_INT 34
23679: PUSH
23680: LD_INT 36
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 101
23722: PUSH
23723: LD_INT 102
23725: PUSH
23726: LD_INT 103
23728: PUSH
23729: LD_INT 104
23731: PUSH
23732: LD_INT 105
23734: PUSH
23735: LD_INT 106
23737: PUSH
23738: LD_INT 107
23740: PUSH
23741: LD_INT 108
23743: PUSH
23744: LD_INT 109
23746: PUSH
23747: LD_INT 110
23749: PUSH
23750: LD_INT 111
23752: PUSH
23753: LD_INT 112
23755: PUSH
23756: LD_INT 113
23758: PUSH
23759: LD_INT 114
23761: PUSH
23762: LD_INT 116
23764: PUSH
23765: LD_INT 117
23767: PUSH
23768: LD_INT 118
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: ST_TO_ADDR
23794: GO 24193
23796: LD_INT 18
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23952
23804: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: LD_INT 7
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 15
23830: PUSH
23831: LD_INT 16
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 25
23848: PUSH
23849: LD_INT 26
23851: PUSH
23852: LD_INT 30
23854: PUSH
23855: LD_INT 31
23857: PUSH
23858: LD_INT 32
23860: PUSH
23861: LD_INT 33
23863: PUSH
23864: LD_INT 34
23866: PUSH
23867: LD_INT 35
23869: PUSH
23870: LD_INT 36
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 103
23904: PUSH
23905: LD_INT 106
23907: PUSH
23908: LD_INT 108
23910: PUSH
23911: LD_INT 112
23913: PUSH
23914: LD_INT 113
23916: PUSH
23917: LD_INT 114
23919: PUSH
23920: LD_INT 115
23922: PUSH
23923: LD_INT 116
23925: PUSH
23926: LD_INT 117
23928: PUSH
23929: LD_INT 118
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
23950: GO 24193
23952: LD_INT 19
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 24192
23960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23961: LD_ADDR_VAR 0 2
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: LD_INT 4
23977: PUSH
23978: LD_INT 5
23980: PUSH
23981: LD_INT 6
23983: PUSH
23984: LD_INT 7
23986: PUSH
23987: LD_INT 8
23989: PUSH
23990: LD_INT 9
23992: PUSH
23993: LD_INT 10
23995: PUSH
23996: LD_INT 11
23998: PUSH
23999: LD_INT 12
24001: PUSH
24002: LD_INT 13
24004: PUSH
24005: LD_INT 14
24007: PUSH
24008: LD_INT 15
24010: PUSH
24011: LD_INT 16
24013: PUSH
24014: LD_INT 17
24016: PUSH
24017: LD_INT 18
24019: PUSH
24020: LD_INT 19
24022: PUSH
24023: LD_INT 20
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 22
24031: PUSH
24032: LD_INT 23
24034: PUSH
24035: LD_INT 24
24037: PUSH
24038: LD_INT 25
24040: PUSH
24041: LD_INT 26
24043: PUSH
24044: LD_INT 27
24046: PUSH
24047: LD_INT 28
24049: PUSH
24050: LD_INT 29
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 31
24058: PUSH
24059: LD_INT 32
24061: PUSH
24062: LD_INT 33
24064: PUSH
24065: LD_INT 34
24067: PUSH
24068: LD_INT 35
24070: PUSH
24071: LD_INT 36
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 101
24114: PUSH
24115: LD_INT 102
24117: PUSH
24118: LD_INT 103
24120: PUSH
24121: LD_INT 104
24123: PUSH
24124: LD_INT 105
24126: PUSH
24127: LD_INT 106
24129: PUSH
24130: LD_INT 107
24132: PUSH
24133: LD_INT 108
24135: PUSH
24136: LD_INT 109
24138: PUSH
24139: LD_INT 110
24141: PUSH
24142: LD_INT 111
24144: PUSH
24145: LD_INT 112
24147: PUSH
24148: LD_INT 113
24150: PUSH
24151: LD_INT 114
24153: PUSH
24154: LD_INT 115
24156: PUSH
24157: LD_INT 116
24159: PUSH
24160: LD_INT 117
24162: PUSH
24163: LD_INT 118
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: ST_TO_ADDR
24190: GO 24193
24192: POP
// end else
24193: GO 24424
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24195: LD_ADDR_VAR 0 2
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 4
24211: PUSH
24212: LD_INT 5
24214: PUSH
24215: LD_INT 6
24217: PUSH
24218: LD_INT 7
24220: PUSH
24221: LD_INT 8
24223: PUSH
24224: LD_INT 9
24226: PUSH
24227: LD_INT 10
24229: PUSH
24230: LD_INT 11
24232: PUSH
24233: LD_INT 12
24235: PUSH
24236: LD_INT 13
24238: PUSH
24239: LD_INT 14
24241: PUSH
24242: LD_INT 15
24244: PUSH
24245: LD_INT 16
24247: PUSH
24248: LD_INT 17
24250: PUSH
24251: LD_INT 18
24253: PUSH
24254: LD_INT 19
24256: PUSH
24257: LD_INT 20
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 24
24271: PUSH
24272: LD_INT 25
24274: PUSH
24275: LD_INT 26
24277: PUSH
24278: LD_INT 27
24280: PUSH
24281: LD_INT 28
24283: PUSH
24284: LD_INT 29
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 31
24292: PUSH
24293: LD_INT 32
24295: PUSH
24296: LD_INT 33
24298: PUSH
24299: LD_INT 34
24301: PUSH
24302: LD_INT 35
24304: PUSH
24305: LD_INT 36
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 101
24348: PUSH
24349: LD_INT 102
24351: PUSH
24352: LD_INT 103
24354: PUSH
24355: LD_INT 104
24357: PUSH
24358: LD_INT 105
24360: PUSH
24361: LD_INT 106
24363: PUSH
24364: LD_INT 107
24366: PUSH
24367: LD_INT 108
24369: PUSH
24370: LD_INT 109
24372: PUSH
24373: LD_INT 110
24375: PUSH
24376: LD_INT 111
24378: PUSH
24379: LD_INT 112
24381: PUSH
24382: LD_INT 113
24384: PUSH
24385: LD_INT 114
24387: PUSH
24388: LD_INT 115
24390: PUSH
24391: LD_INT 116
24393: PUSH
24394: LD_INT 117
24396: PUSH
24397: LD_INT 118
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
// if result then
24424: LD_VAR 0 2
24428: IFFALSE 25214
// begin normal :=  ;
24430: LD_ADDR_VAR 0 5
24434: PUSH
24435: LD_STRING 
24437: ST_TO_ADDR
// hardcore :=  ;
24438: LD_ADDR_VAR 0 6
24442: PUSH
24443: LD_STRING 
24445: ST_TO_ADDR
// active :=  ;
24446: LD_ADDR_VAR 0 7
24450: PUSH
24451: LD_STRING 
24453: ST_TO_ADDR
// for i = 1 to normalCounter do
24454: LD_ADDR_VAR 0 8
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_EXP 64
24468: PUSH
24469: FOR_TO
24470: IFFALSE 24571
// begin tmp := 0 ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_STRING 0
24479: ST_TO_ADDR
// if result [ 1 ] then
24480: LD_VAR 0 2
24484: PUSH
24485: LD_INT 1
24487: ARRAY
24488: IFFALSE 24553
// if result [ 1 ] [ 1 ] = i then
24490: LD_VAR 0 2
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: PUSH
24503: LD_VAR 0 8
24507: EQUAL
24508: IFFALSE 24553
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: LD_VAR 0 2
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PPUSH
24532: LD_INT 1
24534: PPUSH
24535: CALL_OW 3
24539: PPUSH
24540: CALL_OW 1
24544: ST_TO_ADDR
// tmp := 1 ;
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: LD_STRING 1
24552: ST_TO_ADDR
// end ; normal := normal & tmp ;
24553: LD_ADDR_VAR 0 5
24557: PUSH
24558: LD_VAR 0 5
24562: PUSH
24563: LD_VAR 0 3
24567: STR
24568: ST_TO_ADDR
// end ;
24569: GO 24469
24571: POP
24572: POP
// for i = 1 to hardcoreCounter do
24573: LD_ADDR_VAR 0 8
24577: PUSH
24578: DOUBLE
24579: LD_INT 1
24581: DEC
24582: ST_TO_ADDR
24583: LD_EXP 65
24587: PUSH
24588: FOR_TO
24589: IFFALSE 24694
// begin tmp := 0 ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_STRING 0
24598: ST_TO_ADDR
// if result [ 2 ] then
24599: LD_VAR 0 2
24603: PUSH
24604: LD_INT 2
24606: ARRAY
24607: IFFALSE 24676
// if result [ 2 ] [ 1 ] = 100 + i then
24609: LD_VAR 0 2
24613: PUSH
24614: LD_INT 2
24616: ARRAY
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: PUSH
24622: LD_INT 100
24624: PUSH
24625: LD_VAR 0 8
24629: PLUS
24630: EQUAL
24631: IFFALSE 24676
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_INT 2
24645: PPUSH
24646: LD_VAR 0 2
24650: PUSH
24651: LD_INT 2
24653: ARRAY
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 3
24662: PPUSH
24663: CALL_OW 1
24667: ST_TO_ADDR
// tmp := 1 ;
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_STRING 1
24675: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24676: LD_ADDR_VAR 0 6
24680: PUSH
24681: LD_VAR 0 6
24685: PUSH
24686: LD_VAR 0 3
24690: STR
24691: ST_TO_ADDR
// end ;
24692: GO 24588
24694: POP
24695: POP
// if isGameLoad then
24696: LD_VAR 0 1
24700: IFFALSE 25175
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_EXP 68
24711: PUSH
24712: LD_EXP 67
24716: PUSH
24717: LD_EXP 69
24721: PUSH
24722: LD_EXP 66
24726: PUSH
24727: LD_EXP 70
24731: PUSH
24732: LD_EXP 71
24736: PUSH
24737: LD_EXP 72
24741: PUSH
24742: LD_EXP 73
24746: PUSH
24747: LD_EXP 74
24751: PUSH
24752: LD_EXP 75
24756: PUSH
24757: LD_EXP 76
24761: PUSH
24762: LD_EXP 77
24766: PUSH
24767: LD_EXP 78
24771: PUSH
24772: LD_EXP 79
24776: PUSH
24777: LD_EXP 87
24781: PUSH
24782: LD_EXP 88
24786: PUSH
24787: LD_EXP 89
24791: PUSH
24792: LD_EXP 90
24796: PUSH
24797: LD_EXP 92
24801: PUSH
24802: LD_EXP 93
24806: PUSH
24807: LD_EXP 94
24811: PUSH
24812: LD_EXP 97
24816: PUSH
24817: LD_EXP 99
24821: PUSH
24822: LD_EXP 100
24826: PUSH
24827: LD_EXP 101
24831: PUSH
24832: LD_EXP 103
24836: PUSH
24837: LD_EXP 104
24841: PUSH
24842: LD_EXP 107
24846: PUSH
24847: LD_EXP 108
24851: PUSH
24852: LD_EXP 109
24856: PUSH
24857: LD_EXP 110
24861: PUSH
24862: LD_EXP 111
24866: PUSH
24867: LD_EXP 112
24871: PUSH
24872: LD_EXP 113
24876: PUSH
24877: LD_EXP 114
24881: PUSH
24882: LD_EXP 115
24886: PUSH
24887: LD_EXP 80
24891: PUSH
24892: LD_EXP 81
24896: PUSH
24897: LD_EXP 84
24901: PUSH
24902: LD_EXP 85
24906: PUSH
24907: LD_EXP 86
24911: PUSH
24912: LD_EXP 82
24916: PUSH
24917: LD_EXP 83
24921: PUSH
24922: LD_EXP 91
24926: PUSH
24927: LD_EXP 95
24931: PUSH
24932: LD_EXP 96
24936: PUSH
24937: LD_EXP 98
24941: PUSH
24942: LD_EXP 102
24946: PUSH
24947: LD_EXP 105
24951: PUSH
24952: LD_EXP 106
24956: PUSH
24957: LD_EXP 116
24961: PUSH
24962: LD_EXP 117
24966: PUSH
24967: LD_EXP 118
24971: PUSH
24972: LD_EXP 119
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: ST_TO_ADDR
// tmp :=  ;
25033: LD_ADDR_VAR 0 3
25037: PUSH
25038: LD_STRING 
25040: ST_TO_ADDR
// for i = 1 to normalCounter do
25041: LD_ADDR_VAR 0 8
25045: PUSH
25046: DOUBLE
25047: LD_INT 1
25049: DEC
25050: ST_TO_ADDR
25051: LD_EXP 64
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25093
// begin if flags [ i ] then
25059: LD_VAR 0 4
25063: PUSH
25064: LD_VAR 0 8
25068: ARRAY
25069: IFFALSE 25091
// tmp := tmp & i & ; ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_VAR 0 8
25085: STR
25086: PUSH
25087: LD_STRING ;
25089: STR
25090: ST_TO_ADDR
// end ;
25091: GO 25056
25093: POP
25094: POP
// for i = 1 to hardcoreCounter do
25095: LD_ADDR_VAR 0 8
25099: PUSH
25100: DOUBLE
25101: LD_INT 1
25103: DEC
25104: ST_TO_ADDR
25105: LD_EXP 65
25109: PUSH
25110: FOR_TO
25111: IFFALSE 25157
// begin if flags [ normalCounter + i ] then
25113: LD_VAR 0 4
25117: PUSH
25118: LD_EXP 64
25122: PUSH
25123: LD_VAR 0 8
25127: PLUS
25128: ARRAY
25129: IFFALSE 25155
// tmp := tmp & ( 100 + i ) & ; ;
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_VAR 0 3
25140: PUSH
25141: LD_INT 100
25143: PUSH
25144: LD_VAR 0 8
25148: PLUS
25149: STR
25150: PUSH
25151: LD_STRING ;
25153: STR
25154: ST_TO_ADDR
// end ;
25155: GO 25110
25157: POP
25158: POP
// if tmp then
25159: LD_VAR 0 3
25163: IFFALSE 25175
// active := tmp ;
25165: LD_ADDR_VAR 0 7
25169: PUSH
25170: LD_VAR 0 3
25174: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25175: LD_STRING getStreamItemsFromMission("
25177: PUSH
25178: LD_VAR 0 5
25182: STR
25183: PUSH
25184: LD_STRING ","
25186: STR
25187: PUSH
25188: LD_VAR 0 6
25192: STR
25193: PUSH
25194: LD_STRING ","
25196: STR
25197: PUSH
25198: LD_VAR 0 7
25202: STR
25203: PUSH
25204: LD_STRING ")
25206: STR
25207: PPUSH
25208: CALL_OW 559
// end else
25212: GO 25221
// ToLua ( getStreamItemsFromMission("","","") ) ;
25214: LD_STRING getStreamItemsFromMission("","","")
25216: PPUSH
25217: CALL_OW 559
// end ;
25221: LD_VAR 0 2
25225: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25226: LD_EXP 63
25230: PUSH
25231: LD_EXP 68
25235: AND
25236: IFFALSE 25360
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// begin enable ;
25245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25246: LD_ADDR_VAR 0 2
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_OWVAR 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 34
25268: PUSH
25269: LD_INT 7
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 34
25278: PUSH
25279: LD_INT 45
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 34
25288: PUSH
25289: LD_INT 28
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 47
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: ST_TO_ADDR
// if not tmp then
25322: LD_VAR 0 2
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25360
// for i in tmp do
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_VAR 0 2
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25358
// begin SetLives ( i , 0 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_INT 0
25351: PPUSH
25352: CALL_OW 234
// end ;
25356: GO 25341
25358: POP
25359: POP
// end ;
25360: PPOPN 2
25362: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25363: LD_EXP 63
25367: PUSH
25368: LD_EXP 69
25372: AND
25373: IFFALSE 25457
25375: GO 25377
25377: DISABLE
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
// begin enable ;
25382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25383: LD_ADDR_VAR 0 2
25387: PUSH
25388: LD_INT 22
25390: PUSH
25391: LD_OWVAR 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 32
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PPUSH
25414: CALL_OW 69
25418: ST_TO_ADDR
// if not tmp then
25419: LD_VAR 0 2
25423: NOT
25424: IFFALSE 25428
// exit ;
25426: GO 25457
// for i in tmp do
25428: LD_ADDR_VAR 0 1
25432: PUSH
25433: LD_VAR 0 2
25437: PUSH
25438: FOR_IN
25439: IFFALSE 25455
// begin SetLives ( i , 0 ) ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 234
// end ;
25453: GO 25438
25455: POP
25456: POP
// end ;
25457: PPOPN 2
25459: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25460: LD_EXP 63
25464: PUSH
25465: LD_EXP 66
25469: AND
25470: IFFALSE 25563
25472: GO 25474
25474: DISABLE
25475: LD_INT 0
25477: PPUSH
// begin enable ;
25478: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 25
25501: PUSH
25502: LD_INT 5
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 25
25511: PUSH
25512: LD_INT 9
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 25
25521: PUSH
25522: LD_INT 8
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PPUSH
25539: CALL_OW 69
25543: PUSH
25544: FOR_IN
25545: IFFALSE 25561
// begin SetClass ( i , 1 ) ;
25547: LD_VAR 0 1
25551: PPUSH
25552: LD_INT 1
25554: PPUSH
25555: CALL_OW 336
// end ;
25559: GO 25544
25561: POP
25562: POP
// end ;
25563: PPOPN 1
25565: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25566: LD_EXP 63
25570: PUSH
25571: LD_EXP 67
25575: AND
25576: PUSH
25577: LD_OWVAR 65
25581: PUSH
25582: LD_INT 7
25584: LESS
25585: AND
25586: IFFALSE 25600
25588: GO 25590
25590: DISABLE
// begin enable ;
25591: ENABLE
// game_speed := 7 ;
25592: LD_ADDR_OWVAR 65
25596: PUSH
25597: LD_INT 7
25599: ST_TO_ADDR
// end ;
25600: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25601: LD_EXP 63
25605: PUSH
25606: LD_EXP 70
25610: AND
25611: IFFALSE 25813
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_INT 81
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 3
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25813
// if tmp > 5 then
25666: LD_VAR 0 3
25670: PUSH
25671: LD_INT 5
25673: GREATER
25674: IFFALSE 25686
// k := 5 else
25676: LD_ADDR_VAR 0 2
25680: PUSH
25681: LD_INT 5
25683: ST_TO_ADDR
25684: GO 25696
// k := tmp ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_VAR 0 3
25695: ST_TO_ADDR
// for i := 1 to k do
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: DOUBLE
25702: LD_INT 1
25704: DEC
25705: ST_TO_ADDR
25706: LD_VAR 0 2
25710: PUSH
25711: FOR_TO
25712: IFFALSE 25811
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25714: LD_VAR 0 3
25718: PUSH
25719: LD_VAR 0 1
25723: ARRAY
25724: PPUSH
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 4
25732: MOD
25733: PUSH
25734: LD_INT 1
25736: PLUS
25737: PPUSH
25738: CALL_OW 259
25742: PUSH
25743: LD_INT 10
25745: LESS
25746: IFFALSE 25809
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25748: LD_VAR 0 3
25752: PUSH
25753: LD_VAR 0 1
25757: ARRAY
25758: PPUSH
25759: LD_VAR 0 1
25763: PUSH
25764: LD_INT 4
25766: MOD
25767: PUSH
25768: LD_INT 1
25770: PLUS
25771: PPUSH
25772: LD_VAR 0 3
25776: PUSH
25777: LD_VAR 0 1
25781: ARRAY
25782: PPUSH
25783: LD_VAR 0 1
25787: PUSH
25788: LD_INT 4
25790: MOD
25791: PUSH
25792: LD_INT 1
25794: PLUS
25795: PPUSH
25796: CALL_OW 259
25800: PUSH
25801: LD_INT 1
25803: PLUS
25804: PPUSH
25805: CALL_OW 237
25809: GO 25711
25811: POP
25812: POP
// end ;
25813: PPOPN 3
25815: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25816: LD_EXP 63
25820: PUSH
25821: LD_EXP 71
25825: AND
25826: IFFALSE 25846
25828: GO 25830
25830: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25831: LD_INT 4
25833: PPUSH
25834: LD_OWVAR 2
25838: PPUSH
25839: LD_INT 0
25841: PPUSH
25842: CALL_OW 324
25846: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25847: LD_EXP 63
25851: PUSH
25852: LD_EXP 100
25856: AND
25857: IFFALSE 25877
25859: GO 25861
25861: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25862: LD_INT 19
25864: PPUSH
25865: LD_OWVAR 2
25869: PPUSH
25870: LD_INT 0
25872: PPUSH
25873: CALL_OW 324
25877: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25878: LD_EXP 63
25882: PUSH
25883: LD_EXP 72
25887: AND
25888: IFFALSE 25990
25890: GO 25892
25892: DISABLE
25893: LD_INT 0
25895: PPUSH
25896: PPUSH
// begin enable ;
25897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_OWVAR 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 34
25920: PUSH
25921: LD_INT 11
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 30
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 69
25951: ST_TO_ADDR
// if not tmp then
25952: LD_VAR 0 2
25956: NOT
25957: IFFALSE 25961
// exit ;
25959: GO 25990
// for i in tmp do
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 25988
// begin SetLives ( i , 0 ) ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: GO 25971
25988: POP
25989: POP
// end ;
25990: PPOPN 2
25992: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25993: LD_EXP 63
25997: PUSH
25998: LD_EXP 73
26002: AND
26003: IFFALSE 26023
26005: GO 26007
26007: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26008: LD_INT 32
26010: PPUSH
26011: LD_OWVAR 2
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: CALL_OW 324
26023: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26024: LD_EXP 63
26028: PUSH
26029: LD_EXP 74
26033: AND
26034: IFFALSE 26215
26036: GO 26038
26038: DISABLE
26039: LD_INT 0
26041: PPUSH
26042: PPUSH
26043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 33
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: ST_TO_ADDR
// if not tmp then
26080: LD_VAR 0 2
26084: NOT
26085: IFFALSE 26089
// exit ;
26087: GO 26215
// side := 0 ;
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_INT 0
26096: ST_TO_ADDR
// for i := 1 to 8 do
26097: LD_ADDR_VAR 0 1
26101: PUSH
26102: DOUBLE
26103: LD_INT 1
26105: DEC
26106: ST_TO_ADDR
26107: LD_INT 8
26109: PUSH
26110: FOR_TO
26111: IFFALSE 26159
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26113: LD_OWVAR 2
26117: PUSH
26118: LD_VAR 0 1
26122: NONEQUAL
26123: PUSH
26124: LD_OWVAR 2
26128: PPUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 81
26138: PUSH
26139: LD_INT 2
26141: EQUAL
26142: AND
26143: IFFALSE 26157
// begin side := i ;
26145: LD_ADDR_VAR 0 3
26149: PUSH
26150: LD_VAR 0 1
26154: ST_TO_ADDR
// break ;
26155: GO 26159
// end ;
26157: GO 26110
26159: POP
26160: POP
// if not side then
26161: LD_VAR 0 3
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26215
// for i := 1 to tmp do
26170: LD_ADDR_VAR 0 1
26174: PUSH
26175: DOUBLE
26176: LD_INT 1
26178: DEC
26179: ST_TO_ADDR
26180: LD_VAR 0 2
26184: PUSH
26185: FOR_TO
26186: IFFALSE 26213
// if Prob ( 60 ) then
26188: LD_INT 60
26190: PPUSH
26191: CALL_OW 13
26195: IFFALSE 26211
// SetSide ( i , side ) ;
26197: LD_VAR 0 1
26201: PPUSH
26202: LD_VAR 0 3
26206: PPUSH
26207: CALL_OW 235
26211: GO 26185
26213: POP
26214: POP
// end ;
26215: PPOPN 3
26217: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26218: LD_EXP 63
26222: PUSH
26223: LD_EXP 76
26227: AND
26228: IFFALSE 26347
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_INT 22
26243: PUSH
26244: LD_OWVAR 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: LD_INT 23
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 69
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26345
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 257
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 4
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: IN
26321: IFFALSE 26343
// SetClass ( un , rand ( 1 , 4 ) ) ;
26323: LD_VAR 0 1
26327: PPUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_INT 4
26333: PPUSH
26334: CALL_OW 12
26338: PPUSH
26339: CALL_OW 336
26343: GO 26290
26345: POP
26346: POP
// end ;
26347: PPOPN 1
26349: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26350: LD_EXP 63
26354: PUSH
26355: LD_EXP 75
26359: AND
26360: IFFALSE 26439
26362: GO 26364
26364: DISABLE
26365: LD_INT 0
26367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_OWVAR 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 21
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PPUSH
26399: CALL_OW 69
26403: ST_TO_ADDR
// if not tmp then
26404: LD_VAR 0 1
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 1
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 12
26430: ARRAY
26431: PPUSH
26432: LD_INT 100
26434: PPUSH
26435: CALL_OW 234
// end ;
26439: PPOPN 1
26441: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26442: LD_EXP 63
26446: PUSH
26447: LD_EXP 77
26451: AND
26452: IFFALSE 26550
26454: GO 26456
26456: DISABLE
26457: LD_INT 0
26459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26460: LD_ADDR_VAR 0 1
26464: PUSH
26465: LD_INT 22
26467: PUSH
26468: LD_OWVAR 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 21
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: ST_TO_ADDR
// if not tmp then
26496: LD_VAR 0 1
26500: NOT
26501: IFFALSE 26505
// exit ;
26503: GO 26550
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26505: LD_VAR 0 1
26509: PUSH
26510: LD_INT 1
26512: PPUSH
26513: LD_VAR 0 1
26517: PPUSH
26518: CALL_OW 12
26522: ARRAY
26523: PPUSH
26524: LD_INT 1
26526: PPUSH
26527: LD_INT 4
26529: PPUSH
26530: CALL_OW 12
26534: PPUSH
26535: LD_INT 3000
26537: PPUSH
26538: LD_INT 9000
26540: PPUSH
26541: CALL_OW 12
26545: PPUSH
26546: CALL_OW 492
// end ;
26550: PPOPN 1
26552: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26553: LD_EXP 63
26557: PUSH
26558: LD_EXP 78
26562: AND
26563: IFFALSE 26583
26565: GO 26567
26567: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26568: LD_INT 1
26570: PPUSH
26571: LD_OWVAR 2
26575: PPUSH
26576: LD_INT 0
26578: PPUSH
26579: CALL_OW 324
26583: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26584: LD_EXP 63
26588: PUSH
26589: LD_EXP 79
26593: AND
26594: IFFALSE 26677
26596: GO 26598
26598: DISABLE
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 21
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 69
26638: ST_TO_ADDR
// if not tmp then
26639: LD_VAR 0 2
26643: NOT
26644: IFFALSE 26648
// exit ;
26646: GO 26677
// for i in tmp do
26648: LD_ADDR_VAR 0 1
26652: PUSH
26653: LD_VAR 0 2
26657: PUSH
26658: FOR_IN
26659: IFFALSE 26675
// SetBLevel ( i , 10 ) ;
26661: LD_VAR 0 1
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 241
26673: GO 26658
26675: POP
26676: POP
// end ;
26677: PPOPN 2
26679: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26680: LD_EXP 63
26684: PUSH
26685: LD_EXP 80
26689: AND
26690: IFFALSE 26801
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 25
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: ST_TO_ADDR
// if not tmp then
26736: LD_VAR 0 3
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26801
// un := tmp [ rand ( 1 , tmp ) ] ;
26745: LD_ADDR_VAR 0 2
26749: PUSH
26750: LD_VAR 0 3
26754: PUSH
26755: LD_INT 1
26757: PPUSH
26758: LD_VAR 0 3
26762: PPUSH
26763: CALL_OW 12
26767: ARRAY
26768: ST_TO_ADDR
// if Crawls ( un ) then
26769: LD_VAR 0 2
26773: PPUSH
26774: CALL_OW 318
26778: IFFALSE 26789
// ComWalk ( un ) ;
26780: LD_VAR 0 2
26784: PPUSH
26785: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26789: LD_VAR 0 2
26793: PPUSH
26794: LD_INT 5
26796: PPUSH
26797: CALL_OW 336
// end ;
26801: PPOPN 3
26803: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26804: LD_EXP 63
26808: PUSH
26809: LD_EXP 81
26813: AND
26814: PUSH
26815: LD_OWVAR 67
26819: PUSH
26820: LD_INT 4
26822: LESS
26823: AND
26824: IFFALSE 26843
26826: GO 26828
26828: DISABLE
// begin Difficulty := Difficulty + 1 ;
26829: LD_ADDR_OWVAR 67
26833: PUSH
26834: LD_OWVAR 67
26838: PUSH
26839: LD_INT 1
26841: PLUS
26842: ST_TO_ADDR
// end ;
26843: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26844: LD_EXP 63
26848: PUSH
26849: LD_EXP 82
26853: AND
26854: IFFALSE 26957
26856: GO 26858
26858: DISABLE
26859: LD_INT 0
26861: PPUSH
// begin for i := 1 to 5 do
26862: LD_ADDR_VAR 0 1
26866: PUSH
26867: DOUBLE
26868: LD_INT 1
26870: DEC
26871: ST_TO_ADDR
26872: LD_INT 5
26874: PUSH
26875: FOR_TO
26876: IFFALSE 26955
// begin uc_nation := nation_nature ;
26878: LD_ADDR_OWVAR 21
26882: PUSH
26883: LD_INT 0
26885: ST_TO_ADDR
// uc_side := 0 ;
26886: LD_ADDR_OWVAR 20
26890: PUSH
26891: LD_INT 0
26893: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26894: LD_ADDR_OWVAR 29
26898: PUSH
26899: LD_INT 12
26901: PUSH
26902: LD_INT 12
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: ST_TO_ADDR
// hc_agressivity := 20 ;
26909: LD_ADDR_OWVAR 35
26913: PUSH
26914: LD_INT 20
26916: ST_TO_ADDR
// hc_class := class_tiger ;
26917: LD_ADDR_OWVAR 28
26921: PUSH
26922: LD_INT 14
26924: ST_TO_ADDR
// hc_gallery :=  ;
26925: LD_ADDR_OWVAR 33
26929: PUSH
26930: LD_STRING 
26932: ST_TO_ADDR
// hc_name :=  ;
26933: LD_ADDR_OWVAR 26
26937: PUSH
26938: LD_STRING 
26940: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26941: CALL_OW 44
26945: PPUSH
26946: LD_INT 0
26948: PPUSH
26949: CALL_OW 51
// end ;
26953: GO 26875
26955: POP
26956: POP
// end ;
26957: PPOPN 1
26959: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26960: LD_EXP 63
26964: PUSH
26965: LD_EXP 83
26969: AND
26970: IFFALSE 26979
26972: GO 26974
26974: DISABLE
// StreamSibBomb ;
26975: CALL 26980 0 0
26979: END
// export function StreamSibBomb ; var i , x , y ; begin
26980: LD_INT 0
26982: PPUSH
26983: PPUSH
26984: PPUSH
26985: PPUSH
// result := false ;
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: LD_INT 0
26993: ST_TO_ADDR
// for i := 1 to 16 do
26994: LD_ADDR_VAR 0 2
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_INT 16
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27207
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: LD_INT 10
27017: PUSH
27018: LD_INT 20
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 40
27026: PUSH
27027: LD_INT 50
27029: PUSH
27030: LD_INT 60
27032: PUSH
27033: LD_INT 70
27035: PUSH
27036: LD_INT 80
27038: PUSH
27039: LD_INT 90
27041: PUSH
27042: LD_INT 100
27044: PUSH
27045: LD_INT 110
27047: PUSH
27048: LD_INT 120
27050: PUSH
27051: LD_INT 130
27053: PUSH
27054: LD_INT 140
27056: PUSH
27057: LD_INT 150
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PPUSH
27080: LD_INT 15
27082: PPUSH
27083: CALL_OW 12
27087: ARRAY
27088: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27089: LD_ADDR_VAR 0 4
27093: PUSH
27094: LD_INT 10
27096: PUSH
27097: LD_INT 20
27099: PUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 40
27105: PUSH
27106: LD_INT 50
27108: PUSH
27109: LD_INT 60
27111: PUSH
27112: LD_INT 70
27114: PUSH
27115: LD_INT 80
27117: PUSH
27118: LD_INT 90
27120: PUSH
27121: LD_INT 100
27123: PUSH
27124: LD_INT 110
27126: PUSH
27127: LD_INT 120
27129: PUSH
27130: LD_INT 130
27132: PUSH
27133: LD_INT 140
27135: PUSH
27136: LD_INT 150
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PPUSH
27159: LD_INT 15
27161: PPUSH
27162: CALL_OW 12
27166: ARRAY
27167: ST_TO_ADDR
// if ValidHex ( x , y ) then
27168: LD_VAR 0 3
27172: PPUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: CALL_OW 488
27182: IFFALSE 27205
// begin result := [ x , y ] ;
27184: LD_ADDR_VAR 0 1
27188: PUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_VAR 0 4
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// break ;
27203: GO 27207
// end ; end ;
27205: GO 27007
27207: POP
27208: POP
// if result then
27209: LD_VAR 0 1
27213: IFFALSE 27273
// begin ToLua ( playSibBomb() ) ;
27215: LD_STRING playSibBomb()
27217: PPUSH
27218: CALL_OW 559
// wait ( 0 0$14 ) ;
27222: LD_INT 490
27224: PPUSH
27225: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27229: LD_VAR 0 1
27233: PUSH
27234: LD_INT 1
27236: ARRAY
27237: PPUSH
27238: LD_VAR 0 1
27242: PUSH
27243: LD_INT 2
27245: ARRAY
27246: PPUSH
27247: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27251: LD_VAR 0 1
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PPUSH
27260: LD_VAR 0 1
27264: PUSH
27265: LD_INT 2
27267: ARRAY
27268: PPUSH
27269: CALL_OW 429
// end ; end ;
27273: LD_VAR 0 1
27277: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27278: LD_EXP 63
27282: PUSH
27283: LD_EXP 85
27287: AND
27288: IFFALSE 27300
27290: GO 27292
27292: DISABLE
// YouLost (  ) ;
27293: LD_STRING 
27295: PPUSH
27296: CALL_OW 104
27300: END
// every 0 0$1 trigger StreamModeActive and sFog do
27301: LD_EXP 63
27305: PUSH
27306: LD_EXP 84
27310: AND
27311: IFFALSE 27325
27313: GO 27315
27315: DISABLE
// FogOff ( your_side ) ;
27316: LD_OWVAR 2
27320: PPUSH
27321: CALL_OW 344
27325: END
// every 0 0$1 trigger StreamModeActive and sSun do
27326: LD_EXP 63
27330: PUSH
27331: LD_EXP 86
27335: AND
27336: IFFALSE 27364
27338: GO 27340
27340: DISABLE
// begin solar_recharge_percent := 0 ;
27341: LD_ADDR_OWVAR 79
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27349: LD_INT 10500
27351: PPUSH
27352: CALL_OW 67
// solar_recharge_percent := 100 ;
27356: LD_ADDR_OWVAR 79
27360: PUSH
27361: LD_INT 100
27363: ST_TO_ADDR
// end ;
27364: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27365: LD_EXP 63
27369: PUSH
27370: LD_EXP 87
27374: AND
27375: IFFALSE 27614
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
27383: PPUSH
27384: PPUSH
// begin tmp := [ ] ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: EMPTY
27391: ST_TO_ADDR
// for i := 1 to 6 do
27392: LD_ADDR_VAR 0 1
27396: PUSH
27397: DOUBLE
27398: LD_INT 1
27400: DEC
27401: ST_TO_ADDR
27402: LD_INT 6
27404: PUSH
27405: FOR_TO
27406: IFFALSE 27511
// begin uc_nation := nation_nature ;
27408: LD_ADDR_OWVAR 21
27412: PUSH
27413: LD_INT 0
27415: ST_TO_ADDR
// uc_side := 0 ;
27416: LD_ADDR_OWVAR 20
27420: PUSH
27421: LD_INT 0
27423: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27424: LD_ADDR_OWVAR 29
27428: PUSH
27429: LD_INT 12
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// hc_agressivity := 20 ;
27439: LD_ADDR_OWVAR 35
27443: PUSH
27444: LD_INT 20
27446: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27447: LD_ADDR_OWVAR 28
27451: PUSH
27452: LD_INT 17
27454: ST_TO_ADDR
// hc_gallery :=  ;
27455: LD_ADDR_OWVAR 33
27459: PUSH
27460: LD_STRING 
27462: ST_TO_ADDR
// hc_name :=  ;
27463: LD_ADDR_OWVAR 26
27467: PUSH
27468: LD_STRING 
27470: ST_TO_ADDR
// un := CreateHuman ;
27471: LD_ADDR_VAR 0 2
27475: PUSH
27476: CALL_OW 44
27480: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 51
// tmp := tmp ^ un ;
27493: LD_ADDR_VAR 0 3
27497: PUSH
27498: LD_VAR 0 3
27502: PUSH
27503: LD_VAR 0 2
27507: ADD
27508: ST_TO_ADDR
// end ;
27509: GO 27405
27511: POP
27512: POP
// repeat wait ( 0 0$1 ) ;
27513: LD_INT 35
27515: PPUSH
27516: CALL_OW 67
// for un in tmp do
27520: LD_ADDR_VAR 0 2
27524: PUSH
27525: LD_VAR 0 3
27529: PUSH
27530: FOR_IN
27531: IFFALSE 27605
// begin if IsDead ( un ) then
27533: LD_VAR 0 2
27537: PPUSH
27538: CALL_OW 301
27542: IFFALSE 27562
// begin tmp := tmp diff un ;
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_VAR 0 3
27553: PUSH
27554: LD_VAR 0 2
27558: DIFF
27559: ST_TO_ADDR
// continue ;
27560: GO 27530
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_INT 3
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: CALL_OW 74
27598: PPUSH
27599: CALL_OW 115
// end ;
27603: GO 27530
27605: POP
27606: POP
// until not tmp ;
27607: LD_VAR 0 3
27611: NOT
27612: IFFALSE 27513
// end ;
27614: PPOPN 3
27616: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27617: LD_EXP 63
27621: PUSH
27622: LD_EXP 88
27626: AND
27627: IFFALSE 27681
27629: GO 27631
27631: DISABLE
// begin ToLua ( displayTroll(); ) ;
27632: LD_STRING displayTroll();
27634: PPUSH
27635: CALL_OW 559
// wait ( 3 3$00 ) ;
27639: LD_INT 6300
27641: PPUSH
27642: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27646: LD_STRING hideTroll();
27648: PPUSH
27649: CALL_OW 559
// wait ( 1 1$00 ) ;
27653: LD_INT 2100
27655: PPUSH
27656: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27660: LD_STRING displayTroll();
27662: PPUSH
27663: CALL_OW 559
// wait ( 1 1$00 ) ;
27667: LD_INT 2100
27669: PPUSH
27670: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27674: LD_STRING hideTroll();
27676: PPUSH
27677: CALL_OW 559
// end ;
27681: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27682: LD_EXP 63
27686: PUSH
27687: LD_EXP 89
27691: AND
27692: IFFALSE 27755
27694: GO 27696
27696: DISABLE
27697: LD_INT 0
27699: PPUSH
// begin p := 0 ;
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_INT 0
27707: ST_TO_ADDR
// repeat game_speed := 1 ;
27708: LD_ADDR_OWVAR 65
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27716: LD_INT 35
27718: PPUSH
27719: CALL_OW 67
// p := p + 1 ;
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 1
27735: PLUS
27736: ST_TO_ADDR
// until p >= 60 ;
27737: LD_VAR 0 1
27741: PUSH
27742: LD_INT 60
27744: GREATEREQUAL
27745: IFFALSE 27708
// game_speed := 4 ;
27747: LD_ADDR_OWVAR 65
27751: PUSH
27752: LD_INT 4
27754: ST_TO_ADDR
// end ;
27755: PPOPN 1
27757: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27758: LD_EXP 63
27762: PUSH
27763: LD_EXP 90
27767: AND
27768: IFFALSE 27914
27770: GO 27772
27772: DISABLE
27773: LD_INT 0
27775: PPUSH
27776: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27777: LD_ADDR_VAR 0 1
27781: PUSH
27782: LD_INT 22
27784: PUSH
27785: LD_OWVAR 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 30
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 30
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: ST_TO_ADDR
// if not depot then
27831: LD_VAR 0 1
27835: NOT
27836: IFFALSE 27840
// exit ;
27838: GO 27914
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27840: LD_ADDR_VAR 0 2
27844: PUSH
27845: LD_VAR 0 1
27849: PUSH
27850: LD_INT 1
27852: PPUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: CALL_OW 12
27862: ARRAY
27863: PPUSH
27864: CALL_OW 274
27868: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27869: LD_VAR 0 2
27873: PPUSH
27874: LD_INT 1
27876: PPUSH
27877: LD_INT 0
27879: PPUSH
27880: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27884: LD_VAR 0 2
27888: PPUSH
27889: LD_INT 2
27891: PPUSH
27892: LD_INT 0
27894: PPUSH
27895: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27899: LD_VAR 0 2
27903: PPUSH
27904: LD_INT 3
27906: PPUSH
27907: LD_INT 0
27909: PPUSH
27910: CALL_OW 277
// end ;
27914: PPOPN 2
27916: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27917: LD_EXP 63
27921: PUSH
27922: LD_EXP 91
27926: AND
27927: IFFALSE 28024
27929: GO 27931
27931: DISABLE
27932: LD_INT 0
27934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27935: LD_ADDR_VAR 0 1
27939: PUSH
27940: LD_INT 22
27942: PUSH
27943: LD_OWVAR 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 21
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: LD_INT 23
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 69
27988: ST_TO_ADDR
// if not tmp then
27989: LD_VAR 0 1
27993: NOT
27994: IFFALSE 27998
// exit ;
27996: GO 28024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 12
28015: ARRAY
28016: PPUSH
28017: LD_INT 200
28019: PPUSH
28020: CALL_OW 234
// end ;
28024: PPOPN 1
28026: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28027: LD_EXP 63
28031: PUSH
28032: LD_EXP 92
28036: AND
28037: IFFALSE 28116
28039: GO 28041
28041: DISABLE
28042: LD_INT 0
28044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: LD_INT 22
28052: PUSH
28053: LD_OWVAR 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PPUSH
28076: CALL_OW 69
28080: ST_TO_ADDR
// if not tmp then
28081: LD_VAR 0 1
28085: NOT
28086: IFFALSE 28090
// exit ;
28088: GO 28116
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28090: LD_VAR 0 1
28094: PUSH
28095: LD_INT 1
28097: PPUSH
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL_OW 12
28107: ARRAY
28108: PPUSH
28109: LD_INT 60
28111: PPUSH
28112: CALL_OW 234
// end ;
28116: PPOPN 1
28118: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28119: LD_EXP 63
28123: PUSH
28124: LD_EXP 93
28128: AND
28129: IFFALSE 28228
28131: GO 28133
28133: DISABLE
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
// begin enable ;
28138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: LD_INT 22
28146: PUSH
28147: LD_OWVAR 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 61
28158: PUSH
28159: EMPTY
28160: LIST
28161: PUSH
28162: LD_INT 33
28164: PUSH
28165: LD_INT 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: ST_TO_ADDR
// if not tmp then
28182: LD_VAR 0 1
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28228
// for i in tmp do
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: LD_VAR 0 1
28200: PUSH
28201: FOR_IN
28202: IFFALSE 28226
// if IsControledBy ( i ) then
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 312
28213: IFFALSE 28224
// ComUnlink ( i ) ;
28215: LD_VAR 0 2
28219: PPUSH
28220: CALL_OW 136
28224: GO 28201
28226: POP
28227: POP
// end ;
28228: PPOPN 2
28230: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28231: LD_EXP 63
28235: PUSH
28236: LD_EXP 94
28240: AND
28241: IFFALSE 28381
28243: GO 28245
28245: DISABLE
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
// begin ToLua ( displayPowell(); ) ;
28250: LD_STRING displayPowell();
28252: PPUSH
28253: CALL_OW 559
// uc_side := 0 ;
28257: LD_ADDR_OWVAR 20
28261: PUSH
28262: LD_INT 0
28264: ST_TO_ADDR
// uc_nation := 2 ;
28265: LD_ADDR_OWVAR 21
28269: PUSH
28270: LD_INT 2
28272: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28273: LD_ADDR_OWVAR 37
28277: PUSH
28278: LD_INT 14
28280: ST_TO_ADDR
// vc_engine := engine_siberite ;
28281: LD_ADDR_OWVAR 39
28285: PUSH
28286: LD_INT 3
28288: ST_TO_ADDR
// vc_control := control_apeman ;
28289: LD_ADDR_OWVAR 38
28293: PUSH
28294: LD_INT 5
28296: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28297: LD_ADDR_OWVAR 40
28301: PUSH
28302: LD_INT 29
28304: ST_TO_ADDR
// un := CreateVehicle ;
28305: LD_ADDR_VAR 0 2
28309: PUSH
28310: CALL_OW 45
28314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28315: LD_VAR 0 2
28319: PPUSH
28320: LD_INT 1
28322: PPUSH
28323: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28327: LD_INT 35
28329: PPUSH
28330: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_INT 22
28341: PUSH
28342: LD_OWVAR 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: PPUSH
28356: LD_VAR 0 2
28360: PPUSH
28361: CALL_OW 74
28365: PPUSH
28366: CALL_OW 115
// until IsDead ( un ) ;
28370: LD_VAR 0 2
28374: PPUSH
28375: CALL_OW 301
28379: IFFALSE 28327
// end ;
28381: PPOPN 2
28383: END
// every 0 0$1 trigger StreamModeActive and sStu do
28384: LD_EXP 63
28388: PUSH
28389: LD_EXP 102
28393: AND
28394: IFFALSE 28410
28396: GO 28398
28398: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28399: LD_STRING displayStucuk();
28401: PPUSH
28402: CALL_OW 559
// ResetFog ;
28406: CALL_OW 335
// end ;
28410: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28411: LD_EXP 63
28415: PUSH
28416: LD_EXP 95
28420: AND
28421: IFFALSE 28562
28423: GO 28425
28425: DISABLE
28426: LD_INT 0
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28430: LD_ADDR_VAR 0 2
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 21
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 2
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28562
// un := tmp [ rand ( 1 , tmp ) ] ;
28475: LD_ADDR_VAR 0 1
28479: PUSH
28480: LD_VAR 0 2
28484: PUSH
28485: LD_INT 1
28487: PPUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 12
28497: ARRAY
28498: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_INT 0
28506: PPUSH
28507: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_OWVAR 3
28520: PUSH
28521: LD_VAR 0 1
28525: DIFF
28526: PPUSH
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 74
28536: PPUSH
28537: CALL_OW 115
// wait ( 0 0$20 ) ;
28541: LD_INT 700
28543: PPUSH
28544: CALL_OW 67
// SetSide ( un , your_side ) ;
28548: LD_VAR 0 1
28552: PPUSH
28553: LD_OWVAR 2
28557: PPUSH
28558: CALL_OW 235
// end ;
28562: PPOPN 2
28564: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28565: LD_EXP 63
28569: PUSH
28570: LD_EXP 96
28574: AND
28575: IFFALSE 28681
28577: GO 28579
28579: DISABLE
28580: LD_INT 0
28582: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28583: LD_ADDR_VAR 0 1
28587: PUSH
28588: LD_INT 22
28590: PUSH
28591: LD_OWVAR 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: LD_INT 30
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 30
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 69
28636: ST_TO_ADDR
// if not depot then
28637: LD_VAR 0 1
28641: NOT
28642: IFFALSE 28646
// exit ;
28644: GO 28681
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 1
28653: ARRAY
28654: PPUSH
28655: CALL_OW 250
28659: PPUSH
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 1
28667: ARRAY
28668: PPUSH
28669: CALL_OW 251
28673: PPUSH
28674: LD_INT 70
28676: PPUSH
28677: CALL_OW 495
// end ;
28681: PPOPN 1
28683: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28684: LD_EXP 63
28688: PUSH
28689: LD_EXP 97
28693: AND
28694: IFFALSE 28905
28696: GO 28698
28698: DISABLE
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28706: LD_ADDR_VAR 0 5
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 21
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 69
28741: ST_TO_ADDR
// if not tmp then
28742: LD_VAR 0 5
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28905
// for i in tmp do
28751: LD_ADDR_VAR 0 1
28755: PUSH
28756: LD_VAR 0 5
28760: PUSH
28761: FOR_IN
28762: IFFALSE 28903
// begin d := rand ( 0 , 5 ) ;
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: LD_INT 0
28771: PPUSH
28772: LD_INT 5
28774: PPUSH
28775: CALL_OW 12
28779: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28780: LD_ADDR_VAR 0 2
28784: PUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 250
28794: PPUSH
28795: LD_VAR 0 4
28799: PPUSH
28800: LD_INT 3
28802: PPUSH
28803: LD_INT 12
28805: PPUSH
28806: CALL_OW 12
28810: PPUSH
28811: CALL_OW 272
28815: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 251
28830: PPUSH
28831: LD_VAR 0 4
28835: PPUSH
28836: LD_INT 3
28838: PPUSH
28839: LD_INT 12
28841: PPUSH
28842: CALL_OW 12
28846: PPUSH
28847: CALL_OW 273
28851: ST_TO_ADDR
// if ValidHex ( x , y ) then
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_VAR 0 3
28861: PPUSH
28862: CALL_OW 488
28866: IFFALSE 28901
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28868: LD_VAR 0 1
28872: PPUSH
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: LD_INT 3
28885: PPUSH
28886: LD_INT 6
28888: PPUSH
28889: CALL_OW 12
28893: PPUSH
28894: LD_INT 1
28896: PPUSH
28897: CALL_OW 483
// end ;
28901: GO 28761
28903: POP
28904: POP
// end ;
28905: PPOPN 5
28907: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28908: LD_EXP 63
28912: PUSH
28913: LD_EXP 98
28917: AND
28918: IFFALSE 29012
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28927: LD_ADDR_VAR 0 2
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 32
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 21
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: ST_TO_ADDR
// if not tmp then
28974: LD_VAR 0 2
28978: NOT
28979: IFFALSE 28983
// exit ;
28981: GO 29012
// for i in tmp do
28983: LD_ADDR_VAR 0 1
28987: PUSH
28988: LD_VAR 0 2
28992: PUSH
28993: FOR_IN
28994: IFFALSE 29010
// SetFuel ( i , 0 ) ;
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_INT 0
29003: PPUSH
29004: CALL_OW 240
29008: GO 28993
29010: POP
29011: POP
// end ;
29012: PPOPN 2
29014: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29015: LD_EXP 63
29019: PUSH
29020: LD_EXP 99
29024: AND
29025: IFFALSE 29091
29027: GO 29029
29029: DISABLE
29030: LD_INT 0
29032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29033: LD_ADDR_VAR 0 1
29037: PUSH
29038: LD_INT 22
29040: PUSH
29041: LD_OWVAR 2
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 30
29052: PUSH
29053: LD_INT 29
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PPUSH
29064: CALL_OW 69
29068: ST_TO_ADDR
// if not tmp then
29069: LD_VAR 0 1
29073: NOT
29074: IFFALSE 29078
// exit ;
29076: GO 29091
// DestroyUnit ( tmp [ 1 ] ) ;
29078: LD_VAR 0 1
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 65
// end ;
29091: PPOPN 1
29093: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29094: LD_EXP 63
29098: PUSH
29099: LD_EXP 101
29103: AND
29104: IFFALSE 29233
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
// begin uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// uc_nation := nation_arabian ;
29120: LD_ADDR_OWVAR 21
29124: PUSH
29125: LD_INT 2
29127: ST_TO_ADDR
// hc_gallery :=  ;
29128: LD_ADDR_OWVAR 33
29132: PUSH
29133: LD_STRING 
29135: ST_TO_ADDR
// hc_name :=  ;
29136: LD_ADDR_OWVAR 26
29140: PUSH
29141: LD_STRING 
29143: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29144: LD_INT 1
29146: PPUSH
29147: LD_INT 11
29149: PPUSH
29150: LD_INT 10
29152: PPUSH
29153: CALL_OW 380
// un := CreateHuman ;
29157: LD_ADDR_VAR 0 1
29161: PUSH
29162: CALL_OW 44
29166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_INT 1
29174: PPUSH
29175: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29179: LD_INT 35
29181: PPUSH
29182: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29186: LD_VAR 0 1
29190: PPUSH
29191: LD_INT 22
29193: PUSH
29194: LD_OWVAR 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PPUSH
29203: CALL_OW 69
29207: PPUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 74
29217: PPUSH
29218: CALL_OW 115
// until IsDead ( un ) ;
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 301
29231: IFFALSE 29179
// end ;
29233: PPOPN 1
29235: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29236: LD_EXP 63
29240: PUSH
29241: LD_EXP 103
29245: AND
29246: IFFALSE 29258
29248: GO 29250
29250: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29251: LD_STRING earthquake(getX(game), 0, 32)
29253: PPUSH
29254: CALL_OW 559
29258: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29259: LD_EXP 63
29263: PUSH
29264: LD_EXP 104
29268: AND
29269: IFFALSE 29360
29271: GO 29273
29273: DISABLE
29274: LD_INT 0
29276: PPUSH
// begin enable ;
29277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29278: LD_ADDR_VAR 0 1
29282: PUSH
29283: LD_INT 22
29285: PUSH
29286: LD_OWVAR 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 21
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 33
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// if not tmp then
29325: LD_VAR 0 1
29329: NOT
29330: IFFALSE 29334
// exit ;
29332: GO 29360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 1
29341: PPUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 12
29351: ARRAY
29352: PPUSH
29353: LD_INT 1
29355: PPUSH
29356: CALL_OW 234
// end ;
29360: PPOPN 1
29362: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29363: LD_EXP 63
29367: PUSH
29368: LD_EXP 105
29372: AND
29373: IFFALSE 29514
29375: GO 29377
29377: DISABLE
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 22
29390: PUSH
29391: LD_OWVAR 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 25
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PPUSH
29414: CALL_OW 69
29418: ST_TO_ADDR
// if not tmp then
29419: LD_VAR 0 3
29423: NOT
29424: IFFALSE 29428
// exit ;
29426: GO 29514
// un := tmp [ rand ( 1 , tmp ) ] ;
29428: LD_ADDR_VAR 0 2
29432: PUSH
29433: LD_VAR 0 3
29437: PUSH
29438: LD_INT 1
29440: PPUSH
29441: LD_VAR 0 3
29445: PPUSH
29446: CALL_OW 12
29450: ARRAY
29451: ST_TO_ADDR
// if Crawls ( un ) then
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL_OW 318
29461: IFFALSE 29472
// ComWalk ( un ) ;
29463: LD_VAR 0 2
29467: PPUSH
29468: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_INT 9
29479: PPUSH
29480: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29484: LD_INT 28
29486: PPUSH
29487: LD_OWVAR 2
29491: PPUSH
29492: LD_INT 2
29494: PPUSH
29495: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29499: LD_INT 29
29501: PPUSH
29502: LD_OWVAR 2
29506: PPUSH
29507: LD_INT 2
29509: PPUSH
29510: CALL_OW 322
// end ;
29514: PPOPN 3
29516: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29517: LD_EXP 63
29521: PUSH
29522: LD_EXP 106
29526: AND
29527: IFFALSE 29638
29529: GO 29531
29531: DISABLE
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 22
29544: PUSH
29545: LD_OWVAR 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 25
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PPUSH
29568: CALL_OW 69
29572: ST_TO_ADDR
// if not tmp then
29573: LD_VAR 0 3
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 29638
// un := tmp [ rand ( 1 , tmp ) ] ;
29582: LD_ADDR_VAR 0 2
29586: PUSH
29587: LD_VAR 0 3
29591: PUSH
29592: LD_INT 1
29594: PPUSH
29595: LD_VAR 0 3
29599: PPUSH
29600: CALL_OW 12
29604: ARRAY
29605: ST_TO_ADDR
// if Crawls ( un ) then
29606: LD_VAR 0 2
29610: PPUSH
29611: CALL_OW 318
29615: IFFALSE 29626
// ComWalk ( un ) ;
29617: LD_VAR 0 2
29621: PPUSH
29622: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_INT 8
29633: PPUSH
29634: CALL_OW 336
// end ;
29638: PPOPN 3
29640: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29641: LD_EXP 63
29645: PUSH
29646: LD_EXP 107
29650: AND
29651: IFFALSE 29795
29653: GO 29655
29655: DISABLE
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_OWVAR 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 21
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 34
29692: PUSH
29693: LD_INT 12
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 34
29702: PUSH
29703: LD_INT 51
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 34
29712: PUSH
29713: LD_INT 32
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29795
// for i in tmp do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: FOR_IN
29756: IFFALSE 29793
// if GetCargo ( i , mat_artifact ) = 0 then
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_INT 4
29765: PPUSH
29766: CALL_OW 289
29770: PUSH
29771: LD_INT 0
29773: EQUAL
29774: IFFALSE 29791
// SetCargo ( i , mat_siberit , 100 ) ;
29776: LD_VAR 0 1
29780: PPUSH
29781: LD_INT 3
29783: PPUSH
29784: LD_INT 100
29786: PPUSH
29787: CALL_OW 290
29791: GO 29755
29793: POP
29794: POP
// end ;
29795: PPOPN 2
29797: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29798: LD_EXP 63
29802: PUSH
29803: LD_EXP 108
29807: AND
29808: IFFALSE 29991
29810: GO 29812
29812: DISABLE
29813: LD_INT 0
29815: PPUSH
29816: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29817: LD_ADDR_VAR 0 2
29821: PUSH
29822: LD_INT 22
29824: PUSH
29825: LD_OWVAR 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: ST_TO_ADDR
// if not tmp then
29839: LD_VAR 0 2
29843: NOT
29844: IFFALSE 29848
// exit ;
29846: GO 29991
// for i := 1 to 2 do
29848: LD_ADDR_VAR 0 1
29852: PUSH
29853: DOUBLE
29854: LD_INT 1
29856: DEC
29857: ST_TO_ADDR
29858: LD_INT 2
29860: PUSH
29861: FOR_TO
29862: IFFALSE 29989
// begin uc_side := your_side ;
29864: LD_ADDR_OWVAR 20
29868: PUSH
29869: LD_OWVAR 2
29873: ST_TO_ADDR
// uc_nation := nation_american ;
29874: LD_ADDR_OWVAR 21
29878: PUSH
29879: LD_INT 1
29881: ST_TO_ADDR
// vc_chassis := us_morphling ;
29882: LD_ADDR_OWVAR 37
29886: PUSH
29887: LD_INT 5
29889: ST_TO_ADDR
// vc_engine := engine_siberite ;
29890: LD_ADDR_OWVAR 39
29894: PUSH
29895: LD_INT 3
29897: ST_TO_ADDR
// vc_control := control_computer ;
29898: LD_ADDR_OWVAR 38
29902: PUSH
29903: LD_INT 3
29905: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29906: LD_ADDR_OWVAR 40
29910: PUSH
29911: LD_INT 10
29913: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: CALL_OW 310
29927: NOT
29928: IFFALSE 29975
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29930: CALL_OW 45
29934: PPUSH
29935: LD_VAR 0 2
29939: PUSH
29940: LD_INT 1
29942: ARRAY
29943: PPUSH
29944: CALL_OW 250
29948: PPUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_INT 1
29956: ARRAY
29957: PPUSH
29958: CALL_OW 251
29962: PPUSH
29963: LD_INT 12
29965: PPUSH
29966: LD_INT 1
29968: PPUSH
29969: CALL_OW 50
29973: GO 29987
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29975: CALL_OW 45
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: CALL_OW 51
// end ;
29987: GO 29861
29989: POP
29990: POP
// end ;
29991: PPOPN 2
29993: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29994: LD_EXP 63
29998: PUSH
29999: LD_EXP 109
30003: AND
30004: IFFALSE 30226
30006: GO 30008
30008: DISABLE
30009: LD_INT 0
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_INT 22
30024: PUSH
30025: LD_OWVAR 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 21
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: PUSH
30047: LD_INT 23
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 69
30070: ST_TO_ADDR
// if not tmp then
30071: LD_VAR 0 6
30075: NOT
30076: IFFALSE 30080
// exit ;
30078: GO 30226
// s1 := rand ( 1 , 4 ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 1
30087: PPUSH
30088: LD_INT 4
30090: PPUSH
30091: CALL_OW 12
30095: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30096: LD_ADDR_VAR 0 4
30100: PUSH
30101: LD_VAR 0 6
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: LD_VAR 0 2
30114: PPUSH
30115: CALL_OW 259
30119: ST_TO_ADDR
// if s1 = 1 then
30120: LD_VAR 0 2
30124: PUSH
30125: LD_INT 1
30127: EQUAL
30128: IFFALSE 30148
// s2 := rand ( 2 , 4 ) else
30130: LD_ADDR_VAR 0 3
30134: PUSH
30135: LD_INT 2
30137: PPUSH
30138: LD_INT 4
30140: PPUSH
30141: CALL_OW 12
30145: ST_TO_ADDR
30146: GO 30156
// s2 := 1 ;
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_INT 1
30155: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30156: LD_ADDR_VAR 0 5
30160: PUSH
30161: LD_VAR 0 6
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PPUSH
30170: LD_VAR 0 3
30174: PPUSH
30175: CALL_OW 259
30179: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30180: LD_VAR 0 6
30184: PUSH
30185: LD_INT 1
30187: ARRAY
30188: PPUSH
30189: LD_VAR 0 2
30193: PPUSH
30194: LD_VAR 0 5
30198: PPUSH
30199: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30203: LD_VAR 0 6
30207: PUSH
30208: LD_INT 1
30210: ARRAY
30211: PPUSH
30212: LD_VAR 0 3
30216: PPUSH
30217: LD_VAR 0 4
30221: PPUSH
30222: CALL_OW 237
// end ;
30226: PPOPN 6
30228: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30229: LD_EXP 63
30233: PUSH
30234: LD_EXP 110
30238: AND
30239: IFFALSE 30318
30241: GO 30243
30243: DISABLE
30244: LD_INT 0
30246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 30
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 69
30282: ST_TO_ADDR
// if not tmp then
30283: LD_VAR 0 1
30287: NOT
30288: IFFALSE 30292
// exit ;
30290: GO 30318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30292: LD_VAR 0 1
30296: PUSH
30297: LD_INT 1
30299: PPUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 12
30309: ARRAY
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL_OW 234
// end ;
30318: PPOPN 1
30320: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30321: LD_EXP 63
30325: PUSH
30326: LD_EXP 111
30330: AND
30331: IFFALSE 30443
30333: GO 30335
30335: DISABLE
30336: LD_INT 0
30338: PPUSH
30339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30340: LD_ADDR_VAR 0 2
30344: PUSH
30345: LD_INT 22
30347: PUSH
30348: LD_OWVAR 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 27
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 30
30372: PUSH
30373: LD_INT 26
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 28
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PPUSH
30400: CALL_OW 69
30404: ST_TO_ADDR
// if not tmp then
30405: LD_VAR 0 2
30409: NOT
30410: IFFALSE 30414
// exit ;
30412: GO 30443
// for i in tmp do
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_VAR 0 2
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30441
// SetLives ( i , 1 ) ;
30427: LD_VAR 0 1
30431: PPUSH
30432: LD_INT 1
30434: PPUSH
30435: CALL_OW 234
30439: GO 30424
30441: POP
30442: POP
// end ;
30443: PPOPN 2
30445: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30446: LD_EXP 63
30450: PUSH
30451: LD_EXP 112
30455: AND
30456: IFFALSE 30743
30458: GO 30460
30460: DISABLE
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
// begin i := rand ( 1 , 7 ) ;
30466: LD_ADDR_VAR 0 1
30470: PUSH
30471: LD_INT 1
30473: PPUSH
30474: LD_INT 7
30476: PPUSH
30477: CALL_OW 12
30481: ST_TO_ADDR
// case i of 1 :
30482: LD_VAR 0 1
30486: PUSH
30487: LD_INT 1
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30505
30495: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30496: LD_STRING earthquake(getX(game), 0, 32)
30498: PPUSH
30499: CALL_OW 559
30503: GO 30743
30505: LD_INT 2
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30527
30513: POP
// begin ToLua ( displayStucuk(); ) ;
30514: LD_STRING displayStucuk();
30516: PPUSH
30517: CALL_OW 559
// ResetFog ;
30521: CALL_OW 335
// end ; 3 :
30525: GO 30743
30527: LD_INT 3
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30639
30535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_INT 22
30543: PUSH
30544: LD_OWVAR 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 25
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PPUSH
30567: CALL_OW 69
30571: ST_TO_ADDR
// if not tmp then
30572: LD_VAR 0 2
30576: NOT
30577: IFFALSE 30581
// exit ;
30579: GO 30743
// un := tmp [ rand ( 1 , tmp ) ] ;
30581: LD_ADDR_VAR 0 3
30585: PUSH
30586: LD_VAR 0 2
30590: PUSH
30591: LD_INT 1
30593: PPUSH
30594: LD_VAR 0 2
30598: PPUSH
30599: CALL_OW 12
30603: ARRAY
30604: ST_TO_ADDR
// if Crawls ( un ) then
30605: LD_VAR 0 3
30609: PPUSH
30610: CALL_OW 318
30614: IFFALSE 30625
// ComWalk ( un ) ;
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_INT 8
30632: PPUSH
30633: CALL_OW 336
// end ; 4 :
30637: GO 30743
30639: LD_INT 4
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 30721
30647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30648: LD_ADDR_VAR 0 2
30652: PUSH
30653: LD_INT 22
30655: PUSH
30656: LD_OWVAR 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 30
30667: PUSH
30668: LD_INT 29
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PPUSH
30679: CALL_OW 69
30683: ST_TO_ADDR
// if not tmp then
30684: LD_VAR 0 2
30688: NOT
30689: IFFALSE 30693
// exit ;
30691: GO 30743
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30706: LD_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: CALL_OW 65
// end ; 5 .. 7 :
30719: GO 30743
30721: LD_INT 5
30723: DOUBLE
30724: GREATEREQUAL
30725: IFFALSE 30733
30727: LD_INT 7
30729: DOUBLE
30730: LESSEQUAL
30731: IFTRUE 30735
30733: GO 30742
30735: POP
// StreamSibBomb ; end ;
30736: CALL 26980 0 0
30740: GO 30743
30742: POP
// end ;
30743: PPOPN 3
30745: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30746: LD_EXP 63
30750: PUSH
30751: LD_EXP 113
30755: AND
30756: IFFALSE 30912
30758: GO 30760
30760: DISABLE
30761: LD_INT 0
30763: PPUSH
30764: PPUSH
30765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30766: LD_ADDR_VAR 0 2
30770: PUSH
30771: LD_INT 81
30773: PUSH
30774: LD_OWVAR 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 21
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 21
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 69
30819: ST_TO_ADDR
// if not tmp then
30820: LD_VAR 0 2
30824: NOT
30825: IFFALSE 30829
// exit ;
30827: GO 30912
// p := 0 ;
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 0
30836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30837: LD_INT 35
30839: PPUSH
30840: CALL_OW 67
// p := p + 1 ;
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_VAR 0 3
30853: PUSH
30854: LD_INT 1
30856: PLUS
30857: ST_TO_ADDR
// for i in tmp do
30858: LD_ADDR_VAR 0 1
30862: PUSH
30863: LD_VAR 0 2
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30900
// if GetLives ( i ) < 1000 then
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 256
30880: PUSH
30881: LD_INT 1000
30883: LESS
30884: IFFALSE 30898
// SetLives ( i , 1000 ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_INT 1000
30893: PPUSH
30894: CALL_OW 234
30898: GO 30868
30900: POP
30901: POP
// until p > 20 ;
30902: LD_VAR 0 3
30906: PUSH
30907: LD_INT 20
30909: GREATER
30910: IFFALSE 30837
// end ;
30912: PPOPN 3
30914: END
// every 0 0$1 trigger StreamModeActive and sTime do
30915: LD_EXP 63
30919: PUSH
30920: LD_EXP 114
30924: AND
30925: IFFALSE 30960
30927: GO 30929
30929: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30930: LD_INT 28
30932: PPUSH
30933: LD_OWVAR 2
30937: PPUSH
30938: LD_INT 2
30940: PPUSH
30941: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30945: LD_INT 30
30947: PPUSH
30948: LD_OWVAR 2
30952: PPUSH
30953: LD_INT 2
30955: PPUSH
30956: CALL_OW 322
// end ;
30960: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30961: LD_EXP 63
30965: PUSH
30966: LD_EXP 115
30970: AND
30971: IFFALSE 31092
30973: GO 30975
30975: DISABLE
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30980: LD_ADDR_VAR 0 2
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_OWVAR 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 21
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 23
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: PPUSH
31029: CALL_OW 69
31033: ST_TO_ADDR
// if not tmp then
31034: LD_VAR 0 2
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31092
// for i in tmp do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: LD_VAR 0 2
31052: PUSH
31053: FOR_IN
31054: IFFALSE 31090
// begin if Crawls ( i ) then
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 318
31065: IFFALSE 31076
// ComWalk ( i ) ;
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 138
// SetClass ( i , 2 ) ;
31076: LD_VAR 0 1
31080: PPUSH
31081: LD_INT 2
31083: PPUSH
31084: CALL_OW 336
// end ;
31088: GO 31053
31090: POP
31091: POP
// end ;
31092: PPOPN 2
31094: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31095: LD_EXP 63
31099: PUSH
31100: LD_EXP 116
31104: AND
31105: IFFALSE 31393
31107: GO 31109
31109: DISABLE
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
31114: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31115: LD_OWVAR 2
31119: PPUSH
31120: LD_INT 9
31122: PPUSH
31123: LD_INT 1
31125: PPUSH
31126: LD_INT 1
31128: PPUSH
31129: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31133: LD_INT 9
31135: PPUSH
31136: LD_OWVAR 2
31140: PPUSH
31141: CALL_OW 343
// uc_side := 9 ;
31145: LD_ADDR_OWVAR 20
31149: PUSH
31150: LD_INT 9
31152: ST_TO_ADDR
// uc_nation := 2 ;
31153: LD_ADDR_OWVAR 21
31157: PUSH
31158: LD_INT 2
31160: ST_TO_ADDR
// hc_name := Dark Warrior ;
31161: LD_ADDR_OWVAR 26
31165: PUSH
31166: LD_STRING Dark Warrior
31168: ST_TO_ADDR
// hc_gallery :=  ;
31169: LD_ADDR_OWVAR 33
31173: PUSH
31174: LD_STRING 
31176: ST_TO_ADDR
// hc_noskilllimit := true ;
31177: LD_ADDR_OWVAR 76
31181: PUSH
31182: LD_INT 1
31184: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31185: LD_ADDR_OWVAR 31
31189: PUSH
31190: LD_INT 30
31192: PUSH
31193: LD_INT 30
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// un := CreateHuman ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: CALL_OW 44
31217: ST_TO_ADDR
// hc_noskilllimit := false ;
31218: LD_ADDR_OWVAR 76
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31226: LD_VAR 0 3
31230: PPUSH
31231: LD_INT 1
31233: PPUSH
31234: CALL_OW 51
// ToLua ( playRanger() ) ;
31238: LD_STRING playRanger()
31240: PPUSH
31241: CALL_OW 559
// p := 0 ;
31245: LD_ADDR_VAR 0 2
31249: PUSH
31250: LD_INT 0
31252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31253: LD_INT 35
31255: PPUSH
31256: CALL_OW 67
// p := p + 1 ;
31260: LD_ADDR_VAR 0 2
31264: PUSH
31265: LD_VAR 0 2
31269: PUSH
31270: LD_INT 1
31272: PLUS
31273: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31274: LD_VAR 0 3
31278: PPUSH
31279: CALL_OW 256
31283: PUSH
31284: LD_INT 1000
31286: LESS
31287: IFFALSE 31301
// SetLives ( un , 1000 ) ;
31289: LD_VAR 0 3
31293: PPUSH
31294: LD_INT 1000
31296: PPUSH
31297: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31301: LD_VAR 0 3
31305: PPUSH
31306: LD_INT 81
31308: PUSH
31309: LD_OWVAR 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 91
31320: PUSH
31321: LD_VAR 0 3
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: PPUSH
31343: LD_VAR 0 3
31347: PPUSH
31348: CALL_OW 74
31352: PPUSH
31353: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31357: LD_VAR 0 2
31361: PUSH
31362: LD_INT 80
31364: GREATER
31365: PUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: CALL_OW 301
31375: OR
31376: IFFALSE 31253
// if un then
31378: LD_VAR 0 3
31382: IFFALSE 31393
// RemoveUnit ( un ) ;
31384: LD_VAR 0 3
31388: PPUSH
31389: CALL_OW 64
// end ;
31393: PPOPN 3
31395: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31396: LD_EXP 117
31400: IFFALSE 31516
31402: GO 31404
31404: DISABLE
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
31409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31410: LD_ADDR_VAR 0 2
31414: PUSH
31415: LD_INT 81
31417: PUSH
31418: LD_OWVAR 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PPUSH
31441: CALL_OW 69
31445: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31446: LD_STRING playComputer()
31448: PPUSH
31449: CALL_OW 559
// if not tmp then
31453: LD_VAR 0 2
31457: NOT
31458: IFFALSE 31462
// exit ;
31460: GO 31516
// for i in tmp do
31462: LD_ADDR_VAR 0 1
31466: PUSH
31467: LD_VAR 0 2
31471: PUSH
31472: FOR_IN
31473: IFFALSE 31514
// for j := 1 to 4 do
31475: LD_ADDR_VAR 0 3
31479: PUSH
31480: DOUBLE
31481: LD_INT 1
31483: DEC
31484: ST_TO_ADDR
31485: LD_INT 4
31487: PUSH
31488: FOR_TO
31489: IFFALSE 31510
// SetSkill ( i , j , 10 ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_VAR 0 3
31500: PPUSH
31501: LD_INT 10
31503: PPUSH
31504: CALL_OW 237
31508: GO 31488
31510: POP
31511: POP
31512: GO 31472
31514: POP
31515: POP
// end ;
31516: PPOPN 3
31518: END
// every 0 0$1 trigger s30 do var i , tmp ;
31519: LD_EXP 118
31523: IFFALSE 31592
31525: GO 31527
31527: DISABLE
31528: LD_INT 0
31530: PPUSH
31531: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31532: LD_ADDR_VAR 0 2
31536: PUSH
31537: LD_INT 22
31539: PUSH
31540: LD_OWVAR 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31592
// for i in tmp do
31563: LD_ADDR_VAR 0 1
31567: PUSH
31568: LD_VAR 0 2
31572: PUSH
31573: FOR_IN
31574: IFFALSE 31590
// SetLives ( i , 300 ) ;
31576: LD_VAR 0 1
31580: PPUSH
31581: LD_INT 300
31583: PPUSH
31584: CALL_OW 234
31588: GO 31573
31590: POP
31591: POP
// end ;
31592: PPOPN 2
31594: END
// every 0 0$1 trigger s60 do var i , tmp ;
31595: LD_EXP 119
31599: IFFALSE 31668
31601: GO 31603
31603: DISABLE
31604: LD_INT 0
31606: PPUSH
31607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31608: LD_ADDR_VAR 0 2
31612: PUSH
31613: LD_INT 22
31615: PUSH
31616: LD_OWVAR 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PPUSH
31625: CALL_OW 69
31629: ST_TO_ADDR
// if not tmp then
31630: LD_VAR 0 2
31634: NOT
31635: IFFALSE 31639
// exit ;
31637: GO 31668
// for i in tmp do
31639: LD_ADDR_VAR 0 1
31643: PUSH
31644: LD_VAR 0 2
31648: PUSH
31649: FOR_IN
31650: IFFALSE 31666
// SetLives ( i , 600 ) ;
31652: LD_VAR 0 1
31656: PPUSH
31657: LD_INT 600
31659: PPUSH
31660: CALL_OW 234
31664: GO 31649
31666: POP
31667: POP
// end ;
31668: PPOPN 2
31670: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31671: LD_INT 0
31673: PPUSH
// case cmd of 301 :
31674: LD_VAR 0 1
31678: PUSH
31679: LD_INT 301
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31719
31687: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31688: LD_VAR 0 6
31692: PPUSH
31693: LD_VAR 0 7
31697: PPUSH
31698: LD_VAR 0 8
31702: PPUSH
31703: LD_VAR 0 4
31707: PPUSH
31708: LD_VAR 0 5
31712: PPUSH
31713: CALL 32928 0 5
31717: GO 31840
31719: LD_INT 302
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31764
31727: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31728: LD_VAR 0 6
31732: PPUSH
31733: LD_VAR 0 7
31737: PPUSH
31738: LD_VAR 0 8
31742: PPUSH
31743: LD_VAR 0 9
31747: PPUSH
31748: LD_VAR 0 4
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL 33019 0 6
31762: GO 31840
31764: LD_INT 303
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31809
31772: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31773: LD_VAR 0 6
31777: PPUSH
31778: LD_VAR 0 7
31782: PPUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 9
31792: PPUSH
31793: LD_VAR 0 4
31797: PPUSH
31798: LD_VAR 0 5
31802: PPUSH
31803: CALL 31845 0 6
31807: GO 31840
31809: LD_INT 304
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31839
31817: POP
// hHackTeleport ( unit , x , y ) ; end ;
31818: LD_VAR 0 2
31822: PPUSH
31823: LD_VAR 0 4
31827: PPUSH
31828: LD_VAR 0 5
31832: PPUSH
31833: CALL 33612 0 3
31837: GO 31840
31839: POP
// end ;
31840: LD_VAR 0 12
31844: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31845: LD_INT 0
31847: PPUSH
31848: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31849: LD_VAR 0 1
31853: PUSH
31854: LD_INT 1
31856: LESS
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 3
31865: GREATER
31866: OR
31867: PUSH
31868: LD_VAR 0 5
31872: PPUSH
31873: LD_VAR 0 6
31877: PPUSH
31878: CALL_OW 428
31882: OR
31883: IFFALSE 31887
// exit ;
31885: GO 32615
// uc_side := your_side ;
31887: LD_ADDR_OWVAR 20
31891: PUSH
31892: LD_OWVAR 2
31896: ST_TO_ADDR
// uc_nation := nation ;
31897: LD_ADDR_OWVAR 21
31901: PUSH
31902: LD_VAR 0 1
31906: ST_TO_ADDR
// bc_level = 1 ;
31907: LD_ADDR_OWVAR 43
31911: PUSH
31912: LD_INT 1
31914: ST_TO_ADDR
// case btype of 1 :
31915: LD_VAR 0 2
31919: PUSH
31920: LD_INT 1
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31939
31928: POP
// bc_type := b_depot ; 2 :
31929: LD_ADDR_OWVAR 42
31933: PUSH
31934: LD_INT 0
31936: ST_TO_ADDR
31937: GO 32559
31939: LD_INT 2
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31958
31947: POP
// bc_type := b_warehouse ; 3 :
31948: LD_ADDR_OWVAR 42
31952: PUSH
31953: LD_INT 1
31955: ST_TO_ADDR
31956: GO 32559
31958: LD_INT 3
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31977
31966: POP
// bc_type := b_lab ; 4 .. 9 :
31967: LD_ADDR_OWVAR 42
31971: PUSH
31972: LD_INT 6
31974: ST_TO_ADDR
31975: GO 32559
31977: LD_INT 4
31979: DOUBLE
31980: GREATEREQUAL
31981: IFFALSE 31989
31983: LD_INT 9
31985: DOUBLE
31986: LESSEQUAL
31987: IFTRUE 31991
31989: GO 32051
31991: POP
// begin bc_type := b_lab_half ;
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 7
31999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32000: LD_ADDR_OWVAR 44
32004: PUSH
32005: LD_INT 10
32007: PUSH
32008: LD_INT 11
32010: PUSH
32011: LD_INT 12
32013: PUSH
32014: LD_INT 15
32016: PUSH
32017: LD_INT 14
32019: PUSH
32020: LD_INT 13
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: PUSH
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 3
32038: MINUS
32039: ARRAY
32040: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32041: LD_ADDR_OWVAR 45
32045: PUSH
32046: LD_INT 9
32048: ST_TO_ADDR
// end ; 10 .. 13 :
32049: GO 32559
32051: LD_INT 10
32053: DOUBLE
32054: GREATEREQUAL
32055: IFFALSE 32063
32057: LD_INT 13
32059: DOUBLE
32060: LESSEQUAL
32061: IFTRUE 32065
32063: GO 32142
32065: POP
// begin bc_type := b_lab_full ;
32066: LD_ADDR_OWVAR 42
32070: PUSH
32071: LD_INT 8
32073: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32074: LD_ADDR_OWVAR 44
32078: PUSH
32079: LD_INT 10
32081: PUSH
32082: LD_INT 12
32084: PUSH
32085: LD_INT 14
32087: PUSH
32088: LD_INT 13
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: PUSH
32097: LD_VAR 0 2
32101: PUSH
32102: LD_INT 9
32104: MINUS
32105: ARRAY
32106: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32107: LD_ADDR_OWVAR 45
32111: PUSH
32112: LD_INT 11
32114: PUSH
32115: LD_INT 15
32117: PUSH
32118: LD_INT 12
32120: PUSH
32121: LD_INT 15
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: PUSH
32130: LD_VAR 0 2
32134: PUSH
32135: LD_INT 9
32137: MINUS
32138: ARRAY
32139: ST_TO_ADDR
// end ; 14 :
32140: GO 32559
32142: LD_INT 14
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32161
32150: POP
// bc_type := b_workshop ; 15 :
32151: LD_ADDR_OWVAR 42
32155: PUSH
32156: LD_INT 2
32158: ST_TO_ADDR
32159: GO 32559
32161: LD_INT 15
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32180
32169: POP
// bc_type := b_factory ; 16 :
32170: LD_ADDR_OWVAR 42
32174: PUSH
32175: LD_INT 3
32177: ST_TO_ADDR
32178: GO 32559
32180: LD_INT 16
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32199
32188: POP
// bc_type := b_ext_gun ; 17 :
32189: LD_ADDR_OWVAR 42
32193: PUSH
32194: LD_INT 17
32196: ST_TO_ADDR
32197: GO 32559
32199: LD_INT 17
32201: DOUBLE
32202: EQUAL
32203: IFTRUE 32207
32205: GO 32235
32207: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32208: LD_ADDR_OWVAR 42
32212: PUSH
32213: LD_INT 19
32215: PUSH
32216: LD_INT 23
32218: PUSH
32219: LD_INT 19
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: PUSH
32227: LD_VAR 0 1
32231: ARRAY
32232: ST_TO_ADDR
32233: GO 32559
32235: LD_INT 18
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32254
32243: POP
// bc_type := b_ext_radar ; 19 :
32244: LD_ADDR_OWVAR 42
32248: PUSH
32249: LD_INT 20
32251: ST_TO_ADDR
32252: GO 32559
32254: LD_INT 19
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32273
32262: POP
// bc_type := b_ext_radio ; 20 :
32263: LD_ADDR_OWVAR 42
32267: PUSH
32268: LD_INT 22
32270: ST_TO_ADDR
32271: GO 32559
32273: LD_INT 20
32275: DOUBLE
32276: EQUAL
32277: IFTRUE 32281
32279: GO 32292
32281: POP
// bc_type := b_ext_siberium ; 21 :
32282: LD_ADDR_OWVAR 42
32286: PUSH
32287: LD_INT 21
32289: ST_TO_ADDR
32290: GO 32559
32292: LD_INT 21
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32311
32300: POP
// bc_type := b_ext_computer ; 22 :
32301: LD_ADDR_OWVAR 42
32305: PUSH
32306: LD_INT 24
32308: ST_TO_ADDR
32309: GO 32559
32311: LD_INT 22
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32330
32319: POP
// bc_type := b_ext_track ; 23 :
32320: LD_ADDR_OWVAR 42
32324: PUSH
32325: LD_INT 16
32327: ST_TO_ADDR
32328: GO 32559
32330: LD_INT 23
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32349
32338: POP
// bc_type := b_ext_laser ; 24 :
32339: LD_ADDR_OWVAR 42
32343: PUSH
32344: LD_INT 25
32346: ST_TO_ADDR
32347: GO 32559
32349: LD_INT 24
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32368
32357: POP
// bc_type := b_control_tower ; 25 :
32358: LD_ADDR_OWVAR 42
32362: PUSH
32363: LD_INT 36
32365: ST_TO_ADDR
32366: GO 32559
32368: LD_INT 25
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32387
32376: POP
// bc_type := b_breastwork ; 26 :
32377: LD_ADDR_OWVAR 42
32381: PUSH
32382: LD_INT 31
32384: ST_TO_ADDR
32385: GO 32559
32387: LD_INT 26
32389: DOUBLE
32390: EQUAL
32391: IFTRUE 32395
32393: GO 32406
32395: POP
// bc_type := b_bunker ; 27 :
32396: LD_ADDR_OWVAR 42
32400: PUSH
32401: LD_INT 32
32403: ST_TO_ADDR
32404: GO 32559
32406: LD_INT 27
32408: DOUBLE
32409: EQUAL
32410: IFTRUE 32414
32412: GO 32425
32414: POP
// bc_type := b_turret ; 28 :
32415: LD_ADDR_OWVAR 42
32419: PUSH
32420: LD_INT 33
32422: ST_TO_ADDR
32423: GO 32559
32425: LD_INT 28
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32433
32431: GO 32444
32433: POP
// bc_type := b_armoury ; 29 :
32434: LD_ADDR_OWVAR 42
32438: PUSH
32439: LD_INT 4
32441: ST_TO_ADDR
32442: GO 32559
32444: LD_INT 29
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32463
32452: POP
// bc_type := b_barracks ; 30 :
32453: LD_ADDR_OWVAR 42
32457: PUSH
32458: LD_INT 5
32460: ST_TO_ADDR
32461: GO 32559
32463: LD_INT 30
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 32482
32471: POP
// bc_type := b_solar_power ; 31 :
32472: LD_ADDR_OWVAR 42
32476: PUSH
32477: LD_INT 27
32479: ST_TO_ADDR
32480: GO 32559
32482: LD_INT 31
32484: DOUBLE
32485: EQUAL
32486: IFTRUE 32490
32488: GO 32501
32490: POP
// bc_type := b_oil_power ; 32 :
32491: LD_ADDR_OWVAR 42
32495: PUSH
32496: LD_INT 26
32498: ST_TO_ADDR
32499: GO 32559
32501: LD_INT 32
32503: DOUBLE
32504: EQUAL
32505: IFTRUE 32509
32507: GO 32520
32509: POP
// bc_type := b_siberite_power ; 33 :
32510: LD_ADDR_OWVAR 42
32514: PUSH
32515: LD_INT 28
32517: ST_TO_ADDR
32518: GO 32559
32520: LD_INT 33
32522: DOUBLE
32523: EQUAL
32524: IFTRUE 32528
32526: GO 32539
32528: POP
// bc_type := b_oil_mine ; 34 :
32529: LD_ADDR_OWVAR 42
32533: PUSH
32534: LD_INT 29
32536: ST_TO_ADDR
32537: GO 32559
32539: LD_INT 34
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32558
32547: POP
// bc_type := b_siberite_mine ; end ;
32548: LD_ADDR_OWVAR 42
32552: PUSH
32553: LD_INT 30
32555: ST_TO_ADDR
32556: GO 32559
32558: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32559: LD_ADDR_VAR 0 8
32563: PUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: LD_VAR 0 6
32573: PPUSH
32574: LD_VAR 0 3
32578: PPUSH
32579: CALL_OW 47
32583: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32584: LD_OWVAR 42
32588: PUSH
32589: LD_INT 32
32591: PUSH
32592: LD_INT 33
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: IN
32599: IFFALSE 32615
// PlaceWeaponTurret ( b , weapon ) ;
32601: LD_VAR 0 8
32605: PPUSH
32606: LD_VAR 0 4
32610: PPUSH
32611: CALL_OW 431
// end ;
32615: LD_VAR 0 7
32619: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32620: LD_INT 0
32622: PPUSH
32623: PPUSH
32624: PPUSH
32625: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32626: LD_ADDR_VAR 0 4
32630: PUSH
32631: LD_INT 22
32633: PUSH
32634: LD_OWVAR 2
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 30
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PPUSH
32675: CALL_OW 69
32679: ST_TO_ADDR
// if not tmp then
32680: LD_VAR 0 4
32684: NOT
32685: IFFALSE 32689
// exit ;
32687: GO 32748
// for i in tmp do
32689: LD_ADDR_VAR 0 2
32693: PUSH
32694: LD_VAR 0 4
32698: PUSH
32699: FOR_IN
32700: IFFALSE 32746
// for j = 1 to 3 do
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: DOUBLE
32708: LD_INT 1
32710: DEC
32711: ST_TO_ADDR
32712: LD_INT 3
32714: PUSH
32715: FOR_TO
32716: IFFALSE 32742
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32718: LD_VAR 0 2
32722: PPUSH
32723: CALL_OW 274
32727: PPUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: LD_INT 99999
32735: PPUSH
32736: CALL_OW 277
32740: GO 32715
32742: POP
32743: POP
32744: GO 32699
32746: POP
32747: POP
// end ;
32748: LD_VAR 0 1
32752: RET
// export function hHackSetLevel10 ; var i , j ; begin
32753: LD_INT 0
32755: PPUSH
32756: PPUSH
32757: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32758: LD_ADDR_VAR 0 2
32762: PUSH
32763: LD_INT 21
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PPUSH
32773: CALL_OW 69
32777: PUSH
32778: FOR_IN
32779: IFFALSE 32831
// if IsSelected ( i ) then
32781: LD_VAR 0 2
32785: PPUSH
32786: CALL_OW 306
32790: IFFALSE 32829
// begin for j := 1 to 4 do
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: DOUBLE
32798: LD_INT 1
32800: DEC
32801: ST_TO_ADDR
32802: LD_INT 4
32804: PUSH
32805: FOR_TO
32806: IFFALSE 32827
// SetSkill ( i , j , 10 ) ;
32808: LD_VAR 0 2
32812: PPUSH
32813: LD_VAR 0 3
32817: PPUSH
32818: LD_INT 10
32820: PPUSH
32821: CALL_OW 237
32825: GO 32805
32827: POP
32828: POP
// end ;
32829: GO 32778
32831: POP
32832: POP
// end ;
32833: LD_VAR 0 1
32837: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32838: LD_INT 0
32840: PPUSH
32841: PPUSH
32842: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32843: LD_ADDR_VAR 0 2
32847: PUSH
32848: LD_INT 22
32850: PUSH
32851: LD_OWVAR 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 21
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PPUSH
32874: CALL_OW 69
32878: PUSH
32879: FOR_IN
32880: IFFALSE 32921
// begin for j := 1 to 4 do
32882: LD_ADDR_VAR 0 3
32886: PUSH
32887: DOUBLE
32888: LD_INT 1
32890: DEC
32891: ST_TO_ADDR
32892: LD_INT 4
32894: PUSH
32895: FOR_TO
32896: IFFALSE 32917
// SetSkill ( i , j , 10 ) ;
32898: LD_VAR 0 2
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_INT 10
32910: PPUSH
32911: CALL_OW 237
32915: GO 32895
32917: POP
32918: POP
// end ;
32919: GO 32879
32921: POP
32922: POP
// end ;
32923: LD_VAR 0 1
32927: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32928: LD_INT 0
32930: PPUSH
// uc_side := your_side ;
32931: LD_ADDR_OWVAR 20
32935: PUSH
32936: LD_OWVAR 2
32940: ST_TO_ADDR
// uc_nation := nation ;
32941: LD_ADDR_OWVAR 21
32945: PUSH
32946: LD_VAR 0 1
32950: ST_TO_ADDR
// InitHc ;
32951: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32955: LD_INT 0
32957: PPUSH
32958: LD_VAR 0 2
32962: PPUSH
32963: LD_VAR 0 3
32967: PPUSH
32968: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32972: LD_VAR 0 4
32976: PPUSH
32977: LD_VAR 0 5
32981: PPUSH
32982: CALL_OW 428
32986: PUSH
32987: LD_INT 0
32989: EQUAL
32990: IFFALSE 33014
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32992: CALL_OW 44
32996: PPUSH
32997: LD_VAR 0 4
33001: PPUSH
33002: LD_VAR 0 5
33006: PPUSH
33007: LD_INT 1
33009: PPUSH
33010: CALL_OW 48
// end ;
33014: LD_VAR 0 6
33018: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33019: LD_INT 0
33021: PPUSH
33022: PPUSH
// uc_side := your_side ;
33023: LD_ADDR_OWVAR 20
33027: PUSH
33028: LD_OWVAR 2
33032: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33033: LD_VAR 0 1
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: LD_INT 4
33049: PUSH
33050: LD_INT 5
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: IN
33060: IFFALSE 33072
// uc_nation := nation_american else
33062: LD_ADDR_OWVAR 21
33066: PUSH
33067: LD_INT 1
33069: ST_TO_ADDR
33070: GO 33115
// if chassis in [ 11 , 12 , 13 , 14 ] then
33072: LD_VAR 0 1
33076: PUSH
33077: LD_INT 11
33079: PUSH
33080: LD_INT 12
33082: PUSH
33083: LD_INT 13
33085: PUSH
33086: LD_INT 14
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: IN
33095: IFFALSE 33107
// uc_nation := nation_arabian else
33097: LD_ADDR_OWVAR 21
33101: PUSH
33102: LD_INT 2
33104: ST_TO_ADDR
33105: GO 33115
// uc_nation := nation_russian ;
33107: LD_ADDR_OWVAR 21
33111: PUSH
33112: LD_INT 3
33114: ST_TO_ADDR
// vc_chassis := chassis ;
33115: LD_ADDR_OWVAR 37
33119: PUSH
33120: LD_VAR 0 1
33124: ST_TO_ADDR
// vc_engine := engine ;
33125: LD_ADDR_OWVAR 39
33129: PUSH
33130: LD_VAR 0 2
33134: ST_TO_ADDR
// vc_control := control ;
33135: LD_ADDR_OWVAR 38
33139: PUSH
33140: LD_VAR 0 3
33144: ST_TO_ADDR
// vc_weapon := weapon ;
33145: LD_ADDR_OWVAR 40
33149: PUSH
33150: LD_VAR 0 4
33154: ST_TO_ADDR
// un := CreateVehicle ;
33155: LD_ADDR_VAR 0 8
33159: PUSH
33160: CALL_OW 45
33164: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33165: LD_VAR 0 8
33169: PPUSH
33170: LD_INT 0
33172: PPUSH
33173: LD_INT 5
33175: PPUSH
33176: CALL_OW 12
33180: PPUSH
33181: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33185: LD_VAR 0 8
33189: PPUSH
33190: LD_VAR 0 5
33194: PPUSH
33195: LD_VAR 0 6
33199: PPUSH
33200: LD_INT 1
33202: PPUSH
33203: CALL_OW 48
// end ;
33207: LD_VAR 0 7
33211: RET
// export hInvincible ; every 1 do
33212: GO 33214
33214: DISABLE
// hInvincible := [ ] ;
33215: LD_ADDR_EXP 120
33219: PUSH
33220: EMPTY
33221: ST_TO_ADDR
33222: END
// every 10 do var i ;
33223: GO 33225
33225: DISABLE
33226: LD_INT 0
33228: PPUSH
// begin enable ;
33229: ENABLE
// if not hInvincible then
33230: LD_EXP 120
33234: NOT
33235: IFFALSE 33239
// exit ;
33237: GO 33283
// for i in hInvincible do
33239: LD_ADDR_VAR 0 1
33243: PUSH
33244: LD_EXP 120
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33281
// if GetLives ( i ) < 1000 then
33252: LD_VAR 0 1
33256: PPUSH
33257: CALL_OW 256
33261: PUSH
33262: LD_INT 1000
33264: LESS
33265: IFFALSE 33279
// SetLives ( i , 1000 ) ;
33267: LD_VAR 0 1
33271: PPUSH
33272: LD_INT 1000
33274: PPUSH
33275: CALL_OW 234
33279: GO 33249
33281: POP
33282: POP
// end ;
33283: PPOPN 1
33285: END
// export function hHackInvincible ; var i ; begin
33286: LD_INT 0
33288: PPUSH
33289: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33290: LD_ADDR_VAR 0 2
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 21
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 21
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: PPUSH
33323: CALL_OW 69
33327: PUSH
33328: FOR_IN
33329: IFFALSE 33390
// if IsSelected ( i ) then
33331: LD_VAR 0 2
33335: PPUSH
33336: CALL_OW 306
33340: IFFALSE 33388
// begin if i in hInvincible then
33342: LD_VAR 0 2
33346: PUSH
33347: LD_EXP 120
33351: IN
33352: IFFALSE 33372
// hInvincible := hInvincible diff i else
33354: LD_ADDR_EXP 120
33358: PUSH
33359: LD_EXP 120
33363: PUSH
33364: LD_VAR 0 2
33368: DIFF
33369: ST_TO_ADDR
33370: GO 33388
// hInvincible := hInvincible union i ;
33372: LD_ADDR_EXP 120
33376: PUSH
33377: LD_EXP 120
33381: PUSH
33382: LD_VAR 0 2
33386: UNION
33387: ST_TO_ADDR
// end ;
33388: GO 33328
33390: POP
33391: POP
// end ;
33392: LD_VAR 0 1
33396: RET
// export function hHackInvisible ; var i , j ; begin
33397: LD_INT 0
33399: PPUSH
33400: PPUSH
33401: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33402: LD_ADDR_VAR 0 2
33406: PUSH
33407: LD_INT 21
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PPUSH
33417: CALL_OW 69
33421: PUSH
33422: FOR_IN
33423: IFFALSE 33447
// if IsSelected ( i ) then
33425: LD_VAR 0 2
33429: PPUSH
33430: CALL_OW 306
33434: IFFALSE 33445
// ComForceInvisible ( i ) ;
33436: LD_VAR 0 2
33440: PPUSH
33441: CALL_OW 496
33445: GO 33422
33447: POP
33448: POP
// end ;
33449: LD_VAR 0 1
33453: RET
// export function hHackChangeYourSide ; begin
33454: LD_INT 0
33456: PPUSH
// if your_side = 8 then
33457: LD_OWVAR 2
33461: PUSH
33462: LD_INT 8
33464: EQUAL
33465: IFFALSE 33477
// your_side := 0 else
33467: LD_ADDR_OWVAR 2
33471: PUSH
33472: LD_INT 0
33474: ST_TO_ADDR
33475: GO 33491
// your_side := your_side + 1 ;
33477: LD_ADDR_OWVAR 2
33481: PUSH
33482: LD_OWVAR 2
33486: PUSH
33487: LD_INT 1
33489: PLUS
33490: ST_TO_ADDR
// end ;
33491: LD_VAR 0 1
33495: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
33500: PPUSH
// for i in all_units do
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: LD_OWVAR 3
33510: PUSH
33511: FOR_IN
33512: IFFALSE 33590
// if IsSelected ( i ) then
33514: LD_VAR 0 2
33518: PPUSH
33519: CALL_OW 306
33523: IFFALSE 33588
// begin j := GetSide ( i ) ;
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_VAR 0 2
33534: PPUSH
33535: CALL_OW 255
33539: ST_TO_ADDR
// if j = 8 then
33540: LD_VAR 0 3
33544: PUSH
33545: LD_INT 8
33547: EQUAL
33548: IFFALSE 33560
// j := 0 else
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_INT 0
33557: ST_TO_ADDR
33558: GO 33574
// j := j + 1 ;
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_VAR 0 3
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: ST_TO_ADDR
// SetSide ( i , j ) ;
33574: LD_VAR 0 2
33578: PPUSH
33579: LD_VAR 0 3
33583: PPUSH
33584: CALL_OW 235
// end ;
33588: GO 33511
33590: POP
33591: POP
// end ;
33592: LD_VAR 0 1
33596: RET
// export function hHackFog ; begin
33597: LD_INT 0
33599: PPUSH
// FogOff ( true ) ;
33600: LD_INT 1
33602: PPUSH
33603: CALL_OW 344
// end ;
33607: LD_VAR 0 1
33611: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33612: LD_INT 0
33614: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33615: LD_VAR 0 1
33619: PPUSH
33620: LD_VAR 0 2
33624: PPUSH
33625: LD_VAR 0 3
33629: PPUSH
33630: LD_INT 1
33632: PPUSH
33633: LD_INT 1
33635: PPUSH
33636: CALL_OW 483
// CenterOnXY ( x , y ) ;
33640: LD_VAR 0 2
33644: PPUSH
33645: LD_VAR 0 3
33649: PPUSH
33650: CALL_OW 84
// end ;
33654: LD_VAR 0 4
33658: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33659: LD_INT 0
33661: PPUSH
33662: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33663: LD_VAR 0 1
33667: NOT
33668: PUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_VAR 0 3
33678: PPUSH
33679: CALL_OW 488
33683: NOT
33684: OR
33685: PUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 266
33695: PUSH
33696: LD_INT 3
33698: NONEQUAL
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 247
33709: PUSH
33710: LD_INT 1
33712: EQUAL
33713: NOT
33714: AND
33715: OR
33716: IFFALSE 33720
// exit ;
33718: GO 33869
// if GetType ( factory ) = unit_human then
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 247
33729: PUSH
33730: LD_INT 1
33732: EQUAL
33733: IFFALSE 33750
// factory := IsInUnit ( factory ) ;
33735: LD_ADDR_VAR 0 1
33739: PUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 310
33749: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 266
33759: PUSH
33760: LD_INT 3
33762: NONEQUAL
33763: IFFALSE 33767
// exit ;
33765: GO 33869
// if HexInfo ( x , y ) = factory then
33767: LD_VAR 0 2
33771: PPUSH
33772: LD_VAR 0 3
33776: PPUSH
33777: CALL_OW 428
33781: PUSH
33782: LD_VAR 0 1
33786: EQUAL
33787: IFFALSE 33814
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33789: LD_ADDR_EXP 121
33793: PUSH
33794: LD_EXP 121
33798: PPUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: LD_INT 0
33806: PPUSH
33807: CALL_OW 1
33811: ST_TO_ADDR
33812: GO 33865
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33814: LD_ADDR_EXP 121
33818: PUSH
33819: LD_EXP 121
33823: PPUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL_OW 255
33838: PUSH
33839: LD_VAR 0 1
33843: PUSH
33844: LD_VAR 0 2
33848: PUSH
33849: LD_VAR 0 3
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: PPUSH
33860: CALL_OW 1
33864: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33865: CALL 33874 0 0
// end ;
33869: LD_VAR 0 4
33873: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
33878: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33879: LD_STRING resetFactoryWaypoint();
33881: PPUSH
33882: CALL_OW 559
// if factoryWaypoints then
33886: LD_EXP 121
33890: IFFALSE 34016
// begin list := PrepareArray ( factoryWaypoints ) ;
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_EXP 121
33901: PPUSH
33902: CALL 80338 0 1
33906: ST_TO_ADDR
// for i := 1 to list do
33907: LD_ADDR_VAR 0 2
33911: PUSH
33912: DOUBLE
33913: LD_INT 1
33915: DEC
33916: ST_TO_ADDR
33917: LD_VAR 0 3
33921: PUSH
33922: FOR_TO
33923: IFFALSE 34014
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33925: LD_STRING setFactoryWaypointXY(
33927: PUSH
33928: LD_VAR 0 3
33932: PUSH
33933: LD_VAR 0 2
33937: ARRAY
33938: PUSH
33939: LD_INT 1
33941: ARRAY
33942: STR
33943: PUSH
33944: LD_STRING ,
33946: STR
33947: PUSH
33948: LD_VAR 0 3
33952: PUSH
33953: LD_VAR 0 2
33957: ARRAY
33958: PUSH
33959: LD_INT 2
33961: ARRAY
33962: STR
33963: PUSH
33964: LD_STRING ,
33966: STR
33967: PUSH
33968: LD_VAR 0 3
33972: PUSH
33973: LD_VAR 0 2
33977: ARRAY
33978: PUSH
33979: LD_INT 3
33981: ARRAY
33982: STR
33983: PUSH
33984: LD_STRING ,
33986: STR
33987: PUSH
33988: LD_VAR 0 3
33992: PUSH
33993: LD_VAR 0 2
33997: ARRAY
33998: PUSH
33999: LD_INT 4
34001: ARRAY
34002: STR
34003: PUSH
34004: LD_STRING )
34006: STR
34007: PPUSH
34008: CALL_OW 559
34012: GO 33922
34014: POP
34015: POP
// end ; end ;
34016: LD_VAR 0 1
34020: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34021: LD_INT 0
34023: PPUSH
// if HexInfo ( x , y ) = warehouse then
34024: LD_VAR 0 2
34028: PPUSH
34029: LD_VAR 0 3
34033: PPUSH
34034: CALL_OW 428
34038: PUSH
34039: LD_VAR 0 1
34043: EQUAL
34044: IFFALSE 34071
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34046: LD_ADDR_EXP 122
34050: PUSH
34051: LD_EXP 122
34055: PPUSH
34056: LD_VAR 0 1
34060: PPUSH
34061: LD_INT 0
34063: PPUSH
34064: CALL_OW 1
34068: ST_TO_ADDR
34069: GO 34122
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34071: LD_ADDR_EXP 122
34075: PUSH
34076: LD_EXP 122
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 255
34095: PUSH
34096: LD_VAR 0 1
34100: PUSH
34101: LD_VAR 0 2
34105: PUSH
34106: LD_VAR 0 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: PPUSH
34117: CALL_OW 1
34121: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34122: CALL 34131 0 0
// end ;
34126: LD_VAR 0 4
34130: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34131: LD_INT 0
34133: PPUSH
34134: PPUSH
34135: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34136: LD_STRING resetWarehouseGatheringPoints();
34138: PPUSH
34139: CALL_OW 559
// if warehouseGatheringPoints then
34143: LD_EXP 122
34147: IFFALSE 34273
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_EXP 122
34158: PPUSH
34159: CALL 80338 0 1
34163: ST_TO_ADDR
// for i := 1 to list do
34164: LD_ADDR_VAR 0 2
34168: PUSH
34169: DOUBLE
34170: LD_INT 1
34172: DEC
34173: ST_TO_ADDR
34174: LD_VAR 0 3
34178: PUSH
34179: FOR_TO
34180: IFFALSE 34271
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34182: LD_STRING setWarehouseGatheringPointXY(
34184: PUSH
34185: LD_VAR 0 3
34189: PUSH
34190: LD_VAR 0 2
34194: ARRAY
34195: PUSH
34196: LD_INT 1
34198: ARRAY
34199: STR
34200: PUSH
34201: LD_STRING ,
34203: STR
34204: PUSH
34205: LD_VAR 0 3
34209: PUSH
34210: LD_VAR 0 2
34214: ARRAY
34215: PUSH
34216: LD_INT 2
34218: ARRAY
34219: STR
34220: PUSH
34221: LD_STRING ,
34223: STR
34224: PUSH
34225: LD_VAR 0 3
34229: PUSH
34230: LD_VAR 0 2
34234: ARRAY
34235: PUSH
34236: LD_INT 3
34238: ARRAY
34239: STR
34240: PUSH
34241: LD_STRING ,
34243: STR
34244: PUSH
34245: LD_VAR 0 3
34249: PUSH
34250: LD_VAR 0 2
34254: ARRAY
34255: PUSH
34256: LD_INT 4
34258: ARRAY
34259: STR
34260: PUSH
34261: LD_STRING )
34263: STR
34264: PPUSH
34265: CALL_OW 559
34269: GO 34179
34271: POP
34272: POP
// end ; end ;
34273: LD_VAR 0 1
34277: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34278: LD_EXP 122
34282: IFFALSE 34967
34284: GO 34286
34286: DISABLE
34287: LD_INT 0
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
34296: PPUSH
34297: PPUSH
// begin enable ;
34298: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34299: LD_ADDR_VAR 0 3
34303: PUSH
34304: LD_EXP 122
34308: PPUSH
34309: CALL 80338 0 1
34313: ST_TO_ADDR
// if not list then
34314: LD_VAR 0 3
34318: NOT
34319: IFFALSE 34323
// exit ;
34321: GO 34967
// for i := 1 to list do
34323: LD_ADDR_VAR 0 1
34327: PUSH
34328: DOUBLE
34329: LD_INT 1
34331: DEC
34332: ST_TO_ADDR
34333: LD_VAR 0 3
34337: PUSH
34338: FOR_TO
34339: IFFALSE 34965
// begin depot := list [ i ] [ 2 ] ;
34341: LD_ADDR_VAR 0 8
34345: PUSH
34346: LD_VAR 0 3
34350: PUSH
34351: LD_VAR 0 1
34355: ARRAY
34356: PUSH
34357: LD_INT 2
34359: ARRAY
34360: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34361: LD_ADDR_VAR 0 5
34365: PUSH
34366: LD_VAR 0 3
34370: PUSH
34371: LD_VAR 0 1
34375: ARRAY
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34381: LD_VAR 0 8
34385: PPUSH
34386: CALL_OW 301
34390: PUSH
34391: LD_VAR 0 5
34395: PUSH
34396: LD_VAR 0 8
34400: PPUSH
34401: CALL_OW 255
34405: NONEQUAL
34406: OR
34407: IFFALSE 34436
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34409: LD_ADDR_EXP 122
34413: PUSH
34414: LD_EXP 122
34418: PPUSH
34419: LD_VAR 0 8
34423: PPUSH
34424: LD_INT 0
34426: PPUSH
34427: CALL_OW 1
34431: ST_TO_ADDR
// exit ;
34432: POP
34433: POP
34434: GO 34967
// end ; x := list [ i ] [ 3 ] ;
34436: LD_ADDR_VAR 0 6
34440: PUSH
34441: LD_VAR 0 3
34445: PUSH
34446: LD_VAR 0 1
34450: ARRAY
34451: PUSH
34452: LD_INT 3
34454: ARRAY
34455: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34456: LD_ADDR_VAR 0 7
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: LD_VAR 0 1
34470: ARRAY
34471: PUSH
34472: LD_INT 4
34474: ARRAY
34475: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_VAR 0 6
34485: PPUSH
34486: LD_VAR 0 7
34490: PPUSH
34491: LD_INT 16
34493: PPUSH
34494: CALL 78926 0 3
34498: ST_TO_ADDR
// if not cratesNearbyPoint then
34499: LD_VAR 0 9
34503: NOT
34504: IFFALSE 34510
// exit ;
34506: POP
34507: POP
34508: GO 34967
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34510: LD_ADDR_VAR 0 4
34514: PUSH
34515: LD_INT 22
34517: PUSH
34518: LD_VAR 0 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 60
34532: PUSH
34533: EMPTY
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 91
34542: PUSH
34543: LD_VAR 0 8
34547: PUSH
34548: LD_INT 6
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 25
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 25
34571: PUSH
34572: LD_INT 16
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: PPUSH
34590: CALL_OW 69
34594: PUSH
34595: LD_VAR 0 8
34599: PPUSH
34600: CALL_OW 313
34604: PPUSH
34605: LD_INT 3
34607: PUSH
34608: LD_INT 60
34610: PUSH
34611: EMPTY
34612: LIST
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 25
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 25
34633: PUSH
34634: LD_INT 16
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL_OW 72
34654: UNION
34655: ST_TO_ADDR
// if tmp then
34656: LD_VAR 0 4
34660: IFFALSE 34740
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34662: LD_ADDR_VAR 0 4
34666: PUSH
34667: LD_VAR 0 4
34671: PPUSH
34672: LD_INT 3
34674: PPUSH
34675: CALL 76895 0 2
34679: ST_TO_ADDR
// for j in tmp do
34680: LD_ADDR_VAR 0 2
34684: PUSH
34685: LD_VAR 0 4
34689: PUSH
34690: FOR_IN
34691: IFFALSE 34734
// begin if IsInUnit ( j ) then
34693: LD_VAR 0 2
34697: PPUSH
34698: CALL_OW 310
34702: IFFALSE 34713
// ComExit ( j ) ;
34704: LD_VAR 0 2
34708: PPUSH
34709: CALL 76978 0 1
// AddComCollect ( j , x , y ) ;
34713: LD_VAR 0 2
34717: PPUSH
34718: LD_VAR 0 6
34722: PPUSH
34723: LD_VAR 0 7
34727: PPUSH
34728: CALL_OW 177
// end ;
34732: GO 34690
34734: POP
34735: POP
// exit ;
34736: POP
34737: POP
34738: GO 34967
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34740: LD_ADDR_VAR 0 4
34744: PUSH
34745: LD_INT 22
34747: PUSH
34748: LD_VAR 0 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 91
34759: PUSH
34760: LD_VAR 0 8
34764: PUSH
34765: LD_INT 8
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 34
34778: PUSH
34779: LD_INT 12
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 34
34788: PUSH
34789: LD_INT 51
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 34
34798: PUSH
34799: LD_INT 32
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 34
34808: PUSH
34809: LD_INT 89
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: PPUSH
34828: CALL_OW 69
34832: ST_TO_ADDR
// if tmp then
34833: LD_VAR 0 4
34837: IFFALSE 34963
// begin for j in tmp do
34839: LD_ADDR_VAR 0 2
34843: PUSH
34844: LD_VAR 0 4
34848: PUSH
34849: FOR_IN
34850: IFFALSE 34961
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34852: LD_VAR 0 2
34856: PPUSH
34857: CALL_OW 262
34861: PUSH
34862: LD_INT 3
34864: EQUAL
34865: PUSH
34866: LD_VAR 0 2
34870: PPUSH
34871: CALL_OW 261
34875: PUSH
34876: LD_INT 20
34878: GREATER
34879: OR
34880: PUSH
34881: LD_VAR 0 2
34885: PPUSH
34886: CALL_OW 314
34890: NOT
34891: AND
34892: PUSH
34893: LD_VAR 0 2
34897: PPUSH
34898: CALL_OW 263
34902: PUSH
34903: LD_INT 1
34905: NONEQUAL
34906: PUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: CALL_OW 311
34916: OR
34917: AND
34918: IFFALSE 34959
// begin ComCollect ( j , x , y ) ;
34920: LD_VAR 0 2
34924: PPUSH
34925: LD_VAR 0 6
34929: PPUSH
34930: LD_VAR 0 7
34934: PPUSH
34935: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34939: LD_VAR 0 2
34943: PPUSH
34944: LD_VAR 0 8
34948: PPUSH
34949: CALL_OW 172
// exit ;
34953: POP
34954: POP
34955: POP
34956: POP
34957: GO 34967
// end ;
34959: GO 34849
34961: POP
34962: POP
// end ; end ;
34963: GO 34338
34965: POP
34966: POP
// end ; end_of_file
34967: PPOPN 9
34969: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34970: LD_INT 0
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 264
34985: PUSH
34986: LD_INT 91
34988: EQUAL
34989: IFFALSE 35061
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34991: LD_INT 68
34993: PPUSH
34994: LD_VAR 0 1
34998: PPUSH
34999: CALL_OW 255
35003: PPUSH
35004: CALL_OW 321
35008: PUSH
35009: LD_INT 2
35011: EQUAL
35012: IFFALSE 35024
// eff := 70 else
35014: LD_ADDR_VAR 0 4
35018: PUSH
35019: LD_INT 70
35021: ST_TO_ADDR
35022: GO 35032
// eff := 30 ;
35024: LD_ADDR_VAR 0 4
35028: PUSH
35029: LD_INT 30
35031: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35032: LD_VAR 0 1
35036: PPUSH
35037: CALL_OW 250
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 251
35051: PPUSH
35052: LD_VAR 0 4
35056: PPUSH
35057: CALL_OW 495
// end ; end ;
35061: LD_VAR 0 2
35065: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35066: LD_INT 0
35068: PPUSH
// end ;
35069: LD_VAR 0 4
35073: RET
// export function SOS_Command ( cmd ) ; begin
35074: LD_INT 0
35076: PPUSH
// end ;
35077: LD_VAR 0 2
35081: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35082: LD_INT 0
35084: PPUSH
// end ;
35085: LD_VAR 0 6
35089: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35090: LD_INT 0
35092: PPUSH
35093: PPUSH
// if not vehicle or not factory then
35094: LD_VAR 0 1
35098: NOT
35099: PUSH
35100: LD_VAR 0 2
35104: NOT
35105: OR
35106: IFFALSE 35110
// exit ;
35108: GO 35341
// if factoryWaypoints >= factory then
35110: LD_EXP 121
35114: PUSH
35115: LD_VAR 0 2
35119: GREATEREQUAL
35120: IFFALSE 35341
// if factoryWaypoints [ factory ] then
35122: LD_EXP 121
35126: PUSH
35127: LD_VAR 0 2
35131: ARRAY
35132: IFFALSE 35341
// begin if GetControl ( vehicle ) = control_manual then
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 263
35143: PUSH
35144: LD_INT 1
35146: EQUAL
35147: IFFALSE 35228
// begin driver := IsDrivenBy ( vehicle ) ;
35149: LD_ADDR_VAR 0 4
35153: PUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: CALL_OW 311
35163: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35164: LD_VAR 0 4
35168: PPUSH
35169: LD_EXP 121
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 3
35182: ARRAY
35183: PPUSH
35184: LD_EXP 121
35188: PUSH
35189: LD_VAR 0 2
35193: ARRAY
35194: PUSH
35195: LD_INT 4
35197: ARRAY
35198: PPUSH
35199: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35203: LD_VAR 0 4
35207: PPUSH
35208: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35212: LD_VAR 0 4
35216: PPUSH
35217: LD_VAR 0 2
35221: PPUSH
35222: CALL_OW 180
// end else
35226: GO 35341
// if GetControl ( vehicle ) = control_remote then
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 263
35237: PUSH
35238: LD_INT 2
35240: EQUAL
35241: IFFALSE 35302
// begin wait ( 0 0$2 ) ;
35243: LD_INT 70
35245: PPUSH
35246: CALL_OW 67
// if Connect ( vehicle ) then
35250: LD_VAR 0 1
35254: PPUSH
35255: CALL 47199 0 1
35259: IFFALSE 35300
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35261: LD_VAR 0 1
35265: PPUSH
35266: LD_EXP 121
35270: PUSH
35271: LD_VAR 0 2
35275: ARRAY
35276: PUSH
35277: LD_INT 3
35279: ARRAY
35280: PPUSH
35281: LD_EXP 121
35285: PUSH
35286: LD_VAR 0 2
35290: ARRAY
35291: PUSH
35292: LD_INT 4
35294: ARRAY
35295: PPUSH
35296: CALL_OW 171
// end else
35300: GO 35341
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35302: LD_VAR 0 1
35306: PPUSH
35307: LD_EXP 121
35311: PUSH
35312: LD_VAR 0 2
35316: ARRAY
35317: PUSH
35318: LD_INT 3
35320: ARRAY
35321: PPUSH
35322: LD_EXP 121
35326: PUSH
35327: LD_VAR 0 2
35331: ARRAY
35332: PUSH
35333: LD_INT 4
35335: ARRAY
35336: PPUSH
35337: CALL_OW 171
// end ; end ;
35341: LD_VAR 0 3
35345: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35346: LD_INT 0
35348: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35349: LD_VAR 0 1
35353: PUSH
35354: LD_INT 250
35356: EQUAL
35357: PUSH
35358: LD_VAR 0 2
35362: PPUSH
35363: CALL_OW 264
35367: PUSH
35368: LD_INT 81
35370: EQUAL
35371: AND
35372: IFFALSE 35393
// MinerPlaceMine ( unit , x , y ) ;
35374: LD_VAR 0 2
35378: PPUSH
35379: LD_VAR 0 4
35383: PPUSH
35384: LD_VAR 0 5
35388: PPUSH
35389: CALL 37778 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35393: LD_VAR 0 1
35397: PUSH
35398: LD_INT 251
35400: EQUAL
35401: PUSH
35402: LD_VAR 0 2
35406: PPUSH
35407: CALL_OW 264
35411: PUSH
35412: LD_INT 81
35414: EQUAL
35415: AND
35416: IFFALSE 35437
// MinerDetonateMine ( unit , x , y ) ;
35418: LD_VAR 0 2
35422: PPUSH
35423: LD_VAR 0 4
35427: PPUSH
35428: LD_VAR 0 5
35432: PPUSH
35433: CALL 38053 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35437: LD_VAR 0 1
35441: PUSH
35442: LD_INT 252
35444: EQUAL
35445: PUSH
35446: LD_VAR 0 2
35450: PPUSH
35451: CALL_OW 264
35455: PUSH
35456: LD_INT 81
35458: EQUAL
35459: AND
35460: IFFALSE 35481
// MinerCreateMinefield ( unit , x , y ) ;
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_VAR 0 4
35471: PPUSH
35472: LD_VAR 0 5
35476: PPUSH
35477: CALL 38470 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35481: LD_VAR 0 1
35485: PUSH
35486: LD_INT 253
35488: EQUAL
35489: PUSH
35490: LD_VAR 0 2
35494: PPUSH
35495: CALL_OW 257
35499: PUSH
35500: LD_INT 5
35502: EQUAL
35503: AND
35504: IFFALSE 35525
// ComBinocular ( unit , x , y ) ;
35506: LD_VAR 0 2
35510: PPUSH
35511: LD_VAR 0 4
35515: PPUSH
35516: LD_VAR 0 5
35520: PPUSH
35521: CALL 38839 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35525: LD_VAR 0 1
35529: PUSH
35530: LD_INT 254
35532: EQUAL
35533: PUSH
35534: LD_VAR 0 2
35538: PPUSH
35539: CALL_OW 264
35543: PUSH
35544: LD_INT 99
35546: EQUAL
35547: AND
35548: PUSH
35549: LD_VAR 0 3
35553: PPUSH
35554: CALL_OW 263
35558: PUSH
35559: LD_INT 3
35561: EQUAL
35562: AND
35563: IFFALSE 35579
// HackDestroyVehicle ( unit , selectedUnit ) ;
35565: LD_VAR 0 2
35569: PPUSH
35570: LD_VAR 0 3
35574: PPUSH
35575: CALL 37142 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35579: LD_VAR 0 1
35583: PUSH
35584: LD_INT 255
35586: EQUAL
35587: PUSH
35588: LD_VAR 0 2
35592: PPUSH
35593: CALL_OW 264
35597: PUSH
35598: LD_INT 14
35600: PUSH
35601: LD_INT 53
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: IN
35608: AND
35609: PUSH
35610: LD_VAR 0 4
35614: PPUSH
35615: LD_VAR 0 5
35619: PPUSH
35620: CALL_OW 488
35624: AND
35625: IFFALSE 35649
// CutTreeXYR ( unit , x , y , 12 ) ;
35627: LD_VAR 0 2
35631: PPUSH
35632: LD_VAR 0 4
35636: PPUSH
35637: LD_VAR 0 5
35641: PPUSH
35642: LD_INT 12
35644: PPUSH
35645: CALL 35712 0 4
// if cmd = 256 then
35649: LD_VAR 0 1
35653: PUSH
35654: LD_INT 256
35656: EQUAL
35657: IFFALSE 35678
// SetFactoryWaypoint ( unit , x , y ) ;
35659: LD_VAR 0 2
35663: PPUSH
35664: LD_VAR 0 4
35668: PPUSH
35669: LD_VAR 0 5
35673: PPUSH
35674: CALL 33659 0 3
// if cmd = 257 then
35678: LD_VAR 0 1
35682: PUSH
35683: LD_INT 257
35685: EQUAL
35686: IFFALSE 35707
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35688: LD_VAR 0 2
35692: PPUSH
35693: LD_VAR 0 4
35697: PPUSH
35698: LD_VAR 0 5
35702: PPUSH
35703: CALL 34021 0 3
// end ;
35707: LD_VAR 0 6
35711: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35712: LD_INT 0
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35723: LD_VAR 0 1
35727: NOT
35728: PUSH
35729: LD_VAR 0 2
35733: PPUSH
35734: LD_VAR 0 3
35738: PPUSH
35739: CALL_OW 488
35743: NOT
35744: OR
35745: PUSH
35746: LD_VAR 0 4
35750: NOT
35751: OR
35752: IFFALSE 35756
// exit ;
35754: GO 36096
// list := [ ] ;
35756: LD_ADDR_VAR 0 13
35760: PUSH
35761: EMPTY
35762: ST_TO_ADDR
// if x - r < 0 then
35763: LD_VAR 0 2
35767: PUSH
35768: LD_VAR 0 4
35772: MINUS
35773: PUSH
35774: LD_INT 0
35776: LESS
35777: IFFALSE 35789
// min_x := 0 else
35779: LD_ADDR_VAR 0 7
35783: PUSH
35784: LD_INT 0
35786: ST_TO_ADDR
35787: GO 35805
// min_x := x - r ;
35789: LD_ADDR_VAR 0 7
35793: PUSH
35794: LD_VAR 0 2
35798: PUSH
35799: LD_VAR 0 4
35803: MINUS
35804: ST_TO_ADDR
// if y - r < 0 then
35805: LD_VAR 0 3
35809: PUSH
35810: LD_VAR 0 4
35814: MINUS
35815: PUSH
35816: LD_INT 0
35818: LESS
35819: IFFALSE 35831
// min_y := 0 else
35821: LD_ADDR_VAR 0 8
35825: PUSH
35826: LD_INT 0
35828: ST_TO_ADDR
35829: GO 35847
// min_y := y - r ;
35831: LD_ADDR_VAR 0 8
35835: PUSH
35836: LD_VAR 0 3
35840: PUSH
35841: LD_VAR 0 4
35845: MINUS
35846: ST_TO_ADDR
// max_x := x + r ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_VAR 0 2
35856: PUSH
35857: LD_VAR 0 4
35861: PLUS
35862: ST_TO_ADDR
// max_y := y + r ;
35863: LD_ADDR_VAR 0 10
35867: PUSH
35868: LD_VAR 0 3
35872: PUSH
35873: LD_VAR 0 4
35877: PLUS
35878: ST_TO_ADDR
// for _x = min_x to max_x do
35879: LD_ADDR_VAR 0 11
35883: PUSH
35884: DOUBLE
35885: LD_VAR 0 7
35889: DEC
35890: ST_TO_ADDR
35891: LD_VAR 0 9
35895: PUSH
35896: FOR_TO
35897: IFFALSE 36014
// for _y = min_y to max_y do
35899: LD_ADDR_VAR 0 12
35903: PUSH
35904: DOUBLE
35905: LD_VAR 0 8
35909: DEC
35910: ST_TO_ADDR
35911: LD_VAR 0 10
35915: PUSH
35916: FOR_TO
35917: IFFALSE 36010
// begin if not ValidHex ( _x , _y ) then
35919: LD_VAR 0 11
35923: PPUSH
35924: LD_VAR 0 12
35928: PPUSH
35929: CALL_OW 488
35933: NOT
35934: IFFALSE 35938
// continue ;
35936: GO 35916
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35938: LD_VAR 0 11
35942: PPUSH
35943: LD_VAR 0 12
35947: PPUSH
35948: CALL_OW 351
35952: PUSH
35953: LD_VAR 0 11
35957: PPUSH
35958: LD_VAR 0 12
35962: PPUSH
35963: CALL_OW 554
35967: AND
35968: IFFALSE 36008
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35970: LD_ADDR_VAR 0 13
35974: PUSH
35975: LD_VAR 0 13
35979: PPUSH
35980: LD_VAR 0 13
35984: PUSH
35985: LD_INT 1
35987: PLUS
35988: PPUSH
35989: LD_VAR 0 11
35993: PUSH
35994: LD_VAR 0 12
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PPUSH
36003: CALL_OW 2
36007: ST_TO_ADDR
// end ;
36008: GO 35916
36010: POP
36011: POP
36012: GO 35896
36014: POP
36015: POP
// if not list then
36016: LD_VAR 0 13
36020: NOT
36021: IFFALSE 36025
// exit ;
36023: GO 36096
// for i in list do
36025: LD_ADDR_VAR 0 6
36029: PUSH
36030: LD_VAR 0 13
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36094
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36038: LD_VAR 0 1
36042: PPUSH
36043: LD_STRING M
36045: PUSH
36046: LD_VAR 0 6
36050: PUSH
36051: LD_INT 1
36053: ARRAY
36054: PUSH
36055: LD_VAR 0 6
36059: PUSH
36060: LD_INT 2
36062: ARRAY
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: PPUSH
36088: CALL_OW 447
36092: GO 36035
36094: POP
36095: POP
// end ;
36096: LD_VAR 0 5
36100: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36101: LD_EXP 124
36105: NOT
36106: IFFALSE 36156
36108: GO 36110
36110: DISABLE
// begin initHack := true ;
36111: LD_ADDR_EXP 124
36115: PUSH
36116: LD_INT 1
36118: ST_TO_ADDR
// hackTanks := [ ] ;
36119: LD_ADDR_EXP 125
36123: PUSH
36124: EMPTY
36125: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36126: LD_ADDR_EXP 126
36130: PUSH
36131: EMPTY
36132: ST_TO_ADDR
// hackLimit := 3 ;
36133: LD_ADDR_EXP 127
36137: PUSH
36138: LD_INT 3
36140: ST_TO_ADDR
// hackDist := 12 ;
36141: LD_ADDR_EXP 128
36145: PUSH
36146: LD_INT 12
36148: ST_TO_ADDR
// hackCounter := [ ] ;
36149: LD_ADDR_EXP 129
36153: PUSH
36154: EMPTY
36155: ST_TO_ADDR
// end ;
36156: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36157: LD_EXP 124
36161: PUSH
36162: LD_INT 34
36164: PUSH
36165: LD_INT 99
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PPUSH
36172: CALL_OW 69
36176: AND
36177: IFFALSE 36430
36179: GO 36181
36181: DISABLE
36182: LD_INT 0
36184: PPUSH
36185: PPUSH
// begin enable ;
36186: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36187: LD_ADDR_VAR 0 1
36191: PUSH
36192: LD_INT 34
36194: PUSH
36195: LD_INT 99
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PPUSH
36202: CALL_OW 69
36206: PUSH
36207: FOR_IN
36208: IFFALSE 36428
// begin if not i in hackTanks then
36210: LD_VAR 0 1
36214: PUSH
36215: LD_EXP 125
36219: IN
36220: NOT
36221: IFFALSE 36304
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36223: LD_ADDR_EXP 125
36227: PUSH
36228: LD_EXP 125
36232: PPUSH
36233: LD_EXP 125
36237: PUSH
36238: LD_INT 1
36240: PLUS
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 1
36251: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36252: LD_ADDR_EXP 126
36256: PUSH
36257: LD_EXP 126
36261: PPUSH
36262: LD_EXP 126
36266: PUSH
36267: LD_INT 1
36269: PLUS
36270: PPUSH
36271: EMPTY
36272: PPUSH
36273: CALL_OW 1
36277: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36278: LD_ADDR_EXP 129
36282: PUSH
36283: LD_EXP 129
36287: PPUSH
36288: LD_EXP 129
36292: PUSH
36293: LD_INT 1
36295: PLUS
36296: PPUSH
36297: EMPTY
36298: PPUSH
36299: CALL_OW 1
36303: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 302
36313: NOT
36314: IFFALSE 36327
// begin HackUnlinkAll ( i ) ;
36316: LD_VAR 0 1
36320: PPUSH
36321: CALL 36433 0 1
// continue ;
36325: GO 36207
// end ; HackCheckCapturedStatus ( i ) ;
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL 36876 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36336: LD_ADDR_VAR 0 2
36340: PUSH
36341: LD_INT 81
36343: PUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: CALL_OW 255
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 33
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 91
36370: PUSH
36371: LD_VAR 0 1
36375: PUSH
36376: LD_EXP 128
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 50
36388: PUSH
36389: EMPTY
36390: LIST
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: PPUSH
36398: CALL_OW 69
36402: ST_TO_ADDR
// if not tmp then
36403: LD_VAR 0 2
36407: NOT
36408: IFFALSE 36412
// continue ;
36410: GO 36207
// HackLink ( i , tmp ) ;
36412: LD_VAR 0 1
36416: PPUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: CALL 36569 0 2
// end ;
36426: GO 36207
36428: POP
36429: POP
// end ;
36430: PPOPN 2
36432: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36433: LD_INT 0
36435: PPUSH
36436: PPUSH
36437: PPUSH
// if not hack in hackTanks then
36438: LD_VAR 0 1
36442: PUSH
36443: LD_EXP 125
36447: IN
36448: NOT
36449: IFFALSE 36453
// exit ;
36451: GO 36564
// index := GetElementIndex ( hackTanks , hack ) ;
36453: LD_ADDR_VAR 0 4
36457: PUSH
36458: LD_EXP 125
36462: PPUSH
36463: LD_VAR 0 1
36467: PPUSH
36468: CALL 44006 0 2
36472: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36473: LD_EXP 126
36477: PUSH
36478: LD_VAR 0 4
36482: ARRAY
36483: IFFALSE 36564
// begin for i in hackTanksCaptured [ index ] do
36485: LD_ADDR_VAR 0 3
36489: PUSH
36490: LD_EXP 126
36494: PUSH
36495: LD_VAR 0 4
36499: ARRAY
36500: PUSH
36501: FOR_IN
36502: IFFALSE 36528
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36504: LD_VAR 0 3
36508: PUSH
36509: LD_INT 1
36511: ARRAY
36512: PPUSH
36513: LD_VAR 0 3
36517: PUSH
36518: LD_INT 2
36520: ARRAY
36521: PPUSH
36522: CALL_OW 235
36526: GO 36501
36528: POP
36529: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36530: LD_ADDR_EXP 126
36534: PUSH
36535: LD_EXP 126
36539: PPUSH
36540: LD_VAR 0 4
36544: PPUSH
36545: EMPTY
36546: PPUSH
36547: CALL_OW 1
36551: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36552: LD_VAR 0 1
36556: PPUSH
36557: LD_INT 0
36559: PPUSH
36560: CALL_OW 505
// end ; end ;
36564: LD_VAR 0 2
36568: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36569: LD_INT 0
36571: PPUSH
36572: PPUSH
36573: PPUSH
// if not hack in hackTanks or not vehicles then
36574: LD_VAR 0 1
36578: PUSH
36579: LD_EXP 125
36583: IN
36584: NOT
36585: PUSH
36586: LD_VAR 0 2
36590: NOT
36591: OR
36592: IFFALSE 36596
// exit ;
36594: GO 36871
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36596: LD_ADDR_VAR 0 2
36600: PUSH
36601: LD_VAR 0 1
36605: PPUSH
36606: LD_VAR 0 2
36610: PPUSH
36611: LD_INT 1
36613: PPUSH
36614: LD_INT 1
36616: PPUSH
36617: CALL 44656 0 4
36621: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36622: LD_ADDR_VAR 0 5
36626: PUSH
36627: LD_EXP 125
36631: PPUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL 44006 0 2
36641: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36642: LD_EXP 126
36646: PUSH
36647: LD_VAR 0 5
36651: ARRAY
36652: PUSH
36653: LD_EXP 127
36657: LESS
36658: IFFALSE 36847
// begin for i := 1 to vehicles do
36660: LD_ADDR_VAR 0 4
36664: PUSH
36665: DOUBLE
36666: LD_INT 1
36668: DEC
36669: ST_TO_ADDR
36670: LD_VAR 0 2
36674: PUSH
36675: FOR_TO
36676: IFFALSE 36845
// begin if hackTanksCaptured [ index ] = hackLimit then
36678: LD_EXP 126
36682: PUSH
36683: LD_VAR 0 5
36687: ARRAY
36688: PUSH
36689: LD_EXP 127
36693: EQUAL
36694: IFFALSE 36698
// break ;
36696: GO 36845
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36698: LD_ADDR_EXP 129
36702: PUSH
36703: LD_EXP 129
36707: PPUSH
36708: LD_VAR 0 5
36712: PPUSH
36713: LD_EXP 129
36717: PUSH
36718: LD_VAR 0 5
36722: ARRAY
36723: PUSH
36724: LD_INT 1
36726: PLUS
36727: PPUSH
36728: CALL_OW 1
36732: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36733: LD_ADDR_EXP 126
36737: PUSH
36738: LD_EXP 126
36742: PPUSH
36743: LD_VAR 0 5
36747: PUSH
36748: LD_EXP 126
36752: PUSH
36753: LD_VAR 0 5
36757: ARRAY
36758: PUSH
36759: LD_INT 1
36761: PLUS
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PPUSH
36767: LD_VAR 0 2
36771: PUSH
36772: LD_VAR 0 4
36776: ARRAY
36777: PUSH
36778: LD_VAR 0 2
36782: PUSH
36783: LD_VAR 0 4
36787: ARRAY
36788: PPUSH
36789: CALL_OW 255
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PPUSH
36798: CALL 44221 0 3
36802: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36803: LD_VAR 0 2
36807: PUSH
36808: LD_VAR 0 4
36812: ARRAY
36813: PPUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: CALL_OW 255
36823: PPUSH
36824: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 4
36837: ARRAY
36838: PPUSH
36839: CALL_OW 141
// end ;
36843: GO 36675
36845: POP
36846: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36847: LD_VAR 0 1
36851: PPUSH
36852: LD_EXP 126
36856: PUSH
36857: LD_VAR 0 5
36861: ARRAY
36862: PUSH
36863: LD_INT 0
36865: PLUS
36866: PPUSH
36867: CALL_OW 505
// end ;
36871: LD_VAR 0 3
36875: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36876: LD_INT 0
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
// if not hack in hackTanks then
36882: LD_VAR 0 1
36886: PUSH
36887: LD_EXP 125
36891: IN
36892: NOT
36893: IFFALSE 36897
// exit ;
36895: GO 37137
// index := GetElementIndex ( hackTanks , hack ) ;
36897: LD_ADDR_VAR 0 4
36901: PUSH
36902: LD_EXP 125
36906: PPUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL 44006 0 2
36916: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36917: LD_ADDR_VAR 0 3
36921: PUSH
36922: DOUBLE
36923: LD_EXP 126
36927: PUSH
36928: LD_VAR 0 4
36932: ARRAY
36933: INC
36934: ST_TO_ADDR
36935: LD_INT 1
36937: PUSH
36938: FOR_DOWNTO
36939: IFFALSE 37111
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36941: LD_ADDR_VAR 0 5
36945: PUSH
36946: LD_EXP 126
36950: PUSH
36951: LD_VAR 0 4
36955: ARRAY
36956: PUSH
36957: LD_VAR 0 3
36961: ARRAY
36962: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36963: LD_VAR 0 5
36967: PUSH
36968: LD_INT 1
36970: ARRAY
36971: PPUSH
36972: CALL_OW 302
36976: NOT
36977: PUSH
36978: LD_VAR 0 5
36982: PUSH
36983: LD_INT 1
36985: ARRAY
36986: PPUSH
36987: CALL_OW 255
36991: PUSH
36992: LD_VAR 0 1
36996: PPUSH
36997: CALL_OW 255
37001: NONEQUAL
37002: OR
37003: IFFALSE 37109
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37005: LD_VAR 0 5
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: PPUSH
37014: CALL_OW 305
37018: PUSH
37019: LD_VAR 0 5
37023: PUSH
37024: LD_INT 1
37026: ARRAY
37027: PPUSH
37028: CALL_OW 255
37032: PUSH
37033: LD_VAR 0 1
37037: PPUSH
37038: CALL_OW 255
37042: EQUAL
37043: AND
37044: IFFALSE 37068
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37046: LD_VAR 0 5
37050: PUSH
37051: LD_INT 1
37053: ARRAY
37054: PPUSH
37055: LD_VAR 0 5
37059: PUSH
37060: LD_INT 2
37062: ARRAY
37063: PPUSH
37064: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37068: LD_ADDR_EXP 126
37072: PUSH
37073: LD_EXP 126
37077: PPUSH
37078: LD_VAR 0 4
37082: PPUSH
37083: LD_EXP 126
37087: PUSH
37088: LD_VAR 0 4
37092: ARRAY
37093: PPUSH
37094: LD_VAR 0 3
37098: PPUSH
37099: CALL_OW 3
37103: PPUSH
37104: CALL_OW 1
37108: ST_TO_ADDR
// end ; end ;
37109: GO 36938
37111: POP
37112: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37113: LD_VAR 0 1
37117: PPUSH
37118: LD_EXP 126
37122: PUSH
37123: LD_VAR 0 4
37127: ARRAY
37128: PUSH
37129: LD_INT 0
37131: PLUS
37132: PPUSH
37133: CALL_OW 505
// end ;
37137: LD_VAR 0 2
37141: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37142: LD_INT 0
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
// if not hack in hackTanks then
37148: LD_VAR 0 1
37152: PUSH
37153: LD_EXP 125
37157: IN
37158: NOT
37159: IFFALSE 37163
// exit ;
37161: GO 37248
// index := GetElementIndex ( hackTanks , hack ) ;
37163: LD_ADDR_VAR 0 5
37167: PUSH
37168: LD_EXP 125
37172: PPUSH
37173: LD_VAR 0 1
37177: PPUSH
37178: CALL 44006 0 2
37182: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37183: LD_ADDR_VAR 0 4
37187: PUSH
37188: DOUBLE
37189: LD_INT 1
37191: DEC
37192: ST_TO_ADDR
37193: LD_EXP 126
37197: PUSH
37198: LD_VAR 0 5
37202: ARRAY
37203: PUSH
37204: FOR_TO
37205: IFFALSE 37246
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37207: LD_EXP 126
37211: PUSH
37212: LD_VAR 0 5
37216: ARRAY
37217: PUSH
37218: LD_VAR 0 4
37222: ARRAY
37223: PUSH
37224: LD_INT 1
37226: ARRAY
37227: PUSH
37228: LD_VAR 0 2
37232: EQUAL
37233: IFFALSE 37244
// KillUnit ( vehicle ) ;
37235: LD_VAR 0 2
37239: PPUSH
37240: CALL_OW 66
37244: GO 37204
37246: POP
37247: POP
// end ;
37248: LD_VAR 0 3
37252: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37253: LD_EXP 130
37257: NOT
37258: IFFALSE 37293
37260: GO 37262
37262: DISABLE
// begin initMiner := true ;
37263: LD_ADDR_EXP 130
37267: PUSH
37268: LD_INT 1
37270: ST_TO_ADDR
// minersList := [ ] ;
37271: LD_ADDR_EXP 131
37275: PUSH
37276: EMPTY
37277: ST_TO_ADDR
// minerMinesList := [ ] ;
37278: LD_ADDR_EXP 132
37282: PUSH
37283: EMPTY
37284: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37285: LD_ADDR_EXP 133
37289: PUSH
37290: LD_INT 5
37292: ST_TO_ADDR
// end ;
37293: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37294: LD_EXP 130
37298: PUSH
37299: LD_INT 34
37301: PUSH
37302: LD_INT 81
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 69
37313: AND
37314: IFFALSE 37775
37316: GO 37318
37318: DISABLE
37319: LD_INT 0
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
// begin enable ;
37325: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37326: LD_ADDR_VAR 0 1
37330: PUSH
37331: LD_INT 34
37333: PUSH
37334: LD_INT 81
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PPUSH
37341: CALL_OW 69
37345: PUSH
37346: FOR_IN
37347: IFFALSE 37419
// begin if not i in minersList then
37349: LD_VAR 0 1
37353: PUSH
37354: LD_EXP 131
37358: IN
37359: NOT
37360: IFFALSE 37417
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37362: LD_ADDR_EXP 131
37366: PUSH
37367: LD_EXP 131
37371: PPUSH
37372: LD_EXP 131
37376: PUSH
37377: LD_INT 1
37379: PLUS
37380: PPUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 1
37390: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37391: LD_ADDR_EXP 132
37395: PUSH
37396: LD_EXP 132
37400: PPUSH
37401: LD_EXP 132
37405: PUSH
37406: LD_INT 1
37408: PLUS
37409: PPUSH
37410: EMPTY
37411: PPUSH
37412: CALL_OW 1
37416: ST_TO_ADDR
// end end ;
37417: GO 37346
37419: POP
37420: POP
// for i := minerMinesList downto 1 do
37421: LD_ADDR_VAR 0 1
37425: PUSH
37426: DOUBLE
37427: LD_EXP 132
37431: INC
37432: ST_TO_ADDR
37433: LD_INT 1
37435: PUSH
37436: FOR_DOWNTO
37437: IFFALSE 37773
// begin if IsLive ( minersList [ i ] ) then
37439: LD_EXP 131
37443: PUSH
37444: LD_VAR 0 1
37448: ARRAY
37449: PPUSH
37450: CALL_OW 300
37454: IFFALSE 37482
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37456: LD_EXP 131
37460: PUSH
37461: LD_VAR 0 1
37465: ARRAY
37466: PPUSH
37467: LD_EXP 132
37471: PUSH
37472: LD_VAR 0 1
37476: ARRAY
37477: PPUSH
37478: CALL_OW 505
// if not minerMinesList [ i ] then
37482: LD_EXP 132
37486: PUSH
37487: LD_VAR 0 1
37491: ARRAY
37492: NOT
37493: IFFALSE 37497
// continue ;
37495: GO 37436
// for j := minerMinesList [ i ] downto 1 do
37497: LD_ADDR_VAR 0 2
37501: PUSH
37502: DOUBLE
37503: LD_EXP 132
37507: PUSH
37508: LD_VAR 0 1
37512: ARRAY
37513: INC
37514: ST_TO_ADDR
37515: LD_INT 1
37517: PUSH
37518: FOR_DOWNTO
37519: IFFALSE 37769
// begin side := GetSide ( minersList [ i ] ) ;
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_EXP 131
37530: PUSH
37531: LD_VAR 0 1
37535: ARRAY
37536: PPUSH
37537: CALL_OW 255
37541: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_EXP 132
37551: PUSH
37552: LD_VAR 0 1
37556: ARRAY
37557: PUSH
37558: LD_VAR 0 2
37562: ARRAY
37563: PUSH
37564: LD_INT 1
37566: ARRAY
37567: PPUSH
37568: LD_EXP 132
37572: PUSH
37573: LD_VAR 0 1
37577: ARRAY
37578: PUSH
37579: LD_VAR 0 2
37583: ARRAY
37584: PUSH
37585: LD_INT 2
37587: ARRAY
37588: PPUSH
37589: CALL_OW 428
37593: ST_TO_ADDR
// if not tmp then
37594: LD_VAR 0 4
37598: NOT
37599: IFFALSE 37603
// continue ;
37601: GO 37518
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37603: LD_VAR 0 4
37607: PUSH
37608: LD_INT 81
37610: PUSH
37611: LD_VAR 0 3
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PPUSH
37620: CALL_OW 69
37624: IN
37625: PUSH
37626: LD_EXP 132
37630: PUSH
37631: LD_VAR 0 1
37635: ARRAY
37636: PUSH
37637: LD_VAR 0 2
37641: ARRAY
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: LD_EXP 132
37651: PUSH
37652: LD_VAR 0 1
37656: ARRAY
37657: PUSH
37658: LD_VAR 0 2
37662: ARRAY
37663: PUSH
37664: LD_INT 2
37666: ARRAY
37667: PPUSH
37668: CALL_OW 458
37672: AND
37673: IFFALSE 37767
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37675: LD_EXP 132
37679: PUSH
37680: LD_VAR 0 1
37684: ARRAY
37685: PUSH
37686: LD_VAR 0 2
37690: ARRAY
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PPUSH
37696: LD_EXP 132
37700: PUSH
37701: LD_VAR 0 1
37705: ARRAY
37706: PUSH
37707: LD_VAR 0 2
37711: ARRAY
37712: PUSH
37713: LD_INT 2
37715: ARRAY
37716: PPUSH
37717: LD_VAR 0 3
37721: PPUSH
37722: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37726: LD_ADDR_EXP 132
37730: PUSH
37731: LD_EXP 132
37735: PPUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: LD_EXP 132
37745: PUSH
37746: LD_VAR 0 1
37750: ARRAY
37751: PPUSH
37752: LD_VAR 0 2
37756: PPUSH
37757: CALL_OW 3
37761: PPUSH
37762: CALL_OW 1
37766: ST_TO_ADDR
// end ; end ;
37767: GO 37518
37769: POP
37770: POP
// end ;
37771: GO 37436
37773: POP
37774: POP
// end ;
37775: PPOPN 4
37777: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37778: LD_INT 0
37780: PPUSH
37781: PPUSH
// result := false ;
37782: LD_ADDR_VAR 0 4
37786: PUSH
37787: LD_INT 0
37789: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 264
37799: PUSH
37800: LD_INT 81
37802: EQUAL
37803: NOT
37804: IFFALSE 37808
// exit ;
37806: GO 38048
// index := GetElementIndex ( minersList , unit ) ;
37808: LD_ADDR_VAR 0 5
37812: PUSH
37813: LD_EXP 131
37817: PPUSH
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL 44006 0 2
37827: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37828: LD_EXP 132
37832: PUSH
37833: LD_VAR 0 5
37837: ARRAY
37838: PUSH
37839: LD_EXP 133
37843: GREATEREQUAL
37844: IFFALSE 37848
// exit ;
37846: GO 38048
// ComMoveXY ( unit , x , y ) ;
37848: LD_VAR 0 1
37852: PPUSH
37853: LD_VAR 0 2
37857: PPUSH
37858: LD_VAR 0 3
37862: PPUSH
37863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37867: LD_INT 35
37869: PPUSH
37870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37874: LD_VAR 0 1
37878: PPUSH
37879: LD_VAR 0 2
37883: PPUSH
37884: LD_VAR 0 3
37888: PPUSH
37889: CALL 75390 0 3
37893: NOT
37894: PUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL_OW 314
37904: AND
37905: IFFALSE 37909
// exit ;
37907: GO 38048
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37909: LD_VAR 0 2
37913: PPUSH
37914: LD_VAR 0 3
37918: PPUSH
37919: CALL_OW 428
37923: PUSH
37924: LD_VAR 0 1
37928: EQUAL
37929: PUSH
37930: LD_VAR 0 1
37934: PPUSH
37935: CALL_OW 314
37939: NOT
37940: AND
37941: IFFALSE 37867
// PlaySoundXY ( x , y , PlantMine ) ;
37943: LD_VAR 0 2
37947: PPUSH
37948: LD_VAR 0 3
37952: PPUSH
37953: LD_STRING PlantMine
37955: PPUSH
37956: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37960: LD_VAR 0 2
37964: PPUSH
37965: LD_VAR 0 3
37969: PPUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 255
37979: PPUSH
37980: LD_INT 0
37982: PPUSH
37983: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37987: LD_ADDR_EXP 132
37991: PUSH
37992: LD_EXP 132
37996: PPUSH
37997: LD_VAR 0 5
38001: PUSH
38002: LD_EXP 132
38006: PUSH
38007: LD_VAR 0 5
38011: ARRAY
38012: PUSH
38013: LD_INT 1
38015: PLUS
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PPUSH
38021: LD_VAR 0 2
38025: PUSH
38026: LD_VAR 0 3
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PPUSH
38035: CALL 44221 0 3
38039: ST_TO_ADDR
// result := true ;
38040: LD_ADDR_VAR 0 4
38044: PUSH
38045: LD_INT 1
38047: ST_TO_ADDR
// end ;
38048: LD_VAR 0 4
38052: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
// if not unit in minersList then
38058: LD_VAR 0 1
38062: PUSH
38063: LD_EXP 131
38067: IN
38068: NOT
38069: IFFALSE 38073
// exit ;
38071: GO 38465
// index := GetElementIndex ( minersList , unit ) ;
38073: LD_ADDR_VAR 0 6
38077: PUSH
38078: LD_EXP 131
38082: PPUSH
38083: LD_VAR 0 1
38087: PPUSH
38088: CALL 44006 0 2
38092: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38093: LD_ADDR_VAR 0 5
38097: PUSH
38098: DOUBLE
38099: LD_EXP 132
38103: PUSH
38104: LD_VAR 0 6
38108: ARRAY
38109: INC
38110: ST_TO_ADDR
38111: LD_INT 1
38113: PUSH
38114: FOR_DOWNTO
38115: IFFALSE 38276
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38117: LD_EXP 132
38121: PUSH
38122: LD_VAR 0 6
38126: ARRAY
38127: PUSH
38128: LD_VAR 0 5
38132: ARRAY
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PUSH
38138: LD_VAR 0 2
38142: EQUAL
38143: PUSH
38144: LD_EXP 132
38148: PUSH
38149: LD_VAR 0 6
38153: ARRAY
38154: PUSH
38155: LD_VAR 0 5
38159: ARRAY
38160: PUSH
38161: LD_INT 2
38163: ARRAY
38164: PUSH
38165: LD_VAR 0 3
38169: EQUAL
38170: AND
38171: IFFALSE 38274
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38173: LD_EXP 132
38177: PUSH
38178: LD_VAR 0 6
38182: ARRAY
38183: PUSH
38184: LD_VAR 0 5
38188: ARRAY
38189: PUSH
38190: LD_INT 1
38192: ARRAY
38193: PPUSH
38194: LD_EXP 132
38198: PUSH
38199: LD_VAR 0 6
38203: ARRAY
38204: PUSH
38205: LD_VAR 0 5
38209: ARRAY
38210: PUSH
38211: LD_INT 2
38213: ARRAY
38214: PPUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL_OW 255
38224: PPUSH
38225: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38229: LD_ADDR_EXP 132
38233: PUSH
38234: LD_EXP 132
38238: PPUSH
38239: LD_VAR 0 6
38243: PPUSH
38244: LD_EXP 132
38248: PUSH
38249: LD_VAR 0 6
38253: ARRAY
38254: PPUSH
38255: LD_VAR 0 5
38259: PPUSH
38260: CALL_OW 3
38264: PPUSH
38265: CALL_OW 1
38269: ST_TO_ADDR
// exit ;
38270: POP
38271: POP
38272: GO 38465
// end ; end ;
38274: GO 38114
38276: POP
38277: POP
// for i := minerMinesList [ index ] downto 1 do
38278: LD_ADDR_VAR 0 5
38282: PUSH
38283: DOUBLE
38284: LD_EXP 132
38288: PUSH
38289: LD_VAR 0 6
38293: ARRAY
38294: INC
38295: ST_TO_ADDR
38296: LD_INT 1
38298: PUSH
38299: FOR_DOWNTO
38300: IFFALSE 38463
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38302: LD_EXP 132
38306: PUSH
38307: LD_VAR 0 6
38311: ARRAY
38312: PUSH
38313: LD_VAR 0 5
38317: ARRAY
38318: PUSH
38319: LD_INT 1
38321: ARRAY
38322: PPUSH
38323: LD_EXP 132
38327: PUSH
38328: LD_VAR 0 6
38332: ARRAY
38333: PUSH
38334: LD_VAR 0 5
38338: ARRAY
38339: PUSH
38340: LD_INT 2
38342: ARRAY
38343: PPUSH
38344: LD_VAR 0 2
38348: PPUSH
38349: LD_VAR 0 3
38353: PPUSH
38354: CALL_OW 298
38358: PUSH
38359: LD_INT 6
38361: LESS
38362: IFFALSE 38461
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38364: LD_EXP 132
38368: PUSH
38369: LD_VAR 0 6
38373: ARRAY
38374: PUSH
38375: LD_VAR 0 5
38379: ARRAY
38380: PUSH
38381: LD_INT 1
38383: ARRAY
38384: PPUSH
38385: LD_EXP 132
38389: PUSH
38390: LD_VAR 0 6
38394: ARRAY
38395: PUSH
38396: LD_VAR 0 5
38400: ARRAY
38401: PUSH
38402: LD_INT 2
38404: ARRAY
38405: PPUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 255
38415: PPUSH
38416: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38420: LD_ADDR_EXP 132
38424: PUSH
38425: LD_EXP 132
38429: PPUSH
38430: LD_VAR 0 6
38434: PPUSH
38435: LD_EXP 132
38439: PUSH
38440: LD_VAR 0 6
38444: ARRAY
38445: PPUSH
38446: LD_VAR 0 5
38450: PPUSH
38451: CALL_OW 3
38455: PPUSH
38456: CALL_OW 1
38460: ST_TO_ADDR
// end ; end ;
38461: GO 38299
38463: POP
38464: POP
// end ;
38465: LD_VAR 0 4
38469: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38470: LD_INT 0
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38481: LD_VAR 0 1
38485: PPUSH
38486: CALL_OW 264
38490: PUSH
38491: LD_INT 81
38493: EQUAL
38494: NOT
38495: PUSH
38496: LD_VAR 0 1
38500: PUSH
38501: LD_EXP 131
38505: IN
38506: NOT
38507: OR
38508: IFFALSE 38512
// exit ;
38510: GO 38834
// index := GetElementIndex ( minersList , unit ) ;
38512: LD_ADDR_VAR 0 6
38516: PUSH
38517: LD_EXP 131
38521: PPUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL 44006 0 2
38531: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38532: LD_ADDR_VAR 0 8
38536: PUSH
38537: LD_EXP 133
38541: PUSH
38542: LD_EXP 132
38546: PUSH
38547: LD_VAR 0 6
38551: ARRAY
38552: MINUS
38553: ST_TO_ADDR
// if not minesFreeAmount then
38554: LD_VAR 0 8
38558: NOT
38559: IFFALSE 38563
// exit ;
38561: GO 38834
// tmp := [ ] ;
38563: LD_ADDR_VAR 0 7
38567: PUSH
38568: EMPTY
38569: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: DOUBLE
38576: LD_INT 1
38578: DEC
38579: ST_TO_ADDR
38580: LD_VAR 0 8
38584: PUSH
38585: FOR_TO
38586: IFFALSE 38781
// begin _d := rand ( 0 , 5 ) ;
38588: LD_ADDR_VAR 0 11
38592: PUSH
38593: LD_INT 0
38595: PPUSH
38596: LD_INT 5
38598: PPUSH
38599: CALL_OW 12
38603: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38604: LD_ADDR_VAR 0 12
38608: PUSH
38609: LD_INT 2
38611: PPUSH
38612: LD_INT 6
38614: PPUSH
38615: CALL_OW 12
38619: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38620: LD_ADDR_VAR 0 9
38624: PUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: LD_VAR 0 11
38634: PPUSH
38635: LD_VAR 0 12
38639: PPUSH
38640: CALL_OW 272
38644: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38645: LD_ADDR_VAR 0 10
38649: PUSH
38650: LD_VAR 0 3
38654: PPUSH
38655: LD_VAR 0 11
38659: PPUSH
38660: LD_VAR 0 12
38664: PPUSH
38665: CALL_OW 273
38669: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38670: LD_VAR 0 9
38674: PPUSH
38675: LD_VAR 0 10
38679: PPUSH
38680: CALL_OW 488
38684: PUSH
38685: LD_VAR 0 9
38689: PUSH
38690: LD_VAR 0 10
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_VAR 0 7
38703: IN
38704: NOT
38705: AND
38706: PUSH
38707: LD_VAR 0 9
38711: PPUSH
38712: LD_VAR 0 10
38716: PPUSH
38717: CALL_OW 458
38721: NOT
38722: AND
38723: IFFALSE 38765
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38725: LD_ADDR_VAR 0 7
38729: PUSH
38730: LD_VAR 0 7
38734: PPUSH
38735: LD_VAR 0 7
38739: PUSH
38740: LD_INT 1
38742: PLUS
38743: PPUSH
38744: LD_VAR 0 9
38748: PUSH
38749: LD_VAR 0 10
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL_OW 1
38762: ST_TO_ADDR
38763: GO 38779
// i := i - 1 ;
38765: LD_ADDR_VAR 0 5
38769: PUSH
38770: LD_VAR 0 5
38774: PUSH
38775: LD_INT 1
38777: MINUS
38778: ST_TO_ADDR
// end ;
38779: GO 38585
38781: POP
38782: POP
// for i in tmp do
38783: LD_ADDR_VAR 0 5
38787: PUSH
38788: LD_VAR 0 7
38792: PUSH
38793: FOR_IN
38794: IFFALSE 38832
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38796: LD_VAR 0 1
38800: PPUSH
38801: LD_VAR 0 5
38805: PUSH
38806: LD_INT 1
38808: ARRAY
38809: PPUSH
38810: LD_VAR 0 5
38814: PUSH
38815: LD_INT 2
38817: ARRAY
38818: PPUSH
38819: CALL 37778 0 3
38823: NOT
38824: IFFALSE 38830
// exit ;
38826: POP
38827: POP
38828: GO 38834
38830: GO 38793
38832: POP
38833: POP
// end ;
38834: LD_VAR 0 4
38838: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38839: LD_INT 0
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
38847: PPUSH
// if not GetClass ( unit ) = class_sniper then
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 257
38857: PUSH
38858: LD_INT 5
38860: EQUAL
38861: NOT
38862: IFFALSE 38866
// exit ;
38864: GO 39254
// dist := 8 ;
38866: LD_ADDR_VAR 0 5
38870: PUSH
38871: LD_INT 8
38873: ST_TO_ADDR
// viewRange := 12 ;
38874: LD_ADDR_VAR 0 7
38878: PUSH
38879: LD_INT 12
38881: ST_TO_ADDR
// side := GetSide ( unit ) ;
38882: LD_ADDR_VAR 0 6
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: CALL_OW 255
38896: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38897: LD_INT 61
38899: PPUSH
38900: LD_VAR 0 6
38904: PPUSH
38905: CALL_OW 321
38909: PUSH
38910: LD_INT 2
38912: EQUAL
38913: IFFALSE 38923
// viewRange := 16 ;
38915: LD_ADDR_VAR 0 7
38919: PUSH
38920: LD_INT 16
38922: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38923: LD_VAR 0 1
38927: PPUSH
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_VAR 0 3
38937: PPUSH
38938: CALL_OW 297
38942: PUSH
38943: LD_VAR 0 5
38947: GREATER
38948: IFFALSE 39027
// begin ComMoveXY ( unit , x , y ) ;
38950: LD_VAR 0 1
38954: PPUSH
38955: LD_VAR 0 2
38959: PPUSH
38960: LD_VAR 0 3
38964: PPUSH
38965: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38969: LD_INT 35
38971: PPUSH
38972: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38976: LD_VAR 0 1
38980: PPUSH
38981: LD_VAR 0 2
38985: PPUSH
38986: LD_VAR 0 3
38990: PPUSH
38991: CALL 75390 0 3
38995: NOT
38996: IFFALSE 39000
// exit ;
38998: GO 39254
// until GetDistUnitXY ( unit , x , y ) < dist ;
39000: LD_VAR 0 1
39004: PPUSH
39005: LD_VAR 0 2
39009: PPUSH
39010: LD_VAR 0 3
39014: PPUSH
39015: CALL_OW 297
39019: PUSH
39020: LD_VAR 0 5
39024: LESS
39025: IFFALSE 38969
// end ; ComTurnXY ( unit , x , y ) ;
39027: LD_VAR 0 1
39031: PPUSH
39032: LD_VAR 0 2
39036: PPUSH
39037: LD_VAR 0 3
39041: PPUSH
39042: CALL_OW 118
// wait ( 5 ) ;
39046: LD_INT 5
39048: PPUSH
39049: CALL_OW 67
// _d := GetDir ( unit ) ;
39053: LD_ADDR_VAR 0 10
39057: PUSH
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL_OW 254
39067: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39068: LD_ADDR_VAR 0 8
39072: PUSH
39073: LD_VAR 0 1
39077: PPUSH
39078: CALL_OW 250
39082: PPUSH
39083: LD_VAR 0 10
39087: PPUSH
39088: LD_VAR 0 5
39092: PPUSH
39093: CALL_OW 272
39097: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39098: LD_ADDR_VAR 0 9
39102: PUSH
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 251
39112: PPUSH
39113: LD_VAR 0 10
39117: PPUSH
39118: LD_VAR 0 5
39122: PPUSH
39123: CALL_OW 273
39127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39128: LD_VAR 0 8
39132: PPUSH
39133: LD_VAR 0 9
39137: PPUSH
39138: CALL_OW 488
39142: NOT
39143: IFFALSE 39147
// exit ;
39145: GO 39254
// ComAnimCustom ( unit , 1 ) ;
39147: LD_VAR 0 1
39151: PPUSH
39152: LD_INT 1
39154: PPUSH
39155: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39159: LD_VAR 0 8
39163: PPUSH
39164: LD_VAR 0 9
39168: PPUSH
39169: LD_VAR 0 6
39173: PPUSH
39174: LD_VAR 0 7
39178: PPUSH
39179: CALL_OW 330
// repeat wait ( 1 ) ;
39183: LD_INT 1
39185: PPUSH
39186: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39190: LD_VAR 0 1
39194: PPUSH
39195: CALL_OW 316
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 314
39209: OR
39210: PUSH
39211: LD_VAR 0 1
39215: PPUSH
39216: CALL_OW 302
39220: NOT
39221: OR
39222: PUSH
39223: LD_VAR 0 1
39227: PPUSH
39228: CALL_OW 301
39232: OR
39233: IFFALSE 39183
// RemoveSeeing ( _x , _y , side ) ;
39235: LD_VAR 0 8
39239: PPUSH
39240: LD_VAR 0 9
39244: PPUSH
39245: LD_VAR 0 6
39249: PPUSH
39250: CALL_OW 331
// end ; end_of_file
39254: LD_VAR 0 4
39258: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39259: LD_INT 0
39261: PPUSH
39262: PPUSH
// if exist_mode then
39263: LD_VAR 0 2
39267: IFFALSE 39292
// unit := CreateCharacter ( prefix & ident ) else
39269: LD_ADDR_VAR 0 5
39273: PUSH
39274: LD_VAR 0 3
39278: PUSH
39279: LD_VAR 0 1
39283: STR
39284: PPUSH
39285: CALL_OW 34
39289: ST_TO_ADDR
39290: GO 39307
// unit := NewCharacter ( ident ) ;
39292: LD_ADDR_VAR 0 5
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 25
39306: ST_TO_ADDR
// result := unit ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_VAR 0 5
39316: ST_TO_ADDR
// end ;
39317: LD_VAR 0 4
39321: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39322: LD_INT 0
39324: PPUSH
39325: PPUSH
// if not side or not nation then
39326: LD_VAR 0 1
39330: NOT
39331: PUSH
39332: LD_VAR 0 2
39336: NOT
39337: OR
39338: IFFALSE 39342
// exit ;
39340: GO 40110
// case nation of nation_american :
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 1
39349: DOUBLE
39350: EQUAL
39351: IFTRUE 39355
39353: GO 39569
39355: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39356: LD_ADDR_VAR 0 4
39360: PUSH
39361: LD_INT 35
39363: PUSH
39364: LD_INT 45
39366: PUSH
39367: LD_INT 46
39369: PUSH
39370: LD_INT 47
39372: PUSH
39373: LD_INT 82
39375: PUSH
39376: LD_INT 83
39378: PUSH
39379: LD_INT 84
39381: PUSH
39382: LD_INT 85
39384: PUSH
39385: LD_INT 86
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 6
39396: PUSH
39397: LD_INT 15
39399: PUSH
39400: LD_INT 16
39402: PUSH
39403: LD_INT 7
39405: PUSH
39406: LD_INT 12
39408: PUSH
39409: LD_INT 13
39411: PUSH
39412: LD_INT 10
39414: PUSH
39415: LD_INT 14
39417: PUSH
39418: LD_INT 20
39420: PUSH
39421: LD_INT 21
39423: PUSH
39424: LD_INT 22
39426: PUSH
39427: LD_INT 25
39429: PUSH
39430: LD_INT 32
39432: PUSH
39433: LD_INT 27
39435: PUSH
39436: LD_INT 36
39438: PUSH
39439: LD_INT 69
39441: PUSH
39442: LD_INT 39
39444: PUSH
39445: LD_INT 34
39447: PUSH
39448: LD_INT 40
39450: PUSH
39451: LD_INT 48
39453: PUSH
39454: LD_INT 49
39456: PUSH
39457: LD_INT 50
39459: PUSH
39460: LD_INT 51
39462: PUSH
39463: LD_INT 52
39465: PUSH
39466: LD_INT 53
39468: PUSH
39469: LD_INT 54
39471: PUSH
39472: LD_INT 55
39474: PUSH
39475: LD_INT 56
39477: PUSH
39478: LD_INT 57
39480: PUSH
39481: LD_INT 58
39483: PUSH
39484: LD_INT 59
39486: PUSH
39487: LD_INT 60
39489: PUSH
39490: LD_INT 61
39492: PUSH
39493: LD_INT 62
39495: PUSH
39496: LD_INT 80
39498: PUSH
39499: LD_INT 82
39501: PUSH
39502: LD_INT 83
39504: PUSH
39505: LD_INT 84
39507: PUSH
39508: LD_INT 85
39510: PUSH
39511: LD_INT 86
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: ST_TO_ADDR
39567: GO 40034
39569: LD_INT 2
39571: DOUBLE
39572: EQUAL
39573: IFTRUE 39577
39575: GO 39803
39577: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39578: LD_ADDR_VAR 0 4
39582: PUSH
39583: LD_INT 35
39585: PUSH
39586: LD_INT 45
39588: PUSH
39589: LD_INT 46
39591: PUSH
39592: LD_INT 47
39594: PUSH
39595: LD_INT 82
39597: PUSH
39598: LD_INT 83
39600: PUSH
39601: LD_INT 84
39603: PUSH
39604: LD_INT 85
39606: PUSH
39607: LD_INT 87
39609: PUSH
39610: LD_INT 70
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 11
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: LD_INT 4
39624: PUSH
39625: LD_INT 5
39627: PUSH
39628: LD_INT 6
39630: PUSH
39631: LD_INT 15
39633: PUSH
39634: LD_INT 18
39636: PUSH
39637: LD_INT 7
39639: PUSH
39640: LD_INT 17
39642: PUSH
39643: LD_INT 8
39645: PUSH
39646: LD_INT 20
39648: PUSH
39649: LD_INT 21
39651: PUSH
39652: LD_INT 22
39654: PUSH
39655: LD_INT 72
39657: PUSH
39658: LD_INT 26
39660: PUSH
39661: LD_INT 69
39663: PUSH
39664: LD_INT 39
39666: PUSH
39667: LD_INT 40
39669: PUSH
39670: LD_INT 41
39672: PUSH
39673: LD_INT 42
39675: PUSH
39676: LD_INT 43
39678: PUSH
39679: LD_INT 48
39681: PUSH
39682: LD_INT 49
39684: PUSH
39685: LD_INT 50
39687: PUSH
39688: LD_INT 51
39690: PUSH
39691: LD_INT 52
39693: PUSH
39694: LD_INT 53
39696: PUSH
39697: LD_INT 54
39699: PUSH
39700: LD_INT 55
39702: PUSH
39703: LD_INT 56
39705: PUSH
39706: LD_INT 60
39708: PUSH
39709: LD_INT 61
39711: PUSH
39712: LD_INT 62
39714: PUSH
39715: LD_INT 66
39717: PUSH
39718: LD_INT 67
39720: PUSH
39721: LD_INT 68
39723: PUSH
39724: LD_INT 81
39726: PUSH
39727: LD_INT 82
39729: PUSH
39730: LD_INT 83
39732: PUSH
39733: LD_INT 84
39735: PUSH
39736: LD_INT 85
39738: PUSH
39739: LD_INT 87
39741: PUSH
39742: LD_INT 88
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: ST_TO_ADDR
39801: GO 40034
39803: LD_INT 3
39805: DOUBLE
39806: EQUAL
39807: IFTRUE 39811
39809: GO 40033
39811: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39812: LD_ADDR_VAR 0 4
39816: PUSH
39817: LD_INT 46
39819: PUSH
39820: LD_INT 47
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 82
39831: PUSH
39832: LD_INT 83
39834: PUSH
39835: LD_INT 84
39837: PUSH
39838: LD_INT 85
39840: PUSH
39841: LD_INT 86
39843: PUSH
39844: LD_INT 11
39846: PUSH
39847: LD_INT 9
39849: PUSH
39850: LD_INT 20
39852: PUSH
39853: LD_INT 19
39855: PUSH
39856: LD_INT 21
39858: PUSH
39859: LD_INT 24
39861: PUSH
39862: LD_INT 22
39864: PUSH
39865: LD_INT 25
39867: PUSH
39868: LD_INT 28
39870: PUSH
39871: LD_INT 29
39873: PUSH
39874: LD_INT 30
39876: PUSH
39877: LD_INT 31
39879: PUSH
39880: LD_INT 37
39882: PUSH
39883: LD_INT 38
39885: PUSH
39886: LD_INT 32
39888: PUSH
39889: LD_INT 27
39891: PUSH
39892: LD_INT 33
39894: PUSH
39895: LD_INT 69
39897: PUSH
39898: LD_INT 39
39900: PUSH
39901: LD_INT 34
39903: PUSH
39904: LD_INT 40
39906: PUSH
39907: LD_INT 71
39909: PUSH
39910: LD_INT 23
39912: PUSH
39913: LD_INT 44
39915: PUSH
39916: LD_INT 48
39918: PUSH
39919: LD_INT 49
39921: PUSH
39922: LD_INT 50
39924: PUSH
39925: LD_INT 51
39927: PUSH
39928: LD_INT 52
39930: PUSH
39931: LD_INT 53
39933: PUSH
39934: LD_INT 54
39936: PUSH
39937: LD_INT 55
39939: PUSH
39940: LD_INT 56
39942: PUSH
39943: LD_INT 57
39945: PUSH
39946: LD_INT 58
39948: PUSH
39949: LD_INT 59
39951: PUSH
39952: LD_INT 63
39954: PUSH
39955: LD_INT 64
39957: PUSH
39958: LD_INT 65
39960: PUSH
39961: LD_INT 82
39963: PUSH
39964: LD_INT 83
39966: PUSH
39967: LD_INT 84
39969: PUSH
39970: LD_INT 85
39972: PUSH
39973: LD_INT 86
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
40031: GO 40034
40033: POP
// if state > - 1 and state < 3 then
40034: LD_VAR 0 3
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: GREATER
40043: PUSH
40044: LD_VAR 0 3
40048: PUSH
40049: LD_INT 3
40051: LESS
40052: AND
40053: IFFALSE 40110
// for i in result do
40055: LD_ADDR_VAR 0 5
40059: PUSH
40060: LD_VAR 0 4
40064: PUSH
40065: FOR_IN
40066: IFFALSE 40108
// if GetTech ( i , side ) <> state then
40068: LD_VAR 0 5
40072: PPUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 321
40082: PUSH
40083: LD_VAR 0 3
40087: NONEQUAL
40088: IFFALSE 40106
// result := result diff i ;
40090: LD_ADDR_VAR 0 4
40094: PUSH
40095: LD_VAR 0 4
40099: PUSH
40100: LD_VAR 0 5
40104: DIFF
40105: ST_TO_ADDR
40106: GO 40065
40108: POP
40109: POP
// end ;
40110: LD_VAR 0 4
40114: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40115: LD_INT 0
40117: PPUSH
40118: PPUSH
40119: PPUSH
// result := true ;
40120: LD_ADDR_VAR 0 3
40124: PUSH
40125: LD_INT 1
40127: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40128: LD_ADDR_VAR 0 5
40132: PUSH
40133: LD_VAR 0 2
40137: PPUSH
40138: CALL_OW 480
40142: ST_TO_ADDR
// if not tmp then
40143: LD_VAR 0 5
40147: NOT
40148: IFFALSE 40152
// exit ;
40150: GO 40201
// for i in tmp do
40152: LD_ADDR_VAR 0 4
40156: PUSH
40157: LD_VAR 0 5
40161: PUSH
40162: FOR_IN
40163: IFFALSE 40199
// if GetTech ( i , side ) <> state_researched then
40165: LD_VAR 0 4
40169: PPUSH
40170: LD_VAR 0 1
40174: PPUSH
40175: CALL_OW 321
40179: PUSH
40180: LD_INT 2
40182: NONEQUAL
40183: IFFALSE 40197
// begin result := false ;
40185: LD_ADDR_VAR 0 3
40189: PUSH
40190: LD_INT 0
40192: ST_TO_ADDR
// exit ;
40193: POP
40194: POP
40195: GO 40201
// end ;
40197: GO 40162
40199: POP
40200: POP
// end ;
40201: LD_VAR 0 3
40205: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40206: LD_INT 0
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
40215: PPUSH
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40221: LD_VAR 0 1
40225: NOT
40226: PUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 257
40236: PUSH
40237: LD_INT 9
40239: NONEQUAL
40240: OR
40241: IFFALSE 40245
// exit ;
40243: GO 40818
// side := GetSide ( unit ) ;
40245: LD_ADDR_VAR 0 9
40249: PUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 255
40259: ST_TO_ADDR
// tech_space := tech_spacanom ;
40260: LD_ADDR_VAR 0 12
40264: PUSH
40265: LD_INT 29
40267: ST_TO_ADDR
// tech_time := tech_taurad ;
40268: LD_ADDR_VAR 0 13
40272: PUSH
40273: LD_INT 28
40275: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40276: LD_ADDR_VAR 0 11
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: CALL_OW 310
40290: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40291: LD_VAR 0 11
40295: PPUSH
40296: CALL_OW 247
40300: PUSH
40301: LD_INT 2
40303: EQUAL
40304: IFFALSE 40308
// exit ;
40306: GO 40818
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40308: LD_ADDR_VAR 0 8
40312: PUSH
40313: LD_INT 81
40315: PUSH
40316: LD_VAR 0 9
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: LD_INT 21
40330: PUSH
40331: LD_INT 3
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PPUSH
40346: CALL_OW 69
40350: ST_TO_ADDR
// if not tmp then
40351: LD_VAR 0 8
40355: NOT
40356: IFFALSE 40360
// exit ;
40358: GO 40818
// if in_unit then
40360: LD_VAR 0 11
40364: IFFALSE 40388
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40366: LD_ADDR_VAR 0 10
40370: PUSH
40371: LD_VAR 0 8
40375: PPUSH
40376: LD_VAR 0 11
40380: PPUSH
40381: CALL_OW 74
40385: ST_TO_ADDR
40386: GO 40408
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40388: LD_ADDR_VAR 0 10
40392: PUSH
40393: LD_VAR 0 8
40397: PPUSH
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL_OW 74
40407: ST_TO_ADDR
// if not enemy then
40408: LD_VAR 0 10
40412: NOT
40413: IFFALSE 40417
// exit ;
40415: GO 40818
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40417: LD_VAR 0 11
40421: PUSH
40422: LD_VAR 0 11
40426: PPUSH
40427: LD_VAR 0 10
40431: PPUSH
40432: CALL_OW 296
40436: PUSH
40437: LD_INT 13
40439: GREATER
40440: AND
40441: PUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: LD_VAR 0 10
40451: PPUSH
40452: CALL_OW 296
40456: PUSH
40457: LD_INT 12
40459: GREATER
40460: OR
40461: IFFALSE 40465
// exit ;
40463: GO 40818
// missile := [ 1 ] ;
40465: LD_ADDR_VAR 0 14
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40476: LD_VAR 0 9
40480: PPUSH
40481: LD_VAR 0 12
40485: PPUSH
40486: CALL_OW 325
40490: IFFALSE 40519
// missile := Replace ( missile , missile + 1 , 2 ) ;
40492: LD_ADDR_VAR 0 14
40496: PUSH
40497: LD_VAR 0 14
40501: PPUSH
40502: LD_VAR 0 14
40506: PUSH
40507: LD_INT 1
40509: PLUS
40510: PPUSH
40511: LD_INT 2
40513: PPUSH
40514: CALL_OW 1
40518: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40519: LD_VAR 0 9
40523: PPUSH
40524: LD_VAR 0 13
40528: PPUSH
40529: CALL_OW 325
40533: PUSH
40534: LD_VAR 0 10
40538: PPUSH
40539: CALL_OW 255
40543: PPUSH
40544: LD_VAR 0 13
40548: PPUSH
40549: CALL_OW 325
40553: NOT
40554: AND
40555: IFFALSE 40584
// missile := Replace ( missile , missile + 1 , 3 ) ;
40557: LD_ADDR_VAR 0 14
40561: PUSH
40562: LD_VAR 0 14
40566: PPUSH
40567: LD_VAR 0 14
40571: PUSH
40572: LD_INT 1
40574: PLUS
40575: PPUSH
40576: LD_INT 3
40578: PPUSH
40579: CALL_OW 1
40583: ST_TO_ADDR
// if missile < 2 then
40584: LD_VAR 0 14
40588: PUSH
40589: LD_INT 2
40591: LESS
40592: IFFALSE 40596
// exit ;
40594: GO 40818
// x := GetX ( enemy ) ;
40596: LD_ADDR_VAR 0 4
40600: PUSH
40601: LD_VAR 0 10
40605: PPUSH
40606: CALL_OW 250
40610: ST_TO_ADDR
// y := GetY ( enemy ) ;
40611: LD_ADDR_VAR 0 5
40615: PUSH
40616: LD_VAR 0 10
40620: PPUSH
40621: CALL_OW 251
40625: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40626: LD_ADDR_VAR 0 6
40630: PUSH
40631: LD_VAR 0 4
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PPUSH
40640: LD_INT 1
40642: PPUSH
40643: CALL_OW 12
40647: PLUS
40648: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: LD_VAR 0 5
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PPUSH
40663: LD_INT 1
40665: PPUSH
40666: CALL_OW 12
40670: PLUS
40671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40672: LD_VAR 0 6
40676: PPUSH
40677: LD_VAR 0 7
40681: PPUSH
40682: CALL_OW 488
40686: NOT
40687: IFFALSE 40709
// begin _x := x ;
40689: LD_ADDR_VAR 0 6
40693: PUSH
40694: LD_VAR 0 4
40698: ST_TO_ADDR
// _y := y ;
40699: LD_ADDR_VAR 0 7
40703: PUSH
40704: LD_VAR 0 5
40708: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_INT 1
40716: PPUSH
40717: LD_VAR 0 14
40721: PPUSH
40722: CALL_OW 12
40726: ST_TO_ADDR
// case i of 1 :
40727: LD_VAR 0 3
40731: PUSH
40732: LD_INT 1
40734: DOUBLE
40735: EQUAL
40736: IFTRUE 40740
40738: GO 40757
40740: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40741: LD_VAR 0 1
40745: PPUSH
40746: LD_VAR 0 10
40750: PPUSH
40751: CALL_OW 115
40755: GO 40818
40757: LD_INT 2
40759: DOUBLE
40760: EQUAL
40761: IFTRUE 40765
40763: GO 40787
40765: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40766: LD_VAR 0 1
40770: PPUSH
40771: LD_VAR 0 6
40775: PPUSH
40776: LD_VAR 0 7
40780: PPUSH
40781: CALL_OW 153
40785: GO 40818
40787: LD_INT 3
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40795
40793: GO 40817
40795: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40796: LD_VAR 0 1
40800: PPUSH
40801: LD_VAR 0 6
40805: PPUSH
40806: LD_VAR 0 7
40810: PPUSH
40811: CALL_OW 154
40815: GO 40818
40817: POP
// end ;
40818: LD_VAR 0 2
40822: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40823: LD_INT 0
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
// if not unit or not building then
40831: LD_VAR 0 1
40835: NOT
40836: PUSH
40837: LD_VAR 0 2
40841: NOT
40842: OR
40843: IFFALSE 40847
// exit ;
40845: GO 41005
// x := GetX ( building ) ;
40847: LD_ADDR_VAR 0 5
40851: PUSH
40852: LD_VAR 0 2
40856: PPUSH
40857: CALL_OW 250
40861: ST_TO_ADDR
// y := GetY ( building ) ;
40862: LD_ADDR_VAR 0 6
40866: PUSH
40867: LD_VAR 0 2
40871: PPUSH
40872: CALL_OW 251
40876: ST_TO_ADDR
// for i = 0 to 5 do
40877: LD_ADDR_VAR 0 4
40881: PUSH
40882: DOUBLE
40883: LD_INT 0
40885: DEC
40886: ST_TO_ADDR
40887: LD_INT 5
40889: PUSH
40890: FOR_TO
40891: IFFALSE 41003
// begin _x := ShiftX ( x , i , 3 ) ;
40893: LD_ADDR_VAR 0 7
40897: PUSH
40898: LD_VAR 0 5
40902: PPUSH
40903: LD_VAR 0 4
40907: PPUSH
40908: LD_INT 3
40910: PPUSH
40911: CALL_OW 272
40915: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40916: LD_ADDR_VAR 0 8
40920: PUSH
40921: LD_VAR 0 6
40925: PPUSH
40926: LD_VAR 0 4
40930: PPUSH
40931: LD_INT 3
40933: PPUSH
40934: CALL_OW 273
40938: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40939: LD_VAR 0 7
40943: PPUSH
40944: LD_VAR 0 8
40948: PPUSH
40949: CALL_OW 488
40953: NOT
40954: IFFALSE 40958
// continue ;
40956: GO 40890
// if HexInfo ( _x , _y ) = 0 then
40958: LD_VAR 0 7
40962: PPUSH
40963: LD_VAR 0 8
40967: PPUSH
40968: CALL_OW 428
40972: PUSH
40973: LD_INT 0
40975: EQUAL
40976: IFFALSE 41001
// begin ComMoveXY ( unit , _x , _y ) ;
40978: LD_VAR 0 1
40982: PPUSH
40983: LD_VAR 0 7
40987: PPUSH
40988: LD_VAR 0 8
40992: PPUSH
40993: CALL_OW 111
// exit ;
40997: POP
40998: POP
40999: GO 41005
// end ; end ;
41001: GO 40890
41003: POP
41004: POP
// end ;
41005: LD_VAR 0 3
41009: RET
// export function ScanBase ( side , base_area ) ; begin
41010: LD_INT 0
41012: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_VAR 0 2
41022: PPUSH
41023: LD_INT 81
41025: PUSH
41026: LD_VAR 0 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PPUSH
41035: CALL_OW 70
41039: ST_TO_ADDR
// end ;
41040: LD_VAR 0 3
41044: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41045: LD_INT 0
41047: PPUSH
41048: PPUSH
41049: PPUSH
41050: PPUSH
// result := false ;
41051: LD_ADDR_VAR 0 2
41055: PUSH
41056: LD_INT 0
41058: ST_TO_ADDR
// side := GetSide ( unit ) ;
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: LD_VAR 0 1
41068: PPUSH
41069: CALL_OW 255
41073: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41074: LD_ADDR_VAR 0 4
41078: PUSH
41079: LD_VAR 0 1
41083: PPUSH
41084: CALL_OW 248
41088: ST_TO_ADDR
// case nat of 1 :
41089: LD_VAR 0 4
41093: PUSH
41094: LD_INT 1
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41102
41100: GO 41113
41102: POP
// tech := tech_lassight ; 2 :
41103: LD_ADDR_VAR 0 5
41107: PUSH
41108: LD_INT 12
41110: ST_TO_ADDR
41111: GO 41152
41113: LD_INT 2
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41132
41121: POP
// tech := tech_mortar ; 3 :
41122: LD_ADDR_VAR 0 5
41126: PUSH
41127: LD_INT 41
41129: ST_TO_ADDR
41130: GO 41152
41132: LD_INT 3
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41151
41140: POP
// tech := tech_bazooka ; end ;
41141: LD_ADDR_VAR 0 5
41145: PUSH
41146: LD_INT 44
41148: ST_TO_ADDR
41149: GO 41152
41151: POP
// if Researched ( side , tech ) then
41152: LD_VAR 0 3
41156: PPUSH
41157: LD_VAR 0 5
41161: PPUSH
41162: CALL_OW 325
41166: IFFALSE 41193
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41168: LD_ADDR_VAR 0 2
41172: PUSH
41173: LD_INT 5
41175: PUSH
41176: LD_INT 8
41178: PUSH
41179: LD_INT 9
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: PUSH
41187: LD_VAR 0 4
41191: ARRAY
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 2
41197: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
41202: PPUSH
// if not mines then
41203: LD_VAR 0 2
41207: NOT
41208: IFFALSE 41212
// exit ;
41210: GO 41356
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41212: LD_ADDR_VAR 0 5
41216: PUSH
41217: LD_INT 81
41219: PUSH
41220: LD_VAR 0 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: LD_INT 21
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PPUSH
41250: CALL_OW 69
41254: ST_TO_ADDR
// for i in mines do
41255: LD_ADDR_VAR 0 4
41259: PUSH
41260: LD_VAR 0 2
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41354
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41268: LD_VAR 0 4
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PPUSH
41277: LD_VAR 0 4
41281: PUSH
41282: LD_INT 2
41284: ARRAY
41285: PPUSH
41286: CALL_OW 458
41290: NOT
41291: IFFALSE 41295
// continue ;
41293: GO 41265
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41295: LD_VAR 0 4
41299: PUSH
41300: LD_INT 1
41302: ARRAY
41303: PPUSH
41304: LD_VAR 0 4
41308: PUSH
41309: LD_INT 2
41311: ARRAY
41312: PPUSH
41313: CALL_OW 428
41317: PUSH
41318: LD_VAR 0 5
41322: IN
41323: IFFALSE 41352
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41325: LD_VAR 0 4
41329: PUSH
41330: LD_INT 1
41332: ARRAY
41333: PPUSH
41334: LD_VAR 0 4
41338: PUSH
41339: LD_INT 2
41341: ARRAY
41342: PPUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 456
// end ;
41352: GO 41265
41354: POP
41355: POP
// end ;
41356: LD_VAR 0 3
41360: RET
// export function Count ( array ) ; begin
41361: LD_INT 0
41363: PPUSH
// result := array + 0 ;
41364: LD_ADDR_VAR 0 2
41368: PUSH
41369: LD_VAR 0 1
41373: PUSH
41374: LD_INT 0
41376: PLUS
41377: ST_TO_ADDR
// end ;
41378: LD_VAR 0 2
41382: RET
// export function IsEmpty ( building ) ; begin
41383: LD_INT 0
41385: PPUSH
// if not building then
41386: LD_VAR 0 1
41390: NOT
41391: IFFALSE 41395
// exit ;
41393: GO 41438
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41395: LD_ADDR_VAR 0 2
41399: PUSH
41400: LD_VAR 0 1
41404: PUSH
41405: LD_INT 22
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 255
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 58
41424: PUSH
41425: EMPTY
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PPUSH
41432: CALL_OW 69
41436: IN
41437: ST_TO_ADDR
// end ;
41438: LD_VAR 0 2
41442: RET
// export function IsNotFull ( building ) ; var places ; begin
41443: LD_INT 0
41445: PPUSH
41446: PPUSH
// if not building then
41447: LD_VAR 0 1
41451: NOT
41452: IFFALSE 41456
// exit ;
41454: GO 41484
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41456: LD_ADDR_VAR 0 2
41460: PUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: LD_INT 3
41468: PUSH
41469: LD_INT 62
41471: PUSH
41472: EMPTY
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PPUSH
41479: CALL_OW 72
41483: ST_TO_ADDR
// end ;
41484: LD_VAR 0 2
41488: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41489: LD_INT 0
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
// tmp := [ ] ;
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: EMPTY
41501: ST_TO_ADDR
// list := [ ] ;
41502: LD_ADDR_VAR 0 5
41506: PUSH
41507: EMPTY
41508: ST_TO_ADDR
// for i = 16 to 25 do
41509: LD_ADDR_VAR 0 4
41513: PUSH
41514: DOUBLE
41515: LD_INT 16
41517: DEC
41518: ST_TO_ADDR
41519: LD_INT 25
41521: PUSH
41522: FOR_TO
41523: IFFALSE 41596
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_VAR 0 3
41534: PUSH
41535: LD_INT 22
41537: PUSH
41538: LD_VAR 0 1
41542: PPUSH
41543: CALL_OW 255
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 91
41554: PUSH
41555: LD_VAR 0 1
41559: PUSH
41560: LD_INT 6
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 30
41570: PUSH
41571: LD_VAR 0 4
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: PPUSH
41588: CALL_OW 69
41592: ADD
41593: ST_TO_ADDR
41594: GO 41522
41596: POP
41597: POP
// for i = 1 to tmp do
41598: LD_ADDR_VAR 0 4
41602: PUSH
41603: DOUBLE
41604: LD_INT 1
41606: DEC
41607: ST_TO_ADDR
41608: LD_VAR 0 3
41612: PUSH
41613: FOR_TO
41614: IFFALSE 41702
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41616: LD_ADDR_VAR 0 5
41620: PUSH
41621: LD_VAR 0 5
41625: PUSH
41626: LD_VAR 0 3
41630: PUSH
41631: LD_VAR 0 4
41635: ARRAY
41636: PPUSH
41637: CALL_OW 266
41641: PUSH
41642: LD_VAR 0 3
41646: PUSH
41647: LD_VAR 0 4
41651: ARRAY
41652: PPUSH
41653: CALL_OW 250
41657: PUSH
41658: LD_VAR 0 3
41662: PUSH
41663: LD_VAR 0 4
41667: ARRAY
41668: PPUSH
41669: CALL_OW 251
41673: PUSH
41674: LD_VAR 0 3
41678: PUSH
41679: LD_VAR 0 4
41683: ARRAY
41684: PPUSH
41685: CALL_OW 254
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: ADD
41699: ST_TO_ADDR
41700: GO 41613
41702: POP
41703: POP
// result := list ;
41704: LD_ADDR_VAR 0 2
41708: PUSH
41709: LD_VAR 0 5
41713: ST_TO_ADDR
// end ;
41714: LD_VAR 0 2
41718: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41719: LD_INT 0
41721: PPUSH
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
// if not factory then
41728: LD_VAR 0 1
41732: NOT
41733: IFFALSE 41737
// exit ;
41735: GO 42330
// if control = control_apeman then
41737: LD_VAR 0 4
41741: PUSH
41742: LD_INT 5
41744: EQUAL
41745: IFFALSE 41854
// begin tmp := UnitsInside ( factory ) ;
41747: LD_ADDR_VAR 0 8
41751: PUSH
41752: LD_VAR 0 1
41756: PPUSH
41757: CALL_OW 313
41761: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41762: LD_VAR 0 8
41766: PPUSH
41767: LD_INT 25
41769: PUSH
41770: LD_INT 12
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PPUSH
41777: CALL_OW 72
41781: NOT
41782: IFFALSE 41792
// control := control_manual ;
41784: LD_ADDR_VAR 0 4
41788: PUSH
41789: LD_INT 1
41791: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41792: LD_ADDR_VAR 0 8
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: CALL 41489 0 1
41806: ST_TO_ADDR
// if tmp then
41807: LD_VAR 0 8
41811: IFFALSE 41854
// begin for i in tmp do
41813: LD_ADDR_VAR 0 7
41817: PUSH
41818: LD_VAR 0 8
41822: PUSH
41823: FOR_IN
41824: IFFALSE 41852
// if i [ 1 ] = b_ext_radio then
41826: LD_VAR 0 7
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: PUSH
41835: LD_INT 22
41837: EQUAL
41838: IFFALSE 41850
// begin control := control_remote ;
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_INT 2
41847: ST_TO_ADDR
// break ;
41848: GO 41852
// end ;
41850: GO 41823
41852: POP
41853: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41854: LD_VAR 0 1
41858: PPUSH
41859: LD_VAR 0 2
41863: PPUSH
41864: LD_VAR 0 3
41868: PPUSH
41869: LD_VAR 0 4
41873: PPUSH
41874: LD_VAR 0 5
41878: PPUSH
41879: CALL_OW 448
41883: IFFALSE 41918
// begin result := [ chassis , engine , control , weapon ] ;
41885: LD_ADDR_VAR 0 6
41889: PUSH
41890: LD_VAR 0 2
41894: PUSH
41895: LD_VAR 0 3
41899: PUSH
41900: LD_VAR 0 4
41904: PUSH
41905: LD_VAR 0 5
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// exit ;
41916: GO 42330
// end ; _chassis := AvailableChassisList ( factory ) ;
41918: LD_ADDR_VAR 0 9
41922: PUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 475
41932: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41933: LD_ADDR_VAR 0 11
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: CALL_OW 476
41947: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41948: LD_ADDR_VAR 0 12
41952: PUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 477
41962: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41963: LD_ADDR_VAR 0 10
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 478
41977: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41978: LD_VAR 0 9
41982: NOT
41983: PUSH
41984: LD_VAR 0 11
41988: NOT
41989: OR
41990: PUSH
41991: LD_VAR 0 12
41995: NOT
41996: OR
41997: PUSH
41998: LD_VAR 0 10
42002: NOT
42003: OR
42004: IFFALSE 42039
// begin result := [ chassis , engine , control , weapon ] ;
42006: LD_ADDR_VAR 0 6
42010: PUSH
42011: LD_VAR 0 2
42015: PUSH
42016: LD_VAR 0 3
42020: PUSH
42021: LD_VAR 0 4
42025: PUSH
42026: LD_VAR 0 5
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: ST_TO_ADDR
// exit ;
42037: GO 42330
// end ; if not chassis in _chassis then
42039: LD_VAR 0 2
42043: PUSH
42044: LD_VAR 0 9
42048: IN
42049: NOT
42050: IFFALSE 42076
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42052: LD_ADDR_VAR 0 2
42056: PUSH
42057: LD_VAR 0 9
42061: PUSH
42062: LD_INT 1
42064: PPUSH
42065: LD_VAR 0 9
42069: PPUSH
42070: CALL_OW 12
42074: ARRAY
42075: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42076: LD_VAR 0 2
42080: PPUSH
42081: LD_VAR 0 3
42085: PPUSH
42086: CALL 42335 0 2
42090: NOT
42091: IFFALSE 42150
// repeat engine := _engine [ 1 ] ;
42093: LD_ADDR_VAR 0 3
42097: PUSH
42098: LD_VAR 0 11
42102: PUSH
42103: LD_INT 1
42105: ARRAY
42106: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42107: LD_ADDR_VAR 0 11
42111: PUSH
42112: LD_VAR 0 11
42116: PPUSH
42117: LD_INT 1
42119: PPUSH
42120: CALL_OW 3
42124: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42125: LD_VAR 0 2
42129: PPUSH
42130: LD_VAR 0 3
42134: PPUSH
42135: CALL 42335 0 2
42139: PUSH
42140: LD_VAR 0 11
42144: PUSH
42145: EMPTY
42146: EQUAL
42147: OR
42148: IFFALSE 42093
// if not control in _control then
42150: LD_VAR 0 4
42154: PUSH
42155: LD_VAR 0 12
42159: IN
42160: NOT
42161: IFFALSE 42187
// control := _control [ rand ( 1 , _control ) ] ;
42163: LD_ADDR_VAR 0 4
42167: PUSH
42168: LD_VAR 0 12
42172: PUSH
42173: LD_INT 1
42175: PPUSH
42176: LD_VAR 0 12
42180: PPUSH
42181: CALL_OW 12
42185: ARRAY
42186: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42187: LD_VAR 0 2
42191: PPUSH
42192: LD_VAR 0 5
42196: PPUSH
42197: CALL 42555 0 2
42201: NOT
42202: IFFALSE 42261
// repeat weapon := _weapon [ 1 ] ;
42204: LD_ADDR_VAR 0 5
42208: PUSH
42209: LD_VAR 0 10
42213: PUSH
42214: LD_INT 1
42216: ARRAY
42217: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42218: LD_ADDR_VAR 0 10
42222: PUSH
42223: LD_VAR 0 10
42227: PPUSH
42228: LD_INT 1
42230: PPUSH
42231: CALL_OW 3
42235: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42236: LD_VAR 0 2
42240: PPUSH
42241: LD_VAR 0 5
42245: PPUSH
42246: CALL 42555 0 2
42250: PUSH
42251: LD_VAR 0 10
42255: PUSH
42256: EMPTY
42257: EQUAL
42258: OR
42259: IFFALSE 42204
// result := [ ] ;
42261: LD_ADDR_VAR 0 6
42265: PUSH
42266: EMPTY
42267: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42268: LD_VAR 0 1
42272: PPUSH
42273: LD_VAR 0 2
42277: PPUSH
42278: LD_VAR 0 3
42282: PPUSH
42283: LD_VAR 0 4
42287: PPUSH
42288: LD_VAR 0 5
42292: PPUSH
42293: CALL_OW 448
42297: IFFALSE 42330
// result := [ chassis , engine , control , weapon ] ;
42299: LD_ADDR_VAR 0 6
42303: PUSH
42304: LD_VAR 0 2
42308: PUSH
42309: LD_VAR 0 3
42313: PUSH
42314: LD_VAR 0 4
42318: PUSH
42319: LD_VAR 0 5
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// end ;
42330: LD_VAR 0 6
42334: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42335: LD_INT 0
42337: PPUSH
// if not chassis or not engine then
42338: LD_VAR 0 1
42342: NOT
42343: PUSH
42344: LD_VAR 0 2
42348: NOT
42349: OR
42350: IFFALSE 42354
// exit ;
42352: GO 42550
// case engine of engine_solar :
42354: LD_VAR 0 2
42358: PUSH
42359: LD_INT 2
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42405
42367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 11
42375: PUSH
42376: LD_INT 12
42378: PUSH
42379: LD_INT 13
42381: PUSH
42382: LD_INT 14
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
42403: GO 42534
42405: LD_INT 1
42407: DOUBLE
42408: EQUAL
42409: IFTRUE 42413
42411: GO 42475
42413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_INT 11
42421: PUSH
42422: LD_INT 12
42424: PUSH
42425: LD_INT 13
42427: PUSH
42428: LD_INT 14
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 4
42442: PUSH
42443: LD_INT 5
42445: PUSH
42446: LD_INT 21
42448: PUSH
42449: LD_INT 23
42451: PUSH
42452: LD_INT 22
42454: PUSH
42455: LD_INT 24
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: ST_TO_ADDR
42473: GO 42534
42475: LD_INT 3
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42483
42481: GO 42533
42483: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: LD_INT 13
42491: PUSH
42492: LD_INT 14
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: LD_INT 4
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: LD_INT 21
42509: PUSH
42510: LD_INT 22
42512: PUSH
42513: LD_INT 23
42515: PUSH
42516: LD_INT 24
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: ST_TO_ADDR
42531: GO 42534
42533: POP
// result := ( chassis in result ) ;
42534: LD_ADDR_VAR 0 3
42538: PUSH
42539: LD_VAR 0 1
42543: PUSH
42544: LD_VAR 0 3
42548: IN
42549: ST_TO_ADDR
// end ;
42550: LD_VAR 0 3
42554: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42555: LD_INT 0
42557: PPUSH
// if not chassis or not weapon then
42558: LD_VAR 0 1
42562: NOT
42563: PUSH
42564: LD_VAR 0 2
42568: NOT
42569: OR
42570: IFFALSE 42574
// exit ;
42572: GO 43634
// case weapon of us_machine_gun :
42574: LD_VAR 0 2
42578: PUSH
42579: LD_INT 2
42581: DOUBLE
42582: EQUAL
42583: IFTRUE 42587
42585: GO 42617
42587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42588: LD_ADDR_VAR 0 3
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: LD_INT 4
42604: PUSH
42605: LD_INT 5
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
42615: GO 43618
42617: LD_INT 3
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42625
42623: GO 42655
42625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42626: LD_ADDR_VAR 0 3
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: LD_INT 5
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: ST_TO_ADDR
42653: GO 43618
42655: LD_INT 11
42657: DOUBLE
42658: EQUAL
42659: IFTRUE 42663
42661: GO 42693
42663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42664: LD_ADDR_VAR 0 3
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 5
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
42691: GO 43618
42693: LD_INT 4
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42727
42701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: LD_INT 5
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: ST_TO_ADDR
42725: GO 43618
42727: LD_INT 5
42729: DOUBLE
42730: EQUAL
42731: IFTRUE 42735
42733: GO 42761
42735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42736: LD_ADDR_VAR 0 3
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 3
42746: PUSH
42747: LD_INT 4
42749: PUSH
42750: LD_INT 5
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
42759: GO 43618
42761: LD_INT 9
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42795
42769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: LD_INT 5
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
42793: GO 43618
42795: LD_INT 7
42797: DOUBLE
42798: EQUAL
42799: IFTRUE 42803
42801: GO 42829
42803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42804: LD_ADDR_VAR 0 3
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 4
42817: PUSH
42818: LD_INT 5
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
42827: GO 43618
42829: LD_INT 12
42831: DOUBLE
42832: EQUAL
42833: IFTRUE 42837
42835: GO 42863
42837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42838: LD_ADDR_VAR 0 3
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 4
42851: PUSH
42852: LD_INT 5
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
42861: GO 43618
42863: LD_INT 13
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42897
42871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 4
42885: PUSH
42886: LD_INT 5
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
42895: GO 43618
42897: LD_INT 14
42899: DOUBLE
42900: EQUAL
42901: IFTRUE 42905
42903: GO 42923
42905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_INT 4
42913: PUSH
42914: LD_INT 5
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: ST_TO_ADDR
42921: GO 43618
42923: LD_INT 6
42925: DOUBLE
42926: EQUAL
42927: IFTRUE 42931
42929: GO 42949
42931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42932: LD_ADDR_VAR 0 3
42936: PUSH
42937: LD_INT 4
42939: PUSH
42940: LD_INT 5
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: ST_TO_ADDR
42947: GO 43618
42949: LD_INT 10
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 42957
42955: GO 42975
42957: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_INT 4
42965: PUSH
42966: LD_INT 5
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: ST_TO_ADDR
42973: GO 43618
42975: LD_INT 22
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 42983
42981: GO 43009
42983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42984: LD_ADDR_VAR 0 3
42988: PUSH
42989: LD_INT 11
42991: PUSH
42992: LD_INT 12
42994: PUSH
42995: LD_INT 13
42997: PUSH
42998: LD_INT 14
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
43007: GO 43618
43009: LD_INT 23
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43043
43017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_INT 11
43025: PUSH
43026: LD_INT 12
43028: PUSH
43029: LD_INT 13
43031: PUSH
43032: LD_INT 14
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
43041: GO 43618
43043: LD_INT 24
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43051
43049: GO 43077
43051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43052: LD_ADDR_VAR 0 3
43056: PUSH
43057: LD_INT 11
43059: PUSH
43060: LD_INT 12
43062: PUSH
43063: LD_INT 13
43065: PUSH
43066: LD_INT 14
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
43075: GO 43618
43077: LD_INT 30
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43111
43085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_INT 11
43093: PUSH
43094: LD_INT 12
43096: PUSH
43097: LD_INT 13
43099: PUSH
43100: LD_INT 14
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
43109: GO 43618
43111: LD_INT 25
43113: DOUBLE
43114: EQUAL
43115: IFTRUE 43119
43117: GO 43137
43119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_INT 13
43127: PUSH
43128: LD_INT 14
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: ST_TO_ADDR
43135: GO 43618
43137: LD_INT 27
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43163
43145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 13
43153: PUSH
43154: LD_INT 14
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: ST_TO_ADDR
43161: GO 43618
43163: LD_INT 92
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43197
43171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 11
43179: PUSH
43180: LD_INT 12
43182: PUSH
43183: LD_INT 13
43185: PUSH
43186: LD_INT 14
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
43195: GO 43618
43197: LD_INT 28
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43223
43205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 13
43213: PUSH
43214: LD_INT 14
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: ST_TO_ADDR
43221: GO 43618
43223: LD_INT 29
43225: DOUBLE
43226: EQUAL
43227: IFTRUE 43231
43229: GO 43249
43231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43232: LD_ADDR_VAR 0 3
43236: PUSH
43237: LD_INT 13
43239: PUSH
43240: LD_INT 14
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: ST_TO_ADDR
43247: GO 43618
43249: LD_INT 31
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43257
43255: GO 43275
43257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43258: LD_ADDR_VAR 0 3
43262: PUSH
43263: LD_INT 13
43265: PUSH
43266: LD_INT 14
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: ST_TO_ADDR
43273: GO 43618
43275: LD_INT 26
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43283
43281: GO 43301
43283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 13
43291: PUSH
43292: LD_INT 14
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: ST_TO_ADDR
43299: GO 43618
43301: LD_INT 42
43303: DOUBLE
43304: EQUAL
43305: IFTRUE 43309
43307: GO 43335
43309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: LD_INT 21
43317: PUSH
43318: LD_INT 22
43320: PUSH
43321: LD_INT 23
43323: PUSH
43324: LD_INT 24
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: ST_TO_ADDR
43333: GO 43618
43335: LD_INT 43
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43343
43341: GO 43369
43343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_INT 21
43351: PUSH
43352: LD_INT 22
43354: PUSH
43355: LD_INT 23
43357: PUSH
43358: LD_INT 24
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
43367: GO 43618
43369: LD_INT 44
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43403
43377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43378: LD_ADDR_VAR 0 3
43382: PUSH
43383: LD_INT 21
43385: PUSH
43386: LD_INT 22
43388: PUSH
43389: LD_INT 23
43391: PUSH
43392: LD_INT 24
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
43401: GO 43618
43403: LD_INT 45
43405: DOUBLE
43406: EQUAL
43407: IFTRUE 43411
43409: GO 43437
43411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43412: LD_ADDR_VAR 0 3
43416: PUSH
43417: LD_INT 21
43419: PUSH
43420: LD_INT 22
43422: PUSH
43423: LD_INT 23
43425: PUSH
43426: LD_INT 24
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: ST_TO_ADDR
43435: GO 43618
43437: LD_INT 49
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43445
43443: GO 43471
43445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: LD_INT 21
43453: PUSH
43454: LD_INT 22
43456: PUSH
43457: LD_INT 23
43459: PUSH
43460: LD_INT 24
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
43469: GO 43618
43471: LD_INT 51
43473: DOUBLE
43474: EQUAL
43475: IFTRUE 43479
43477: GO 43505
43479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43480: LD_ADDR_VAR 0 3
43484: PUSH
43485: LD_INT 21
43487: PUSH
43488: LD_INT 22
43490: PUSH
43491: LD_INT 23
43493: PUSH
43494: LD_INT 24
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: ST_TO_ADDR
43503: GO 43618
43505: LD_INT 52
43507: DOUBLE
43508: EQUAL
43509: IFTRUE 43513
43511: GO 43539
43513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43514: LD_ADDR_VAR 0 3
43518: PUSH
43519: LD_INT 21
43521: PUSH
43522: LD_INT 22
43524: PUSH
43525: LD_INT 23
43527: PUSH
43528: LD_INT 24
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: ST_TO_ADDR
43537: GO 43618
43539: LD_INT 53
43541: DOUBLE
43542: EQUAL
43543: IFTRUE 43547
43545: GO 43565
43547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43548: LD_ADDR_VAR 0 3
43552: PUSH
43553: LD_INT 23
43555: PUSH
43556: LD_INT 24
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: ST_TO_ADDR
43563: GO 43618
43565: LD_INT 46
43567: DOUBLE
43568: EQUAL
43569: IFTRUE 43573
43571: GO 43591
43573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_INT 23
43581: PUSH
43582: LD_INT 24
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: ST_TO_ADDR
43589: GO 43618
43591: LD_INT 47
43593: DOUBLE
43594: EQUAL
43595: IFTRUE 43599
43597: GO 43617
43599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43600: LD_ADDR_VAR 0 3
43604: PUSH
43605: LD_INT 23
43607: PUSH
43608: LD_INT 24
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: ST_TO_ADDR
43615: GO 43618
43617: POP
// result := ( chassis in result ) ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_VAR 0 1
43627: PUSH
43628: LD_VAR 0 3
43632: IN
43633: ST_TO_ADDR
// end ;
43634: LD_VAR 0 3
43638: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43639: LD_INT 0
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
// result := array ;
43648: LD_ADDR_VAR 0 5
43652: PUSH
43653: LD_VAR 0 1
43657: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43658: LD_VAR 0 1
43662: NOT
43663: PUSH
43664: LD_VAR 0 2
43668: NOT
43669: OR
43670: PUSH
43671: LD_VAR 0 3
43675: NOT
43676: OR
43677: PUSH
43678: LD_VAR 0 2
43682: PUSH
43683: LD_VAR 0 1
43687: GREATER
43688: OR
43689: PUSH
43690: LD_VAR 0 3
43694: PUSH
43695: LD_VAR 0 1
43699: GREATER
43700: OR
43701: IFFALSE 43705
// exit ;
43703: GO 44001
// if direction then
43705: LD_VAR 0 4
43709: IFFALSE 43773
// begin d := 1 ;
43711: LD_ADDR_VAR 0 9
43715: PUSH
43716: LD_INT 1
43718: ST_TO_ADDR
// if i_from > i_to then
43719: LD_VAR 0 2
43723: PUSH
43724: LD_VAR 0 3
43728: GREATER
43729: IFFALSE 43755
// length := ( array - i_from ) + i_to else
43731: LD_ADDR_VAR 0 11
43735: PUSH
43736: LD_VAR 0 1
43740: PUSH
43741: LD_VAR 0 2
43745: MINUS
43746: PUSH
43747: LD_VAR 0 3
43751: PLUS
43752: ST_TO_ADDR
43753: GO 43771
// length := i_to - i_from ;
43755: LD_ADDR_VAR 0 11
43759: PUSH
43760: LD_VAR 0 3
43764: PUSH
43765: LD_VAR 0 2
43769: MINUS
43770: ST_TO_ADDR
// end else
43771: GO 43834
// begin d := - 1 ;
43773: LD_ADDR_VAR 0 9
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: ST_TO_ADDR
// if i_from > i_to then
43782: LD_VAR 0 2
43786: PUSH
43787: LD_VAR 0 3
43791: GREATER
43792: IFFALSE 43812
// length := i_from - i_to else
43794: LD_ADDR_VAR 0 11
43798: PUSH
43799: LD_VAR 0 2
43803: PUSH
43804: LD_VAR 0 3
43808: MINUS
43809: ST_TO_ADDR
43810: GO 43834
// length := ( array - i_to ) + i_from ;
43812: LD_ADDR_VAR 0 11
43816: PUSH
43817: LD_VAR 0 1
43821: PUSH
43822: LD_VAR 0 3
43826: MINUS
43827: PUSH
43828: LD_VAR 0 2
43832: PLUS
43833: ST_TO_ADDR
// end ; if not length then
43834: LD_VAR 0 11
43838: NOT
43839: IFFALSE 43843
// exit ;
43841: GO 44001
// tmp := array ;
43843: LD_ADDR_VAR 0 10
43847: PUSH
43848: LD_VAR 0 1
43852: ST_TO_ADDR
// for i = 1 to length do
43853: LD_ADDR_VAR 0 6
43857: PUSH
43858: DOUBLE
43859: LD_INT 1
43861: DEC
43862: ST_TO_ADDR
43863: LD_VAR 0 11
43867: PUSH
43868: FOR_TO
43869: IFFALSE 43989
// begin for j = 1 to array do
43871: LD_ADDR_VAR 0 7
43875: PUSH
43876: DOUBLE
43877: LD_INT 1
43879: DEC
43880: ST_TO_ADDR
43881: LD_VAR 0 1
43885: PUSH
43886: FOR_TO
43887: IFFALSE 43975
// begin k := j + d ;
43889: LD_ADDR_VAR 0 8
43893: PUSH
43894: LD_VAR 0 7
43898: PUSH
43899: LD_VAR 0 9
43903: PLUS
43904: ST_TO_ADDR
// if k > array then
43905: LD_VAR 0 8
43909: PUSH
43910: LD_VAR 0 1
43914: GREATER
43915: IFFALSE 43925
// k := 1 ;
43917: LD_ADDR_VAR 0 8
43921: PUSH
43922: LD_INT 1
43924: ST_TO_ADDR
// if not k then
43925: LD_VAR 0 8
43929: NOT
43930: IFFALSE 43942
// k := array ;
43932: LD_ADDR_VAR 0 8
43936: PUSH
43937: LD_VAR 0 1
43941: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43942: LD_ADDR_VAR 0 10
43946: PUSH
43947: LD_VAR 0 10
43951: PPUSH
43952: LD_VAR 0 8
43956: PPUSH
43957: LD_VAR 0 1
43961: PUSH
43962: LD_VAR 0 7
43966: ARRAY
43967: PPUSH
43968: CALL_OW 1
43972: ST_TO_ADDR
// end ;
43973: GO 43886
43975: POP
43976: POP
// array := tmp ;
43977: LD_ADDR_VAR 0 1
43981: PUSH
43982: LD_VAR 0 10
43986: ST_TO_ADDR
// end ;
43987: GO 43868
43989: POP
43990: POP
// result := array ;
43991: LD_ADDR_VAR 0 5
43995: PUSH
43996: LD_VAR 0 1
44000: ST_TO_ADDR
// end ;
44001: LD_VAR 0 5
44005: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44006: LD_INT 0
44008: PPUSH
44009: PPUSH
// result := 0 ;
44010: LD_ADDR_VAR 0 3
44014: PUSH
44015: LD_INT 0
44017: ST_TO_ADDR
// if not array or not value in array then
44018: LD_VAR 0 1
44022: NOT
44023: PUSH
44024: LD_VAR 0 2
44028: PUSH
44029: LD_VAR 0 1
44033: IN
44034: NOT
44035: OR
44036: IFFALSE 44040
// exit ;
44038: GO 44094
// for i = 1 to array do
44040: LD_ADDR_VAR 0 4
44044: PUSH
44045: DOUBLE
44046: LD_INT 1
44048: DEC
44049: ST_TO_ADDR
44050: LD_VAR 0 1
44054: PUSH
44055: FOR_TO
44056: IFFALSE 44092
// if value = array [ i ] then
44058: LD_VAR 0 2
44062: PUSH
44063: LD_VAR 0 1
44067: PUSH
44068: LD_VAR 0 4
44072: ARRAY
44073: EQUAL
44074: IFFALSE 44090
// begin result := i ;
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_VAR 0 4
44085: ST_TO_ADDR
// exit ;
44086: POP
44087: POP
44088: GO 44094
// end ;
44090: GO 44055
44092: POP
44093: POP
// end ;
44094: LD_VAR 0 3
44098: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44099: LD_INT 0
44101: PPUSH
// vc_chassis := chassis ;
44102: LD_ADDR_OWVAR 37
44106: PUSH
44107: LD_VAR 0 1
44111: ST_TO_ADDR
// vc_engine := engine ;
44112: LD_ADDR_OWVAR 39
44116: PUSH
44117: LD_VAR 0 2
44121: ST_TO_ADDR
// vc_control := control ;
44122: LD_ADDR_OWVAR 38
44126: PUSH
44127: LD_VAR 0 3
44131: ST_TO_ADDR
// vc_weapon := weapon ;
44132: LD_ADDR_OWVAR 40
44136: PUSH
44137: LD_VAR 0 4
44141: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44142: LD_ADDR_OWVAR 41
44146: PUSH
44147: LD_VAR 0 5
44151: ST_TO_ADDR
// end ;
44152: LD_VAR 0 6
44156: RET
// export function WantPlant ( unit ) ; var task ; begin
44157: LD_INT 0
44159: PPUSH
44160: PPUSH
// result := false ;
44161: LD_ADDR_VAR 0 2
44165: PUSH
44166: LD_INT 0
44168: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44169: LD_ADDR_VAR 0 3
44173: PUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: CALL_OW 437
44183: ST_TO_ADDR
// if task then
44184: LD_VAR 0 3
44188: IFFALSE 44216
// if task [ 1 ] [ 1 ] = p then
44190: LD_VAR 0 3
44194: PUSH
44195: LD_INT 1
44197: ARRAY
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PUSH
44203: LD_STRING p
44205: EQUAL
44206: IFFALSE 44216
// result := true ;
44208: LD_ADDR_VAR 0 2
44212: PUSH
44213: LD_INT 1
44215: ST_TO_ADDR
// end ;
44216: LD_VAR 0 2
44220: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44221: LD_INT 0
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
// if pos < 1 then
44227: LD_VAR 0 2
44231: PUSH
44232: LD_INT 1
44234: LESS
44235: IFFALSE 44239
// exit ;
44237: GO 44542
// if pos = 1 then
44239: LD_VAR 0 2
44243: PUSH
44244: LD_INT 1
44246: EQUAL
44247: IFFALSE 44280
// result := Replace ( arr , pos [ 1 ] , value ) else
44249: LD_ADDR_VAR 0 4
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: LD_VAR 0 2
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: PPUSH
44268: LD_VAR 0 3
44272: PPUSH
44273: CALL_OW 1
44277: ST_TO_ADDR
44278: GO 44542
// begin tmp := arr ;
44280: LD_ADDR_VAR 0 6
44284: PUSH
44285: LD_VAR 0 1
44289: ST_TO_ADDR
// s_arr := [ tmp ] ;
44290: LD_ADDR_VAR 0 7
44294: PUSH
44295: LD_VAR 0 6
44299: PUSH
44300: EMPTY
44301: LIST
44302: ST_TO_ADDR
// for i = 1 to pos - 1 do
44303: LD_ADDR_VAR 0 5
44307: PUSH
44308: DOUBLE
44309: LD_INT 1
44311: DEC
44312: ST_TO_ADDR
44313: LD_VAR 0 2
44317: PUSH
44318: LD_INT 1
44320: MINUS
44321: PUSH
44322: FOR_TO
44323: IFFALSE 44368
// begin tmp := tmp [ pos [ i ] ] ;
44325: LD_ADDR_VAR 0 6
44329: PUSH
44330: LD_VAR 0 6
44334: PUSH
44335: LD_VAR 0 2
44339: PUSH
44340: LD_VAR 0 5
44344: ARRAY
44345: ARRAY
44346: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44347: LD_ADDR_VAR 0 7
44351: PUSH
44352: LD_VAR 0 7
44356: PUSH
44357: LD_VAR 0 6
44361: PUSH
44362: EMPTY
44363: LIST
44364: ADD
44365: ST_TO_ADDR
// end ;
44366: GO 44322
44368: POP
44369: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44370: LD_ADDR_VAR 0 6
44374: PUSH
44375: LD_VAR 0 6
44379: PPUSH
44380: LD_VAR 0 2
44384: PUSH
44385: LD_VAR 0 2
44389: ARRAY
44390: PPUSH
44391: LD_VAR 0 3
44395: PPUSH
44396: CALL_OW 1
44400: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44401: LD_ADDR_VAR 0 7
44405: PUSH
44406: LD_VAR 0 7
44410: PPUSH
44411: LD_VAR 0 7
44415: PPUSH
44416: LD_VAR 0 6
44420: PPUSH
44421: CALL_OW 1
44425: ST_TO_ADDR
// for i = s_arr downto 2 do
44426: LD_ADDR_VAR 0 5
44430: PUSH
44431: DOUBLE
44432: LD_VAR 0 7
44436: INC
44437: ST_TO_ADDR
44438: LD_INT 2
44440: PUSH
44441: FOR_DOWNTO
44442: IFFALSE 44526
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44444: LD_ADDR_VAR 0 6
44448: PUSH
44449: LD_VAR 0 7
44453: PUSH
44454: LD_VAR 0 5
44458: PUSH
44459: LD_INT 1
44461: MINUS
44462: ARRAY
44463: PPUSH
44464: LD_VAR 0 2
44468: PUSH
44469: LD_VAR 0 5
44473: PUSH
44474: LD_INT 1
44476: MINUS
44477: ARRAY
44478: PPUSH
44479: LD_VAR 0 7
44483: PUSH
44484: LD_VAR 0 5
44488: ARRAY
44489: PPUSH
44490: CALL_OW 1
44494: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44495: LD_ADDR_VAR 0 7
44499: PUSH
44500: LD_VAR 0 7
44504: PPUSH
44505: LD_VAR 0 5
44509: PUSH
44510: LD_INT 1
44512: MINUS
44513: PPUSH
44514: LD_VAR 0 6
44518: PPUSH
44519: CALL_OW 1
44523: ST_TO_ADDR
// end ;
44524: GO 44441
44526: POP
44527: POP
// result := s_arr [ 1 ] ;
44528: LD_ADDR_VAR 0 4
44532: PUSH
44533: LD_VAR 0 7
44537: PUSH
44538: LD_INT 1
44540: ARRAY
44541: ST_TO_ADDR
// end ; end ;
44542: LD_VAR 0 4
44546: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44547: LD_INT 0
44549: PPUSH
44550: PPUSH
// if not list then
44551: LD_VAR 0 1
44555: NOT
44556: IFFALSE 44560
// exit ;
44558: GO 44651
// i := list [ pos1 ] ;
44560: LD_ADDR_VAR 0 5
44564: PUSH
44565: LD_VAR 0 1
44569: PUSH
44570: LD_VAR 0 2
44574: ARRAY
44575: ST_TO_ADDR
// if not i then
44576: LD_VAR 0 5
44580: NOT
44581: IFFALSE 44585
// exit ;
44583: GO 44651
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44585: LD_ADDR_VAR 0 1
44589: PUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: LD_VAR 0 2
44599: PPUSH
44600: LD_VAR 0 1
44604: PUSH
44605: LD_VAR 0 3
44609: ARRAY
44610: PPUSH
44611: CALL_OW 1
44615: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44616: LD_ADDR_VAR 0 1
44620: PUSH
44621: LD_VAR 0 1
44625: PPUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: LD_VAR 0 5
44635: PPUSH
44636: CALL_OW 1
44640: ST_TO_ADDR
// result := list ;
44641: LD_ADDR_VAR 0 4
44645: PUSH
44646: LD_VAR 0 1
44650: ST_TO_ADDR
// end ;
44651: LD_VAR 0 4
44655: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44656: LD_INT 0
44658: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44659: LD_ADDR_VAR 0 5
44663: PUSH
44664: LD_VAR 0 1
44668: PPUSH
44669: CALL_OW 250
44673: PPUSH
44674: LD_VAR 0 1
44678: PPUSH
44679: CALL_OW 251
44683: PPUSH
44684: LD_VAR 0 2
44688: PPUSH
44689: LD_VAR 0 3
44693: PPUSH
44694: LD_VAR 0 4
44698: PPUSH
44699: CALL 44709 0 5
44703: ST_TO_ADDR
// end ;
44704: LD_VAR 0 5
44708: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44709: LD_INT 0
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
// if not list then
44715: LD_VAR 0 3
44719: NOT
44720: IFFALSE 44724
// exit ;
44722: GO 45112
// result := [ ] ;
44724: LD_ADDR_VAR 0 6
44728: PUSH
44729: EMPTY
44730: ST_TO_ADDR
// for i in list do
44731: LD_ADDR_VAR 0 7
44735: PUSH
44736: LD_VAR 0 3
44740: PUSH
44741: FOR_IN
44742: IFFALSE 44944
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44744: LD_ADDR_VAR 0 9
44748: PUSH
44749: LD_VAR 0 7
44753: PPUSH
44754: LD_VAR 0 1
44758: PPUSH
44759: LD_VAR 0 2
44763: PPUSH
44764: CALL_OW 297
44768: ST_TO_ADDR
// if not result then
44769: LD_VAR 0 6
44773: NOT
44774: IFFALSE 44800
// result := [ [ i , tmp ] ] else
44776: LD_ADDR_VAR 0 6
44780: PUSH
44781: LD_VAR 0 7
44785: PUSH
44786: LD_VAR 0 9
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: ST_TO_ADDR
44798: GO 44942
// begin if result [ result ] [ 2 ] < tmp then
44800: LD_VAR 0 6
44804: PUSH
44805: LD_VAR 0 6
44809: ARRAY
44810: PUSH
44811: LD_INT 2
44813: ARRAY
44814: PUSH
44815: LD_VAR 0 9
44819: LESS
44820: IFFALSE 44862
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44822: LD_ADDR_VAR 0 6
44826: PUSH
44827: LD_VAR 0 6
44831: PPUSH
44832: LD_VAR 0 6
44836: PUSH
44837: LD_INT 1
44839: PLUS
44840: PPUSH
44841: LD_VAR 0 7
44845: PUSH
44846: LD_VAR 0 9
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PPUSH
44855: CALL_OW 2
44859: ST_TO_ADDR
44860: GO 44942
// for j = 1 to result do
44862: LD_ADDR_VAR 0 8
44866: PUSH
44867: DOUBLE
44868: LD_INT 1
44870: DEC
44871: ST_TO_ADDR
44872: LD_VAR 0 6
44876: PUSH
44877: FOR_TO
44878: IFFALSE 44940
// begin if tmp < result [ j ] [ 2 ] then
44880: LD_VAR 0 9
44884: PUSH
44885: LD_VAR 0 6
44889: PUSH
44890: LD_VAR 0 8
44894: ARRAY
44895: PUSH
44896: LD_INT 2
44898: ARRAY
44899: LESS
44900: IFFALSE 44938
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44902: LD_ADDR_VAR 0 6
44906: PUSH
44907: LD_VAR 0 6
44911: PPUSH
44912: LD_VAR 0 8
44916: PPUSH
44917: LD_VAR 0 7
44921: PUSH
44922: LD_VAR 0 9
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PPUSH
44931: CALL_OW 2
44935: ST_TO_ADDR
// break ;
44936: GO 44940
// end ; end ;
44938: GO 44877
44940: POP
44941: POP
// end ; end ;
44942: GO 44741
44944: POP
44945: POP
// if result and not asc then
44946: LD_VAR 0 6
44950: PUSH
44951: LD_VAR 0 4
44955: NOT
44956: AND
44957: IFFALSE 45032
// begin tmp := result ;
44959: LD_ADDR_VAR 0 9
44963: PUSH
44964: LD_VAR 0 6
44968: ST_TO_ADDR
// for i = tmp downto 1 do
44969: LD_ADDR_VAR 0 7
44973: PUSH
44974: DOUBLE
44975: LD_VAR 0 9
44979: INC
44980: ST_TO_ADDR
44981: LD_INT 1
44983: PUSH
44984: FOR_DOWNTO
44985: IFFALSE 45030
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44987: LD_ADDR_VAR 0 6
44991: PUSH
44992: LD_VAR 0 6
44996: PPUSH
44997: LD_VAR 0 9
45001: PUSH
45002: LD_VAR 0 7
45006: MINUS
45007: PUSH
45008: LD_INT 1
45010: PLUS
45011: PPUSH
45012: LD_VAR 0 9
45016: PUSH
45017: LD_VAR 0 7
45021: ARRAY
45022: PPUSH
45023: CALL_OW 1
45027: ST_TO_ADDR
45028: GO 44984
45030: POP
45031: POP
// end ; tmp := [ ] ;
45032: LD_ADDR_VAR 0 9
45036: PUSH
45037: EMPTY
45038: ST_TO_ADDR
// if mode then
45039: LD_VAR 0 5
45043: IFFALSE 45112
// begin for i = 1 to result do
45045: LD_ADDR_VAR 0 7
45049: PUSH
45050: DOUBLE
45051: LD_INT 1
45053: DEC
45054: ST_TO_ADDR
45055: LD_VAR 0 6
45059: PUSH
45060: FOR_TO
45061: IFFALSE 45100
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45063: LD_ADDR_VAR 0 9
45067: PUSH
45068: LD_VAR 0 9
45072: PPUSH
45073: LD_VAR 0 7
45077: PPUSH
45078: LD_VAR 0 6
45082: PUSH
45083: LD_VAR 0 7
45087: ARRAY
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: PPUSH
45093: CALL_OW 1
45097: ST_TO_ADDR
45098: GO 45060
45100: POP
45101: POP
// result := tmp ;
45102: LD_ADDR_VAR 0 6
45106: PUSH
45107: LD_VAR 0 9
45111: ST_TO_ADDR
// end ; end ;
45112: LD_VAR 0 6
45116: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45117: LD_INT 0
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45125: LD_ADDR_VAR 0 5
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
// if not x or not y then
45147: LD_VAR 0 2
45151: NOT
45152: PUSH
45153: LD_VAR 0 3
45157: NOT
45158: OR
45159: IFFALSE 45163
// exit ;
45161: GO 46813
// if not range then
45163: LD_VAR 0 4
45167: NOT
45168: IFFALSE 45178
// range := 10 ;
45170: LD_ADDR_VAR 0 4
45174: PUSH
45175: LD_INT 10
45177: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45178: LD_ADDR_VAR 0 8
45182: PUSH
45183: LD_INT 81
45185: PUSH
45186: LD_VAR 0 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 92
45197: PUSH
45198: LD_VAR 0 2
45202: PUSH
45203: LD_VAR 0 3
45207: PUSH
45208: LD_VAR 0 4
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 3
45221: PUSH
45222: LD_INT 21
45224: PUSH
45225: LD_INT 3
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: PPUSH
45241: CALL_OW 69
45245: ST_TO_ADDR
// if not tmp then
45246: LD_VAR 0 8
45250: NOT
45251: IFFALSE 45255
// exit ;
45253: GO 46813
// for i in tmp do
45255: LD_ADDR_VAR 0 6
45259: PUSH
45260: LD_VAR 0 8
45264: PUSH
45265: FOR_IN
45266: IFFALSE 46788
// begin points := [ 0 , 0 , 0 ] ;
45268: LD_ADDR_VAR 0 9
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// bpoints := 1 ;
45287: LD_ADDR_VAR 0 10
45291: PUSH
45292: LD_INT 1
45294: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45295: LD_VAR 0 6
45299: PPUSH
45300: CALL_OW 247
45304: PUSH
45305: LD_INT 1
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45313
45311: GO 45891
45313: POP
// begin if GetClass ( i ) = 1 then
45314: LD_VAR 0 6
45318: PPUSH
45319: CALL_OW 257
45323: PUSH
45324: LD_INT 1
45326: EQUAL
45327: IFFALSE 45348
// points := [ 10 , 5 , 3 ] ;
45329: LD_ADDR_VAR 0 9
45333: PUSH
45334: LD_INT 10
45336: PUSH
45337: LD_INT 5
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45348: LD_VAR 0 6
45352: PPUSH
45353: CALL_OW 257
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: IN
45372: IFFALSE 45393
// points := [ 3 , 2 , 1 ] ;
45374: LD_ADDR_VAR 0 9
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45393: LD_VAR 0 6
45397: PPUSH
45398: CALL_OW 257
45402: PUSH
45403: LD_INT 5
45405: EQUAL
45406: IFFALSE 45427
// points := [ 130 , 5 , 2 ] ;
45408: LD_ADDR_VAR 0 9
45412: PUSH
45413: LD_INT 130
45415: PUSH
45416: LD_INT 5
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45427: LD_VAR 0 6
45431: PPUSH
45432: CALL_OW 257
45436: PUSH
45437: LD_INT 8
45439: EQUAL
45440: IFFALSE 45461
// points := [ 35 , 35 , 30 ] ;
45442: LD_ADDR_VAR 0 9
45446: PUSH
45447: LD_INT 35
45449: PUSH
45450: LD_INT 35
45452: PUSH
45453: LD_INT 30
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45461: LD_VAR 0 6
45465: PPUSH
45466: CALL_OW 257
45470: PUSH
45471: LD_INT 9
45473: EQUAL
45474: IFFALSE 45495
// points := [ 20 , 55 , 40 ] ;
45476: LD_ADDR_VAR 0 9
45480: PUSH
45481: LD_INT 20
45483: PUSH
45484: LD_INT 55
45486: PUSH
45487: LD_INT 40
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45495: LD_VAR 0 6
45499: PPUSH
45500: CALL_OW 257
45504: PUSH
45505: LD_INT 12
45507: PUSH
45508: LD_INT 16
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: IN
45515: IFFALSE 45536
// points := [ 5 , 3 , 2 ] ;
45517: LD_ADDR_VAR 0 9
45521: PUSH
45522: LD_INT 5
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45536: LD_VAR 0 6
45540: PPUSH
45541: CALL_OW 257
45545: PUSH
45546: LD_INT 17
45548: EQUAL
45549: IFFALSE 45570
// points := [ 100 , 50 , 75 ] ;
45551: LD_ADDR_VAR 0 9
45555: PUSH
45556: LD_INT 100
45558: PUSH
45559: LD_INT 50
45561: PUSH
45562: LD_INT 75
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45570: LD_VAR 0 6
45574: PPUSH
45575: CALL_OW 257
45579: PUSH
45580: LD_INT 15
45582: EQUAL
45583: IFFALSE 45604
// points := [ 10 , 5 , 3 ] ;
45585: LD_ADDR_VAR 0 9
45589: PUSH
45590: LD_INT 10
45592: PUSH
45593: LD_INT 5
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45604: LD_VAR 0 6
45608: PPUSH
45609: CALL_OW 257
45613: PUSH
45614: LD_INT 14
45616: EQUAL
45617: IFFALSE 45638
// points := [ 10 , 0 , 0 ] ;
45619: LD_ADDR_VAR 0 9
45623: PUSH
45624: LD_INT 10
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: LIST
45637: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45638: LD_VAR 0 6
45642: PPUSH
45643: CALL_OW 257
45647: PUSH
45648: LD_INT 11
45650: EQUAL
45651: IFFALSE 45672
// points := [ 30 , 10 , 5 ] ;
45653: LD_ADDR_VAR 0 9
45657: PUSH
45658: LD_INT 30
45660: PUSH
45661: LD_INT 10
45663: PUSH
45664: LD_INT 5
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45672: LD_VAR 0 1
45676: PPUSH
45677: LD_INT 5
45679: PPUSH
45680: CALL_OW 321
45684: PUSH
45685: LD_INT 2
45687: EQUAL
45688: IFFALSE 45705
// bpoints := bpoints * 1.8 ;
45690: LD_ADDR_VAR 0 10
45694: PUSH
45695: LD_VAR 0 10
45699: PUSH
45700: LD_REAL  1.80000000000000E+0000
45703: MUL
45704: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45705: LD_VAR 0 6
45709: PPUSH
45710: CALL_OW 257
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: LD_INT 4
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: IN
45733: PUSH
45734: LD_VAR 0 1
45738: PPUSH
45739: LD_INT 51
45741: PPUSH
45742: CALL_OW 321
45746: PUSH
45747: LD_INT 2
45749: EQUAL
45750: AND
45751: IFFALSE 45768
// bpoints := bpoints * 1.2 ;
45753: LD_ADDR_VAR 0 10
45757: PUSH
45758: LD_VAR 0 10
45762: PUSH
45763: LD_REAL  1.20000000000000E+0000
45766: MUL
45767: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45768: LD_VAR 0 6
45772: PPUSH
45773: CALL_OW 257
45777: PUSH
45778: LD_INT 5
45780: PUSH
45781: LD_INT 7
45783: PUSH
45784: LD_INT 9
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: IN
45792: PUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: LD_INT 52
45800: PPUSH
45801: CALL_OW 321
45805: PUSH
45806: LD_INT 2
45808: EQUAL
45809: AND
45810: IFFALSE 45827
// bpoints := bpoints * 1.5 ;
45812: LD_ADDR_VAR 0 10
45816: PUSH
45817: LD_VAR 0 10
45821: PUSH
45822: LD_REAL  1.50000000000000E+0000
45825: MUL
45826: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_INT 66
45834: PPUSH
45835: CALL_OW 321
45839: PUSH
45840: LD_INT 2
45842: EQUAL
45843: IFFALSE 45860
// bpoints := bpoints * 1.1 ;
45845: LD_ADDR_VAR 0 10
45849: PUSH
45850: LD_VAR 0 10
45854: PUSH
45855: LD_REAL  1.10000000000000E+0000
45858: MUL
45859: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45860: LD_ADDR_VAR 0 10
45864: PUSH
45865: LD_VAR 0 10
45869: PUSH
45870: LD_VAR 0 6
45874: PPUSH
45875: LD_INT 1
45877: PPUSH
45878: CALL_OW 259
45882: PUSH
45883: LD_REAL  1.15000000000000E+0000
45886: MUL
45887: MUL
45888: ST_TO_ADDR
// end ; unit_vehicle :
45889: GO 46717
45891: LD_INT 2
45893: DOUBLE
45894: EQUAL
45895: IFTRUE 45899
45897: GO 46705
45899: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 264
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 42
45915: PUSH
45916: LD_INT 24
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: IN
45924: IFFALSE 45945
// points := [ 25 , 5 , 3 ] ;
45926: LD_ADDR_VAR 0 9
45930: PUSH
45931: LD_INT 25
45933: PUSH
45934: LD_INT 5
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45945: LD_VAR 0 6
45949: PPUSH
45950: CALL_OW 264
45954: PUSH
45955: LD_INT 4
45957: PUSH
45958: LD_INT 43
45960: PUSH
45961: LD_INT 25
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: IN
45969: IFFALSE 45990
// points := [ 40 , 15 , 5 ] ;
45971: LD_ADDR_VAR 0 9
45975: PUSH
45976: LD_INT 40
45978: PUSH
45979: LD_INT 15
45981: PUSH
45982: LD_INT 5
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45990: LD_VAR 0 6
45994: PPUSH
45995: CALL_OW 264
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: LD_INT 23
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: IN
46010: IFFALSE 46031
// points := [ 7 , 25 , 8 ] ;
46012: LD_ADDR_VAR 0 9
46016: PUSH
46017: LD_INT 7
46019: PUSH
46020: LD_INT 25
46022: PUSH
46023: LD_INT 8
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46031: LD_VAR 0 6
46035: PPUSH
46036: CALL_OW 264
46040: PUSH
46041: LD_INT 5
46043: PUSH
46044: LD_INT 27
46046: PUSH
46047: LD_INT 44
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: IN
46055: IFFALSE 46076
// points := [ 14 , 50 , 16 ] ;
46057: LD_ADDR_VAR 0 9
46061: PUSH
46062: LD_INT 14
46064: PUSH
46065: LD_INT 50
46067: PUSH
46068: LD_INT 16
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46076: LD_VAR 0 6
46080: PPUSH
46081: CALL_OW 264
46085: PUSH
46086: LD_INT 6
46088: PUSH
46089: LD_INT 46
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: IN
46096: IFFALSE 46117
// points := [ 32 , 120 , 70 ] ;
46098: LD_ADDR_VAR 0 9
46102: PUSH
46103: LD_INT 32
46105: PUSH
46106: LD_INT 120
46108: PUSH
46109: LD_INT 70
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46117: LD_VAR 0 6
46121: PPUSH
46122: CALL_OW 264
46126: PUSH
46127: LD_INT 7
46129: PUSH
46130: LD_INT 28
46132: PUSH
46133: LD_INT 45
46135: PUSH
46136: LD_INT 92
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: IN
46145: IFFALSE 46166
// points := [ 35 , 20 , 45 ] ;
46147: LD_ADDR_VAR 0 9
46151: PUSH
46152: LD_INT 35
46154: PUSH
46155: LD_INT 20
46157: PUSH
46158: LD_INT 45
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46166: LD_VAR 0 6
46170: PPUSH
46171: CALL_OW 264
46175: PUSH
46176: LD_INT 47
46178: PUSH
46179: EMPTY
46180: LIST
46181: IN
46182: IFFALSE 46203
// points := [ 67 , 45 , 75 ] ;
46184: LD_ADDR_VAR 0 9
46188: PUSH
46189: LD_INT 67
46191: PUSH
46192: LD_INT 45
46194: PUSH
46195: LD_INT 75
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46203: LD_VAR 0 6
46207: PPUSH
46208: CALL_OW 264
46212: PUSH
46213: LD_INT 26
46215: PUSH
46216: EMPTY
46217: LIST
46218: IN
46219: IFFALSE 46240
// points := [ 120 , 30 , 80 ] ;
46221: LD_ADDR_VAR 0 9
46225: PUSH
46226: LD_INT 120
46228: PUSH
46229: LD_INT 30
46231: PUSH
46232: LD_INT 80
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46240: LD_VAR 0 6
46244: PPUSH
46245: CALL_OW 264
46249: PUSH
46250: LD_INT 22
46252: PUSH
46253: EMPTY
46254: LIST
46255: IN
46256: IFFALSE 46277
// points := [ 40 , 1 , 1 ] ;
46258: LD_ADDR_VAR 0 9
46262: PUSH
46263: LD_INT 40
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46277: LD_VAR 0 6
46281: PPUSH
46282: CALL_OW 264
46286: PUSH
46287: LD_INT 29
46289: PUSH
46290: EMPTY
46291: LIST
46292: IN
46293: IFFALSE 46314
// points := [ 70 , 200 , 400 ] ;
46295: LD_ADDR_VAR 0 9
46299: PUSH
46300: LD_INT 70
46302: PUSH
46303: LD_INT 200
46305: PUSH
46306: LD_INT 400
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46314: LD_VAR 0 6
46318: PPUSH
46319: CALL_OW 264
46323: PUSH
46324: LD_INT 14
46326: PUSH
46327: LD_INT 53
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: IN
46334: IFFALSE 46355
// points := [ 40 , 10 , 20 ] ;
46336: LD_ADDR_VAR 0 9
46340: PUSH
46341: LD_INT 40
46343: PUSH
46344: LD_INT 10
46346: PUSH
46347: LD_INT 20
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46355: LD_VAR 0 6
46359: PPUSH
46360: CALL_OW 264
46364: PUSH
46365: LD_INT 9
46367: PUSH
46368: EMPTY
46369: LIST
46370: IN
46371: IFFALSE 46392
// points := [ 5 , 70 , 20 ] ;
46373: LD_ADDR_VAR 0 9
46377: PUSH
46378: LD_INT 5
46380: PUSH
46381: LD_INT 70
46383: PUSH
46384: LD_INT 20
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46392: LD_VAR 0 6
46396: PPUSH
46397: CALL_OW 264
46401: PUSH
46402: LD_INT 10
46404: PUSH
46405: EMPTY
46406: LIST
46407: IN
46408: IFFALSE 46429
// points := [ 35 , 110 , 70 ] ;
46410: LD_ADDR_VAR 0 9
46414: PUSH
46415: LD_INT 35
46417: PUSH
46418: LD_INT 110
46420: PUSH
46421: LD_INT 70
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46429: LD_VAR 0 6
46433: PPUSH
46434: CALL_OW 265
46438: PUSH
46439: LD_INT 25
46441: EQUAL
46442: IFFALSE 46463
// points := [ 80 , 65 , 100 ] ;
46444: LD_ADDR_VAR 0 9
46448: PUSH
46449: LD_INT 80
46451: PUSH
46452: LD_INT 65
46454: PUSH
46455: LD_INT 100
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46463: LD_VAR 0 6
46467: PPUSH
46468: CALL_OW 263
46472: PUSH
46473: LD_INT 1
46475: EQUAL
46476: IFFALSE 46511
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46478: LD_ADDR_VAR 0 10
46482: PUSH
46483: LD_VAR 0 10
46487: PUSH
46488: LD_VAR 0 6
46492: PPUSH
46493: CALL_OW 311
46497: PPUSH
46498: LD_INT 3
46500: PPUSH
46501: CALL_OW 259
46505: PUSH
46506: LD_INT 4
46508: MUL
46509: MUL
46510: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46511: LD_VAR 0 6
46515: PPUSH
46516: CALL_OW 263
46520: PUSH
46521: LD_INT 2
46523: EQUAL
46524: IFFALSE 46575
// begin j := IsControledBy ( i ) ;
46526: LD_ADDR_VAR 0 7
46530: PUSH
46531: LD_VAR 0 6
46535: PPUSH
46536: CALL_OW 312
46540: ST_TO_ADDR
// if j then
46541: LD_VAR 0 7
46545: IFFALSE 46575
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46547: LD_ADDR_VAR 0 10
46551: PUSH
46552: LD_VAR 0 10
46556: PUSH
46557: LD_VAR 0 7
46561: PPUSH
46562: LD_INT 3
46564: PPUSH
46565: CALL_OW 259
46569: PUSH
46570: LD_INT 3
46572: MUL
46573: MUL
46574: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46575: LD_VAR 0 6
46579: PPUSH
46580: CALL_OW 264
46584: PUSH
46585: LD_INT 5
46587: PUSH
46588: LD_INT 6
46590: PUSH
46591: LD_INT 46
46593: PUSH
46594: LD_INT 44
46596: PUSH
46597: LD_INT 47
46599: PUSH
46600: LD_INT 45
46602: PUSH
46603: LD_INT 28
46605: PUSH
46606: LD_INT 7
46608: PUSH
46609: LD_INT 27
46611: PUSH
46612: LD_INT 29
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: IN
46627: PUSH
46628: LD_VAR 0 1
46632: PPUSH
46633: LD_INT 52
46635: PPUSH
46636: CALL_OW 321
46640: PUSH
46641: LD_INT 2
46643: EQUAL
46644: AND
46645: IFFALSE 46662
// bpoints := bpoints * 1.2 ;
46647: LD_ADDR_VAR 0 10
46651: PUSH
46652: LD_VAR 0 10
46656: PUSH
46657: LD_REAL  1.20000000000000E+0000
46660: MUL
46661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46662: LD_VAR 0 6
46666: PPUSH
46667: CALL_OW 264
46671: PUSH
46672: LD_INT 6
46674: PUSH
46675: LD_INT 46
46677: PUSH
46678: LD_INT 47
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: IN
46686: IFFALSE 46703
// bpoints := bpoints * 1.2 ;
46688: LD_ADDR_VAR 0 10
46692: PUSH
46693: LD_VAR 0 10
46697: PUSH
46698: LD_REAL  1.20000000000000E+0000
46701: MUL
46702: ST_TO_ADDR
// end ; unit_building :
46703: GO 46717
46705: LD_INT 3
46707: DOUBLE
46708: EQUAL
46709: IFTRUE 46713
46711: GO 46716
46713: POP
// ; end ;
46714: GO 46717
46716: POP
// for j = 1 to 3 do
46717: LD_ADDR_VAR 0 7
46721: PUSH
46722: DOUBLE
46723: LD_INT 1
46725: DEC
46726: ST_TO_ADDR
46727: LD_INT 3
46729: PUSH
46730: FOR_TO
46731: IFFALSE 46784
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46733: LD_ADDR_VAR 0 5
46737: PUSH
46738: LD_VAR 0 5
46742: PPUSH
46743: LD_VAR 0 7
46747: PPUSH
46748: LD_VAR 0 5
46752: PUSH
46753: LD_VAR 0 7
46757: ARRAY
46758: PUSH
46759: LD_VAR 0 9
46763: PUSH
46764: LD_VAR 0 7
46768: ARRAY
46769: PUSH
46770: LD_VAR 0 10
46774: MUL
46775: PLUS
46776: PPUSH
46777: CALL_OW 1
46781: ST_TO_ADDR
46782: GO 46730
46784: POP
46785: POP
// end ;
46786: GO 45265
46788: POP
46789: POP
// result := Replace ( result , 4 , tmp ) ;
46790: LD_ADDR_VAR 0 5
46794: PUSH
46795: LD_VAR 0 5
46799: PPUSH
46800: LD_INT 4
46802: PPUSH
46803: LD_VAR 0 8
46807: PPUSH
46808: CALL_OW 1
46812: ST_TO_ADDR
// end ;
46813: LD_VAR 0 5
46817: RET
// export function DangerAtRange ( unit , range ) ; begin
46818: LD_INT 0
46820: PPUSH
// if not unit then
46821: LD_VAR 0 1
46825: NOT
46826: IFFALSE 46830
// exit ;
46828: GO 46875
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46830: LD_ADDR_VAR 0 3
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 255
46844: PPUSH
46845: LD_VAR 0 1
46849: PPUSH
46850: CALL_OW 250
46854: PPUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 251
46864: PPUSH
46865: LD_VAR 0 2
46869: PPUSH
46870: CALL 45117 0 4
46874: ST_TO_ADDR
// end ;
46875: LD_VAR 0 3
46879: RET
// export function DangerInArea ( side , area ) ; begin
46880: LD_INT 0
46882: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46883: LD_ADDR_VAR 0 3
46887: PUSH
46888: LD_VAR 0 2
46892: PPUSH
46893: LD_INT 81
46895: PUSH
46896: LD_VAR 0 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PPUSH
46905: CALL_OW 70
46909: ST_TO_ADDR
// end ;
46910: LD_VAR 0 3
46914: RET
// export function IsExtension ( b ) ; begin
46915: LD_INT 0
46917: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46918: LD_ADDR_VAR 0 2
46922: PUSH
46923: LD_VAR 0 1
46927: PUSH
46928: LD_INT 23
46930: PUSH
46931: LD_INT 20
46933: PUSH
46934: LD_INT 22
46936: PUSH
46937: LD_INT 17
46939: PUSH
46940: LD_INT 24
46942: PUSH
46943: LD_INT 21
46945: PUSH
46946: LD_INT 19
46948: PUSH
46949: LD_INT 16
46951: PUSH
46952: LD_INT 25
46954: PUSH
46955: LD_INT 18
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: IN
46970: ST_TO_ADDR
// end ;
46971: LD_VAR 0 2
46975: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46976: LD_INT 0
46978: PPUSH
46979: PPUSH
46980: PPUSH
// result := [ ] ;
46981: LD_ADDR_VAR 0 4
46985: PUSH
46986: EMPTY
46987: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46988: LD_ADDR_VAR 0 5
46992: PUSH
46993: LD_VAR 0 2
46997: PPUSH
46998: LD_INT 21
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PPUSH
47008: CALL_OW 70
47012: ST_TO_ADDR
// if not tmp then
47013: LD_VAR 0 5
47017: NOT
47018: IFFALSE 47022
// exit ;
47020: GO 47086
// if checkLink then
47022: LD_VAR 0 3
47026: IFFALSE 47076
// begin for i in tmp do
47028: LD_ADDR_VAR 0 6
47032: PUSH
47033: LD_VAR 0 5
47037: PUSH
47038: FOR_IN
47039: IFFALSE 47074
// if GetBase ( i ) <> base then
47041: LD_VAR 0 6
47045: PPUSH
47046: CALL_OW 274
47050: PUSH
47051: LD_VAR 0 1
47055: NONEQUAL
47056: IFFALSE 47072
// ComLinkToBase ( base , i ) ;
47058: LD_VAR 0 1
47062: PPUSH
47063: LD_VAR 0 6
47067: PPUSH
47068: CALL_OW 169
47072: GO 47038
47074: POP
47075: POP
// end ; result := tmp ;
47076: LD_ADDR_VAR 0 4
47080: PUSH
47081: LD_VAR 0 5
47085: ST_TO_ADDR
// end ;
47086: LD_VAR 0 4
47090: RET
// export function ComComplete ( units , b ) ; var i ; begin
47091: LD_INT 0
47093: PPUSH
47094: PPUSH
// if not units then
47095: LD_VAR 0 1
47099: NOT
47100: IFFALSE 47104
// exit ;
47102: GO 47194
// for i in units do
47104: LD_ADDR_VAR 0 4
47108: PUSH
47109: LD_VAR 0 1
47113: PUSH
47114: FOR_IN
47115: IFFALSE 47192
// if BuildingStatus ( b ) = bs_build then
47117: LD_VAR 0 2
47121: PPUSH
47122: CALL_OW 461
47126: PUSH
47127: LD_INT 1
47129: EQUAL
47130: IFFALSE 47190
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47132: LD_VAR 0 4
47136: PPUSH
47137: LD_STRING h
47139: PUSH
47140: LD_VAR 0 2
47144: PPUSH
47145: CALL_OW 250
47149: PUSH
47150: LD_VAR 0 2
47154: PPUSH
47155: CALL_OW 251
47159: PUSH
47160: LD_VAR 0 2
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: PPUSH
47186: CALL_OW 446
47190: GO 47114
47192: POP
47193: POP
// end ;
47194: LD_VAR 0 3
47198: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47199: LD_INT 0
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
47205: PPUSH
47206: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47207: LD_VAR 0 1
47211: NOT
47212: PUSH
47213: LD_VAR 0 1
47217: PPUSH
47218: CALL_OW 263
47222: PUSH
47223: LD_INT 2
47225: NONEQUAL
47226: OR
47227: IFFALSE 47231
// exit ;
47229: GO 47547
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47231: LD_ADDR_VAR 0 6
47235: PUSH
47236: LD_INT 22
47238: PUSH
47239: LD_VAR 0 1
47243: PPUSH
47244: CALL_OW 255
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 30
47258: PUSH
47259: LD_INT 36
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 34
47268: PUSH
47269: LD_INT 31
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PPUSH
47285: CALL_OW 69
47289: ST_TO_ADDR
// if not tmp then
47290: LD_VAR 0 6
47294: NOT
47295: IFFALSE 47299
// exit ;
47297: GO 47547
// result := [ ] ;
47299: LD_ADDR_VAR 0 2
47303: PUSH
47304: EMPTY
47305: ST_TO_ADDR
// for i in tmp do
47306: LD_ADDR_VAR 0 3
47310: PUSH
47311: LD_VAR 0 6
47315: PUSH
47316: FOR_IN
47317: IFFALSE 47388
// begin t := UnitsInside ( i ) ;
47319: LD_ADDR_VAR 0 4
47323: PUSH
47324: LD_VAR 0 3
47328: PPUSH
47329: CALL_OW 313
47333: ST_TO_ADDR
// if t then
47334: LD_VAR 0 4
47338: IFFALSE 47386
// for j in t do
47340: LD_ADDR_VAR 0 7
47344: PUSH
47345: LD_VAR 0 4
47349: PUSH
47350: FOR_IN
47351: IFFALSE 47384
// result := Replace ( result , result + 1 , j ) ;
47353: LD_ADDR_VAR 0 2
47357: PUSH
47358: LD_VAR 0 2
47362: PPUSH
47363: LD_VAR 0 2
47367: PUSH
47368: LD_INT 1
47370: PLUS
47371: PPUSH
47372: LD_VAR 0 7
47376: PPUSH
47377: CALL_OW 1
47381: ST_TO_ADDR
47382: GO 47350
47384: POP
47385: POP
// end ;
47386: GO 47316
47388: POP
47389: POP
// if not result then
47390: LD_VAR 0 2
47394: NOT
47395: IFFALSE 47399
// exit ;
47397: GO 47547
// mech := result [ 1 ] ;
47399: LD_ADDR_VAR 0 5
47403: PUSH
47404: LD_VAR 0 2
47408: PUSH
47409: LD_INT 1
47411: ARRAY
47412: ST_TO_ADDR
// if result > 1 then
47413: LD_VAR 0 2
47417: PUSH
47418: LD_INT 1
47420: GREATER
47421: IFFALSE 47533
// begin for i = 2 to result do
47423: LD_ADDR_VAR 0 3
47427: PUSH
47428: DOUBLE
47429: LD_INT 2
47431: DEC
47432: ST_TO_ADDR
47433: LD_VAR 0 2
47437: PUSH
47438: FOR_TO
47439: IFFALSE 47531
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47441: LD_ADDR_VAR 0 4
47445: PUSH
47446: LD_VAR 0 2
47450: PUSH
47451: LD_VAR 0 3
47455: ARRAY
47456: PPUSH
47457: LD_INT 3
47459: PPUSH
47460: CALL_OW 259
47464: PUSH
47465: LD_VAR 0 2
47469: PUSH
47470: LD_VAR 0 3
47474: ARRAY
47475: PPUSH
47476: CALL_OW 432
47480: MINUS
47481: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47482: LD_VAR 0 4
47486: PUSH
47487: LD_VAR 0 5
47491: PPUSH
47492: LD_INT 3
47494: PPUSH
47495: CALL_OW 259
47499: PUSH
47500: LD_VAR 0 5
47504: PPUSH
47505: CALL_OW 432
47509: MINUS
47510: GREATEREQUAL
47511: IFFALSE 47529
// mech := result [ i ] ;
47513: LD_ADDR_VAR 0 5
47517: PUSH
47518: LD_VAR 0 2
47522: PUSH
47523: LD_VAR 0 3
47527: ARRAY
47528: ST_TO_ADDR
// end ;
47529: GO 47438
47531: POP
47532: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47533: LD_VAR 0 1
47537: PPUSH
47538: LD_VAR 0 5
47542: PPUSH
47543: CALL_OW 135
// end ;
47547: LD_VAR 0 2
47551: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47552: LD_INT 0
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
// result := [ ] ;
47567: LD_ADDR_VAR 0 7
47571: PUSH
47572: EMPTY
47573: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47574: LD_VAR 0 1
47578: PPUSH
47579: CALL_OW 266
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: IN
47594: NOT
47595: IFFALSE 47599
// exit ;
47597: GO 49233
// if name then
47599: LD_VAR 0 3
47603: IFFALSE 47619
// SetBName ( base_dep , name ) ;
47605: LD_VAR 0 1
47609: PPUSH
47610: LD_VAR 0 3
47614: PPUSH
47615: CALL_OW 500
// base := GetBase ( base_dep ) ;
47619: LD_ADDR_VAR 0 15
47623: PUSH
47624: LD_VAR 0 1
47628: PPUSH
47629: CALL_OW 274
47633: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47634: LD_ADDR_VAR 0 16
47638: PUSH
47639: LD_VAR 0 1
47643: PPUSH
47644: CALL_OW 255
47648: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47649: LD_ADDR_VAR 0 17
47653: PUSH
47654: LD_VAR 0 1
47658: PPUSH
47659: CALL_OW 248
47663: ST_TO_ADDR
// if sources then
47664: LD_VAR 0 5
47668: IFFALSE 47715
// for i = 1 to 3 do
47670: LD_ADDR_VAR 0 8
47674: PUSH
47675: DOUBLE
47676: LD_INT 1
47678: DEC
47679: ST_TO_ADDR
47680: LD_INT 3
47682: PUSH
47683: FOR_TO
47684: IFFALSE 47713
// AddResourceType ( base , i , sources [ i ] ) ;
47686: LD_VAR 0 15
47690: PPUSH
47691: LD_VAR 0 8
47695: PPUSH
47696: LD_VAR 0 5
47700: PUSH
47701: LD_VAR 0 8
47705: ARRAY
47706: PPUSH
47707: CALL_OW 276
47711: GO 47683
47713: POP
47714: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47715: LD_ADDR_VAR 0 18
47719: PUSH
47720: LD_VAR 0 15
47724: PPUSH
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_INT 1
47732: PPUSH
47733: CALL 46976 0 3
47737: ST_TO_ADDR
// InitHc ;
47738: CALL_OW 19
// InitUc ;
47742: CALL_OW 18
// uc_side := side ;
47746: LD_ADDR_OWVAR 20
47750: PUSH
47751: LD_VAR 0 16
47755: ST_TO_ADDR
// uc_nation := nation ;
47756: LD_ADDR_OWVAR 21
47760: PUSH
47761: LD_VAR 0 17
47765: ST_TO_ADDR
// if buildings then
47766: LD_VAR 0 18
47770: IFFALSE 49092
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47772: LD_ADDR_VAR 0 19
47776: PUSH
47777: LD_VAR 0 18
47781: PPUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 30
47787: PUSH
47788: LD_INT 29
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 30
47797: PUSH
47798: LD_INT 30
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: PPUSH
47810: CALL_OW 72
47814: ST_TO_ADDR
// if tmp then
47815: LD_VAR 0 19
47819: IFFALSE 47867
// for i in tmp do
47821: LD_ADDR_VAR 0 8
47825: PUSH
47826: LD_VAR 0 19
47830: PUSH
47831: FOR_IN
47832: IFFALSE 47865
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47834: LD_VAR 0 8
47838: PPUSH
47839: CALL_OW 250
47843: PPUSH
47844: LD_VAR 0 8
47848: PPUSH
47849: CALL_OW 251
47853: PPUSH
47854: LD_VAR 0 16
47858: PPUSH
47859: CALL_OW 441
47863: GO 47831
47865: POP
47866: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47867: LD_VAR 0 18
47871: PPUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 30
47877: PUSH
47878: LD_INT 32
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 30
47887: PUSH
47888: LD_INT 33
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: PPUSH
47900: CALL_OW 72
47904: IFFALSE 47992
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47906: LD_ADDR_VAR 0 8
47910: PUSH
47911: LD_VAR 0 18
47915: PPUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 30
47921: PUSH
47922: LD_INT 32
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 30
47931: PUSH
47932: LD_INT 33
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: PPUSH
47944: CALL_OW 72
47948: PUSH
47949: FOR_IN
47950: IFFALSE 47990
// begin if not GetBWeapon ( i ) then
47952: LD_VAR 0 8
47956: PPUSH
47957: CALL_OW 269
47961: NOT
47962: IFFALSE 47988
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47964: LD_VAR 0 8
47968: PPUSH
47969: LD_VAR 0 8
47973: PPUSH
47974: LD_VAR 0 2
47978: PPUSH
47979: CALL 49238 0 2
47983: PPUSH
47984: CALL_OW 431
// end ;
47988: GO 47949
47990: POP
47991: POP
// end ; for i = 1 to personel do
47992: LD_ADDR_VAR 0 8
47996: PUSH
47997: DOUBLE
47998: LD_INT 1
48000: DEC
48001: ST_TO_ADDR
48002: LD_VAR 0 6
48006: PUSH
48007: FOR_TO
48008: IFFALSE 49072
// begin if i > 4 then
48010: LD_VAR 0 8
48014: PUSH
48015: LD_INT 4
48017: GREATER
48018: IFFALSE 48022
// break ;
48020: GO 49072
// case i of 1 :
48022: LD_VAR 0 8
48026: PUSH
48027: LD_INT 1
48029: DOUBLE
48030: EQUAL
48031: IFTRUE 48035
48033: GO 48115
48035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48036: LD_ADDR_VAR 0 12
48040: PUSH
48041: LD_VAR 0 18
48045: PPUSH
48046: LD_INT 22
48048: PUSH
48049: LD_VAR 0 16
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 58
48060: PUSH
48061: EMPTY
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 30
48069: PUSH
48070: LD_INT 32
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 30
48079: PUSH
48080: LD_INT 4
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 30
48089: PUSH
48090: LD_INT 5
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: PPUSH
48108: CALL_OW 72
48112: ST_TO_ADDR
48113: GO 48337
48115: LD_INT 2
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48123
48121: GO 48185
48123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48124: LD_ADDR_VAR 0 12
48128: PUSH
48129: LD_VAR 0 18
48133: PPUSH
48134: LD_INT 22
48136: PUSH
48137: LD_VAR 0 16
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 30
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PPUSH
48178: CALL_OW 72
48182: ST_TO_ADDR
48183: GO 48337
48185: LD_INT 3
48187: DOUBLE
48188: EQUAL
48189: IFTRUE 48193
48191: GO 48255
48193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48194: LD_ADDR_VAR 0 12
48198: PUSH
48199: LD_VAR 0 18
48203: PPUSH
48204: LD_INT 22
48206: PUSH
48207: LD_VAR 0 16
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 30
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 30
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PPUSH
48248: CALL_OW 72
48252: ST_TO_ADDR
48253: GO 48337
48255: LD_INT 4
48257: DOUBLE
48258: EQUAL
48259: IFTRUE 48263
48261: GO 48336
48263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48264: LD_ADDR_VAR 0 12
48268: PUSH
48269: LD_VAR 0 18
48273: PPUSH
48274: LD_INT 22
48276: PUSH
48277: LD_VAR 0 16
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 30
48291: PUSH
48292: LD_INT 6
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 30
48301: PUSH
48302: LD_INT 7
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 30
48311: PUSH
48312: LD_INT 8
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PPUSH
48329: CALL_OW 72
48333: ST_TO_ADDR
48334: GO 48337
48336: POP
// if i = 1 then
48337: LD_VAR 0 8
48341: PUSH
48342: LD_INT 1
48344: EQUAL
48345: IFFALSE 48456
// begin tmp := [ ] ;
48347: LD_ADDR_VAR 0 19
48351: PUSH
48352: EMPTY
48353: ST_TO_ADDR
// for j in f do
48354: LD_ADDR_VAR 0 9
48358: PUSH
48359: LD_VAR 0 12
48363: PUSH
48364: FOR_IN
48365: IFFALSE 48438
// if GetBType ( j ) = b_bunker then
48367: LD_VAR 0 9
48371: PPUSH
48372: CALL_OW 266
48376: PUSH
48377: LD_INT 32
48379: EQUAL
48380: IFFALSE 48407
// tmp := Insert ( tmp , 1 , j ) else
48382: LD_ADDR_VAR 0 19
48386: PUSH
48387: LD_VAR 0 19
48391: PPUSH
48392: LD_INT 1
48394: PPUSH
48395: LD_VAR 0 9
48399: PPUSH
48400: CALL_OW 2
48404: ST_TO_ADDR
48405: GO 48436
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48407: LD_ADDR_VAR 0 19
48411: PUSH
48412: LD_VAR 0 19
48416: PPUSH
48417: LD_VAR 0 19
48421: PUSH
48422: LD_INT 1
48424: PLUS
48425: PPUSH
48426: LD_VAR 0 9
48430: PPUSH
48431: CALL_OW 2
48435: ST_TO_ADDR
48436: GO 48364
48438: POP
48439: POP
// if tmp then
48440: LD_VAR 0 19
48444: IFFALSE 48456
// f := tmp ;
48446: LD_ADDR_VAR 0 12
48450: PUSH
48451: LD_VAR 0 19
48455: ST_TO_ADDR
// end ; x := personel [ i ] ;
48456: LD_ADDR_VAR 0 13
48460: PUSH
48461: LD_VAR 0 6
48465: PUSH
48466: LD_VAR 0 8
48470: ARRAY
48471: ST_TO_ADDR
// if x = - 1 then
48472: LD_VAR 0 13
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: EQUAL
48481: IFFALSE 48690
// begin for j in f do
48483: LD_ADDR_VAR 0 9
48487: PUSH
48488: LD_VAR 0 12
48492: PUSH
48493: FOR_IN
48494: IFFALSE 48686
// repeat InitHc ;
48496: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48500: LD_VAR 0 9
48504: PPUSH
48505: CALL_OW 266
48509: PUSH
48510: LD_INT 5
48512: EQUAL
48513: IFFALSE 48583
// begin if UnitsInside ( j ) < 3 then
48515: LD_VAR 0 9
48519: PPUSH
48520: CALL_OW 313
48524: PUSH
48525: LD_INT 3
48527: LESS
48528: IFFALSE 48564
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48530: LD_INT 0
48532: PPUSH
48533: LD_INT 5
48535: PUSH
48536: LD_INT 8
48538: PUSH
48539: LD_INT 9
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: PUSH
48547: LD_VAR 0 17
48551: ARRAY
48552: PPUSH
48553: LD_VAR 0 4
48557: PPUSH
48558: CALL_OW 380
48562: GO 48581
// PrepareHuman ( false , i , skill ) ;
48564: LD_INT 0
48566: PPUSH
48567: LD_VAR 0 8
48571: PPUSH
48572: LD_VAR 0 4
48576: PPUSH
48577: CALL_OW 380
// end else
48581: GO 48600
// PrepareHuman ( false , i , skill ) ;
48583: LD_INT 0
48585: PPUSH
48586: LD_VAR 0 8
48590: PPUSH
48591: LD_VAR 0 4
48595: PPUSH
48596: CALL_OW 380
// un := CreateHuman ;
48600: LD_ADDR_VAR 0 14
48604: PUSH
48605: CALL_OW 44
48609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48610: LD_ADDR_VAR 0 7
48614: PUSH
48615: LD_VAR 0 7
48619: PPUSH
48620: LD_INT 1
48622: PPUSH
48623: LD_VAR 0 14
48627: PPUSH
48628: CALL_OW 2
48632: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48633: LD_VAR 0 14
48637: PPUSH
48638: LD_VAR 0 9
48642: PPUSH
48643: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48647: LD_VAR 0 9
48651: PPUSH
48652: CALL_OW 313
48656: PUSH
48657: LD_INT 6
48659: EQUAL
48660: PUSH
48661: LD_VAR 0 9
48665: PPUSH
48666: CALL_OW 266
48670: PUSH
48671: LD_INT 32
48673: PUSH
48674: LD_INT 31
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: IN
48681: OR
48682: IFFALSE 48496
48684: GO 48493
48686: POP
48687: POP
// end else
48688: GO 49070
// for j = 1 to x do
48690: LD_ADDR_VAR 0 9
48694: PUSH
48695: DOUBLE
48696: LD_INT 1
48698: DEC
48699: ST_TO_ADDR
48700: LD_VAR 0 13
48704: PUSH
48705: FOR_TO
48706: IFFALSE 49068
// begin InitHc ;
48708: CALL_OW 19
// if not f then
48712: LD_VAR 0 12
48716: NOT
48717: IFFALSE 48806
// begin PrepareHuman ( false , i , skill ) ;
48719: LD_INT 0
48721: PPUSH
48722: LD_VAR 0 8
48726: PPUSH
48727: LD_VAR 0 4
48731: PPUSH
48732: CALL_OW 380
// un := CreateHuman ;
48736: LD_ADDR_VAR 0 14
48740: PUSH
48741: CALL_OW 44
48745: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48746: LD_ADDR_VAR 0 7
48750: PUSH
48751: LD_VAR 0 7
48755: PPUSH
48756: LD_INT 1
48758: PPUSH
48759: LD_VAR 0 14
48763: PPUSH
48764: CALL_OW 2
48768: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48769: LD_VAR 0 14
48773: PPUSH
48774: LD_VAR 0 1
48778: PPUSH
48779: CALL_OW 250
48783: PPUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 251
48793: PPUSH
48794: LD_INT 10
48796: PPUSH
48797: LD_INT 0
48799: PPUSH
48800: CALL_OW 50
// continue ;
48804: GO 48705
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48806: LD_VAR 0 12
48810: PUSH
48811: LD_INT 1
48813: ARRAY
48814: PPUSH
48815: CALL_OW 313
48819: PUSH
48820: LD_VAR 0 12
48824: PUSH
48825: LD_INT 1
48827: ARRAY
48828: PPUSH
48829: CALL_OW 266
48833: PUSH
48834: LD_INT 32
48836: PUSH
48837: LD_INT 31
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: IN
48844: AND
48845: PUSH
48846: LD_VAR 0 12
48850: PUSH
48851: LD_INT 1
48853: ARRAY
48854: PPUSH
48855: CALL_OW 313
48859: PUSH
48860: LD_INT 6
48862: EQUAL
48863: OR
48864: IFFALSE 48884
// f := Delete ( f , 1 ) ;
48866: LD_ADDR_VAR 0 12
48870: PUSH
48871: LD_VAR 0 12
48875: PPUSH
48876: LD_INT 1
48878: PPUSH
48879: CALL_OW 3
48883: ST_TO_ADDR
// if not f then
48884: LD_VAR 0 12
48888: NOT
48889: IFFALSE 48907
// begin x := x + 2 ;
48891: LD_ADDR_VAR 0 13
48895: PUSH
48896: LD_VAR 0 13
48900: PUSH
48901: LD_INT 2
48903: PLUS
48904: ST_TO_ADDR
// continue ;
48905: GO 48705
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48907: LD_VAR 0 12
48911: PUSH
48912: LD_INT 1
48914: ARRAY
48915: PPUSH
48916: CALL_OW 266
48920: PUSH
48921: LD_INT 5
48923: EQUAL
48924: IFFALSE 48998
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48926: LD_VAR 0 12
48930: PUSH
48931: LD_INT 1
48933: ARRAY
48934: PPUSH
48935: CALL_OW 313
48939: PUSH
48940: LD_INT 3
48942: LESS
48943: IFFALSE 48979
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48945: LD_INT 0
48947: PPUSH
48948: LD_INT 5
48950: PUSH
48951: LD_INT 8
48953: PUSH
48954: LD_INT 9
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: PUSH
48962: LD_VAR 0 17
48966: ARRAY
48967: PPUSH
48968: LD_VAR 0 4
48972: PPUSH
48973: CALL_OW 380
48977: GO 48996
// PrepareHuman ( false , i , skill ) ;
48979: LD_INT 0
48981: PPUSH
48982: LD_VAR 0 8
48986: PPUSH
48987: LD_VAR 0 4
48991: PPUSH
48992: CALL_OW 380
// end else
48996: GO 49015
// PrepareHuman ( false , i , skill ) ;
48998: LD_INT 0
49000: PPUSH
49001: LD_VAR 0 8
49005: PPUSH
49006: LD_VAR 0 4
49010: PPUSH
49011: CALL_OW 380
// un := CreateHuman ;
49015: LD_ADDR_VAR 0 14
49019: PUSH
49020: CALL_OW 44
49024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49025: LD_ADDR_VAR 0 7
49029: PUSH
49030: LD_VAR 0 7
49034: PPUSH
49035: LD_INT 1
49037: PPUSH
49038: LD_VAR 0 14
49042: PPUSH
49043: CALL_OW 2
49047: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49048: LD_VAR 0 14
49052: PPUSH
49053: LD_VAR 0 12
49057: PUSH
49058: LD_INT 1
49060: ARRAY
49061: PPUSH
49062: CALL_OW 52
// end ;
49066: GO 48705
49068: POP
49069: POP
// end ;
49070: GO 48007
49072: POP
49073: POP
// result := result ^ buildings ;
49074: LD_ADDR_VAR 0 7
49078: PUSH
49079: LD_VAR 0 7
49083: PUSH
49084: LD_VAR 0 18
49088: ADD
49089: ST_TO_ADDR
// end else
49090: GO 49233
// begin for i = 1 to personel do
49092: LD_ADDR_VAR 0 8
49096: PUSH
49097: DOUBLE
49098: LD_INT 1
49100: DEC
49101: ST_TO_ADDR
49102: LD_VAR 0 6
49106: PUSH
49107: FOR_TO
49108: IFFALSE 49231
// begin if i > 4 then
49110: LD_VAR 0 8
49114: PUSH
49115: LD_INT 4
49117: GREATER
49118: IFFALSE 49122
// break ;
49120: GO 49231
// x := personel [ i ] ;
49122: LD_ADDR_VAR 0 13
49126: PUSH
49127: LD_VAR 0 6
49131: PUSH
49132: LD_VAR 0 8
49136: ARRAY
49137: ST_TO_ADDR
// if x = - 1 then
49138: LD_VAR 0 13
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: EQUAL
49147: IFFALSE 49151
// continue ;
49149: GO 49107
// PrepareHuman ( false , i , skill ) ;
49151: LD_INT 0
49153: PPUSH
49154: LD_VAR 0 8
49158: PPUSH
49159: LD_VAR 0 4
49163: PPUSH
49164: CALL_OW 380
// un := CreateHuman ;
49168: LD_ADDR_VAR 0 14
49172: PUSH
49173: CALL_OW 44
49177: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49178: LD_VAR 0 14
49182: PPUSH
49183: LD_VAR 0 1
49187: PPUSH
49188: CALL_OW 250
49192: PPUSH
49193: LD_VAR 0 1
49197: PPUSH
49198: CALL_OW 251
49202: PPUSH
49203: LD_INT 10
49205: PPUSH
49206: LD_INT 0
49208: PPUSH
49209: CALL_OW 50
// result := result ^ un ;
49213: LD_ADDR_VAR 0 7
49217: PUSH
49218: LD_VAR 0 7
49222: PUSH
49223: LD_VAR 0 14
49227: ADD
49228: ST_TO_ADDR
// end ;
49229: GO 49107
49231: POP
49232: POP
// end ; end ;
49233: LD_VAR 0 7
49237: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49238: LD_INT 0
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
// result := false ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: LD_INT 0
49263: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49264: LD_VAR 0 1
49268: NOT
49269: PUSH
49270: LD_VAR 0 1
49274: PPUSH
49275: CALL_OW 266
49279: PUSH
49280: LD_INT 32
49282: PUSH
49283: LD_INT 33
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: IN
49290: NOT
49291: OR
49292: IFFALSE 49296
// exit ;
49294: GO 50405
// nat := GetNation ( tower ) ;
49296: LD_ADDR_VAR 0 12
49300: PUSH
49301: LD_VAR 0 1
49305: PPUSH
49306: CALL_OW 248
49310: ST_TO_ADDR
// side := GetSide ( tower ) ;
49311: LD_ADDR_VAR 0 16
49315: PUSH
49316: LD_VAR 0 1
49320: PPUSH
49321: CALL_OW 255
49325: ST_TO_ADDR
// x := GetX ( tower ) ;
49326: LD_ADDR_VAR 0 10
49330: PUSH
49331: LD_VAR 0 1
49335: PPUSH
49336: CALL_OW 250
49340: ST_TO_ADDR
// y := GetY ( tower ) ;
49341: LD_ADDR_VAR 0 11
49345: PUSH
49346: LD_VAR 0 1
49350: PPUSH
49351: CALL_OW 251
49355: ST_TO_ADDR
// if not x or not y then
49356: LD_VAR 0 10
49360: NOT
49361: PUSH
49362: LD_VAR 0 11
49366: NOT
49367: OR
49368: IFFALSE 49372
// exit ;
49370: GO 50405
// weapon := 0 ;
49372: LD_ADDR_VAR 0 18
49376: PUSH
49377: LD_INT 0
49379: ST_TO_ADDR
// fac_list := [ ] ;
49380: LD_ADDR_VAR 0 17
49384: PUSH
49385: EMPTY
49386: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49387: LD_ADDR_VAR 0 6
49391: PUSH
49392: LD_VAR 0 1
49396: PPUSH
49397: CALL_OW 274
49401: PPUSH
49402: LD_VAR 0 2
49406: PPUSH
49407: LD_INT 0
49409: PPUSH
49410: CALL 46976 0 3
49414: PPUSH
49415: LD_INT 30
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PPUSH
49425: CALL_OW 72
49429: ST_TO_ADDR
// if not factories then
49430: LD_VAR 0 6
49434: NOT
49435: IFFALSE 49439
// exit ;
49437: GO 50405
// for i in factories do
49439: LD_ADDR_VAR 0 8
49443: PUSH
49444: LD_VAR 0 6
49448: PUSH
49449: FOR_IN
49450: IFFALSE 49475
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49452: LD_ADDR_VAR 0 17
49456: PUSH
49457: LD_VAR 0 17
49461: PUSH
49462: LD_VAR 0 8
49466: PPUSH
49467: CALL_OW 478
49471: UNION
49472: ST_TO_ADDR
49473: GO 49449
49475: POP
49476: POP
// if not fac_list then
49477: LD_VAR 0 17
49481: NOT
49482: IFFALSE 49486
// exit ;
49484: GO 50405
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49486: LD_ADDR_VAR 0 5
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 5
49496: PUSH
49497: LD_INT 9
49499: PUSH
49500: LD_INT 10
49502: PUSH
49503: LD_INT 6
49505: PUSH
49506: LD_INT 7
49508: PUSH
49509: LD_INT 11
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 27
49523: PUSH
49524: LD_INT 28
49526: PUSH
49527: LD_INT 26
49529: PUSH
49530: LD_INT 30
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 43
49541: PUSH
49542: LD_INT 44
49544: PUSH
49545: LD_INT 46
49547: PUSH
49548: LD_INT 45
49550: PUSH
49551: LD_INT 47
49553: PUSH
49554: LD_INT 49
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: LD_VAR 0 12
49574: ARRAY
49575: ST_TO_ADDR
// list := list isect fac_list ;
49576: LD_ADDR_VAR 0 5
49580: PUSH
49581: LD_VAR 0 5
49585: PUSH
49586: LD_VAR 0 17
49590: ISECT
49591: ST_TO_ADDR
// if not list then
49592: LD_VAR 0 5
49596: NOT
49597: IFFALSE 49601
// exit ;
49599: GO 50405
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49601: LD_VAR 0 12
49605: PUSH
49606: LD_INT 3
49608: EQUAL
49609: PUSH
49610: LD_INT 49
49612: PUSH
49613: LD_VAR 0 5
49617: IN
49618: AND
49619: PUSH
49620: LD_INT 31
49622: PPUSH
49623: LD_VAR 0 16
49627: PPUSH
49628: CALL_OW 321
49632: PUSH
49633: LD_INT 2
49635: EQUAL
49636: AND
49637: IFFALSE 49697
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49639: LD_INT 22
49641: PUSH
49642: LD_VAR 0 16
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 35
49653: PUSH
49654: LD_INT 49
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 91
49663: PUSH
49664: LD_VAR 0 1
49668: PUSH
49669: LD_INT 10
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: LIST
49681: PPUSH
49682: CALL_OW 69
49686: NOT
49687: IFFALSE 49697
// weapon := ru_time_lapser ;
49689: LD_ADDR_VAR 0 18
49693: PUSH
49694: LD_INT 49
49696: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49697: LD_VAR 0 12
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: IN
49712: PUSH
49713: LD_INT 11
49715: PUSH
49716: LD_VAR 0 5
49720: IN
49721: PUSH
49722: LD_INT 30
49724: PUSH
49725: LD_VAR 0 5
49729: IN
49730: OR
49731: AND
49732: PUSH
49733: LD_INT 6
49735: PPUSH
49736: LD_VAR 0 16
49740: PPUSH
49741: CALL_OW 321
49745: PUSH
49746: LD_INT 2
49748: EQUAL
49749: AND
49750: IFFALSE 49915
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49752: LD_INT 22
49754: PUSH
49755: LD_VAR 0 16
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 35
49769: PUSH
49770: LD_INT 11
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 35
49779: PUSH
49780: LD_INT 30
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 91
49794: PUSH
49795: LD_VAR 0 1
49799: PUSH
49800: LD_INT 18
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: PPUSH
49813: CALL_OW 69
49817: NOT
49818: PUSH
49819: LD_INT 22
49821: PUSH
49822: LD_VAR 0 16
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 30
49836: PUSH
49837: LD_INT 32
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 30
49846: PUSH
49847: LD_INT 33
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 91
49861: PUSH
49862: LD_VAR 0 1
49866: PUSH
49867: LD_INT 12
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: PPUSH
49883: CALL_OW 69
49887: PUSH
49888: LD_INT 2
49890: GREATER
49891: AND
49892: IFFALSE 49915
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49894: LD_ADDR_VAR 0 18
49898: PUSH
49899: LD_INT 11
49901: PUSH
49902: LD_INT 30
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_VAR 0 12
49913: ARRAY
49914: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49915: LD_VAR 0 18
49919: NOT
49920: PUSH
49921: LD_INT 40
49923: PPUSH
49924: LD_VAR 0 16
49928: PPUSH
49929: CALL_OW 321
49933: PUSH
49934: LD_INT 2
49936: EQUAL
49937: AND
49938: PUSH
49939: LD_INT 7
49941: PUSH
49942: LD_VAR 0 5
49946: IN
49947: PUSH
49948: LD_INT 28
49950: PUSH
49951: LD_VAR 0 5
49955: IN
49956: OR
49957: PUSH
49958: LD_INT 45
49960: PUSH
49961: LD_VAR 0 5
49965: IN
49966: OR
49967: AND
49968: IFFALSE 50222
// begin hex := GetHexInfo ( x , y ) ;
49970: LD_ADDR_VAR 0 4
49974: PUSH
49975: LD_VAR 0 10
49979: PPUSH
49980: LD_VAR 0 11
49984: PPUSH
49985: CALL_OW 546
49989: ST_TO_ADDR
// if hex [ 1 ] then
49990: LD_VAR 0 4
49994: PUSH
49995: LD_INT 1
49997: ARRAY
49998: IFFALSE 50002
// exit ;
50000: GO 50405
// height := hex [ 2 ] ;
50002: LD_ADDR_VAR 0 15
50006: PUSH
50007: LD_VAR 0 4
50011: PUSH
50012: LD_INT 2
50014: ARRAY
50015: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50016: LD_ADDR_VAR 0 14
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: LD_INT 5
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// for i in tmp do
50039: LD_ADDR_VAR 0 8
50043: PUSH
50044: LD_VAR 0 14
50048: PUSH
50049: FOR_IN
50050: IFFALSE 50220
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50052: LD_ADDR_VAR 0 9
50056: PUSH
50057: LD_VAR 0 10
50061: PPUSH
50062: LD_VAR 0 8
50066: PPUSH
50067: LD_INT 5
50069: PPUSH
50070: CALL_OW 272
50074: PUSH
50075: LD_VAR 0 11
50079: PPUSH
50080: LD_VAR 0 8
50084: PPUSH
50085: LD_INT 5
50087: PPUSH
50088: CALL_OW 273
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50097: LD_VAR 0 9
50101: PUSH
50102: LD_INT 1
50104: ARRAY
50105: PPUSH
50106: LD_VAR 0 9
50110: PUSH
50111: LD_INT 2
50113: ARRAY
50114: PPUSH
50115: CALL_OW 488
50119: IFFALSE 50218
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50121: LD_ADDR_VAR 0 4
50125: PUSH
50126: LD_VAR 0 9
50130: PUSH
50131: LD_INT 1
50133: ARRAY
50134: PPUSH
50135: LD_VAR 0 9
50139: PUSH
50140: LD_INT 2
50142: ARRAY
50143: PPUSH
50144: CALL_OW 546
50148: ST_TO_ADDR
// if hex [ 1 ] then
50149: LD_VAR 0 4
50153: PUSH
50154: LD_INT 1
50156: ARRAY
50157: IFFALSE 50161
// continue ;
50159: GO 50049
// h := hex [ 2 ] ;
50161: LD_ADDR_VAR 0 13
50165: PUSH
50166: LD_VAR 0 4
50170: PUSH
50171: LD_INT 2
50173: ARRAY
50174: ST_TO_ADDR
// if h + 7 < height then
50175: LD_VAR 0 13
50179: PUSH
50180: LD_INT 7
50182: PLUS
50183: PUSH
50184: LD_VAR 0 15
50188: LESS
50189: IFFALSE 50218
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50191: LD_ADDR_VAR 0 18
50195: PUSH
50196: LD_INT 7
50198: PUSH
50199: LD_INT 28
50201: PUSH
50202: LD_INT 45
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: PUSH
50210: LD_VAR 0 12
50214: ARRAY
50215: ST_TO_ADDR
// break ;
50216: GO 50220
// end ; end ; end ;
50218: GO 50049
50220: POP
50221: POP
// end ; if not weapon then
50222: LD_VAR 0 18
50226: NOT
50227: IFFALSE 50287
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50229: LD_ADDR_VAR 0 5
50233: PUSH
50234: LD_VAR 0 5
50238: PUSH
50239: LD_INT 11
50241: PUSH
50242: LD_INT 30
50244: PUSH
50245: LD_INT 49
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: DIFF
50253: ST_TO_ADDR
// if not list then
50254: LD_VAR 0 5
50258: NOT
50259: IFFALSE 50263
// exit ;
50261: GO 50405
// weapon := list [ rand ( 1 , list ) ] ;
50263: LD_ADDR_VAR 0 18
50267: PUSH
50268: LD_VAR 0 5
50272: PUSH
50273: LD_INT 1
50275: PPUSH
50276: LD_VAR 0 5
50280: PPUSH
50281: CALL_OW 12
50285: ARRAY
50286: ST_TO_ADDR
// end ; if weapon then
50287: LD_VAR 0 18
50291: IFFALSE 50405
// begin tmp := CostOfWeapon ( weapon ) ;
50293: LD_ADDR_VAR 0 14
50297: PUSH
50298: LD_VAR 0 18
50302: PPUSH
50303: CALL_OW 451
50307: ST_TO_ADDR
// j := GetBase ( tower ) ;
50308: LD_ADDR_VAR 0 9
50312: PUSH
50313: LD_VAR 0 1
50317: PPUSH
50318: CALL_OW 274
50322: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50323: LD_VAR 0 9
50327: PPUSH
50328: LD_INT 1
50330: PPUSH
50331: CALL_OW 275
50335: PUSH
50336: LD_VAR 0 14
50340: PUSH
50341: LD_INT 1
50343: ARRAY
50344: GREATEREQUAL
50345: PUSH
50346: LD_VAR 0 9
50350: PPUSH
50351: LD_INT 2
50353: PPUSH
50354: CALL_OW 275
50358: PUSH
50359: LD_VAR 0 14
50363: PUSH
50364: LD_INT 2
50366: ARRAY
50367: GREATEREQUAL
50368: AND
50369: PUSH
50370: LD_VAR 0 9
50374: PPUSH
50375: LD_INT 3
50377: PPUSH
50378: CALL_OW 275
50382: PUSH
50383: LD_VAR 0 14
50387: PUSH
50388: LD_INT 3
50390: ARRAY
50391: GREATEREQUAL
50392: AND
50393: IFFALSE 50405
// result := weapon ;
50395: LD_ADDR_VAR 0 3
50399: PUSH
50400: LD_VAR 0 18
50404: ST_TO_ADDR
// end ; end ;
50405: LD_VAR 0 3
50409: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50410: LD_INT 0
50412: PPUSH
50413: PPUSH
// result := true ;
50414: LD_ADDR_VAR 0 3
50418: PUSH
50419: LD_INT 1
50421: ST_TO_ADDR
// if array1 = array2 then
50422: LD_VAR 0 1
50426: PUSH
50427: LD_VAR 0 2
50431: EQUAL
50432: IFFALSE 50492
// begin for i = 1 to array1 do
50434: LD_ADDR_VAR 0 4
50438: PUSH
50439: DOUBLE
50440: LD_INT 1
50442: DEC
50443: ST_TO_ADDR
50444: LD_VAR 0 1
50448: PUSH
50449: FOR_TO
50450: IFFALSE 50488
// if array1 [ i ] <> array2 [ i ] then
50452: LD_VAR 0 1
50456: PUSH
50457: LD_VAR 0 4
50461: ARRAY
50462: PUSH
50463: LD_VAR 0 2
50467: PUSH
50468: LD_VAR 0 4
50472: ARRAY
50473: NONEQUAL
50474: IFFALSE 50486
// begin result := false ;
50476: LD_ADDR_VAR 0 3
50480: PUSH
50481: LD_INT 0
50483: ST_TO_ADDR
// break ;
50484: GO 50488
// end ;
50486: GO 50449
50488: POP
50489: POP
// end else
50490: GO 50500
// result := false ;
50492: LD_ADDR_VAR 0 3
50496: PUSH
50497: LD_INT 0
50499: ST_TO_ADDR
// end ;
50500: LD_VAR 0 3
50504: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50505: LD_INT 0
50507: PPUSH
50508: PPUSH
// if not array1 or not array2 then
50509: LD_VAR 0 1
50513: NOT
50514: PUSH
50515: LD_VAR 0 2
50519: NOT
50520: OR
50521: IFFALSE 50525
// exit ;
50523: GO 50589
// result := true ;
50525: LD_ADDR_VAR 0 3
50529: PUSH
50530: LD_INT 1
50532: ST_TO_ADDR
// for i = 1 to array1 do
50533: LD_ADDR_VAR 0 4
50537: PUSH
50538: DOUBLE
50539: LD_INT 1
50541: DEC
50542: ST_TO_ADDR
50543: LD_VAR 0 1
50547: PUSH
50548: FOR_TO
50549: IFFALSE 50587
// if array1 [ i ] <> array2 [ i ] then
50551: LD_VAR 0 1
50555: PUSH
50556: LD_VAR 0 4
50560: ARRAY
50561: PUSH
50562: LD_VAR 0 2
50566: PUSH
50567: LD_VAR 0 4
50571: ARRAY
50572: NONEQUAL
50573: IFFALSE 50585
// begin result := false ;
50575: LD_ADDR_VAR 0 3
50579: PUSH
50580: LD_INT 0
50582: ST_TO_ADDR
// break ;
50583: GO 50587
// end ;
50585: GO 50548
50587: POP
50588: POP
// end ;
50589: LD_VAR 0 3
50593: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50594: LD_INT 0
50596: PPUSH
50597: PPUSH
50598: PPUSH
// pom := GetBase ( fac ) ;
50599: LD_ADDR_VAR 0 5
50603: PUSH
50604: LD_VAR 0 1
50608: PPUSH
50609: CALL_OW 274
50613: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50614: LD_ADDR_VAR 0 4
50618: PUSH
50619: LD_VAR 0 2
50623: PUSH
50624: LD_INT 1
50626: ARRAY
50627: PPUSH
50628: LD_VAR 0 2
50632: PUSH
50633: LD_INT 2
50635: ARRAY
50636: PPUSH
50637: LD_VAR 0 2
50641: PUSH
50642: LD_INT 3
50644: ARRAY
50645: PPUSH
50646: LD_VAR 0 2
50650: PUSH
50651: LD_INT 4
50653: ARRAY
50654: PPUSH
50655: CALL_OW 449
50659: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50660: LD_ADDR_VAR 0 3
50664: PUSH
50665: LD_VAR 0 5
50669: PPUSH
50670: LD_INT 1
50672: PPUSH
50673: CALL_OW 275
50677: PUSH
50678: LD_VAR 0 4
50682: PUSH
50683: LD_INT 1
50685: ARRAY
50686: GREATEREQUAL
50687: PUSH
50688: LD_VAR 0 5
50692: PPUSH
50693: LD_INT 2
50695: PPUSH
50696: CALL_OW 275
50700: PUSH
50701: LD_VAR 0 4
50705: PUSH
50706: LD_INT 2
50708: ARRAY
50709: GREATEREQUAL
50710: AND
50711: PUSH
50712: LD_VAR 0 5
50716: PPUSH
50717: LD_INT 3
50719: PPUSH
50720: CALL_OW 275
50724: PUSH
50725: LD_VAR 0 4
50729: PUSH
50730: LD_INT 3
50732: ARRAY
50733: GREATEREQUAL
50734: AND
50735: ST_TO_ADDR
// end ;
50736: LD_VAR 0 3
50740: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50741: LD_INT 0
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
// pom := GetBase ( building ) ;
50747: LD_ADDR_VAR 0 3
50751: PUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 274
50761: ST_TO_ADDR
// if not pom then
50762: LD_VAR 0 3
50766: NOT
50767: IFFALSE 50771
// exit ;
50769: GO 50941
// btype := GetBType ( building ) ;
50771: LD_ADDR_VAR 0 5
50775: PUSH
50776: LD_VAR 0 1
50780: PPUSH
50781: CALL_OW 266
50785: ST_TO_ADDR
// if btype = b_armoury then
50786: LD_VAR 0 5
50790: PUSH
50791: LD_INT 4
50793: EQUAL
50794: IFFALSE 50804
// btype := b_barracks ;
50796: LD_ADDR_VAR 0 5
50800: PUSH
50801: LD_INT 5
50803: ST_TO_ADDR
// if btype = b_depot then
50804: LD_VAR 0 5
50808: PUSH
50809: LD_INT 0
50811: EQUAL
50812: IFFALSE 50822
// btype := b_warehouse ;
50814: LD_ADDR_VAR 0 5
50818: PUSH
50819: LD_INT 1
50821: ST_TO_ADDR
// if btype = b_workshop then
50822: LD_VAR 0 5
50826: PUSH
50827: LD_INT 2
50829: EQUAL
50830: IFFALSE 50840
// btype := b_factory ;
50832: LD_ADDR_VAR 0 5
50836: PUSH
50837: LD_INT 3
50839: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50840: LD_ADDR_VAR 0 4
50844: PUSH
50845: LD_VAR 0 5
50849: PPUSH
50850: LD_VAR 0 1
50854: PPUSH
50855: CALL_OW 248
50859: PPUSH
50860: CALL_OW 450
50864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50865: LD_ADDR_VAR 0 2
50869: PUSH
50870: LD_VAR 0 3
50874: PPUSH
50875: LD_INT 1
50877: PPUSH
50878: CALL_OW 275
50882: PUSH
50883: LD_VAR 0 4
50887: PUSH
50888: LD_INT 1
50890: ARRAY
50891: GREATEREQUAL
50892: PUSH
50893: LD_VAR 0 3
50897: PPUSH
50898: LD_INT 2
50900: PPUSH
50901: CALL_OW 275
50905: PUSH
50906: LD_VAR 0 4
50910: PUSH
50911: LD_INT 2
50913: ARRAY
50914: GREATEREQUAL
50915: AND
50916: PUSH
50917: LD_VAR 0 3
50921: PPUSH
50922: LD_INT 3
50924: PPUSH
50925: CALL_OW 275
50929: PUSH
50930: LD_VAR 0 4
50934: PUSH
50935: LD_INT 3
50937: ARRAY
50938: GREATEREQUAL
50939: AND
50940: ST_TO_ADDR
// end ;
50941: LD_VAR 0 2
50945: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50946: LD_INT 0
50948: PPUSH
50949: PPUSH
50950: PPUSH
// pom := GetBase ( building ) ;
50951: LD_ADDR_VAR 0 4
50955: PUSH
50956: LD_VAR 0 1
50960: PPUSH
50961: CALL_OW 274
50965: ST_TO_ADDR
// if not pom then
50966: LD_VAR 0 4
50970: NOT
50971: IFFALSE 50975
// exit ;
50973: GO 51076
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50975: LD_ADDR_VAR 0 5
50979: PUSH
50980: LD_VAR 0 2
50984: PPUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: CALL_OW 248
50994: PPUSH
50995: CALL_OW 450
50999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51000: LD_ADDR_VAR 0 3
51004: PUSH
51005: LD_VAR 0 4
51009: PPUSH
51010: LD_INT 1
51012: PPUSH
51013: CALL_OW 275
51017: PUSH
51018: LD_VAR 0 5
51022: PUSH
51023: LD_INT 1
51025: ARRAY
51026: GREATEREQUAL
51027: PUSH
51028: LD_VAR 0 4
51032: PPUSH
51033: LD_INT 2
51035: PPUSH
51036: CALL_OW 275
51040: PUSH
51041: LD_VAR 0 5
51045: PUSH
51046: LD_INT 2
51048: ARRAY
51049: GREATEREQUAL
51050: AND
51051: PUSH
51052: LD_VAR 0 4
51056: PPUSH
51057: LD_INT 3
51059: PPUSH
51060: CALL_OW 275
51064: PUSH
51065: LD_VAR 0 5
51069: PUSH
51070: LD_INT 3
51072: ARRAY
51073: GREATEREQUAL
51074: AND
51075: ST_TO_ADDR
// end ;
51076: LD_VAR 0 3
51080: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51081: LD_INT 0
51083: PPUSH
51084: PPUSH
51085: PPUSH
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
// result := false ;
51094: LD_ADDR_VAR 0 8
51098: PUSH
51099: LD_INT 0
51101: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51102: LD_VAR 0 5
51106: NOT
51107: PUSH
51108: LD_VAR 0 1
51112: NOT
51113: OR
51114: PUSH
51115: LD_VAR 0 2
51119: NOT
51120: OR
51121: PUSH
51122: LD_VAR 0 3
51126: NOT
51127: OR
51128: IFFALSE 51132
// exit ;
51130: GO 51946
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51132: LD_ADDR_VAR 0 14
51136: PUSH
51137: LD_VAR 0 1
51141: PPUSH
51142: LD_VAR 0 2
51146: PPUSH
51147: LD_VAR 0 3
51151: PPUSH
51152: LD_VAR 0 4
51156: PPUSH
51157: LD_VAR 0 5
51161: PUSH
51162: LD_INT 1
51164: ARRAY
51165: PPUSH
51166: CALL_OW 248
51170: PPUSH
51171: LD_INT 0
51173: PPUSH
51174: CALL 53199 0 6
51178: ST_TO_ADDR
// if not hexes then
51179: LD_VAR 0 14
51183: NOT
51184: IFFALSE 51188
// exit ;
51186: GO 51946
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51188: LD_ADDR_VAR 0 17
51192: PUSH
51193: LD_VAR 0 5
51197: PPUSH
51198: LD_INT 22
51200: PUSH
51201: LD_VAR 0 13
51205: PPUSH
51206: CALL_OW 255
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 30
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 30
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PPUSH
51247: CALL_OW 72
51251: ST_TO_ADDR
// for i = 1 to hexes do
51252: LD_ADDR_VAR 0 9
51256: PUSH
51257: DOUBLE
51258: LD_INT 1
51260: DEC
51261: ST_TO_ADDR
51262: LD_VAR 0 14
51266: PUSH
51267: FOR_TO
51268: IFFALSE 51944
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51270: LD_ADDR_VAR 0 13
51274: PUSH
51275: LD_VAR 0 14
51279: PUSH
51280: LD_VAR 0 9
51284: ARRAY
51285: PUSH
51286: LD_INT 1
51288: ARRAY
51289: PPUSH
51290: LD_VAR 0 14
51294: PUSH
51295: LD_VAR 0 9
51299: ARRAY
51300: PUSH
51301: LD_INT 2
51303: ARRAY
51304: PPUSH
51305: CALL_OW 428
51309: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51310: LD_VAR 0 14
51314: PUSH
51315: LD_VAR 0 9
51319: ARRAY
51320: PUSH
51321: LD_INT 1
51323: ARRAY
51324: PPUSH
51325: LD_VAR 0 14
51329: PUSH
51330: LD_VAR 0 9
51334: ARRAY
51335: PUSH
51336: LD_INT 2
51338: ARRAY
51339: PPUSH
51340: CALL_OW 351
51344: PUSH
51345: LD_VAR 0 14
51349: PUSH
51350: LD_VAR 0 9
51354: ARRAY
51355: PUSH
51356: LD_INT 1
51358: ARRAY
51359: PPUSH
51360: LD_VAR 0 14
51364: PUSH
51365: LD_VAR 0 9
51369: ARRAY
51370: PUSH
51371: LD_INT 2
51373: ARRAY
51374: PPUSH
51375: CALL_OW 488
51379: NOT
51380: OR
51381: PUSH
51382: LD_VAR 0 13
51386: PPUSH
51387: CALL_OW 247
51391: PUSH
51392: LD_INT 3
51394: EQUAL
51395: OR
51396: IFFALSE 51402
// exit ;
51398: POP
51399: POP
51400: GO 51946
// if not tmp then
51402: LD_VAR 0 13
51406: NOT
51407: IFFALSE 51411
// continue ;
51409: GO 51267
// result := true ;
51411: LD_ADDR_VAR 0 8
51415: PUSH
51416: LD_INT 1
51418: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51419: LD_VAR 0 6
51423: PUSH
51424: LD_VAR 0 13
51428: PPUSH
51429: CALL_OW 247
51433: PUSH
51434: LD_INT 2
51436: EQUAL
51437: AND
51438: PUSH
51439: LD_VAR 0 13
51443: PPUSH
51444: CALL_OW 263
51448: PUSH
51449: LD_INT 1
51451: EQUAL
51452: AND
51453: IFFALSE 51617
// begin if IsDrivenBy ( tmp ) then
51455: LD_VAR 0 13
51459: PPUSH
51460: CALL_OW 311
51464: IFFALSE 51468
// continue ;
51466: GO 51267
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51468: LD_VAR 0 6
51472: PPUSH
51473: LD_INT 3
51475: PUSH
51476: LD_INT 60
51478: PUSH
51479: EMPTY
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: LD_INT 55
51491: PUSH
51492: EMPTY
51493: LIST
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PPUSH
51503: CALL_OW 72
51507: IFFALSE 51615
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51509: LD_ADDR_VAR 0 18
51513: PUSH
51514: LD_VAR 0 6
51518: PPUSH
51519: LD_INT 3
51521: PUSH
51522: LD_INT 60
51524: PUSH
51525: EMPTY
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: LD_INT 55
51537: PUSH
51538: EMPTY
51539: LIST
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PPUSH
51549: CALL_OW 72
51553: PUSH
51554: LD_INT 1
51556: ARRAY
51557: ST_TO_ADDR
// if IsInUnit ( driver ) then
51558: LD_VAR 0 18
51562: PPUSH
51563: CALL_OW 310
51567: IFFALSE 51578
// ComExit ( driver ) ;
51569: LD_VAR 0 18
51573: PPUSH
51574: CALL 76978 0 1
// AddComEnterUnit ( driver , tmp ) ;
51578: LD_VAR 0 18
51582: PPUSH
51583: LD_VAR 0 13
51587: PPUSH
51588: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51592: LD_VAR 0 18
51596: PPUSH
51597: LD_VAR 0 7
51601: PPUSH
51602: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51606: LD_VAR 0 18
51610: PPUSH
51611: CALL_OW 181
// end ; continue ;
51615: GO 51267
// end ; if not cleaners or not tmp in cleaners then
51617: LD_VAR 0 6
51621: NOT
51622: PUSH
51623: LD_VAR 0 13
51627: PUSH
51628: LD_VAR 0 6
51632: IN
51633: NOT
51634: OR
51635: IFFALSE 51942
// begin if dep then
51637: LD_VAR 0 17
51641: IFFALSE 51777
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51643: LD_ADDR_VAR 0 16
51647: PUSH
51648: LD_VAR 0 17
51652: PUSH
51653: LD_INT 1
51655: ARRAY
51656: PPUSH
51657: CALL_OW 250
51661: PPUSH
51662: LD_VAR 0 17
51666: PUSH
51667: LD_INT 1
51669: ARRAY
51670: PPUSH
51671: CALL_OW 254
51675: PPUSH
51676: LD_INT 5
51678: PPUSH
51679: CALL_OW 272
51683: PUSH
51684: LD_VAR 0 17
51688: PUSH
51689: LD_INT 1
51691: ARRAY
51692: PPUSH
51693: CALL_OW 251
51697: PPUSH
51698: LD_VAR 0 17
51702: PUSH
51703: LD_INT 1
51705: ARRAY
51706: PPUSH
51707: CALL_OW 254
51711: PPUSH
51712: LD_INT 5
51714: PPUSH
51715: CALL_OW 273
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51724: LD_VAR 0 16
51728: PUSH
51729: LD_INT 1
51731: ARRAY
51732: PPUSH
51733: LD_VAR 0 16
51737: PUSH
51738: LD_INT 2
51740: ARRAY
51741: PPUSH
51742: CALL_OW 488
51746: IFFALSE 51777
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51748: LD_VAR 0 13
51752: PPUSH
51753: LD_VAR 0 16
51757: PUSH
51758: LD_INT 1
51760: ARRAY
51761: PPUSH
51762: LD_VAR 0 16
51766: PUSH
51767: LD_INT 2
51769: ARRAY
51770: PPUSH
51771: CALL_OW 111
// continue ;
51775: GO 51267
// end ; end ; r := GetDir ( tmp ) ;
51777: LD_ADDR_VAR 0 15
51781: PUSH
51782: LD_VAR 0 13
51786: PPUSH
51787: CALL_OW 254
51791: ST_TO_ADDR
// if r = 5 then
51792: LD_VAR 0 15
51796: PUSH
51797: LD_INT 5
51799: EQUAL
51800: IFFALSE 51810
// r := 0 ;
51802: LD_ADDR_VAR 0 15
51806: PUSH
51807: LD_INT 0
51809: ST_TO_ADDR
// for j = r to 5 do
51810: LD_ADDR_VAR 0 10
51814: PUSH
51815: DOUBLE
51816: LD_VAR 0 15
51820: DEC
51821: ST_TO_ADDR
51822: LD_INT 5
51824: PUSH
51825: FOR_TO
51826: IFFALSE 51940
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51828: LD_ADDR_VAR 0 11
51832: PUSH
51833: LD_VAR 0 13
51837: PPUSH
51838: CALL_OW 250
51842: PPUSH
51843: LD_VAR 0 10
51847: PPUSH
51848: LD_INT 2
51850: PPUSH
51851: CALL_OW 272
51855: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51856: LD_ADDR_VAR 0 12
51860: PUSH
51861: LD_VAR 0 13
51865: PPUSH
51866: CALL_OW 251
51870: PPUSH
51871: LD_VAR 0 10
51875: PPUSH
51876: LD_INT 2
51878: PPUSH
51879: CALL_OW 273
51883: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51884: LD_VAR 0 11
51888: PPUSH
51889: LD_VAR 0 12
51893: PPUSH
51894: CALL_OW 488
51898: PUSH
51899: LD_VAR 0 11
51903: PPUSH
51904: LD_VAR 0 12
51908: PPUSH
51909: CALL_OW 428
51913: NOT
51914: AND
51915: IFFALSE 51938
// begin ComMoveXY ( tmp , _x , _y ) ;
51917: LD_VAR 0 13
51921: PPUSH
51922: LD_VAR 0 11
51926: PPUSH
51927: LD_VAR 0 12
51931: PPUSH
51932: CALL_OW 111
// break ;
51936: GO 51940
// end ; end ;
51938: GO 51825
51940: POP
51941: POP
// end ; end ;
51942: GO 51267
51944: POP
51945: POP
// end ;
51946: LD_VAR 0 8
51950: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51951: LD_INT 0
51953: PPUSH
// result := true ;
51954: LD_ADDR_VAR 0 3
51958: PUSH
51959: LD_INT 1
51961: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51962: LD_VAR 0 2
51966: PUSH
51967: LD_INT 24
51969: DOUBLE
51970: EQUAL
51971: IFTRUE 51981
51973: LD_INT 33
51975: DOUBLE
51976: EQUAL
51977: IFTRUE 51981
51979: GO 52006
51981: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51982: LD_ADDR_VAR 0 3
51986: PUSH
51987: LD_INT 32
51989: PPUSH
51990: LD_VAR 0 1
51994: PPUSH
51995: CALL_OW 321
51999: PUSH
52000: LD_INT 2
52002: EQUAL
52003: ST_TO_ADDR
52004: GO 52322
52006: LD_INT 20
52008: DOUBLE
52009: EQUAL
52010: IFTRUE 52014
52012: GO 52039
52014: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52015: LD_ADDR_VAR 0 3
52019: PUSH
52020: LD_INT 6
52022: PPUSH
52023: LD_VAR 0 1
52027: PPUSH
52028: CALL_OW 321
52032: PUSH
52033: LD_INT 2
52035: EQUAL
52036: ST_TO_ADDR
52037: GO 52322
52039: LD_INT 22
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52053
52045: LD_INT 36
52047: DOUBLE
52048: EQUAL
52049: IFTRUE 52053
52051: GO 52078
52053: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52054: LD_ADDR_VAR 0 3
52058: PUSH
52059: LD_INT 15
52061: PPUSH
52062: LD_VAR 0 1
52066: PPUSH
52067: CALL_OW 321
52071: PUSH
52072: LD_INT 2
52074: EQUAL
52075: ST_TO_ADDR
52076: GO 52322
52078: LD_INT 30
52080: DOUBLE
52081: EQUAL
52082: IFTRUE 52086
52084: GO 52111
52086: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52087: LD_ADDR_VAR 0 3
52091: PUSH
52092: LD_INT 20
52094: PPUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: CALL_OW 321
52104: PUSH
52105: LD_INT 2
52107: EQUAL
52108: ST_TO_ADDR
52109: GO 52322
52111: LD_INT 28
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52125
52117: LD_INT 21
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52125
52123: GO 52150
52125: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52126: LD_ADDR_VAR 0 3
52130: PUSH
52131: LD_INT 21
52133: PPUSH
52134: LD_VAR 0 1
52138: PPUSH
52139: CALL_OW 321
52143: PUSH
52144: LD_INT 2
52146: EQUAL
52147: ST_TO_ADDR
52148: GO 52322
52150: LD_INT 16
52152: DOUBLE
52153: EQUAL
52154: IFTRUE 52158
52156: GO 52183
52158: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52159: LD_ADDR_VAR 0 3
52163: PUSH
52164: LD_INT 84
52166: PPUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 321
52176: PUSH
52177: LD_INT 2
52179: EQUAL
52180: ST_TO_ADDR
52181: GO 52322
52183: LD_INT 19
52185: DOUBLE
52186: EQUAL
52187: IFTRUE 52197
52189: LD_INT 23
52191: DOUBLE
52192: EQUAL
52193: IFTRUE 52197
52195: GO 52222
52197: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52198: LD_ADDR_VAR 0 3
52202: PUSH
52203: LD_INT 83
52205: PPUSH
52206: LD_VAR 0 1
52210: PPUSH
52211: CALL_OW 321
52215: PUSH
52216: LD_INT 2
52218: EQUAL
52219: ST_TO_ADDR
52220: GO 52322
52222: LD_INT 17
52224: DOUBLE
52225: EQUAL
52226: IFTRUE 52230
52228: GO 52255
52230: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_INT 39
52238: PPUSH
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 321
52248: PUSH
52249: LD_INT 2
52251: EQUAL
52252: ST_TO_ADDR
52253: GO 52322
52255: LD_INT 18
52257: DOUBLE
52258: EQUAL
52259: IFTRUE 52263
52261: GO 52288
52263: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52264: LD_ADDR_VAR 0 3
52268: PUSH
52269: LD_INT 40
52271: PPUSH
52272: LD_VAR 0 1
52276: PPUSH
52277: CALL_OW 321
52281: PUSH
52282: LD_INT 2
52284: EQUAL
52285: ST_TO_ADDR
52286: GO 52322
52288: LD_INT 27
52290: DOUBLE
52291: EQUAL
52292: IFTRUE 52296
52294: GO 52321
52296: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52297: LD_ADDR_VAR 0 3
52301: PUSH
52302: LD_INT 35
52304: PPUSH
52305: LD_VAR 0 1
52309: PPUSH
52310: CALL_OW 321
52314: PUSH
52315: LD_INT 2
52317: EQUAL
52318: ST_TO_ADDR
52319: GO 52322
52321: POP
// end ;
52322: LD_VAR 0 3
52326: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52327: LD_INT 0
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
52334: PPUSH
52335: PPUSH
52336: PPUSH
52337: PPUSH
52338: PPUSH
52339: PPUSH
// result := false ;
52340: LD_ADDR_VAR 0 6
52344: PUSH
52345: LD_INT 0
52347: ST_TO_ADDR
// if btype = b_depot then
52348: LD_VAR 0 2
52352: PUSH
52353: LD_INT 0
52355: EQUAL
52356: IFFALSE 52368
// begin result := true ;
52358: LD_ADDR_VAR 0 6
52362: PUSH
52363: LD_INT 1
52365: ST_TO_ADDR
// exit ;
52366: GO 53194
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52368: LD_VAR 0 1
52372: NOT
52373: PUSH
52374: LD_VAR 0 1
52378: PPUSH
52379: CALL_OW 266
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: IN
52394: NOT
52395: OR
52396: PUSH
52397: LD_VAR 0 2
52401: NOT
52402: OR
52403: PUSH
52404: LD_VAR 0 5
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: LD_INT 4
52423: PUSH
52424: LD_INT 5
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: IN
52435: NOT
52436: OR
52437: PUSH
52438: LD_VAR 0 3
52442: PPUSH
52443: LD_VAR 0 4
52447: PPUSH
52448: CALL_OW 488
52452: NOT
52453: OR
52454: IFFALSE 52458
// exit ;
52456: GO 53194
// side := GetSide ( depot ) ;
52458: LD_ADDR_VAR 0 9
52462: PUSH
52463: LD_VAR 0 1
52467: PPUSH
52468: CALL_OW 255
52472: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52473: LD_VAR 0 9
52477: PPUSH
52478: LD_VAR 0 2
52482: PPUSH
52483: CALL 51951 0 2
52487: NOT
52488: IFFALSE 52492
// exit ;
52490: GO 53194
// pom := GetBase ( depot ) ;
52492: LD_ADDR_VAR 0 10
52496: PUSH
52497: LD_VAR 0 1
52501: PPUSH
52502: CALL_OW 274
52506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52507: LD_ADDR_VAR 0 11
52511: PUSH
52512: LD_VAR 0 2
52516: PPUSH
52517: LD_VAR 0 1
52521: PPUSH
52522: CALL_OW 248
52526: PPUSH
52527: CALL_OW 450
52531: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52532: LD_VAR 0 10
52536: PPUSH
52537: LD_INT 1
52539: PPUSH
52540: CALL_OW 275
52544: PUSH
52545: LD_VAR 0 11
52549: PUSH
52550: LD_INT 1
52552: ARRAY
52553: GREATEREQUAL
52554: PUSH
52555: LD_VAR 0 10
52559: PPUSH
52560: LD_INT 2
52562: PPUSH
52563: CALL_OW 275
52567: PUSH
52568: LD_VAR 0 11
52572: PUSH
52573: LD_INT 2
52575: ARRAY
52576: GREATEREQUAL
52577: AND
52578: PUSH
52579: LD_VAR 0 10
52583: PPUSH
52584: LD_INT 3
52586: PPUSH
52587: CALL_OW 275
52591: PUSH
52592: LD_VAR 0 11
52596: PUSH
52597: LD_INT 3
52599: ARRAY
52600: GREATEREQUAL
52601: AND
52602: NOT
52603: IFFALSE 52607
// exit ;
52605: GO 53194
// if GetBType ( depot ) = b_depot then
52607: LD_VAR 0 1
52611: PPUSH
52612: CALL_OW 266
52616: PUSH
52617: LD_INT 0
52619: EQUAL
52620: IFFALSE 52632
// dist := 28 else
52622: LD_ADDR_VAR 0 14
52626: PUSH
52627: LD_INT 28
52629: ST_TO_ADDR
52630: GO 52640
// dist := 36 ;
52632: LD_ADDR_VAR 0 14
52636: PUSH
52637: LD_INT 36
52639: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52640: LD_VAR 0 1
52644: PPUSH
52645: LD_VAR 0 3
52649: PPUSH
52650: LD_VAR 0 4
52654: PPUSH
52655: CALL_OW 297
52659: PUSH
52660: LD_VAR 0 14
52664: GREATER
52665: IFFALSE 52669
// exit ;
52667: GO 53194
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52669: LD_ADDR_VAR 0 12
52673: PUSH
52674: LD_VAR 0 2
52678: PPUSH
52679: LD_VAR 0 3
52683: PPUSH
52684: LD_VAR 0 4
52688: PPUSH
52689: LD_VAR 0 5
52693: PPUSH
52694: LD_VAR 0 1
52698: PPUSH
52699: CALL_OW 248
52703: PPUSH
52704: LD_INT 0
52706: PPUSH
52707: CALL 53199 0 6
52711: ST_TO_ADDR
// if not hexes then
52712: LD_VAR 0 12
52716: NOT
52717: IFFALSE 52721
// exit ;
52719: GO 53194
// hex := GetHexInfo ( x , y ) ;
52721: LD_ADDR_VAR 0 15
52725: PUSH
52726: LD_VAR 0 3
52730: PPUSH
52731: LD_VAR 0 4
52735: PPUSH
52736: CALL_OW 546
52740: ST_TO_ADDR
// if hex [ 1 ] then
52741: LD_VAR 0 15
52745: PUSH
52746: LD_INT 1
52748: ARRAY
52749: IFFALSE 52753
// exit ;
52751: GO 53194
// height := hex [ 2 ] ;
52753: LD_ADDR_VAR 0 13
52757: PUSH
52758: LD_VAR 0 15
52762: PUSH
52763: LD_INT 2
52765: ARRAY
52766: ST_TO_ADDR
// for i = 1 to hexes do
52767: LD_ADDR_VAR 0 7
52771: PUSH
52772: DOUBLE
52773: LD_INT 1
52775: DEC
52776: ST_TO_ADDR
52777: LD_VAR 0 12
52781: PUSH
52782: FOR_TO
52783: IFFALSE 53113
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52785: LD_VAR 0 12
52789: PUSH
52790: LD_VAR 0 7
52794: ARRAY
52795: PUSH
52796: LD_INT 1
52798: ARRAY
52799: PPUSH
52800: LD_VAR 0 12
52804: PUSH
52805: LD_VAR 0 7
52809: ARRAY
52810: PUSH
52811: LD_INT 2
52813: ARRAY
52814: PPUSH
52815: CALL_OW 488
52819: NOT
52820: PUSH
52821: LD_VAR 0 12
52825: PUSH
52826: LD_VAR 0 7
52830: ARRAY
52831: PUSH
52832: LD_INT 1
52834: ARRAY
52835: PPUSH
52836: LD_VAR 0 12
52840: PUSH
52841: LD_VAR 0 7
52845: ARRAY
52846: PUSH
52847: LD_INT 2
52849: ARRAY
52850: PPUSH
52851: CALL_OW 428
52855: PUSH
52856: LD_INT 0
52858: GREATER
52859: OR
52860: PUSH
52861: LD_VAR 0 12
52865: PUSH
52866: LD_VAR 0 7
52870: ARRAY
52871: PUSH
52872: LD_INT 1
52874: ARRAY
52875: PPUSH
52876: LD_VAR 0 12
52880: PUSH
52881: LD_VAR 0 7
52885: ARRAY
52886: PUSH
52887: LD_INT 2
52889: ARRAY
52890: PPUSH
52891: CALL_OW 351
52895: OR
52896: IFFALSE 52902
// exit ;
52898: POP
52899: POP
52900: GO 53194
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52902: LD_ADDR_VAR 0 8
52906: PUSH
52907: LD_VAR 0 12
52911: PUSH
52912: LD_VAR 0 7
52916: ARRAY
52917: PUSH
52918: LD_INT 1
52920: ARRAY
52921: PPUSH
52922: LD_VAR 0 12
52926: PUSH
52927: LD_VAR 0 7
52931: ARRAY
52932: PUSH
52933: LD_INT 2
52935: ARRAY
52936: PPUSH
52937: CALL_OW 546
52941: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52942: LD_VAR 0 8
52946: PUSH
52947: LD_INT 1
52949: ARRAY
52950: PUSH
52951: LD_VAR 0 8
52955: PUSH
52956: LD_INT 2
52958: ARRAY
52959: PUSH
52960: LD_VAR 0 13
52964: PUSH
52965: LD_INT 2
52967: PLUS
52968: GREATER
52969: OR
52970: PUSH
52971: LD_VAR 0 8
52975: PUSH
52976: LD_INT 2
52978: ARRAY
52979: PUSH
52980: LD_VAR 0 13
52984: PUSH
52985: LD_INT 2
52987: MINUS
52988: LESS
52989: OR
52990: PUSH
52991: LD_VAR 0 8
52995: PUSH
52996: LD_INT 3
52998: ARRAY
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 8
53005: PUSH
53006: LD_INT 9
53008: PUSH
53009: LD_INT 10
53011: PUSH
53012: LD_INT 11
53014: PUSH
53015: LD_INT 12
53017: PUSH
53018: LD_INT 13
53020: PUSH
53021: LD_INT 16
53023: PUSH
53024: LD_INT 17
53026: PUSH
53027: LD_INT 18
53029: PUSH
53030: LD_INT 19
53032: PUSH
53033: LD_INT 20
53035: PUSH
53036: LD_INT 21
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: IN
53054: NOT
53055: OR
53056: PUSH
53057: LD_VAR 0 8
53061: PUSH
53062: LD_INT 5
53064: ARRAY
53065: NOT
53066: OR
53067: PUSH
53068: LD_VAR 0 8
53072: PUSH
53073: LD_INT 6
53075: ARRAY
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 7
53085: PUSH
53086: LD_INT 9
53088: PUSH
53089: LD_INT 10
53091: PUSH
53092: LD_INT 11
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: IN
53103: NOT
53104: OR
53105: IFFALSE 53111
// exit ;
53107: POP
53108: POP
53109: GO 53194
// end ;
53111: GO 52782
53113: POP
53114: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53115: LD_VAR 0 9
53119: PPUSH
53120: LD_VAR 0 3
53124: PPUSH
53125: LD_VAR 0 4
53129: PPUSH
53130: LD_INT 20
53132: PPUSH
53133: CALL 45117 0 4
53137: PUSH
53138: LD_INT 4
53140: ARRAY
53141: IFFALSE 53145
// exit ;
53143: GO 53194
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53145: LD_VAR 0 2
53149: PUSH
53150: LD_INT 29
53152: PUSH
53153: LD_INT 30
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: IN
53160: PUSH
53161: LD_VAR 0 3
53165: PPUSH
53166: LD_VAR 0 4
53170: PPUSH
53171: LD_VAR 0 9
53175: PPUSH
53176: CALL_OW 440
53180: NOT
53181: AND
53182: IFFALSE 53186
// exit ;
53184: GO 53194
// result := true ;
53186: LD_ADDR_VAR 0 6
53190: PUSH
53191: LD_INT 1
53193: ST_TO_ADDR
// end ;
53194: LD_VAR 0 6
53198: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53199: LD_INT 0
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
53235: PPUSH
53236: PPUSH
53237: PPUSH
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
53257: PPUSH
53258: PPUSH
// result = [ ] ;
53259: LD_ADDR_VAR 0 7
53263: PUSH
53264: EMPTY
53265: ST_TO_ADDR
// temp_list = [ ] ;
53266: LD_ADDR_VAR 0 9
53270: PUSH
53271: EMPTY
53272: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53273: LD_VAR 0 4
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 4
53292: PUSH
53293: LD_INT 5
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: IN
53304: NOT
53305: PUSH
53306: LD_VAR 0 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: IN
53321: PUSH
53322: LD_VAR 0 5
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: IN
53341: NOT
53342: AND
53343: OR
53344: IFFALSE 53348
// exit ;
53346: GO 71739
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53348: LD_VAR 0 1
53352: PUSH
53353: LD_INT 6
53355: PUSH
53356: LD_INT 7
53358: PUSH
53359: LD_INT 8
53361: PUSH
53362: LD_INT 13
53364: PUSH
53365: LD_INT 12
53367: PUSH
53368: LD_INT 15
53370: PUSH
53371: LD_INT 11
53373: PUSH
53374: LD_INT 14
53376: PUSH
53377: LD_INT 10
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: IN
53391: IFFALSE 53401
// btype = b_lab ;
53393: LD_ADDR_VAR 0 1
53397: PUSH
53398: LD_INT 6
53400: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53401: LD_VAR 0 6
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: IN
53420: NOT
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: LD_INT 3
53438: PUSH
53439: LD_INT 6
53441: PUSH
53442: LD_INT 36
53444: PUSH
53445: LD_INT 4
53447: PUSH
53448: LD_INT 5
53450: PUSH
53451: LD_INT 31
53453: PUSH
53454: LD_INT 32
53456: PUSH
53457: LD_INT 33
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: IN
53473: NOT
53474: PUSH
53475: LD_VAR 0 6
53479: PUSH
53480: LD_INT 1
53482: EQUAL
53483: AND
53484: OR
53485: PUSH
53486: LD_VAR 0 1
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: IN
53501: NOT
53502: PUSH
53503: LD_VAR 0 6
53507: PUSH
53508: LD_INT 2
53510: EQUAL
53511: AND
53512: OR
53513: IFFALSE 53523
// mode = 0 ;
53515: LD_ADDR_VAR 0 6
53519: PUSH
53520: LD_INT 0
53522: ST_TO_ADDR
// case mode of 0 :
53523: LD_VAR 0 6
53527: PUSH
53528: LD_INT 0
53530: DOUBLE
53531: EQUAL
53532: IFTRUE 53536
53534: GO 64989
53536: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53537: LD_ADDR_VAR 0 11
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53730: LD_ADDR_VAR 0 12
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53926: LD_ADDR_VAR 0 13
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54125: LD_ADDR_VAR 0 14
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54321: LD_ADDR_VAR 0 15
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54514: LD_ADDR_VAR 0 16
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 3
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54707: LD_ADDR_VAR 0 17
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54937: LD_ADDR_VAR 0 18
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55167: LD_ADDR_VAR 0 19
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55397: LD_ADDR_VAR 0 20
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55627: LD_ADDR_VAR 0 21
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55857: LD_ADDR_VAR 0 22
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56087: LD_ADDR_VAR 0 23
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56367: LD_ADDR_VAR 0 24
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56643: LD_ADDR_VAR 0 25
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56917: LD_ADDR_VAR 0 26
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57193: LD_ADDR_VAR 0 27
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57473: LD_ADDR_VAR 0 28
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57755: LD_ADDR_VAR 0 29
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 3
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58034: LD_ADDR_VAR 0 30
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58312: LD_ADDR_VAR 0 31
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58590: LD_ADDR_VAR 0 32
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58868: LD_ADDR_VAR 0 33
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59147: LD_ADDR_VAR 0 34
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59427: LD_ADDR_VAR 0 35
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59539: LD_ADDR_VAR 0 36
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59651: LD_ADDR_VAR 0 37
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59763: LD_ADDR_VAR 0 38
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59875: LD_ADDR_VAR 0 39
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59987: LD_ADDR_VAR 0 40
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60099: LD_ADDR_VAR 0 41
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 3
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 3
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: LD_INT 3
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60449: LD_ADDR_VAR 0 42
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60799: LD_ADDR_VAR 0 43
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 3
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61147: LD_ADDR_VAR 0 44
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 1
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 2
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61497: LD_ADDR_VAR 0 45
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 2
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 3
61794: NEG
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61847: LD_ADDR_VAR 0 46
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 3
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: NEG
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62195: LD_ADDR_VAR 0 47
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62346: LD_ADDR_VAR 0 48
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62493: LD_ADDR_VAR 0 49
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62637: LD_ADDR_VAR 0 50
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62781: LD_ADDR_VAR 0 51
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62928: LD_ADDR_VAR 0 52
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63079: LD_ADDR_VAR 0 53
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63309: LD_ADDR_VAR 0 54
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63539: LD_ADDR_VAR 0 55
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63769: LD_ADDR_VAR 0 56
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63999: LD_ADDR_VAR 0 57
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 2
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 2
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 2
64175: NEG
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64229: LD_ADDR_VAR 0 58
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 2
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64459: LD_ADDR_VAR 0 59
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64547: LD_ADDR_VAR 0 60
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64635: LD_ADDR_VAR 0 61
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64723: LD_ADDR_VAR 0 62
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64811: LD_ADDR_VAR 0 63
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64899: LD_ADDR_VAR 0 64
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: ST_TO_ADDR
// end ; 1 :
64987: GO 70884
64989: LD_INT 1
64991: DOUBLE
64992: EQUAL
64993: IFTRUE 64997
64995: GO 67620
64997: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64998: LD_ADDR_VAR 0 11
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65042: LD_ADDR_VAR 0 12
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65083: LD_ADDR_VAR 0 13
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65123: LD_ADDR_VAR 0 14
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65164: LD_ADDR_VAR 0 15
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65208: LD_ADDR_VAR 0 16
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65254: LD_ADDR_VAR 0 17
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: LD_INT 3
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65298: LD_ADDR_VAR 0 18
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65339: LD_ADDR_VAR 0 19
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 3
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65379: LD_ADDR_VAR 0 20
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65420: LD_ADDR_VAR 0 21
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65464: LD_ADDR_VAR 0 22
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 3
65495: NEG
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65510: LD_ADDR_VAR 0 23
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 3
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 4
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65554: LD_ADDR_VAR 0 24
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 3
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 4
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65595: LD_ADDR_VAR 0 25
65599: PUSH
65600: LD_INT 3
65602: PUSH
65603: LD_INT 3
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65635: LD_ADDR_VAR 0 26
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: LD_INT 4
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 3
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65676: LD_ADDR_VAR 0 27
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 4
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65720: LD_ADDR_VAR 0 28
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: NEG
65740: PUSH
65741: LD_INT 4
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 4
65751: NEG
65752: PUSH
65753: LD_INT 3
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: LIST
65765: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65766: LD_ADDR_VAR 0 29
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: LD_INT 3
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 3
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 4
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 4
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 5
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 5
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 6
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 6
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 5
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65921: LD_ADDR_VAR 0 30
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 4
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 4
65990: PUSH
65991: LD_INT 1
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 5
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 5
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 5
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 6
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 6
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66064: LD_ADDR_VAR 0 31
66068: PUSH
66069: LD_INT 3
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 2
66091: PUSH
66092: LD_INT 3
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 4
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 4
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 3
66121: PUSH
66122: LD_INT 4
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 5
66131: PUSH
66132: LD_INT 4
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 5
66141: PUSH
66142: LD_INT 5
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 4
66151: PUSH
66152: LD_INT 5
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 6
66161: PUSH
66162: LD_INT 5
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 6
66171: PUSH
66172: LD_INT 6
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 5
66181: PUSH
66182: LD_INT 6
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66203: LD_ADDR_VAR 0 32
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 3
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 2
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 4
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 3
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 5
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 5
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 4
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 6
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 6
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: LD_INT 5
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66346: LD_ADDR_VAR 0 33
66350: PUSH
66351: LD_INT 2
66353: NEG
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 3
66375: NEG
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 4
66398: NEG
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 4
66421: NEG
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 5
66432: NEG
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 5
66443: NEG
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 5
66455: NEG
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 6
66466: NEG
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 6
66477: NEG
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66501: LD_ADDR_VAR 0 34
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: LD_INT 4
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 4
66556: NEG
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: LD_INT 4
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 4
66580: NEG
66581: PUSH
66582: LD_INT 5
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 5
66592: NEG
66593: PUSH
66594: LD_INT 4
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: LD_INT 5
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 5
66616: NEG
66617: PUSH
66618: LD_INT 6
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 6
66628: NEG
66629: PUSH
66630: LD_INT 5
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 6
66640: NEG
66641: PUSH
66642: LD_INT 6
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66664: LD_ADDR_VAR 0 41
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 3
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66708: LD_ADDR_VAR 0 42
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66749: LD_ADDR_VAR 0 43
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: LIST
66788: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66789: LD_ADDR_VAR 0 44
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: LD_INT 2
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66830: LD_ADDR_VAR 0 45
66834: PUSH
66835: LD_INT 2
66837: NEG
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 3
66859: NEG
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66874: LD_ADDR_VAR 0 46
66878: PUSH
66879: LD_INT 2
66881: NEG
66882: PUSH
66883: LD_INT 2
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: LD_INT 3
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 3
66905: NEG
66906: PUSH
66907: LD_INT 2
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66920: LD_ADDR_VAR 0 47
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: LD_INT 3
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66953: LD_ADDR_VAR 0 48
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: LD_INT 2
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66984: LD_ADDR_VAR 0 49
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 3
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67013: LD_ADDR_VAR 0 50
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 3
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67042: LD_ADDR_VAR 0 51
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67073: LD_ADDR_VAR 0 52
67077: PUSH
67078: LD_INT 3
67080: NEG
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67106: LD_ADDR_VAR 0 53
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 2
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67150: LD_ADDR_VAR 0 54
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67191: LD_ADDR_VAR 0 55
67195: PUSH
67196: LD_INT 3
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67231: LD_ADDR_VAR 0 56
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67272: LD_ADDR_VAR 0 57
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67316: LD_ADDR_VAR 0 58
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: NEG
67336: PUSH
67337: LD_INT 2
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67362: LD_ADDR_VAR 0 59
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 2
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67406: LD_ADDR_VAR 0 60
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67447: LD_ADDR_VAR 0 61
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67487: LD_ADDR_VAR 0 62
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: NEG
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67528: LD_ADDR_VAR 0 63
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: LD_INT 1
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67572: LD_ADDR_VAR 0 64
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 2
67603: NEG
67604: PUSH
67605: LD_INT 2
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// end ; 2 :
67618: GO 70884
67620: LD_INT 2
67622: DOUBLE
67623: EQUAL
67624: IFTRUE 67628
67626: GO 70883
67628: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67629: LD_ADDR_VAR 0 29
67633: PUSH
67634: LD_INT 4
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 5
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 5
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 4
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: LD_INT 2
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 5
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 3
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 3
67739: PUSH
67740: LD_INT 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 4
67749: PUSH
67750: LD_INT 3
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 4
67759: PUSH
67760: LD_INT 4
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: LD_INT 4
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: LD_INT 3
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: LD_INT 2
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: LD_INT 2
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 4
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_INT 4
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: PUSH
67850: LD_INT 5
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 3
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 2
67891: PUSH
67892: LD_INT 5
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 3
67912: NEG
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: NEG
67924: PUSH
67925: LD_INT 1
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: NEG
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 4
67991: NEG
67992: PUSH
67993: LD_INT 2
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 2
68003: NEG
68004: PUSH
68005: LD_INT 2
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 4
68014: NEG
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: LD_INT 5
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: LD_INT 4
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 4
68062: NEG
68063: PUSH
68064: LD_INT 3
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 5
68074: NEG
68075: PUSH
68076: LD_INT 4
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 5
68086: NEG
68087: PUSH
68088: LD_INT 5
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: NEG
68099: PUSH
68100: LD_INT 5
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 5
68110: NEG
68111: PUSH
68112: LD_INT 3
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68167: LD_ADDR_VAR 0 30
68171: PUSH
68172: LD_INT 4
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 4
68184: PUSH
68185: LD_INT 3
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 5
68194: PUSH
68195: LD_INT 4
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 5
68204: PUSH
68205: LD_INT 5
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: LD_INT 5
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 3
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 5
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: LD_INT 5
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 4
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: LD_INT 2
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: NEG
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 4
68357: NEG
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 4
68368: NEG
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 3
68380: NEG
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: LD_INT 1
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 5
68413: NEG
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 5
68424: NEG
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 5
68436: NEG
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 3
68448: NEG
68449: PUSH
68450: LD_INT 2
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: NEG
68472: PUSH
68473: LD_INT 4
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 2
68483: NEG
68484: PUSH
68485: LD_INT 3
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 2
68495: NEG
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 3
68507: NEG
68508: PUSH
68509: LD_INT 2
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: NEG
68520: PUSH
68521: LD_INT 3
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 4
68531: NEG
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 2
68543: NEG
68544: PUSH
68545: LD_INT 4
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 4
68555: NEG
68556: PUSH
68557: LD_INT 2
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 4
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 5
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 4
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 4
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: LD_INT 5
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 2
68657: NEG
68658: PUSH
68659: LD_INT 5
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68714: LD_ADDR_VAR 0 31
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 1
68741: PUSH
68742: LD_INT 4
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 5
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 5
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: LD_INT 4
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: LD_INT 5
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 2
68803: NEG
68804: PUSH
68805: LD_INT 3
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 3
68814: NEG
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 3
68825: NEG
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 2
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 4
68870: NEG
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 4
68881: NEG
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 4
68893: NEG
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 2
68905: NEG
68906: PUSH
68907: LD_INT 2
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 4
68916: NEG
68917: PUSH
68918: LD_INT 4
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 4
68928: NEG
68929: PUSH
68930: LD_INT 5
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: LD_INT 4
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 3
68952: NEG
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 4
68964: NEG
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 5
68976: NEG
68977: PUSH
68978: LD_INT 4
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 5
68988: NEG
68989: PUSH
68990: LD_INT 5
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: LD_INT 5
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 5
69012: NEG
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 4
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 1
69046: PUSH
69047: LD_INT 3
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 1
69057: PUSH
69058: LD_INT 2
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: LD_INT 2
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: LD_INT 3
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: LD_INT 4
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 2
69103: PUSH
69104: LD_INT 2
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 4
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 4
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 4
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 5
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 5
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 4
69167: PUSH
69168: LD_INT 1
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 3
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: LD_INT 2
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 5
69209: PUSH
69210: LD_INT 2
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69264: LD_ADDR_VAR 0 32
69268: PUSH
69269: LD_INT 4
69271: NEG
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 4
69282: NEG
69283: PUSH
69284: LD_INT 1
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 3
69294: NEG
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 3
69305: NEG
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 4
69316: NEG
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 5
69327: NEG
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 5
69350: NEG
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 3
69362: NEG
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 3
69385: NEG
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: LD_INT 3
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: LD_INT 2
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 4
69433: NEG
69434: PUSH
69435: LD_INT 3
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 4
69445: NEG
69446: PUSH
69447: LD_INT 4
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 2
69457: NEG
69458: PUSH
69459: LD_INT 4
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 4
69469: NEG
69470: PUSH
69471: LD_INT 2
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: LD_INT 4
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 5
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: LD_INT 4
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: LD_INT 3
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: LD_INT 3
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: NEG
69537: PUSH
69538: LD_INT 4
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: LD_INT 5
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 2
69560: PUSH
69561: LD_INT 3
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 2
69571: NEG
69572: PUSH
69573: LD_INT 5
69575: NEG
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 3
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 3
69593: PUSH
69594: LD_INT 1
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 4
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 3
69624: PUSH
69625: LD_INT 1
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 2
69644: PUSH
69645: LD_INT 1
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 2
69655: PUSH
69656: LD_INT 2
69658: NEG
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 4
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 4
69676: PUSH
69677: LD_INT 4
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 4
69686: PUSH
69687: LD_INT 3
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 5
69696: PUSH
69697: LD_INT 4
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 5
69706: PUSH
69707: LD_INT 5
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 4
69716: PUSH
69717: LD_INT 5
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 3
69726: PUSH
69727: LD_INT 4
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 3
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 5
69746: PUSH
69747: LD_INT 3
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 3
69756: PUSH
69757: LD_INT 5
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69811: LD_ADDR_VAR 0 33
69815: PUSH
69816: LD_INT 4
69818: NEG
69819: PUSH
69820: LD_INT 4
69822: NEG
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 4
69830: NEG
69831: PUSH
69832: LD_INT 5
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: LD_INT 4
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 3
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 4
69866: NEG
69867: PUSH
69868: LD_INT 3
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 5
69878: NEG
69879: PUSH
69880: LD_INT 4
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 5
69890: NEG
69891: PUSH
69892: LD_INT 5
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: NEG
69903: PUSH
69904: LD_INT 5
69906: NEG
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 5
69914: NEG
69915: PUSH
69916: LD_INT 3
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: LD_INT 3
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 0
69937: PUSH
69938: LD_INT 4
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: LD_INT 3
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: LD_INT 2
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: LD_INT 2
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: LD_INT 3
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 1
69993: NEG
69994: PUSH
69995: LD_INT 4
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 2
70005: PUSH
70006: LD_INT 2
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 2
70016: NEG
70017: PUSH
70018: LD_INT 4
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 4
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 4
70038: PUSH
70039: LD_INT 1
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 5
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 5
70059: PUSH
70060: LD_INT 1
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 4
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 3
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: LD_INT 2
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 5
70111: PUSH
70112: LD_INT 2
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: LD_INT 3
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 3
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 4
70151: PUSH
70152: LD_INT 4
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: PUSH
70162: LD_INT 4
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: LD_INT 3
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 2
70181: PUSH
70182: LD_INT 2
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 4
70191: PUSH
70192: LD_INT 2
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: PUSH
70202: LD_INT 4
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: LD_INT 4
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: LD_INT 4
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 1
70241: PUSH
70242: LD_INT 5
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: LD_INT 5
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 1
70261: NEG
70262: PUSH
70263: LD_INT 4
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 1
70272: NEG
70273: PUSH
70274: LD_INT 3
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: LD_INT 5
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 2
70293: NEG
70294: PUSH
70295: LD_INT 3
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70349: LD_ADDR_VAR 0 34
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: LD_INT 4
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 5
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: LD_INT 4
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 1
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 3
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: NEG
70412: PUSH
70413: LD_INT 4
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 5
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: PUSH
70436: LD_INT 3
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 2
70446: NEG
70447: PUSH
70448: LD_INT 5
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 3
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 3
70468: PUSH
70469: LD_INT 1
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 4
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 4
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 3
70499: PUSH
70500: LD_INT 1
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 2
70519: PUSH
70520: LD_INT 1
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 2
70530: PUSH
70531: LD_INT 2
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 4
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 4
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: LD_INT 3
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 5
70571: PUSH
70572: LD_INT 4
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 5
70581: PUSH
70582: LD_INT 5
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: LD_INT 5
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: PUSH
70602: LD_INT 4
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 5
70621: PUSH
70622: LD_INT 3
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: LD_INT 5
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: LD_INT 3
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 0
70681: PUSH
70682: LD_INT 4
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: NEG
70692: PUSH
70693: LD_INT 3
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 2
70713: PUSH
70714: LD_INT 4
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 2
70723: NEG
70724: PUSH
70725: LD_INT 2
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 4
70734: NEG
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 4
70745: NEG
70746: PUSH
70747: LD_INT 1
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 3
70757: NEG
70758: PUSH
70759: LD_INT 0
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 3
70768: NEG
70769: PUSH
70770: LD_INT 1
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 4
70779: NEG
70780: PUSH
70781: LD_INT 1
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 5
70790: NEG
70791: PUSH
70792: LD_INT 0
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 5
70801: NEG
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 5
70813: NEG
70814: PUSH
70815: LD_INT 2
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 3
70825: NEG
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: ST_TO_ADDR
// end ; end ;
70881: GO 70884
70883: POP
// case btype of b_depot , b_warehouse :
70884: LD_VAR 0 1
70888: PUSH
70889: LD_INT 0
70891: DOUBLE
70892: EQUAL
70893: IFTRUE 70903
70895: LD_INT 1
70897: DOUBLE
70898: EQUAL
70899: IFTRUE 70903
70901: GO 71104
70903: POP
// case nation of nation_american :
70904: LD_VAR 0 5
70908: PUSH
70909: LD_INT 1
70911: DOUBLE
70912: EQUAL
70913: IFTRUE 70917
70915: GO 70973
70917: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70918: LD_ADDR_VAR 0 9
70922: PUSH
70923: LD_VAR 0 11
70927: PUSH
70928: LD_VAR 0 12
70932: PUSH
70933: LD_VAR 0 13
70937: PUSH
70938: LD_VAR 0 14
70942: PUSH
70943: LD_VAR 0 15
70947: PUSH
70948: LD_VAR 0 16
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: PUSH
70961: LD_VAR 0 4
70965: PUSH
70966: LD_INT 1
70968: PLUS
70969: ARRAY
70970: ST_TO_ADDR
70971: GO 71102
70973: LD_INT 2
70975: DOUBLE
70976: EQUAL
70977: IFTRUE 70981
70979: GO 71037
70981: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70982: LD_ADDR_VAR 0 9
70986: PUSH
70987: LD_VAR 0 17
70991: PUSH
70992: LD_VAR 0 18
70996: PUSH
70997: LD_VAR 0 19
71001: PUSH
71002: LD_VAR 0 20
71006: PUSH
71007: LD_VAR 0 21
71011: PUSH
71012: LD_VAR 0 22
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: PUSH
71025: LD_VAR 0 4
71029: PUSH
71030: LD_INT 1
71032: PLUS
71033: ARRAY
71034: ST_TO_ADDR
71035: GO 71102
71037: LD_INT 3
71039: DOUBLE
71040: EQUAL
71041: IFTRUE 71045
71043: GO 71101
71045: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71046: LD_ADDR_VAR 0 9
71050: PUSH
71051: LD_VAR 0 23
71055: PUSH
71056: LD_VAR 0 24
71060: PUSH
71061: LD_VAR 0 25
71065: PUSH
71066: LD_VAR 0 26
71070: PUSH
71071: LD_VAR 0 27
71075: PUSH
71076: LD_VAR 0 28
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: PUSH
71089: LD_VAR 0 4
71093: PUSH
71094: LD_INT 1
71096: PLUS
71097: ARRAY
71098: ST_TO_ADDR
71099: GO 71102
71101: POP
71102: GO 71657
71104: LD_INT 2
71106: DOUBLE
71107: EQUAL
71108: IFTRUE 71118
71110: LD_INT 3
71112: DOUBLE
71113: EQUAL
71114: IFTRUE 71118
71116: GO 71174
71118: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71119: LD_ADDR_VAR 0 9
71123: PUSH
71124: LD_VAR 0 29
71128: PUSH
71129: LD_VAR 0 30
71133: PUSH
71134: LD_VAR 0 31
71138: PUSH
71139: LD_VAR 0 32
71143: PUSH
71144: LD_VAR 0 33
71148: PUSH
71149: LD_VAR 0 34
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 4
71166: PUSH
71167: LD_INT 1
71169: PLUS
71170: ARRAY
71171: ST_TO_ADDR
71172: GO 71657
71174: LD_INT 16
71176: DOUBLE
71177: EQUAL
71178: IFTRUE 71236
71180: LD_INT 17
71182: DOUBLE
71183: EQUAL
71184: IFTRUE 71236
71186: LD_INT 18
71188: DOUBLE
71189: EQUAL
71190: IFTRUE 71236
71192: LD_INT 19
71194: DOUBLE
71195: EQUAL
71196: IFTRUE 71236
71198: LD_INT 22
71200: DOUBLE
71201: EQUAL
71202: IFTRUE 71236
71204: LD_INT 20
71206: DOUBLE
71207: EQUAL
71208: IFTRUE 71236
71210: LD_INT 21
71212: DOUBLE
71213: EQUAL
71214: IFTRUE 71236
71216: LD_INT 23
71218: DOUBLE
71219: EQUAL
71220: IFTRUE 71236
71222: LD_INT 24
71224: DOUBLE
71225: EQUAL
71226: IFTRUE 71236
71228: LD_INT 25
71230: DOUBLE
71231: EQUAL
71232: IFTRUE 71236
71234: GO 71292
71236: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71237: LD_ADDR_VAR 0 9
71241: PUSH
71242: LD_VAR 0 35
71246: PUSH
71247: LD_VAR 0 36
71251: PUSH
71252: LD_VAR 0 37
71256: PUSH
71257: LD_VAR 0 38
71261: PUSH
71262: LD_VAR 0 39
71266: PUSH
71267: LD_VAR 0 40
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: PUSH
71280: LD_VAR 0 4
71284: PUSH
71285: LD_INT 1
71287: PLUS
71288: ARRAY
71289: ST_TO_ADDR
71290: GO 71657
71292: LD_INT 6
71294: DOUBLE
71295: EQUAL
71296: IFTRUE 71348
71298: LD_INT 7
71300: DOUBLE
71301: EQUAL
71302: IFTRUE 71348
71304: LD_INT 8
71306: DOUBLE
71307: EQUAL
71308: IFTRUE 71348
71310: LD_INT 13
71312: DOUBLE
71313: EQUAL
71314: IFTRUE 71348
71316: LD_INT 12
71318: DOUBLE
71319: EQUAL
71320: IFTRUE 71348
71322: LD_INT 15
71324: DOUBLE
71325: EQUAL
71326: IFTRUE 71348
71328: LD_INT 11
71330: DOUBLE
71331: EQUAL
71332: IFTRUE 71348
71334: LD_INT 14
71336: DOUBLE
71337: EQUAL
71338: IFTRUE 71348
71340: LD_INT 10
71342: DOUBLE
71343: EQUAL
71344: IFTRUE 71348
71346: GO 71404
71348: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71349: LD_ADDR_VAR 0 9
71353: PUSH
71354: LD_VAR 0 41
71358: PUSH
71359: LD_VAR 0 42
71363: PUSH
71364: LD_VAR 0 43
71368: PUSH
71369: LD_VAR 0 44
71373: PUSH
71374: LD_VAR 0 45
71378: PUSH
71379: LD_VAR 0 46
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: PUSH
71392: LD_VAR 0 4
71396: PUSH
71397: LD_INT 1
71399: PLUS
71400: ARRAY
71401: ST_TO_ADDR
71402: GO 71657
71404: LD_INT 36
71406: DOUBLE
71407: EQUAL
71408: IFTRUE 71412
71410: GO 71468
71412: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71413: LD_ADDR_VAR 0 9
71417: PUSH
71418: LD_VAR 0 47
71422: PUSH
71423: LD_VAR 0 48
71427: PUSH
71428: LD_VAR 0 49
71432: PUSH
71433: LD_VAR 0 50
71437: PUSH
71438: LD_VAR 0 51
71442: PUSH
71443: LD_VAR 0 52
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: PUSH
71456: LD_VAR 0 4
71460: PUSH
71461: LD_INT 1
71463: PLUS
71464: ARRAY
71465: ST_TO_ADDR
71466: GO 71657
71468: LD_INT 4
71470: DOUBLE
71471: EQUAL
71472: IFTRUE 71494
71474: LD_INT 5
71476: DOUBLE
71477: EQUAL
71478: IFTRUE 71494
71480: LD_INT 34
71482: DOUBLE
71483: EQUAL
71484: IFTRUE 71494
71486: LD_INT 37
71488: DOUBLE
71489: EQUAL
71490: IFTRUE 71494
71492: GO 71550
71494: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71495: LD_ADDR_VAR 0 9
71499: PUSH
71500: LD_VAR 0 53
71504: PUSH
71505: LD_VAR 0 54
71509: PUSH
71510: LD_VAR 0 55
71514: PUSH
71515: LD_VAR 0 56
71519: PUSH
71520: LD_VAR 0 57
71524: PUSH
71525: LD_VAR 0 58
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: PUSH
71538: LD_VAR 0 4
71542: PUSH
71543: LD_INT 1
71545: PLUS
71546: ARRAY
71547: ST_TO_ADDR
71548: GO 71657
71550: LD_INT 31
71552: DOUBLE
71553: EQUAL
71554: IFTRUE 71600
71556: LD_INT 32
71558: DOUBLE
71559: EQUAL
71560: IFTRUE 71600
71562: LD_INT 33
71564: DOUBLE
71565: EQUAL
71566: IFTRUE 71600
71568: LD_INT 27
71570: DOUBLE
71571: EQUAL
71572: IFTRUE 71600
71574: LD_INT 26
71576: DOUBLE
71577: EQUAL
71578: IFTRUE 71600
71580: LD_INT 28
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71600
71586: LD_INT 29
71588: DOUBLE
71589: EQUAL
71590: IFTRUE 71600
71592: LD_INT 30
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71600
71598: GO 71656
71600: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71601: LD_ADDR_VAR 0 9
71605: PUSH
71606: LD_VAR 0 59
71610: PUSH
71611: LD_VAR 0 60
71615: PUSH
71616: LD_VAR 0 61
71620: PUSH
71621: LD_VAR 0 62
71625: PUSH
71626: LD_VAR 0 63
71630: PUSH
71631: LD_VAR 0 64
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: PUSH
71644: LD_VAR 0 4
71648: PUSH
71649: LD_INT 1
71651: PLUS
71652: ARRAY
71653: ST_TO_ADDR
71654: GO 71657
71656: POP
// temp_list2 = [ ] ;
71657: LD_ADDR_VAR 0 10
71661: PUSH
71662: EMPTY
71663: ST_TO_ADDR
// for i in temp_list do
71664: LD_ADDR_VAR 0 8
71668: PUSH
71669: LD_VAR 0 9
71673: PUSH
71674: FOR_IN
71675: IFFALSE 71727
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71677: LD_ADDR_VAR 0 10
71681: PUSH
71682: LD_VAR 0 10
71686: PUSH
71687: LD_VAR 0 8
71691: PUSH
71692: LD_INT 1
71694: ARRAY
71695: PUSH
71696: LD_VAR 0 2
71700: PLUS
71701: PUSH
71702: LD_VAR 0 8
71706: PUSH
71707: LD_INT 2
71709: ARRAY
71710: PUSH
71711: LD_VAR 0 3
71715: PLUS
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: EMPTY
71722: LIST
71723: ADD
71724: ST_TO_ADDR
71725: GO 71674
71727: POP
71728: POP
// result = temp_list2 ;
71729: LD_ADDR_VAR 0 7
71733: PUSH
71734: LD_VAR 0 10
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 7
71743: RET
// export function EnemyInRange ( unit , dist ) ; begin
71744: LD_INT 0
71746: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71747: LD_ADDR_VAR 0 3
71751: PUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: CALL_OW 255
71761: PPUSH
71762: LD_VAR 0 1
71766: PPUSH
71767: CALL_OW 250
71771: PPUSH
71772: LD_VAR 0 1
71776: PPUSH
71777: CALL_OW 251
71781: PPUSH
71782: LD_VAR 0 2
71786: PPUSH
71787: CALL 45117 0 4
71791: PUSH
71792: LD_INT 4
71794: ARRAY
71795: ST_TO_ADDR
// end ;
71796: LD_VAR 0 3
71800: RET
// export function PlayerSeeMe ( unit ) ; begin
71801: LD_INT 0
71803: PPUSH
// result := See ( your_side , unit ) ;
71804: LD_ADDR_VAR 0 2
71808: PUSH
71809: LD_OWVAR 2
71813: PPUSH
71814: LD_VAR 0 1
71818: PPUSH
71819: CALL_OW 292
71823: ST_TO_ADDR
// end ;
71824: LD_VAR 0 2
71828: RET
// export function ReverseDir ( unit ) ; begin
71829: LD_INT 0
71831: PPUSH
// if not unit then
71832: LD_VAR 0 1
71836: NOT
71837: IFFALSE 71841
// exit ;
71839: GO 71864
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71841: LD_ADDR_VAR 0 2
71845: PUSH
71846: LD_VAR 0 1
71850: PPUSH
71851: CALL_OW 254
71855: PUSH
71856: LD_INT 3
71858: PLUS
71859: PUSH
71860: LD_INT 6
71862: MOD
71863: ST_TO_ADDR
// end ;
71864: LD_VAR 0 2
71868: RET
// export function ReverseArray ( array ) ; var i ; begin
71869: LD_INT 0
71871: PPUSH
71872: PPUSH
// if not array then
71873: LD_VAR 0 1
71877: NOT
71878: IFFALSE 71882
// exit ;
71880: GO 71937
// result := [ ] ;
71882: LD_ADDR_VAR 0 2
71886: PUSH
71887: EMPTY
71888: ST_TO_ADDR
// for i := array downto 1 do
71889: LD_ADDR_VAR 0 3
71893: PUSH
71894: DOUBLE
71895: LD_VAR 0 1
71899: INC
71900: ST_TO_ADDR
71901: LD_INT 1
71903: PUSH
71904: FOR_DOWNTO
71905: IFFALSE 71935
// result := Join ( result , array [ i ] ) ;
71907: LD_ADDR_VAR 0 2
71911: PUSH
71912: LD_VAR 0 2
71916: PPUSH
71917: LD_VAR 0 1
71921: PUSH
71922: LD_VAR 0 3
71926: ARRAY
71927: PPUSH
71928: CALL 76580 0 2
71932: ST_TO_ADDR
71933: GO 71904
71935: POP
71936: POP
// end ;
71937: LD_VAR 0 2
71941: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71942: LD_INT 0
71944: PPUSH
71945: PPUSH
71946: PPUSH
71947: PPUSH
71948: PPUSH
71949: PPUSH
// if not unit or not hexes then
71950: LD_VAR 0 1
71954: NOT
71955: PUSH
71956: LD_VAR 0 2
71960: NOT
71961: OR
71962: IFFALSE 71966
// exit ;
71964: GO 72089
// dist := 9999 ;
71966: LD_ADDR_VAR 0 5
71970: PUSH
71971: LD_INT 9999
71973: ST_TO_ADDR
// for i = 1 to hexes do
71974: LD_ADDR_VAR 0 4
71978: PUSH
71979: DOUBLE
71980: LD_INT 1
71982: DEC
71983: ST_TO_ADDR
71984: LD_VAR 0 2
71988: PUSH
71989: FOR_TO
71990: IFFALSE 72077
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71992: LD_ADDR_VAR 0 6
71996: PUSH
71997: LD_VAR 0 1
72001: PPUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_VAR 0 4
72011: ARRAY
72012: PUSH
72013: LD_INT 1
72015: ARRAY
72016: PPUSH
72017: LD_VAR 0 2
72021: PUSH
72022: LD_VAR 0 4
72026: ARRAY
72027: PUSH
72028: LD_INT 2
72030: ARRAY
72031: PPUSH
72032: CALL_OW 297
72036: ST_TO_ADDR
// if tdist < dist then
72037: LD_VAR 0 6
72041: PUSH
72042: LD_VAR 0 5
72046: LESS
72047: IFFALSE 72075
// begin hex := hexes [ i ] ;
72049: LD_ADDR_VAR 0 8
72053: PUSH
72054: LD_VAR 0 2
72058: PUSH
72059: LD_VAR 0 4
72063: ARRAY
72064: ST_TO_ADDR
// dist := tdist ;
72065: LD_ADDR_VAR 0 5
72069: PUSH
72070: LD_VAR 0 6
72074: ST_TO_ADDR
// end ; end ;
72075: GO 71989
72077: POP
72078: POP
// result := hex ;
72079: LD_ADDR_VAR 0 3
72083: PUSH
72084: LD_VAR 0 8
72088: ST_TO_ADDR
// end ;
72089: LD_VAR 0 3
72093: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72094: LD_INT 0
72096: PPUSH
72097: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72098: LD_VAR 0 1
72102: NOT
72103: PUSH
72104: LD_VAR 0 1
72108: PUSH
72109: LD_INT 21
72111: PUSH
72112: LD_INT 2
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 23
72121: PUSH
72122: LD_INT 2
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PPUSH
72133: CALL_OW 69
72137: IN
72138: NOT
72139: OR
72140: IFFALSE 72144
// exit ;
72142: GO 72191
// for i = 1 to 3 do
72144: LD_ADDR_VAR 0 3
72148: PUSH
72149: DOUBLE
72150: LD_INT 1
72152: DEC
72153: ST_TO_ADDR
72154: LD_INT 3
72156: PUSH
72157: FOR_TO
72158: IFFALSE 72189
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72160: LD_VAR 0 1
72164: PPUSH
72165: CALL_OW 250
72169: PPUSH
72170: LD_VAR 0 1
72174: PPUSH
72175: CALL_OW 251
72179: PPUSH
72180: LD_INT 1
72182: PPUSH
72183: CALL_OW 453
72187: GO 72157
72189: POP
72190: POP
// end ;
72191: LD_VAR 0 2
72195: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72196: LD_INT 0
72198: PPUSH
72199: PPUSH
72200: PPUSH
72201: PPUSH
72202: PPUSH
72203: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72204: LD_VAR 0 1
72208: NOT
72209: PUSH
72210: LD_VAR 0 2
72214: NOT
72215: OR
72216: PUSH
72217: LD_VAR 0 1
72221: PPUSH
72222: CALL_OW 314
72226: OR
72227: IFFALSE 72231
// exit ;
72229: GO 72698
// if GetLives ( i ) < 250 then
72231: LD_VAR 0 4
72235: PPUSH
72236: CALL_OW 256
72240: PUSH
72241: LD_INT 250
72243: LESS
72244: IFFALSE 72257
// begin ComAutodestruct ( i ) ;
72246: LD_VAR 0 4
72250: PPUSH
72251: CALL 72094 0 1
// exit ;
72255: GO 72698
// end ; x := GetX ( enemy_unit ) ;
72257: LD_ADDR_VAR 0 7
72261: PUSH
72262: LD_VAR 0 2
72266: PPUSH
72267: CALL_OW 250
72271: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72272: LD_ADDR_VAR 0 8
72276: PUSH
72277: LD_VAR 0 2
72281: PPUSH
72282: CALL_OW 251
72286: ST_TO_ADDR
// if not x or not y then
72287: LD_VAR 0 7
72291: NOT
72292: PUSH
72293: LD_VAR 0 8
72297: NOT
72298: OR
72299: IFFALSE 72303
// exit ;
72301: GO 72698
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72303: LD_ADDR_VAR 0 6
72307: PUSH
72308: LD_VAR 0 7
72312: PPUSH
72313: LD_INT 0
72315: PPUSH
72316: LD_INT 4
72318: PPUSH
72319: CALL_OW 272
72323: PUSH
72324: LD_VAR 0 8
72328: PPUSH
72329: LD_INT 0
72331: PPUSH
72332: LD_INT 4
72334: PPUSH
72335: CALL_OW 273
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_VAR 0 7
72348: PPUSH
72349: LD_INT 1
72351: PPUSH
72352: LD_INT 4
72354: PPUSH
72355: CALL_OW 272
72359: PUSH
72360: LD_VAR 0 8
72364: PPUSH
72365: LD_INT 1
72367: PPUSH
72368: LD_INT 4
72370: PPUSH
72371: CALL_OW 273
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_VAR 0 7
72384: PPUSH
72385: LD_INT 2
72387: PPUSH
72388: LD_INT 4
72390: PPUSH
72391: CALL_OW 272
72395: PUSH
72396: LD_VAR 0 8
72400: PPUSH
72401: LD_INT 2
72403: PPUSH
72404: LD_INT 4
72406: PPUSH
72407: CALL_OW 273
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_VAR 0 7
72420: PPUSH
72421: LD_INT 3
72423: PPUSH
72424: LD_INT 4
72426: PPUSH
72427: CALL_OW 272
72431: PUSH
72432: LD_VAR 0 8
72436: PPUSH
72437: LD_INT 3
72439: PPUSH
72440: LD_INT 4
72442: PPUSH
72443: CALL_OW 273
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_VAR 0 7
72456: PPUSH
72457: LD_INT 4
72459: PPUSH
72460: LD_INT 4
72462: PPUSH
72463: CALL_OW 272
72467: PUSH
72468: LD_VAR 0 8
72472: PPUSH
72473: LD_INT 4
72475: PPUSH
72476: LD_INT 4
72478: PPUSH
72479: CALL_OW 273
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_VAR 0 7
72492: PPUSH
72493: LD_INT 5
72495: PPUSH
72496: LD_INT 4
72498: PPUSH
72499: CALL_OW 272
72503: PUSH
72504: LD_VAR 0 8
72508: PPUSH
72509: LD_INT 5
72511: PPUSH
72512: LD_INT 4
72514: PPUSH
72515: CALL_OW 273
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: ST_TO_ADDR
// for i = tmp downto 1 do
72532: LD_ADDR_VAR 0 4
72536: PUSH
72537: DOUBLE
72538: LD_VAR 0 6
72542: INC
72543: ST_TO_ADDR
72544: LD_INT 1
72546: PUSH
72547: FOR_DOWNTO
72548: IFFALSE 72649
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72550: LD_VAR 0 6
72554: PUSH
72555: LD_VAR 0 4
72559: ARRAY
72560: PUSH
72561: LD_INT 1
72563: ARRAY
72564: PPUSH
72565: LD_VAR 0 6
72569: PUSH
72570: LD_VAR 0 4
72574: ARRAY
72575: PUSH
72576: LD_INT 2
72578: ARRAY
72579: PPUSH
72580: CALL_OW 488
72584: NOT
72585: PUSH
72586: LD_VAR 0 6
72590: PUSH
72591: LD_VAR 0 4
72595: ARRAY
72596: PUSH
72597: LD_INT 1
72599: ARRAY
72600: PPUSH
72601: LD_VAR 0 6
72605: PUSH
72606: LD_VAR 0 4
72610: ARRAY
72611: PUSH
72612: LD_INT 2
72614: ARRAY
72615: PPUSH
72616: CALL_OW 428
72620: PUSH
72621: LD_INT 0
72623: NONEQUAL
72624: OR
72625: IFFALSE 72647
// tmp := Delete ( tmp , i ) ;
72627: LD_ADDR_VAR 0 6
72631: PUSH
72632: LD_VAR 0 6
72636: PPUSH
72637: LD_VAR 0 4
72641: PPUSH
72642: CALL_OW 3
72646: ST_TO_ADDR
72647: GO 72547
72649: POP
72650: POP
// j := GetClosestHex ( unit , tmp ) ;
72651: LD_ADDR_VAR 0 5
72655: PUSH
72656: LD_VAR 0 1
72660: PPUSH
72661: LD_VAR 0 6
72665: PPUSH
72666: CALL 71942 0 2
72670: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72671: LD_VAR 0 1
72675: PPUSH
72676: LD_VAR 0 5
72680: PUSH
72681: LD_INT 1
72683: ARRAY
72684: PPUSH
72685: LD_VAR 0 5
72689: PUSH
72690: LD_INT 2
72692: ARRAY
72693: PPUSH
72694: CALL_OW 111
// end ;
72698: LD_VAR 0 3
72702: RET
// export function PrepareApemanSoldier ( ) ; begin
72703: LD_INT 0
72705: PPUSH
// uc_nation := 0 ;
72706: LD_ADDR_OWVAR 21
72710: PUSH
72711: LD_INT 0
72713: ST_TO_ADDR
// hc_sex := sex_male ;
72714: LD_ADDR_OWVAR 27
72718: PUSH
72719: LD_INT 1
72721: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72722: LD_ADDR_OWVAR 28
72726: PUSH
72727: LD_INT 15
72729: ST_TO_ADDR
// hc_gallery :=  ;
72730: LD_ADDR_OWVAR 33
72734: PUSH
72735: LD_STRING 
72737: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72738: LD_ADDR_OWVAR 31
72742: PUSH
72743: LD_INT 0
72745: PPUSH
72746: LD_INT 3
72748: PPUSH
72749: CALL_OW 12
72753: PUSH
72754: LD_INT 0
72756: PPUSH
72757: LD_INT 3
72759: PPUSH
72760: CALL_OW 12
72764: PUSH
72765: LD_INT 0
72767: PUSH
72768: LD_INT 0
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: ST_TO_ADDR
// end ;
72777: LD_VAR 0 1
72781: RET
// export function PrepareApemanEngineer ( ) ; begin
72782: LD_INT 0
72784: PPUSH
// uc_nation := 0 ;
72785: LD_ADDR_OWVAR 21
72789: PUSH
72790: LD_INT 0
72792: ST_TO_ADDR
// hc_sex := sex_male ;
72793: LD_ADDR_OWVAR 27
72797: PUSH
72798: LD_INT 1
72800: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72801: LD_ADDR_OWVAR 28
72805: PUSH
72806: LD_INT 16
72808: ST_TO_ADDR
// hc_gallery :=  ;
72809: LD_ADDR_OWVAR 33
72813: PUSH
72814: LD_STRING 
72816: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72817: LD_ADDR_OWVAR 31
72821: PUSH
72822: LD_INT 0
72824: PPUSH
72825: LD_INT 3
72827: PPUSH
72828: CALL_OW 12
72832: PUSH
72833: LD_INT 0
72835: PPUSH
72836: LD_INT 3
72838: PPUSH
72839: CALL_OW 12
72843: PUSH
72844: LD_INT 0
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: ST_TO_ADDR
// end ;
72856: LD_VAR 0 1
72860: RET
// export function PrepareApeman ( agressivity ) ; begin
72861: LD_INT 0
72863: PPUSH
// uc_side := 0 ;
72864: LD_ADDR_OWVAR 20
72868: PUSH
72869: LD_INT 0
72871: ST_TO_ADDR
// uc_nation := 0 ;
72872: LD_ADDR_OWVAR 21
72876: PUSH
72877: LD_INT 0
72879: ST_TO_ADDR
// hc_sex := sex_male ;
72880: LD_ADDR_OWVAR 27
72884: PUSH
72885: LD_INT 1
72887: ST_TO_ADDR
// hc_class := class_apeman ;
72888: LD_ADDR_OWVAR 28
72892: PUSH
72893: LD_INT 12
72895: ST_TO_ADDR
// hc_gallery :=  ;
72896: LD_ADDR_OWVAR 33
72900: PUSH
72901: LD_STRING 
72903: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72904: LD_ADDR_OWVAR 35
72908: PUSH
72909: LD_VAR 0 1
72913: NEG
72914: PPUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: CALL_OW 12
72924: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72925: LD_ADDR_OWVAR 31
72929: PUSH
72930: LD_INT 0
72932: PPUSH
72933: LD_INT 3
72935: PPUSH
72936: CALL_OW 12
72940: PUSH
72941: LD_INT 0
72943: PPUSH
72944: LD_INT 3
72946: PPUSH
72947: CALL_OW 12
72951: PUSH
72952: LD_INT 0
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: ST_TO_ADDR
// end ;
72964: LD_VAR 0 2
72968: RET
// export function PrepareTiger ( agressivity ) ; begin
72969: LD_INT 0
72971: PPUSH
// uc_side := 0 ;
72972: LD_ADDR_OWVAR 20
72976: PUSH
72977: LD_INT 0
72979: ST_TO_ADDR
// uc_nation := 0 ;
72980: LD_ADDR_OWVAR 21
72984: PUSH
72985: LD_INT 0
72987: ST_TO_ADDR
// hc_class := class_tiger ;
72988: LD_ADDR_OWVAR 28
72992: PUSH
72993: LD_INT 14
72995: ST_TO_ADDR
// hc_gallery :=  ;
72996: LD_ADDR_OWVAR 33
73000: PUSH
73001: LD_STRING 
73003: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73004: LD_ADDR_OWVAR 35
73008: PUSH
73009: LD_VAR 0 1
73013: NEG
73014: PPUSH
73015: LD_VAR 0 1
73019: PPUSH
73020: CALL_OW 12
73024: ST_TO_ADDR
// end ;
73025: LD_VAR 0 2
73029: RET
// export function PrepareEnchidna ( ) ; begin
73030: LD_INT 0
73032: PPUSH
// uc_side := 0 ;
73033: LD_ADDR_OWVAR 20
73037: PUSH
73038: LD_INT 0
73040: ST_TO_ADDR
// uc_nation := 0 ;
73041: LD_ADDR_OWVAR 21
73045: PUSH
73046: LD_INT 0
73048: ST_TO_ADDR
// hc_class := class_baggie ;
73049: LD_ADDR_OWVAR 28
73053: PUSH
73054: LD_INT 13
73056: ST_TO_ADDR
// hc_gallery :=  ;
73057: LD_ADDR_OWVAR 33
73061: PUSH
73062: LD_STRING 
73064: ST_TO_ADDR
// end ;
73065: LD_VAR 0 1
73069: RET
// export function PrepareFrog ( ) ; begin
73070: LD_INT 0
73072: PPUSH
// uc_side := 0 ;
73073: LD_ADDR_OWVAR 20
73077: PUSH
73078: LD_INT 0
73080: ST_TO_ADDR
// uc_nation := 0 ;
73081: LD_ADDR_OWVAR 21
73085: PUSH
73086: LD_INT 0
73088: ST_TO_ADDR
// hc_class := class_frog ;
73089: LD_ADDR_OWVAR 28
73093: PUSH
73094: LD_INT 19
73096: ST_TO_ADDR
// hc_gallery :=  ;
73097: LD_ADDR_OWVAR 33
73101: PUSH
73102: LD_STRING 
73104: ST_TO_ADDR
// end ;
73105: LD_VAR 0 1
73109: RET
// export function PrepareFish ( ) ; begin
73110: LD_INT 0
73112: PPUSH
// uc_side := 0 ;
73113: LD_ADDR_OWVAR 20
73117: PUSH
73118: LD_INT 0
73120: ST_TO_ADDR
// uc_nation := 0 ;
73121: LD_ADDR_OWVAR 21
73125: PUSH
73126: LD_INT 0
73128: ST_TO_ADDR
// hc_class := class_fish ;
73129: LD_ADDR_OWVAR 28
73133: PUSH
73134: LD_INT 20
73136: ST_TO_ADDR
// hc_gallery :=  ;
73137: LD_ADDR_OWVAR 33
73141: PUSH
73142: LD_STRING 
73144: ST_TO_ADDR
// end ;
73145: LD_VAR 0 1
73149: RET
// export function PrepareBird ( ) ; begin
73150: LD_INT 0
73152: PPUSH
// uc_side := 0 ;
73153: LD_ADDR_OWVAR 20
73157: PUSH
73158: LD_INT 0
73160: ST_TO_ADDR
// uc_nation := 0 ;
73161: LD_ADDR_OWVAR 21
73165: PUSH
73166: LD_INT 0
73168: ST_TO_ADDR
// hc_class := class_phororhacos ;
73169: LD_ADDR_OWVAR 28
73173: PUSH
73174: LD_INT 18
73176: ST_TO_ADDR
// hc_gallery :=  ;
73177: LD_ADDR_OWVAR 33
73181: PUSH
73182: LD_STRING 
73184: ST_TO_ADDR
// end ;
73185: LD_VAR 0 1
73189: RET
// export function PrepareHorse ( ) ; begin
73190: LD_INT 0
73192: PPUSH
// uc_side := 0 ;
73193: LD_ADDR_OWVAR 20
73197: PUSH
73198: LD_INT 0
73200: ST_TO_ADDR
// uc_nation := 0 ;
73201: LD_ADDR_OWVAR 21
73205: PUSH
73206: LD_INT 0
73208: ST_TO_ADDR
// hc_class := class_horse ;
73209: LD_ADDR_OWVAR 28
73213: PUSH
73214: LD_INT 21
73216: ST_TO_ADDR
// hc_gallery :=  ;
73217: LD_ADDR_OWVAR 33
73221: PUSH
73222: LD_STRING 
73224: ST_TO_ADDR
// end ;
73225: LD_VAR 0 1
73229: RET
// export function PrepareMastodont ( ) ; begin
73230: LD_INT 0
73232: PPUSH
// uc_side := 0 ;
73233: LD_ADDR_OWVAR 20
73237: PUSH
73238: LD_INT 0
73240: ST_TO_ADDR
// uc_nation := 0 ;
73241: LD_ADDR_OWVAR 21
73245: PUSH
73246: LD_INT 0
73248: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73249: LD_ADDR_OWVAR 37
73253: PUSH
73254: LD_INT 31
73256: ST_TO_ADDR
// vc_control := control_rider ;
73257: LD_ADDR_OWVAR 38
73261: PUSH
73262: LD_INT 4
73264: ST_TO_ADDR
// end ;
73265: LD_VAR 0 1
73269: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73270: LD_INT 0
73272: PPUSH
73273: PPUSH
73274: PPUSH
// uc_side = 0 ;
73275: LD_ADDR_OWVAR 20
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
// uc_nation = 0 ;
73283: LD_ADDR_OWVAR 21
73287: PUSH
73288: LD_INT 0
73290: ST_TO_ADDR
// InitHc_All ( ) ;
73291: CALL_OW 584
// InitVc ;
73295: CALL_OW 20
// if mastodonts then
73299: LD_VAR 0 6
73303: IFFALSE 73370
// for i = 1 to mastodonts do
73305: LD_ADDR_VAR 0 11
73309: PUSH
73310: DOUBLE
73311: LD_INT 1
73313: DEC
73314: ST_TO_ADDR
73315: LD_VAR 0 6
73319: PUSH
73320: FOR_TO
73321: IFFALSE 73368
// begin vc_chassis := 31 ;
73323: LD_ADDR_OWVAR 37
73327: PUSH
73328: LD_INT 31
73330: ST_TO_ADDR
// vc_control := control_rider ;
73331: LD_ADDR_OWVAR 38
73335: PUSH
73336: LD_INT 4
73338: ST_TO_ADDR
// animal := CreateVehicle ;
73339: LD_ADDR_VAR 0 12
73343: PUSH
73344: CALL_OW 45
73348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73349: LD_VAR 0 12
73353: PPUSH
73354: LD_VAR 0 8
73358: PPUSH
73359: LD_INT 0
73361: PPUSH
73362: CALL 75498 0 3
// end ;
73366: GO 73320
73368: POP
73369: POP
// if horses then
73370: LD_VAR 0 5
73374: IFFALSE 73441
// for i = 1 to horses do
73376: LD_ADDR_VAR 0 11
73380: PUSH
73381: DOUBLE
73382: LD_INT 1
73384: DEC
73385: ST_TO_ADDR
73386: LD_VAR 0 5
73390: PUSH
73391: FOR_TO
73392: IFFALSE 73439
// begin hc_class := 21 ;
73394: LD_ADDR_OWVAR 28
73398: PUSH
73399: LD_INT 21
73401: ST_TO_ADDR
// hc_gallery :=  ;
73402: LD_ADDR_OWVAR 33
73406: PUSH
73407: LD_STRING 
73409: ST_TO_ADDR
// animal := CreateHuman ;
73410: LD_ADDR_VAR 0 12
73414: PUSH
73415: CALL_OW 44
73419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73420: LD_VAR 0 12
73424: PPUSH
73425: LD_VAR 0 8
73429: PPUSH
73430: LD_INT 0
73432: PPUSH
73433: CALL 75498 0 3
// end ;
73437: GO 73391
73439: POP
73440: POP
// if birds then
73441: LD_VAR 0 1
73445: IFFALSE 73512
// for i = 1 to birds do
73447: LD_ADDR_VAR 0 11
73451: PUSH
73452: DOUBLE
73453: LD_INT 1
73455: DEC
73456: ST_TO_ADDR
73457: LD_VAR 0 1
73461: PUSH
73462: FOR_TO
73463: IFFALSE 73510
// begin hc_class := 18 ;
73465: LD_ADDR_OWVAR 28
73469: PUSH
73470: LD_INT 18
73472: ST_TO_ADDR
// hc_gallery =  ;
73473: LD_ADDR_OWVAR 33
73477: PUSH
73478: LD_STRING 
73480: ST_TO_ADDR
// animal := CreateHuman ;
73481: LD_ADDR_VAR 0 12
73485: PUSH
73486: CALL_OW 44
73490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73491: LD_VAR 0 12
73495: PPUSH
73496: LD_VAR 0 8
73500: PPUSH
73501: LD_INT 0
73503: PPUSH
73504: CALL 75498 0 3
// end ;
73508: GO 73462
73510: POP
73511: POP
// if tigers then
73512: LD_VAR 0 2
73516: IFFALSE 73600
// for i = 1 to tigers do
73518: LD_ADDR_VAR 0 11
73522: PUSH
73523: DOUBLE
73524: LD_INT 1
73526: DEC
73527: ST_TO_ADDR
73528: LD_VAR 0 2
73532: PUSH
73533: FOR_TO
73534: IFFALSE 73598
// begin hc_class = class_tiger ;
73536: LD_ADDR_OWVAR 28
73540: PUSH
73541: LD_INT 14
73543: ST_TO_ADDR
// hc_gallery =  ;
73544: LD_ADDR_OWVAR 33
73548: PUSH
73549: LD_STRING 
73551: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73552: LD_ADDR_OWVAR 35
73556: PUSH
73557: LD_INT 7
73559: NEG
73560: PPUSH
73561: LD_INT 7
73563: PPUSH
73564: CALL_OW 12
73568: ST_TO_ADDR
// animal := CreateHuman ;
73569: LD_ADDR_VAR 0 12
73573: PUSH
73574: CALL_OW 44
73578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73579: LD_VAR 0 12
73583: PPUSH
73584: LD_VAR 0 8
73588: PPUSH
73589: LD_INT 0
73591: PPUSH
73592: CALL 75498 0 3
// end ;
73596: GO 73533
73598: POP
73599: POP
// if apemans then
73600: LD_VAR 0 3
73604: IFFALSE 73727
// for i = 1 to apemans do
73606: LD_ADDR_VAR 0 11
73610: PUSH
73611: DOUBLE
73612: LD_INT 1
73614: DEC
73615: ST_TO_ADDR
73616: LD_VAR 0 3
73620: PUSH
73621: FOR_TO
73622: IFFALSE 73725
// begin hc_class = class_apeman ;
73624: LD_ADDR_OWVAR 28
73628: PUSH
73629: LD_INT 12
73631: ST_TO_ADDR
// hc_gallery =  ;
73632: LD_ADDR_OWVAR 33
73636: PUSH
73637: LD_STRING 
73639: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73640: LD_ADDR_OWVAR 35
73644: PUSH
73645: LD_INT 2
73647: NEG
73648: PPUSH
73649: LD_INT 2
73651: PPUSH
73652: CALL_OW 12
73656: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73657: LD_ADDR_OWVAR 31
73661: PUSH
73662: LD_INT 1
73664: PPUSH
73665: LD_INT 3
73667: PPUSH
73668: CALL_OW 12
73672: PUSH
73673: LD_INT 1
73675: PPUSH
73676: LD_INT 3
73678: PPUSH
73679: CALL_OW 12
73683: PUSH
73684: LD_INT 0
73686: PUSH
73687: LD_INT 0
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: ST_TO_ADDR
// animal := CreateHuman ;
73696: LD_ADDR_VAR 0 12
73700: PUSH
73701: CALL_OW 44
73705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73706: LD_VAR 0 12
73710: PPUSH
73711: LD_VAR 0 8
73715: PPUSH
73716: LD_INT 0
73718: PPUSH
73719: CALL 75498 0 3
// end ;
73723: GO 73621
73725: POP
73726: POP
// if enchidnas then
73727: LD_VAR 0 4
73731: IFFALSE 73798
// for i = 1 to enchidnas do
73733: LD_ADDR_VAR 0 11
73737: PUSH
73738: DOUBLE
73739: LD_INT 1
73741: DEC
73742: ST_TO_ADDR
73743: LD_VAR 0 4
73747: PUSH
73748: FOR_TO
73749: IFFALSE 73796
// begin hc_class = 13 ;
73751: LD_ADDR_OWVAR 28
73755: PUSH
73756: LD_INT 13
73758: ST_TO_ADDR
// hc_gallery =  ;
73759: LD_ADDR_OWVAR 33
73763: PUSH
73764: LD_STRING 
73766: ST_TO_ADDR
// animal := CreateHuman ;
73767: LD_ADDR_VAR 0 12
73771: PUSH
73772: CALL_OW 44
73776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73777: LD_VAR 0 12
73781: PPUSH
73782: LD_VAR 0 8
73786: PPUSH
73787: LD_INT 0
73789: PPUSH
73790: CALL 75498 0 3
// end ;
73794: GO 73748
73796: POP
73797: POP
// if fishes then
73798: LD_VAR 0 7
73802: IFFALSE 73869
// for i = 1 to fishes do
73804: LD_ADDR_VAR 0 11
73808: PUSH
73809: DOUBLE
73810: LD_INT 1
73812: DEC
73813: ST_TO_ADDR
73814: LD_VAR 0 7
73818: PUSH
73819: FOR_TO
73820: IFFALSE 73867
// begin hc_class = 20 ;
73822: LD_ADDR_OWVAR 28
73826: PUSH
73827: LD_INT 20
73829: ST_TO_ADDR
// hc_gallery =  ;
73830: LD_ADDR_OWVAR 33
73834: PUSH
73835: LD_STRING 
73837: ST_TO_ADDR
// animal := CreateHuman ;
73838: LD_ADDR_VAR 0 12
73842: PUSH
73843: CALL_OW 44
73847: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73848: LD_VAR 0 12
73852: PPUSH
73853: LD_VAR 0 9
73857: PPUSH
73858: LD_INT 0
73860: PPUSH
73861: CALL 75498 0 3
// end ;
73865: GO 73819
73867: POP
73868: POP
// end ;
73869: LD_VAR 0 10
73873: RET
// export function WantHeal ( sci , unit ) ; begin
73874: LD_INT 0
73876: PPUSH
// if GetTaskList ( sci ) > 0 then
73877: LD_VAR 0 1
73881: PPUSH
73882: CALL_OW 437
73886: PUSH
73887: LD_INT 0
73889: GREATER
73890: IFFALSE 73960
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73892: LD_VAR 0 1
73896: PPUSH
73897: CALL_OW 437
73901: PUSH
73902: LD_INT 1
73904: ARRAY
73905: PUSH
73906: LD_INT 1
73908: ARRAY
73909: PUSH
73910: LD_STRING l
73912: EQUAL
73913: PUSH
73914: LD_VAR 0 1
73918: PPUSH
73919: CALL_OW 437
73923: PUSH
73924: LD_INT 1
73926: ARRAY
73927: PUSH
73928: LD_INT 4
73930: ARRAY
73931: PUSH
73932: LD_VAR 0 2
73936: EQUAL
73937: AND
73938: IFFALSE 73950
// result := true else
73940: LD_ADDR_VAR 0 3
73944: PUSH
73945: LD_INT 1
73947: ST_TO_ADDR
73948: GO 73958
// result := false ;
73950: LD_ADDR_VAR 0 3
73954: PUSH
73955: LD_INT 0
73957: ST_TO_ADDR
// end else
73958: GO 73968
// result := false ;
73960: LD_ADDR_VAR 0 3
73964: PUSH
73965: LD_INT 0
73967: ST_TO_ADDR
// end ;
73968: LD_VAR 0 3
73972: RET
// export function HealTarget ( sci ) ; begin
73973: LD_INT 0
73975: PPUSH
// if not sci then
73976: LD_VAR 0 1
73980: NOT
73981: IFFALSE 73985
// exit ;
73983: GO 74050
// result := 0 ;
73985: LD_ADDR_VAR 0 2
73989: PUSH
73990: LD_INT 0
73992: ST_TO_ADDR
// if GetTaskList ( sci ) then
73993: LD_VAR 0 1
73997: PPUSH
73998: CALL_OW 437
74002: IFFALSE 74050
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74004: LD_VAR 0 1
74008: PPUSH
74009: CALL_OW 437
74013: PUSH
74014: LD_INT 1
74016: ARRAY
74017: PUSH
74018: LD_INT 1
74020: ARRAY
74021: PUSH
74022: LD_STRING l
74024: EQUAL
74025: IFFALSE 74050
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74027: LD_ADDR_VAR 0 2
74031: PUSH
74032: LD_VAR 0 1
74036: PPUSH
74037: CALL_OW 437
74041: PUSH
74042: LD_INT 1
74044: ARRAY
74045: PUSH
74046: LD_INT 4
74048: ARRAY
74049: ST_TO_ADDR
// end ;
74050: LD_VAR 0 2
74054: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74055: LD_INT 0
74057: PPUSH
74058: PPUSH
74059: PPUSH
74060: PPUSH
// if not base_units then
74061: LD_VAR 0 1
74065: NOT
74066: IFFALSE 74070
// exit ;
74068: GO 74157
// result := false ;
74070: LD_ADDR_VAR 0 2
74074: PUSH
74075: LD_INT 0
74077: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74078: LD_ADDR_VAR 0 5
74082: PUSH
74083: LD_VAR 0 1
74087: PPUSH
74088: LD_INT 21
74090: PUSH
74091: LD_INT 3
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PPUSH
74098: CALL_OW 72
74102: ST_TO_ADDR
// if not tmp then
74103: LD_VAR 0 5
74107: NOT
74108: IFFALSE 74112
// exit ;
74110: GO 74157
// for i in tmp do
74112: LD_ADDR_VAR 0 3
74116: PUSH
74117: LD_VAR 0 5
74121: PUSH
74122: FOR_IN
74123: IFFALSE 74155
// begin result := EnemyInRange ( i , 22 ) ;
74125: LD_ADDR_VAR 0 2
74129: PUSH
74130: LD_VAR 0 3
74134: PPUSH
74135: LD_INT 22
74137: PPUSH
74138: CALL 71744 0 2
74142: ST_TO_ADDR
// if result then
74143: LD_VAR 0 2
74147: IFFALSE 74153
// exit ;
74149: POP
74150: POP
74151: GO 74157
// end ;
74153: GO 74122
74155: POP
74156: POP
// end ;
74157: LD_VAR 0 2
74161: RET
// export function FilterByTag ( units , tag ) ; begin
74162: LD_INT 0
74164: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74165: LD_ADDR_VAR 0 3
74169: PUSH
74170: LD_VAR 0 1
74174: PPUSH
74175: LD_INT 120
74177: PUSH
74178: LD_VAR 0 2
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PPUSH
74187: CALL_OW 72
74191: ST_TO_ADDR
// end ;
74192: LD_VAR 0 3
74196: RET
// export function IsDriver ( un ) ; begin
74197: LD_INT 0
74199: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74200: LD_ADDR_VAR 0 2
74204: PUSH
74205: LD_VAR 0 1
74209: PUSH
74210: LD_INT 55
74212: PUSH
74213: EMPTY
74214: LIST
74215: PPUSH
74216: CALL_OW 69
74220: IN
74221: ST_TO_ADDR
// end ;
74222: LD_VAR 0 2
74226: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74227: LD_INT 0
74229: PPUSH
74230: PPUSH
// list := [ ] ;
74231: LD_ADDR_VAR 0 5
74235: PUSH
74236: EMPTY
74237: ST_TO_ADDR
// case d of 0 :
74238: LD_VAR 0 3
74242: PUSH
74243: LD_INT 0
74245: DOUBLE
74246: EQUAL
74247: IFTRUE 74251
74249: GO 74384
74251: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74252: LD_ADDR_VAR 0 5
74256: PUSH
74257: LD_VAR 0 1
74261: PUSH
74262: LD_INT 4
74264: MINUS
74265: PUSH
74266: LD_VAR 0 2
74270: PUSH
74271: LD_INT 4
74273: MINUS
74274: PUSH
74275: LD_INT 2
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: PUSH
74283: LD_VAR 0 1
74287: PUSH
74288: LD_INT 3
74290: MINUS
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: LD_INT 1
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: PUSH
74305: LD_VAR 0 1
74309: PUSH
74310: LD_INT 4
74312: PLUS
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_INT 4
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: PUSH
74327: LD_VAR 0 1
74331: PUSH
74332: LD_INT 3
74334: PLUS
74335: PUSH
74336: LD_VAR 0 2
74340: PUSH
74341: LD_INT 3
74343: PLUS
74344: PUSH
74345: LD_INT 5
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: LIST
74352: PUSH
74353: LD_VAR 0 1
74357: PUSH
74358: LD_VAR 0 2
74362: PUSH
74363: LD_INT 4
74365: PLUS
74366: PUSH
74367: LD_INT 0
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: LIST
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: ST_TO_ADDR
// end ; 1 :
74382: GO 75082
74384: LD_INT 1
74386: DOUBLE
74387: EQUAL
74388: IFTRUE 74392
74390: GO 74525
74392: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74393: LD_ADDR_VAR 0 5
74397: PUSH
74398: LD_VAR 0 1
74402: PUSH
74403: LD_VAR 0 2
74407: PUSH
74408: LD_INT 4
74410: MINUS
74411: PUSH
74412: LD_INT 3
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: PUSH
74420: LD_VAR 0 1
74424: PUSH
74425: LD_INT 3
74427: MINUS
74428: PUSH
74429: LD_VAR 0 2
74433: PUSH
74434: LD_INT 3
74436: MINUS
74437: PUSH
74438: LD_INT 2
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: LIST
74445: PUSH
74446: LD_VAR 0 1
74450: PUSH
74451: LD_INT 4
74453: MINUS
74454: PUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_INT 1
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: LIST
74467: PUSH
74468: LD_VAR 0 1
74472: PUSH
74473: LD_VAR 0 2
74477: PUSH
74478: LD_INT 3
74480: PLUS
74481: PUSH
74482: LD_INT 0
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: PUSH
74490: LD_VAR 0 1
74494: PUSH
74495: LD_INT 4
74497: PLUS
74498: PUSH
74499: LD_VAR 0 2
74503: PUSH
74504: LD_INT 4
74506: PLUS
74507: PUSH
74508: LD_INT 5
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: LIST
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: ST_TO_ADDR
// end ; 2 :
74523: GO 75082
74525: LD_INT 2
74527: DOUBLE
74528: EQUAL
74529: IFTRUE 74533
74531: GO 74662
74533: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74534: LD_ADDR_VAR 0 5
74538: PUSH
74539: LD_VAR 0 1
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_INT 3
74551: MINUS
74552: PUSH
74553: LD_INT 3
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: PUSH
74561: LD_VAR 0 1
74565: PUSH
74566: LD_INT 4
74568: PLUS
74569: PUSH
74570: LD_VAR 0 2
74574: PUSH
74575: LD_INT 4
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: LIST
74582: PUSH
74583: LD_VAR 0 1
74587: PUSH
74588: LD_VAR 0 2
74592: PUSH
74593: LD_INT 4
74595: PLUS
74596: PUSH
74597: LD_INT 0
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: LD_VAR 0 1
74609: PUSH
74610: LD_INT 3
74612: MINUS
74613: PUSH
74614: LD_VAR 0 2
74618: PUSH
74619: LD_INT 1
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: LIST
74626: PUSH
74627: LD_VAR 0 1
74631: PUSH
74632: LD_INT 4
74634: MINUS
74635: PUSH
74636: LD_VAR 0 2
74640: PUSH
74641: LD_INT 4
74643: MINUS
74644: PUSH
74645: LD_INT 2
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: LIST
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: ST_TO_ADDR
// end ; 3 :
74660: GO 75082
74662: LD_INT 3
74664: DOUBLE
74665: EQUAL
74666: IFTRUE 74670
74668: GO 74803
74670: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74671: LD_ADDR_VAR 0 5
74675: PUSH
74676: LD_VAR 0 1
74680: PUSH
74681: LD_INT 3
74683: PLUS
74684: PUSH
74685: LD_VAR 0 2
74689: PUSH
74690: LD_INT 4
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: LIST
74697: PUSH
74698: LD_VAR 0 1
74702: PUSH
74703: LD_INT 4
74705: PLUS
74706: PUSH
74707: LD_VAR 0 2
74711: PUSH
74712: LD_INT 4
74714: PLUS
74715: PUSH
74716: LD_INT 5
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: PUSH
74724: LD_VAR 0 1
74728: PUSH
74729: LD_INT 4
74731: MINUS
74732: PUSH
74733: LD_VAR 0 2
74737: PUSH
74738: LD_INT 1
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: LIST
74745: PUSH
74746: LD_VAR 0 1
74750: PUSH
74751: LD_VAR 0 2
74755: PUSH
74756: LD_INT 4
74758: MINUS
74759: PUSH
74760: LD_INT 3
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: LIST
74767: PUSH
74768: LD_VAR 0 1
74772: PUSH
74773: LD_INT 3
74775: MINUS
74776: PUSH
74777: LD_VAR 0 2
74781: PUSH
74782: LD_INT 3
74784: MINUS
74785: PUSH
74786: LD_INT 2
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: LIST
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: ST_TO_ADDR
// end ; 4 :
74801: GO 75082
74803: LD_INT 4
74805: DOUBLE
74806: EQUAL
74807: IFTRUE 74811
74809: GO 74944
74811: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74812: LD_ADDR_VAR 0 5
74816: PUSH
74817: LD_VAR 0 1
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_INT 4
74829: PLUS
74830: PUSH
74831: LD_INT 0
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: PUSH
74839: LD_VAR 0 1
74843: PUSH
74844: LD_INT 3
74846: PLUS
74847: PUSH
74848: LD_VAR 0 2
74852: PUSH
74853: LD_INT 3
74855: PLUS
74856: PUSH
74857: LD_INT 5
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: PUSH
74865: LD_VAR 0 1
74869: PUSH
74870: LD_INT 4
74872: PLUS
74873: PUSH
74874: LD_VAR 0 2
74878: PUSH
74879: LD_INT 4
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: LD_VAR 0 1
74891: PUSH
74892: LD_VAR 0 2
74896: PUSH
74897: LD_INT 3
74899: MINUS
74900: PUSH
74901: LD_INT 3
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: LIST
74908: PUSH
74909: LD_VAR 0 1
74913: PUSH
74914: LD_INT 4
74916: MINUS
74917: PUSH
74918: LD_VAR 0 2
74922: PUSH
74923: LD_INT 4
74925: MINUS
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: LIST
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: ST_TO_ADDR
// end ; 5 :
74942: GO 75082
74944: LD_INT 5
74946: DOUBLE
74947: EQUAL
74948: IFTRUE 74952
74950: GO 75081
74952: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74953: LD_ADDR_VAR 0 5
74957: PUSH
74958: LD_VAR 0 1
74962: PUSH
74963: LD_INT 4
74965: MINUS
74966: PUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_INT 1
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: LIST
74979: PUSH
74980: LD_VAR 0 1
74984: PUSH
74985: LD_VAR 0 2
74989: PUSH
74990: LD_INT 4
74992: MINUS
74993: PUSH
74994: LD_INT 3
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: LIST
75001: PUSH
75002: LD_VAR 0 1
75006: PUSH
75007: LD_INT 4
75009: PLUS
75010: PUSH
75011: LD_VAR 0 2
75015: PUSH
75016: LD_INT 4
75018: PLUS
75019: PUSH
75020: LD_INT 5
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: LIST
75027: PUSH
75028: LD_VAR 0 1
75032: PUSH
75033: LD_INT 3
75035: PLUS
75036: PUSH
75037: LD_VAR 0 2
75041: PUSH
75042: LD_INT 4
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: LIST
75049: PUSH
75050: LD_VAR 0 1
75054: PUSH
75055: LD_VAR 0 2
75059: PUSH
75060: LD_INT 3
75062: PLUS
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: ST_TO_ADDR
// end ; end ;
75079: GO 75082
75081: POP
// result := list ;
75082: LD_ADDR_VAR 0 4
75086: PUSH
75087: LD_VAR 0 5
75091: ST_TO_ADDR
// end ;
75092: LD_VAR 0 4
75096: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75097: LD_INT 0
75099: PPUSH
75100: PPUSH
75101: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75102: LD_VAR 0 1
75106: NOT
75107: PUSH
75108: LD_VAR 0 2
75112: PUSH
75113: LD_INT 1
75115: PUSH
75116: LD_INT 2
75118: PUSH
75119: LD_INT 3
75121: PUSH
75122: LD_INT 4
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: IN
75131: NOT
75132: OR
75133: IFFALSE 75137
// exit ;
75135: GO 75220
// tmp := [ ] ;
75137: LD_ADDR_VAR 0 5
75141: PUSH
75142: EMPTY
75143: ST_TO_ADDR
// for i in units do
75144: LD_ADDR_VAR 0 4
75148: PUSH
75149: LD_VAR 0 1
75153: PUSH
75154: FOR_IN
75155: IFFALSE 75189
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75157: LD_ADDR_VAR 0 5
75161: PUSH
75162: LD_VAR 0 5
75166: PPUSH
75167: LD_VAR 0 4
75171: PPUSH
75172: LD_VAR 0 2
75176: PPUSH
75177: CALL_OW 259
75181: PPUSH
75182: CALL 76580 0 2
75186: ST_TO_ADDR
75187: GO 75154
75189: POP
75190: POP
// if not tmp then
75191: LD_VAR 0 5
75195: NOT
75196: IFFALSE 75200
// exit ;
75198: GO 75220
// result := SortListByListDesc ( units , tmp ) ;
75200: LD_ADDR_VAR 0 3
75204: PUSH
75205: LD_VAR 0 1
75209: PPUSH
75210: LD_VAR 0 5
75214: PPUSH
75215: CALL_OW 77
75219: ST_TO_ADDR
// end ;
75220: LD_VAR 0 3
75224: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75225: LD_INT 0
75227: PPUSH
75228: PPUSH
75229: PPUSH
// result := false ;
75230: LD_ADDR_VAR 0 3
75234: PUSH
75235: LD_INT 0
75237: ST_TO_ADDR
// if not building then
75238: LD_VAR 0 2
75242: NOT
75243: IFFALSE 75247
// exit ;
75245: GO 75385
// x := GetX ( building ) ;
75247: LD_ADDR_VAR 0 4
75251: PUSH
75252: LD_VAR 0 2
75256: PPUSH
75257: CALL_OW 250
75261: ST_TO_ADDR
// y := GetY ( building ) ;
75262: LD_ADDR_VAR 0 5
75266: PUSH
75267: LD_VAR 0 2
75271: PPUSH
75272: CALL_OW 251
75276: ST_TO_ADDR
// if not x or not y then
75277: LD_VAR 0 4
75281: NOT
75282: PUSH
75283: LD_VAR 0 5
75287: NOT
75288: OR
75289: IFFALSE 75293
// exit ;
75291: GO 75385
// if GetTaskList ( unit ) then
75293: LD_VAR 0 1
75297: PPUSH
75298: CALL_OW 437
75302: IFFALSE 75385
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75304: LD_STRING e
75306: PUSH
75307: LD_VAR 0 1
75311: PPUSH
75312: CALL_OW 437
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PUSH
75321: LD_INT 1
75323: ARRAY
75324: EQUAL
75325: PUSH
75326: LD_VAR 0 4
75330: PUSH
75331: LD_VAR 0 1
75335: PPUSH
75336: CALL_OW 437
75340: PUSH
75341: LD_INT 1
75343: ARRAY
75344: PUSH
75345: LD_INT 2
75347: ARRAY
75348: EQUAL
75349: AND
75350: PUSH
75351: LD_VAR 0 5
75355: PUSH
75356: LD_VAR 0 1
75360: PPUSH
75361: CALL_OW 437
75365: PUSH
75366: LD_INT 1
75368: ARRAY
75369: PUSH
75370: LD_INT 3
75372: ARRAY
75373: EQUAL
75374: AND
75375: IFFALSE 75385
// result := true end ;
75377: LD_ADDR_VAR 0 3
75381: PUSH
75382: LD_INT 1
75384: ST_TO_ADDR
// end ;
75385: LD_VAR 0 3
75389: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75390: LD_INT 0
75392: PPUSH
// result := false ;
75393: LD_ADDR_VAR 0 4
75397: PUSH
75398: LD_INT 0
75400: ST_TO_ADDR
// if GetTaskList ( unit ) then
75401: LD_VAR 0 1
75405: PPUSH
75406: CALL_OW 437
75410: IFFALSE 75493
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75412: LD_STRING M
75414: PUSH
75415: LD_VAR 0 1
75419: PPUSH
75420: CALL_OW 437
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: PUSH
75429: LD_INT 1
75431: ARRAY
75432: EQUAL
75433: PUSH
75434: LD_VAR 0 2
75438: PUSH
75439: LD_VAR 0 1
75443: PPUSH
75444: CALL_OW 437
75448: PUSH
75449: LD_INT 1
75451: ARRAY
75452: PUSH
75453: LD_INT 2
75455: ARRAY
75456: EQUAL
75457: AND
75458: PUSH
75459: LD_VAR 0 3
75463: PUSH
75464: LD_VAR 0 1
75468: PPUSH
75469: CALL_OW 437
75473: PUSH
75474: LD_INT 1
75476: ARRAY
75477: PUSH
75478: LD_INT 3
75480: ARRAY
75481: EQUAL
75482: AND
75483: IFFALSE 75493
// result := true ;
75485: LD_ADDR_VAR 0 4
75489: PUSH
75490: LD_INT 1
75492: ST_TO_ADDR
// end ; end ;
75493: LD_VAR 0 4
75497: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75498: LD_INT 0
75500: PPUSH
75501: PPUSH
75502: PPUSH
75503: PPUSH
// if not unit or not area then
75504: LD_VAR 0 1
75508: NOT
75509: PUSH
75510: LD_VAR 0 2
75514: NOT
75515: OR
75516: IFFALSE 75520
// exit ;
75518: GO 75683
// tmp := AreaToList ( area , i ) ;
75520: LD_ADDR_VAR 0 6
75524: PUSH
75525: LD_VAR 0 2
75529: PPUSH
75530: LD_VAR 0 5
75534: PPUSH
75535: CALL_OW 517
75539: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75540: LD_ADDR_VAR 0 5
75544: PUSH
75545: DOUBLE
75546: LD_INT 1
75548: DEC
75549: ST_TO_ADDR
75550: LD_VAR 0 6
75554: PUSH
75555: LD_INT 1
75557: ARRAY
75558: PUSH
75559: FOR_TO
75560: IFFALSE 75681
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75562: LD_ADDR_VAR 0 7
75566: PUSH
75567: LD_VAR 0 6
75571: PUSH
75572: LD_INT 1
75574: ARRAY
75575: PUSH
75576: LD_VAR 0 5
75580: ARRAY
75581: PUSH
75582: LD_VAR 0 6
75586: PUSH
75587: LD_INT 2
75589: ARRAY
75590: PUSH
75591: LD_VAR 0 5
75595: ARRAY
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
75601: LD_INT 92
75603: PUSH
75604: LD_VAR 0 7
75608: PUSH
75609: LD_INT 1
75611: ARRAY
75612: PUSH
75613: LD_VAR 0 7
75617: PUSH
75618: LD_INT 2
75620: ARRAY
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: PPUSH
75631: CALL_OW 69
75635: PUSH
75636: LD_INT 0
75638: EQUAL
75639: IFFALSE 75679
// begin PlaceUnitArea ( unit , area , mode ) ;
75641: LD_VAR 0 1
75645: PPUSH
75646: LD_VAR 0 2
75650: PPUSH
75651: LD_VAR 0 3
75655: PPUSH
75656: CALL_OW 49
// result := IsPlaced ( unit ) ;
75660: LD_ADDR_VAR 0 4
75664: PUSH
75665: LD_VAR 0 1
75669: PPUSH
75670: CALL_OW 305
75674: ST_TO_ADDR
// exit ;
75675: POP
75676: POP
75677: GO 75683
// end ; end ;
75679: GO 75559
75681: POP
75682: POP
// end ;
75683: LD_VAR 0 4
75687: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75688: LD_INT 0
75690: PPUSH
75691: PPUSH
75692: PPUSH
// if not side or side > 8 then
75693: LD_VAR 0 1
75697: NOT
75698: PUSH
75699: LD_VAR 0 1
75703: PUSH
75704: LD_INT 8
75706: GREATER
75707: OR
75708: IFFALSE 75712
// exit ;
75710: GO 75899
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75712: LD_ADDR_VAR 0 4
75716: PUSH
75717: LD_INT 22
75719: PUSH
75720: LD_VAR 0 1
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 21
75731: PUSH
75732: LD_INT 3
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PPUSH
75743: CALL_OW 69
75747: ST_TO_ADDR
// if not tmp then
75748: LD_VAR 0 4
75752: NOT
75753: IFFALSE 75757
// exit ;
75755: GO 75899
// enable_addtolog := true ;
75757: LD_ADDR_OWVAR 81
75761: PUSH
75762: LD_INT 1
75764: ST_TO_ADDR
// AddToLog ( [ ) ;
75765: LD_STRING [
75767: PPUSH
75768: CALL_OW 561
// for i in tmp do
75772: LD_ADDR_VAR 0 3
75776: PUSH
75777: LD_VAR 0 4
75781: PUSH
75782: FOR_IN
75783: IFFALSE 75890
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75785: LD_STRING [
75787: PUSH
75788: LD_VAR 0 3
75792: PPUSH
75793: CALL_OW 266
75797: STR
75798: PUSH
75799: LD_STRING , 
75801: STR
75802: PUSH
75803: LD_VAR 0 3
75807: PPUSH
75808: CALL_OW 250
75812: STR
75813: PUSH
75814: LD_STRING , 
75816: STR
75817: PUSH
75818: LD_VAR 0 3
75822: PPUSH
75823: CALL_OW 251
75827: STR
75828: PUSH
75829: LD_STRING , 
75831: STR
75832: PUSH
75833: LD_VAR 0 3
75837: PPUSH
75838: CALL_OW 254
75842: STR
75843: PUSH
75844: LD_STRING , 
75846: STR
75847: PUSH
75848: LD_VAR 0 3
75852: PPUSH
75853: LD_INT 1
75855: PPUSH
75856: CALL_OW 268
75860: STR
75861: PUSH
75862: LD_STRING , 
75864: STR
75865: PUSH
75866: LD_VAR 0 3
75870: PPUSH
75871: LD_INT 2
75873: PPUSH
75874: CALL_OW 268
75878: STR
75879: PUSH
75880: LD_STRING ],
75882: STR
75883: PPUSH
75884: CALL_OW 561
// end ;
75888: GO 75782
75890: POP
75891: POP
// AddToLog ( ]; ) ;
75892: LD_STRING ];
75894: PPUSH
75895: CALL_OW 561
// end ;
75899: LD_VAR 0 2
75903: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75904: LD_INT 0
75906: PPUSH
75907: PPUSH
75908: PPUSH
75909: PPUSH
75910: PPUSH
// if not area or not rate or not max then
75911: LD_VAR 0 1
75915: NOT
75916: PUSH
75917: LD_VAR 0 2
75921: NOT
75922: OR
75923: PUSH
75924: LD_VAR 0 4
75928: NOT
75929: OR
75930: IFFALSE 75934
// exit ;
75932: GO 76123
// while 1 do
75934: LD_INT 1
75936: IFFALSE 76123
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75938: LD_ADDR_VAR 0 9
75942: PUSH
75943: LD_VAR 0 1
75947: PPUSH
75948: LD_INT 1
75950: PPUSH
75951: CALL_OW 287
75955: PUSH
75956: LD_INT 10
75958: MUL
75959: ST_TO_ADDR
// r := rate / 10 ;
75960: LD_ADDR_VAR 0 7
75964: PUSH
75965: LD_VAR 0 2
75969: PUSH
75970: LD_INT 10
75972: DIVREAL
75973: ST_TO_ADDR
// time := 1 1$00 ;
75974: LD_ADDR_VAR 0 8
75978: PUSH
75979: LD_INT 2100
75981: ST_TO_ADDR
// if amount < min then
75982: LD_VAR 0 9
75986: PUSH
75987: LD_VAR 0 3
75991: LESS
75992: IFFALSE 76010
// r := r * 2 else
75994: LD_ADDR_VAR 0 7
75998: PUSH
75999: LD_VAR 0 7
76003: PUSH
76004: LD_INT 2
76006: MUL
76007: ST_TO_ADDR
76008: GO 76036
// if amount > max then
76010: LD_VAR 0 9
76014: PUSH
76015: LD_VAR 0 4
76019: GREATER
76020: IFFALSE 76036
// r := r / 2 ;
76022: LD_ADDR_VAR 0 7
76026: PUSH
76027: LD_VAR 0 7
76031: PUSH
76032: LD_INT 2
76034: DIVREAL
76035: ST_TO_ADDR
// time := time / r ;
76036: LD_ADDR_VAR 0 8
76040: PUSH
76041: LD_VAR 0 8
76045: PUSH
76046: LD_VAR 0 7
76050: DIVREAL
76051: ST_TO_ADDR
// if time < 0 then
76052: LD_VAR 0 8
76056: PUSH
76057: LD_INT 0
76059: LESS
76060: IFFALSE 76077
// time := time * - 1 ;
76062: LD_ADDR_VAR 0 8
76066: PUSH
76067: LD_VAR 0 8
76071: PUSH
76072: LD_INT 1
76074: NEG
76075: MUL
76076: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76077: LD_VAR 0 8
76081: PUSH
76082: LD_INT 35
76084: PPUSH
76085: LD_INT 875
76087: PPUSH
76088: CALL_OW 12
76092: PLUS
76093: PPUSH
76094: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76098: LD_INT 1
76100: PPUSH
76101: LD_INT 5
76103: PPUSH
76104: CALL_OW 12
76108: PPUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_INT 1
76116: PPUSH
76117: CALL_OW 55
// end ;
76121: GO 75934
// end ;
76123: LD_VAR 0 5
76127: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76128: LD_INT 0
76130: PPUSH
76131: PPUSH
76132: PPUSH
76133: PPUSH
76134: PPUSH
76135: PPUSH
76136: PPUSH
76137: PPUSH
// if not turrets or not factories then
76138: LD_VAR 0 1
76142: NOT
76143: PUSH
76144: LD_VAR 0 2
76148: NOT
76149: OR
76150: IFFALSE 76154
// exit ;
76152: GO 76461
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76154: LD_ADDR_VAR 0 10
76158: PUSH
76159: LD_INT 5
76161: PUSH
76162: LD_INT 6
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 2
76171: PUSH
76172: LD_INT 4
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 3
76181: PUSH
76182: LD_INT 5
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 24
76196: PUSH
76197: LD_INT 25
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: LD_INT 23
76206: PUSH
76207: LD_INT 27
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 42
76220: PUSH
76221: LD_INT 43
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 44
76230: PUSH
76231: LD_INT 46
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 45
76240: PUSH
76241: LD_INT 47
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: LIST
76252: PUSH
76253: EMPTY
76254: LIST
76255: LIST
76256: LIST
76257: ST_TO_ADDR
// result := [ ] ;
76258: LD_ADDR_VAR 0 3
76262: PUSH
76263: EMPTY
76264: ST_TO_ADDR
// for i in turrets do
76265: LD_ADDR_VAR 0 4
76269: PUSH
76270: LD_VAR 0 1
76274: PUSH
76275: FOR_IN
76276: IFFALSE 76459
// begin nat := GetNation ( i ) ;
76278: LD_ADDR_VAR 0 7
76282: PUSH
76283: LD_VAR 0 4
76287: PPUSH
76288: CALL_OW 248
76292: ST_TO_ADDR
// weapon := 0 ;
76293: LD_ADDR_VAR 0 8
76297: PUSH
76298: LD_INT 0
76300: ST_TO_ADDR
// if not nat then
76301: LD_VAR 0 7
76305: NOT
76306: IFFALSE 76310
// continue ;
76308: GO 76275
// for j in list [ nat ] do
76310: LD_ADDR_VAR 0 5
76314: PUSH
76315: LD_VAR 0 10
76319: PUSH
76320: LD_VAR 0 7
76324: ARRAY
76325: PUSH
76326: FOR_IN
76327: IFFALSE 76368
// if GetBWeapon ( i ) = j [ 1 ] then
76329: LD_VAR 0 4
76333: PPUSH
76334: CALL_OW 269
76338: PUSH
76339: LD_VAR 0 5
76343: PUSH
76344: LD_INT 1
76346: ARRAY
76347: EQUAL
76348: IFFALSE 76366
// begin weapon := j [ 2 ] ;
76350: LD_ADDR_VAR 0 8
76354: PUSH
76355: LD_VAR 0 5
76359: PUSH
76360: LD_INT 2
76362: ARRAY
76363: ST_TO_ADDR
// break ;
76364: GO 76368
// end ;
76366: GO 76326
76368: POP
76369: POP
// if not weapon then
76370: LD_VAR 0 8
76374: NOT
76375: IFFALSE 76379
// continue ;
76377: GO 76275
// for k in factories do
76379: LD_ADDR_VAR 0 6
76383: PUSH
76384: LD_VAR 0 2
76388: PUSH
76389: FOR_IN
76390: IFFALSE 76455
// begin weapons := AvailableWeaponList ( k ) ;
76392: LD_ADDR_VAR 0 9
76396: PUSH
76397: LD_VAR 0 6
76401: PPUSH
76402: CALL_OW 478
76406: ST_TO_ADDR
// if not weapons then
76407: LD_VAR 0 9
76411: NOT
76412: IFFALSE 76416
// continue ;
76414: GO 76389
// if weapon in weapons then
76416: LD_VAR 0 8
76420: PUSH
76421: LD_VAR 0 9
76425: IN
76426: IFFALSE 76453
// begin result := [ i , weapon ] ;
76428: LD_ADDR_VAR 0 3
76432: PUSH
76433: LD_VAR 0 4
76437: PUSH
76438: LD_VAR 0 8
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: ST_TO_ADDR
// exit ;
76447: POP
76448: POP
76449: POP
76450: POP
76451: GO 76461
// end ; end ;
76453: GO 76389
76455: POP
76456: POP
// end ;
76457: GO 76275
76459: POP
76460: POP
// end ;
76461: LD_VAR 0 3
76465: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76466: LD_INT 0
76468: PPUSH
// if not side or side > 8 then
76469: LD_VAR 0 3
76473: NOT
76474: PUSH
76475: LD_VAR 0 3
76479: PUSH
76480: LD_INT 8
76482: GREATER
76483: OR
76484: IFFALSE 76488
// exit ;
76486: GO 76547
// if not range then
76488: LD_VAR 0 4
76492: NOT
76493: IFFALSE 76504
// range := - 12 ;
76495: LD_ADDR_VAR 0 4
76499: PUSH
76500: LD_INT 12
76502: NEG
76503: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76504: LD_VAR 0 1
76508: PPUSH
76509: LD_VAR 0 2
76513: PPUSH
76514: LD_VAR 0 3
76518: PPUSH
76519: LD_VAR 0 4
76523: PPUSH
76524: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76528: LD_VAR 0 1
76532: PPUSH
76533: LD_VAR 0 2
76537: PPUSH
76538: LD_VAR 0 3
76542: PPUSH
76543: CALL_OW 331
// end ;
76547: LD_VAR 0 5
76551: RET
// export function Video ( mode ) ; begin
76552: LD_INT 0
76554: PPUSH
// ingame_video = mode ;
76555: LD_ADDR_OWVAR 52
76559: PUSH
76560: LD_VAR 0 1
76564: ST_TO_ADDR
// interface_hidden = mode ;
76565: LD_ADDR_OWVAR 54
76569: PUSH
76570: LD_VAR 0 1
76574: ST_TO_ADDR
// end ;
76575: LD_VAR 0 2
76579: RET
// export function Join ( array , element ) ; begin
76580: LD_INT 0
76582: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76583: LD_ADDR_VAR 0 3
76587: PUSH
76588: LD_VAR 0 1
76592: PPUSH
76593: LD_VAR 0 1
76597: PUSH
76598: LD_INT 1
76600: PLUS
76601: PPUSH
76602: LD_VAR 0 2
76606: PPUSH
76607: CALL_OW 1
76611: ST_TO_ADDR
// end ;
76612: LD_VAR 0 3
76616: RET
// export function JoinUnion ( array , element ) ; begin
76617: LD_INT 0
76619: PPUSH
// result := array union element ;
76620: LD_ADDR_VAR 0 3
76624: PUSH
76625: LD_VAR 0 1
76629: PUSH
76630: LD_VAR 0 2
76634: UNION
76635: ST_TO_ADDR
// end ;
76636: LD_VAR 0 3
76640: RET
// export function GetBehemoths ( side ) ; begin
76641: LD_INT 0
76643: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76644: LD_ADDR_VAR 0 2
76648: PUSH
76649: LD_INT 22
76651: PUSH
76652: LD_VAR 0 1
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 31
76663: PUSH
76664: LD_INT 25
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PPUSH
76675: CALL_OW 69
76679: ST_TO_ADDR
// end ;
76680: LD_VAR 0 2
76684: RET
// export function Shuffle ( array ) ; var i , index ; begin
76685: LD_INT 0
76687: PPUSH
76688: PPUSH
76689: PPUSH
// result := [ ] ;
76690: LD_ADDR_VAR 0 2
76694: PUSH
76695: EMPTY
76696: ST_TO_ADDR
// if not array then
76697: LD_VAR 0 1
76701: NOT
76702: IFFALSE 76706
// exit ;
76704: GO 76805
// Randomize ;
76706: CALL_OW 10
// for i = array downto 1 do
76710: LD_ADDR_VAR 0 3
76714: PUSH
76715: DOUBLE
76716: LD_VAR 0 1
76720: INC
76721: ST_TO_ADDR
76722: LD_INT 1
76724: PUSH
76725: FOR_DOWNTO
76726: IFFALSE 76803
// begin index := rand ( 1 , array ) ;
76728: LD_ADDR_VAR 0 4
76732: PUSH
76733: LD_INT 1
76735: PPUSH
76736: LD_VAR 0 1
76740: PPUSH
76741: CALL_OW 12
76745: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76746: LD_ADDR_VAR 0 2
76750: PUSH
76751: LD_VAR 0 2
76755: PPUSH
76756: LD_VAR 0 2
76760: PUSH
76761: LD_INT 1
76763: PLUS
76764: PPUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_VAR 0 4
76774: ARRAY
76775: PPUSH
76776: CALL_OW 2
76780: ST_TO_ADDR
// array := Delete ( array , index ) ;
76781: LD_ADDR_VAR 0 1
76785: PUSH
76786: LD_VAR 0 1
76790: PPUSH
76791: LD_VAR 0 4
76795: PPUSH
76796: CALL_OW 3
76800: ST_TO_ADDR
// end ;
76801: GO 76725
76803: POP
76804: POP
// end ;
76805: LD_VAR 0 2
76809: RET
// export function GetBaseMaterials ( base ) ; begin
76810: LD_INT 0
76812: PPUSH
// result := [ 0 , 0 , 0 ] ;
76813: LD_ADDR_VAR 0 2
76817: PUSH
76818: LD_INT 0
76820: PUSH
76821: LD_INT 0
76823: PUSH
76824: LD_INT 0
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: LIST
76831: ST_TO_ADDR
// if not base then
76832: LD_VAR 0 1
76836: NOT
76837: IFFALSE 76841
// exit ;
76839: GO 76890
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76841: LD_ADDR_VAR 0 2
76845: PUSH
76846: LD_VAR 0 1
76850: PPUSH
76851: LD_INT 1
76853: PPUSH
76854: CALL_OW 275
76858: PUSH
76859: LD_VAR 0 1
76863: PPUSH
76864: LD_INT 2
76866: PPUSH
76867: CALL_OW 275
76871: PUSH
76872: LD_VAR 0 1
76876: PPUSH
76877: LD_INT 3
76879: PPUSH
76880: CALL_OW 275
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: LIST
76889: ST_TO_ADDR
// end ;
76890: LD_VAR 0 2
76894: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76895: LD_INT 0
76897: PPUSH
76898: PPUSH
// result := array ;
76899: LD_ADDR_VAR 0 3
76903: PUSH
76904: LD_VAR 0 1
76908: ST_TO_ADDR
// if size >= result then
76909: LD_VAR 0 2
76913: PUSH
76914: LD_VAR 0 3
76918: GREATEREQUAL
76919: IFFALSE 76923
// exit ;
76921: GO 76973
// if size then
76923: LD_VAR 0 2
76927: IFFALSE 76973
// for i := array downto size do
76929: LD_ADDR_VAR 0 4
76933: PUSH
76934: DOUBLE
76935: LD_VAR 0 1
76939: INC
76940: ST_TO_ADDR
76941: LD_VAR 0 2
76945: PUSH
76946: FOR_DOWNTO
76947: IFFALSE 76971
// result := Delete ( result , result ) ;
76949: LD_ADDR_VAR 0 3
76953: PUSH
76954: LD_VAR 0 3
76958: PPUSH
76959: LD_VAR 0 3
76963: PPUSH
76964: CALL_OW 3
76968: ST_TO_ADDR
76969: GO 76946
76971: POP
76972: POP
// end ;
76973: LD_VAR 0 3
76977: RET
// export function ComExit ( unit ) ; var tmp ; begin
76978: LD_INT 0
76980: PPUSH
76981: PPUSH
// if not IsInUnit ( unit ) then
76982: LD_VAR 0 1
76986: PPUSH
76987: CALL_OW 310
76991: NOT
76992: IFFALSE 76996
// exit ;
76994: GO 77056
// tmp := IsInUnit ( unit ) ;
76996: LD_ADDR_VAR 0 3
77000: PUSH
77001: LD_VAR 0 1
77005: PPUSH
77006: CALL_OW 310
77010: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77011: LD_VAR 0 3
77015: PPUSH
77016: CALL_OW 247
77020: PUSH
77021: LD_INT 2
77023: EQUAL
77024: IFFALSE 77037
// ComExitVehicle ( unit ) else
77026: LD_VAR 0 1
77030: PPUSH
77031: CALL_OW 121
77035: GO 77046
// ComExitBuilding ( unit ) ;
77037: LD_VAR 0 1
77041: PPUSH
77042: CALL_OW 122
// result := tmp ;
77046: LD_ADDR_VAR 0 2
77050: PUSH
77051: LD_VAR 0 3
77055: ST_TO_ADDR
// end ;
77056: LD_VAR 0 2
77060: RET
// export function ComExitAll ( units ) ; var i ; begin
77061: LD_INT 0
77063: PPUSH
77064: PPUSH
// if not units then
77065: LD_VAR 0 1
77069: NOT
77070: IFFALSE 77074
// exit ;
77072: GO 77100
// for i in units do
77074: LD_ADDR_VAR 0 3
77078: PUSH
77079: LD_VAR 0 1
77083: PUSH
77084: FOR_IN
77085: IFFALSE 77098
// ComExit ( i ) ;
77087: LD_VAR 0 3
77091: PPUSH
77092: CALL 76978 0 1
77096: GO 77084
77098: POP
77099: POP
// end ;
77100: LD_VAR 0 2
77104: RET
// export function ResetHc ; begin
77105: LD_INT 0
77107: PPUSH
// InitHc ;
77108: CALL_OW 19
// hc_importance := 0 ;
77112: LD_ADDR_OWVAR 32
77116: PUSH
77117: LD_INT 0
77119: ST_TO_ADDR
// end ;
77120: LD_VAR 0 1
77124: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77125: LD_INT 0
77127: PPUSH
77128: PPUSH
77129: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77130: LD_ADDR_VAR 0 6
77134: PUSH
77135: LD_VAR 0 1
77139: PUSH
77140: LD_VAR 0 3
77144: PLUS
77145: PUSH
77146: LD_INT 2
77148: DIV
77149: ST_TO_ADDR
// if _x < 0 then
77150: LD_VAR 0 6
77154: PUSH
77155: LD_INT 0
77157: LESS
77158: IFFALSE 77175
// _x := _x * - 1 ;
77160: LD_ADDR_VAR 0 6
77164: PUSH
77165: LD_VAR 0 6
77169: PUSH
77170: LD_INT 1
77172: NEG
77173: MUL
77174: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77175: LD_ADDR_VAR 0 7
77179: PUSH
77180: LD_VAR 0 2
77184: PUSH
77185: LD_VAR 0 4
77189: PLUS
77190: PUSH
77191: LD_INT 2
77193: DIV
77194: ST_TO_ADDR
// if _y < 0 then
77195: LD_VAR 0 7
77199: PUSH
77200: LD_INT 0
77202: LESS
77203: IFFALSE 77220
// _y := _y * - 1 ;
77205: LD_ADDR_VAR 0 7
77209: PUSH
77210: LD_VAR 0 7
77214: PUSH
77215: LD_INT 1
77217: NEG
77218: MUL
77219: ST_TO_ADDR
// result := [ _x , _y ] ;
77220: LD_ADDR_VAR 0 5
77224: PUSH
77225: LD_VAR 0 6
77229: PUSH
77230: LD_VAR 0 7
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: ST_TO_ADDR
// end ;
77239: LD_VAR 0 5
77243: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77244: LD_INT 0
77246: PPUSH
77247: PPUSH
77248: PPUSH
77249: PPUSH
// task := GetTaskList ( unit ) ;
77250: LD_ADDR_VAR 0 7
77254: PUSH
77255: LD_VAR 0 1
77259: PPUSH
77260: CALL_OW 437
77264: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77265: LD_VAR 0 7
77269: NOT
77270: PUSH
77271: LD_VAR 0 1
77275: PPUSH
77276: LD_VAR 0 2
77280: PPUSH
77281: CALL_OW 308
77285: NOT
77286: AND
77287: IFFALSE 77291
// exit ;
77289: GO 77409
// if IsInArea ( unit , area ) then
77291: LD_VAR 0 1
77295: PPUSH
77296: LD_VAR 0 2
77300: PPUSH
77301: CALL_OW 308
77305: IFFALSE 77323
// begin ComMoveToArea ( unit , goAway ) ;
77307: LD_VAR 0 1
77311: PPUSH
77312: LD_VAR 0 3
77316: PPUSH
77317: CALL_OW 113
// exit ;
77321: GO 77409
// end ; if task [ 1 ] [ 1 ] <> M then
77323: LD_VAR 0 7
77327: PUSH
77328: LD_INT 1
77330: ARRAY
77331: PUSH
77332: LD_INT 1
77334: ARRAY
77335: PUSH
77336: LD_STRING M
77338: NONEQUAL
77339: IFFALSE 77343
// exit ;
77341: GO 77409
// x := task [ 1 ] [ 2 ] ;
77343: LD_ADDR_VAR 0 5
77347: PUSH
77348: LD_VAR 0 7
77352: PUSH
77353: LD_INT 1
77355: ARRAY
77356: PUSH
77357: LD_INT 2
77359: ARRAY
77360: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77361: LD_ADDR_VAR 0 6
77365: PUSH
77366: LD_VAR 0 7
77370: PUSH
77371: LD_INT 1
77373: ARRAY
77374: PUSH
77375: LD_INT 3
77377: ARRAY
77378: ST_TO_ADDR
// if InArea ( x , y , area ) then
77379: LD_VAR 0 5
77383: PPUSH
77384: LD_VAR 0 6
77388: PPUSH
77389: LD_VAR 0 2
77393: PPUSH
77394: CALL_OW 309
77398: IFFALSE 77409
// ComStop ( unit ) ;
77400: LD_VAR 0 1
77404: PPUSH
77405: CALL_OW 141
// end ;
77409: LD_VAR 0 4
77413: RET
// export function Abs ( value ) ; begin
77414: LD_INT 0
77416: PPUSH
// result := value ;
77417: LD_ADDR_VAR 0 2
77421: PUSH
77422: LD_VAR 0 1
77426: ST_TO_ADDR
// if value < 0 then
77427: LD_VAR 0 1
77431: PUSH
77432: LD_INT 0
77434: LESS
77435: IFFALSE 77452
// result := value * - 1 ;
77437: LD_ADDR_VAR 0 2
77441: PUSH
77442: LD_VAR 0 1
77446: PUSH
77447: LD_INT 1
77449: NEG
77450: MUL
77451: ST_TO_ADDR
// end ;
77452: LD_VAR 0 2
77456: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77457: LD_INT 0
77459: PPUSH
77460: PPUSH
77461: PPUSH
77462: PPUSH
77463: PPUSH
77464: PPUSH
77465: PPUSH
77466: PPUSH
// if not unit or not building then
77467: LD_VAR 0 1
77471: NOT
77472: PUSH
77473: LD_VAR 0 2
77477: NOT
77478: OR
77479: IFFALSE 77483
// exit ;
77481: GO 77709
// x := GetX ( building ) ;
77483: LD_ADDR_VAR 0 4
77487: PUSH
77488: LD_VAR 0 2
77492: PPUSH
77493: CALL_OW 250
77497: ST_TO_ADDR
// y := GetY ( building ) ;
77498: LD_ADDR_VAR 0 6
77502: PUSH
77503: LD_VAR 0 2
77507: PPUSH
77508: CALL_OW 251
77512: ST_TO_ADDR
// d := GetDir ( building ) ;
77513: LD_ADDR_VAR 0 8
77517: PUSH
77518: LD_VAR 0 2
77522: PPUSH
77523: CALL_OW 254
77527: ST_TO_ADDR
// r := 4 ;
77528: LD_ADDR_VAR 0 9
77532: PUSH
77533: LD_INT 4
77535: ST_TO_ADDR
// for i := 1 to 5 do
77536: LD_ADDR_VAR 0 10
77540: PUSH
77541: DOUBLE
77542: LD_INT 1
77544: DEC
77545: ST_TO_ADDR
77546: LD_INT 5
77548: PUSH
77549: FOR_TO
77550: IFFALSE 77707
// begin _x := ShiftX ( x , d , r + i ) ;
77552: LD_ADDR_VAR 0 5
77556: PUSH
77557: LD_VAR 0 4
77561: PPUSH
77562: LD_VAR 0 8
77566: PPUSH
77567: LD_VAR 0 9
77571: PUSH
77572: LD_VAR 0 10
77576: PLUS
77577: PPUSH
77578: CALL_OW 272
77582: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77583: LD_ADDR_VAR 0 7
77587: PUSH
77588: LD_VAR 0 6
77592: PPUSH
77593: LD_VAR 0 8
77597: PPUSH
77598: LD_VAR 0 9
77602: PUSH
77603: LD_VAR 0 10
77607: PLUS
77608: PPUSH
77609: CALL_OW 273
77613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77614: LD_VAR 0 5
77618: PPUSH
77619: LD_VAR 0 7
77623: PPUSH
77624: CALL_OW 488
77628: PUSH
77629: LD_VAR 0 5
77633: PPUSH
77634: LD_VAR 0 7
77638: PPUSH
77639: CALL_OW 428
77643: PPUSH
77644: CALL_OW 247
77648: PUSH
77649: LD_INT 3
77651: PUSH
77652: LD_INT 2
77654: PUSH
77655: EMPTY
77656: LIST
77657: LIST
77658: IN
77659: NOT
77660: AND
77661: IFFALSE 77705
// begin ComMoveXY ( unit , _x , _y ) ;
77663: LD_VAR 0 1
77667: PPUSH
77668: LD_VAR 0 5
77672: PPUSH
77673: LD_VAR 0 7
77677: PPUSH
77678: CALL_OW 111
// result := [ _x , _y ] ;
77682: LD_ADDR_VAR 0 3
77686: PUSH
77687: LD_VAR 0 5
77691: PUSH
77692: LD_VAR 0 7
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: ST_TO_ADDR
// exit ;
77701: POP
77702: POP
77703: GO 77709
// end ; end ;
77705: GO 77549
77707: POP
77708: POP
// end ;
77709: LD_VAR 0 3
77713: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77714: LD_INT 0
77716: PPUSH
77717: PPUSH
77718: PPUSH
// result := 0 ;
77719: LD_ADDR_VAR 0 3
77723: PUSH
77724: LD_INT 0
77726: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77727: LD_VAR 0 1
77731: PUSH
77732: LD_INT 0
77734: LESS
77735: PUSH
77736: LD_VAR 0 1
77740: PUSH
77741: LD_INT 8
77743: GREATER
77744: OR
77745: PUSH
77746: LD_VAR 0 2
77750: PUSH
77751: LD_INT 0
77753: LESS
77754: OR
77755: PUSH
77756: LD_VAR 0 2
77760: PUSH
77761: LD_INT 8
77763: GREATER
77764: OR
77765: IFFALSE 77769
// exit ;
77767: GO 77844
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77769: LD_ADDR_VAR 0 4
77773: PUSH
77774: LD_INT 22
77776: PUSH
77777: LD_VAR 0 2
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PPUSH
77786: CALL_OW 69
77790: PUSH
77791: FOR_IN
77792: IFFALSE 77842
// begin un := UnitShoot ( i ) ;
77794: LD_ADDR_VAR 0 5
77798: PUSH
77799: LD_VAR 0 4
77803: PPUSH
77804: CALL_OW 504
77808: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77809: LD_VAR 0 5
77813: PPUSH
77814: CALL_OW 255
77818: PUSH
77819: LD_VAR 0 1
77823: EQUAL
77824: IFFALSE 77840
// begin result := un ;
77826: LD_ADDR_VAR 0 3
77830: PUSH
77831: LD_VAR 0 5
77835: ST_TO_ADDR
// exit ;
77836: POP
77837: POP
77838: GO 77844
// end ; end ;
77840: GO 77791
77842: POP
77843: POP
// end ;
77844: LD_VAR 0 3
77848: RET
// export function GetCargoBay ( units ) ; begin
77849: LD_INT 0
77851: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77852: LD_ADDR_VAR 0 2
77856: PUSH
77857: LD_VAR 0 1
77861: PPUSH
77862: LD_INT 2
77864: PUSH
77865: LD_INT 34
77867: PUSH
77868: LD_INT 12
77870: PUSH
77871: EMPTY
77872: LIST
77873: LIST
77874: PUSH
77875: LD_INT 34
77877: PUSH
77878: LD_INT 51
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: LD_INT 34
77887: PUSH
77888: LD_INT 32
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: PUSH
77895: LD_INT 34
77897: PUSH
77898: LD_INT 89
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: PPUSH
77912: CALL_OW 72
77916: ST_TO_ADDR
// end ;
77917: LD_VAR 0 2
77921: RET
// export function Negate ( value ) ; begin
77922: LD_INT 0
77924: PPUSH
// result := not value ;
77925: LD_ADDR_VAR 0 2
77929: PUSH
77930: LD_VAR 0 1
77934: NOT
77935: ST_TO_ADDR
// end ;
77936: LD_VAR 0 2
77940: RET
// export function Inc ( value ) ; begin
77941: LD_INT 0
77943: PPUSH
// result := value + 1 ;
77944: LD_ADDR_VAR 0 2
77948: PUSH
77949: LD_VAR 0 1
77953: PUSH
77954: LD_INT 1
77956: PLUS
77957: ST_TO_ADDR
// end ;
77958: LD_VAR 0 2
77962: RET
// export function Dec ( value ) ; begin
77963: LD_INT 0
77965: PPUSH
// result := value - 1 ;
77966: LD_ADDR_VAR 0 2
77970: PUSH
77971: LD_VAR 0 1
77975: PUSH
77976: LD_INT 1
77978: MINUS
77979: ST_TO_ADDR
// end ;
77980: LD_VAR 0 2
77984: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77985: LD_INT 0
77987: PPUSH
77988: PPUSH
77989: PPUSH
77990: PPUSH
77991: PPUSH
77992: PPUSH
77993: PPUSH
77994: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77995: LD_VAR 0 1
77999: PPUSH
78000: LD_VAR 0 2
78004: PPUSH
78005: CALL_OW 488
78009: NOT
78010: PUSH
78011: LD_VAR 0 3
78015: PPUSH
78016: LD_VAR 0 4
78020: PPUSH
78021: CALL_OW 488
78025: NOT
78026: OR
78027: IFFALSE 78040
// begin result := - 1 ;
78029: LD_ADDR_VAR 0 5
78033: PUSH
78034: LD_INT 1
78036: NEG
78037: ST_TO_ADDR
// exit ;
78038: GO 78275
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78040: LD_ADDR_VAR 0 12
78044: PUSH
78045: LD_VAR 0 1
78049: PPUSH
78050: LD_VAR 0 2
78054: PPUSH
78055: LD_VAR 0 3
78059: PPUSH
78060: LD_VAR 0 4
78064: PPUSH
78065: CALL 77125 0 4
78069: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78070: LD_ADDR_VAR 0 11
78074: PUSH
78075: LD_VAR 0 1
78079: PPUSH
78080: LD_VAR 0 2
78084: PPUSH
78085: LD_VAR 0 12
78089: PUSH
78090: LD_INT 1
78092: ARRAY
78093: PPUSH
78094: LD_VAR 0 12
78098: PUSH
78099: LD_INT 2
78101: ARRAY
78102: PPUSH
78103: CALL_OW 298
78107: ST_TO_ADDR
// distance := 9999 ;
78108: LD_ADDR_VAR 0 10
78112: PUSH
78113: LD_INT 9999
78115: ST_TO_ADDR
// for i := 0 to 5 do
78116: LD_ADDR_VAR 0 6
78120: PUSH
78121: DOUBLE
78122: LD_INT 0
78124: DEC
78125: ST_TO_ADDR
78126: LD_INT 5
78128: PUSH
78129: FOR_TO
78130: IFFALSE 78273
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78132: LD_ADDR_VAR 0 7
78136: PUSH
78137: LD_VAR 0 1
78141: PPUSH
78142: LD_VAR 0 6
78146: PPUSH
78147: LD_VAR 0 11
78151: PPUSH
78152: CALL_OW 272
78156: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78157: LD_ADDR_VAR 0 8
78161: PUSH
78162: LD_VAR 0 2
78166: PPUSH
78167: LD_VAR 0 6
78171: PPUSH
78172: LD_VAR 0 11
78176: PPUSH
78177: CALL_OW 273
78181: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78182: LD_VAR 0 7
78186: PPUSH
78187: LD_VAR 0 8
78191: PPUSH
78192: CALL_OW 488
78196: NOT
78197: IFFALSE 78201
// continue ;
78199: GO 78129
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78201: LD_ADDR_VAR 0 9
78205: PUSH
78206: LD_VAR 0 12
78210: PUSH
78211: LD_INT 1
78213: ARRAY
78214: PPUSH
78215: LD_VAR 0 12
78219: PUSH
78220: LD_INT 2
78222: ARRAY
78223: PPUSH
78224: LD_VAR 0 7
78228: PPUSH
78229: LD_VAR 0 8
78233: PPUSH
78234: CALL_OW 298
78238: ST_TO_ADDR
// if tmp < distance then
78239: LD_VAR 0 9
78243: PUSH
78244: LD_VAR 0 10
78248: LESS
78249: IFFALSE 78271
// begin result := i ;
78251: LD_ADDR_VAR 0 5
78255: PUSH
78256: LD_VAR 0 6
78260: ST_TO_ADDR
// distance := tmp ;
78261: LD_ADDR_VAR 0 10
78265: PUSH
78266: LD_VAR 0 9
78270: ST_TO_ADDR
// end ; end ;
78271: GO 78129
78273: POP
78274: POP
// end ;
78275: LD_VAR 0 5
78279: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78280: LD_INT 0
78282: PPUSH
78283: PPUSH
// if not driver or not IsInUnit ( driver ) then
78284: LD_VAR 0 1
78288: NOT
78289: PUSH
78290: LD_VAR 0 1
78294: PPUSH
78295: CALL_OW 310
78299: NOT
78300: OR
78301: IFFALSE 78305
// exit ;
78303: GO 78395
// vehicle := IsInUnit ( driver ) ;
78305: LD_ADDR_VAR 0 3
78309: PUSH
78310: LD_VAR 0 1
78314: PPUSH
78315: CALL_OW 310
78319: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78320: LD_VAR 0 1
78324: PPUSH
78325: LD_STRING \
78327: PUSH
78328: LD_INT 0
78330: PUSH
78331: LD_INT 0
78333: PUSH
78334: LD_INT 0
78336: PUSH
78337: LD_INT 0
78339: PUSH
78340: LD_INT 0
78342: PUSH
78343: LD_INT 0
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: PUSH
78355: LD_STRING E
78357: PUSH
78358: LD_INT 0
78360: PUSH
78361: LD_INT 0
78363: PUSH
78364: LD_VAR 0 3
78368: PUSH
78369: LD_INT 0
78371: PUSH
78372: LD_INT 0
78374: PUSH
78375: LD_INT 0
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PPUSH
78391: CALL_OW 446
// end ;
78395: LD_VAR 0 2
78399: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78400: LD_INT 0
78402: PPUSH
78403: PPUSH
// if not driver or not IsInUnit ( driver ) then
78404: LD_VAR 0 1
78408: NOT
78409: PUSH
78410: LD_VAR 0 1
78414: PPUSH
78415: CALL_OW 310
78419: NOT
78420: OR
78421: IFFALSE 78425
// exit ;
78423: GO 78515
// vehicle := IsInUnit ( driver ) ;
78425: LD_ADDR_VAR 0 3
78429: PUSH
78430: LD_VAR 0 1
78434: PPUSH
78435: CALL_OW 310
78439: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78440: LD_VAR 0 1
78444: PPUSH
78445: LD_STRING \
78447: PUSH
78448: LD_INT 0
78450: PUSH
78451: LD_INT 0
78453: PUSH
78454: LD_INT 0
78456: PUSH
78457: LD_INT 0
78459: PUSH
78460: LD_INT 0
78462: PUSH
78463: LD_INT 0
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: LIST
78470: LIST
78471: LIST
78472: LIST
78473: LIST
78474: PUSH
78475: LD_STRING E
78477: PUSH
78478: LD_INT 0
78480: PUSH
78481: LD_INT 0
78483: PUSH
78484: LD_VAR 0 3
78488: PUSH
78489: LD_INT 0
78491: PUSH
78492: LD_INT 0
78494: PUSH
78495: LD_INT 0
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PPUSH
78511: CALL_OW 447
// end ;
78515: LD_VAR 0 2
78519: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78520: LD_INT 0
78522: PPUSH
78523: PPUSH
78524: PPUSH
// tmp := [ ] ;
78525: LD_ADDR_VAR 0 5
78529: PUSH
78530: EMPTY
78531: ST_TO_ADDR
// for i in units do
78532: LD_ADDR_VAR 0 4
78536: PUSH
78537: LD_VAR 0 1
78541: PUSH
78542: FOR_IN
78543: IFFALSE 78581
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78545: LD_ADDR_VAR 0 5
78549: PUSH
78550: LD_VAR 0 5
78554: PPUSH
78555: LD_VAR 0 5
78559: PUSH
78560: LD_INT 1
78562: PLUS
78563: PPUSH
78564: LD_VAR 0 4
78568: PPUSH
78569: CALL_OW 256
78573: PPUSH
78574: CALL_OW 2
78578: ST_TO_ADDR
78579: GO 78542
78581: POP
78582: POP
// if not tmp then
78583: LD_VAR 0 5
78587: NOT
78588: IFFALSE 78592
// exit ;
78590: GO 78640
// if asc then
78592: LD_VAR 0 2
78596: IFFALSE 78620
// result := SortListByListAsc ( units , tmp ) else
78598: LD_ADDR_VAR 0 3
78602: PUSH
78603: LD_VAR 0 1
78607: PPUSH
78608: LD_VAR 0 5
78612: PPUSH
78613: CALL_OW 76
78617: ST_TO_ADDR
78618: GO 78640
// result := SortListByListDesc ( units , tmp ) ;
78620: LD_ADDR_VAR 0 3
78624: PUSH
78625: LD_VAR 0 1
78629: PPUSH
78630: LD_VAR 0 5
78634: PPUSH
78635: CALL_OW 77
78639: ST_TO_ADDR
// end ;
78640: LD_VAR 0 3
78644: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78645: LD_INT 0
78647: PPUSH
78648: PPUSH
// task := GetTaskList ( mech ) ;
78649: LD_ADDR_VAR 0 4
78653: PUSH
78654: LD_VAR 0 1
78658: PPUSH
78659: CALL_OW 437
78663: ST_TO_ADDR
// if not task then
78664: LD_VAR 0 4
78668: NOT
78669: IFFALSE 78673
// exit ;
78671: GO 78715
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78673: LD_ADDR_VAR 0 3
78677: PUSH
78678: LD_VAR 0 4
78682: PUSH
78683: LD_INT 1
78685: ARRAY
78686: PUSH
78687: LD_INT 1
78689: ARRAY
78690: PUSH
78691: LD_STRING r
78693: EQUAL
78694: PUSH
78695: LD_VAR 0 4
78699: PUSH
78700: LD_INT 1
78702: ARRAY
78703: PUSH
78704: LD_INT 4
78706: ARRAY
78707: PUSH
78708: LD_VAR 0 2
78712: EQUAL
78713: AND
78714: ST_TO_ADDR
// end ;
78715: LD_VAR 0 3
78719: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78720: LD_INT 0
78722: PPUSH
// SetDir ( unit , d ) ;
78723: LD_VAR 0 1
78727: PPUSH
78728: LD_VAR 0 4
78732: PPUSH
78733: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78737: LD_VAR 0 1
78741: PPUSH
78742: LD_VAR 0 2
78746: PPUSH
78747: LD_VAR 0 3
78751: PPUSH
78752: LD_VAR 0 5
78756: PPUSH
78757: CALL_OW 48
// end ;
78761: LD_VAR 0 6
78765: RET
// export function ToNaturalNumber ( number ) ; begin
78766: LD_INT 0
78768: PPUSH
// result := number div 1 ;
78769: LD_ADDR_VAR 0 2
78773: PUSH
78774: LD_VAR 0 1
78778: PUSH
78779: LD_INT 1
78781: DIV
78782: ST_TO_ADDR
// if number < 0 then
78783: LD_VAR 0 1
78787: PUSH
78788: LD_INT 0
78790: LESS
78791: IFFALSE 78801
// result := 0 ;
78793: LD_ADDR_VAR 0 2
78797: PUSH
78798: LD_INT 0
78800: ST_TO_ADDR
// end ;
78801: LD_VAR 0 2
78805: RET
// export function SortByClass ( units , class ) ; var un ; begin
78806: LD_INT 0
78808: PPUSH
78809: PPUSH
// if not units or not class then
78810: LD_VAR 0 1
78814: NOT
78815: PUSH
78816: LD_VAR 0 2
78820: NOT
78821: OR
78822: IFFALSE 78826
// exit ;
78824: GO 78921
// result := [ ] ;
78826: LD_ADDR_VAR 0 3
78830: PUSH
78831: EMPTY
78832: ST_TO_ADDR
// for un in units do
78833: LD_ADDR_VAR 0 4
78837: PUSH
78838: LD_VAR 0 1
78842: PUSH
78843: FOR_IN
78844: IFFALSE 78919
// if GetClass ( un ) = class then
78846: LD_VAR 0 4
78850: PPUSH
78851: CALL_OW 257
78855: PUSH
78856: LD_VAR 0 2
78860: EQUAL
78861: IFFALSE 78888
// result := Insert ( result , 1 , un ) else
78863: LD_ADDR_VAR 0 3
78867: PUSH
78868: LD_VAR 0 3
78872: PPUSH
78873: LD_INT 1
78875: PPUSH
78876: LD_VAR 0 4
78880: PPUSH
78881: CALL_OW 2
78885: ST_TO_ADDR
78886: GO 78917
// result := Replace ( result , result + 1 , un ) ;
78888: LD_ADDR_VAR 0 3
78892: PUSH
78893: LD_VAR 0 3
78897: PPUSH
78898: LD_VAR 0 3
78902: PUSH
78903: LD_INT 1
78905: PLUS
78906: PPUSH
78907: LD_VAR 0 4
78911: PPUSH
78912: CALL_OW 1
78916: ST_TO_ADDR
78917: GO 78843
78919: POP
78920: POP
// end ;
78921: LD_VAR 0 3
78925: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78926: LD_INT 0
78928: PPUSH
78929: PPUSH
78930: PPUSH
78931: PPUSH
78932: PPUSH
78933: PPUSH
78934: PPUSH
// result := [ ] ;
78935: LD_ADDR_VAR 0 4
78939: PUSH
78940: EMPTY
78941: ST_TO_ADDR
// if x - r < 0 then
78942: LD_VAR 0 1
78946: PUSH
78947: LD_VAR 0 3
78951: MINUS
78952: PUSH
78953: LD_INT 0
78955: LESS
78956: IFFALSE 78968
// min_x := 0 else
78958: LD_ADDR_VAR 0 8
78962: PUSH
78963: LD_INT 0
78965: ST_TO_ADDR
78966: GO 78984
// min_x := x - r ;
78968: LD_ADDR_VAR 0 8
78972: PUSH
78973: LD_VAR 0 1
78977: PUSH
78978: LD_VAR 0 3
78982: MINUS
78983: ST_TO_ADDR
// if y - r < 0 then
78984: LD_VAR 0 2
78988: PUSH
78989: LD_VAR 0 3
78993: MINUS
78994: PUSH
78995: LD_INT 0
78997: LESS
78998: IFFALSE 79010
// min_y := 0 else
79000: LD_ADDR_VAR 0 7
79004: PUSH
79005: LD_INT 0
79007: ST_TO_ADDR
79008: GO 79026
// min_y := y - r ;
79010: LD_ADDR_VAR 0 7
79014: PUSH
79015: LD_VAR 0 2
79019: PUSH
79020: LD_VAR 0 3
79024: MINUS
79025: ST_TO_ADDR
// max_x := x + r ;
79026: LD_ADDR_VAR 0 9
79030: PUSH
79031: LD_VAR 0 1
79035: PUSH
79036: LD_VAR 0 3
79040: PLUS
79041: ST_TO_ADDR
// max_y := y + r ;
79042: LD_ADDR_VAR 0 10
79046: PUSH
79047: LD_VAR 0 2
79051: PUSH
79052: LD_VAR 0 3
79056: PLUS
79057: ST_TO_ADDR
// for _x = min_x to max_x do
79058: LD_ADDR_VAR 0 5
79062: PUSH
79063: DOUBLE
79064: LD_VAR 0 8
79068: DEC
79069: ST_TO_ADDR
79070: LD_VAR 0 9
79074: PUSH
79075: FOR_TO
79076: IFFALSE 79177
// for _y = min_y to max_y do
79078: LD_ADDR_VAR 0 6
79082: PUSH
79083: DOUBLE
79084: LD_VAR 0 7
79088: DEC
79089: ST_TO_ADDR
79090: LD_VAR 0 10
79094: PUSH
79095: FOR_TO
79096: IFFALSE 79173
// begin if not ValidHex ( _x , _y ) then
79098: LD_VAR 0 5
79102: PPUSH
79103: LD_VAR 0 6
79107: PPUSH
79108: CALL_OW 488
79112: NOT
79113: IFFALSE 79117
// continue ;
79115: GO 79095
// if GetResourceTypeXY ( _x , _y ) then
79117: LD_VAR 0 5
79121: PPUSH
79122: LD_VAR 0 6
79126: PPUSH
79127: CALL_OW 283
79131: IFFALSE 79171
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79133: LD_ADDR_VAR 0 4
79137: PUSH
79138: LD_VAR 0 4
79142: PPUSH
79143: LD_VAR 0 4
79147: PUSH
79148: LD_INT 1
79150: PLUS
79151: PPUSH
79152: LD_VAR 0 5
79156: PUSH
79157: LD_VAR 0 6
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: PPUSH
79166: CALL_OW 1
79170: ST_TO_ADDR
// end ;
79171: GO 79095
79173: POP
79174: POP
79175: GO 79075
79177: POP
79178: POP
// end ;
79179: LD_VAR 0 4
79183: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79184: LD_INT 0
79186: PPUSH
79187: PPUSH
79188: PPUSH
79189: PPUSH
79190: PPUSH
79191: PPUSH
79192: PPUSH
79193: PPUSH
// if not units then
79194: LD_VAR 0 1
79198: NOT
79199: IFFALSE 79203
// exit ;
79201: GO 79727
// result := UnitFilter ( units , [ f_ok ] ) ;
79203: LD_ADDR_VAR 0 3
79207: PUSH
79208: LD_VAR 0 1
79212: PPUSH
79213: LD_INT 50
79215: PUSH
79216: EMPTY
79217: LIST
79218: PPUSH
79219: CALL_OW 72
79223: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79224: LD_ADDR_VAR 0 8
79228: PUSH
79229: LD_VAR 0 1
79233: PUSH
79234: LD_INT 1
79236: ARRAY
79237: PPUSH
79238: CALL_OW 255
79242: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79243: LD_ADDR_VAR 0 10
79247: PUSH
79248: LD_INT 29
79250: PUSH
79251: LD_INT 91
79253: PUSH
79254: LD_INT 49
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: LIST
79261: ST_TO_ADDR
// if not result then
79262: LD_VAR 0 3
79266: NOT
79267: IFFALSE 79271
// exit ;
79269: GO 79727
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79271: LD_ADDR_VAR 0 5
79275: PUSH
79276: LD_INT 81
79278: PUSH
79279: LD_VAR 0 8
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PPUSH
79288: CALL_OW 69
79292: ST_TO_ADDR
// for i in result do
79293: LD_ADDR_VAR 0 4
79297: PUSH
79298: LD_VAR 0 3
79302: PUSH
79303: FOR_IN
79304: IFFALSE 79725
// begin tag := GetTag ( i ) + 1 ;
79306: LD_ADDR_VAR 0 9
79310: PUSH
79311: LD_VAR 0 4
79315: PPUSH
79316: CALL_OW 110
79320: PUSH
79321: LD_INT 1
79323: PLUS
79324: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79325: LD_ADDR_VAR 0 7
79329: PUSH
79330: LD_VAR 0 4
79334: PPUSH
79335: CALL_OW 250
79339: PPUSH
79340: LD_VAR 0 4
79344: PPUSH
79345: CALL_OW 251
79349: PPUSH
79350: LD_INT 6
79352: PPUSH
79353: CALL 78926 0 3
79357: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79358: LD_VAR 0 4
79362: PPUSH
79363: CALL_OW 247
79367: PUSH
79368: LD_INT 2
79370: EQUAL
79371: PUSH
79372: LD_VAR 0 7
79376: AND
79377: PUSH
79378: LD_VAR 0 4
79382: PPUSH
79383: CALL_OW 264
79387: PUSH
79388: LD_VAR 0 10
79392: IN
79393: NOT
79394: AND
79395: IFFALSE 79434
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79397: LD_VAR 0 4
79401: PPUSH
79402: LD_VAR 0 7
79406: PUSH
79407: LD_INT 1
79409: ARRAY
79410: PUSH
79411: LD_INT 1
79413: ARRAY
79414: PPUSH
79415: LD_VAR 0 7
79419: PUSH
79420: LD_INT 1
79422: ARRAY
79423: PUSH
79424: LD_INT 2
79426: ARRAY
79427: PPUSH
79428: CALL_OW 116
79432: GO 79723
// if path > tag then
79434: LD_VAR 0 2
79438: PUSH
79439: LD_VAR 0 9
79443: GREATER
79444: IFFALSE 79652
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79446: LD_ADDR_VAR 0 6
79450: PUSH
79451: LD_VAR 0 5
79455: PPUSH
79456: LD_INT 91
79458: PUSH
79459: LD_VAR 0 4
79463: PUSH
79464: LD_INT 8
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: LIST
79471: PPUSH
79472: CALL_OW 72
79476: ST_TO_ADDR
// if nearEnemy then
79477: LD_VAR 0 6
79481: IFFALSE 79550
// begin if GetWeapon ( i ) = ru_time_lapser then
79483: LD_VAR 0 4
79487: PPUSH
79488: CALL_OW 264
79492: PUSH
79493: LD_INT 49
79495: EQUAL
79496: IFFALSE 79524
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79498: LD_VAR 0 4
79502: PPUSH
79503: LD_VAR 0 6
79507: PPUSH
79508: LD_VAR 0 4
79512: PPUSH
79513: CALL_OW 74
79517: PPUSH
79518: CALL_OW 112
79522: GO 79548
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79524: LD_VAR 0 4
79528: PPUSH
79529: LD_VAR 0 6
79533: PPUSH
79534: LD_VAR 0 4
79538: PPUSH
79539: CALL_OW 74
79543: PPUSH
79544: CALL 80652 0 2
// end else
79548: GO 79650
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79550: LD_VAR 0 4
79554: PPUSH
79555: LD_VAR 0 2
79559: PUSH
79560: LD_VAR 0 9
79564: ARRAY
79565: PUSH
79566: LD_INT 1
79568: ARRAY
79569: PPUSH
79570: LD_VAR 0 2
79574: PUSH
79575: LD_VAR 0 9
79579: ARRAY
79580: PUSH
79581: LD_INT 2
79583: ARRAY
79584: PPUSH
79585: CALL_OW 297
79589: PUSH
79590: LD_INT 6
79592: GREATER
79593: IFFALSE 79636
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79595: LD_VAR 0 4
79599: PPUSH
79600: LD_VAR 0 2
79604: PUSH
79605: LD_VAR 0 9
79609: ARRAY
79610: PUSH
79611: LD_INT 1
79613: ARRAY
79614: PPUSH
79615: LD_VAR 0 2
79619: PUSH
79620: LD_VAR 0 9
79624: ARRAY
79625: PUSH
79626: LD_INT 2
79628: ARRAY
79629: PPUSH
79630: CALL_OW 114
79634: GO 79650
// SetTag ( i , tag ) ;
79636: LD_VAR 0 4
79640: PPUSH
79641: LD_VAR 0 9
79645: PPUSH
79646: CALL_OW 109
// end else
79650: GO 79723
// if enemy then
79652: LD_VAR 0 5
79656: IFFALSE 79723
// begin if GetWeapon ( i ) = ru_time_lapser then
79658: LD_VAR 0 4
79662: PPUSH
79663: CALL_OW 264
79667: PUSH
79668: LD_INT 49
79670: EQUAL
79671: IFFALSE 79699
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79673: LD_VAR 0 4
79677: PPUSH
79678: LD_VAR 0 5
79682: PPUSH
79683: LD_VAR 0 4
79687: PPUSH
79688: CALL_OW 74
79692: PPUSH
79693: CALL_OW 112
79697: GO 79723
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79699: LD_VAR 0 4
79703: PPUSH
79704: LD_VAR 0 5
79708: PPUSH
79709: LD_VAR 0 4
79713: PPUSH
79714: CALL_OW 74
79718: PPUSH
79719: CALL 80652 0 2
// end ; end ;
79723: GO 79303
79725: POP
79726: POP
// end ;
79727: LD_VAR 0 3
79731: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79732: LD_INT 0
79734: PPUSH
79735: PPUSH
79736: PPUSH
// if not unit or IsInUnit ( unit ) then
79737: LD_VAR 0 1
79741: NOT
79742: PUSH
79743: LD_VAR 0 1
79747: PPUSH
79748: CALL_OW 310
79752: OR
79753: IFFALSE 79757
// exit ;
79755: GO 79848
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79757: LD_ADDR_VAR 0 4
79761: PUSH
79762: LD_VAR 0 1
79766: PPUSH
79767: CALL_OW 250
79771: PPUSH
79772: LD_VAR 0 2
79776: PPUSH
79777: LD_INT 1
79779: PPUSH
79780: CALL_OW 272
79784: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79785: LD_ADDR_VAR 0 5
79789: PUSH
79790: LD_VAR 0 1
79794: PPUSH
79795: CALL_OW 251
79799: PPUSH
79800: LD_VAR 0 2
79804: PPUSH
79805: LD_INT 1
79807: PPUSH
79808: CALL_OW 273
79812: ST_TO_ADDR
// if ValidHex ( x , y ) then
79813: LD_VAR 0 4
79817: PPUSH
79818: LD_VAR 0 5
79822: PPUSH
79823: CALL_OW 488
79827: IFFALSE 79848
// ComTurnXY ( unit , x , y ) ;
79829: LD_VAR 0 1
79833: PPUSH
79834: LD_VAR 0 4
79838: PPUSH
79839: LD_VAR 0 5
79843: PPUSH
79844: CALL_OW 118
// end ;
79848: LD_VAR 0 3
79852: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79853: LD_INT 0
79855: PPUSH
79856: PPUSH
// result := false ;
79857: LD_ADDR_VAR 0 3
79861: PUSH
79862: LD_INT 0
79864: ST_TO_ADDR
// if not units then
79865: LD_VAR 0 2
79869: NOT
79870: IFFALSE 79874
// exit ;
79872: GO 79919
// for i in units do
79874: LD_ADDR_VAR 0 4
79878: PUSH
79879: LD_VAR 0 2
79883: PUSH
79884: FOR_IN
79885: IFFALSE 79917
// if See ( side , i ) then
79887: LD_VAR 0 1
79891: PPUSH
79892: LD_VAR 0 4
79896: PPUSH
79897: CALL_OW 292
79901: IFFALSE 79915
// begin result := true ;
79903: LD_ADDR_VAR 0 3
79907: PUSH
79908: LD_INT 1
79910: ST_TO_ADDR
// exit ;
79911: POP
79912: POP
79913: GO 79919
// end ;
79915: GO 79884
79917: POP
79918: POP
// end ;
79919: LD_VAR 0 3
79923: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79924: LD_INT 0
79926: PPUSH
79927: PPUSH
79928: PPUSH
79929: PPUSH
// if not unit or not points then
79930: LD_VAR 0 1
79934: NOT
79935: PUSH
79936: LD_VAR 0 2
79940: NOT
79941: OR
79942: IFFALSE 79946
// exit ;
79944: GO 80036
// dist := 99999 ;
79946: LD_ADDR_VAR 0 5
79950: PUSH
79951: LD_INT 99999
79953: ST_TO_ADDR
// for i in points do
79954: LD_ADDR_VAR 0 4
79958: PUSH
79959: LD_VAR 0 2
79963: PUSH
79964: FOR_IN
79965: IFFALSE 80034
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79967: LD_ADDR_VAR 0 6
79971: PUSH
79972: LD_VAR 0 1
79976: PPUSH
79977: LD_VAR 0 4
79981: PUSH
79982: LD_INT 1
79984: ARRAY
79985: PPUSH
79986: LD_VAR 0 4
79990: PUSH
79991: LD_INT 2
79993: ARRAY
79994: PPUSH
79995: CALL_OW 297
79999: ST_TO_ADDR
// if tmpDist < dist then
80000: LD_VAR 0 6
80004: PUSH
80005: LD_VAR 0 5
80009: LESS
80010: IFFALSE 80032
// begin result := i ;
80012: LD_ADDR_VAR 0 3
80016: PUSH
80017: LD_VAR 0 4
80021: ST_TO_ADDR
// dist := tmpDist ;
80022: LD_ADDR_VAR 0 5
80026: PUSH
80027: LD_VAR 0 6
80031: ST_TO_ADDR
// end ; end ;
80032: GO 79964
80034: POP
80035: POP
// end ;
80036: LD_VAR 0 3
80040: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80041: LD_INT 0
80043: PPUSH
// uc_side := side ;
80044: LD_ADDR_OWVAR 20
80048: PUSH
80049: LD_VAR 0 1
80053: ST_TO_ADDR
// uc_nation := 3 ;
80054: LD_ADDR_OWVAR 21
80058: PUSH
80059: LD_INT 3
80061: ST_TO_ADDR
// vc_chassis := 25 ;
80062: LD_ADDR_OWVAR 37
80066: PUSH
80067: LD_INT 25
80069: ST_TO_ADDR
// vc_engine := engine_siberite ;
80070: LD_ADDR_OWVAR 39
80074: PUSH
80075: LD_INT 3
80077: ST_TO_ADDR
// vc_control := control_computer ;
80078: LD_ADDR_OWVAR 38
80082: PUSH
80083: LD_INT 3
80085: ST_TO_ADDR
// vc_weapon := 59 ;
80086: LD_ADDR_OWVAR 40
80090: PUSH
80091: LD_INT 59
80093: ST_TO_ADDR
// result := CreateVehicle ;
80094: LD_ADDR_VAR 0 5
80098: PUSH
80099: CALL_OW 45
80103: ST_TO_ADDR
// SetDir ( result , d ) ;
80104: LD_VAR 0 5
80108: PPUSH
80109: LD_VAR 0 4
80113: PPUSH
80114: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80118: LD_VAR 0 5
80122: PPUSH
80123: LD_VAR 0 2
80127: PPUSH
80128: LD_VAR 0 3
80132: PPUSH
80133: LD_INT 0
80135: PPUSH
80136: CALL_OW 48
// end ;
80140: LD_VAR 0 5
80144: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80145: LD_INT 0
80147: PPUSH
80148: PPUSH
80149: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80150: LD_ADDR_VAR 0 2
80154: PUSH
80155: LD_INT 0
80157: PUSH
80158: LD_INT 0
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: LD_INT 0
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80173: LD_VAR 0 1
80177: NOT
80178: PUSH
80179: LD_VAR 0 1
80183: PPUSH
80184: CALL_OW 264
80188: PUSH
80189: LD_INT 12
80191: PUSH
80192: LD_INT 51
80194: PUSH
80195: LD_INT 32
80197: PUSH
80198: LD_INT 89
80200: PUSH
80201: EMPTY
80202: LIST
80203: LIST
80204: LIST
80205: LIST
80206: IN
80207: NOT
80208: OR
80209: IFFALSE 80213
// exit ;
80211: GO 80311
// for i := 1 to 3 do
80213: LD_ADDR_VAR 0 3
80217: PUSH
80218: DOUBLE
80219: LD_INT 1
80221: DEC
80222: ST_TO_ADDR
80223: LD_INT 3
80225: PUSH
80226: FOR_TO
80227: IFFALSE 80309
// begin tmp := GetCargo ( cargo , i ) ;
80229: LD_ADDR_VAR 0 4
80233: PUSH
80234: LD_VAR 0 1
80238: PPUSH
80239: LD_VAR 0 3
80243: PPUSH
80244: CALL_OW 289
80248: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80249: LD_ADDR_VAR 0 2
80253: PUSH
80254: LD_VAR 0 2
80258: PPUSH
80259: LD_VAR 0 3
80263: PPUSH
80264: LD_VAR 0 4
80268: PPUSH
80269: CALL_OW 1
80273: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80274: LD_ADDR_VAR 0 2
80278: PUSH
80279: LD_VAR 0 2
80283: PPUSH
80284: LD_INT 4
80286: PPUSH
80287: LD_VAR 0 2
80291: PUSH
80292: LD_INT 4
80294: ARRAY
80295: PUSH
80296: LD_VAR 0 4
80300: PLUS
80301: PPUSH
80302: CALL_OW 1
80306: ST_TO_ADDR
// end ;
80307: GO 80226
80309: POP
80310: POP
// end ;
80311: LD_VAR 0 2
80315: RET
// export function Length ( array ) ; begin
80316: LD_INT 0
80318: PPUSH
// result := array + 0 ;
80319: LD_ADDR_VAR 0 2
80323: PUSH
80324: LD_VAR 0 1
80328: PUSH
80329: LD_INT 0
80331: PLUS
80332: ST_TO_ADDR
// end ;
80333: LD_VAR 0 2
80337: RET
// export function PrepareArray ( array ) ; begin
80338: LD_INT 0
80340: PPUSH
// result := array diff 0 ;
80341: LD_ADDR_VAR 0 2
80345: PUSH
80346: LD_VAR 0 1
80350: PUSH
80351: LD_INT 0
80353: DIFF
80354: ST_TO_ADDR
// if not result [ 1 ] then
80355: LD_VAR 0 2
80359: PUSH
80360: LD_INT 1
80362: ARRAY
80363: NOT
80364: IFFALSE 80384
// result := Delete ( result , 1 ) ;
80366: LD_ADDR_VAR 0 2
80370: PUSH
80371: LD_VAR 0 2
80375: PPUSH
80376: LD_INT 1
80378: PPUSH
80379: CALL_OW 3
80383: ST_TO_ADDR
// end ;
80384: LD_VAR 0 2
80388: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80389: LD_INT 0
80391: PPUSH
80392: PPUSH
80393: PPUSH
80394: PPUSH
// sibRocketRange := 25 ;
80395: LD_ADDR_VAR 0 6
80399: PUSH
80400: LD_INT 25
80402: ST_TO_ADDR
// result := false ;
80403: LD_ADDR_VAR 0 4
80407: PUSH
80408: LD_INT 0
80410: ST_TO_ADDR
// for i := 0 to 5 do
80411: LD_ADDR_VAR 0 5
80415: PUSH
80416: DOUBLE
80417: LD_INT 0
80419: DEC
80420: ST_TO_ADDR
80421: LD_INT 5
80423: PUSH
80424: FOR_TO
80425: IFFALSE 80492
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80427: LD_VAR 0 1
80431: PPUSH
80432: LD_VAR 0 5
80436: PPUSH
80437: LD_VAR 0 6
80441: PPUSH
80442: CALL_OW 272
80446: PPUSH
80447: LD_VAR 0 2
80451: PPUSH
80452: LD_VAR 0 5
80456: PPUSH
80457: LD_VAR 0 6
80461: PPUSH
80462: CALL_OW 273
80466: PPUSH
80467: LD_VAR 0 3
80471: PPUSH
80472: CALL_OW 309
80476: IFFALSE 80490
// begin result := true ;
80478: LD_ADDR_VAR 0 4
80482: PUSH
80483: LD_INT 1
80485: ST_TO_ADDR
// exit ;
80486: POP
80487: POP
80488: GO 80494
// end ;
80490: GO 80424
80492: POP
80493: POP
// end ;
80494: LD_VAR 0 4
80498: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80499: LD_INT 0
80501: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80502: LD_VAR 0 1
80506: PPUSH
80507: LD_VAR 0 2
80511: PPUSH
80512: LD_INT 0
80514: PPUSH
80515: LD_INT 0
80517: PPUSH
80518: LD_INT 1
80520: PPUSH
80521: LD_INT 0
80523: PPUSH
80524: CALL_OW 587
// end ;
80528: LD_VAR 0 3
80532: RET
// export function CenterOnNow ( unit ) ; begin
80533: LD_INT 0
80535: PPUSH
// result := IsInUnit ( unit ) ;
80536: LD_ADDR_VAR 0 2
80540: PUSH
80541: LD_VAR 0 1
80545: PPUSH
80546: CALL_OW 310
80550: ST_TO_ADDR
// if not result then
80551: LD_VAR 0 2
80555: NOT
80556: IFFALSE 80568
// result := unit ;
80558: LD_ADDR_VAR 0 2
80562: PUSH
80563: LD_VAR 0 1
80567: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80568: LD_VAR 0 1
80572: PPUSH
80573: CALL_OW 87
// end ;
80577: LD_VAR 0 2
80581: RET
// export function ComMoveHex ( unit , hex ) ; begin
80582: LD_INT 0
80584: PPUSH
// if not hex then
80585: LD_VAR 0 2
80589: NOT
80590: IFFALSE 80594
// exit ;
80592: GO 80647
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80594: LD_VAR 0 2
80598: PUSH
80599: LD_INT 1
80601: ARRAY
80602: PPUSH
80603: LD_VAR 0 2
80607: PUSH
80608: LD_INT 2
80610: ARRAY
80611: PPUSH
80612: CALL_OW 428
80616: IFFALSE 80620
// exit ;
80618: GO 80647
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80620: LD_VAR 0 1
80624: PPUSH
80625: LD_VAR 0 2
80629: PUSH
80630: LD_INT 1
80632: ARRAY
80633: PPUSH
80634: LD_VAR 0 2
80638: PUSH
80639: LD_INT 2
80641: ARRAY
80642: PPUSH
80643: CALL_OW 111
// end ;
80647: LD_VAR 0 3
80651: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80652: LD_INT 0
80654: PPUSH
80655: PPUSH
80656: PPUSH
// if not unit or not enemy then
80657: LD_VAR 0 1
80661: NOT
80662: PUSH
80663: LD_VAR 0 2
80667: NOT
80668: OR
80669: IFFALSE 80673
// exit ;
80671: GO 80797
// x := GetX ( enemy ) ;
80673: LD_ADDR_VAR 0 4
80677: PUSH
80678: LD_VAR 0 2
80682: PPUSH
80683: CALL_OW 250
80687: ST_TO_ADDR
// y := GetY ( enemy ) ;
80688: LD_ADDR_VAR 0 5
80692: PUSH
80693: LD_VAR 0 2
80697: PPUSH
80698: CALL_OW 251
80702: ST_TO_ADDR
// if ValidHex ( x , y ) then
80703: LD_VAR 0 4
80707: PPUSH
80708: LD_VAR 0 5
80712: PPUSH
80713: CALL_OW 488
80717: IFFALSE 80797
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80719: LD_VAR 0 2
80723: PPUSH
80724: CALL_OW 247
80728: PUSH
80729: LD_INT 3
80731: PUSH
80732: LD_INT 2
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: IN
80739: PUSH
80740: LD_VAR 0 1
80744: PPUSH
80745: CALL_OW 255
80749: PPUSH
80750: LD_VAR 0 2
80754: PPUSH
80755: CALL_OW 292
80759: AND
80760: IFFALSE 80778
// ComAttackUnit ( unit , enemy ) else
80762: LD_VAR 0 1
80766: PPUSH
80767: LD_VAR 0 2
80771: PPUSH
80772: CALL_OW 115
80776: GO 80797
// ComAgressiveMove ( unit , x , y ) ;
80778: LD_VAR 0 1
80782: PPUSH
80783: LD_VAR 0 4
80787: PPUSH
80788: LD_VAR 0 5
80792: PPUSH
80793: CALL_OW 114
// end ; end_of_file
80797: LD_VAR 0 3
80801: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80802: LD_VAR 0 1
80806: PUSH
80807: LD_INT 200
80809: DOUBLE
80810: GREATEREQUAL
80811: IFFALSE 80819
80813: LD_INT 299
80815: DOUBLE
80816: LESSEQUAL
80817: IFTRUE 80821
80819: GO 80853
80821: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80822: LD_VAR 0 1
80826: PPUSH
80827: LD_VAR 0 2
80831: PPUSH
80832: LD_VAR 0 3
80836: PPUSH
80837: LD_VAR 0 4
80841: PPUSH
80842: LD_VAR 0 5
80846: PPUSH
80847: CALL 35346 0 5
80851: GO 80930
80853: LD_INT 300
80855: DOUBLE
80856: GREATEREQUAL
80857: IFFALSE 80865
80859: LD_INT 399
80861: DOUBLE
80862: LESSEQUAL
80863: IFTRUE 80867
80865: GO 80929
80867: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80868: LD_VAR 0 1
80872: PPUSH
80873: LD_VAR 0 2
80877: PPUSH
80878: LD_VAR 0 3
80882: PPUSH
80883: LD_VAR 0 4
80887: PPUSH
80888: LD_VAR 0 5
80892: PPUSH
80893: LD_VAR 0 6
80897: PPUSH
80898: LD_VAR 0 7
80902: PPUSH
80903: LD_VAR 0 8
80907: PPUSH
80908: LD_VAR 0 9
80912: PPUSH
80913: LD_VAR 0 10
80917: PPUSH
80918: LD_VAR 0 11
80922: PPUSH
80923: CALL 31671 0 11
80927: GO 80930
80929: POP
// end ;
80930: PPOPN 11
80932: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80933: LD_VAR 0 1
80937: PPUSH
80938: LD_VAR 0 2
80942: PPUSH
80943: LD_VAR 0 3
80947: PPUSH
80948: LD_VAR 0 4
80952: PPUSH
80953: LD_VAR 0 5
80957: PPUSH
80958: CALL 35082 0 5
// end ; end_of_file
80962: PPOPN 5
80964: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80965: LD_VAR 0 1
80969: PPUSH
80970: LD_VAR 0 2
80974: PPUSH
80975: LD_VAR 0 3
80979: PPUSH
80980: LD_VAR 0 4
80984: PPUSH
80985: LD_VAR 0 5
80989: PPUSH
80990: LD_VAR 0 6
80994: PPUSH
80995: CALL 19323 0 6
// end ;
80999: PPOPN 6
81001: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81002: LD_INT 0
81004: PPUSH
// begin if not units then
81005: LD_VAR 0 1
81009: NOT
81010: IFFALSE 81014
// exit ;
81012: GO 81014
// end ;
81014: PPOPN 7
81016: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81017: CALL 19227 0 0
// end ;
81021: PPOPN 1
81023: END
