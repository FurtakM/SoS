// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 37723 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 37723 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 37723 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 37723 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 37723 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 37723 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 37723 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 37723 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 37723 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 37723 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 37723 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 37723 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 37723 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 37723 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 37723 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 74432 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 74432 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10620
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 37723 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 74432 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: IFFALSE 9762
// begin ComFree ( Lisa ) ;
9739: LD_EXP 40
9743: PPUSH
9744: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9748: LD_EXP 40
9752: PPUSH
9753: LD_EXP 51
9757: PPUSH
9758: CALL_OW 172
// end ; if Lynch then
9762: LD_EXP 47
9766: IFFALSE 9791
// begin ComFree ( Lynch ) ;
9768: LD_EXP 47
9772: PPUSH
9773: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9777: LD_EXP 47
9781: PPUSH
9782: LD_EXP 51
9786: PPUSH
9787: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9791: LD_EXP 37
9795: PPUSH
9796: LD_EXP 51
9800: PPUSH
9801: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9805: LD_EXP 51
9809: PPUSH
9810: LD_EXP 37
9814: PPUSH
9815: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9819: LD_EXP 51
9823: PPUSH
9824: LD_STRING D6-Frank-1
9826: PPUSH
9827: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9831: LD_INT 69
9833: PPUSH
9834: LD_INT 20
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: LD_INT 20
9842: NEG
9843: PPUSH
9844: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9848: LD_INT 69
9850: PPUSH
9851: LD_INT 20
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9861: LD_INT 190
9863: PPUSH
9864: LD_INT 31
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: LD_INT 20
9872: NEG
9873: PPUSH
9874: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9878: LD_INT 190
9880: PPUSH
9881: LD_INT 31
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9891: LD_INT 69
9893: PPUSH
9894: LD_INT 20
9896: PPUSH
9897: CALL_OW 84
// Wait ( 0 0$02 ) ;
9901: LD_INT 70
9903: PPUSH
9904: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9908: LD_EXP 37
9912: PPUSH
9913: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9917: LD_EXP 40
9921: PUSH
9922: LD_EXP 40
9926: PPUSH
9927: LD_EXP 51
9931: PPUSH
9932: CALL_OW 296
9936: PUSH
9937: LD_INT 20
9939: LESS
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 302
9951: AND
9952: IFFALSE 10074
// begin ComFree ( Lisa ) ;
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 139
// p := 0 ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9971: LD_INT 35
9973: PPUSH
9974: CALL_OW 67
// p := p + 1 ;
9978: LD_ADDR_VAR 0 2
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: PLUS
9991: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9992: LD_EXP 40
9996: PPUSH
9997: LD_EXP 51
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 7
10009: LESS
10010: PUSH
10011: LD_VAR 0 2
10015: PUSH
10016: LD_INT 7
10018: GREATER
10019: OR
10020: IFFALSE 9971
// Say ( Lisa , D6-Lisa-1 ) ;
10022: LD_EXP 40
10026: PPUSH
10027: LD_STRING D6-Lisa-1
10029: PPUSH
10030: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10034: LD_EXP 40
10038: PPUSH
10039: LD_EXP 51
10043: PPUSH
10044: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10048: LD_EXP 51
10052: PPUSH
10053: LD_EXP 40
10057: PPUSH
10058: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10062: LD_EXP 51
10066: PPUSH
10067: LD_STRING D6-Frank-2
10069: PPUSH
10070: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10074: LD_EXP 47
10078: PUSH
10079: LD_EXP 47
10083: PPUSH
10084: LD_EXP 51
10088: PPUSH
10089: CALL_OW 296
10093: PUSH
10094: LD_INT 20
10096: LESS
10097: AND
10098: PUSH
10099: LD_EXP 47
10103: PPUSH
10104: CALL_OW 302
10108: AND
10109: IFFALSE 10290
// begin ComTurnUnit ( Lynch , JMM ) ;
10111: LD_EXP 47
10115: PPUSH
10116: LD_EXP 37
10120: PPUSH
10121: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10125: LD_EXP 51
10129: PPUSH
10130: LD_EXP 37
10134: PPUSH
10135: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10139: LD_EXP 47
10143: PPUSH
10144: LD_STRING D6-Sol1-2
10146: PPUSH
10147: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING D6-JMM-2
10158: PPUSH
10159: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING D6-Frank-3
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-3
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-4
10194: PPUSH
10195: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10199: LD_EXP 51
10203: PPUSH
10204: LD_STRING D6-Frank-4a
10206: PPUSH
10207: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10211: LD_EXP 37
10215: PPUSH
10216: LD_STRING D6-JMM-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-5
10230: PPUSH
10231: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10235: LD_EXP 40
10239: PUSH
10240: LD_EXP 40
10244: PPUSH
10245: CALL_OW 302
10249: AND
10250: IFFALSE 10264
// Say ( Lisa , D6-Lisa-5 ) ;
10252: LD_EXP 40
10256: PPUSH
10257: LD_STRING D6-Lisa-5
10259: PPUSH
10260: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10264: LD_EXP 51
10268: PPUSH
10269: LD_STRING D6-Frank-6
10271: PPUSH
10272: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10276: LD_EXP 37
10280: PPUSH
10281: LD_STRING D6-JMM-6
10283: PPUSH
10284: CALL_OW 88
// end else
10288: GO 10405
// begin ComTurnUnit ( Frank , JMM ) ;
10290: LD_EXP 51
10294: PPUSH
10295: LD_EXP 37
10299: PPUSH
10300: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10304: LD_EXP 51
10308: PPUSH
10309: LD_STRING D6-Frank-4
10311: PPUSH
10312: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10316: LD_EXP 51
10320: PPUSH
10321: LD_STRING D6-Frank-4a
10323: PPUSH
10324: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10328: LD_EXP 37
10332: PPUSH
10333: LD_STRING D6-JMM-4
10335: PPUSH
10336: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-5
10347: PPUSH
10348: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10352: LD_EXP 40
10356: PUSH
10357: LD_EXP 40
10361: PPUSH
10362: CALL_OW 302
10366: AND
10367: IFFALSE 10381
// Say ( Lisa , D6-Lisa-5 ) ;
10369: LD_EXP 40
10373: PPUSH
10374: LD_STRING D6-Lisa-5
10376: PPUSH
10377: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10381: LD_EXP 51
10385: PPUSH
10386: LD_STRING D6-Frank-6
10388: PPUSH
10389: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10393: LD_EXP 37
10397: PPUSH
10398: LD_STRING D6-JMM-6
10400: PPUSH
10401: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10405: LD_STRING Q1
10407: PPUSH
10408: CALL_OW 97
10412: PUSH
10413: LD_INT 1
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10432
10421: POP
// frank_send_to_scout := true ; 2 :
10422: LD_ADDR_EXP 15
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
10430: GO 10452
10432: LD_INT 2
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10451
10440: POP
// frank_send_to_scout := false ; end ;
10441: LD_ADDR_EXP 15
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
10449: GO 10452
10451: POP
// Video ( false ) ;
10452: LD_INT 0
10454: PPUSH
10455: CALL 74432 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10459: LD_EXP 37
10463: PUSH
10464: LD_EXP 40
10468: PUSH
10469: LD_EXP 47
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 139
// if frank_send_to_scout then
10483: LD_EXP 15
10487: IFFALSE 10541
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10489: LD_EXP 51
10493: PPUSH
10494: LD_INT 15
10496: PPUSH
10497: CALL_OW 113
// wait ( 0 0$01 ) ;
10501: LD_INT 35
10503: PPUSH
10504: CALL_OW 67
// until not See ( 1 , Frank ) ;
10508: LD_INT 1
10510: PPUSH
10511: LD_EXP 51
10515: PPUSH
10516: CALL_OW 292
10520: NOT
10521: IFFALSE 10489
// wait ( 0 0$02 ) ;
10523: LD_INT 70
10525: PPUSH
10526: CALL_OW 67
// RemoveUnit ( Frank ) ;
10530: LD_EXP 51
10534: PPUSH
10535: CALL_OW 64
// end else
10539: GO 10553
// SetSide ( Frank , 1 ) ;
10541: LD_EXP 51
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 235
// send_attack_on_cornel_base := true ;
10553: LD_ADDR_EXP 26
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10568: LD_ADDR_EXP 29
10572: PUSH
10573: LD_EXP 29
10577: PPUSH
10578: LD_STRING -
10580: PPUSH
10581: CALL 1077 0 2
10585: ST_TO_ADDR
// if debug then
10586: LD_EXP 1
10590: IFFALSE 10602
// debug_strings := time_to_prepare ;
10592: LD_ADDR_OWVAR 48
10596: PUSH
10597: LD_EXP 29
10601: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10602: LD_EXP 29
10606: PUSH
10607: LD_INT 0
10609: EQUAL
10610: IFFALSE 10561
// cornel_prepared := true ;
10612: LD_ADDR_EXP 11
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// end ;
10620: PPOPN 3
10622: END
// every 0 0$01 trigger cornel_prepared do
10623: LD_EXP 11
10627: IFFALSE 10935
10629: GO 10631
10631: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10632: LD_EXP 44
10636: PPUSH
10637: LD_STRING D3-Corn-1
10639: PPUSH
10640: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10644: LD_STRING MOutWait
10646: PPUSH
10647: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10651: LD_INT 35
10653: PPUSH
10654: CALL_OW 67
// until cornel_counter = 0 ;
10658: LD_EXP 10
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: IFFALSE 10651
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10668: LD_EXP 44
10672: PPUSH
10673: LD_STRING D3a-Corn-1
10675: PPUSH
10676: CALL_OW 94
// if IsOk ( Cornel ) then
10680: LD_EXP 44
10684: PPUSH
10685: CALL_OW 302
10689: IFFALSE 10703
// Say ( JMM , D3a-JMM-1 ) ;
10691: LD_EXP 37
10695: PPUSH
10696: LD_STRING D3a-JMM-1
10698: PPUSH
10699: CALL_OW 88
// end_mission_allowed := true ;
10703: LD_ADDR_EXP 21
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10711: LD_STRING M2
10713: PPUSH
10714: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10718: LD_INT 9
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 424
// Wait ( 0 0$05 ) ;
10728: LD_INT 175
10730: PPUSH
10731: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10735: LD_EXP 44
10739: PPUSH
10740: LD_STRING D3a-Corn-2
10742: PPUSH
10743: CALL_OW 94
// cornel_attack := true ;
10747: LD_ADDR_EXP 9
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10755: LD_INT 105
10757: PPUSH
10758: CALL_OW 67
// AddMoreTanks ( ) ;
10762: CALL 4940 0 0
// if frank_send_to_scout then
10766: LD_EXP 15
10770: IFFALSE 10935
// begin InitHc ;
10772: CALL_OW 19
// InitUc ;
10776: CALL_OW 18
// uc_side := 8 ;
10780: LD_ADDR_OWVAR 20
10784: PUSH
10785: LD_INT 8
10787: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10788: LD_ADDR_EXP 51
10792: PUSH
10793: LD_STRING Frank
10795: PPUSH
10796: LD_INT 0
10798: PPUSH
10799: LD_STRING 
10801: PPUSH
10802: CALL 37723 0 3
10806: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_INT 6
10814: PPUSH
10815: LD_INT 9
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 48
// ComCrawl ( Frank ) ;
10825: LD_EXP 51
10829: PPUSH
10830: CALL_OW 137
// repeat wait ( 10 ) ;
10834: LD_INT 10
10836: PPUSH
10837: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10841: LD_EXP 37
10845: PPUSH
10846: LD_EXP 51
10850: PPUSH
10851: CALL_OW 296
10855: PUSH
10856: LD_INT 9
10858: LESS
10859: PUSH
10860: LD_INT 9
10862: PPUSH
10863: LD_INT 22
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 70
10877: OR
10878: IFFALSE 10834
// if IsDead ( Frank ) then
10880: LD_EXP 51
10884: PPUSH
10885: CALL_OW 301
10889: IFFALSE 10893
// exit ;
10891: GO 10935
// CenterOnUnits ( Frank ) ;
10893: LD_EXP 51
10897: PPUSH
10898: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10902: LD_EXP 51
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6a-Frank-1
10921: PPUSH
10922: CALL_OW 88
// ComWalk ( Frank ) ;
10926: LD_EXP 51
10930: PPUSH
10931: CALL_OW 138
// end ; end ;
10935: END
// every 0 0$01 trigger solar_builded do
10936: LD_EXP 14
10940: IFFALSE 11044
10942: GO 10944
10944: DISABLE
// begin Wait ( 0 0$02 ) ;
10945: LD_INT 70
10947: PPUSH
10948: CALL_OW 67
// DialogueOn ;
10952: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10956: LD_EXP 37
10960: PPUSH
10961: LD_STRING D2b-JMM-1
10963: PPUSH
10964: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10968: LD_EXP 48
10972: PUSH
10973: LD_EXP 48
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 11033
// begin Say ( Walker , D2b-Sci1-1 ) ;
10985: LD_EXP 48
10989: PPUSH
10990: LD_STRING D2b-Sci1-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10997: LD_EXP 37
11001: PPUSH
11002: LD_STRING D2b-JMM-2
11004: PPUSH
11005: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11009: LD_EXP 48
11013: PPUSH
11014: LD_STRING D2b-Sci1-2
11016: PPUSH
11017: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11021: LD_EXP 37
11025: PPUSH
11026: LD_STRING D2b-JMM-3
11028: PPUSH
11029: CALL_OW 88
// end ; DialogueOff ;
11033: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11037: LD_STRING MOutSol
11039: PPUSH
11040: CALL_OW 337
// end ;
11044: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11045: LD_EXP 14
11049: PUSH
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 302
11059: AND
11060: PUSH
11061: LD_EXP 37
11065: PPUSH
11066: CALL 911 0 1
11070: AND
11071: PUSH
11072: LD_EXP 16
11076: NOT
11077: AND
11078: IFFALSE 11149
11080: GO 11082
11082: DISABLE
11083: LD_INT 0
11085: PPUSH
// begin jmm_in_veh := true ;
11086: LD_ADDR_EXP 16
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_INT 0
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 12
11109: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11110: LD_INT 70
11112: PPUSH
11113: CALL_OW 67
// if i then
11117: LD_VAR 0 1
11121: IFFALSE 11137
// Say ( JMM , D2c-JMM-1 ) else
11123: LD_EXP 37
11127: PPUSH
11128: LD_STRING D2c-JMM-1
11130: PPUSH
11131: CALL_OW 88
11135: GO 11149
// Say ( JMM , D2c-JMM-1a ) ;
11137: LD_EXP 37
11141: PPUSH
11142: LD_STRING D2c-JMM-1a
11144: PPUSH
11145: CALL_OW 88
// end ;
11149: PPOPN 1
11151: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11152: LD_EXP 14
11156: PUSH
11157: LD_EXP 38
11161: PPUSH
11162: CALL_OW 302
11166: AND
11167: PUSH
11168: LD_EXP 38
11172: PPUSH
11173: CALL 911 0 1
11177: AND
11178: PUSH
11179: LD_EXP 17
11183: NOT
11184: AND
11185: IFFALSE 11217
11187: GO 11189
11189: DISABLE
// begin bobby_in_veh := true ;
11190: LD_ADDR_EXP 17
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11198: LD_INT 70
11200: PPUSH
11201: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11205: LD_EXP 38
11209: PPUSH
11210: LD_STRING D2c-Bobby-1
11212: PPUSH
11213: CALL_OW 88
11217: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11218: LD_EXP 14
11222: PUSH
11223: LD_EXP 40
11227: PPUSH
11228: CALL_OW 302
11232: AND
11233: PUSH
11234: LD_EXP 40
11238: PPUSH
11239: CALL 911 0 1
11243: AND
11244: PUSH
11245: LD_EXP 19
11249: NOT
11250: AND
11251: IFFALSE 11283
11253: GO 11255
11255: DISABLE
// begin lisa_in_veh := true ;
11256: LD_ADDR_EXP 19
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11264: LD_INT 70
11266: PPUSH
11267: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11271: LD_EXP 40
11275: PPUSH
11276: LD_STRING D2c-Lisa-1
11278: PPUSH
11279: CALL_OW 88
11283: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11284: LD_EXP 14
11288: PUSH
11289: LD_EXP 39
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: PUSH
11300: LD_EXP 39
11304: PPUSH
11305: CALL 911 0 1
11309: AND
11310: PUSH
11311: LD_EXP 18
11315: NOT
11316: AND
11317: IFFALSE 11388
11319: GO 11321
11321: DISABLE
11322: LD_INT 0
11324: PPUSH
// begin cyrus_in_veh := true ;
11325: LD_ADDR_EXP 18
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 0
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 12
11348: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11349: LD_INT 70
11351: PPUSH
11352: CALL_OW 67
// if i then
11356: LD_VAR 0 1
11360: IFFALSE 11376
// Say ( Cyrus , D2c-Cyrus-1 ) else
11362: LD_EXP 39
11366: PPUSH
11367: LD_STRING D2c-Cyrus-1
11369: PPUSH
11370: CALL_OW 88
11374: GO 11388
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11376: LD_EXP 39
11380: PPUSH
11381: LD_STRING D2c-Cyrus-1a
11383: PPUSH
11384: CALL_OW 88
// end ;
11388: PPOPN 1
11390: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11391: LD_EXP 44
11395: PPUSH
11396: LD_INT 16
11398: PPUSH
11399: CALL_OW 308
11403: IFFALSE 11684
11405: GO 11407
11407: DISABLE
11408: LD_INT 0
11410: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11411: LD_INT 3
11413: PPUSH
11414: LD_EXP 44
11418: PPUSH
11419: CALL_OW 471
// send_attack_on_cornel := true ;
11423: LD_ADDR_EXP 32
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if ru_vehicles then
11431: LD_EXP 56
11435: IFFALSE 11469
// for i in ru_vehicles do
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: LD_EXP 56
11446: PUSH
11447: FOR_IN
11448: IFFALSE 11467
// ComAgressiveMove ( i , 215 , 69 ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: LD_INT 215
11457: PPUSH
11458: LD_INT 69
11460: PPUSH
11461: CALL_OW 114
11465: GO 11447
11467: POP
11468: POP
// if ru_patrol then
11469: LD_EXP 53
11473: IFFALSE 11507
// for i in ru_patrol do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_EXP 53
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11505
// ComAgressiveMove ( i , 215 , 69 ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 215
11495: PPUSH
11496: LD_INT 69
11498: PPUSH
11499: CALL_OW 114
11503: GO 11485
11505: POP
11506: POP
// if frank_send_to_scout then
11507: LD_EXP 15
11511: IFFALSE 11525
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11513: LD_EXP 51
11517: PPUSH
11518: LD_STRING D3b-Frank-1
11520: PPUSH
11521: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11525: LD_INT 105
11527: PPUSH
11528: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11532: LD_EXP 44
11536: PPUSH
11537: LD_STRING D4-Corn-1
11539: PPUSH
11540: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 24
11576: PUSH
11577: LD_INT 1000
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: PUSH
11598: LD_INT 6
11600: LESS
11601: IFFALSE 11544
// if Cornel then
11603: LD_EXP 44
11607: IFFALSE 11647
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11609: LD_EXP 44
11613: PPUSH
11614: LD_STRING D5-Corn-1
11616: PPUSH
11617: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11621: LD_EXP 44
11625: PPUSH
11626: LD_EXP 2
11630: PUSH
11631: LD_STRING Cornel
11633: STR
11634: PPUSH
11635: CALL_OW 38
// cornel_saved := true ;
11639: LD_ADDR_EXP 27
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11647: LD_INT 4
11649: PPUSH
11650: LD_INT 8
11652: PPUSH
11653: CALL_OW 343
// Wait ( 0 0$01 ) ;
11657: LD_INT 35
11659: PPUSH
11660: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11664: LD_INT 3
11666: PPUSH
11667: LD_EXP 44
11671: PPUSH
11672: CALL_OW 472
// send_attack_on_cornel := false ;
11676: LD_ADDR_EXP 32
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
// end ;
11684: PPOPN 1
11686: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11687: LD_INT 9
11689: PPUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: PUSH
11705: LD_EXP 33
11709: OR
11710: IFFALSE 11931
11712: GO 11714
11714: DISABLE
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
// begin enable ;
11719: ENABLE
// if not jmm_on_west then
11720: LD_EXP 5
11724: NOT
11725: IFFALSE 11736
// begin YouLost ( 4 ) ;
11727: LD_STRING 4
11729: PPUSH
11730: CALL_OW 104
// exit ;
11734: GO 11931
// end ; if not game_end then
11736: LD_EXP 33
11740: NOT
11741: IFFALSE 11751
// game_end := true ;
11743: LD_ADDR_EXP 33
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11751: LD_ADDR_VAR 0 2
11755: PUSH
11756: LD_INT 9
11758: PPUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 70
11773: ST_TO_ADDR
// if not filter then
11774: LD_VAR 0 2
11778: NOT
11779: IFFALSE 11783
// exit ;
11781: GO 11931
// for i in filter do
11783: LD_ADDR_VAR 0 1
11787: PUSH
11788: LD_VAR 0 2
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11929
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 302
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 247
11815: PUSH
11816: LD_INT 2
11818: EQUAL
11819: AND
11820: IFFALSE 11892
// begin if i = JMM and save_group < 4 then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: PUSH
11833: LD_EXP 23
11837: PUSH
11838: LD_INT 4
11840: LESS
11841: AND
11842: IFFALSE 11846
// continue ;
11844: GO 11793
// if GetNation ( i ) = nation_american then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 248
11855: PUSH
11856: LD_INT 1
11858: EQUAL
11859: IFFALSE 11869
// veh_on_meta := true ;
11861: LD_ADDR_EXP 28
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 311
11878: PPUSH
11879: CALL 11934 0 1
// RemoveUnit ( i ) ;
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 302
11901: PUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 247
11911: PUSH
11912: LD_INT 1
11914: EQUAL
11915: AND
11916: IFFALSE 11927
// Save ( i ) ;
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL 11934 0 1
// end ;
11927: GO 11793
11929: POP
11930: POP
// end ;
11931: PPOPN 2
11933: END
// export function Save ( i ) ; begin
11934: LD_INT 0
11936: PPUSH
// if i = JMM and save_group >= 4 then
11937: LD_VAR 0 1
11941: PUSH
11942: LD_EXP 37
11946: EQUAL
11947: PUSH
11948: LD_EXP 23
11952: PUSH
11953: LD_INT 4
11955: GREATEREQUAL
11956: AND
11957: IFFALSE 12093
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11959: LD_EXP 24
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: PUSH
11993: LD_INT 1
11995: GREATER
11996: AND
11997: IFFALSE 12054
// begin show_query := false ;
11999: LD_ADDR_EXP 24
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12007: LD_STRING Q2
12009: PPUSH
12010: CALL_OW 97
12014: PUSH
12015: LD_INT 1
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12034
12023: POP
// wait_for_them := true ; 2 :
12024: LD_ADDR_EXP 25
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
12032: GO 12054
12034: LD_INT 2
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12053
12042: POP
// wait_for_them := false ; end ;
12043: LD_ADDR_EXP 25
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
12051: GO 12054
12053: POP
// end ; save_counter := save_counter + 1 ;
12054: LD_ADDR_EXP 36
12058: PUSH
12059: LD_EXP 36
12063: PUSH
12064: LD_INT 1
12066: PLUS
12067: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12068: LD_ADDR_EXP 23
12072: PUSH
12073: LD_EXP 23
12077: PUSH
12078: LD_EXP 37
12082: ADD
12083: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12084: LD_EXP 37
12088: PPUSH
12089: CALL_OW 64
// end ; if i = Lisa then
12093: LD_VAR 0 1
12097: PUSH
12098: LD_EXP 40
12102: EQUAL
12103: IFFALSE 12144
// begin save_counter := save_counter + 1 ;
12105: LD_ADDR_EXP 36
12109: PUSH
12110: LD_EXP 36
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12119: LD_ADDR_EXP 23
12123: PUSH
12124: LD_EXP 23
12128: PUSH
12129: LD_EXP 40
12133: ADD
12134: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12135: LD_EXP 40
12139: PPUSH
12140: CALL_OW 64
// end ; if i = Bobby then
12144: LD_VAR 0 1
12148: PUSH
12149: LD_EXP 38
12153: EQUAL
12154: IFFALSE 12195
// begin save_counter := save_counter + 1 ;
12156: LD_ADDR_EXP 36
12160: PUSH
12161: LD_EXP 36
12165: PUSH
12166: LD_INT 1
12168: PLUS
12169: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12170: LD_ADDR_EXP 23
12174: PUSH
12175: LD_EXP 23
12179: PUSH
12180: LD_EXP 38
12184: ADD
12185: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12186: LD_EXP 38
12190: PPUSH
12191: CALL_OW 64
// end ; if i = Cyrus then
12195: LD_VAR 0 1
12199: PUSH
12200: LD_EXP 39
12204: EQUAL
12205: IFFALSE 12246
// begin save_counter := save_counter + 1 ;
12207: LD_ADDR_EXP 36
12211: PUSH
12212: LD_EXP 36
12216: PUSH
12217: LD_INT 1
12219: PLUS
12220: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12221: LD_ADDR_EXP 23
12225: PUSH
12226: LD_EXP 23
12230: PUSH
12231: LD_EXP 39
12235: ADD
12236: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12237: LD_EXP 39
12241: PPUSH
12242: CALL_OW 64
// end ; if i = Khatam then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_EXP 41
12255: EQUAL
12256: IFFALSE 12297
// begin save_counter := save_counter + 1 ;
12258: LD_ADDR_EXP 36
12262: PUSH
12263: LD_EXP 36
12267: PUSH
12268: LD_INT 1
12270: PLUS
12271: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12272: LD_ADDR_EXP 23
12276: PUSH
12277: LD_EXP 23
12281: PUSH
12282: LD_EXP 41
12286: ADD
12287: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12288: LD_EXP 41
12292: PPUSH
12293: CALL_OW 64
// end ; if i = Frank then
12297: LD_VAR 0 1
12301: PUSH
12302: LD_EXP 51
12306: EQUAL
12307: IFFALSE 12348
// begin save_counter := save_counter + 1 ;
12309: LD_ADDR_EXP 36
12313: PUSH
12314: LD_EXP 36
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12323: LD_ADDR_EXP 23
12327: PUSH
12328: LD_EXP 23
12332: PUSH
12333: LD_EXP 51
12337: ADD
12338: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12339: LD_EXP 51
12343: PPUSH
12344: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12348: LD_VAR 0 1
12352: PUSH
12353: LD_EXP 37
12357: NONEQUAL
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: AND
12369: PUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 247
12379: PUSH
12380: LD_INT 1
12382: EQUAL
12383: AND
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: LD_EXP 23
12394: IN
12395: NOT
12396: AND
12397: IFFALSE 12438
// begin save_counter := save_counter + 1 ;
12399: LD_ADDR_EXP 36
12403: PUSH
12404: LD_EXP 36
12408: PUSH
12409: LD_INT 1
12411: PLUS
12412: ST_TO_ADDR
// save_others := save_others ^ i ;
12413: LD_ADDR_EXP 22
12417: PUSH
12418: LD_EXP 22
12422: PUSH
12423: LD_VAR 0 1
12427: ADD
12428: ST_TO_ADDR
// RemoveUnit ( i ) ;
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 64
// end ; end ;
12438: LD_VAR 0 2
12442: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12443: LD_EXP 24
12447: NOT
12448: PUSH
12449: LD_EXP 25
12453: NOT
12454: AND
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_INT 0
12487: EQUAL
12488: OR
12489: IFFALSE 12498
12491: GO 12493
12493: DISABLE
// EndMission ;
12494: CALL 12499 0 0
12498: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12499: LD_INT 0
12501: PPUSH
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
// wait ( 0 0$01 ) ;
12506: LD_INT 35
12508: PPUSH
12509: CALL_OW 67
// if tick <= 12 12$00 then
12513: LD_OWVAR 1
12517: PUSH
12518: LD_INT 25200
12520: LESSEQUAL
12521: IFFALSE 12530
// SetAchievement ( ACH_ASPEED_3 ) ;
12523: LD_STRING ACH_ASPEED_3
12525: PPUSH
12526: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12530: LD_EXP 23
12534: PUSH
12535: LD_EXP 22
12539: ADD
12540: PPUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 4
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 72
12555: PUSH
12556: LD_INT 0
12558: EQUAL
12559: IFFALSE 12575
// begin wait ( 3 ) ;
12561: LD_INT 3
12563: PPUSH
12564: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12568: LD_STRING ACH_NOSCI
12570: PPUSH
12571: CALL_OW 543
// end ; m1 := solar_builded ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_EXP 14
12584: ST_TO_ADDR
// m2 := veh_on_meta ;
12585: LD_ADDR_VAR 0 4
12589: PUSH
12590: LD_EXP 28
12594: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12595: LD_ADDR_VAR 0 5
12599: PUSH
12600: LD_EXP 34
12604: PUSH
12605: LD_INT 0
12607: EQUAL
12608: ST_TO_ADDR
// if solar_builded then
12609: LD_EXP 14
12613: IFFALSE 12627
// AddMedal ( Solar1 , 1 ) else
12615: LD_STRING Solar1
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 101
12625: GO 12638
// AddMedal ( Solar1 , - 1 ) ;
12627: LD_STRING Solar1
12629: PPUSH
12630: LD_INT 1
12632: NEG
12633: PPUSH
12634: CALL_OW 101
// if veh_on_meta then
12638: LD_EXP 28
12642: IFFALSE 12656
// AddMedal ( Solar2 , 1 ) else
12644: LD_STRING Solar2
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 101
12654: GO 12686
// if solar_builded then
12656: LD_EXP 14
12660: IFFALSE 12675
// AddMedal ( Solar2 , - 1 ) else
12662: LD_STRING Solar2
12664: PPUSH
12665: LD_INT 1
12667: NEG
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar2 , - 2 ) ;
12675: LD_STRING Solar2
12677: PPUSH
12678: LD_INT 2
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if lose_counter = 0 then
12686: LD_EXP 34
12690: PUSH
12691: LD_INT 0
12693: EQUAL
12694: IFFALSE 12708
// AddMedal ( No , 1 ) else
12696: LD_STRING No
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 101
12706: GO 12752
// if lose_counter > 0 and lose_counter < 4 then
12708: LD_EXP 34
12712: PUSH
12713: LD_INT 0
12715: GREATER
12716: PUSH
12717: LD_EXP 34
12721: PUSH
12722: LD_INT 4
12724: LESS
12725: AND
12726: IFFALSE 12741
// AddMedal ( No , - 1 ) else
12728: LD_STRING No
12730: PPUSH
12731: LD_INT 1
12733: NEG
12734: PPUSH
12735: CALL_OW 101
12739: GO 12752
// AddMedal ( UpTo4 , - 1 ) ;
12741: LD_STRING UpTo4
12743: PPUSH
12744: LD_INT 1
12746: NEG
12747: PPUSH
12748: CALL_OW 101
// GiveMedals ( MAIN ) ;
12752: LD_STRING MAIN
12754: PPUSH
12755: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12759: LD_OWVAR 67
12763: PUSH
12764: LD_INT 3
12766: GREATEREQUAL
12767: PUSH
12768: LD_VAR 0 3
12772: AND
12773: PUSH
12774: LD_VAR 0 4
12778: AND
12779: PUSH
12780: LD_VAR 0 5
12784: AND
12785: IFFALSE 12797
// SetAchievementEX ( ACH_AMER , 3 ) ;
12787: LD_STRING ACH_AMER
12789: PPUSH
12790: LD_INT 3
12792: PPUSH
12793: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12797: LD_EXP 52
12801: PPUSH
12802: CALL_OW 301
12806: IFFALSE 12862
// begin stop_talking := true ;
12808: LD_ADDR_OWVAR 56
12812: PUSH
12813: LD_INT 1
12815: ST_TO_ADDR
// for i in save_group union save_others do
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: LD_EXP 23
12825: PUSH
12826: LD_EXP 22
12830: UNION
12831: PUSH
12832: FOR_IN
12833: IFFALSE 12852
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12835: LD_VAR 0 2
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: LD_INT 1500
12845: PPUSH
12846: CALL_OW 591
12850: GO 12832
12852: POP
12853: POP
// stop_talking := false ;
12854: LD_ADDR_OWVAR 56
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12862: LD_EXP 23
12866: PUSH
12867: LD_EXP 22
12871: ADD
12872: PPUSH
12873: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12877: LD_EXP 37
12881: PPUSH
12882: LD_EXP 2
12886: PUSH
12887: LD_STRING JMM
12889: STR
12890: PPUSH
12891: CALL_OW 38
// if Bobby in save_group then
12895: LD_EXP 38
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: IFFALSE 12925
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12907: LD_EXP 38
12911: PPUSH
12912: LD_EXP 2
12916: PUSH
12917: LD_STRING Bobby
12919: STR
12920: PPUSH
12921: CALL_OW 38
// if Cyrus in save_group then
12925: LD_EXP 39
12929: PUSH
12930: LD_EXP 23
12934: IN
12935: IFFALSE 12955
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12937: LD_EXP 39
12941: PPUSH
12942: LD_EXP 2
12946: PUSH
12947: LD_STRING Cyrus
12949: STR
12950: PPUSH
12951: CALL_OW 38
// if Lisa in save_group then
12955: LD_EXP 40
12959: PUSH
12960: LD_EXP 23
12964: IN
12965: IFFALSE 12985
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12967: LD_EXP 40
12971: PPUSH
12972: LD_EXP 2
12976: PUSH
12977: LD_STRING Lisa
12979: STR
12980: PPUSH
12981: CALL_OW 38
// if Frank in save_group then
12985: LD_EXP 51
12989: PUSH
12990: LD_EXP 23
12994: IN
12995: IFFALSE 13015
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12997: LD_EXP 51
13001: PPUSH
13002: LD_EXP 2
13006: PUSH
13007: LD_STRING Frank
13009: STR
13010: PPUSH
13011: CALL_OW 38
// if Khatam in save_group then
13015: LD_EXP 41
13019: PUSH
13020: LD_EXP 23
13024: IN
13025: IFFALSE 13045
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13027: LD_EXP 41
13031: PPUSH
13032: LD_EXP 2
13036: PUSH
13037: LD_STRING Khatam
13039: STR
13040: PPUSH
13041: CALL_OW 38
// if save_others then
13045: LD_EXP 22
13049: IFFALSE 13063
// SaveCharacters ( save_others , 03_others ) ;
13051: LD_EXP 22
13055: PPUSH
13056: LD_STRING 03_others
13058: PPUSH
13059: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 45
13072: PPUSH
13073: CALL_OW 302
13077: AND
13078: PUSH
13079: LD_EXP 27
13083: AND
13084: IFFALSE 13096
// begin ResetFog ;
13086: CALL_OW 335
// DisplayEndingScene ;
13090: CALL 13118 0 0
// end else
13094: GO 13109
// DeleteCharacters ( mission_prefix & Cornel ) ;
13096: LD_EXP 2
13100: PUSH
13101: LD_STRING Cornel
13103: STR
13104: PPUSH
13105: CALL_OW 40
// YouWin ;
13109: CALL_OW 103
// end ;
13113: LD_VAR 0 1
13117: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
// InGameOn ;
13126: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13130: LD_INT 208
13132: PPUSH
13133: LD_INT 62
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: LD_INT 10
13141: NEG
13142: PPUSH
13143: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13147: LD_INT 208
13149: PPUSH
13150: LD_INT 62
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: ST_TO_ADDR
// if filter then
13212: LD_VAR 0 3
13216: IFFALSE 13244
// for i in filter do
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13242
// RemoveUnit ( i ) ;
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 64
13240: GO 13228
13242: POP
13243: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: ST_TO_ADDR
// if filter then
13278: LD_VAR 0 3
13282: IFFALSE 13313
// for i in filter do
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: LD_VAR 0 3
13293: PUSH
13294: FOR_IN
13295: IFFALSE 13311
// SetLives ( i , 0 ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 0
13304: PPUSH
13305: CALL_OW 234
13309: GO 13294
13311: POP
13312: POP
// uc_side := 4 ;
13313: LD_ADDR_OWVAR 20
13317: PUSH
13318: LD_INT 4
13320: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_STRING Cornell
13328: PPUSH
13329: LD_INT 0
13331: PPUSH
13332: LD_STRING 
13334: PPUSH
13335: CALL 37723 0 3
13339: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13340: LD_VAR 0 4
13344: PPUSH
13345: LD_INT 208
13347: PPUSH
13348: LD_INT 62
13350: PPUSH
13351: LD_INT 0
13353: PPUSH
13354: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13358: LD_VAR 0 4
13362: PPUSH
13363: LD_INT 100
13365: PPUSH
13366: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13370: LD_INT 3
13372: PPUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13382: LD_INT 4
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 80
// uc_side := 3 ;
13398: LD_ADDR_OWVAR 20
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// uc_nation := 3 ;
13406: LD_ADDR_OWVAR 21
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// InitHc ;
13414: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13418: LD_ADDR_VAR 0 5
13422: PUSH
13423: LD_STRING Mikhail
13425: PPUSH
13426: LD_INT 0
13428: PPUSH
13429: LD_STRING 
13431: PPUSH
13432: CALL 37723 0 3
13436: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13437: LD_INT 1
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 0
13445: PPUSH
13446: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13450: LD_ADDR_VAR 0 6
13454: PUSH
13455: LD_VAR 0 6
13459: PUSH
13460: CALL_OW 44
13464: ADD
13465: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13466: LD_ADDR_VAR 0 6
13470: PUSH
13471: LD_VAR 0 6
13475: PUSH
13476: CALL_OW 44
13480: ADD
13481: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13482: LD_INT 2
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 0
13490: PPUSH
13491: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13495: LD_ADDR_VAR 0 6
13499: PUSH
13500: LD_VAR 0 6
13504: PUSH
13505: CALL_OW 44
13509: ADD
13510: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13511: LD_VAR 0 5
13515: PPUSH
13516: LD_INT 17
13518: PPUSH
13519: LD_INT 0
13521: PPUSH
13522: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13526: LD_VAR 0 5
13530: PPUSH
13531: LD_INT 210
13533: PPUSH
13534: LD_INT 63
13536: PPUSH
13537: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13541: LD_VAR 0 5
13545: PPUSH
13546: LD_INT 208
13548: PPUSH
13549: LD_INT 62
13551: PPUSH
13552: CALL_OW 178
// for i in fake_russians do
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_VAR 0 6
13565: PUSH
13566: FOR_IN
13567: IFFALSE 13645
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13569: LD_VAR 0 2
13573: PPUSH
13574: LD_INT 17
13576: PPUSH
13577: LD_INT 0
13579: PPUSH
13580: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 215
13591: PPUSH
13592: LD_INT 67
13594: PPUSH
13595: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13599: LD_VAR 0 2
13603: PPUSH
13604: LD_INT 208
13606: PPUSH
13607: LD_INT 62
13609: PPUSH
13610: CALL_OW 178
// if GetClass ( i ) = 4 then
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 257
13623: PUSH
13624: LD_INT 4
13626: EQUAL
13627: IFFALSE 13643
// ComHeal ( i , fake_cornel ) ;
13629: LD_VAR 0 2
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 128
// end ;
13643: GO 13566
13645: POP
13646: POP
// Wait ( 0 0$01 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13654: LD_INT 208
13656: PPUSH
13657: LD_INT 62
13659: PPUSH
13660: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13664: LD_INT 208
13666: PPUSH
13667: LD_INT 62
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: LD_INT 10
13675: NEG
13676: PPUSH
13677: CALL_OW 330
// Wait ( 0 0$15 ) ;
13681: LD_INT 525
13683: PPUSH
13684: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13688: LD_INT 208
13690: PPUSH
13691: LD_INT 62
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 331
// ResetFog ;
13701: CALL_OW 335
// InGameOff ;
13705: CALL_OW 9
// end ;
13709: LD_VAR 0 1
13713: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13714: LD_INT 10
13716: PPUSH
13717: LD_INT 22
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 70
13731: PUSH
13732: LD_EXP 44
13736: PPUSH
13737: CALL_OW 302
13741: AND
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PPUSH
13758: LD_EXP 44
13762: PPUSH
13763: CALL_OW 74
13767: PPUSH
13768: LD_EXP 44
13772: PPUSH
13773: CALL_OW 296
13777: PUSH
13778: LD_INT 30
13780: LESS
13781: OR
13782: IFFALSE 13833
13784: GO 13786
13786: DISABLE
// begin enable ;
13787: ENABLE
// powell_warn := powell_warn + 1 ;
13788: LD_ADDR_EXP 35
13792: PUSH
13793: LD_EXP 35
13797: PUSH
13798: LD_INT 1
13800: PLUS
13801: ST_TO_ADDR
// if powell_warn = 3 then
13802: LD_EXP 35
13806: PUSH
13807: LD_INT 3
13809: EQUAL
13810: IFFALSE 13821
// begin YouLost ( 5 ) ;
13812: LD_STRING 5
13814: PPUSH
13815: CALL_OW 104
// exit ;
13819: GO 13833
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13821: LD_EXP 46
13825: PPUSH
13826: LD_STRING DWarn-Pow-1
13828: PPUSH
13829: CALL_OW 94
// end ; end_of_file
13833: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13834: LD_EXP 8
13838: IFFALSE 15675
13840: GO 13842
13842: DISABLE
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13853: LD_EXP 44
13857: PUSH
13858: LD_EXP 45
13862: ADD
13863: PUSH
13864: LD_EXP 6
13868: ADD
13869: PPUSH
13870: LD_INT 250
13872: PPUSH
13873: LD_INT 120
13875: PPUSH
13876: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_EXP 6
13889: PPUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 72
13904: PUSH
13905: LD_EXP 45
13909: DIFF
13910: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_EXP 6
13920: PPUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 72
13935: PUSH
13936: LD_VAR 0 2
13940: DIFF
13941: ST_TO_ADDR
// if not has_eng then
13942: LD_VAR 0 2
13946: NOT
13947: IFFALSE 14030
// begin uc_side := 4 ;
13949: LD_ADDR_OWVAR 20
13953: PUSH
13954: LD_INT 4
13956: ST_TO_ADDR
// uc_nation := 1 ;
13957: LD_ADDR_OWVAR 21
13961: PUSH
13962: LD_INT 1
13964: ST_TO_ADDR
// bc_type := b_depot ;
13965: LD_ADDR_OWVAR 42
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// bc_level := 2 ;
13973: LD_ADDR_OWVAR 43
13977: PUSH
13978: LD_INT 2
13980: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13981: LD_ADDR_VAR 0 4
13985: PUSH
13986: LD_INT 264
13988: PPUSH
13989: LD_INT 120
13991: PPUSH
13992: LD_INT 4
13994: PPUSH
13995: CALL_OW 47
13999: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14000: LD_INT 264
14002: PPUSH
14003: LD_INT 120
14005: PPUSH
14006: LD_INT 4
14008: PPUSH
14009: LD_INT 10
14011: NEG
14012: PPUSH
14013: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14017: LD_INT 264
14019: PPUSH
14020: LD_INT 120
14022: PPUSH
14023: LD_INT 4
14025: PPUSH
14026: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14030: LD_INT 35
14032: PPUSH
14033: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14037: LD_EXP 44
14041: PPUSH
14042: LD_INT 10
14044: PPUSH
14045: CALL_OW 308
14049: PUSH
14050: LD_EXP 44
14054: PPUSH
14055: CALL_OW 310
14059: PPUSH
14060: LD_INT 10
14062: PPUSH
14063: CALL_OW 308
14067: OR
14068: IFFALSE 14030
// if has_eng and not dep then
14070: LD_VAR 0 2
14074: PUSH
14075: LD_VAR 0 4
14079: NOT
14080: AND
14081: IFFALSE 14231
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14083: LD_VAR 0 2
14087: PPUSH
14088: LD_INT 0
14090: PPUSH
14091: LD_INT 264
14093: PPUSH
14094: LD_INT 120
14096: PPUSH
14097: LD_INT 4
14099: PPUSH
14100: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14104: LD_INT 35
14106: PPUSH
14107: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14111: LD_INT 22
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: IFFALSE 14104
// ComMoveXY ( filter , 264 , 120 ) ;
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 264
14148: PPUSH
14149: LD_INT 120
14151: PPUSH
14152: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14156: LD_INT 35
14158: PPUSH
14159: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14163: LD_INT 22
14165: PUSH
14166: LD_INT 4
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 30
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 57
14188: PUSH
14189: EMPTY
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: IFFALSE 14156
// ComMoveXY ( filter , 247 , 113 ) ;
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 247
14214: PPUSH
14215: LD_INT 113
14217: PPUSH
14218: CALL_OW 111
// Wait ( 0 0$2 ) ;
14222: LD_INT 70
14224: PPUSH
14225: CALL_OW 67
// end else
14229: GO 14243
// begin SetSide ( dep , 4 ) ;
14231: LD_VAR 0 4
14235: PPUSH
14236: LD_INT 4
14238: PPUSH
14239: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14243: LD_ADDR_VAR 0 4
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PUSH
14277: LD_INT 1
14279: ARRAY
14280: ST_TO_ADDR
// if not has_eng then
14281: LD_VAR 0 2
14285: NOT
14286: IFFALSE 14373
// for i = 1 to 2 do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_INT 2
14300: PUSH
14301: FOR_TO
14302: IFFALSE 14371
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14304: LD_VAR 0 3
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 4
14317: PPUSH
14318: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14322: LD_VAR 0 3
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: LD_INT 2
14333: PPUSH
14334: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14338: LD_VAR 0 3
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 3
14368: ST_TO_ADDR
// end ;
14369: GO 14301
14371: POP
14372: POP
// if IsInUnit ( Cornel ) then
14373: LD_EXP 44
14377: PPUSH
14378: CALL_OW 310
14382: IFFALSE 14460
// begin cargo := IsInUnit ( Cornel ) ;
14384: LD_ADDR_VAR 0 7
14388: PUSH
14389: LD_EXP 44
14393: PPUSH
14394: CALL_OW 310
14398: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 289
14411: IFFALSE 14422
// ComUnload ( cargo ) ;
14413: LD_VAR 0 7
14417: PPUSH
14418: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14422: LD_EXP 44
14426: PPUSH
14427: LD_INT 235
14429: PPUSH
14430: LD_INT 122
14432: PPUSH
14433: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14446: LD_EXP 44
14450: PPUSH
14451: LD_VAR 0 4
14455: PPUSH
14456: CALL_OW 180
// end ; if Bierezov then
14460: LD_EXP 45
14464: IFFALSE 14512
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14466: LD_EXP 45
14470: PPUSH
14471: LD_INT 260
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: CALL_OW 111
// if dep then
14481: LD_VAR 0 4
14485: IFFALSE 14503
// AddComEnterUnit ( Bierezov , dep ) else
14487: LD_EXP 45
14491: PPUSH
14492: LD_VAR 0 4
14496: PPUSH
14497: CALL_OW 180
14501: GO 14512
// AddComHold ( Bierezov ) ;
14503: LD_EXP 45
14507: PPUSH
14508: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14512: LD_INT 525
14514: PPUSH
14515: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PPUSH
14548: CALL_OW 69
14552: PUSH
14553: LD_EXP 45
14557: DIFF
14558: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14559: LD_INT 35
14561: PPUSH
14562: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14566: LD_ADDR_VAR 0 6
14570: PUSH
14571: LD_INT 10
14573: PPUSH
14574: CALL_OW 435
14578: ST_TO_ADDR
// if crates then
14579: LD_VAR 0 6
14583: IFFALSE 14612
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: LD_VAR 0 6
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 6
14603: PUSH
14604: LD_INT 2
14606: ARRAY
14607: PPUSH
14608: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 274
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 275
14629: PUSH
14630: LD_INT 40
14632: GREATEREQUAL
14633: IFFALSE 14559
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14635: LD_ADDR_VAR 0 5
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: LD_INT 256
14645: PUSH
14646: LD_INT 111
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 31
14660: PUSH
14661: LD_INT 243
14663: PUSH
14664: LD_INT 112
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 31
14678: PUSH
14679: LD_INT 254
14681: PUSH
14682: LD_INT 114
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: ST_TO_ADDR
// for i in blist do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_VAR 0 5
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14759
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14712: LD_VAR 0 2
14716: PPUSH
14717: LD_VAR 0 1
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 1
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 3
14742: ARRAY
14743: PPUSH
14744: LD_VAR 0 1
14748: PUSH
14749: LD_INT 4
14751: ARRAY
14752: PPUSH
14753: CALL_OW 205
14757: GO 14709
14759: POP
14760: POP
// repeat wait ( 0 0$01 ) ;
14761: LD_INT 35
14763: PPUSH
14764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14768: LD_INT 22
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 4
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 57
14793: PUSH
14794: EMPTY
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: IFFALSE 14761
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 22
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 30
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 69
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 183
// if has_eng > 1 then
14866: LD_VAR 0 2
14870: PUSH
14871: LD_INT 1
14873: GREATER
14874: IFFALSE 15016
// for i = has_eng downto 2 do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: DOUBLE
14882: LD_VAR 0 2
14886: INC
14887: ST_TO_ADDR
14888: LD_INT 2
14890: PUSH
14891: FOR_DOWNTO
14892: IFFALSE 15014
// begin if IsInUnit ( has_eng [ i ] ) then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: ARRAY
14904: PPUSH
14905: CALL_OW 310
14909: IFFALSE 14926
// ComExitBuilding ( has_eng [ i ] ) ;
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 1
14920: ARRAY
14921: PPUSH
14922: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14926: LD_VAR 0 2
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: PPUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 4
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14992: LD_ADDR_VAR 0 2
14996: PUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 3
15011: ST_TO_ADDR
// end ;
15012: GO 14891
15014: POP
15015: POP
// repeat wait ( 0 0$01 ) ;
15016: LD_INT 35
15018: PPUSH
15019: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15023: LD_INT 22
15025: PUSH
15026: LD_INT 4
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 31
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: LD_INT 57
15048: PUSH
15049: EMPTY
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: PUSH
15066: LD_INT 1
15068: GREATER
15069: IFFALSE 15016
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15071: LD_ADDR_VAR 0 8
15075: PUSH
15076: LD_EXP 6
15080: PPUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 72
15095: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15096: LD_ADDR_VAR 0 1
15100: PUSH
15101: DOUBLE
15102: LD_INT 1
15104: DEC
15105: ST_TO_ADDR
15106: LD_INT 22
15108: PUSH
15109: LD_INT 4
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 31
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 3
15128: PUSH
15129: LD_INT 57
15131: PUSH
15132: EMPTY
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: FOR_TO
15150: IFFALSE 15234
// begin if not sol [ i ] then
15152: LD_VAR 0 8
15156: PUSH
15157: LD_VAR 0 1
15161: ARRAY
15162: NOT
15163: IFFALSE 15167
// break ;
15165: GO 15234
// ComExitBuilding ( sol [ i ] ) ;
15167: LD_VAR 0 8
15171: PUSH
15172: LD_VAR 0 1
15176: ARRAY
15177: PPUSH
15178: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15182: LD_VAR 0 8
15186: PUSH
15187: LD_VAR 0 1
15191: ARRAY
15192: PPUSH
15193: LD_INT 22
15195: PUSH
15196: LD_INT 4
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 31
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: PUSH
15222: LD_VAR 0 1
15226: ARRAY
15227: PPUSH
15228: CALL_OW 180
// end ;
15232: GO 15149
15234: POP
15235: POP
// if sol > 3 then
15236: LD_VAR 0 8
15240: PUSH
15241: LD_INT 3
15243: GREATER
15244: IFFALSE 15361
// begin ComExitBuilding ( sol [ 3 ] ) ;
15246: LD_VAR 0 8
15250: PUSH
15251: LD_INT 3
15253: ARRAY
15254: PPUSH
15255: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15259: LD_VAR 0 8
15263: PUSH
15264: LD_INT 3
15266: ARRAY
15267: PPUSH
15268: LD_INT 246
15270: PPUSH
15271: LD_INT 94
15273: PPUSH
15274: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15278: LD_VAR 0 8
15282: PUSH
15283: LD_INT 3
15285: ARRAY
15286: PPUSH
15287: LD_INT 175
15289: PPUSH
15290: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: LD_INT 224
15305: PPUSH
15306: LD_INT 90
15308: PPUSH
15309: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15313: LD_VAR 0 8
15317: PUSH
15318: LD_INT 3
15320: ARRAY
15321: PPUSH
15322: LD_INT 245
15324: PPUSH
15325: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15329: LD_VAR 0 8
15333: PUSH
15334: LD_INT 3
15336: ARRAY
15337: PPUSH
15338: LD_INT 223
15340: PPUSH
15341: LD_INT 110
15343: PPUSH
15344: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15348: LD_VAR 0 8
15352: PUSH
15353: LD_INT 3
15355: ARRAY
15356: PPUSH
15357: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_VAR 0 4
15370: PPUSH
15371: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15375: LD_INT 22
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 30
15387: PUSH
15388: LD_INT 4
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PPUSH
15408: CALL_OW 313
15412: PUSH
15413: LD_INT 6
15415: LESS
15416: IFFALSE 15480
// begin if IsInUnit ( Cornel ) then
15418: LD_EXP 44
15422: PPUSH
15423: CALL_OW 310
15427: IFFALSE 15438
// ComExitBuilding ( Cornel ) ;
15429: LD_EXP 44
15433: PPUSH
15434: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15438: LD_EXP 44
15442: PPUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 30
15455: PUSH
15456: LD_INT 4
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15480: LD_INT 35
15482: PPUSH
15483: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_INT 22
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: LD_INT 24
15517: PUSH
15518: LD_INT 1000
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if filter and has_eng then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 2
15548: AND
15549: IFFALSE 15615
// begin for i in has_eng do
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_VAR 0 2
15560: PUSH
15561: FOR_IN
15562: IFFALSE 15611
// begin if IsInUnit ( i ) then
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 310
15573: IFFALSE 15584
// ComExitBuilding ( i ) ;
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 122
// Wait ( 3 ) ;
15584: LD_INT 3
15586: PPUSH
15587: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15591: LD_VAR 0 1
15595: PPUSH
15596: LD_VAR 0 3
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: CALL_OW 130
// end ;
15609: GO 15561
15611: POP
15612: POP
// end else
15613: GO 15669
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15615: LD_VAR 0 2
15619: PUSH
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_INT 56
15627: PUSH
15628: EMPTY
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: AND
15636: IFFALSE 15669
// for i in has_eng do
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_VAR 0 2
15647: PUSH
15648: FOR_IN
15649: IFFALSE 15667
// ComEnterUnit ( i , dep ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_VAR 0 4
15660: PPUSH
15661: CALL_OW 120
15665: GO 15648
15667: POP
15668: POP
// until cornel_prepared ;
15669: LD_EXP 11
15673: IFFALSE 15480
// end ;
15675: PPOPN 8
15677: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15678: LD_EXP 11
15682: IFFALSE 16081
15684: GO 15686
15686: DISABLE
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 4
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 30
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15730: LD_EXP 6
15734: PPUSH
15735: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15739: LD_EXP 45
15743: PUSH
15744: LD_EXP 45
15748: PPUSH
15749: CALL_OW 310
15753: AND
15754: IFFALSE 15765
// ComExitBuilding ( Bierezov ) ;
15756: LD_EXP 45
15760: PPUSH
15761: CALL_OW 122
// Wait ( 0 0$03 ) ;
15765: LD_INT 105
15767: PPUSH
15768: CALL_OW 67
// for i in cornel_units do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_EXP 6
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15859
// begin if GetClass ( i ) in [ 2 , 3 ] then
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 257
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: IN
15805: IFFALSE 15842
// begin ComEnterUnit ( i , arm ) ;
15807: LD_VAR 0 1
15811: PPUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 183
// AddComExitBuilding ( i ) ;
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 257
15849: PPUSH
15850: LD_INT 121
15852: PPUSH
15853: CALL_OW 171
// end ;
15857: GO 15782
15859: POP
15860: POP
// Wait ( 1 1$00 ) ;
15861: LD_INT 2100
15863: PPUSH
15864: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15868: LD_ADDR_VAR 0 3
15872: PUSH
15873: LD_EXP 44
15877: PUSH
15878: LD_EXP 45
15882: ADD
15883: PUSH
15884: LD_EXP 6
15888: ADD
15889: PUSH
15890: LD_EXP 6
15894: PPUSH
15895: LD_INT 21
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 72
15909: DIFF
15910: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 248
15918: PPUSH
15919: LD_INT 85
15921: PPUSH
15922: CALL_OW 111
// AddComHold ( filter ) ;
15926: LD_VAR 0 3
15930: PPUSH
15931: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// until cornel_attack ;
15942: LD_EXP 9
15946: IFFALSE 15935
// ComAgressiveMove ( filter , 209 , 63 ) ;
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 209
15955: PPUSH
15956: LD_INT 63
15958: PPUSH
15959: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15963: LD_EXP 44
15967: PPUSH
15968: LD_INT 208
15970: PPUSH
15971: LD_INT 62
15973: PPUSH
15974: CALL_OW 114
// AddComHold ( Cornel ) ;
15978: LD_EXP 44
15982: PPUSH
15983: CALL_OW 200
// if Bierezov then
15987: LD_EXP 45
15991: IFFALSE 16081
// begin filter := filter diff Bierezov ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_EXP 45
16007: DIFF
16008: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16009: LD_EXP 45
16013: PPUSH
16014: LD_INT 6
16016: PPUSH
16017: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16021: LD_EXP 45
16025: PPUSH
16026: LD_INT 235
16028: PPUSH
16029: LD_INT 60
16031: PPUSH
16032: CALL_OW 111
// AddComHold ( Bierezov ) ;
16036: LD_EXP 45
16040: PPUSH
16041: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16045: LD_EXP 45
16049: PPUSH
16050: LD_INT 350
16052: PPUSH
16053: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 198
16064: PPUSH
16065: LD_INT 28
16067: PPUSH
16068: CALL_OW 171
// AddComHold ( Bierezov ) ;
16072: LD_EXP 45
16076: PPUSH
16077: CALL_OW 200
// end ; end ; end_of_file
16081: PPOPN 3
16083: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16084: LD_EXP 53
16088: PUSH
16089: LD_EXP 31
16093: NOT
16094: AND
16095: PUSH
16096: LD_EXP 32
16100: NOT
16101: AND
16102: IFFALSE 16552
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
// begin enable ;
16113: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16114: LD_ADDR_VAR 0 4
16118: PUSH
16119: LD_INT 81
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: ST_TO_ADDR
// for i = 1 to ru_patrol do
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: DOUBLE
16140: LD_INT 1
16142: DEC
16143: ST_TO_ADDR
16144: LD_EXP 53
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16550
// begin un := ru_patrol [ i ] ;
16152: LD_ADDR_VAR 0 1
16156: PUSH
16157: LD_EXP 53
16161: PUSH
16162: LD_VAR 0 2
16166: ARRAY
16167: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 13
16175: PPUSH
16176: CALL_OW 308
16180: IFFALSE 16285
// begin if not ru_alert then
16182: LD_EXP 60
16186: NOT
16187: IFFALSE 16197
// ru_alert := true ;
16189: LD_ADDR_EXP 60
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if not See ( 1 , un ) then
16197: LD_INT 1
16199: PPUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 292
16209: NOT
16210: IFFALSE 16224
// SetLives ( un , 1000 ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1000
16219: PPUSH
16220: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16224: LD_ADDR_EXP 53
16228: PUSH
16229: LD_EXP 53
16233: PUSH
16234: LD_VAR 0 1
16238: DIFF
16239: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16240: LD_VAR 0 1
16244: PPUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 30
16257: PUSH
16258: LD_INT 4
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: PPUSH
16274: CALL 1007 0 1
16278: PPUSH
16279: CALL_OW 120
// continue ;
16283: GO 16149
// end ; if IsOk ( un ) and not HasTask ( un ) then
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 302
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 314
16304: NOT
16305: AND
16306: IFFALSE 16399
// begin for j = 1 to ru_firepoints_south [ i ] do
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: DOUBLE
16314: LD_INT 1
16316: DEC
16317: ST_TO_ADDR
16318: LD_EXP 59
16322: PUSH
16323: LD_VAR 0 2
16327: ARRAY
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16397
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: LD_EXP 59
16341: PUSH
16342: LD_VAR 0 2
16346: ARRAY
16347: PUSH
16348: LD_VAR 0 3
16352: ARRAY
16353: PUSH
16354: LD_INT 1
16356: ARRAY
16357: PPUSH
16358: LD_EXP 59
16362: PUSH
16363: LD_VAR 0 2
16367: ARRAY
16368: PUSH
16369: LD_VAR 0 3
16373: ARRAY
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: LD_INT 70
16390: PPUSH
16391: CALL_OW 202
// end ;
16395: GO 16329
16397: POP
16398: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 256
16408: PUSH
16409: LD_INT 700
16411: LESS
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: LD_INT 13
16420: PPUSH
16421: CALL_OW 308
16425: NOT
16426: AND
16427: IFFALSE 16479
// begin ComMoveToArea ( un , retreatArea ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_INT 13
16436: PPUSH
16437: CALL_OW 113
// if not ru_alert_xy then
16441: LD_EXP 61
16445: NOT
16446: IFFALSE 16477
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16448: LD_ADDR_EXP 61
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 250
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 251
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// end else
16477: GO 16548
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_VAR 0 4
16488: PPUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 74
16498: PPUSH
16499: CALL_OW 296
16503: PUSH
16504: LD_INT 9
16506: LESS
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 256
16517: PUSH
16518: LD_INT 500
16520: GREATER
16521: AND
16522: IFFALSE 16548
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_VAR 0 4
16533: PPUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 74
16543: PPUSH
16544: CALL_OW 115
// end ;
16548: GO 16149
16550: POP
16551: POP
// end ;
16552: PPOPN 4
16554: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16555: LD_EXP 60
16559: PUSH
16560: LD_EXP 61
16564: AND
16565: PUSH
16566: LD_EXP 31
16570: NOT
16571: AND
16572: PUSH
16573: LD_EXP 32
16577: NOT
16578: AND
16579: IFFALSE 16789
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
// begin enable ;
16588: ENABLE
// if not ru_vehicles then
16589: LD_EXP 56
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16789
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_INT 81
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: ST_TO_ADDR
// if ru_vehicles then
16618: LD_EXP 56
16622: IFFALSE 16789
// begin for i in ru_vehicles do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_EXP 56
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16787
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 302
16646: PUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_VAR 0 2
16656: PPUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 74
16666: PPUSH
16667: CALL_OW 296
16671: PUSH
16672: LD_INT 9
16674: LESS
16675: AND
16676: IFFALSE 16702
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16678: LD_VAR 0 1
16682: PPUSH
16683: LD_VAR 0 2
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 74
16697: PPUSH
16698: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 314
16711: NOT
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 302
16722: AND
16723: PUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_EXP 61
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_EXP 61
16742: PUSH
16743: LD_INT 2
16745: ARRAY
16746: PPUSH
16747: CALL_OW 297
16751: PUSH
16752: LD_INT 10
16754: GREATER
16755: AND
16756: IFFALSE 16785
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16758: LD_VAR 0 1
16762: PPUSH
16763: LD_EXP 61
16767: PUSH
16768: LD_INT 1
16770: ARRAY
16771: PPUSH
16772: LD_EXP 61
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PPUSH
16781: CALL_OW 114
// end ;
16785: GO 16634
16787: POP
16788: POP
// end ; end ;
16789: PPOPN 2
16791: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16792: LD_EXP 61
16796: PUSH
16797: LD_EXP 60
16801: AND
16802: PUSH
16803: LD_INT 3
16805: PPUSH
16806: CALL_OW 463
16810: NOT
16811: AND
16812: PUSH
16813: LD_EXP 31
16817: NOT
16818: AND
16819: PUSH
16820: LD_EXP 32
16824: NOT
16825: AND
16826: IFFALSE 16921
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
// begin enable ;
16834: ENABLE
// ru_alert_xy := false ;
16835: LD_ADDR_EXP 61
16839: PUSH
16840: LD_INT 0
16842: ST_TO_ADDR
// ru_alert := false ;
16843: LD_ADDR_EXP 60
16847: PUSH
16848: LD_INT 0
16850: ST_TO_ADDR
// if ru_vehicles then
16851: LD_EXP 56
16855: IFFALSE 16921
// for i in ru_vehicles do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: LD_EXP 56
16866: PUSH
16867: FOR_IN
16868: IFFALSE 16919
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 302
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_INT 89
16887: PPUSH
16888: LD_INT 36
16890: PPUSH
16891: CALL_OW 297
16895: PUSH
16896: LD_INT 10
16898: GREATER
16899: AND
16900: IFFALSE 16917
// ComMoveXY ( i , 89 , 36 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 89
16909: PPUSH
16910: LD_INT 36
16912: PPUSH
16913: CALL_OW 111
16917: GO 16867
16919: POP
16920: POP
// end ;
16921: PPOPN 1
16923: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16924: LD_EXP 55
16928: PUSH
16929: LD_EXP 31
16933: NOT
16934: AND
16935: PUSH
16936: LD_EXP 32
16940: NOT
16941: AND
16942: IFFALSE 17226
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
// begin enable ;
16952: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_INT 81
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// for i = 1 to ru_forest do
16973: LD_ADDR_VAR 0 1
16977: PUSH
16978: DOUBLE
16979: LD_INT 1
16981: DEC
16982: ST_TO_ADDR
16983: LD_EXP 55
16987: PUSH
16988: FOR_TO
16989: IFFALSE 17224
// begin un := ru_forest [ i ] ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_EXP 55
17000: PUSH
17001: LD_VAR 0 1
17005: ARRAY
17006: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 13
17014: PPUSH
17015: CALL_OW 308
17019: IFFALSE 17109
// begin if not See ( 1 , un ) then
17021: LD_INT 1
17023: PPUSH
17024: LD_VAR 0 2
17028: PPUSH
17029: CALL_OW 292
17033: NOT
17034: IFFALSE 17048
// SetLives ( un , 1000 ) ;
17036: LD_VAR 0 2
17040: PPUSH
17041: LD_INT 1000
17043: PPUSH
17044: CALL_OW 234
// ru_forest := ru_forest diff un ;
17048: LD_ADDR_EXP 55
17052: PUSH
17053: LD_EXP 55
17057: PUSH
17058: LD_VAR 0 2
17062: DIFF
17063: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_INT 22
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 30
17081: PUSH
17082: LD_INT 4
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: PPUSH
17098: CALL 1007 0 1
17102: PPUSH
17103: CALL_OW 120
// continue ;
17107: GO 16988
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 256
17118: PUSH
17119: LD_INT 700
17121: LESS
17122: PUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_INT 13
17130: PPUSH
17131: CALL_OW 308
17135: NOT
17136: AND
17137: IFFALSE 17153
// ComMoveToArea ( un , retreatArea ) else
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_INT 13
17146: PPUSH
17147: CALL_OW 113
17151: GO 17222
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17153: LD_VAR 0 2
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 74
17172: PPUSH
17173: CALL_OW 296
17177: PUSH
17178: LD_INT 9
17180: LESS
17181: PUSH
17182: LD_VAR 0 2
17186: PPUSH
17187: CALL_OW 256
17191: PUSH
17192: LD_INT 500
17194: GREATER
17195: AND
17196: IFFALSE 17222
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17198: LD_VAR 0 2
17202: PPUSH
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_VAR 0 2
17212: PPUSH
17213: CALL_OW 74
17217: PPUSH
17218: CALL_OW 115
// end ;
17222: GO 16988
17224: POP
17225: POP
// end ;
17226: PPOPN 3
17228: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17229: LD_EXP 32
17233: NOT
17234: IFFALSE 17355
17236: GO 17238
17238: DISABLE
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
// begin enable ;
17243: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// if filter then
17278: LD_VAR 0 2
17282: IFFALSE 17355
// for i in filter do
17284: LD_ADDR_VAR 0 1
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17353
// if GetLives ( i ) < 990 then
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 256
17306: PUSH
17307: LD_INT 990
17309: LESS
17310: IFFALSE 17351
// begin ru_alert := true ;
17312: LD_ADDR_EXP 60
17316: PUSH
17317: LD_INT 1
17319: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17320: LD_ADDR_EXP 61
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 250
17334: PUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 251
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: ST_TO_ADDR
// break ;
17349: GO 17353
// end ;
17351: GO 17294
17353: POP
17354: POP
// end ;
17355: PPOPN 2
17357: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17358: LD_EXP 31
17362: IFFALSE 17511
17364: GO 17366
17366: DISABLE
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17373: LD_ADDR_VAR 0 4
17377: PUSH
17378: LD_EXP 56
17382: PUSH
17383: LD_EXP 55
17387: ADD
17388: PUSH
17389: LD_EXP 53
17393: ADD
17394: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17395: LD_ADDR_VAR 0 3
17399: PUSH
17400: LD_INT 3
17402: PPUSH
17403: LD_INT 81
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PPUSH
17413: CALL_OW 70
17417: ST_TO_ADDR
// if filter and enemy then
17418: LD_VAR 0 4
17422: PUSH
17423: LD_VAR 0 3
17427: AND
17428: IFFALSE 17511
// repeat wait ( 0 0$01 ) ;
17430: LD_INT 35
17432: PPUSH
17433: CALL_OW 67
// for i in filter do
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_VAR 0 4
17446: PUSH
17447: FOR_IN
17448: IFFALSE 17476
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 74
17469: PPUSH
17470: CALL_OW 115
// end ;
17474: GO 17447
17476: POP
17477: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17478: LD_INT 3
17480: PPUSH
17481: LD_INT 81
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PPUSH
17491: CALL_OW 70
17495: PUSH
17496: LD_INT 0
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 0
17507: EQUAL
17508: OR
17509: IFFALSE 17430
// end ;
17511: PPOPN 4
17513: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17514: LD_EXP 26
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 30
17531: PUSH
17532: LD_INT 4
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: LD_INT 57
17544: PUSH
17545: EMPTY
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: AND
17562: IFFALSE 17611
17564: GO 17566
17566: DISABLE
17567: LD_INT 0
17569: PPUSH
// begin if not ru_cornel_attack then
17570: LD_EXP 58
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17611
// for i in ru_cornel_attack do
17579: LD_ADDR_VAR 0 1
17583: PUSH
17584: LD_EXP 58
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17609
// ComAgressiveMove ( i , 258 , 119 ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_INT 258
17599: PPUSH
17600: LD_INT 119
17602: PPUSH
17603: CALL_OW 114
17607: GO 17589
17609: POP
17610: POP
// end ; end_of_file
17611: PPOPN 1
17613: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17614: LD_EXP 5
17618: PUSH
17619: LD_EXP 9
17623: NOT
17624: AND
17625: PUSH
17626: LD_EXP 20
17630: AND
17631: IFFALSE 17743
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// crates_counter := crates_counter - 50 ;
17640: LD_ADDR_EXP 20
17644: PUSH
17645: LD_EXP 20
17649: PUSH
17650: LD_INT 50
17652: MINUS
17653: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17654: LD_INT 8
17656: PPUSH
17657: LD_INT 2
17659: PPUSH
17660: LD_INT 5
17662: PPUSH
17663: CALL_OW 12
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17675: LD_INT 1785
17677: PPUSH
17678: LD_INT 2345
17680: PPUSH
17681: CALL_OW 12
17685: PPUSH
17686: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_INT 1
17697: PPUSH
17698: LD_OWVAR 67
17702: PUSH
17703: LD_INT 2
17705: PLUS
17706: PPUSH
17707: CALL_OW 12
17711: ST_TO_ADDR
// if r < 3 then
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: IFFALSE 17743
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17722: LD_INT 4
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: LD_INT 5
17730: PPUSH
17731: CALL_OW 12
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 55
// end ;
17743: PPOPN 1
17745: END
// every 0 0$01 trigger cornel_active do
17746: LD_EXP 8
17750: IFFALSE 17839
17752: GO 17754
17754: DISABLE
// begin Wait ( 0 0$03 ) ;
17755: LD_INT 105
17757: PPUSH
17758: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17762: LD_INT 2
17764: PPUSH
17765: LD_INT 5
17767: PPUSH
17768: CALL_OW 12
17772: PPUSH
17773: LD_INT 10
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 55
// Wait ( 0 0$13 ) ;
17783: LD_INT 455
17785: PPUSH
17786: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17790: LD_INT 2
17792: PPUSH
17793: LD_INT 5
17795: PPUSH
17796: CALL_OW 12
17800: PPUSH
17801: LD_INT 10
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 55
// Wait ( 0 0$16 ) ;
17811: LD_INT 560
17813: PPUSH
17814: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17818: LD_INT 2
17820: PPUSH
17821: LD_INT 5
17823: PPUSH
17824: CALL_OW 12
17828: PPUSH
17829: LD_INT 10
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: CALL_OW 55
// end ; end_of_file
17839: END
// every 0 0$01 trigger cornel_prepared do
17840: LD_EXP 11
17844: IFFALSE 17903
17846: GO 17848
17848: DISABLE
// begin enable ;
17849: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17850: LD_ADDR_OWVAR 47
17854: PUSH
17855: LD_STRING #Am03-1
17857: PUSH
17858: LD_EXP 10
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17867: LD_ADDR_EXP 10
17871: PUSH
17872: LD_EXP 10
17876: PPUSH
17877: LD_STRING -
17879: PPUSH
17880: CALL 1077 0 2
17884: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17885: LD_EXP 10
17889: PUSH
17890: LD_INT 0
17892: EQUAL
17893: IFFALSE 17903
// begin Display_Strings := [ ] ;
17895: LD_ADDR_OWVAR 47
17899: PUSH
17900: EMPTY
17901: ST_TO_ADDR
// disable ;
17902: DISABLE
// end ; end ;
17903: END
// every 0 0$01 trigger debug and debug_strings do
17904: LD_EXP 1
17908: PUSH
17909: LD_OWVAR 48
17913: AND
17914: IFFALSE 17930
17916: GO 17918
17918: DISABLE
// begin enable ;
17919: ENABLE
// Display_Strings := debug_strings ;
17920: LD_ADDR_OWVAR 47
17924: PUSH
17925: LD_OWVAR 48
17929: ST_TO_ADDR
// end ; end_of_file
17930: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 255
17940: PUSH
17941: LD_INT 1
17943: EQUAL
17944: PUSH
17945: LD_EXP 14
17949: NOT
17950: AND
17951: IFFALSE 17961
// solar_builded := true ;
17953: LD_ADDR_EXP 14
17957: PUSH
17958: LD_INT 1
17960: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17961: LD_VAR 0 1
17965: PPUSH
17966: CALL_OW 255
17970: PUSH
17971: LD_INT 1
17973: EQUAL
17974: PUSH
17975: LD_EXP 29
17979: AND
17980: IFFALSE 18017
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
17982: LD_ADDR_EXP 29
17986: PUSH
17987: LD_EXP 29
17991: PUSH
17992: LD_INT 1750
17994: PUSH
17995: LD_INT 1400
17997: PUSH
17998: LD_INT 1225
18000: PUSH
18001: LD_INT 1050
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: LD_OWVAR 67
18014: ARRAY
18015: PLUS
18016: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 255
18026: PUSH
18027: LD_INT 3
18029: EQUAL
18030: IFFALSE 18048
// ru_vehicles := ru_vehicles ^ veh ;
18032: LD_ADDR_EXP 56
18036: PUSH
18037: LD_EXP 56
18041: PUSH
18042: LD_VAR 0 1
18046: ADD
18047: ST_TO_ADDR
// end ;
18048: PPOPN 2
18050: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
18051: LD_VAR 0 1
18055: PUSH
18056: LD_EXP 53
18060: IN
18061: IFFALSE 18079
// ru_patrol := ru_patrol diff un ;
18063: LD_ADDR_EXP 53
18067: PUSH
18068: LD_EXP 53
18072: PUSH
18073: LD_VAR 0 1
18077: DIFF
18078: ST_TO_ADDR
// if un in ru_forest then
18079: LD_VAR 0 1
18083: PUSH
18084: LD_EXP 55
18088: IN
18089: IFFALSE 18107
// ru_forest := ru_forest diff un ;
18091: LD_ADDR_EXP 55
18095: PUSH
18096: LD_EXP 55
18100: PUSH
18101: LD_VAR 0 1
18105: DIFF
18106: ST_TO_ADDR
// if un in ru_vehicles then
18107: LD_VAR 0 1
18111: PUSH
18112: LD_EXP 56
18116: IN
18117: IFFALSE 18223
// begin ru_vehicles := ru_vehicles diff un ;
18119: LD_ADDR_EXP 56
18123: PUSH
18124: LD_EXP 56
18128: PUSH
18129: LD_VAR 0 1
18133: DIFF
18134: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18135: LD_ADDR_EXP 57
18139: PUSH
18140: LD_EXP 57
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 265
18154: PUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 262
18164: PUSH
18165: LD_VAR 0 1
18169: PPUSH
18170: CALL_OW 263
18174: PUSH
18175: LD_VAR 0 1
18179: PPUSH
18180: CALL_OW 264
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: ADD
18191: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18192: LD_ADDR_EXP 13
18196: PUSH
18197: LD_EXP 13
18201: PUSH
18202: LD_INT 1
18204: PLUS
18205: ST_TO_ADDR
// if ach_counter = 10 then
18206: LD_EXP 13
18210: PUSH
18211: LD_INT 10
18213: EQUAL
18214: IFFALSE 18223
// SetAchievement ( ACH_FAUST ) ;
18216: LD_STRING ACH_FAUST
18218: PPUSH
18219: CALL_OW 543
// end ; if un = Pokryshkin then
18223: LD_VAR 0 1
18227: PUSH
18228: LD_EXP 52
18232: EQUAL
18233: IFFALSE 18242
// SetAchievement ( ACH_POKR ) ;
18235: LD_STRING ACH_POKR
18237: PPUSH
18238: CALL_OW 543
// if un = JMM then
18242: LD_VAR 0 1
18246: PUSH
18247: LD_EXP 37
18251: EQUAL
18252: IFFALSE 18261
// YouLost ( 0 ) ;
18254: LD_STRING 0
18256: PPUSH
18257: CALL_OW 104
// if un = us_dep_west then
18261: LD_VAR 0 1
18265: PUSH
18266: LD_INT 1
18268: EQUAL
18269: IFFALSE 18278
// YouLost ( 2 ) ;
18271: LD_STRING 2
18273: PPUSH
18274: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 255
18287: PUSH
18288: LD_INT 8
18290: EQUAL
18291: PUSH
18292: LD_EXP 5
18296: NOT
18297: AND
18298: IFFALSE 18307
// YouLost ( 4 ) ;
18300: LD_STRING 4
18302: PPUSH
18303: CALL_OW 104
// if un in jmm_units then
18307: LD_VAR 0 1
18311: PUSH
18312: LD_EXP 4
18316: IN
18317: IFFALSE 18333
// lose_counter := lose_counter + 1 ;
18319: LD_ADDR_EXP 34
18323: PUSH
18324: LD_EXP 34
18328: PUSH
18329: LD_INT 1
18331: PLUS
18332: ST_TO_ADDR
// end ;
18333: PPOPN 1
18335: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18336: LD_INT 0
18338: PPUSH
18339: PPUSH
// begin if GetSide ( driver ) = 3 then
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 255
18349: PUSH
18350: LD_INT 3
18352: EQUAL
18353: IFFALSE 18431
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18355: LD_ADDR_VAR 0 6
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 3
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 69
18388: PPUSH
18389: CALL 1007 0 1
18393: ST_TO_ADDR
// if place then
18394: LD_VAR 0 6
18398: IFFALSE 18416
// ComEnterUnit ( driver , place ) else
18400: LD_VAR 0 1
18404: PPUSH
18405: LD_VAR 0 6
18409: PPUSH
18410: CALL_OW 120
18414: GO 18431
// ComMoveXY ( driver , 70 , 22 ) ;
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 70
18423: PPUSH
18424: LD_INT 22
18426: PPUSH
18427: CALL_OW 111
// end ; end ;
18431: PPOPN 6
18433: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18434: LD_VAR 0 1
18438: PUSH
18439: LD_INT 1
18441: EQUAL
18442: PUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_INT 4
18450: EQUAL
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: LD_INT 8
18459: EQUAL
18460: PUSH
18461: LD_EXP 5
18465: NOT
18466: AND
18467: OR
18468: AND
18469: IFFALSE 18478
// YouLost ( 5 ) ;
18471: LD_STRING 5
18473: PPUSH
18474: CALL_OW 104
// end ;
18478: PPOPN 2
18480: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18481: LD_EXP 36
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_INT 8
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 21
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 69
18543: ADD
18544: PLUS
18545: PUSH
18546: LD_INT 5
18548: LESS
18549: IFFALSE 18561
18551: GO 18553
18553: DISABLE
// YouLost ( 1 ) ;
18554: LD_STRING 1
18556: PPUSH
18557: CALL_OW 104
18561: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18562: LD_INT 1
18564: PPUSH
18565: CALL_OW 255
18569: PUSH
18570: LD_INT 3
18572: EQUAL
18573: IFFALSE 18585
18575: GO 18577
18577: DISABLE
// YouLost ( 3 ) ; end_of_file
18578: LD_STRING 3
18580: PPUSH
18581: CALL_OW 104
18585: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18586: LD_INT 0
18588: PPUSH
// ar_miner := 81 ;
18589: LD_ADDR_EXP 69
18593: PUSH
18594: LD_INT 81
18596: ST_TO_ADDR
// ar_crane := 88 ;
18597: LD_ADDR_EXP 68
18601: PUSH
18602: LD_INT 88
18604: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18605: LD_ADDR_EXP 63
18609: PUSH
18610: LD_INT 89
18612: ST_TO_ADDR
// us_hack := 99 ;
18613: LD_ADDR_EXP 64
18617: PUSH
18618: LD_INT 99
18620: ST_TO_ADDR
// us_artillery := 97 ;
18621: LD_ADDR_EXP 65
18625: PUSH
18626: LD_INT 97
18628: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18629: LD_ADDR_EXP 66
18633: PUSH
18634: LD_INT 91
18636: ST_TO_ADDR
// ar_mortar := 92 ;
18637: LD_ADDR_EXP 67
18641: PUSH
18642: LD_INT 92
18644: ST_TO_ADDR
// ru_radar := 98 ;
18645: LD_ADDR_EXP 62
18649: PUSH
18650: LD_INT 98
18652: ST_TO_ADDR
// tech_Artillery := 80 ;
18653: LD_ADDR_EXP 70
18657: PUSH
18658: LD_INT 80
18660: ST_TO_ADDR
// tech_RadMat := 81 ;
18661: LD_ADDR_EXP 71
18665: PUSH
18666: LD_INT 81
18668: ST_TO_ADDR
// tech_BasicTools := 82 ;
18669: LD_ADDR_EXP 72
18673: PUSH
18674: LD_INT 82
18676: ST_TO_ADDR
// tech_Cargo := 83 ;
18677: LD_ADDR_EXP 73
18681: PUSH
18682: LD_INT 83
18684: ST_TO_ADDR
// tech_Track := 84 ;
18685: LD_ADDR_EXP 74
18689: PUSH
18690: LD_INT 84
18692: ST_TO_ADDR
// tech_Crane := 85 ;
18693: LD_ADDR_EXP 75
18697: PUSH
18698: LD_INT 85
18700: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18701: LD_ADDR_EXP 76
18705: PUSH
18706: LD_INT 86
18708: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18709: LD_ADDR_EXP 77
18713: PUSH
18714: LD_INT 87
18716: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18717: LD_ADDR_EXP 78
18721: PUSH
18722: LD_INT 88
18724: ST_TO_ADDR
// class_mastodont := 31 ;
18725: LD_ADDR_EXP 79
18729: PUSH
18730: LD_INT 31
18732: ST_TO_ADDR
// class_horse := 21 ;
18733: LD_ADDR_EXP 80
18737: PUSH
18738: LD_INT 21
18740: ST_TO_ADDR
// end ;
18741: LD_VAR 0 1
18745: RET
// every 1 do
18746: GO 18748
18748: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18749: CALL 18586 0 0
18753: END
// every 0 0$1 do
18754: GO 18756
18756: DISABLE
// begin enable ;
18757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18758: LD_STRING updateTimer(
18760: PUSH
18761: LD_OWVAR 1
18765: STR
18766: PUSH
18767: LD_STRING );
18769: STR
18770: PPUSH
18771: CALL_OW 559
// end ;
18775: END
// on MapStart ( p ) do begin if streamModeActive then
18776: LD_EXP 81
18780: IFFALSE 18789
// DefineStreamItems ( true ) ;
18782: LD_INT 1
18784: PPUSH
18785: CALL 20437 0 1
// UpdateFactoryWaypoints ( ) ;
18789: CALL 34021 0 0
// end ;
18793: PPOPN 1
18795: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18796: LD_INT 0
18798: PPUSH
// if p2 = 100 then
18799: LD_VAR 0 2
18803: PUSH
18804: LD_INT 100
18806: EQUAL
18807: IFFALSE 19810
// begin if not StreamModeActive then
18809: LD_EXP 81
18813: NOT
18814: IFFALSE 18824
// StreamModeActive := true ;
18816: LD_ADDR_EXP 81
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 0 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 0
18831: EQUAL
18832: IFFALSE 18838
// InitStreamMode ;
18834: CALL 19973 0 0
// if p3 = 1 then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 1
18845: EQUAL
18846: IFFALSE 18856
// sRocket := true ;
18848: LD_ADDR_EXP 86
18852: PUSH
18853: LD_INT 1
18855: ST_TO_ADDR
// if p3 = 2 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_INT 2
18863: EQUAL
18864: IFFALSE 18874
// sSpeed := true ;
18866: LD_ADDR_EXP 85
18870: PUSH
18871: LD_INT 1
18873: ST_TO_ADDR
// if p3 = 3 then
18874: LD_VAR 0 3
18878: PUSH
18879: LD_INT 3
18881: EQUAL
18882: IFFALSE 18892
// sEngine := true ;
18884: LD_ADDR_EXP 87
18888: PUSH
18889: LD_INT 1
18891: ST_TO_ADDR
// if p3 = 4 then
18892: LD_VAR 0 3
18896: PUSH
18897: LD_INT 4
18899: EQUAL
18900: IFFALSE 18910
// sSpec := true ;
18902: LD_ADDR_EXP 84
18906: PUSH
18907: LD_INT 1
18909: ST_TO_ADDR
// if p3 = 5 then
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 5
18917: EQUAL
18918: IFFALSE 18928
// sLevel := true ;
18920: LD_ADDR_EXP 88
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 6 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 6
18935: EQUAL
18936: IFFALSE 18946
// sArmoury := true ;
18938: LD_ADDR_EXP 89
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// if p3 = 7 then
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 7
18953: EQUAL
18954: IFFALSE 18964
// sRadar := true ;
18956: LD_ADDR_EXP 90
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// if p3 = 8 then
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 8
18971: EQUAL
18972: IFFALSE 18982
// sBunker := true ;
18974: LD_ADDR_EXP 91
18978: PUSH
18979: LD_INT 1
18981: ST_TO_ADDR
// if p3 = 9 then
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 9
18989: EQUAL
18990: IFFALSE 19000
// sHack := true ;
18992: LD_ADDR_EXP 92
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// if p3 = 10 then
19000: LD_VAR 0 3
19004: PUSH
19005: LD_INT 10
19007: EQUAL
19008: IFFALSE 19018
// sFire := true ;
19010: LD_ADDR_EXP 93
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// if p3 = 11 then
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 11
19025: EQUAL
19026: IFFALSE 19036
// sRefresh := true ;
19028: LD_ADDR_EXP 94
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// if p3 = 12 then
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 12
19043: EQUAL
19044: IFFALSE 19054
// sExp := true ;
19046: LD_ADDR_EXP 95
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// if p3 = 13 then
19054: LD_VAR 0 3
19058: PUSH
19059: LD_INT 13
19061: EQUAL
19062: IFFALSE 19072
// sDepot := true ;
19064: LD_ADDR_EXP 96
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// if p3 = 14 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 14
19079: EQUAL
19080: IFFALSE 19090
// sFlag := true ;
19082: LD_ADDR_EXP 97
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// if p3 = 15 then
19090: LD_VAR 0 3
19094: PUSH
19095: LD_INT 15
19097: EQUAL
19098: IFFALSE 19108
// sKamikadze := true ;
19100: LD_ADDR_EXP 105
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// if p3 = 16 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 16
19115: EQUAL
19116: IFFALSE 19126
// sTroll := true ;
19118: LD_ADDR_EXP 106
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 17 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 17
19133: EQUAL
19134: IFFALSE 19144
// sSlow := true ;
19136: LD_ADDR_EXP 107
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 18 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 18
19151: EQUAL
19152: IFFALSE 19162
// sLack := true ;
19154: LD_ADDR_EXP 108
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 19 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 19
19169: EQUAL
19170: IFFALSE 19180
// sTank := true ;
19172: LD_ADDR_EXP 110
19176: PUSH
19177: LD_INT 1
19179: ST_TO_ADDR
// if p3 = 20 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 20
19187: EQUAL
19188: IFFALSE 19198
// sRemote := true ;
19190: LD_ADDR_EXP 111
19194: PUSH
19195: LD_INT 1
19197: ST_TO_ADDR
// if p3 = 21 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 21
19205: EQUAL
19206: IFFALSE 19216
// sPowell := true ;
19208: LD_ADDR_EXP 112
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// if p3 = 22 then
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 22
19223: EQUAL
19224: IFFALSE 19234
// sTeleport := true ;
19226: LD_ADDR_EXP 115
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 23 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 23
19241: EQUAL
19242: IFFALSE 19252
// sOilTower := true ;
19244: LD_ADDR_EXP 117
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// if p3 = 24 then
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 24
19259: EQUAL
19260: IFFALSE 19270
// sShovel := true ;
19262: LD_ADDR_EXP 118
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// if p3 = 25 then
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 25
19277: EQUAL
19278: IFFALSE 19288
// sSheik := true ;
19280: LD_ADDR_EXP 119
19284: PUSH
19285: LD_INT 1
19287: ST_TO_ADDR
// if p3 = 26 then
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 26
19295: EQUAL
19296: IFFALSE 19306
// sEarthquake := true ;
19298: LD_ADDR_EXP 121
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if p3 = 27 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 27
19313: EQUAL
19314: IFFALSE 19324
// sAI := true ;
19316: LD_ADDR_EXP 122
19320: PUSH
19321: LD_INT 1
19323: ST_TO_ADDR
// if p3 = 28 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 28
19331: EQUAL
19332: IFFALSE 19342
// sCargo := true ;
19334: LD_ADDR_EXP 125
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 29 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 29
19349: EQUAL
19350: IFFALSE 19360
// sDLaser := true ;
19352: LD_ADDR_EXP 126
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 30 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 30
19367: EQUAL
19368: IFFALSE 19378
// sExchange := true ;
19370: LD_ADDR_EXP 127
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 31 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 31
19385: EQUAL
19386: IFFALSE 19396
// sFac := true ;
19388: LD_ADDR_EXP 128
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 32 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 32
19403: EQUAL
19404: IFFALSE 19414
// sPower := true ;
19406: LD_ADDR_EXP 129
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 33 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 33
19421: EQUAL
19422: IFFALSE 19432
// sRandom := true ;
19424: LD_ADDR_EXP 130
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 34 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 34
19439: EQUAL
19440: IFFALSE 19450
// sShield := true ;
19442: LD_ADDR_EXP 131
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 35 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 35
19457: EQUAL
19458: IFFALSE 19468
// sTime := true ;
19460: LD_ADDR_EXP 132
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 36 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 36
19475: EQUAL
19476: IFFALSE 19486
// sTools := true ;
19478: LD_ADDR_EXP 133
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 101 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 101
19493: EQUAL
19494: IFFALSE 19504
// sSold := true ;
19496: LD_ADDR_EXP 98
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 102 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 102
19511: EQUAL
19512: IFFALSE 19522
// sDiff := true ;
19514: LD_ADDR_EXP 99
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 103 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 103
19529: EQUAL
19530: IFFALSE 19540
// sFog := true ;
19532: LD_ADDR_EXP 102
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 104 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 104
19547: EQUAL
19548: IFFALSE 19558
// sReset := true ;
19550: LD_ADDR_EXP 103
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 105 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 105
19565: EQUAL
19566: IFFALSE 19576
// sSun := true ;
19568: LD_ADDR_EXP 104
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 106 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 106
19583: EQUAL
19584: IFFALSE 19594
// sTiger := true ;
19586: LD_ADDR_EXP 100
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 107 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 107
19601: EQUAL
19602: IFFALSE 19612
// sBomb := true ;
19604: LD_ADDR_EXP 101
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 108 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 108
19619: EQUAL
19620: IFFALSE 19630
// sWound := true ;
19622: LD_ADDR_EXP 109
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 109 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 109
19637: EQUAL
19638: IFFALSE 19648
// sBetray := true ;
19640: LD_ADDR_EXP 113
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 110 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 110
19655: EQUAL
19656: IFFALSE 19666
// sContamin := true ;
19658: LD_ADDR_EXP 114
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 111 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 111
19673: EQUAL
19674: IFFALSE 19684
// sOil := true ;
19676: LD_ADDR_EXP 116
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 112 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 112
19691: EQUAL
19692: IFFALSE 19702
// sStu := true ;
19694: LD_ADDR_EXP 120
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 113 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 113
19709: EQUAL
19710: IFFALSE 19720
// sBazooka := true ;
19712: LD_ADDR_EXP 123
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 114 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 114
19727: EQUAL
19728: IFFALSE 19738
// sMortar := true ;
19730: LD_ADDR_EXP 124
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 115 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 115
19745: EQUAL
19746: IFFALSE 19756
// sRanger := true ;
19748: LD_ADDR_EXP 134
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 116 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 116
19763: EQUAL
19764: IFFALSE 19774
// sComputer := true ;
19766: LD_ADDR_EXP 135
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 117 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 117
19781: EQUAL
19782: IFFALSE 19792
// s30 := true ;
19784: LD_ADDR_EXP 136
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 118 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 118
19799: EQUAL
19800: IFFALSE 19810
// s60 := true ;
19802: LD_ADDR_EXP 137
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// end ; if p2 = 101 then
19810: LD_VAR 0 2
19814: PUSH
19815: LD_INT 101
19817: EQUAL
19818: IFFALSE 19946
// begin case p3 of 1 :
19820: LD_VAR 0 3
19824: PUSH
19825: LD_INT 1
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19840
19833: POP
// hHackUnlimitedResources ; 2 :
19834: CALL 32044 0 0
19838: GO 19946
19840: LD_INT 2
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19855
19848: POP
// hHackSetLevel10 ; 3 :
19849: CALL 32177 0 0
19853: GO 19946
19855: LD_INT 3
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19870
19863: POP
// hHackSetLevel10YourUnits ; 4 :
19864: CALL 32262 0 0
19868: GO 19946
19870: LD_INT 4
19872: DOUBLE
19873: EQUAL
19874: IFTRUE 19878
19876: GO 19885
19878: POP
// hHackInvincible ; 5 :
19879: CALL 32710 0 0
19883: GO 19946
19885: LD_INT 5
19887: DOUBLE
19888: EQUAL
19889: IFTRUE 19893
19891: GO 19900
19893: POP
// hHackInvisible ; 6 :
19894: CALL 32821 0 0
19898: GO 19946
19900: LD_INT 6
19902: DOUBLE
19903: EQUAL
19904: IFTRUE 19908
19906: GO 19915
19908: POP
// hHackChangeYourSide ; 7 :
19909: CALL 32878 0 0
19913: GO 19946
19915: LD_INT 7
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19930
19923: POP
// hHackChangeUnitSide ; 8 :
19924: CALL 32920 0 0
19928: GO 19946
19930: LD_INT 8
19932: DOUBLE
19933: EQUAL
19934: IFTRUE 19938
19936: GO 19945
19938: POP
// hHackFog ; end ;
19939: CALL 33021 0 0
19943: GO 19946
19945: POP
// end ; end ;
19946: LD_VAR 0 7
19950: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19951: GO 19953
19953: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19954: LD_STRING initStreamRollete();
19956: PPUSH
19957: CALL_OW 559
// InitStreamMode ;
19961: CALL 19973 0 0
// DefineStreamItems ( false ) ;
19965: LD_INT 0
19967: PPUSH
19968: CALL 20437 0 1
// end ;
19972: END
// function InitStreamMode ; begin
19973: LD_INT 0
19975: PPUSH
// streamModeActive := false ;
19976: LD_ADDR_EXP 81
19980: PUSH
19981: LD_INT 0
19983: ST_TO_ADDR
// normalCounter := 36 ;
19984: LD_ADDR_EXP 82
19988: PUSH
19989: LD_INT 36
19991: ST_TO_ADDR
// hardcoreCounter := 18 ;
19992: LD_ADDR_EXP 83
19996: PUSH
19997: LD_INT 18
19999: ST_TO_ADDR
// sRocket := false ;
20000: LD_ADDR_EXP 86
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// sSpeed := false ;
20008: LD_ADDR_EXP 85
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// sEngine := false ;
20016: LD_ADDR_EXP 87
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// sSpec := false ;
20024: LD_ADDR_EXP 84
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// sLevel := false ;
20032: LD_ADDR_EXP 88
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// sArmoury := false ;
20040: LD_ADDR_EXP 89
20044: PUSH
20045: LD_INT 0
20047: ST_TO_ADDR
// sRadar := false ;
20048: LD_ADDR_EXP 90
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// sBunker := false ;
20056: LD_ADDR_EXP 91
20060: PUSH
20061: LD_INT 0
20063: ST_TO_ADDR
// sHack := false ;
20064: LD_ADDR_EXP 92
20068: PUSH
20069: LD_INT 0
20071: ST_TO_ADDR
// sFire := false ;
20072: LD_ADDR_EXP 93
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sRefresh := false ;
20080: LD_ADDR_EXP 94
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sExp := false ;
20088: LD_ADDR_EXP 95
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sDepot := false ;
20096: LD_ADDR_EXP 96
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sFlag := false ;
20104: LD_ADDR_EXP 97
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sKamikadze := false ;
20112: LD_ADDR_EXP 105
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sTroll := false ;
20120: LD_ADDR_EXP 106
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sSlow := false ;
20128: LD_ADDR_EXP 107
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sLack := false ;
20136: LD_ADDR_EXP 108
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sTank := false ;
20144: LD_ADDR_EXP 110
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sRemote := false ;
20152: LD_ADDR_EXP 111
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sPowell := false ;
20160: LD_ADDR_EXP 112
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sTeleport := false ;
20168: LD_ADDR_EXP 115
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sOilTower := false ;
20176: LD_ADDR_EXP 117
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sShovel := false ;
20184: LD_ADDR_EXP 118
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sSheik := false ;
20192: LD_ADDR_EXP 119
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sEarthquake := false ;
20200: LD_ADDR_EXP 121
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sAI := false ;
20208: LD_ADDR_EXP 122
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sCargo := false ;
20216: LD_ADDR_EXP 125
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sDLaser := false ;
20224: LD_ADDR_EXP 126
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sExchange := false ;
20232: LD_ADDR_EXP 127
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sFac := false ;
20240: LD_ADDR_EXP 128
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sPower := false ;
20248: LD_ADDR_EXP 129
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sRandom := false ;
20256: LD_ADDR_EXP 130
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sShield := false ;
20264: LD_ADDR_EXP 131
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sTime := false ;
20272: LD_ADDR_EXP 132
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sTools := false ;
20280: LD_ADDR_EXP 133
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sSold := false ;
20288: LD_ADDR_EXP 98
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sDiff := false ;
20296: LD_ADDR_EXP 99
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sFog := false ;
20304: LD_ADDR_EXP 102
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sReset := false ;
20312: LD_ADDR_EXP 103
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sSun := false ;
20320: LD_ADDR_EXP 104
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sTiger := false ;
20328: LD_ADDR_EXP 100
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sBomb := false ;
20336: LD_ADDR_EXP 101
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sWound := false ;
20344: LD_ADDR_EXP 109
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sBetray := false ;
20352: LD_ADDR_EXP 113
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sContamin := false ;
20360: LD_ADDR_EXP 114
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sOil := false ;
20368: LD_ADDR_EXP 116
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sStu := false ;
20376: LD_ADDR_EXP 120
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sBazooka := false ;
20384: LD_ADDR_EXP 123
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sMortar := false ;
20392: LD_ADDR_EXP 124
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sRanger := false ;
20400: LD_ADDR_EXP 134
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sComputer := false ;
20408: LD_ADDR_EXP 135
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// s30 := false ;
20416: LD_ADDR_EXP 136
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// s60 := false ;
20424: LD_ADDR_EXP 137
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// end ;
20432: LD_VAR 0 1
20436: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20437: LD_INT 0
20439: PPUSH
20440: PPUSH
20441: PPUSH
20442: PPUSH
20443: PPUSH
20444: PPUSH
20445: PPUSH
// result := [ ] ;
20446: LD_ADDR_VAR 0 2
20450: PUSH
20451: EMPTY
20452: ST_TO_ADDR
// if campaign_id = 1 then
20453: LD_OWVAR 69
20457: PUSH
20458: LD_INT 1
20460: EQUAL
20461: IFFALSE 23627
// begin case mission_number of 1 :
20463: LD_OWVAR 70
20467: PUSH
20468: LD_INT 1
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20552
20476: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20477: LD_ADDR_VAR 0 2
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 4
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 12
20493: PUSH
20494: LD_INT 15
20496: PUSH
20497: LD_INT 16
20499: PUSH
20500: LD_INT 22
20502: PUSH
20503: LD_INT 23
20505: PUSH
20506: LD_INT 26
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 101
20522: PUSH
20523: LD_INT 102
20525: PUSH
20526: LD_INT 106
20528: PUSH
20529: LD_INT 116
20531: PUSH
20532: LD_INT 117
20534: PUSH
20535: LD_INT 118
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 23625
20552: LD_INT 2
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20644
20560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20561: LD_ADDR_VAR 0 2
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: LD_INT 11
20574: PUSH
20575: LD_INT 12
20577: PUSH
20578: LD_INT 15
20580: PUSH
20581: LD_INT 16
20583: PUSH
20584: LD_INT 22
20586: PUSH
20587: LD_INT 23
20589: PUSH
20590: LD_INT 26
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 101
20606: PUSH
20607: LD_INT 102
20609: PUSH
20610: LD_INT 105
20612: PUSH
20613: LD_INT 106
20615: PUSH
20616: LD_INT 108
20618: PUSH
20619: LD_INT 116
20621: PUSH
20622: LD_INT 117
20624: PUSH
20625: LD_INT 118
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: ST_TO_ADDR
20642: GO 23625
20644: LD_INT 3
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20740
20652: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20653: LD_ADDR_VAR 0 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 4
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: LD_INT 11
20669: PUSH
20670: LD_INT 12
20672: PUSH
20673: LD_INT 15
20675: PUSH
20676: LD_INT 16
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_INT 26
20684: PUSH
20685: LD_INT 36
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 101
20702: PUSH
20703: LD_INT 102
20705: PUSH
20706: LD_INT 105
20708: PUSH
20709: LD_INT 106
20711: PUSH
20712: LD_INT 108
20714: PUSH
20715: LD_INT 116
20717: PUSH
20718: LD_INT 117
20720: PUSH
20721: LD_INT 118
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 23625
20740: LD_INT 4
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20844
20748: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20749: LD_ADDR_VAR 0 2
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: LD_INT 4
20759: PUSH
20760: LD_INT 5
20762: PUSH
20763: LD_INT 8
20765: PUSH
20766: LD_INT 11
20768: PUSH
20769: LD_INT 12
20771: PUSH
20772: LD_INT 15
20774: PUSH
20775: LD_INT 16
20777: PUSH
20778: LD_INT 22
20780: PUSH
20781: LD_INT 23
20783: PUSH
20784: LD_INT 26
20786: PUSH
20787: LD_INT 36
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 101
20806: PUSH
20807: LD_INT 102
20809: PUSH
20810: LD_INT 105
20812: PUSH
20813: LD_INT 106
20815: PUSH
20816: LD_INT 108
20818: PUSH
20819: LD_INT 116
20821: PUSH
20822: LD_INT 117
20824: PUSH
20825: LD_INT 118
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: ST_TO_ADDR
20842: GO 23625
20844: LD_INT 5
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20964
20852: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20853: LD_ADDR_VAR 0 2
20857: PUSH
20858: LD_INT 2
20860: PUSH
20861: LD_INT 4
20863: PUSH
20864: LD_INT 5
20866: PUSH
20867: LD_INT 6
20869: PUSH
20870: LD_INT 8
20872: PUSH
20873: LD_INT 11
20875: PUSH
20876: LD_INT 12
20878: PUSH
20879: LD_INT 15
20881: PUSH
20882: LD_INT 16
20884: PUSH
20885: LD_INT 22
20887: PUSH
20888: LD_INT 23
20890: PUSH
20891: LD_INT 25
20893: PUSH
20894: LD_INT 26
20896: PUSH
20897: LD_INT 36
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 101
20918: PUSH
20919: LD_INT 102
20921: PUSH
20922: LD_INT 105
20924: PUSH
20925: LD_INT 106
20927: PUSH
20928: LD_INT 108
20930: PUSH
20931: LD_INT 109
20933: PUSH
20934: LD_INT 112
20936: PUSH
20937: LD_INT 116
20939: PUSH
20940: LD_INT 117
20942: PUSH
20943: LD_INT 118
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: ST_TO_ADDR
20962: GO 23625
20964: LD_INT 6
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 21104
20972: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20973: LD_ADDR_VAR 0 2
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 4
20983: PUSH
20984: LD_INT 5
20986: PUSH
20987: LD_INT 6
20989: PUSH
20990: LD_INT 8
20992: PUSH
20993: LD_INT 11
20995: PUSH
20996: LD_INT 12
20998: PUSH
20999: LD_INT 15
21001: PUSH
21002: LD_INT 16
21004: PUSH
21005: LD_INT 20
21007: PUSH
21008: LD_INT 21
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_INT 23
21016: PUSH
21017: LD_INT 25
21019: PUSH
21020: LD_INT 26
21022: PUSH
21023: LD_INT 30
21025: PUSH
21026: LD_INT 31
21028: PUSH
21029: LD_INT 32
21031: PUSH
21032: LD_INT 36
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 101
21058: PUSH
21059: LD_INT 102
21061: PUSH
21062: LD_INT 105
21064: PUSH
21065: LD_INT 106
21067: PUSH
21068: LD_INT 108
21070: PUSH
21071: LD_INT 109
21073: PUSH
21074: LD_INT 112
21076: PUSH
21077: LD_INT 116
21079: PUSH
21080: LD_INT 117
21082: PUSH
21083: LD_INT 118
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: ST_TO_ADDR
21102: GO 23625
21104: LD_INT 7
21106: DOUBLE
21107: EQUAL
21108: IFTRUE 21112
21110: GO 21224
21112: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 4
21123: PUSH
21124: LD_INT 5
21126: PUSH
21127: LD_INT 7
21129: PUSH
21130: LD_INT 11
21132: PUSH
21133: LD_INT 12
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 20
21144: PUSH
21145: LD_INT 21
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_INT 23
21153: PUSH
21154: LD_INT 25
21156: PUSH
21157: LD_INT 26
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 101
21178: PUSH
21179: LD_INT 102
21181: PUSH
21182: LD_INT 103
21184: PUSH
21185: LD_INT 105
21187: PUSH
21188: LD_INT 106
21190: PUSH
21191: LD_INT 108
21193: PUSH
21194: LD_INT 112
21196: PUSH
21197: LD_INT 116
21199: PUSH
21200: LD_INT 117
21202: PUSH
21203: LD_INT 118
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: ST_TO_ADDR
21222: GO 23625
21224: LD_INT 8
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21372
21232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 4
21243: PUSH
21244: LD_INT 5
21246: PUSH
21247: LD_INT 6
21249: PUSH
21250: LD_INT 7
21252: PUSH
21253: LD_INT 8
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 20
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 23
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 26
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 31
21291: PUSH
21292: LD_INT 32
21294: PUSH
21295: LD_INT 36
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 101
21322: PUSH
21323: LD_INT 102
21325: PUSH
21326: LD_INT 103
21328: PUSH
21329: LD_INT 105
21331: PUSH
21332: LD_INT 106
21334: PUSH
21335: LD_INT 108
21337: PUSH
21338: LD_INT 109
21340: PUSH
21341: LD_INT 112
21343: PUSH
21344: LD_INT 116
21346: PUSH
21347: LD_INT 117
21349: PUSH
21350: LD_INT 118
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: ST_TO_ADDR
21370: GO 23625
21372: LD_INT 9
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21528
21380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 4
21391: PUSH
21392: LD_INT 5
21394: PUSH
21395: LD_INT 6
21397: PUSH
21398: LD_INT 7
21400: PUSH
21401: LD_INT 8
21403: PUSH
21404: LD_INT 11
21406: PUSH
21407: LD_INT 12
21409: PUSH
21410: LD_INT 15
21412: PUSH
21413: LD_INT 16
21415: PUSH
21416: LD_INT 20
21418: PUSH
21419: LD_INT 21
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_INT 23
21427: PUSH
21428: LD_INT 25
21430: PUSH
21431: LD_INT 26
21433: PUSH
21434: LD_INT 28
21436: PUSH
21437: LD_INT 30
21439: PUSH
21440: LD_INT 31
21442: PUSH
21443: LD_INT 32
21445: PUSH
21446: LD_INT 36
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 101
21474: PUSH
21475: LD_INT 102
21477: PUSH
21478: LD_INT 103
21480: PUSH
21481: LD_INT 105
21483: PUSH
21484: LD_INT 106
21486: PUSH
21487: LD_INT 108
21489: PUSH
21490: LD_INT 109
21492: PUSH
21493: LD_INT 112
21495: PUSH
21496: LD_INT 114
21498: PUSH
21499: LD_INT 116
21501: PUSH
21502: LD_INT 117
21504: PUSH
21505: LD_INT 118
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 23625
21528: LD_INT 10
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21732
21536: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 7
21556: PUSH
21557: LD_INT 8
21559: PUSH
21560: LD_INT 9
21562: PUSH
21563: LD_INT 10
21565: PUSH
21566: LD_INT 11
21568: PUSH
21569: LD_INT 12
21571: PUSH
21572: LD_INT 13
21574: PUSH
21575: LD_INT 14
21577: PUSH
21578: LD_INT 15
21580: PUSH
21581: LD_INT 16
21583: PUSH
21584: LD_INT 17
21586: PUSH
21587: LD_INT 18
21589: PUSH
21590: LD_INT 19
21592: PUSH
21593: LD_INT 20
21595: PUSH
21596: LD_INT 21
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 24
21607: PUSH
21608: LD_INT 25
21610: PUSH
21611: LD_INT 26
21613: PUSH
21614: LD_INT 28
21616: PUSH
21617: LD_INT 30
21619: PUSH
21620: LD_INT 31
21622: PUSH
21623: LD_INT 32
21625: PUSH
21626: LD_INT 36
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 101
21662: PUSH
21663: LD_INT 102
21665: PUSH
21666: LD_INT 103
21668: PUSH
21669: LD_INT 104
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 107
21680: PUSH
21681: LD_INT 108
21683: PUSH
21684: LD_INT 109
21686: PUSH
21687: LD_INT 110
21689: PUSH
21690: LD_INT 111
21692: PUSH
21693: LD_INT 112
21695: PUSH
21696: LD_INT 114
21698: PUSH
21699: LD_INT 116
21701: PUSH
21702: LD_INT 117
21704: PUSH
21705: LD_INT 118
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: ST_TO_ADDR
21730: GO 23625
21732: LD_INT 11
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21944
21740: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: LD_INT 4
21754: PUSH
21755: LD_INT 5
21757: PUSH
21758: LD_INT 6
21760: PUSH
21761: LD_INT 7
21763: PUSH
21764: LD_INT 8
21766: PUSH
21767: LD_INT 9
21769: PUSH
21770: LD_INT 10
21772: PUSH
21773: LD_INT 11
21775: PUSH
21776: LD_INT 12
21778: PUSH
21779: LD_INT 13
21781: PUSH
21782: LD_INT 14
21784: PUSH
21785: LD_INT 15
21787: PUSH
21788: LD_INT 16
21790: PUSH
21791: LD_INT 17
21793: PUSH
21794: LD_INT 18
21796: PUSH
21797: LD_INT 19
21799: PUSH
21800: LD_INT 20
21802: PUSH
21803: LD_INT 21
21805: PUSH
21806: LD_INT 22
21808: PUSH
21809: LD_INT 23
21811: PUSH
21812: LD_INT 24
21814: PUSH
21815: LD_INT 25
21817: PUSH
21818: LD_INT 26
21820: PUSH
21821: LD_INT 28
21823: PUSH
21824: LD_INT 30
21826: PUSH
21827: LD_INT 31
21829: PUSH
21830: LD_INT 32
21832: PUSH
21833: LD_INT 34
21835: PUSH
21836: LD_INT 36
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 101
21874: PUSH
21875: LD_INT 102
21877: PUSH
21878: LD_INT 103
21880: PUSH
21881: LD_INT 104
21883: PUSH
21884: LD_INT 105
21886: PUSH
21887: LD_INT 106
21889: PUSH
21890: LD_INT 107
21892: PUSH
21893: LD_INT 108
21895: PUSH
21896: LD_INT 109
21898: PUSH
21899: LD_INT 110
21901: PUSH
21902: LD_INT 111
21904: PUSH
21905: LD_INT 112
21907: PUSH
21908: LD_INT 114
21910: PUSH
21911: LD_INT 116
21913: PUSH
21914: LD_INT 117
21916: PUSH
21917: LD_INT 118
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: ST_TO_ADDR
21942: GO 23625
21944: LD_INT 12
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 22172
21952: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21953: LD_ADDR_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: LD_INT 4
21969: PUSH
21970: LD_INT 5
21972: PUSH
21973: LD_INT 6
21975: PUSH
21976: LD_INT 7
21978: PUSH
21979: LD_INT 8
21981: PUSH
21982: LD_INT 9
21984: PUSH
21985: LD_INT 10
21987: PUSH
21988: LD_INT 11
21990: PUSH
21991: LD_INT 12
21993: PUSH
21994: LD_INT 13
21996: PUSH
21997: LD_INT 14
21999: PUSH
22000: LD_INT 15
22002: PUSH
22003: LD_INT 16
22005: PUSH
22006: LD_INT 17
22008: PUSH
22009: LD_INT 18
22011: PUSH
22012: LD_INT 19
22014: PUSH
22015: LD_INT 20
22017: PUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 22
22023: PUSH
22024: LD_INT 23
22026: PUSH
22027: LD_INT 24
22029: PUSH
22030: LD_INT 25
22032: PUSH
22033: LD_INT 26
22035: PUSH
22036: LD_INT 27
22038: PUSH
22039: LD_INT 28
22041: PUSH
22042: LD_INT 30
22044: PUSH
22045: LD_INT 31
22047: PUSH
22048: LD_INT 32
22050: PUSH
22051: LD_INT 33
22053: PUSH
22054: LD_INT 34
22056: PUSH
22057: LD_INT 36
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 101
22098: PUSH
22099: LD_INT 102
22101: PUSH
22102: LD_INT 103
22104: PUSH
22105: LD_INT 104
22107: PUSH
22108: LD_INT 105
22110: PUSH
22111: LD_INT 106
22113: PUSH
22114: LD_INT 107
22116: PUSH
22117: LD_INT 108
22119: PUSH
22120: LD_INT 109
22122: PUSH
22123: LD_INT 110
22125: PUSH
22126: LD_INT 111
22128: PUSH
22129: LD_INT 112
22131: PUSH
22132: LD_INT 113
22134: PUSH
22135: LD_INT 114
22137: PUSH
22138: LD_INT 116
22140: PUSH
22141: LD_INT 117
22143: PUSH
22144: LD_INT 118
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: ST_TO_ADDR
22170: GO 23625
22172: LD_INT 13
22174: DOUBLE
22175: EQUAL
22176: IFTRUE 22180
22178: GO 22388
22180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 8
22203: PUSH
22204: LD_INT 9
22206: PUSH
22207: LD_INT 10
22209: PUSH
22210: LD_INT 11
22212: PUSH
22213: LD_INT 12
22215: PUSH
22216: LD_INT 14
22218: PUSH
22219: LD_INT 15
22221: PUSH
22222: LD_INT 16
22224: PUSH
22225: LD_INT 17
22227: PUSH
22228: LD_INT 18
22230: PUSH
22231: LD_INT 19
22233: PUSH
22234: LD_INT 20
22236: PUSH
22237: LD_INT 21
22239: PUSH
22240: LD_INT 22
22242: PUSH
22243: LD_INT 23
22245: PUSH
22246: LD_INT 24
22248: PUSH
22249: LD_INT 25
22251: PUSH
22252: LD_INT 26
22254: PUSH
22255: LD_INT 27
22257: PUSH
22258: LD_INT 28
22260: PUSH
22261: LD_INT 30
22263: PUSH
22264: LD_INT 31
22266: PUSH
22267: LD_INT 32
22269: PUSH
22270: LD_INT 33
22272: PUSH
22273: LD_INT 34
22275: PUSH
22276: LD_INT 36
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 101
22314: PUSH
22315: LD_INT 102
22317: PUSH
22318: LD_INT 103
22320: PUSH
22321: LD_INT 104
22323: PUSH
22324: LD_INT 105
22326: PUSH
22327: LD_INT 106
22329: PUSH
22330: LD_INT 107
22332: PUSH
22333: LD_INT 108
22335: PUSH
22336: LD_INT 109
22338: PUSH
22339: LD_INT 110
22341: PUSH
22342: LD_INT 111
22344: PUSH
22345: LD_INT 112
22347: PUSH
22348: LD_INT 113
22350: PUSH
22351: LD_INT 114
22353: PUSH
22354: LD_INT 116
22356: PUSH
22357: LD_INT 117
22359: PUSH
22360: LD_INT 118
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: ST_TO_ADDR
22386: GO 23625
22388: LD_INT 14
22390: DOUBLE
22391: EQUAL
22392: IFTRUE 22396
22394: GO 22620
22396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: LD_INT 4
22413: PUSH
22414: LD_INT 5
22416: PUSH
22417: LD_INT 6
22419: PUSH
22420: LD_INT 7
22422: PUSH
22423: LD_INT 8
22425: PUSH
22426: LD_INT 9
22428: PUSH
22429: LD_INT 10
22431: PUSH
22432: LD_INT 11
22434: PUSH
22435: LD_INT 12
22437: PUSH
22438: LD_INT 13
22440: PUSH
22441: LD_INT 14
22443: PUSH
22444: LD_INT 15
22446: PUSH
22447: LD_INT 16
22449: PUSH
22450: LD_INT 17
22452: PUSH
22453: LD_INT 18
22455: PUSH
22456: LD_INT 19
22458: PUSH
22459: LD_INT 20
22461: PUSH
22462: LD_INT 21
22464: PUSH
22465: LD_INT 22
22467: PUSH
22468: LD_INT 23
22470: PUSH
22471: LD_INT 24
22473: PUSH
22474: LD_INT 25
22476: PUSH
22477: LD_INT 26
22479: PUSH
22480: LD_INT 27
22482: PUSH
22483: LD_INT 28
22485: PUSH
22486: LD_INT 29
22488: PUSH
22489: LD_INT 30
22491: PUSH
22492: LD_INT 31
22494: PUSH
22495: LD_INT 32
22497: PUSH
22498: LD_INT 33
22500: PUSH
22501: LD_INT 34
22503: PUSH
22504: LD_INT 36
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 101
22546: PUSH
22547: LD_INT 102
22549: PUSH
22550: LD_INT 103
22552: PUSH
22553: LD_INT 104
22555: PUSH
22556: LD_INT 105
22558: PUSH
22559: LD_INT 106
22561: PUSH
22562: LD_INT 107
22564: PUSH
22565: LD_INT 108
22567: PUSH
22568: LD_INT 109
22570: PUSH
22571: LD_INT 110
22573: PUSH
22574: LD_INT 111
22576: PUSH
22577: LD_INT 112
22579: PUSH
22580: LD_INT 113
22582: PUSH
22583: LD_INT 114
22585: PUSH
22586: LD_INT 116
22588: PUSH
22589: LD_INT 117
22591: PUSH
22592: LD_INT 118
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: ST_TO_ADDR
22618: GO 23625
22620: LD_INT 15
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22852
22628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22629: LD_ADDR_VAR 0 2
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: LD_INT 4
22645: PUSH
22646: LD_INT 5
22648: PUSH
22649: LD_INT 6
22651: PUSH
22652: LD_INT 7
22654: PUSH
22655: LD_INT 8
22657: PUSH
22658: LD_INT 9
22660: PUSH
22661: LD_INT 10
22663: PUSH
22664: LD_INT 11
22666: PUSH
22667: LD_INT 12
22669: PUSH
22670: LD_INT 13
22672: PUSH
22673: LD_INT 14
22675: PUSH
22676: LD_INT 15
22678: PUSH
22679: LD_INT 16
22681: PUSH
22682: LD_INT 17
22684: PUSH
22685: LD_INT 18
22687: PUSH
22688: LD_INT 19
22690: PUSH
22691: LD_INT 20
22693: PUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 24
22705: PUSH
22706: LD_INT 25
22708: PUSH
22709: LD_INT 26
22711: PUSH
22712: LD_INT 27
22714: PUSH
22715: LD_INT 28
22717: PUSH
22718: LD_INT 29
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 31
22726: PUSH
22727: LD_INT 32
22729: PUSH
22730: LD_INT 33
22732: PUSH
22733: LD_INT 34
22735: PUSH
22736: LD_INT 36
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 101
22778: PUSH
22779: LD_INT 102
22781: PUSH
22782: LD_INT 103
22784: PUSH
22785: LD_INT 104
22787: PUSH
22788: LD_INT 105
22790: PUSH
22791: LD_INT 106
22793: PUSH
22794: LD_INT 107
22796: PUSH
22797: LD_INT 108
22799: PUSH
22800: LD_INT 109
22802: PUSH
22803: LD_INT 110
22805: PUSH
22806: LD_INT 111
22808: PUSH
22809: LD_INT 112
22811: PUSH
22812: LD_INT 113
22814: PUSH
22815: LD_INT 114
22817: PUSH
22818: LD_INT 116
22820: PUSH
22821: LD_INT 117
22823: PUSH
22824: LD_INT 118
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: ST_TO_ADDR
22850: GO 23625
22852: LD_INT 16
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22996
22860: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22861: LD_ADDR_VAR 0 2
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 4
22871: PUSH
22872: LD_INT 5
22874: PUSH
22875: LD_INT 7
22877: PUSH
22878: LD_INT 11
22880: PUSH
22881: LD_INT 12
22883: PUSH
22884: LD_INT 15
22886: PUSH
22887: LD_INT 16
22889: PUSH
22890: LD_INT 20
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 22
22898: PUSH
22899: LD_INT 23
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 26
22907: PUSH
22908: LD_INT 30
22910: PUSH
22911: LD_INT 31
22913: PUSH
22914: LD_INT 32
22916: PUSH
22917: LD_INT 33
22919: PUSH
22920: LD_INT 34
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 103
22952: PUSH
22953: LD_INT 106
22955: PUSH
22956: LD_INT 108
22958: PUSH
22959: LD_INT 112
22961: PUSH
22962: LD_INT 113
22964: PUSH
22965: LD_INT 114
22967: PUSH
22968: LD_INT 116
22970: PUSH
22971: LD_INT 117
22973: PUSH
22974: LD_INT 118
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: ST_TO_ADDR
22994: GO 23625
22996: LD_INT 17
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23228
23004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23005: LD_ADDR_VAR 0 2
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: LD_INT 4
23021: PUSH
23022: LD_INT 5
23024: PUSH
23025: LD_INT 6
23027: PUSH
23028: LD_INT 7
23030: PUSH
23031: LD_INT 8
23033: PUSH
23034: LD_INT 9
23036: PUSH
23037: LD_INT 10
23039: PUSH
23040: LD_INT 11
23042: PUSH
23043: LD_INT 12
23045: PUSH
23046: LD_INT 13
23048: PUSH
23049: LD_INT 14
23051: PUSH
23052: LD_INT 15
23054: PUSH
23055: LD_INT 16
23057: PUSH
23058: LD_INT 17
23060: PUSH
23061: LD_INT 18
23063: PUSH
23064: LD_INT 19
23066: PUSH
23067: LD_INT 20
23069: PUSH
23070: LD_INT 21
23072: PUSH
23073: LD_INT 22
23075: PUSH
23076: LD_INT 23
23078: PUSH
23079: LD_INT 24
23081: PUSH
23082: LD_INT 25
23084: PUSH
23085: LD_INT 26
23087: PUSH
23088: LD_INT 27
23090: PUSH
23091: LD_INT 28
23093: PUSH
23094: LD_INT 29
23096: PUSH
23097: LD_INT 30
23099: PUSH
23100: LD_INT 31
23102: PUSH
23103: LD_INT 32
23105: PUSH
23106: LD_INT 33
23108: PUSH
23109: LD_INT 34
23111: PUSH
23112: LD_INT 36
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 101
23154: PUSH
23155: LD_INT 102
23157: PUSH
23158: LD_INT 103
23160: PUSH
23161: LD_INT 104
23163: PUSH
23164: LD_INT 105
23166: PUSH
23167: LD_INT 106
23169: PUSH
23170: LD_INT 107
23172: PUSH
23173: LD_INT 108
23175: PUSH
23176: LD_INT 109
23178: PUSH
23179: LD_INT 110
23181: PUSH
23182: LD_INT 111
23184: PUSH
23185: LD_INT 112
23187: PUSH
23188: LD_INT 113
23190: PUSH
23191: LD_INT 114
23193: PUSH
23194: LD_INT 116
23196: PUSH
23197: LD_INT 117
23199: PUSH
23200: LD_INT 118
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: ST_TO_ADDR
23226: GO 23625
23228: LD_INT 18
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23384
23236: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 4
23247: PUSH
23248: LD_INT 5
23250: PUSH
23251: LD_INT 7
23253: PUSH
23254: LD_INT 11
23256: PUSH
23257: LD_INT 12
23259: PUSH
23260: LD_INT 15
23262: PUSH
23263: LD_INT 16
23265: PUSH
23266: LD_INT 20
23268: PUSH
23269: LD_INT 21
23271: PUSH
23272: LD_INT 22
23274: PUSH
23275: LD_INT 23
23277: PUSH
23278: LD_INT 25
23280: PUSH
23281: LD_INT 26
23283: PUSH
23284: LD_INT 30
23286: PUSH
23287: LD_INT 31
23289: PUSH
23290: LD_INT 32
23292: PUSH
23293: LD_INT 33
23295: PUSH
23296: LD_INT 34
23298: PUSH
23299: LD_INT 35
23301: PUSH
23302: LD_INT 36
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 101
23330: PUSH
23331: LD_INT 102
23333: PUSH
23334: LD_INT 103
23336: PUSH
23337: LD_INT 106
23339: PUSH
23340: LD_INT 108
23342: PUSH
23343: LD_INT 112
23345: PUSH
23346: LD_INT 113
23348: PUSH
23349: LD_INT 114
23351: PUSH
23352: LD_INT 115
23354: PUSH
23355: LD_INT 116
23357: PUSH
23358: LD_INT 117
23360: PUSH
23361: LD_INT 118
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: ST_TO_ADDR
23382: GO 23625
23384: LD_INT 19
23386: DOUBLE
23387: EQUAL
23388: IFTRUE 23392
23390: GO 23624
23392: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: LD_INT 3
23406: PUSH
23407: LD_INT 4
23409: PUSH
23410: LD_INT 5
23412: PUSH
23413: LD_INT 6
23415: PUSH
23416: LD_INT 7
23418: PUSH
23419: LD_INT 8
23421: PUSH
23422: LD_INT 9
23424: PUSH
23425: LD_INT 10
23427: PUSH
23428: LD_INT 11
23430: PUSH
23431: LD_INT 12
23433: PUSH
23434: LD_INT 13
23436: PUSH
23437: LD_INT 14
23439: PUSH
23440: LD_INT 15
23442: PUSH
23443: LD_INT 16
23445: PUSH
23446: LD_INT 17
23448: PUSH
23449: LD_INT 18
23451: PUSH
23452: LD_INT 19
23454: PUSH
23455: LD_INT 20
23457: PUSH
23458: LD_INT 21
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 24
23469: PUSH
23470: LD_INT 25
23472: PUSH
23473: LD_INT 26
23475: PUSH
23476: LD_INT 27
23478: PUSH
23479: LD_INT 28
23481: PUSH
23482: LD_INT 29
23484: PUSH
23485: LD_INT 30
23487: PUSH
23488: LD_INT 31
23490: PUSH
23491: LD_INT 32
23493: PUSH
23494: LD_INT 33
23496: PUSH
23497: LD_INT 34
23499: PUSH
23500: LD_INT 35
23502: PUSH
23503: LD_INT 36
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 101
23546: PUSH
23547: LD_INT 102
23549: PUSH
23550: LD_INT 103
23552: PUSH
23553: LD_INT 104
23555: PUSH
23556: LD_INT 105
23558: PUSH
23559: LD_INT 106
23561: PUSH
23562: LD_INT 107
23564: PUSH
23565: LD_INT 108
23567: PUSH
23568: LD_INT 109
23570: PUSH
23571: LD_INT 110
23573: PUSH
23574: LD_INT 111
23576: PUSH
23577: LD_INT 112
23579: PUSH
23580: LD_INT 113
23582: PUSH
23583: LD_INT 114
23585: PUSH
23586: LD_INT 115
23588: PUSH
23589: LD_INT 116
23591: PUSH
23592: LD_INT 117
23594: PUSH
23595: LD_INT 118
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: ST_TO_ADDR
23622: GO 23625
23624: POP
// end else
23625: GO 23856
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23627: LD_ADDR_VAR 0 2
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: LD_INT 3
23640: PUSH
23641: LD_INT 4
23643: PUSH
23644: LD_INT 5
23646: PUSH
23647: LD_INT 6
23649: PUSH
23650: LD_INT 7
23652: PUSH
23653: LD_INT 8
23655: PUSH
23656: LD_INT 9
23658: PUSH
23659: LD_INT 10
23661: PUSH
23662: LD_INT 11
23664: PUSH
23665: LD_INT 12
23667: PUSH
23668: LD_INT 13
23670: PUSH
23671: LD_INT 14
23673: PUSH
23674: LD_INT 15
23676: PUSH
23677: LD_INT 16
23679: PUSH
23680: LD_INT 17
23682: PUSH
23683: LD_INT 18
23685: PUSH
23686: LD_INT 19
23688: PUSH
23689: LD_INT 20
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 22
23697: PUSH
23698: LD_INT 23
23700: PUSH
23701: LD_INT 24
23703: PUSH
23704: LD_INT 25
23706: PUSH
23707: LD_INT 26
23709: PUSH
23710: LD_INT 27
23712: PUSH
23713: LD_INT 28
23715: PUSH
23716: LD_INT 29
23718: PUSH
23719: LD_INT 30
23721: PUSH
23722: LD_INT 31
23724: PUSH
23725: LD_INT 32
23727: PUSH
23728: LD_INT 33
23730: PUSH
23731: LD_INT 34
23733: PUSH
23734: LD_INT 35
23736: PUSH
23737: LD_INT 36
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 101
23780: PUSH
23781: LD_INT 102
23783: PUSH
23784: LD_INT 103
23786: PUSH
23787: LD_INT 104
23789: PUSH
23790: LD_INT 105
23792: PUSH
23793: LD_INT 106
23795: PUSH
23796: LD_INT 107
23798: PUSH
23799: LD_INT 108
23801: PUSH
23802: LD_INT 109
23804: PUSH
23805: LD_INT 110
23807: PUSH
23808: LD_INT 111
23810: PUSH
23811: LD_INT 112
23813: PUSH
23814: LD_INT 113
23816: PUSH
23817: LD_INT 114
23819: PUSH
23820: LD_INT 115
23822: PUSH
23823: LD_INT 116
23825: PUSH
23826: LD_INT 117
23828: PUSH
23829: LD_INT 118
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: ST_TO_ADDR
// if result then
23856: LD_VAR 0 2
23860: IFFALSE 24646
// begin normal :=  ;
23862: LD_ADDR_VAR 0 5
23866: PUSH
23867: LD_STRING 
23869: ST_TO_ADDR
// hardcore :=  ;
23870: LD_ADDR_VAR 0 6
23874: PUSH
23875: LD_STRING 
23877: ST_TO_ADDR
// active :=  ;
23878: LD_ADDR_VAR 0 7
23882: PUSH
23883: LD_STRING 
23885: ST_TO_ADDR
// for i = 1 to normalCounter do
23886: LD_ADDR_VAR 0 8
23890: PUSH
23891: DOUBLE
23892: LD_INT 1
23894: DEC
23895: ST_TO_ADDR
23896: LD_EXP 82
23900: PUSH
23901: FOR_TO
23902: IFFALSE 24003
// begin tmp := 0 ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_STRING 0
23911: ST_TO_ADDR
// if result [ 1 ] then
23912: LD_VAR 0 2
23916: PUSH
23917: LD_INT 1
23919: ARRAY
23920: IFFALSE 23985
// if result [ 1 ] [ 1 ] = i then
23922: LD_VAR 0 2
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PUSH
23935: LD_VAR 0 8
23939: EQUAL
23940: IFFALSE 23985
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23942: LD_ADDR_VAR 0 2
23946: PUSH
23947: LD_VAR 0 2
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: LD_VAR 0 2
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 3
23971: PPUSH
23972: CALL_OW 1
23976: ST_TO_ADDR
// tmp := 1 ;
23977: LD_ADDR_VAR 0 3
23981: PUSH
23982: LD_STRING 1
23984: ST_TO_ADDR
// end ; normal := normal & tmp ;
23985: LD_ADDR_VAR 0 5
23989: PUSH
23990: LD_VAR 0 5
23994: PUSH
23995: LD_VAR 0 3
23999: STR
24000: ST_TO_ADDR
// end ;
24001: GO 23901
24003: POP
24004: POP
// for i = 1 to hardcoreCounter do
24005: LD_ADDR_VAR 0 8
24009: PUSH
24010: DOUBLE
24011: LD_INT 1
24013: DEC
24014: ST_TO_ADDR
24015: LD_EXP 83
24019: PUSH
24020: FOR_TO
24021: IFFALSE 24126
// begin tmp := 0 ;
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_STRING 0
24030: ST_TO_ADDR
// if result [ 2 ] then
24031: LD_VAR 0 2
24035: PUSH
24036: LD_INT 2
24038: ARRAY
24039: IFFALSE 24108
// if result [ 2 ] [ 1 ] = 100 + i then
24041: LD_VAR 0 2
24045: PUSH
24046: LD_INT 2
24048: ARRAY
24049: PUSH
24050: LD_INT 1
24052: ARRAY
24053: PUSH
24054: LD_INT 100
24056: PUSH
24057: LD_VAR 0 8
24061: PLUS
24062: EQUAL
24063: IFFALSE 24108
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_VAR 0 2
24074: PPUSH
24075: LD_INT 2
24077: PPUSH
24078: LD_VAR 0 2
24082: PUSH
24083: LD_INT 2
24085: ARRAY
24086: PPUSH
24087: LD_INT 1
24089: PPUSH
24090: CALL_OW 3
24094: PPUSH
24095: CALL_OW 1
24099: ST_TO_ADDR
// tmp := 1 ;
24100: LD_ADDR_VAR 0 3
24104: PUSH
24105: LD_STRING 1
24107: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24108: LD_ADDR_VAR 0 6
24112: PUSH
24113: LD_VAR 0 6
24117: PUSH
24118: LD_VAR 0 3
24122: STR
24123: ST_TO_ADDR
// end ;
24124: GO 24020
24126: POP
24127: POP
// if isGameLoad then
24128: LD_VAR 0 1
24132: IFFALSE 24607
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: LD_EXP 86
24143: PUSH
24144: LD_EXP 85
24148: PUSH
24149: LD_EXP 87
24153: PUSH
24154: LD_EXP 84
24158: PUSH
24159: LD_EXP 88
24163: PUSH
24164: LD_EXP 89
24168: PUSH
24169: LD_EXP 90
24173: PUSH
24174: LD_EXP 91
24178: PUSH
24179: LD_EXP 92
24183: PUSH
24184: LD_EXP 93
24188: PUSH
24189: LD_EXP 94
24193: PUSH
24194: LD_EXP 95
24198: PUSH
24199: LD_EXP 96
24203: PUSH
24204: LD_EXP 97
24208: PUSH
24209: LD_EXP 105
24213: PUSH
24214: LD_EXP 106
24218: PUSH
24219: LD_EXP 107
24223: PUSH
24224: LD_EXP 108
24228: PUSH
24229: LD_EXP 110
24233: PUSH
24234: LD_EXP 111
24238: PUSH
24239: LD_EXP 112
24243: PUSH
24244: LD_EXP 115
24248: PUSH
24249: LD_EXP 117
24253: PUSH
24254: LD_EXP 118
24258: PUSH
24259: LD_EXP 119
24263: PUSH
24264: LD_EXP 121
24268: PUSH
24269: LD_EXP 122
24273: PUSH
24274: LD_EXP 125
24278: PUSH
24279: LD_EXP 126
24283: PUSH
24284: LD_EXP 127
24288: PUSH
24289: LD_EXP 128
24293: PUSH
24294: LD_EXP 129
24298: PUSH
24299: LD_EXP 130
24303: PUSH
24304: LD_EXP 131
24308: PUSH
24309: LD_EXP 132
24313: PUSH
24314: LD_EXP 133
24318: PUSH
24319: LD_EXP 98
24323: PUSH
24324: LD_EXP 99
24328: PUSH
24329: LD_EXP 102
24333: PUSH
24334: LD_EXP 103
24338: PUSH
24339: LD_EXP 104
24343: PUSH
24344: LD_EXP 100
24348: PUSH
24349: LD_EXP 101
24353: PUSH
24354: LD_EXP 109
24358: PUSH
24359: LD_EXP 113
24363: PUSH
24364: LD_EXP 114
24368: PUSH
24369: LD_EXP 116
24373: PUSH
24374: LD_EXP 120
24378: PUSH
24379: LD_EXP 123
24383: PUSH
24384: LD_EXP 124
24388: PUSH
24389: LD_EXP 134
24393: PUSH
24394: LD_EXP 135
24398: PUSH
24399: LD_EXP 136
24403: PUSH
24404: LD_EXP 137
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: ST_TO_ADDR
// tmp :=  ;
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_STRING 
24472: ST_TO_ADDR
// for i = 1 to normalCounter do
24473: LD_ADDR_VAR 0 8
24477: PUSH
24478: DOUBLE
24479: LD_INT 1
24481: DEC
24482: ST_TO_ADDR
24483: LD_EXP 82
24487: PUSH
24488: FOR_TO
24489: IFFALSE 24525
// begin if flags [ i ] then
24491: LD_VAR 0 4
24495: PUSH
24496: LD_VAR 0 8
24500: ARRAY
24501: IFFALSE 24523
// tmp := tmp & i & ; ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 3
24512: PUSH
24513: LD_VAR 0 8
24517: STR
24518: PUSH
24519: LD_STRING ;
24521: STR
24522: ST_TO_ADDR
// end ;
24523: GO 24488
24525: POP
24526: POP
// for i = 1 to hardcoreCounter do
24527: LD_ADDR_VAR 0 8
24531: PUSH
24532: DOUBLE
24533: LD_INT 1
24535: DEC
24536: ST_TO_ADDR
24537: LD_EXP 83
24541: PUSH
24542: FOR_TO
24543: IFFALSE 24589
// begin if flags [ normalCounter + i ] then
24545: LD_VAR 0 4
24549: PUSH
24550: LD_EXP 82
24554: PUSH
24555: LD_VAR 0 8
24559: PLUS
24560: ARRAY
24561: IFFALSE 24587
// tmp := tmp & ( 100 + i ) & ; ;
24563: LD_ADDR_VAR 0 3
24567: PUSH
24568: LD_VAR 0 3
24572: PUSH
24573: LD_INT 100
24575: PUSH
24576: LD_VAR 0 8
24580: PLUS
24581: STR
24582: PUSH
24583: LD_STRING ;
24585: STR
24586: ST_TO_ADDR
// end ;
24587: GO 24542
24589: POP
24590: POP
// if tmp then
24591: LD_VAR 0 3
24595: IFFALSE 24607
// active := tmp ;
24597: LD_ADDR_VAR 0 7
24601: PUSH
24602: LD_VAR 0 3
24606: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24607: LD_STRING getStreamItemsFromMission("
24609: PUSH
24610: LD_VAR 0 5
24614: STR
24615: PUSH
24616: LD_STRING ","
24618: STR
24619: PUSH
24620: LD_VAR 0 6
24624: STR
24625: PUSH
24626: LD_STRING ","
24628: STR
24629: PUSH
24630: LD_VAR 0 7
24634: STR
24635: PUSH
24636: LD_STRING ")
24638: STR
24639: PPUSH
24640: CALL_OW 559
// end else
24644: GO 24653
// ToLua ( getStreamItemsFromMission("","","") ) ;
24646: LD_STRING getStreamItemsFromMission("","","")
24648: PPUSH
24649: CALL_OW 559
// end ;
24653: LD_VAR 0 2
24657: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24658: LD_EXP 81
24662: PUSH
24663: LD_EXP 86
24667: AND
24668: IFFALSE 24792
24670: GO 24672
24672: DISABLE
24673: LD_INT 0
24675: PPUSH
24676: PPUSH
// begin enable ;
24677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24678: LD_ADDR_VAR 0 2
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_OWVAR 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 34
24700: PUSH
24701: LD_INT 7
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 34
24710: PUSH
24711: LD_INT 45
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 34
24720: PUSH
24721: LD_INT 28
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 34
24730: PUSH
24731: LD_INT 47
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PPUSH
24749: CALL_OW 69
24753: ST_TO_ADDR
// if not tmp then
24754: LD_VAR 0 2
24758: NOT
24759: IFFALSE 24763
// exit ;
24761: GO 24792
// for i in tmp do
24763: LD_ADDR_VAR 0 1
24767: PUSH
24768: LD_VAR 0 2
24772: PUSH
24773: FOR_IN
24774: IFFALSE 24790
// begin SetLives ( i , 0 ) ;
24776: LD_VAR 0 1
24780: PPUSH
24781: LD_INT 0
24783: PPUSH
24784: CALL_OW 234
// end ;
24788: GO 24773
24790: POP
24791: POP
// end ;
24792: PPOPN 2
24794: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24795: LD_EXP 81
24799: PUSH
24800: LD_EXP 87
24804: AND
24805: IFFALSE 24889
24807: GO 24809
24809: DISABLE
24810: LD_INT 0
24812: PPUSH
24813: PPUSH
// begin enable ;
24814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24815: LD_ADDR_VAR 0 2
24819: PUSH
24820: LD_INT 22
24822: PUSH
24823: LD_OWVAR 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 32
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PPUSH
24846: CALL_OW 69
24850: ST_TO_ADDR
// if not tmp then
24851: LD_VAR 0 2
24855: NOT
24856: IFFALSE 24860
// exit ;
24858: GO 24889
// for i in tmp do
24860: LD_ADDR_VAR 0 1
24864: PUSH
24865: LD_VAR 0 2
24869: PUSH
24870: FOR_IN
24871: IFFALSE 24887
// begin SetLives ( i , 0 ) ;
24873: LD_VAR 0 1
24877: PPUSH
24878: LD_INT 0
24880: PPUSH
24881: CALL_OW 234
// end ;
24885: GO 24870
24887: POP
24888: POP
// end ;
24889: PPOPN 2
24891: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24892: LD_EXP 81
24896: PUSH
24897: LD_EXP 84
24901: AND
24902: IFFALSE 24995
24904: GO 24906
24906: DISABLE
24907: LD_INT 0
24909: PPUSH
// begin enable ;
24910: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24911: LD_ADDR_VAR 0 1
24915: PUSH
24916: LD_INT 22
24918: PUSH
24919: LD_OWVAR 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: LD_INT 25
24933: PUSH
24934: LD_INT 5
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 25
24943: PUSH
24944: LD_INT 9
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 25
24953: PUSH
24954: LD_INT 8
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 69
24975: PUSH
24976: FOR_IN
24977: IFFALSE 24993
// begin SetClass ( i , 1 ) ;
24979: LD_VAR 0 1
24983: PPUSH
24984: LD_INT 1
24986: PPUSH
24987: CALL_OW 336
// end ;
24991: GO 24976
24993: POP
24994: POP
// end ;
24995: PPOPN 1
24997: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24998: LD_EXP 81
25002: PUSH
25003: LD_EXP 85
25007: AND
25008: PUSH
25009: LD_OWVAR 65
25013: PUSH
25014: LD_INT 7
25016: LESS
25017: AND
25018: IFFALSE 25032
25020: GO 25022
25022: DISABLE
// begin enable ;
25023: ENABLE
// game_speed := 7 ;
25024: LD_ADDR_OWVAR 65
25028: PUSH
25029: LD_INT 7
25031: ST_TO_ADDR
// end ;
25032: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25033: LD_EXP 81
25037: PUSH
25038: LD_EXP 88
25042: AND
25043: IFFALSE 25245
25045: GO 25047
25047: DISABLE
25048: LD_INT 0
25050: PPUSH
25051: PPUSH
25052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 81
25060: PUSH
25061: LD_OWVAR 2
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 21
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PPUSH
25084: CALL_OW 69
25088: ST_TO_ADDR
// if not tmp then
25089: LD_VAR 0 3
25093: NOT
25094: IFFALSE 25098
// exit ;
25096: GO 25245
// if tmp > 5 then
25098: LD_VAR 0 3
25102: PUSH
25103: LD_INT 5
25105: GREATER
25106: IFFALSE 25118
// k := 5 else
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: LD_INT 5
25115: ST_TO_ADDR
25116: GO 25128
// k := tmp ;
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_VAR 0 3
25127: ST_TO_ADDR
// for i := 1 to k do
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_VAR 0 2
25142: PUSH
25143: FOR_TO
25144: IFFALSE 25243
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25146: LD_VAR 0 3
25150: PUSH
25151: LD_VAR 0 1
25155: ARRAY
25156: PPUSH
25157: LD_VAR 0 1
25161: PUSH
25162: LD_INT 4
25164: MOD
25165: PUSH
25166: LD_INT 1
25168: PLUS
25169: PPUSH
25170: CALL_OW 259
25174: PUSH
25175: LD_INT 10
25177: LESS
25178: IFFALSE 25241
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25180: LD_VAR 0 3
25184: PUSH
25185: LD_VAR 0 1
25189: ARRAY
25190: PPUSH
25191: LD_VAR 0 1
25195: PUSH
25196: LD_INT 4
25198: MOD
25199: PUSH
25200: LD_INT 1
25202: PLUS
25203: PPUSH
25204: LD_VAR 0 3
25208: PUSH
25209: LD_VAR 0 1
25213: ARRAY
25214: PPUSH
25215: LD_VAR 0 1
25219: PUSH
25220: LD_INT 4
25222: MOD
25223: PUSH
25224: LD_INT 1
25226: PLUS
25227: PPUSH
25228: CALL_OW 259
25232: PUSH
25233: LD_INT 1
25235: PLUS
25236: PPUSH
25237: CALL_OW 237
25241: GO 25143
25243: POP
25244: POP
// end ;
25245: PPOPN 3
25247: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25248: LD_EXP 81
25252: PUSH
25253: LD_EXP 89
25257: AND
25258: IFFALSE 25278
25260: GO 25262
25262: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25263: LD_INT 4
25265: PPUSH
25266: LD_OWVAR 2
25270: PPUSH
25271: LD_INT 0
25273: PPUSH
25274: CALL_OW 324
25278: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25279: LD_EXP 81
25283: PUSH
25284: LD_EXP 118
25288: AND
25289: IFFALSE 25309
25291: GO 25293
25293: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25294: LD_INT 19
25296: PPUSH
25297: LD_OWVAR 2
25301: PPUSH
25302: LD_INT 0
25304: PPUSH
25305: CALL_OW 324
25309: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25310: LD_EXP 81
25314: PUSH
25315: LD_EXP 90
25319: AND
25320: IFFALSE 25422
25322: GO 25324
25324: DISABLE
25325: LD_INT 0
25327: PPUSH
25328: PPUSH
// begin enable ;
25329: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25330: LD_ADDR_VAR 0 2
25334: PUSH
25335: LD_INT 22
25337: PUSH
25338: LD_OWVAR 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: LD_INT 34
25352: PUSH
25353: LD_INT 11
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 34
25362: PUSH
25363: LD_INT 30
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PPUSH
25379: CALL_OW 69
25383: ST_TO_ADDR
// if not tmp then
25384: LD_VAR 0 2
25388: NOT
25389: IFFALSE 25393
// exit ;
25391: GO 25422
// for i in tmp do
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_VAR 0 2
25402: PUSH
25403: FOR_IN
25404: IFFALSE 25420
// begin SetLives ( i , 0 ) ;
25406: LD_VAR 0 1
25410: PPUSH
25411: LD_INT 0
25413: PPUSH
25414: CALL_OW 234
// end ;
25418: GO 25403
25420: POP
25421: POP
// end ;
25422: PPOPN 2
25424: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25425: LD_EXP 81
25429: PUSH
25430: LD_EXP 91
25434: AND
25435: IFFALSE 25455
25437: GO 25439
25439: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25440: LD_INT 32
25442: PPUSH
25443: LD_OWVAR 2
25447: PPUSH
25448: LD_INT 0
25450: PPUSH
25451: CALL_OW 324
25455: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25456: LD_EXP 81
25460: PUSH
25461: LD_EXP 92
25465: AND
25466: IFFALSE 25647
25468: GO 25470
25470: DISABLE
25471: LD_INT 0
25473: PPUSH
25474: PPUSH
25475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25476: LD_ADDR_VAR 0 2
25480: PUSH
25481: LD_INT 22
25483: PUSH
25484: LD_OWVAR 2
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 33
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PPUSH
25507: CALL_OW 69
25511: ST_TO_ADDR
// if not tmp then
25512: LD_VAR 0 2
25516: NOT
25517: IFFALSE 25521
// exit ;
25519: GO 25647
// side := 0 ;
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 0
25528: ST_TO_ADDR
// for i := 1 to 8 do
25529: LD_ADDR_VAR 0 1
25533: PUSH
25534: DOUBLE
25535: LD_INT 1
25537: DEC
25538: ST_TO_ADDR
25539: LD_INT 8
25541: PUSH
25542: FOR_TO
25543: IFFALSE 25591
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25545: LD_OWVAR 2
25549: PUSH
25550: LD_VAR 0 1
25554: NONEQUAL
25555: PUSH
25556: LD_OWVAR 2
25560: PPUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 81
25570: PUSH
25571: LD_INT 2
25573: EQUAL
25574: AND
25575: IFFALSE 25589
// begin side := i ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_VAR 0 1
25586: ST_TO_ADDR
// break ;
25587: GO 25591
// end ;
25589: GO 25542
25591: POP
25592: POP
// if not side then
25593: LD_VAR 0 3
25597: NOT
25598: IFFALSE 25602
// exit ;
25600: GO 25647
// for i := 1 to tmp do
25602: LD_ADDR_VAR 0 1
25606: PUSH
25607: DOUBLE
25608: LD_INT 1
25610: DEC
25611: ST_TO_ADDR
25612: LD_VAR 0 2
25616: PUSH
25617: FOR_TO
25618: IFFALSE 25645
// if Prob ( 60 ) then
25620: LD_INT 60
25622: PPUSH
25623: CALL_OW 13
25627: IFFALSE 25643
// SetSide ( i , side ) ;
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: CALL_OW 235
25643: GO 25617
25645: POP
25646: POP
// end ;
25647: PPOPN 3
25649: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25650: LD_EXP 81
25654: PUSH
25655: LD_EXP 94
25659: AND
25660: IFFALSE 25779
25662: GO 25664
25664: DISABLE
25665: LD_INT 0
25667: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25668: LD_ADDR_VAR 0 1
25672: PUSH
25673: LD_INT 22
25675: PUSH
25676: LD_OWVAR 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 21
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: PUSH
25698: LD_INT 23
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PPUSH
25717: CALL_OW 69
25721: PUSH
25722: FOR_IN
25723: IFFALSE 25777
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 257
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: LD_INT 4
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: IN
25753: IFFALSE 25775
// SetClass ( un , rand ( 1 , 4 ) ) ;
25755: LD_VAR 0 1
25759: PPUSH
25760: LD_INT 1
25762: PPUSH
25763: LD_INT 4
25765: PPUSH
25766: CALL_OW 12
25770: PPUSH
25771: CALL_OW 336
25775: GO 25722
25777: POP
25778: POP
// end ;
25779: PPOPN 1
25781: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25782: LD_EXP 81
25786: PUSH
25787: LD_EXP 93
25791: AND
25792: IFFALSE 25871
25794: GO 25796
25796: DISABLE
25797: LD_INT 0
25799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25800: LD_ADDR_VAR 0 1
25804: PUSH
25805: LD_INT 22
25807: PUSH
25808: LD_OWVAR 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 21
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PPUSH
25831: CALL_OW 69
25835: ST_TO_ADDR
// if not tmp then
25836: LD_VAR 0 1
25840: NOT
25841: IFFALSE 25845
// exit ;
25843: GO 25871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25845: LD_VAR 0 1
25849: PUSH
25850: LD_INT 1
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 12
25862: ARRAY
25863: PPUSH
25864: LD_INT 100
25866: PPUSH
25867: CALL_OW 234
// end ;
25871: PPOPN 1
25873: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25874: LD_EXP 81
25878: PUSH
25879: LD_EXP 95
25883: AND
25884: IFFALSE 25982
25886: GO 25888
25888: DISABLE
25889: LD_INT 0
25891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25892: LD_ADDR_VAR 0 1
25896: PUSH
25897: LD_INT 22
25899: PUSH
25900: LD_OWVAR 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 21
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 69
25927: ST_TO_ADDR
// if not tmp then
25928: LD_VAR 0 1
25932: NOT
25933: IFFALSE 25937
// exit ;
25935: GO 25982
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25937: LD_VAR 0 1
25941: PUSH
25942: LD_INT 1
25944: PPUSH
25945: LD_VAR 0 1
25949: PPUSH
25950: CALL_OW 12
25954: ARRAY
25955: PPUSH
25956: LD_INT 1
25958: PPUSH
25959: LD_INT 4
25961: PPUSH
25962: CALL_OW 12
25966: PPUSH
25967: LD_INT 3000
25969: PPUSH
25970: LD_INT 9000
25972: PPUSH
25973: CALL_OW 12
25977: PPUSH
25978: CALL_OW 492
// end ;
25982: PPOPN 1
25984: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25985: LD_EXP 81
25989: PUSH
25990: LD_EXP 96
25994: AND
25995: IFFALSE 26015
25997: GO 25999
25999: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26000: LD_INT 1
26002: PPUSH
26003: LD_OWVAR 2
26007: PPUSH
26008: LD_INT 0
26010: PPUSH
26011: CALL_OW 324
26015: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26016: LD_EXP 81
26020: PUSH
26021: LD_EXP 97
26025: AND
26026: IFFALSE 26109
26028: GO 26030
26030: DISABLE
26031: LD_INT 0
26033: PPUSH
26034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26035: LD_ADDR_VAR 0 2
26039: PUSH
26040: LD_INT 22
26042: PUSH
26043: LD_OWVAR 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 21
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PPUSH
26066: CALL_OW 69
26070: ST_TO_ADDR
// if not tmp then
26071: LD_VAR 0 2
26075: NOT
26076: IFFALSE 26080
// exit ;
26078: GO 26109
// for i in tmp do
26080: LD_ADDR_VAR 0 1
26084: PUSH
26085: LD_VAR 0 2
26089: PUSH
26090: FOR_IN
26091: IFFALSE 26107
// SetBLevel ( i , 10 ) ;
26093: LD_VAR 0 1
26097: PPUSH
26098: LD_INT 10
26100: PPUSH
26101: CALL_OW 241
26105: GO 26090
26107: POP
26108: POP
// end ;
26109: PPOPN 2
26111: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26112: LD_EXP 81
26116: PUSH
26117: LD_EXP 98
26121: AND
26122: IFFALSE 26233
26124: GO 26126
26126: DISABLE
26127: LD_INT 0
26129: PPUSH
26130: PPUSH
26131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_INT 22
26139: PUSH
26140: LD_OWVAR 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 25
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: ST_TO_ADDR
// if not tmp then
26168: LD_VAR 0 3
26172: NOT
26173: IFFALSE 26177
// exit ;
26175: GO 26233
// un := tmp [ rand ( 1 , tmp ) ] ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_VAR 0 3
26186: PUSH
26187: LD_INT 1
26189: PPUSH
26190: LD_VAR 0 3
26194: PPUSH
26195: CALL_OW 12
26199: ARRAY
26200: ST_TO_ADDR
// if Crawls ( un ) then
26201: LD_VAR 0 2
26205: PPUSH
26206: CALL_OW 318
26210: IFFALSE 26221
// ComWalk ( un ) ;
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26221: LD_VAR 0 2
26225: PPUSH
26226: LD_INT 5
26228: PPUSH
26229: CALL_OW 336
// end ;
26233: PPOPN 3
26235: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26236: LD_EXP 81
26240: PUSH
26241: LD_EXP 99
26245: AND
26246: PUSH
26247: LD_OWVAR 67
26251: PUSH
26252: LD_INT 4
26254: LESS
26255: AND
26256: IFFALSE 26275
26258: GO 26260
26260: DISABLE
// begin Difficulty := Difficulty + 1 ;
26261: LD_ADDR_OWVAR 67
26265: PUSH
26266: LD_OWVAR 67
26270: PUSH
26271: LD_INT 1
26273: PLUS
26274: ST_TO_ADDR
// end ;
26275: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26276: LD_EXP 81
26280: PUSH
26281: LD_EXP 100
26285: AND
26286: IFFALSE 26389
26288: GO 26290
26290: DISABLE
26291: LD_INT 0
26293: PPUSH
// begin for i := 1 to 5 do
26294: LD_ADDR_VAR 0 1
26298: PUSH
26299: DOUBLE
26300: LD_INT 1
26302: DEC
26303: ST_TO_ADDR
26304: LD_INT 5
26306: PUSH
26307: FOR_TO
26308: IFFALSE 26387
// begin uc_nation := nation_nature ;
26310: LD_ADDR_OWVAR 21
26314: PUSH
26315: LD_INT 0
26317: ST_TO_ADDR
// uc_side := 0 ;
26318: LD_ADDR_OWVAR 20
26322: PUSH
26323: LD_INT 0
26325: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26326: LD_ADDR_OWVAR 29
26330: PUSH
26331: LD_INT 12
26333: PUSH
26334: LD_INT 12
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: ST_TO_ADDR
// hc_agressivity := 20 ;
26341: LD_ADDR_OWVAR 35
26345: PUSH
26346: LD_INT 20
26348: ST_TO_ADDR
// hc_class := class_tiger ;
26349: LD_ADDR_OWVAR 28
26353: PUSH
26354: LD_INT 14
26356: ST_TO_ADDR
// hc_gallery :=  ;
26357: LD_ADDR_OWVAR 33
26361: PUSH
26362: LD_STRING 
26364: ST_TO_ADDR
// hc_name :=  ;
26365: LD_ADDR_OWVAR 26
26369: PUSH
26370: LD_STRING 
26372: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26373: CALL_OW 44
26377: PPUSH
26378: LD_INT 0
26380: PPUSH
26381: CALL_OW 51
// end ;
26385: GO 26307
26387: POP
26388: POP
// end ;
26389: PPOPN 1
26391: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26392: LD_EXP 81
26396: PUSH
26397: LD_EXP 101
26401: AND
26402: IFFALSE 26411
26404: GO 26406
26406: DISABLE
// StreamSibBomb ;
26407: CALL 26412 0 0
26411: END
// export function StreamSibBomb ; var i , x , y ; begin
26412: LD_INT 0
26414: PPUSH
26415: PPUSH
26416: PPUSH
26417: PPUSH
// result := false ;
26418: LD_ADDR_VAR 0 1
26422: PUSH
26423: LD_INT 0
26425: ST_TO_ADDR
// for i := 1 to 16 do
26426: LD_ADDR_VAR 0 2
26430: PUSH
26431: DOUBLE
26432: LD_INT 1
26434: DEC
26435: ST_TO_ADDR
26436: LD_INT 16
26438: PUSH
26439: FOR_TO
26440: IFFALSE 26639
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26442: LD_ADDR_VAR 0 3
26446: PUSH
26447: LD_INT 10
26449: PUSH
26450: LD_INT 20
26452: PUSH
26453: LD_INT 30
26455: PUSH
26456: LD_INT 40
26458: PUSH
26459: LD_INT 50
26461: PUSH
26462: LD_INT 60
26464: PUSH
26465: LD_INT 70
26467: PUSH
26468: LD_INT 80
26470: PUSH
26471: LD_INT 90
26473: PUSH
26474: LD_INT 100
26476: PUSH
26477: LD_INT 110
26479: PUSH
26480: LD_INT 120
26482: PUSH
26483: LD_INT 130
26485: PUSH
26486: LD_INT 140
26488: PUSH
26489: LD_INT 150
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PPUSH
26512: LD_INT 15
26514: PPUSH
26515: CALL_OW 12
26519: ARRAY
26520: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26521: LD_ADDR_VAR 0 4
26525: PUSH
26526: LD_INT 10
26528: PUSH
26529: LD_INT 20
26531: PUSH
26532: LD_INT 30
26534: PUSH
26535: LD_INT 40
26537: PUSH
26538: LD_INT 50
26540: PUSH
26541: LD_INT 60
26543: PUSH
26544: LD_INT 70
26546: PUSH
26547: LD_INT 80
26549: PUSH
26550: LD_INT 90
26552: PUSH
26553: LD_INT 100
26555: PUSH
26556: LD_INT 110
26558: PUSH
26559: LD_INT 120
26561: PUSH
26562: LD_INT 130
26564: PUSH
26565: LD_INT 140
26567: PUSH
26568: LD_INT 150
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PPUSH
26591: LD_INT 15
26593: PPUSH
26594: CALL_OW 12
26598: ARRAY
26599: ST_TO_ADDR
// if ValidHex ( x , y ) then
26600: LD_VAR 0 3
26604: PPUSH
26605: LD_VAR 0 4
26609: PPUSH
26610: CALL_OW 488
26614: IFFALSE 26637
// begin result := [ x , y ] ;
26616: LD_ADDR_VAR 0 1
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 4
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: ST_TO_ADDR
// break ;
26635: GO 26639
// end ; end ;
26637: GO 26439
26639: POP
26640: POP
// if result then
26641: LD_VAR 0 1
26645: IFFALSE 26705
// begin ToLua ( playSibBomb() ) ;
26647: LD_STRING playSibBomb()
26649: PPUSH
26650: CALL_OW 559
// wait ( 0 0$14 ) ;
26654: LD_INT 490
26656: PPUSH
26657: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26661: LD_VAR 0 1
26665: PUSH
26666: LD_INT 1
26668: ARRAY
26669: PPUSH
26670: LD_VAR 0 1
26674: PUSH
26675: LD_INT 2
26677: ARRAY
26678: PPUSH
26679: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26683: LD_VAR 0 1
26687: PUSH
26688: LD_INT 1
26690: ARRAY
26691: PPUSH
26692: LD_VAR 0 1
26696: PUSH
26697: LD_INT 2
26699: ARRAY
26700: PPUSH
26701: CALL_OW 429
// end ; end ;
26705: LD_VAR 0 1
26709: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26710: LD_EXP 81
26714: PUSH
26715: LD_EXP 103
26719: AND
26720: IFFALSE 26732
26722: GO 26724
26724: DISABLE
// YouLost (  ) ;
26725: LD_STRING 
26727: PPUSH
26728: CALL_OW 104
26732: END
// every 0 0$1 trigger StreamModeActive and sFog do
26733: LD_EXP 81
26737: PUSH
26738: LD_EXP 102
26742: AND
26743: IFFALSE 26757
26745: GO 26747
26747: DISABLE
// FogOff ( your_side ) ;
26748: LD_OWVAR 2
26752: PPUSH
26753: CALL_OW 344
26757: END
// every 0 0$1 trigger StreamModeActive and sSun do
26758: LD_EXP 81
26762: PUSH
26763: LD_EXP 104
26767: AND
26768: IFFALSE 26796
26770: GO 26772
26772: DISABLE
// begin solar_recharge_percent := 0 ;
26773: LD_ADDR_OWVAR 79
26777: PUSH
26778: LD_INT 0
26780: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26781: LD_INT 10500
26783: PPUSH
26784: CALL_OW 67
// solar_recharge_percent := 100 ;
26788: LD_ADDR_OWVAR 79
26792: PUSH
26793: LD_INT 100
26795: ST_TO_ADDR
// end ;
26796: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26797: LD_EXP 81
26801: PUSH
26802: LD_EXP 105
26806: AND
26807: IFFALSE 27046
26809: GO 26811
26811: DISABLE
26812: LD_INT 0
26814: PPUSH
26815: PPUSH
26816: PPUSH
// begin tmp := [ ] ;
26817: LD_ADDR_VAR 0 3
26821: PUSH
26822: EMPTY
26823: ST_TO_ADDR
// for i := 1 to 6 do
26824: LD_ADDR_VAR 0 1
26828: PUSH
26829: DOUBLE
26830: LD_INT 1
26832: DEC
26833: ST_TO_ADDR
26834: LD_INT 6
26836: PUSH
26837: FOR_TO
26838: IFFALSE 26943
// begin uc_nation := nation_nature ;
26840: LD_ADDR_OWVAR 21
26844: PUSH
26845: LD_INT 0
26847: ST_TO_ADDR
// uc_side := 0 ;
26848: LD_ADDR_OWVAR 20
26852: PUSH
26853: LD_INT 0
26855: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26856: LD_ADDR_OWVAR 29
26860: PUSH
26861: LD_INT 12
26863: PUSH
26864: LD_INT 12
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: ST_TO_ADDR
// hc_agressivity := 20 ;
26871: LD_ADDR_OWVAR 35
26875: PUSH
26876: LD_INT 20
26878: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26879: LD_ADDR_OWVAR 28
26883: PUSH
26884: LD_INT 17
26886: ST_TO_ADDR
// hc_gallery :=  ;
26887: LD_ADDR_OWVAR 33
26891: PUSH
26892: LD_STRING 
26894: ST_TO_ADDR
// hc_name :=  ;
26895: LD_ADDR_OWVAR 26
26899: PUSH
26900: LD_STRING 
26902: ST_TO_ADDR
// un := CreateHuman ;
26903: LD_ADDR_VAR 0 2
26907: PUSH
26908: CALL_OW 44
26912: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26913: LD_VAR 0 2
26917: PPUSH
26918: LD_INT 1
26920: PPUSH
26921: CALL_OW 51
// tmp := tmp ^ un ;
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: LD_VAR 0 3
26934: PUSH
26935: LD_VAR 0 2
26939: ADD
26940: ST_TO_ADDR
// end ;
26941: GO 26837
26943: POP
26944: POP
// repeat wait ( 0 0$1 ) ;
26945: LD_INT 35
26947: PPUSH
26948: CALL_OW 67
// for un in tmp do
26952: LD_ADDR_VAR 0 2
26956: PUSH
26957: LD_VAR 0 3
26961: PUSH
26962: FOR_IN
26963: IFFALSE 27037
// begin if IsDead ( un ) then
26965: LD_VAR 0 2
26969: PPUSH
26970: CALL_OW 301
26974: IFFALSE 26994
// begin tmp := tmp diff un ;
26976: LD_ADDR_VAR 0 3
26980: PUSH
26981: LD_VAR 0 3
26985: PUSH
26986: LD_VAR 0 2
26990: DIFF
26991: ST_TO_ADDR
// continue ;
26992: GO 26962
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26994: LD_VAR 0 2
26998: PPUSH
26999: LD_INT 3
27001: PUSH
27002: LD_INT 22
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PPUSH
27016: CALL_OW 69
27020: PPUSH
27021: LD_VAR 0 2
27025: PPUSH
27026: CALL_OW 74
27030: PPUSH
27031: CALL_OW 115
// end ;
27035: GO 26962
27037: POP
27038: POP
// until not tmp ;
27039: LD_VAR 0 3
27043: NOT
27044: IFFALSE 26945
// end ;
27046: PPOPN 3
27048: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27049: LD_EXP 81
27053: PUSH
27054: LD_EXP 106
27058: AND
27059: IFFALSE 27113
27061: GO 27063
27063: DISABLE
// begin ToLua ( displayTroll(); ) ;
27064: LD_STRING displayTroll();
27066: PPUSH
27067: CALL_OW 559
// wait ( 3 3$00 ) ;
27071: LD_INT 6300
27073: PPUSH
27074: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27078: LD_STRING hideTroll();
27080: PPUSH
27081: CALL_OW 559
// wait ( 1 1$00 ) ;
27085: LD_INT 2100
27087: PPUSH
27088: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27092: LD_STRING displayTroll();
27094: PPUSH
27095: CALL_OW 559
// wait ( 1 1$00 ) ;
27099: LD_INT 2100
27101: PPUSH
27102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27106: LD_STRING hideTroll();
27108: PPUSH
27109: CALL_OW 559
// end ;
27113: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27114: LD_EXP 81
27118: PUSH
27119: LD_EXP 107
27123: AND
27124: IFFALSE 27187
27126: GO 27128
27128: DISABLE
27129: LD_INT 0
27131: PPUSH
// begin p := 0 ;
27132: LD_ADDR_VAR 0 1
27136: PUSH
27137: LD_INT 0
27139: ST_TO_ADDR
// repeat game_speed := 1 ;
27140: LD_ADDR_OWVAR 65
27144: PUSH
27145: LD_INT 1
27147: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27148: LD_INT 35
27150: PPUSH
27151: CALL_OW 67
// p := p + 1 ;
27155: LD_ADDR_VAR 0 1
27159: PUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 1
27167: PLUS
27168: ST_TO_ADDR
// until p >= 60 ;
27169: LD_VAR 0 1
27173: PUSH
27174: LD_INT 60
27176: GREATEREQUAL
27177: IFFALSE 27140
// game_speed := 4 ;
27179: LD_ADDR_OWVAR 65
27183: PUSH
27184: LD_INT 4
27186: ST_TO_ADDR
// end ;
27187: PPOPN 1
27189: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27190: LD_EXP 81
27194: PUSH
27195: LD_EXP 108
27199: AND
27200: IFFALSE 27346
27202: GO 27204
27204: DISABLE
27205: LD_INT 0
27207: PPUSH
27208: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_INT 22
27216: PUSH
27217: LD_OWVAR 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: LD_INT 30
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 30
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PPUSH
27258: CALL_OW 69
27262: ST_TO_ADDR
// if not depot then
27263: LD_VAR 0 1
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27346
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27272: LD_ADDR_VAR 0 2
27276: PUSH
27277: LD_VAR 0 1
27281: PUSH
27282: LD_INT 1
27284: PPUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 12
27294: ARRAY
27295: PPUSH
27296: CALL_OW 274
27300: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_INT 1
27308: PPUSH
27309: LD_INT 0
27311: PPUSH
27312: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27316: LD_VAR 0 2
27320: PPUSH
27321: LD_INT 2
27323: PPUSH
27324: LD_INT 0
27326: PPUSH
27327: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27331: LD_VAR 0 2
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: LD_INT 0
27341: PPUSH
27342: CALL_OW 277
// end ;
27346: PPOPN 2
27348: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27349: LD_EXP 81
27353: PUSH
27354: LD_EXP 109
27358: AND
27359: IFFALSE 27456
27361: GO 27363
27363: DISABLE
27364: LD_INT 0
27366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_OWVAR 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: LD_INT 23
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: PPUSH
27416: CALL_OW 69
27420: ST_TO_ADDR
// if not tmp then
27421: LD_VAR 0 1
27425: NOT
27426: IFFALSE 27430
// exit ;
27428: GO 27456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27430: LD_VAR 0 1
27434: PUSH
27435: LD_INT 1
27437: PPUSH
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 12
27447: ARRAY
27448: PPUSH
27449: LD_INT 200
27451: PPUSH
27452: CALL_OW 234
// end ;
27456: PPOPN 1
27458: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27459: LD_EXP 81
27463: PUSH
27464: LD_EXP 110
27468: AND
27469: IFFALSE 27548
27471: GO 27473
27473: DISABLE
27474: LD_INT 0
27476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27477: LD_ADDR_VAR 0 1
27481: PUSH
27482: LD_INT 22
27484: PUSH
27485: LD_OWVAR 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 21
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 69
27512: ST_TO_ADDR
// if not tmp then
27513: LD_VAR 0 1
27517: NOT
27518: IFFALSE 27522
// exit ;
27520: GO 27548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27522: LD_VAR 0 1
27526: PUSH
27527: LD_INT 1
27529: PPUSH
27530: LD_VAR 0 1
27534: PPUSH
27535: CALL_OW 12
27539: ARRAY
27540: PPUSH
27541: LD_INT 60
27543: PPUSH
27544: CALL_OW 234
// end ;
27548: PPOPN 1
27550: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27551: LD_EXP 81
27555: PUSH
27556: LD_EXP 111
27560: AND
27561: IFFALSE 27660
27563: GO 27565
27565: DISABLE
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
// begin enable ;
27570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27571: LD_ADDR_VAR 0 1
27575: PUSH
27576: LD_INT 22
27578: PUSH
27579: LD_OWVAR 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 61
27590: PUSH
27591: EMPTY
27592: LIST
27593: PUSH
27594: LD_INT 33
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: PPUSH
27609: CALL_OW 69
27613: ST_TO_ADDR
// if not tmp then
27614: LD_VAR 0 1
27618: NOT
27619: IFFALSE 27623
// exit ;
27621: GO 27660
// for i in tmp do
27623: LD_ADDR_VAR 0 2
27627: PUSH
27628: LD_VAR 0 1
27632: PUSH
27633: FOR_IN
27634: IFFALSE 27658
// if IsControledBy ( i ) then
27636: LD_VAR 0 2
27640: PPUSH
27641: CALL_OW 312
27645: IFFALSE 27656
// ComUnlink ( i ) ;
27647: LD_VAR 0 2
27651: PPUSH
27652: CALL_OW 136
27656: GO 27633
27658: POP
27659: POP
// end ;
27660: PPOPN 2
27662: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27663: LD_EXP 81
27667: PUSH
27668: LD_EXP 112
27672: AND
27673: IFFALSE 27813
27675: GO 27677
27677: DISABLE
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
// begin ToLua ( displayPowell(); ) ;
27682: LD_STRING displayPowell();
27684: PPUSH
27685: CALL_OW 559
// uc_side := 0 ;
27689: LD_ADDR_OWVAR 20
27693: PUSH
27694: LD_INT 0
27696: ST_TO_ADDR
// uc_nation := 2 ;
27697: LD_ADDR_OWVAR 21
27701: PUSH
27702: LD_INT 2
27704: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27705: LD_ADDR_OWVAR 37
27709: PUSH
27710: LD_INT 14
27712: ST_TO_ADDR
// vc_engine := engine_siberite ;
27713: LD_ADDR_OWVAR 39
27717: PUSH
27718: LD_INT 3
27720: ST_TO_ADDR
// vc_control := control_apeman ;
27721: LD_ADDR_OWVAR 38
27725: PUSH
27726: LD_INT 5
27728: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27729: LD_ADDR_OWVAR 40
27733: PUSH
27734: LD_INT 29
27736: ST_TO_ADDR
// un := CreateVehicle ;
27737: LD_ADDR_VAR 0 2
27741: PUSH
27742: CALL_OW 45
27746: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27747: LD_VAR 0 2
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27759: LD_INT 35
27761: PPUSH
27762: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_INT 22
27773: PUSH
27774: LD_OWVAR 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: PPUSH
27788: LD_VAR 0 2
27792: PPUSH
27793: CALL_OW 74
27797: PPUSH
27798: CALL_OW 115
// until IsDead ( un ) ;
27802: LD_VAR 0 2
27806: PPUSH
27807: CALL_OW 301
27811: IFFALSE 27759
// end ;
27813: PPOPN 2
27815: END
// every 0 0$1 trigger StreamModeActive and sStu do
27816: LD_EXP 81
27820: PUSH
27821: LD_EXP 120
27825: AND
27826: IFFALSE 27842
27828: GO 27830
27830: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27831: LD_STRING displayStucuk();
27833: PPUSH
27834: CALL_OW 559
// ResetFog ;
27838: CALL_OW 335
// end ;
27842: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27843: LD_EXP 81
27847: PUSH
27848: LD_EXP 113
27852: AND
27853: IFFALSE 27994
27855: GO 27857
27857: DISABLE
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27862: LD_ADDR_VAR 0 2
27866: PUSH
27867: LD_INT 22
27869: PUSH
27870: LD_OWVAR 2
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 21
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PPUSH
27893: CALL_OW 69
27897: ST_TO_ADDR
// if not tmp then
27898: LD_VAR 0 2
27902: NOT
27903: IFFALSE 27907
// exit ;
27905: GO 27994
// un := tmp [ rand ( 1 , tmp ) ] ;
27907: LD_ADDR_VAR 0 1
27911: PUSH
27912: LD_VAR 0 2
27916: PUSH
27917: LD_INT 1
27919: PPUSH
27920: LD_VAR 0 2
27924: PPUSH
27925: CALL_OW 12
27929: ARRAY
27930: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27931: LD_VAR 0 1
27935: PPUSH
27936: LD_INT 0
27938: PPUSH
27939: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_OWVAR 3
27952: PUSH
27953: LD_VAR 0 1
27957: DIFF
27958: PPUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL_OW 74
27968: PPUSH
27969: CALL_OW 115
// wait ( 0 0$20 ) ;
27973: LD_INT 700
27975: PPUSH
27976: CALL_OW 67
// SetSide ( un , your_side ) ;
27980: LD_VAR 0 1
27984: PPUSH
27985: LD_OWVAR 2
27989: PPUSH
27990: CALL_OW 235
// end ;
27994: PPOPN 2
27996: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27997: LD_EXP 81
28001: PUSH
28002: LD_EXP 114
28006: AND
28007: IFFALSE 28113
28009: GO 28011
28011: DISABLE
28012: LD_INT 0
28014: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28015: LD_ADDR_VAR 0 1
28019: PUSH
28020: LD_INT 22
28022: PUSH
28023: LD_OWVAR 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 30
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 30
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: ST_TO_ADDR
// if not depot then
28069: LD_VAR 0 1
28073: NOT
28074: IFFALSE 28078
// exit ;
28076: GO 28113
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28078: LD_VAR 0 1
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: PPUSH
28087: CALL_OW 250
28091: PPUSH
28092: LD_VAR 0 1
28096: PUSH
28097: LD_INT 1
28099: ARRAY
28100: PPUSH
28101: CALL_OW 251
28105: PPUSH
28106: LD_INT 70
28108: PPUSH
28109: CALL_OW 495
// end ;
28113: PPOPN 1
28115: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28116: LD_EXP 81
28120: PUSH
28121: LD_EXP 115
28125: AND
28126: IFFALSE 28337
28128: GO 28130
28130: DISABLE
28131: LD_INT 0
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
28137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28138: LD_ADDR_VAR 0 5
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_OWVAR 2
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 21
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PPUSH
28169: CALL_OW 69
28173: ST_TO_ADDR
// if not tmp then
28174: LD_VAR 0 5
28178: NOT
28179: IFFALSE 28183
// exit ;
28181: GO 28337
// for i in tmp do
28183: LD_ADDR_VAR 0 1
28187: PUSH
28188: LD_VAR 0 5
28192: PUSH
28193: FOR_IN
28194: IFFALSE 28335
// begin d := rand ( 0 , 5 ) ;
28196: LD_ADDR_VAR 0 4
28200: PUSH
28201: LD_INT 0
28203: PPUSH
28204: LD_INT 5
28206: PPUSH
28207: CALL_OW 12
28211: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28212: LD_ADDR_VAR 0 2
28216: PUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 250
28226: PPUSH
28227: LD_VAR 0 4
28231: PPUSH
28232: LD_INT 3
28234: PPUSH
28235: LD_INT 12
28237: PPUSH
28238: CALL_OW 12
28242: PPUSH
28243: CALL_OW 272
28247: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_VAR 0 1
28257: PPUSH
28258: CALL_OW 251
28262: PPUSH
28263: LD_VAR 0 4
28267: PPUSH
28268: LD_INT 3
28270: PPUSH
28271: LD_INT 12
28273: PPUSH
28274: CALL_OW 12
28278: PPUSH
28279: CALL_OW 273
28283: ST_TO_ADDR
// if ValidHex ( x , y ) then
28284: LD_VAR 0 2
28288: PPUSH
28289: LD_VAR 0 3
28293: PPUSH
28294: CALL_OW 488
28298: IFFALSE 28333
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28300: LD_VAR 0 1
28304: PPUSH
28305: LD_VAR 0 2
28309: PPUSH
28310: LD_VAR 0 3
28314: PPUSH
28315: LD_INT 3
28317: PPUSH
28318: LD_INT 6
28320: PPUSH
28321: CALL_OW 12
28325: PPUSH
28326: LD_INT 1
28328: PPUSH
28329: CALL_OW 483
// end ;
28333: GO 28193
28335: POP
28336: POP
// end ;
28337: PPOPN 5
28339: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28340: LD_EXP 81
28344: PUSH
28345: LD_EXP 116
28349: AND
28350: IFFALSE 28444
28352: GO 28354
28354: DISABLE
28355: LD_INT 0
28357: PPUSH
28358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28359: LD_ADDR_VAR 0 2
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_OWVAR 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 32
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 21
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: PPUSH
28401: CALL_OW 69
28405: ST_TO_ADDR
// if not tmp then
28406: LD_VAR 0 2
28410: NOT
28411: IFFALSE 28415
// exit ;
28413: GO 28444
// for i in tmp do
28415: LD_ADDR_VAR 0 1
28419: PUSH
28420: LD_VAR 0 2
28424: PUSH
28425: FOR_IN
28426: IFFALSE 28442
// SetFuel ( i , 0 ) ;
28428: LD_VAR 0 1
28432: PPUSH
28433: LD_INT 0
28435: PPUSH
28436: CALL_OW 240
28440: GO 28425
28442: POP
28443: POP
// end ;
28444: PPOPN 2
28446: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28447: LD_EXP 81
28451: PUSH
28452: LD_EXP 117
28456: AND
28457: IFFALSE 28523
28459: GO 28461
28461: DISABLE
28462: LD_INT 0
28464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28465: LD_ADDR_VAR 0 1
28469: PUSH
28470: LD_INT 22
28472: PUSH
28473: LD_OWVAR 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 30
28484: PUSH
28485: LD_INT 29
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PPUSH
28496: CALL_OW 69
28500: ST_TO_ADDR
// if not tmp then
28501: LD_VAR 0 1
28505: NOT
28506: IFFALSE 28510
// exit ;
28508: GO 28523
// DestroyUnit ( tmp [ 1 ] ) ;
28510: LD_VAR 0 1
28514: PUSH
28515: LD_INT 1
28517: ARRAY
28518: PPUSH
28519: CALL_OW 65
// end ;
28523: PPOPN 1
28525: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28526: LD_EXP 81
28530: PUSH
28531: LD_EXP 119
28535: AND
28536: IFFALSE 28665
28538: GO 28540
28540: DISABLE
28541: LD_INT 0
28543: PPUSH
// begin uc_side := 0 ;
28544: LD_ADDR_OWVAR 20
28548: PUSH
28549: LD_INT 0
28551: ST_TO_ADDR
// uc_nation := nation_arabian ;
28552: LD_ADDR_OWVAR 21
28556: PUSH
28557: LD_INT 2
28559: ST_TO_ADDR
// hc_gallery :=  ;
28560: LD_ADDR_OWVAR 33
28564: PUSH
28565: LD_STRING 
28567: ST_TO_ADDR
// hc_name :=  ;
28568: LD_ADDR_OWVAR 26
28572: PUSH
28573: LD_STRING 
28575: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28576: LD_INT 1
28578: PPUSH
28579: LD_INT 11
28581: PPUSH
28582: LD_INT 10
28584: PPUSH
28585: CALL_OW 380
// un := CreateHuman ;
28589: LD_ADDR_VAR 0 1
28593: PUSH
28594: CALL_OW 44
28598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28599: LD_VAR 0 1
28603: PPUSH
28604: LD_INT 1
28606: PPUSH
28607: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28611: LD_INT 35
28613: PPUSH
28614: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28618: LD_VAR 0 1
28622: PPUSH
28623: LD_INT 22
28625: PUSH
28626: LD_OWVAR 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PPUSH
28635: CALL_OW 69
28639: PPUSH
28640: LD_VAR 0 1
28644: PPUSH
28645: CALL_OW 74
28649: PPUSH
28650: CALL_OW 115
// until IsDead ( un ) ;
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 301
28663: IFFALSE 28611
// end ;
28665: PPOPN 1
28667: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28668: LD_EXP 81
28672: PUSH
28673: LD_EXP 121
28677: AND
28678: IFFALSE 28690
28680: GO 28682
28682: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28683: LD_STRING earthquake(getX(game), 0, 32)
28685: PPUSH
28686: CALL_OW 559
28690: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28691: LD_EXP 81
28695: PUSH
28696: LD_EXP 122
28700: AND
28701: IFFALSE 28792
28703: GO 28705
28705: DISABLE
28706: LD_INT 0
28708: PPUSH
// begin enable ;
28709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28710: LD_ADDR_VAR 0 1
28714: PUSH
28715: LD_INT 22
28717: PUSH
28718: LD_OWVAR 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 21
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 33
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: PPUSH
28752: CALL_OW 69
28756: ST_TO_ADDR
// if not tmp then
28757: LD_VAR 0 1
28761: NOT
28762: IFFALSE 28766
// exit ;
28764: GO 28792
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28766: LD_VAR 0 1
28770: PUSH
28771: LD_INT 1
28773: PPUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 12
28783: ARRAY
28784: PPUSH
28785: LD_INT 1
28787: PPUSH
28788: CALL_OW 234
// end ;
28792: PPOPN 1
28794: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28795: LD_EXP 81
28799: PUSH
28800: LD_EXP 123
28804: AND
28805: IFFALSE 28946
28807: GO 28809
28809: DISABLE
28810: LD_INT 0
28812: PPUSH
28813: PPUSH
28814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28815: LD_ADDR_VAR 0 3
28819: PUSH
28820: LD_INT 22
28822: PUSH
28823: LD_OWVAR 2
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 25
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 69
28850: ST_TO_ADDR
// if not tmp then
28851: LD_VAR 0 3
28855: NOT
28856: IFFALSE 28860
// exit ;
28858: GO 28946
// un := tmp [ rand ( 1 , tmp ) ] ;
28860: LD_ADDR_VAR 0 2
28864: PUSH
28865: LD_VAR 0 3
28869: PUSH
28870: LD_INT 1
28872: PPUSH
28873: LD_VAR 0 3
28877: PPUSH
28878: CALL_OW 12
28882: ARRAY
28883: ST_TO_ADDR
// if Crawls ( un ) then
28884: LD_VAR 0 2
28888: PPUSH
28889: CALL_OW 318
28893: IFFALSE 28904
// ComWalk ( un ) ;
28895: LD_VAR 0 2
28899: PPUSH
28900: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_INT 9
28911: PPUSH
28912: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28916: LD_INT 28
28918: PPUSH
28919: LD_OWVAR 2
28923: PPUSH
28924: LD_INT 2
28926: PPUSH
28927: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28931: LD_INT 29
28933: PPUSH
28934: LD_OWVAR 2
28938: PPUSH
28939: LD_INT 2
28941: PPUSH
28942: CALL_OW 322
// end ;
28946: PPOPN 3
28948: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28949: LD_EXP 81
28953: PUSH
28954: LD_EXP 124
28958: AND
28959: IFFALSE 29070
28961: GO 28963
28963: DISABLE
28964: LD_INT 0
28966: PPUSH
28967: PPUSH
28968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 22
28976: PUSH
28977: LD_OWVAR 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 25
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PPUSH
29000: CALL_OW 69
29004: ST_TO_ADDR
// if not tmp then
29005: LD_VAR 0 3
29009: NOT
29010: IFFALSE 29014
// exit ;
29012: GO 29070
// un := tmp [ rand ( 1 , tmp ) ] ;
29014: LD_ADDR_VAR 0 2
29018: PUSH
29019: LD_VAR 0 3
29023: PUSH
29024: LD_INT 1
29026: PPUSH
29027: LD_VAR 0 3
29031: PPUSH
29032: CALL_OW 12
29036: ARRAY
29037: ST_TO_ADDR
// if Crawls ( un ) then
29038: LD_VAR 0 2
29042: PPUSH
29043: CALL_OW 318
29047: IFFALSE 29058
// ComWalk ( un ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29058: LD_VAR 0 2
29062: PPUSH
29063: LD_INT 8
29065: PPUSH
29066: CALL_OW 336
// end ;
29070: PPOPN 3
29072: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29073: LD_EXP 81
29077: PUSH
29078: LD_EXP 125
29082: AND
29083: IFFALSE 29227
29085: GO 29087
29087: DISABLE
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29092: LD_ADDR_VAR 0 2
29096: PUSH
29097: LD_INT 22
29099: PUSH
29100: LD_OWVAR 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 21
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 34
29124: PUSH
29125: LD_INT 12
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 34
29134: PUSH
29135: LD_INT 51
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 34
29144: PUSH
29145: LD_INT 32
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 69
29167: ST_TO_ADDR
// if not tmp then
29168: LD_VAR 0 2
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29227
// for i in tmp do
29177: LD_ADDR_VAR 0 1
29181: PUSH
29182: LD_VAR 0 2
29186: PUSH
29187: FOR_IN
29188: IFFALSE 29225
// if GetCargo ( i , mat_artifact ) = 0 then
29190: LD_VAR 0 1
29194: PPUSH
29195: LD_INT 4
29197: PPUSH
29198: CALL_OW 289
29202: PUSH
29203: LD_INT 0
29205: EQUAL
29206: IFFALSE 29223
// SetCargo ( i , mat_siberit , 100 ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_INT 3
29215: PPUSH
29216: LD_INT 100
29218: PPUSH
29219: CALL_OW 290
29223: GO 29187
29225: POP
29226: POP
// end ;
29227: PPOPN 2
29229: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29230: LD_EXP 81
29234: PUSH
29235: LD_EXP 126
29239: AND
29240: IFFALSE 29423
29242: GO 29244
29244: DISABLE
29245: LD_INT 0
29247: PPUSH
29248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_INT 22
29256: PUSH
29257: LD_OWVAR 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PPUSH
29266: CALL_OW 69
29270: ST_TO_ADDR
// if not tmp then
29271: LD_VAR 0 2
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29423
// for i := 1 to 2 do
29280: LD_ADDR_VAR 0 1
29284: PUSH
29285: DOUBLE
29286: LD_INT 1
29288: DEC
29289: ST_TO_ADDR
29290: LD_INT 2
29292: PUSH
29293: FOR_TO
29294: IFFALSE 29421
// begin uc_side := your_side ;
29296: LD_ADDR_OWVAR 20
29300: PUSH
29301: LD_OWVAR 2
29305: ST_TO_ADDR
// uc_nation := nation_american ;
29306: LD_ADDR_OWVAR 21
29310: PUSH
29311: LD_INT 1
29313: ST_TO_ADDR
// vc_chassis := us_morphling ;
29314: LD_ADDR_OWVAR 37
29318: PUSH
29319: LD_INT 5
29321: ST_TO_ADDR
// vc_engine := engine_siberite ;
29322: LD_ADDR_OWVAR 39
29326: PUSH
29327: LD_INT 3
29329: ST_TO_ADDR
// vc_control := control_computer ;
29330: LD_ADDR_OWVAR 38
29334: PUSH
29335: LD_INT 3
29337: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29338: LD_ADDR_OWVAR 40
29342: PUSH
29343: LD_INT 10
29345: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29346: LD_VAR 0 2
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: PPUSH
29355: CALL_OW 310
29359: NOT
29360: IFFALSE 29407
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29362: CALL_OW 45
29366: PPUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PPUSH
29376: CALL_OW 250
29380: PPUSH
29381: LD_VAR 0 2
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: PPUSH
29390: CALL_OW 251
29394: PPUSH
29395: LD_INT 12
29397: PPUSH
29398: LD_INT 1
29400: PPUSH
29401: CALL_OW 50
29405: GO 29419
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29407: CALL_OW 45
29411: PPUSH
29412: LD_INT 1
29414: PPUSH
29415: CALL_OW 51
// end ;
29419: GO 29293
29421: POP
29422: POP
// end ;
29423: PPOPN 2
29425: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29426: LD_EXP 81
29430: PUSH
29431: LD_EXP 127
29435: AND
29436: IFFALSE 29658
29438: GO 29440
29440: DISABLE
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29449: LD_ADDR_VAR 0 6
29453: PUSH
29454: LD_INT 22
29456: PUSH
29457: LD_OWVAR 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 21
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 23
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: PPUSH
29498: CALL_OW 69
29502: ST_TO_ADDR
// if not tmp then
29503: LD_VAR 0 6
29507: NOT
29508: IFFALSE 29512
// exit ;
29510: GO 29658
// s1 := rand ( 1 , 4 ) ;
29512: LD_ADDR_VAR 0 2
29516: PUSH
29517: LD_INT 1
29519: PPUSH
29520: LD_INT 4
29522: PPUSH
29523: CALL_OW 12
29527: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29528: LD_ADDR_VAR 0 4
29532: PUSH
29533: LD_VAR 0 6
29537: PUSH
29538: LD_INT 1
29540: ARRAY
29541: PPUSH
29542: LD_VAR 0 2
29546: PPUSH
29547: CALL_OW 259
29551: ST_TO_ADDR
// if s1 = 1 then
29552: LD_VAR 0 2
29556: PUSH
29557: LD_INT 1
29559: EQUAL
29560: IFFALSE 29580
// s2 := rand ( 2 , 4 ) else
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: PPUSH
29570: LD_INT 4
29572: PPUSH
29573: CALL_OW 12
29577: ST_TO_ADDR
29578: GO 29588
// s2 := 1 ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 1
29587: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29588: LD_ADDR_VAR 0 5
29592: PUSH
29593: LD_VAR 0 6
29597: PUSH
29598: LD_INT 1
29600: ARRAY
29601: PPUSH
29602: LD_VAR 0 3
29606: PPUSH
29607: CALL_OW 259
29611: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29612: LD_VAR 0 6
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: PPUSH
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_VAR 0 5
29630: PPUSH
29631: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29635: LD_VAR 0 6
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PPUSH
29644: LD_VAR 0 3
29648: PPUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 237
// end ;
29658: PPOPN 6
29660: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29661: LD_EXP 81
29665: PUSH
29666: LD_EXP 128
29670: AND
29671: IFFALSE 29750
29673: GO 29675
29675: DISABLE
29676: LD_INT 0
29678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29679: LD_ADDR_VAR 0 1
29683: PUSH
29684: LD_INT 22
29686: PUSH
29687: LD_OWVAR 2
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: ST_TO_ADDR
// if not tmp then
29715: LD_VAR 0 1
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 29750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 1
29731: PPUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 12
29741: ARRAY
29742: PPUSH
29743: LD_INT 1
29745: PPUSH
29746: CALL_OW 234
// end ;
29750: PPOPN 1
29752: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29753: LD_EXP 81
29757: PUSH
29758: LD_EXP 129
29762: AND
29763: IFFALSE 29875
29765: GO 29767
29767: DISABLE
29768: LD_INT 0
29770: PPUSH
29771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29772: LD_ADDR_VAR 0 2
29776: PUSH
29777: LD_INT 22
29779: PUSH
29780: LD_OWVAR 2
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 30
29794: PUSH
29795: LD_INT 27
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 30
29804: PUSH
29805: LD_INT 26
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 30
29814: PUSH
29815: LD_INT 28
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 69
29836: ST_TO_ADDR
// if not tmp then
29837: LD_VAR 0 2
29841: NOT
29842: IFFALSE 29846
// exit ;
29844: GO 29875
// for i in tmp do
29846: LD_ADDR_VAR 0 1
29850: PUSH
29851: LD_VAR 0 2
29855: PUSH
29856: FOR_IN
29857: IFFALSE 29873
// SetLives ( i , 1 ) ;
29859: LD_VAR 0 1
29863: PPUSH
29864: LD_INT 1
29866: PPUSH
29867: CALL_OW 234
29871: GO 29856
29873: POP
29874: POP
// end ;
29875: PPOPN 2
29877: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29878: LD_EXP 81
29882: PUSH
29883: LD_EXP 130
29887: AND
29888: IFFALSE 30175
29890: GO 29892
29892: DISABLE
29893: LD_INT 0
29895: PPUSH
29896: PPUSH
29897: PPUSH
// begin i := rand ( 1 , 7 ) ;
29898: LD_ADDR_VAR 0 1
29902: PUSH
29903: LD_INT 1
29905: PPUSH
29906: LD_INT 7
29908: PPUSH
29909: CALL_OW 12
29913: ST_TO_ADDR
// case i of 1 :
29914: LD_VAR 0 1
29918: PUSH
29919: LD_INT 1
29921: DOUBLE
29922: EQUAL
29923: IFTRUE 29927
29925: GO 29937
29927: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29928: LD_STRING earthquake(getX(game), 0, 32)
29930: PPUSH
29931: CALL_OW 559
29935: GO 30175
29937: LD_INT 2
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29959
29945: POP
// begin ToLua ( displayStucuk(); ) ;
29946: LD_STRING displayStucuk();
29948: PPUSH
29949: CALL_OW 559
// ResetFog ;
29953: CALL_OW 335
// end ; 3 :
29957: GO 30175
29959: LD_INT 3
29961: DOUBLE
29962: EQUAL
29963: IFTRUE 29967
29965: GO 30071
29967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29968: LD_ADDR_VAR 0 2
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_OWVAR 2
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 25
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: ST_TO_ADDR
// if not tmp then
30004: LD_VAR 0 2
30008: NOT
30009: IFFALSE 30013
// exit ;
30011: GO 30175
// un := tmp [ rand ( 1 , tmp ) ] ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_VAR 0 2
30022: PUSH
30023: LD_INT 1
30025: PPUSH
30026: LD_VAR 0 2
30030: PPUSH
30031: CALL_OW 12
30035: ARRAY
30036: ST_TO_ADDR
// if Crawls ( un ) then
30037: LD_VAR 0 3
30041: PPUSH
30042: CALL_OW 318
30046: IFFALSE 30057
// ComWalk ( un ) ;
30048: LD_VAR 0 3
30052: PPUSH
30053: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30057: LD_VAR 0 3
30061: PPUSH
30062: LD_INT 8
30064: PPUSH
30065: CALL_OW 336
// end ; 4 :
30069: GO 30175
30071: LD_INT 4
30073: DOUBLE
30074: EQUAL
30075: IFTRUE 30079
30077: GO 30153
30079: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_OWVAR 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 30
30099: PUSH
30100: LD_INT 29
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: CALL_OW 69
30115: ST_TO_ADDR
// if not tmp then
30116: LD_VAR 0 2
30120: NOT
30121: IFFALSE 30125
// exit ;
30123: GO 30175
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30125: LD_VAR 0 2
30129: PUSH
30130: LD_INT 1
30132: ARRAY
30133: PPUSH
30134: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30138: LD_VAR 0 2
30142: PUSH
30143: LD_INT 1
30145: ARRAY
30146: PPUSH
30147: CALL_OW 65
// end ; 5 .. 7 :
30151: GO 30175
30153: LD_INT 5
30155: DOUBLE
30156: GREATEREQUAL
30157: IFFALSE 30165
30159: LD_INT 7
30161: DOUBLE
30162: LESSEQUAL
30163: IFTRUE 30167
30165: GO 30174
30167: POP
// StreamSibBomb ; end ;
30168: CALL 26412 0 0
30172: GO 30175
30174: POP
// end ;
30175: PPOPN 3
30177: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30178: LD_EXP 81
30182: PUSH
30183: LD_EXP 131
30187: AND
30188: IFFALSE 30344
30190: GO 30192
30192: DISABLE
30193: LD_INT 0
30195: PPUSH
30196: PPUSH
30197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30198: LD_ADDR_VAR 0 2
30202: PUSH
30203: LD_INT 81
30205: PUSH
30206: LD_OWVAR 2
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 21
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 21
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 69
30251: ST_TO_ADDR
// if not tmp then
30252: LD_VAR 0 2
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30344
// p := 0 ;
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: LD_INT 0
30268: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30269: LD_INT 35
30271: PPUSH
30272: CALL_OW 67
// p := p + 1 ;
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_VAR 0 3
30285: PUSH
30286: LD_INT 1
30288: PLUS
30289: ST_TO_ADDR
// for i in tmp do
30290: LD_ADDR_VAR 0 1
30294: PUSH
30295: LD_VAR 0 2
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30332
// if GetLives ( i ) < 1000 then
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 256
30312: PUSH
30313: LD_INT 1000
30315: LESS
30316: IFFALSE 30330
// SetLives ( i , 1000 ) ;
30318: LD_VAR 0 1
30322: PPUSH
30323: LD_INT 1000
30325: PPUSH
30326: CALL_OW 234
30330: GO 30300
30332: POP
30333: POP
// until p > 20 ;
30334: LD_VAR 0 3
30338: PUSH
30339: LD_INT 20
30341: GREATER
30342: IFFALSE 30269
// end ;
30344: PPOPN 3
30346: END
// every 0 0$1 trigger StreamModeActive and sTime do
30347: LD_EXP 81
30351: PUSH
30352: LD_EXP 132
30356: AND
30357: IFFALSE 30392
30359: GO 30361
30361: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30362: LD_INT 28
30364: PPUSH
30365: LD_OWVAR 2
30369: PPUSH
30370: LD_INT 2
30372: PPUSH
30373: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30377: LD_INT 30
30379: PPUSH
30380: LD_OWVAR 2
30384: PPUSH
30385: LD_INT 2
30387: PPUSH
30388: CALL_OW 322
// end ;
30392: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30393: LD_EXP 81
30397: PUSH
30398: LD_EXP 133
30402: AND
30403: IFFALSE 30524
30405: GO 30407
30407: DISABLE
30408: LD_INT 0
30410: PPUSH
30411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30412: LD_ADDR_VAR 0 2
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_OWVAR 2
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 21
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 23
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: PPUSH
30461: CALL_OW 69
30465: ST_TO_ADDR
// if not tmp then
30466: LD_VAR 0 2
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30524
// for i in tmp do
30475: LD_ADDR_VAR 0 1
30479: PUSH
30480: LD_VAR 0 2
30484: PUSH
30485: FOR_IN
30486: IFFALSE 30522
// begin if Crawls ( i ) then
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL_OW 318
30497: IFFALSE 30508
// ComWalk ( i ) ;
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 138
// SetClass ( i , 2 ) ;
30508: LD_VAR 0 1
30512: PPUSH
30513: LD_INT 2
30515: PPUSH
30516: CALL_OW 336
// end ;
30520: GO 30485
30522: POP
30523: POP
// end ;
30524: PPOPN 2
30526: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30527: LD_EXP 81
30531: PUSH
30532: LD_EXP 134
30536: AND
30537: IFFALSE 30825
30539: GO 30541
30541: DISABLE
30542: LD_INT 0
30544: PPUSH
30545: PPUSH
30546: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30547: LD_OWVAR 2
30551: PPUSH
30552: LD_INT 9
30554: PPUSH
30555: LD_INT 1
30557: PPUSH
30558: LD_INT 1
30560: PPUSH
30561: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30565: LD_INT 9
30567: PPUSH
30568: LD_OWVAR 2
30572: PPUSH
30573: CALL_OW 343
// uc_side := 9 ;
30577: LD_ADDR_OWVAR 20
30581: PUSH
30582: LD_INT 9
30584: ST_TO_ADDR
// uc_nation := 2 ;
30585: LD_ADDR_OWVAR 21
30589: PUSH
30590: LD_INT 2
30592: ST_TO_ADDR
// hc_name := Dark Warrior ;
30593: LD_ADDR_OWVAR 26
30597: PUSH
30598: LD_STRING Dark Warrior
30600: ST_TO_ADDR
// hc_gallery :=  ;
30601: LD_ADDR_OWVAR 33
30605: PUSH
30606: LD_STRING 
30608: ST_TO_ADDR
// hc_noskilllimit := true ;
30609: LD_ADDR_OWVAR 76
30613: PUSH
30614: LD_INT 1
30616: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30617: LD_ADDR_OWVAR 31
30621: PUSH
30622: LD_INT 30
30624: PUSH
30625: LD_INT 30
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 30
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
// un := CreateHuman ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: CALL_OW 44
30649: ST_TO_ADDR
// hc_noskilllimit := false ;
30650: LD_ADDR_OWVAR 76
30654: PUSH
30655: LD_INT 0
30657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30658: LD_VAR 0 3
30662: PPUSH
30663: LD_INT 1
30665: PPUSH
30666: CALL_OW 51
// ToLua ( playRanger() ) ;
30670: LD_STRING playRanger()
30672: PPUSH
30673: CALL_OW 559
// p := 0 ;
30677: LD_ADDR_VAR 0 2
30681: PUSH
30682: LD_INT 0
30684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30685: LD_INT 35
30687: PPUSH
30688: CALL_OW 67
// p := p + 1 ;
30692: LD_ADDR_VAR 0 2
30696: PUSH
30697: LD_VAR 0 2
30701: PUSH
30702: LD_INT 1
30704: PLUS
30705: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30706: LD_VAR 0 3
30710: PPUSH
30711: CALL_OW 256
30715: PUSH
30716: LD_INT 1000
30718: LESS
30719: IFFALSE 30733
// SetLives ( un , 1000 ) ;
30721: LD_VAR 0 3
30725: PPUSH
30726: LD_INT 1000
30728: PPUSH
30729: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30733: LD_VAR 0 3
30737: PPUSH
30738: LD_INT 81
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 91
30752: PUSH
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 30
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: PPUSH
30775: LD_VAR 0 3
30779: PPUSH
30780: CALL_OW 74
30784: PPUSH
30785: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30789: LD_VAR 0 2
30793: PUSH
30794: LD_INT 80
30796: GREATER
30797: PUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: CALL_OW 301
30807: OR
30808: IFFALSE 30685
// if un then
30810: LD_VAR 0 3
30814: IFFALSE 30825
// RemoveUnit ( un ) ;
30816: LD_VAR 0 3
30820: PPUSH
30821: CALL_OW 64
// end ;
30825: PPOPN 3
30827: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30828: LD_EXP 135
30832: IFFALSE 30948
30834: GO 30836
30836: DISABLE
30837: LD_INT 0
30839: PPUSH
30840: PPUSH
30841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30842: LD_ADDR_VAR 0 2
30846: PUSH
30847: LD_INT 81
30849: PUSH
30850: LD_OWVAR 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 21
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PPUSH
30873: CALL_OW 69
30877: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30878: LD_STRING playComputer()
30880: PPUSH
30881: CALL_OW 559
// if not tmp then
30885: LD_VAR 0 2
30889: NOT
30890: IFFALSE 30894
// exit ;
30892: GO 30948
// for i in tmp do
30894: LD_ADDR_VAR 0 1
30898: PUSH
30899: LD_VAR 0 2
30903: PUSH
30904: FOR_IN
30905: IFFALSE 30946
// for j := 1 to 4 do
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: DOUBLE
30913: LD_INT 1
30915: DEC
30916: ST_TO_ADDR
30917: LD_INT 4
30919: PUSH
30920: FOR_TO
30921: IFFALSE 30942
// SetSkill ( i , j , 10 ) ;
30923: LD_VAR 0 1
30927: PPUSH
30928: LD_VAR 0 3
30932: PPUSH
30933: LD_INT 10
30935: PPUSH
30936: CALL_OW 237
30940: GO 30920
30942: POP
30943: POP
30944: GO 30904
30946: POP
30947: POP
// end ;
30948: PPOPN 3
30950: END
// every 0 0$1 trigger s30 do var i , tmp ;
30951: LD_EXP 136
30955: IFFALSE 31024
30957: GO 30959
30959: DISABLE
30960: LD_INT 0
30962: PPUSH
30963: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30964: LD_ADDR_VAR 0 2
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_OWVAR 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PPUSH
30981: CALL_OW 69
30985: ST_TO_ADDR
// if not tmp then
30986: LD_VAR 0 2
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 31024
// for i in tmp do
30995: LD_ADDR_VAR 0 1
30999: PUSH
31000: LD_VAR 0 2
31004: PUSH
31005: FOR_IN
31006: IFFALSE 31022
// SetLives ( i , 300 ) ;
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_INT 300
31015: PPUSH
31016: CALL_OW 234
31020: GO 31005
31022: POP
31023: POP
// end ;
31024: PPOPN 2
31026: END
// every 0 0$1 trigger s60 do var i , tmp ;
31027: LD_EXP 137
31031: IFFALSE 31100
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_INT 22
31047: PUSH
31048: LD_OWVAR 2
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: ST_TO_ADDR
// if not tmp then
31062: LD_VAR 0 2
31066: NOT
31067: IFFALSE 31071
// exit ;
31069: GO 31100
// for i in tmp do
31071: LD_ADDR_VAR 0 1
31075: PUSH
31076: LD_VAR 0 2
31080: PUSH
31081: FOR_IN
31082: IFFALSE 31098
// SetLives ( i , 600 ) ;
31084: LD_VAR 0 1
31088: PPUSH
31089: LD_INT 600
31091: PPUSH
31092: CALL_OW 234
31096: GO 31081
31098: POP
31099: POP
// end ;
31100: PPOPN 2
31102: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31103: LD_INT 0
31105: PPUSH
// case cmd of 301 :
31106: LD_VAR 0 1
31110: PUSH
31111: LD_INT 301
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31151
31119: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31120: LD_VAR 0 6
31124: PPUSH
31125: LD_VAR 0 7
31129: PPUSH
31130: LD_VAR 0 8
31134: PPUSH
31135: LD_VAR 0 4
31139: PPUSH
31140: LD_VAR 0 5
31144: PPUSH
31145: CALL 32352 0 5
31149: GO 31272
31151: LD_INT 302
31153: DOUBLE
31154: EQUAL
31155: IFTRUE 31159
31157: GO 31196
31159: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31160: LD_VAR 0 6
31164: PPUSH
31165: LD_VAR 0 7
31169: PPUSH
31170: LD_VAR 0 8
31174: PPUSH
31175: LD_VAR 0 9
31179: PPUSH
31180: LD_VAR 0 4
31184: PPUSH
31185: LD_VAR 0 5
31189: PPUSH
31190: CALL 32443 0 6
31194: GO 31272
31196: LD_INT 303
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31241
31204: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31205: LD_VAR 0 6
31209: PPUSH
31210: LD_VAR 0 7
31214: PPUSH
31215: LD_VAR 0 8
31219: PPUSH
31220: LD_VAR 0 9
31224: PPUSH
31225: LD_VAR 0 4
31229: PPUSH
31230: LD_VAR 0 5
31234: PPUSH
31235: CALL 31277 0 6
31239: GO 31272
31241: LD_INT 304
31243: DOUBLE
31244: EQUAL
31245: IFTRUE 31249
31247: GO 31271
31249: POP
// hHackTeleport ( unit , x , y ) ; end ;
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 4
31259: PPUSH
31260: LD_VAR 0 5
31264: PPUSH
31265: CALL 33036 0 3
31269: GO 31272
31271: POP
// end ;
31272: LD_VAR 0 12
31276: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31281: LD_VAR 0 1
31285: PUSH
31286: LD_INT 1
31288: LESS
31289: PUSH
31290: LD_VAR 0 1
31294: PUSH
31295: LD_INT 3
31297: GREATER
31298: OR
31299: PUSH
31300: LD_VAR 0 5
31304: PPUSH
31305: LD_VAR 0 6
31309: PPUSH
31310: CALL_OW 428
31314: OR
31315: IFFALSE 31319
// exit ;
31317: GO 32039
// uc_side := your_side ;
31319: LD_ADDR_OWVAR 20
31323: PUSH
31324: LD_OWVAR 2
31328: ST_TO_ADDR
// uc_nation := nation ;
31329: LD_ADDR_OWVAR 21
31333: PUSH
31334: LD_VAR 0 1
31338: ST_TO_ADDR
// bc_level = 1 ;
31339: LD_ADDR_OWVAR 43
31343: PUSH
31344: LD_INT 1
31346: ST_TO_ADDR
// case btype of 1 :
31347: LD_VAR 0 2
31351: PUSH
31352: LD_INT 1
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31371
31360: POP
// bc_type := b_depot ; 2 :
31361: LD_ADDR_OWVAR 42
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
31369: GO 31983
31371: LD_INT 2
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31390
31379: POP
// bc_type := b_warehouse ; 3 :
31380: LD_ADDR_OWVAR 42
31384: PUSH
31385: LD_INT 1
31387: ST_TO_ADDR
31388: GO 31983
31390: LD_INT 3
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31409
31398: POP
// bc_type := b_lab ; 4 .. 9 :
31399: LD_ADDR_OWVAR 42
31403: PUSH
31404: LD_INT 6
31406: ST_TO_ADDR
31407: GO 31983
31409: LD_INT 4
31411: DOUBLE
31412: GREATEREQUAL
31413: IFFALSE 31421
31415: LD_INT 9
31417: DOUBLE
31418: LESSEQUAL
31419: IFTRUE 31423
31421: GO 31475
31423: POP
// begin bc_type := b_lab_half ;
31424: LD_ADDR_OWVAR 42
31428: PUSH
31429: LD_INT 7
31431: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31432: LD_ADDR_OWVAR 44
31436: PUSH
31437: LD_INT 10
31439: PUSH
31440: LD_INT 11
31442: PUSH
31443: LD_INT 12
31445: PUSH
31446: LD_INT 15
31448: PUSH
31449: LD_INT 14
31451: PUSH
31452: LD_INT 13
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: PUSH
31463: LD_VAR 0 2
31467: PUSH
31468: LD_INT 3
31470: MINUS
31471: ARRAY
31472: ST_TO_ADDR
// end ; 10 .. 13 :
31473: GO 31983
31475: LD_INT 10
31477: DOUBLE
31478: GREATEREQUAL
31479: IFFALSE 31487
31481: LD_INT 13
31483: DOUBLE
31484: LESSEQUAL
31485: IFTRUE 31489
31487: GO 31566
31489: POP
// begin bc_type := b_lab_full ;
31490: LD_ADDR_OWVAR 42
31494: PUSH
31495: LD_INT 8
31497: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31498: LD_ADDR_OWVAR 44
31502: PUSH
31503: LD_INT 10
31505: PUSH
31506: LD_INT 12
31508: PUSH
31509: LD_INT 14
31511: PUSH
31512: LD_INT 13
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: PUSH
31521: LD_VAR 0 2
31525: PUSH
31526: LD_INT 9
31528: MINUS
31529: ARRAY
31530: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31531: LD_ADDR_OWVAR 45
31535: PUSH
31536: LD_INT 11
31538: PUSH
31539: LD_INT 15
31541: PUSH
31542: LD_INT 12
31544: PUSH
31545: LD_INT 15
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: PUSH
31554: LD_VAR 0 2
31558: PUSH
31559: LD_INT 9
31561: MINUS
31562: ARRAY
31563: ST_TO_ADDR
// end ; 14 :
31564: GO 31983
31566: LD_INT 14
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31585
31574: POP
// bc_type := b_workshop ; 15 :
31575: LD_ADDR_OWVAR 42
31579: PUSH
31580: LD_INT 2
31582: ST_TO_ADDR
31583: GO 31983
31585: LD_INT 15
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31604
31593: POP
// bc_type := b_factory ; 16 :
31594: LD_ADDR_OWVAR 42
31598: PUSH
31599: LD_INT 3
31601: ST_TO_ADDR
31602: GO 31983
31604: LD_INT 16
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31623
31612: POP
// bc_type := b_ext_gun ; 17 :
31613: LD_ADDR_OWVAR 42
31617: PUSH
31618: LD_INT 17
31620: ST_TO_ADDR
31621: GO 31983
31623: LD_INT 17
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31659
31631: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31632: LD_ADDR_OWVAR 42
31636: PUSH
31637: LD_INT 19
31639: PUSH
31640: LD_INT 23
31642: PUSH
31643: LD_INT 19
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: PUSH
31651: LD_VAR 0 1
31655: ARRAY
31656: ST_TO_ADDR
31657: GO 31983
31659: LD_INT 18
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31678
31667: POP
// bc_type := b_ext_radar ; 19 :
31668: LD_ADDR_OWVAR 42
31672: PUSH
31673: LD_INT 20
31675: ST_TO_ADDR
31676: GO 31983
31678: LD_INT 19
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31697
31686: POP
// bc_type := b_ext_radio ; 20 :
31687: LD_ADDR_OWVAR 42
31691: PUSH
31692: LD_INT 22
31694: ST_TO_ADDR
31695: GO 31983
31697: LD_INT 20
31699: DOUBLE
31700: EQUAL
31701: IFTRUE 31705
31703: GO 31716
31705: POP
// bc_type := b_ext_siberium ; 21 :
31706: LD_ADDR_OWVAR 42
31710: PUSH
31711: LD_INT 21
31713: ST_TO_ADDR
31714: GO 31983
31716: LD_INT 21
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// bc_type := b_ext_computer ; 22 :
31725: LD_ADDR_OWVAR 42
31729: PUSH
31730: LD_INT 24
31732: ST_TO_ADDR
31733: GO 31983
31735: LD_INT 22
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31754
31743: POP
// bc_type := b_ext_track ; 23 :
31744: LD_ADDR_OWVAR 42
31748: PUSH
31749: LD_INT 16
31751: ST_TO_ADDR
31752: GO 31983
31754: LD_INT 23
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// bc_type := b_ext_laser ; 24 :
31763: LD_ADDR_OWVAR 42
31767: PUSH
31768: LD_INT 25
31770: ST_TO_ADDR
31771: GO 31983
31773: LD_INT 24
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31792
31781: POP
// bc_type := b_control_tower ; 25 :
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 36
31789: ST_TO_ADDR
31790: GO 31983
31792: LD_INT 25
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31811
31800: POP
// bc_type := b_breastwork ; 26 :
31801: LD_ADDR_OWVAR 42
31805: PUSH
31806: LD_INT 31
31808: ST_TO_ADDR
31809: GO 31983
31811: LD_INT 26
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31830
31819: POP
// bc_type := b_bunker ; 27 :
31820: LD_ADDR_OWVAR 42
31824: PUSH
31825: LD_INT 32
31827: ST_TO_ADDR
31828: GO 31983
31830: LD_INT 27
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31849
31838: POP
// bc_type := b_turret ; 28 :
31839: LD_ADDR_OWVAR 42
31843: PUSH
31844: LD_INT 33
31846: ST_TO_ADDR
31847: GO 31983
31849: LD_INT 28
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 31868
31857: POP
// bc_type := b_armoury ; 29 :
31858: LD_ADDR_OWVAR 42
31862: PUSH
31863: LD_INT 4
31865: ST_TO_ADDR
31866: GO 31983
31868: LD_INT 29
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31887
31876: POP
// bc_type := b_barracks ; 30 :
31877: LD_ADDR_OWVAR 42
31881: PUSH
31882: LD_INT 5
31884: ST_TO_ADDR
31885: GO 31983
31887: LD_INT 30
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31906
31895: POP
// bc_type := b_solar_power ; 31 :
31896: LD_ADDR_OWVAR 42
31900: PUSH
31901: LD_INT 27
31903: ST_TO_ADDR
31904: GO 31983
31906: LD_INT 31
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31925
31914: POP
// bc_type := b_oil_power ; 32 :
31915: LD_ADDR_OWVAR 42
31919: PUSH
31920: LD_INT 26
31922: ST_TO_ADDR
31923: GO 31983
31925: LD_INT 32
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31944
31933: POP
// bc_type := b_siberite_power ; 33 :
31934: LD_ADDR_OWVAR 42
31938: PUSH
31939: LD_INT 28
31941: ST_TO_ADDR
31942: GO 31983
31944: LD_INT 33
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31963
31952: POP
// bc_type := b_oil_mine ; 34 :
31953: LD_ADDR_OWVAR 42
31957: PUSH
31958: LD_INT 29
31960: ST_TO_ADDR
31961: GO 31983
31963: LD_INT 34
31965: DOUBLE
31966: EQUAL
31967: IFTRUE 31971
31969: GO 31982
31971: POP
// bc_type := b_siberite_mine ; end ;
31972: LD_ADDR_OWVAR 42
31976: PUSH
31977: LD_INT 30
31979: ST_TO_ADDR
31980: GO 31983
31982: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31983: LD_ADDR_VAR 0 8
31987: PUSH
31988: LD_VAR 0 5
31992: PPUSH
31993: LD_VAR 0 6
31997: PPUSH
31998: LD_VAR 0 3
32002: PPUSH
32003: CALL_OW 47
32007: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32008: LD_OWVAR 42
32012: PUSH
32013: LD_INT 32
32015: PUSH
32016: LD_INT 33
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: IN
32023: IFFALSE 32039
// PlaceWeaponTurret ( b , weapon ) ;
32025: LD_VAR 0 8
32029: PPUSH
32030: LD_VAR 0 4
32034: PPUSH
32035: CALL_OW 431
// end ;
32039: LD_VAR 0 7
32043: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32050: LD_ADDR_VAR 0 4
32054: PUSH
32055: LD_INT 22
32057: PUSH
32058: LD_OWVAR 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 30
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 30
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 69
32103: ST_TO_ADDR
// if not tmp then
32104: LD_VAR 0 4
32108: NOT
32109: IFFALSE 32113
// exit ;
32111: GO 32172
// for i in tmp do
32113: LD_ADDR_VAR 0 2
32117: PUSH
32118: LD_VAR 0 4
32122: PUSH
32123: FOR_IN
32124: IFFALSE 32170
// for j = 1 to 3 do
32126: LD_ADDR_VAR 0 3
32130: PUSH
32131: DOUBLE
32132: LD_INT 1
32134: DEC
32135: ST_TO_ADDR
32136: LD_INT 3
32138: PUSH
32139: FOR_TO
32140: IFFALSE 32166
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32142: LD_VAR 0 2
32146: PPUSH
32147: CALL_OW 274
32151: PPUSH
32152: LD_VAR 0 3
32156: PPUSH
32157: LD_INT 99999
32159: PPUSH
32160: CALL_OW 277
32164: GO 32139
32166: POP
32167: POP
32168: GO 32123
32170: POP
32171: POP
// end ;
32172: LD_VAR 0 1
32176: RET
// export function hHackSetLevel10 ; var i , j ; begin
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
32181: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32182: LD_ADDR_VAR 0 2
32186: PUSH
32187: LD_INT 21
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PPUSH
32197: CALL_OW 69
32201: PUSH
32202: FOR_IN
32203: IFFALSE 32255
// if IsSelected ( i ) then
32205: LD_VAR 0 2
32209: PPUSH
32210: CALL_OW 306
32214: IFFALSE 32253
// begin for j := 1 to 4 do
32216: LD_ADDR_VAR 0 3
32220: PUSH
32221: DOUBLE
32222: LD_INT 1
32224: DEC
32225: ST_TO_ADDR
32226: LD_INT 4
32228: PUSH
32229: FOR_TO
32230: IFFALSE 32251
// SetSkill ( i , j , 10 ) ;
32232: LD_VAR 0 2
32236: PPUSH
32237: LD_VAR 0 3
32241: PPUSH
32242: LD_INT 10
32244: PPUSH
32245: CALL_OW 237
32249: GO 32229
32251: POP
32252: POP
// end ;
32253: GO 32202
32255: POP
32256: POP
// end ;
32257: LD_VAR 0 1
32261: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
32266: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32267: LD_ADDR_VAR 0 2
32271: PUSH
32272: LD_INT 22
32274: PUSH
32275: LD_OWVAR 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 21
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PPUSH
32298: CALL_OW 69
32302: PUSH
32303: FOR_IN
32304: IFFALSE 32345
// begin for j := 1 to 4 do
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: DOUBLE
32312: LD_INT 1
32314: DEC
32315: ST_TO_ADDR
32316: LD_INT 4
32318: PUSH
32319: FOR_TO
32320: IFFALSE 32341
// SetSkill ( i , j , 10 ) ;
32322: LD_VAR 0 2
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: LD_INT 10
32334: PPUSH
32335: CALL_OW 237
32339: GO 32319
32341: POP
32342: POP
// end ;
32343: GO 32303
32345: POP
32346: POP
// end ;
32347: LD_VAR 0 1
32351: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32352: LD_INT 0
32354: PPUSH
// uc_side := your_side ;
32355: LD_ADDR_OWVAR 20
32359: PUSH
32360: LD_OWVAR 2
32364: ST_TO_ADDR
// uc_nation := nation ;
32365: LD_ADDR_OWVAR 21
32369: PUSH
32370: LD_VAR 0 1
32374: ST_TO_ADDR
// InitHc ;
32375: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32379: LD_INT 0
32381: PPUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: LD_VAR 0 3
32391: PPUSH
32392: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32396: LD_VAR 0 4
32400: PPUSH
32401: LD_VAR 0 5
32405: PPUSH
32406: CALL_OW 428
32410: PUSH
32411: LD_INT 0
32413: EQUAL
32414: IFFALSE 32438
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32416: CALL_OW 44
32420: PPUSH
32421: LD_VAR 0 4
32425: PPUSH
32426: LD_VAR 0 5
32430: PPUSH
32431: LD_INT 1
32433: PPUSH
32434: CALL_OW 48
// end ;
32438: LD_VAR 0 6
32442: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32443: LD_INT 0
32445: PPUSH
32446: PPUSH
// uc_side := your_side ;
32447: LD_ADDR_OWVAR 20
32451: PUSH
32452: LD_OWVAR 2
32456: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32457: LD_VAR 0 1
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 3
32470: PUSH
32471: LD_INT 4
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: IN
32484: IFFALSE 32496
// uc_nation := nation_american else
32486: LD_ADDR_OWVAR 21
32490: PUSH
32491: LD_INT 1
32493: ST_TO_ADDR
32494: GO 32539
// if chassis in [ 11 , 12 , 13 , 14 ] then
32496: LD_VAR 0 1
32500: PUSH
32501: LD_INT 11
32503: PUSH
32504: LD_INT 12
32506: PUSH
32507: LD_INT 13
32509: PUSH
32510: LD_INT 14
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: IN
32519: IFFALSE 32531
// uc_nation := nation_arabian else
32521: LD_ADDR_OWVAR 21
32525: PUSH
32526: LD_INT 2
32528: ST_TO_ADDR
32529: GO 32539
// uc_nation := nation_russian ;
32531: LD_ADDR_OWVAR 21
32535: PUSH
32536: LD_INT 3
32538: ST_TO_ADDR
// vc_chassis := chassis ;
32539: LD_ADDR_OWVAR 37
32543: PUSH
32544: LD_VAR 0 1
32548: ST_TO_ADDR
// vc_engine := engine ;
32549: LD_ADDR_OWVAR 39
32553: PUSH
32554: LD_VAR 0 2
32558: ST_TO_ADDR
// vc_control := control ;
32559: LD_ADDR_OWVAR 38
32563: PUSH
32564: LD_VAR 0 3
32568: ST_TO_ADDR
// vc_weapon := weapon ;
32569: LD_ADDR_OWVAR 40
32573: PUSH
32574: LD_VAR 0 4
32578: ST_TO_ADDR
// un := CreateVehicle ;
32579: LD_ADDR_VAR 0 8
32583: PUSH
32584: CALL_OW 45
32588: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32589: LD_VAR 0 8
32593: PPUSH
32594: LD_INT 0
32596: PPUSH
32597: LD_INT 5
32599: PPUSH
32600: CALL_OW 12
32604: PPUSH
32605: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32609: LD_VAR 0 8
32613: PPUSH
32614: LD_VAR 0 5
32618: PPUSH
32619: LD_VAR 0 6
32623: PPUSH
32624: LD_INT 1
32626: PPUSH
32627: CALL_OW 48
// end ;
32631: LD_VAR 0 7
32635: RET
// export hInvincible ; every 1 do
32636: GO 32638
32638: DISABLE
// hInvincible := [ ] ;
32639: LD_ADDR_EXP 138
32643: PUSH
32644: EMPTY
32645: ST_TO_ADDR
32646: END
// every 10 do var i ;
32647: GO 32649
32649: DISABLE
32650: LD_INT 0
32652: PPUSH
// begin enable ;
32653: ENABLE
// if not hInvincible then
32654: LD_EXP 138
32658: NOT
32659: IFFALSE 32663
// exit ;
32661: GO 32707
// for i in hInvincible do
32663: LD_ADDR_VAR 0 1
32667: PUSH
32668: LD_EXP 138
32672: PUSH
32673: FOR_IN
32674: IFFALSE 32705
// if GetLives ( i ) < 1000 then
32676: LD_VAR 0 1
32680: PPUSH
32681: CALL_OW 256
32685: PUSH
32686: LD_INT 1000
32688: LESS
32689: IFFALSE 32703
// SetLives ( i , 1000 ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_INT 1000
32698: PPUSH
32699: CALL_OW 234
32703: GO 32673
32705: POP
32706: POP
// end ;
32707: PPOPN 1
32709: END
// export function hHackInvincible ; var i ; begin
32710: LD_INT 0
32712: PPUSH
32713: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32714: LD_ADDR_VAR 0 2
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 21
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 21
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: PPUSH
32747: CALL_OW 69
32751: PUSH
32752: FOR_IN
32753: IFFALSE 32814
// if IsSelected ( i ) then
32755: LD_VAR 0 2
32759: PPUSH
32760: CALL_OW 306
32764: IFFALSE 32812
// begin if i in hInvincible then
32766: LD_VAR 0 2
32770: PUSH
32771: LD_EXP 138
32775: IN
32776: IFFALSE 32796
// hInvincible := hInvincible diff i else
32778: LD_ADDR_EXP 138
32782: PUSH
32783: LD_EXP 138
32787: PUSH
32788: LD_VAR 0 2
32792: DIFF
32793: ST_TO_ADDR
32794: GO 32812
// hInvincible := hInvincible union i ;
32796: LD_ADDR_EXP 138
32800: PUSH
32801: LD_EXP 138
32805: PUSH
32806: LD_VAR 0 2
32810: UNION
32811: ST_TO_ADDR
// end ;
32812: GO 32752
32814: POP
32815: POP
// end ;
32816: LD_VAR 0 1
32820: RET
// export function hHackInvisible ; var i , j ; begin
32821: LD_INT 0
32823: PPUSH
32824: PPUSH
32825: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32826: LD_ADDR_VAR 0 2
32830: PUSH
32831: LD_INT 21
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PPUSH
32841: CALL_OW 69
32845: PUSH
32846: FOR_IN
32847: IFFALSE 32871
// if IsSelected ( i ) then
32849: LD_VAR 0 2
32853: PPUSH
32854: CALL_OW 306
32858: IFFALSE 32869
// ComForceInvisible ( i ) ;
32860: LD_VAR 0 2
32864: PPUSH
32865: CALL_OW 496
32869: GO 32846
32871: POP
32872: POP
// end ;
32873: LD_VAR 0 1
32877: RET
// export function hHackChangeYourSide ; begin
32878: LD_INT 0
32880: PPUSH
// if your_side = 8 then
32881: LD_OWVAR 2
32885: PUSH
32886: LD_INT 8
32888: EQUAL
32889: IFFALSE 32901
// your_side := 0 else
32891: LD_ADDR_OWVAR 2
32895: PUSH
32896: LD_INT 0
32898: ST_TO_ADDR
32899: GO 32915
// your_side := your_side + 1 ;
32901: LD_ADDR_OWVAR 2
32905: PUSH
32906: LD_OWVAR 2
32910: PUSH
32911: LD_INT 1
32913: PLUS
32914: ST_TO_ADDR
// end ;
32915: LD_VAR 0 1
32919: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32920: LD_INT 0
32922: PPUSH
32923: PPUSH
32924: PPUSH
// for i in all_units do
32925: LD_ADDR_VAR 0 2
32929: PUSH
32930: LD_OWVAR 3
32934: PUSH
32935: FOR_IN
32936: IFFALSE 33014
// if IsSelected ( i ) then
32938: LD_VAR 0 2
32942: PPUSH
32943: CALL_OW 306
32947: IFFALSE 33012
// begin j := GetSide ( i ) ;
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL_OW 255
32963: ST_TO_ADDR
// if j = 8 then
32964: LD_VAR 0 3
32968: PUSH
32969: LD_INT 8
32971: EQUAL
32972: IFFALSE 32984
// j := 0 else
32974: LD_ADDR_VAR 0 3
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
32982: GO 32998
// j := j + 1 ;
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_VAR 0 3
32993: PUSH
32994: LD_INT 1
32996: PLUS
32997: ST_TO_ADDR
// SetSide ( i , j ) ;
32998: LD_VAR 0 2
33002: PPUSH
33003: LD_VAR 0 3
33007: PPUSH
33008: CALL_OW 235
// end ;
33012: GO 32935
33014: POP
33015: POP
// end ;
33016: LD_VAR 0 1
33020: RET
// export function hHackFog ; begin
33021: LD_INT 0
33023: PPUSH
// FogOff ( true ) ;
33024: LD_INT 1
33026: PPUSH
33027: CALL_OW 344
// end ;
33031: LD_VAR 0 1
33035: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33036: LD_INT 0
33038: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33039: LD_VAR 0 1
33043: PPUSH
33044: LD_VAR 0 2
33048: PPUSH
33049: LD_VAR 0 3
33053: PPUSH
33054: LD_INT 1
33056: PPUSH
33057: LD_INT 1
33059: PPUSH
33060: CALL_OW 483
// CenterOnXY ( x , y ) ;
33064: LD_VAR 0 2
33068: PPUSH
33069: LD_VAR 0 3
33073: PPUSH
33074: CALL_OW 84
// end ; end_of_file
33078: LD_VAR 0 4
33082: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33089: LD_VAR 0 1
33093: PPUSH
33094: CALL_OW 264
33098: PUSH
33099: LD_EXP 66
33103: EQUAL
33104: IFFALSE 33176
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33106: LD_INT 68
33108: PPUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 255
33118: PPUSH
33119: CALL_OW 321
33123: PUSH
33124: LD_INT 2
33126: EQUAL
33127: IFFALSE 33139
// eff := 70 else
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: LD_INT 70
33136: ST_TO_ADDR
33137: GO 33147
// eff := 30 ;
33139: LD_ADDR_VAR 0 4
33143: PUSH
33144: LD_INT 30
33146: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 250
33156: PPUSH
33157: LD_VAR 0 1
33161: PPUSH
33162: CALL_OW 251
33166: PPUSH
33167: LD_VAR 0 4
33171: PPUSH
33172: CALL_OW 495
// end ; end ;
33176: LD_VAR 0 2
33180: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33181: LD_INT 0
33183: PPUSH
// end ;
33184: LD_VAR 0 4
33188: RET
// export function SOS_Command ( cmd ) ; begin
33189: LD_INT 0
33191: PPUSH
// end ;
33192: LD_VAR 0 2
33196: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33197: LD_INT 0
33199: PPUSH
// end ;
33200: LD_VAR 0 6
33204: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33205: LD_INT 0
33207: PPUSH
33208: PPUSH
// if not vehicle or not factory then
33209: LD_VAR 0 1
33213: NOT
33214: PUSH
33215: LD_VAR 0 2
33219: NOT
33220: OR
33221: IFFALSE 33225
// exit ;
33223: GO 33456
// if factoryWaypoints >= factory then
33225: LD_EXP 139
33229: PUSH
33230: LD_VAR 0 2
33234: GREATEREQUAL
33235: IFFALSE 33456
// if factoryWaypoints [ factory ] then
33237: LD_EXP 139
33241: PUSH
33242: LD_VAR 0 2
33246: ARRAY
33247: IFFALSE 33456
// begin if GetControl ( vehicle ) = control_manual then
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 263
33258: PUSH
33259: LD_INT 1
33261: EQUAL
33262: IFFALSE 33343
// begin driver := IsDrivenBy ( vehicle ) ;
33264: LD_ADDR_VAR 0 4
33268: PUSH
33269: LD_VAR 0 1
33273: PPUSH
33274: CALL_OW 311
33278: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33279: LD_VAR 0 4
33283: PPUSH
33284: LD_EXP 139
33288: PUSH
33289: LD_VAR 0 2
33293: ARRAY
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: PPUSH
33299: LD_EXP 139
33303: PUSH
33304: LD_VAR 0 2
33308: ARRAY
33309: PUSH
33310: LD_INT 2
33312: ARRAY
33313: PPUSH
33314: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33318: LD_VAR 0 4
33322: PPUSH
33323: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33327: LD_VAR 0 4
33331: PPUSH
33332: LD_VAR 0 2
33336: PPUSH
33337: CALL_OW 180
// end else
33341: GO 33456
// if GetControl ( vehicle ) = control_remote then
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 263
33352: PUSH
33353: LD_INT 2
33355: EQUAL
33356: IFFALSE 33417
// begin wait ( 0 0$2 ) ;
33358: LD_INT 70
33360: PPUSH
33361: CALL_OW 67
// if Connect ( vehicle ) then
33365: LD_VAR 0 1
33369: PPUSH
33370: CALL 45680 0 1
33374: IFFALSE 33415
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33376: LD_VAR 0 1
33380: PPUSH
33381: LD_EXP 139
33385: PUSH
33386: LD_VAR 0 2
33390: ARRAY
33391: PUSH
33392: LD_INT 1
33394: ARRAY
33395: PPUSH
33396: LD_EXP 139
33400: PUSH
33401: LD_VAR 0 2
33405: ARRAY
33406: PUSH
33407: LD_INT 2
33409: ARRAY
33410: PPUSH
33411: CALL_OW 171
// end else
33415: GO 33456
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33417: LD_VAR 0 1
33421: PPUSH
33422: LD_EXP 139
33426: PUSH
33427: LD_VAR 0 2
33431: ARRAY
33432: PUSH
33433: LD_INT 1
33435: ARRAY
33436: PPUSH
33437: LD_EXP 139
33441: PUSH
33442: LD_VAR 0 2
33446: ARRAY
33447: PUSH
33448: LD_INT 2
33450: ARRAY
33451: PPUSH
33452: CALL_OW 171
// end ; end ;
33456: LD_VAR 0 3
33460: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33461: LD_INT 0
33463: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33464: LD_VAR 0 1
33468: PUSH
33469: LD_INT 250
33471: EQUAL
33472: PUSH
33473: LD_VAR 0 2
33477: PPUSH
33478: CALL_OW 264
33482: PUSH
33483: LD_EXP 69
33487: EQUAL
33488: AND
33489: IFFALSE 33510
// MinerPlaceMine ( unit , x , y ) ;
33491: LD_VAR 0 2
33495: PPUSH
33496: LD_VAR 0 4
33500: PPUSH
33501: LD_VAR 0 5
33505: PPUSH
33506: CALL 36238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33510: LD_VAR 0 1
33514: PUSH
33515: LD_INT 251
33517: EQUAL
33518: PUSH
33519: LD_VAR 0 2
33523: PPUSH
33524: CALL_OW 264
33528: PUSH
33529: LD_EXP 69
33533: EQUAL
33534: AND
33535: IFFALSE 33556
// MinerDetonateMine ( unit , x , y ) ;
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_VAR 0 4
33546: PPUSH
33547: LD_VAR 0 5
33551: PPUSH
33552: CALL 36515 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33556: LD_VAR 0 1
33560: PUSH
33561: LD_INT 252
33563: EQUAL
33564: PUSH
33565: LD_VAR 0 2
33569: PPUSH
33570: CALL_OW 264
33574: PUSH
33575: LD_EXP 69
33579: EQUAL
33580: AND
33581: IFFALSE 33602
// MinerCreateMinefield ( unit , x , y ) ;
33583: LD_VAR 0 2
33587: PPUSH
33588: LD_VAR 0 4
33592: PPUSH
33593: LD_VAR 0 5
33597: PPUSH
33598: CALL 36932 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33602: LD_VAR 0 1
33606: PUSH
33607: LD_INT 253
33609: EQUAL
33610: PUSH
33611: LD_VAR 0 2
33615: PPUSH
33616: CALL_OW 257
33620: PUSH
33621: LD_INT 5
33623: EQUAL
33624: AND
33625: IFFALSE 33646
// ComBinocular ( unit , x , y ) ;
33627: LD_VAR 0 2
33631: PPUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: LD_VAR 0 5
33641: PPUSH
33642: CALL 37303 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33646: LD_VAR 0 1
33650: PUSH
33651: LD_INT 254
33653: EQUAL
33654: PUSH
33655: LD_VAR 0 2
33659: PPUSH
33660: CALL_OW 264
33664: PUSH
33665: LD_EXP 64
33669: EQUAL
33670: AND
33671: PUSH
33672: LD_VAR 0 3
33676: PPUSH
33677: CALL_OW 263
33681: PUSH
33682: LD_INT 3
33684: EQUAL
33685: AND
33686: IFFALSE 33702
// HackDestroyVehicle ( unit , selectedUnit ) ;
33688: LD_VAR 0 2
33692: PPUSH
33693: LD_VAR 0 3
33697: PPUSH
33698: CALL 35598 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33702: LD_VAR 0 1
33706: PUSH
33707: LD_INT 255
33709: EQUAL
33710: PUSH
33711: LD_VAR 0 2
33715: PPUSH
33716: CALL_OW 264
33720: PUSH
33721: LD_INT 14
33723: PUSH
33724: LD_INT 53
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: IN
33731: AND
33732: PUSH
33733: LD_VAR 0 4
33737: PPUSH
33738: LD_VAR 0 5
33742: PPUSH
33743: CALL_OW 488
33747: AND
33748: IFFALSE 33772
// CutTreeXYR ( unit , x , y , 12 ) ;
33750: LD_VAR 0 2
33754: PPUSH
33755: LD_VAR 0 4
33759: PPUSH
33760: LD_VAR 0 5
33764: PPUSH
33765: LD_INT 12
33767: PPUSH
33768: CALL 34164 0 4
// if cmd = 256 then
33772: LD_VAR 0 1
33776: PUSH
33777: LD_INT 256
33779: EQUAL
33780: IFFALSE 33801
// SetFactoryWaypoint ( unit , x , y ) ;
33782: LD_VAR 0 2
33786: PPUSH
33787: LD_VAR 0 4
33791: PPUSH
33792: LD_VAR 0 5
33796: PPUSH
33797: CALL 33806 0 3
// end ;
33801: LD_VAR 0 6
33805: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33806: LD_INT 0
33808: PPUSH
33809: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33810: LD_VAR 0 1
33814: NOT
33815: PUSH
33816: LD_VAR 0 2
33820: PPUSH
33821: LD_VAR 0 3
33825: PPUSH
33826: CALL_OW 488
33830: NOT
33831: OR
33832: PUSH
33833: LD_VAR 0 1
33837: PPUSH
33838: CALL_OW 266
33842: PUSH
33843: LD_INT 3
33845: NONEQUAL
33846: PUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: CALL_OW 247
33856: PUSH
33857: LD_INT 1
33859: EQUAL
33860: NOT
33861: AND
33862: OR
33863: IFFALSE 33867
// exit ;
33865: GO 34016
// if GetType ( factory ) = unit_human then
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 247
33876: PUSH
33877: LD_INT 1
33879: EQUAL
33880: IFFALSE 33897
// factory := IsInUnit ( factory ) ;
33882: LD_ADDR_VAR 0 1
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 310
33896: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33897: LD_VAR 0 1
33901: PPUSH
33902: CALL_OW 266
33906: PUSH
33907: LD_INT 3
33909: NONEQUAL
33910: IFFALSE 33914
// exit ;
33912: GO 34016
// if HexInfo ( x , y ) = factory then
33914: LD_VAR 0 2
33918: PPUSH
33919: LD_VAR 0 3
33923: PPUSH
33924: CALL_OW 428
33928: PUSH
33929: LD_VAR 0 1
33933: EQUAL
33934: IFFALSE 33961
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33936: LD_ADDR_EXP 139
33940: PUSH
33941: LD_EXP 139
33945: PPUSH
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_INT 0
33953: PPUSH
33954: CALL_OW 1
33958: ST_TO_ADDR
33959: GO 34012
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33961: LD_ADDR_EXP 139
33965: PUSH
33966: LD_EXP 139
33970: PPUSH
33971: LD_VAR 0 1
33975: PPUSH
33976: LD_VAR 0 1
33980: PPUSH
33981: CALL_OW 255
33985: PUSH
33986: LD_VAR 0 1
33990: PUSH
33991: LD_VAR 0 2
33995: PUSH
33996: LD_VAR 0 3
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: PPUSH
34007: CALL_OW 1
34011: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34012: CALL 34021 0 0
// end ;
34016: LD_VAR 0 4
34020: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34021: LD_INT 0
34023: PPUSH
34024: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34025: LD_STRING resetFactoryWaypoint();
34027: PPUSH
34028: CALL_OW 559
// if factoryWaypoints then
34032: LD_EXP 139
34036: IFFALSE 34159
// begin for i := 1 to factoryWaypoints do
34038: LD_ADDR_VAR 0 2
34042: PUSH
34043: DOUBLE
34044: LD_INT 1
34046: DEC
34047: ST_TO_ADDR
34048: LD_EXP 139
34052: PUSH
34053: FOR_TO
34054: IFFALSE 34157
// if factoryWaypoints [ i ] then
34056: LD_EXP 139
34060: PUSH
34061: LD_VAR 0 2
34065: ARRAY
34066: IFFALSE 34155
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34068: LD_STRING setFactoryWaypointXY(
34070: PUSH
34071: LD_EXP 139
34075: PUSH
34076: LD_VAR 0 2
34080: ARRAY
34081: PUSH
34082: LD_INT 1
34084: ARRAY
34085: STR
34086: PUSH
34087: LD_STRING ,
34089: STR
34090: PUSH
34091: LD_EXP 139
34095: PUSH
34096: LD_VAR 0 2
34100: ARRAY
34101: PUSH
34102: LD_INT 2
34104: ARRAY
34105: STR
34106: PUSH
34107: LD_STRING ,
34109: STR
34110: PUSH
34111: LD_EXP 139
34115: PUSH
34116: LD_VAR 0 2
34120: ARRAY
34121: PUSH
34122: LD_INT 3
34124: ARRAY
34125: STR
34126: PUSH
34127: LD_STRING ,
34129: STR
34130: PUSH
34131: LD_EXP 139
34135: PUSH
34136: LD_VAR 0 2
34140: ARRAY
34141: PUSH
34142: LD_INT 4
34144: ARRAY
34145: STR
34146: PUSH
34147: LD_STRING )
34149: STR
34150: PPUSH
34151: CALL_OW 559
34155: GO 34053
34157: POP
34158: POP
// end ; end ;
34159: LD_VAR 0 1
34163: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34164: LD_INT 0
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34175: LD_VAR 0 1
34179: NOT
34180: PUSH
34181: LD_VAR 0 2
34185: PPUSH
34186: LD_VAR 0 3
34190: PPUSH
34191: CALL_OW 488
34195: NOT
34196: OR
34197: PUSH
34198: LD_VAR 0 4
34202: NOT
34203: OR
34204: IFFALSE 34208
// exit ;
34206: GO 34548
// list := [ ] ;
34208: LD_ADDR_VAR 0 13
34212: PUSH
34213: EMPTY
34214: ST_TO_ADDR
// if x - r < 0 then
34215: LD_VAR 0 2
34219: PUSH
34220: LD_VAR 0 4
34224: MINUS
34225: PUSH
34226: LD_INT 0
34228: LESS
34229: IFFALSE 34241
// min_x := 0 else
34231: LD_ADDR_VAR 0 7
34235: PUSH
34236: LD_INT 0
34238: ST_TO_ADDR
34239: GO 34257
// min_x := x - r ;
34241: LD_ADDR_VAR 0 7
34245: PUSH
34246: LD_VAR 0 2
34250: PUSH
34251: LD_VAR 0 4
34255: MINUS
34256: ST_TO_ADDR
// if y - r < 0 then
34257: LD_VAR 0 3
34261: PUSH
34262: LD_VAR 0 4
34266: MINUS
34267: PUSH
34268: LD_INT 0
34270: LESS
34271: IFFALSE 34283
// min_y := 0 else
34273: LD_ADDR_VAR 0 8
34277: PUSH
34278: LD_INT 0
34280: ST_TO_ADDR
34281: GO 34299
// min_y := y - r ;
34283: LD_ADDR_VAR 0 8
34287: PUSH
34288: LD_VAR 0 3
34292: PUSH
34293: LD_VAR 0 4
34297: MINUS
34298: ST_TO_ADDR
// max_x := x + r ;
34299: LD_ADDR_VAR 0 9
34303: PUSH
34304: LD_VAR 0 2
34308: PUSH
34309: LD_VAR 0 4
34313: PLUS
34314: ST_TO_ADDR
// max_y := y + r ;
34315: LD_ADDR_VAR 0 10
34319: PUSH
34320: LD_VAR 0 3
34324: PUSH
34325: LD_VAR 0 4
34329: PLUS
34330: ST_TO_ADDR
// for _x = min_x to max_x do
34331: LD_ADDR_VAR 0 11
34335: PUSH
34336: DOUBLE
34337: LD_VAR 0 7
34341: DEC
34342: ST_TO_ADDR
34343: LD_VAR 0 9
34347: PUSH
34348: FOR_TO
34349: IFFALSE 34466
// for _y = min_y to max_y do
34351: LD_ADDR_VAR 0 12
34355: PUSH
34356: DOUBLE
34357: LD_VAR 0 8
34361: DEC
34362: ST_TO_ADDR
34363: LD_VAR 0 10
34367: PUSH
34368: FOR_TO
34369: IFFALSE 34462
// begin if not ValidHex ( _x , _y ) then
34371: LD_VAR 0 11
34375: PPUSH
34376: LD_VAR 0 12
34380: PPUSH
34381: CALL_OW 488
34385: NOT
34386: IFFALSE 34390
// continue ;
34388: GO 34368
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34390: LD_VAR 0 11
34394: PPUSH
34395: LD_VAR 0 12
34399: PPUSH
34400: CALL_OW 351
34404: PUSH
34405: LD_VAR 0 11
34409: PPUSH
34410: LD_VAR 0 12
34414: PPUSH
34415: CALL_OW 554
34419: AND
34420: IFFALSE 34460
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34422: LD_ADDR_VAR 0 13
34426: PUSH
34427: LD_VAR 0 13
34431: PPUSH
34432: LD_VAR 0 13
34436: PUSH
34437: LD_INT 1
34439: PLUS
34440: PPUSH
34441: LD_VAR 0 11
34445: PUSH
34446: LD_VAR 0 12
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 2
34459: ST_TO_ADDR
// end ;
34460: GO 34368
34462: POP
34463: POP
34464: GO 34348
34466: POP
34467: POP
// if not list then
34468: LD_VAR 0 13
34472: NOT
34473: IFFALSE 34477
// exit ;
34475: GO 34548
// for i in list do
34477: LD_ADDR_VAR 0 6
34481: PUSH
34482: LD_VAR 0 13
34486: PUSH
34487: FOR_IN
34488: IFFALSE 34546
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34490: LD_VAR 0 1
34494: PPUSH
34495: LD_STRING M
34497: PUSH
34498: LD_VAR 0 6
34502: PUSH
34503: LD_INT 1
34505: ARRAY
34506: PUSH
34507: LD_VAR 0 6
34511: PUSH
34512: LD_INT 2
34514: ARRAY
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: PUSH
34537: EMPTY
34538: LIST
34539: PPUSH
34540: CALL_OW 447
34544: GO 34487
34546: POP
34547: POP
// end ;
34548: LD_VAR 0 5
34552: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34553: LD_EXP 140
34557: NOT
34558: IFFALSE 34608
34560: GO 34562
34562: DISABLE
// begin initHack := true ;
34563: LD_ADDR_EXP 140
34567: PUSH
34568: LD_INT 1
34570: ST_TO_ADDR
// hackTanks := [ ] ;
34571: LD_ADDR_EXP 141
34575: PUSH
34576: EMPTY
34577: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34578: LD_ADDR_EXP 142
34582: PUSH
34583: EMPTY
34584: ST_TO_ADDR
// hackLimit := 3 ;
34585: LD_ADDR_EXP 143
34589: PUSH
34590: LD_INT 3
34592: ST_TO_ADDR
// hackDist := 12 ;
34593: LD_ADDR_EXP 144
34597: PUSH
34598: LD_INT 12
34600: ST_TO_ADDR
// hackCounter := [ ] ;
34601: LD_ADDR_EXP 145
34605: PUSH
34606: EMPTY
34607: ST_TO_ADDR
// end ;
34608: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34609: LD_EXP 140
34613: PUSH
34614: LD_INT 34
34616: PUSH
34617: LD_EXP 64
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PPUSH
34626: CALL_OW 69
34630: AND
34631: IFFALSE 34886
34633: GO 34635
34635: DISABLE
34636: LD_INT 0
34638: PPUSH
34639: PPUSH
// begin enable ;
34640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34641: LD_ADDR_VAR 0 1
34645: PUSH
34646: LD_INT 34
34648: PUSH
34649: LD_EXP 64
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 69
34662: PUSH
34663: FOR_IN
34664: IFFALSE 34884
// begin if not i in hackTanks then
34666: LD_VAR 0 1
34670: PUSH
34671: LD_EXP 141
34675: IN
34676: NOT
34677: IFFALSE 34760
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34679: LD_ADDR_EXP 141
34683: PUSH
34684: LD_EXP 141
34688: PPUSH
34689: LD_EXP 141
34693: PUSH
34694: LD_INT 1
34696: PLUS
34697: PPUSH
34698: LD_VAR 0 1
34702: PPUSH
34703: CALL_OW 1
34707: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34708: LD_ADDR_EXP 142
34712: PUSH
34713: LD_EXP 142
34717: PPUSH
34718: LD_EXP 142
34722: PUSH
34723: LD_INT 1
34725: PLUS
34726: PPUSH
34727: EMPTY
34728: PPUSH
34729: CALL_OW 1
34733: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34734: LD_ADDR_EXP 145
34738: PUSH
34739: LD_EXP 145
34743: PPUSH
34744: LD_EXP 145
34748: PUSH
34749: LD_INT 1
34751: PLUS
34752: PPUSH
34753: EMPTY
34754: PPUSH
34755: CALL_OW 1
34759: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34760: LD_VAR 0 1
34764: PPUSH
34765: CALL_OW 302
34769: NOT
34770: IFFALSE 34783
// begin HackUnlinkAll ( i ) ;
34772: LD_VAR 0 1
34776: PPUSH
34777: CALL 34889 0 1
// continue ;
34781: GO 34663
// end ; HackCheckCapturedStatus ( i ) ;
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL 35332 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34792: LD_ADDR_VAR 0 2
34796: PUSH
34797: LD_INT 81
34799: PUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 255
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 33
34816: PUSH
34817: LD_INT 3
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 91
34826: PUSH
34827: LD_VAR 0 1
34831: PUSH
34832: LD_EXP 144
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 50
34844: PUSH
34845: EMPTY
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: PPUSH
34854: CALL_OW 69
34858: ST_TO_ADDR
// if not tmp then
34859: LD_VAR 0 2
34863: NOT
34864: IFFALSE 34868
// continue ;
34866: GO 34663
// HackLink ( i , tmp ) ;
34868: LD_VAR 0 1
34872: PPUSH
34873: LD_VAR 0 2
34877: PPUSH
34878: CALL 35025 0 2
// end ;
34882: GO 34663
34884: POP
34885: POP
// end ;
34886: PPOPN 2
34888: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34889: LD_INT 0
34891: PPUSH
34892: PPUSH
34893: PPUSH
// if not hack in hackTanks then
34894: LD_VAR 0 1
34898: PUSH
34899: LD_EXP 141
34903: IN
34904: NOT
34905: IFFALSE 34909
// exit ;
34907: GO 35020
// index := GetElementIndex ( hackTanks , hack ) ;
34909: LD_ADDR_VAR 0 4
34913: PUSH
34914: LD_EXP 141
34918: PPUSH
34919: LD_VAR 0 1
34923: PPUSH
34924: CALL 42494 0 2
34928: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34929: LD_EXP 142
34933: PUSH
34934: LD_VAR 0 4
34938: ARRAY
34939: IFFALSE 35020
// begin for i in hackTanksCaptured [ index ] do
34941: LD_ADDR_VAR 0 3
34945: PUSH
34946: LD_EXP 142
34950: PUSH
34951: LD_VAR 0 4
34955: ARRAY
34956: PUSH
34957: FOR_IN
34958: IFFALSE 34984
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34960: LD_VAR 0 3
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: PPUSH
34969: LD_VAR 0 3
34973: PUSH
34974: LD_INT 2
34976: ARRAY
34977: PPUSH
34978: CALL_OW 235
34982: GO 34957
34984: POP
34985: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34986: LD_ADDR_EXP 142
34990: PUSH
34991: LD_EXP 142
34995: PPUSH
34996: LD_VAR 0 4
35000: PPUSH
35001: EMPTY
35002: PPUSH
35003: CALL_OW 1
35007: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35008: LD_VAR 0 1
35012: PPUSH
35013: LD_INT 0
35015: PPUSH
35016: CALL_OW 505
// end ; end ;
35020: LD_VAR 0 2
35024: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35025: LD_INT 0
35027: PPUSH
35028: PPUSH
35029: PPUSH
// if not hack in hackTanks or not vehicles then
35030: LD_VAR 0 1
35034: PUSH
35035: LD_EXP 141
35039: IN
35040: NOT
35041: PUSH
35042: LD_VAR 0 2
35046: NOT
35047: OR
35048: IFFALSE 35052
// exit ;
35050: GO 35327
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35052: LD_ADDR_VAR 0 2
35056: PUSH
35057: LD_VAR 0 1
35061: PPUSH
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_INT 1
35069: PPUSH
35070: LD_INT 1
35072: PPUSH
35073: CALL 43144 0 4
35077: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35078: LD_ADDR_VAR 0 5
35082: PUSH
35083: LD_EXP 141
35087: PPUSH
35088: LD_VAR 0 1
35092: PPUSH
35093: CALL 42494 0 2
35097: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35098: LD_EXP 142
35102: PUSH
35103: LD_VAR 0 5
35107: ARRAY
35108: PUSH
35109: LD_EXP 143
35113: LESS
35114: IFFALSE 35303
// begin for i := 1 to vehicles do
35116: LD_ADDR_VAR 0 4
35120: PUSH
35121: DOUBLE
35122: LD_INT 1
35124: DEC
35125: ST_TO_ADDR
35126: LD_VAR 0 2
35130: PUSH
35131: FOR_TO
35132: IFFALSE 35301
// begin if hackTanksCaptured [ index ] = hackLimit then
35134: LD_EXP 142
35138: PUSH
35139: LD_VAR 0 5
35143: ARRAY
35144: PUSH
35145: LD_EXP 143
35149: EQUAL
35150: IFFALSE 35154
// break ;
35152: GO 35301
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35154: LD_ADDR_EXP 145
35158: PUSH
35159: LD_EXP 145
35163: PPUSH
35164: LD_VAR 0 5
35168: PPUSH
35169: LD_EXP 145
35173: PUSH
35174: LD_VAR 0 5
35178: ARRAY
35179: PUSH
35180: LD_INT 1
35182: PLUS
35183: PPUSH
35184: CALL_OW 1
35188: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35189: LD_ADDR_EXP 142
35193: PUSH
35194: LD_EXP 142
35198: PPUSH
35199: LD_VAR 0 5
35203: PUSH
35204: LD_EXP 142
35208: PUSH
35209: LD_VAR 0 5
35213: ARRAY
35214: PUSH
35215: LD_INT 1
35217: PLUS
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PPUSH
35223: LD_VAR 0 2
35227: PUSH
35228: LD_VAR 0 4
35232: ARRAY
35233: PUSH
35234: LD_VAR 0 2
35238: PUSH
35239: LD_VAR 0 4
35243: ARRAY
35244: PPUSH
35245: CALL_OW 255
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL 42709 0 3
35258: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35259: LD_VAR 0 2
35263: PUSH
35264: LD_VAR 0 4
35268: ARRAY
35269: PPUSH
35270: LD_VAR 0 1
35274: PPUSH
35275: CALL_OW 255
35279: PPUSH
35280: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35284: LD_VAR 0 2
35288: PUSH
35289: LD_VAR 0 4
35293: ARRAY
35294: PPUSH
35295: CALL_OW 141
// end ;
35299: GO 35131
35301: POP
35302: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35303: LD_VAR 0 1
35307: PPUSH
35308: LD_EXP 142
35312: PUSH
35313: LD_VAR 0 5
35317: ARRAY
35318: PUSH
35319: LD_INT 0
35321: PLUS
35322: PPUSH
35323: CALL_OW 505
// end ;
35327: LD_VAR 0 3
35331: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35332: LD_INT 0
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
// if not hack in hackTanks then
35338: LD_VAR 0 1
35342: PUSH
35343: LD_EXP 141
35347: IN
35348: NOT
35349: IFFALSE 35353
// exit ;
35351: GO 35593
// index := GetElementIndex ( hackTanks , hack ) ;
35353: LD_ADDR_VAR 0 4
35357: PUSH
35358: LD_EXP 141
35362: PPUSH
35363: LD_VAR 0 1
35367: PPUSH
35368: CALL 42494 0 2
35372: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35373: LD_ADDR_VAR 0 3
35377: PUSH
35378: DOUBLE
35379: LD_EXP 142
35383: PUSH
35384: LD_VAR 0 4
35388: ARRAY
35389: INC
35390: ST_TO_ADDR
35391: LD_INT 1
35393: PUSH
35394: FOR_DOWNTO
35395: IFFALSE 35567
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35397: LD_ADDR_VAR 0 5
35401: PUSH
35402: LD_EXP 142
35406: PUSH
35407: LD_VAR 0 4
35411: ARRAY
35412: PUSH
35413: LD_VAR 0 3
35417: ARRAY
35418: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35419: LD_VAR 0 5
35423: PUSH
35424: LD_INT 1
35426: ARRAY
35427: PPUSH
35428: CALL_OW 302
35432: NOT
35433: PUSH
35434: LD_VAR 0 5
35438: PUSH
35439: LD_INT 1
35441: ARRAY
35442: PPUSH
35443: CALL_OW 255
35447: PUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL_OW 255
35457: NONEQUAL
35458: OR
35459: IFFALSE 35565
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35461: LD_VAR 0 5
35465: PUSH
35466: LD_INT 1
35468: ARRAY
35469: PPUSH
35470: CALL_OW 305
35474: PUSH
35475: LD_VAR 0 5
35479: PUSH
35480: LD_INT 1
35482: ARRAY
35483: PPUSH
35484: CALL_OW 255
35488: PUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 255
35498: EQUAL
35499: AND
35500: IFFALSE 35524
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35502: LD_VAR 0 5
35506: PUSH
35507: LD_INT 1
35509: ARRAY
35510: PPUSH
35511: LD_VAR 0 5
35515: PUSH
35516: LD_INT 2
35518: ARRAY
35519: PPUSH
35520: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35524: LD_ADDR_EXP 142
35528: PUSH
35529: LD_EXP 142
35533: PPUSH
35534: LD_VAR 0 4
35538: PPUSH
35539: LD_EXP 142
35543: PUSH
35544: LD_VAR 0 4
35548: ARRAY
35549: PPUSH
35550: LD_VAR 0 3
35554: PPUSH
35555: CALL_OW 3
35559: PPUSH
35560: CALL_OW 1
35564: ST_TO_ADDR
// end ; end ;
35565: GO 35394
35567: POP
35568: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35569: LD_VAR 0 1
35573: PPUSH
35574: LD_EXP 142
35578: PUSH
35579: LD_VAR 0 4
35583: ARRAY
35584: PUSH
35585: LD_INT 0
35587: PLUS
35588: PPUSH
35589: CALL_OW 505
// end ;
35593: LD_VAR 0 2
35597: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35598: LD_INT 0
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
// if not hack in hackTanks then
35604: LD_VAR 0 1
35608: PUSH
35609: LD_EXP 141
35613: IN
35614: NOT
35615: IFFALSE 35619
// exit ;
35617: GO 35704
// index := GetElementIndex ( hackTanks , hack ) ;
35619: LD_ADDR_VAR 0 5
35623: PUSH
35624: LD_EXP 141
35628: PPUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL 42494 0 2
35638: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35639: LD_ADDR_VAR 0 4
35643: PUSH
35644: DOUBLE
35645: LD_INT 1
35647: DEC
35648: ST_TO_ADDR
35649: LD_EXP 142
35653: PUSH
35654: LD_VAR 0 5
35658: ARRAY
35659: PUSH
35660: FOR_TO
35661: IFFALSE 35702
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35663: LD_EXP 142
35667: PUSH
35668: LD_VAR 0 5
35672: ARRAY
35673: PUSH
35674: LD_VAR 0 4
35678: ARRAY
35679: PUSH
35680: LD_INT 1
35682: ARRAY
35683: PUSH
35684: LD_VAR 0 2
35688: EQUAL
35689: IFFALSE 35700
// KillUnit ( vehicle ) ;
35691: LD_VAR 0 2
35695: PPUSH
35696: CALL_OW 66
35700: GO 35660
35702: POP
35703: POP
// end ;
35704: LD_VAR 0 3
35708: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35709: LD_EXP 146
35713: NOT
35714: IFFALSE 35749
35716: GO 35718
35718: DISABLE
// begin initMiner := true ;
35719: LD_ADDR_EXP 146
35723: PUSH
35724: LD_INT 1
35726: ST_TO_ADDR
// minersList := [ ] ;
35727: LD_ADDR_EXP 147
35731: PUSH
35732: EMPTY
35733: ST_TO_ADDR
// minerMinesList := [ ] ;
35734: LD_ADDR_EXP 148
35738: PUSH
35739: EMPTY
35740: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35741: LD_ADDR_EXP 149
35745: PUSH
35746: LD_INT 5
35748: ST_TO_ADDR
// end ;
35749: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35750: LD_EXP 146
35754: PUSH
35755: LD_INT 34
35757: PUSH
35758: LD_EXP 69
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PPUSH
35767: CALL_OW 69
35771: AND
35772: IFFALSE 36235
35774: GO 35776
35776: DISABLE
35777: LD_INT 0
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
// begin enable ;
35783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35784: LD_ADDR_VAR 0 1
35788: PUSH
35789: LD_INT 34
35791: PUSH
35792: LD_EXP 69
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PPUSH
35801: CALL_OW 69
35805: PUSH
35806: FOR_IN
35807: IFFALSE 35879
// begin if not i in minersList then
35809: LD_VAR 0 1
35813: PUSH
35814: LD_EXP 147
35818: IN
35819: NOT
35820: IFFALSE 35877
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35822: LD_ADDR_EXP 147
35826: PUSH
35827: LD_EXP 147
35831: PPUSH
35832: LD_EXP 147
35836: PUSH
35837: LD_INT 1
35839: PLUS
35840: PPUSH
35841: LD_VAR 0 1
35845: PPUSH
35846: CALL_OW 1
35850: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35851: LD_ADDR_EXP 148
35855: PUSH
35856: LD_EXP 148
35860: PPUSH
35861: LD_EXP 148
35865: PUSH
35866: LD_INT 1
35868: PLUS
35869: PPUSH
35870: EMPTY
35871: PPUSH
35872: CALL_OW 1
35876: ST_TO_ADDR
// end end ;
35877: GO 35806
35879: POP
35880: POP
// for i := minerMinesList downto 1 do
35881: LD_ADDR_VAR 0 1
35885: PUSH
35886: DOUBLE
35887: LD_EXP 148
35891: INC
35892: ST_TO_ADDR
35893: LD_INT 1
35895: PUSH
35896: FOR_DOWNTO
35897: IFFALSE 36233
// begin if IsLive ( minersList [ i ] ) then
35899: LD_EXP 147
35903: PUSH
35904: LD_VAR 0 1
35908: ARRAY
35909: PPUSH
35910: CALL_OW 300
35914: IFFALSE 35942
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35916: LD_EXP 147
35920: PUSH
35921: LD_VAR 0 1
35925: ARRAY
35926: PPUSH
35927: LD_EXP 148
35931: PUSH
35932: LD_VAR 0 1
35936: ARRAY
35937: PPUSH
35938: CALL_OW 505
// if not minerMinesList [ i ] then
35942: LD_EXP 148
35946: PUSH
35947: LD_VAR 0 1
35951: ARRAY
35952: NOT
35953: IFFALSE 35957
// continue ;
35955: GO 35896
// for j := minerMinesList [ i ] downto 1 do
35957: LD_ADDR_VAR 0 2
35961: PUSH
35962: DOUBLE
35963: LD_EXP 148
35967: PUSH
35968: LD_VAR 0 1
35972: ARRAY
35973: INC
35974: ST_TO_ADDR
35975: LD_INT 1
35977: PUSH
35978: FOR_DOWNTO
35979: IFFALSE 36229
// begin side := GetSide ( minersList [ i ] ) ;
35981: LD_ADDR_VAR 0 3
35985: PUSH
35986: LD_EXP 147
35990: PUSH
35991: LD_VAR 0 1
35995: ARRAY
35996: PPUSH
35997: CALL_OW 255
36001: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36002: LD_ADDR_VAR 0 4
36006: PUSH
36007: LD_EXP 148
36011: PUSH
36012: LD_VAR 0 1
36016: ARRAY
36017: PUSH
36018: LD_VAR 0 2
36022: ARRAY
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: PPUSH
36028: LD_EXP 148
36032: PUSH
36033: LD_VAR 0 1
36037: ARRAY
36038: PUSH
36039: LD_VAR 0 2
36043: ARRAY
36044: PUSH
36045: LD_INT 2
36047: ARRAY
36048: PPUSH
36049: CALL_OW 428
36053: ST_TO_ADDR
// if not tmp then
36054: LD_VAR 0 4
36058: NOT
36059: IFFALSE 36063
// continue ;
36061: GO 35978
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36063: LD_VAR 0 4
36067: PUSH
36068: LD_INT 81
36070: PUSH
36071: LD_VAR 0 3
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PPUSH
36080: CALL_OW 69
36084: IN
36085: PUSH
36086: LD_EXP 148
36090: PUSH
36091: LD_VAR 0 1
36095: ARRAY
36096: PUSH
36097: LD_VAR 0 2
36101: ARRAY
36102: PUSH
36103: LD_INT 1
36105: ARRAY
36106: PPUSH
36107: LD_EXP 148
36111: PUSH
36112: LD_VAR 0 1
36116: ARRAY
36117: PUSH
36118: LD_VAR 0 2
36122: ARRAY
36123: PUSH
36124: LD_INT 2
36126: ARRAY
36127: PPUSH
36128: CALL_OW 458
36132: AND
36133: IFFALSE 36227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36135: LD_EXP 148
36139: PUSH
36140: LD_VAR 0 1
36144: ARRAY
36145: PUSH
36146: LD_VAR 0 2
36150: ARRAY
36151: PUSH
36152: LD_INT 1
36154: ARRAY
36155: PPUSH
36156: LD_EXP 148
36160: PUSH
36161: LD_VAR 0 1
36165: ARRAY
36166: PUSH
36167: LD_VAR 0 2
36171: ARRAY
36172: PUSH
36173: LD_INT 2
36175: ARRAY
36176: PPUSH
36177: LD_VAR 0 3
36181: PPUSH
36182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36186: LD_ADDR_EXP 148
36190: PUSH
36191: LD_EXP 148
36195: PPUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: LD_EXP 148
36205: PUSH
36206: LD_VAR 0 1
36210: ARRAY
36211: PPUSH
36212: LD_VAR 0 2
36216: PPUSH
36217: CALL_OW 3
36221: PPUSH
36222: CALL_OW 1
36226: ST_TO_ADDR
// end ; end ;
36227: GO 35978
36229: POP
36230: POP
// end ;
36231: GO 35896
36233: POP
36234: POP
// end ;
36235: PPOPN 4
36237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36238: LD_INT 0
36240: PPUSH
36241: PPUSH
// result := false ;
36242: LD_ADDR_VAR 0 4
36246: PUSH
36247: LD_INT 0
36249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL_OW 264
36259: PUSH
36260: LD_EXP 69
36264: EQUAL
36265: NOT
36266: IFFALSE 36270
// exit ;
36268: GO 36510
// index := GetElementIndex ( minersList , unit ) ;
36270: LD_ADDR_VAR 0 5
36274: PUSH
36275: LD_EXP 147
36279: PPUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL 42494 0 2
36289: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36290: LD_EXP 148
36294: PUSH
36295: LD_VAR 0 5
36299: ARRAY
36300: PUSH
36301: LD_EXP 149
36305: GREATEREQUAL
36306: IFFALSE 36310
// exit ;
36308: GO 36510
// ComMoveXY ( unit , x , y ) ;
36310: LD_VAR 0 1
36314: PPUSH
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 3
36324: PPUSH
36325: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36329: LD_INT 35
36331: PPUSH
36332: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36336: LD_VAR 0 1
36340: PPUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: LD_VAR 0 3
36350: PPUSH
36351: CALL 73266 0 3
36355: NOT
36356: PUSH
36357: LD_VAR 0 1
36361: PPUSH
36362: CALL_OW 314
36366: AND
36367: IFFALSE 36371
// exit ;
36369: GO 36510
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36371: LD_VAR 0 2
36375: PPUSH
36376: LD_VAR 0 3
36380: PPUSH
36381: CALL_OW 428
36385: PUSH
36386: LD_VAR 0 1
36390: EQUAL
36391: PUSH
36392: LD_VAR 0 1
36396: PPUSH
36397: CALL_OW 314
36401: NOT
36402: AND
36403: IFFALSE 36329
// PlaySoundXY ( x , y , PlantMine ) ;
36405: LD_VAR 0 2
36409: PPUSH
36410: LD_VAR 0 3
36414: PPUSH
36415: LD_STRING PlantMine
36417: PPUSH
36418: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36422: LD_VAR 0 2
36426: PPUSH
36427: LD_VAR 0 3
36431: PPUSH
36432: LD_VAR 0 1
36436: PPUSH
36437: CALL_OW 255
36441: PPUSH
36442: LD_INT 0
36444: PPUSH
36445: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36449: LD_ADDR_EXP 148
36453: PUSH
36454: LD_EXP 148
36458: PPUSH
36459: LD_VAR 0 5
36463: PUSH
36464: LD_EXP 148
36468: PUSH
36469: LD_VAR 0 5
36473: ARRAY
36474: PUSH
36475: LD_INT 1
36477: PLUS
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PPUSH
36483: LD_VAR 0 2
36487: PUSH
36488: LD_VAR 0 3
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PPUSH
36497: CALL 42709 0 3
36501: ST_TO_ADDR
// result := true ;
36502: LD_ADDR_VAR 0 4
36506: PUSH
36507: LD_INT 1
36509: ST_TO_ADDR
// end ;
36510: LD_VAR 0 4
36514: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36515: LD_INT 0
36517: PPUSH
36518: PPUSH
36519: PPUSH
// if not unit in minersList then
36520: LD_VAR 0 1
36524: PUSH
36525: LD_EXP 147
36529: IN
36530: NOT
36531: IFFALSE 36535
// exit ;
36533: GO 36927
// index := GetElementIndex ( minersList , unit ) ;
36535: LD_ADDR_VAR 0 6
36539: PUSH
36540: LD_EXP 147
36544: PPUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL 42494 0 2
36554: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36555: LD_ADDR_VAR 0 5
36559: PUSH
36560: DOUBLE
36561: LD_EXP 148
36565: PUSH
36566: LD_VAR 0 6
36570: ARRAY
36571: INC
36572: ST_TO_ADDR
36573: LD_INT 1
36575: PUSH
36576: FOR_DOWNTO
36577: IFFALSE 36738
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36579: LD_EXP 148
36583: PUSH
36584: LD_VAR 0 6
36588: ARRAY
36589: PUSH
36590: LD_VAR 0 5
36594: ARRAY
36595: PUSH
36596: LD_INT 1
36598: ARRAY
36599: PUSH
36600: LD_VAR 0 2
36604: EQUAL
36605: PUSH
36606: LD_EXP 148
36610: PUSH
36611: LD_VAR 0 6
36615: ARRAY
36616: PUSH
36617: LD_VAR 0 5
36621: ARRAY
36622: PUSH
36623: LD_INT 2
36625: ARRAY
36626: PUSH
36627: LD_VAR 0 3
36631: EQUAL
36632: AND
36633: IFFALSE 36736
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36635: LD_EXP 148
36639: PUSH
36640: LD_VAR 0 6
36644: ARRAY
36645: PUSH
36646: LD_VAR 0 5
36650: ARRAY
36651: PUSH
36652: LD_INT 1
36654: ARRAY
36655: PPUSH
36656: LD_EXP 148
36660: PUSH
36661: LD_VAR 0 6
36665: ARRAY
36666: PUSH
36667: LD_VAR 0 5
36671: ARRAY
36672: PUSH
36673: LD_INT 2
36675: ARRAY
36676: PPUSH
36677: LD_VAR 0 1
36681: PPUSH
36682: CALL_OW 255
36686: PPUSH
36687: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36691: LD_ADDR_EXP 148
36695: PUSH
36696: LD_EXP 148
36700: PPUSH
36701: LD_VAR 0 6
36705: PPUSH
36706: LD_EXP 148
36710: PUSH
36711: LD_VAR 0 6
36715: ARRAY
36716: PPUSH
36717: LD_VAR 0 5
36721: PPUSH
36722: CALL_OW 3
36726: PPUSH
36727: CALL_OW 1
36731: ST_TO_ADDR
// exit ;
36732: POP
36733: POP
36734: GO 36927
// end ; end ;
36736: GO 36576
36738: POP
36739: POP
// for i := minerMinesList [ index ] downto 1 do
36740: LD_ADDR_VAR 0 5
36744: PUSH
36745: DOUBLE
36746: LD_EXP 148
36750: PUSH
36751: LD_VAR 0 6
36755: ARRAY
36756: INC
36757: ST_TO_ADDR
36758: LD_INT 1
36760: PUSH
36761: FOR_DOWNTO
36762: IFFALSE 36925
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36764: LD_EXP 148
36768: PUSH
36769: LD_VAR 0 6
36773: ARRAY
36774: PUSH
36775: LD_VAR 0 5
36779: ARRAY
36780: PUSH
36781: LD_INT 1
36783: ARRAY
36784: PPUSH
36785: LD_EXP 148
36789: PUSH
36790: LD_VAR 0 6
36794: ARRAY
36795: PUSH
36796: LD_VAR 0 5
36800: ARRAY
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PPUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: LD_VAR 0 3
36815: PPUSH
36816: CALL_OW 298
36820: PUSH
36821: LD_INT 6
36823: LESS
36824: IFFALSE 36923
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36826: LD_EXP 148
36830: PUSH
36831: LD_VAR 0 6
36835: ARRAY
36836: PUSH
36837: LD_VAR 0 5
36841: ARRAY
36842: PUSH
36843: LD_INT 1
36845: ARRAY
36846: PPUSH
36847: LD_EXP 148
36851: PUSH
36852: LD_VAR 0 6
36856: ARRAY
36857: PUSH
36858: LD_VAR 0 5
36862: ARRAY
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: PPUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 255
36877: PPUSH
36878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36882: LD_ADDR_EXP 148
36886: PUSH
36887: LD_EXP 148
36891: PPUSH
36892: LD_VAR 0 6
36896: PPUSH
36897: LD_EXP 148
36901: PUSH
36902: LD_VAR 0 6
36906: ARRAY
36907: PPUSH
36908: LD_VAR 0 5
36912: PPUSH
36913: CALL_OW 3
36917: PPUSH
36918: CALL_OW 1
36922: ST_TO_ADDR
// end ; end ;
36923: GO 36761
36925: POP
36926: POP
// end ;
36927: LD_VAR 0 4
36931: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36932: LD_INT 0
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 264
36952: PUSH
36953: LD_EXP 69
36957: EQUAL
36958: NOT
36959: PUSH
36960: LD_VAR 0 1
36964: PUSH
36965: LD_EXP 147
36969: IN
36970: NOT
36971: OR
36972: IFFALSE 36976
// exit ;
36974: GO 37298
// index := GetElementIndex ( minersList , unit ) ;
36976: LD_ADDR_VAR 0 6
36980: PUSH
36981: LD_EXP 147
36985: PPUSH
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL 42494 0 2
36995: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36996: LD_ADDR_VAR 0 8
37000: PUSH
37001: LD_EXP 149
37005: PUSH
37006: LD_EXP 148
37010: PUSH
37011: LD_VAR 0 6
37015: ARRAY
37016: MINUS
37017: ST_TO_ADDR
// if not minesFreeAmount then
37018: LD_VAR 0 8
37022: NOT
37023: IFFALSE 37027
// exit ;
37025: GO 37298
// tmp := [ ] ;
37027: LD_ADDR_VAR 0 7
37031: PUSH
37032: EMPTY
37033: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37034: LD_ADDR_VAR 0 5
37038: PUSH
37039: DOUBLE
37040: LD_INT 1
37042: DEC
37043: ST_TO_ADDR
37044: LD_VAR 0 8
37048: PUSH
37049: FOR_TO
37050: IFFALSE 37245
// begin _d := rand ( 0 , 5 ) ;
37052: LD_ADDR_VAR 0 11
37056: PUSH
37057: LD_INT 0
37059: PPUSH
37060: LD_INT 5
37062: PPUSH
37063: CALL_OW 12
37067: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37068: LD_ADDR_VAR 0 12
37072: PUSH
37073: LD_INT 2
37075: PPUSH
37076: LD_INT 6
37078: PPUSH
37079: CALL_OW 12
37083: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37084: LD_ADDR_VAR 0 9
37088: PUSH
37089: LD_VAR 0 2
37093: PPUSH
37094: LD_VAR 0 11
37098: PPUSH
37099: LD_VAR 0 12
37103: PPUSH
37104: CALL_OW 272
37108: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37109: LD_ADDR_VAR 0 10
37113: PUSH
37114: LD_VAR 0 3
37118: PPUSH
37119: LD_VAR 0 11
37123: PPUSH
37124: LD_VAR 0 12
37128: PPUSH
37129: CALL_OW 273
37133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37134: LD_VAR 0 9
37138: PPUSH
37139: LD_VAR 0 10
37143: PPUSH
37144: CALL_OW 488
37148: PUSH
37149: LD_VAR 0 9
37153: PUSH
37154: LD_VAR 0 10
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_VAR 0 7
37167: IN
37168: NOT
37169: AND
37170: PUSH
37171: LD_VAR 0 9
37175: PPUSH
37176: LD_VAR 0 10
37180: PPUSH
37181: CALL_OW 458
37185: NOT
37186: AND
37187: IFFALSE 37229
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37189: LD_ADDR_VAR 0 7
37193: PUSH
37194: LD_VAR 0 7
37198: PPUSH
37199: LD_VAR 0 7
37203: PUSH
37204: LD_INT 1
37206: PLUS
37207: PPUSH
37208: LD_VAR 0 9
37212: PUSH
37213: LD_VAR 0 10
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PPUSH
37222: CALL_OW 1
37226: ST_TO_ADDR
37227: GO 37243
// i := i - 1 ;
37229: LD_ADDR_VAR 0 5
37233: PUSH
37234: LD_VAR 0 5
37238: PUSH
37239: LD_INT 1
37241: MINUS
37242: ST_TO_ADDR
// end ;
37243: GO 37049
37245: POP
37246: POP
// for i in tmp do
37247: LD_ADDR_VAR 0 5
37251: PUSH
37252: LD_VAR 0 7
37256: PUSH
37257: FOR_IN
37258: IFFALSE 37296
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37260: LD_VAR 0 1
37264: PPUSH
37265: LD_VAR 0 5
37269: PUSH
37270: LD_INT 1
37272: ARRAY
37273: PPUSH
37274: LD_VAR 0 5
37278: PUSH
37279: LD_INT 2
37281: ARRAY
37282: PPUSH
37283: CALL 36238 0 3
37287: NOT
37288: IFFALSE 37294
// exit ;
37290: POP
37291: POP
37292: GO 37298
37294: GO 37257
37296: POP
37297: POP
// end ;
37298: LD_VAR 0 4
37302: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
// if not GetClass ( unit ) = class_sniper then
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 257
37321: PUSH
37322: LD_INT 5
37324: EQUAL
37325: NOT
37326: IFFALSE 37330
// exit ;
37328: GO 37718
// dist := 8 ;
37330: LD_ADDR_VAR 0 5
37334: PUSH
37335: LD_INT 8
37337: ST_TO_ADDR
// viewRange := 12 ;
37338: LD_ADDR_VAR 0 7
37342: PUSH
37343: LD_INT 12
37345: ST_TO_ADDR
// side := GetSide ( unit ) ;
37346: LD_ADDR_VAR 0 6
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 255
37360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37361: LD_INT 61
37363: PPUSH
37364: LD_VAR 0 6
37368: PPUSH
37369: CALL_OW 321
37373: PUSH
37374: LD_INT 2
37376: EQUAL
37377: IFFALSE 37387
// viewRange := 16 ;
37379: LD_ADDR_VAR 0 7
37383: PUSH
37384: LD_INT 16
37386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37387: LD_VAR 0 1
37391: PPUSH
37392: LD_VAR 0 2
37396: PPUSH
37397: LD_VAR 0 3
37401: PPUSH
37402: CALL_OW 297
37406: PUSH
37407: LD_VAR 0 5
37411: GREATER
37412: IFFALSE 37491
// begin ComMoveXY ( unit , x , y ) ;
37414: LD_VAR 0 1
37418: PPUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: LD_VAR 0 3
37428: PPUSH
37429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37433: LD_INT 35
37435: PPUSH
37436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37440: LD_VAR 0 1
37444: PPUSH
37445: LD_VAR 0 2
37449: PPUSH
37450: LD_VAR 0 3
37454: PPUSH
37455: CALL 73266 0 3
37459: NOT
37460: IFFALSE 37464
// exit ;
37462: GO 37718
// until GetDistUnitXY ( unit , x , y ) < dist ;
37464: LD_VAR 0 1
37468: PPUSH
37469: LD_VAR 0 2
37473: PPUSH
37474: LD_VAR 0 3
37478: PPUSH
37479: CALL_OW 297
37483: PUSH
37484: LD_VAR 0 5
37488: LESS
37489: IFFALSE 37433
// end ; ComTurnXY ( unit , x , y ) ;
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_VAR 0 2
37500: PPUSH
37501: LD_VAR 0 3
37505: PPUSH
37506: CALL_OW 118
// wait ( 5 ) ;
37510: LD_INT 5
37512: PPUSH
37513: CALL_OW 67
// _d := GetDir ( unit ) ;
37517: LD_ADDR_VAR 0 10
37521: PUSH
37522: LD_VAR 0 1
37526: PPUSH
37527: CALL_OW 254
37531: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37532: LD_ADDR_VAR 0 8
37536: PUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 250
37546: PPUSH
37547: LD_VAR 0 10
37551: PPUSH
37552: LD_VAR 0 5
37556: PPUSH
37557: CALL_OW 272
37561: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37562: LD_ADDR_VAR 0 9
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 251
37576: PPUSH
37577: LD_VAR 0 10
37581: PPUSH
37582: LD_VAR 0 5
37586: PPUSH
37587: CALL_OW 273
37591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37592: LD_VAR 0 8
37596: PPUSH
37597: LD_VAR 0 9
37601: PPUSH
37602: CALL_OW 488
37606: NOT
37607: IFFALSE 37611
// exit ;
37609: GO 37718
// ComAnimCustom ( unit , 1 ) ;
37611: LD_VAR 0 1
37615: PPUSH
37616: LD_INT 1
37618: PPUSH
37619: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37623: LD_VAR 0 8
37627: PPUSH
37628: LD_VAR 0 9
37632: PPUSH
37633: LD_VAR 0 6
37637: PPUSH
37638: LD_VAR 0 7
37642: PPUSH
37643: CALL_OW 330
// repeat wait ( 1 ) ;
37647: LD_INT 1
37649: PPUSH
37650: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 316
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 314
37673: OR
37674: PUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: CALL_OW 302
37684: NOT
37685: OR
37686: PUSH
37687: LD_VAR 0 1
37691: PPUSH
37692: CALL_OW 301
37696: OR
37697: IFFALSE 37647
// RemoveSeeing ( _x , _y , side ) ;
37699: LD_VAR 0 8
37703: PPUSH
37704: LD_VAR 0 9
37708: PPUSH
37709: LD_VAR 0 6
37713: PPUSH
37714: CALL_OW 331
// end ; end_of_file
37718: LD_VAR 0 4
37722: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37723: LD_INT 0
37725: PPUSH
37726: PPUSH
// if exist_mode then
37727: LD_VAR 0 2
37731: IFFALSE 37756
// unit := CreateCharacter ( prefix & ident ) else
37733: LD_ADDR_VAR 0 5
37737: PUSH
37738: LD_VAR 0 3
37742: PUSH
37743: LD_VAR 0 1
37747: STR
37748: PPUSH
37749: CALL_OW 34
37753: ST_TO_ADDR
37754: GO 37771
// unit := NewCharacter ( ident ) ;
37756: LD_ADDR_VAR 0 5
37760: PUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: CALL_OW 25
37770: ST_TO_ADDR
// result := unit ;
37771: LD_ADDR_VAR 0 4
37775: PUSH
37776: LD_VAR 0 5
37780: ST_TO_ADDR
// end ;
37781: LD_VAR 0 4
37785: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37786: LD_INT 0
37788: PPUSH
37789: PPUSH
// if not side or not nation then
37790: LD_VAR 0 1
37794: NOT
37795: PUSH
37796: LD_VAR 0 2
37800: NOT
37801: OR
37802: IFFALSE 37806
// exit ;
37804: GO 38574
// case nation of nation_american :
37806: LD_VAR 0 2
37810: PUSH
37811: LD_INT 1
37813: DOUBLE
37814: EQUAL
37815: IFTRUE 37819
37817: GO 38033
37819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37820: LD_ADDR_VAR 0 4
37824: PUSH
37825: LD_INT 35
37827: PUSH
37828: LD_INT 45
37830: PUSH
37831: LD_INT 46
37833: PUSH
37834: LD_INT 47
37836: PUSH
37837: LD_INT 82
37839: PUSH
37840: LD_INT 83
37842: PUSH
37843: LD_INT 84
37845: PUSH
37846: LD_INT 85
37848: PUSH
37849: LD_INT 86
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 6
37860: PUSH
37861: LD_INT 15
37863: PUSH
37864: LD_INT 16
37866: PUSH
37867: LD_INT 7
37869: PUSH
37870: LD_INT 12
37872: PUSH
37873: LD_INT 13
37875: PUSH
37876: LD_INT 10
37878: PUSH
37879: LD_INT 14
37881: PUSH
37882: LD_INT 20
37884: PUSH
37885: LD_INT 21
37887: PUSH
37888: LD_INT 22
37890: PUSH
37891: LD_INT 25
37893: PUSH
37894: LD_INT 32
37896: PUSH
37897: LD_INT 27
37899: PUSH
37900: LD_INT 36
37902: PUSH
37903: LD_INT 69
37905: PUSH
37906: LD_INT 39
37908: PUSH
37909: LD_INT 34
37911: PUSH
37912: LD_INT 40
37914: PUSH
37915: LD_INT 48
37917: PUSH
37918: LD_INT 49
37920: PUSH
37921: LD_INT 50
37923: PUSH
37924: LD_INT 51
37926: PUSH
37927: LD_INT 52
37929: PUSH
37930: LD_INT 53
37932: PUSH
37933: LD_INT 54
37935: PUSH
37936: LD_INT 55
37938: PUSH
37939: LD_INT 56
37941: PUSH
37942: LD_INT 57
37944: PUSH
37945: LD_INT 58
37947: PUSH
37948: LD_INT 59
37950: PUSH
37951: LD_INT 60
37953: PUSH
37954: LD_INT 61
37956: PUSH
37957: LD_INT 62
37959: PUSH
37960: LD_INT 80
37962: PUSH
37963: LD_INT 82
37965: PUSH
37966: LD_INT 83
37968: PUSH
37969: LD_INT 84
37971: PUSH
37972: LD_INT 85
37974: PUSH
37975: LD_INT 86
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: ST_TO_ADDR
38031: GO 38498
38033: LD_INT 2
38035: DOUBLE
38036: EQUAL
38037: IFTRUE 38041
38039: GO 38267
38041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38042: LD_ADDR_VAR 0 4
38046: PUSH
38047: LD_INT 35
38049: PUSH
38050: LD_INT 45
38052: PUSH
38053: LD_INT 46
38055: PUSH
38056: LD_INT 47
38058: PUSH
38059: LD_INT 82
38061: PUSH
38062: LD_INT 83
38064: PUSH
38065: LD_INT 84
38067: PUSH
38068: LD_INT 85
38070: PUSH
38071: LD_INT 87
38073: PUSH
38074: LD_INT 70
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 11
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: LD_INT 5
38091: PUSH
38092: LD_INT 6
38094: PUSH
38095: LD_INT 15
38097: PUSH
38098: LD_INT 18
38100: PUSH
38101: LD_INT 7
38103: PUSH
38104: LD_INT 17
38106: PUSH
38107: LD_INT 8
38109: PUSH
38110: LD_INT 20
38112: PUSH
38113: LD_INT 21
38115: PUSH
38116: LD_INT 22
38118: PUSH
38119: LD_INT 72
38121: PUSH
38122: LD_INT 26
38124: PUSH
38125: LD_INT 69
38127: PUSH
38128: LD_INT 39
38130: PUSH
38131: LD_INT 40
38133: PUSH
38134: LD_INT 41
38136: PUSH
38137: LD_INT 42
38139: PUSH
38140: LD_INT 43
38142: PUSH
38143: LD_INT 48
38145: PUSH
38146: LD_INT 49
38148: PUSH
38149: LD_INT 50
38151: PUSH
38152: LD_INT 51
38154: PUSH
38155: LD_INT 52
38157: PUSH
38158: LD_INT 53
38160: PUSH
38161: LD_INT 54
38163: PUSH
38164: LD_INT 55
38166: PUSH
38167: LD_INT 56
38169: PUSH
38170: LD_INT 60
38172: PUSH
38173: LD_INT 61
38175: PUSH
38176: LD_INT 62
38178: PUSH
38179: LD_INT 66
38181: PUSH
38182: LD_INT 67
38184: PUSH
38185: LD_INT 68
38187: PUSH
38188: LD_INT 81
38190: PUSH
38191: LD_INT 82
38193: PUSH
38194: LD_INT 83
38196: PUSH
38197: LD_INT 84
38199: PUSH
38200: LD_INT 85
38202: PUSH
38203: LD_INT 87
38205: PUSH
38206: LD_INT 88
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: ST_TO_ADDR
38265: GO 38498
38267: LD_INT 3
38269: DOUBLE
38270: EQUAL
38271: IFTRUE 38275
38273: GO 38497
38275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38276: LD_ADDR_VAR 0 4
38280: PUSH
38281: LD_INT 46
38283: PUSH
38284: LD_INT 47
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 82
38295: PUSH
38296: LD_INT 83
38298: PUSH
38299: LD_INT 84
38301: PUSH
38302: LD_INT 85
38304: PUSH
38305: LD_INT 86
38307: PUSH
38308: LD_INT 11
38310: PUSH
38311: LD_INT 9
38313: PUSH
38314: LD_INT 20
38316: PUSH
38317: LD_INT 19
38319: PUSH
38320: LD_INT 21
38322: PUSH
38323: LD_INT 24
38325: PUSH
38326: LD_INT 22
38328: PUSH
38329: LD_INT 25
38331: PUSH
38332: LD_INT 28
38334: PUSH
38335: LD_INT 29
38337: PUSH
38338: LD_INT 30
38340: PUSH
38341: LD_INT 31
38343: PUSH
38344: LD_INT 37
38346: PUSH
38347: LD_INT 38
38349: PUSH
38350: LD_INT 32
38352: PUSH
38353: LD_INT 27
38355: PUSH
38356: LD_INT 33
38358: PUSH
38359: LD_INT 69
38361: PUSH
38362: LD_INT 39
38364: PUSH
38365: LD_INT 34
38367: PUSH
38368: LD_INT 40
38370: PUSH
38371: LD_INT 71
38373: PUSH
38374: LD_INT 23
38376: PUSH
38377: LD_INT 44
38379: PUSH
38380: LD_INT 48
38382: PUSH
38383: LD_INT 49
38385: PUSH
38386: LD_INT 50
38388: PUSH
38389: LD_INT 51
38391: PUSH
38392: LD_INT 52
38394: PUSH
38395: LD_INT 53
38397: PUSH
38398: LD_INT 54
38400: PUSH
38401: LD_INT 55
38403: PUSH
38404: LD_INT 56
38406: PUSH
38407: LD_INT 57
38409: PUSH
38410: LD_INT 58
38412: PUSH
38413: LD_INT 59
38415: PUSH
38416: LD_INT 63
38418: PUSH
38419: LD_INT 64
38421: PUSH
38422: LD_INT 65
38424: PUSH
38425: LD_INT 82
38427: PUSH
38428: LD_INT 83
38430: PUSH
38431: LD_INT 84
38433: PUSH
38434: LD_INT 85
38436: PUSH
38437: LD_INT 86
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
38495: GO 38498
38497: POP
// if state > - 1 and state < 3 then
38498: LD_VAR 0 3
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: GREATER
38507: PUSH
38508: LD_VAR 0 3
38512: PUSH
38513: LD_INT 3
38515: LESS
38516: AND
38517: IFFALSE 38574
// for i in result do
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_VAR 0 4
38528: PUSH
38529: FOR_IN
38530: IFFALSE 38572
// if GetTech ( i , side ) <> state then
38532: LD_VAR 0 5
38536: PPUSH
38537: LD_VAR 0 1
38541: PPUSH
38542: CALL_OW 321
38546: PUSH
38547: LD_VAR 0 3
38551: NONEQUAL
38552: IFFALSE 38570
// result := result diff i ;
38554: LD_ADDR_VAR 0 4
38558: PUSH
38559: LD_VAR 0 4
38563: PUSH
38564: LD_VAR 0 5
38568: DIFF
38569: ST_TO_ADDR
38570: GO 38529
38572: POP
38573: POP
// end ;
38574: LD_VAR 0 4
38578: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38579: LD_INT 0
38581: PPUSH
38582: PPUSH
38583: PPUSH
// result := true ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_INT 1
38591: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: LD_VAR 0 2
38601: PPUSH
38602: CALL_OW 480
38606: ST_TO_ADDR
// if not tmp then
38607: LD_VAR 0 5
38611: NOT
38612: IFFALSE 38616
// exit ;
38614: GO 38665
// for i in tmp do
38616: LD_ADDR_VAR 0 4
38620: PUSH
38621: LD_VAR 0 5
38625: PUSH
38626: FOR_IN
38627: IFFALSE 38663
// if GetTech ( i , side ) <> state_researched then
38629: LD_VAR 0 4
38633: PPUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL_OW 321
38643: PUSH
38644: LD_INT 2
38646: NONEQUAL
38647: IFFALSE 38661
// begin result := false ;
38649: LD_ADDR_VAR 0 3
38653: PUSH
38654: LD_INT 0
38656: ST_TO_ADDR
// exit ;
38657: POP
38658: POP
38659: GO 38665
// end ;
38661: GO 38626
38663: POP
38664: POP
// end ;
38665: LD_VAR 0 3
38669: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38670: LD_INT 0
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38685: LD_VAR 0 1
38689: NOT
38690: PUSH
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL_OW 257
38700: PUSH
38701: LD_INT 9
38703: NONEQUAL
38704: OR
38705: IFFALSE 38709
// exit ;
38707: GO 39282
// side := GetSide ( unit ) ;
38709: LD_ADDR_VAR 0 9
38713: PUSH
38714: LD_VAR 0 1
38718: PPUSH
38719: CALL_OW 255
38723: ST_TO_ADDR
// tech_space := tech_spacanom ;
38724: LD_ADDR_VAR 0 12
38728: PUSH
38729: LD_INT 29
38731: ST_TO_ADDR
// tech_time := tech_taurad ;
38732: LD_ADDR_VAR 0 13
38736: PUSH
38737: LD_INT 28
38739: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38740: LD_ADDR_VAR 0 11
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 310
38754: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38755: LD_VAR 0 11
38759: PPUSH
38760: CALL_OW 247
38764: PUSH
38765: LD_INT 2
38767: EQUAL
38768: IFFALSE 38772
// exit ;
38770: GO 39282
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38772: LD_ADDR_VAR 0 8
38776: PUSH
38777: LD_INT 81
38779: PUSH
38780: LD_VAR 0 9
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 3
38791: PUSH
38792: LD_INT 21
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PPUSH
38810: CALL_OW 69
38814: ST_TO_ADDR
// if not tmp then
38815: LD_VAR 0 8
38819: NOT
38820: IFFALSE 38824
// exit ;
38822: GO 39282
// if in_unit then
38824: LD_VAR 0 11
38828: IFFALSE 38852
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38830: LD_ADDR_VAR 0 10
38834: PUSH
38835: LD_VAR 0 8
38839: PPUSH
38840: LD_VAR 0 11
38844: PPUSH
38845: CALL_OW 74
38849: ST_TO_ADDR
38850: GO 38872
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38852: LD_ADDR_VAR 0 10
38856: PUSH
38857: LD_VAR 0 8
38861: PPUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: CALL_OW 74
38871: ST_TO_ADDR
// if not enemy then
38872: LD_VAR 0 10
38876: NOT
38877: IFFALSE 38881
// exit ;
38879: GO 39282
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38881: LD_VAR 0 11
38885: PUSH
38886: LD_VAR 0 11
38890: PPUSH
38891: LD_VAR 0 10
38895: PPUSH
38896: CALL_OW 296
38900: PUSH
38901: LD_INT 13
38903: GREATER
38904: AND
38905: PUSH
38906: LD_VAR 0 1
38910: PPUSH
38911: LD_VAR 0 10
38915: PPUSH
38916: CALL_OW 296
38920: PUSH
38921: LD_INT 12
38923: GREATER
38924: OR
38925: IFFALSE 38929
// exit ;
38927: GO 39282
// missile := [ 1 ] ;
38929: LD_ADDR_VAR 0 14
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38940: LD_VAR 0 9
38944: PPUSH
38945: LD_VAR 0 12
38949: PPUSH
38950: CALL_OW 325
38954: IFFALSE 38983
// missile := Insert ( missile , missile + 1 , 2 ) ;
38956: LD_ADDR_VAR 0 14
38960: PUSH
38961: LD_VAR 0 14
38965: PPUSH
38966: LD_VAR 0 14
38970: PUSH
38971: LD_INT 1
38973: PLUS
38974: PPUSH
38975: LD_INT 2
38977: PPUSH
38978: CALL_OW 2
38982: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38983: LD_VAR 0 9
38987: PPUSH
38988: LD_VAR 0 13
38992: PPUSH
38993: CALL_OW 325
38997: PUSH
38998: LD_VAR 0 10
39002: PPUSH
39003: CALL_OW 255
39007: PPUSH
39008: LD_VAR 0 13
39012: PPUSH
39013: CALL_OW 325
39017: NOT
39018: AND
39019: IFFALSE 39048
// missile := Insert ( missile , missile + 1 , 3 ) ;
39021: LD_ADDR_VAR 0 14
39025: PUSH
39026: LD_VAR 0 14
39030: PPUSH
39031: LD_VAR 0 14
39035: PUSH
39036: LD_INT 1
39038: PLUS
39039: PPUSH
39040: LD_INT 3
39042: PPUSH
39043: CALL_OW 2
39047: ST_TO_ADDR
// if missile < 2 then
39048: LD_VAR 0 14
39052: PUSH
39053: LD_INT 2
39055: LESS
39056: IFFALSE 39060
// exit ;
39058: GO 39282
// x := GetX ( enemy ) ;
39060: LD_ADDR_VAR 0 4
39064: PUSH
39065: LD_VAR 0 10
39069: PPUSH
39070: CALL_OW 250
39074: ST_TO_ADDR
// y := GetY ( enemy ) ;
39075: LD_ADDR_VAR 0 5
39079: PUSH
39080: LD_VAR 0 10
39084: PPUSH
39085: CALL_OW 251
39089: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39090: LD_ADDR_VAR 0 6
39094: PUSH
39095: LD_VAR 0 4
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PPUSH
39104: LD_INT 1
39106: PPUSH
39107: CALL_OW 12
39111: PLUS
39112: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39113: LD_ADDR_VAR 0 7
39117: PUSH
39118: LD_VAR 0 5
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PPUSH
39127: LD_INT 1
39129: PPUSH
39130: CALL_OW 12
39134: PLUS
39135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39136: LD_VAR 0 6
39140: PPUSH
39141: LD_VAR 0 7
39145: PPUSH
39146: CALL_OW 488
39150: NOT
39151: IFFALSE 39173
// begin _x := x ;
39153: LD_ADDR_VAR 0 6
39157: PUSH
39158: LD_VAR 0 4
39162: ST_TO_ADDR
// _y := y ;
39163: LD_ADDR_VAR 0 7
39167: PUSH
39168: LD_VAR 0 5
39172: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_INT 1
39180: PPUSH
39181: LD_VAR 0 14
39185: PPUSH
39186: CALL_OW 12
39190: ST_TO_ADDR
// case i of 1 :
39191: LD_VAR 0 3
39195: PUSH
39196: LD_INT 1
39198: DOUBLE
39199: EQUAL
39200: IFTRUE 39204
39202: GO 39221
39204: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39205: LD_VAR 0 1
39209: PPUSH
39210: LD_VAR 0 10
39214: PPUSH
39215: CALL_OW 115
39219: GO 39282
39221: LD_INT 2
39223: DOUBLE
39224: EQUAL
39225: IFTRUE 39229
39227: GO 39251
39229: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39230: LD_VAR 0 1
39234: PPUSH
39235: LD_VAR 0 6
39239: PPUSH
39240: LD_VAR 0 7
39244: PPUSH
39245: CALL_OW 153
39249: GO 39282
39251: LD_INT 3
39253: DOUBLE
39254: EQUAL
39255: IFTRUE 39259
39257: GO 39281
39259: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39260: LD_VAR 0 1
39264: PPUSH
39265: LD_VAR 0 6
39269: PPUSH
39270: LD_VAR 0 7
39274: PPUSH
39275: CALL_OW 154
39279: GO 39282
39281: POP
// end ;
39282: LD_VAR 0 2
39286: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39287: LD_INT 0
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
// if not unit or not building then
39295: LD_VAR 0 1
39299: NOT
39300: PUSH
39301: LD_VAR 0 2
39305: NOT
39306: OR
39307: IFFALSE 39311
// exit ;
39309: GO 39469
// x := GetX ( building ) ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 2
39320: PPUSH
39321: CALL_OW 250
39325: ST_TO_ADDR
// y := GetY ( building ) ;
39326: LD_ADDR_VAR 0 6
39330: PUSH
39331: LD_VAR 0 2
39335: PPUSH
39336: CALL_OW 251
39340: ST_TO_ADDR
// for i = 0 to 5 do
39341: LD_ADDR_VAR 0 4
39345: PUSH
39346: DOUBLE
39347: LD_INT 0
39349: DEC
39350: ST_TO_ADDR
39351: LD_INT 5
39353: PUSH
39354: FOR_TO
39355: IFFALSE 39467
// begin _x := ShiftX ( x , i , 3 ) ;
39357: LD_ADDR_VAR 0 7
39361: PUSH
39362: LD_VAR 0 5
39366: PPUSH
39367: LD_VAR 0 4
39371: PPUSH
39372: LD_INT 3
39374: PPUSH
39375: CALL_OW 272
39379: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39380: LD_ADDR_VAR 0 8
39384: PUSH
39385: LD_VAR 0 6
39389: PPUSH
39390: LD_VAR 0 4
39394: PPUSH
39395: LD_INT 3
39397: PPUSH
39398: CALL_OW 273
39402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39403: LD_VAR 0 7
39407: PPUSH
39408: LD_VAR 0 8
39412: PPUSH
39413: CALL_OW 488
39417: NOT
39418: IFFALSE 39422
// continue ;
39420: GO 39354
// if HexInfo ( _x , _y ) = 0 then
39422: LD_VAR 0 7
39426: PPUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: CALL_OW 428
39436: PUSH
39437: LD_INT 0
39439: EQUAL
39440: IFFALSE 39465
// begin ComMoveXY ( unit , _x , _y ) ;
39442: LD_VAR 0 1
39446: PPUSH
39447: LD_VAR 0 7
39451: PPUSH
39452: LD_VAR 0 8
39456: PPUSH
39457: CALL_OW 111
// exit ;
39461: POP
39462: POP
39463: GO 39469
// end ; end ;
39465: GO 39354
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 3
39473: RET
// export function ScanBase ( side , base_area ) ; begin
39474: LD_INT 0
39476: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_VAR 0 2
39486: PPUSH
39487: LD_INT 81
39489: PUSH
39490: LD_VAR 0 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PPUSH
39499: CALL_OW 70
39503: ST_TO_ADDR
// end ;
39504: LD_VAR 0 3
39508: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39509: LD_INT 0
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
// result := false ;
39515: LD_ADDR_VAR 0 2
39519: PUSH
39520: LD_INT 0
39522: ST_TO_ADDR
// side := GetSide ( unit ) ;
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_VAR 0 1
39532: PPUSH
39533: CALL_OW 255
39537: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39538: LD_ADDR_VAR 0 4
39542: PUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 248
39552: ST_TO_ADDR
// case nat of 1 :
39553: LD_VAR 0 4
39557: PUSH
39558: LD_INT 1
39560: DOUBLE
39561: EQUAL
39562: IFTRUE 39566
39564: GO 39577
39566: POP
// tech := tech_lassight ; 2 :
39567: LD_ADDR_VAR 0 5
39571: PUSH
39572: LD_INT 12
39574: ST_TO_ADDR
39575: GO 39616
39577: LD_INT 2
39579: DOUBLE
39580: EQUAL
39581: IFTRUE 39585
39583: GO 39596
39585: POP
// tech := tech_mortar ; 3 :
39586: LD_ADDR_VAR 0 5
39590: PUSH
39591: LD_INT 41
39593: ST_TO_ADDR
39594: GO 39616
39596: LD_INT 3
39598: DOUBLE
39599: EQUAL
39600: IFTRUE 39604
39602: GO 39615
39604: POP
// tech := tech_bazooka ; end ;
39605: LD_ADDR_VAR 0 5
39609: PUSH
39610: LD_INT 44
39612: ST_TO_ADDR
39613: GO 39616
39615: POP
// if Researched ( side , tech ) then
39616: LD_VAR 0 3
39620: PPUSH
39621: LD_VAR 0 5
39625: PPUSH
39626: CALL_OW 325
39630: IFFALSE 39657
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39632: LD_ADDR_VAR 0 2
39636: PUSH
39637: LD_INT 5
39639: PUSH
39640: LD_INT 8
39642: PUSH
39643: LD_INT 9
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: PUSH
39651: LD_VAR 0 4
39655: ARRAY
39656: ST_TO_ADDR
// end ;
39657: LD_VAR 0 2
39661: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39662: LD_INT 0
39664: PPUSH
39665: PPUSH
39666: PPUSH
// if not mines then
39667: LD_VAR 0 2
39671: NOT
39672: IFFALSE 39676
// exit ;
39674: GO 39820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39676: LD_ADDR_VAR 0 5
39680: PUSH
39681: LD_INT 81
39683: PUSH
39684: LD_VAR 0 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 21
39698: PUSH
39699: LD_INT 3
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PPUSH
39714: CALL_OW 69
39718: ST_TO_ADDR
// for i in mines do
39719: LD_ADDR_VAR 0 4
39723: PUSH
39724: LD_VAR 0 2
39728: PUSH
39729: FOR_IN
39730: IFFALSE 39818
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39732: LD_VAR 0 4
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PPUSH
39741: LD_VAR 0 4
39745: PUSH
39746: LD_INT 2
39748: ARRAY
39749: PPUSH
39750: CALL_OW 458
39754: NOT
39755: IFFALSE 39759
// continue ;
39757: GO 39729
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39759: LD_VAR 0 4
39763: PUSH
39764: LD_INT 1
39766: ARRAY
39767: PPUSH
39768: LD_VAR 0 4
39772: PUSH
39773: LD_INT 2
39775: ARRAY
39776: PPUSH
39777: CALL_OW 428
39781: PUSH
39782: LD_VAR 0 5
39786: IN
39787: IFFALSE 39816
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39789: LD_VAR 0 4
39793: PUSH
39794: LD_INT 1
39796: ARRAY
39797: PPUSH
39798: LD_VAR 0 4
39802: PUSH
39803: LD_INT 2
39805: ARRAY
39806: PPUSH
39807: LD_VAR 0 1
39811: PPUSH
39812: CALL_OW 456
// end ;
39816: GO 39729
39818: POP
39819: POP
// end ;
39820: LD_VAR 0 3
39824: RET
// export function Count ( array ) ; var i ; begin
39825: LD_INT 0
39827: PPUSH
39828: PPUSH
// result := 0 ;
39829: LD_ADDR_VAR 0 2
39833: PUSH
39834: LD_INT 0
39836: ST_TO_ADDR
// for i in array do
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_VAR 0 1
39846: PUSH
39847: FOR_IN
39848: IFFALSE 39872
// if i then
39850: LD_VAR 0 3
39854: IFFALSE 39870
// result := result + 1 ;
39856: LD_ADDR_VAR 0 2
39860: PUSH
39861: LD_VAR 0 2
39865: PUSH
39866: LD_INT 1
39868: PLUS
39869: ST_TO_ADDR
39870: GO 39847
39872: POP
39873: POP
// end ;
39874: LD_VAR 0 2
39878: RET
// export function IsEmpty ( building ) ; begin
39879: LD_INT 0
39881: PPUSH
// if not building then
39882: LD_VAR 0 1
39886: NOT
39887: IFFALSE 39891
// exit ;
39889: GO 39934
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39891: LD_ADDR_VAR 0 2
39895: PUSH
39896: LD_VAR 0 1
39900: PUSH
39901: LD_INT 22
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 255
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 58
39920: PUSH
39921: EMPTY
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PPUSH
39928: CALL_OW 69
39932: IN
39933: ST_TO_ADDR
// end ;
39934: LD_VAR 0 2
39938: RET
// export function IsNotFull ( building ) ; begin
39939: LD_INT 0
39941: PPUSH
// if not building then
39942: LD_VAR 0 1
39946: NOT
39947: IFFALSE 39951
// exit ;
39949: GO 39970
// result := UnitsInside ( building ) < 6 ;
39951: LD_ADDR_VAR 0 2
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: CALL_OW 313
39965: PUSH
39966: LD_INT 6
39968: LESS
39969: ST_TO_ADDR
// end ;
39970: LD_VAR 0 2
39974: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39975: LD_INT 0
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
// tmp := [ ] ;
39981: LD_ADDR_VAR 0 3
39985: PUSH
39986: EMPTY
39987: ST_TO_ADDR
// list := [ ] ;
39988: LD_ADDR_VAR 0 5
39992: PUSH
39993: EMPTY
39994: ST_TO_ADDR
// for i = 16 to 25 do
39995: LD_ADDR_VAR 0 4
39999: PUSH
40000: DOUBLE
40001: LD_INT 16
40003: DEC
40004: ST_TO_ADDR
40005: LD_INT 25
40007: PUSH
40008: FOR_TO
40009: IFFALSE 40082
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40011: LD_ADDR_VAR 0 3
40015: PUSH
40016: LD_VAR 0 3
40020: PUSH
40021: LD_INT 22
40023: PUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 255
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 91
40040: PUSH
40041: LD_VAR 0 1
40045: PUSH
40046: LD_INT 6
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 30
40056: PUSH
40057: LD_VAR 0 4
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: PPUSH
40074: CALL_OW 69
40078: ADD
40079: ST_TO_ADDR
40080: GO 40008
40082: POP
40083: POP
// for i = 1 to tmp do
40084: LD_ADDR_VAR 0 4
40088: PUSH
40089: DOUBLE
40090: LD_INT 1
40092: DEC
40093: ST_TO_ADDR
40094: LD_VAR 0 3
40098: PUSH
40099: FOR_TO
40100: IFFALSE 40188
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40102: LD_ADDR_VAR 0 5
40106: PUSH
40107: LD_VAR 0 5
40111: PUSH
40112: LD_VAR 0 3
40116: PUSH
40117: LD_VAR 0 4
40121: ARRAY
40122: PPUSH
40123: CALL_OW 266
40127: PUSH
40128: LD_VAR 0 3
40132: PUSH
40133: LD_VAR 0 4
40137: ARRAY
40138: PPUSH
40139: CALL_OW 250
40143: PUSH
40144: LD_VAR 0 3
40148: PUSH
40149: LD_VAR 0 4
40153: ARRAY
40154: PPUSH
40155: CALL_OW 251
40159: PUSH
40160: LD_VAR 0 3
40164: PUSH
40165: LD_VAR 0 4
40169: ARRAY
40170: PPUSH
40171: CALL_OW 254
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: ADD
40185: ST_TO_ADDR
40186: GO 40099
40188: POP
40189: POP
// result := list ;
40190: LD_ADDR_VAR 0 2
40194: PUSH
40195: LD_VAR 0 5
40199: ST_TO_ADDR
// end ;
40200: LD_VAR 0 2
40204: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40205: LD_INT 0
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
40212: PPUSH
40213: PPUSH
// if not factory then
40214: LD_VAR 0 1
40218: NOT
40219: IFFALSE 40223
// exit ;
40221: GO 40816
// if control = control_apeman then
40223: LD_VAR 0 4
40227: PUSH
40228: LD_INT 5
40230: EQUAL
40231: IFFALSE 40340
// begin tmp := UnitsInside ( factory ) ;
40233: LD_ADDR_VAR 0 8
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 313
40247: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40248: LD_VAR 0 8
40252: PPUSH
40253: LD_INT 25
40255: PUSH
40256: LD_INT 12
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PPUSH
40263: CALL_OW 72
40267: NOT
40268: IFFALSE 40278
// control := control_manual ;
40270: LD_ADDR_VAR 0 4
40274: PUSH
40275: LD_INT 1
40277: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40278: LD_ADDR_VAR 0 8
40282: PUSH
40283: LD_VAR 0 1
40287: PPUSH
40288: CALL 39975 0 1
40292: ST_TO_ADDR
// if tmp then
40293: LD_VAR 0 8
40297: IFFALSE 40340
// begin for i in tmp do
40299: LD_ADDR_VAR 0 7
40303: PUSH
40304: LD_VAR 0 8
40308: PUSH
40309: FOR_IN
40310: IFFALSE 40338
// if i [ 1 ] = b_ext_radio then
40312: LD_VAR 0 7
40316: PUSH
40317: LD_INT 1
40319: ARRAY
40320: PUSH
40321: LD_INT 22
40323: EQUAL
40324: IFFALSE 40336
// begin control := control_remote ;
40326: LD_ADDR_VAR 0 4
40330: PUSH
40331: LD_INT 2
40333: ST_TO_ADDR
// break ;
40334: GO 40338
// end ;
40336: GO 40309
40338: POP
40339: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40340: LD_VAR 0 1
40344: PPUSH
40345: LD_VAR 0 2
40349: PPUSH
40350: LD_VAR 0 3
40354: PPUSH
40355: LD_VAR 0 4
40359: PPUSH
40360: LD_VAR 0 5
40364: PPUSH
40365: CALL_OW 448
40369: IFFALSE 40404
// begin result := [ chassis , engine , control , weapon ] ;
40371: LD_ADDR_VAR 0 6
40375: PUSH
40376: LD_VAR 0 2
40380: PUSH
40381: LD_VAR 0 3
40385: PUSH
40386: LD_VAR 0 4
40390: PUSH
40391: LD_VAR 0 5
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// exit ;
40402: GO 40816
// end ; _chassis := AvailableChassisList ( factory ) ;
40404: LD_ADDR_VAR 0 9
40408: PUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 475
40418: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40419: LD_ADDR_VAR 0 11
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: CALL_OW 476
40433: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40434: LD_ADDR_VAR 0 12
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 477
40448: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40449: LD_ADDR_VAR 0 10
40453: PUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: CALL_OW 478
40463: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40464: LD_VAR 0 9
40468: NOT
40469: PUSH
40470: LD_VAR 0 11
40474: NOT
40475: OR
40476: PUSH
40477: LD_VAR 0 12
40481: NOT
40482: OR
40483: PUSH
40484: LD_VAR 0 10
40488: NOT
40489: OR
40490: IFFALSE 40525
// begin result := [ chassis , engine , control , weapon ] ;
40492: LD_ADDR_VAR 0 6
40496: PUSH
40497: LD_VAR 0 2
40501: PUSH
40502: LD_VAR 0 3
40506: PUSH
40507: LD_VAR 0 4
40511: PUSH
40512: LD_VAR 0 5
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
// exit ;
40523: GO 40816
// end ; if not chassis in _chassis then
40525: LD_VAR 0 2
40529: PUSH
40530: LD_VAR 0 9
40534: IN
40535: NOT
40536: IFFALSE 40562
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40538: LD_ADDR_VAR 0 2
40542: PUSH
40543: LD_VAR 0 9
40547: PUSH
40548: LD_INT 1
40550: PPUSH
40551: LD_VAR 0 9
40555: PPUSH
40556: CALL_OW 12
40560: ARRAY
40561: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40562: LD_VAR 0 2
40566: PPUSH
40567: LD_VAR 0 3
40571: PPUSH
40572: CALL 40821 0 2
40576: NOT
40577: IFFALSE 40636
// repeat engine := _engine [ 1 ] ;
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_VAR 0 11
40588: PUSH
40589: LD_INT 1
40591: ARRAY
40592: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40593: LD_ADDR_VAR 0 11
40597: PUSH
40598: LD_VAR 0 11
40602: PPUSH
40603: LD_INT 1
40605: PPUSH
40606: CALL_OW 3
40610: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40611: LD_VAR 0 2
40615: PPUSH
40616: LD_VAR 0 3
40620: PPUSH
40621: CALL 40821 0 2
40625: PUSH
40626: LD_VAR 0 11
40630: PUSH
40631: EMPTY
40632: EQUAL
40633: OR
40634: IFFALSE 40579
// if not control in _control then
40636: LD_VAR 0 4
40640: PUSH
40641: LD_VAR 0 12
40645: IN
40646: NOT
40647: IFFALSE 40673
// control := _control [ rand ( 1 , _control ) ] ;
40649: LD_ADDR_VAR 0 4
40653: PUSH
40654: LD_VAR 0 12
40658: PUSH
40659: LD_INT 1
40661: PPUSH
40662: LD_VAR 0 12
40666: PPUSH
40667: CALL_OW 12
40671: ARRAY
40672: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40673: LD_VAR 0 2
40677: PPUSH
40678: LD_VAR 0 5
40682: PPUSH
40683: CALL 41041 0 2
40687: NOT
40688: IFFALSE 40747
// repeat weapon := _weapon [ 1 ] ;
40690: LD_ADDR_VAR 0 5
40694: PUSH
40695: LD_VAR 0 10
40699: PUSH
40700: LD_INT 1
40702: ARRAY
40703: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40704: LD_ADDR_VAR 0 10
40708: PUSH
40709: LD_VAR 0 10
40713: PPUSH
40714: LD_INT 1
40716: PPUSH
40717: CALL_OW 3
40721: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40722: LD_VAR 0 2
40726: PPUSH
40727: LD_VAR 0 5
40731: PPUSH
40732: CALL 41041 0 2
40736: PUSH
40737: LD_VAR 0 10
40741: PUSH
40742: EMPTY
40743: EQUAL
40744: OR
40745: IFFALSE 40690
// result := [ ] ;
40747: LD_ADDR_VAR 0 6
40751: PUSH
40752: EMPTY
40753: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40754: LD_VAR 0 1
40758: PPUSH
40759: LD_VAR 0 2
40763: PPUSH
40764: LD_VAR 0 3
40768: PPUSH
40769: LD_VAR 0 4
40773: PPUSH
40774: LD_VAR 0 5
40778: PPUSH
40779: CALL_OW 448
40783: IFFALSE 40816
// result := [ chassis , engine , control , weapon ] ;
40785: LD_ADDR_VAR 0 6
40789: PUSH
40790: LD_VAR 0 2
40794: PUSH
40795: LD_VAR 0 3
40799: PUSH
40800: LD_VAR 0 4
40804: PUSH
40805: LD_VAR 0 5
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// end ;
40816: LD_VAR 0 6
40820: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40821: LD_INT 0
40823: PPUSH
// if not chassis or not engine then
40824: LD_VAR 0 1
40828: NOT
40829: PUSH
40830: LD_VAR 0 2
40834: NOT
40835: OR
40836: IFFALSE 40840
// exit ;
40838: GO 41036
// case engine of engine_solar :
40840: LD_VAR 0 2
40844: PUSH
40845: LD_INT 2
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40891
40853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: LD_INT 11
40861: PUSH
40862: LD_INT 12
40864: PUSH
40865: LD_INT 13
40867: PUSH
40868: LD_INT 14
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 3
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
40889: GO 41020
40891: LD_INT 1
40893: DOUBLE
40894: EQUAL
40895: IFTRUE 40899
40897: GO 40961
40899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40900: LD_ADDR_VAR 0 3
40904: PUSH
40905: LD_INT 11
40907: PUSH
40908: LD_INT 12
40910: PUSH
40911: LD_INT 13
40913: PUSH
40914: LD_INT 14
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: LD_INT 4
40928: PUSH
40929: LD_INT 5
40931: PUSH
40932: LD_INT 21
40934: PUSH
40935: LD_INT 23
40937: PUSH
40938: LD_INT 22
40940: PUSH
40941: LD_INT 24
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: ST_TO_ADDR
40959: GO 41020
40961: LD_INT 3
40963: DOUBLE
40964: EQUAL
40965: IFTRUE 40969
40967: GO 41019
40969: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40970: LD_ADDR_VAR 0 3
40974: PUSH
40975: LD_INT 13
40977: PUSH
40978: LD_INT 14
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 4
40989: PUSH
40990: LD_INT 5
40992: PUSH
40993: LD_INT 21
40995: PUSH
40996: LD_INT 22
40998: PUSH
40999: LD_INT 23
41001: PUSH
41002: LD_INT 24
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: ST_TO_ADDR
41017: GO 41020
41019: POP
// result := ( chassis in result ) ;
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_VAR 0 1
41029: PUSH
41030: LD_VAR 0 3
41034: IN
41035: ST_TO_ADDR
// end ;
41036: LD_VAR 0 3
41040: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41041: LD_INT 0
41043: PPUSH
// if not chassis or not weapon then
41044: LD_VAR 0 1
41048: NOT
41049: PUSH
41050: LD_VAR 0 2
41054: NOT
41055: OR
41056: IFFALSE 41060
// exit ;
41058: GO 42122
// case weapon of us_machine_gun :
41060: LD_VAR 0 2
41064: PUSH
41065: LD_INT 2
41067: DOUBLE
41068: EQUAL
41069: IFTRUE 41073
41071: GO 41103
41073: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41074: LD_ADDR_VAR 0 3
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 2
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: LD_INT 4
41090: PUSH
41091: LD_INT 5
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
41101: GO 42106
41103: LD_INT 3
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41111
41109: GO 41141
41111: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: LD_INT 4
41128: PUSH
41129: LD_INT 5
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: ST_TO_ADDR
41139: GO 42106
41141: LD_INT 11
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41179
41149: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 3
41163: PUSH
41164: LD_INT 4
41166: PUSH
41167: LD_INT 5
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
41177: GO 42106
41179: LD_INT 4
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41187
41185: GO 41213
41187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41188: LD_ADDR_VAR 0 3
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 3
41198: PUSH
41199: LD_INT 4
41201: PUSH
41202: LD_INT 5
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
41211: GO 42106
41213: LD_INT 5
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41247
41221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 3
41232: PUSH
41233: LD_INT 4
41235: PUSH
41236: LD_INT 5
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
41245: GO 42106
41247: LD_INT 9
41249: DOUBLE
41250: EQUAL
41251: IFTRUE 41255
41253: GO 41281
41255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41256: LD_ADDR_VAR 0 3
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 4
41269: PUSH
41270: LD_INT 5
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: ST_TO_ADDR
41279: GO 42106
41281: LD_INT 7
41283: DOUBLE
41284: EQUAL
41285: IFTRUE 41289
41287: GO 41315
41289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 4
41303: PUSH
41304: LD_INT 5
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
41313: GO 42106
41315: LD_INT 12
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41323
41321: GO 41349
41323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41324: LD_ADDR_VAR 0 3
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 4
41337: PUSH
41338: LD_INT 5
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: ST_TO_ADDR
41347: GO 42106
41349: LD_INT 13
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41357
41355: GO 41383
41357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 3
41368: PUSH
41369: LD_INT 4
41371: PUSH
41372: LD_INT 5
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: ST_TO_ADDR
41381: GO 42106
41383: LD_INT 14
41385: DOUBLE
41386: EQUAL
41387: IFTRUE 41391
41389: GO 41409
41391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41392: LD_ADDR_VAR 0 3
41396: PUSH
41397: LD_INT 4
41399: PUSH
41400: LD_INT 5
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: ST_TO_ADDR
41407: GO 42106
41409: LD_INT 6
41411: DOUBLE
41412: EQUAL
41413: IFTRUE 41417
41415: GO 41435
41417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41418: LD_ADDR_VAR 0 3
41422: PUSH
41423: LD_INT 4
41425: PUSH
41426: LD_INT 5
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: ST_TO_ADDR
41433: GO 42106
41435: LD_INT 10
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41443
41441: GO 41461
41443: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41444: LD_ADDR_VAR 0 3
41448: PUSH
41449: LD_INT 4
41451: PUSH
41452: LD_INT 5
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: ST_TO_ADDR
41459: GO 42106
41461: LD_INT 22
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41469
41467: GO 41495
41469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_INT 11
41477: PUSH
41478: LD_INT 12
41480: PUSH
41481: LD_INT 13
41483: PUSH
41484: LD_INT 14
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
41493: GO 42106
41495: LD_INT 23
41497: DOUBLE
41498: EQUAL
41499: IFTRUE 41503
41501: GO 41529
41503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41504: LD_ADDR_VAR 0 3
41508: PUSH
41509: LD_INT 11
41511: PUSH
41512: LD_INT 12
41514: PUSH
41515: LD_INT 13
41517: PUSH
41518: LD_INT 14
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
41527: GO 42106
41529: LD_INT 24
41531: DOUBLE
41532: EQUAL
41533: IFTRUE 41537
41535: GO 41563
41537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_INT 11
41545: PUSH
41546: LD_INT 12
41548: PUSH
41549: LD_INT 13
41551: PUSH
41552: LD_INT 14
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
41561: GO 42106
41563: LD_INT 30
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41571
41569: GO 41597
41571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41572: LD_ADDR_VAR 0 3
41576: PUSH
41577: LD_INT 11
41579: PUSH
41580: LD_INT 12
41582: PUSH
41583: LD_INT 13
41585: PUSH
41586: LD_INT 14
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
41595: GO 42106
41597: LD_INT 25
41599: DOUBLE
41600: EQUAL
41601: IFTRUE 41605
41603: GO 41623
41605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41606: LD_ADDR_VAR 0 3
41610: PUSH
41611: LD_INT 13
41613: PUSH
41614: LD_INT 14
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: ST_TO_ADDR
41621: GO 42106
41623: LD_INT 27
41625: DOUBLE
41626: EQUAL
41627: IFTRUE 41631
41629: GO 41649
41631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41632: LD_ADDR_VAR 0 3
41636: PUSH
41637: LD_INT 13
41639: PUSH
41640: LD_INT 14
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: ST_TO_ADDR
41647: GO 42106
41649: LD_EXP 67
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41685
41659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 11
41667: PUSH
41668: LD_INT 12
41670: PUSH
41671: LD_INT 13
41673: PUSH
41674: LD_INT 14
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
41683: GO 42106
41685: LD_INT 28
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41693
41691: GO 41711
41693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 13
41701: PUSH
41702: LD_INT 14
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: ST_TO_ADDR
41709: GO 42106
41711: LD_INT 29
41713: DOUBLE
41714: EQUAL
41715: IFTRUE 41719
41717: GO 41737
41719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41720: LD_ADDR_VAR 0 3
41724: PUSH
41725: LD_INT 13
41727: PUSH
41728: LD_INT 14
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: ST_TO_ADDR
41735: GO 42106
41737: LD_INT 31
41739: DOUBLE
41740: EQUAL
41741: IFTRUE 41745
41743: GO 41763
41745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41746: LD_ADDR_VAR 0 3
41750: PUSH
41751: LD_INT 13
41753: PUSH
41754: LD_INT 14
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: ST_TO_ADDR
41761: GO 42106
41763: LD_INT 26
41765: DOUBLE
41766: EQUAL
41767: IFTRUE 41771
41769: GO 41789
41771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41772: LD_ADDR_VAR 0 3
41776: PUSH
41777: LD_INT 13
41779: PUSH
41780: LD_INT 14
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: ST_TO_ADDR
41787: GO 42106
41789: LD_INT 42
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41797
41795: GO 41823
41797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_INT 21
41805: PUSH
41806: LD_INT 22
41808: PUSH
41809: LD_INT 23
41811: PUSH
41812: LD_INT 24
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
41821: GO 42106
41823: LD_INT 43
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41831
41829: GO 41857
41831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_INT 21
41839: PUSH
41840: LD_INT 22
41842: PUSH
41843: LD_INT 23
41845: PUSH
41846: LD_INT 24
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
41855: GO 42106
41857: LD_INT 44
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41891
41865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 21
41873: PUSH
41874: LD_INT 22
41876: PUSH
41877: LD_INT 23
41879: PUSH
41880: LD_INT 24
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: ST_TO_ADDR
41889: GO 42106
41891: LD_INT 45
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41899
41897: GO 41925
41899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41900: LD_ADDR_VAR 0 3
41904: PUSH
41905: LD_INT 21
41907: PUSH
41908: LD_INT 22
41910: PUSH
41911: LD_INT 23
41913: PUSH
41914: LD_INT 24
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
41923: GO 42106
41925: LD_INT 49
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41933
41931: GO 41959
41933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_INT 21
41941: PUSH
41942: LD_INT 22
41944: PUSH
41945: LD_INT 23
41947: PUSH
41948: LD_INT 24
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
41957: GO 42106
41959: LD_INT 51
41961: DOUBLE
41962: EQUAL
41963: IFTRUE 41967
41965: GO 41993
41967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_INT 21
41975: PUSH
41976: LD_INT 22
41978: PUSH
41979: LD_INT 23
41981: PUSH
41982: LD_INT 24
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
41991: GO 42106
41993: LD_INT 52
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 42027
42001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_INT 21
42009: PUSH
42010: LD_INT 22
42012: PUSH
42013: LD_INT 23
42015: PUSH
42016: LD_INT 24
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
42025: GO 42106
42027: LD_INT 53
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42035
42033: GO 42053
42035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42036: LD_ADDR_VAR 0 3
42040: PUSH
42041: LD_INT 23
42043: PUSH
42044: LD_INT 24
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: ST_TO_ADDR
42051: GO 42106
42053: LD_INT 46
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42061
42059: GO 42079
42061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_INT 23
42069: PUSH
42070: LD_INT 24
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: ST_TO_ADDR
42077: GO 42106
42079: LD_INT 47
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42087
42085: GO 42105
42087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_INT 23
42095: PUSH
42096: LD_INT 24
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: ST_TO_ADDR
42103: GO 42106
42105: POP
// result := ( chassis in result ) ;
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_VAR 0 1
42115: PUSH
42116: LD_VAR 0 3
42120: IN
42121: ST_TO_ADDR
// end ;
42122: LD_VAR 0 3
42126: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42127: LD_INT 0
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
// result := array ;
42136: LD_ADDR_VAR 0 5
42140: PUSH
42141: LD_VAR 0 1
42145: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42146: LD_VAR 0 1
42150: NOT
42151: PUSH
42152: LD_VAR 0 2
42156: NOT
42157: OR
42158: PUSH
42159: LD_VAR 0 3
42163: NOT
42164: OR
42165: PUSH
42166: LD_VAR 0 2
42170: PUSH
42171: LD_VAR 0 1
42175: GREATER
42176: OR
42177: PUSH
42178: LD_VAR 0 3
42182: PUSH
42183: LD_VAR 0 1
42187: GREATER
42188: OR
42189: IFFALSE 42193
// exit ;
42191: GO 42489
// if direction then
42193: LD_VAR 0 4
42197: IFFALSE 42261
// begin d := 1 ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: LD_INT 1
42206: ST_TO_ADDR
// if i_from > i_to then
42207: LD_VAR 0 2
42211: PUSH
42212: LD_VAR 0 3
42216: GREATER
42217: IFFALSE 42243
// length := ( array - i_from ) + i_to else
42219: LD_ADDR_VAR 0 11
42223: PUSH
42224: LD_VAR 0 1
42228: PUSH
42229: LD_VAR 0 2
42233: MINUS
42234: PUSH
42235: LD_VAR 0 3
42239: PLUS
42240: ST_TO_ADDR
42241: GO 42259
// length := i_to - i_from ;
42243: LD_ADDR_VAR 0 11
42247: PUSH
42248: LD_VAR 0 3
42252: PUSH
42253: LD_VAR 0 2
42257: MINUS
42258: ST_TO_ADDR
// end else
42259: GO 42322
// begin d := - 1 ;
42261: LD_ADDR_VAR 0 9
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: ST_TO_ADDR
// if i_from > i_to then
42270: LD_VAR 0 2
42274: PUSH
42275: LD_VAR 0 3
42279: GREATER
42280: IFFALSE 42300
// length := i_from - i_to else
42282: LD_ADDR_VAR 0 11
42286: PUSH
42287: LD_VAR 0 2
42291: PUSH
42292: LD_VAR 0 3
42296: MINUS
42297: ST_TO_ADDR
42298: GO 42322
// length := ( array - i_to ) + i_from ;
42300: LD_ADDR_VAR 0 11
42304: PUSH
42305: LD_VAR 0 1
42309: PUSH
42310: LD_VAR 0 3
42314: MINUS
42315: PUSH
42316: LD_VAR 0 2
42320: PLUS
42321: ST_TO_ADDR
// end ; if not length then
42322: LD_VAR 0 11
42326: NOT
42327: IFFALSE 42331
// exit ;
42329: GO 42489
// tmp := array ;
42331: LD_ADDR_VAR 0 10
42335: PUSH
42336: LD_VAR 0 1
42340: ST_TO_ADDR
// for i = 1 to length do
42341: LD_ADDR_VAR 0 6
42345: PUSH
42346: DOUBLE
42347: LD_INT 1
42349: DEC
42350: ST_TO_ADDR
42351: LD_VAR 0 11
42355: PUSH
42356: FOR_TO
42357: IFFALSE 42477
// begin for j = 1 to array do
42359: LD_ADDR_VAR 0 7
42363: PUSH
42364: DOUBLE
42365: LD_INT 1
42367: DEC
42368: ST_TO_ADDR
42369: LD_VAR 0 1
42373: PUSH
42374: FOR_TO
42375: IFFALSE 42463
// begin k := j + d ;
42377: LD_ADDR_VAR 0 8
42381: PUSH
42382: LD_VAR 0 7
42386: PUSH
42387: LD_VAR 0 9
42391: PLUS
42392: ST_TO_ADDR
// if k > array then
42393: LD_VAR 0 8
42397: PUSH
42398: LD_VAR 0 1
42402: GREATER
42403: IFFALSE 42413
// k := 1 ;
42405: LD_ADDR_VAR 0 8
42409: PUSH
42410: LD_INT 1
42412: ST_TO_ADDR
// if not k then
42413: LD_VAR 0 8
42417: NOT
42418: IFFALSE 42430
// k := array ;
42420: LD_ADDR_VAR 0 8
42424: PUSH
42425: LD_VAR 0 1
42429: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42430: LD_ADDR_VAR 0 10
42434: PUSH
42435: LD_VAR 0 10
42439: PPUSH
42440: LD_VAR 0 8
42444: PPUSH
42445: LD_VAR 0 1
42449: PUSH
42450: LD_VAR 0 7
42454: ARRAY
42455: PPUSH
42456: CALL_OW 1
42460: ST_TO_ADDR
// end ;
42461: GO 42374
42463: POP
42464: POP
// array := tmp ;
42465: LD_ADDR_VAR 0 1
42469: PUSH
42470: LD_VAR 0 10
42474: ST_TO_ADDR
// end ;
42475: GO 42356
42477: POP
42478: POP
// result := array ;
42479: LD_ADDR_VAR 0 5
42483: PUSH
42484: LD_VAR 0 1
42488: ST_TO_ADDR
// end ;
42489: LD_VAR 0 5
42493: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42494: LD_INT 0
42496: PPUSH
42497: PPUSH
// result := 0 ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_INT 0
42505: ST_TO_ADDR
// if not array or not value in array then
42506: LD_VAR 0 1
42510: NOT
42511: PUSH
42512: LD_VAR 0 2
42516: PUSH
42517: LD_VAR 0 1
42521: IN
42522: NOT
42523: OR
42524: IFFALSE 42528
// exit ;
42526: GO 42582
// for i = 1 to array do
42528: LD_ADDR_VAR 0 4
42532: PUSH
42533: DOUBLE
42534: LD_INT 1
42536: DEC
42537: ST_TO_ADDR
42538: LD_VAR 0 1
42542: PUSH
42543: FOR_TO
42544: IFFALSE 42580
// if value = array [ i ] then
42546: LD_VAR 0 2
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_VAR 0 4
42560: ARRAY
42561: EQUAL
42562: IFFALSE 42578
// begin result := i ;
42564: LD_ADDR_VAR 0 3
42568: PUSH
42569: LD_VAR 0 4
42573: ST_TO_ADDR
// exit ;
42574: POP
42575: POP
42576: GO 42582
// end ;
42578: GO 42543
42580: POP
42581: POP
// end ;
42582: LD_VAR 0 3
42586: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42587: LD_INT 0
42589: PPUSH
// vc_chassis := chassis ;
42590: LD_ADDR_OWVAR 37
42594: PUSH
42595: LD_VAR 0 1
42599: ST_TO_ADDR
// vc_engine := engine ;
42600: LD_ADDR_OWVAR 39
42604: PUSH
42605: LD_VAR 0 2
42609: ST_TO_ADDR
// vc_control := control ;
42610: LD_ADDR_OWVAR 38
42614: PUSH
42615: LD_VAR 0 3
42619: ST_TO_ADDR
// vc_weapon := weapon ;
42620: LD_ADDR_OWVAR 40
42624: PUSH
42625: LD_VAR 0 4
42629: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42630: LD_ADDR_OWVAR 41
42634: PUSH
42635: LD_VAR 0 5
42639: ST_TO_ADDR
// end ;
42640: LD_VAR 0 6
42644: RET
// export function WantPlant ( unit ) ; var task ; begin
42645: LD_INT 0
42647: PPUSH
42648: PPUSH
// result := false ;
42649: LD_ADDR_VAR 0 2
42653: PUSH
42654: LD_INT 0
42656: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 437
42671: ST_TO_ADDR
// if task then
42672: LD_VAR 0 3
42676: IFFALSE 42704
// if task [ 1 ] [ 1 ] = p then
42678: LD_VAR 0 3
42682: PUSH
42683: LD_INT 1
42685: ARRAY
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: PUSH
42691: LD_STRING p
42693: EQUAL
42694: IFFALSE 42704
// result := true ;
42696: LD_ADDR_VAR 0 2
42700: PUSH
42701: LD_INT 1
42703: ST_TO_ADDR
// end ;
42704: LD_VAR 0 2
42708: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42709: LD_INT 0
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
// if pos < 1 then
42715: LD_VAR 0 2
42719: PUSH
42720: LD_INT 1
42722: LESS
42723: IFFALSE 42727
// exit ;
42725: GO 43030
// if pos = 1 then
42727: LD_VAR 0 2
42731: PUSH
42732: LD_INT 1
42734: EQUAL
42735: IFFALSE 42768
// result := Replace ( arr , pos [ 1 ] , value ) else
42737: LD_ADDR_VAR 0 4
42741: PUSH
42742: LD_VAR 0 1
42746: PPUSH
42747: LD_VAR 0 2
42751: PUSH
42752: LD_INT 1
42754: ARRAY
42755: PPUSH
42756: LD_VAR 0 3
42760: PPUSH
42761: CALL_OW 1
42765: ST_TO_ADDR
42766: GO 43030
// begin tmp := arr ;
42768: LD_ADDR_VAR 0 6
42772: PUSH
42773: LD_VAR 0 1
42777: ST_TO_ADDR
// s_arr := [ tmp ] ;
42778: LD_ADDR_VAR 0 7
42782: PUSH
42783: LD_VAR 0 6
42787: PUSH
42788: EMPTY
42789: LIST
42790: ST_TO_ADDR
// for i = 1 to pos - 1 do
42791: LD_ADDR_VAR 0 5
42795: PUSH
42796: DOUBLE
42797: LD_INT 1
42799: DEC
42800: ST_TO_ADDR
42801: LD_VAR 0 2
42805: PUSH
42806: LD_INT 1
42808: MINUS
42809: PUSH
42810: FOR_TO
42811: IFFALSE 42856
// begin tmp := tmp [ pos [ i ] ] ;
42813: LD_ADDR_VAR 0 6
42817: PUSH
42818: LD_VAR 0 6
42822: PUSH
42823: LD_VAR 0 2
42827: PUSH
42828: LD_VAR 0 5
42832: ARRAY
42833: ARRAY
42834: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42835: LD_ADDR_VAR 0 7
42839: PUSH
42840: LD_VAR 0 7
42844: PUSH
42845: LD_VAR 0 6
42849: PUSH
42850: EMPTY
42851: LIST
42852: ADD
42853: ST_TO_ADDR
// end ;
42854: GO 42810
42856: POP
42857: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42858: LD_ADDR_VAR 0 6
42862: PUSH
42863: LD_VAR 0 6
42867: PPUSH
42868: LD_VAR 0 2
42872: PUSH
42873: LD_VAR 0 2
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 3
42883: PPUSH
42884: CALL_OW 1
42888: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42889: LD_ADDR_VAR 0 7
42893: PUSH
42894: LD_VAR 0 7
42898: PPUSH
42899: LD_VAR 0 7
42903: PPUSH
42904: LD_VAR 0 6
42908: PPUSH
42909: CALL_OW 1
42913: ST_TO_ADDR
// for i = s_arr downto 2 do
42914: LD_ADDR_VAR 0 5
42918: PUSH
42919: DOUBLE
42920: LD_VAR 0 7
42924: INC
42925: ST_TO_ADDR
42926: LD_INT 2
42928: PUSH
42929: FOR_DOWNTO
42930: IFFALSE 43014
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42932: LD_ADDR_VAR 0 6
42936: PUSH
42937: LD_VAR 0 7
42941: PUSH
42942: LD_VAR 0 5
42946: PUSH
42947: LD_INT 1
42949: MINUS
42950: ARRAY
42951: PPUSH
42952: LD_VAR 0 2
42956: PUSH
42957: LD_VAR 0 5
42961: PUSH
42962: LD_INT 1
42964: MINUS
42965: ARRAY
42966: PPUSH
42967: LD_VAR 0 7
42971: PUSH
42972: LD_VAR 0 5
42976: ARRAY
42977: PPUSH
42978: CALL_OW 1
42982: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42983: LD_ADDR_VAR 0 7
42987: PUSH
42988: LD_VAR 0 7
42992: PPUSH
42993: LD_VAR 0 5
42997: PUSH
42998: LD_INT 1
43000: MINUS
43001: PPUSH
43002: LD_VAR 0 6
43006: PPUSH
43007: CALL_OW 1
43011: ST_TO_ADDR
// end ;
43012: GO 42929
43014: POP
43015: POP
// result := s_arr [ 1 ] ;
43016: LD_ADDR_VAR 0 4
43020: PUSH
43021: LD_VAR 0 7
43025: PUSH
43026: LD_INT 1
43028: ARRAY
43029: ST_TO_ADDR
// end ; end ;
43030: LD_VAR 0 4
43034: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43035: LD_INT 0
43037: PPUSH
43038: PPUSH
// if not list then
43039: LD_VAR 0 1
43043: NOT
43044: IFFALSE 43048
// exit ;
43046: GO 43139
// i := list [ pos1 ] ;
43048: LD_ADDR_VAR 0 5
43052: PUSH
43053: LD_VAR 0 1
43057: PUSH
43058: LD_VAR 0 2
43062: ARRAY
43063: ST_TO_ADDR
// if not i then
43064: LD_VAR 0 5
43068: NOT
43069: IFFALSE 43073
// exit ;
43071: GO 43139
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43073: LD_ADDR_VAR 0 1
43077: PUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: LD_VAR 0 2
43087: PPUSH
43088: LD_VAR 0 1
43092: PUSH
43093: LD_VAR 0 3
43097: ARRAY
43098: PPUSH
43099: CALL_OW 1
43103: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43104: LD_ADDR_VAR 0 1
43108: PUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: LD_VAR 0 3
43118: PPUSH
43119: LD_VAR 0 5
43123: PPUSH
43124: CALL_OW 1
43128: ST_TO_ADDR
// result := list ;
43129: LD_ADDR_VAR 0 4
43133: PUSH
43134: LD_VAR 0 1
43138: ST_TO_ADDR
// end ;
43139: LD_VAR 0 4
43143: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43144: LD_INT 0
43146: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43147: LD_ADDR_VAR 0 5
43151: PUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 250
43161: PPUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 251
43171: PPUSH
43172: LD_VAR 0 2
43176: PPUSH
43177: LD_VAR 0 3
43181: PPUSH
43182: LD_VAR 0 4
43186: PPUSH
43187: CALL 43197 0 5
43191: ST_TO_ADDR
// end ;
43192: LD_VAR 0 5
43196: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43197: LD_INT 0
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
// if not list then
43203: LD_VAR 0 3
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43600
// result := [ ] ;
43212: LD_ADDR_VAR 0 6
43216: PUSH
43217: EMPTY
43218: ST_TO_ADDR
// for i in list do
43219: LD_ADDR_VAR 0 7
43223: PUSH
43224: LD_VAR 0 3
43228: PUSH
43229: FOR_IN
43230: IFFALSE 43432
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43232: LD_ADDR_VAR 0 9
43236: PUSH
43237: LD_VAR 0 7
43241: PPUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_VAR 0 2
43251: PPUSH
43252: CALL_OW 297
43256: ST_TO_ADDR
// if not result then
43257: LD_VAR 0 6
43261: NOT
43262: IFFALSE 43288
// result := [ [ i , tmp ] ] else
43264: LD_ADDR_VAR 0 6
43268: PUSH
43269: LD_VAR 0 7
43273: PUSH
43274: LD_VAR 0 9
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: ST_TO_ADDR
43286: GO 43430
// begin if result [ result ] [ 2 ] < tmp then
43288: LD_VAR 0 6
43292: PUSH
43293: LD_VAR 0 6
43297: ARRAY
43298: PUSH
43299: LD_INT 2
43301: ARRAY
43302: PUSH
43303: LD_VAR 0 9
43307: LESS
43308: IFFALSE 43350
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43310: LD_ADDR_VAR 0 6
43314: PUSH
43315: LD_VAR 0 6
43319: PPUSH
43320: LD_VAR 0 6
43324: PUSH
43325: LD_INT 1
43327: PLUS
43328: PPUSH
43329: LD_VAR 0 7
43333: PUSH
43334: LD_VAR 0 9
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PPUSH
43343: CALL_OW 2
43347: ST_TO_ADDR
43348: GO 43430
// for j = 1 to result do
43350: LD_ADDR_VAR 0 8
43354: PUSH
43355: DOUBLE
43356: LD_INT 1
43358: DEC
43359: ST_TO_ADDR
43360: LD_VAR 0 6
43364: PUSH
43365: FOR_TO
43366: IFFALSE 43428
// begin if tmp < result [ j ] [ 2 ] then
43368: LD_VAR 0 9
43372: PUSH
43373: LD_VAR 0 6
43377: PUSH
43378: LD_VAR 0 8
43382: ARRAY
43383: PUSH
43384: LD_INT 2
43386: ARRAY
43387: LESS
43388: IFFALSE 43426
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43390: LD_ADDR_VAR 0 6
43394: PUSH
43395: LD_VAR 0 6
43399: PPUSH
43400: LD_VAR 0 8
43404: PPUSH
43405: LD_VAR 0 7
43409: PUSH
43410: LD_VAR 0 9
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PPUSH
43419: CALL_OW 2
43423: ST_TO_ADDR
// break ;
43424: GO 43428
// end ; end ;
43426: GO 43365
43428: POP
43429: POP
// end ; end ;
43430: GO 43229
43432: POP
43433: POP
// if result and not asc then
43434: LD_VAR 0 6
43438: PUSH
43439: LD_VAR 0 4
43443: NOT
43444: AND
43445: IFFALSE 43520
// begin tmp := result ;
43447: LD_ADDR_VAR 0 9
43451: PUSH
43452: LD_VAR 0 6
43456: ST_TO_ADDR
// for i = tmp downto 1 do
43457: LD_ADDR_VAR 0 7
43461: PUSH
43462: DOUBLE
43463: LD_VAR 0 9
43467: INC
43468: ST_TO_ADDR
43469: LD_INT 1
43471: PUSH
43472: FOR_DOWNTO
43473: IFFALSE 43518
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43475: LD_ADDR_VAR 0 6
43479: PUSH
43480: LD_VAR 0 6
43484: PPUSH
43485: LD_VAR 0 9
43489: PUSH
43490: LD_VAR 0 7
43494: MINUS
43495: PUSH
43496: LD_INT 1
43498: PLUS
43499: PPUSH
43500: LD_VAR 0 9
43504: PUSH
43505: LD_VAR 0 7
43509: ARRAY
43510: PPUSH
43511: CALL_OW 1
43515: ST_TO_ADDR
43516: GO 43472
43518: POP
43519: POP
// end ; tmp := [ ] ;
43520: LD_ADDR_VAR 0 9
43524: PUSH
43525: EMPTY
43526: ST_TO_ADDR
// if mode then
43527: LD_VAR 0 5
43531: IFFALSE 43600
// begin for i = 1 to result do
43533: LD_ADDR_VAR 0 7
43537: PUSH
43538: DOUBLE
43539: LD_INT 1
43541: DEC
43542: ST_TO_ADDR
43543: LD_VAR 0 6
43547: PUSH
43548: FOR_TO
43549: IFFALSE 43588
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43551: LD_ADDR_VAR 0 9
43555: PUSH
43556: LD_VAR 0 9
43560: PPUSH
43561: LD_VAR 0 7
43565: PPUSH
43566: LD_VAR 0 6
43570: PUSH
43571: LD_VAR 0 7
43575: ARRAY
43576: PUSH
43577: LD_INT 1
43579: ARRAY
43580: PPUSH
43581: CALL_OW 1
43585: ST_TO_ADDR
43586: GO 43548
43588: POP
43589: POP
// result := tmp ;
43590: LD_ADDR_VAR 0 6
43594: PUSH
43595: LD_VAR 0 9
43599: ST_TO_ADDR
// end ; end ;
43600: LD_VAR 0 6
43604: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43605: LD_INT 0
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43613: LD_ADDR_VAR 0 5
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: ST_TO_ADDR
// if not x or not y then
43635: LD_VAR 0 2
43639: NOT
43640: PUSH
43641: LD_VAR 0 3
43645: NOT
43646: OR
43647: IFFALSE 43651
// exit ;
43649: GO 45303
// if not range then
43651: LD_VAR 0 4
43655: NOT
43656: IFFALSE 43666
// range := 10 ;
43658: LD_ADDR_VAR 0 4
43662: PUSH
43663: LD_INT 10
43665: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43666: LD_ADDR_VAR 0 8
43670: PUSH
43671: LD_INT 81
43673: PUSH
43674: LD_VAR 0 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 92
43685: PUSH
43686: LD_VAR 0 2
43690: PUSH
43691: LD_VAR 0 3
43695: PUSH
43696: LD_VAR 0 4
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 3
43709: PUSH
43710: LD_INT 21
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: PPUSH
43729: CALL_OW 69
43733: ST_TO_ADDR
// if not tmp then
43734: LD_VAR 0 8
43738: NOT
43739: IFFALSE 43743
// exit ;
43741: GO 45303
// for i in tmp do
43743: LD_ADDR_VAR 0 6
43747: PUSH
43748: LD_VAR 0 8
43752: PUSH
43753: FOR_IN
43754: IFFALSE 45278
// begin points := [ 0 , 0 , 0 ] ;
43756: LD_ADDR_VAR 0 9
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
// bpoints := 1 ;
43775: LD_ADDR_VAR 0 10
43779: PUSH
43780: LD_INT 1
43782: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43783: LD_VAR 0 6
43787: PPUSH
43788: CALL_OW 247
43792: PUSH
43793: LD_INT 1
43795: DOUBLE
43796: EQUAL
43797: IFTRUE 43801
43799: GO 44379
43801: POP
// begin if GetClass ( i ) = 1 then
43802: LD_VAR 0 6
43806: PPUSH
43807: CALL_OW 257
43811: PUSH
43812: LD_INT 1
43814: EQUAL
43815: IFFALSE 43836
// points := [ 10 , 5 , 3 ] ;
43817: LD_ADDR_VAR 0 9
43821: PUSH
43822: LD_INT 10
43824: PUSH
43825: LD_INT 5
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43836: LD_VAR 0 6
43840: PPUSH
43841: CALL_OW 257
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 3
43851: PUSH
43852: LD_INT 4
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: IN
43860: IFFALSE 43881
// points := [ 3 , 2 , 1 ] ;
43862: LD_ADDR_VAR 0 9
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43881: LD_VAR 0 6
43885: PPUSH
43886: CALL_OW 257
43890: PUSH
43891: LD_INT 5
43893: EQUAL
43894: IFFALSE 43915
// points := [ 130 , 5 , 2 ] ;
43896: LD_ADDR_VAR 0 9
43900: PUSH
43901: LD_INT 130
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43915: LD_VAR 0 6
43919: PPUSH
43920: CALL_OW 257
43924: PUSH
43925: LD_INT 8
43927: EQUAL
43928: IFFALSE 43949
// points := [ 35 , 35 , 30 ] ;
43930: LD_ADDR_VAR 0 9
43934: PUSH
43935: LD_INT 35
43937: PUSH
43938: LD_INT 35
43940: PUSH
43941: LD_INT 30
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43949: LD_VAR 0 6
43953: PPUSH
43954: CALL_OW 257
43958: PUSH
43959: LD_INT 9
43961: EQUAL
43962: IFFALSE 43983
// points := [ 20 , 55 , 40 ] ;
43964: LD_ADDR_VAR 0 9
43968: PUSH
43969: LD_INT 20
43971: PUSH
43972: LD_INT 55
43974: PUSH
43975: LD_INT 40
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: LIST
43982: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43983: LD_VAR 0 6
43987: PPUSH
43988: CALL_OW 257
43992: PUSH
43993: LD_INT 12
43995: PUSH
43996: LD_INT 16
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: IN
44003: IFFALSE 44024
// points := [ 5 , 3 , 2 ] ;
44005: LD_ADDR_VAR 0 9
44009: PUSH
44010: LD_INT 5
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44024: LD_VAR 0 6
44028: PPUSH
44029: CALL_OW 257
44033: PUSH
44034: LD_INT 17
44036: EQUAL
44037: IFFALSE 44058
// points := [ 100 , 50 , 75 ] ;
44039: LD_ADDR_VAR 0 9
44043: PUSH
44044: LD_INT 100
44046: PUSH
44047: LD_INT 50
44049: PUSH
44050: LD_INT 75
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44058: LD_VAR 0 6
44062: PPUSH
44063: CALL_OW 257
44067: PUSH
44068: LD_INT 15
44070: EQUAL
44071: IFFALSE 44092
// points := [ 10 , 5 , 3 ] ;
44073: LD_ADDR_VAR 0 9
44077: PUSH
44078: LD_INT 10
44080: PUSH
44081: LD_INT 5
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44092: LD_VAR 0 6
44096: PPUSH
44097: CALL_OW 257
44101: PUSH
44102: LD_INT 14
44104: EQUAL
44105: IFFALSE 44126
// points := [ 10 , 0 , 0 ] ;
44107: LD_ADDR_VAR 0 9
44111: PUSH
44112: LD_INT 10
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44126: LD_VAR 0 6
44130: PPUSH
44131: CALL_OW 257
44135: PUSH
44136: LD_INT 11
44138: EQUAL
44139: IFFALSE 44160
// points := [ 30 , 10 , 5 ] ;
44141: LD_ADDR_VAR 0 9
44145: PUSH
44146: LD_INT 30
44148: PUSH
44149: LD_INT 10
44151: PUSH
44152: LD_INT 5
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44160: LD_VAR 0 1
44164: PPUSH
44165: LD_INT 5
44167: PPUSH
44168: CALL_OW 321
44172: PUSH
44173: LD_INT 2
44175: EQUAL
44176: IFFALSE 44193
// bpoints := bpoints * 1.8 ;
44178: LD_ADDR_VAR 0 10
44182: PUSH
44183: LD_VAR 0 10
44187: PUSH
44188: LD_REAL  1.80000000000000E+0000
44191: MUL
44192: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44193: LD_VAR 0 6
44197: PPUSH
44198: CALL_OW 257
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: LD_INT 4
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: IN
44221: PUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: LD_INT 51
44229: PPUSH
44230: CALL_OW 321
44234: PUSH
44235: LD_INT 2
44237: EQUAL
44238: AND
44239: IFFALSE 44256
// bpoints := bpoints * 1.2 ;
44241: LD_ADDR_VAR 0 10
44245: PUSH
44246: LD_VAR 0 10
44250: PUSH
44251: LD_REAL  1.20000000000000E+0000
44254: MUL
44255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44256: LD_VAR 0 6
44260: PPUSH
44261: CALL_OW 257
44265: PUSH
44266: LD_INT 5
44268: PUSH
44269: LD_INT 7
44271: PUSH
44272: LD_INT 9
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: IN
44280: PUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: LD_INT 52
44288: PPUSH
44289: CALL_OW 321
44293: PUSH
44294: LD_INT 2
44296: EQUAL
44297: AND
44298: IFFALSE 44315
// bpoints := bpoints * 1.5 ;
44300: LD_ADDR_VAR 0 10
44304: PUSH
44305: LD_VAR 0 10
44309: PUSH
44310: LD_REAL  1.50000000000000E+0000
44313: MUL
44314: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44315: LD_VAR 0 1
44319: PPUSH
44320: LD_INT 66
44322: PPUSH
44323: CALL_OW 321
44327: PUSH
44328: LD_INT 2
44330: EQUAL
44331: IFFALSE 44348
// bpoints := bpoints * 1.1 ;
44333: LD_ADDR_VAR 0 10
44337: PUSH
44338: LD_VAR 0 10
44342: PUSH
44343: LD_REAL  1.10000000000000E+0000
44346: MUL
44347: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44348: LD_ADDR_VAR 0 10
44352: PUSH
44353: LD_VAR 0 10
44357: PUSH
44358: LD_VAR 0 6
44362: PPUSH
44363: LD_INT 1
44365: PPUSH
44366: CALL_OW 259
44370: PUSH
44371: LD_REAL  1.15000000000000E+0000
44374: MUL
44375: MUL
44376: ST_TO_ADDR
// end ; unit_vehicle :
44377: GO 45207
44379: LD_INT 2
44381: DOUBLE
44382: EQUAL
44383: IFTRUE 44387
44385: GO 45195
44387: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44388: LD_VAR 0 6
44392: PPUSH
44393: CALL_OW 264
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 42
44403: PUSH
44404: LD_INT 24
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: IN
44412: IFFALSE 44433
// points := [ 25 , 5 , 3 ] ;
44414: LD_ADDR_VAR 0 9
44418: PUSH
44419: LD_INT 25
44421: PUSH
44422: LD_INT 5
44424: PUSH
44425: LD_INT 3
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44433: LD_VAR 0 6
44437: PPUSH
44438: CALL_OW 264
44442: PUSH
44443: LD_INT 4
44445: PUSH
44446: LD_INT 43
44448: PUSH
44449: LD_INT 25
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: IN
44457: IFFALSE 44478
// points := [ 40 , 15 , 5 ] ;
44459: LD_ADDR_VAR 0 9
44463: PUSH
44464: LD_INT 40
44466: PUSH
44467: LD_INT 15
44469: PUSH
44470: LD_INT 5
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44478: LD_VAR 0 6
44482: PPUSH
44483: CALL_OW 264
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 23
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: IN
44498: IFFALSE 44519
// points := [ 7 , 25 , 8 ] ;
44500: LD_ADDR_VAR 0 9
44504: PUSH
44505: LD_INT 7
44507: PUSH
44508: LD_INT 25
44510: PUSH
44511: LD_INT 8
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44519: LD_VAR 0 6
44523: PPUSH
44524: CALL_OW 264
44528: PUSH
44529: LD_INT 5
44531: PUSH
44532: LD_INT 27
44534: PUSH
44535: LD_INT 44
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: IN
44543: IFFALSE 44564
// points := [ 14 , 50 , 16 ] ;
44545: LD_ADDR_VAR 0 9
44549: PUSH
44550: LD_INT 14
44552: PUSH
44553: LD_INT 50
44555: PUSH
44556: LD_INT 16
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44564: LD_VAR 0 6
44568: PPUSH
44569: CALL_OW 264
44573: PUSH
44574: LD_INT 6
44576: PUSH
44577: LD_INT 46
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: IN
44584: IFFALSE 44605
// points := [ 32 , 120 , 70 ] ;
44586: LD_ADDR_VAR 0 9
44590: PUSH
44591: LD_INT 32
44593: PUSH
44594: LD_INT 120
44596: PUSH
44597: LD_INT 70
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44605: LD_VAR 0 6
44609: PPUSH
44610: CALL_OW 264
44614: PUSH
44615: LD_INT 7
44617: PUSH
44618: LD_INT 28
44620: PUSH
44621: LD_INT 45
44623: PUSH
44624: LD_EXP 67
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: IN
44635: IFFALSE 44656
// points := [ 35 , 20 , 45 ] ;
44637: LD_ADDR_VAR 0 9
44641: PUSH
44642: LD_INT 35
44644: PUSH
44645: LD_INT 20
44647: PUSH
44648: LD_INT 45
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44656: LD_VAR 0 6
44660: PPUSH
44661: CALL_OW 264
44665: PUSH
44666: LD_INT 47
44668: PUSH
44669: EMPTY
44670: LIST
44671: IN
44672: IFFALSE 44693
// points := [ 67 , 45 , 75 ] ;
44674: LD_ADDR_VAR 0 9
44678: PUSH
44679: LD_INT 67
44681: PUSH
44682: LD_INT 45
44684: PUSH
44685: LD_INT 75
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44693: LD_VAR 0 6
44697: PPUSH
44698: CALL_OW 264
44702: PUSH
44703: LD_INT 26
44705: PUSH
44706: EMPTY
44707: LIST
44708: IN
44709: IFFALSE 44730
// points := [ 120 , 30 , 80 ] ;
44711: LD_ADDR_VAR 0 9
44715: PUSH
44716: LD_INT 120
44718: PUSH
44719: LD_INT 30
44721: PUSH
44722: LD_INT 80
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44730: LD_VAR 0 6
44734: PPUSH
44735: CALL_OW 264
44739: PUSH
44740: LD_INT 22
44742: PUSH
44743: EMPTY
44744: LIST
44745: IN
44746: IFFALSE 44767
// points := [ 40 , 1 , 1 ] ;
44748: LD_ADDR_VAR 0 9
44752: PUSH
44753: LD_INT 40
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44767: LD_VAR 0 6
44771: PPUSH
44772: CALL_OW 264
44776: PUSH
44777: LD_INT 29
44779: PUSH
44780: EMPTY
44781: LIST
44782: IN
44783: IFFALSE 44804
// points := [ 70 , 200 , 400 ] ;
44785: LD_ADDR_VAR 0 9
44789: PUSH
44790: LD_INT 70
44792: PUSH
44793: LD_INT 200
44795: PUSH
44796: LD_INT 400
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44804: LD_VAR 0 6
44808: PPUSH
44809: CALL_OW 264
44813: PUSH
44814: LD_INT 14
44816: PUSH
44817: LD_INT 53
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: IN
44824: IFFALSE 44845
// points := [ 40 , 10 , 20 ] ;
44826: LD_ADDR_VAR 0 9
44830: PUSH
44831: LD_INT 40
44833: PUSH
44834: LD_INT 10
44836: PUSH
44837: LD_INT 20
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44845: LD_VAR 0 6
44849: PPUSH
44850: CALL_OW 264
44854: PUSH
44855: LD_INT 9
44857: PUSH
44858: EMPTY
44859: LIST
44860: IN
44861: IFFALSE 44882
// points := [ 5 , 70 , 20 ] ;
44863: LD_ADDR_VAR 0 9
44867: PUSH
44868: LD_INT 5
44870: PUSH
44871: LD_INT 70
44873: PUSH
44874: LD_INT 20
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44882: LD_VAR 0 6
44886: PPUSH
44887: CALL_OW 264
44891: PUSH
44892: LD_INT 10
44894: PUSH
44895: EMPTY
44896: LIST
44897: IN
44898: IFFALSE 44919
// points := [ 35 , 110 , 70 ] ;
44900: LD_ADDR_VAR 0 9
44904: PUSH
44905: LD_INT 35
44907: PUSH
44908: LD_INT 110
44910: PUSH
44911: LD_INT 70
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44919: LD_VAR 0 6
44923: PPUSH
44924: CALL_OW 265
44928: PUSH
44929: LD_INT 25
44931: EQUAL
44932: IFFALSE 44953
// points := [ 80 , 65 , 100 ] ;
44934: LD_ADDR_VAR 0 9
44938: PUSH
44939: LD_INT 80
44941: PUSH
44942: LD_INT 65
44944: PUSH
44945: LD_INT 100
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44953: LD_VAR 0 6
44957: PPUSH
44958: CALL_OW 263
44962: PUSH
44963: LD_INT 1
44965: EQUAL
44966: IFFALSE 45001
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44968: LD_ADDR_VAR 0 10
44972: PUSH
44973: LD_VAR 0 10
44977: PUSH
44978: LD_VAR 0 6
44982: PPUSH
44983: CALL_OW 311
44987: PPUSH
44988: LD_INT 3
44990: PPUSH
44991: CALL_OW 259
44995: PUSH
44996: LD_INT 4
44998: MUL
44999: MUL
45000: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45001: LD_VAR 0 6
45005: PPUSH
45006: CALL_OW 263
45010: PUSH
45011: LD_INT 2
45013: EQUAL
45014: IFFALSE 45065
// begin j := IsControledBy ( i ) ;
45016: LD_ADDR_VAR 0 7
45020: PUSH
45021: LD_VAR 0 6
45025: PPUSH
45026: CALL_OW 312
45030: ST_TO_ADDR
// if j then
45031: LD_VAR 0 7
45035: IFFALSE 45065
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45037: LD_ADDR_VAR 0 10
45041: PUSH
45042: LD_VAR 0 10
45046: PUSH
45047: LD_VAR 0 7
45051: PPUSH
45052: LD_INT 3
45054: PPUSH
45055: CALL_OW 259
45059: PUSH
45060: LD_INT 3
45062: MUL
45063: MUL
45064: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45065: LD_VAR 0 6
45069: PPUSH
45070: CALL_OW 264
45074: PUSH
45075: LD_INT 5
45077: PUSH
45078: LD_INT 6
45080: PUSH
45081: LD_INT 46
45083: PUSH
45084: LD_INT 44
45086: PUSH
45087: LD_INT 47
45089: PUSH
45090: LD_INT 45
45092: PUSH
45093: LD_INT 28
45095: PUSH
45096: LD_INT 7
45098: PUSH
45099: LD_INT 27
45101: PUSH
45102: LD_INT 29
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: IN
45117: PUSH
45118: LD_VAR 0 1
45122: PPUSH
45123: LD_INT 52
45125: PPUSH
45126: CALL_OW 321
45130: PUSH
45131: LD_INT 2
45133: EQUAL
45134: AND
45135: IFFALSE 45152
// bpoints := bpoints * 1.2 ;
45137: LD_ADDR_VAR 0 10
45141: PUSH
45142: LD_VAR 0 10
45146: PUSH
45147: LD_REAL  1.20000000000000E+0000
45150: MUL
45151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45152: LD_VAR 0 6
45156: PPUSH
45157: CALL_OW 264
45161: PUSH
45162: LD_INT 6
45164: PUSH
45165: LD_INT 46
45167: PUSH
45168: LD_INT 47
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: IN
45176: IFFALSE 45193
// bpoints := bpoints * 1.2 ;
45178: LD_ADDR_VAR 0 10
45182: PUSH
45183: LD_VAR 0 10
45187: PUSH
45188: LD_REAL  1.20000000000000E+0000
45191: MUL
45192: ST_TO_ADDR
// end ; unit_building :
45193: GO 45207
45195: LD_INT 3
45197: DOUBLE
45198: EQUAL
45199: IFTRUE 45203
45201: GO 45206
45203: POP
// ; end ;
45204: GO 45207
45206: POP
// for j = 1 to 3 do
45207: LD_ADDR_VAR 0 7
45211: PUSH
45212: DOUBLE
45213: LD_INT 1
45215: DEC
45216: ST_TO_ADDR
45217: LD_INT 3
45219: PUSH
45220: FOR_TO
45221: IFFALSE 45274
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45223: LD_ADDR_VAR 0 5
45227: PUSH
45228: LD_VAR 0 5
45232: PPUSH
45233: LD_VAR 0 7
45237: PPUSH
45238: LD_VAR 0 5
45242: PUSH
45243: LD_VAR 0 7
45247: ARRAY
45248: PUSH
45249: LD_VAR 0 9
45253: PUSH
45254: LD_VAR 0 7
45258: ARRAY
45259: PUSH
45260: LD_VAR 0 10
45264: MUL
45265: PLUS
45266: PPUSH
45267: CALL_OW 1
45271: ST_TO_ADDR
45272: GO 45220
45274: POP
45275: POP
// end ;
45276: GO 43753
45278: POP
45279: POP
// result := Replace ( result , 4 , tmp ) ;
45280: LD_ADDR_VAR 0 5
45284: PUSH
45285: LD_VAR 0 5
45289: PPUSH
45290: LD_INT 4
45292: PPUSH
45293: LD_VAR 0 8
45297: PPUSH
45298: CALL_OW 1
45302: ST_TO_ADDR
// end ;
45303: LD_VAR 0 5
45307: RET
// export function DangerAtRange ( unit , range ) ; begin
45308: LD_INT 0
45310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45311: LD_ADDR_VAR 0 3
45315: PUSH
45316: LD_VAR 0 1
45320: PPUSH
45321: CALL_OW 255
45325: PPUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: CALL_OW 250
45335: PPUSH
45336: LD_VAR 0 1
45340: PPUSH
45341: CALL_OW 251
45345: PPUSH
45346: LD_VAR 0 2
45350: PPUSH
45351: CALL 43605 0 4
45355: ST_TO_ADDR
// end ;
45356: LD_VAR 0 3
45360: RET
// export function DangerInArea ( side , area ) ; begin
45361: LD_INT 0
45363: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_VAR 0 2
45373: PPUSH
45374: LD_INT 81
45376: PUSH
45377: LD_VAR 0 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PPUSH
45386: CALL_OW 70
45390: ST_TO_ADDR
// end ;
45391: LD_VAR 0 3
45395: RET
// export function IsExtension ( b ) ; begin
45396: LD_INT 0
45398: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_VAR 0 1
45408: PUSH
45409: LD_INT 23
45411: PUSH
45412: LD_INT 20
45414: PUSH
45415: LD_INT 22
45417: PUSH
45418: LD_INT 17
45420: PUSH
45421: LD_INT 24
45423: PUSH
45424: LD_INT 21
45426: PUSH
45427: LD_INT 19
45429: PUSH
45430: LD_INT 16
45432: PUSH
45433: LD_INT 25
45435: PUSH
45436: LD_INT 18
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: IN
45451: ST_TO_ADDR
// end ;
45452: LD_VAR 0 2
45456: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45457: LD_INT 0
45459: PPUSH
45460: PPUSH
45461: PPUSH
// result := [ ] ;
45462: LD_ADDR_VAR 0 4
45466: PUSH
45467: EMPTY
45468: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45469: LD_ADDR_VAR 0 5
45473: PUSH
45474: LD_VAR 0 2
45478: PPUSH
45479: LD_INT 21
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PPUSH
45489: CALL_OW 70
45493: ST_TO_ADDR
// if not tmp then
45494: LD_VAR 0 5
45498: NOT
45499: IFFALSE 45503
// exit ;
45501: GO 45567
// if checkLink then
45503: LD_VAR 0 3
45507: IFFALSE 45557
// begin for i in tmp do
45509: LD_ADDR_VAR 0 6
45513: PUSH
45514: LD_VAR 0 5
45518: PUSH
45519: FOR_IN
45520: IFFALSE 45555
// if GetBase ( i ) <> base then
45522: LD_VAR 0 6
45526: PPUSH
45527: CALL_OW 274
45531: PUSH
45532: LD_VAR 0 1
45536: NONEQUAL
45537: IFFALSE 45553
// ComLinkToBase ( base , i ) ;
45539: LD_VAR 0 1
45543: PPUSH
45544: LD_VAR 0 6
45548: PPUSH
45549: CALL_OW 169
45553: GO 45519
45555: POP
45556: POP
// end ; result := tmp ;
45557: LD_ADDR_VAR 0 4
45561: PUSH
45562: LD_VAR 0 5
45566: ST_TO_ADDR
// end ;
45567: LD_VAR 0 4
45571: RET
// export function ComComplete ( units , b ) ; var i ; begin
45572: LD_INT 0
45574: PPUSH
45575: PPUSH
// if not units then
45576: LD_VAR 0 1
45580: NOT
45581: IFFALSE 45585
// exit ;
45583: GO 45675
// for i in units do
45585: LD_ADDR_VAR 0 4
45589: PUSH
45590: LD_VAR 0 1
45594: PUSH
45595: FOR_IN
45596: IFFALSE 45673
// if BuildingStatus ( b ) = bs_build then
45598: LD_VAR 0 2
45602: PPUSH
45603: CALL_OW 461
45607: PUSH
45608: LD_INT 1
45610: EQUAL
45611: IFFALSE 45671
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45613: LD_VAR 0 4
45617: PPUSH
45618: LD_STRING h
45620: PUSH
45621: LD_VAR 0 2
45625: PPUSH
45626: CALL_OW 250
45630: PUSH
45631: LD_VAR 0 2
45635: PPUSH
45636: CALL_OW 251
45640: PUSH
45641: LD_VAR 0 2
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: PUSH
45664: EMPTY
45665: LIST
45666: PPUSH
45667: CALL_OW 446
45671: GO 45595
45673: POP
45674: POP
// end ;
45675: LD_VAR 0 3
45679: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45680: LD_INT 0
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45688: LD_VAR 0 1
45692: NOT
45693: PUSH
45694: LD_VAR 0 1
45698: PPUSH
45699: CALL_OW 263
45703: PUSH
45704: LD_INT 2
45706: NONEQUAL
45707: OR
45708: IFFALSE 45712
// exit ;
45710: GO 46028
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45712: LD_ADDR_VAR 0 6
45716: PUSH
45717: LD_INT 22
45719: PUSH
45720: LD_VAR 0 1
45724: PPUSH
45725: CALL_OW 255
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 30
45739: PUSH
45740: LD_INT 36
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 34
45749: PUSH
45750: LD_INT 31
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PPUSH
45766: CALL_OW 69
45770: ST_TO_ADDR
// if not tmp then
45771: LD_VAR 0 6
45775: NOT
45776: IFFALSE 45780
// exit ;
45778: GO 46028
// result := [ ] ;
45780: LD_ADDR_VAR 0 2
45784: PUSH
45785: EMPTY
45786: ST_TO_ADDR
// for i in tmp do
45787: LD_ADDR_VAR 0 3
45791: PUSH
45792: LD_VAR 0 6
45796: PUSH
45797: FOR_IN
45798: IFFALSE 45869
// begin t := UnitsInside ( i ) ;
45800: LD_ADDR_VAR 0 4
45804: PUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: CALL_OW 313
45814: ST_TO_ADDR
// if t then
45815: LD_VAR 0 4
45819: IFFALSE 45867
// for j in t do
45821: LD_ADDR_VAR 0 7
45825: PUSH
45826: LD_VAR 0 4
45830: PUSH
45831: FOR_IN
45832: IFFALSE 45865
// result := Replace ( result , result + 1 , j ) ;
45834: LD_ADDR_VAR 0 2
45838: PUSH
45839: LD_VAR 0 2
45843: PPUSH
45844: LD_VAR 0 2
45848: PUSH
45849: LD_INT 1
45851: PLUS
45852: PPUSH
45853: LD_VAR 0 7
45857: PPUSH
45858: CALL_OW 1
45862: ST_TO_ADDR
45863: GO 45831
45865: POP
45866: POP
// end ;
45867: GO 45797
45869: POP
45870: POP
// if not result then
45871: LD_VAR 0 2
45875: NOT
45876: IFFALSE 45880
// exit ;
45878: GO 46028
// mech := result [ 1 ] ;
45880: LD_ADDR_VAR 0 5
45884: PUSH
45885: LD_VAR 0 2
45889: PUSH
45890: LD_INT 1
45892: ARRAY
45893: ST_TO_ADDR
// if result > 1 then
45894: LD_VAR 0 2
45898: PUSH
45899: LD_INT 1
45901: GREATER
45902: IFFALSE 46014
// begin for i = 2 to result do
45904: LD_ADDR_VAR 0 3
45908: PUSH
45909: DOUBLE
45910: LD_INT 2
45912: DEC
45913: ST_TO_ADDR
45914: LD_VAR 0 2
45918: PUSH
45919: FOR_TO
45920: IFFALSE 46012
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45922: LD_ADDR_VAR 0 4
45926: PUSH
45927: LD_VAR 0 2
45931: PUSH
45932: LD_VAR 0 3
45936: ARRAY
45937: PPUSH
45938: LD_INT 3
45940: PPUSH
45941: CALL_OW 259
45945: PUSH
45946: LD_VAR 0 2
45950: PUSH
45951: LD_VAR 0 3
45955: ARRAY
45956: PPUSH
45957: CALL_OW 432
45961: MINUS
45962: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45963: LD_VAR 0 4
45967: PUSH
45968: LD_VAR 0 5
45972: PPUSH
45973: LD_INT 3
45975: PPUSH
45976: CALL_OW 259
45980: PUSH
45981: LD_VAR 0 5
45985: PPUSH
45986: CALL_OW 432
45990: MINUS
45991: GREATEREQUAL
45992: IFFALSE 46010
// mech := result [ i ] ;
45994: LD_ADDR_VAR 0 5
45998: PUSH
45999: LD_VAR 0 2
46003: PUSH
46004: LD_VAR 0 3
46008: ARRAY
46009: ST_TO_ADDR
// end ;
46010: GO 45919
46012: POP
46013: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46014: LD_VAR 0 1
46018: PPUSH
46019: LD_VAR 0 5
46023: PPUSH
46024: CALL_OW 135
// end ;
46028: LD_VAR 0 2
46032: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46033: LD_INT 0
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
// result := [ ] ;
46048: LD_ADDR_VAR 0 7
46052: PUSH
46053: EMPTY
46054: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46055: LD_VAR 0 1
46059: PPUSH
46060: CALL_OW 266
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: IN
46075: NOT
46076: IFFALSE 46080
// exit ;
46078: GO 47714
// if name then
46080: LD_VAR 0 3
46084: IFFALSE 46100
// SetBName ( base_dep , name ) ;
46086: LD_VAR 0 1
46090: PPUSH
46091: LD_VAR 0 3
46095: PPUSH
46096: CALL_OW 500
// base := GetBase ( base_dep ) ;
46100: LD_ADDR_VAR 0 15
46104: PUSH
46105: LD_VAR 0 1
46109: PPUSH
46110: CALL_OW 274
46114: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46115: LD_ADDR_VAR 0 16
46119: PUSH
46120: LD_VAR 0 1
46124: PPUSH
46125: CALL_OW 255
46129: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46130: LD_ADDR_VAR 0 17
46134: PUSH
46135: LD_VAR 0 1
46139: PPUSH
46140: CALL_OW 248
46144: ST_TO_ADDR
// if sources then
46145: LD_VAR 0 5
46149: IFFALSE 46196
// for i = 1 to 3 do
46151: LD_ADDR_VAR 0 8
46155: PUSH
46156: DOUBLE
46157: LD_INT 1
46159: DEC
46160: ST_TO_ADDR
46161: LD_INT 3
46163: PUSH
46164: FOR_TO
46165: IFFALSE 46194
// AddResourceType ( base , i , sources [ i ] ) ;
46167: LD_VAR 0 15
46171: PPUSH
46172: LD_VAR 0 8
46176: PPUSH
46177: LD_VAR 0 5
46181: PUSH
46182: LD_VAR 0 8
46186: ARRAY
46187: PPUSH
46188: CALL_OW 276
46192: GO 46164
46194: POP
46195: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46196: LD_ADDR_VAR 0 18
46200: PUSH
46201: LD_VAR 0 15
46205: PPUSH
46206: LD_VAR 0 2
46210: PPUSH
46211: LD_INT 1
46213: PPUSH
46214: CALL 45457 0 3
46218: ST_TO_ADDR
// InitHc ;
46219: CALL_OW 19
// InitUc ;
46223: CALL_OW 18
// uc_side := side ;
46227: LD_ADDR_OWVAR 20
46231: PUSH
46232: LD_VAR 0 16
46236: ST_TO_ADDR
// uc_nation := nation ;
46237: LD_ADDR_OWVAR 21
46241: PUSH
46242: LD_VAR 0 17
46246: ST_TO_ADDR
// if buildings then
46247: LD_VAR 0 18
46251: IFFALSE 47573
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46253: LD_ADDR_VAR 0 19
46257: PUSH
46258: LD_VAR 0 18
46262: PPUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 30
46268: PUSH
46269: LD_INT 29
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 30
46278: PUSH
46279: LD_INT 30
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: PPUSH
46291: CALL_OW 72
46295: ST_TO_ADDR
// if tmp then
46296: LD_VAR 0 19
46300: IFFALSE 46348
// for i in tmp do
46302: LD_ADDR_VAR 0 8
46306: PUSH
46307: LD_VAR 0 19
46311: PUSH
46312: FOR_IN
46313: IFFALSE 46346
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46315: LD_VAR 0 8
46319: PPUSH
46320: CALL_OW 250
46324: PPUSH
46325: LD_VAR 0 8
46329: PPUSH
46330: CALL_OW 251
46334: PPUSH
46335: LD_VAR 0 16
46339: PPUSH
46340: CALL_OW 441
46344: GO 46312
46346: POP
46347: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46348: LD_VAR 0 18
46352: PPUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 30
46358: PUSH
46359: LD_INT 32
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 30
46368: PUSH
46369: LD_INT 33
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: PPUSH
46381: CALL_OW 72
46385: IFFALSE 46473
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46387: LD_ADDR_VAR 0 8
46391: PUSH
46392: LD_VAR 0 18
46396: PPUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 30
46402: PUSH
46403: LD_INT 32
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 30
46412: PUSH
46413: LD_INT 33
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: PPUSH
46425: CALL_OW 72
46429: PUSH
46430: FOR_IN
46431: IFFALSE 46471
// begin if not GetBWeapon ( i ) then
46433: LD_VAR 0 8
46437: PPUSH
46438: CALL_OW 269
46442: NOT
46443: IFFALSE 46469
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46445: LD_VAR 0 8
46449: PPUSH
46450: LD_VAR 0 8
46454: PPUSH
46455: LD_VAR 0 2
46459: PPUSH
46460: CALL 47719 0 2
46464: PPUSH
46465: CALL_OW 431
// end ;
46469: GO 46430
46471: POP
46472: POP
// end ; for i = 1 to personel do
46473: LD_ADDR_VAR 0 8
46477: PUSH
46478: DOUBLE
46479: LD_INT 1
46481: DEC
46482: ST_TO_ADDR
46483: LD_VAR 0 6
46487: PUSH
46488: FOR_TO
46489: IFFALSE 47553
// begin if i > 4 then
46491: LD_VAR 0 8
46495: PUSH
46496: LD_INT 4
46498: GREATER
46499: IFFALSE 46503
// break ;
46501: GO 47553
// case i of 1 :
46503: LD_VAR 0 8
46507: PUSH
46508: LD_INT 1
46510: DOUBLE
46511: EQUAL
46512: IFTRUE 46516
46514: GO 46596
46516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46517: LD_ADDR_VAR 0 12
46521: PUSH
46522: LD_VAR 0 18
46526: PPUSH
46527: LD_INT 22
46529: PUSH
46530: LD_VAR 0 16
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 58
46541: PUSH
46542: EMPTY
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 30
46550: PUSH
46551: LD_INT 32
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 30
46560: PUSH
46561: LD_INT 4
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 30
46570: PUSH
46571: LD_INT 5
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: PPUSH
46589: CALL_OW 72
46593: ST_TO_ADDR
46594: GO 46818
46596: LD_INT 2
46598: DOUBLE
46599: EQUAL
46600: IFTRUE 46604
46602: GO 46666
46604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46605: LD_ADDR_VAR 0 12
46609: PUSH
46610: LD_VAR 0 18
46614: PPUSH
46615: LD_INT 22
46617: PUSH
46618: LD_VAR 0 16
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 30
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 30
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PPUSH
46659: CALL_OW 72
46663: ST_TO_ADDR
46664: GO 46818
46666: LD_INT 3
46668: DOUBLE
46669: EQUAL
46670: IFTRUE 46674
46672: GO 46736
46674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46675: LD_ADDR_VAR 0 12
46679: PUSH
46680: LD_VAR 0 18
46684: PPUSH
46685: LD_INT 22
46687: PUSH
46688: LD_VAR 0 16
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 30
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 30
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PPUSH
46729: CALL_OW 72
46733: ST_TO_ADDR
46734: GO 46818
46736: LD_INT 4
46738: DOUBLE
46739: EQUAL
46740: IFTRUE 46744
46742: GO 46817
46744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46745: LD_ADDR_VAR 0 12
46749: PUSH
46750: LD_VAR 0 18
46754: PPUSH
46755: LD_INT 22
46757: PUSH
46758: LD_VAR 0 16
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 30
46772: PUSH
46773: LD_INT 6
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 30
46782: PUSH
46783: LD_INT 7
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 30
46792: PUSH
46793: LD_INT 8
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PPUSH
46810: CALL_OW 72
46814: ST_TO_ADDR
46815: GO 46818
46817: POP
// if i = 1 then
46818: LD_VAR 0 8
46822: PUSH
46823: LD_INT 1
46825: EQUAL
46826: IFFALSE 46937
// begin tmp := [ ] ;
46828: LD_ADDR_VAR 0 19
46832: PUSH
46833: EMPTY
46834: ST_TO_ADDR
// for j in f do
46835: LD_ADDR_VAR 0 9
46839: PUSH
46840: LD_VAR 0 12
46844: PUSH
46845: FOR_IN
46846: IFFALSE 46919
// if GetBType ( j ) = b_bunker then
46848: LD_VAR 0 9
46852: PPUSH
46853: CALL_OW 266
46857: PUSH
46858: LD_INT 32
46860: EQUAL
46861: IFFALSE 46888
// tmp := Insert ( tmp , 1 , j ) else
46863: LD_ADDR_VAR 0 19
46867: PUSH
46868: LD_VAR 0 19
46872: PPUSH
46873: LD_INT 1
46875: PPUSH
46876: LD_VAR 0 9
46880: PPUSH
46881: CALL_OW 2
46885: ST_TO_ADDR
46886: GO 46917
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46888: LD_ADDR_VAR 0 19
46892: PUSH
46893: LD_VAR 0 19
46897: PPUSH
46898: LD_VAR 0 19
46902: PUSH
46903: LD_INT 1
46905: PLUS
46906: PPUSH
46907: LD_VAR 0 9
46911: PPUSH
46912: CALL_OW 2
46916: ST_TO_ADDR
46917: GO 46845
46919: POP
46920: POP
// if tmp then
46921: LD_VAR 0 19
46925: IFFALSE 46937
// f := tmp ;
46927: LD_ADDR_VAR 0 12
46931: PUSH
46932: LD_VAR 0 19
46936: ST_TO_ADDR
// end ; x := personel [ i ] ;
46937: LD_ADDR_VAR 0 13
46941: PUSH
46942: LD_VAR 0 6
46946: PUSH
46947: LD_VAR 0 8
46951: ARRAY
46952: ST_TO_ADDR
// if x = - 1 then
46953: LD_VAR 0 13
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: EQUAL
46962: IFFALSE 47171
// begin for j in f do
46964: LD_ADDR_VAR 0 9
46968: PUSH
46969: LD_VAR 0 12
46973: PUSH
46974: FOR_IN
46975: IFFALSE 47167
// repeat InitHc ;
46977: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46981: LD_VAR 0 9
46985: PPUSH
46986: CALL_OW 266
46990: PUSH
46991: LD_INT 5
46993: EQUAL
46994: IFFALSE 47064
// begin if UnitsInside ( j ) < 3 then
46996: LD_VAR 0 9
47000: PPUSH
47001: CALL_OW 313
47005: PUSH
47006: LD_INT 3
47008: LESS
47009: IFFALSE 47045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47011: LD_INT 0
47013: PPUSH
47014: LD_INT 5
47016: PUSH
47017: LD_INT 8
47019: PUSH
47020: LD_INT 9
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: PUSH
47028: LD_VAR 0 17
47032: ARRAY
47033: PPUSH
47034: LD_VAR 0 4
47038: PPUSH
47039: CALL_OW 380
47043: GO 47062
// PrepareHuman ( false , i , skill ) ;
47045: LD_INT 0
47047: PPUSH
47048: LD_VAR 0 8
47052: PPUSH
47053: LD_VAR 0 4
47057: PPUSH
47058: CALL_OW 380
// end else
47062: GO 47081
// PrepareHuman ( false , i , skill ) ;
47064: LD_INT 0
47066: PPUSH
47067: LD_VAR 0 8
47071: PPUSH
47072: LD_VAR 0 4
47076: PPUSH
47077: CALL_OW 380
// un := CreateHuman ;
47081: LD_ADDR_VAR 0 14
47085: PUSH
47086: CALL_OW 44
47090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47091: LD_ADDR_VAR 0 7
47095: PUSH
47096: LD_VAR 0 7
47100: PPUSH
47101: LD_INT 1
47103: PPUSH
47104: LD_VAR 0 14
47108: PPUSH
47109: CALL_OW 2
47113: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47114: LD_VAR 0 14
47118: PPUSH
47119: LD_VAR 0 9
47123: PPUSH
47124: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47128: LD_VAR 0 9
47132: PPUSH
47133: CALL_OW 313
47137: PUSH
47138: LD_INT 6
47140: EQUAL
47141: PUSH
47142: LD_VAR 0 9
47146: PPUSH
47147: CALL_OW 266
47151: PUSH
47152: LD_INT 32
47154: PUSH
47155: LD_INT 31
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: IN
47162: OR
47163: IFFALSE 46977
47165: GO 46974
47167: POP
47168: POP
// end else
47169: GO 47551
// for j = 1 to x do
47171: LD_ADDR_VAR 0 9
47175: PUSH
47176: DOUBLE
47177: LD_INT 1
47179: DEC
47180: ST_TO_ADDR
47181: LD_VAR 0 13
47185: PUSH
47186: FOR_TO
47187: IFFALSE 47549
// begin InitHc ;
47189: CALL_OW 19
// if not f then
47193: LD_VAR 0 12
47197: NOT
47198: IFFALSE 47287
// begin PrepareHuman ( false , i , skill ) ;
47200: LD_INT 0
47202: PPUSH
47203: LD_VAR 0 8
47207: PPUSH
47208: LD_VAR 0 4
47212: PPUSH
47213: CALL_OW 380
// un := CreateHuman ;
47217: LD_ADDR_VAR 0 14
47221: PUSH
47222: CALL_OW 44
47226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47227: LD_ADDR_VAR 0 7
47231: PUSH
47232: LD_VAR 0 7
47236: PPUSH
47237: LD_INT 1
47239: PPUSH
47240: LD_VAR 0 14
47244: PPUSH
47245: CALL_OW 2
47249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47250: LD_VAR 0 14
47254: PPUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL_OW 250
47264: PPUSH
47265: LD_VAR 0 1
47269: PPUSH
47270: CALL_OW 251
47274: PPUSH
47275: LD_INT 10
47277: PPUSH
47278: LD_INT 0
47280: PPUSH
47281: CALL_OW 50
// continue ;
47285: GO 47186
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47287: LD_VAR 0 12
47291: PUSH
47292: LD_INT 1
47294: ARRAY
47295: PPUSH
47296: CALL_OW 313
47300: PUSH
47301: LD_VAR 0 12
47305: PUSH
47306: LD_INT 1
47308: ARRAY
47309: PPUSH
47310: CALL_OW 266
47314: PUSH
47315: LD_INT 32
47317: PUSH
47318: LD_INT 31
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: IN
47325: AND
47326: PUSH
47327: LD_VAR 0 12
47331: PUSH
47332: LD_INT 1
47334: ARRAY
47335: PPUSH
47336: CALL_OW 313
47340: PUSH
47341: LD_INT 6
47343: EQUAL
47344: OR
47345: IFFALSE 47365
// f := Delete ( f , 1 ) ;
47347: LD_ADDR_VAR 0 12
47351: PUSH
47352: LD_VAR 0 12
47356: PPUSH
47357: LD_INT 1
47359: PPUSH
47360: CALL_OW 3
47364: ST_TO_ADDR
// if not f then
47365: LD_VAR 0 12
47369: NOT
47370: IFFALSE 47388
// begin x := x + 2 ;
47372: LD_ADDR_VAR 0 13
47376: PUSH
47377: LD_VAR 0 13
47381: PUSH
47382: LD_INT 2
47384: PLUS
47385: ST_TO_ADDR
// continue ;
47386: GO 47186
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47388: LD_VAR 0 12
47392: PUSH
47393: LD_INT 1
47395: ARRAY
47396: PPUSH
47397: CALL_OW 266
47401: PUSH
47402: LD_INT 5
47404: EQUAL
47405: IFFALSE 47479
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47407: LD_VAR 0 12
47411: PUSH
47412: LD_INT 1
47414: ARRAY
47415: PPUSH
47416: CALL_OW 313
47420: PUSH
47421: LD_INT 3
47423: LESS
47424: IFFALSE 47460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47426: LD_INT 0
47428: PPUSH
47429: LD_INT 5
47431: PUSH
47432: LD_INT 8
47434: PUSH
47435: LD_INT 9
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: PUSH
47443: LD_VAR 0 17
47447: ARRAY
47448: PPUSH
47449: LD_VAR 0 4
47453: PPUSH
47454: CALL_OW 380
47458: GO 47477
// PrepareHuman ( false , i , skill ) ;
47460: LD_INT 0
47462: PPUSH
47463: LD_VAR 0 8
47467: PPUSH
47468: LD_VAR 0 4
47472: PPUSH
47473: CALL_OW 380
// end else
47477: GO 47496
// PrepareHuman ( false , i , skill ) ;
47479: LD_INT 0
47481: PPUSH
47482: LD_VAR 0 8
47486: PPUSH
47487: LD_VAR 0 4
47491: PPUSH
47492: CALL_OW 380
// un := CreateHuman ;
47496: LD_ADDR_VAR 0 14
47500: PUSH
47501: CALL_OW 44
47505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47506: LD_ADDR_VAR 0 7
47510: PUSH
47511: LD_VAR 0 7
47515: PPUSH
47516: LD_INT 1
47518: PPUSH
47519: LD_VAR 0 14
47523: PPUSH
47524: CALL_OW 2
47528: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47529: LD_VAR 0 14
47533: PPUSH
47534: LD_VAR 0 12
47538: PUSH
47539: LD_INT 1
47541: ARRAY
47542: PPUSH
47543: CALL_OW 52
// end ;
47547: GO 47186
47549: POP
47550: POP
// end ;
47551: GO 46488
47553: POP
47554: POP
// result := result ^ buildings ;
47555: LD_ADDR_VAR 0 7
47559: PUSH
47560: LD_VAR 0 7
47564: PUSH
47565: LD_VAR 0 18
47569: ADD
47570: ST_TO_ADDR
// end else
47571: GO 47714
// begin for i = 1 to personel do
47573: LD_ADDR_VAR 0 8
47577: PUSH
47578: DOUBLE
47579: LD_INT 1
47581: DEC
47582: ST_TO_ADDR
47583: LD_VAR 0 6
47587: PUSH
47588: FOR_TO
47589: IFFALSE 47712
// begin if i > 4 then
47591: LD_VAR 0 8
47595: PUSH
47596: LD_INT 4
47598: GREATER
47599: IFFALSE 47603
// break ;
47601: GO 47712
// x := personel [ i ] ;
47603: LD_ADDR_VAR 0 13
47607: PUSH
47608: LD_VAR 0 6
47612: PUSH
47613: LD_VAR 0 8
47617: ARRAY
47618: ST_TO_ADDR
// if x = - 1 then
47619: LD_VAR 0 13
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: EQUAL
47628: IFFALSE 47632
// continue ;
47630: GO 47588
// PrepareHuman ( false , i , skill ) ;
47632: LD_INT 0
47634: PPUSH
47635: LD_VAR 0 8
47639: PPUSH
47640: LD_VAR 0 4
47644: PPUSH
47645: CALL_OW 380
// un := CreateHuman ;
47649: LD_ADDR_VAR 0 14
47653: PUSH
47654: CALL_OW 44
47658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47659: LD_VAR 0 14
47663: PPUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: CALL_OW 250
47673: PPUSH
47674: LD_VAR 0 1
47678: PPUSH
47679: CALL_OW 251
47683: PPUSH
47684: LD_INT 10
47686: PPUSH
47687: LD_INT 0
47689: PPUSH
47690: CALL_OW 50
// result := result ^ un ;
47694: LD_ADDR_VAR 0 7
47698: PUSH
47699: LD_VAR 0 7
47703: PUSH
47704: LD_VAR 0 14
47708: ADD
47709: ST_TO_ADDR
// end ;
47710: GO 47588
47712: POP
47713: POP
// end ; end ;
47714: LD_VAR 0 7
47718: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47719: LD_INT 0
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
47725: PPUSH
47726: PPUSH
47727: PPUSH
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
47735: PPUSH
47736: PPUSH
// result := false ;
47737: LD_ADDR_VAR 0 3
47741: PUSH
47742: LD_INT 0
47744: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47745: LD_VAR 0 1
47749: NOT
47750: PUSH
47751: LD_VAR 0 1
47755: PPUSH
47756: CALL_OW 266
47760: PUSH
47761: LD_INT 32
47763: PUSH
47764: LD_INT 33
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: IN
47771: NOT
47772: OR
47773: IFFALSE 47777
// exit ;
47775: GO 48886
// nat := GetNation ( tower ) ;
47777: LD_ADDR_VAR 0 12
47781: PUSH
47782: LD_VAR 0 1
47786: PPUSH
47787: CALL_OW 248
47791: ST_TO_ADDR
// side := GetSide ( tower ) ;
47792: LD_ADDR_VAR 0 16
47796: PUSH
47797: LD_VAR 0 1
47801: PPUSH
47802: CALL_OW 255
47806: ST_TO_ADDR
// x := GetX ( tower ) ;
47807: LD_ADDR_VAR 0 10
47811: PUSH
47812: LD_VAR 0 1
47816: PPUSH
47817: CALL_OW 250
47821: ST_TO_ADDR
// y := GetY ( tower ) ;
47822: LD_ADDR_VAR 0 11
47826: PUSH
47827: LD_VAR 0 1
47831: PPUSH
47832: CALL_OW 251
47836: ST_TO_ADDR
// if not x or not y then
47837: LD_VAR 0 10
47841: NOT
47842: PUSH
47843: LD_VAR 0 11
47847: NOT
47848: OR
47849: IFFALSE 47853
// exit ;
47851: GO 48886
// weapon := 0 ;
47853: LD_ADDR_VAR 0 18
47857: PUSH
47858: LD_INT 0
47860: ST_TO_ADDR
// fac_list := [ ] ;
47861: LD_ADDR_VAR 0 17
47865: PUSH
47866: EMPTY
47867: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47868: LD_ADDR_VAR 0 6
47872: PUSH
47873: LD_VAR 0 1
47877: PPUSH
47878: CALL_OW 274
47882: PPUSH
47883: LD_VAR 0 2
47887: PPUSH
47888: LD_INT 0
47890: PPUSH
47891: CALL 45457 0 3
47895: PPUSH
47896: LD_INT 30
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PPUSH
47906: CALL_OW 72
47910: ST_TO_ADDR
// if not factories then
47911: LD_VAR 0 6
47915: NOT
47916: IFFALSE 47920
// exit ;
47918: GO 48886
// for i in factories do
47920: LD_ADDR_VAR 0 8
47924: PUSH
47925: LD_VAR 0 6
47929: PUSH
47930: FOR_IN
47931: IFFALSE 47956
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47933: LD_ADDR_VAR 0 17
47937: PUSH
47938: LD_VAR 0 17
47942: PUSH
47943: LD_VAR 0 8
47947: PPUSH
47948: CALL_OW 478
47952: UNION
47953: ST_TO_ADDR
47954: GO 47930
47956: POP
47957: POP
// if not fac_list then
47958: LD_VAR 0 17
47962: NOT
47963: IFFALSE 47967
// exit ;
47965: GO 48886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47967: LD_ADDR_VAR 0 5
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: LD_INT 5
47977: PUSH
47978: LD_INT 9
47980: PUSH
47981: LD_INT 10
47983: PUSH
47984: LD_INT 6
47986: PUSH
47987: LD_INT 7
47989: PUSH
47990: LD_INT 11
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 27
48004: PUSH
48005: LD_INT 28
48007: PUSH
48008: LD_INT 26
48010: PUSH
48011: LD_INT 30
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 43
48022: PUSH
48023: LD_INT 44
48025: PUSH
48026: LD_INT 46
48028: PUSH
48029: LD_INT 45
48031: PUSH
48032: LD_INT 47
48034: PUSH
48035: LD_INT 49
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: PUSH
48051: LD_VAR 0 12
48055: ARRAY
48056: ST_TO_ADDR
// list := list isect fac_list ;
48057: LD_ADDR_VAR 0 5
48061: PUSH
48062: LD_VAR 0 5
48066: PUSH
48067: LD_VAR 0 17
48071: ISECT
48072: ST_TO_ADDR
// if not list then
48073: LD_VAR 0 5
48077: NOT
48078: IFFALSE 48082
// exit ;
48080: GO 48886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48082: LD_VAR 0 12
48086: PUSH
48087: LD_INT 3
48089: EQUAL
48090: PUSH
48091: LD_INT 49
48093: PUSH
48094: LD_VAR 0 5
48098: IN
48099: AND
48100: PUSH
48101: LD_INT 31
48103: PPUSH
48104: LD_VAR 0 16
48108: PPUSH
48109: CALL_OW 321
48113: PUSH
48114: LD_INT 2
48116: EQUAL
48117: AND
48118: IFFALSE 48178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48120: LD_INT 22
48122: PUSH
48123: LD_VAR 0 16
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 35
48134: PUSH
48135: LD_INT 49
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 91
48144: PUSH
48145: LD_VAR 0 1
48149: PUSH
48150: LD_INT 10
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: PPUSH
48163: CALL_OW 69
48167: NOT
48168: IFFALSE 48178
// weapon := ru_time_lapser ;
48170: LD_ADDR_VAR 0 18
48174: PUSH
48175: LD_INT 49
48177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48178: LD_VAR 0 12
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: IN
48193: PUSH
48194: LD_INT 11
48196: PUSH
48197: LD_VAR 0 5
48201: IN
48202: PUSH
48203: LD_INT 30
48205: PUSH
48206: LD_VAR 0 5
48210: IN
48211: OR
48212: AND
48213: PUSH
48214: LD_INT 6
48216: PPUSH
48217: LD_VAR 0 16
48221: PPUSH
48222: CALL_OW 321
48226: PUSH
48227: LD_INT 2
48229: EQUAL
48230: AND
48231: IFFALSE 48396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48233: LD_INT 22
48235: PUSH
48236: LD_VAR 0 16
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 35
48250: PUSH
48251: LD_INT 11
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 35
48260: PUSH
48261: LD_INT 30
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 91
48275: PUSH
48276: LD_VAR 0 1
48280: PUSH
48281: LD_INT 18
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: PPUSH
48294: CALL_OW 69
48298: NOT
48299: PUSH
48300: LD_INT 22
48302: PUSH
48303: LD_VAR 0 16
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 30
48317: PUSH
48318: LD_INT 32
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 30
48327: PUSH
48328: LD_INT 33
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 91
48342: PUSH
48343: LD_VAR 0 1
48347: PUSH
48348: LD_INT 12
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: PPUSH
48364: CALL_OW 69
48368: PUSH
48369: LD_INT 2
48371: GREATER
48372: AND
48373: IFFALSE 48396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48375: LD_ADDR_VAR 0 18
48379: PUSH
48380: LD_INT 11
48382: PUSH
48383: LD_INT 30
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_VAR 0 12
48394: ARRAY
48395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48396: LD_VAR 0 18
48400: NOT
48401: PUSH
48402: LD_INT 40
48404: PPUSH
48405: LD_VAR 0 16
48409: PPUSH
48410: CALL_OW 321
48414: PUSH
48415: LD_INT 2
48417: EQUAL
48418: AND
48419: PUSH
48420: LD_INT 7
48422: PUSH
48423: LD_VAR 0 5
48427: IN
48428: PUSH
48429: LD_INT 28
48431: PUSH
48432: LD_VAR 0 5
48436: IN
48437: OR
48438: PUSH
48439: LD_INT 45
48441: PUSH
48442: LD_VAR 0 5
48446: IN
48447: OR
48448: AND
48449: IFFALSE 48703
// begin hex := GetHexInfo ( x , y ) ;
48451: LD_ADDR_VAR 0 4
48455: PUSH
48456: LD_VAR 0 10
48460: PPUSH
48461: LD_VAR 0 11
48465: PPUSH
48466: CALL_OW 546
48470: ST_TO_ADDR
// if hex [ 1 ] then
48471: LD_VAR 0 4
48475: PUSH
48476: LD_INT 1
48478: ARRAY
48479: IFFALSE 48483
// exit ;
48481: GO 48886
// height := hex [ 2 ] ;
48483: LD_ADDR_VAR 0 15
48487: PUSH
48488: LD_VAR 0 4
48492: PUSH
48493: LD_INT 2
48495: ARRAY
48496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48497: LD_ADDR_VAR 0 14
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: LD_INT 5
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// for i in tmp do
48520: LD_ADDR_VAR 0 8
48524: PUSH
48525: LD_VAR 0 14
48529: PUSH
48530: FOR_IN
48531: IFFALSE 48701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48533: LD_ADDR_VAR 0 9
48537: PUSH
48538: LD_VAR 0 10
48542: PPUSH
48543: LD_VAR 0 8
48547: PPUSH
48548: LD_INT 5
48550: PPUSH
48551: CALL_OW 272
48555: PUSH
48556: LD_VAR 0 11
48560: PPUSH
48561: LD_VAR 0 8
48565: PPUSH
48566: LD_INT 5
48568: PPUSH
48569: CALL_OW 273
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48578: LD_VAR 0 9
48582: PUSH
48583: LD_INT 1
48585: ARRAY
48586: PPUSH
48587: LD_VAR 0 9
48591: PUSH
48592: LD_INT 2
48594: ARRAY
48595: PPUSH
48596: CALL_OW 488
48600: IFFALSE 48699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48602: LD_ADDR_VAR 0 4
48606: PUSH
48607: LD_VAR 0 9
48611: PUSH
48612: LD_INT 1
48614: ARRAY
48615: PPUSH
48616: LD_VAR 0 9
48620: PUSH
48621: LD_INT 2
48623: ARRAY
48624: PPUSH
48625: CALL_OW 546
48629: ST_TO_ADDR
// if hex [ 1 ] then
48630: LD_VAR 0 4
48634: PUSH
48635: LD_INT 1
48637: ARRAY
48638: IFFALSE 48642
// continue ;
48640: GO 48530
// h := hex [ 2 ] ;
48642: LD_ADDR_VAR 0 13
48646: PUSH
48647: LD_VAR 0 4
48651: PUSH
48652: LD_INT 2
48654: ARRAY
48655: ST_TO_ADDR
// if h + 7 < height then
48656: LD_VAR 0 13
48660: PUSH
48661: LD_INT 7
48663: PLUS
48664: PUSH
48665: LD_VAR 0 15
48669: LESS
48670: IFFALSE 48699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48672: LD_ADDR_VAR 0 18
48676: PUSH
48677: LD_INT 7
48679: PUSH
48680: LD_INT 28
48682: PUSH
48683: LD_INT 45
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: PUSH
48691: LD_VAR 0 12
48695: ARRAY
48696: ST_TO_ADDR
// break ;
48697: GO 48701
// end ; end ; end ;
48699: GO 48530
48701: POP
48702: POP
// end ; if not weapon then
48703: LD_VAR 0 18
48707: NOT
48708: IFFALSE 48768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48710: LD_ADDR_VAR 0 5
48714: PUSH
48715: LD_VAR 0 5
48719: PUSH
48720: LD_INT 11
48722: PUSH
48723: LD_INT 30
48725: PUSH
48726: LD_INT 49
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: DIFF
48734: ST_TO_ADDR
// if not list then
48735: LD_VAR 0 5
48739: NOT
48740: IFFALSE 48744
// exit ;
48742: GO 48886
// weapon := list [ rand ( 1 , list ) ] ;
48744: LD_ADDR_VAR 0 18
48748: PUSH
48749: LD_VAR 0 5
48753: PUSH
48754: LD_INT 1
48756: PPUSH
48757: LD_VAR 0 5
48761: PPUSH
48762: CALL_OW 12
48766: ARRAY
48767: ST_TO_ADDR
// end ; if weapon then
48768: LD_VAR 0 18
48772: IFFALSE 48886
// begin tmp := CostOfWeapon ( weapon ) ;
48774: LD_ADDR_VAR 0 14
48778: PUSH
48779: LD_VAR 0 18
48783: PPUSH
48784: CALL_OW 451
48788: ST_TO_ADDR
// j := GetBase ( tower ) ;
48789: LD_ADDR_VAR 0 9
48793: PUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: CALL_OW 274
48803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48804: LD_VAR 0 9
48808: PPUSH
48809: LD_INT 1
48811: PPUSH
48812: CALL_OW 275
48816: PUSH
48817: LD_VAR 0 14
48821: PUSH
48822: LD_INT 1
48824: ARRAY
48825: GREATEREQUAL
48826: PUSH
48827: LD_VAR 0 9
48831: PPUSH
48832: LD_INT 2
48834: PPUSH
48835: CALL_OW 275
48839: PUSH
48840: LD_VAR 0 14
48844: PUSH
48845: LD_INT 2
48847: ARRAY
48848: GREATEREQUAL
48849: AND
48850: PUSH
48851: LD_VAR 0 9
48855: PPUSH
48856: LD_INT 3
48858: PPUSH
48859: CALL_OW 275
48863: PUSH
48864: LD_VAR 0 14
48868: PUSH
48869: LD_INT 3
48871: ARRAY
48872: GREATEREQUAL
48873: AND
48874: IFFALSE 48886
// result := weapon ;
48876: LD_ADDR_VAR 0 3
48880: PUSH
48881: LD_VAR 0 18
48885: ST_TO_ADDR
// end ; end ;
48886: LD_VAR 0 3
48890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48891: LD_INT 0
48893: PPUSH
48894: PPUSH
// result := true ;
48895: LD_ADDR_VAR 0 3
48899: PUSH
48900: LD_INT 1
48902: ST_TO_ADDR
// if array1 = array2 then
48903: LD_VAR 0 1
48907: PUSH
48908: LD_VAR 0 2
48912: EQUAL
48913: IFFALSE 48973
// begin for i = 1 to array1 do
48915: LD_ADDR_VAR 0 4
48919: PUSH
48920: DOUBLE
48921: LD_INT 1
48923: DEC
48924: ST_TO_ADDR
48925: LD_VAR 0 1
48929: PUSH
48930: FOR_TO
48931: IFFALSE 48969
// if array1 [ i ] <> array2 [ i ] then
48933: LD_VAR 0 1
48937: PUSH
48938: LD_VAR 0 4
48942: ARRAY
48943: PUSH
48944: LD_VAR 0 2
48948: PUSH
48949: LD_VAR 0 4
48953: ARRAY
48954: NONEQUAL
48955: IFFALSE 48967
// begin result := false ;
48957: LD_ADDR_VAR 0 3
48961: PUSH
48962: LD_INT 0
48964: ST_TO_ADDR
// break ;
48965: GO 48969
// end ;
48967: GO 48930
48969: POP
48970: POP
// end else
48971: GO 48981
// result := false ;
48973: LD_ADDR_VAR 0 3
48977: PUSH
48978: LD_INT 0
48980: ST_TO_ADDR
// end ;
48981: LD_VAR 0 3
48985: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48986: LD_INT 0
48988: PPUSH
48989: PPUSH
// if not array1 or not array2 then
48990: LD_VAR 0 1
48994: NOT
48995: PUSH
48996: LD_VAR 0 2
49000: NOT
49001: OR
49002: IFFALSE 49006
// exit ;
49004: GO 49070
// result := true ;
49006: LD_ADDR_VAR 0 3
49010: PUSH
49011: LD_INT 1
49013: ST_TO_ADDR
// for i = 1 to array1 do
49014: LD_ADDR_VAR 0 4
49018: PUSH
49019: DOUBLE
49020: LD_INT 1
49022: DEC
49023: ST_TO_ADDR
49024: LD_VAR 0 1
49028: PUSH
49029: FOR_TO
49030: IFFALSE 49068
// if array1 [ i ] <> array2 [ i ] then
49032: LD_VAR 0 1
49036: PUSH
49037: LD_VAR 0 4
49041: ARRAY
49042: PUSH
49043: LD_VAR 0 2
49047: PUSH
49048: LD_VAR 0 4
49052: ARRAY
49053: NONEQUAL
49054: IFFALSE 49066
// begin result := false ;
49056: LD_ADDR_VAR 0 3
49060: PUSH
49061: LD_INT 0
49063: ST_TO_ADDR
// break ;
49064: GO 49068
// end ;
49066: GO 49029
49068: POP
49069: POP
// end ;
49070: LD_VAR 0 3
49074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49075: LD_INT 0
49077: PPUSH
49078: PPUSH
49079: PPUSH
// pom := GetBase ( fac ) ;
49080: LD_ADDR_VAR 0 5
49084: PUSH
49085: LD_VAR 0 1
49089: PPUSH
49090: CALL_OW 274
49094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49095: LD_ADDR_VAR 0 4
49099: PUSH
49100: LD_VAR 0 2
49104: PUSH
49105: LD_INT 1
49107: ARRAY
49108: PPUSH
49109: LD_VAR 0 2
49113: PUSH
49114: LD_INT 2
49116: ARRAY
49117: PPUSH
49118: LD_VAR 0 2
49122: PUSH
49123: LD_INT 3
49125: ARRAY
49126: PPUSH
49127: LD_VAR 0 2
49131: PUSH
49132: LD_INT 4
49134: ARRAY
49135: PPUSH
49136: CALL_OW 449
49140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49141: LD_ADDR_VAR 0 3
49145: PUSH
49146: LD_VAR 0 5
49150: PPUSH
49151: LD_INT 1
49153: PPUSH
49154: CALL_OW 275
49158: PUSH
49159: LD_VAR 0 4
49163: PUSH
49164: LD_INT 1
49166: ARRAY
49167: GREATEREQUAL
49168: PUSH
49169: LD_VAR 0 5
49173: PPUSH
49174: LD_INT 2
49176: PPUSH
49177: CALL_OW 275
49181: PUSH
49182: LD_VAR 0 4
49186: PUSH
49187: LD_INT 2
49189: ARRAY
49190: GREATEREQUAL
49191: AND
49192: PUSH
49193: LD_VAR 0 5
49197: PPUSH
49198: LD_INT 3
49200: PPUSH
49201: CALL_OW 275
49205: PUSH
49206: LD_VAR 0 4
49210: PUSH
49211: LD_INT 3
49213: ARRAY
49214: GREATEREQUAL
49215: AND
49216: ST_TO_ADDR
// end ;
49217: LD_VAR 0 3
49221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49222: LD_INT 0
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
// pom := GetBase ( building ) ;
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_VAR 0 1
49237: PPUSH
49238: CALL_OW 274
49242: ST_TO_ADDR
// if not pom then
49243: LD_VAR 0 3
49247: NOT
49248: IFFALSE 49252
// exit ;
49250: GO 49422
// btype := GetBType ( building ) ;
49252: LD_ADDR_VAR 0 5
49256: PUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: CALL_OW 266
49266: ST_TO_ADDR
// if btype = b_armoury then
49267: LD_VAR 0 5
49271: PUSH
49272: LD_INT 4
49274: EQUAL
49275: IFFALSE 49285
// btype := b_barracks ;
49277: LD_ADDR_VAR 0 5
49281: PUSH
49282: LD_INT 5
49284: ST_TO_ADDR
// if btype = b_depot then
49285: LD_VAR 0 5
49289: PUSH
49290: LD_INT 0
49292: EQUAL
49293: IFFALSE 49303
// btype := b_warehouse ;
49295: LD_ADDR_VAR 0 5
49299: PUSH
49300: LD_INT 1
49302: ST_TO_ADDR
// if btype = b_workshop then
49303: LD_VAR 0 5
49307: PUSH
49308: LD_INT 2
49310: EQUAL
49311: IFFALSE 49321
// btype := b_factory ;
49313: LD_ADDR_VAR 0 5
49317: PUSH
49318: LD_INT 3
49320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49321: LD_ADDR_VAR 0 4
49325: PUSH
49326: LD_VAR 0 5
49330: PPUSH
49331: LD_VAR 0 1
49335: PPUSH
49336: CALL_OW 248
49340: PPUSH
49341: CALL_OW 450
49345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49346: LD_ADDR_VAR 0 2
49350: PUSH
49351: LD_VAR 0 3
49355: PPUSH
49356: LD_INT 1
49358: PPUSH
49359: CALL_OW 275
49363: PUSH
49364: LD_VAR 0 4
49368: PUSH
49369: LD_INT 1
49371: ARRAY
49372: GREATEREQUAL
49373: PUSH
49374: LD_VAR 0 3
49378: PPUSH
49379: LD_INT 2
49381: PPUSH
49382: CALL_OW 275
49386: PUSH
49387: LD_VAR 0 4
49391: PUSH
49392: LD_INT 2
49394: ARRAY
49395: GREATEREQUAL
49396: AND
49397: PUSH
49398: LD_VAR 0 3
49402: PPUSH
49403: LD_INT 3
49405: PPUSH
49406: CALL_OW 275
49410: PUSH
49411: LD_VAR 0 4
49415: PUSH
49416: LD_INT 3
49418: ARRAY
49419: GREATEREQUAL
49420: AND
49421: ST_TO_ADDR
// end ;
49422: LD_VAR 0 2
49426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49427: LD_INT 0
49429: PPUSH
49430: PPUSH
49431: PPUSH
// pom := GetBase ( building ) ;
49432: LD_ADDR_VAR 0 4
49436: PUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: CALL_OW 274
49446: ST_TO_ADDR
// if not pom then
49447: LD_VAR 0 4
49451: NOT
49452: IFFALSE 49456
// exit ;
49454: GO 49557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49456: LD_ADDR_VAR 0 5
49460: PUSH
49461: LD_VAR 0 2
49465: PPUSH
49466: LD_VAR 0 1
49470: PPUSH
49471: CALL_OW 248
49475: PPUSH
49476: CALL_OW 450
49480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_VAR 0 4
49490: PPUSH
49491: LD_INT 1
49493: PPUSH
49494: CALL_OW 275
49498: PUSH
49499: LD_VAR 0 5
49503: PUSH
49504: LD_INT 1
49506: ARRAY
49507: GREATEREQUAL
49508: PUSH
49509: LD_VAR 0 4
49513: PPUSH
49514: LD_INT 2
49516: PPUSH
49517: CALL_OW 275
49521: PUSH
49522: LD_VAR 0 5
49526: PUSH
49527: LD_INT 2
49529: ARRAY
49530: GREATEREQUAL
49531: AND
49532: PUSH
49533: LD_VAR 0 4
49537: PPUSH
49538: LD_INT 3
49540: PPUSH
49541: CALL_OW 275
49545: PUSH
49546: LD_VAR 0 5
49550: PUSH
49551: LD_INT 3
49553: ARRAY
49554: GREATEREQUAL
49555: AND
49556: ST_TO_ADDR
// end ;
49557: LD_VAR 0 3
49561: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49562: LD_INT 0
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
// result := false ;
49575: LD_ADDR_VAR 0 8
49579: PUSH
49580: LD_INT 0
49582: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49583: LD_VAR 0 5
49587: NOT
49588: PUSH
49589: LD_VAR 0 1
49593: NOT
49594: OR
49595: PUSH
49596: LD_VAR 0 2
49600: NOT
49601: OR
49602: PUSH
49603: LD_VAR 0 3
49607: NOT
49608: OR
49609: IFFALSE 49613
// exit ;
49611: GO 50427
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49613: LD_ADDR_VAR 0 14
49617: PUSH
49618: LD_VAR 0 1
49622: PPUSH
49623: LD_VAR 0 2
49627: PPUSH
49628: LD_VAR 0 3
49632: PPUSH
49633: LD_VAR 0 4
49637: PPUSH
49638: LD_VAR 0 5
49642: PUSH
49643: LD_INT 1
49645: ARRAY
49646: PPUSH
49647: CALL_OW 248
49651: PPUSH
49652: LD_INT 0
49654: PPUSH
49655: CALL 51664 0 6
49659: ST_TO_ADDR
// if not hexes then
49660: LD_VAR 0 14
49664: NOT
49665: IFFALSE 49669
// exit ;
49667: GO 50427
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49669: LD_ADDR_VAR 0 17
49673: PUSH
49674: LD_VAR 0 5
49678: PPUSH
49679: LD_INT 22
49681: PUSH
49682: LD_VAR 0 13
49686: PPUSH
49687: CALL_OW 255
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 30
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 30
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PPUSH
49728: CALL_OW 72
49732: ST_TO_ADDR
// for i = 1 to hexes do
49733: LD_ADDR_VAR 0 9
49737: PUSH
49738: DOUBLE
49739: LD_INT 1
49741: DEC
49742: ST_TO_ADDR
49743: LD_VAR 0 14
49747: PUSH
49748: FOR_TO
49749: IFFALSE 50425
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49751: LD_ADDR_VAR 0 13
49755: PUSH
49756: LD_VAR 0 14
49760: PUSH
49761: LD_VAR 0 9
49765: ARRAY
49766: PUSH
49767: LD_INT 1
49769: ARRAY
49770: PPUSH
49771: LD_VAR 0 14
49775: PUSH
49776: LD_VAR 0 9
49780: ARRAY
49781: PUSH
49782: LD_INT 2
49784: ARRAY
49785: PPUSH
49786: CALL_OW 428
49790: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49791: LD_VAR 0 14
49795: PUSH
49796: LD_VAR 0 9
49800: ARRAY
49801: PUSH
49802: LD_INT 1
49804: ARRAY
49805: PPUSH
49806: LD_VAR 0 14
49810: PUSH
49811: LD_VAR 0 9
49815: ARRAY
49816: PUSH
49817: LD_INT 2
49819: ARRAY
49820: PPUSH
49821: CALL_OW 351
49825: PUSH
49826: LD_VAR 0 14
49830: PUSH
49831: LD_VAR 0 9
49835: ARRAY
49836: PUSH
49837: LD_INT 1
49839: ARRAY
49840: PPUSH
49841: LD_VAR 0 14
49845: PUSH
49846: LD_VAR 0 9
49850: ARRAY
49851: PUSH
49852: LD_INT 2
49854: ARRAY
49855: PPUSH
49856: CALL_OW 488
49860: NOT
49861: OR
49862: PUSH
49863: LD_VAR 0 13
49867: PPUSH
49868: CALL_OW 247
49872: PUSH
49873: LD_INT 3
49875: EQUAL
49876: OR
49877: IFFALSE 49883
// exit ;
49879: POP
49880: POP
49881: GO 50427
// if not tmp then
49883: LD_VAR 0 13
49887: NOT
49888: IFFALSE 49892
// continue ;
49890: GO 49748
// result := true ;
49892: LD_ADDR_VAR 0 8
49896: PUSH
49897: LD_INT 1
49899: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49900: LD_VAR 0 6
49904: PUSH
49905: LD_VAR 0 13
49909: PPUSH
49910: CALL_OW 247
49914: PUSH
49915: LD_INT 2
49917: EQUAL
49918: AND
49919: PUSH
49920: LD_VAR 0 13
49924: PPUSH
49925: CALL_OW 263
49929: PUSH
49930: LD_INT 1
49932: EQUAL
49933: AND
49934: IFFALSE 50098
// begin if IsDrivenBy ( tmp ) then
49936: LD_VAR 0 13
49940: PPUSH
49941: CALL_OW 311
49945: IFFALSE 49949
// continue ;
49947: GO 49748
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49949: LD_VAR 0 6
49953: PPUSH
49954: LD_INT 3
49956: PUSH
49957: LD_INT 60
49959: PUSH
49960: EMPTY
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: LD_INT 55
49972: PUSH
49973: EMPTY
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PPUSH
49984: CALL_OW 72
49988: IFFALSE 50096
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49990: LD_ADDR_VAR 0 18
49994: PUSH
49995: LD_VAR 0 6
49999: PPUSH
50000: LD_INT 3
50002: PUSH
50003: LD_INT 60
50005: PUSH
50006: EMPTY
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: LD_INT 55
50018: PUSH
50019: EMPTY
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PPUSH
50030: CALL_OW 72
50034: PUSH
50035: LD_INT 1
50037: ARRAY
50038: ST_TO_ADDR
// if IsInUnit ( driver ) then
50039: LD_VAR 0 18
50043: PPUSH
50044: CALL_OW 310
50048: IFFALSE 50059
// ComExit ( driver ) ;
50050: LD_VAR 0 18
50054: PPUSH
50055: CALL 74848 0 1
// AddComEnterUnit ( driver , tmp ) ;
50059: LD_VAR 0 18
50063: PPUSH
50064: LD_VAR 0 13
50068: PPUSH
50069: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50073: LD_VAR 0 18
50077: PPUSH
50078: LD_VAR 0 7
50082: PPUSH
50083: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50087: LD_VAR 0 18
50091: PPUSH
50092: CALL_OW 181
// end ; continue ;
50096: GO 49748
// end ; if not cleaners or not tmp in cleaners then
50098: LD_VAR 0 6
50102: NOT
50103: PUSH
50104: LD_VAR 0 13
50108: PUSH
50109: LD_VAR 0 6
50113: IN
50114: NOT
50115: OR
50116: IFFALSE 50423
// begin if dep then
50118: LD_VAR 0 17
50122: IFFALSE 50258
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50124: LD_ADDR_VAR 0 16
50128: PUSH
50129: LD_VAR 0 17
50133: PUSH
50134: LD_INT 1
50136: ARRAY
50137: PPUSH
50138: CALL_OW 250
50142: PPUSH
50143: LD_VAR 0 17
50147: PUSH
50148: LD_INT 1
50150: ARRAY
50151: PPUSH
50152: CALL_OW 254
50156: PPUSH
50157: LD_INT 5
50159: PPUSH
50160: CALL_OW 272
50164: PUSH
50165: LD_VAR 0 17
50169: PUSH
50170: LD_INT 1
50172: ARRAY
50173: PPUSH
50174: CALL_OW 251
50178: PPUSH
50179: LD_VAR 0 17
50183: PUSH
50184: LD_INT 1
50186: ARRAY
50187: PPUSH
50188: CALL_OW 254
50192: PPUSH
50193: LD_INT 5
50195: PPUSH
50196: CALL_OW 273
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50205: LD_VAR 0 16
50209: PUSH
50210: LD_INT 1
50212: ARRAY
50213: PPUSH
50214: LD_VAR 0 16
50218: PUSH
50219: LD_INT 2
50221: ARRAY
50222: PPUSH
50223: CALL_OW 488
50227: IFFALSE 50258
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50229: LD_VAR 0 13
50233: PPUSH
50234: LD_VAR 0 16
50238: PUSH
50239: LD_INT 1
50241: ARRAY
50242: PPUSH
50243: LD_VAR 0 16
50247: PUSH
50248: LD_INT 2
50250: ARRAY
50251: PPUSH
50252: CALL_OW 111
// continue ;
50256: GO 49748
// end ; end ; r := GetDir ( tmp ) ;
50258: LD_ADDR_VAR 0 15
50262: PUSH
50263: LD_VAR 0 13
50267: PPUSH
50268: CALL_OW 254
50272: ST_TO_ADDR
// if r = 5 then
50273: LD_VAR 0 15
50277: PUSH
50278: LD_INT 5
50280: EQUAL
50281: IFFALSE 50291
// r := 0 ;
50283: LD_ADDR_VAR 0 15
50287: PUSH
50288: LD_INT 0
50290: ST_TO_ADDR
// for j = r to 5 do
50291: LD_ADDR_VAR 0 10
50295: PUSH
50296: DOUBLE
50297: LD_VAR 0 15
50301: DEC
50302: ST_TO_ADDR
50303: LD_INT 5
50305: PUSH
50306: FOR_TO
50307: IFFALSE 50421
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50309: LD_ADDR_VAR 0 11
50313: PUSH
50314: LD_VAR 0 13
50318: PPUSH
50319: CALL_OW 250
50323: PPUSH
50324: LD_VAR 0 10
50328: PPUSH
50329: LD_INT 2
50331: PPUSH
50332: CALL_OW 272
50336: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50337: LD_ADDR_VAR 0 12
50341: PUSH
50342: LD_VAR 0 13
50346: PPUSH
50347: CALL_OW 251
50351: PPUSH
50352: LD_VAR 0 10
50356: PPUSH
50357: LD_INT 2
50359: PPUSH
50360: CALL_OW 273
50364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50365: LD_VAR 0 11
50369: PPUSH
50370: LD_VAR 0 12
50374: PPUSH
50375: CALL_OW 488
50379: PUSH
50380: LD_VAR 0 11
50384: PPUSH
50385: LD_VAR 0 12
50389: PPUSH
50390: CALL_OW 428
50394: NOT
50395: AND
50396: IFFALSE 50419
// begin ComMoveXY ( tmp , _x , _y ) ;
50398: LD_VAR 0 13
50402: PPUSH
50403: LD_VAR 0 11
50407: PPUSH
50408: LD_VAR 0 12
50412: PPUSH
50413: CALL_OW 111
// break ;
50417: GO 50421
// end ; end ;
50419: GO 50306
50421: POP
50422: POP
// end ; end ;
50423: GO 49748
50425: POP
50426: POP
// end ;
50427: LD_VAR 0 8
50431: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50432: LD_INT 0
50434: PPUSH
// result := true ;
50435: LD_ADDR_VAR 0 3
50439: PUSH
50440: LD_INT 1
50442: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50443: LD_VAR 0 2
50447: PUSH
50448: LD_INT 24
50450: DOUBLE
50451: EQUAL
50452: IFTRUE 50462
50454: LD_INT 33
50456: DOUBLE
50457: EQUAL
50458: IFTRUE 50462
50460: GO 50487
50462: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50463: LD_ADDR_VAR 0 3
50467: PUSH
50468: LD_INT 32
50470: PPUSH
50471: LD_VAR 0 1
50475: PPUSH
50476: CALL_OW 321
50480: PUSH
50481: LD_INT 2
50483: EQUAL
50484: ST_TO_ADDR
50485: GO 50807
50487: LD_INT 20
50489: DOUBLE
50490: EQUAL
50491: IFTRUE 50495
50493: GO 50520
50495: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50496: LD_ADDR_VAR 0 3
50500: PUSH
50501: LD_INT 6
50503: PPUSH
50504: LD_VAR 0 1
50508: PPUSH
50509: CALL_OW 321
50513: PUSH
50514: LD_INT 2
50516: EQUAL
50517: ST_TO_ADDR
50518: GO 50807
50520: LD_INT 22
50522: DOUBLE
50523: EQUAL
50524: IFTRUE 50534
50526: LD_INT 36
50528: DOUBLE
50529: EQUAL
50530: IFTRUE 50534
50532: GO 50559
50534: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50535: LD_ADDR_VAR 0 3
50539: PUSH
50540: LD_INT 15
50542: PPUSH
50543: LD_VAR 0 1
50547: PPUSH
50548: CALL_OW 321
50552: PUSH
50553: LD_INT 2
50555: EQUAL
50556: ST_TO_ADDR
50557: GO 50807
50559: LD_INT 30
50561: DOUBLE
50562: EQUAL
50563: IFTRUE 50567
50565: GO 50592
50567: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50568: LD_ADDR_VAR 0 3
50572: PUSH
50573: LD_INT 20
50575: PPUSH
50576: LD_VAR 0 1
50580: PPUSH
50581: CALL_OW 321
50585: PUSH
50586: LD_INT 2
50588: EQUAL
50589: ST_TO_ADDR
50590: GO 50807
50592: LD_INT 28
50594: DOUBLE
50595: EQUAL
50596: IFTRUE 50606
50598: LD_INT 21
50600: DOUBLE
50601: EQUAL
50602: IFTRUE 50606
50604: GO 50631
50606: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50607: LD_ADDR_VAR 0 3
50611: PUSH
50612: LD_INT 21
50614: PPUSH
50615: LD_VAR 0 1
50619: PPUSH
50620: CALL_OW 321
50624: PUSH
50625: LD_INT 2
50627: EQUAL
50628: ST_TO_ADDR
50629: GO 50807
50631: LD_INT 16
50633: DOUBLE
50634: EQUAL
50635: IFTRUE 50639
50637: GO 50666
50639: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50640: LD_ADDR_VAR 0 3
50644: PUSH
50645: LD_EXP 74
50649: PPUSH
50650: LD_VAR 0 1
50654: PPUSH
50655: CALL_OW 321
50659: PUSH
50660: LD_INT 2
50662: EQUAL
50663: ST_TO_ADDR
50664: GO 50807
50666: LD_INT 19
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50680
50672: LD_INT 23
50674: DOUBLE
50675: EQUAL
50676: IFTRUE 50680
50678: GO 50707
50680: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50681: LD_ADDR_VAR 0 3
50685: PUSH
50686: LD_EXP 73
50690: PPUSH
50691: LD_VAR 0 1
50695: PPUSH
50696: CALL_OW 321
50700: PUSH
50701: LD_INT 2
50703: EQUAL
50704: ST_TO_ADDR
50705: GO 50807
50707: LD_INT 17
50709: DOUBLE
50710: EQUAL
50711: IFTRUE 50715
50713: GO 50740
50715: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50716: LD_ADDR_VAR 0 3
50720: PUSH
50721: LD_INT 39
50723: PPUSH
50724: LD_VAR 0 1
50728: PPUSH
50729: CALL_OW 321
50733: PUSH
50734: LD_INT 2
50736: EQUAL
50737: ST_TO_ADDR
50738: GO 50807
50740: LD_INT 18
50742: DOUBLE
50743: EQUAL
50744: IFTRUE 50748
50746: GO 50773
50748: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50749: LD_ADDR_VAR 0 3
50753: PUSH
50754: LD_INT 40
50756: PPUSH
50757: LD_VAR 0 1
50761: PPUSH
50762: CALL_OW 321
50766: PUSH
50767: LD_INT 2
50769: EQUAL
50770: ST_TO_ADDR
50771: GO 50807
50773: LD_INT 27
50775: DOUBLE
50776: EQUAL
50777: IFTRUE 50781
50779: GO 50806
50781: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50782: LD_ADDR_VAR 0 3
50786: PUSH
50787: LD_INT 35
50789: PPUSH
50790: LD_VAR 0 1
50794: PPUSH
50795: CALL_OW 321
50799: PUSH
50800: LD_INT 2
50802: EQUAL
50803: ST_TO_ADDR
50804: GO 50807
50806: POP
// end ;
50807: LD_VAR 0 3
50811: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50812: LD_INT 0
50814: PPUSH
50815: PPUSH
50816: PPUSH
50817: PPUSH
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
50822: PPUSH
50823: PPUSH
50824: PPUSH
// result := false ;
50825: LD_ADDR_VAR 0 6
50829: PUSH
50830: LD_INT 0
50832: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50833: LD_VAR 0 1
50837: NOT
50838: PUSH
50839: LD_VAR 0 1
50843: PPUSH
50844: CALL_OW 266
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: IN
50859: NOT
50860: OR
50861: PUSH
50862: LD_VAR 0 2
50866: NOT
50867: OR
50868: PUSH
50869: LD_VAR 0 5
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: LD_INT 4
50888: PUSH
50889: LD_INT 5
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: IN
50900: NOT
50901: OR
50902: PUSH
50903: LD_VAR 0 3
50907: PPUSH
50908: LD_VAR 0 4
50912: PPUSH
50913: CALL_OW 488
50917: NOT
50918: OR
50919: IFFALSE 50923
// exit ;
50921: GO 51659
// side := GetSide ( depot ) ;
50923: LD_ADDR_VAR 0 9
50927: PUSH
50928: LD_VAR 0 1
50932: PPUSH
50933: CALL_OW 255
50937: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50938: LD_VAR 0 9
50942: PPUSH
50943: LD_VAR 0 2
50947: PPUSH
50948: CALL 50432 0 2
50952: NOT
50953: IFFALSE 50957
// exit ;
50955: GO 51659
// pom := GetBase ( depot ) ;
50957: LD_ADDR_VAR 0 10
50961: PUSH
50962: LD_VAR 0 1
50966: PPUSH
50967: CALL_OW 274
50971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50972: LD_ADDR_VAR 0 11
50976: PUSH
50977: LD_VAR 0 2
50981: PPUSH
50982: LD_VAR 0 1
50986: PPUSH
50987: CALL_OW 248
50991: PPUSH
50992: CALL_OW 450
50996: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50997: LD_VAR 0 10
51001: PPUSH
51002: LD_INT 1
51004: PPUSH
51005: CALL_OW 275
51009: PUSH
51010: LD_VAR 0 11
51014: PUSH
51015: LD_INT 1
51017: ARRAY
51018: GREATEREQUAL
51019: PUSH
51020: LD_VAR 0 10
51024: PPUSH
51025: LD_INT 2
51027: PPUSH
51028: CALL_OW 275
51032: PUSH
51033: LD_VAR 0 11
51037: PUSH
51038: LD_INT 2
51040: ARRAY
51041: GREATEREQUAL
51042: AND
51043: PUSH
51044: LD_VAR 0 10
51048: PPUSH
51049: LD_INT 3
51051: PPUSH
51052: CALL_OW 275
51056: PUSH
51057: LD_VAR 0 11
51061: PUSH
51062: LD_INT 3
51064: ARRAY
51065: GREATEREQUAL
51066: AND
51067: NOT
51068: IFFALSE 51072
// exit ;
51070: GO 51659
// if GetBType ( depot ) = b_depot then
51072: LD_VAR 0 1
51076: PPUSH
51077: CALL_OW 266
51081: PUSH
51082: LD_INT 0
51084: EQUAL
51085: IFFALSE 51097
// dist := 28 else
51087: LD_ADDR_VAR 0 14
51091: PUSH
51092: LD_INT 28
51094: ST_TO_ADDR
51095: GO 51105
// dist := 36 ;
51097: LD_ADDR_VAR 0 14
51101: PUSH
51102: LD_INT 36
51104: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51105: LD_VAR 0 1
51109: PPUSH
51110: LD_VAR 0 3
51114: PPUSH
51115: LD_VAR 0 4
51119: PPUSH
51120: CALL_OW 297
51124: PUSH
51125: LD_VAR 0 14
51129: GREATER
51130: IFFALSE 51134
// exit ;
51132: GO 51659
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51134: LD_ADDR_VAR 0 12
51138: PUSH
51139: LD_VAR 0 2
51143: PPUSH
51144: LD_VAR 0 3
51148: PPUSH
51149: LD_VAR 0 4
51153: PPUSH
51154: LD_VAR 0 5
51158: PPUSH
51159: LD_VAR 0 1
51163: PPUSH
51164: CALL_OW 248
51168: PPUSH
51169: LD_INT 0
51171: PPUSH
51172: CALL 51664 0 6
51176: ST_TO_ADDR
// if not hexes then
51177: LD_VAR 0 12
51181: NOT
51182: IFFALSE 51186
// exit ;
51184: GO 51659
// hex := GetHexInfo ( x , y ) ;
51186: LD_ADDR_VAR 0 15
51190: PUSH
51191: LD_VAR 0 3
51195: PPUSH
51196: LD_VAR 0 4
51200: PPUSH
51201: CALL_OW 546
51205: ST_TO_ADDR
// if hex [ 1 ] then
51206: LD_VAR 0 15
51210: PUSH
51211: LD_INT 1
51213: ARRAY
51214: IFFALSE 51218
// exit ;
51216: GO 51659
// height := hex [ 2 ] ;
51218: LD_ADDR_VAR 0 13
51222: PUSH
51223: LD_VAR 0 15
51227: PUSH
51228: LD_INT 2
51230: ARRAY
51231: ST_TO_ADDR
// for i = 1 to hexes do
51232: LD_ADDR_VAR 0 7
51236: PUSH
51237: DOUBLE
51238: LD_INT 1
51240: DEC
51241: ST_TO_ADDR
51242: LD_VAR 0 12
51246: PUSH
51247: FOR_TO
51248: IFFALSE 51578
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51250: LD_VAR 0 12
51254: PUSH
51255: LD_VAR 0 7
51259: ARRAY
51260: PUSH
51261: LD_INT 1
51263: ARRAY
51264: PPUSH
51265: LD_VAR 0 12
51269: PUSH
51270: LD_VAR 0 7
51274: ARRAY
51275: PUSH
51276: LD_INT 2
51278: ARRAY
51279: PPUSH
51280: CALL_OW 488
51284: NOT
51285: PUSH
51286: LD_VAR 0 12
51290: PUSH
51291: LD_VAR 0 7
51295: ARRAY
51296: PUSH
51297: LD_INT 1
51299: ARRAY
51300: PPUSH
51301: LD_VAR 0 12
51305: PUSH
51306: LD_VAR 0 7
51310: ARRAY
51311: PUSH
51312: LD_INT 2
51314: ARRAY
51315: PPUSH
51316: CALL_OW 428
51320: PUSH
51321: LD_INT 0
51323: GREATER
51324: OR
51325: PUSH
51326: LD_VAR 0 12
51330: PUSH
51331: LD_VAR 0 7
51335: ARRAY
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: LD_VAR 0 12
51345: PUSH
51346: LD_VAR 0 7
51350: ARRAY
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: PPUSH
51356: CALL_OW 351
51360: OR
51361: IFFALSE 51367
// exit ;
51363: POP
51364: POP
51365: GO 51659
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51367: LD_ADDR_VAR 0 8
51371: PUSH
51372: LD_VAR 0 12
51376: PUSH
51377: LD_VAR 0 7
51381: ARRAY
51382: PUSH
51383: LD_INT 1
51385: ARRAY
51386: PPUSH
51387: LD_VAR 0 12
51391: PUSH
51392: LD_VAR 0 7
51396: ARRAY
51397: PUSH
51398: LD_INT 2
51400: ARRAY
51401: PPUSH
51402: CALL_OW 546
51406: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51407: LD_VAR 0 8
51411: PUSH
51412: LD_INT 1
51414: ARRAY
51415: PUSH
51416: LD_VAR 0 8
51420: PUSH
51421: LD_INT 2
51423: ARRAY
51424: PUSH
51425: LD_VAR 0 13
51429: PUSH
51430: LD_INT 2
51432: PLUS
51433: GREATER
51434: OR
51435: PUSH
51436: LD_VAR 0 8
51440: PUSH
51441: LD_INT 2
51443: ARRAY
51444: PUSH
51445: LD_VAR 0 13
51449: PUSH
51450: LD_INT 2
51452: MINUS
51453: LESS
51454: OR
51455: PUSH
51456: LD_VAR 0 8
51460: PUSH
51461: LD_INT 3
51463: ARRAY
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 8
51470: PUSH
51471: LD_INT 9
51473: PUSH
51474: LD_INT 10
51476: PUSH
51477: LD_INT 11
51479: PUSH
51480: LD_INT 12
51482: PUSH
51483: LD_INT 13
51485: PUSH
51486: LD_INT 16
51488: PUSH
51489: LD_INT 17
51491: PUSH
51492: LD_INT 18
51494: PUSH
51495: LD_INT 19
51497: PUSH
51498: LD_INT 20
51500: PUSH
51501: LD_INT 21
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: IN
51519: NOT
51520: OR
51521: PUSH
51522: LD_VAR 0 8
51526: PUSH
51527: LD_INT 5
51529: ARRAY
51530: NOT
51531: OR
51532: PUSH
51533: LD_VAR 0 8
51537: PUSH
51538: LD_INT 6
51540: ARRAY
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 7
51550: PUSH
51551: LD_INT 9
51553: PUSH
51554: LD_INT 10
51556: PUSH
51557: LD_INT 11
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: IN
51568: NOT
51569: OR
51570: IFFALSE 51576
// exit ;
51572: POP
51573: POP
51574: GO 51659
// end ;
51576: GO 51247
51578: POP
51579: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51580: LD_VAR 0 9
51584: PPUSH
51585: LD_VAR 0 3
51589: PPUSH
51590: LD_VAR 0 4
51594: PPUSH
51595: LD_INT 20
51597: PPUSH
51598: CALL 43605 0 4
51602: PUSH
51603: LD_INT 4
51605: ARRAY
51606: IFFALSE 51610
// exit ;
51608: GO 51659
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51610: LD_VAR 0 2
51614: PUSH
51615: LD_INT 29
51617: PUSH
51618: LD_INT 30
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: IN
51625: PUSH
51626: LD_VAR 0 3
51630: PPUSH
51631: LD_VAR 0 4
51635: PPUSH
51636: LD_VAR 0 9
51640: PPUSH
51641: CALL_OW 440
51645: NOT
51646: AND
51647: IFFALSE 51651
// exit ;
51649: GO 51659
// result := true ;
51651: LD_ADDR_VAR 0 6
51655: PUSH
51656: LD_INT 1
51658: ST_TO_ADDR
// end ;
51659: LD_VAR 0 6
51663: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51664: LD_INT 0
51666: PPUSH
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
51679: PPUSH
51680: PPUSH
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
51685: PPUSH
51686: PPUSH
51687: PPUSH
51688: PPUSH
51689: PPUSH
51690: PPUSH
51691: PPUSH
51692: PPUSH
51693: PPUSH
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
51703: PPUSH
51704: PPUSH
51705: PPUSH
51706: PPUSH
51707: PPUSH
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
// result = [ ] ;
51724: LD_ADDR_VAR 0 7
51728: PUSH
51729: EMPTY
51730: ST_TO_ADDR
// temp_list = [ ] ;
51731: LD_ADDR_VAR 0 9
51735: PUSH
51736: EMPTY
51737: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51738: LD_VAR 0 4
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: LD_INT 4
51757: PUSH
51758: LD_INT 5
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: IN
51769: NOT
51770: PUSH
51771: LD_VAR 0 1
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: IN
51786: PUSH
51787: LD_VAR 0 5
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: IN
51806: NOT
51807: AND
51808: OR
51809: IFFALSE 51813
// exit ;
51811: GO 70204
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51813: LD_VAR 0 1
51817: PUSH
51818: LD_INT 6
51820: PUSH
51821: LD_INT 7
51823: PUSH
51824: LD_INT 8
51826: PUSH
51827: LD_INT 13
51829: PUSH
51830: LD_INT 12
51832: PUSH
51833: LD_INT 15
51835: PUSH
51836: LD_INT 11
51838: PUSH
51839: LD_INT 14
51841: PUSH
51842: LD_INT 10
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: IN
51856: IFFALSE 51866
// btype = b_lab ;
51858: LD_ADDR_VAR 0 1
51862: PUSH
51863: LD_INT 6
51865: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51866: LD_VAR 0 6
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: IN
51885: NOT
51886: PUSH
51887: LD_VAR 0 1
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: LD_INT 6
51906: PUSH
51907: LD_INT 36
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: LD_INT 31
51918: PUSH
51919: LD_INT 32
51921: PUSH
51922: LD_INT 33
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: IN
51938: NOT
51939: PUSH
51940: LD_VAR 0 6
51944: PUSH
51945: LD_INT 1
51947: EQUAL
51948: AND
51949: OR
51950: PUSH
51951: LD_VAR 0 1
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: IN
51966: NOT
51967: PUSH
51968: LD_VAR 0 6
51972: PUSH
51973: LD_INT 2
51975: EQUAL
51976: AND
51977: OR
51978: IFFALSE 51988
// mode = 0 ;
51980: LD_ADDR_VAR 0 6
51984: PUSH
51985: LD_INT 0
51987: ST_TO_ADDR
// case mode of 0 :
51988: LD_VAR 0 6
51992: PUSH
51993: LD_INT 0
51995: DOUBLE
51996: EQUAL
51997: IFTRUE 52001
51999: GO 63454
52001: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52002: LD_ADDR_VAR 0 11
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52195: LD_ADDR_VAR 0 12
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52391: LD_ADDR_VAR 0 13
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52590: LD_ADDR_VAR 0 14
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52786: LD_ADDR_VAR 0 15
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52979: LD_ADDR_VAR 0 16
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53172: LD_ADDR_VAR 0 17
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53402: LD_ADDR_VAR 0 18
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53632: LD_ADDR_VAR 0 19
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53862: LD_ADDR_VAR 0 20
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54092: LD_ADDR_VAR 0 21
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54322: LD_ADDR_VAR 0 22
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54552: LD_ADDR_VAR 0 23
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54832: LD_ADDR_VAR 0 24
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55108: LD_ADDR_VAR 0 25
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55382: LD_ADDR_VAR 0 26
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 3
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55658: LD_ADDR_VAR 0 27
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55938: LD_ADDR_VAR 0 28
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 3
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56220: LD_ADDR_VAR 0 29
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56499: LD_ADDR_VAR 0 30
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56777: LD_ADDR_VAR 0 31
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57055: LD_ADDR_VAR 0 32
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57333: LD_ADDR_VAR 0 33
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57612: LD_ADDR_VAR 0 34
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57892: LD_ADDR_VAR 0 35
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58004: LD_ADDR_VAR 0 36
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58116: LD_ADDR_VAR 0 37
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58228: LD_ADDR_VAR 0 38
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58340: LD_ADDR_VAR 0 39
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58452: LD_ADDR_VAR 0 40
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58564: LD_ADDR_VAR 0 41
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58914: LD_ADDR_VAR 0 42
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: LD_INT 3
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59264: LD_ADDR_VAR 0 43
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 3
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 3
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59612: LD_ADDR_VAR 0 44
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 2
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59962: LD_ADDR_VAR 0 45
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: LD_INT 2
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60312: LD_ADDR_VAR 0 46
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 3
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60660: LD_ADDR_VAR 0 47
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60811: LD_ADDR_VAR 0 48
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60958: LD_ADDR_VAR 0 49
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61102: LD_ADDR_VAR 0 50
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61246: LD_ADDR_VAR 0 51
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61393: LD_ADDR_VAR 0 52
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61544: LD_ADDR_VAR 0 53
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61774: LD_ADDR_VAR 0 54
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62004: LD_ADDR_VAR 0 55
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62234: LD_ADDR_VAR 0 56
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: LD_INT 2
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62464: LD_ADDR_VAR 0 57
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62694: LD_ADDR_VAR 0 58
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62924: LD_ADDR_VAR 0 59
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63012: LD_ADDR_VAR 0 60
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63100: LD_ADDR_VAR 0 61
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63188: LD_ADDR_VAR 0 62
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63276: LD_ADDR_VAR 0 63
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63364: LD_ADDR_VAR 0 64
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 1
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// end ; 1 :
63452: GO 69349
63454: LD_INT 1
63456: DOUBLE
63457: EQUAL
63458: IFTRUE 63462
63460: GO 66085
63462: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63463: LD_ADDR_VAR 0 11
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: LD_INT 3
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 3
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63507: LD_ADDR_VAR 0 12
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 3
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63548: LD_ADDR_VAR 0 13
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63588: LD_ADDR_VAR 0 14
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: LD_INT 3
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 3
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63629: LD_ADDR_VAR 0 15
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 3
63647: NEG
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63673: LD_ADDR_VAR 0 16
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 3
63692: NEG
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: NEG
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63719: LD_ADDR_VAR 0 17
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 3
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 3
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63763: LD_ADDR_VAR 0 18
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 3
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: LIST
63803: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63804: LD_ADDR_VAR 0 19
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 3
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: LD_INT 3
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63844: LD_ADDR_VAR 0 20
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 3
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63885: LD_ADDR_VAR 0 21
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: LIST
63928: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63929: LD_ADDR_VAR 0 22
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 3
63948: NEG
63949: PUSH
63950: LD_INT 2
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 3
63960: NEG
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63975: LD_ADDR_VAR 0 23
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: LD_INT 4
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 3
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64019: LD_ADDR_VAR 0 24
64023: PUSH
64024: LD_INT 3
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 3
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64060: LD_ADDR_VAR 0 25
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 4
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: LD_INT 4
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64100: LD_ADDR_VAR 0 26
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: LD_INT 4
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 3
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64141: LD_ADDR_VAR 0 27
64145: PUSH
64146: LD_INT 3
64148: NEG
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: NEG
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64185: LD_ADDR_VAR 0 28
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 3
64204: NEG
64205: PUSH
64206: LD_INT 4
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 4
64216: NEG
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64231: LD_ADDR_VAR 0 29
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 3
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 4
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 4
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: LD_INT 5
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 5
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 4
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 6
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 6
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 5
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64386: LD_ADDR_VAR 0 30
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 3
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 4
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 4
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 5
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 5
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 6
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 6
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64529: LD_ADDR_VAR 0 31
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 4
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: LD_INT 4
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: LD_INT 4
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 5
64596: PUSH
64597: LD_INT 4
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 5
64606: PUSH
64607: LD_INT 5
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 4
64616: PUSH
64617: LD_INT 5
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 6
64626: PUSH
64627: LD_INT 5
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 6
64636: PUSH
64637: LD_INT 6
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 5
64646: PUSH
64647: LD_INT 6
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64668: LD_ADDR_VAR 0 32
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 2
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 4
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: LD_INT 4
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: LD_INT 3
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: LD_INT 5
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 5
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: LD_INT 4
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 6
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 6
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 5
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64811: LD_ADDR_VAR 0 33
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 3
64852: NEG
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 4
64863: NEG
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 4
64874: NEG
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 4
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 5
64897: NEG
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 5
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 5
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 6
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 6
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64966: LD_ADDR_VAR 0 34
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: LD_INT 3
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 3
64985: NEG
64986: PUSH
64987: LD_INT 2
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 3
64997: NEG
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: LD_INT 4
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: NEG
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 4
65033: NEG
65034: PUSH
65035: LD_INT 4
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 4
65045: NEG
65046: PUSH
65047: LD_INT 5
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 5
65057: NEG
65058: PUSH
65059: LD_INT 4
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 5
65069: NEG
65070: PUSH
65071: LD_INT 5
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 5
65081: NEG
65082: PUSH
65083: LD_INT 6
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 6
65093: NEG
65094: PUSH
65095: LD_INT 5
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 6
65105: NEG
65106: PUSH
65107: LD_INT 6
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65129: LD_ADDR_VAR 0 41
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 3
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65173: LD_ADDR_VAR 0 42
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65214: LD_ADDR_VAR 0 43
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65254: LD_ADDR_VAR 0 44
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65295: LD_ADDR_VAR 0 45
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65339: LD_ADDR_VAR 0 46
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 2
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: NEG
65371: PUSH
65372: LD_INT 2
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65385: LD_ADDR_VAR 0 47
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: LD_INT 3
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 3
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65418: LD_ADDR_VAR 0 48
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65449: LD_ADDR_VAR 0 49
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 3
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65478: LD_ADDR_VAR 0 50
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: LD_INT 3
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 3
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65507: LD_ADDR_VAR 0 51
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65538: LD_ADDR_VAR 0 52
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 3
65557: NEG
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65571: LD_ADDR_VAR 0 53
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: LD_INT 3
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 3
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65615: LD_ADDR_VAR 0 54
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 3
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65656: LD_ADDR_VAR 0 55
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: LD_INT 3
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: LD_INT 3
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: LIST
65695: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65696: LD_ADDR_VAR 0 56
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 2
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65737: LD_ADDR_VAR 0 57
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 3
65755: NEG
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 3
65766: NEG
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65781: LD_ADDR_VAR 0 58
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 3
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 3
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 3
65812: NEG
65813: PUSH
65814: LD_INT 3
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65827: LD_ADDR_VAR 0 59
65831: PUSH
65832: LD_INT 1
65834: NEG
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 2
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65871: LD_ADDR_VAR 0 60
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65912: LD_ADDR_VAR 0 61
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65952: LD_ADDR_VAR 0 62
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65993: LD_ADDR_VAR 0 63
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66037: LD_ADDR_VAR 0 64
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 2
66056: NEG
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: ST_TO_ADDR
// end ; 2 :
66083: GO 69349
66085: LD_INT 2
66087: DOUBLE
66088: EQUAL
66089: IFTRUE 66093
66091: GO 69348
66093: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66094: LD_ADDR_VAR 0 29
66098: PUSH
66099: LD_INT 4
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 4
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 5
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 4
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 3
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 3
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 5
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 3
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 4
66214: PUSH
66215: LD_INT 3
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 4
66224: PUSH
66225: LD_INT 4
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: LD_INT 4
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 3
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: LD_INT 2
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: LD_INT 4
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: LD_INT 4
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 4
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: LD_INT 5
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: LD_INT 5
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: LD_INT 4
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: LD_INT 5
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 3
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 3
66377: NEG
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 3
66422: NEG
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: NEG
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 4
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 4
66456: NEG
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 4
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 4
66491: NEG
66492: PUSH
66493: LD_INT 5
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: LD_INT 4
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 3
66515: NEG
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 4
66527: NEG
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 5
66539: NEG
66540: PUSH
66541: LD_INT 4
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 5
66551: NEG
66552: PUSH
66553: LD_INT 5
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 3
66563: NEG
66564: PUSH
66565: LD_INT 5
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 5
66575: NEG
66576: PUSH
66577: LD_INT 3
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66632: LD_ADDR_VAR 0 30
66636: PUSH
66637: LD_INT 4
66639: PUSH
66640: LD_INT 4
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 4
66649: PUSH
66650: LD_INT 3
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: LD_INT 4
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: LD_INT 5
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: LD_INT 5
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: LD_INT 4
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 5
66709: PUSH
66710: LD_INT 3
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 3
66719: PUSH
66720: LD_INT 5
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 3
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: LD_INT 3
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: LD_INT 4
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 4
66822: NEG
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 4
66833: NEG
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 3
66845: NEG
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 4
66867: NEG
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 5
66878: NEG
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 5
66889: NEG
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 5
66901: NEG
66902: PUSH
66903: LD_INT 2
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: LD_INT 2
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 3
66936: NEG
66937: PUSH
66938: LD_INT 4
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 3
66972: NEG
66973: PUSH
66974: LD_INT 2
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 3
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 4
66996: NEG
66997: PUSH
66998: LD_INT 4
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 2
67008: NEG
67009: PUSH
67010: LD_INT 4
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 4
67020: NEG
67021: PUSH
67022: LD_INT 2
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_INT 4
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 5
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 4
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: LD_INT 4
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: LD_INT 5
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 2
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: LD_INT 5
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67179: LD_ADDR_VAR 0 31
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 4
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 5
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 5
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: NEG
67237: PUSH
67238: LD_INT 4
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: NEG
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 2
67258: PUSH
67259: LD_INT 5
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: LD_INT 3
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 3
67279: NEG
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 3
67324: NEG
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 4
67335: NEG
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 4
67346: NEG
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 4
67358: NEG
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 2
67370: NEG
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 4
67381: NEG
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: LD_INT 5
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: LD_INT 4
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 3
67417: NEG
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 5
67441: NEG
67442: PUSH
67443: LD_INT 4
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 5
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 3
67465: NEG
67466: PUSH
67467: LD_INT 5
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 5
67477: NEG
67478: PUSH
67479: LD_INT 3
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: LD_INT 3
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: LD_INT 4
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: LD_INT 2
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: LD_INT 2
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 3
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: LD_INT 4
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 2
67568: PUSH
67569: LD_INT 2
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: LD_INT 4
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 4
67601: PUSH
67602: LD_INT 1
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 5
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 5
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 3
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 5
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67729: LD_ADDR_VAR 0 32
67733: PUSH
67734: LD_INT 4
67736: NEG
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 4
67747: NEG
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 3
67759: NEG
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 3
67770: NEG
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 4
67781: NEG
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 5
67792: NEG
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 5
67803: NEG
67804: PUSH
67805: LD_INT 1
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 5
67815: NEG
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 3
67827: NEG
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 3
67838: NEG
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: NEG
67851: PUSH
67852: LD_INT 4
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: LD_INT 3
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 2
67874: NEG
67875: PUSH
67876: LD_INT 2
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 4
67898: NEG
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 4
67910: NEG
67911: PUSH
67912: LD_INT 4
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: LD_INT 4
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 4
67934: NEG
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 4
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 5
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: LD_INT 4
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 5
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 2
68036: NEG
68037: PUSH
68038: LD_INT 5
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 4
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: PUSH
68121: LD_INT 2
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 4
68131: PUSH
68132: LD_INT 2
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: LD_INT 4
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: LD_INT 3
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 5
68161: PUSH
68162: LD_INT 4
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 5
68171: PUSH
68172: LD_INT 5
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: LD_INT 5
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: LD_INT 4
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: LD_INT 3
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 5
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: LD_INT 5
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68276: LD_ADDR_VAR 0 33
68280: PUSH
68281: LD_INT 4
68283: NEG
68284: PUSH
68285: LD_INT 4
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 4
68295: NEG
68296: PUSH
68297: LD_INT 5
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 4
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 5
68343: NEG
68344: PUSH
68345: LD_INT 4
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 5
68355: NEG
68356: PUSH
68357: LD_INT 5
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: NEG
68368: PUSH
68369: LD_INT 5
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 5
68379: NEG
68380: PUSH
68381: LD_INT 3
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: LD_INT 3
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: LD_INT 4
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 1
68413: PUSH
68414: LD_INT 3
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 1
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 2
68481: NEG
68482: PUSH
68483: LD_INT 4
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 5
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 5
68524: PUSH
68525: LD_INT 1
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: PUSH
68535: LD_INT 1
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 3
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 3
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: LD_INT 2
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 5
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 3
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 3
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: LD_INT 4
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: LD_INT 3
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: LD_INT 2
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: PUSH
68657: LD_INT 2
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 2
68666: PUSH
68667: LD_INT 4
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: LD_INT 4
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: LD_INT 3
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: LD_INT 4
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: LD_INT 5
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 5
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 1
68726: NEG
68727: PUSH
68728: LD_INT 4
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 1
68737: NEG
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: LD_INT 5
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 2
68758: NEG
68759: PUSH
68760: LD_INT 3
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68814: LD_ADDR_VAR 0 34
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 4
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 5
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 1
68843: PUSH
68844: LD_INT 4
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: LD_INT 5
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: LD_INT 5
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 3
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 4
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 4
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 2
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: PUSH
68985: LD_INT 1
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 2
68995: PUSH
68996: LD_INT 2
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 4
69006: PUSH
69007: LD_INT 2
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 4
69016: PUSH
69017: LD_INT 4
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 5
69036: PUSH
69037: LD_INT 4
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 5
69046: PUSH
69047: LD_INT 5
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 4
69056: PUSH
69057: LD_INT 5
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 3
69066: PUSH
69067: LD_INT 4
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 5
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 5
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: LD_INT 3
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: LD_INT 4
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: LD_INT 4
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: NEG
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 1
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 3
69233: NEG
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 4
69244: NEG
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 5
69255: NEG
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 5
69278: NEG
69279: PUSH
69280: LD_INT 2
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: ST_TO_ADDR
// end ; end ;
69346: GO 69349
69348: POP
// case btype of b_depot , b_warehouse :
69349: LD_VAR 0 1
69353: PUSH
69354: LD_INT 0
69356: DOUBLE
69357: EQUAL
69358: IFTRUE 69368
69360: LD_INT 1
69362: DOUBLE
69363: EQUAL
69364: IFTRUE 69368
69366: GO 69569
69368: POP
// case nation of nation_american :
69369: LD_VAR 0 5
69373: PUSH
69374: LD_INT 1
69376: DOUBLE
69377: EQUAL
69378: IFTRUE 69382
69380: GO 69438
69382: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69383: LD_ADDR_VAR 0 9
69387: PUSH
69388: LD_VAR 0 11
69392: PUSH
69393: LD_VAR 0 12
69397: PUSH
69398: LD_VAR 0 13
69402: PUSH
69403: LD_VAR 0 14
69407: PUSH
69408: LD_VAR 0 15
69412: PUSH
69413: LD_VAR 0 16
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: PUSH
69426: LD_VAR 0 4
69430: PUSH
69431: LD_INT 1
69433: PLUS
69434: ARRAY
69435: ST_TO_ADDR
69436: GO 69567
69438: LD_INT 2
69440: DOUBLE
69441: EQUAL
69442: IFTRUE 69446
69444: GO 69502
69446: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69447: LD_ADDR_VAR 0 9
69451: PUSH
69452: LD_VAR 0 17
69456: PUSH
69457: LD_VAR 0 18
69461: PUSH
69462: LD_VAR 0 19
69466: PUSH
69467: LD_VAR 0 20
69471: PUSH
69472: LD_VAR 0 21
69476: PUSH
69477: LD_VAR 0 22
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: PUSH
69490: LD_VAR 0 4
69494: PUSH
69495: LD_INT 1
69497: PLUS
69498: ARRAY
69499: ST_TO_ADDR
69500: GO 69567
69502: LD_INT 3
69504: DOUBLE
69505: EQUAL
69506: IFTRUE 69510
69508: GO 69566
69510: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69511: LD_ADDR_VAR 0 9
69515: PUSH
69516: LD_VAR 0 23
69520: PUSH
69521: LD_VAR 0 24
69525: PUSH
69526: LD_VAR 0 25
69530: PUSH
69531: LD_VAR 0 26
69535: PUSH
69536: LD_VAR 0 27
69540: PUSH
69541: LD_VAR 0 28
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: PUSH
69554: LD_VAR 0 4
69558: PUSH
69559: LD_INT 1
69561: PLUS
69562: ARRAY
69563: ST_TO_ADDR
69564: GO 69567
69566: POP
69567: GO 70122
69569: LD_INT 2
69571: DOUBLE
69572: EQUAL
69573: IFTRUE 69583
69575: LD_INT 3
69577: DOUBLE
69578: EQUAL
69579: IFTRUE 69583
69581: GO 69639
69583: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69584: LD_ADDR_VAR 0 9
69588: PUSH
69589: LD_VAR 0 29
69593: PUSH
69594: LD_VAR 0 30
69598: PUSH
69599: LD_VAR 0 31
69603: PUSH
69604: LD_VAR 0 32
69608: PUSH
69609: LD_VAR 0 33
69613: PUSH
69614: LD_VAR 0 34
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: PUSH
69627: LD_VAR 0 4
69631: PUSH
69632: LD_INT 1
69634: PLUS
69635: ARRAY
69636: ST_TO_ADDR
69637: GO 70122
69639: LD_INT 16
69641: DOUBLE
69642: EQUAL
69643: IFTRUE 69701
69645: LD_INT 17
69647: DOUBLE
69648: EQUAL
69649: IFTRUE 69701
69651: LD_INT 18
69653: DOUBLE
69654: EQUAL
69655: IFTRUE 69701
69657: LD_INT 19
69659: DOUBLE
69660: EQUAL
69661: IFTRUE 69701
69663: LD_INT 22
69665: DOUBLE
69666: EQUAL
69667: IFTRUE 69701
69669: LD_INT 20
69671: DOUBLE
69672: EQUAL
69673: IFTRUE 69701
69675: LD_INT 21
69677: DOUBLE
69678: EQUAL
69679: IFTRUE 69701
69681: LD_INT 23
69683: DOUBLE
69684: EQUAL
69685: IFTRUE 69701
69687: LD_INT 24
69689: DOUBLE
69690: EQUAL
69691: IFTRUE 69701
69693: LD_INT 25
69695: DOUBLE
69696: EQUAL
69697: IFTRUE 69701
69699: GO 69757
69701: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69702: LD_ADDR_VAR 0 9
69706: PUSH
69707: LD_VAR 0 35
69711: PUSH
69712: LD_VAR 0 36
69716: PUSH
69717: LD_VAR 0 37
69721: PUSH
69722: LD_VAR 0 38
69726: PUSH
69727: LD_VAR 0 39
69731: PUSH
69732: LD_VAR 0 40
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: PUSH
69745: LD_VAR 0 4
69749: PUSH
69750: LD_INT 1
69752: PLUS
69753: ARRAY
69754: ST_TO_ADDR
69755: GO 70122
69757: LD_INT 6
69759: DOUBLE
69760: EQUAL
69761: IFTRUE 69813
69763: LD_INT 7
69765: DOUBLE
69766: EQUAL
69767: IFTRUE 69813
69769: LD_INT 8
69771: DOUBLE
69772: EQUAL
69773: IFTRUE 69813
69775: LD_INT 13
69777: DOUBLE
69778: EQUAL
69779: IFTRUE 69813
69781: LD_INT 12
69783: DOUBLE
69784: EQUAL
69785: IFTRUE 69813
69787: LD_INT 15
69789: DOUBLE
69790: EQUAL
69791: IFTRUE 69813
69793: LD_INT 11
69795: DOUBLE
69796: EQUAL
69797: IFTRUE 69813
69799: LD_INT 14
69801: DOUBLE
69802: EQUAL
69803: IFTRUE 69813
69805: LD_INT 10
69807: DOUBLE
69808: EQUAL
69809: IFTRUE 69813
69811: GO 69869
69813: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69814: LD_ADDR_VAR 0 9
69818: PUSH
69819: LD_VAR 0 41
69823: PUSH
69824: LD_VAR 0 42
69828: PUSH
69829: LD_VAR 0 43
69833: PUSH
69834: LD_VAR 0 44
69838: PUSH
69839: LD_VAR 0 45
69843: PUSH
69844: LD_VAR 0 46
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: PUSH
69857: LD_VAR 0 4
69861: PUSH
69862: LD_INT 1
69864: PLUS
69865: ARRAY
69866: ST_TO_ADDR
69867: GO 70122
69869: LD_INT 36
69871: DOUBLE
69872: EQUAL
69873: IFTRUE 69877
69875: GO 69933
69877: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69878: LD_ADDR_VAR 0 9
69882: PUSH
69883: LD_VAR 0 47
69887: PUSH
69888: LD_VAR 0 48
69892: PUSH
69893: LD_VAR 0 49
69897: PUSH
69898: LD_VAR 0 50
69902: PUSH
69903: LD_VAR 0 51
69907: PUSH
69908: LD_VAR 0 52
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: PUSH
69921: LD_VAR 0 4
69925: PUSH
69926: LD_INT 1
69928: PLUS
69929: ARRAY
69930: ST_TO_ADDR
69931: GO 70122
69933: LD_INT 4
69935: DOUBLE
69936: EQUAL
69937: IFTRUE 69959
69939: LD_INT 5
69941: DOUBLE
69942: EQUAL
69943: IFTRUE 69959
69945: LD_INT 34
69947: DOUBLE
69948: EQUAL
69949: IFTRUE 69959
69951: LD_INT 37
69953: DOUBLE
69954: EQUAL
69955: IFTRUE 69959
69957: GO 70015
69959: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69960: LD_ADDR_VAR 0 9
69964: PUSH
69965: LD_VAR 0 53
69969: PUSH
69970: LD_VAR 0 54
69974: PUSH
69975: LD_VAR 0 55
69979: PUSH
69980: LD_VAR 0 56
69984: PUSH
69985: LD_VAR 0 57
69989: PUSH
69990: LD_VAR 0 58
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: PUSH
70003: LD_VAR 0 4
70007: PUSH
70008: LD_INT 1
70010: PLUS
70011: ARRAY
70012: ST_TO_ADDR
70013: GO 70122
70015: LD_INT 31
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70065
70021: LD_INT 32
70023: DOUBLE
70024: EQUAL
70025: IFTRUE 70065
70027: LD_INT 33
70029: DOUBLE
70030: EQUAL
70031: IFTRUE 70065
70033: LD_INT 27
70035: DOUBLE
70036: EQUAL
70037: IFTRUE 70065
70039: LD_INT 26
70041: DOUBLE
70042: EQUAL
70043: IFTRUE 70065
70045: LD_INT 28
70047: DOUBLE
70048: EQUAL
70049: IFTRUE 70065
70051: LD_INT 29
70053: DOUBLE
70054: EQUAL
70055: IFTRUE 70065
70057: LD_INT 30
70059: DOUBLE
70060: EQUAL
70061: IFTRUE 70065
70063: GO 70121
70065: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70066: LD_ADDR_VAR 0 9
70070: PUSH
70071: LD_VAR 0 59
70075: PUSH
70076: LD_VAR 0 60
70080: PUSH
70081: LD_VAR 0 61
70085: PUSH
70086: LD_VAR 0 62
70090: PUSH
70091: LD_VAR 0 63
70095: PUSH
70096: LD_VAR 0 64
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: PUSH
70109: LD_VAR 0 4
70113: PUSH
70114: LD_INT 1
70116: PLUS
70117: ARRAY
70118: ST_TO_ADDR
70119: GO 70122
70121: POP
// temp_list2 = [ ] ;
70122: LD_ADDR_VAR 0 10
70126: PUSH
70127: EMPTY
70128: ST_TO_ADDR
// for i in temp_list do
70129: LD_ADDR_VAR 0 8
70133: PUSH
70134: LD_VAR 0 9
70138: PUSH
70139: FOR_IN
70140: IFFALSE 70192
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70142: LD_ADDR_VAR 0 10
70146: PUSH
70147: LD_VAR 0 10
70151: PUSH
70152: LD_VAR 0 8
70156: PUSH
70157: LD_INT 1
70159: ARRAY
70160: PUSH
70161: LD_VAR 0 2
70165: PLUS
70166: PUSH
70167: LD_VAR 0 8
70171: PUSH
70172: LD_INT 2
70174: ARRAY
70175: PUSH
70176: LD_VAR 0 3
70180: PLUS
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: EMPTY
70187: LIST
70188: ADD
70189: ST_TO_ADDR
70190: GO 70139
70192: POP
70193: POP
// result = temp_list2 ;
70194: LD_ADDR_VAR 0 7
70198: PUSH
70199: LD_VAR 0 10
70203: ST_TO_ADDR
// end ;
70204: LD_VAR 0 7
70208: RET
// export function EnemyInRange ( unit , dist ) ; begin
70209: LD_INT 0
70211: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70212: LD_ADDR_VAR 0 3
70216: PUSH
70217: LD_VAR 0 1
70221: PPUSH
70222: CALL_OW 255
70226: PPUSH
70227: LD_VAR 0 1
70231: PPUSH
70232: CALL_OW 250
70236: PPUSH
70237: LD_VAR 0 1
70241: PPUSH
70242: CALL_OW 251
70246: PPUSH
70247: LD_VAR 0 2
70251: PPUSH
70252: CALL 43605 0 4
70256: PUSH
70257: LD_INT 4
70259: ARRAY
70260: ST_TO_ADDR
// end ;
70261: LD_VAR 0 3
70265: RET
// export function PlayerSeeMe ( unit ) ; begin
70266: LD_INT 0
70268: PPUSH
// result := See ( your_side , unit ) ;
70269: LD_ADDR_VAR 0 2
70273: PUSH
70274: LD_OWVAR 2
70278: PPUSH
70279: LD_VAR 0 1
70283: PPUSH
70284: CALL_OW 292
70288: ST_TO_ADDR
// end ;
70289: LD_VAR 0 2
70293: RET
// export function ReverseDir ( unit ) ; begin
70294: LD_INT 0
70296: PPUSH
// if not unit then
70297: LD_VAR 0 1
70301: NOT
70302: IFFALSE 70306
// exit ;
70304: GO 70329
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70306: LD_ADDR_VAR 0 2
70310: PUSH
70311: LD_VAR 0 1
70315: PPUSH
70316: CALL_OW 254
70320: PUSH
70321: LD_INT 3
70323: PLUS
70324: PUSH
70325: LD_INT 6
70327: MOD
70328: ST_TO_ADDR
// end ;
70329: LD_VAR 0 2
70333: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70334: LD_INT 0
70336: PPUSH
70337: PPUSH
70338: PPUSH
70339: PPUSH
70340: PPUSH
// if not hexes then
70341: LD_VAR 0 2
70345: NOT
70346: IFFALSE 70350
// exit ;
70348: GO 70498
// dist := 9999 ;
70350: LD_ADDR_VAR 0 5
70354: PUSH
70355: LD_INT 9999
70357: ST_TO_ADDR
// for i = 1 to hexes do
70358: LD_ADDR_VAR 0 4
70362: PUSH
70363: DOUBLE
70364: LD_INT 1
70366: DEC
70367: ST_TO_ADDR
70368: LD_VAR 0 2
70372: PUSH
70373: FOR_TO
70374: IFFALSE 70486
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70376: LD_VAR 0 1
70380: PPUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_VAR 0 4
70390: ARRAY
70391: PUSH
70392: LD_INT 1
70394: ARRAY
70395: PPUSH
70396: LD_VAR 0 2
70400: PUSH
70401: LD_VAR 0 4
70405: ARRAY
70406: PUSH
70407: LD_INT 2
70409: ARRAY
70410: PPUSH
70411: CALL_OW 297
70415: PUSH
70416: LD_VAR 0 5
70420: LESS
70421: IFFALSE 70484
// begin hex := hexes [ i ] ;
70423: LD_ADDR_VAR 0 7
70427: PUSH
70428: LD_VAR 0 2
70432: PUSH
70433: LD_VAR 0 4
70437: ARRAY
70438: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70439: LD_ADDR_VAR 0 5
70443: PUSH
70444: LD_VAR 0 1
70448: PPUSH
70449: LD_VAR 0 2
70453: PUSH
70454: LD_VAR 0 4
70458: ARRAY
70459: PUSH
70460: LD_INT 1
70462: ARRAY
70463: PPUSH
70464: LD_VAR 0 2
70468: PUSH
70469: LD_VAR 0 4
70473: ARRAY
70474: PUSH
70475: LD_INT 2
70477: ARRAY
70478: PPUSH
70479: CALL_OW 297
70483: ST_TO_ADDR
// end ; end ;
70484: GO 70373
70486: POP
70487: POP
// result := hex ;
70488: LD_ADDR_VAR 0 3
70492: PUSH
70493: LD_VAR 0 7
70497: ST_TO_ADDR
// end ;
70498: LD_VAR 0 3
70502: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70503: LD_INT 0
70505: PPUSH
70506: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70507: LD_VAR 0 1
70511: NOT
70512: PUSH
70513: LD_VAR 0 1
70517: PUSH
70518: LD_INT 21
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 23
70530: PUSH
70531: LD_INT 2
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PPUSH
70542: CALL_OW 69
70546: IN
70547: NOT
70548: OR
70549: IFFALSE 70553
// exit ;
70551: GO 70600
// for i = 1 to 3 do
70553: LD_ADDR_VAR 0 3
70557: PUSH
70558: DOUBLE
70559: LD_INT 1
70561: DEC
70562: ST_TO_ADDR
70563: LD_INT 3
70565: PUSH
70566: FOR_TO
70567: IFFALSE 70598
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70569: LD_VAR 0 1
70573: PPUSH
70574: CALL_OW 250
70578: PPUSH
70579: LD_VAR 0 1
70583: PPUSH
70584: CALL_OW 251
70588: PPUSH
70589: LD_INT 1
70591: PPUSH
70592: CALL_OW 453
70596: GO 70566
70598: POP
70599: POP
// end ;
70600: LD_VAR 0 2
70604: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70605: LD_INT 0
70607: PPUSH
70608: PPUSH
70609: PPUSH
70610: PPUSH
70611: PPUSH
70612: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70613: LD_VAR 0 1
70617: NOT
70618: PUSH
70619: LD_VAR 0 2
70623: NOT
70624: OR
70625: PUSH
70626: LD_VAR 0 1
70630: PPUSH
70631: CALL_OW 314
70635: OR
70636: IFFALSE 70640
// exit ;
70638: GO 71081
// x := GetX ( enemy_unit ) ;
70640: LD_ADDR_VAR 0 7
70644: PUSH
70645: LD_VAR 0 2
70649: PPUSH
70650: CALL_OW 250
70654: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70655: LD_ADDR_VAR 0 8
70659: PUSH
70660: LD_VAR 0 2
70664: PPUSH
70665: CALL_OW 251
70669: ST_TO_ADDR
// if not x or not y then
70670: LD_VAR 0 7
70674: NOT
70675: PUSH
70676: LD_VAR 0 8
70680: NOT
70681: OR
70682: IFFALSE 70686
// exit ;
70684: GO 71081
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70686: LD_ADDR_VAR 0 6
70690: PUSH
70691: LD_VAR 0 7
70695: PPUSH
70696: LD_INT 0
70698: PPUSH
70699: LD_INT 4
70701: PPUSH
70702: CALL_OW 272
70706: PUSH
70707: LD_VAR 0 8
70711: PPUSH
70712: LD_INT 0
70714: PPUSH
70715: LD_INT 4
70717: PPUSH
70718: CALL_OW 273
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_VAR 0 7
70731: PPUSH
70732: LD_INT 1
70734: PPUSH
70735: LD_INT 4
70737: PPUSH
70738: CALL_OW 272
70742: PUSH
70743: LD_VAR 0 8
70747: PPUSH
70748: LD_INT 1
70750: PPUSH
70751: LD_INT 4
70753: PPUSH
70754: CALL_OW 273
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_VAR 0 7
70767: PPUSH
70768: LD_INT 2
70770: PPUSH
70771: LD_INT 4
70773: PPUSH
70774: CALL_OW 272
70778: PUSH
70779: LD_VAR 0 8
70783: PPUSH
70784: LD_INT 2
70786: PPUSH
70787: LD_INT 4
70789: PPUSH
70790: CALL_OW 273
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_VAR 0 7
70803: PPUSH
70804: LD_INT 3
70806: PPUSH
70807: LD_INT 4
70809: PPUSH
70810: CALL_OW 272
70814: PUSH
70815: LD_VAR 0 8
70819: PPUSH
70820: LD_INT 3
70822: PPUSH
70823: LD_INT 4
70825: PPUSH
70826: CALL_OW 273
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_VAR 0 7
70839: PPUSH
70840: LD_INT 4
70842: PPUSH
70843: LD_INT 4
70845: PPUSH
70846: CALL_OW 272
70850: PUSH
70851: LD_VAR 0 8
70855: PPUSH
70856: LD_INT 4
70858: PPUSH
70859: LD_INT 4
70861: PPUSH
70862: CALL_OW 273
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_VAR 0 7
70875: PPUSH
70876: LD_INT 5
70878: PPUSH
70879: LD_INT 4
70881: PPUSH
70882: CALL_OW 272
70886: PUSH
70887: LD_VAR 0 8
70891: PPUSH
70892: LD_INT 5
70894: PPUSH
70895: LD_INT 4
70897: PPUSH
70898: CALL_OW 273
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: ST_TO_ADDR
// for i = tmp downto 1 do
70915: LD_ADDR_VAR 0 4
70919: PUSH
70920: DOUBLE
70921: LD_VAR 0 6
70925: INC
70926: ST_TO_ADDR
70927: LD_INT 1
70929: PUSH
70930: FOR_DOWNTO
70931: IFFALSE 71032
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70933: LD_VAR 0 6
70937: PUSH
70938: LD_VAR 0 4
70942: ARRAY
70943: PUSH
70944: LD_INT 1
70946: ARRAY
70947: PPUSH
70948: LD_VAR 0 6
70952: PUSH
70953: LD_VAR 0 4
70957: ARRAY
70958: PUSH
70959: LD_INT 2
70961: ARRAY
70962: PPUSH
70963: CALL_OW 488
70967: NOT
70968: PUSH
70969: LD_VAR 0 6
70973: PUSH
70974: LD_VAR 0 4
70978: ARRAY
70979: PUSH
70980: LD_INT 1
70982: ARRAY
70983: PPUSH
70984: LD_VAR 0 6
70988: PUSH
70989: LD_VAR 0 4
70993: ARRAY
70994: PUSH
70995: LD_INT 2
70997: ARRAY
70998: PPUSH
70999: CALL_OW 428
71003: PUSH
71004: LD_INT 0
71006: NONEQUAL
71007: OR
71008: IFFALSE 71030
// tmp := Delete ( tmp , i ) ;
71010: LD_ADDR_VAR 0 6
71014: PUSH
71015: LD_VAR 0 6
71019: PPUSH
71020: LD_VAR 0 4
71024: PPUSH
71025: CALL_OW 3
71029: ST_TO_ADDR
71030: GO 70930
71032: POP
71033: POP
// j := GetClosestHex ( unit , tmp ) ;
71034: LD_ADDR_VAR 0 5
71038: PUSH
71039: LD_VAR 0 1
71043: PPUSH
71044: LD_VAR 0 6
71048: PPUSH
71049: CALL 70334 0 2
71053: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71054: LD_VAR 0 1
71058: PPUSH
71059: LD_VAR 0 5
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PPUSH
71068: LD_VAR 0 5
71072: PUSH
71073: LD_INT 2
71075: ARRAY
71076: PPUSH
71077: CALL_OW 111
// end ;
71081: LD_VAR 0 3
71085: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71086: LD_INT 0
71088: PPUSH
71089: PPUSH
71090: PPUSH
// uc_side = 0 ;
71091: LD_ADDR_OWVAR 20
71095: PUSH
71096: LD_INT 0
71098: ST_TO_ADDR
// uc_nation = 0 ;
71099: LD_ADDR_OWVAR 21
71103: PUSH
71104: LD_INT 0
71106: ST_TO_ADDR
// InitHc_All ( ) ;
71107: CALL_OW 584
// InitVc ;
71111: CALL_OW 20
// if mastodonts then
71115: LD_VAR 0 6
71119: IFFALSE 71186
// for i = 1 to mastodonts do
71121: LD_ADDR_VAR 0 11
71125: PUSH
71126: DOUBLE
71127: LD_INT 1
71129: DEC
71130: ST_TO_ADDR
71131: LD_VAR 0 6
71135: PUSH
71136: FOR_TO
71137: IFFALSE 71184
// begin vc_chassis := 31 ;
71139: LD_ADDR_OWVAR 37
71143: PUSH
71144: LD_INT 31
71146: ST_TO_ADDR
// vc_control := control_rider ;
71147: LD_ADDR_OWVAR 38
71151: PUSH
71152: LD_INT 4
71154: ST_TO_ADDR
// animal := CreateVehicle ;
71155: LD_ADDR_VAR 0 12
71159: PUSH
71160: CALL_OW 45
71164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71165: LD_VAR 0 12
71169: PPUSH
71170: LD_VAR 0 8
71174: PPUSH
71175: LD_INT 0
71177: PPUSH
71178: CALL 73374 0 3
// end ;
71182: GO 71136
71184: POP
71185: POP
// if horses then
71186: LD_VAR 0 5
71190: IFFALSE 71257
// for i = 1 to horses do
71192: LD_ADDR_VAR 0 11
71196: PUSH
71197: DOUBLE
71198: LD_INT 1
71200: DEC
71201: ST_TO_ADDR
71202: LD_VAR 0 5
71206: PUSH
71207: FOR_TO
71208: IFFALSE 71255
// begin hc_class := 21 ;
71210: LD_ADDR_OWVAR 28
71214: PUSH
71215: LD_INT 21
71217: ST_TO_ADDR
// hc_gallery :=  ;
71218: LD_ADDR_OWVAR 33
71222: PUSH
71223: LD_STRING 
71225: ST_TO_ADDR
// animal := CreateHuman ;
71226: LD_ADDR_VAR 0 12
71230: PUSH
71231: CALL_OW 44
71235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71236: LD_VAR 0 12
71240: PPUSH
71241: LD_VAR 0 8
71245: PPUSH
71246: LD_INT 0
71248: PPUSH
71249: CALL 73374 0 3
// end ;
71253: GO 71207
71255: POP
71256: POP
// if birds then
71257: LD_VAR 0 1
71261: IFFALSE 71328
// for i = 1 to birds do
71263: LD_ADDR_VAR 0 11
71267: PUSH
71268: DOUBLE
71269: LD_INT 1
71271: DEC
71272: ST_TO_ADDR
71273: LD_VAR 0 1
71277: PUSH
71278: FOR_TO
71279: IFFALSE 71326
// begin hc_class = 18 ;
71281: LD_ADDR_OWVAR 28
71285: PUSH
71286: LD_INT 18
71288: ST_TO_ADDR
// hc_gallery =  ;
71289: LD_ADDR_OWVAR 33
71293: PUSH
71294: LD_STRING 
71296: ST_TO_ADDR
// animal := CreateHuman ;
71297: LD_ADDR_VAR 0 12
71301: PUSH
71302: CALL_OW 44
71306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71307: LD_VAR 0 12
71311: PPUSH
71312: LD_VAR 0 8
71316: PPUSH
71317: LD_INT 0
71319: PPUSH
71320: CALL 73374 0 3
// end ;
71324: GO 71278
71326: POP
71327: POP
// if tigers then
71328: LD_VAR 0 2
71332: IFFALSE 71416
// for i = 1 to tigers do
71334: LD_ADDR_VAR 0 11
71338: PUSH
71339: DOUBLE
71340: LD_INT 1
71342: DEC
71343: ST_TO_ADDR
71344: LD_VAR 0 2
71348: PUSH
71349: FOR_TO
71350: IFFALSE 71414
// begin hc_class = class_tiger ;
71352: LD_ADDR_OWVAR 28
71356: PUSH
71357: LD_INT 14
71359: ST_TO_ADDR
// hc_gallery =  ;
71360: LD_ADDR_OWVAR 33
71364: PUSH
71365: LD_STRING 
71367: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71368: LD_ADDR_OWVAR 35
71372: PUSH
71373: LD_INT 7
71375: NEG
71376: PPUSH
71377: LD_INT 7
71379: PPUSH
71380: CALL_OW 12
71384: ST_TO_ADDR
// animal := CreateHuman ;
71385: LD_ADDR_VAR 0 12
71389: PUSH
71390: CALL_OW 44
71394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71395: LD_VAR 0 12
71399: PPUSH
71400: LD_VAR 0 8
71404: PPUSH
71405: LD_INT 0
71407: PPUSH
71408: CALL 73374 0 3
// end ;
71412: GO 71349
71414: POP
71415: POP
// if apemans then
71416: LD_VAR 0 3
71420: IFFALSE 71543
// for i = 1 to apemans do
71422: LD_ADDR_VAR 0 11
71426: PUSH
71427: DOUBLE
71428: LD_INT 1
71430: DEC
71431: ST_TO_ADDR
71432: LD_VAR 0 3
71436: PUSH
71437: FOR_TO
71438: IFFALSE 71541
// begin hc_class = class_apeman ;
71440: LD_ADDR_OWVAR 28
71444: PUSH
71445: LD_INT 12
71447: ST_TO_ADDR
// hc_gallery =  ;
71448: LD_ADDR_OWVAR 33
71452: PUSH
71453: LD_STRING 
71455: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71456: LD_ADDR_OWVAR 35
71460: PUSH
71461: LD_INT 2
71463: NEG
71464: PPUSH
71465: LD_INT 2
71467: PPUSH
71468: CALL_OW 12
71472: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71473: LD_ADDR_OWVAR 31
71477: PUSH
71478: LD_INT 1
71480: PPUSH
71481: LD_INT 3
71483: PPUSH
71484: CALL_OW 12
71488: PUSH
71489: LD_INT 1
71491: PPUSH
71492: LD_INT 3
71494: PPUSH
71495: CALL_OW 12
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: LD_INT 0
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: ST_TO_ADDR
// animal := CreateHuman ;
71512: LD_ADDR_VAR 0 12
71516: PUSH
71517: CALL_OW 44
71521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71522: LD_VAR 0 12
71526: PPUSH
71527: LD_VAR 0 8
71531: PPUSH
71532: LD_INT 0
71534: PPUSH
71535: CALL 73374 0 3
// end ;
71539: GO 71437
71541: POP
71542: POP
// if enchidnas then
71543: LD_VAR 0 4
71547: IFFALSE 71614
// for i = 1 to enchidnas do
71549: LD_ADDR_VAR 0 11
71553: PUSH
71554: DOUBLE
71555: LD_INT 1
71557: DEC
71558: ST_TO_ADDR
71559: LD_VAR 0 4
71563: PUSH
71564: FOR_TO
71565: IFFALSE 71612
// begin hc_class = 13 ;
71567: LD_ADDR_OWVAR 28
71571: PUSH
71572: LD_INT 13
71574: ST_TO_ADDR
// hc_gallery =  ;
71575: LD_ADDR_OWVAR 33
71579: PUSH
71580: LD_STRING 
71582: ST_TO_ADDR
// animal := CreateHuman ;
71583: LD_ADDR_VAR 0 12
71587: PUSH
71588: CALL_OW 44
71592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71593: LD_VAR 0 12
71597: PPUSH
71598: LD_VAR 0 8
71602: PPUSH
71603: LD_INT 0
71605: PPUSH
71606: CALL 73374 0 3
// end ;
71610: GO 71564
71612: POP
71613: POP
// if fishes then
71614: LD_VAR 0 7
71618: IFFALSE 71685
// for i = 1 to fishes do
71620: LD_ADDR_VAR 0 11
71624: PUSH
71625: DOUBLE
71626: LD_INT 1
71628: DEC
71629: ST_TO_ADDR
71630: LD_VAR 0 7
71634: PUSH
71635: FOR_TO
71636: IFFALSE 71683
// begin hc_class = 20 ;
71638: LD_ADDR_OWVAR 28
71642: PUSH
71643: LD_INT 20
71645: ST_TO_ADDR
// hc_gallery =  ;
71646: LD_ADDR_OWVAR 33
71650: PUSH
71651: LD_STRING 
71653: ST_TO_ADDR
// animal := CreateHuman ;
71654: LD_ADDR_VAR 0 12
71658: PUSH
71659: CALL_OW 44
71663: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71664: LD_VAR 0 12
71668: PPUSH
71669: LD_VAR 0 9
71673: PPUSH
71674: LD_INT 0
71676: PPUSH
71677: CALL 73374 0 3
// end ;
71681: GO 71635
71683: POP
71684: POP
// end ;
71685: LD_VAR 0 10
71689: RET
// export function WantHeal ( sci , unit ) ; begin
71690: LD_INT 0
71692: PPUSH
// if GetTaskList ( sci ) > 0 then
71693: LD_VAR 0 1
71697: PPUSH
71698: CALL_OW 437
71702: PUSH
71703: LD_INT 0
71705: GREATER
71706: IFFALSE 71776
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71708: LD_VAR 0 1
71712: PPUSH
71713: CALL_OW 437
71717: PUSH
71718: LD_INT 1
71720: ARRAY
71721: PUSH
71722: LD_INT 1
71724: ARRAY
71725: PUSH
71726: LD_STRING l
71728: EQUAL
71729: PUSH
71730: LD_VAR 0 1
71734: PPUSH
71735: CALL_OW 437
71739: PUSH
71740: LD_INT 1
71742: ARRAY
71743: PUSH
71744: LD_INT 4
71746: ARRAY
71747: PUSH
71748: LD_VAR 0 2
71752: EQUAL
71753: AND
71754: IFFALSE 71766
// result := true else
71756: LD_ADDR_VAR 0 3
71760: PUSH
71761: LD_INT 1
71763: ST_TO_ADDR
71764: GO 71774
// result := false ;
71766: LD_ADDR_VAR 0 3
71770: PUSH
71771: LD_INT 0
71773: ST_TO_ADDR
// end else
71774: GO 71784
// result := false ;
71776: LD_ADDR_VAR 0 3
71780: PUSH
71781: LD_INT 0
71783: ST_TO_ADDR
// end ;
71784: LD_VAR 0 3
71788: RET
// export function HealTarget ( sci ) ; begin
71789: LD_INT 0
71791: PPUSH
// if not sci then
71792: LD_VAR 0 1
71796: NOT
71797: IFFALSE 71801
// exit ;
71799: GO 71866
// result := 0 ;
71801: LD_ADDR_VAR 0 2
71805: PUSH
71806: LD_INT 0
71808: ST_TO_ADDR
// if GetTaskList ( sci ) then
71809: LD_VAR 0 1
71813: PPUSH
71814: CALL_OW 437
71818: IFFALSE 71866
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71820: LD_VAR 0 1
71824: PPUSH
71825: CALL_OW 437
71829: PUSH
71830: LD_INT 1
71832: ARRAY
71833: PUSH
71834: LD_INT 1
71836: ARRAY
71837: PUSH
71838: LD_STRING l
71840: EQUAL
71841: IFFALSE 71866
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71843: LD_ADDR_VAR 0 2
71847: PUSH
71848: LD_VAR 0 1
71852: PPUSH
71853: CALL_OW 437
71857: PUSH
71858: LD_INT 1
71860: ARRAY
71861: PUSH
71862: LD_INT 4
71864: ARRAY
71865: ST_TO_ADDR
// end ;
71866: LD_VAR 0 2
71870: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71871: LD_INT 0
71873: PPUSH
71874: PPUSH
71875: PPUSH
71876: PPUSH
// if not base_units then
71877: LD_VAR 0 1
71881: NOT
71882: IFFALSE 71886
// exit ;
71884: GO 71973
// result := false ;
71886: LD_ADDR_VAR 0 2
71890: PUSH
71891: LD_INT 0
71893: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71894: LD_ADDR_VAR 0 5
71898: PUSH
71899: LD_VAR 0 1
71903: PPUSH
71904: LD_INT 21
71906: PUSH
71907: LD_INT 3
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PPUSH
71914: CALL_OW 72
71918: ST_TO_ADDR
// if not tmp then
71919: LD_VAR 0 5
71923: NOT
71924: IFFALSE 71928
// exit ;
71926: GO 71973
// for i in tmp do
71928: LD_ADDR_VAR 0 3
71932: PUSH
71933: LD_VAR 0 5
71937: PUSH
71938: FOR_IN
71939: IFFALSE 71971
// begin result := EnemyInRange ( i , 22 ) ;
71941: LD_ADDR_VAR 0 2
71945: PUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: LD_INT 22
71953: PPUSH
71954: CALL 70209 0 2
71958: ST_TO_ADDR
// if result then
71959: LD_VAR 0 2
71963: IFFALSE 71969
// exit ;
71965: POP
71966: POP
71967: GO 71973
// end ;
71969: GO 71938
71971: POP
71972: POP
// end ;
71973: LD_VAR 0 2
71977: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71978: LD_INT 0
71980: PPUSH
71981: PPUSH
// if not units then
71982: LD_VAR 0 1
71986: NOT
71987: IFFALSE 71991
// exit ;
71989: GO 72061
// result := [ ] ;
71991: LD_ADDR_VAR 0 3
71995: PUSH
71996: EMPTY
71997: ST_TO_ADDR
// for i in units do
71998: LD_ADDR_VAR 0 4
72002: PUSH
72003: LD_VAR 0 1
72007: PUSH
72008: FOR_IN
72009: IFFALSE 72059
// if GetTag ( i ) = tag then
72011: LD_VAR 0 4
72015: PPUSH
72016: CALL_OW 110
72020: PUSH
72021: LD_VAR 0 2
72025: EQUAL
72026: IFFALSE 72057
// result := Replace ( result , result + 1 , i ) ;
72028: LD_ADDR_VAR 0 3
72032: PUSH
72033: LD_VAR 0 3
72037: PPUSH
72038: LD_VAR 0 3
72042: PUSH
72043: LD_INT 1
72045: PLUS
72046: PPUSH
72047: LD_VAR 0 4
72051: PPUSH
72052: CALL_OW 1
72056: ST_TO_ADDR
72057: GO 72008
72059: POP
72060: POP
// end ;
72061: LD_VAR 0 3
72065: RET
// export function IsDriver ( un ) ; begin
72066: LD_INT 0
72068: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72069: LD_ADDR_VAR 0 2
72073: PUSH
72074: LD_VAR 0 1
72078: PUSH
72079: LD_INT 55
72081: PUSH
72082: EMPTY
72083: LIST
72084: PPUSH
72085: CALL_OW 69
72089: IN
72090: ST_TO_ADDR
// end ;
72091: LD_VAR 0 2
72095: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72096: LD_INT 0
72098: PPUSH
72099: PPUSH
// list := [ ] ;
72100: LD_ADDR_VAR 0 5
72104: PUSH
72105: EMPTY
72106: ST_TO_ADDR
// case d of 0 :
72107: LD_VAR 0 3
72111: PUSH
72112: LD_INT 0
72114: DOUBLE
72115: EQUAL
72116: IFTRUE 72120
72118: GO 72253
72120: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72121: LD_ADDR_VAR 0 5
72125: PUSH
72126: LD_VAR 0 1
72130: PUSH
72131: LD_INT 4
72133: MINUS
72134: PUSH
72135: LD_VAR 0 2
72139: PUSH
72140: LD_INT 4
72142: MINUS
72143: PUSH
72144: LD_INT 2
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: LIST
72151: PUSH
72152: LD_VAR 0 1
72156: PUSH
72157: LD_INT 3
72159: MINUS
72160: PUSH
72161: LD_VAR 0 2
72165: PUSH
72166: LD_INT 1
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: LIST
72173: PUSH
72174: LD_VAR 0 1
72178: PUSH
72179: LD_INT 4
72181: PLUS
72182: PUSH
72183: LD_VAR 0 2
72187: PUSH
72188: LD_INT 4
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: PUSH
72196: LD_VAR 0 1
72200: PUSH
72201: LD_INT 3
72203: PLUS
72204: PUSH
72205: LD_VAR 0 2
72209: PUSH
72210: LD_INT 3
72212: PLUS
72213: PUSH
72214: LD_INT 5
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: LIST
72221: PUSH
72222: LD_VAR 0 1
72226: PUSH
72227: LD_VAR 0 2
72231: PUSH
72232: LD_INT 4
72234: PLUS
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: ST_TO_ADDR
// end ; 1 :
72251: GO 72951
72253: LD_INT 1
72255: DOUBLE
72256: EQUAL
72257: IFTRUE 72261
72259: GO 72394
72261: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72262: LD_ADDR_VAR 0 5
72266: PUSH
72267: LD_VAR 0 1
72271: PUSH
72272: LD_VAR 0 2
72276: PUSH
72277: LD_INT 4
72279: MINUS
72280: PUSH
72281: LD_INT 3
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: PUSH
72289: LD_VAR 0 1
72293: PUSH
72294: LD_INT 3
72296: MINUS
72297: PUSH
72298: LD_VAR 0 2
72302: PUSH
72303: LD_INT 3
72305: MINUS
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: LIST
72314: PUSH
72315: LD_VAR 0 1
72319: PUSH
72320: LD_INT 4
72322: MINUS
72323: PUSH
72324: LD_VAR 0 2
72328: PUSH
72329: LD_INT 1
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: LIST
72336: PUSH
72337: LD_VAR 0 1
72341: PUSH
72342: LD_VAR 0 2
72346: PUSH
72347: LD_INT 3
72349: PLUS
72350: PUSH
72351: LD_INT 0
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: PUSH
72359: LD_VAR 0 1
72363: PUSH
72364: LD_INT 4
72366: PLUS
72367: PUSH
72368: LD_VAR 0 2
72372: PUSH
72373: LD_INT 4
72375: PLUS
72376: PUSH
72377: LD_INT 5
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: LIST
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: ST_TO_ADDR
// end ; 2 :
72392: GO 72951
72394: LD_INT 2
72396: DOUBLE
72397: EQUAL
72398: IFTRUE 72402
72400: GO 72531
72402: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72403: LD_ADDR_VAR 0 5
72407: PUSH
72408: LD_VAR 0 1
72412: PUSH
72413: LD_VAR 0 2
72417: PUSH
72418: LD_INT 3
72420: MINUS
72421: PUSH
72422: LD_INT 3
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: LIST
72429: PUSH
72430: LD_VAR 0 1
72434: PUSH
72435: LD_INT 4
72437: PLUS
72438: PUSH
72439: LD_VAR 0 2
72443: PUSH
72444: LD_INT 4
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: LIST
72451: PUSH
72452: LD_VAR 0 1
72456: PUSH
72457: LD_VAR 0 2
72461: PUSH
72462: LD_INT 4
72464: PLUS
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: PUSH
72474: LD_VAR 0 1
72478: PUSH
72479: LD_INT 3
72481: MINUS
72482: PUSH
72483: LD_VAR 0 2
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: PUSH
72496: LD_VAR 0 1
72500: PUSH
72501: LD_INT 4
72503: MINUS
72504: PUSH
72505: LD_VAR 0 2
72509: PUSH
72510: LD_INT 4
72512: MINUS
72513: PUSH
72514: LD_INT 2
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: LIST
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: ST_TO_ADDR
// end ; 3 :
72529: GO 72951
72531: LD_INT 3
72533: DOUBLE
72534: EQUAL
72535: IFTRUE 72539
72537: GO 72672
72539: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72540: LD_ADDR_VAR 0 5
72544: PUSH
72545: LD_VAR 0 1
72549: PUSH
72550: LD_INT 3
72552: PLUS
72553: PUSH
72554: LD_VAR 0 2
72558: PUSH
72559: LD_INT 4
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: LIST
72566: PUSH
72567: LD_VAR 0 1
72571: PUSH
72572: LD_INT 4
72574: PLUS
72575: PUSH
72576: LD_VAR 0 2
72580: PUSH
72581: LD_INT 4
72583: PLUS
72584: PUSH
72585: LD_INT 5
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: LIST
72592: PUSH
72593: LD_VAR 0 1
72597: PUSH
72598: LD_INT 4
72600: MINUS
72601: PUSH
72602: LD_VAR 0 2
72606: PUSH
72607: LD_INT 1
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: LIST
72614: PUSH
72615: LD_VAR 0 1
72619: PUSH
72620: LD_VAR 0 2
72624: PUSH
72625: LD_INT 4
72627: MINUS
72628: PUSH
72629: LD_INT 3
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: LIST
72636: PUSH
72637: LD_VAR 0 1
72641: PUSH
72642: LD_INT 3
72644: MINUS
72645: PUSH
72646: LD_VAR 0 2
72650: PUSH
72651: LD_INT 3
72653: MINUS
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: ST_TO_ADDR
// end ; 4 :
72670: GO 72951
72672: LD_INT 4
72674: DOUBLE
72675: EQUAL
72676: IFTRUE 72680
72678: GO 72813
72680: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72681: LD_ADDR_VAR 0 5
72685: PUSH
72686: LD_VAR 0 1
72690: PUSH
72691: LD_VAR 0 2
72695: PUSH
72696: LD_INT 4
72698: PLUS
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: LIST
72707: PUSH
72708: LD_VAR 0 1
72712: PUSH
72713: LD_INT 3
72715: PLUS
72716: PUSH
72717: LD_VAR 0 2
72721: PUSH
72722: LD_INT 3
72724: PLUS
72725: PUSH
72726: LD_INT 5
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: PUSH
72734: LD_VAR 0 1
72738: PUSH
72739: LD_INT 4
72741: PLUS
72742: PUSH
72743: LD_VAR 0 2
72747: PUSH
72748: LD_INT 4
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: LIST
72755: PUSH
72756: LD_VAR 0 1
72760: PUSH
72761: LD_VAR 0 2
72765: PUSH
72766: LD_INT 3
72768: MINUS
72769: PUSH
72770: LD_INT 3
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: LIST
72777: PUSH
72778: LD_VAR 0 1
72782: PUSH
72783: LD_INT 4
72785: MINUS
72786: PUSH
72787: LD_VAR 0 2
72791: PUSH
72792: LD_INT 4
72794: MINUS
72795: PUSH
72796: LD_INT 2
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: LIST
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: ST_TO_ADDR
// end ; 5 :
72811: GO 72951
72813: LD_INT 5
72815: DOUBLE
72816: EQUAL
72817: IFTRUE 72821
72819: GO 72950
72821: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72822: LD_ADDR_VAR 0 5
72826: PUSH
72827: LD_VAR 0 1
72831: PUSH
72832: LD_INT 4
72834: MINUS
72835: PUSH
72836: LD_VAR 0 2
72840: PUSH
72841: LD_INT 1
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: LIST
72848: PUSH
72849: LD_VAR 0 1
72853: PUSH
72854: LD_VAR 0 2
72858: PUSH
72859: LD_INT 4
72861: MINUS
72862: PUSH
72863: LD_INT 3
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: LIST
72870: PUSH
72871: LD_VAR 0 1
72875: PUSH
72876: LD_INT 4
72878: PLUS
72879: PUSH
72880: LD_VAR 0 2
72884: PUSH
72885: LD_INT 4
72887: PLUS
72888: PUSH
72889: LD_INT 5
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: LIST
72896: PUSH
72897: LD_VAR 0 1
72901: PUSH
72902: LD_INT 3
72904: PLUS
72905: PUSH
72906: LD_VAR 0 2
72910: PUSH
72911: LD_INT 4
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: LIST
72918: PUSH
72919: LD_VAR 0 1
72923: PUSH
72924: LD_VAR 0 2
72928: PUSH
72929: LD_INT 3
72931: PLUS
72932: PUSH
72933: LD_INT 0
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: LIST
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: ST_TO_ADDR
// end ; end ;
72948: GO 72951
72950: POP
// result := list ;
72951: LD_ADDR_VAR 0 4
72955: PUSH
72956: LD_VAR 0 5
72960: ST_TO_ADDR
// end ;
72961: LD_VAR 0 4
72965: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72966: LD_INT 0
72968: PPUSH
72969: PPUSH
72970: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72971: LD_VAR 0 1
72975: NOT
72976: PUSH
72977: LD_VAR 0 2
72981: PUSH
72982: LD_INT 1
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: LD_INT 3
72990: PUSH
72991: LD_INT 4
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: IN
73000: NOT
73001: OR
73002: IFFALSE 73006
// exit ;
73004: GO 73098
// tmp := [ ] ;
73006: LD_ADDR_VAR 0 5
73010: PUSH
73011: EMPTY
73012: ST_TO_ADDR
// for i in units do
73013: LD_ADDR_VAR 0 4
73017: PUSH
73018: LD_VAR 0 1
73022: PUSH
73023: FOR_IN
73024: IFFALSE 73067
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73026: LD_ADDR_VAR 0 5
73030: PUSH
73031: LD_VAR 0 5
73035: PPUSH
73036: LD_VAR 0 5
73040: PUSH
73041: LD_INT 1
73043: PLUS
73044: PPUSH
73045: LD_VAR 0 4
73049: PPUSH
73050: LD_VAR 0 2
73054: PPUSH
73055: CALL_OW 259
73059: PPUSH
73060: CALL_OW 2
73064: ST_TO_ADDR
73065: GO 73023
73067: POP
73068: POP
// if not tmp then
73069: LD_VAR 0 5
73073: NOT
73074: IFFALSE 73078
// exit ;
73076: GO 73098
// result := SortListByListDesc ( units , tmp ) ;
73078: LD_ADDR_VAR 0 3
73082: PUSH
73083: LD_VAR 0 1
73087: PPUSH
73088: LD_VAR 0 5
73092: PPUSH
73093: CALL_OW 77
73097: ST_TO_ADDR
// end ;
73098: LD_VAR 0 3
73102: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73103: LD_INT 0
73105: PPUSH
73106: PPUSH
73107: PPUSH
// result := false ;
73108: LD_ADDR_VAR 0 3
73112: PUSH
73113: LD_INT 0
73115: ST_TO_ADDR
// x := GetX ( building ) ;
73116: LD_ADDR_VAR 0 4
73120: PUSH
73121: LD_VAR 0 2
73125: PPUSH
73126: CALL_OW 250
73130: ST_TO_ADDR
// y := GetY ( building ) ;
73131: LD_ADDR_VAR 0 5
73135: PUSH
73136: LD_VAR 0 2
73140: PPUSH
73141: CALL_OW 251
73145: ST_TO_ADDR
// if not building or not x or not y then
73146: LD_VAR 0 2
73150: NOT
73151: PUSH
73152: LD_VAR 0 4
73156: NOT
73157: OR
73158: PUSH
73159: LD_VAR 0 5
73163: NOT
73164: OR
73165: IFFALSE 73169
// exit ;
73167: GO 73261
// if GetTaskList ( unit ) then
73169: LD_VAR 0 1
73173: PPUSH
73174: CALL_OW 437
73178: IFFALSE 73261
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73180: LD_STRING e
73182: PUSH
73183: LD_VAR 0 1
73187: PPUSH
73188: CALL_OW 437
73192: PUSH
73193: LD_INT 1
73195: ARRAY
73196: PUSH
73197: LD_INT 1
73199: ARRAY
73200: EQUAL
73201: PUSH
73202: LD_VAR 0 4
73206: PUSH
73207: LD_VAR 0 1
73211: PPUSH
73212: CALL_OW 437
73216: PUSH
73217: LD_INT 1
73219: ARRAY
73220: PUSH
73221: LD_INT 2
73223: ARRAY
73224: EQUAL
73225: AND
73226: PUSH
73227: LD_VAR 0 5
73231: PUSH
73232: LD_VAR 0 1
73236: PPUSH
73237: CALL_OW 437
73241: PUSH
73242: LD_INT 1
73244: ARRAY
73245: PUSH
73246: LD_INT 3
73248: ARRAY
73249: EQUAL
73250: AND
73251: IFFALSE 73261
// result := true end ;
73253: LD_ADDR_VAR 0 3
73257: PUSH
73258: LD_INT 1
73260: ST_TO_ADDR
// end ;
73261: LD_VAR 0 3
73265: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73266: LD_INT 0
73268: PPUSH
// result := false ;
73269: LD_ADDR_VAR 0 4
73273: PUSH
73274: LD_INT 0
73276: ST_TO_ADDR
// if GetTaskList ( unit ) then
73277: LD_VAR 0 1
73281: PPUSH
73282: CALL_OW 437
73286: IFFALSE 73369
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73288: LD_STRING M
73290: PUSH
73291: LD_VAR 0 1
73295: PPUSH
73296: CALL_OW 437
73300: PUSH
73301: LD_INT 1
73303: ARRAY
73304: PUSH
73305: LD_INT 1
73307: ARRAY
73308: EQUAL
73309: PUSH
73310: LD_VAR 0 2
73314: PUSH
73315: LD_VAR 0 1
73319: PPUSH
73320: CALL_OW 437
73324: PUSH
73325: LD_INT 1
73327: ARRAY
73328: PUSH
73329: LD_INT 2
73331: ARRAY
73332: EQUAL
73333: AND
73334: PUSH
73335: LD_VAR 0 3
73339: PUSH
73340: LD_VAR 0 1
73344: PPUSH
73345: CALL_OW 437
73349: PUSH
73350: LD_INT 1
73352: ARRAY
73353: PUSH
73354: LD_INT 3
73356: ARRAY
73357: EQUAL
73358: AND
73359: IFFALSE 73369
// result := true ;
73361: LD_ADDR_VAR 0 4
73365: PUSH
73366: LD_INT 1
73368: ST_TO_ADDR
// end ; end ;
73369: LD_VAR 0 4
73373: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73374: LD_INT 0
73376: PPUSH
73377: PPUSH
73378: PPUSH
73379: PPUSH
// if not unit or not area then
73380: LD_VAR 0 1
73384: NOT
73385: PUSH
73386: LD_VAR 0 2
73390: NOT
73391: OR
73392: IFFALSE 73396
// exit ;
73394: GO 73560
// tmp := AreaToList ( area , i ) ;
73396: LD_ADDR_VAR 0 6
73400: PUSH
73401: LD_VAR 0 2
73405: PPUSH
73406: LD_VAR 0 5
73410: PPUSH
73411: CALL_OW 517
73415: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73416: LD_ADDR_VAR 0 5
73420: PUSH
73421: DOUBLE
73422: LD_INT 1
73424: DEC
73425: ST_TO_ADDR
73426: LD_VAR 0 6
73430: PUSH
73431: LD_INT 1
73433: ARRAY
73434: PUSH
73435: FOR_TO
73436: IFFALSE 73558
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73438: LD_ADDR_VAR 0 7
73442: PUSH
73443: LD_VAR 0 6
73447: PUSH
73448: LD_INT 1
73450: ARRAY
73451: PUSH
73452: LD_VAR 0 5
73456: ARRAY
73457: PUSH
73458: LD_VAR 0 6
73462: PUSH
73463: LD_INT 2
73465: ARRAY
73466: PUSH
73467: LD_VAR 0 5
73471: ARRAY
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73477: LD_VAR 0 7
73481: PUSH
73482: LD_INT 1
73484: ARRAY
73485: PPUSH
73486: LD_VAR 0 7
73490: PUSH
73491: LD_INT 2
73493: ARRAY
73494: PPUSH
73495: CALL_OW 428
73499: PUSH
73500: LD_INT 0
73502: EQUAL
73503: IFFALSE 73556
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73505: LD_VAR 0 1
73509: PPUSH
73510: LD_VAR 0 7
73514: PUSH
73515: LD_INT 1
73517: ARRAY
73518: PPUSH
73519: LD_VAR 0 7
73523: PUSH
73524: LD_INT 2
73526: ARRAY
73527: PPUSH
73528: LD_VAR 0 3
73532: PPUSH
73533: CALL_OW 48
// result := IsPlaced ( unit ) ;
73537: LD_ADDR_VAR 0 4
73541: PUSH
73542: LD_VAR 0 1
73546: PPUSH
73547: CALL_OW 305
73551: ST_TO_ADDR
// exit ;
73552: POP
73553: POP
73554: GO 73560
// end ; end ;
73556: GO 73435
73558: POP
73559: POP
// end ;
73560: LD_VAR 0 4
73564: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73565: LD_INT 0
73567: PPUSH
73568: PPUSH
73569: PPUSH
// if not side or side > 8 then
73570: LD_VAR 0 1
73574: NOT
73575: PUSH
73576: LD_VAR 0 1
73580: PUSH
73581: LD_INT 8
73583: GREATER
73584: OR
73585: IFFALSE 73589
// exit ;
73587: GO 73776
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73589: LD_ADDR_VAR 0 4
73593: PUSH
73594: LD_INT 22
73596: PUSH
73597: LD_VAR 0 1
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 21
73608: PUSH
73609: LD_INT 3
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PPUSH
73620: CALL_OW 69
73624: ST_TO_ADDR
// if not tmp then
73625: LD_VAR 0 4
73629: NOT
73630: IFFALSE 73634
// exit ;
73632: GO 73776
// enable_addtolog := true ;
73634: LD_ADDR_OWVAR 81
73638: PUSH
73639: LD_INT 1
73641: ST_TO_ADDR
// AddToLog ( [ ) ;
73642: LD_STRING [
73644: PPUSH
73645: CALL_OW 561
// for i in tmp do
73649: LD_ADDR_VAR 0 3
73653: PUSH
73654: LD_VAR 0 4
73658: PUSH
73659: FOR_IN
73660: IFFALSE 73767
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73662: LD_STRING [
73664: PUSH
73665: LD_VAR 0 3
73669: PPUSH
73670: CALL_OW 266
73674: STR
73675: PUSH
73676: LD_STRING , 
73678: STR
73679: PUSH
73680: LD_VAR 0 3
73684: PPUSH
73685: CALL_OW 250
73689: STR
73690: PUSH
73691: LD_STRING , 
73693: STR
73694: PUSH
73695: LD_VAR 0 3
73699: PPUSH
73700: CALL_OW 251
73704: STR
73705: PUSH
73706: LD_STRING , 
73708: STR
73709: PUSH
73710: LD_VAR 0 3
73714: PPUSH
73715: CALL_OW 254
73719: STR
73720: PUSH
73721: LD_STRING , 
73723: STR
73724: PUSH
73725: LD_VAR 0 3
73729: PPUSH
73730: LD_INT 1
73732: PPUSH
73733: CALL_OW 268
73737: STR
73738: PUSH
73739: LD_STRING , 
73741: STR
73742: PUSH
73743: LD_VAR 0 3
73747: PPUSH
73748: LD_INT 2
73750: PPUSH
73751: CALL_OW 268
73755: STR
73756: PUSH
73757: LD_STRING ],
73759: STR
73760: PPUSH
73761: CALL_OW 561
// end ;
73765: GO 73659
73767: POP
73768: POP
// AddToLog ( ]; ) ;
73769: LD_STRING ];
73771: PPUSH
73772: CALL_OW 561
// end ;
73776: LD_VAR 0 2
73780: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73781: LD_INT 0
73783: PPUSH
73784: PPUSH
73785: PPUSH
73786: PPUSH
73787: PPUSH
// if not area or not rate or not max then
73788: LD_VAR 0 1
73792: NOT
73793: PUSH
73794: LD_VAR 0 2
73798: NOT
73799: OR
73800: PUSH
73801: LD_VAR 0 4
73805: NOT
73806: OR
73807: IFFALSE 73811
// exit ;
73809: GO 74003
// while 1 do
73811: LD_INT 1
73813: IFFALSE 74003
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73815: LD_ADDR_VAR 0 9
73819: PUSH
73820: LD_VAR 0 1
73824: PPUSH
73825: LD_INT 1
73827: PPUSH
73828: CALL_OW 287
73832: PUSH
73833: LD_INT 10
73835: MUL
73836: ST_TO_ADDR
// r := rate / 10 ;
73837: LD_ADDR_VAR 0 7
73841: PUSH
73842: LD_VAR 0 2
73846: PUSH
73847: LD_INT 10
73849: DIVREAL
73850: ST_TO_ADDR
// time := 1 1$00 ;
73851: LD_ADDR_VAR 0 8
73855: PUSH
73856: LD_INT 2100
73858: ST_TO_ADDR
// if amount < min then
73859: LD_VAR 0 9
73863: PUSH
73864: LD_VAR 0 3
73868: LESS
73869: IFFALSE 73887
// r := r * 2 else
73871: LD_ADDR_VAR 0 7
73875: PUSH
73876: LD_VAR 0 7
73880: PUSH
73881: LD_INT 2
73883: MUL
73884: ST_TO_ADDR
73885: GO 73913
// if amount > max then
73887: LD_VAR 0 9
73891: PUSH
73892: LD_VAR 0 4
73896: GREATER
73897: IFFALSE 73913
// r := r / 2 ;
73899: LD_ADDR_VAR 0 7
73903: PUSH
73904: LD_VAR 0 7
73908: PUSH
73909: LD_INT 2
73911: DIVREAL
73912: ST_TO_ADDR
// time := time / r ;
73913: LD_ADDR_VAR 0 8
73917: PUSH
73918: LD_VAR 0 8
73922: PUSH
73923: LD_VAR 0 7
73927: DIVREAL
73928: ST_TO_ADDR
// if time < 0 then
73929: LD_VAR 0 8
73933: PUSH
73934: LD_INT 0
73936: LESS
73937: IFFALSE 73954
// time := time * - 1 ;
73939: LD_ADDR_VAR 0 8
73943: PUSH
73944: LD_VAR 0 8
73948: PUSH
73949: LD_INT 1
73951: NEG
73952: MUL
73953: ST_TO_ADDR
// wait ( time ) ;
73954: LD_VAR 0 8
73958: PPUSH
73959: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73963: LD_INT 35
73965: PPUSH
73966: LD_INT 875
73968: PPUSH
73969: CALL_OW 12
73973: PPUSH
73974: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73978: LD_INT 1
73980: PPUSH
73981: LD_INT 5
73983: PPUSH
73984: CALL_OW 12
73988: PPUSH
73989: LD_VAR 0 1
73993: PPUSH
73994: LD_INT 1
73996: PPUSH
73997: CALL_OW 55
// end ;
74001: GO 73811
// end ;
74003: LD_VAR 0 5
74007: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74008: LD_INT 0
74010: PPUSH
74011: PPUSH
74012: PPUSH
74013: PPUSH
74014: PPUSH
74015: PPUSH
74016: PPUSH
74017: PPUSH
// if not turrets or not factories then
74018: LD_VAR 0 1
74022: NOT
74023: PUSH
74024: LD_VAR 0 2
74028: NOT
74029: OR
74030: IFFALSE 74034
// exit ;
74032: GO 74341
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74034: LD_ADDR_VAR 0 10
74038: PUSH
74039: LD_INT 5
74041: PUSH
74042: LD_INT 6
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 2
74051: PUSH
74052: LD_INT 4
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 3
74061: PUSH
74062: LD_INT 5
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 24
74076: PUSH
74077: LD_INT 25
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 23
74086: PUSH
74087: LD_INT 27
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 42
74100: PUSH
74101: LD_INT 43
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 44
74110: PUSH
74111: LD_INT 46
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 45
74120: PUSH
74121: LD_INT 47
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: LIST
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: LIST
74137: ST_TO_ADDR
// result := [ ] ;
74138: LD_ADDR_VAR 0 3
74142: PUSH
74143: EMPTY
74144: ST_TO_ADDR
// for i in turrets do
74145: LD_ADDR_VAR 0 4
74149: PUSH
74150: LD_VAR 0 1
74154: PUSH
74155: FOR_IN
74156: IFFALSE 74339
// begin nat := GetNation ( i ) ;
74158: LD_ADDR_VAR 0 7
74162: PUSH
74163: LD_VAR 0 4
74167: PPUSH
74168: CALL_OW 248
74172: ST_TO_ADDR
// weapon := 0 ;
74173: LD_ADDR_VAR 0 8
74177: PUSH
74178: LD_INT 0
74180: ST_TO_ADDR
// if not nat then
74181: LD_VAR 0 7
74185: NOT
74186: IFFALSE 74190
// continue ;
74188: GO 74155
// for j in list [ nat ] do
74190: LD_ADDR_VAR 0 5
74194: PUSH
74195: LD_VAR 0 10
74199: PUSH
74200: LD_VAR 0 7
74204: ARRAY
74205: PUSH
74206: FOR_IN
74207: IFFALSE 74248
// if GetBWeapon ( i ) = j [ 1 ] then
74209: LD_VAR 0 4
74213: PPUSH
74214: CALL_OW 269
74218: PUSH
74219: LD_VAR 0 5
74223: PUSH
74224: LD_INT 1
74226: ARRAY
74227: EQUAL
74228: IFFALSE 74246
// begin weapon := j [ 2 ] ;
74230: LD_ADDR_VAR 0 8
74234: PUSH
74235: LD_VAR 0 5
74239: PUSH
74240: LD_INT 2
74242: ARRAY
74243: ST_TO_ADDR
// break ;
74244: GO 74248
// end ;
74246: GO 74206
74248: POP
74249: POP
// if not weapon then
74250: LD_VAR 0 8
74254: NOT
74255: IFFALSE 74259
// continue ;
74257: GO 74155
// for k in factories do
74259: LD_ADDR_VAR 0 6
74263: PUSH
74264: LD_VAR 0 2
74268: PUSH
74269: FOR_IN
74270: IFFALSE 74335
// begin weapons := AvailableWeaponList ( k ) ;
74272: LD_ADDR_VAR 0 9
74276: PUSH
74277: LD_VAR 0 6
74281: PPUSH
74282: CALL_OW 478
74286: ST_TO_ADDR
// if not weapons then
74287: LD_VAR 0 9
74291: NOT
74292: IFFALSE 74296
// continue ;
74294: GO 74269
// if weapon in weapons then
74296: LD_VAR 0 8
74300: PUSH
74301: LD_VAR 0 9
74305: IN
74306: IFFALSE 74333
// begin result := [ i , weapon ] ;
74308: LD_ADDR_VAR 0 3
74312: PUSH
74313: LD_VAR 0 4
74317: PUSH
74318: LD_VAR 0 8
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: ST_TO_ADDR
// exit ;
74327: POP
74328: POP
74329: POP
74330: POP
74331: GO 74341
// end ; end ;
74333: GO 74269
74335: POP
74336: POP
// end ;
74337: GO 74155
74339: POP
74340: POP
// end ;
74341: LD_VAR 0 3
74345: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74346: LD_INT 0
74348: PPUSH
// if not side or side > 8 then
74349: LD_VAR 0 3
74353: NOT
74354: PUSH
74355: LD_VAR 0 3
74359: PUSH
74360: LD_INT 8
74362: GREATER
74363: OR
74364: IFFALSE 74368
// exit ;
74366: GO 74427
// if not range then
74368: LD_VAR 0 4
74372: NOT
74373: IFFALSE 74384
// range := - 12 ;
74375: LD_ADDR_VAR 0 4
74379: PUSH
74380: LD_INT 12
74382: NEG
74383: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74384: LD_VAR 0 1
74388: PPUSH
74389: LD_VAR 0 2
74393: PPUSH
74394: LD_VAR 0 3
74398: PPUSH
74399: LD_VAR 0 4
74403: PPUSH
74404: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74408: LD_VAR 0 1
74412: PPUSH
74413: LD_VAR 0 2
74417: PPUSH
74418: LD_VAR 0 3
74422: PPUSH
74423: CALL_OW 331
// end ;
74427: LD_VAR 0 5
74431: RET
// export function Video ( mode ) ; begin
74432: LD_INT 0
74434: PPUSH
// ingame_video = mode ;
74435: LD_ADDR_OWVAR 52
74439: PUSH
74440: LD_VAR 0 1
74444: ST_TO_ADDR
// interface_hidden = mode ;
74445: LD_ADDR_OWVAR 54
74449: PUSH
74450: LD_VAR 0 1
74454: ST_TO_ADDR
// end ;
74455: LD_VAR 0 2
74459: RET
// export function Join ( array , element ) ; begin
74460: LD_INT 0
74462: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74463: LD_ADDR_VAR 0 3
74467: PUSH
74468: LD_VAR 0 1
74472: PPUSH
74473: LD_VAR 0 1
74477: PUSH
74478: LD_INT 1
74480: PLUS
74481: PPUSH
74482: LD_VAR 0 2
74486: PPUSH
74487: CALL_OW 1
74491: ST_TO_ADDR
// end ;
74492: LD_VAR 0 3
74496: RET
// export function JoinUnion ( array , element ) ; begin
74497: LD_INT 0
74499: PPUSH
// result := array union element ;
74500: LD_ADDR_VAR 0 3
74504: PUSH
74505: LD_VAR 0 1
74509: PUSH
74510: LD_VAR 0 2
74514: UNION
74515: ST_TO_ADDR
// end ;
74516: LD_VAR 0 3
74520: RET
// export function GetBehemoths ( side ) ; begin
74521: LD_INT 0
74523: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74524: LD_ADDR_VAR 0 2
74528: PUSH
74529: LD_INT 22
74531: PUSH
74532: LD_VAR 0 1
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 31
74543: PUSH
74544: LD_INT 25
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PPUSH
74555: CALL_OW 69
74559: ST_TO_ADDR
// end ;
74560: LD_VAR 0 2
74564: RET
// export function Shuffle ( array ) ; var i , index ; begin
74565: LD_INT 0
74567: PPUSH
74568: PPUSH
74569: PPUSH
// result := [ ] ;
74570: LD_ADDR_VAR 0 2
74574: PUSH
74575: EMPTY
74576: ST_TO_ADDR
// if not array then
74577: LD_VAR 0 1
74581: NOT
74582: IFFALSE 74586
// exit ;
74584: GO 74685
// Randomize ;
74586: CALL_OW 10
// for i = array downto 1 do
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: DOUBLE
74596: LD_VAR 0 1
74600: INC
74601: ST_TO_ADDR
74602: LD_INT 1
74604: PUSH
74605: FOR_DOWNTO
74606: IFFALSE 74683
// begin index := rand ( 1 , array ) ;
74608: LD_ADDR_VAR 0 4
74612: PUSH
74613: LD_INT 1
74615: PPUSH
74616: LD_VAR 0 1
74620: PPUSH
74621: CALL_OW 12
74625: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74626: LD_ADDR_VAR 0 2
74630: PUSH
74631: LD_VAR 0 2
74635: PPUSH
74636: LD_VAR 0 2
74640: PUSH
74641: LD_INT 1
74643: PLUS
74644: PPUSH
74645: LD_VAR 0 1
74649: PUSH
74650: LD_VAR 0 4
74654: ARRAY
74655: PPUSH
74656: CALL_OW 2
74660: ST_TO_ADDR
// array := Delete ( array , index ) ;
74661: LD_ADDR_VAR 0 1
74665: PUSH
74666: LD_VAR 0 1
74670: PPUSH
74671: LD_VAR 0 4
74675: PPUSH
74676: CALL_OW 3
74680: ST_TO_ADDR
// end ;
74681: GO 74605
74683: POP
74684: POP
// end ;
74685: LD_VAR 0 2
74689: RET
// export function GetBaseMaterials ( base ) ; begin
74690: LD_INT 0
74692: PPUSH
// result := [ 0 , 0 , 0 ] ;
74693: LD_ADDR_VAR 0 2
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: LD_INT 0
74703: PUSH
74704: LD_INT 0
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: ST_TO_ADDR
// if not base then
74712: LD_VAR 0 1
74716: NOT
74717: IFFALSE 74721
// exit ;
74719: GO 74770
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74721: LD_ADDR_VAR 0 2
74725: PUSH
74726: LD_VAR 0 1
74730: PPUSH
74731: LD_INT 1
74733: PPUSH
74734: CALL_OW 275
74738: PUSH
74739: LD_VAR 0 1
74743: PPUSH
74744: LD_INT 2
74746: PPUSH
74747: CALL_OW 275
74751: PUSH
74752: LD_VAR 0 1
74756: PPUSH
74757: LD_INT 3
74759: PPUSH
74760: CALL_OW 275
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: LIST
74769: ST_TO_ADDR
// end ;
74770: LD_VAR 0 2
74774: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74775: LD_INT 0
74777: PPUSH
74778: PPUSH
// result := array ;
74779: LD_ADDR_VAR 0 3
74783: PUSH
74784: LD_VAR 0 1
74788: ST_TO_ADDR
// if size > 0 then
74789: LD_VAR 0 2
74793: PUSH
74794: LD_INT 0
74796: GREATER
74797: IFFALSE 74843
// for i := array downto size do
74799: LD_ADDR_VAR 0 4
74803: PUSH
74804: DOUBLE
74805: LD_VAR 0 1
74809: INC
74810: ST_TO_ADDR
74811: LD_VAR 0 2
74815: PUSH
74816: FOR_DOWNTO
74817: IFFALSE 74841
// result := Delete ( result , result ) ;
74819: LD_ADDR_VAR 0 3
74823: PUSH
74824: LD_VAR 0 3
74828: PPUSH
74829: LD_VAR 0 3
74833: PPUSH
74834: CALL_OW 3
74838: ST_TO_ADDR
74839: GO 74816
74841: POP
74842: POP
// end ;
74843: LD_VAR 0 3
74847: RET
// export function ComExit ( unit ) ; var tmp ; begin
74848: LD_INT 0
74850: PPUSH
74851: PPUSH
// if not IsInUnit ( unit ) then
74852: LD_VAR 0 1
74856: PPUSH
74857: CALL_OW 310
74861: NOT
74862: IFFALSE 74866
// exit ;
74864: GO 74926
// tmp := IsInUnit ( unit ) ;
74866: LD_ADDR_VAR 0 3
74870: PUSH
74871: LD_VAR 0 1
74875: PPUSH
74876: CALL_OW 310
74880: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74881: LD_VAR 0 3
74885: PPUSH
74886: CALL_OW 247
74890: PUSH
74891: LD_INT 2
74893: EQUAL
74894: IFFALSE 74907
// ComExitVehicle ( unit ) else
74896: LD_VAR 0 1
74900: PPUSH
74901: CALL_OW 121
74905: GO 74916
// ComExitBuilding ( unit ) ;
74907: LD_VAR 0 1
74911: PPUSH
74912: CALL_OW 122
// result := tmp ;
74916: LD_ADDR_VAR 0 2
74920: PUSH
74921: LD_VAR 0 3
74925: ST_TO_ADDR
// end ;
74926: LD_VAR 0 2
74930: RET
// export function ComExitAll ( units ) ; var i ; begin
74931: LD_INT 0
74933: PPUSH
74934: PPUSH
// if not units then
74935: LD_VAR 0 1
74939: NOT
74940: IFFALSE 74944
// exit ;
74942: GO 74970
// for i in units do
74944: LD_ADDR_VAR 0 3
74948: PUSH
74949: LD_VAR 0 1
74953: PUSH
74954: FOR_IN
74955: IFFALSE 74968
// ComExit ( i ) ;
74957: LD_VAR 0 3
74961: PPUSH
74962: CALL 74848 0 1
74966: GO 74954
74968: POP
74969: POP
// end ;
74970: LD_VAR 0 2
74974: RET
// export function ResetHc ; begin
74975: LD_INT 0
74977: PPUSH
// InitHc ;
74978: CALL_OW 19
// hc_importance := 0 ;
74982: LD_ADDR_OWVAR 32
74986: PUSH
74987: LD_INT 0
74989: ST_TO_ADDR
// end ;
74990: LD_VAR 0 1
74994: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74995: LD_INT 0
74997: PPUSH
74998: PPUSH
74999: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75000: LD_ADDR_VAR 0 6
75004: PUSH
75005: LD_VAR 0 1
75009: PUSH
75010: LD_VAR 0 3
75014: PLUS
75015: PUSH
75016: LD_INT 2
75018: DIV
75019: ST_TO_ADDR
// if _x < 0 then
75020: LD_VAR 0 6
75024: PUSH
75025: LD_INT 0
75027: LESS
75028: IFFALSE 75045
// _x := _x * - 1 ;
75030: LD_ADDR_VAR 0 6
75034: PUSH
75035: LD_VAR 0 6
75039: PUSH
75040: LD_INT 1
75042: NEG
75043: MUL
75044: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75045: LD_ADDR_VAR 0 7
75049: PUSH
75050: LD_VAR 0 2
75054: PUSH
75055: LD_VAR 0 4
75059: PLUS
75060: PUSH
75061: LD_INT 2
75063: DIV
75064: ST_TO_ADDR
// if _y < 0 then
75065: LD_VAR 0 7
75069: PUSH
75070: LD_INT 0
75072: LESS
75073: IFFALSE 75090
// _y := _y * - 1 ;
75075: LD_ADDR_VAR 0 7
75079: PUSH
75080: LD_VAR 0 7
75084: PUSH
75085: LD_INT 1
75087: NEG
75088: MUL
75089: ST_TO_ADDR
// result := [ _x , _y ] ;
75090: LD_ADDR_VAR 0 5
75094: PUSH
75095: LD_VAR 0 6
75099: PUSH
75100: LD_VAR 0 7
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: ST_TO_ADDR
// end ;
75109: LD_VAR 0 5
75113: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75114: LD_INT 0
75116: PPUSH
75117: PPUSH
75118: PPUSH
75119: PPUSH
// task := GetTaskList ( unit ) ;
75120: LD_ADDR_VAR 0 7
75124: PUSH
75125: LD_VAR 0 1
75129: PPUSH
75130: CALL_OW 437
75134: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75135: LD_VAR 0 7
75139: NOT
75140: PUSH
75141: LD_VAR 0 1
75145: PPUSH
75146: LD_VAR 0 2
75150: PPUSH
75151: CALL_OW 308
75155: NOT
75156: AND
75157: IFFALSE 75161
// exit ;
75159: GO 75279
// if IsInArea ( unit , area ) then
75161: LD_VAR 0 1
75165: PPUSH
75166: LD_VAR 0 2
75170: PPUSH
75171: CALL_OW 308
75175: IFFALSE 75193
// begin ComMoveToArea ( unit , goAway ) ;
75177: LD_VAR 0 1
75181: PPUSH
75182: LD_VAR 0 3
75186: PPUSH
75187: CALL_OW 113
// exit ;
75191: GO 75279
// end ; if task [ 1 ] [ 1 ] <> M then
75193: LD_VAR 0 7
75197: PUSH
75198: LD_INT 1
75200: ARRAY
75201: PUSH
75202: LD_INT 1
75204: ARRAY
75205: PUSH
75206: LD_STRING M
75208: NONEQUAL
75209: IFFALSE 75213
// exit ;
75211: GO 75279
// x := task [ 1 ] [ 2 ] ;
75213: LD_ADDR_VAR 0 5
75217: PUSH
75218: LD_VAR 0 7
75222: PUSH
75223: LD_INT 1
75225: ARRAY
75226: PUSH
75227: LD_INT 2
75229: ARRAY
75230: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75231: LD_ADDR_VAR 0 6
75235: PUSH
75236: LD_VAR 0 7
75240: PUSH
75241: LD_INT 1
75243: ARRAY
75244: PUSH
75245: LD_INT 3
75247: ARRAY
75248: ST_TO_ADDR
// if InArea ( x , y , area ) then
75249: LD_VAR 0 5
75253: PPUSH
75254: LD_VAR 0 6
75258: PPUSH
75259: LD_VAR 0 2
75263: PPUSH
75264: CALL_OW 309
75268: IFFALSE 75279
// ComStop ( unit ) ;
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 141
// end ;
75279: LD_VAR 0 4
75283: RET
// export function Abs ( value ) ; begin
75284: LD_INT 0
75286: PPUSH
// result := value ;
75287: LD_ADDR_VAR 0 2
75291: PUSH
75292: LD_VAR 0 1
75296: ST_TO_ADDR
// if value < 0 then
75297: LD_VAR 0 1
75301: PUSH
75302: LD_INT 0
75304: LESS
75305: IFFALSE 75322
// result := value * - 1 ;
75307: LD_ADDR_VAR 0 2
75311: PUSH
75312: LD_VAR 0 1
75316: PUSH
75317: LD_INT 1
75319: NEG
75320: MUL
75321: ST_TO_ADDR
// end ;
75322: LD_VAR 0 2
75326: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75327: LD_INT 0
75329: PPUSH
75330: PPUSH
75331: PPUSH
75332: PPUSH
75333: PPUSH
75334: PPUSH
75335: PPUSH
75336: PPUSH
// if not unit or not building then
75337: LD_VAR 0 1
75341: NOT
75342: PUSH
75343: LD_VAR 0 2
75347: NOT
75348: OR
75349: IFFALSE 75353
// exit ;
75351: GO 75579
// x := GetX ( building ) ;
75353: LD_ADDR_VAR 0 4
75357: PUSH
75358: LD_VAR 0 2
75362: PPUSH
75363: CALL_OW 250
75367: ST_TO_ADDR
// y := GetY ( building ) ;
75368: LD_ADDR_VAR 0 6
75372: PUSH
75373: LD_VAR 0 2
75377: PPUSH
75378: CALL_OW 251
75382: ST_TO_ADDR
// d := GetDir ( building ) ;
75383: LD_ADDR_VAR 0 8
75387: PUSH
75388: LD_VAR 0 2
75392: PPUSH
75393: CALL_OW 254
75397: ST_TO_ADDR
// r := 4 ;
75398: LD_ADDR_VAR 0 9
75402: PUSH
75403: LD_INT 4
75405: ST_TO_ADDR
// for i := 1 to 5 do
75406: LD_ADDR_VAR 0 10
75410: PUSH
75411: DOUBLE
75412: LD_INT 1
75414: DEC
75415: ST_TO_ADDR
75416: LD_INT 5
75418: PUSH
75419: FOR_TO
75420: IFFALSE 75577
// begin _x := ShiftX ( x , d , r + i ) ;
75422: LD_ADDR_VAR 0 5
75426: PUSH
75427: LD_VAR 0 4
75431: PPUSH
75432: LD_VAR 0 8
75436: PPUSH
75437: LD_VAR 0 9
75441: PUSH
75442: LD_VAR 0 10
75446: PLUS
75447: PPUSH
75448: CALL_OW 272
75452: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75453: LD_ADDR_VAR 0 7
75457: PUSH
75458: LD_VAR 0 6
75462: PPUSH
75463: LD_VAR 0 8
75467: PPUSH
75468: LD_VAR 0 9
75472: PUSH
75473: LD_VAR 0 10
75477: PLUS
75478: PPUSH
75479: CALL_OW 273
75483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75484: LD_VAR 0 5
75488: PPUSH
75489: LD_VAR 0 7
75493: PPUSH
75494: CALL_OW 488
75498: PUSH
75499: LD_VAR 0 5
75503: PPUSH
75504: LD_VAR 0 7
75508: PPUSH
75509: CALL_OW 428
75513: PPUSH
75514: CALL_OW 247
75518: PUSH
75519: LD_INT 3
75521: PUSH
75522: LD_INT 2
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: IN
75529: NOT
75530: AND
75531: IFFALSE 75575
// begin ComMoveXY ( unit , _x , _y ) ;
75533: LD_VAR 0 1
75537: PPUSH
75538: LD_VAR 0 5
75542: PPUSH
75543: LD_VAR 0 7
75547: PPUSH
75548: CALL_OW 111
// result := [ _x , _y ] ;
75552: LD_ADDR_VAR 0 3
75556: PUSH
75557: LD_VAR 0 5
75561: PUSH
75562: LD_VAR 0 7
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: ST_TO_ADDR
// exit ;
75571: POP
75572: POP
75573: GO 75579
// end ; end ;
75575: GO 75419
75577: POP
75578: POP
// end ;
75579: LD_VAR 0 3
75583: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75584: LD_INT 0
75586: PPUSH
75587: PPUSH
75588: PPUSH
// result := 0 ;
75589: LD_ADDR_VAR 0 3
75593: PUSH
75594: LD_INT 0
75596: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75597: LD_VAR 0 1
75601: PUSH
75602: LD_INT 0
75604: LESS
75605: PUSH
75606: LD_VAR 0 1
75610: PUSH
75611: LD_INT 8
75613: GREATER
75614: OR
75615: PUSH
75616: LD_VAR 0 2
75620: PUSH
75621: LD_INT 0
75623: LESS
75624: OR
75625: PUSH
75626: LD_VAR 0 2
75630: PUSH
75631: LD_INT 8
75633: GREATER
75634: OR
75635: IFFALSE 75639
// exit ;
75637: GO 75714
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75639: LD_ADDR_VAR 0 4
75643: PUSH
75644: LD_INT 22
75646: PUSH
75647: LD_VAR 0 2
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PPUSH
75656: CALL_OW 69
75660: PUSH
75661: FOR_IN
75662: IFFALSE 75712
// begin un := UnitShoot ( i ) ;
75664: LD_ADDR_VAR 0 5
75668: PUSH
75669: LD_VAR 0 4
75673: PPUSH
75674: CALL_OW 504
75678: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75679: LD_VAR 0 5
75683: PPUSH
75684: CALL_OW 255
75688: PUSH
75689: LD_VAR 0 1
75693: EQUAL
75694: IFFALSE 75710
// begin result := un ;
75696: LD_ADDR_VAR 0 3
75700: PUSH
75701: LD_VAR 0 5
75705: ST_TO_ADDR
// exit ;
75706: POP
75707: POP
75708: GO 75714
// end ; end ;
75710: GO 75661
75712: POP
75713: POP
// end ;
75714: LD_VAR 0 3
75718: RET
// export function GetCargoBay ( units ) ; begin
75719: LD_INT 0
75721: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75722: LD_ADDR_VAR 0 2
75726: PUSH
75727: LD_VAR 0 1
75731: PPUSH
75732: LD_INT 2
75734: PUSH
75735: LD_INT 34
75737: PUSH
75738: LD_INT 12
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: PUSH
75745: LD_INT 34
75747: PUSH
75748: LD_INT 51
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 34
75757: PUSH
75758: LD_INT 32
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 34
75767: PUSH
75768: LD_EXP 63
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: PPUSH
75784: CALL_OW 72
75788: ST_TO_ADDR
// end ;
75789: LD_VAR 0 2
75793: RET
// export function Negate ( value ) ; begin
75794: LD_INT 0
75796: PPUSH
// result := not value ;
75797: LD_ADDR_VAR 0 2
75801: PUSH
75802: LD_VAR 0 1
75806: NOT
75807: ST_TO_ADDR
// end ;
75808: LD_VAR 0 2
75812: RET
// export function Inc ( value ) ; begin
75813: LD_INT 0
75815: PPUSH
// result := value + 1 ;
75816: LD_ADDR_VAR 0 2
75820: PUSH
75821: LD_VAR 0 1
75825: PUSH
75826: LD_INT 1
75828: PLUS
75829: ST_TO_ADDR
// end ;
75830: LD_VAR 0 2
75834: RET
// export function Dec ( value ) ; begin
75835: LD_INT 0
75837: PPUSH
// result := value - 1 ;
75838: LD_ADDR_VAR 0 2
75842: PUSH
75843: LD_VAR 0 1
75847: PUSH
75848: LD_INT 1
75850: MINUS
75851: ST_TO_ADDR
// end ;
75852: LD_VAR 0 2
75856: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75857: LD_INT 0
75859: PPUSH
75860: PPUSH
75861: PPUSH
75862: PPUSH
75863: PPUSH
75864: PPUSH
75865: PPUSH
75866: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75867: LD_VAR 0 1
75871: PPUSH
75872: LD_VAR 0 2
75876: PPUSH
75877: CALL_OW 488
75881: NOT
75882: PUSH
75883: LD_VAR 0 3
75887: PPUSH
75888: LD_VAR 0 4
75892: PPUSH
75893: CALL_OW 488
75897: NOT
75898: OR
75899: IFFALSE 75912
// begin result := - 1 ;
75901: LD_ADDR_VAR 0 5
75905: PUSH
75906: LD_INT 1
75908: NEG
75909: ST_TO_ADDR
// exit ;
75910: GO 76147
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75912: LD_ADDR_VAR 0 12
75916: PUSH
75917: LD_VAR 0 1
75921: PPUSH
75922: LD_VAR 0 2
75926: PPUSH
75927: LD_VAR 0 3
75931: PPUSH
75932: LD_VAR 0 4
75936: PPUSH
75937: CALL 74995 0 4
75941: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75942: LD_ADDR_VAR 0 11
75946: PUSH
75947: LD_VAR 0 1
75951: PPUSH
75952: LD_VAR 0 2
75956: PPUSH
75957: LD_VAR 0 12
75961: PUSH
75962: LD_INT 1
75964: ARRAY
75965: PPUSH
75966: LD_VAR 0 12
75970: PUSH
75971: LD_INT 2
75973: ARRAY
75974: PPUSH
75975: CALL_OW 298
75979: ST_TO_ADDR
// distance := 9999 ;
75980: LD_ADDR_VAR 0 10
75984: PUSH
75985: LD_INT 9999
75987: ST_TO_ADDR
// for i := 0 to 5 do
75988: LD_ADDR_VAR 0 6
75992: PUSH
75993: DOUBLE
75994: LD_INT 0
75996: DEC
75997: ST_TO_ADDR
75998: LD_INT 5
76000: PUSH
76001: FOR_TO
76002: IFFALSE 76145
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76004: LD_ADDR_VAR 0 7
76008: PUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: LD_VAR 0 6
76018: PPUSH
76019: LD_VAR 0 11
76023: PPUSH
76024: CALL_OW 272
76028: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76029: LD_ADDR_VAR 0 8
76033: PUSH
76034: LD_VAR 0 2
76038: PPUSH
76039: LD_VAR 0 6
76043: PPUSH
76044: LD_VAR 0 11
76048: PPUSH
76049: CALL_OW 273
76053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76054: LD_VAR 0 7
76058: PPUSH
76059: LD_VAR 0 8
76063: PPUSH
76064: CALL_OW 488
76068: NOT
76069: IFFALSE 76073
// continue ;
76071: GO 76001
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76073: LD_ADDR_VAR 0 9
76077: PUSH
76078: LD_VAR 0 12
76082: PUSH
76083: LD_INT 1
76085: ARRAY
76086: PPUSH
76087: LD_VAR 0 12
76091: PUSH
76092: LD_INT 2
76094: ARRAY
76095: PPUSH
76096: LD_VAR 0 7
76100: PPUSH
76101: LD_VAR 0 8
76105: PPUSH
76106: CALL_OW 298
76110: ST_TO_ADDR
// if tmp < distance then
76111: LD_VAR 0 9
76115: PUSH
76116: LD_VAR 0 10
76120: LESS
76121: IFFALSE 76143
// begin result := i ;
76123: LD_ADDR_VAR 0 5
76127: PUSH
76128: LD_VAR 0 6
76132: ST_TO_ADDR
// distance := tmp ;
76133: LD_ADDR_VAR 0 10
76137: PUSH
76138: LD_VAR 0 9
76142: ST_TO_ADDR
// end ; end ;
76143: GO 76001
76145: POP
76146: POP
// end ;
76147: LD_VAR 0 5
76151: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76152: LD_INT 0
76154: PPUSH
76155: PPUSH
// if not driver or not IsInUnit ( driver ) then
76156: LD_VAR 0 1
76160: NOT
76161: PUSH
76162: LD_VAR 0 1
76166: PPUSH
76167: CALL_OW 310
76171: NOT
76172: OR
76173: IFFALSE 76177
// exit ;
76175: GO 76267
// vehicle := IsInUnit ( driver ) ;
76177: LD_ADDR_VAR 0 3
76181: PUSH
76182: LD_VAR 0 1
76186: PPUSH
76187: CALL_OW 310
76191: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76192: LD_VAR 0 1
76196: PPUSH
76197: LD_STRING \
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: LD_INT 0
76205: PUSH
76206: LD_INT 0
76208: PUSH
76209: LD_INT 0
76211: PUSH
76212: LD_INT 0
76214: PUSH
76215: LD_INT 0
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: PUSH
76227: LD_STRING E
76229: PUSH
76230: LD_INT 0
76232: PUSH
76233: LD_INT 0
76235: PUSH
76236: LD_VAR 0 3
76240: PUSH
76241: LD_INT 0
76243: PUSH
76244: LD_INT 0
76246: PUSH
76247: LD_INT 0
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PPUSH
76263: CALL_OW 446
// end ;
76267: LD_VAR 0 2
76271: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76272: LD_INT 0
76274: PPUSH
76275: PPUSH
// if not driver or not IsInUnit ( driver ) then
76276: LD_VAR 0 1
76280: NOT
76281: PUSH
76282: LD_VAR 0 1
76286: PPUSH
76287: CALL_OW 310
76291: NOT
76292: OR
76293: IFFALSE 76297
// exit ;
76295: GO 76387
// vehicle := IsInUnit ( driver ) ;
76297: LD_ADDR_VAR 0 3
76301: PUSH
76302: LD_VAR 0 1
76306: PPUSH
76307: CALL_OW 310
76311: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76312: LD_VAR 0 1
76316: PPUSH
76317: LD_STRING \
76319: PUSH
76320: LD_INT 0
76322: PUSH
76323: LD_INT 0
76325: PUSH
76326: LD_INT 0
76328: PUSH
76329: LD_INT 0
76331: PUSH
76332: LD_INT 0
76334: PUSH
76335: LD_INT 0
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: LIST
76344: LIST
76345: LIST
76346: PUSH
76347: LD_STRING E
76349: PUSH
76350: LD_INT 0
76352: PUSH
76353: LD_INT 0
76355: PUSH
76356: LD_VAR 0 3
76360: PUSH
76361: LD_INT 0
76363: PUSH
76364: LD_INT 0
76366: PUSH
76367: LD_INT 0
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PPUSH
76383: CALL_OW 447
// end ;
76387: LD_VAR 0 2
76391: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76392: LD_INT 0
76394: PPUSH
76395: PPUSH
76396: PPUSH
// tmp := [ ] ;
76397: LD_ADDR_VAR 0 5
76401: PUSH
76402: EMPTY
76403: ST_TO_ADDR
// for i in units do
76404: LD_ADDR_VAR 0 4
76408: PUSH
76409: LD_VAR 0 1
76413: PUSH
76414: FOR_IN
76415: IFFALSE 76453
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76417: LD_ADDR_VAR 0 5
76421: PUSH
76422: LD_VAR 0 5
76426: PPUSH
76427: LD_VAR 0 5
76431: PUSH
76432: LD_INT 1
76434: PLUS
76435: PPUSH
76436: LD_VAR 0 4
76440: PPUSH
76441: CALL_OW 256
76445: PPUSH
76446: CALL_OW 2
76450: ST_TO_ADDR
76451: GO 76414
76453: POP
76454: POP
// if not tmp then
76455: LD_VAR 0 5
76459: NOT
76460: IFFALSE 76464
// exit ;
76462: GO 76512
// if asc then
76464: LD_VAR 0 2
76468: IFFALSE 76492
// result := SortListByListAsc ( units , tmp ) else
76470: LD_ADDR_VAR 0 3
76474: PUSH
76475: LD_VAR 0 1
76479: PPUSH
76480: LD_VAR 0 5
76484: PPUSH
76485: CALL_OW 76
76489: ST_TO_ADDR
76490: GO 76512
// result := SortListByListDesc ( units , tmp ) ;
76492: LD_ADDR_VAR 0 3
76496: PUSH
76497: LD_VAR 0 1
76501: PPUSH
76502: LD_VAR 0 5
76506: PPUSH
76507: CALL_OW 77
76511: ST_TO_ADDR
// end ;
76512: LD_VAR 0 3
76516: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76517: LD_INT 0
76519: PPUSH
76520: PPUSH
// task := GetTaskList ( mech ) ;
76521: LD_ADDR_VAR 0 4
76525: PUSH
76526: LD_VAR 0 1
76530: PPUSH
76531: CALL_OW 437
76535: ST_TO_ADDR
// if not task then
76536: LD_VAR 0 4
76540: NOT
76541: IFFALSE 76545
// exit ;
76543: GO 76587
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76545: LD_ADDR_VAR 0 3
76549: PUSH
76550: LD_VAR 0 4
76554: PUSH
76555: LD_INT 1
76557: ARRAY
76558: PUSH
76559: LD_INT 1
76561: ARRAY
76562: PUSH
76563: LD_STRING r
76565: EQUAL
76566: PUSH
76567: LD_VAR 0 4
76571: PUSH
76572: LD_INT 1
76574: ARRAY
76575: PUSH
76576: LD_INT 4
76578: ARRAY
76579: PUSH
76580: LD_VAR 0 2
76584: EQUAL
76585: AND
76586: ST_TO_ADDR
// end ;
76587: LD_VAR 0 3
76591: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76592: LD_INT 0
76594: PPUSH
// SetDir ( unit , d ) ;
76595: LD_VAR 0 1
76599: PPUSH
76600: LD_VAR 0 4
76604: PPUSH
76605: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76609: LD_VAR 0 1
76613: PPUSH
76614: LD_VAR 0 2
76618: PPUSH
76619: LD_VAR 0 3
76623: PPUSH
76624: LD_VAR 0 5
76628: PPUSH
76629: CALL_OW 48
// end ;
76633: LD_VAR 0 6
76637: RET
// export function ToNaturalNumber ( number ) ; begin
76638: LD_INT 0
76640: PPUSH
// result := number div 1 ;
76641: LD_ADDR_VAR 0 2
76645: PUSH
76646: LD_VAR 0 1
76650: PUSH
76651: LD_INT 1
76653: DIV
76654: ST_TO_ADDR
// if number < 0 then
76655: LD_VAR 0 1
76659: PUSH
76660: LD_INT 0
76662: LESS
76663: IFFALSE 76673
// result := 0 ;
76665: LD_ADDR_VAR 0 2
76669: PUSH
76670: LD_INT 0
76672: ST_TO_ADDR
// end ;
76673: LD_VAR 0 2
76677: RET
// export function SortByClass ( units , class ) ; var un ; begin
76678: LD_INT 0
76680: PPUSH
76681: PPUSH
// if not units or not class then
76682: LD_VAR 0 1
76686: NOT
76687: PUSH
76688: LD_VAR 0 2
76692: NOT
76693: OR
76694: IFFALSE 76698
// exit ;
76696: GO 76793
// result := [ ] ;
76698: LD_ADDR_VAR 0 3
76702: PUSH
76703: EMPTY
76704: ST_TO_ADDR
// for un in units do
76705: LD_ADDR_VAR 0 4
76709: PUSH
76710: LD_VAR 0 1
76714: PUSH
76715: FOR_IN
76716: IFFALSE 76791
// if GetClass ( un ) = class then
76718: LD_VAR 0 4
76722: PPUSH
76723: CALL_OW 257
76727: PUSH
76728: LD_VAR 0 2
76732: EQUAL
76733: IFFALSE 76760
// result := Insert ( result , 1 , un ) else
76735: LD_ADDR_VAR 0 3
76739: PUSH
76740: LD_VAR 0 3
76744: PPUSH
76745: LD_INT 1
76747: PPUSH
76748: LD_VAR 0 4
76752: PPUSH
76753: CALL_OW 2
76757: ST_TO_ADDR
76758: GO 76789
// result := Replace ( result , result + 1 , un ) ;
76760: LD_ADDR_VAR 0 3
76764: PUSH
76765: LD_VAR 0 3
76769: PPUSH
76770: LD_VAR 0 3
76774: PUSH
76775: LD_INT 1
76777: PLUS
76778: PPUSH
76779: LD_VAR 0 4
76783: PPUSH
76784: CALL_OW 1
76788: ST_TO_ADDR
76789: GO 76715
76791: POP
76792: POP
// end ;
76793: LD_VAR 0 3
76797: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76798: LD_INT 0
76800: PPUSH
76801: PPUSH
76802: PPUSH
76803: PPUSH
76804: PPUSH
76805: PPUSH
76806: PPUSH
// result := [ ] ;
76807: LD_ADDR_VAR 0 4
76811: PUSH
76812: EMPTY
76813: ST_TO_ADDR
// if x - r < 0 then
76814: LD_VAR 0 1
76818: PUSH
76819: LD_VAR 0 3
76823: MINUS
76824: PUSH
76825: LD_INT 0
76827: LESS
76828: IFFALSE 76840
// min_x := 0 else
76830: LD_ADDR_VAR 0 8
76834: PUSH
76835: LD_INT 0
76837: ST_TO_ADDR
76838: GO 76856
// min_x := x - r ;
76840: LD_ADDR_VAR 0 8
76844: PUSH
76845: LD_VAR 0 1
76849: PUSH
76850: LD_VAR 0 3
76854: MINUS
76855: ST_TO_ADDR
// if y - r < 0 then
76856: LD_VAR 0 2
76860: PUSH
76861: LD_VAR 0 3
76865: MINUS
76866: PUSH
76867: LD_INT 0
76869: LESS
76870: IFFALSE 76882
// min_y := 0 else
76872: LD_ADDR_VAR 0 7
76876: PUSH
76877: LD_INT 0
76879: ST_TO_ADDR
76880: GO 76898
// min_y := y - r ;
76882: LD_ADDR_VAR 0 7
76886: PUSH
76887: LD_VAR 0 2
76891: PUSH
76892: LD_VAR 0 3
76896: MINUS
76897: ST_TO_ADDR
// max_x := x + r ;
76898: LD_ADDR_VAR 0 9
76902: PUSH
76903: LD_VAR 0 1
76907: PUSH
76908: LD_VAR 0 3
76912: PLUS
76913: ST_TO_ADDR
// max_y := y + r ;
76914: LD_ADDR_VAR 0 10
76918: PUSH
76919: LD_VAR 0 2
76923: PUSH
76924: LD_VAR 0 3
76928: PLUS
76929: ST_TO_ADDR
// for _x = min_x to max_x do
76930: LD_ADDR_VAR 0 5
76934: PUSH
76935: DOUBLE
76936: LD_VAR 0 8
76940: DEC
76941: ST_TO_ADDR
76942: LD_VAR 0 9
76946: PUSH
76947: FOR_TO
76948: IFFALSE 77049
// for _y = min_y to max_y do
76950: LD_ADDR_VAR 0 6
76954: PUSH
76955: DOUBLE
76956: LD_VAR 0 7
76960: DEC
76961: ST_TO_ADDR
76962: LD_VAR 0 10
76966: PUSH
76967: FOR_TO
76968: IFFALSE 77045
// begin if not ValidHex ( _x , _y ) then
76970: LD_VAR 0 5
76974: PPUSH
76975: LD_VAR 0 6
76979: PPUSH
76980: CALL_OW 488
76984: NOT
76985: IFFALSE 76989
// continue ;
76987: GO 76967
// if GetResourceTypeXY ( _x , _y ) then
76989: LD_VAR 0 5
76993: PPUSH
76994: LD_VAR 0 6
76998: PPUSH
76999: CALL_OW 283
77003: IFFALSE 77043
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77005: LD_ADDR_VAR 0 4
77009: PUSH
77010: LD_VAR 0 4
77014: PPUSH
77015: LD_VAR 0 4
77019: PUSH
77020: LD_INT 1
77022: PLUS
77023: PPUSH
77024: LD_VAR 0 5
77028: PUSH
77029: LD_VAR 0 6
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PPUSH
77038: CALL_OW 1
77042: ST_TO_ADDR
// end ;
77043: GO 76967
77045: POP
77046: POP
77047: GO 76947
77049: POP
77050: POP
// end ;
77051: LD_VAR 0 4
77055: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77056: LD_INT 0
77058: PPUSH
77059: PPUSH
77060: PPUSH
77061: PPUSH
77062: PPUSH
77063: PPUSH
77064: PPUSH
77065: PPUSH
// if not units then
77066: LD_VAR 0 1
77070: NOT
77071: IFFALSE 77075
// exit ;
77073: GO 77500
// result := UnitFilter ( units , [ f_ok ] ) ;
77075: LD_ADDR_VAR 0 3
77079: PUSH
77080: LD_VAR 0 1
77084: PPUSH
77085: LD_INT 50
77087: PUSH
77088: EMPTY
77089: LIST
77090: PPUSH
77091: CALL_OW 72
77095: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77096: LD_ADDR_VAR 0 8
77100: PUSH
77101: LD_VAR 0 1
77105: PUSH
77106: LD_INT 1
77108: ARRAY
77109: PPUSH
77110: CALL_OW 255
77114: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77115: LD_ADDR_VAR 0 10
77119: PUSH
77120: LD_INT 29
77122: PUSH
77123: LD_EXP 66
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: ST_TO_ADDR
// if not result then
77132: LD_VAR 0 3
77136: NOT
77137: IFFALSE 77141
// exit ;
77139: GO 77500
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77141: LD_ADDR_VAR 0 5
77145: PUSH
77146: LD_INT 81
77148: PUSH
77149: LD_VAR 0 8
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: PPUSH
77158: CALL_OW 69
77162: ST_TO_ADDR
// for i in result do
77163: LD_ADDR_VAR 0 4
77167: PUSH
77168: LD_VAR 0 3
77172: PUSH
77173: FOR_IN
77174: IFFALSE 77498
// begin tag := GetTag ( i ) + 1 ;
77176: LD_ADDR_VAR 0 9
77180: PUSH
77181: LD_VAR 0 4
77185: PPUSH
77186: CALL_OW 110
77190: PUSH
77191: LD_INT 1
77193: PLUS
77194: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77195: LD_ADDR_VAR 0 7
77199: PUSH
77200: LD_VAR 0 4
77204: PPUSH
77205: CALL_OW 250
77209: PPUSH
77210: LD_VAR 0 4
77214: PPUSH
77215: CALL_OW 251
77219: PPUSH
77220: LD_INT 6
77222: PPUSH
77223: CALL 76798 0 3
77227: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77228: LD_VAR 0 7
77232: PUSH
77233: LD_VAR 0 4
77237: PPUSH
77238: CALL_OW 264
77242: PUSH
77243: LD_VAR 0 10
77247: IN
77248: NOT
77249: AND
77250: IFFALSE 77289
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77252: LD_VAR 0 4
77256: PPUSH
77257: LD_VAR 0 7
77261: PUSH
77262: LD_INT 1
77264: ARRAY
77265: PUSH
77266: LD_INT 1
77268: ARRAY
77269: PPUSH
77270: LD_VAR 0 7
77274: PUSH
77275: LD_INT 1
77277: ARRAY
77278: PUSH
77279: LD_INT 2
77281: ARRAY
77282: PPUSH
77283: CALL_OW 116
77287: GO 77496
// if path > tag then
77289: LD_VAR 0 2
77293: PUSH
77294: LD_VAR 0 9
77298: GREATER
77299: IFFALSE 77466
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77301: LD_ADDR_VAR 0 6
77305: PUSH
77306: LD_VAR 0 5
77310: PPUSH
77311: LD_INT 91
77313: PUSH
77314: LD_VAR 0 4
77318: PUSH
77319: LD_INT 12
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: LIST
77326: PPUSH
77327: CALL_OW 72
77331: ST_TO_ADDR
// if nearEnemy then
77332: LD_VAR 0 6
77336: IFFALSE 77364
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77338: LD_VAR 0 4
77342: PPUSH
77343: LD_VAR 0 6
77347: PPUSH
77348: LD_VAR 0 4
77352: PPUSH
77353: CALL_OW 74
77357: PPUSH
77358: CALL_OW 115
77362: GO 77464
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77364: LD_VAR 0 4
77368: PPUSH
77369: LD_VAR 0 2
77373: PUSH
77374: LD_VAR 0 9
77378: ARRAY
77379: PUSH
77380: LD_INT 1
77382: ARRAY
77383: PPUSH
77384: LD_VAR 0 2
77388: PUSH
77389: LD_VAR 0 9
77393: ARRAY
77394: PUSH
77395: LD_INT 2
77397: ARRAY
77398: PPUSH
77399: CALL_OW 297
77403: PUSH
77404: LD_INT 6
77406: GREATER
77407: IFFALSE 77450
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77409: LD_VAR 0 4
77413: PPUSH
77414: LD_VAR 0 2
77418: PUSH
77419: LD_VAR 0 9
77423: ARRAY
77424: PUSH
77425: LD_INT 1
77427: ARRAY
77428: PPUSH
77429: LD_VAR 0 2
77433: PUSH
77434: LD_VAR 0 9
77438: ARRAY
77439: PUSH
77440: LD_INT 2
77442: ARRAY
77443: PPUSH
77444: CALL_OW 114
77448: GO 77464
// SetTag ( i , tag ) ;
77450: LD_VAR 0 4
77454: PPUSH
77455: LD_VAR 0 9
77459: PPUSH
77460: CALL_OW 109
// end else
77464: GO 77496
// if enemy then
77466: LD_VAR 0 5
77470: IFFALSE 77496
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77472: LD_VAR 0 4
77476: PPUSH
77477: LD_VAR 0 5
77481: PPUSH
77482: LD_VAR 0 4
77486: PPUSH
77487: CALL_OW 74
77491: PPUSH
77492: CALL_OW 115
// end ;
77496: GO 77173
77498: POP
77499: POP
// end ;
77500: LD_VAR 0 3
77504: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77505: LD_INT 0
77507: PPUSH
77508: PPUSH
77509: PPUSH
// if not unit or IsInUnit ( unit ) then
77510: LD_VAR 0 1
77514: NOT
77515: PUSH
77516: LD_VAR 0 1
77520: PPUSH
77521: CALL_OW 310
77525: OR
77526: IFFALSE 77530
// exit ;
77528: GO 77621
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77530: LD_ADDR_VAR 0 4
77534: PUSH
77535: LD_VAR 0 1
77539: PPUSH
77540: CALL_OW 250
77544: PPUSH
77545: LD_VAR 0 2
77549: PPUSH
77550: LD_INT 1
77552: PPUSH
77553: CALL_OW 272
77557: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77558: LD_ADDR_VAR 0 5
77562: PUSH
77563: LD_VAR 0 1
77567: PPUSH
77568: CALL_OW 251
77572: PPUSH
77573: LD_VAR 0 2
77577: PPUSH
77578: LD_INT 1
77580: PPUSH
77581: CALL_OW 273
77585: ST_TO_ADDR
// if ValidHex ( x , y ) then
77586: LD_VAR 0 4
77590: PPUSH
77591: LD_VAR 0 5
77595: PPUSH
77596: CALL_OW 488
77600: IFFALSE 77621
// ComTurnXY ( unit , x , y ) ;
77602: LD_VAR 0 1
77606: PPUSH
77607: LD_VAR 0 4
77611: PPUSH
77612: LD_VAR 0 5
77616: PPUSH
77617: CALL_OW 118
// end ;
77621: LD_VAR 0 3
77625: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77626: LD_INT 0
77628: PPUSH
77629: PPUSH
// result := false ;
77630: LD_ADDR_VAR 0 3
77634: PUSH
77635: LD_INT 0
77637: ST_TO_ADDR
// if not units then
77638: LD_VAR 0 2
77642: NOT
77643: IFFALSE 77647
// exit ;
77645: GO 77692
// for i in units do
77647: LD_ADDR_VAR 0 4
77651: PUSH
77652: LD_VAR 0 2
77656: PUSH
77657: FOR_IN
77658: IFFALSE 77690
// if See ( side , i ) then
77660: LD_VAR 0 1
77664: PPUSH
77665: LD_VAR 0 4
77669: PPUSH
77670: CALL_OW 292
77674: IFFALSE 77688
// begin result := true ;
77676: LD_ADDR_VAR 0 3
77680: PUSH
77681: LD_INT 1
77683: ST_TO_ADDR
// exit ;
77684: POP
77685: POP
77686: GO 77692
// end ;
77688: GO 77657
77690: POP
77691: POP
// end ;
77692: LD_VAR 0 3
77696: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77697: LD_INT 0
77699: PPUSH
77700: PPUSH
77701: PPUSH
77702: PPUSH
// if not unit or not points then
77703: LD_VAR 0 1
77707: NOT
77708: PUSH
77709: LD_VAR 0 2
77713: NOT
77714: OR
77715: IFFALSE 77719
// exit ;
77717: GO 77809
// dist := 99999 ;
77719: LD_ADDR_VAR 0 5
77723: PUSH
77724: LD_INT 99999
77726: ST_TO_ADDR
// for i in points do
77727: LD_ADDR_VAR 0 4
77731: PUSH
77732: LD_VAR 0 2
77736: PUSH
77737: FOR_IN
77738: IFFALSE 77807
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77740: LD_ADDR_VAR 0 6
77744: PUSH
77745: LD_VAR 0 1
77749: PPUSH
77750: LD_VAR 0 4
77754: PUSH
77755: LD_INT 1
77757: ARRAY
77758: PPUSH
77759: LD_VAR 0 4
77763: PUSH
77764: LD_INT 2
77766: ARRAY
77767: PPUSH
77768: CALL_OW 297
77772: ST_TO_ADDR
// if tmpDist < dist then
77773: LD_VAR 0 6
77777: PUSH
77778: LD_VAR 0 5
77782: LESS
77783: IFFALSE 77805
// begin result := i ;
77785: LD_ADDR_VAR 0 3
77789: PUSH
77790: LD_VAR 0 4
77794: ST_TO_ADDR
// dist := tmpDist ;
77795: LD_ADDR_VAR 0 5
77799: PUSH
77800: LD_VAR 0 6
77804: ST_TO_ADDR
// end ; end ;
77805: GO 77737
77807: POP
77808: POP
// end ; end_of_file
77809: LD_VAR 0 3
77813: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77814: LD_VAR 0 1
77818: PUSH
77819: LD_INT 200
77821: DOUBLE
77822: GREATEREQUAL
77823: IFFALSE 77831
77825: LD_INT 299
77827: DOUBLE
77828: LESSEQUAL
77829: IFTRUE 77833
77831: GO 77865
77833: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77834: LD_VAR 0 1
77838: PPUSH
77839: LD_VAR 0 2
77843: PPUSH
77844: LD_VAR 0 3
77848: PPUSH
77849: LD_VAR 0 4
77853: PPUSH
77854: LD_VAR 0 5
77858: PPUSH
77859: CALL 33461 0 5
77863: GO 77942
77865: LD_INT 300
77867: DOUBLE
77868: GREATEREQUAL
77869: IFFALSE 77877
77871: LD_INT 399
77873: DOUBLE
77874: LESSEQUAL
77875: IFTRUE 77879
77877: GO 77941
77879: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77880: LD_VAR 0 1
77884: PPUSH
77885: LD_VAR 0 2
77889: PPUSH
77890: LD_VAR 0 3
77894: PPUSH
77895: LD_VAR 0 4
77899: PPUSH
77900: LD_VAR 0 5
77904: PPUSH
77905: LD_VAR 0 6
77909: PPUSH
77910: LD_VAR 0 7
77914: PPUSH
77915: LD_VAR 0 8
77919: PPUSH
77920: LD_VAR 0 9
77924: PPUSH
77925: LD_VAR 0 10
77929: PPUSH
77930: LD_VAR 0 11
77934: PPUSH
77935: CALL 31103 0 11
77939: GO 77942
77941: POP
// end ;
77942: PPOPN 11
77944: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77945: LD_VAR 0 1
77949: PPUSH
77950: LD_VAR 0 2
77954: PPUSH
77955: LD_VAR 0 3
77959: PPUSH
77960: LD_VAR 0 4
77964: PPUSH
77965: LD_VAR 0 5
77969: PPUSH
77970: CALL 33197 0 5
// end ; end_of_file
77974: PPOPN 5
77976: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77977: LD_VAR 0 1
77981: PPUSH
77982: LD_VAR 0 2
77986: PPUSH
77987: LD_VAR 0 3
77991: PPUSH
77992: LD_VAR 0 4
77996: PPUSH
77997: LD_VAR 0 5
78001: PPUSH
78002: LD_VAR 0 6
78006: PPUSH
78007: CALL 18796 0 6
// end ;
78011: PPOPN 6
78013: END
