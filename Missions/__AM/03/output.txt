// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39980 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39980 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39980 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39980 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39980 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39980 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39980 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39980 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 42082 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39980 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39980 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39980 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39980 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39980 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39980 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39980 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 77643 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 77643 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 78069 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 39980 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 77643 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 77643 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 39980 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 5 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 5
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 39980 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 39980 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16688
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; filter := filter diff Cornel ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_VAR 0 3
16561: PUSH
16562: LD_EXP 44
16566: DIFF
16567: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16568: LD_INT 70
16570: PPUSH
16571: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16575: LD_EXP 44
16579: PPUSH
16580: LD_INT 208
16582: PPUSH
16583: LD_INT 62
16585: PPUSH
16586: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16590: LD_EXP 44
16594: PPUSH
16595: LD_INT 16
16597: PPUSH
16598: CALL_OW 308
16602: NOT
16603: IFFALSE 16568
// wait ( 0 0$2 ) ;
16605: LD_INT 70
16607: PPUSH
16608: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PPUSH
16621: LD_INT 195
16623: PPUSH
16624: LD_INT 57
16626: PPUSH
16627: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16631: LD_VAR 0 3
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: PPUSH
16640: LD_INT 217
16642: PPUSH
16643: LD_INT 53
16645: PPUSH
16646: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 3
16657: ARRAY
16658: PPUSH
16659: LD_INT 199
16661: PPUSH
16662: LD_INT 48
16664: PPUSH
16665: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 4
16676: ARRAY
16677: PPUSH
16678: LD_INT 179
16680: PPUSH
16681: LD_INT 48
16683: PPUSH
16684: CALL_OW 111
// end ; end_of_file
16688: PPOPN 3
16690: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16691: LD_EXP 53
16695: PUSH
16696: LD_EXP 31
16700: NOT
16701: AND
16702: PUSH
16703: LD_EXP 32
16707: NOT
16708: AND
16709: IFFALSE 17159
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin enable ;
16720: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16721: LD_ADDR_VAR 0 4
16725: PUSH
16726: LD_INT 81
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// for i = 1 to ru_patrol do
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: DOUBLE
16747: LD_INT 1
16749: DEC
16750: ST_TO_ADDR
16751: LD_EXP 53
16755: PUSH
16756: FOR_TO
16757: IFFALSE 17157
// begin un := ru_patrol [ i ] ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_EXP 53
16768: PUSH
16769: LD_VAR 0 2
16773: ARRAY
16774: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16775: LD_VAR 0 1
16779: PPUSH
16780: LD_INT 13
16782: PPUSH
16783: CALL_OW 308
16787: IFFALSE 16892
// begin if not ru_alert then
16789: LD_EXP 60
16793: NOT
16794: IFFALSE 16804
// ru_alert := true ;
16796: LD_ADDR_EXP 60
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if not See ( 1 , un ) then
16804: LD_INT 1
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 292
16816: NOT
16817: IFFALSE 16831
// SetLives ( un , 1000 ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 1000
16826: PPUSH
16827: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16831: LD_ADDR_EXP 53
16835: PUSH
16836: LD_EXP 53
16840: PUSH
16841: LD_VAR 0 1
16845: DIFF
16846: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 30
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: PPUSH
16881: CALL 1007 0 1
16885: PPUSH
16886: CALL_OW 120
// continue ;
16890: GO 16756
// end ; if IsOk ( un ) and not HasTask ( un ) then
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 302
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 314
16911: NOT
16912: AND
16913: IFFALSE 17006
// begin for j = 1 to ru_firepoints_south [ i ] do
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: DOUBLE
16921: LD_INT 1
16923: DEC
16924: ST_TO_ADDR
16925: LD_EXP 59
16929: PUSH
16930: LD_VAR 0 2
16934: ARRAY
16935: PUSH
16936: FOR_TO
16937: IFFALSE 17004
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_EXP 59
16948: PUSH
16949: LD_VAR 0 2
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 3
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: LD_EXP 59
16969: PUSH
16970: LD_VAR 0 2
16974: ARRAY
16975: PUSH
16976: LD_VAR 0 3
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16990: LD_VAR 0 1
16994: PPUSH
16995: LD_INT 70
16997: PPUSH
16998: CALL_OW 202
// end ;
17002: GO 16936
17004: POP
17005: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 256
17015: PUSH
17016: LD_INT 700
17018: LESS
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 13
17027: PPUSH
17028: CALL_OW 308
17032: NOT
17033: AND
17034: IFFALSE 17086
// begin ComMoveToArea ( un , retreatArea ) ;
17036: LD_VAR 0 1
17040: PPUSH
17041: LD_INT 13
17043: PPUSH
17044: CALL_OW 113
// if not ru_alert_xy then
17048: LD_EXP 61
17052: NOT
17053: IFFALSE 17084
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17055: LD_ADDR_EXP 61
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 250
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
// end else
17084: GO 17155
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 74
17105: PPUSH
17106: CALL_OW 296
17110: PUSH
17111: LD_INT 9
17113: LESS
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 256
17124: PUSH
17125: LD_INT 500
17127: GREATER
17128: AND
17129: IFFALSE 17155
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_VAR 0 4
17140: PPUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 74
17150: PPUSH
17151: CALL_OW 115
// end ;
17155: GO 16756
17157: POP
17158: POP
// end ;
17159: PPOPN 4
17161: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17162: LD_EXP 60
17166: PUSH
17167: LD_EXP 61
17171: AND
17172: PUSH
17173: LD_EXP 31
17177: NOT
17178: AND
17179: PUSH
17180: LD_EXP 32
17184: NOT
17185: AND
17186: IFFALSE 17396
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// begin enable ;
17195: ENABLE
// if not ru_vehicles then
17196: LD_EXP 56
17200: NOT
17201: IFFALSE 17205
// exit ;
17203: GO 17396
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 3
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if ru_vehicles then
17225: LD_EXP 56
17229: IFFALSE 17396
// begin for i in ru_vehicles do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_EXP 56
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17394
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 302
17253: PUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: LD_VAR 0 2
17263: PPUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 74
17273: PPUSH
17274: CALL_OW 296
17278: PUSH
17279: LD_INT 9
17281: LESS
17282: AND
17283: IFFALSE 17309
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17285: LD_VAR 0 1
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 74
17304: PPUSH
17305: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 314
17318: NOT
17319: PUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 302
17329: AND
17330: PUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: LD_EXP 61
17340: PUSH
17341: LD_INT 1
17343: ARRAY
17344: PPUSH
17345: LD_EXP 61
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: PPUSH
17354: CALL_OW 297
17358: PUSH
17359: LD_INT 10
17361: GREATER
17362: AND
17363: IFFALSE 17392
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_EXP 61
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_EXP 61
17383: PUSH
17384: LD_INT 2
17386: ARRAY
17387: PPUSH
17388: CALL_OW 114
// end ;
17392: GO 17241
17394: POP
17395: POP
// end ; end ;
17396: PPOPN 2
17398: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17399: LD_EXP 61
17403: PUSH
17404: LD_EXP 60
17408: AND
17409: PUSH
17410: LD_INT 3
17412: PPUSH
17413: CALL_OW 463
17417: NOT
17418: AND
17419: PUSH
17420: LD_EXP 31
17424: NOT
17425: AND
17426: PUSH
17427: LD_EXP 32
17431: NOT
17432: AND
17433: IFFALSE 17528
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin enable ;
17441: ENABLE
// ru_alert_xy := false ;
17442: LD_ADDR_EXP 61
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// ru_alert := false ;
17450: LD_ADDR_EXP 60
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// if ru_vehicles then
17458: LD_EXP 56
17462: IFFALSE 17528
// for i in ru_vehicles do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_EXP 56
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17526
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 302
17486: PUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_INT 89
17494: PPUSH
17495: LD_INT 36
17497: PPUSH
17498: CALL_OW 297
17502: PUSH
17503: LD_INT 10
17505: GREATER
17506: AND
17507: IFFALSE 17524
// ComMoveXY ( i , 89 , 36 ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 89
17516: PPUSH
17517: LD_INT 36
17519: PPUSH
17520: CALL_OW 111
17524: GO 17474
17526: POP
17527: POP
// end ;
17528: PPOPN 1
17530: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17531: LD_EXP 55
17535: PUSH
17536: LD_EXP 31
17540: NOT
17541: AND
17542: PUSH
17543: LD_EXP 32
17547: NOT
17548: AND
17549: IFFALSE 17833
17551: GO 17553
17553: DISABLE
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
// begin enable ;
17559: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 81
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: ST_TO_ADDR
// for i = 1 to ru_forest do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: DOUBLE
17586: LD_INT 1
17588: DEC
17589: ST_TO_ADDR
17590: LD_EXP 55
17594: PUSH
17595: FOR_TO
17596: IFFALSE 17831
// begin un := ru_forest [ i ] ;
17598: LD_ADDR_VAR 0 2
17602: PUSH
17603: LD_EXP 55
17607: PUSH
17608: LD_VAR 0 1
17612: ARRAY
17613: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_INT 13
17621: PPUSH
17622: CALL_OW 308
17626: IFFALSE 17716
// begin if not See ( 1 , un ) then
17628: LD_INT 1
17630: PPUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 292
17640: NOT
17641: IFFALSE 17655
// SetLives ( un , 1000 ) ;
17643: LD_VAR 0 2
17647: PPUSH
17648: LD_INT 1000
17650: PPUSH
17651: CALL_OW 234
// ru_forest := ru_forest diff un ;
17655: LD_ADDR_EXP 55
17659: PUSH
17660: LD_EXP 55
17664: PUSH
17665: LD_VAR 0 2
17669: DIFF
17670: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17671: LD_VAR 0 2
17675: PPUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 4
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: CALL 1007 0 1
17709: PPUSH
17710: CALL_OW 120
// continue ;
17714: GO 17595
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 256
17725: PUSH
17726: LD_INT 700
17728: LESS
17729: PUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_INT 13
17737: PPUSH
17738: CALL_OW 308
17742: NOT
17743: AND
17744: IFFALSE 17760
// ComMoveToArea ( un , retreatArea ) else
17746: LD_VAR 0 2
17750: PPUSH
17751: LD_INT 13
17753: PPUSH
17754: CALL_OW 113
17758: GO 17829
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17760: LD_VAR 0 2
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 74
17779: PPUSH
17780: CALL_OW 296
17784: PUSH
17785: LD_INT 9
17787: LESS
17788: PUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 256
17798: PUSH
17799: LD_INT 500
17801: GREATER
17802: AND
17803: IFFALSE 17829
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_VAR 0 2
17819: PPUSH
17820: CALL_OW 74
17824: PPUSH
17825: CALL_OW 115
// end ;
17829: GO 17595
17831: POP
17832: POP
// end ;
17833: PPOPN 3
17835: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17836: LD_EXP 32
17840: NOT
17841: PUSH
17842: LD_EXP 44
17846: PPUSH
17847: CALL_OW 301
17851: OR
17852: IFFALSE 18013
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
// begin enable ;
17861: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_INT 22
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 95
17882: PUSH
17883: LD_INT 18
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: LD_INT 24
17909: PUSH
17910: LD_INT 990
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 69
17931: ST_TO_ADDR
// if filter then
17932: LD_VAR 0 2
17936: IFFALSE 18013
// for i in filter do
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: LD_VAR 0 2
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18011
// if GetY ( i ) > 70 then
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 251
17960: PUSH
17961: LD_INT 70
17963: GREATER
17964: IFFALSE 17970
// continue else
17966: GO 17948
17968: GO 18009
// begin ru_alert := true ;
17970: LD_ADDR_EXP 60
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17978: LD_ADDR_EXP 61
17982: PUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 250
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 251
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
// break ;
18007: GO 18011
// end ;
18009: GO 17948
18011: POP
18012: POP
// end ;
18013: PPOPN 2
18015: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18016: LD_EXP 31
18020: IFFALSE 18169
18022: GO 18024
18024: DISABLE
18025: LD_INT 0
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18031: LD_ADDR_VAR 0 4
18035: PUSH
18036: LD_EXP 56
18040: PUSH
18041: LD_EXP 55
18045: ADD
18046: PUSH
18047: LD_EXP 53
18051: ADD
18052: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18053: LD_ADDR_VAR 0 3
18057: PUSH
18058: LD_INT 3
18060: PPUSH
18061: LD_INT 81
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 70
18075: ST_TO_ADDR
// if filter and enemy then
18076: LD_VAR 0 4
18080: PUSH
18081: LD_VAR 0 3
18085: AND
18086: IFFALSE 18169
// repeat wait ( 0 0$01 ) ;
18088: LD_INT 35
18090: PPUSH
18091: CALL_OW 67
// for i in filter do
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_VAR 0 4
18104: PUSH
18105: FOR_IN
18106: IFFALSE 18134
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 74
18127: PPUSH
18128: CALL_OW 115
// end ;
18132: GO 18105
18134: POP
18135: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18136: LD_INT 3
18138: PPUSH
18139: LD_INT 81
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 70
18153: PUSH
18154: LD_INT 0
18156: EQUAL
18157: PUSH
18158: LD_VAR 0 4
18162: PUSH
18163: LD_INT 0
18165: EQUAL
18166: OR
18167: IFFALSE 18088
// end ;
18169: PPOPN 4
18171: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18172: LD_EXP 26
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 4
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 3
18199: PUSH
18200: LD_INT 57
18202: PUSH
18203: EMPTY
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: AND
18220: IFFALSE 18269
18222: GO 18224
18224: DISABLE
18225: LD_INT 0
18227: PPUSH
// begin if not ru_cornel_attack then
18228: LD_EXP 58
18232: NOT
18233: IFFALSE 18237
// exit ;
18235: GO 18269
// for i in ru_cornel_attack do
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: LD_EXP 58
18246: PUSH
18247: FOR_IN
18248: IFFALSE 18267
// ComAgressiveMove ( i , 258 , 119 ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_INT 258
18257: PPUSH
18258: LD_INT 119
18260: PPUSH
18261: CALL_OW 114
18265: GO 18247
18267: POP
18268: POP
// end ; end_of_file
18269: PPOPN 1
18271: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18272: LD_EXP 5
18276: PUSH
18277: LD_EXP 9
18281: NOT
18282: AND
18283: PUSH
18284: LD_EXP 20
18288: AND
18289: IFFALSE 18401
18291: GO 18293
18293: DISABLE
18294: LD_INT 0
18296: PPUSH
// begin enable ;
18297: ENABLE
// crates_counter := crates_counter - 50 ;
18298: LD_ADDR_EXP 20
18302: PUSH
18303: LD_EXP 20
18307: PUSH
18308: LD_INT 50
18310: MINUS
18311: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18312: LD_INT 8
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: LD_INT 5
18320: PPUSH
18321: CALL_OW 12
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18333: LD_INT 1785
18335: PPUSH
18336: LD_INT 2345
18338: PPUSH
18339: CALL_OW 12
18343: PPUSH
18344: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 67
18360: PUSH
18361: LD_INT 2
18363: PLUS
18364: PPUSH
18365: CALL_OW 12
18369: ST_TO_ADDR
// if r < 3 then
18370: LD_VAR 0 1
18374: PUSH
18375: LD_INT 3
18377: LESS
18378: IFFALSE 18401
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18380: LD_INT 4
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_INT 5
18388: PPUSH
18389: CALL_OW 12
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 55
// end ;
18401: PPOPN 1
18403: END
// every 0 0$01 trigger cornel_active do
18404: LD_EXP 8
18408: IFFALSE 18497
18410: GO 18412
18412: DISABLE
// begin Wait ( 0 0$03 ) ;
18413: LD_INT 105
18415: PPUSH
18416: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18420: LD_INT 2
18422: PPUSH
18423: LD_INT 5
18425: PPUSH
18426: CALL_OW 12
18430: PPUSH
18431: LD_INT 10
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 55
// Wait ( 0 0$13 ) ;
18441: LD_INT 455
18443: PPUSH
18444: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 5
18453: PPUSH
18454: CALL_OW 12
18458: PPUSH
18459: LD_INT 10
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 55
// Wait ( 0 0$16 ) ;
18469: LD_INT 560
18471: PPUSH
18472: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18476: LD_INT 2
18478: PPUSH
18479: LD_INT 5
18481: PPUSH
18482: CALL_OW 12
18486: PPUSH
18487: LD_INT 10
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 55
// end ; end_of_file
18497: END
// every 0 0$01 trigger cornel_prepared do
18498: LD_EXP 11
18502: IFFALSE 18561
18504: GO 18506
18506: DISABLE
// begin enable ;
18507: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18508: LD_ADDR_OWVAR 47
18512: PUSH
18513: LD_STRING #Am03-1
18515: PUSH
18516: LD_EXP 10
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18525: LD_ADDR_EXP 10
18529: PUSH
18530: LD_EXP 10
18534: PPUSH
18535: LD_STRING -
18537: PPUSH
18538: CALL 1077 0 2
18542: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18543: LD_EXP 10
18547: PUSH
18548: LD_INT 0
18550: EQUAL
18551: IFFALSE 18561
// begin Display_Strings := [ ] ;
18553: LD_ADDR_OWVAR 47
18557: PUSH
18558: EMPTY
18559: ST_TO_ADDR
// disable ;
18560: DISABLE
// end ; end ;
18561: END
// every 0 0$01 trigger debug and debug_strings do
18562: LD_EXP 1
18566: PUSH
18567: LD_OWVAR 48
18571: AND
18572: IFFALSE 18588
18574: GO 18576
18576: DISABLE
// begin enable ;
18577: ENABLE
// Display_Strings := debug_strings ;
18578: LD_ADDR_OWVAR 47
18582: PUSH
18583: LD_OWVAR 48
18587: ST_TO_ADDR
// end ; end_of_file
18588: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_VAR 0 2
18598: PPUSH
18599: CALL 35206 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 14
18621: NOT
18622: AND
18623: IFFALSE 18633
// solar_builded := true ;
18625: LD_ADDR_EXP 14
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 255
18642: PUSH
18643: LD_INT 1
18645: EQUAL
18646: PUSH
18647: LD_EXP 29
18651: AND
18652: IFFALSE 18689
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18654: LD_ADDR_EXP 29
18658: PUSH
18659: LD_EXP 29
18663: PUSH
18664: LD_INT 1750
18666: PUSH
18667: LD_INT 1400
18669: PUSH
18670: LD_INT 1225
18672: PUSH
18673: LD_INT 1050
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PLUS
18688: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 255
18698: PUSH
18699: LD_INT 3
18701: EQUAL
18702: IFFALSE 18720
// ru_vehicles := ru_vehicles ^ veh ;
18704: LD_ADDR_EXP 56
18708: PUSH
18709: LD_EXP 56
18713: PUSH
18714: LD_VAR 0 1
18718: ADD
18719: ST_TO_ADDR
// end ;
18720: PPOPN 2
18722: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL 35086 0 1
// if un in ru_patrol then
18732: LD_VAR 0 1
18736: PUSH
18737: LD_EXP 53
18741: IN
18742: IFFALSE 18760
// ru_patrol := ru_patrol diff un ;
18744: LD_ADDR_EXP 53
18748: PUSH
18749: LD_EXP 53
18753: PUSH
18754: LD_VAR 0 1
18758: DIFF
18759: ST_TO_ADDR
// if un in ru_forest then
18760: LD_VAR 0 1
18764: PUSH
18765: LD_EXP 55
18769: IN
18770: IFFALSE 18788
// ru_forest := ru_forest diff un ;
18772: LD_ADDR_EXP 55
18776: PUSH
18777: LD_EXP 55
18781: PUSH
18782: LD_VAR 0 1
18786: DIFF
18787: ST_TO_ADDR
// if un in ru_vehicles then
18788: LD_VAR 0 1
18792: PUSH
18793: LD_EXP 56
18797: IN
18798: IFFALSE 18904
// begin ru_vehicles := ru_vehicles diff un ;
18800: LD_ADDR_EXP 56
18804: PUSH
18805: LD_EXP 56
18809: PUSH
18810: LD_VAR 0 1
18814: DIFF
18815: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18816: LD_ADDR_EXP 57
18820: PUSH
18821: LD_EXP 57
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 265
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 262
18845: PUSH
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 263
18855: PUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 264
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ADD
18872: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18873: LD_ADDR_EXP 13
18877: PUSH
18878: LD_EXP 13
18882: PUSH
18883: LD_INT 1
18885: PLUS
18886: ST_TO_ADDR
// if ach_counter = 10 then
18887: LD_EXP 13
18891: PUSH
18892: LD_INT 10
18894: EQUAL
18895: IFFALSE 18904
// SetAchievement ( ACH_FAUST ) ;
18897: LD_STRING ACH_FAUST
18899: PPUSH
18900: CALL_OW 543
// end ; if un = Pokryshkin then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_EXP 52
18913: EQUAL
18914: IFFALSE 18923
// SetAchievement ( ACH_POKR ) ;
18916: LD_STRING ACH_POKR
18918: PPUSH
18919: CALL_OW 543
// if un = JMM then
18923: LD_VAR 0 1
18927: PUSH
18928: LD_EXP 37
18932: EQUAL
18933: IFFALSE 18942
// YouLost ( 0 ) ;
18935: LD_STRING 0
18937: PPUSH
18938: CALL_OW 104
// if un = us_dep_west then
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18959
// YouLost ( 2 ) ;
18952: LD_STRING 2
18954: PPUSH
18955: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 255
18968: PUSH
18969: LD_INT 8
18971: EQUAL
18972: PUSH
18973: LD_EXP 5
18977: NOT
18978: AND
18979: IFFALSE 18988
// YouLost ( 4 ) ;
18981: LD_STRING 4
18983: PPUSH
18984: CALL_OW 104
// if un in jmm_units then
18988: LD_VAR 0 1
18992: PUSH
18993: LD_EXP 4
18997: IN
18998: IFFALSE 19014
// lose_counter := lose_counter + 1 ;
19000: LD_ADDR_EXP 34
19004: PUSH
19005: LD_EXP 34
19009: PUSH
19010: LD_INT 1
19012: PLUS
19013: ST_TO_ADDR
// end ;
19014: PPOPN 1
19016: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin if GetSide ( driver ) = 3 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 255
19030: PUSH
19031: LD_INT 3
19033: EQUAL
19034: IFFALSE 19112
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19036: LD_ADDR_VAR 0 6
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 3
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: PPUSH
19070: CALL 1007 0 1
19074: ST_TO_ADDR
// if place then
19075: LD_VAR 0 6
19079: IFFALSE 19097
// ComEnterUnit ( driver , place ) else
19081: LD_VAR 0 1
19085: PPUSH
19086: LD_VAR 0 6
19090: PPUSH
19091: CALL_OW 120
19095: GO 19112
// ComMoveXY ( driver , 70 , 22 ) ;
19097: LD_VAR 0 1
19101: PPUSH
19102: LD_INT 70
19104: PPUSH
19105: LD_INT 22
19107: PPUSH
19108: CALL_OW 111
// end ; end ;
19112: PPOPN 6
19114: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19115: LD_VAR 0 1
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: LD_INT 4
19131: EQUAL
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_INT 8
19140: EQUAL
19141: PUSH
19142: LD_EXP 5
19146: NOT
19147: AND
19148: OR
19149: AND
19150: IFFALSE 19159
// YouLost ( 5 ) ;
19152: LD_STRING 5
19154: PPUSH
19155: CALL_OW 104
// end ;
19159: PPOPN 2
19161: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19162: LD_EXP 36
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: PUSH
19196: LD_INT 22
19198: PUSH
19199: LD_INT 8
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: ADD
19225: PLUS
19226: PUSH
19227: LD_INT 5
19229: LESS
19230: IFFALSE 19242
19232: GO 19234
19234: DISABLE
// YouLost ( 1 ) ;
19235: LD_STRING 1
19237: PPUSH
19238: CALL_OW 104
19242: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 255
19250: PUSH
19251: LD_INT 3
19253: EQUAL
19254: IFFALSE 19266
19256: GO 19258
19258: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19259: LD_STRING 3
19261: PPUSH
19262: CALL_OW 104
19266: END
// export globalGameSaveCounter ; every 0 0$1 do
19267: GO 19269
19269: DISABLE
// begin enable ;
19270: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19271: LD_STRING updateTimer(
19273: PUSH
19274: LD_OWVAR 1
19278: STR
19279: PUSH
19280: LD_STRING );
19282: STR
19283: PPUSH
19284: CALL_OW 559
// end ;
19288: END
// every 0 0$1 do
19289: GO 19291
19291: DISABLE
// begin globalGameSaveCounter := 0 ;
19292: LD_ADDR_EXP 62
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19300: LD_STRING setGameSaveCounter(0)
19302: PPUSH
19303: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19307: LD_STRING initStreamRollete();
19309: PPUSH
19310: CALL_OW 559
// InitStreamMode ;
19314: CALL 20657 0 0
// DefineStreamItems ( false ) ;
19318: LD_INT 0
19320: PPUSH
19321: CALL 21121 0 1
// end ;
19325: END
// export function SOS_MapStart ( ) ; begin
19326: LD_INT 0
19328: PPUSH
// if streamModeActive then
19329: LD_EXP 63
19333: IFFALSE 19342
// DefineStreamItems ( true ) ;
19335: LD_INT 1
19337: PPUSH
19338: CALL 21121 0 1
// UpdateLuaVariables ( ) ;
19342: CALL 19359 0 0
// UpdateFactoryWaypoints ( ) ;
19346: CALL 33990 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19350: CALL 34247 0 0
// end ;
19354: LD_VAR 0 1
19358: RET
// function UpdateLuaVariables ( ) ; begin
19359: LD_INT 0
19361: PPUSH
// if globalGameSaveCounter then
19362: LD_EXP 62
19366: IFFALSE 19400
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19368: LD_ADDR_EXP 62
19372: PUSH
19373: LD_EXP 62
19377: PPUSH
19378: CALL 79032 0 1
19382: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19383: LD_STRING setGameSaveCounter(
19385: PUSH
19386: LD_EXP 62
19390: STR
19391: PUSH
19392: LD_STRING )
19394: STR
19395: PPUSH
19396: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19400: LD_STRING setGameDifficulty(
19402: PUSH
19403: LD_OWVAR 67
19407: STR
19408: PUSH
19409: LD_STRING )
19411: STR
19412: PPUSH
19413: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19417: LD_STRING displayDifficulty(
19419: PUSH
19420: LD_OWVAR 67
19424: STR
19425: PUSH
19426: LD_STRING )
19428: STR
19429: PPUSH
19430: CALL_OW 559
// end ;
19434: LD_VAR 0 1
19438: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19439: LD_INT 0
19441: PPUSH
// if p2 = stream_mode then
19442: LD_VAR 0 2
19446: PUSH
19447: LD_INT 100
19449: EQUAL
19450: IFFALSE 20453
// begin if not StreamModeActive then
19452: LD_EXP 63
19456: NOT
19457: IFFALSE 19467
// StreamModeActive := true ;
19459: LD_ADDR_EXP 63
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 0 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 0
19474: EQUAL
19475: IFFALSE 19481
// InitStreamMode ;
19477: CALL 20657 0 0
// if p3 = 1 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: IFFALSE 19499
// sRocket := true ;
19491: LD_ADDR_EXP 68
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 2 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 2
19506: EQUAL
19507: IFFALSE 19517
// sSpeed := true ;
19509: LD_ADDR_EXP 67
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 3 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 3
19524: EQUAL
19525: IFFALSE 19535
// sEngine := true ;
19527: LD_ADDR_EXP 69
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 4 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 4
19542: EQUAL
19543: IFFALSE 19553
// sSpec := true ;
19545: LD_ADDR_EXP 66
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 5 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 5
19560: EQUAL
19561: IFFALSE 19571
// sLevel := true ;
19563: LD_ADDR_EXP 70
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 6 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 6
19578: EQUAL
19579: IFFALSE 19589
// sArmoury := true ;
19581: LD_ADDR_EXP 71
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 7 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 7
19596: EQUAL
19597: IFFALSE 19607
// sRadar := true ;
19599: LD_ADDR_EXP 72
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 8 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 8
19614: EQUAL
19615: IFFALSE 19625
// sBunker := true ;
19617: LD_ADDR_EXP 73
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 9 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 9
19632: EQUAL
19633: IFFALSE 19643
// sHack := true ;
19635: LD_ADDR_EXP 74
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 10 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 10
19650: EQUAL
19651: IFFALSE 19661
// sFire := true ;
19653: LD_ADDR_EXP 75
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 11 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 11
19668: EQUAL
19669: IFFALSE 19679
// sRefresh := true ;
19671: LD_ADDR_EXP 76
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 12 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 12
19686: EQUAL
19687: IFFALSE 19697
// sExp := true ;
19689: LD_ADDR_EXP 77
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 13 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 13
19704: EQUAL
19705: IFFALSE 19715
// sDepot := true ;
19707: LD_ADDR_EXP 78
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 14 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 14
19722: EQUAL
19723: IFFALSE 19733
// sFlag := true ;
19725: LD_ADDR_EXP 79
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 15 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 15
19740: EQUAL
19741: IFFALSE 19751
// sKamikadze := true ;
19743: LD_ADDR_EXP 87
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 16 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 16
19758: EQUAL
19759: IFFALSE 19769
// sTroll := true ;
19761: LD_ADDR_EXP 88
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 17 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 17
19776: EQUAL
19777: IFFALSE 19787
// sSlow := true ;
19779: LD_ADDR_EXP 89
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 18 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 18
19794: EQUAL
19795: IFFALSE 19805
// sLack := true ;
19797: LD_ADDR_EXP 90
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 19 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 19
19812: EQUAL
19813: IFFALSE 19823
// sTank := true ;
19815: LD_ADDR_EXP 92
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 20 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 20
19830: EQUAL
19831: IFFALSE 19841
// sRemote := true ;
19833: LD_ADDR_EXP 93
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 21 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 21
19848: EQUAL
19849: IFFALSE 19859
// sPowell := true ;
19851: LD_ADDR_EXP 94
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 22 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 22
19866: EQUAL
19867: IFFALSE 19877
// sTeleport := true ;
19869: LD_ADDR_EXP 97
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 23 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 23
19884: EQUAL
19885: IFFALSE 19895
// sOilTower := true ;
19887: LD_ADDR_EXP 99
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 24 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 24
19902: EQUAL
19903: IFFALSE 19913
// sShovel := true ;
19905: LD_ADDR_EXP 100
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 25 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 25
19920: EQUAL
19921: IFFALSE 19931
// sSheik := true ;
19923: LD_ADDR_EXP 101
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 26 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 26
19938: EQUAL
19939: IFFALSE 19949
// sEarthquake := true ;
19941: LD_ADDR_EXP 103
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 27 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 27
19956: EQUAL
19957: IFFALSE 19967
// sAI := true ;
19959: LD_ADDR_EXP 104
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 28 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 28
19974: EQUAL
19975: IFFALSE 19985
// sCargo := true ;
19977: LD_ADDR_EXP 107
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 29 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 29
19992: EQUAL
19993: IFFALSE 20003
// sDLaser := true ;
19995: LD_ADDR_EXP 108
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 30 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 30
20010: EQUAL
20011: IFFALSE 20021
// sExchange := true ;
20013: LD_ADDR_EXP 109
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 31 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 31
20028: EQUAL
20029: IFFALSE 20039
// sFac := true ;
20031: LD_ADDR_EXP 110
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 32 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 32
20046: EQUAL
20047: IFFALSE 20057
// sPower := true ;
20049: LD_ADDR_EXP 111
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 33 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 33
20064: EQUAL
20065: IFFALSE 20075
// sRandom := true ;
20067: LD_ADDR_EXP 112
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 34 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 34
20082: EQUAL
20083: IFFALSE 20093
// sShield := true ;
20085: LD_ADDR_EXP 113
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 35 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 35
20100: EQUAL
20101: IFFALSE 20111
// sTime := true ;
20103: LD_ADDR_EXP 114
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 36 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 36
20118: EQUAL
20119: IFFALSE 20129
// sTools := true ;
20121: LD_ADDR_EXP 115
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 101 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 101
20136: EQUAL
20137: IFFALSE 20147
// sSold := true ;
20139: LD_ADDR_EXP 80
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 102 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 102
20154: EQUAL
20155: IFFALSE 20165
// sDiff := true ;
20157: LD_ADDR_EXP 81
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 103 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 103
20172: EQUAL
20173: IFFALSE 20183
// sFog := true ;
20175: LD_ADDR_EXP 84
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 104 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 104
20190: EQUAL
20191: IFFALSE 20201
// sReset := true ;
20193: LD_ADDR_EXP 85
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 105 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 105
20208: EQUAL
20209: IFFALSE 20219
// sSun := true ;
20211: LD_ADDR_EXP 86
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 106 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 106
20226: EQUAL
20227: IFFALSE 20237
// sTiger := true ;
20229: LD_ADDR_EXP 82
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// if p3 = 107 then
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 107
20244: EQUAL
20245: IFFALSE 20255
// sBomb := true ;
20247: LD_ADDR_EXP 83
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// if p3 = 108 then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 108
20262: EQUAL
20263: IFFALSE 20273
// sWound := true ;
20265: LD_ADDR_EXP 91
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if p3 = 109 then
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 109
20280: EQUAL
20281: IFFALSE 20291
// sBetray := true ;
20283: LD_ADDR_EXP 95
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 110 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 110
20298: EQUAL
20299: IFFALSE 20309
// sContamin := true ;
20301: LD_ADDR_EXP 96
20305: PUSH
20306: LD_INT 1
20308: ST_TO_ADDR
// if p3 = 111 then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_INT 111
20316: EQUAL
20317: IFFALSE 20327
// sOil := true ;
20319: LD_ADDR_EXP 98
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if p3 = 112 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 112
20334: EQUAL
20335: IFFALSE 20345
// sStu := true ;
20337: LD_ADDR_EXP 102
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 113 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 113
20352: EQUAL
20353: IFFALSE 20363
// sBazooka := true ;
20355: LD_ADDR_EXP 105
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 114 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 114
20370: EQUAL
20371: IFFALSE 20381
// sMortar := true ;
20373: LD_ADDR_EXP 106
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 115 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 115
20388: EQUAL
20389: IFFALSE 20399
// sRanger := true ;
20391: LD_ADDR_EXP 116
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 116 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 116
20406: EQUAL
20407: IFFALSE 20417
// sComputer := true ;
20409: LD_ADDR_EXP 117
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 117 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 117
20424: EQUAL
20425: IFFALSE 20435
// s30 := true ;
20427: LD_ADDR_EXP 118
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// if p3 = 118 then
20435: LD_VAR 0 3
20439: PUSH
20440: LD_INT 118
20442: EQUAL
20443: IFFALSE 20453
// s60 := true ;
20445: LD_ADDR_EXP 119
20449: PUSH
20450: LD_INT 1
20452: ST_TO_ADDR
// end ; if p2 = hack_mode then
20453: LD_VAR 0 2
20457: PUSH
20458: LD_INT 101
20460: EQUAL
20461: IFFALSE 20589
// begin case p3 of 1 :
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 1
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20483
20476: POP
// hHackUnlimitedResources ; 2 :
20477: CALL 32736 0 0
20481: GO 20589
20483: LD_INT 2
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20498
20491: POP
// hHackSetLevel10 ; 3 :
20492: CALL 32869 0 0
20496: GO 20589
20498: LD_INT 3
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20513
20506: POP
// hHackSetLevel10YourUnits ; 4 :
20507: CALL 32954 0 0
20511: GO 20589
20513: LD_INT 4
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20528
20521: POP
// hHackInvincible ; 5 :
20522: CALL 33402 0 0
20526: GO 20589
20528: LD_INT 5
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20543
20536: POP
// hHackInvisible ; 6 :
20537: CALL 33513 0 0
20541: GO 20589
20543: LD_INT 6
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20558
20551: POP
// hHackChangeYourSide ; 7 :
20552: CALL 33570 0 0
20556: GO 20589
20558: LD_INT 7
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20573
20566: POP
// hHackChangeUnitSide ; 8 :
20567: CALL 33612 0 0
20571: GO 20589
20573: LD_INT 8
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20588
20581: POP
// hHackFog ; end ;
20582: CALL 33713 0 0
20586: GO 20589
20588: POP
// end ; if p2 = game_save_mode then
20589: LD_VAR 0 2
20593: PUSH
20594: LD_INT 102
20596: EQUAL
20597: IFFALSE 20652
// begin if p3 = 1 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: IFFALSE 20619
// globalGameSaveCounter := p4 ;
20609: LD_ADDR_EXP 62
20613: PUSH
20614: LD_VAR 0 4
20618: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 2
20626: EQUAL
20627: PUSH
20628: LD_EXP 62
20632: AND
20633: IFFALSE 20652
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20635: LD_STRING setGameSaveCounter(
20637: PUSH
20638: LD_EXP 62
20642: STR
20643: PUSH
20644: LD_STRING )
20646: STR
20647: PPUSH
20648: CALL_OW 559
// end ; end ;
20652: LD_VAR 0 7
20656: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20657: LD_INT 0
20659: PPUSH
// streamModeActive := false ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// normalCounter := 36 ;
20668: LD_ADDR_EXP 64
20672: PUSH
20673: LD_INT 36
20675: ST_TO_ADDR
// hardcoreCounter := 18 ;
20676: LD_ADDR_EXP 65
20680: PUSH
20681: LD_INT 18
20683: ST_TO_ADDR
// sRocket := false ;
20684: LD_ADDR_EXP 68
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sSpeed := false ;
20692: LD_ADDR_EXP 67
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sEngine := false ;
20700: LD_ADDR_EXP 69
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sSpec := false ;
20708: LD_ADDR_EXP 66
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sLevel := false ;
20716: LD_ADDR_EXP 70
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sArmoury := false ;
20724: LD_ADDR_EXP 71
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sRadar := false ;
20732: LD_ADDR_EXP 72
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sBunker := false ;
20740: LD_ADDR_EXP 73
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sHack := false ;
20748: LD_ADDR_EXP 74
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sFire := false ;
20756: LD_ADDR_EXP 75
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sRefresh := false ;
20764: LD_ADDR_EXP 76
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sExp := false ;
20772: LD_ADDR_EXP 77
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sDepot := false ;
20780: LD_ADDR_EXP 78
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sFlag := false ;
20788: LD_ADDR_EXP 79
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sKamikadze := false ;
20796: LD_ADDR_EXP 87
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sTroll := false ;
20804: LD_ADDR_EXP 88
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sSlow := false ;
20812: LD_ADDR_EXP 89
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sLack := false ;
20820: LD_ADDR_EXP 90
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sTank := false ;
20828: LD_ADDR_EXP 92
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sRemote := false ;
20836: LD_ADDR_EXP 93
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sPowell := false ;
20844: LD_ADDR_EXP 94
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sTeleport := false ;
20852: LD_ADDR_EXP 97
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sOilTower := false ;
20860: LD_ADDR_EXP 99
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sShovel := false ;
20868: LD_ADDR_EXP 100
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sSheik := false ;
20876: LD_ADDR_EXP 101
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sEarthquake := false ;
20884: LD_ADDR_EXP 103
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sAI := false ;
20892: LD_ADDR_EXP 104
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sCargo := false ;
20900: LD_ADDR_EXP 107
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sDLaser := false ;
20908: LD_ADDR_EXP 108
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sExchange := false ;
20916: LD_ADDR_EXP 109
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sFac := false ;
20924: LD_ADDR_EXP 110
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sPower := false ;
20932: LD_ADDR_EXP 111
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sRandom := false ;
20940: LD_ADDR_EXP 112
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sShield := false ;
20948: LD_ADDR_EXP 113
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTime := false ;
20956: LD_ADDR_EXP 114
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sTools := false ;
20964: LD_ADDR_EXP 115
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sSold := false ;
20972: LD_ADDR_EXP 80
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sDiff := false ;
20980: LD_ADDR_EXP 81
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sFog := false ;
20988: LD_ADDR_EXP 84
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sReset := false ;
20996: LD_ADDR_EXP 85
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sSun := false ;
21004: LD_ADDR_EXP 86
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sTiger := false ;
21012: LD_ADDR_EXP 82
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sBomb := false ;
21020: LD_ADDR_EXP 83
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sWound := false ;
21028: LD_ADDR_EXP 91
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sBetray := false ;
21036: LD_ADDR_EXP 95
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sContamin := false ;
21044: LD_ADDR_EXP 96
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sOil := false ;
21052: LD_ADDR_EXP 98
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sStu := false ;
21060: LD_ADDR_EXP 102
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sBazooka := false ;
21068: LD_ADDR_EXP 105
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sMortar := false ;
21076: LD_ADDR_EXP 106
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sRanger := false ;
21084: LD_ADDR_EXP 116
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sComputer := false ;
21092: LD_ADDR_EXP 117
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// s30 := false ;
21100: LD_ADDR_EXP 118
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// s60 := false ;
21108: LD_ADDR_EXP 119
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// end ;
21116: LD_VAR 0 1
21120: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
21128: PPUSH
21129: PPUSH
// result := [ ] ;
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: EMPTY
21136: ST_TO_ADDR
// if campaign_id = 1 then
21137: LD_OWVAR 69
21141: PUSH
21142: LD_INT 1
21144: EQUAL
21145: IFFALSE 24311
// begin case mission_number of 1 :
21147: LD_OWVAR 70
21151: PUSH
21152: LD_INT 1
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21236
21160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 4
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: LD_INT 15
21180: PUSH
21181: LD_INT 16
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_INT 23
21189: PUSH
21190: LD_INT 26
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 101
21206: PUSH
21207: LD_INT 102
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 116
21215: PUSH
21216: LD_INT 117
21218: PUSH
21219: LD_INT 118
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: ST_TO_ADDR
21234: GO 24309
21236: LD_INT 2
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21328
21244: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 23
21273: PUSH
21274: LD_INT 26
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 101
21290: PUSH
21291: LD_INT 102
21293: PUSH
21294: LD_INT 105
21296: PUSH
21297: LD_INT 106
21299: PUSH
21300: LD_INT 108
21302: PUSH
21303: LD_INT 116
21305: PUSH
21306: LD_INT 117
21308: PUSH
21309: LD_INT 118
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: ST_TO_ADDR
21326: GO 24309
21328: LD_INT 3
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21424
21336: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 4
21347: PUSH
21348: LD_INT 5
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 15
21359: PUSH
21360: LD_INT 16
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 26
21368: PUSH
21369: LD_INT 36
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 101
21386: PUSH
21387: LD_INT 102
21389: PUSH
21390: LD_INT 105
21392: PUSH
21393: LD_INT 106
21395: PUSH
21396: LD_INT 108
21398: PUSH
21399: LD_INT 116
21401: PUSH
21402: LD_INT 117
21404: PUSH
21405: LD_INT 118
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: ST_TO_ADDR
21422: GO 24309
21424: LD_INT 4
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21528
21432: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 4
21443: PUSH
21444: LD_INT 5
21446: PUSH
21447: LD_INT 8
21449: PUSH
21450: LD_INT 11
21452: PUSH
21453: LD_INT 12
21455: PUSH
21456: LD_INT 15
21458: PUSH
21459: LD_INT 16
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_INT 23
21467: PUSH
21468: LD_INT 26
21470: PUSH
21471: LD_INT 36
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 101
21490: PUSH
21491: LD_INT 102
21493: PUSH
21494: LD_INT 105
21496: PUSH
21497: LD_INT 106
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 116
21505: PUSH
21506: LD_INT 117
21508: PUSH
21509: LD_INT 118
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 24309
21528: LD_INT 5
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21648
21536: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 8
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 12
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 16
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 25
21577: PUSH
21578: LD_INT 26
21580: PUSH
21581: LD_INT 36
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 101
21602: PUSH
21603: LD_INT 102
21605: PUSH
21606: LD_INT 105
21608: PUSH
21609: LD_INT 106
21611: PUSH
21612: LD_INT 108
21614: PUSH
21615: LD_INT 109
21617: PUSH
21618: LD_INT 112
21620: PUSH
21621: LD_INT 116
21623: PUSH
21624: LD_INT 117
21626: PUSH
21627: LD_INT 118
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 24309
21648: LD_INT 6
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21788
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 8
21676: PUSH
21677: LD_INT 11
21679: PUSH
21680: LD_INT 12
21682: PUSH
21683: LD_INT 15
21685: PUSH
21686: LD_INT 16
21688: PUSH
21689: LD_INT 20
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 22
21697: PUSH
21698: LD_INT 23
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 26
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 36
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 101
21742: PUSH
21743: LD_INT 102
21745: PUSH
21746: LD_INT 105
21748: PUSH
21749: LD_INT 106
21751: PUSH
21752: LD_INT 108
21754: PUSH
21755: LD_INT 109
21757: PUSH
21758: LD_INT 112
21760: PUSH
21761: LD_INT 116
21763: PUSH
21764: LD_INT 117
21766: PUSH
21767: LD_INT 118
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: ST_TO_ADDR
21786: GO 24309
21788: LD_INT 7
21790: DOUBLE
21791: EQUAL
21792: IFTRUE 21796
21794: GO 21908
21796: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 4
21807: PUSH
21808: LD_INT 5
21810: PUSH
21811: LD_INT 7
21813: PUSH
21814: LD_INT 11
21816: PUSH
21817: LD_INT 12
21819: PUSH
21820: LD_INT 15
21822: PUSH
21823: LD_INT 16
21825: PUSH
21826: LD_INT 20
21828: PUSH
21829: LD_INT 21
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 23
21837: PUSH
21838: LD_INT 25
21840: PUSH
21841: LD_INT 26
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 101
21862: PUSH
21863: LD_INT 102
21865: PUSH
21866: LD_INT 103
21868: PUSH
21869: LD_INT 105
21871: PUSH
21872: LD_INT 106
21874: PUSH
21875: LD_INT 108
21877: PUSH
21878: LD_INT 112
21880: PUSH
21881: LD_INT 116
21883: PUSH
21884: LD_INT 117
21886: PUSH
21887: LD_INT 118
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: ST_TO_ADDR
21906: GO 24309
21908: LD_INT 8
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 22056
21916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 6
21933: PUSH
21934: LD_INT 7
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 11
21942: PUSH
21943: LD_INT 12
21945: PUSH
21946: LD_INT 15
21948: PUSH
21949: LD_INT 16
21951: PUSH
21952: LD_INT 20
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 22
21960: PUSH
21961: LD_INT 23
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 26
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 31
21975: PUSH
21976: LD_INT 32
21978: PUSH
21979: LD_INT 36
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 105
22015: PUSH
22016: LD_INT 106
22018: PUSH
22019: LD_INT 108
22021: PUSH
22022: LD_INT 109
22024: PUSH
22025: LD_INT 112
22027: PUSH
22028: LD_INT 116
22030: PUSH
22031: LD_INT 117
22033: PUSH
22034: LD_INT 118
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: ST_TO_ADDR
22054: GO 24309
22056: LD_INT 9
22058: DOUBLE
22059: EQUAL
22060: IFTRUE 22064
22062: GO 22212
22064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 4
22075: PUSH
22076: LD_INT 5
22078: PUSH
22079: LD_INT 6
22081: PUSH
22082: LD_INT 7
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 26
22117: PUSH
22118: LD_INT 28
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: LD_INT 31
22126: PUSH
22127: LD_INT 32
22129: PUSH
22130: LD_INT 36
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 101
22158: PUSH
22159: LD_INT 102
22161: PUSH
22162: LD_INT 103
22164: PUSH
22165: LD_INT 105
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 109
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 114
22182: PUSH
22183: LD_INT 116
22185: PUSH
22186: LD_INT 117
22188: PUSH
22189: LD_INT 118
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24309
22212: LD_INT 10
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22416
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 7
22240: PUSH
22241: LD_INT 8
22243: PUSH
22244: LD_INT 9
22246: PUSH
22247: LD_INT 10
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 13
22258: PUSH
22259: LD_INT 14
22261: PUSH
22262: LD_INT 15
22264: PUSH
22265: LD_INT 16
22267: PUSH
22268: LD_INT 17
22270: PUSH
22271: LD_INT 18
22273: PUSH
22274: LD_INT 19
22276: PUSH
22277: LD_INT 20
22279: PUSH
22280: LD_INT 21
22282: PUSH
22283: LD_INT 22
22285: PUSH
22286: LD_INT 23
22288: PUSH
22289: LD_INT 24
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 26
22297: PUSH
22298: LD_INT 28
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 31
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 36
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 101
22346: PUSH
22347: LD_INT 102
22349: PUSH
22350: LD_INT 103
22352: PUSH
22353: LD_INT 104
22355: PUSH
22356: LD_INT 105
22358: PUSH
22359: LD_INT 106
22361: PUSH
22362: LD_INT 107
22364: PUSH
22365: LD_INT 108
22367: PUSH
22368: LD_INT 109
22370: PUSH
22371: LD_INT 110
22373: PUSH
22374: LD_INT 111
22376: PUSH
22377: LD_INT 112
22379: PUSH
22380: LD_INT 114
22382: PUSH
22383: LD_INT 116
22385: PUSH
22386: LD_INT 117
22388: PUSH
22389: LD_INT 118
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 24309
22416: LD_INT 11
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22628
22424: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: LD_INT 4
22438: PUSH
22439: LD_INT 5
22441: PUSH
22442: LD_INT 6
22444: PUSH
22445: LD_INT 7
22447: PUSH
22448: LD_INT 8
22450: PUSH
22451: LD_INT 9
22453: PUSH
22454: LD_INT 10
22456: PUSH
22457: LD_INT 11
22459: PUSH
22460: LD_INT 12
22462: PUSH
22463: LD_INT 13
22465: PUSH
22466: LD_INT 14
22468: PUSH
22469: LD_INT 15
22471: PUSH
22472: LD_INT 16
22474: PUSH
22475: LD_INT 17
22477: PUSH
22478: LD_INT 18
22480: PUSH
22481: LD_INT 19
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 24
22498: PUSH
22499: LD_INT 25
22501: PUSH
22502: LD_INT 26
22504: PUSH
22505: LD_INT 28
22507: PUSH
22508: LD_INT 30
22510: PUSH
22511: LD_INT 31
22513: PUSH
22514: LD_INT 32
22516: PUSH
22517: LD_INT 34
22519: PUSH
22520: LD_INT 36
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 101
22558: PUSH
22559: LD_INT 102
22561: PUSH
22562: LD_INT 103
22564: PUSH
22565: LD_INT 104
22567: PUSH
22568: LD_INT 105
22570: PUSH
22571: LD_INT 106
22573: PUSH
22574: LD_INT 107
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 109
22582: PUSH
22583: LD_INT 110
22585: PUSH
22586: LD_INT 111
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 114
22594: PUSH
22595: LD_INT 116
22597: PUSH
22598: LD_INT 117
22600: PUSH
22601: LD_INT 118
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 24309
22628: LD_INT 12
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22856
22636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 4
22653: PUSH
22654: LD_INT 5
22656: PUSH
22657: LD_INT 6
22659: PUSH
22660: LD_INT 7
22662: PUSH
22663: LD_INT 8
22665: PUSH
22666: LD_INT 9
22668: PUSH
22669: LD_INT 10
22671: PUSH
22672: LD_INT 11
22674: PUSH
22675: LD_INT 12
22677: PUSH
22678: LD_INT 13
22680: PUSH
22681: LD_INT 14
22683: PUSH
22684: LD_INT 15
22686: PUSH
22687: LD_INT 16
22689: PUSH
22690: LD_INT 17
22692: PUSH
22693: LD_INT 18
22695: PUSH
22696: LD_INT 19
22698: PUSH
22699: LD_INT 20
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 22
22707: PUSH
22708: LD_INT 23
22710: PUSH
22711: LD_INT 24
22713: PUSH
22714: LD_INT 25
22716: PUSH
22717: LD_INT 26
22719: PUSH
22720: LD_INT 27
22722: PUSH
22723: LD_INT 28
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_INT 31
22731: PUSH
22732: LD_INT 32
22734: PUSH
22735: LD_INT 33
22737: PUSH
22738: LD_INT 34
22740: PUSH
22741: LD_INT 36
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 101
22782: PUSH
22783: LD_INT 102
22785: PUSH
22786: LD_INT 103
22788: PUSH
22789: LD_INT 104
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 107
22800: PUSH
22801: LD_INT 108
22803: PUSH
22804: LD_INT 109
22806: PUSH
22807: LD_INT 110
22809: PUSH
22810: LD_INT 111
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 113
22818: PUSH
22819: LD_INT 114
22821: PUSH
22822: LD_INT 116
22824: PUSH
22825: LD_INT 117
22827: PUSH
22828: LD_INT 118
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 24309
22856: LD_INT 13
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23072
22864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: LD_INT 5
22884: PUSH
22885: LD_INT 8
22887: PUSH
22888: LD_INT 9
22890: PUSH
22891: LD_INT 10
22893: PUSH
22894: LD_INT 11
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 14
22902: PUSH
22903: LD_INT 15
22905: PUSH
22906: LD_INT 16
22908: PUSH
22909: LD_INT 17
22911: PUSH
22912: LD_INT 18
22914: PUSH
22915: LD_INT 19
22917: PUSH
22918: LD_INT 20
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 24
22932: PUSH
22933: LD_INT 25
22935: PUSH
22936: LD_INT 26
22938: PUSH
22939: LD_INT 27
22941: PUSH
22942: LD_INT 28
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 31
22950: PUSH
22951: LD_INT 32
22953: PUSH
22954: LD_INT 33
22956: PUSH
22957: LD_INT 34
22959: PUSH
22960: LD_INT 36
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 101
22998: PUSH
22999: LD_INT 102
23001: PUSH
23002: LD_INT 103
23004: PUSH
23005: LD_INT 104
23007: PUSH
23008: LD_INT 105
23010: PUSH
23011: LD_INT 106
23013: PUSH
23014: LD_INT 107
23016: PUSH
23017: LD_INT 108
23019: PUSH
23020: LD_INT 109
23022: PUSH
23023: LD_INT 110
23025: PUSH
23026: LD_INT 111
23028: PUSH
23029: LD_INT 112
23031: PUSH
23032: LD_INT 113
23034: PUSH
23035: LD_INT 114
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: ST_TO_ADDR
23070: GO 24309
23072: LD_INT 14
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23304
23080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: LD_INT 6
23103: PUSH
23104: LD_INT 7
23106: PUSH
23107: LD_INT 8
23109: PUSH
23110: LD_INT 9
23112: PUSH
23113: LD_INT 10
23115: PUSH
23116: LD_INT 11
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: LD_INT 13
23124: PUSH
23125: LD_INT 14
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 16
23133: PUSH
23134: LD_INT 17
23136: PUSH
23137: LD_INT 18
23139: PUSH
23140: LD_INT 19
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 23
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 25
23160: PUSH
23161: LD_INT 26
23163: PUSH
23164: LD_INT 27
23166: PUSH
23167: LD_INT 28
23169: PUSH
23170: LD_INT 29
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 31
23178: PUSH
23179: LD_INT 32
23181: PUSH
23182: LD_INT 33
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 36
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 103
23236: PUSH
23237: LD_INT 104
23239: PUSH
23240: LD_INT 105
23242: PUSH
23243: LD_INT 106
23245: PUSH
23246: LD_INT 107
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 110
23257: PUSH
23258: LD_INT 111
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 113
23266: PUSH
23267: LD_INT 114
23269: PUSH
23270: LD_INT 116
23272: PUSH
23273: LD_INT 117
23275: PUSH
23276: LD_INT 118
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24309
23304: LD_INT 15
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23536
23312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 13
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 29
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 31
23410: PUSH
23411: LD_INT 32
23413: PUSH
23414: LD_INT 33
23416: PUSH
23417: LD_INT 34
23419: PUSH
23420: LD_INT 36
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 101
23462: PUSH
23463: LD_INT 102
23465: PUSH
23466: LD_INT 103
23468: PUSH
23469: LD_INT 104
23471: PUSH
23472: LD_INT 105
23474: PUSH
23475: LD_INT 106
23477: PUSH
23478: LD_INT 107
23480: PUSH
23481: LD_INT 108
23483: PUSH
23484: LD_INT 109
23486: PUSH
23487: LD_INT 110
23489: PUSH
23490: LD_INT 111
23492: PUSH
23493: LD_INT 112
23495: PUSH
23496: LD_INT 113
23498: PUSH
23499: LD_INT 114
23501: PUSH
23502: LD_INT 116
23504: PUSH
23505: LD_INT 117
23507: PUSH
23508: LD_INT 118
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 24309
23536: LD_INT 16
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23680
23544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23545: LD_ADDR_VAR 0 2
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 4
23555: PUSH
23556: LD_INT 5
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 11
23564: PUSH
23565: LD_INT 12
23567: PUSH
23568: LD_INT 15
23570: PUSH
23571: LD_INT 16
23573: PUSH
23574: LD_INT 20
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 23
23585: PUSH
23586: LD_INT 25
23588: PUSH
23589: LD_INT 26
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 31
23597: PUSH
23598: LD_INT 32
23600: PUSH
23601: LD_INT 33
23603: PUSH
23604: LD_INT 34
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 101
23630: PUSH
23631: LD_INT 102
23633: PUSH
23634: LD_INT 103
23636: PUSH
23637: LD_INT 106
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 112
23645: PUSH
23646: LD_INT 113
23648: PUSH
23649: LD_INT 114
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 24309
23680: LD_INT 17
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23912
23688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 4
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 6
23711: PUSH
23712: LD_INT 7
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: LD_INT 9
23720: PUSH
23721: LD_INT 10
23723: PUSH
23724: LD_INT 11
23726: PUSH
23727: LD_INT 12
23729: PUSH
23730: LD_INT 13
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: LD_INT 15
23738: PUSH
23739: LD_INT 16
23741: PUSH
23742: LD_INT 17
23744: PUSH
23745: LD_INT 18
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 20
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_INT 23
23762: PUSH
23763: LD_INT 24
23765: PUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 26
23771: PUSH
23772: LD_INT 27
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 29
23780: PUSH
23781: LD_INT 30
23783: PUSH
23784: LD_INT 31
23786: PUSH
23787: LD_INT 32
23789: PUSH
23790: LD_INT 33
23792: PUSH
23793: LD_INT 34
23795: PUSH
23796: LD_INT 36
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 104
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 107
23856: PUSH
23857: LD_INT 108
23859: PUSH
23860: LD_INT 109
23862: PUSH
23863: LD_INT 110
23865: PUSH
23866: LD_INT 111
23868: PUSH
23869: LD_INT 112
23871: PUSH
23872: LD_INT 113
23874: PUSH
23875: LD_INT 114
23877: PUSH
23878: LD_INT 116
23880: PUSH
23881: LD_INT 117
23883: PUSH
23884: LD_INT 118
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24309
23912: LD_INT 18
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 24068
23920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 4
23931: PUSH
23932: LD_INT 5
23934: PUSH
23935: LD_INT 7
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 15
23946: PUSH
23947: LD_INT 16
23949: PUSH
23950: LD_INT 20
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_INT 23
23961: PUSH
23962: LD_INT 25
23964: PUSH
23965: LD_INT 26
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 35
23985: PUSH
23986: LD_INT 36
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 101
24014: PUSH
24015: LD_INT 102
24017: PUSH
24018: LD_INT 103
24020: PUSH
24021: LD_INT 106
24023: PUSH
24024: LD_INT 108
24026: PUSH
24027: LD_INT 112
24029: PUSH
24030: LD_INT 113
24032: PUSH
24033: LD_INT 114
24035: PUSH
24036: LD_INT 115
24038: PUSH
24039: LD_INT 116
24041: PUSH
24042: LD_INT 117
24044: PUSH
24045: LD_INT 118
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 24309
24068: LD_INT 19
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24308
24076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: LD_INT 6
24099: PUSH
24100: LD_INT 7
24102: PUSH
24103: LD_INT 8
24105: PUSH
24106: LD_INT 9
24108: PUSH
24109: LD_INT 10
24111: PUSH
24112: LD_INT 11
24114: PUSH
24115: LD_INT 12
24117: PUSH
24118: LD_INT 13
24120: PUSH
24121: LD_INT 14
24123: PUSH
24124: LD_INT 15
24126: PUSH
24127: LD_INT 16
24129: PUSH
24130: LD_INT 17
24132: PUSH
24133: LD_INT 18
24135: PUSH
24136: LD_INT 19
24138: PUSH
24139: LD_INT 20
24141: PUSH
24142: LD_INT 21
24144: PUSH
24145: LD_INT 22
24147: PUSH
24148: LD_INT 23
24150: PUSH
24151: LD_INT 24
24153: PUSH
24154: LD_INT 25
24156: PUSH
24157: LD_INT 26
24159: PUSH
24160: LD_INT 27
24162: PUSH
24163: LD_INT 28
24165: PUSH
24166: LD_INT 29
24168: PUSH
24169: LD_INT 30
24171: PUSH
24172: LD_INT 31
24174: PUSH
24175: LD_INT 32
24177: PUSH
24178: LD_INT 33
24180: PUSH
24181: LD_INT 34
24183: PUSH
24184: LD_INT 35
24186: PUSH
24187: LD_INT 36
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 101
24230: PUSH
24231: LD_INT 102
24233: PUSH
24234: LD_INT 103
24236: PUSH
24237: LD_INT 104
24239: PUSH
24240: LD_INT 105
24242: PUSH
24243: LD_INT 106
24245: PUSH
24246: LD_INT 107
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 110
24257: PUSH
24258: LD_INT 111
24260: PUSH
24261: LD_INT 112
24263: PUSH
24264: LD_INT 113
24266: PUSH
24267: LD_INT 114
24269: PUSH
24270: LD_INT 115
24272: PUSH
24273: LD_INT 116
24275: PUSH
24276: LD_INT 117
24278: PUSH
24279: LD_INT 118
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: ST_TO_ADDR
24306: GO 24309
24308: POP
// end else
24309: GO 24540
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 4
24327: PUSH
24328: LD_INT 5
24330: PUSH
24331: LD_INT 6
24333: PUSH
24334: LD_INT 7
24336: PUSH
24337: LD_INT 8
24339: PUSH
24340: LD_INT 9
24342: PUSH
24343: LD_INT 10
24345: PUSH
24346: LD_INT 11
24348: PUSH
24349: LD_INT 12
24351: PUSH
24352: LD_INT 13
24354: PUSH
24355: LD_INT 14
24357: PUSH
24358: LD_INT 15
24360: PUSH
24361: LD_INT 16
24363: PUSH
24364: LD_INT 17
24366: PUSH
24367: LD_INT 18
24369: PUSH
24370: LD_INT 19
24372: PUSH
24373: LD_INT 20
24375: PUSH
24376: LD_INT 21
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: LD_INT 23
24384: PUSH
24385: LD_INT 24
24387: PUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 26
24393: PUSH
24394: LD_INT 27
24396: PUSH
24397: LD_INT 28
24399: PUSH
24400: LD_INT 29
24402: PUSH
24403: LD_INT 30
24405: PUSH
24406: LD_INT 31
24408: PUSH
24409: LD_INT 32
24411: PUSH
24412: LD_INT 33
24414: PUSH
24415: LD_INT 34
24417: PUSH
24418: LD_INT 35
24420: PUSH
24421: LD_INT 36
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 101
24464: PUSH
24465: LD_INT 102
24467: PUSH
24468: LD_INT 103
24470: PUSH
24471: LD_INT 104
24473: PUSH
24474: LD_INT 105
24476: PUSH
24477: LD_INT 106
24479: PUSH
24480: LD_INT 107
24482: PUSH
24483: LD_INT 108
24485: PUSH
24486: LD_INT 109
24488: PUSH
24489: LD_INT 110
24491: PUSH
24492: LD_INT 111
24494: PUSH
24495: LD_INT 112
24497: PUSH
24498: LD_INT 113
24500: PUSH
24501: LD_INT 114
24503: PUSH
24504: LD_INT 115
24506: PUSH
24507: LD_INT 116
24509: PUSH
24510: LD_INT 117
24512: PUSH
24513: LD_INT 118
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: ST_TO_ADDR
// if result then
24540: LD_VAR 0 2
24544: IFFALSE 25330
// begin normal :=  ;
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: LD_STRING 
24553: ST_TO_ADDR
// hardcore :=  ;
24554: LD_ADDR_VAR 0 6
24558: PUSH
24559: LD_STRING 
24561: ST_TO_ADDR
// active :=  ;
24562: LD_ADDR_VAR 0 7
24566: PUSH
24567: LD_STRING 
24569: ST_TO_ADDR
// for i = 1 to normalCounter do
24570: LD_ADDR_VAR 0 8
24574: PUSH
24575: DOUBLE
24576: LD_INT 1
24578: DEC
24579: ST_TO_ADDR
24580: LD_EXP 64
24584: PUSH
24585: FOR_TO
24586: IFFALSE 24687
// begin tmp := 0 ;
24588: LD_ADDR_VAR 0 3
24592: PUSH
24593: LD_STRING 0
24595: ST_TO_ADDR
// if result [ 1 ] then
24596: LD_VAR 0 2
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: IFFALSE 24669
// if result [ 1 ] [ 1 ] = i then
24606: LD_VAR 0 2
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: PUSH
24615: LD_INT 1
24617: ARRAY
24618: PUSH
24619: LD_VAR 0 8
24623: EQUAL
24624: IFFALSE 24669
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24626: LD_ADDR_VAR 0 2
24630: PUSH
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 1
24638: PPUSH
24639: LD_VAR 0 2
24643: PUSH
24644: LD_INT 1
24646: ARRAY
24647: PPUSH
24648: LD_INT 1
24650: PPUSH
24651: CALL_OW 3
24655: PPUSH
24656: CALL_OW 1
24660: ST_TO_ADDR
// tmp := 1 ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_STRING 1
24668: ST_TO_ADDR
// end ; normal := normal & tmp ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_VAR 0 5
24678: PUSH
24679: LD_VAR 0 3
24683: STR
24684: ST_TO_ADDR
// end ;
24685: GO 24585
24687: POP
24688: POP
// for i = 1 to hardcoreCounter do
24689: LD_ADDR_VAR 0 8
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_EXP 65
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24810
// begin tmp := 0 ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_STRING 0
24714: ST_TO_ADDR
// if result [ 2 ] then
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 2
24722: ARRAY
24723: IFFALSE 24792
// if result [ 2 ] [ 1 ] = 100 + i then
24725: LD_VAR 0 2
24729: PUSH
24730: LD_INT 2
24732: ARRAY
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PUSH
24738: LD_INT 100
24740: PUSH
24741: LD_VAR 0 8
24745: PLUS
24746: EQUAL
24747: IFFALSE 24792
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_INT 2
24761: PPUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: PPUSH
24771: LD_INT 1
24773: PPUSH
24774: CALL_OW 3
24778: PPUSH
24779: CALL_OW 1
24783: ST_TO_ADDR
// tmp := 1 ;
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_STRING 1
24791: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24792: LD_ADDR_VAR 0 6
24796: PUSH
24797: LD_VAR 0 6
24801: PUSH
24802: LD_VAR 0 3
24806: STR
24807: ST_TO_ADDR
// end ;
24808: GO 24704
24810: POP
24811: POP
// if isGameLoad then
24812: LD_VAR 0 1
24816: IFFALSE 25291
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24818: LD_ADDR_VAR 0 4
24822: PUSH
24823: LD_EXP 68
24827: PUSH
24828: LD_EXP 67
24832: PUSH
24833: LD_EXP 69
24837: PUSH
24838: LD_EXP 66
24842: PUSH
24843: LD_EXP 70
24847: PUSH
24848: LD_EXP 71
24852: PUSH
24853: LD_EXP 72
24857: PUSH
24858: LD_EXP 73
24862: PUSH
24863: LD_EXP 74
24867: PUSH
24868: LD_EXP 75
24872: PUSH
24873: LD_EXP 76
24877: PUSH
24878: LD_EXP 77
24882: PUSH
24883: LD_EXP 78
24887: PUSH
24888: LD_EXP 79
24892: PUSH
24893: LD_EXP 87
24897: PUSH
24898: LD_EXP 88
24902: PUSH
24903: LD_EXP 89
24907: PUSH
24908: LD_EXP 90
24912: PUSH
24913: LD_EXP 92
24917: PUSH
24918: LD_EXP 93
24922: PUSH
24923: LD_EXP 94
24927: PUSH
24928: LD_EXP 97
24932: PUSH
24933: LD_EXP 99
24937: PUSH
24938: LD_EXP 100
24942: PUSH
24943: LD_EXP 101
24947: PUSH
24948: LD_EXP 103
24952: PUSH
24953: LD_EXP 104
24957: PUSH
24958: LD_EXP 107
24962: PUSH
24963: LD_EXP 108
24967: PUSH
24968: LD_EXP 109
24972: PUSH
24973: LD_EXP 110
24977: PUSH
24978: LD_EXP 111
24982: PUSH
24983: LD_EXP 112
24987: PUSH
24988: LD_EXP 113
24992: PUSH
24993: LD_EXP 114
24997: PUSH
24998: LD_EXP 115
25002: PUSH
25003: LD_EXP 80
25007: PUSH
25008: LD_EXP 81
25012: PUSH
25013: LD_EXP 84
25017: PUSH
25018: LD_EXP 85
25022: PUSH
25023: LD_EXP 86
25027: PUSH
25028: LD_EXP 82
25032: PUSH
25033: LD_EXP 83
25037: PUSH
25038: LD_EXP 91
25042: PUSH
25043: LD_EXP 95
25047: PUSH
25048: LD_EXP 96
25052: PUSH
25053: LD_EXP 98
25057: PUSH
25058: LD_EXP 102
25062: PUSH
25063: LD_EXP 105
25067: PUSH
25068: LD_EXP 106
25072: PUSH
25073: LD_EXP 116
25077: PUSH
25078: LD_EXP 117
25082: PUSH
25083: LD_EXP 118
25087: PUSH
25088: LD_EXP 119
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: ST_TO_ADDR
// tmp :=  ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_STRING 
25156: ST_TO_ADDR
// for i = 1 to normalCounter do
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_EXP 64
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25209
// begin if flags [ i ] then
25175: LD_VAR 0 4
25179: PUSH
25180: LD_VAR 0 8
25184: ARRAY
25185: IFFALSE 25207
// tmp := tmp & i & ; ;
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_VAR 0 3
25196: PUSH
25197: LD_VAR 0 8
25201: STR
25202: PUSH
25203: LD_STRING ;
25205: STR
25206: ST_TO_ADDR
// end ;
25207: GO 25172
25209: POP
25210: POP
// for i = 1 to hardcoreCounter do
25211: LD_ADDR_VAR 0 8
25215: PUSH
25216: DOUBLE
25217: LD_INT 1
25219: DEC
25220: ST_TO_ADDR
25221: LD_EXP 65
25225: PUSH
25226: FOR_TO
25227: IFFALSE 25273
// begin if flags [ normalCounter + i ] then
25229: LD_VAR 0 4
25233: PUSH
25234: LD_EXP 64
25238: PUSH
25239: LD_VAR 0 8
25243: PLUS
25244: ARRAY
25245: IFFALSE 25271
// tmp := tmp & ( 100 + i ) & ; ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_INT 100
25259: PUSH
25260: LD_VAR 0 8
25264: PLUS
25265: STR
25266: PUSH
25267: LD_STRING ;
25269: STR
25270: ST_TO_ADDR
// end ;
25271: GO 25226
25273: POP
25274: POP
// if tmp then
25275: LD_VAR 0 3
25279: IFFALSE 25291
// active := tmp ;
25281: LD_ADDR_VAR 0 7
25285: PUSH
25286: LD_VAR 0 3
25290: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25291: LD_STRING getStreamItemsFromMission("
25293: PUSH
25294: LD_VAR 0 5
25298: STR
25299: PUSH
25300: LD_STRING ","
25302: STR
25303: PUSH
25304: LD_VAR 0 6
25308: STR
25309: PUSH
25310: LD_STRING ","
25312: STR
25313: PUSH
25314: LD_VAR 0 7
25318: STR
25319: PUSH
25320: LD_STRING ")
25322: STR
25323: PPUSH
25324: CALL_OW 559
// end else
25328: GO 25337
// ToLua ( getStreamItemsFromMission("","","") ) ;
25330: LD_STRING getStreamItemsFromMission("","","")
25332: PPUSH
25333: CALL_OW 559
// end ;
25337: LD_VAR 0 2
25341: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25342: LD_EXP 63
25346: PUSH
25347: LD_EXP 68
25351: AND
25352: IFFALSE 25476
25354: GO 25356
25356: DISABLE
25357: LD_INT 0
25359: PPUSH
25360: PPUSH
// begin enable ;
25361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25362: LD_ADDR_VAR 0 2
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 7
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 45
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 34
25404: PUSH
25405: LD_INT 28
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 34
25414: PUSH
25415: LD_INT 47
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: ST_TO_ADDR
// if not tmp then
25438: LD_VAR 0 2
25442: NOT
25443: IFFALSE 25447
// exit ;
25445: GO 25476
// for i in tmp do
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: FOR_IN
25458: IFFALSE 25474
// begin SetLives ( i , 0 ) ;
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_INT 0
25467: PPUSH
25468: CALL_OW 234
// end ;
25472: GO 25457
25474: POP
25475: POP
// end ;
25476: PPOPN 2
25478: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25479: LD_EXP 63
25483: PUSH
25484: LD_EXP 69
25488: AND
25489: IFFALSE 25573
25491: GO 25493
25493: DISABLE
25494: LD_INT 0
25496: PPUSH
25497: PPUSH
// begin enable ;
25498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_INT 22
25506: PUSH
25507: LD_OWVAR 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: ST_TO_ADDR
// if not tmp then
25535: LD_VAR 0 2
25539: NOT
25540: IFFALSE 25544
// exit ;
25542: GO 25573
// for i in tmp do
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_VAR 0 2
25553: PUSH
25554: FOR_IN
25555: IFFALSE 25571
// begin SetLives ( i , 0 ) ;
25557: LD_VAR 0 1
25561: PPUSH
25562: LD_INT 0
25564: PPUSH
25565: CALL_OW 234
// end ;
25569: GO 25554
25571: POP
25572: POP
// end ;
25573: PPOPN 2
25575: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25576: LD_EXP 63
25580: PUSH
25581: LD_EXP 66
25585: AND
25586: IFFALSE 25679
25588: GO 25590
25590: DISABLE
25591: LD_INT 0
25593: PPUSH
// begin enable ;
25594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25595: LD_ADDR_VAR 0 1
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_OWVAR 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 25
25617: PUSH
25618: LD_INT 5
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 25
25627: PUSH
25628: LD_INT 9
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 25
25637: PUSH
25638: LD_INT 8
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 69
25659: PUSH
25660: FOR_IN
25661: IFFALSE 25677
// begin SetClass ( i , 1 ) ;
25663: LD_VAR 0 1
25667: PPUSH
25668: LD_INT 1
25670: PPUSH
25671: CALL_OW 336
// end ;
25675: GO 25660
25677: POP
25678: POP
// end ;
25679: PPOPN 1
25681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25682: LD_EXP 63
25686: PUSH
25687: LD_EXP 67
25691: AND
25692: PUSH
25693: LD_OWVAR 65
25697: PUSH
25698: LD_INT 7
25700: LESS
25701: AND
25702: IFFALSE 25716
25704: GO 25706
25706: DISABLE
// begin enable ;
25707: ENABLE
// game_speed := 7 ;
25708: LD_ADDR_OWVAR 65
25712: PUSH
25713: LD_INT 7
25715: ST_TO_ADDR
// end ;
25716: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25717: LD_EXP 63
25721: PUSH
25722: LD_EXP 70
25726: AND
25727: IFFALSE 25929
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
25736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_INT 81
25744: PUSH
25745: LD_OWVAR 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 21
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 3
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25929
// if tmp > 5 then
25782: LD_VAR 0 3
25786: PUSH
25787: LD_INT 5
25789: GREATER
25790: IFFALSE 25802
// k := 5 else
25792: LD_ADDR_VAR 0 2
25796: PUSH
25797: LD_INT 5
25799: ST_TO_ADDR
25800: GO 25812
// k := tmp ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_VAR 0 3
25811: ST_TO_ADDR
// for i := 1 to k do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_VAR 0 2
25826: PUSH
25827: FOR_TO
25828: IFFALSE 25927
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25830: LD_VAR 0 3
25834: PUSH
25835: LD_VAR 0 1
25839: ARRAY
25840: PPUSH
25841: LD_VAR 0 1
25845: PUSH
25846: LD_INT 4
25848: MOD
25849: PUSH
25850: LD_INT 1
25852: PLUS
25853: PPUSH
25854: CALL_OW 259
25858: PUSH
25859: LD_INT 10
25861: LESS
25862: IFFALSE 25925
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 1
25873: ARRAY
25874: PPUSH
25875: LD_VAR 0 1
25879: PUSH
25880: LD_INT 4
25882: MOD
25883: PUSH
25884: LD_INT 1
25886: PLUS
25887: PPUSH
25888: LD_VAR 0 3
25892: PUSH
25893: LD_VAR 0 1
25897: ARRAY
25898: PPUSH
25899: LD_VAR 0 1
25903: PUSH
25904: LD_INT 4
25906: MOD
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: PPUSH
25912: CALL_OW 259
25916: PUSH
25917: LD_INT 1
25919: PLUS
25920: PPUSH
25921: CALL_OW 237
25925: GO 25827
25927: POP
25928: POP
// end ;
25929: PPOPN 3
25931: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25932: LD_EXP 63
25936: PUSH
25937: LD_EXP 71
25941: AND
25942: IFFALSE 25962
25944: GO 25946
25946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25947: LD_INT 4
25949: PPUSH
25950: LD_OWVAR 2
25954: PPUSH
25955: LD_INT 0
25957: PPUSH
25958: CALL_OW 324
25962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25963: LD_EXP 63
25967: PUSH
25968: LD_EXP 100
25972: AND
25973: IFFALSE 25993
25975: GO 25977
25977: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25978: LD_INT 19
25980: PPUSH
25981: LD_OWVAR 2
25985: PPUSH
25986: LD_INT 0
25988: PPUSH
25989: CALL_OW 324
25993: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25994: LD_EXP 63
25998: PUSH
25999: LD_EXP 72
26003: AND
26004: IFFALSE 26106
26006: GO 26008
26008: DISABLE
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
// begin enable ;
26013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 34
26036: PUSH
26037: LD_INT 11
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 34
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PPUSH
26063: CALL_OW 69
26067: ST_TO_ADDR
// if not tmp then
26068: LD_VAR 0 2
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26106
// for i in tmp do
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_VAR 0 2
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26104
// begin SetLives ( i , 0 ) ;
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 234
// end ;
26102: GO 26087
26104: POP
26105: POP
// end ;
26106: PPOPN 2
26108: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26109: LD_EXP 63
26113: PUSH
26114: LD_EXP 73
26118: AND
26119: IFFALSE 26139
26121: GO 26123
26123: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26124: LD_INT 32
26126: PPUSH
26127: LD_OWVAR 2
26131: PPUSH
26132: LD_INT 0
26134: PPUSH
26135: CALL_OW 324
26139: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26140: LD_EXP 63
26144: PUSH
26145: LD_EXP 74
26149: AND
26150: IFFALSE 26331
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 33
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 2
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26331
// side := 0 ;
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// for i := 1 to 8 do
26213: LD_ADDR_VAR 0 1
26217: PUSH
26218: DOUBLE
26219: LD_INT 1
26221: DEC
26222: ST_TO_ADDR
26223: LD_INT 8
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26275
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26229: LD_OWVAR 2
26233: PUSH
26234: LD_VAR 0 1
26238: NONEQUAL
26239: PUSH
26240: LD_OWVAR 2
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 81
26254: PUSH
26255: LD_INT 2
26257: EQUAL
26258: AND
26259: IFFALSE 26273
// begin side := i ;
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_VAR 0 1
26270: ST_TO_ADDR
// break ;
26271: GO 26275
// end ;
26273: GO 26226
26275: POP
26276: POP
// if not side then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26331
// for i := 1 to tmp do
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: DOUBLE
26292: LD_INT 1
26294: DEC
26295: ST_TO_ADDR
26296: LD_VAR 0 2
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26329
// if Prob ( 60 ) then
26304: LD_INT 60
26306: PPUSH
26307: CALL_OW 13
26311: IFFALSE 26327
// SetSide ( i , side ) ;
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL_OW 235
26327: GO 26301
26329: POP
26330: POP
// end ;
26331: PPOPN 3
26333: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26334: LD_EXP 63
26338: PUSH
26339: LD_EXP 76
26343: AND
26344: IFFALSE 26463
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_OWVAR 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: LD_INT 23
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26461
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 257
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 4
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: IN
26437: IFFALSE 26459
// SetClass ( un , rand ( 1 , 4 ) ) ;
26439: LD_VAR 0 1
26443: PPUSH
26444: LD_INT 1
26446: PPUSH
26447: LD_INT 4
26449: PPUSH
26450: CALL_OW 12
26454: PPUSH
26455: CALL_OW 336
26459: GO 26406
26461: POP
26462: POP
// end ;
26463: PPOPN 1
26465: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26466: LD_EXP 63
26470: PUSH
26471: LD_EXP 75
26475: AND
26476: IFFALSE 26555
26478: GO 26480
26480: DISABLE
26481: LD_INT 0
26483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_OWVAR 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 3
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 69
26519: ST_TO_ADDR
// if not tmp then
26520: LD_VAR 0 1
26524: NOT
26525: IFFALSE 26529
// exit ;
26527: GO 26555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26529: LD_VAR 0 1
26533: PUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 12
26546: ARRAY
26547: PPUSH
26548: LD_INT 100
26550: PPUSH
26551: CALL_OW 234
// end ;
26555: PPOPN 1
26557: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26558: LD_EXP 63
26562: PUSH
26563: LD_EXP 77
26567: AND
26568: IFFALSE 26666
26570: GO 26572
26572: DISABLE
26573: LD_INT 0
26575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PPUSH
26607: CALL_OW 69
26611: ST_TO_ADDR
// if not tmp then
26612: LD_VAR 0 1
26616: NOT
26617: IFFALSE 26621
// exit ;
26619: GO 26666
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 1
26628: PPUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 12
26638: ARRAY
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: LD_INT 4
26645: PPUSH
26646: CALL_OW 12
26650: PPUSH
26651: LD_INT 3000
26653: PPUSH
26654: LD_INT 9000
26656: PPUSH
26657: CALL_OW 12
26661: PPUSH
26662: CALL_OW 492
// end ;
26666: PPOPN 1
26668: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26669: LD_EXP 63
26673: PUSH
26674: LD_EXP 78
26678: AND
26679: IFFALSE 26699
26681: GO 26683
26683: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26684: LD_INT 1
26686: PPUSH
26687: LD_OWVAR 2
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 324
26699: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26700: LD_EXP 63
26704: PUSH
26705: LD_EXP 79
26709: AND
26710: IFFALSE 26793
26712: GO 26714
26714: DISABLE
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26719: LD_ADDR_VAR 0 2
26723: PUSH
26724: LD_INT 22
26726: PUSH
26727: LD_OWVAR 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 21
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: ST_TO_ADDR
// if not tmp then
26755: LD_VAR 0 2
26759: NOT
26760: IFFALSE 26764
// exit ;
26762: GO 26793
// for i in tmp do
26764: LD_ADDR_VAR 0 1
26768: PUSH
26769: LD_VAR 0 2
26773: PUSH
26774: FOR_IN
26775: IFFALSE 26791
// SetBLevel ( i , 10 ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_INT 10
26784: PPUSH
26785: CALL_OW 241
26789: GO 26774
26791: POP
26792: POP
// end ;
26793: PPOPN 2
26795: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26796: LD_EXP 63
26800: PUSH
26801: LD_EXP 80
26805: AND
26806: IFFALSE 26917
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
26815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_OWVAR 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 25
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if not tmp then
26852: LD_VAR 0 3
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 26917
// un := tmp [ rand ( 1 , tmp ) ] ;
26861: LD_ADDR_VAR 0 2
26865: PUSH
26866: LD_VAR 0 3
26870: PUSH
26871: LD_INT 1
26873: PPUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: CALL_OW 12
26883: ARRAY
26884: ST_TO_ADDR
// if Crawls ( un ) then
26885: LD_VAR 0 2
26889: PPUSH
26890: CALL_OW 318
26894: IFFALSE 26905
// ComWalk ( un ) ;
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_INT 5
26912: PPUSH
26913: CALL_OW 336
// end ;
26917: PPOPN 3
26919: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26920: LD_EXP 63
26924: PUSH
26925: LD_EXP 81
26929: AND
26930: PUSH
26931: LD_OWVAR 67
26935: PUSH
26936: LD_INT 4
26938: LESS
26939: AND
26940: IFFALSE 26959
26942: GO 26944
26944: DISABLE
// begin Difficulty := Difficulty + 1 ;
26945: LD_ADDR_OWVAR 67
26949: PUSH
26950: LD_OWVAR 67
26954: PUSH
26955: LD_INT 1
26957: PLUS
26958: ST_TO_ADDR
// end ;
26959: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26960: LD_EXP 63
26964: PUSH
26965: LD_EXP 82
26969: AND
26970: IFFALSE 27073
26972: GO 26974
26974: DISABLE
26975: LD_INT 0
26977: PPUSH
// begin for i := 1 to 5 do
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: DOUBLE
26984: LD_INT 1
26986: DEC
26987: ST_TO_ADDR
26988: LD_INT 5
26990: PUSH
26991: FOR_TO
26992: IFFALSE 27071
// begin uc_nation := nation_nature ;
26994: LD_ADDR_OWVAR 21
26998: PUSH
26999: LD_INT 0
27001: ST_TO_ADDR
// uc_side := 0 ;
27002: LD_ADDR_OWVAR 20
27006: PUSH
27007: LD_INT 0
27009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27010: LD_ADDR_OWVAR 29
27014: PUSH
27015: LD_INT 12
27017: PUSH
27018: LD_INT 12
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// hc_agressivity := 20 ;
27025: LD_ADDR_OWVAR 35
27029: PUSH
27030: LD_INT 20
27032: ST_TO_ADDR
// hc_class := class_tiger ;
27033: LD_ADDR_OWVAR 28
27037: PUSH
27038: LD_INT 14
27040: ST_TO_ADDR
// hc_gallery :=  ;
27041: LD_ADDR_OWVAR 33
27045: PUSH
27046: LD_STRING 
27048: ST_TO_ADDR
// hc_name :=  ;
27049: LD_ADDR_OWVAR 26
27053: PUSH
27054: LD_STRING 
27056: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27057: CALL_OW 44
27061: PPUSH
27062: LD_INT 0
27064: PPUSH
27065: CALL_OW 51
// end ;
27069: GO 26991
27071: POP
27072: POP
// end ;
27073: PPOPN 1
27075: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27076: LD_EXP 63
27080: PUSH
27081: LD_EXP 83
27085: AND
27086: IFFALSE 27095
27088: GO 27090
27090: DISABLE
// StreamSibBomb ;
27091: CALL 27096 0 0
27095: END
// export function StreamSibBomb ; var i , x , y ; begin
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
// result := false ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// for i := 1 to 16 do
27110: LD_ADDR_VAR 0 2
27114: PUSH
27115: DOUBLE
27116: LD_INT 1
27118: DEC
27119: ST_TO_ADDR
27120: LD_INT 16
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27323
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 10
27133: PUSH
27134: LD_INT 20
27136: PUSH
27137: LD_INT 30
27139: PUSH
27140: LD_INT 40
27142: PUSH
27143: LD_INT 50
27145: PUSH
27146: LD_INT 60
27148: PUSH
27149: LD_INT 70
27151: PUSH
27152: LD_INT 80
27154: PUSH
27155: LD_INT 90
27157: PUSH
27158: LD_INT 100
27160: PUSH
27161: LD_INT 110
27163: PUSH
27164: LD_INT 120
27166: PUSH
27167: LD_INT 130
27169: PUSH
27170: LD_INT 140
27172: PUSH
27173: LD_INT 150
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PPUSH
27196: LD_INT 15
27198: PPUSH
27199: CALL_OW 12
27203: ARRAY
27204: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_INT 10
27212: PUSH
27213: LD_INT 20
27215: PUSH
27216: LD_INT 30
27218: PUSH
27219: LD_INT 40
27221: PUSH
27222: LD_INT 50
27224: PUSH
27225: LD_INT 60
27227: PUSH
27228: LD_INT 70
27230: PUSH
27231: LD_INT 80
27233: PUSH
27234: LD_INT 90
27236: PUSH
27237: LD_INT 100
27239: PUSH
27240: LD_INT 110
27242: PUSH
27243: LD_INT 120
27245: PUSH
27246: LD_INT 130
27248: PUSH
27249: LD_INT 140
27251: PUSH
27252: LD_INT 150
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PPUSH
27275: LD_INT 15
27277: PPUSH
27278: CALL_OW 12
27282: ARRAY
27283: ST_TO_ADDR
// if ValidHex ( x , y ) then
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_VAR 0 4
27293: PPUSH
27294: CALL_OW 488
27298: IFFALSE 27321
// begin result := [ x , y ] ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 3
27309: PUSH
27310: LD_VAR 0 4
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// break ;
27319: GO 27323
// end ; end ;
27321: GO 27123
27323: POP
27324: POP
// if result then
27325: LD_VAR 0 1
27329: IFFALSE 27389
// begin ToLua ( playSibBomb() ) ;
27331: LD_STRING playSibBomb()
27333: PPUSH
27334: CALL_OW 559
// wait ( 0 0$14 ) ;
27338: LD_INT 490
27340: PPUSH
27341: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27345: LD_VAR 0 1
27349: PUSH
27350: LD_INT 1
27352: ARRAY
27353: PPUSH
27354: LD_VAR 0 1
27358: PUSH
27359: LD_INT 2
27361: ARRAY
27362: PPUSH
27363: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27367: LD_VAR 0 1
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: LD_VAR 0 1
27380: PUSH
27381: LD_INT 2
27383: ARRAY
27384: PPUSH
27385: CALL_OW 429
// end ; end ;
27389: LD_VAR 0 1
27393: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27394: LD_EXP 63
27398: PUSH
27399: LD_EXP 85
27403: AND
27404: IFFALSE 27416
27406: GO 27408
27408: DISABLE
// YouLost (  ) ;
27409: LD_STRING 
27411: PPUSH
27412: CALL_OW 104
27416: END
// every 0 0$1 trigger StreamModeActive and sFog do
27417: LD_EXP 63
27421: PUSH
27422: LD_EXP 84
27426: AND
27427: IFFALSE 27441
27429: GO 27431
27431: DISABLE
// FogOff ( your_side ) ;
27432: LD_OWVAR 2
27436: PPUSH
27437: CALL_OW 344
27441: END
// every 0 0$1 trigger StreamModeActive and sSun do
27442: LD_EXP 63
27446: PUSH
27447: LD_EXP 86
27451: AND
27452: IFFALSE 27480
27454: GO 27456
27456: DISABLE
// begin solar_recharge_percent := 0 ;
27457: LD_ADDR_OWVAR 79
27461: PUSH
27462: LD_INT 0
27464: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27465: LD_INT 10500
27467: PPUSH
27468: CALL_OW 67
// solar_recharge_percent := 100 ;
27472: LD_ADDR_OWVAR 79
27476: PUSH
27477: LD_INT 100
27479: ST_TO_ADDR
// end ;
27480: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27481: LD_EXP 63
27485: PUSH
27486: LD_EXP 87
27490: AND
27491: IFFALSE 27730
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
27499: PPUSH
27500: PPUSH
// begin tmp := [ ] ;
27501: LD_ADDR_VAR 0 3
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// for i := 1 to 6 do
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: DOUBLE
27514: LD_INT 1
27516: DEC
27517: ST_TO_ADDR
27518: LD_INT 6
27520: PUSH
27521: FOR_TO
27522: IFFALSE 27627
// begin uc_nation := nation_nature ;
27524: LD_ADDR_OWVAR 21
27528: PUSH
27529: LD_INT 0
27531: ST_TO_ADDR
// uc_side := 0 ;
27532: LD_ADDR_OWVAR 20
27536: PUSH
27537: LD_INT 0
27539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27540: LD_ADDR_OWVAR 29
27544: PUSH
27545: LD_INT 12
27547: PUSH
27548: LD_INT 12
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: ST_TO_ADDR
// hc_agressivity := 20 ;
27555: LD_ADDR_OWVAR 35
27559: PUSH
27560: LD_INT 20
27562: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27563: LD_ADDR_OWVAR 28
27567: PUSH
27568: LD_INT 17
27570: ST_TO_ADDR
// hc_gallery :=  ;
27571: LD_ADDR_OWVAR 33
27575: PUSH
27576: LD_STRING 
27578: ST_TO_ADDR
// hc_name :=  ;
27579: LD_ADDR_OWVAR 26
27583: PUSH
27584: LD_STRING 
27586: ST_TO_ADDR
// un := CreateHuman ;
27587: LD_ADDR_VAR 0 2
27591: PUSH
27592: CALL_OW 44
27596: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 51
// tmp := tmp ^ un ;
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_VAR 0 3
27618: PUSH
27619: LD_VAR 0 2
27623: ADD
27624: ST_TO_ADDR
// end ;
27625: GO 27521
27627: POP
27628: POP
// repeat wait ( 0 0$1 ) ;
27629: LD_INT 35
27631: PPUSH
27632: CALL_OW 67
// for un in tmp do
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: FOR_IN
27647: IFFALSE 27721
// begin if IsDead ( un ) then
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 301
27658: IFFALSE 27678
// begin tmp := tmp diff un ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_VAR 0 3
27669: PUSH
27670: LD_VAR 0 2
27674: DIFF
27675: ST_TO_ADDR
// continue ;
27676: GO 27646
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PPUSH
27700: CALL_OW 69
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: CALL_OW 74
27714: PPUSH
27715: CALL_OW 115
// end ;
27719: GO 27646
27721: POP
27722: POP
// until not tmp ;
27723: LD_VAR 0 3
27727: NOT
27728: IFFALSE 27629
// end ;
27730: PPOPN 3
27732: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27733: LD_EXP 63
27737: PUSH
27738: LD_EXP 88
27742: AND
27743: IFFALSE 27797
27745: GO 27747
27747: DISABLE
// begin ToLua ( displayTroll(); ) ;
27748: LD_STRING displayTroll();
27750: PPUSH
27751: CALL_OW 559
// wait ( 3 3$00 ) ;
27755: LD_INT 6300
27757: PPUSH
27758: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27762: LD_STRING hideTroll();
27764: PPUSH
27765: CALL_OW 559
// wait ( 1 1$00 ) ;
27769: LD_INT 2100
27771: PPUSH
27772: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27776: LD_STRING displayTroll();
27778: PPUSH
27779: CALL_OW 559
// wait ( 1 1$00 ) ;
27783: LD_INT 2100
27785: PPUSH
27786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27790: LD_STRING hideTroll();
27792: PPUSH
27793: CALL_OW 559
// end ;
27797: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27798: LD_EXP 63
27802: PUSH
27803: LD_EXP 89
27807: AND
27808: IFFALSE 27871
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
// begin p := 0 ;
27816: LD_ADDR_VAR 0 1
27820: PUSH
27821: LD_INT 0
27823: ST_TO_ADDR
// repeat game_speed := 1 ;
27824: LD_ADDR_OWVAR 65
27828: PUSH
27829: LD_INT 1
27831: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27832: LD_INT 35
27834: PPUSH
27835: CALL_OW 67
// p := p + 1 ;
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_VAR 0 1
27848: PUSH
27849: LD_INT 1
27851: PLUS
27852: ST_TO_ADDR
// until p >= 60 ;
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 60
27860: GREATEREQUAL
27861: IFFALSE 27824
// game_speed := 4 ;
27863: LD_ADDR_OWVAR 65
27867: PUSH
27868: LD_INT 4
27870: ST_TO_ADDR
// end ;
27871: PPOPN 1
27873: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27874: LD_EXP 63
27878: PUSH
27879: LD_EXP 90
27883: AND
27884: IFFALSE 28030
27886: GO 27888
27888: DISABLE
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_OWVAR 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 30
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if not depot then
27947: LD_VAR 0 1
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 1
27968: PPUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL_OW 12
27978: ARRAY
27979: PPUSH
27980: CALL_OW 274
27984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: LD_INT 0
27995: PPUSH
27996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28000: LD_VAR 0 2
28004: PPUSH
28005: LD_INT 2
28007: PPUSH
28008: LD_INT 0
28010: PPUSH
28011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28015: LD_VAR 0 2
28019: PPUSH
28020: LD_INT 3
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 277
// end ;
28030: PPOPN 2
28032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28033: LD_EXP 63
28037: PUSH
28038: LD_EXP 91
28042: AND
28043: IFFALSE 28140
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28051: LD_ADDR_VAR 0 1
28055: PUSH
28056: LD_INT 22
28058: PUSH
28059: LD_OWVAR 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: LD_INT 23
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 69
28104: ST_TO_ADDR
// if not tmp then
28105: LD_VAR 0 1
28109: NOT
28110: IFFALSE 28114
// exit ;
28112: GO 28140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28114: LD_VAR 0 1
28118: PUSH
28119: LD_INT 1
28121: PPUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 12
28131: ARRAY
28132: PPUSH
28133: LD_INT 200
28135: PPUSH
28136: CALL_OW 234
// end ;
28140: PPOPN 1
28142: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28143: LD_EXP 63
28147: PUSH
28148: LD_EXP 92
28152: AND
28153: IFFALSE 28232
28155: GO 28157
28157: DISABLE
28158: LD_INT 0
28160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: LD_INT 22
28168: PUSH
28169: LD_OWVAR 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 21
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL_OW 69
28196: ST_TO_ADDR
// if not tmp then
28197: LD_VAR 0 1
28201: NOT
28202: IFFALSE 28206
// exit ;
28204: GO 28232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28206: LD_VAR 0 1
28210: PUSH
28211: LD_INT 1
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL_OW 12
28223: ARRAY
28224: PPUSH
28225: LD_INT 60
28227: PPUSH
28228: CALL_OW 234
// end ;
28232: PPOPN 1
28234: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28235: LD_EXP 63
28239: PUSH
28240: LD_EXP 93
28244: AND
28245: IFFALSE 28344
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
// begin enable ;
28254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_INT 22
28262: PUSH
28263: LD_OWVAR 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 61
28274: PUSH
28275: EMPTY
28276: LIST
28277: PUSH
28278: LD_INT 33
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: PPUSH
28293: CALL_OW 69
28297: ST_TO_ADDR
// if not tmp then
28298: LD_VAR 0 1
28302: NOT
28303: IFFALSE 28307
// exit ;
28305: GO 28344
// for i in tmp do
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: PUSH
28317: FOR_IN
28318: IFFALSE 28342
// if IsControledBy ( i ) then
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 312
28329: IFFALSE 28340
// ComUnlink ( i ) ;
28331: LD_VAR 0 2
28335: PPUSH
28336: CALL_OW 136
28340: GO 28317
28342: POP
28343: POP
// end ;
28344: PPOPN 2
28346: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28347: LD_EXP 63
28351: PUSH
28352: LD_EXP 94
28356: AND
28357: IFFALSE 28497
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin ToLua ( displayPowell(); ) ;
28366: LD_STRING displayPowell();
28368: PPUSH
28369: CALL_OW 559
// uc_side := 0 ;
28373: LD_ADDR_OWVAR 20
28377: PUSH
28378: LD_INT 0
28380: ST_TO_ADDR
// uc_nation := 2 ;
28381: LD_ADDR_OWVAR 21
28385: PUSH
28386: LD_INT 2
28388: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28389: LD_ADDR_OWVAR 37
28393: PUSH
28394: LD_INT 14
28396: ST_TO_ADDR
// vc_engine := engine_siberite ;
28397: LD_ADDR_OWVAR 39
28401: PUSH
28402: LD_INT 3
28404: ST_TO_ADDR
// vc_control := control_apeman ;
28405: LD_ADDR_OWVAR 38
28409: PUSH
28410: LD_INT 5
28412: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28413: LD_ADDR_OWVAR 40
28417: PUSH
28418: LD_INT 29
28420: ST_TO_ADDR
// un := CreateVehicle ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: CALL_OW 45
28430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28443: LD_INT 35
28445: PPUSH
28446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 69
28471: PPUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: CALL_OW 74
28481: PPUSH
28482: CALL_OW 115
// until IsDead ( un ) ;
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 301
28495: IFFALSE 28443
// end ;
28497: PPOPN 2
28499: END
// every 0 0$1 trigger StreamModeActive and sStu do
28500: LD_EXP 63
28504: PUSH
28505: LD_EXP 102
28509: AND
28510: IFFALSE 28526
28512: GO 28514
28514: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28515: LD_STRING displayStucuk();
28517: PPUSH
28518: CALL_OW 559
// ResetFog ;
28522: CALL_OW 335
// end ;
28526: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28527: LD_EXP 63
28531: PUSH
28532: LD_EXP 95
28536: AND
28537: IFFALSE 28678
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28546: LD_ADDR_VAR 0 2
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_OWVAR 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 69
28581: ST_TO_ADDR
// if not tmp then
28582: LD_VAR 0 2
28586: NOT
28587: IFFALSE 28591
// exit ;
28589: GO 28678
// un := tmp [ rand ( 1 , tmp ) ] ;
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 12
28613: ARRAY
28614: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_OWVAR 3
28636: PUSH
28637: LD_VAR 0 1
28641: DIFF
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 74
28652: PPUSH
28653: CALL_OW 115
// wait ( 0 0$20 ) ;
28657: LD_INT 700
28659: PPUSH
28660: CALL_OW 67
// SetSide ( un , your_side ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_OWVAR 2
28673: PPUSH
28674: CALL_OW 235
// end ;
28678: PPOPN 2
28680: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28681: LD_EXP 63
28685: PUSH
28686: LD_EXP 96
28690: AND
28691: IFFALSE 28797
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28699: LD_ADDR_VAR 0 1
28703: PUSH
28704: LD_INT 22
28706: PUSH
28707: LD_OWVAR 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 30
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 30
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PPUSH
28748: CALL_OW 69
28752: ST_TO_ADDR
// if not depot then
28753: LD_VAR 0 1
28757: NOT
28758: IFFALSE 28762
// exit ;
28760: GO 28797
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28762: LD_VAR 0 1
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PPUSH
28771: CALL_OW 250
28775: PPUSH
28776: LD_VAR 0 1
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: PPUSH
28785: CALL_OW 251
28789: PPUSH
28790: LD_INT 70
28792: PPUSH
28793: CALL_OW 495
// end ;
28797: PPOPN 1
28799: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28800: LD_EXP 63
28804: PUSH
28805: LD_EXP 97
28809: AND
28810: IFFALSE 29021
28812: GO 28814
28814: DISABLE
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28822: LD_ADDR_VAR 0 5
28826: PUSH
28827: LD_INT 22
28829: PUSH
28830: LD_OWVAR 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PPUSH
28853: CALL_OW 69
28857: ST_TO_ADDR
// if not tmp then
28858: LD_VAR 0 5
28862: NOT
28863: IFFALSE 28867
// exit ;
28865: GO 29021
// for i in tmp do
28867: LD_ADDR_VAR 0 1
28871: PUSH
28872: LD_VAR 0 5
28876: PUSH
28877: FOR_IN
28878: IFFALSE 29019
// begin d := rand ( 0 , 5 ) ;
28880: LD_ADDR_VAR 0 4
28884: PUSH
28885: LD_INT 0
28887: PPUSH
28888: LD_INT 5
28890: PPUSH
28891: CALL_OW 12
28895: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_VAR 0 1
28905: PPUSH
28906: CALL_OW 250
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_INT 3
28918: PPUSH
28919: LD_INT 12
28921: PPUSH
28922: CALL_OW 12
28926: PPUSH
28927: CALL_OW 272
28931: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 251
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: LD_INT 3
28954: PPUSH
28955: LD_INT 12
28957: PPUSH
28958: CALL_OW 12
28962: PPUSH
28963: CALL_OW 273
28967: ST_TO_ADDR
// if ValidHex ( x , y ) then
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 488
28982: IFFALSE 29017
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: LD_INT 3
29001: PPUSH
29002: LD_INT 6
29004: PPUSH
29005: CALL_OW 12
29009: PPUSH
29010: LD_INT 1
29012: PPUSH
29013: CALL_OW 483
// end ;
29017: GO 28877
29019: POP
29020: POP
// end ;
29021: PPOPN 5
29023: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29024: LD_EXP 63
29028: PUSH
29029: LD_EXP 98
29033: AND
29034: IFFALSE 29128
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_INT 22
29050: PUSH
29051: LD_OWVAR 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 32
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: ST_TO_ADDR
// if not tmp then
29090: LD_VAR 0 2
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29128
// for i in tmp do
29099: LD_ADDR_VAR 0 1
29103: PUSH
29104: LD_VAR 0 2
29108: PUSH
29109: FOR_IN
29110: IFFALSE 29126
// SetFuel ( i , 0 ) ;
29112: LD_VAR 0 1
29116: PPUSH
29117: LD_INT 0
29119: PPUSH
29120: CALL_OW 240
29124: GO 29109
29126: POP
29127: POP
// end ;
29128: PPOPN 2
29130: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29131: LD_EXP 63
29135: PUSH
29136: LD_EXP 99
29140: AND
29141: IFFALSE 29207
29143: GO 29145
29145: DISABLE
29146: LD_INT 0
29148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29149: LD_ADDR_VAR 0 1
29153: PUSH
29154: LD_INT 22
29156: PUSH
29157: LD_OWVAR 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 30
29168: PUSH
29169: LD_INT 29
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: ST_TO_ADDR
// if not tmp then
29185: LD_VAR 0 1
29189: NOT
29190: IFFALSE 29194
// exit ;
29192: GO 29207
// DestroyUnit ( tmp [ 1 ] ) ;
29194: LD_VAR 0 1
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: CALL_OW 65
// end ;
29207: PPOPN 1
29209: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29210: LD_EXP 63
29214: PUSH
29215: LD_EXP 101
29219: AND
29220: IFFALSE 29349
29222: GO 29224
29224: DISABLE
29225: LD_INT 0
29227: PPUSH
// begin uc_side := 0 ;
29228: LD_ADDR_OWVAR 20
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// uc_nation := nation_arabian ;
29236: LD_ADDR_OWVAR 21
29240: PUSH
29241: LD_INT 2
29243: ST_TO_ADDR
// hc_gallery :=  ;
29244: LD_ADDR_OWVAR 33
29248: PUSH
29249: LD_STRING 
29251: ST_TO_ADDR
// hc_name :=  ;
29252: LD_ADDR_OWVAR 26
29256: PUSH
29257: LD_STRING 
29259: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29260: LD_INT 1
29262: PPUSH
29263: LD_INT 11
29265: PPUSH
29266: LD_INT 10
29268: PPUSH
29269: CALL_OW 380
// un := CreateHuman ;
29273: LD_ADDR_VAR 0 1
29277: PUSH
29278: CALL_OW 44
29282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29295: LD_INT 35
29297: PPUSH
29298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29302: LD_VAR 0 1
29306: PPUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 74
29333: PPUSH
29334: CALL_OW 115
// until IsDead ( un ) ;
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 301
29347: IFFALSE 29295
// end ;
29349: PPOPN 1
29351: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29352: LD_EXP 63
29356: PUSH
29357: LD_EXP 103
29361: AND
29362: IFFALSE 29374
29364: GO 29366
29366: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29367: LD_STRING earthquake(getX(game), 0, 32)
29369: PPUSH
29370: CALL_OW 559
29374: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29375: LD_EXP 63
29379: PUSH
29380: LD_EXP 104
29384: AND
29385: IFFALSE 29476
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
// begin enable ;
29393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29394: LD_ADDR_VAR 0 1
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 33
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 69
29440: ST_TO_ADDR
// if not tmp then
29441: LD_VAR 0 1
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 1
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 12
29467: ARRAY
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: CALL_OW 234
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29479: LD_EXP 63
29483: PUSH
29484: LD_EXP 105
29488: AND
29489: IFFALSE 29630
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
29498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_OWVAR 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 25
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 69
29534: ST_TO_ADDR
// if not tmp then
29535: LD_VAR 0 3
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 29630
// un := tmp [ rand ( 1 , tmp ) ] ;
29544: LD_ADDR_VAR 0 2
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_INT 1
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL_OW 12
29566: ARRAY
29567: ST_TO_ADDR
// if Crawls ( un ) then
29568: LD_VAR 0 2
29572: PPUSH
29573: CALL_OW 318
29577: IFFALSE 29588
// ComWalk ( un ) ;
29579: LD_VAR 0 2
29583: PPUSH
29584: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29588: LD_VAR 0 2
29592: PPUSH
29593: LD_INT 9
29595: PPUSH
29596: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29600: LD_INT 28
29602: PPUSH
29603: LD_OWVAR 2
29607: PPUSH
29608: LD_INT 2
29610: PPUSH
29611: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29615: LD_INT 29
29617: PPUSH
29618: LD_OWVAR 2
29622: PPUSH
29623: LD_INT 2
29625: PPUSH
29626: CALL_OW 322
// end ;
29630: PPOPN 3
29632: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29633: LD_EXP 63
29637: PUSH
29638: LD_EXP 106
29642: AND
29643: IFFALSE 29754
29645: GO 29647
29647: DISABLE
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 25
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 3
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29754
// un := tmp [ rand ( 1 , tmp ) ] ;
29698: LD_ADDR_VAR 0 2
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: PPUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 12
29720: ARRAY
29721: ST_TO_ADDR
// if Crawls ( un ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: CALL_OW 318
29731: IFFALSE 29742
// ComWalk ( un ) ;
29733: LD_VAR 0 2
29737: PPUSH
29738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_INT 8
29749: PPUSH
29750: CALL_OW 336
// end ;
29754: PPOPN 3
29756: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29757: LD_EXP 63
29761: PUSH
29762: LD_EXP 107
29766: AND
29767: IFFALSE 29911
29769: GO 29771
29771: DISABLE
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_INT 22
29783: PUSH
29784: LD_OWVAR 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 12
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 34
29818: PUSH
29819: LD_INT 51
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 34
29828: PUSH
29829: LD_INT 32
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL_OW 69
29851: ST_TO_ADDR
// if not tmp then
29852: LD_VAR 0 2
29856: NOT
29857: IFFALSE 29861
// exit ;
29859: GO 29911
// for i in tmp do
29861: LD_ADDR_VAR 0 1
29865: PUSH
29866: LD_VAR 0 2
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29909
// if GetCargo ( i , mat_artifact ) = 0 then
29874: LD_VAR 0 1
29878: PPUSH
29879: LD_INT 4
29881: PPUSH
29882: CALL_OW 289
29886: PUSH
29887: LD_INT 0
29889: EQUAL
29890: IFFALSE 29907
// SetCargo ( i , mat_siberit , 100 ) ;
29892: LD_VAR 0 1
29896: PPUSH
29897: LD_INT 3
29899: PPUSH
29900: LD_INT 100
29902: PPUSH
29903: CALL_OW 290
29907: GO 29871
29909: POP
29910: POP
// end ;
29911: PPOPN 2
29913: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29914: LD_EXP 63
29918: PUSH
29919: LD_EXP 108
29923: AND
29924: IFFALSE 30107
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29933: LD_ADDR_VAR 0 2
29937: PUSH
29938: LD_INT 22
29940: PUSH
29941: LD_OWVAR 2
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 2
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 30107
// for i := 1 to 2 do
29964: LD_ADDR_VAR 0 1
29968: PUSH
29969: DOUBLE
29970: LD_INT 1
29972: DEC
29973: ST_TO_ADDR
29974: LD_INT 2
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30105
// begin uc_side := your_side ;
29980: LD_ADDR_OWVAR 20
29984: PUSH
29985: LD_OWVAR 2
29989: ST_TO_ADDR
// uc_nation := nation_american ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 1
29997: ST_TO_ADDR
// vc_chassis := us_morphling ;
29998: LD_ADDR_OWVAR 37
30002: PUSH
30003: LD_INT 5
30005: ST_TO_ADDR
// vc_engine := engine_siberite ;
30006: LD_ADDR_OWVAR 39
30010: PUSH
30011: LD_INT 3
30013: ST_TO_ADDR
// vc_control := control_computer ;
30014: LD_ADDR_OWVAR 38
30018: PUSH
30019: LD_INT 3
30021: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30022: LD_ADDR_OWVAR 40
30026: PUSH
30027: LD_INT 10
30029: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30030: LD_VAR 0 2
30034: PUSH
30035: LD_INT 1
30037: ARRAY
30038: PPUSH
30039: CALL_OW 310
30043: NOT
30044: IFFALSE 30091
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30046: CALL_OW 45
30050: PPUSH
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: PPUSH
30060: CALL_OW 250
30064: PPUSH
30065: LD_VAR 0 2
30069: PUSH
30070: LD_INT 1
30072: ARRAY
30073: PPUSH
30074: CALL_OW 251
30078: PPUSH
30079: LD_INT 12
30081: PPUSH
30082: LD_INT 1
30084: PPUSH
30085: CALL_OW 50
30089: GO 30103
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30091: CALL_OW 45
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 51
// end ;
30103: GO 29977
30105: POP
30106: POP
// end ;
30107: PPOPN 2
30109: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30110: LD_EXP 63
30114: PUSH
30115: LD_EXP 109
30119: AND
30120: IFFALSE 30342
30122: GO 30124
30124: DISABLE
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30133: LD_ADDR_VAR 0 6
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 23
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 69
30186: ST_TO_ADDR
// if not tmp then
30187: LD_VAR 0 6
30191: NOT
30192: IFFALSE 30196
// exit ;
30194: GO 30342
// s1 := rand ( 1 , 4 ) ;
30196: LD_ADDR_VAR 0 2
30200: PUSH
30201: LD_INT 1
30203: PPUSH
30204: LD_INT 4
30206: PPUSH
30207: CALL_OW 12
30211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 6
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 259
30235: ST_TO_ADDR
// if s1 = 1 then
30236: LD_VAR 0 2
30240: PUSH
30241: LD_INT 1
30243: EQUAL
30244: IFFALSE 30264
// s2 := rand ( 2 , 4 ) else
30246: LD_ADDR_VAR 0 3
30250: PUSH
30251: LD_INT 2
30253: PPUSH
30254: LD_INT 4
30256: PPUSH
30257: CALL_OW 12
30261: ST_TO_ADDR
30262: GO 30272
// s2 := 1 ;
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_INT 1
30271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 6
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 259
30295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30296: LD_VAR 0 6
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 2
30309: PPUSH
30310: LD_VAR 0 5
30314: PPUSH
30315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30319: LD_VAR 0 6
30323: PUSH
30324: LD_INT 1
30326: ARRAY
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: CALL_OW 237
// end ;
30342: PPOPN 6
30344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30345: LD_EXP 63
30349: PUSH
30350: LD_EXP 110
30354: AND
30355: IFFALSE 30434
30357: GO 30359
30359: DISABLE
30360: LD_INT 0
30362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: LD_INT 22
30370: PUSH
30371: LD_OWVAR 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 69
30398: ST_TO_ADDR
// if not tmp then
30399: LD_VAR 0 1
30403: NOT
30404: IFFALSE 30408
// exit ;
30406: GO 30434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 1
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 12
30425: ARRAY
30426: PPUSH
30427: LD_INT 1
30429: PPUSH
30430: CALL_OW 234
// end ;
30434: PPOPN 1
30436: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30437: LD_EXP 63
30441: PUSH
30442: LD_EXP 111
30446: AND
30447: IFFALSE 30559
30449: GO 30451
30451: DISABLE
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30456: LD_ADDR_VAR 0 2
30460: PUSH
30461: LD_INT 22
30463: PUSH
30464: LD_OWVAR 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 27
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_INT 26
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 30
30498: PUSH
30499: LD_INT 28
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: ST_TO_ADDR
// if not tmp then
30521: LD_VAR 0 2
30525: NOT
30526: IFFALSE 30530
// exit ;
30528: GO 30559
// for i in tmp do
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_VAR 0 2
30539: PUSH
30540: FOR_IN
30541: IFFALSE 30557
// SetLives ( i , 1 ) ;
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: CALL_OW 234
30555: GO 30540
30557: POP
30558: POP
// end ;
30559: PPOPN 2
30561: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30562: LD_EXP 63
30566: PUSH
30567: LD_EXP 112
30571: AND
30572: IFFALSE 30859
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin i := rand ( 1 , 7 ) ;
30582: LD_ADDR_VAR 0 1
30586: PUSH
30587: LD_INT 1
30589: PPUSH
30590: LD_INT 7
30592: PPUSH
30593: CALL_OW 12
30597: ST_TO_ADDR
// case i of 1 :
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 1
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30621
30611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30612: LD_STRING earthquake(getX(game), 0, 32)
30614: PPUSH
30615: CALL_OW 559
30619: GO 30859
30621: LD_INT 2
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30643
30629: POP
// begin ToLua ( displayStucuk(); ) ;
30630: LD_STRING displayStucuk();
30632: PPUSH
30633: CALL_OW 559
// ResetFog ;
30637: CALL_OW 335
// end ; 3 :
30641: GO 30859
30643: LD_INT 3
30645: DOUBLE
30646: EQUAL
30647: IFTRUE 30651
30649: GO 30755
30651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30652: LD_ADDR_VAR 0 2
30656: PUSH
30657: LD_INT 22
30659: PUSH
30660: LD_OWVAR 2
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 25
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PPUSH
30683: CALL_OW 69
30687: ST_TO_ADDR
// if not tmp then
30688: LD_VAR 0 2
30692: NOT
30693: IFFALSE 30697
// exit ;
30695: GO 30859
// un := tmp [ rand ( 1 , tmp ) ] ;
30697: LD_ADDR_VAR 0 3
30701: PUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 12
30719: ARRAY
30720: ST_TO_ADDR
// if Crawls ( un ) then
30721: LD_VAR 0 3
30725: PPUSH
30726: CALL_OW 318
30730: IFFALSE 30741
// ComWalk ( un ) ;
30732: LD_VAR 0 3
30736: PPUSH
30737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30741: LD_VAR 0 3
30745: PPUSH
30746: LD_INT 8
30748: PPUSH
30749: CALL_OW 336
// end ; 4 :
30753: GO 30859
30755: LD_INT 4
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30837
30763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_INT 22
30771: PUSH
30772: LD_OWVAR 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 30
30783: PUSH
30784: LD_INT 29
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: ST_TO_ADDR
// if not tmp then
30800: LD_VAR 0 2
30804: NOT
30805: IFFALSE 30809
// exit ;
30807: GO 30859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 1
30816: ARRAY
30817: PPUSH
30818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30822: LD_VAR 0 2
30826: PUSH
30827: LD_INT 1
30829: ARRAY
30830: PPUSH
30831: CALL_OW 65
// end ; 5 .. 7 :
30835: GO 30859
30837: LD_INT 5
30839: DOUBLE
30840: GREATEREQUAL
30841: IFFALSE 30849
30843: LD_INT 7
30845: DOUBLE
30846: LESSEQUAL
30847: IFTRUE 30851
30849: GO 30858
30851: POP
// StreamSibBomb ; end ;
30852: CALL 27096 0 0
30856: GO 30859
30858: POP
// end ;
30859: PPOPN 3
30861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30862: LD_EXP 63
30866: PUSH
30867: LD_EXP 113
30871: AND
30872: IFFALSE 31028
30874: GO 30876
30876: DISABLE
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
30881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30882: LD_ADDR_VAR 0 2
30886: PUSH
30887: LD_INT 81
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 21
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 31028
// p := 0 ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30953: LD_INT 35
30955: PPUSH
30956: CALL_OW 67
// p := p + 1 ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_VAR 0 3
30969: PUSH
30970: LD_INT 1
30972: PLUS
30973: ST_TO_ADDR
// for i in tmp do
30974: LD_ADDR_VAR 0 1
30978: PUSH
30979: LD_VAR 0 2
30983: PUSH
30984: FOR_IN
30985: IFFALSE 31016
// if GetLives ( i ) < 1000 then
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 256
30996: PUSH
30997: LD_INT 1000
30999: LESS
31000: IFFALSE 31014
// SetLives ( i , 1000 ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: LD_INT 1000
31009: PPUSH
31010: CALL_OW 234
31014: GO 30984
31016: POP
31017: POP
// until p > 20 ;
31018: LD_VAR 0 3
31022: PUSH
31023: LD_INT 20
31025: GREATER
31026: IFFALSE 30953
// end ;
31028: PPOPN 3
31030: END
// every 0 0$1 trigger StreamModeActive and sTime do
31031: LD_EXP 63
31035: PUSH
31036: LD_EXP 114
31040: AND
31041: IFFALSE 31076
31043: GO 31045
31045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31046: LD_INT 28
31048: PPUSH
31049: LD_OWVAR 2
31053: PPUSH
31054: LD_INT 2
31056: PPUSH
31057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31061: LD_INT 30
31063: PPUSH
31064: LD_OWVAR 2
31068: PPUSH
31069: LD_INT 2
31071: PPUSH
31072: CALL_OW 322
// end ;
31076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31077: LD_EXP 63
31081: PUSH
31082: LD_EXP 115
31086: AND
31087: IFFALSE 31208
31089: GO 31091
31091: DISABLE
31092: LD_INT 0
31094: PPUSH
31095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_INT 22
31103: PUSH
31104: LD_OWVAR 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 21
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 23
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: ST_TO_ADDR
// if not tmp then
31150: LD_VAR 0 2
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31208
// for i in tmp do
31159: LD_ADDR_VAR 0 1
31163: PUSH
31164: LD_VAR 0 2
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31206
// begin if Crawls ( i ) then
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 318
31181: IFFALSE 31192
// ComWalk ( i ) ;
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 138
// SetClass ( i , 2 ) ;
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_INT 2
31199: PPUSH
31200: CALL_OW 336
// end ;
31204: GO 31169
31206: POP
31207: POP
// end ;
31208: PPOPN 2
31210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31211: LD_EXP 63
31215: PUSH
31216: LD_EXP 116
31220: AND
31221: IFFALSE 31509
31223: GO 31225
31225: DISABLE
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
31230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31231: LD_OWVAR 2
31235: PPUSH
31236: LD_INT 9
31238: PPUSH
31239: LD_INT 1
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31249: LD_INT 9
31251: PPUSH
31252: LD_OWVAR 2
31256: PPUSH
31257: CALL_OW 343
// uc_side := 9 ;
31261: LD_ADDR_OWVAR 20
31265: PUSH
31266: LD_INT 9
31268: ST_TO_ADDR
// uc_nation := 2 ;
31269: LD_ADDR_OWVAR 21
31273: PUSH
31274: LD_INT 2
31276: ST_TO_ADDR
// hc_name := Dark Warrior ;
31277: LD_ADDR_OWVAR 26
31281: PUSH
31282: LD_STRING Dark Warrior
31284: ST_TO_ADDR
// hc_gallery :=  ;
31285: LD_ADDR_OWVAR 33
31289: PUSH
31290: LD_STRING 
31292: ST_TO_ADDR
// hc_noskilllimit := true ;
31293: LD_ADDR_OWVAR 76
31297: PUSH
31298: LD_INT 1
31300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31301: LD_ADDR_OWVAR 31
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 30
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// un := CreateHuman ;
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: CALL_OW 44
31333: ST_TO_ADDR
// hc_noskilllimit := false ;
31334: LD_ADDR_OWVAR 76
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31342: LD_VAR 0 3
31346: PPUSH
31347: LD_INT 1
31349: PPUSH
31350: CALL_OW 51
// ToLua ( playRanger() ) ;
31354: LD_STRING playRanger()
31356: PPUSH
31357: CALL_OW 559
// p := 0 ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31369: LD_INT 35
31371: PPUSH
31372: CALL_OW 67
// p := p + 1 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_INT 1
31388: PLUS
31389: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31390: LD_VAR 0 3
31394: PPUSH
31395: CALL_OW 256
31399: PUSH
31400: LD_INT 1000
31402: LESS
31403: IFFALSE 31417
// SetLives ( un , 1000 ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_INT 1000
31412: PPUSH
31413: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31417: LD_VAR 0 3
31421: PPUSH
31422: LD_INT 81
31424: PUSH
31425: LD_OWVAR 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 91
31436: PUSH
31437: LD_VAR 0 3
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: PPUSH
31459: LD_VAR 0 3
31463: PPUSH
31464: CALL_OW 74
31468: PPUSH
31469: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 80
31480: GREATER
31481: PUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: CALL_OW 301
31491: OR
31492: IFFALSE 31369
// if un then
31494: LD_VAR 0 3
31498: IFFALSE 31509
// RemoveUnit ( un ) ;
31500: LD_VAR 0 3
31504: PPUSH
31505: CALL_OW 64
// end ;
31509: PPOPN 3
31511: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31512: LD_EXP 117
31516: IFFALSE 31632
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_INT 81
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 69
31561: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31562: LD_STRING playComputer()
31564: PPUSH
31565: CALL_OW 559
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31632
// for i in tmp do
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31630
// for j := 1 to 4 do
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: DOUBLE
31597: LD_INT 1
31599: DEC
31600: ST_TO_ADDR
31601: LD_INT 4
31603: PUSH
31604: FOR_TO
31605: IFFALSE 31626
// SetSkill ( i , j , 10 ) ;
31607: LD_VAR 0 1
31611: PPUSH
31612: LD_VAR 0 3
31616: PPUSH
31617: LD_INT 10
31619: PPUSH
31620: CALL_OW 237
31624: GO 31604
31626: POP
31627: POP
31628: GO 31588
31630: POP
31631: POP
// end ;
31632: PPOPN 3
31634: END
// every 0 0$1 trigger s30 do var i , tmp ;
31635: LD_EXP 118
31639: IFFALSE 31708
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31648: LD_ADDR_VAR 0 2
31652: PUSH
31653: LD_INT 22
31655: PUSH
31656: LD_OWVAR 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: ST_TO_ADDR
// if not tmp then
31670: LD_VAR 0 2
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 31708
// for i in tmp do
31679: LD_ADDR_VAR 0 1
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: FOR_IN
31690: IFFALSE 31706
// SetLives ( i , 300 ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: LD_INT 300
31699: PPUSH
31700: CALL_OW 234
31704: GO 31689
31706: POP
31707: POP
// end ;
31708: PPOPN 2
31710: END
// every 0 0$1 trigger s60 do var i , tmp ;
31711: LD_EXP 119
31715: IFFALSE 31784
31717: GO 31719
31719: DISABLE
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31724: LD_ADDR_VAR 0 2
31728: PUSH
31729: LD_INT 22
31731: PUSH
31732: LD_OWVAR 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PPUSH
31741: CALL_OW 69
31745: ST_TO_ADDR
// if not tmp then
31746: LD_VAR 0 2
31750: NOT
31751: IFFALSE 31755
// exit ;
31753: GO 31784
// for i in tmp do
31755: LD_ADDR_VAR 0 1
31759: PUSH
31760: LD_VAR 0 2
31764: PUSH
31765: FOR_IN
31766: IFFALSE 31782
// SetLives ( i , 600 ) ;
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 600
31775: PPUSH
31776: CALL_OW 234
31780: GO 31765
31782: POP
31783: POP
// end ;
31784: PPOPN 2
31786: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31787: LD_INT 0
31789: PPUSH
// case cmd of 301 :
31790: LD_VAR 0 1
31794: PUSH
31795: LD_INT 301
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31835
31803: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31804: LD_VAR 0 6
31808: PPUSH
31809: LD_VAR 0 7
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: LD_VAR 0 4
31823: PPUSH
31824: LD_VAR 0 5
31828: PPUSH
31829: CALL 33044 0 5
31833: GO 31956
31835: LD_INT 302
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31880
31843: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31844: LD_VAR 0 6
31848: PPUSH
31849: LD_VAR 0 7
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: LD_VAR 0 9
31863: PPUSH
31864: LD_VAR 0 4
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL 33135 0 6
31878: GO 31956
31880: LD_INT 303
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31925
31888: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: LD_VAR 0 8
31903: PPUSH
31904: LD_VAR 0 9
31908: PPUSH
31909: LD_VAR 0 4
31913: PPUSH
31914: LD_VAR 0 5
31918: PPUSH
31919: CALL 31961 0 6
31923: GO 31956
31925: LD_INT 304
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31955
31933: POP
// hHackTeleport ( unit , x , y ) ; end ;
31934: LD_VAR 0 2
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: CALL 33728 0 3
31953: GO 31956
31955: POP
// end ;
31956: LD_VAR 0 12
31960: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31961: LD_INT 0
31963: PPUSH
31964: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31965: LD_VAR 0 1
31969: PUSH
31970: LD_INT 1
31972: LESS
31973: PUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 3
31981: GREATER
31982: OR
31983: PUSH
31984: LD_VAR 0 5
31988: PPUSH
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 428
31998: OR
31999: IFFALSE 32003
// exit ;
32001: GO 32731
// uc_side := your_side ;
32003: LD_ADDR_OWVAR 20
32007: PUSH
32008: LD_OWVAR 2
32012: ST_TO_ADDR
// uc_nation := nation ;
32013: LD_ADDR_OWVAR 21
32017: PUSH
32018: LD_VAR 0 1
32022: ST_TO_ADDR
// bc_level = 1 ;
32023: LD_ADDR_OWVAR 43
32027: PUSH
32028: LD_INT 1
32030: ST_TO_ADDR
// case btype of 1 :
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 1
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32055
32044: POP
// bc_type := b_depot ; 2 :
32045: LD_ADDR_OWVAR 42
32049: PUSH
32050: LD_INT 0
32052: ST_TO_ADDR
32053: GO 32675
32055: LD_INT 2
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32074
32063: POP
// bc_type := b_warehouse ; 3 :
32064: LD_ADDR_OWVAR 42
32068: PUSH
32069: LD_INT 1
32071: ST_TO_ADDR
32072: GO 32675
32074: LD_INT 3
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32093
32082: POP
// bc_type := b_lab ; 4 .. 9 :
32083: LD_ADDR_OWVAR 42
32087: PUSH
32088: LD_INT 6
32090: ST_TO_ADDR
32091: GO 32675
32093: LD_INT 4
32095: DOUBLE
32096: GREATEREQUAL
32097: IFFALSE 32105
32099: LD_INT 9
32101: DOUBLE
32102: LESSEQUAL
32103: IFTRUE 32107
32105: GO 32167
32107: POP
// begin bc_type := b_lab_half ;
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 7
32115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32116: LD_ADDR_OWVAR 44
32120: PUSH
32121: LD_INT 10
32123: PUSH
32124: LD_INT 11
32126: PUSH
32127: LD_INT 12
32129: PUSH
32130: LD_INT 15
32132: PUSH
32133: LD_INT 14
32135: PUSH
32136: LD_INT 13
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: LD_VAR 0 2
32151: PUSH
32152: LD_INT 3
32154: MINUS
32155: ARRAY
32156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32157: LD_ADDR_OWVAR 45
32161: PUSH
32162: LD_INT 9
32164: ST_TO_ADDR
// end ; 10 .. 13 :
32165: GO 32675
32167: LD_INT 10
32169: DOUBLE
32170: GREATEREQUAL
32171: IFFALSE 32179
32173: LD_INT 13
32175: DOUBLE
32176: LESSEQUAL
32177: IFTRUE 32181
32179: GO 32258
32181: POP
// begin bc_type := b_lab_full ;
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 8
32189: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32190: LD_ADDR_OWVAR 44
32194: PUSH
32195: LD_INT 10
32197: PUSH
32198: LD_INT 12
32200: PUSH
32201: LD_INT 14
32203: PUSH
32204: LD_INT 13
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: PUSH
32213: LD_VAR 0 2
32217: PUSH
32218: LD_INT 9
32220: MINUS
32221: ARRAY
32222: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32223: LD_ADDR_OWVAR 45
32227: PUSH
32228: LD_INT 11
32230: PUSH
32231: LD_INT 15
32233: PUSH
32234: LD_INT 12
32236: PUSH
32237: LD_INT 15
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: PUSH
32246: LD_VAR 0 2
32250: PUSH
32251: LD_INT 9
32253: MINUS
32254: ARRAY
32255: ST_TO_ADDR
// end ; 14 :
32256: GO 32675
32258: LD_INT 14
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_workshop ; 15 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 2
32274: ST_TO_ADDR
32275: GO 32675
32277: LD_INT 15
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_factory ; 16 :
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 3
32293: ST_TO_ADDR
32294: GO 32675
32296: LD_INT 16
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32315
32304: POP
// bc_type := b_ext_gun ; 17 :
32305: LD_ADDR_OWVAR 42
32309: PUSH
32310: LD_INT 17
32312: ST_TO_ADDR
32313: GO 32675
32315: LD_INT 17
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32351
32323: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32324: LD_ADDR_OWVAR 42
32328: PUSH
32329: LD_INT 19
32331: PUSH
32332: LD_INT 23
32334: PUSH
32335: LD_INT 19
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: PUSH
32343: LD_VAR 0 1
32347: ARRAY
32348: ST_TO_ADDR
32349: GO 32675
32351: LD_INT 18
32353: DOUBLE
32354: EQUAL
32355: IFTRUE 32359
32357: GO 32370
32359: POP
// bc_type := b_ext_radar ; 19 :
32360: LD_ADDR_OWVAR 42
32364: PUSH
32365: LD_INT 20
32367: ST_TO_ADDR
32368: GO 32675
32370: LD_INT 19
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32378
32376: GO 32389
32378: POP
// bc_type := b_ext_radio ; 20 :
32379: LD_ADDR_OWVAR 42
32383: PUSH
32384: LD_INT 22
32386: ST_TO_ADDR
32387: GO 32675
32389: LD_INT 20
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32408
32397: POP
// bc_type := b_ext_siberium ; 21 :
32398: LD_ADDR_OWVAR 42
32402: PUSH
32403: LD_INT 21
32405: ST_TO_ADDR
32406: GO 32675
32408: LD_INT 21
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32427
32416: POP
// bc_type := b_ext_computer ; 22 :
32417: LD_ADDR_OWVAR 42
32421: PUSH
32422: LD_INT 24
32424: ST_TO_ADDR
32425: GO 32675
32427: LD_INT 22
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32446
32435: POP
// bc_type := b_ext_track ; 23 :
32436: LD_ADDR_OWVAR 42
32440: PUSH
32441: LD_INT 16
32443: ST_TO_ADDR
32444: GO 32675
32446: LD_INT 23
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32465
32454: POP
// bc_type := b_ext_laser ; 24 :
32455: LD_ADDR_OWVAR 42
32459: PUSH
32460: LD_INT 25
32462: ST_TO_ADDR
32463: GO 32675
32465: LD_INT 24
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32484
32473: POP
// bc_type := b_control_tower ; 25 :
32474: LD_ADDR_OWVAR 42
32478: PUSH
32479: LD_INT 36
32481: ST_TO_ADDR
32482: GO 32675
32484: LD_INT 25
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// bc_type := b_breastwork ; 26 :
32493: LD_ADDR_OWVAR 42
32497: PUSH
32498: LD_INT 31
32500: ST_TO_ADDR
32501: GO 32675
32503: LD_INT 26
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// bc_type := b_bunker ; 27 :
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 32
32519: ST_TO_ADDR
32520: GO 32675
32522: LD_INT 27
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32541
32530: POP
// bc_type := b_turret ; 28 :
32531: LD_ADDR_OWVAR 42
32535: PUSH
32536: LD_INT 33
32538: ST_TO_ADDR
32539: GO 32675
32541: LD_INT 28
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32560
32549: POP
// bc_type := b_armoury ; 29 :
32550: LD_ADDR_OWVAR 42
32554: PUSH
32555: LD_INT 4
32557: ST_TO_ADDR
32558: GO 32675
32560: LD_INT 29
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32579
32568: POP
// bc_type := b_barracks ; 30 :
32569: LD_ADDR_OWVAR 42
32573: PUSH
32574: LD_INT 5
32576: ST_TO_ADDR
32577: GO 32675
32579: LD_INT 30
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32598
32587: POP
// bc_type := b_solar_power ; 31 :
32588: LD_ADDR_OWVAR 42
32592: PUSH
32593: LD_INT 27
32595: ST_TO_ADDR
32596: GO 32675
32598: LD_INT 31
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32617
32606: POP
// bc_type := b_oil_power ; 32 :
32607: LD_ADDR_OWVAR 42
32611: PUSH
32612: LD_INT 26
32614: ST_TO_ADDR
32615: GO 32675
32617: LD_INT 32
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32636
32625: POP
// bc_type := b_siberite_power ; 33 :
32626: LD_ADDR_OWVAR 42
32630: PUSH
32631: LD_INT 28
32633: ST_TO_ADDR
32634: GO 32675
32636: LD_INT 33
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32655
32644: POP
// bc_type := b_oil_mine ; 34 :
32645: LD_ADDR_OWVAR 42
32649: PUSH
32650: LD_INT 29
32652: ST_TO_ADDR
32653: GO 32675
32655: LD_INT 34
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32674
32663: POP
// bc_type := b_siberite_mine ; end ;
32664: LD_ADDR_OWVAR 42
32668: PUSH
32669: LD_INT 30
32671: ST_TO_ADDR
32672: GO 32675
32674: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32675: LD_ADDR_VAR 0 8
32679: PUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: LD_VAR 0 6
32689: PPUSH
32690: LD_VAR 0 3
32694: PPUSH
32695: CALL_OW 47
32699: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32700: LD_OWVAR 42
32704: PUSH
32705: LD_INT 32
32707: PUSH
32708: LD_INT 33
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: IN
32715: IFFALSE 32731
// PlaceWeaponTurret ( b , weapon ) ;
32717: LD_VAR 0 8
32721: PPUSH
32722: LD_VAR 0 4
32726: PPUSH
32727: CALL_OW 431
// end ;
32731: LD_VAR 0 7
32735: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32742: LD_ADDR_VAR 0 4
32746: PUSH
32747: LD_INT 22
32749: PUSH
32750: LD_OWVAR 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 30
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 30
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PPUSH
32791: CALL_OW 69
32795: ST_TO_ADDR
// if not tmp then
32796: LD_VAR 0 4
32800: NOT
32801: IFFALSE 32805
// exit ;
32803: GO 32864
// for i in tmp do
32805: LD_ADDR_VAR 0 2
32809: PUSH
32810: LD_VAR 0 4
32814: PUSH
32815: FOR_IN
32816: IFFALSE 32862
// for j = 1 to 3 do
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: DOUBLE
32824: LD_INT 1
32826: DEC
32827: ST_TO_ADDR
32828: LD_INT 3
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32858
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32834: LD_VAR 0 2
32838: PPUSH
32839: CALL_OW 274
32843: PPUSH
32844: LD_VAR 0 3
32848: PPUSH
32849: LD_INT 99999
32851: PPUSH
32852: CALL_OW 277
32856: GO 32831
32858: POP
32859: POP
32860: GO 32815
32862: POP
32863: POP
// end ;
32864: LD_VAR 0 1
32868: RET
// export function hHackSetLevel10 ; var i , j ; begin
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
32873: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32874: LD_ADDR_VAR 0 2
32878: PUSH
32879: LD_INT 21
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PPUSH
32889: CALL_OW 69
32893: PUSH
32894: FOR_IN
32895: IFFALSE 32947
// if IsSelected ( i ) then
32897: LD_VAR 0 2
32901: PPUSH
32902: CALL_OW 306
32906: IFFALSE 32945
// begin for j := 1 to 4 do
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: DOUBLE
32914: LD_INT 1
32916: DEC
32917: ST_TO_ADDR
32918: LD_INT 4
32920: PUSH
32921: FOR_TO
32922: IFFALSE 32943
// SetSkill ( i , j , 10 ) ;
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_VAR 0 3
32933: PPUSH
32934: LD_INT 10
32936: PPUSH
32937: CALL_OW 237
32941: GO 32921
32943: POP
32944: POP
// end ;
32945: GO 32894
32947: POP
32948: POP
// end ;
32949: LD_VAR 0 1
32953: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
32958: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32959: LD_ADDR_VAR 0 2
32963: PUSH
32964: LD_INT 22
32966: PUSH
32967: LD_OWVAR 2
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 69
32994: PUSH
32995: FOR_IN
32996: IFFALSE 33037
// begin for j := 1 to 4 do
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: DOUBLE
33004: LD_INT 1
33006: DEC
33007: ST_TO_ADDR
33008: LD_INT 4
33010: PUSH
33011: FOR_TO
33012: IFFALSE 33033
// SetSkill ( i , j , 10 ) ;
33014: LD_VAR 0 2
33018: PPUSH
33019: LD_VAR 0 3
33023: PPUSH
33024: LD_INT 10
33026: PPUSH
33027: CALL_OW 237
33031: GO 33011
33033: POP
33034: POP
// end ;
33035: GO 32995
33037: POP
33038: POP
// end ;
33039: LD_VAR 0 1
33043: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33044: LD_INT 0
33046: PPUSH
// uc_side := your_side ;
33047: LD_ADDR_OWVAR 20
33051: PUSH
33052: LD_OWVAR 2
33056: ST_TO_ADDR
// uc_nation := nation ;
33057: LD_ADDR_OWVAR 21
33061: PUSH
33062: LD_VAR 0 1
33066: ST_TO_ADDR
// InitHc ;
33067: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33071: LD_INT 0
33073: PPUSH
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33088: LD_VAR 0 4
33092: PPUSH
33093: LD_VAR 0 5
33097: PPUSH
33098: CALL_OW 428
33102: PUSH
33103: LD_INT 0
33105: EQUAL
33106: IFFALSE 33130
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33108: CALL_OW 44
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: LD_INT 1
33125: PPUSH
33126: CALL_OW 48
// end ;
33130: LD_VAR 0 6
33134: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
// uc_side := your_side ;
33139: LD_ADDR_OWVAR 20
33143: PUSH
33144: LD_OWVAR 2
33148: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33149: LD_VAR 0 1
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: LD_INT 5
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: IN
33176: IFFALSE 33188
// uc_nation := nation_american else
33178: LD_ADDR_OWVAR 21
33182: PUSH
33183: LD_INT 1
33185: ST_TO_ADDR
33186: GO 33231
// if chassis in [ 11 , 12 , 13 , 14 ] then
33188: LD_VAR 0 1
33192: PUSH
33193: LD_INT 11
33195: PUSH
33196: LD_INT 12
33198: PUSH
33199: LD_INT 13
33201: PUSH
33202: LD_INT 14
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: IN
33211: IFFALSE 33223
// uc_nation := nation_arabian else
33213: LD_ADDR_OWVAR 21
33217: PUSH
33218: LD_INT 2
33220: ST_TO_ADDR
33221: GO 33231
// uc_nation := nation_russian ;
33223: LD_ADDR_OWVAR 21
33227: PUSH
33228: LD_INT 3
33230: ST_TO_ADDR
// vc_chassis := chassis ;
33231: LD_ADDR_OWVAR 37
33235: PUSH
33236: LD_VAR 0 1
33240: ST_TO_ADDR
// vc_engine := engine ;
33241: LD_ADDR_OWVAR 39
33245: PUSH
33246: LD_VAR 0 2
33250: ST_TO_ADDR
// vc_control := control ;
33251: LD_ADDR_OWVAR 38
33255: PUSH
33256: LD_VAR 0 3
33260: ST_TO_ADDR
// vc_weapon := weapon ;
33261: LD_ADDR_OWVAR 40
33265: PUSH
33266: LD_VAR 0 4
33270: ST_TO_ADDR
// un := CreateVehicle ;
33271: LD_ADDR_VAR 0 8
33275: PUSH
33276: CALL_OW 45
33280: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: LD_INT 5
33291: PPUSH
33292: CALL_OW 12
33296: PPUSH
33297: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33301: LD_VAR 0 8
33305: PPUSH
33306: LD_VAR 0 5
33310: PPUSH
33311: LD_VAR 0 6
33315: PPUSH
33316: LD_INT 1
33318: PPUSH
33319: CALL_OW 48
// end ;
33323: LD_VAR 0 7
33327: RET
// export hInvincible ; every 1 do
33328: GO 33330
33330: DISABLE
// hInvincible := [ ] ;
33331: LD_ADDR_EXP 120
33335: PUSH
33336: EMPTY
33337: ST_TO_ADDR
33338: END
// every 10 do var i ;
33339: GO 33341
33341: DISABLE
33342: LD_INT 0
33344: PPUSH
// begin enable ;
33345: ENABLE
// if not hInvincible then
33346: LD_EXP 120
33350: NOT
33351: IFFALSE 33355
// exit ;
33353: GO 33399
// for i in hInvincible do
33355: LD_ADDR_VAR 0 1
33359: PUSH
33360: LD_EXP 120
33364: PUSH
33365: FOR_IN
33366: IFFALSE 33397
// if GetLives ( i ) < 1000 then
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 256
33377: PUSH
33378: LD_INT 1000
33380: LESS
33381: IFFALSE 33395
// SetLives ( i , 1000 ) ;
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_INT 1000
33390: PPUSH
33391: CALL_OW 234
33395: GO 33365
33397: POP
33398: POP
// end ;
33399: PPOPN 1
33401: END
// export function hHackInvincible ; var i ; begin
33402: LD_INT 0
33404: PPUSH
33405: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33406: LD_ADDR_VAR 0 2
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 21
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 21
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: PUSH
33444: FOR_IN
33445: IFFALSE 33506
// if IsSelected ( i ) then
33447: LD_VAR 0 2
33451: PPUSH
33452: CALL_OW 306
33456: IFFALSE 33504
// begin if i in hInvincible then
33458: LD_VAR 0 2
33462: PUSH
33463: LD_EXP 120
33467: IN
33468: IFFALSE 33488
// hInvincible := hInvincible diff i else
33470: LD_ADDR_EXP 120
33474: PUSH
33475: LD_EXP 120
33479: PUSH
33480: LD_VAR 0 2
33484: DIFF
33485: ST_TO_ADDR
33486: GO 33504
// hInvincible := hInvincible union i ;
33488: LD_ADDR_EXP 120
33492: PUSH
33493: LD_EXP 120
33497: PUSH
33498: LD_VAR 0 2
33502: UNION
33503: ST_TO_ADDR
// end ;
33504: GO 33444
33506: POP
33507: POP
// end ;
33508: LD_VAR 0 1
33512: RET
// export function hHackInvisible ; var i , j ; begin
33513: LD_INT 0
33515: PPUSH
33516: PPUSH
33517: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33518: LD_ADDR_VAR 0 2
33522: PUSH
33523: LD_INT 21
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PPUSH
33533: CALL_OW 69
33537: PUSH
33538: FOR_IN
33539: IFFALSE 33563
// if IsSelected ( i ) then
33541: LD_VAR 0 2
33545: PPUSH
33546: CALL_OW 306
33550: IFFALSE 33561
// ComForceInvisible ( i ) ;
33552: LD_VAR 0 2
33556: PPUSH
33557: CALL_OW 496
33561: GO 33538
33563: POP
33564: POP
// end ;
33565: LD_VAR 0 1
33569: RET
// export function hHackChangeYourSide ; begin
33570: LD_INT 0
33572: PPUSH
// if your_side = 8 then
33573: LD_OWVAR 2
33577: PUSH
33578: LD_INT 8
33580: EQUAL
33581: IFFALSE 33593
// your_side := 0 else
33583: LD_ADDR_OWVAR 2
33587: PUSH
33588: LD_INT 0
33590: ST_TO_ADDR
33591: GO 33607
// your_side := your_side + 1 ;
33593: LD_ADDR_OWVAR 2
33597: PUSH
33598: LD_OWVAR 2
33602: PUSH
33603: LD_INT 1
33605: PLUS
33606: ST_TO_ADDR
// end ;
33607: LD_VAR 0 1
33611: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33612: LD_INT 0
33614: PPUSH
33615: PPUSH
33616: PPUSH
// for i in all_units do
33617: LD_ADDR_VAR 0 2
33621: PUSH
33622: LD_OWVAR 3
33626: PUSH
33627: FOR_IN
33628: IFFALSE 33706
// if IsSelected ( i ) then
33630: LD_VAR 0 2
33634: PPUSH
33635: CALL_OW 306
33639: IFFALSE 33704
// begin j := GetSide ( i ) ;
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_VAR 0 2
33650: PPUSH
33651: CALL_OW 255
33655: ST_TO_ADDR
// if j = 8 then
33656: LD_VAR 0 3
33660: PUSH
33661: LD_INT 8
33663: EQUAL
33664: IFFALSE 33676
// j := 0 else
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 0
33673: ST_TO_ADDR
33674: GO 33690
// j := j + 1 ;
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_INT 1
33688: PLUS
33689: ST_TO_ADDR
// SetSide ( i , j ) ;
33690: LD_VAR 0 2
33694: PPUSH
33695: LD_VAR 0 3
33699: PPUSH
33700: CALL_OW 235
// end ;
33704: GO 33627
33706: POP
33707: POP
// end ;
33708: LD_VAR 0 1
33712: RET
// export function hHackFog ; begin
33713: LD_INT 0
33715: PPUSH
// FogOff ( true ) ;
33716: LD_INT 1
33718: PPUSH
33719: CALL_OW 344
// end ;
33723: LD_VAR 0 1
33727: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33728: LD_INT 0
33730: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 3
33745: PPUSH
33746: LD_INT 1
33748: PPUSH
33749: LD_INT 1
33751: PPUSH
33752: CALL_OW 483
// CenterOnXY ( x , y ) ;
33756: LD_VAR 0 2
33760: PPUSH
33761: LD_VAR 0 3
33765: PPUSH
33766: CALL_OW 84
// end ;
33770: LD_VAR 0 4
33774: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33775: LD_INT 0
33777: PPUSH
33778: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33779: LD_VAR 0 1
33783: NOT
33784: PUSH
33785: LD_VAR 0 2
33789: PPUSH
33790: LD_VAR 0 3
33794: PPUSH
33795: CALL_OW 488
33799: NOT
33800: OR
33801: PUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: CALL_OW 266
33811: PUSH
33812: LD_INT 3
33814: NONEQUAL
33815: PUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 247
33825: PUSH
33826: LD_INT 1
33828: EQUAL
33829: NOT
33830: AND
33831: OR
33832: IFFALSE 33836
// exit ;
33834: GO 33985
// if GetType ( factory ) = unit_human then
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 247
33845: PUSH
33846: LD_INT 1
33848: EQUAL
33849: IFFALSE 33866
// factory := IsInUnit ( factory ) ;
33851: LD_ADDR_VAR 0 1
33855: PUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL_OW 310
33865: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33866: LD_VAR 0 1
33870: PPUSH
33871: CALL_OW 266
33875: PUSH
33876: LD_INT 3
33878: NONEQUAL
33879: IFFALSE 33883
// exit ;
33881: GO 33985
// if HexInfo ( x , y ) = factory then
33883: LD_VAR 0 2
33887: PPUSH
33888: LD_VAR 0 3
33892: PPUSH
33893: CALL_OW 428
33897: PUSH
33898: LD_VAR 0 1
33902: EQUAL
33903: IFFALSE 33930
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33905: LD_ADDR_EXP 121
33909: PUSH
33910: LD_EXP 121
33914: PPUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: LD_INT 0
33922: PPUSH
33923: CALL_OW 1
33927: ST_TO_ADDR
33928: GO 33981
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33930: LD_ADDR_EXP 121
33934: PUSH
33935: LD_EXP 121
33939: PPUSH
33940: LD_VAR 0 1
33944: PPUSH
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 255
33954: PUSH
33955: LD_VAR 0 1
33959: PUSH
33960: LD_VAR 0 2
33964: PUSH
33965: LD_VAR 0 3
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: PPUSH
33976: CALL_OW 1
33980: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33981: CALL 33990 0 0
// end ;
33985: LD_VAR 0 4
33989: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33990: LD_INT 0
33992: PPUSH
33993: PPUSH
33994: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33995: LD_STRING resetFactoryWaypoint();
33997: PPUSH
33998: CALL_OW 559
// if factoryWaypoints then
34002: LD_EXP 121
34006: IFFALSE 34132
// begin list := PrepareArray ( factoryWaypoints ) ;
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_EXP 121
34017: PPUSH
34018: CALL 81429 0 1
34022: ST_TO_ADDR
// for i := 1 to list do
34023: LD_ADDR_VAR 0 2
34027: PUSH
34028: DOUBLE
34029: LD_INT 1
34031: DEC
34032: ST_TO_ADDR
34033: LD_VAR 0 3
34037: PUSH
34038: FOR_TO
34039: IFFALSE 34130
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34041: LD_STRING setFactoryWaypointXY(
34043: PUSH
34044: LD_VAR 0 3
34048: PUSH
34049: LD_VAR 0 2
34053: ARRAY
34054: PUSH
34055: LD_INT 1
34057: ARRAY
34058: STR
34059: PUSH
34060: LD_STRING ,
34062: STR
34063: PUSH
34064: LD_VAR 0 3
34068: PUSH
34069: LD_VAR 0 2
34073: ARRAY
34074: PUSH
34075: LD_INT 2
34077: ARRAY
34078: STR
34079: PUSH
34080: LD_STRING ,
34082: STR
34083: PUSH
34084: LD_VAR 0 3
34088: PUSH
34089: LD_VAR 0 2
34093: ARRAY
34094: PUSH
34095: LD_INT 3
34097: ARRAY
34098: STR
34099: PUSH
34100: LD_STRING ,
34102: STR
34103: PUSH
34104: LD_VAR 0 3
34108: PUSH
34109: LD_VAR 0 2
34113: ARRAY
34114: PUSH
34115: LD_INT 4
34117: ARRAY
34118: STR
34119: PUSH
34120: LD_STRING )
34122: STR
34123: PPUSH
34124: CALL_OW 559
34128: GO 34038
34130: POP
34131: POP
// end ; end ;
34132: LD_VAR 0 1
34136: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34137: LD_INT 0
34139: PPUSH
// if HexInfo ( x , y ) = warehouse then
34140: LD_VAR 0 2
34144: PPUSH
34145: LD_VAR 0 3
34149: PPUSH
34150: CALL_OW 428
34154: PUSH
34155: LD_VAR 0 1
34159: EQUAL
34160: IFFALSE 34187
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34162: LD_ADDR_EXP 122
34166: PUSH
34167: LD_EXP 122
34171: PPUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: LD_INT 0
34179: PPUSH
34180: CALL_OW 1
34184: ST_TO_ADDR
34185: GO 34238
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34187: LD_ADDR_EXP 122
34191: PUSH
34192: LD_EXP 122
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL_OW 255
34211: PUSH
34212: LD_VAR 0 1
34216: PUSH
34217: LD_VAR 0 2
34221: PUSH
34222: LD_VAR 0 3
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 1
34237: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34238: CALL 34247 0 0
// end ;
34242: LD_VAR 0 4
34246: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34247: LD_INT 0
34249: PPUSH
34250: PPUSH
34251: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34252: LD_STRING resetWarehouseGatheringPoints();
34254: PPUSH
34255: CALL_OW 559
// if warehouseGatheringPoints then
34259: LD_EXP 122
34263: IFFALSE 34389
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34265: LD_ADDR_VAR 0 3
34269: PUSH
34270: LD_EXP 122
34274: PPUSH
34275: CALL 81429 0 1
34279: ST_TO_ADDR
// for i := 1 to list do
34280: LD_ADDR_VAR 0 2
34284: PUSH
34285: DOUBLE
34286: LD_INT 1
34288: DEC
34289: ST_TO_ADDR
34290: LD_VAR 0 3
34294: PUSH
34295: FOR_TO
34296: IFFALSE 34387
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34298: LD_STRING setWarehouseGatheringPointXY(
34300: PUSH
34301: LD_VAR 0 3
34305: PUSH
34306: LD_VAR 0 2
34310: ARRAY
34311: PUSH
34312: LD_INT 1
34314: ARRAY
34315: STR
34316: PUSH
34317: LD_STRING ,
34319: STR
34320: PUSH
34321: LD_VAR 0 3
34325: PUSH
34326: LD_VAR 0 2
34330: ARRAY
34331: PUSH
34332: LD_INT 2
34334: ARRAY
34335: STR
34336: PUSH
34337: LD_STRING ,
34339: STR
34340: PUSH
34341: LD_VAR 0 3
34345: PUSH
34346: LD_VAR 0 2
34350: ARRAY
34351: PUSH
34352: LD_INT 3
34354: ARRAY
34355: STR
34356: PUSH
34357: LD_STRING ,
34359: STR
34360: PUSH
34361: LD_VAR 0 3
34365: PUSH
34366: LD_VAR 0 2
34370: ARRAY
34371: PUSH
34372: LD_INT 4
34374: ARRAY
34375: STR
34376: PUSH
34377: LD_STRING )
34379: STR
34380: PPUSH
34381: CALL_OW 559
34385: GO 34295
34387: POP
34388: POP
// end ; end ;
34389: LD_VAR 0 1
34393: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34394: LD_EXP 122
34398: IFFALSE 35083
34400: GO 34402
34402: DISABLE
34403: LD_INT 0
34405: PPUSH
34406: PPUSH
34407: PPUSH
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
// begin enable ;
34414: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_EXP 122
34424: PPUSH
34425: CALL 81429 0 1
34429: ST_TO_ADDR
// if not list then
34430: LD_VAR 0 3
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 35083
// for i := 1 to list do
34439: LD_ADDR_VAR 0 1
34443: PUSH
34444: DOUBLE
34445: LD_INT 1
34447: DEC
34448: ST_TO_ADDR
34449: LD_VAR 0 3
34453: PUSH
34454: FOR_TO
34455: IFFALSE 35081
// begin depot := list [ i ] [ 2 ] ;
34457: LD_ADDR_VAR 0 8
34461: PUSH
34462: LD_VAR 0 3
34466: PUSH
34467: LD_VAR 0 1
34471: ARRAY
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_VAR 0 3
34486: PUSH
34487: LD_VAR 0 1
34491: ARRAY
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34497: LD_VAR 0 8
34501: PPUSH
34502: CALL_OW 301
34506: PUSH
34507: LD_VAR 0 5
34511: PUSH
34512: LD_VAR 0 8
34516: PPUSH
34517: CALL_OW 255
34521: NONEQUAL
34522: OR
34523: IFFALSE 34552
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34525: LD_ADDR_EXP 122
34529: PUSH
34530: LD_EXP 122
34534: PPUSH
34535: LD_VAR 0 8
34539: PPUSH
34540: LD_INT 0
34542: PPUSH
34543: CALL_OW 1
34547: ST_TO_ADDR
// exit ;
34548: POP
34549: POP
34550: GO 35083
// end ; x := list [ i ] [ 3 ] ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_VAR 0 3
34561: PUSH
34562: LD_VAR 0 1
34566: ARRAY
34567: PUSH
34568: LD_INT 3
34570: ARRAY
34571: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34572: LD_ADDR_VAR 0 7
34576: PUSH
34577: LD_VAR 0 3
34581: PUSH
34582: LD_VAR 0 1
34586: ARRAY
34587: PUSH
34588: LD_INT 4
34590: ARRAY
34591: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_VAR 0 6
34601: PPUSH
34602: LD_VAR 0 7
34606: PPUSH
34607: LD_INT 16
34609: PPUSH
34610: CALL 80017 0 3
34614: ST_TO_ADDR
// if not cratesNearbyPoint then
34615: LD_VAR 0 9
34619: NOT
34620: IFFALSE 34626
// exit ;
34622: POP
34623: POP
34624: GO 35083
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34626: LD_ADDR_VAR 0 4
34630: PUSH
34631: LD_INT 22
34633: PUSH
34634: LD_VAR 0 5
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 60
34648: PUSH
34649: EMPTY
34650: LIST
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 91
34658: PUSH
34659: LD_VAR 0 8
34663: PUSH
34664: LD_INT 6
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 25
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 25
34687: PUSH
34688: LD_INT 16
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: PPUSH
34706: CALL_OW 69
34710: PUSH
34711: LD_VAR 0 8
34715: PPUSH
34716: CALL_OW 313
34720: PPUSH
34721: LD_INT 3
34723: PUSH
34724: LD_INT 60
34726: PUSH
34727: EMPTY
34728: LIST
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 25
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 25
34749: PUSH
34750: LD_INT 16
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PPUSH
34766: CALL_OW 72
34770: UNION
34771: ST_TO_ADDR
// if tmp then
34772: LD_VAR 0 4
34776: IFFALSE 34856
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34778: LD_ADDR_VAR 0 4
34782: PUSH
34783: LD_VAR 0 4
34787: PPUSH
34788: LD_INT 3
34790: PPUSH
34791: CALL 77986 0 2
34795: ST_TO_ADDR
// for j in tmp do
34796: LD_ADDR_VAR 0 2
34800: PUSH
34801: LD_VAR 0 4
34805: PUSH
34806: FOR_IN
34807: IFFALSE 34850
// begin if IsInUnit ( j ) then
34809: LD_VAR 0 2
34813: PPUSH
34814: CALL_OW 310
34818: IFFALSE 34829
// ComExit ( j ) ;
34820: LD_VAR 0 2
34824: PPUSH
34825: CALL 78069 0 1
// AddComCollect ( j , x , y ) ;
34829: LD_VAR 0 2
34833: PPUSH
34834: LD_VAR 0 6
34838: PPUSH
34839: LD_VAR 0 7
34843: PPUSH
34844: CALL_OW 177
// end ;
34848: GO 34806
34850: POP
34851: POP
// exit ;
34852: POP
34853: POP
34854: GO 35083
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34856: LD_ADDR_VAR 0 4
34860: PUSH
34861: LD_INT 22
34863: PUSH
34864: LD_VAR 0 5
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 91
34875: PUSH
34876: LD_VAR 0 8
34880: PUSH
34881: LD_INT 8
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: LD_INT 34
34894: PUSH
34895: LD_INT 12
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 34
34904: PUSH
34905: LD_INT 51
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 34
34914: PUSH
34915: LD_INT 32
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 34
34924: PUSH
34925: LD_INT 89
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: PPUSH
34944: CALL_OW 69
34948: ST_TO_ADDR
// if tmp then
34949: LD_VAR 0 4
34953: IFFALSE 35079
// begin for j in tmp do
34955: LD_ADDR_VAR 0 2
34959: PUSH
34960: LD_VAR 0 4
34964: PUSH
34965: FOR_IN
34966: IFFALSE 35077
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34968: LD_VAR 0 2
34972: PPUSH
34973: CALL_OW 262
34977: PUSH
34978: LD_INT 3
34980: EQUAL
34981: PUSH
34982: LD_VAR 0 2
34986: PPUSH
34987: CALL_OW 261
34991: PUSH
34992: LD_INT 20
34994: GREATER
34995: OR
34996: PUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: CALL_OW 314
35006: NOT
35007: AND
35008: PUSH
35009: LD_VAR 0 2
35013: PPUSH
35014: CALL_OW 263
35018: PUSH
35019: LD_INT 1
35021: NONEQUAL
35022: PUSH
35023: LD_VAR 0 2
35027: PPUSH
35028: CALL_OW 311
35032: OR
35033: AND
35034: IFFALSE 35075
// begin ComCollect ( j , x , y ) ;
35036: LD_VAR 0 2
35040: PPUSH
35041: LD_VAR 0 6
35045: PPUSH
35046: LD_VAR 0 7
35050: PPUSH
35051: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35055: LD_VAR 0 2
35059: PPUSH
35060: LD_VAR 0 8
35064: PPUSH
35065: CALL_OW 172
// exit ;
35069: POP
35070: POP
35071: POP
35072: POP
35073: GO 35083
// end ;
35075: GO 34965
35077: POP
35078: POP
// end ; end ;
35079: GO 34454
35081: POP
35082: POP
// end ; end_of_file
35083: PPOPN 9
35085: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35092: LD_VAR 0 1
35096: PPUSH
35097: CALL_OW 264
35101: PUSH
35102: LD_INT 91
35104: EQUAL
35105: IFFALSE 35177
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35107: LD_INT 68
35109: PPUSH
35110: LD_VAR 0 1
35114: PPUSH
35115: CALL_OW 255
35119: PPUSH
35120: CALL_OW 321
35124: PUSH
35125: LD_INT 2
35127: EQUAL
35128: IFFALSE 35140
// eff := 70 else
35130: LD_ADDR_VAR 0 4
35134: PUSH
35135: LD_INT 70
35137: ST_TO_ADDR
35138: GO 35148
// eff := 30 ;
35140: LD_ADDR_VAR 0 4
35144: PUSH
35145: LD_INT 30
35147: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 250
35157: PPUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 251
35167: PPUSH
35168: LD_VAR 0 4
35172: PPUSH
35173: CALL_OW 495
// end ; end ;
35177: LD_VAR 0 2
35181: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35182: LD_INT 0
35184: PPUSH
// end ;
35185: LD_VAR 0 4
35189: RET
// export function SOS_Command ( cmd ) ; begin
35190: LD_INT 0
35192: PPUSH
// end ;
35193: LD_VAR 0 2
35197: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35198: LD_INT 0
35200: PPUSH
// end ;
35201: LD_VAR 0 6
35205: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35206: LD_INT 0
35208: PPUSH
35209: PPUSH
// if not vehicle or not factory then
35210: LD_VAR 0 1
35214: NOT
35215: PUSH
35216: LD_VAR 0 2
35220: NOT
35221: OR
35222: IFFALSE 35226
// exit ;
35224: GO 35457
// if factoryWaypoints >= factory then
35226: LD_EXP 121
35230: PUSH
35231: LD_VAR 0 2
35235: GREATEREQUAL
35236: IFFALSE 35457
// if factoryWaypoints [ factory ] then
35238: LD_EXP 121
35242: PUSH
35243: LD_VAR 0 2
35247: ARRAY
35248: IFFALSE 35457
// begin if GetControl ( vehicle ) = control_manual then
35250: LD_VAR 0 1
35254: PPUSH
35255: CALL_OW 263
35259: PUSH
35260: LD_INT 1
35262: EQUAL
35263: IFFALSE 35344
// begin driver := IsDrivenBy ( vehicle ) ;
35265: LD_ADDR_VAR 0 4
35269: PUSH
35270: LD_VAR 0 1
35274: PPUSH
35275: CALL_OW 311
35279: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35280: LD_VAR 0 4
35284: PPUSH
35285: LD_EXP 121
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PUSH
35296: LD_INT 3
35298: ARRAY
35299: PPUSH
35300: LD_EXP 121
35304: PUSH
35305: LD_VAR 0 2
35309: ARRAY
35310: PUSH
35311: LD_INT 4
35313: ARRAY
35314: PPUSH
35315: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35319: LD_VAR 0 4
35323: PPUSH
35324: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35328: LD_VAR 0 4
35332: PPUSH
35333: LD_VAR 0 2
35337: PPUSH
35338: CALL_OW 180
// end else
35342: GO 35457
// if GetControl ( vehicle ) = control_remote then
35344: LD_VAR 0 1
35348: PPUSH
35349: CALL_OW 263
35353: PUSH
35354: LD_INT 2
35356: EQUAL
35357: IFFALSE 35418
// begin wait ( 0 0$2 ) ;
35359: LD_INT 70
35361: PPUSH
35362: CALL_OW 67
// if Connect ( vehicle ) then
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL 48288 0 1
35375: IFFALSE 35416
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35377: LD_VAR 0 1
35381: PPUSH
35382: LD_EXP 121
35386: PUSH
35387: LD_VAR 0 2
35391: ARRAY
35392: PUSH
35393: LD_INT 3
35395: ARRAY
35396: PPUSH
35397: LD_EXP 121
35401: PUSH
35402: LD_VAR 0 2
35406: ARRAY
35407: PUSH
35408: LD_INT 4
35410: ARRAY
35411: PPUSH
35412: CALL_OW 171
// end else
35416: GO 35457
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35418: LD_VAR 0 1
35422: PPUSH
35423: LD_EXP 121
35427: PUSH
35428: LD_VAR 0 2
35432: ARRAY
35433: PUSH
35434: LD_INT 3
35436: ARRAY
35437: PPUSH
35438: LD_EXP 121
35442: PUSH
35443: LD_VAR 0 2
35447: ARRAY
35448: PUSH
35449: LD_INT 4
35451: ARRAY
35452: PPUSH
35453: CALL_OW 171
// end ; end ;
35457: LD_VAR 0 3
35461: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35462: LD_INT 0
35464: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35465: LD_VAR 0 1
35469: PUSH
35470: LD_INT 250
35472: EQUAL
35473: PUSH
35474: LD_VAR 0 2
35478: PPUSH
35479: CALL_OW 264
35483: PUSH
35484: LD_INT 81
35486: EQUAL
35487: AND
35488: IFFALSE 35509
// MinerPlaceMine ( unit , x , y ) ;
35490: LD_VAR 0 2
35494: PPUSH
35495: LD_VAR 0 4
35499: PPUSH
35500: LD_VAR 0 5
35504: PPUSH
35505: CALL 38499 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35509: LD_VAR 0 1
35513: PUSH
35514: LD_INT 251
35516: EQUAL
35517: PUSH
35518: LD_VAR 0 2
35522: PPUSH
35523: CALL_OW 264
35527: PUSH
35528: LD_INT 81
35530: EQUAL
35531: AND
35532: IFFALSE 35553
// MinerDetonateMine ( unit , x , y ) ;
35534: LD_VAR 0 2
35538: PPUSH
35539: LD_VAR 0 4
35543: PPUSH
35544: LD_VAR 0 5
35548: PPUSH
35549: CALL 38774 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35553: LD_VAR 0 1
35557: PUSH
35558: LD_INT 252
35560: EQUAL
35561: PUSH
35562: LD_VAR 0 2
35566: PPUSH
35567: CALL_OW 264
35571: PUSH
35572: LD_INT 81
35574: EQUAL
35575: AND
35576: IFFALSE 35597
// MinerCreateMinefield ( unit , x , y ) ;
35578: LD_VAR 0 2
35582: PPUSH
35583: LD_VAR 0 4
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: CALL 39191 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35597: LD_VAR 0 1
35601: PUSH
35602: LD_INT 253
35604: EQUAL
35605: PUSH
35606: LD_VAR 0 2
35610: PPUSH
35611: CALL_OW 257
35615: PUSH
35616: LD_INT 5
35618: EQUAL
35619: AND
35620: IFFALSE 35641
// ComBinocular ( unit , x , y ) ;
35622: LD_VAR 0 2
35626: PPUSH
35627: LD_VAR 0 4
35631: PPUSH
35632: LD_VAR 0 5
35636: PPUSH
35637: CALL 39560 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35641: LD_VAR 0 1
35645: PUSH
35646: LD_INT 254
35648: EQUAL
35649: PUSH
35650: LD_VAR 0 2
35654: PPUSH
35655: CALL_OW 264
35659: PUSH
35660: LD_INT 99
35662: EQUAL
35663: AND
35664: PUSH
35665: LD_VAR 0 3
35669: PPUSH
35670: CALL_OW 263
35674: PUSH
35675: LD_INT 3
35677: EQUAL
35678: AND
35679: IFFALSE 35695
// HackDestroyVehicle ( unit , selectedUnit ) ;
35681: LD_VAR 0 2
35685: PPUSH
35686: LD_VAR 0 3
35690: PPUSH
35691: CALL 37863 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35695: LD_VAR 0 1
35699: PUSH
35700: LD_INT 255
35702: EQUAL
35703: PUSH
35704: LD_VAR 0 2
35708: PPUSH
35709: CALL_OW 264
35713: PUSH
35714: LD_INT 14
35716: PUSH
35717: LD_INT 53
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: IN
35724: AND
35725: PUSH
35726: LD_VAR 0 4
35730: PPUSH
35731: LD_VAR 0 5
35735: PPUSH
35736: CALL_OW 488
35740: AND
35741: IFFALSE 35765
// CutTreeXYR ( unit , x , y , 12 ) ;
35743: LD_VAR 0 2
35747: PPUSH
35748: LD_VAR 0 4
35752: PPUSH
35753: LD_VAR 0 5
35757: PPUSH
35758: LD_INT 12
35760: PPUSH
35761: CALL 35860 0 4
// if cmd = 256 then
35765: LD_VAR 0 1
35769: PUSH
35770: LD_INT 256
35772: EQUAL
35773: IFFALSE 35794
// SetFactoryWaypoint ( unit , x , y ) ;
35775: LD_VAR 0 2
35779: PPUSH
35780: LD_VAR 0 4
35784: PPUSH
35785: LD_VAR 0 5
35789: PPUSH
35790: CALL 33775 0 3
// if cmd = 257 then
35794: LD_VAR 0 1
35798: PUSH
35799: LD_INT 257
35801: EQUAL
35802: IFFALSE 35823
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35804: LD_VAR 0 2
35808: PPUSH
35809: LD_VAR 0 4
35813: PPUSH
35814: LD_VAR 0 5
35818: PPUSH
35819: CALL 34137 0 3
// if cmd = 258 then
35823: LD_VAR 0 1
35827: PUSH
35828: LD_INT 258
35830: EQUAL
35831: IFFALSE 35855
// BurnTreeXYR ( unit , x , y , 8 ) ;
35833: LD_VAR 0 2
35837: PPUSH
35838: LD_VAR 0 4
35842: PPUSH
35843: LD_VAR 0 5
35847: PPUSH
35848: LD_INT 8
35850: PPUSH
35851: CALL 36254 0 4
// end ;
35855: LD_VAR 0 6
35859: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35860: LD_INT 0
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 302
35880: NOT
35881: PUSH
35882: LD_VAR 0 2
35886: PPUSH
35887: LD_VAR 0 3
35891: PPUSH
35892: CALL_OW 488
35896: NOT
35897: OR
35898: PUSH
35899: LD_VAR 0 4
35903: NOT
35904: OR
35905: IFFALSE 35909
// exit ;
35907: GO 36249
// list := [ ] ;
35909: LD_ADDR_VAR 0 13
35913: PUSH
35914: EMPTY
35915: ST_TO_ADDR
// if x - r < 0 then
35916: LD_VAR 0 2
35920: PUSH
35921: LD_VAR 0 4
35925: MINUS
35926: PUSH
35927: LD_INT 0
35929: LESS
35930: IFFALSE 35942
// min_x := 0 else
35932: LD_ADDR_VAR 0 7
35936: PUSH
35937: LD_INT 0
35939: ST_TO_ADDR
35940: GO 35958
// min_x := x - r ;
35942: LD_ADDR_VAR 0 7
35946: PUSH
35947: LD_VAR 0 2
35951: PUSH
35952: LD_VAR 0 4
35956: MINUS
35957: ST_TO_ADDR
// if y - r < 0 then
35958: LD_VAR 0 3
35962: PUSH
35963: LD_VAR 0 4
35967: MINUS
35968: PUSH
35969: LD_INT 0
35971: LESS
35972: IFFALSE 35984
// min_y := 0 else
35974: LD_ADDR_VAR 0 8
35978: PUSH
35979: LD_INT 0
35981: ST_TO_ADDR
35982: GO 36000
// min_y := y - r ;
35984: LD_ADDR_VAR 0 8
35988: PUSH
35989: LD_VAR 0 3
35993: PUSH
35994: LD_VAR 0 4
35998: MINUS
35999: ST_TO_ADDR
// max_x := x + r ;
36000: LD_ADDR_VAR 0 9
36004: PUSH
36005: LD_VAR 0 2
36009: PUSH
36010: LD_VAR 0 4
36014: PLUS
36015: ST_TO_ADDR
// max_y := y + r ;
36016: LD_ADDR_VAR 0 10
36020: PUSH
36021: LD_VAR 0 3
36025: PUSH
36026: LD_VAR 0 4
36030: PLUS
36031: ST_TO_ADDR
// for _x = min_x to max_x do
36032: LD_ADDR_VAR 0 11
36036: PUSH
36037: DOUBLE
36038: LD_VAR 0 7
36042: DEC
36043: ST_TO_ADDR
36044: LD_VAR 0 9
36048: PUSH
36049: FOR_TO
36050: IFFALSE 36167
// for _y = min_y to max_y do
36052: LD_ADDR_VAR 0 12
36056: PUSH
36057: DOUBLE
36058: LD_VAR 0 8
36062: DEC
36063: ST_TO_ADDR
36064: LD_VAR 0 10
36068: PUSH
36069: FOR_TO
36070: IFFALSE 36163
// begin if not ValidHex ( _x , _y ) then
36072: LD_VAR 0 11
36076: PPUSH
36077: LD_VAR 0 12
36081: PPUSH
36082: CALL_OW 488
36086: NOT
36087: IFFALSE 36091
// continue ;
36089: GO 36069
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36091: LD_VAR 0 11
36095: PPUSH
36096: LD_VAR 0 12
36100: PPUSH
36101: CALL_OW 351
36105: PUSH
36106: LD_VAR 0 11
36110: PPUSH
36111: LD_VAR 0 12
36115: PPUSH
36116: CALL_OW 554
36120: AND
36121: IFFALSE 36161
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36123: LD_ADDR_VAR 0 13
36127: PUSH
36128: LD_VAR 0 13
36132: PPUSH
36133: LD_VAR 0 13
36137: PUSH
36138: LD_INT 1
36140: PLUS
36141: PPUSH
36142: LD_VAR 0 11
36146: PUSH
36147: LD_VAR 0 12
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PPUSH
36156: CALL_OW 2
36160: ST_TO_ADDR
// end ;
36161: GO 36069
36163: POP
36164: POP
36165: GO 36049
36167: POP
36168: POP
// if not list then
36169: LD_VAR 0 13
36173: NOT
36174: IFFALSE 36178
// exit ;
36176: GO 36249
// for i in list do
36178: LD_ADDR_VAR 0 6
36182: PUSH
36183: LD_VAR 0 13
36187: PUSH
36188: FOR_IN
36189: IFFALSE 36247
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36191: LD_VAR 0 1
36195: PPUSH
36196: LD_STRING M
36198: PUSH
36199: LD_VAR 0 6
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PUSH
36208: LD_VAR 0 6
36212: PUSH
36213: LD_INT 2
36215: ARRAY
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: PUSH
36238: EMPTY
36239: LIST
36240: PPUSH
36241: CALL_OW 447
36245: GO 36188
36247: POP
36248: POP
// end ;
36249: LD_VAR 0 5
36253: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36254: LD_INT 0
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
36265: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 302
36275: NOT
36276: PUSH
36277: LD_VAR 0 2
36281: PPUSH
36282: LD_VAR 0 3
36286: PPUSH
36287: CALL_OW 488
36291: NOT
36292: OR
36293: PUSH
36294: LD_VAR 0 4
36298: NOT
36299: OR
36300: IFFALSE 36304
// exit ;
36302: GO 36817
// list := [ ] ;
36304: LD_ADDR_VAR 0 13
36308: PUSH
36309: EMPTY
36310: ST_TO_ADDR
// if x - r < 0 then
36311: LD_VAR 0 2
36315: PUSH
36316: LD_VAR 0 4
36320: MINUS
36321: PUSH
36322: LD_INT 0
36324: LESS
36325: IFFALSE 36337
// min_x := 0 else
36327: LD_ADDR_VAR 0 7
36331: PUSH
36332: LD_INT 0
36334: ST_TO_ADDR
36335: GO 36353
// min_x := x - r ;
36337: LD_ADDR_VAR 0 7
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_VAR 0 4
36351: MINUS
36352: ST_TO_ADDR
// if y - r < 0 then
36353: LD_VAR 0 3
36357: PUSH
36358: LD_VAR 0 4
36362: MINUS
36363: PUSH
36364: LD_INT 0
36366: LESS
36367: IFFALSE 36379
// min_y := 0 else
36369: LD_ADDR_VAR 0 8
36373: PUSH
36374: LD_INT 0
36376: ST_TO_ADDR
36377: GO 36395
// min_y := y - r ;
36379: LD_ADDR_VAR 0 8
36383: PUSH
36384: LD_VAR 0 3
36388: PUSH
36389: LD_VAR 0 4
36393: MINUS
36394: ST_TO_ADDR
// max_x := x + r ;
36395: LD_ADDR_VAR 0 9
36399: PUSH
36400: LD_VAR 0 2
36404: PUSH
36405: LD_VAR 0 4
36409: PLUS
36410: ST_TO_ADDR
// max_y := y + r ;
36411: LD_ADDR_VAR 0 10
36415: PUSH
36416: LD_VAR 0 3
36420: PUSH
36421: LD_VAR 0 4
36425: PLUS
36426: ST_TO_ADDR
// for _x = min_x to max_x do
36427: LD_ADDR_VAR 0 11
36431: PUSH
36432: DOUBLE
36433: LD_VAR 0 7
36437: DEC
36438: ST_TO_ADDR
36439: LD_VAR 0 9
36443: PUSH
36444: FOR_TO
36445: IFFALSE 36562
// for _y = min_y to max_y do
36447: LD_ADDR_VAR 0 12
36451: PUSH
36452: DOUBLE
36453: LD_VAR 0 8
36457: DEC
36458: ST_TO_ADDR
36459: LD_VAR 0 10
36463: PUSH
36464: FOR_TO
36465: IFFALSE 36558
// begin if not ValidHex ( _x , _y ) then
36467: LD_VAR 0 11
36471: PPUSH
36472: LD_VAR 0 12
36476: PPUSH
36477: CALL_OW 488
36481: NOT
36482: IFFALSE 36486
// continue ;
36484: GO 36464
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36486: LD_VAR 0 11
36490: PPUSH
36491: LD_VAR 0 12
36495: PPUSH
36496: CALL_OW 351
36500: PUSH
36501: LD_VAR 0 11
36505: PPUSH
36506: LD_VAR 0 12
36510: PPUSH
36511: CALL_OW 554
36515: AND
36516: IFFALSE 36556
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36518: LD_ADDR_VAR 0 13
36522: PUSH
36523: LD_VAR 0 13
36527: PPUSH
36528: LD_VAR 0 13
36532: PUSH
36533: LD_INT 1
36535: PLUS
36536: PPUSH
36537: LD_VAR 0 11
36541: PUSH
36542: LD_VAR 0 12
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PPUSH
36551: CALL_OW 2
36555: ST_TO_ADDR
// end ;
36556: GO 36464
36558: POP
36559: POP
36560: GO 36444
36562: POP
36563: POP
// if not list then
36564: LD_VAR 0 13
36568: NOT
36569: IFFALSE 36573
// exit ;
36571: GO 36817
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36573: LD_ADDR_VAR 0 13
36577: PUSH
36578: LD_VAR 0 1
36582: PPUSH
36583: LD_VAR 0 13
36587: PPUSH
36588: LD_INT 1
36590: PPUSH
36591: LD_INT 1
36593: PPUSH
36594: CALL 45430 0 4
36598: ST_TO_ADDR
// ComStop ( flame ) ;
36599: LD_VAR 0 1
36603: PPUSH
36604: CALL_OW 141
// for i in list do
36608: LD_ADDR_VAR 0 6
36612: PUSH
36613: LD_VAR 0 13
36617: PUSH
36618: FOR_IN
36619: IFFALSE 36650
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36621: LD_VAR 0 1
36625: PPUSH
36626: LD_VAR 0 6
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: PPUSH
36635: LD_VAR 0 6
36639: PUSH
36640: LD_INT 2
36642: ARRAY
36643: PPUSH
36644: CALL_OW 176
36648: GO 36618
36650: POP
36651: POP
// repeat wait ( 0 0$1 ) ;
36652: LD_INT 35
36654: PPUSH
36655: CALL_OW 67
// task := GetTaskList ( flame ) ;
36659: LD_ADDR_VAR 0 14
36663: PUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 437
36673: ST_TO_ADDR
// if not task then
36674: LD_VAR 0 14
36678: NOT
36679: IFFALSE 36683
// exit ;
36681: GO 36817
// if task [ 1 ] [ 1 ] <> | then
36683: LD_VAR 0 14
36687: PUSH
36688: LD_INT 1
36690: ARRAY
36691: PUSH
36692: LD_INT 1
36694: ARRAY
36695: PUSH
36696: LD_STRING |
36698: NONEQUAL
36699: IFFALSE 36703
// exit ;
36701: GO 36817
// _x := task [ 1 ] [ 2 ] ;
36703: LD_ADDR_VAR 0 11
36707: PUSH
36708: LD_VAR 0 14
36712: PUSH
36713: LD_INT 1
36715: ARRAY
36716: PUSH
36717: LD_INT 2
36719: ARRAY
36720: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36721: LD_ADDR_VAR 0 12
36725: PUSH
36726: LD_VAR 0 14
36730: PUSH
36731: LD_INT 1
36733: ARRAY
36734: PUSH
36735: LD_INT 3
36737: ARRAY
36738: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36739: LD_VAR 0 11
36743: PPUSH
36744: LD_VAR 0 12
36748: PPUSH
36749: CALL_OW 351
36753: NOT
36754: PUSH
36755: LD_VAR 0 11
36759: PPUSH
36760: LD_VAR 0 12
36764: PPUSH
36765: CALL_OW 554
36769: NOT
36770: OR
36771: IFFALSE 36805
// begin task := Delete ( task , 1 ) ;
36773: LD_ADDR_VAR 0 14
36777: PUSH
36778: LD_VAR 0 14
36782: PPUSH
36783: LD_INT 1
36785: PPUSH
36786: CALL_OW 3
36790: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36791: LD_VAR 0 1
36795: PPUSH
36796: LD_VAR 0 14
36800: PPUSH
36801: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36805: LD_VAR 0 1
36809: PPUSH
36810: CALL_OW 314
36814: NOT
36815: IFFALSE 36652
// end ;
36817: LD_VAR 0 5
36821: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36822: LD_EXP 124
36826: NOT
36827: IFFALSE 36877
36829: GO 36831
36831: DISABLE
// begin initHack := true ;
36832: LD_ADDR_EXP 124
36836: PUSH
36837: LD_INT 1
36839: ST_TO_ADDR
// hackTanks := [ ] ;
36840: LD_ADDR_EXP 125
36844: PUSH
36845: EMPTY
36846: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36847: LD_ADDR_EXP 126
36851: PUSH
36852: EMPTY
36853: ST_TO_ADDR
// hackLimit := 3 ;
36854: LD_ADDR_EXP 127
36858: PUSH
36859: LD_INT 3
36861: ST_TO_ADDR
// hackDist := 12 ;
36862: LD_ADDR_EXP 128
36866: PUSH
36867: LD_INT 12
36869: ST_TO_ADDR
// hackCounter := [ ] ;
36870: LD_ADDR_EXP 129
36874: PUSH
36875: EMPTY
36876: ST_TO_ADDR
// end ;
36877: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36878: LD_EXP 124
36882: PUSH
36883: LD_INT 34
36885: PUSH
36886: LD_INT 99
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL_OW 69
36897: AND
36898: IFFALSE 37151
36900: GO 36902
36902: DISABLE
36903: LD_INT 0
36905: PPUSH
36906: PPUSH
// begin enable ;
36907: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36908: LD_ADDR_VAR 0 1
36912: PUSH
36913: LD_INT 34
36915: PUSH
36916: LD_INT 99
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PPUSH
36923: CALL_OW 69
36927: PUSH
36928: FOR_IN
36929: IFFALSE 37149
// begin if not i in hackTanks then
36931: LD_VAR 0 1
36935: PUSH
36936: LD_EXP 125
36940: IN
36941: NOT
36942: IFFALSE 37025
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36944: LD_ADDR_EXP 125
36948: PUSH
36949: LD_EXP 125
36953: PPUSH
36954: LD_EXP 125
36958: PUSH
36959: LD_INT 1
36961: PLUS
36962: PPUSH
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL_OW 1
36972: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36973: LD_ADDR_EXP 126
36977: PUSH
36978: LD_EXP 126
36982: PPUSH
36983: LD_EXP 126
36987: PUSH
36988: LD_INT 1
36990: PLUS
36991: PPUSH
36992: EMPTY
36993: PPUSH
36994: CALL_OW 1
36998: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36999: LD_ADDR_EXP 129
37003: PUSH
37004: LD_EXP 129
37008: PPUSH
37009: LD_EXP 129
37013: PUSH
37014: LD_INT 1
37016: PLUS
37017: PPUSH
37018: EMPTY
37019: PPUSH
37020: CALL_OW 1
37024: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 302
37034: NOT
37035: IFFALSE 37048
// begin HackUnlinkAll ( i ) ;
37037: LD_VAR 0 1
37041: PPUSH
37042: CALL 37154 0 1
// continue ;
37046: GO 36928
// end ; HackCheckCapturedStatus ( i ) ;
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL 37597 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37057: LD_ADDR_VAR 0 2
37061: PUSH
37062: LD_INT 81
37064: PUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL_OW 255
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 33
37081: PUSH
37082: LD_INT 3
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 91
37091: PUSH
37092: LD_VAR 0 1
37096: PUSH
37097: LD_EXP 128
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 50
37109: PUSH
37110: EMPTY
37111: LIST
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: PPUSH
37119: CALL_OW 69
37123: ST_TO_ADDR
// if not tmp then
37124: LD_VAR 0 2
37128: NOT
37129: IFFALSE 37133
// continue ;
37131: GO 36928
// HackLink ( i , tmp ) ;
37133: LD_VAR 0 1
37137: PPUSH
37138: LD_VAR 0 2
37142: PPUSH
37143: CALL 37290 0 2
// end ;
37147: GO 36928
37149: POP
37150: POP
// end ;
37151: PPOPN 2
37153: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
// if not hack in hackTanks then
37159: LD_VAR 0 1
37163: PUSH
37164: LD_EXP 125
37168: IN
37169: NOT
37170: IFFALSE 37174
// exit ;
37172: GO 37285
// index := GetElementIndex ( hackTanks , hack ) ;
37174: LD_ADDR_VAR 0 4
37178: PUSH
37179: LD_EXP 125
37183: PPUSH
37184: LD_VAR 0 1
37188: PPUSH
37189: CALL 44727 0 2
37193: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37194: LD_EXP 126
37198: PUSH
37199: LD_VAR 0 4
37203: ARRAY
37204: IFFALSE 37285
// begin for i in hackTanksCaptured [ index ] do
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: LD_EXP 126
37215: PUSH
37216: LD_VAR 0 4
37220: ARRAY
37221: PUSH
37222: FOR_IN
37223: IFFALSE 37249
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37225: LD_VAR 0 3
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: PPUSH
37234: LD_VAR 0 3
37238: PUSH
37239: LD_INT 2
37241: ARRAY
37242: PPUSH
37243: CALL_OW 235
37247: GO 37222
37249: POP
37250: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37251: LD_ADDR_EXP 126
37255: PUSH
37256: LD_EXP 126
37260: PPUSH
37261: LD_VAR 0 4
37265: PPUSH
37266: EMPTY
37267: PPUSH
37268: CALL_OW 1
37272: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37273: LD_VAR 0 1
37277: PPUSH
37278: LD_INT 0
37280: PPUSH
37281: CALL_OW 505
// end ; end ;
37285: LD_VAR 0 2
37289: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37290: LD_INT 0
37292: PPUSH
37293: PPUSH
37294: PPUSH
// if not hack in hackTanks or not vehicles then
37295: LD_VAR 0 1
37299: PUSH
37300: LD_EXP 125
37304: IN
37305: NOT
37306: PUSH
37307: LD_VAR 0 2
37311: NOT
37312: OR
37313: IFFALSE 37317
// exit ;
37315: GO 37592
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37317: LD_ADDR_VAR 0 2
37321: PUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: LD_VAR 0 2
37331: PPUSH
37332: LD_INT 1
37334: PPUSH
37335: LD_INT 1
37337: PPUSH
37338: CALL 45377 0 4
37342: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37343: LD_ADDR_VAR 0 5
37347: PUSH
37348: LD_EXP 125
37352: PPUSH
37353: LD_VAR 0 1
37357: PPUSH
37358: CALL 44727 0 2
37362: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37363: LD_EXP 126
37367: PUSH
37368: LD_VAR 0 5
37372: ARRAY
37373: PUSH
37374: LD_EXP 127
37378: LESS
37379: IFFALSE 37568
// begin for i := 1 to vehicles do
37381: LD_ADDR_VAR 0 4
37385: PUSH
37386: DOUBLE
37387: LD_INT 1
37389: DEC
37390: ST_TO_ADDR
37391: LD_VAR 0 2
37395: PUSH
37396: FOR_TO
37397: IFFALSE 37566
// begin if hackTanksCaptured [ index ] = hackLimit then
37399: LD_EXP 126
37403: PUSH
37404: LD_VAR 0 5
37408: ARRAY
37409: PUSH
37410: LD_EXP 127
37414: EQUAL
37415: IFFALSE 37419
// break ;
37417: GO 37566
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37419: LD_ADDR_EXP 129
37423: PUSH
37424: LD_EXP 129
37428: PPUSH
37429: LD_VAR 0 5
37433: PPUSH
37434: LD_EXP 129
37438: PUSH
37439: LD_VAR 0 5
37443: ARRAY
37444: PUSH
37445: LD_INT 1
37447: PLUS
37448: PPUSH
37449: CALL_OW 1
37453: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37454: LD_ADDR_EXP 126
37458: PUSH
37459: LD_EXP 126
37463: PPUSH
37464: LD_VAR 0 5
37468: PUSH
37469: LD_EXP 126
37473: PUSH
37474: LD_VAR 0 5
37478: ARRAY
37479: PUSH
37480: LD_INT 1
37482: PLUS
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PPUSH
37488: LD_VAR 0 2
37492: PUSH
37493: LD_VAR 0 4
37497: ARRAY
37498: PUSH
37499: LD_VAR 0 2
37503: PUSH
37504: LD_VAR 0 4
37508: ARRAY
37509: PPUSH
37510: CALL_OW 255
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PPUSH
37519: CALL 44942 0 3
37523: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37524: LD_VAR 0 2
37528: PUSH
37529: LD_VAR 0 4
37533: ARRAY
37534: PPUSH
37535: LD_VAR 0 1
37539: PPUSH
37540: CALL_OW 255
37544: PPUSH
37545: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37549: LD_VAR 0 2
37553: PUSH
37554: LD_VAR 0 4
37558: ARRAY
37559: PPUSH
37560: CALL_OW 141
// end ;
37564: GO 37396
37566: POP
37567: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37568: LD_VAR 0 1
37572: PPUSH
37573: LD_EXP 126
37577: PUSH
37578: LD_VAR 0 5
37582: ARRAY
37583: PUSH
37584: LD_INT 0
37586: PLUS
37587: PPUSH
37588: CALL_OW 505
// end ;
37592: LD_VAR 0 3
37596: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37597: LD_INT 0
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
// if not hack in hackTanks then
37603: LD_VAR 0 1
37607: PUSH
37608: LD_EXP 125
37612: IN
37613: NOT
37614: IFFALSE 37618
// exit ;
37616: GO 37858
// index := GetElementIndex ( hackTanks , hack ) ;
37618: LD_ADDR_VAR 0 4
37622: PUSH
37623: LD_EXP 125
37627: PPUSH
37628: LD_VAR 0 1
37632: PPUSH
37633: CALL 44727 0 2
37637: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: DOUBLE
37644: LD_EXP 126
37648: PUSH
37649: LD_VAR 0 4
37653: ARRAY
37654: INC
37655: ST_TO_ADDR
37656: LD_INT 1
37658: PUSH
37659: FOR_DOWNTO
37660: IFFALSE 37832
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37662: LD_ADDR_VAR 0 5
37666: PUSH
37667: LD_EXP 126
37671: PUSH
37672: LD_VAR 0 4
37676: ARRAY
37677: PUSH
37678: LD_VAR 0 3
37682: ARRAY
37683: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37684: LD_VAR 0 5
37688: PUSH
37689: LD_INT 1
37691: ARRAY
37692: PPUSH
37693: CALL_OW 302
37697: NOT
37698: PUSH
37699: LD_VAR 0 5
37703: PUSH
37704: LD_INT 1
37706: ARRAY
37707: PPUSH
37708: CALL_OW 255
37712: PUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 255
37722: NONEQUAL
37723: OR
37724: IFFALSE 37830
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37726: LD_VAR 0 5
37730: PUSH
37731: LD_INT 1
37733: ARRAY
37734: PPUSH
37735: CALL_OW 305
37739: PUSH
37740: LD_VAR 0 5
37744: PUSH
37745: LD_INT 1
37747: ARRAY
37748: PPUSH
37749: CALL_OW 255
37753: PUSH
37754: LD_VAR 0 1
37758: PPUSH
37759: CALL_OW 255
37763: EQUAL
37764: AND
37765: IFFALSE 37789
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37767: LD_VAR 0 5
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: PPUSH
37776: LD_VAR 0 5
37780: PUSH
37781: LD_INT 2
37783: ARRAY
37784: PPUSH
37785: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37789: LD_ADDR_EXP 126
37793: PUSH
37794: LD_EXP 126
37798: PPUSH
37799: LD_VAR 0 4
37803: PPUSH
37804: LD_EXP 126
37808: PUSH
37809: LD_VAR 0 4
37813: ARRAY
37814: PPUSH
37815: LD_VAR 0 3
37819: PPUSH
37820: CALL_OW 3
37824: PPUSH
37825: CALL_OW 1
37829: ST_TO_ADDR
// end ; end ;
37830: GO 37659
37832: POP
37833: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37834: LD_VAR 0 1
37838: PPUSH
37839: LD_EXP 126
37843: PUSH
37844: LD_VAR 0 4
37848: ARRAY
37849: PUSH
37850: LD_INT 0
37852: PLUS
37853: PPUSH
37854: CALL_OW 505
// end ;
37858: LD_VAR 0 2
37862: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37863: LD_INT 0
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
// if not hack in hackTanks then
37869: LD_VAR 0 1
37873: PUSH
37874: LD_EXP 125
37878: IN
37879: NOT
37880: IFFALSE 37884
// exit ;
37882: GO 37969
// index := GetElementIndex ( hackTanks , hack ) ;
37884: LD_ADDR_VAR 0 5
37888: PUSH
37889: LD_EXP 125
37893: PPUSH
37894: LD_VAR 0 1
37898: PPUSH
37899: CALL 44727 0 2
37903: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37904: LD_ADDR_VAR 0 4
37908: PUSH
37909: DOUBLE
37910: LD_INT 1
37912: DEC
37913: ST_TO_ADDR
37914: LD_EXP 126
37918: PUSH
37919: LD_VAR 0 5
37923: ARRAY
37924: PUSH
37925: FOR_TO
37926: IFFALSE 37967
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37928: LD_EXP 126
37932: PUSH
37933: LD_VAR 0 5
37937: ARRAY
37938: PUSH
37939: LD_VAR 0 4
37943: ARRAY
37944: PUSH
37945: LD_INT 1
37947: ARRAY
37948: PUSH
37949: LD_VAR 0 2
37953: EQUAL
37954: IFFALSE 37965
// KillUnit ( vehicle ) ;
37956: LD_VAR 0 2
37960: PPUSH
37961: CALL_OW 66
37965: GO 37925
37967: POP
37968: POP
// end ;
37969: LD_VAR 0 3
37973: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37974: LD_EXP 130
37978: NOT
37979: IFFALSE 38014
37981: GO 37983
37983: DISABLE
// begin initMiner := true ;
37984: LD_ADDR_EXP 130
37988: PUSH
37989: LD_INT 1
37991: ST_TO_ADDR
// minersList := [ ] ;
37992: LD_ADDR_EXP 131
37996: PUSH
37997: EMPTY
37998: ST_TO_ADDR
// minerMinesList := [ ] ;
37999: LD_ADDR_EXP 132
38003: PUSH
38004: EMPTY
38005: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38006: LD_ADDR_EXP 133
38010: PUSH
38011: LD_INT 5
38013: ST_TO_ADDR
// end ;
38014: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38015: LD_EXP 130
38019: PUSH
38020: LD_INT 34
38022: PUSH
38023: LD_INT 81
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 69
38034: AND
38035: IFFALSE 38496
38037: GO 38039
38039: DISABLE
38040: LD_INT 0
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
// begin enable ;
38046: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38047: LD_ADDR_VAR 0 1
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 81
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PPUSH
38062: CALL_OW 69
38066: PUSH
38067: FOR_IN
38068: IFFALSE 38140
// begin if not i in minersList then
38070: LD_VAR 0 1
38074: PUSH
38075: LD_EXP 131
38079: IN
38080: NOT
38081: IFFALSE 38138
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38083: LD_ADDR_EXP 131
38087: PUSH
38088: LD_EXP 131
38092: PPUSH
38093: LD_EXP 131
38097: PUSH
38098: LD_INT 1
38100: PLUS
38101: PPUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 1
38111: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38112: LD_ADDR_EXP 132
38116: PUSH
38117: LD_EXP 132
38121: PPUSH
38122: LD_EXP 132
38126: PUSH
38127: LD_INT 1
38129: PLUS
38130: PPUSH
38131: EMPTY
38132: PPUSH
38133: CALL_OW 1
38137: ST_TO_ADDR
// end end ;
38138: GO 38067
38140: POP
38141: POP
// for i := minerMinesList downto 1 do
38142: LD_ADDR_VAR 0 1
38146: PUSH
38147: DOUBLE
38148: LD_EXP 132
38152: INC
38153: ST_TO_ADDR
38154: LD_INT 1
38156: PUSH
38157: FOR_DOWNTO
38158: IFFALSE 38494
// begin if IsLive ( minersList [ i ] ) then
38160: LD_EXP 131
38164: PUSH
38165: LD_VAR 0 1
38169: ARRAY
38170: PPUSH
38171: CALL_OW 300
38175: IFFALSE 38203
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38177: LD_EXP 131
38181: PUSH
38182: LD_VAR 0 1
38186: ARRAY
38187: PPUSH
38188: LD_EXP 132
38192: PUSH
38193: LD_VAR 0 1
38197: ARRAY
38198: PPUSH
38199: CALL_OW 505
// if not minerMinesList [ i ] then
38203: LD_EXP 132
38207: PUSH
38208: LD_VAR 0 1
38212: ARRAY
38213: NOT
38214: IFFALSE 38218
// continue ;
38216: GO 38157
// for j := minerMinesList [ i ] downto 1 do
38218: LD_ADDR_VAR 0 2
38222: PUSH
38223: DOUBLE
38224: LD_EXP 132
38228: PUSH
38229: LD_VAR 0 1
38233: ARRAY
38234: INC
38235: ST_TO_ADDR
38236: LD_INT 1
38238: PUSH
38239: FOR_DOWNTO
38240: IFFALSE 38490
// begin side := GetSide ( minersList [ i ] ) ;
38242: LD_ADDR_VAR 0 3
38246: PUSH
38247: LD_EXP 131
38251: PUSH
38252: LD_VAR 0 1
38256: ARRAY
38257: PPUSH
38258: CALL_OW 255
38262: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38263: LD_ADDR_VAR 0 4
38267: PUSH
38268: LD_EXP 132
38272: PUSH
38273: LD_VAR 0 1
38277: ARRAY
38278: PUSH
38279: LD_VAR 0 2
38283: ARRAY
38284: PUSH
38285: LD_INT 1
38287: ARRAY
38288: PPUSH
38289: LD_EXP 132
38293: PUSH
38294: LD_VAR 0 1
38298: ARRAY
38299: PUSH
38300: LD_VAR 0 2
38304: ARRAY
38305: PUSH
38306: LD_INT 2
38308: ARRAY
38309: PPUSH
38310: CALL_OW 428
38314: ST_TO_ADDR
// if not tmp then
38315: LD_VAR 0 4
38319: NOT
38320: IFFALSE 38324
// continue ;
38322: GO 38239
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38324: LD_VAR 0 4
38328: PUSH
38329: LD_INT 81
38331: PUSH
38332: LD_VAR 0 3
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PPUSH
38341: CALL_OW 69
38345: IN
38346: PUSH
38347: LD_EXP 132
38351: PUSH
38352: LD_VAR 0 1
38356: ARRAY
38357: PUSH
38358: LD_VAR 0 2
38362: ARRAY
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PPUSH
38368: LD_EXP 132
38372: PUSH
38373: LD_VAR 0 1
38377: ARRAY
38378: PUSH
38379: LD_VAR 0 2
38383: ARRAY
38384: PUSH
38385: LD_INT 2
38387: ARRAY
38388: PPUSH
38389: CALL_OW 458
38393: AND
38394: IFFALSE 38488
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38396: LD_EXP 132
38400: PUSH
38401: LD_VAR 0 1
38405: ARRAY
38406: PUSH
38407: LD_VAR 0 2
38411: ARRAY
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: PPUSH
38417: LD_EXP 132
38421: PUSH
38422: LD_VAR 0 1
38426: ARRAY
38427: PUSH
38428: LD_VAR 0 2
38432: ARRAY
38433: PUSH
38434: LD_INT 2
38436: ARRAY
38437: PPUSH
38438: LD_VAR 0 3
38442: PPUSH
38443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38447: LD_ADDR_EXP 132
38451: PUSH
38452: LD_EXP 132
38456: PPUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: LD_EXP 132
38466: PUSH
38467: LD_VAR 0 1
38471: ARRAY
38472: PPUSH
38473: LD_VAR 0 2
38477: PPUSH
38478: CALL_OW 3
38482: PPUSH
38483: CALL_OW 1
38487: ST_TO_ADDR
// end ; end ;
38488: GO 38239
38490: POP
38491: POP
// end ;
38492: GO 38157
38494: POP
38495: POP
// end ;
38496: PPOPN 4
38498: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38499: LD_INT 0
38501: PPUSH
38502: PPUSH
// result := false ;
38503: LD_ADDR_VAR 0 4
38507: PUSH
38508: LD_INT 0
38510: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 264
38520: PUSH
38521: LD_INT 81
38523: EQUAL
38524: NOT
38525: IFFALSE 38529
// exit ;
38527: GO 38769
// index := GetElementIndex ( minersList , unit ) ;
38529: LD_ADDR_VAR 0 5
38533: PUSH
38534: LD_EXP 131
38538: PPUSH
38539: LD_VAR 0 1
38543: PPUSH
38544: CALL 44727 0 2
38548: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38549: LD_EXP 132
38553: PUSH
38554: LD_VAR 0 5
38558: ARRAY
38559: PUSH
38560: LD_EXP 133
38564: GREATEREQUAL
38565: IFFALSE 38569
// exit ;
38567: GO 38769
// ComMoveXY ( unit , x , y ) ;
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38588: LD_INT 35
38590: PPUSH
38591: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_VAR 0 2
38604: PPUSH
38605: LD_VAR 0 3
38609: PPUSH
38610: CALL 76468 0 3
38614: NOT
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 314
38625: AND
38626: IFFALSE 38630
// exit ;
38628: GO 38769
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: CALL_OW 428
38644: PUSH
38645: LD_VAR 0 1
38649: EQUAL
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 314
38660: NOT
38661: AND
38662: IFFALSE 38588
// PlaySoundXY ( x , y , PlantMine ) ;
38664: LD_VAR 0 2
38668: PPUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: LD_STRING PlantMine
38676: PPUSH
38677: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38681: LD_VAR 0 2
38685: PPUSH
38686: LD_VAR 0 3
38690: PPUSH
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL_OW 255
38700: PPUSH
38701: LD_INT 0
38703: PPUSH
38704: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38708: LD_ADDR_EXP 132
38712: PUSH
38713: LD_EXP 132
38717: PPUSH
38718: LD_VAR 0 5
38722: PUSH
38723: LD_EXP 132
38727: PUSH
38728: LD_VAR 0 5
38732: ARRAY
38733: PUSH
38734: LD_INT 1
38736: PLUS
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PPUSH
38742: LD_VAR 0 2
38746: PUSH
38747: LD_VAR 0 3
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PPUSH
38756: CALL 44942 0 3
38760: ST_TO_ADDR
// result := true ;
38761: LD_ADDR_VAR 0 4
38765: PUSH
38766: LD_INT 1
38768: ST_TO_ADDR
// end ;
38769: LD_VAR 0 4
38773: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38774: LD_INT 0
38776: PPUSH
38777: PPUSH
38778: PPUSH
// if not unit in minersList then
38779: LD_VAR 0 1
38783: PUSH
38784: LD_EXP 131
38788: IN
38789: NOT
38790: IFFALSE 38794
// exit ;
38792: GO 39186
// index := GetElementIndex ( minersList , unit ) ;
38794: LD_ADDR_VAR 0 6
38798: PUSH
38799: LD_EXP 131
38803: PPUSH
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL 44727 0 2
38813: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: DOUBLE
38820: LD_EXP 132
38824: PUSH
38825: LD_VAR 0 6
38829: ARRAY
38830: INC
38831: ST_TO_ADDR
38832: LD_INT 1
38834: PUSH
38835: FOR_DOWNTO
38836: IFFALSE 38997
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38838: LD_EXP 132
38842: PUSH
38843: LD_VAR 0 6
38847: ARRAY
38848: PUSH
38849: LD_VAR 0 5
38853: ARRAY
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PUSH
38859: LD_VAR 0 2
38863: EQUAL
38864: PUSH
38865: LD_EXP 132
38869: PUSH
38870: LD_VAR 0 6
38874: ARRAY
38875: PUSH
38876: LD_VAR 0 5
38880: ARRAY
38881: PUSH
38882: LD_INT 2
38884: ARRAY
38885: PUSH
38886: LD_VAR 0 3
38890: EQUAL
38891: AND
38892: IFFALSE 38995
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38894: LD_EXP 132
38898: PUSH
38899: LD_VAR 0 6
38903: ARRAY
38904: PUSH
38905: LD_VAR 0 5
38909: ARRAY
38910: PUSH
38911: LD_INT 1
38913: ARRAY
38914: PPUSH
38915: LD_EXP 132
38919: PUSH
38920: LD_VAR 0 6
38924: ARRAY
38925: PUSH
38926: LD_VAR 0 5
38930: ARRAY
38931: PUSH
38932: LD_INT 2
38934: ARRAY
38935: PPUSH
38936: LD_VAR 0 1
38940: PPUSH
38941: CALL_OW 255
38945: PPUSH
38946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38950: LD_ADDR_EXP 132
38954: PUSH
38955: LD_EXP 132
38959: PPUSH
38960: LD_VAR 0 6
38964: PPUSH
38965: LD_EXP 132
38969: PUSH
38970: LD_VAR 0 6
38974: ARRAY
38975: PPUSH
38976: LD_VAR 0 5
38980: PPUSH
38981: CALL_OW 3
38985: PPUSH
38986: CALL_OW 1
38990: ST_TO_ADDR
// exit ;
38991: POP
38992: POP
38993: GO 39186
// end ; end ;
38995: GO 38835
38997: POP
38998: POP
// for i := minerMinesList [ index ] downto 1 do
38999: LD_ADDR_VAR 0 5
39003: PUSH
39004: DOUBLE
39005: LD_EXP 132
39009: PUSH
39010: LD_VAR 0 6
39014: ARRAY
39015: INC
39016: ST_TO_ADDR
39017: LD_INT 1
39019: PUSH
39020: FOR_DOWNTO
39021: IFFALSE 39184
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39023: LD_EXP 132
39027: PUSH
39028: LD_VAR 0 6
39032: ARRAY
39033: PUSH
39034: LD_VAR 0 5
39038: ARRAY
39039: PUSH
39040: LD_INT 1
39042: ARRAY
39043: PPUSH
39044: LD_EXP 132
39048: PUSH
39049: LD_VAR 0 6
39053: ARRAY
39054: PUSH
39055: LD_VAR 0 5
39059: ARRAY
39060: PUSH
39061: LD_INT 2
39063: ARRAY
39064: PPUSH
39065: LD_VAR 0 2
39069: PPUSH
39070: LD_VAR 0 3
39074: PPUSH
39075: CALL_OW 298
39079: PUSH
39080: LD_INT 6
39082: LESS
39083: IFFALSE 39182
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39085: LD_EXP 132
39089: PUSH
39090: LD_VAR 0 6
39094: ARRAY
39095: PUSH
39096: LD_VAR 0 5
39100: ARRAY
39101: PUSH
39102: LD_INT 1
39104: ARRAY
39105: PPUSH
39106: LD_EXP 132
39110: PUSH
39111: LD_VAR 0 6
39115: ARRAY
39116: PUSH
39117: LD_VAR 0 5
39121: ARRAY
39122: PUSH
39123: LD_INT 2
39125: ARRAY
39126: PPUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: CALL_OW 255
39136: PPUSH
39137: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39141: LD_ADDR_EXP 132
39145: PUSH
39146: LD_EXP 132
39150: PPUSH
39151: LD_VAR 0 6
39155: PPUSH
39156: LD_EXP 132
39160: PUSH
39161: LD_VAR 0 6
39165: ARRAY
39166: PPUSH
39167: LD_VAR 0 5
39171: PPUSH
39172: CALL_OW 3
39176: PPUSH
39177: CALL_OW 1
39181: ST_TO_ADDR
// end ; end ;
39182: GO 39020
39184: POP
39185: POP
// end ;
39186: LD_VAR 0 4
39190: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39191: LD_INT 0
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39202: LD_VAR 0 1
39206: PPUSH
39207: CALL_OW 264
39211: PUSH
39212: LD_INT 81
39214: EQUAL
39215: NOT
39216: PUSH
39217: LD_VAR 0 1
39221: PUSH
39222: LD_EXP 131
39226: IN
39227: NOT
39228: OR
39229: IFFALSE 39233
// exit ;
39231: GO 39555
// index := GetElementIndex ( minersList , unit ) ;
39233: LD_ADDR_VAR 0 6
39237: PUSH
39238: LD_EXP 131
39242: PPUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL 44727 0 2
39252: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39253: LD_ADDR_VAR 0 8
39257: PUSH
39258: LD_EXP 133
39262: PUSH
39263: LD_EXP 132
39267: PUSH
39268: LD_VAR 0 6
39272: ARRAY
39273: MINUS
39274: ST_TO_ADDR
// if not minesFreeAmount then
39275: LD_VAR 0 8
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39555
// tmp := [ ] ;
39284: LD_ADDR_VAR 0 7
39288: PUSH
39289: EMPTY
39290: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: DOUBLE
39297: LD_INT 1
39299: DEC
39300: ST_TO_ADDR
39301: LD_VAR 0 8
39305: PUSH
39306: FOR_TO
39307: IFFALSE 39502
// begin _d := rand ( 0 , 5 ) ;
39309: LD_ADDR_VAR 0 11
39313: PUSH
39314: LD_INT 0
39316: PPUSH
39317: LD_INT 5
39319: PPUSH
39320: CALL_OW 12
39324: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39325: LD_ADDR_VAR 0 12
39329: PUSH
39330: LD_INT 2
39332: PPUSH
39333: LD_INT 6
39335: PPUSH
39336: CALL_OW 12
39340: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39341: LD_ADDR_VAR 0 9
39345: PUSH
39346: LD_VAR 0 2
39350: PPUSH
39351: LD_VAR 0 11
39355: PPUSH
39356: LD_VAR 0 12
39360: PPUSH
39361: CALL_OW 272
39365: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39366: LD_ADDR_VAR 0 10
39370: PUSH
39371: LD_VAR 0 3
39375: PPUSH
39376: LD_VAR 0 11
39380: PPUSH
39381: LD_VAR 0 12
39385: PPUSH
39386: CALL_OW 273
39390: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39391: LD_VAR 0 9
39395: PPUSH
39396: LD_VAR 0 10
39400: PPUSH
39401: CALL_OW 488
39405: PUSH
39406: LD_VAR 0 9
39410: PUSH
39411: LD_VAR 0 10
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_VAR 0 7
39424: IN
39425: NOT
39426: AND
39427: PUSH
39428: LD_VAR 0 9
39432: PPUSH
39433: LD_VAR 0 10
39437: PPUSH
39438: CALL_OW 458
39442: NOT
39443: AND
39444: IFFALSE 39486
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39446: LD_ADDR_VAR 0 7
39450: PUSH
39451: LD_VAR 0 7
39455: PPUSH
39456: LD_VAR 0 7
39460: PUSH
39461: LD_INT 1
39463: PLUS
39464: PPUSH
39465: LD_VAR 0 9
39469: PUSH
39470: LD_VAR 0 10
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PPUSH
39479: CALL_OW 1
39483: ST_TO_ADDR
39484: GO 39500
// i := i - 1 ;
39486: LD_ADDR_VAR 0 5
39490: PUSH
39491: LD_VAR 0 5
39495: PUSH
39496: LD_INT 1
39498: MINUS
39499: ST_TO_ADDR
// end ;
39500: GO 39306
39502: POP
39503: POP
// for i in tmp do
39504: LD_ADDR_VAR 0 5
39508: PUSH
39509: LD_VAR 0 7
39513: PUSH
39514: FOR_IN
39515: IFFALSE 39553
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39517: LD_VAR 0 1
39521: PPUSH
39522: LD_VAR 0 5
39526: PUSH
39527: LD_INT 1
39529: ARRAY
39530: PPUSH
39531: LD_VAR 0 5
39535: PUSH
39536: LD_INT 2
39538: ARRAY
39539: PPUSH
39540: CALL 38499 0 3
39544: NOT
39545: IFFALSE 39551
// exit ;
39547: POP
39548: POP
39549: GO 39555
39551: GO 39514
39553: POP
39554: POP
// end ;
39555: LD_VAR 0 4
39559: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39560: LD_INT 0
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
// if not GetClass ( unit ) = class_sniper then
39569: LD_VAR 0 1
39573: PPUSH
39574: CALL_OW 257
39578: PUSH
39579: LD_INT 5
39581: EQUAL
39582: NOT
39583: IFFALSE 39587
// exit ;
39585: GO 39975
// dist := 8 ;
39587: LD_ADDR_VAR 0 5
39591: PUSH
39592: LD_INT 8
39594: ST_TO_ADDR
// viewRange := 12 ;
39595: LD_ADDR_VAR 0 7
39599: PUSH
39600: LD_INT 12
39602: ST_TO_ADDR
// side := GetSide ( unit ) ;
39603: LD_ADDR_VAR 0 6
39607: PUSH
39608: LD_VAR 0 1
39612: PPUSH
39613: CALL_OW 255
39617: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39618: LD_INT 61
39620: PPUSH
39621: LD_VAR 0 6
39625: PPUSH
39626: CALL_OW 321
39630: PUSH
39631: LD_INT 2
39633: EQUAL
39634: IFFALSE 39644
// viewRange := 16 ;
39636: LD_ADDR_VAR 0 7
39640: PUSH
39641: LD_INT 16
39643: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39644: LD_VAR 0 1
39648: PPUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_VAR 0 3
39658: PPUSH
39659: CALL_OW 297
39663: PUSH
39664: LD_VAR 0 5
39668: GREATER
39669: IFFALSE 39748
// begin ComMoveXY ( unit , x , y ) ;
39671: LD_VAR 0 1
39675: PPUSH
39676: LD_VAR 0 2
39680: PPUSH
39681: LD_VAR 0 3
39685: PPUSH
39686: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39690: LD_INT 35
39692: PPUSH
39693: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39697: LD_VAR 0 1
39701: PPUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: LD_VAR 0 3
39711: PPUSH
39712: CALL 76468 0 3
39716: NOT
39717: IFFALSE 39721
// exit ;
39719: GO 39975
// until GetDistUnitXY ( unit , x , y ) < dist ;
39721: LD_VAR 0 1
39725: PPUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: LD_VAR 0 3
39735: PPUSH
39736: CALL_OW 297
39740: PUSH
39741: LD_VAR 0 5
39745: LESS
39746: IFFALSE 39690
// end ; ComTurnXY ( unit , x , y ) ;
39748: LD_VAR 0 1
39752: PPUSH
39753: LD_VAR 0 2
39757: PPUSH
39758: LD_VAR 0 3
39762: PPUSH
39763: CALL_OW 118
// wait ( 5 ) ;
39767: LD_INT 5
39769: PPUSH
39770: CALL_OW 67
// _d := GetDir ( unit ) ;
39774: LD_ADDR_VAR 0 10
39778: PUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 254
39788: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39789: LD_ADDR_VAR 0 8
39793: PUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 250
39803: PPUSH
39804: LD_VAR 0 10
39808: PPUSH
39809: LD_VAR 0 5
39813: PPUSH
39814: CALL_OW 272
39818: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39819: LD_ADDR_VAR 0 9
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 251
39833: PPUSH
39834: LD_VAR 0 10
39838: PPUSH
39839: LD_VAR 0 5
39843: PPUSH
39844: CALL_OW 273
39848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39849: LD_VAR 0 8
39853: PPUSH
39854: LD_VAR 0 9
39858: PPUSH
39859: CALL_OW 488
39863: NOT
39864: IFFALSE 39868
// exit ;
39866: GO 39975
// ComAnimCustom ( unit , 1 ) ;
39868: LD_VAR 0 1
39872: PPUSH
39873: LD_INT 1
39875: PPUSH
39876: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39880: LD_VAR 0 8
39884: PPUSH
39885: LD_VAR 0 9
39889: PPUSH
39890: LD_VAR 0 6
39894: PPUSH
39895: LD_VAR 0 7
39899: PPUSH
39900: CALL_OW 330
// repeat wait ( 1 ) ;
39904: LD_INT 1
39906: PPUSH
39907: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39911: LD_VAR 0 1
39915: PPUSH
39916: CALL_OW 316
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 314
39930: OR
39931: PUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 302
39941: NOT
39942: OR
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 301
39953: OR
39954: IFFALSE 39904
// RemoveSeeing ( _x , _y , side ) ;
39956: LD_VAR 0 8
39960: PPUSH
39961: LD_VAR 0 9
39965: PPUSH
39966: LD_VAR 0 6
39970: PPUSH
39971: CALL_OW 331
// end ; end_of_file
39975: LD_VAR 0 4
39979: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39980: LD_INT 0
39982: PPUSH
39983: PPUSH
// if exist_mode then
39984: LD_VAR 0 2
39988: IFFALSE 40013
// unit := CreateCharacter ( prefix & ident ) else
39990: LD_ADDR_VAR 0 5
39994: PUSH
39995: LD_VAR 0 3
39999: PUSH
40000: LD_VAR 0 1
40004: STR
40005: PPUSH
40006: CALL_OW 34
40010: ST_TO_ADDR
40011: GO 40028
// unit := NewCharacter ( ident ) ;
40013: LD_ADDR_VAR 0 5
40017: PUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 25
40027: ST_TO_ADDR
// result := unit ;
40028: LD_ADDR_VAR 0 4
40032: PUSH
40033: LD_VAR 0 5
40037: ST_TO_ADDR
// end ;
40038: LD_VAR 0 4
40042: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40043: LD_INT 0
40045: PPUSH
40046: PPUSH
// if not side or not nation then
40047: LD_VAR 0 1
40051: NOT
40052: PUSH
40053: LD_VAR 0 2
40057: NOT
40058: OR
40059: IFFALSE 40063
// exit ;
40061: GO 40831
// case nation of nation_american :
40063: LD_VAR 0 2
40067: PUSH
40068: LD_INT 1
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40290
40076: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40077: LD_ADDR_VAR 0 4
40081: PUSH
40082: LD_INT 35
40084: PUSH
40085: LD_INT 45
40087: PUSH
40088: LD_INT 46
40090: PUSH
40091: LD_INT 47
40093: PUSH
40094: LD_INT 82
40096: PUSH
40097: LD_INT 83
40099: PUSH
40100: LD_INT 84
40102: PUSH
40103: LD_INT 85
40105: PUSH
40106: LD_INT 86
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 6
40117: PUSH
40118: LD_INT 15
40120: PUSH
40121: LD_INT 16
40123: PUSH
40124: LD_INT 7
40126: PUSH
40127: LD_INT 12
40129: PUSH
40130: LD_INT 13
40132: PUSH
40133: LD_INT 10
40135: PUSH
40136: LD_INT 14
40138: PUSH
40139: LD_INT 20
40141: PUSH
40142: LD_INT 21
40144: PUSH
40145: LD_INT 22
40147: PUSH
40148: LD_INT 25
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: LD_INT 27
40156: PUSH
40157: LD_INT 36
40159: PUSH
40160: LD_INT 69
40162: PUSH
40163: LD_INT 39
40165: PUSH
40166: LD_INT 34
40168: PUSH
40169: LD_INT 40
40171: PUSH
40172: LD_INT 48
40174: PUSH
40175: LD_INT 49
40177: PUSH
40178: LD_INT 50
40180: PUSH
40181: LD_INT 51
40183: PUSH
40184: LD_INT 52
40186: PUSH
40187: LD_INT 53
40189: PUSH
40190: LD_INT 54
40192: PUSH
40193: LD_INT 55
40195: PUSH
40196: LD_INT 56
40198: PUSH
40199: LD_INT 57
40201: PUSH
40202: LD_INT 58
40204: PUSH
40205: LD_INT 59
40207: PUSH
40208: LD_INT 60
40210: PUSH
40211: LD_INT 61
40213: PUSH
40214: LD_INT 62
40216: PUSH
40217: LD_INT 80
40219: PUSH
40220: LD_INT 82
40222: PUSH
40223: LD_INT 83
40225: PUSH
40226: LD_INT 84
40228: PUSH
40229: LD_INT 85
40231: PUSH
40232: LD_INT 86
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
40288: GO 40755
40290: LD_INT 2
40292: DOUBLE
40293: EQUAL
40294: IFTRUE 40298
40296: GO 40524
40298: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40299: LD_ADDR_VAR 0 4
40303: PUSH
40304: LD_INT 35
40306: PUSH
40307: LD_INT 45
40309: PUSH
40310: LD_INT 46
40312: PUSH
40313: LD_INT 47
40315: PUSH
40316: LD_INT 82
40318: PUSH
40319: LD_INT 83
40321: PUSH
40322: LD_INT 84
40324: PUSH
40325: LD_INT 85
40327: PUSH
40328: LD_INT 87
40330: PUSH
40331: LD_INT 70
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 11
40339: PUSH
40340: LD_INT 3
40342: PUSH
40343: LD_INT 4
40345: PUSH
40346: LD_INT 5
40348: PUSH
40349: LD_INT 6
40351: PUSH
40352: LD_INT 15
40354: PUSH
40355: LD_INT 18
40357: PUSH
40358: LD_INT 7
40360: PUSH
40361: LD_INT 17
40363: PUSH
40364: LD_INT 8
40366: PUSH
40367: LD_INT 20
40369: PUSH
40370: LD_INT 21
40372: PUSH
40373: LD_INT 22
40375: PUSH
40376: LD_INT 72
40378: PUSH
40379: LD_INT 26
40381: PUSH
40382: LD_INT 69
40384: PUSH
40385: LD_INT 39
40387: PUSH
40388: LD_INT 40
40390: PUSH
40391: LD_INT 41
40393: PUSH
40394: LD_INT 42
40396: PUSH
40397: LD_INT 43
40399: PUSH
40400: LD_INT 48
40402: PUSH
40403: LD_INT 49
40405: PUSH
40406: LD_INT 50
40408: PUSH
40409: LD_INT 51
40411: PUSH
40412: LD_INT 52
40414: PUSH
40415: LD_INT 53
40417: PUSH
40418: LD_INT 54
40420: PUSH
40421: LD_INT 55
40423: PUSH
40424: LD_INT 56
40426: PUSH
40427: LD_INT 60
40429: PUSH
40430: LD_INT 61
40432: PUSH
40433: LD_INT 62
40435: PUSH
40436: LD_INT 66
40438: PUSH
40439: LD_INT 67
40441: PUSH
40442: LD_INT 68
40444: PUSH
40445: LD_INT 81
40447: PUSH
40448: LD_INT 82
40450: PUSH
40451: LD_INT 83
40453: PUSH
40454: LD_INT 84
40456: PUSH
40457: LD_INT 85
40459: PUSH
40460: LD_INT 87
40462: PUSH
40463: LD_INT 88
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
40522: GO 40755
40524: LD_INT 3
40526: DOUBLE
40527: EQUAL
40528: IFTRUE 40532
40530: GO 40754
40532: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40533: LD_ADDR_VAR 0 4
40537: PUSH
40538: LD_INT 46
40540: PUSH
40541: LD_INT 47
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: LD_INT 82
40552: PUSH
40553: LD_INT 83
40555: PUSH
40556: LD_INT 84
40558: PUSH
40559: LD_INT 85
40561: PUSH
40562: LD_INT 86
40564: PUSH
40565: LD_INT 11
40567: PUSH
40568: LD_INT 9
40570: PUSH
40571: LD_INT 20
40573: PUSH
40574: LD_INT 19
40576: PUSH
40577: LD_INT 21
40579: PUSH
40580: LD_INT 24
40582: PUSH
40583: LD_INT 22
40585: PUSH
40586: LD_INT 25
40588: PUSH
40589: LD_INT 28
40591: PUSH
40592: LD_INT 29
40594: PUSH
40595: LD_INT 30
40597: PUSH
40598: LD_INT 31
40600: PUSH
40601: LD_INT 37
40603: PUSH
40604: LD_INT 38
40606: PUSH
40607: LD_INT 32
40609: PUSH
40610: LD_INT 27
40612: PUSH
40613: LD_INT 33
40615: PUSH
40616: LD_INT 69
40618: PUSH
40619: LD_INT 39
40621: PUSH
40622: LD_INT 34
40624: PUSH
40625: LD_INT 40
40627: PUSH
40628: LD_INT 71
40630: PUSH
40631: LD_INT 23
40633: PUSH
40634: LD_INT 44
40636: PUSH
40637: LD_INT 48
40639: PUSH
40640: LD_INT 49
40642: PUSH
40643: LD_INT 50
40645: PUSH
40646: LD_INT 51
40648: PUSH
40649: LD_INT 52
40651: PUSH
40652: LD_INT 53
40654: PUSH
40655: LD_INT 54
40657: PUSH
40658: LD_INT 55
40660: PUSH
40661: LD_INT 56
40663: PUSH
40664: LD_INT 57
40666: PUSH
40667: LD_INT 58
40669: PUSH
40670: LD_INT 59
40672: PUSH
40673: LD_INT 63
40675: PUSH
40676: LD_INT 64
40678: PUSH
40679: LD_INT 65
40681: PUSH
40682: LD_INT 82
40684: PUSH
40685: LD_INT 83
40687: PUSH
40688: LD_INT 84
40690: PUSH
40691: LD_INT 85
40693: PUSH
40694: LD_INT 86
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
40752: GO 40755
40754: POP
// if state > - 1 and state < 3 then
40755: LD_VAR 0 3
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: GREATER
40764: PUSH
40765: LD_VAR 0 3
40769: PUSH
40770: LD_INT 3
40772: LESS
40773: AND
40774: IFFALSE 40831
// for i in result do
40776: LD_ADDR_VAR 0 5
40780: PUSH
40781: LD_VAR 0 4
40785: PUSH
40786: FOR_IN
40787: IFFALSE 40829
// if GetTech ( i , side ) <> state then
40789: LD_VAR 0 5
40793: PPUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 321
40803: PUSH
40804: LD_VAR 0 3
40808: NONEQUAL
40809: IFFALSE 40827
// result := result diff i ;
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: LD_VAR 0 4
40820: PUSH
40821: LD_VAR 0 5
40825: DIFF
40826: ST_TO_ADDR
40827: GO 40786
40829: POP
40830: POP
// end ;
40831: LD_VAR 0 4
40835: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40836: LD_INT 0
40838: PPUSH
40839: PPUSH
40840: PPUSH
// result := true ;
40841: LD_ADDR_VAR 0 3
40845: PUSH
40846: LD_INT 1
40848: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40849: LD_ADDR_VAR 0 5
40853: PUSH
40854: LD_VAR 0 2
40858: PPUSH
40859: CALL_OW 480
40863: ST_TO_ADDR
// if not tmp then
40864: LD_VAR 0 5
40868: NOT
40869: IFFALSE 40873
// exit ;
40871: GO 40922
// for i in tmp do
40873: LD_ADDR_VAR 0 4
40877: PUSH
40878: LD_VAR 0 5
40882: PUSH
40883: FOR_IN
40884: IFFALSE 40920
// if GetTech ( i , side ) <> state_researched then
40886: LD_VAR 0 4
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL_OW 321
40900: PUSH
40901: LD_INT 2
40903: NONEQUAL
40904: IFFALSE 40918
// begin result := false ;
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_INT 0
40913: ST_TO_ADDR
// exit ;
40914: POP
40915: POP
40916: GO 40922
// end ;
40918: GO 40883
40920: POP
40921: POP
// end ;
40922: LD_VAR 0 3
40926: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40927: LD_INT 0
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40942: LD_VAR 0 1
40946: NOT
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 257
40957: PUSH
40958: LD_INT 9
40960: NONEQUAL
40961: OR
40962: IFFALSE 40966
// exit ;
40964: GO 41539
// side := GetSide ( unit ) ;
40966: LD_ADDR_VAR 0 9
40970: PUSH
40971: LD_VAR 0 1
40975: PPUSH
40976: CALL_OW 255
40980: ST_TO_ADDR
// tech_space := tech_spacanom ;
40981: LD_ADDR_VAR 0 12
40985: PUSH
40986: LD_INT 29
40988: ST_TO_ADDR
// tech_time := tech_taurad ;
40989: LD_ADDR_VAR 0 13
40993: PUSH
40994: LD_INT 28
40996: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40997: LD_ADDR_VAR 0 11
41001: PUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 310
41011: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41012: LD_VAR 0 11
41016: PPUSH
41017: CALL_OW 247
41021: PUSH
41022: LD_INT 2
41024: EQUAL
41025: IFFALSE 41029
// exit ;
41027: GO 41539
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41029: LD_ADDR_VAR 0 8
41033: PUSH
41034: LD_INT 81
41036: PUSH
41037: LD_VAR 0 9
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: LD_INT 21
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PPUSH
41067: CALL_OW 69
41071: ST_TO_ADDR
// if not tmp then
41072: LD_VAR 0 8
41076: NOT
41077: IFFALSE 41081
// exit ;
41079: GO 41539
// if in_unit then
41081: LD_VAR 0 11
41085: IFFALSE 41109
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41087: LD_ADDR_VAR 0 10
41091: PUSH
41092: LD_VAR 0 8
41096: PPUSH
41097: LD_VAR 0 11
41101: PPUSH
41102: CALL_OW 74
41106: ST_TO_ADDR
41107: GO 41129
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41109: LD_ADDR_VAR 0 10
41113: PUSH
41114: LD_VAR 0 8
41118: PPUSH
41119: LD_VAR 0 1
41123: PPUSH
41124: CALL_OW 74
41128: ST_TO_ADDR
// if not enemy then
41129: LD_VAR 0 10
41133: NOT
41134: IFFALSE 41138
// exit ;
41136: GO 41539
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41138: LD_VAR 0 11
41142: PUSH
41143: LD_VAR 0 11
41147: PPUSH
41148: LD_VAR 0 10
41152: PPUSH
41153: CALL_OW 296
41157: PUSH
41158: LD_INT 13
41160: GREATER
41161: AND
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: LD_VAR 0 10
41172: PPUSH
41173: CALL_OW 296
41177: PUSH
41178: LD_INT 12
41180: GREATER
41181: OR
41182: IFFALSE 41186
// exit ;
41184: GO 41539
// missile := [ 1 ] ;
41186: LD_ADDR_VAR 0 14
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41197: LD_VAR 0 9
41201: PPUSH
41202: LD_VAR 0 12
41206: PPUSH
41207: CALL_OW 325
41211: IFFALSE 41240
// missile := Replace ( missile , missile + 1 , 2 ) ;
41213: LD_ADDR_VAR 0 14
41217: PUSH
41218: LD_VAR 0 14
41222: PPUSH
41223: LD_VAR 0 14
41227: PUSH
41228: LD_INT 1
41230: PLUS
41231: PPUSH
41232: LD_INT 2
41234: PPUSH
41235: CALL_OW 1
41239: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41240: LD_VAR 0 9
41244: PPUSH
41245: LD_VAR 0 13
41249: PPUSH
41250: CALL_OW 325
41254: PUSH
41255: LD_VAR 0 10
41259: PPUSH
41260: CALL_OW 255
41264: PPUSH
41265: LD_VAR 0 13
41269: PPUSH
41270: CALL_OW 325
41274: NOT
41275: AND
41276: IFFALSE 41305
// missile := Replace ( missile , missile + 1 , 3 ) ;
41278: LD_ADDR_VAR 0 14
41282: PUSH
41283: LD_VAR 0 14
41287: PPUSH
41288: LD_VAR 0 14
41292: PUSH
41293: LD_INT 1
41295: PLUS
41296: PPUSH
41297: LD_INT 3
41299: PPUSH
41300: CALL_OW 1
41304: ST_TO_ADDR
// if missile < 2 then
41305: LD_VAR 0 14
41309: PUSH
41310: LD_INT 2
41312: LESS
41313: IFFALSE 41317
// exit ;
41315: GO 41539
// x := GetX ( enemy ) ;
41317: LD_ADDR_VAR 0 4
41321: PUSH
41322: LD_VAR 0 10
41326: PPUSH
41327: CALL_OW 250
41331: ST_TO_ADDR
// y := GetY ( enemy ) ;
41332: LD_ADDR_VAR 0 5
41336: PUSH
41337: LD_VAR 0 10
41341: PPUSH
41342: CALL_OW 251
41346: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41347: LD_ADDR_VAR 0 6
41351: PUSH
41352: LD_VAR 0 4
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PPUSH
41361: LD_INT 1
41363: PPUSH
41364: CALL_OW 12
41368: PLUS
41369: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41370: LD_ADDR_VAR 0 7
41374: PUSH
41375: LD_VAR 0 5
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PPUSH
41384: LD_INT 1
41386: PPUSH
41387: CALL_OW 12
41391: PLUS
41392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41393: LD_VAR 0 6
41397: PPUSH
41398: LD_VAR 0 7
41402: PPUSH
41403: CALL_OW 488
41407: NOT
41408: IFFALSE 41430
// begin _x := x ;
41410: LD_ADDR_VAR 0 6
41414: PUSH
41415: LD_VAR 0 4
41419: ST_TO_ADDR
// _y := y ;
41420: LD_ADDR_VAR 0 7
41424: PUSH
41425: LD_VAR 0 5
41429: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41430: LD_ADDR_VAR 0 3
41434: PUSH
41435: LD_INT 1
41437: PPUSH
41438: LD_VAR 0 14
41442: PPUSH
41443: CALL_OW 12
41447: ST_TO_ADDR
// case i of 1 :
41448: LD_VAR 0 3
41452: PUSH
41453: LD_INT 1
41455: DOUBLE
41456: EQUAL
41457: IFTRUE 41461
41459: GO 41478
41461: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41462: LD_VAR 0 1
41466: PPUSH
41467: LD_VAR 0 10
41471: PPUSH
41472: CALL_OW 115
41476: GO 41539
41478: LD_INT 2
41480: DOUBLE
41481: EQUAL
41482: IFTRUE 41486
41484: GO 41508
41486: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41487: LD_VAR 0 1
41491: PPUSH
41492: LD_VAR 0 6
41496: PPUSH
41497: LD_VAR 0 7
41501: PPUSH
41502: CALL_OW 153
41506: GO 41539
41508: LD_INT 3
41510: DOUBLE
41511: EQUAL
41512: IFTRUE 41516
41514: GO 41538
41516: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41517: LD_VAR 0 1
41521: PPUSH
41522: LD_VAR 0 6
41526: PPUSH
41527: LD_VAR 0 7
41531: PPUSH
41532: CALL_OW 154
41536: GO 41539
41538: POP
// end ;
41539: LD_VAR 0 2
41543: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41544: LD_INT 0
41546: PPUSH
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
// if not unit or not building then
41552: LD_VAR 0 1
41556: NOT
41557: PUSH
41558: LD_VAR 0 2
41562: NOT
41563: OR
41564: IFFALSE 41568
// exit ;
41566: GO 41726
// x := GetX ( building ) ;
41568: LD_ADDR_VAR 0 5
41572: PUSH
41573: LD_VAR 0 2
41577: PPUSH
41578: CALL_OW 250
41582: ST_TO_ADDR
// y := GetY ( building ) ;
41583: LD_ADDR_VAR 0 6
41587: PUSH
41588: LD_VAR 0 2
41592: PPUSH
41593: CALL_OW 251
41597: ST_TO_ADDR
// for i = 0 to 5 do
41598: LD_ADDR_VAR 0 4
41602: PUSH
41603: DOUBLE
41604: LD_INT 0
41606: DEC
41607: ST_TO_ADDR
41608: LD_INT 5
41610: PUSH
41611: FOR_TO
41612: IFFALSE 41724
// begin _x := ShiftX ( x , i , 3 ) ;
41614: LD_ADDR_VAR 0 7
41618: PUSH
41619: LD_VAR 0 5
41623: PPUSH
41624: LD_VAR 0 4
41628: PPUSH
41629: LD_INT 3
41631: PPUSH
41632: CALL_OW 272
41636: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41637: LD_ADDR_VAR 0 8
41641: PUSH
41642: LD_VAR 0 6
41646: PPUSH
41647: LD_VAR 0 4
41651: PPUSH
41652: LD_INT 3
41654: PPUSH
41655: CALL_OW 273
41659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41660: LD_VAR 0 7
41664: PPUSH
41665: LD_VAR 0 8
41669: PPUSH
41670: CALL_OW 488
41674: NOT
41675: IFFALSE 41679
// continue ;
41677: GO 41611
// if HexInfo ( _x , _y ) = 0 then
41679: LD_VAR 0 7
41683: PPUSH
41684: LD_VAR 0 8
41688: PPUSH
41689: CALL_OW 428
41693: PUSH
41694: LD_INT 0
41696: EQUAL
41697: IFFALSE 41722
// begin ComMoveXY ( unit , _x , _y ) ;
41699: LD_VAR 0 1
41703: PPUSH
41704: LD_VAR 0 7
41708: PPUSH
41709: LD_VAR 0 8
41713: PPUSH
41714: CALL_OW 111
// exit ;
41718: POP
41719: POP
41720: GO 41726
// end ; end ;
41722: GO 41611
41724: POP
41725: POP
// end ;
41726: LD_VAR 0 3
41730: RET
// export function ScanBase ( side , base_area ) ; begin
41731: LD_INT 0
41733: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41734: LD_ADDR_VAR 0 3
41738: PUSH
41739: LD_VAR 0 2
41743: PPUSH
41744: LD_INT 81
41746: PUSH
41747: LD_VAR 0 1
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PPUSH
41756: CALL_OW 70
41760: ST_TO_ADDR
// end ;
41761: LD_VAR 0 3
41765: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41766: LD_INT 0
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
// result := false ;
41772: LD_ADDR_VAR 0 2
41776: PUSH
41777: LD_INT 0
41779: ST_TO_ADDR
// side := GetSide ( unit ) ;
41780: LD_ADDR_VAR 0 3
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 255
41794: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41795: LD_ADDR_VAR 0 4
41799: PUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL_OW 248
41809: ST_TO_ADDR
// case nat of 1 :
41810: LD_VAR 0 4
41814: PUSH
41815: LD_INT 1
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41823
41821: GO 41834
41823: POP
// tech := tech_lassight ; 2 :
41824: LD_ADDR_VAR 0 5
41828: PUSH
41829: LD_INT 12
41831: ST_TO_ADDR
41832: GO 41873
41834: LD_INT 2
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41842
41840: GO 41853
41842: POP
// tech := tech_mortar ; 3 :
41843: LD_ADDR_VAR 0 5
41847: PUSH
41848: LD_INT 41
41850: ST_TO_ADDR
41851: GO 41873
41853: LD_INT 3
41855: DOUBLE
41856: EQUAL
41857: IFTRUE 41861
41859: GO 41872
41861: POP
// tech := tech_bazooka ; end ;
41862: LD_ADDR_VAR 0 5
41866: PUSH
41867: LD_INT 44
41869: ST_TO_ADDR
41870: GO 41873
41872: POP
// if Researched ( side , tech ) then
41873: LD_VAR 0 3
41877: PPUSH
41878: LD_VAR 0 5
41882: PPUSH
41883: CALL_OW 325
41887: IFFALSE 41914
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41889: LD_ADDR_VAR 0 2
41893: PUSH
41894: LD_INT 5
41896: PUSH
41897: LD_INT 8
41899: PUSH
41900: LD_INT 9
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: PUSH
41908: LD_VAR 0 4
41912: ARRAY
41913: ST_TO_ADDR
// end ;
41914: LD_VAR 0 2
41918: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41919: LD_INT 0
41921: PPUSH
41922: PPUSH
41923: PPUSH
// if not mines then
41924: LD_VAR 0 2
41928: NOT
41929: IFFALSE 41933
// exit ;
41931: GO 42077
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41933: LD_ADDR_VAR 0 5
41937: PUSH
41938: LD_INT 81
41940: PUSH
41941: LD_VAR 0 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 3
41952: PUSH
41953: LD_INT 21
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PPUSH
41971: CALL_OW 69
41975: ST_TO_ADDR
// for i in mines do
41976: LD_ADDR_VAR 0 4
41980: PUSH
41981: LD_VAR 0 2
41985: PUSH
41986: FOR_IN
41987: IFFALSE 42075
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41989: LD_VAR 0 4
41993: PUSH
41994: LD_INT 1
41996: ARRAY
41997: PPUSH
41998: LD_VAR 0 4
42002: PUSH
42003: LD_INT 2
42005: ARRAY
42006: PPUSH
42007: CALL_OW 458
42011: NOT
42012: IFFALSE 42016
// continue ;
42014: GO 41986
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42016: LD_VAR 0 4
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PPUSH
42025: LD_VAR 0 4
42029: PUSH
42030: LD_INT 2
42032: ARRAY
42033: PPUSH
42034: CALL_OW 428
42038: PUSH
42039: LD_VAR 0 5
42043: IN
42044: IFFALSE 42073
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42046: LD_VAR 0 4
42050: PUSH
42051: LD_INT 1
42053: ARRAY
42054: PPUSH
42055: LD_VAR 0 4
42059: PUSH
42060: LD_INT 2
42062: ARRAY
42063: PPUSH
42064: LD_VAR 0 1
42068: PPUSH
42069: CALL_OW 456
// end ;
42073: GO 41986
42075: POP
42076: POP
// end ;
42077: LD_VAR 0 3
42081: RET
// export function Count ( array ) ; begin
42082: LD_INT 0
42084: PPUSH
// result := array + 0 ;
42085: LD_ADDR_VAR 0 2
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: LD_INT 0
42097: PLUS
42098: ST_TO_ADDR
// end ;
42099: LD_VAR 0 2
42103: RET
// export function IsEmpty ( building ) ; begin
42104: LD_INT 0
42106: PPUSH
// if not building then
42107: LD_VAR 0 1
42111: NOT
42112: IFFALSE 42116
// exit ;
42114: GO 42159
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42116: LD_ADDR_VAR 0 2
42120: PUSH
42121: LD_VAR 0 1
42125: PUSH
42126: LD_INT 22
42128: PUSH
42129: LD_VAR 0 1
42133: PPUSH
42134: CALL_OW 255
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 58
42145: PUSH
42146: EMPTY
42147: LIST
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PPUSH
42153: CALL_OW 69
42157: IN
42158: ST_TO_ADDR
// end ;
42159: LD_VAR 0 2
42163: RET
// export function IsNotFull ( building ) ; var places ; begin
42164: LD_INT 0
42166: PPUSH
42167: PPUSH
// if not building then
42168: LD_VAR 0 1
42172: NOT
42173: IFFALSE 42177
// exit ;
42175: GO 42205
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42177: LD_ADDR_VAR 0 2
42181: PUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: LD_INT 3
42189: PUSH
42190: LD_INT 62
42192: PUSH
42193: EMPTY
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PPUSH
42200: CALL_OW 72
42204: ST_TO_ADDR
// end ;
42205: LD_VAR 0 2
42209: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42210: LD_INT 0
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
// tmp := [ ] ;
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: EMPTY
42222: ST_TO_ADDR
// list := [ ] ;
42223: LD_ADDR_VAR 0 5
42227: PUSH
42228: EMPTY
42229: ST_TO_ADDR
// for i = 16 to 25 do
42230: LD_ADDR_VAR 0 4
42234: PUSH
42235: DOUBLE
42236: LD_INT 16
42238: DEC
42239: ST_TO_ADDR
42240: LD_INT 25
42242: PUSH
42243: FOR_TO
42244: IFFALSE 42317
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_VAR 0 3
42255: PUSH
42256: LD_INT 22
42258: PUSH
42259: LD_VAR 0 1
42263: PPUSH
42264: CALL_OW 255
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 91
42275: PUSH
42276: LD_VAR 0 1
42280: PUSH
42281: LD_INT 6
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 30
42291: PUSH
42292: LD_VAR 0 4
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: PUSH
42306: EMPTY
42307: LIST
42308: PPUSH
42309: CALL_OW 69
42313: ADD
42314: ST_TO_ADDR
42315: GO 42243
42317: POP
42318: POP
// for i = 1 to tmp do
42319: LD_ADDR_VAR 0 4
42323: PUSH
42324: DOUBLE
42325: LD_INT 1
42327: DEC
42328: ST_TO_ADDR
42329: LD_VAR 0 3
42333: PUSH
42334: FOR_TO
42335: IFFALSE 42423
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42337: LD_ADDR_VAR 0 5
42341: PUSH
42342: LD_VAR 0 5
42346: PUSH
42347: LD_VAR 0 3
42351: PUSH
42352: LD_VAR 0 4
42356: ARRAY
42357: PPUSH
42358: CALL_OW 266
42362: PUSH
42363: LD_VAR 0 3
42367: PUSH
42368: LD_VAR 0 4
42372: ARRAY
42373: PPUSH
42374: CALL_OW 250
42378: PUSH
42379: LD_VAR 0 3
42383: PUSH
42384: LD_VAR 0 4
42388: ARRAY
42389: PPUSH
42390: CALL_OW 251
42394: PUSH
42395: LD_VAR 0 3
42399: PUSH
42400: LD_VAR 0 4
42404: ARRAY
42405: PPUSH
42406: CALL_OW 254
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: ADD
42420: ST_TO_ADDR
42421: GO 42334
42423: POP
42424: POP
// result := list ;
42425: LD_ADDR_VAR 0 2
42429: PUSH
42430: LD_VAR 0 5
42434: ST_TO_ADDR
// end ;
42435: LD_VAR 0 2
42439: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42440: LD_INT 0
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
// if not factory then
42449: LD_VAR 0 1
42453: NOT
42454: IFFALSE 42458
// exit ;
42456: GO 43051
// if control = control_apeman then
42458: LD_VAR 0 4
42462: PUSH
42463: LD_INT 5
42465: EQUAL
42466: IFFALSE 42575
// begin tmp := UnitsInside ( factory ) ;
42468: LD_ADDR_VAR 0 8
42472: PUSH
42473: LD_VAR 0 1
42477: PPUSH
42478: CALL_OW 313
42482: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42483: LD_VAR 0 8
42487: PPUSH
42488: LD_INT 25
42490: PUSH
42491: LD_INT 12
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PPUSH
42498: CALL_OW 72
42502: NOT
42503: IFFALSE 42513
// control := control_manual ;
42505: LD_ADDR_VAR 0 4
42509: PUSH
42510: LD_INT 1
42512: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42513: LD_ADDR_VAR 0 8
42517: PUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: CALL 42210 0 1
42527: ST_TO_ADDR
// if tmp then
42528: LD_VAR 0 8
42532: IFFALSE 42575
// begin for i in tmp do
42534: LD_ADDR_VAR 0 7
42538: PUSH
42539: LD_VAR 0 8
42543: PUSH
42544: FOR_IN
42545: IFFALSE 42573
// if i [ 1 ] = b_ext_radio then
42547: LD_VAR 0 7
42551: PUSH
42552: LD_INT 1
42554: ARRAY
42555: PUSH
42556: LD_INT 22
42558: EQUAL
42559: IFFALSE 42571
// begin control := control_remote ;
42561: LD_ADDR_VAR 0 4
42565: PUSH
42566: LD_INT 2
42568: ST_TO_ADDR
// break ;
42569: GO 42573
// end ;
42571: GO 42544
42573: POP
42574: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42575: LD_VAR 0 1
42579: PPUSH
42580: LD_VAR 0 2
42584: PPUSH
42585: LD_VAR 0 3
42589: PPUSH
42590: LD_VAR 0 4
42594: PPUSH
42595: LD_VAR 0 5
42599: PPUSH
42600: CALL_OW 448
42604: IFFALSE 42639
// begin result := [ chassis , engine , control , weapon ] ;
42606: LD_ADDR_VAR 0 6
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_VAR 0 3
42620: PUSH
42621: LD_VAR 0 4
42625: PUSH
42626: LD_VAR 0 5
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
// exit ;
42637: GO 43051
// end ; _chassis := AvailableChassisList ( factory ) ;
42639: LD_ADDR_VAR 0 9
42643: PUSH
42644: LD_VAR 0 1
42648: PPUSH
42649: CALL_OW 475
42653: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42654: LD_ADDR_VAR 0 11
42658: PUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: CALL_OW 476
42668: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42669: LD_ADDR_VAR 0 12
42673: PUSH
42674: LD_VAR 0 1
42678: PPUSH
42679: CALL_OW 477
42683: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42684: LD_ADDR_VAR 0 10
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 478
42698: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42699: LD_VAR 0 9
42703: NOT
42704: PUSH
42705: LD_VAR 0 11
42709: NOT
42710: OR
42711: PUSH
42712: LD_VAR 0 12
42716: NOT
42717: OR
42718: PUSH
42719: LD_VAR 0 10
42723: NOT
42724: OR
42725: IFFALSE 42760
// begin result := [ chassis , engine , control , weapon ] ;
42727: LD_ADDR_VAR 0 6
42731: PUSH
42732: LD_VAR 0 2
42736: PUSH
42737: LD_VAR 0 3
42741: PUSH
42742: LD_VAR 0 4
42746: PUSH
42747: LD_VAR 0 5
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// exit ;
42758: GO 43051
// end ; if not chassis in _chassis then
42760: LD_VAR 0 2
42764: PUSH
42765: LD_VAR 0 9
42769: IN
42770: NOT
42771: IFFALSE 42797
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42773: LD_ADDR_VAR 0 2
42777: PUSH
42778: LD_VAR 0 9
42782: PUSH
42783: LD_INT 1
42785: PPUSH
42786: LD_VAR 0 9
42790: PPUSH
42791: CALL_OW 12
42795: ARRAY
42796: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42797: LD_VAR 0 2
42801: PPUSH
42802: LD_VAR 0 3
42806: PPUSH
42807: CALL 43056 0 2
42811: NOT
42812: IFFALSE 42871
// repeat engine := _engine [ 1 ] ;
42814: LD_ADDR_VAR 0 3
42818: PUSH
42819: LD_VAR 0 11
42823: PUSH
42824: LD_INT 1
42826: ARRAY
42827: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42828: LD_ADDR_VAR 0 11
42832: PUSH
42833: LD_VAR 0 11
42837: PPUSH
42838: LD_INT 1
42840: PPUSH
42841: CALL_OW 3
42845: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_VAR 0 3
42855: PPUSH
42856: CALL 43056 0 2
42860: PUSH
42861: LD_VAR 0 11
42865: PUSH
42866: EMPTY
42867: EQUAL
42868: OR
42869: IFFALSE 42814
// if not control in _control then
42871: LD_VAR 0 4
42875: PUSH
42876: LD_VAR 0 12
42880: IN
42881: NOT
42882: IFFALSE 42908
// control := _control [ rand ( 1 , _control ) ] ;
42884: LD_ADDR_VAR 0 4
42888: PUSH
42889: LD_VAR 0 12
42893: PUSH
42894: LD_INT 1
42896: PPUSH
42897: LD_VAR 0 12
42901: PPUSH
42902: CALL_OW 12
42906: ARRAY
42907: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42908: LD_VAR 0 2
42912: PPUSH
42913: LD_VAR 0 5
42917: PPUSH
42918: CALL 43276 0 2
42922: NOT
42923: IFFALSE 42982
// repeat weapon := _weapon [ 1 ] ;
42925: LD_ADDR_VAR 0 5
42929: PUSH
42930: LD_VAR 0 10
42934: PUSH
42935: LD_INT 1
42937: ARRAY
42938: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42939: LD_ADDR_VAR 0 10
42943: PUSH
42944: LD_VAR 0 10
42948: PPUSH
42949: LD_INT 1
42951: PPUSH
42952: CALL_OW 3
42956: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42957: LD_VAR 0 2
42961: PPUSH
42962: LD_VAR 0 5
42966: PPUSH
42967: CALL 43276 0 2
42971: PUSH
42972: LD_VAR 0 10
42976: PUSH
42977: EMPTY
42978: EQUAL
42979: OR
42980: IFFALSE 42925
// result := [ ] ;
42982: LD_ADDR_VAR 0 6
42986: PUSH
42987: EMPTY
42988: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42989: LD_VAR 0 1
42993: PPUSH
42994: LD_VAR 0 2
42998: PPUSH
42999: LD_VAR 0 3
43003: PPUSH
43004: LD_VAR 0 4
43008: PPUSH
43009: LD_VAR 0 5
43013: PPUSH
43014: CALL_OW 448
43018: IFFALSE 43051
// result := [ chassis , engine , control , weapon ] ;
43020: LD_ADDR_VAR 0 6
43024: PUSH
43025: LD_VAR 0 2
43029: PUSH
43030: LD_VAR 0 3
43034: PUSH
43035: LD_VAR 0 4
43039: PUSH
43040: LD_VAR 0 5
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: ST_TO_ADDR
// end ;
43051: LD_VAR 0 6
43055: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43056: LD_INT 0
43058: PPUSH
// if not chassis or not engine then
43059: LD_VAR 0 1
43063: NOT
43064: PUSH
43065: LD_VAR 0 2
43069: NOT
43070: OR
43071: IFFALSE 43075
// exit ;
43073: GO 43271
// case engine of engine_solar :
43075: LD_VAR 0 2
43079: PUSH
43080: LD_INT 2
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43126
43088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 11
43096: PUSH
43097: LD_INT 12
43099: PUSH
43100: LD_INT 13
43102: PUSH
43103: LD_INT 14
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
43124: GO 43255
43126: LD_INT 1
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43134
43132: GO 43196
43134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43135: LD_ADDR_VAR 0 3
43139: PUSH
43140: LD_INT 11
43142: PUSH
43143: LD_INT 12
43145: PUSH
43146: LD_INT 13
43148: PUSH
43149: LD_INT 14
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 4
43163: PUSH
43164: LD_INT 5
43166: PUSH
43167: LD_INT 21
43169: PUSH
43170: LD_INT 23
43172: PUSH
43173: LD_INT 22
43175: PUSH
43176: LD_INT 24
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: ST_TO_ADDR
43194: GO 43255
43196: LD_INT 3
43198: DOUBLE
43199: EQUAL
43200: IFTRUE 43204
43202: GO 43254
43204: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_INT 13
43212: PUSH
43213: LD_INT 14
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: LD_INT 4
43224: PUSH
43225: LD_INT 5
43227: PUSH
43228: LD_INT 21
43230: PUSH
43231: LD_INT 22
43233: PUSH
43234: LD_INT 23
43236: PUSH
43237: LD_INT 24
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
43252: GO 43255
43254: POP
// result := ( chassis in result ) ;
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_VAR 0 1
43264: PUSH
43265: LD_VAR 0 3
43269: IN
43270: ST_TO_ADDR
// end ;
43271: LD_VAR 0 3
43275: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43276: LD_INT 0
43278: PPUSH
// if not chassis or not weapon then
43279: LD_VAR 0 1
43283: NOT
43284: PUSH
43285: LD_VAR 0 2
43289: NOT
43290: OR
43291: IFFALSE 43295
// exit ;
43293: GO 44355
// case weapon of us_machine_gun :
43295: LD_VAR 0 2
43299: PUSH
43300: LD_INT 2
43302: DOUBLE
43303: EQUAL
43304: IFTRUE 43308
43306: GO 43338
43308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43309: LD_ADDR_VAR 0 3
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 3
43322: PUSH
43323: LD_INT 4
43325: PUSH
43326: LD_INT 5
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
43336: GO 44339
43338: LD_INT 3
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43376
43346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: LD_INT 4
43363: PUSH
43364: LD_INT 5
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
43374: GO 44339
43376: LD_INT 11
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43414
43384: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 4
43401: PUSH
43402: LD_INT 5
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
43412: GO 44339
43414: LD_INT 4
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43448
43422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 44339
43448: LD_INT 5
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43482
43456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: LD_INT 4
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 44339
43482: LD_INT 9
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43516
43490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: LD_INT 4
43504: PUSH
43505: LD_INT 5
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
43514: GO 44339
43516: LD_INT 7
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43550
43524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 4
43538: PUSH
43539: LD_INT 5
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44339
43550: LD_INT 12
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43584
43558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 3
43569: PUSH
43570: LD_INT 4
43572: PUSH
43573: LD_INT 5
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
43582: GO 44339
43584: LD_INT 13
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43618
43592: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: LD_INT 4
43606: PUSH
43607: LD_INT 5
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 44339
43618: LD_INT 14
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43644
43626: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 4
43634: PUSH
43635: LD_INT 5
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: ST_TO_ADDR
43642: GO 44339
43644: LD_INT 6
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43670
43652: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: LD_INT 4
43660: PUSH
43661: LD_INT 5
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: ST_TO_ADDR
43668: GO 44339
43670: LD_INT 10
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43696
43678: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_INT 4
43686: PUSH
43687: LD_INT 5
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: ST_TO_ADDR
43694: GO 44339
43696: LD_INT 22
43698: DOUBLE
43699: EQUAL
43700: IFTRUE 43704
43702: GO 43730
43704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43705: LD_ADDR_VAR 0 3
43709: PUSH
43710: LD_INT 11
43712: PUSH
43713: LD_INT 12
43715: PUSH
43716: LD_INT 13
43718: PUSH
43719: LD_INT 14
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
43728: GO 44339
43730: LD_INT 23
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43764
43738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 11
43746: PUSH
43747: LD_INT 12
43749: PUSH
43750: LD_INT 13
43752: PUSH
43753: LD_INT 14
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
43762: GO 44339
43764: LD_INT 24
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 43798
43772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_INT 11
43780: PUSH
43781: LD_INT 12
43783: PUSH
43784: LD_INT 13
43786: PUSH
43787: LD_INT 14
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
43796: GO 44339
43798: LD_INT 30
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43832
43806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_INT 11
43814: PUSH
43815: LD_INT 12
43817: PUSH
43818: LD_INT 13
43820: PUSH
43821: LD_INT 14
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
43830: GO 44339
43832: LD_INT 25
43834: DOUBLE
43835: EQUAL
43836: IFTRUE 43840
43838: GO 43858
43840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43841: LD_ADDR_VAR 0 3
43845: PUSH
43846: LD_INT 13
43848: PUSH
43849: LD_INT 14
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: ST_TO_ADDR
43856: GO 44339
43858: LD_INT 27
43860: DOUBLE
43861: EQUAL
43862: IFTRUE 43866
43864: GO 43884
43866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_INT 13
43874: PUSH
43875: LD_INT 14
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: ST_TO_ADDR
43882: GO 44339
43884: LD_INT 92
43886: DOUBLE
43887: EQUAL
43888: IFTRUE 43892
43890: GO 43918
43892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43893: LD_ADDR_VAR 0 3
43897: PUSH
43898: LD_INT 11
43900: PUSH
43901: LD_INT 12
43903: PUSH
43904: LD_INT 13
43906: PUSH
43907: LD_INT 14
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: ST_TO_ADDR
43916: GO 44339
43918: LD_INT 28
43920: DOUBLE
43921: EQUAL
43922: IFTRUE 43926
43924: GO 43944
43926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43927: LD_ADDR_VAR 0 3
43931: PUSH
43932: LD_INT 13
43934: PUSH
43935: LD_INT 14
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: ST_TO_ADDR
43942: GO 44339
43944: LD_INT 29
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43952
43950: GO 43970
43952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_INT 13
43960: PUSH
43961: LD_INT 14
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: ST_TO_ADDR
43968: GO 44339
43970: LD_INT 31
43972: DOUBLE
43973: EQUAL
43974: IFTRUE 43978
43976: GO 43996
43978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43979: LD_ADDR_VAR 0 3
43983: PUSH
43984: LD_INT 13
43986: PUSH
43987: LD_INT 14
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: ST_TO_ADDR
43994: GO 44339
43996: LD_INT 26
43998: DOUBLE
43999: EQUAL
44000: IFTRUE 44004
44002: GO 44022
44004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44005: LD_ADDR_VAR 0 3
44009: PUSH
44010: LD_INT 13
44012: PUSH
44013: LD_INT 14
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: ST_TO_ADDR
44020: GO 44339
44022: LD_INT 42
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44056
44030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_INT 21
44038: PUSH
44039: LD_INT 22
44041: PUSH
44042: LD_INT 23
44044: PUSH
44045: LD_INT 24
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
44054: GO 44339
44056: LD_INT 43
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44064
44062: GO 44090
44064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44065: LD_ADDR_VAR 0 3
44069: PUSH
44070: LD_INT 21
44072: PUSH
44073: LD_INT 22
44075: PUSH
44076: LD_INT 23
44078: PUSH
44079: LD_INT 24
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
44088: GO 44339
44090: LD_INT 44
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44098
44096: GO 44124
44098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 21
44106: PUSH
44107: LD_INT 22
44109: PUSH
44110: LD_INT 23
44112: PUSH
44113: LD_INT 24
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
44122: GO 44339
44124: LD_INT 45
44126: DOUBLE
44127: EQUAL
44128: IFTRUE 44132
44130: GO 44158
44132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44133: LD_ADDR_VAR 0 3
44137: PUSH
44138: LD_INT 21
44140: PUSH
44141: LD_INT 22
44143: PUSH
44144: LD_INT 23
44146: PUSH
44147: LD_INT 24
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: ST_TO_ADDR
44156: GO 44339
44158: LD_INT 49
44160: DOUBLE
44161: EQUAL
44162: IFTRUE 44166
44164: GO 44192
44166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_INT 21
44174: PUSH
44175: LD_INT 22
44177: PUSH
44178: LD_INT 23
44180: PUSH
44181: LD_INT 24
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
44190: GO 44339
44192: LD_INT 51
44194: DOUBLE
44195: EQUAL
44196: IFTRUE 44200
44198: GO 44226
44200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44201: LD_ADDR_VAR 0 3
44205: PUSH
44206: LD_INT 21
44208: PUSH
44209: LD_INT 22
44211: PUSH
44212: LD_INT 23
44214: PUSH
44215: LD_INT 24
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
44224: GO 44339
44226: LD_INT 52
44228: DOUBLE
44229: EQUAL
44230: IFTRUE 44234
44232: GO 44260
44234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_INT 21
44242: PUSH
44243: LD_INT 22
44245: PUSH
44246: LD_INT 23
44248: PUSH
44249: LD_INT 24
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: ST_TO_ADDR
44258: GO 44339
44260: LD_INT 53
44262: DOUBLE
44263: EQUAL
44264: IFTRUE 44268
44266: GO 44286
44268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44269: LD_ADDR_VAR 0 3
44273: PUSH
44274: LD_INT 23
44276: PUSH
44277: LD_INT 24
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: ST_TO_ADDR
44284: GO 44339
44286: LD_INT 46
44288: DOUBLE
44289: EQUAL
44290: IFTRUE 44294
44292: GO 44312
44294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44295: LD_ADDR_VAR 0 3
44299: PUSH
44300: LD_INT 23
44302: PUSH
44303: LD_INT 24
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: ST_TO_ADDR
44310: GO 44339
44312: LD_INT 47
44314: DOUBLE
44315: EQUAL
44316: IFTRUE 44320
44318: GO 44338
44320: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 23
44328: PUSH
44329: LD_INT 24
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: ST_TO_ADDR
44336: GO 44339
44338: POP
// result := ( chassis in result ) ;
44339: LD_ADDR_VAR 0 3
44343: PUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 3
44353: IN
44354: ST_TO_ADDR
// end ;
44355: LD_VAR 0 3
44359: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44360: LD_INT 0
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
// result := array ;
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: LD_VAR 0 1
44378: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44379: LD_VAR 0 1
44383: NOT
44384: PUSH
44385: LD_VAR 0 2
44389: NOT
44390: OR
44391: PUSH
44392: LD_VAR 0 3
44396: NOT
44397: OR
44398: PUSH
44399: LD_VAR 0 2
44403: PUSH
44404: LD_VAR 0 1
44408: GREATER
44409: OR
44410: PUSH
44411: LD_VAR 0 3
44415: PUSH
44416: LD_VAR 0 1
44420: GREATER
44421: OR
44422: IFFALSE 44426
// exit ;
44424: GO 44722
// if direction then
44426: LD_VAR 0 4
44430: IFFALSE 44494
// begin d := 1 ;
44432: LD_ADDR_VAR 0 9
44436: PUSH
44437: LD_INT 1
44439: ST_TO_ADDR
// if i_from > i_to then
44440: LD_VAR 0 2
44444: PUSH
44445: LD_VAR 0 3
44449: GREATER
44450: IFFALSE 44476
// length := ( array - i_from ) + i_to else
44452: LD_ADDR_VAR 0 11
44456: PUSH
44457: LD_VAR 0 1
44461: PUSH
44462: LD_VAR 0 2
44466: MINUS
44467: PUSH
44468: LD_VAR 0 3
44472: PLUS
44473: ST_TO_ADDR
44474: GO 44492
// length := i_to - i_from ;
44476: LD_ADDR_VAR 0 11
44480: PUSH
44481: LD_VAR 0 3
44485: PUSH
44486: LD_VAR 0 2
44490: MINUS
44491: ST_TO_ADDR
// end else
44492: GO 44555
// begin d := - 1 ;
44494: LD_ADDR_VAR 0 9
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: ST_TO_ADDR
// if i_from > i_to then
44503: LD_VAR 0 2
44507: PUSH
44508: LD_VAR 0 3
44512: GREATER
44513: IFFALSE 44533
// length := i_from - i_to else
44515: LD_ADDR_VAR 0 11
44519: PUSH
44520: LD_VAR 0 2
44524: PUSH
44525: LD_VAR 0 3
44529: MINUS
44530: ST_TO_ADDR
44531: GO 44555
// length := ( array - i_to ) + i_from ;
44533: LD_ADDR_VAR 0 11
44537: PUSH
44538: LD_VAR 0 1
44542: PUSH
44543: LD_VAR 0 3
44547: MINUS
44548: PUSH
44549: LD_VAR 0 2
44553: PLUS
44554: ST_TO_ADDR
// end ; if not length then
44555: LD_VAR 0 11
44559: NOT
44560: IFFALSE 44564
// exit ;
44562: GO 44722
// tmp := array ;
44564: LD_ADDR_VAR 0 10
44568: PUSH
44569: LD_VAR 0 1
44573: ST_TO_ADDR
// for i = 1 to length do
44574: LD_ADDR_VAR 0 6
44578: PUSH
44579: DOUBLE
44580: LD_INT 1
44582: DEC
44583: ST_TO_ADDR
44584: LD_VAR 0 11
44588: PUSH
44589: FOR_TO
44590: IFFALSE 44710
// begin for j = 1 to array do
44592: LD_ADDR_VAR 0 7
44596: PUSH
44597: DOUBLE
44598: LD_INT 1
44600: DEC
44601: ST_TO_ADDR
44602: LD_VAR 0 1
44606: PUSH
44607: FOR_TO
44608: IFFALSE 44696
// begin k := j + d ;
44610: LD_ADDR_VAR 0 8
44614: PUSH
44615: LD_VAR 0 7
44619: PUSH
44620: LD_VAR 0 9
44624: PLUS
44625: ST_TO_ADDR
// if k > array then
44626: LD_VAR 0 8
44630: PUSH
44631: LD_VAR 0 1
44635: GREATER
44636: IFFALSE 44646
// k := 1 ;
44638: LD_ADDR_VAR 0 8
44642: PUSH
44643: LD_INT 1
44645: ST_TO_ADDR
// if not k then
44646: LD_VAR 0 8
44650: NOT
44651: IFFALSE 44663
// k := array ;
44653: LD_ADDR_VAR 0 8
44657: PUSH
44658: LD_VAR 0 1
44662: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44663: LD_ADDR_VAR 0 10
44667: PUSH
44668: LD_VAR 0 10
44672: PPUSH
44673: LD_VAR 0 8
44677: PPUSH
44678: LD_VAR 0 1
44682: PUSH
44683: LD_VAR 0 7
44687: ARRAY
44688: PPUSH
44689: CALL_OW 1
44693: ST_TO_ADDR
// end ;
44694: GO 44607
44696: POP
44697: POP
// array := tmp ;
44698: LD_ADDR_VAR 0 1
44702: PUSH
44703: LD_VAR 0 10
44707: ST_TO_ADDR
// end ;
44708: GO 44589
44710: POP
44711: POP
// result := array ;
44712: LD_ADDR_VAR 0 5
44716: PUSH
44717: LD_VAR 0 1
44721: ST_TO_ADDR
// end ;
44722: LD_VAR 0 5
44726: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44727: LD_INT 0
44729: PPUSH
44730: PPUSH
// result := 0 ;
44731: LD_ADDR_VAR 0 3
44735: PUSH
44736: LD_INT 0
44738: ST_TO_ADDR
// if not array or not value in array then
44739: LD_VAR 0 1
44743: NOT
44744: PUSH
44745: LD_VAR 0 2
44749: PUSH
44750: LD_VAR 0 1
44754: IN
44755: NOT
44756: OR
44757: IFFALSE 44761
// exit ;
44759: GO 44815
// for i = 1 to array do
44761: LD_ADDR_VAR 0 4
44765: PUSH
44766: DOUBLE
44767: LD_INT 1
44769: DEC
44770: ST_TO_ADDR
44771: LD_VAR 0 1
44775: PUSH
44776: FOR_TO
44777: IFFALSE 44813
// if value = array [ i ] then
44779: LD_VAR 0 2
44783: PUSH
44784: LD_VAR 0 1
44788: PUSH
44789: LD_VAR 0 4
44793: ARRAY
44794: EQUAL
44795: IFFALSE 44811
// begin result := i ;
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_VAR 0 4
44806: ST_TO_ADDR
// exit ;
44807: POP
44808: POP
44809: GO 44815
// end ;
44811: GO 44776
44813: POP
44814: POP
// end ;
44815: LD_VAR 0 3
44819: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44820: LD_INT 0
44822: PPUSH
// vc_chassis := chassis ;
44823: LD_ADDR_OWVAR 37
44827: PUSH
44828: LD_VAR 0 1
44832: ST_TO_ADDR
// vc_engine := engine ;
44833: LD_ADDR_OWVAR 39
44837: PUSH
44838: LD_VAR 0 2
44842: ST_TO_ADDR
// vc_control := control ;
44843: LD_ADDR_OWVAR 38
44847: PUSH
44848: LD_VAR 0 3
44852: ST_TO_ADDR
// vc_weapon := weapon ;
44853: LD_ADDR_OWVAR 40
44857: PUSH
44858: LD_VAR 0 4
44862: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44863: LD_ADDR_OWVAR 41
44867: PUSH
44868: LD_VAR 0 5
44872: ST_TO_ADDR
// end ;
44873: LD_VAR 0 6
44877: RET
// export function WantPlant ( unit ) ; var task ; begin
44878: LD_INT 0
44880: PPUSH
44881: PPUSH
// result := false ;
44882: LD_ADDR_VAR 0 2
44886: PUSH
44887: LD_INT 0
44889: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44890: LD_ADDR_VAR 0 3
44894: PUSH
44895: LD_VAR 0 1
44899: PPUSH
44900: CALL_OW 437
44904: ST_TO_ADDR
// if task then
44905: LD_VAR 0 3
44909: IFFALSE 44937
// if task [ 1 ] [ 1 ] = p then
44911: LD_VAR 0 3
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: PUSH
44920: LD_INT 1
44922: ARRAY
44923: PUSH
44924: LD_STRING p
44926: EQUAL
44927: IFFALSE 44937
// result := true ;
44929: LD_ADDR_VAR 0 2
44933: PUSH
44934: LD_INT 1
44936: ST_TO_ADDR
// end ;
44937: LD_VAR 0 2
44941: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44942: LD_INT 0
44944: PPUSH
44945: PPUSH
44946: PPUSH
44947: PPUSH
// if pos < 1 then
44948: LD_VAR 0 2
44952: PUSH
44953: LD_INT 1
44955: LESS
44956: IFFALSE 44960
// exit ;
44958: GO 45263
// if pos = 1 then
44960: LD_VAR 0 2
44964: PUSH
44965: LD_INT 1
44967: EQUAL
44968: IFFALSE 45001
// result := Replace ( arr , pos [ 1 ] , value ) else
44970: LD_ADDR_VAR 0 4
44974: PUSH
44975: LD_VAR 0 1
44979: PPUSH
44980: LD_VAR 0 2
44984: PUSH
44985: LD_INT 1
44987: ARRAY
44988: PPUSH
44989: LD_VAR 0 3
44993: PPUSH
44994: CALL_OW 1
44998: ST_TO_ADDR
44999: GO 45263
// begin tmp := arr ;
45001: LD_ADDR_VAR 0 6
45005: PUSH
45006: LD_VAR 0 1
45010: ST_TO_ADDR
// s_arr := [ tmp ] ;
45011: LD_ADDR_VAR 0 7
45015: PUSH
45016: LD_VAR 0 6
45020: PUSH
45021: EMPTY
45022: LIST
45023: ST_TO_ADDR
// for i = 1 to pos - 1 do
45024: LD_ADDR_VAR 0 5
45028: PUSH
45029: DOUBLE
45030: LD_INT 1
45032: DEC
45033: ST_TO_ADDR
45034: LD_VAR 0 2
45038: PUSH
45039: LD_INT 1
45041: MINUS
45042: PUSH
45043: FOR_TO
45044: IFFALSE 45089
// begin tmp := tmp [ pos [ i ] ] ;
45046: LD_ADDR_VAR 0 6
45050: PUSH
45051: LD_VAR 0 6
45055: PUSH
45056: LD_VAR 0 2
45060: PUSH
45061: LD_VAR 0 5
45065: ARRAY
45066: ARRAY
45067: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45068: LD_ADDR_VAR 0 7
45072: PUSH
45073: LD_VAR 0 7
45077: PUSH
45078: LD_VAR 0 6
45082: PUSH
45083: EMPTY
45084: LIST
45085: ADD
45086: ST_TO_ADDR
// end ;
45087: GO 45043
45089: POP
45090: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45091: LD_ADDR_VAR 0 6
45095: PUSH
45096: LD_VAR 0 6
45100: PPUSH
45101: LD_VAR 0 2
45105: PUSH
45106: LD_VAR 0 2
45110: ARRAY
45111: PPUSH
45112: LD_VAR 0 3
45116: PPUSH
45117: CALL_OW 1
45121: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45122: LD_ADDR_VAR 0 7
45126: PUSH
45127: LD_VAR 0 7
45131: PPUSH
45132: LD_VAR 0 7
45136: PPUSH
45137: LD_VAR 0 6
45141: PPUSH
45142: CALL_OW 1
45146: ST_TO_ADDR
// for i = s_arr downto 2 do
45147: LD_ADDR_VAR 0 5
45151: PUSH
45152: DOUBLE
45153: LD_VAR 0 7
45157: INC
45158: ST_TO_ADDR
45159: LD_INT 2
45161: PUSH
45162: FOR_DOWNTO
45163: IFFALSE 45247
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45165: LD_ADDR_VAR 0 6
45169: PUSH
45170: LD_VAR 0 7
45174: PUSH
45175: LD_VAR 0 5
45179: PUSH
45180: LD_INT 1
45182: MINUS
45183: ARRAY
45184: PPUSH
45185: LD_VAR 0 2
45189: PUSH
45190: LD_VAR 0 5
45194: PUSH
45195: LD_INT 1
45197: MINUS
45198: ARRAY
45199: PPUSH
45200: LD_VAR 0 7
45204: PUSH
45205: LD_VAR 0 5
45209: ARRAY
45210: PPUSH
45211: CALL_OW 1
45215: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45216: LD_ADDR_VAR 0 7
45220: PUSH
45221: LD_VAR 0 7
45225: PPUSH
45226: LD_VAR 0 5
45230: PUSH
45231: LD_INT 1
45233: MINUS
45234: PPUSH
45235: LD_VAR 0 6
45239: PPUSH
45240: CALL_OW 1
45244: ST_TO_ADDR
// end ;
45245: GO 45162
45247: POP
45248: POP
// result := s_arr [ 1 ] ;
45249: LD_ADDR_VAR 0 4
45253: PUSH
45254: LD_VAR 0 7
45258: PUSH
45259: LD_INT 1
45261: ARRAY
45262: ST_TO_ADDR
// end ; end ;
45263: LD_VAR 0 4
45267: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45268: LD_INT 0
45270: PPUSH
45271: PPUSH
// if not list then
45272: LD_VAR 0 1
45276: NOT
45277: IFFALSE 45281
// exit ;
45279: GO 45372
// i := list [ pos1 ] ;
45281: LD_ADDR_VAR 0 5
45285: PUSH
45286: LD_VAR 0 1
45290: PUSH
45291: LD_VAR 0 2
45295: ARRAY
45296: ST_TO_ADDR
// if not i then
45297: LD_VAR 0 5
45301: NOT
45302: IFFALSE 45306
// exit ;
45304: GO 45372
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45306: LD_ADDR_VAR 0 1
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: LD_VAR 0 2
45320: PPUSH
45321: LD_VAR 0 1
45325: PUSH
45326: LD_VAR 0 3
45330: ARRAY
45331: PPUSH
45332: CALL_OW 1
45336: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45337: LD_ADDR_VAR 0 1
45341: PUSH
45342: LD_VAR 0 1
45346: PPUSH
45347: LD_VAR 0 3
45351: PPUSH
45352: LD_VAR 0 5
45356: PPUSH
45357: CALL_OW 1
45361: ST_TO_ADDR
// result := list ;
45362: LD_ADDR_VAR 0 4
45366: PUSH
45367: LD_VAR 0 1
45371: ST_TO_ADDR
// end ;
45372: LD_VAR 0 4
45376: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45377: LD_INT 0
45379: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45380: LD_ADDR_VAR 0 5
45384: PUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: CALL_OW 250
45394: PPUSH
45395: LD_VAR 0 1
45399: PPUSH
45400: CALL_OW 251
45404: PPUSH
45405: LD_VAR 0 2
45409: PPUSH
45410: LD_VAR 0 3
45414: PPUSH
45415: LD_VAR 0 4
45419: PPUSH
45420: CALL 45798 0 5
45424: ST_TO_ADDR
// end ;
45425: LD_VAR 0 5
45429: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45430: LD_INT 0
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
// if not list or not unit then
45436: LD_VAR 0 2
45440: NOT
45441: PUSH
45442: LD_VAR 0 1
45446: NOT
45447: OR
45448: IFFALSE 45452
// exit ;
45450: GO 45793
// result := [ ] ;
45452: LD_ADDR_VAR 0 5
45456: PUSH
45457: EMPTY
45458: ST_TO_ADDR
// for i in list do
45459: LD_ADDR_VAR 0 6
45463: PUSH
45464: LD_VAR 0 2
45468: PUSH
45469: FOR_IN
45470: IFFALSE 45688
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45472: LD_ADDR_VAR 0 8
45476: PUSH
45477: LD_VAR 0 1
45481: PPUSH
45482: LD_VAR 0 6
45486: PUSH
45487: LD_INT 1
45489: ARRAY
45490: PPUSH
45491: LD_VAR 0 6
45495: PUSH
45496: LD_INT 2
45498: ARRAY
45499: PPUSH
45500: CALL_OW 297
45504: ST_TO_ADDR
// if not Count ( result ) then
45505: LD_VAR 0 5
45509: PPUSH
45510: CALL 42082 0 1
45514: NOT
45515: IFFALSE 45548
// begin result := Join ( result , [ i , tmp ] ) ;
45517: LD_ADDR_VAR 0 5
45521: PUSH
45522: LD_VAR 0 5
45526: PPUSH
45527: LD_VAR 0 6
45531: PUSH
45532: LD_VAR 0 8
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PPUSH
45541: CALL 77671 0 2
45545: ST_TO_ADDR
// continue ;
45546: GO 45469
// end ; if result [ result ] [ 2 ] <= tmp then
45548: LD_VAR 0 5
45552: PUSH
45553: LD_VAR 0 5
45557: ARRAY
45558: PUSH
45559: LD_INT 2
45561: ARRAY
45562: PUSH
45563: LD_VAR 0 8
45567: LESSEQUAL
45568: IFFALSE 45601
// result := Join ( result , [ i , tmp ] ) else
45570: LD_ADDR_VAR 0 5
45574: PUSH
45575: LD_VAR 0 5
45579: PPUSH
45580: LD_VAR 0 6
45584: PUSH
45585: LD_VAR 0 8
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PPUSH
45594: CALL 77671 0 2
45598: ST_TO_ADDR
45599: GO 45686
// begin for j := 1 to Count ( result ) do
45601: LD_ADDR_VAR 0 7
45605: PUSH
45606: DOUBLE
45607: LD_INT 1
45609: DEC
45610: ST_TO_ADDR
45611: LD_VAR 0 5
45615: PPUSH
45616: CALL 42082 0 1
45620: PUSH
45621: FOR_TO
45622: IFFALSE 45684
// begin if tmp < result [ j ] [ 2 ] then
45624: LD_VAR 0 8
45628: PUSH
45629: LD_VAR 0 5
45633: PUSH
45634: LD_VAR 0 7
45638: ARRAY
45639: PUSH
45640: LD_INT 2
45642: ARRAY
45643: LESS
45644: IFFALSE 45682
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45646: LD_ADDR_VAR 0 5
45650: PUSH
45651: LD_VAR 0 5
45655: PPUSH
45656: LD_VAR 0 7
45660: PPUSH
45661: LD_VAR 0 6
45665: PUSH
45666: LD_VAR 0 8
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PPUSH
45675: CALL_OW 2
45679: ST_TO_ADDR
// break ;
45680: GO 45684
// end ; end ;
45682: GO 45621
45684: POP
45685: POP
// end ; end ;
45686: GO 45469
45688: POP
45689: POP
// if result and not asc then
45690: LD_VAR 0 5
45694: PUSH
45695: LD_VAR 0 3
45699: NOT
45700: AND
45701: IFFALSE 45718
// result := ReverseArray ( result ) ;
45703: LD_ADDR_VAR 0 5
45707: PUSH
45708: LD_VAR 0 5
45712: PPUSH
45713: CALL 72958 0 1
45717: ST_TO_ADDR
// tmp := [ ] ;
45718: LD_ADDR_VAR 0 8
45722: PUSH
45723: EMPTY
45724: ST_TO_ADDR
// if mode then
45725: LD_VAR 0 4
45729: IFFALSE 45793
// begin for i := 1 to result do
45731: LD_ADDR_VAR 0 6
45735: PUSH
45736: DOUBLE
45737: LD_INT 1
45739: DEC
45740: ST_TO_ADDR
45741: LD_VAR 0 5
45745: PUSH
45746: FOR_TO
45747: IFFALSE 45781
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45749: LD_ADDR_VAR 0 8
45753: PUSH
45754: LD_VAR 0 8
45758: PPUSH
45759: LD_VAR 0 5
45763: PUSH
45764: LD_VAR 0 6
45768: ARRAY
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PPUSH
45774: CALL 77671 0 2
45778: ST_TO_ADDR
45779: GO 45746
45781: POP
45782: POP
// result := tmp ;
45783: LD_ADDR_VAR 0 5
45787: PUSH
45788: LD_VAR 0 8
45792: ST_TO_ADDR
// end ; end ;
45793: LD_VAR 0 5
45797: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45798: LD_INT 0
45800: PPUSH
45801: PPUSH
45802: PPUSH
45803: PPUSH
// if not list then
45804: LD_VAR 0 3
45808: NOT
45809: IFFALSE 45813
// exit ;
45811: GO 46201
// result := [ ] ;
45813: LD_ADDR_VAR 0 6
45817: PUSH
45818: EMPTY
45819: ST_TO_ADDR
// for i in list do
45820: LD_ADDR_VAR 0 7
45824: PUSH
45825: LD_VAR 0 3
45829: PUSH
45830: FOR_IN
45831: IFFALSE 46033
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45833: LD_ADDR_VAR 0 9
45837: PUSH
45838: LD_VAR 0 7
45842: PPUSH
45843: LD_VAR 0 1
45847: PPUSH
45848: LD_VAR 0 2
45852: PPUSH
45853: CALL_OW 297
45857: ST_TO_ADDR
// if not result then
45858: LD_VAR 0 6
45862: NOT
45863: IFFALSE 45889
// result := [ [ i , tmp ] ] else
45865: LD_ADDR_VAR 0 6
45869: PUSH
45870: LD_VAR 0 7
45874: PUSH
45875: LD_VAR 0 9
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: ST_TO_ADDR
45887: GO 46031
// begin if result [ result ] [ 2 ] < tmp then
45889: LD_VAR 0 6
45893: PUSH
45894: LD_VAR 0 6
45898: ARRAY
45899: PUSH
45900: LD_INT 2
45902: ARRAY
45903: PUSH
45904: LD_VAR 0 9
45908: LESS
45909: IFFALSE 45951
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45911: LD_ADDR_VAR 0 6
45915: PUSH
45916: LD_VAR 0 6
45920: PPUSH
45921: LD_VAR 0 6
45925: PUSH
45926: LD_INT 1
45928: PLUS
45929: PPUSH
45930: LD_VAR 0 7
45934: PUSH
45935: LD_VAR 0 9
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PPUSH
45944: CALL_OW 2
45948: ST_TO_ADDR
45949: GO 46031
// for j = 1 to result do
45951: LD_ADDR_VAR 0 8
45955: PUSH
45956: DOUBLE
45957: LD_INT 1
45959: DEC
45960: ST_TO_ADDR
45961: LD_VAR 0 6
45965: PUSH
45966: FOR_TO
45967: IFFALSE 46029
// begin if tmp < result [ j ] [ 2 ] then
45969: LD_VAR 0 9
45973: PUSH
45974: LD_VAR 0 6
45978: PUSH
45979: LD_VAR 0 8
45983: ARRAY
45984: PUSH
45985: LD_INT 2
45987: ARRAY
45988: LESS
45989: IFFALSE 46027
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45991: LD_ADDR_VAR 0 6
45995: PUSH
45996: LD_VAR 0 6
46000: PPUSH
46001: LD_VAR 0 8
46005: PPUSH
46006: LD_VAR 0 7
46010: PUSH
46011: LD_VAR 0 9
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PPUSH
46020: CALL_OW 2
46024: ST_TO_ADDR
// break ;
46025: GO 46029
// end ; end ;
46027: GO 45966
46029: POP
46030: POP
// end ; end ;
46031: GO 45830
46033: POP
46034: POP
// if result and not asc then
46035: LD_VAR 0 6
46039: PUSH
46040: LD_VAR 0 4
46044: NOT
46045: AND
46046: IFFALSE 46121
// begin tmp := result ;
46048: LD_ADDR_VAR 0 9
46052: PUSH
46053: LD_VAR 0 6
46057: ST_TO_ADDR
// for i = tmp downto 1 do
46058: LD_ADDR_VAR 0 7
46062: PUSH
46063: DOUBLE
46064: LD_VAR 0 9
46068: INC
46069: ST_TO_ADDR
46070: LD_INT 1
46072: PUSH
46073: FOR_DOWNTO
46074: IFFALSE 46119
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46076: LD_ADDR_VAR 0 6
46080: PUSH
46081: LD_VAR 0 6
46085: PPUSH
46086: LD_VAR 0 9
46090: PUSH
46091: LD_VAR 0 7
46095: MINUS
46096: PUSH
46097: LD_INT 1
46099: PLUS
46100: PPUSH
46101: LD_VAR 0 9
46105: PUSH
46106: LD_VAR 0 7
46110: ARRAY
46111: PPUSH
46112: CALL_OW 1
46116: ST_TO_ADDR
46117: GO 46073
46119: POP
46120: POP
// end ; tmp := [ ] ;
46121: LD_ADDR_VAR 0 9
46125: PUSH
46126: EMPTY
46127: ST_TO_ADDR
// if mode then
46128: LD_VAR 0 5
46132: IFFALSE 46201
// begin for i = 1 to result do
46134: LD_ADDR_VAR 0 7
46138: PUSH
46139: DOUBLE
46140: LD_INT 1
46142: DEC
46143: ST_TO_ADDR
46144: LD_VAR 0 6
46148: PUSH
46149: FOR_TO
46150: IFFALSE 46189
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46152: LD_ADDR_VAR 0 9
46156: PUSH
46157: LD_VAR 0 9
46161: PPUSH
46162: LD_VAR 0 7
46166: PPUSH
46167: LD_VAR 0 6
46171: PUSH
46172: LD_VAR 0 7
46176: ARRAY
46177: PUSH
46178: LD_INT 1
46180: ARRAY
46181: PPUSH
46182: CALL_OW 1
46186: ST_TO_ADDR
46187: GO 46149
46189: POP
46190: POP
// result := tmp ;
46191: LD_ADDR_VAR 0 6
46195: PUSH
46196: LD_VAR 0 9
46200: ST_TO_ADDR
// end ; end ;
46201: LD_VAR 0 6
46205: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46206: LD_INT 0
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46214: LD_ADDR_VAR 0 5
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// if not x or not y then
46236: LD_VAR 0 2
46240: NOT
46241: PUSH
46242: LD_VAR 0 3
46246: NOT
46247: OR
46248: IFFALSE 46252
// exit ;
46250: GO 47902
// if not range then
46252: LD_VAR 0 4
46256: NOT
46257: IFFALSE 46267
// range := 10 ;
46259: LD_ADDR_VAR 0 4
46263: PUSH
46264: LD_INT 10
46266: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46267: LD_ADDR_VAR 0 8
46271: PUSH
46272: LD_INT 81
46274: PUSH
46275: LD_VAR 0 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 92
46286: PUSH
46287: LD_VAR 0 2
46291: PUSH
46292: LD_VAR 0 3
46296: PUSH
46297: LD_VAR 0 4
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: LD_INT 21
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: PPUSH
46330: CALL_OW 69
46334: ST_TO_ADDR
// if not tmp then
46335: LD_VAR 0 8
46339: NOT
46340: IFFALSE 46344
// exit ;
46342: GO 47902
// for i in tmp do
46344: LD_ADDR_VAR 0 6
46348: PUSH
46349: LD_VAR 0 8
46353: PUSH
46354: FOR_IN
46355: IFFALSE 47877
// begin points := [ 0 , 0 , 0 ] ;
46357: LD_ADDR_VAR 0 9
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// bpoints := 1 ;
46376: LD_ADDR_VAR 0 10
46380: PUSH
46381: LD_INT 1
46383: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46384: LD_VAR 0 6
46388: PPUSH
46389: CALL_OW 247
46393: PUSH
46394: LD_INT 1
46396: DOUBLE
46397: EQUAL
46398: IFTRUE 46402
46400: GO 46980
46402: POP
// begin if GetClass ( i ) = 1 then
46403: LD_VAR 0 6
46407: PPUSH
46408: CALL_OW 257
46412: PUSH
46413: LD_INT 1
46415: EQUAL
46416: IFFALSE 46437
// points := [ 10 , 5 , 3 ] ;
46418: LD_ADDR_VAR 0 9
46422: PUSH
46423: LD_INT 10
46425: PUSH
46426: LD_INT 5
46428: PUSH
46429: LD_INT 3
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46437: LD_VAR 0 6
46441: PPUSH
46442: CALL_OW 257
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 4
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: IN
46461: IFFALSE 46482
// points := [ 3 , 2 , 1 ] ;
46463: LD_ADDR_VAR 0 9
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46482: LD_VAR 0 6
46486: PPUSH
46487: CALL_OW 257
46491: PUSH
46492: LD_INT 5
46494: EQUAL
46495: IFFALSE 46516
// points := [ 130 , 5 , 2 ] ;
46497: LD_ADDR_VAR 0 9
46501: PUSH
46502: LD_INT 130
46504: PUSH
46505: LD_INT 5
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46516: LD_VAR 0 6
46520: PPUSH
46521: CALL_OW 257
46525: PUSH
46526: LD_INT 8
46528: EQUAL
46529: IFFALSE 46550
// points := [ 35 , 35 , 30 ] ;
46531: LD_ADDR_VAR 0 9
46535: PUSH
46536: LD_INT 35
46538: PUSH
46539: LD_INT 35
46541: PUSH
46542: LD_INT 30
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46550: LD_VAR 0 6
46554: PPUSH
46555: CALL_OW 257
46559: PUSH
46560: LD_INT 9
46562: EQUAL
46563: IFFALSE 46584
// points := [ 20 , 55 , 40 ] ;
46565: LD_ADDR_VAR 0 9
46569: PUSH
46570: LD_INT 20
46572: PUSH
46573: LD_INT 55
46575: PUSH
46576: LD_INT 40
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46584: LD_VAR 0 6
46588: PPUSH
46589: CALL_OW 257
46593: PUSH
46594: LD_INT 12
46596: PUSH
46597: LD_INT 16
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: IN
46604: IFFALSE 46625
// points := [ 5 , 3 , 2 ] ;
46606: LD_ADDR_VAR 0 9
46610: PUSH
46611: LD_INT 5
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46625: LD_VAR 0 6
46629: PPUSH
46630: CALL_OW 257
46634: PUSH
46635: LD_INT 17
46637: EQUAL
46638: IFFALSE 46659
// points := [ 100 , 50 , 75 ] ;
46640: LD_ADDR_VAR 0 9
46644: PUSH
46645: LD_INT 100
46647: PUSH
46648: LD_INT 50
46650: PUSH
46651: LD_INT 75
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46659: LD_VAR 0 6
46663: PPUSH
46664: CALL_OW 257
46668: PUSH
46669: LD_INT 15
46671: EQUAL
46672: IFFALSE 46693
// points := [ 10 , 5 , 3 ] ;
46674: LD_ADDR_VAR 0 9
46678: PUSH
46679: LD_INT 10
46681: PUSH
46682: LD_INT 5
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: LIST
46692: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46693: LD_VAR 0 6
46697: PPUSH
46698: CALL_OW 257
46702: PUSH
46703: LD_INT 14
46705: EQUAL
46706: IFFALSE 46727
// points := [ 10 , 0 , 0 ] ;
46708: LD_ADDR_VAR 0 9
46712: PUSH
46713: LD_INT 10
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46727: LD_VAR 0 6
46731: PPUSH
46732: CALL_OW 257
46736: PUSH
46737: LD_INT 11
46739: EQUAL
46740: IFFALSE 46761
// points := [ 30 , 10 , 5 ] ;
46742: LD_ADDR_VAR 0 9
46746: PUSH
46747: LD_INT 30
46749: PUSH
46750: LD_INT 10
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46761: LD_VAR 0 1
46765: PPUSH
46766: LD_INT 5
46768: PPUSH
46769: CALL_OW 321
46773: PUSH
46774: LD_INT 2
46776: EQUAL
46777: IFFALSE 46794
// bpoints := bpoints * 1.8 ;
46779: LD_ADDR_VAR 0 10
46783: PUSH
46784: LD_VAR 0 10
46788: PUSH
46789: LD_REAL  1.80000000000000E+0000
46792: MUL
46793: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46794: LD_VAR 0 6
46798: PPUSH
46799: CALL_OW 257
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: LD_INT 4
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: IN
46822: PUSH
46823: LD_VAR 0 1
46827: PPUSH
46828: LD_INT 51
46830: PPUSH
46831: CALL_OW 321
46835: PUSH
46836: LD_INT 2
46838: EQUAL
46839: AND
46840: IFFALSE 46857
// bpoints := bpoints * 1.2 ;
46842: LD_ADDR_VAR 0 10
46846: PUSH
46847: LD_VAR 0 10
46851: PUSH
46852: LD_REAL  1.20000000000000E+0000
46855: MUL
46856: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46857: LD_VAR 0 6
46861: PPUSH
46862: CALL_OW 257
46866: PUSH
46867: LD_INT 5
46869: PUSH
46870: LD_INT 7
46872: PUSH
46873: LD_INT 9
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: IN
46881: PUSH
46882: LD_VAR 0 1
46886: PPUSH
46887: LD_INT 52
46889: PPUSH
46890: CALL_OW 321
46894: PUSH
46895: LD_INT 2
46897: EQUAL
46898: AND
46899: IFFALSE 46916
// bpoints := bpoints * 1.5 ;
46901: LD_ADDR_VAR 0 10
46905: PUSH
46906: LD_VAR 0 10
46910: PUSH
46911: LD_REAL  1.50000000000000E+0000
46914: MUL
46915: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46916: LD_VAR 0 1
46920: PPUSH
46921: LD_INT 66
46923: PPUSH
46924: CALL_OW 321
46928: PUSH
46929: LD_INT 2
46931: EQUAL
46932: IFFALSE 46949
// bpoints := bpoints * 1.1 ;
46934: LD_ADDR_VAR 0 10
46938: PUSH
46939: LD_VAR 0 10
46943: PUSH
46944: LD_REAL  1.10000000000000E+0000
46947: MUL
46948: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46949: LD_ADDR_VAR 0 10
46953: PUSH
46954: LD_VAR 0 10
46958: PUSH
46959: LD_VAR 0 6
46963: PPUSH
46964: LD_INT 1
46966: PPUSH
46967: CALL_OW 259
46971: PUSH
46972: LD_REAL  1.15000000000000E+0000
46975: MUL
46976: MUL
46977: ST_TO_ADDR
// end ; unit_vehicle :
46978: GO 47806
46980: LD_INT 2
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46988
46986: GO 47794
46988: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46989: LD_VAR 0 6
46993: PPUSH
46994: CALL_OW 264
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: LD_INT 42
47004: PUSH
47005: LD_INT 24
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: IN
47013: IFFALSE 47034
// points := [ 25 , 5 , 3 ] ;
47015: LD_ADDR_VAR 0 9
47019: PUSH
47020: LD_INT 25
47022: PUSH
47023: LD_INT 5
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47034: LD_VAR 0 6
47038: PPUSH
47039: CALL_OW 264
47043: PUSH
47044: LD_INT 4
47046: PUSH
47047: LD_INT 43
47049: PUSH
47050: LD_INT 25
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: IN
47058: IFFALSE 47079
// points := [ 40 , 15 , 5 ] ;
47060: LD_ADDR_VAR 0 9
47064: PUSH
47065: LD_INT 40
47067: PUSH
47068: LD_INT 15
47070: PUSH
47071: LD_INT 5
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47079: LD_VAR 0 6
47083: PPUSH
47084: CALL_OW 264
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: LD_INT 23
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: IN
47099: IFFALSE 47120
// points := [ 7 , 25 , 8 ] ;
47101: LD_ADDR_VAR 0 9
47105: PUSH
47106: LD_INT 7
47108: PUSH
47109: LD_INT 25
47111: PUSH
47112: LD_INT 8
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47120: LD_VAR 0 6
47124: PPUSH
47125: CALL_OW 264
47129: PUSH
47130: LD_INT 5
47132: PUSH
47133: LD_INT 27
47135: PUSH
47136: LD_INT 44
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: IN
47144: IFFALSE 47165
// points := [ 14 , 50 , 16 ] ;
47146: LD_ADDR_VAR 0 9
47150: PUSH
47151: LD_INT 14
47153: PUSH
47154: LD_INT 50
47156: PUSH
47157: LD_INT 16
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47165: LD_VAR 0 6
47169: PPUSH
47170: CALL_OW 264
47174: PUSH
47175: LD_INT 6
47177: PUSH
47178: LD_INT 46
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: IN
47185: IFFALSE 47206
// points := [ 32 , 120 , 70 ] ;
47187: LD_ADDR_VAR 0 9
47191: PUSH
47192: LD_INT 32
47194: PUSH
47195: LD_INT 120
47197: PUSH
47198: LD_INT 70
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47206: LD_VAR 0 6
47210: PPUSH
47211: CALL_OW 264
47215: PUSH
47216: LD_INT 7
47218: PUSH
47219: LD_INT 28
47221: PUSH
47222: LD_INT 45
47224: PUSH
47225: LD_INT 92
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: IN
47234: IFFALSE 47255
// points := [ 35 , 20 , 45 ] ;
47236: LD_ADDR_VAR 0 9
47240: PUSH
47241: LD_INT 35
47243: PUSH
47244: LD_INT 20
47246: PUSH
47247: LD_INT 45
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47255: LD_VAR 0 6
47259: PPUSH
47260: CALL_OW 264
47264: PUSH
47265: LD_INT 47
47267: PUSH
47268: EMPTY
47269: LIST
47270: IN
47271: IFFALSE 47292
// points := [ 67 , 45 , 75 ] ;
47273: LD_ADDR_VAR 0 9
47277: PUSH
47278: LD_INT 67
47280: PUSH
47281: LD_INT 45
47283: PUSH
47284: LD_INT 75
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47292: LD_VAR 0 6
47296: PPUSH
47297: CALL_OW 264
47301: PUSH
47302: LD_INT 26
47304: PUSH
47305: EMPTY
47306: LIST
47307: IN
47308: IFFALSE 47329
// points := [ 120 , 30 , 80 ] ;
47310: LD_ADDR_VAR 0 9
47314: PUSH
47315: LD_INT 120
47317: PUSH
47318: LD_INT 30
47320: PUSH
47321: LD_INT 80
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47329: LD_VAR 0 6
47333: PPUSH
47334: CALL_OW 264
47338: PUSH
47339: LD_INT 22
47341: PUSH
47342: EMPTY
47343: LIST
47344: IN
47345: IFFALSE 47366
// points := [ 40 , 1 , 1 ] ;
47347: LD_ADDR_VAR 0 9
47351: PUSH
47352: LD_INT 40
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47366: LD_VAR 0 6
47370: PPUSH
47371: CALL_OW 264
47375: PUSH
47376: LD_INT 29
47378: PUSH
47379: EMPTY
47380: LIST
47381: IN
47382: IFFALSE 47403
// points := [ 70 , 200 , 400 ] ;
47384: LD_ADDR_VAR 0 9
47388: PUSH
47389: LD_INT 70
47391: PUSH
47392: LD_INT 200
47394: PUSH
47395: LD_INT 400
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47403: LD_VAR 0 6
47407: PPUSH
47408: CALL_OW 264
47412: PUSH
47413: LD_INT 14
47415: PUSH
47416: LD_INT 53
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: IN
47423: IFFALSE 47444
// points := [ 40 , 10 , 20 ] ;
47425: LD_ADDR_VAR 0 9
47429: PUSH
47430: LD_INT 40
47432: PUSH
47433: LD_INT 10
47435: PUSH
47436: LD_INT 20
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47444: LD_VAR 0 6
47448: PPUSH
47449: CALL_OW 264
47453: PUSH
47454: LD_INT 9
47456: PUSH
47457: EMPTY
47458: LIST
47459: IN
47460: IFFALSE 47481
// points := [ 5 , 70 , 20 ] ;
47462: LD_ADDR_VAR 0 9
47466: PUSH
47467: LD_INT 5
47469: PUSH
47470: LD_INT 70
47472: PUSH
47473: LD_INT 20
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47481: LD_VAR 0 6
47485: PPUSH
47486: CALL_OW 264
47490: PUSH
47491: LD_INT 10
47493: PUSH
47494: EMPTY
47495: LIST
47496: IN
47497: IFFALSE 47518
// points := [ 35 , 110 , 70 ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_INT 35
47506: PUSH
47507: LD_INT 110
47509: PUSH
47510: LD_INT 70
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 265
47527: PUSH
47528: LD_INT 25
47530: EQUAL
47531: IFFALSE 47552
// points := [ 80 , 65 , 100 ] ;
47533: LD_ADDR_VAR 0 9
47537: PUSH
47538: LD_INT 80
47540: PUSH
47541: LD_INT 65
47543: PUSH
47544: LD_INT 100
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47552: LD_VAR 0 6
47556: PPUSH
47557: CALL_OW 263
47561: PUSH
47562: LD_INT 1
47564: EQUAL
47565: IFFALSE 47600
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47567: LD_ADDR_VAR 0 10
47571: PUSH
47572: LD_VAR 0 10
47576: PUSH
47577: LD_VAR 0 6
47581: PPUSH
47582: CALL_OW 311
47586: PPUSH
47587: LD_INT 3
47589: PPUSH
47590: CALL_OW 259
47594: PUSH
47595: LD_INT 4
47597: MUL
47598: MUL
47599: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47600: LD_VAR 0 6
47604: PPUSH
47605: CALL_OW 263
47609: PUSH
47610: LD_INT 2
47612: EQUAL
47613: IFFALSE 47664
// begin j := IsControledBy ( i ) ;
47615: LD_ADDR_VAR 0 7
47619: PUSH
47620: LD_VAR 0 6
47624: PPUSH
47625: CALL_OW 312
47629: ST_TO_ADDR
// if j then
47630: LD_VAR 0 7
47634: IFFALSE 47664
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47636: LD_ADDR_VAR 0 10
47640: PUSH
47641: LD_VAR 0 10
47645: PUSH
47646: LD_VAR 0 7
47650: PPUSH
47651: LD_INT 3
47653: PPUSH
47654: CALL_OW 259
47658: PUSH
47659: LD_INT 3
47661: MUL
47662: MUL
47663: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47664: LD_VAR 0 6
47668: PPUSH
47669: CALL_OW 264
47673: PUSH
47674: LD_INT 5
47676: PUSH
47677: LD_INT 6
47679: PUSH
47680: LD_INT 46
47682: PUSH
47683: LD_INT 44
47685: PUSH
47686: LD_INT 47
47688: PUSH
47689: LD_INT 45
47691: PUSH
47692: LD_INT 28
47694: PUSH
47695: LD_INT 7
47697: PUSH
47698: LD_INT 27
47700: PUSH
47701: LD_INT 29
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: IN
47716: PUSH
47717: LD_VAR 0 1
47721: PPUSH
47722: LD_INT 52
47724: PPUSH
47725: CALL_OW 321
47729: PUSH
47730: LD_INT 2
47732: EQUAL
47733: AND
47734: IFFALSE 47751
// bpoints := bpoints * 1.2 ;
47736: LD_ADDR_VAR 0 10
47740: PUSH
47741: LD_VAR 0 10
47745: PUSH
47746: LD_REAL  1.20000000000000E+0000
47749: MUL
47750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47751: LD_VAR 0 6
47755: PPUSH
47756: CALL_OW 264
47760: PUSH
47761: LD_INT 6
47763: PUSH
47764: LD_INT 46
47766: PUSH
47767: LD_INT 47
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: IN
47775: IFFALSE 47792
// bpoints := bpoints * 1.2 ;
47777: LD_ADDR_VAR 0 10
47781: PUSH
47782: LD_VAR 0 10
47786: PUSH
47787: LD_REAL  1.20000000000000E+0000
47790: MUL
47791: ST_TO_ADDR
// end ; unit_building :
47792: GO 47806
47794: LD_INT 3
47796: DOUBLE
47797: EQUAL
47798: IFTRUE 47802
47800: GO 47805
47802: POP
// ; end ;
47803: GO 47806
47805: POP
// for j = 1 to 3 do
47806: LD_ADDR_VAR 0 7
47810: PUSH
47811: DOUBLE
47812: LD_INT 1
47814: DEC
47815: ST_TO_ADDR
47816: LD_INT 3
47818: PUSH
47819: FOR_TO
47820: IFFALSE 47873
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47822: LD_ADDR_VAR 0 5
47826: PUSH
47827: LD_VAR 0 5
47831: PPUSH
47832: LD_VAR 0 7
47836: PPUSH
47837: LD_VAR 0 5
47841: PUSH
47842: LD_VAR 0 7
47846: ARRAY
47847: PUSH
47848: LD_VAR 0 9
47852: PUSH
47853: LD_VAR 0 7
47857: ARRAY
47858: PUSH
47859: LD_VAR 0 10
47863: MUL
47864: PLUS
47865: PPUSH
47866: CALL_OW 1
47870: ST_TO_ADDR
47871: GO 47819
47873: POP
47874: POP
// end ;
47875: GO 46354
47877: POP
47878: POP
// result := Replace ( result , 4 , tmp ) ;
47879: LD_ADDR_VAR 0 5
47883: PUSH
47884: LD_VAR 0 5
47888: PPUSH
47889: LD_INT 4
47891: PPUSH
47892: LD_VAR 0 8
47896: PPUSH
47897: CALL_OW 1
47901: ST_TO_ADDR
// end ;
47902: LD_VAR 0 5
47906: RET
// export function DangerAtRange ( unit , range ) ; begin
47907: LD_INT 0
47909: PPUSH
// if not unit then
47910: LD_VAR 0 1
47914: NOT
47915: IFFALSE 47919
// exit ;
47917: GO 47964
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_VAR 0 1
47928: PPUSH
47929: CALL_OW 255
47933: PPUSH
47934: LD_VAR 0 1
47938: PPUSH
47939: CALL_OW 250
47943: PPUSH
47944: LD_VAR 0 1
47948: PPUSH
47949: CALL_OW 251
47953: PPUSH
47954: LD_VAR 0 2
47958: PPUSH
47959: CALL 46206 0 4
47963: ST_TO_ADDR
// end ;
47964: LD_VAR 0 3
47968: RET
// export function DangerInArea ( side , area ) ; begin
47969: LD_INT 0
47971: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47972: LD_ADDR_VAR 0 3
47976: PUSH
47977: LD_VAR 0 2
47981: PPUSH
47982: LD_INT 81
47984: PUSH
47985: LD_VAR 0 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PPUSH
47994: CALL_OW 70
47998: ST_TO_ADDR
// end ;
47999: LD_VAR 0 3
48003: RET
// export function IsExtension ( b ) ; begin
48004: LD_INT 0
48006: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48007: LD_ADDR_VAR 0 2
48011: PUSH
48012: LD_VAR 0 1
48016: PUSH
48017: LD_INT 23
48019: PUSH
48020: LD_INT 20
48022: PUSH
48023: LD_INT 22
48025: PUSH
48026: LD_INT 17
48028: PUSH
48029: LD_INT 24
48031: PUSH
48032: LD_INT 21
48034: PUSH
48035: LD_INT 19
48037: PUSH
48038: LD_INT 16
48040: PUSH
48041: LD_INT 25
48043: PUSH
48044: LD_INT 18
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: IN
48059: ST_TO_ADDR
// end ;
48060: LD_VAR 0 2
48064: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48065: LD_INT 0
48067: PPUSH
48068: PPUSH
48069: PPUSH
// result := [ ] ;
48070: LD_ADDR_VAR 0 4
48074: PUSH
48075: EMPTY
48076: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48077: LD_ADDR_VAR 0 5
48081: PUSH
48082: LD_VAR 0 2
48086: PPUSH
48087: LD_INT 21
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PPUSH
48097: CALL_OW 70
48101: ST_TO_ADDR
// if not tmp then
48102: LD_VAR 0 5
48106: NOT
48107: IFFALSE 48111
// exit ;
48109: GO 48175
// if checkLink then
48111: LD_VAR 0 3
48115: IFFALSE 48165
// begin for i in tmp do
48117: LD_ADDR_VAR 0 6
48121: PUSH
48122: LD_VAR 0 5
48126: PUSH
48127: FOR_IN
48128: IFFALSE 48163
// if GetBase ( i ) <> base then
48130: LD_VAR 0 6
48134: PPUSH
48135: CALL_OW 274
48139: PUSH
48140: LD_VAR 0 1
48144: NONEQUAL
48145: IFFALSE 48161
// ComLinkToBase ( base , i ) ;
48147: LD_VAR 0 1
48151: PPUSH
48152: LD_VAR 0 6
48156: PPUSH
48157: CALL_OW 169
48161: GO 48127
48163: POP
48164: POP
// end ; result := tmp ;
48165: LD_ADDR_VAR 0 4
48169: PUSH
48170: LD_VAR 0 5
48174: ST_TO_ADDR
// end ;
48175: LD_VAR 0 4
48179: RET
// export function ComComplete ( units , b ) ; var i ; begin
48180: LD_INT 0
48182: PPUSH
48183: PPUSH
// if not units then
48184: LD_VAR 0 1
48188: NOT
48189: IFFALSE 48193
// exit ;
48191: GO 48283
// for i in units do
48193: LD_ADDR_VAR 0 4
48197: PUSH
48198: LD_VAR 0 1
48202: PUSH
48203: FOR_IN
48204: IFFALSE 48281
// if BuildingStatus ( b ) = bs_build then
48206: LD_VAR 0 2
48210: PPUSH
48211: CALL_OW 461
48215: PUSH
48216: LD_INT 1
48218: EQUAL
48219: IFFALSE 48279
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48221: LD_VAR 0 4
48225: PPUSH
48226: LD_STRING h
48228: PUSH
48229: LD_VAR 0 2
48233: PPUSH
48234: CALL_OW 250
48238: PUSH
48239: LD_VAR 0 2
48243: PPUSH
48244: CALL_OW 251
48248: PUSH
48249: LD_VAR 0 2
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: PPUSH
48275: CALL_OW 446
48279: GO 48203
48281: POP
48282: POP
// end ;
48283: LD_VAR 0 3
48287: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48288: LD_INT 0
48290: PPUSH
48291: PPUSH
48292: PPUSH
48293: PPUSH
48294: PPUSH
48295: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48296: LD_VAR 0 1
48300: NOT
48301: PUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 263
48311: PUSH
48312: LD_INT 2
48314: NONEQUAL
48315: OR
48316: IFFALSE 48320
// exit ;
48318: GO 48636
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48320: LD_ADDR_VAR 0 6
48324: PUSH
48325: LD_INT 22
48327: PUSH
48328: LD_VAR 0 1
48332: PPUSH
48333: CALL_OW 255
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 30
48347: PUSH
48348: LD_INT 36
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 34
48357: PUSH
48358: LD_INT 31
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PPUSH
48374: CALL_OW 69
48378: ST_TO_ADDR
// if not tmp then
48379: LD_VAR 0 6
48383: NOT
48384: IFFALSE 48388
// exit ;
48386: GO 48636
// result := [ ] ;
48388: LD_ADDR_VAR 0 2
48392: PUSH
48393: EMPTY
48394: ST_TO_ADDR
// for i in tmp do
48395: LD_ADDR_VAR 0 3
48399: PUSH
48400: LD_VAR 0 6
48404: PUSH
48405: FOR_IN
48406: IFFALSE 48477
// begin t := UnitsInside ( i ) ;
48408: LD_ADDR_VAR 0 4
48412: PUSH
48413: LD_VAR 0 3
48417: PPUSH
48418: CALL_OW 313
48422: ST_TO_ADDR
// if t then
48423: LD_VAR 0 4
48427: IFFALSE 48475
// for j in t do
48429: LD_ADDR_VAR 0 7
48433: PUSH
48434: LD_VAR 0 4
48438: PUSH
48439: FOR_IN
48440: IFFALSE 48473
// result := Replace ( result , result + 1 , j ) ;
48442: LD_ADDR_VAR 0 2
48446: PUSH
48447: LD_VAR 0 2
48451: PPUSH
48452: LD_VAR 0 2
48456: PUSH
48457: LD_INT 1
48459: PLUS
48460: PPUSH
48461: LD_VAR 0 7
48465: PPUSH
48466: CALL_OW 1
48470: ST_TO_ADDR
48471: GO 48439
48473: POP
48474: POP
// end ;
48475: GO 48405
48477: POP
48478: POP
// if not result then
48479: LD_VAR 0 2
48483: NOT
48484: IFFALSE 48488
// exit ;
48486: GO 48636
// mech := result [ 1 ] ;
48488: LD_ADDR_VAR 0 5
48492: PUSH
48493: LD_VAR 0 2
48497: PUSH
48498: LD_INT 1
48500: ARRAY
48501: ST_TO_ADDR
// if result > 1 then
48502: LD_VAR 0 2
48506: PUSH
48507: LD_INT 1
48509: GREATER
48510: IFFALSE 48622
// begin for i = 2 to result do
48512: LD_ADDR_VAR 0 3
48516: PUSH
48517: DOUBLE
48518: LD_INT 2
48520: DEC
48521: ST_TO_ADDR
48522: LD_VAR 0 2
48526: PUSH
48527: FOR_TO
48528: IFFALSE 48620
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48530: LD_ADDR_VAR 0 4
48534: PUSH
48535: LD_VAR 0 2
48539: PUSH
48540: LD_VAR 0 3
48544: ARRAY
48545: PPUSH
48546: LD_INT 3
48548: PPUSH
48549: CALL_OW 259
48553: PUSH
48554: LD_VAR 0 2
48558: PUSH
48559: LD_VAR 0 3
48563: ARRAY
48564: PPUSH
48565: CALL_OW 432
48569: MINUS
48570: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48571: LD_VAR 0 4
48575: PUSH
48576: LD_VAR 0 5
48580: PPUSH
48581: LD_INT 3
48583: PPUSH
48584: CALL_OW 259
48588: PUSH
48589: LD_VAR 0 5
48593: PPUSH
48594: CALL_OW 432
48598: MINUS
48599: GREATEREQUAL
48600: IFFALSE 48618
// mech := result [ i ] ;
48602: LD_ADDR_VAR 0 5
48606: PUSH
48607: LD_VAR 0 2
48611: PUSH
48612: LD_VAR 0 3
48616: ARRAY
48617: ST_TO_ADDR
// end ;
48618: GO 48527
48620: POP
48621: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48622: LD_VAR 0 1
48626: PPUSH
48627: LD_VAR 0 5
48631: PPUSH
48632: CALL_OW 135
// end ;
48636: LD_VAR 0 2
48640: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48641: LD_INT 0
48643: PPUSH
48644: PPUSH
48645: PPUSH
48646: PPUSH
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
48652: PPUSH
48653: PPUSH
48654: PPUSH
48655: PPUSH
// result := [ ] ;
48656: LD_ADDR_VAR 0 7
48660: PUSH
48661: EMPTY
48662: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48663: LD_VAR 0 1
48667: PPUSH
48668: CALL_OW 266
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: IN
48683: NOT
48684: IFFALSE 48688
// exit ;
48686: GO 50322
// if name then
48688: LD_VAR 0 3
48692: IFFALSE 48708
// SetBName ( base_dep , name ) ;
48694: LD_VAR 0 1
48698: PPUSH
48699: LD_VAR 0 3
48703: PPUSH
48704: CALL_OW 500
// base := GetBase ( base_dep ) ;
48708: LD_ADDR_VAR 0 15
48712: PUSH
48713: LD_VAR 0 1
48717: PPUSH
48718: CALL_OW 274
48722: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48723: LD_ADDR_VAR 0 16
48727: PUSH
48728: LD_VAR 0 1
48732: PPUSH
48733: CALL_OW 255
48737: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48738: LD_ADDR_VAR 0 17
48742: PUSH
48743: LD_VAR 0 1
48747: PPUSH
48748: CALL_OW 248
48752: ST_TO_ADDR
// if sources then
48753: LD_VAR 0 5
48757: IFFALSE 48804
// for i = 1 to 3 do
48759: LD_ADDR_VAR 0 8
48763: PUSH
48764: DOUBLE
48765: LD_INT 1
48767: DEC
48768: ST_TO_ADDR
48769: LD_INT 3
48771: PUSH
48772: FOR_TO
48773: IFFALSE 48802
// AddResourceType ( base , i , sources [ i ] ) ;
48775: LD_VAR 0 15
48779: PPUSH
48780: LD_VAR 0 8
48784: PPUSH
48785: LD_VAR 0 5
48789: PUSH
48790: LD_VAR 0 8
48794: ARRAY
48795: PPUSH
48796: CALL_OW 276
48800: GO 48772
48802: POP
48803: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48804: LD_ADDR_VAR 0 18
48808: PUSH
48809: LD_VAR 0 15
48813: PPUSH
48814: LD_VAR 0 2
48818: PPUSH
48819: LD_INT 1
48821: PPUSH
48822: CALL 48065 0 3
48826: ST_TO_ADDR
// InitHc ;
48827: CALL_OW 19
// InitUc ;
48831: CALL_OW 18
// uc_side := side ;
48835: LD_ADDR_OWVAR 20
48839: PUSH
48840: LD_VAR 0 16
48844: ST_TO_ADDR
// uc_nation := nation ;
48845: LD_ADDR_OWVAR 21
48849: PUSH
48850: LD_VAR 0 17
48854: ST_TO_ADDR
// if buildings then
48855: LD_VAR 0 18
48859: IFFALSE 50181
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48861: LD_ADDR_VAR 0 19
48865: PUSH
48866: LD_VAR 0 18
48870: PPUSH
48871: LD_INT 2
48873: PUSH
48874: LD_INT 30
48876: PUSH
48877: LD_INT 29
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 30
48886: PUSH
48887: LD_INT 30
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: PPUSH
48899: CALL_OW 72
48903: ST_TO_ADDR
// if tmp then
48904: LD_VAR 0 19
48908: IFFALSE 48956
// for i in tmp do
48910: LD_ADDR_VAR 0 8
48914: PUSH
48915: LD_VAR 0 19
48919: PUSH
48920: FOR_IN
48921: IFFALSE 48954
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48923: LD_VAR 0 8
48927: PPUSH
48928: CALL_OW 250
48932: PPUSH
48933: LD_VAR 0 8
48937: PPUSH
48938: CALL_OW 251
48942: PPUSH
48943: LD_VAR 0 16
48947: PPUSH
48948: CALL_OW 441
48952: GO 48920
48954: POP
48955: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48956: LD_VAR 0 18
48960: PPUSH
48961: LD_INT 2
48963: PUSH
48964: LD_INT 30
48966: PUSH
48967: LD_INT 32
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 30
48976: PUSH
48977: LD_INT 33
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: PPUSH
48989: CALL_OW 72
48993: IFFALSE 49081
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48995: LD_ADDR_VAR 0 8
48999: PUSH
49000: LD_VAR 0 18
49004: PPUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 30
49010: PUSH
49011: LD_INT 32
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 30
49020: PUSH
49021: LD_INT 33
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: PPUSH
49033: CALL_OW 72
49037: PUSH
49038: FOR_IN
49039: IFFALSE 49079
// begin if not GetBWeapon ( i ) then
49041: LD_VAR 0 8
49045: PPUSH
49046: CALL_OW 269
49050: NOT
49051: IFFALSE 49077
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49053: LD_VAR 0 8
49057: PPUSH
49058: LD_VAR 0 8
49062: PPUSH
49063: LD_VAR 0 2
49067: PPUSH
49068: CALL 50327 0 2
49072: PPUSH
49073: CALL_OW 431
// end ;
49077: GO 49038
49079: POP
49080: POP
// end ; for i = 1 to personel do
49081: LD_ADDR_VAR 0 8
49085: PUSH
49086: DOUBLE
49087: LD_INT 1
49089: DEC
49090: ST_TO_ADDR
49091: LD_VAR 0 6
49095: PUSH
49096: FOR_TO
49097: IFFALSE 50161
// begin if i > 4 then
49099: LD_VAR 0 8
49103: PUSH
49104: LD_INT 4
49106: GREATER
49107: IFFALSE 49111
// break ;
49109: GO 50161
// case i of 1 :
49111: LD_VAR 0 8
49115: PUSH
49116: LD_INT 1
49118: DOUBLE
49119: EQUAL
49120: IFTRUE 49124
49122: GO 49204
49124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49125: LD_ADDR_VAR 0 12
49129: PUSH
49130: LD_VAR 0 18
49134: PPUSH
49135: LD_INT 22
49137: PUSH
49138: LD_VAR 0 16
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 58
49149: PUSH
49150: EMPTY
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 30
49158: PUSH
49159: LD_INT 32
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 30
49168: PUSH
49169: LD_INT 4
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 30
49178: PUSH
49179: LD_INT 5
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: PPUSH
49197: CALL_OW 72
49201: ST_TO_ADDR
49202: GO 49426
49204: LD_INT 2
49206: DOUBLE
49207: EQUAL
49208: IFTRUE 49212
49210: GO 49274
49212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49213: LD_ADDR_VAR 0 12
49217: PUSH
49218: LD_VAR 0 18
49222: PPUSH
49223: LD_INT 22
49225: PUSH
49226: LD_VAR 0 16
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: LD_INT 30
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 30
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PPUSH
49267: CALL_OW 72
49271: ST_TO_ADDR
49272: GO 49426
49274: LD_INT 3
49276: DOUBLE
49277: EQUAL
49278: IFTRUE 49282
49280: GO 49344
49282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49283: LD_ADDR_VAR 0 12
49287: PUSH
49288: LD_VAR 0 18
49292: PPUSH
49293: LD_INT 22
49295: PUSH
49296: LD_VAR 0 16
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 30
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 30
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PPUSH
49337: CALL_OW 72
49341: ST_TO_ADDR
49342: GO 49426
49344: LD_INT 4
49346: DOUBLE
49347: EQUAL
49348: IFTRUE 49352
49350: GO 49425
49352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49353: LD_ADDR_VAR 0 12
49357: PUSH
49358: LD_VAR 0 18
49362: PPUSH
49363: LD_INT 22
49365: PUSH
49366: LD_VAR 0 16
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 30
49380: PUSH
49381: LD_INT 6
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 30
49390: PUSH
49391: LD_INT 7
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 30
49400: PUSH
49401: LD_INT 8
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PPUSH
49418: CALL_OW 72
49422: ST_TO_ADDR
49423: GO 49426
49425: POP
// if i = 1 then
49426: LD_VAR 0 8
49430: PUSH
49431: LD_INT 1
49433: EQUAL
49434: IFFALSE 49545
// begin tmp := [ ] ;
49436: LD_ADDR_VAR 0 19
49440: PUSH
49441: EMPTY
49442: ST_TO_ADDR
// for j in f do
49443: LD_ADDR_VAR 0 9
49447: PUSH
49448: LD_VAR 0 12
49452: PUSH
49453: FOR_IN
49454: IFFALSE 49527
// if GetBType ( j ) = b_bunker then
49456: LD_VAR 0 9
49460: PPUSH
49461: CALL_OW 266
49465: PUSH
49466: LD_INT 32
49468: EQUAL
49469: IFFALSE 49496
// tmp := Insert ( tmp , 1 , j ) else
49471: LD_ADDR_VAR 0 19
49475: PUSH
49476: LD_VAR 0 19
49480: PPUSH
49481: LD_INT 1
49483: PPUSH
49484: LD_VAR 0 9
49488: PPUSH
49489: CALL_OW 2
49493: ST_TO_ADDR
49494: GO 49525
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49496: LD_ADDR_VAR 0 19
49500: PUSH
49501: LD_VAR 0 19
49505: PPUSH
49506: LD_VAR 0 19
49510: PUSH
49511: LD_INT 1
49513: PLUS
49514: PPUSH
49515: LD_VAR 0 9
49519: PPUSH
49520: CALL_OW 2
49524: ST_TO_ADDR
49525: GO 49453
49527: POP
49528: POP
// if tmp then
49529: LD_VAR 0 19
49533: IFFALSE 49545
// f := tmp ;
49535: LD_ADDR_VAR 0 12
49539: PUSH
49540: LD_VAR 0 19
49544: ST_TO_ADDR
// end ; x := personel [ i ] ;
49545: LD_ADDR_VAR 0 13
49549: PUSH
49550: LD_VAR 0 6
49554: PUSH
49555: LD_VAR 0 8
49559: ARRAY
49560: ST_TO_ADDR
// if x = - 1 then
49561: LD_VAR 0 13
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: EQUAL
49570: IFFALSE 49779
// begin for j in f do
49572: LD_ADDR_VAR 0 9
49576: PUSH
49577: LD_VAR 0 12
49581: PUSH
49582: FOR_IN
49583: IFFALSE 49775
// repeat InitHc ;
49585: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49589: LD_VAR 0 9
49593: PPUSH
49594: CALL_OW 266
49598: PUSH
49599: LD_INT 5
49601: EQUAL
49602: IFFALSE 49672
// begin if UnitsInside ( j ) < 3 then
49604: LD_VAR 0 9
49608: PPUSH
49609: CALL_OW 313
49613: PUSH
49614: LD_INT 3
49616: LESS
49617: IFFALSE 49653
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49619: LD_INT 0
49621: PPUSH
49622: LD_INT 5
49624: PUSH
49625: LD_INT 8
49627: PUSH
49628: LD_INT 9
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: PUSH
49636: LD_VAR 0 17
49640: ARRAY
49641: PPUSH
49642: LD_VAR 0 4
49646: PPUSH
49647: CALL_OW 380
49651: GO 49670
// PrepareHuman ( false , i , skill ) ;
49653: LD_INT 0
49655: PPUSH
49656: LD_VAR 0 8
49660: PPUSH
49661: LD_VAR 0 4
49665: PPUSH
49666: CALL_OW 380
// end else
49670: GO 49689
// PrepareHuman ( false , i , skill ) ;
49672: LD_INT 0
49674: PPUSH
49675: LD_VAR 0 8
49679: PPUSH
49680: LD_VAR 0 4
49684: PPUSH
49685: CALL_OW 380
// un := CreateHuman ;
49689: LD_ADDR_VAR 0 14
49693: PUSH
49694: CALL_OW 44
49698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49699: LD_ADDR_VAR 0 7
49703: PUSH
49704: LD_VAR 0 7
49708: PPUSH
49709: LD_INT 1
49711: PPUSH
49712: LD_VAR 0 14
49716: PPUSH
49717: CALL_OW 2
49721: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49722: LD_VAR 0 14
49726: PPUSH
49727: LD_VAR 0 9
49731: PPUSH
49732: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49736: LD_VAR 0 9
49740: PPUSH
49741: CALL_OW 313
49745: PUSH
49746: LD_INT 6
49748: EQUAL
49749: PUSH
49750: LD_VAR 0 9
49754: PPUSH
49755: CALL_OW 266
49759: PUSH
49760: LD_INT 32
49762: PUSH
49763: LD_INT 31
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: IN
49770: OR
49771: IFFALSE 49585
49773: GO 49582
49775: POP
49776: POP
// end else
49777: GO 50159
// for j = 1 to x do
49779: LD_ADDR_VAR 0 9
49783: PUSH
49784: DOUBLE
49785: LD_INT 1
49787: DEC
49788: ST_TO_ADDR
49789: LD_VAR 0 13
49793: PUSH
49794: FOR_TO
49795: IFFALSE 50157
// begin InitHc ;
49797: CALL_OW 19
// if not f then
49801: LD_VAR 0 12
49805: NOT
49806: IFFALSE 49895
// begin PrepareHuman ( false , i , skill ) ;
49808: LD_INT 0
49810: PPUSH
49811: LD_VAR 0 8
49815: PPUSH
49816: LD_VAR 0 4
49820: PPUSH
49821: CALL_OW 380
// un := CreateHuman ;
49825: LD_ADDR_VAR 0 14
49829: PUSH
49830: CALL_OW 44
49834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49835: LD_ADDR_VAR 0 7
49839: PUSH
49840: LD_VAR 0 7
49844: PPUSH
49845: LD_INT 1
49847: PPUSH
49848: LD_VAR 0 14
49852: PPUSH
49853: CALL_OW 2
49857: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49858: LD_VAR 0 14
49862: PPUSH
49863: LD_VAR 0 1
49867: PPUSH
49868: CALL_OW 250
49872: PPUSH
49873: LD_VAR 0 1
49877: PPUSH
49878: CALL_OW 251
49882: PPUSH
49883: LD_INT 10
49885: PPUSH
49886: LD_INT 0
49888: PPUSH
49889: CALL_OW 50
// continue ;
49893: GO 49794
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49895: LD_VAR 0 12
49899: PUSH
49900: LD_INT 1
49902: ARRAY
49903: PPUSH
49904: CALL_OW 313
49908: PUSH
49909: LD_VAR 0 12
49913: PUSH
49914: LD_INT 1
49916: ARRAY
49917: PPUSH
49918: CALL_OW 266
49922: PUSH
49923: LD_INT 32
49925: PUSH
49926: LD_INT 31
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: IN
49933: AND
49934: PUSH
49935: LD_VAR 0 12
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: CALL_OW 313
49948: PUSH
49949: LD_INT 6
49951: EQUAL
49952: OR
49953: IFFALSE 49973
// f := Delete ( f , 1 ) ;
49955: LD_ADDR_VAR 0 12
49959: PUSH
49960: LD_VAR 0 12
49964: PPUSH
49965: LD_INT 1
49967: PPUSH
49968: CALL_OW 3
49972: ST_TO_ADDR
// if not f then
49973: LD_VAR 0 12
49977: NOT
49978: IFFALSE 49996
// begin x := x + 2 ;
49980: LD_ADDR_VAR 0 13
49984: PUSH
49985: LD_VAR 0 13
49989: PUSH
49990: LD_INT 2
49992: PLUS
49993: ST_TO_ADDR
// continue ;
49994: GO 49794
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49996: LD_VAR 0 12
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PPUSH
50005: CALL_OW 266
50009: PUSH
50010: LD_INT 5
50012: EQUAL
50013: IFFALSE 50087
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50015: LD_VAR 0 12
50019: PUSH
50020: LD_INT 1
50022: ARRAY
50023: PPUSH
50024: CALL_OW 313
50028: PUSH
50029: LD_INT 3
50031: LESS
50032: IFFALSE 50068
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50034: LD_INT 0
50036: PPUSH
50037: LD_INT 5
50039: PUSH
50040: LD_INT 8
50042: PUSH
50043: LD_INT 9
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: PUSH
50051: LD_VAR 0 17
50055: ARRAY
50056: PPUSH
50057: LD_VAR 0 4
50061: PPUSH
50062: CALL_OW 380
50066: GO 50085
// PrepareHuman ( false , i , skill ) ;
50068: LD_INT 0
50070: PPUSH
50071: LD_VAR 0 8
50075: PPUSH
50076: LD_VAR 0 4
50080: PPUSH
50081: CALL_OW 380
// end else
50085: GO 50104
// PrepareHuman ( false , i , skill ) ;
50087: LD_INT 0
50089: PPUSH
50090: LD_VAR 0 8
50094: PPUSH
50095: LD_VAR 0 4
50099: PPUSH
50100: CALL_OW 380
// un := CreateHuman ;
50104: LD_ADDR_VAR 0 14
50108: PUSH
50109: CALL_OW 44
50113: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50114: LD_ADDR_VAR 0 7
50118: PUSH
50119: LD_VAR 0 7
50123: PPUSH
50124: LD_INT 1
50126: PPUSH
50127: LD_VAR 0 14
50131: PPUSH
50132: CALL_OW 2
50136: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50137: LD_VAR 0 14
50141: PPUSH
50142: LD_VAR 0 12
50146: PUSH
50147: LD_INT 1
50149: ARRAY
50150: PPUSH
50151: CALL_OW 52
// end ;
50155: GO 49794
50157: POP
50158: POP
// end ;
50159: GO 49096
50161: POP
50162: POP
// result := result ^ buildings ;
50163: LD_ADDR_VAR 0 7
50167: PUSH
50168: LD_VAR 0 7
50172: PUSH
50173: LD_VAR 0 18
50177: ADD
50178: ST_TO_ADDR
// end else
50179: GO 50322
// begin for i = 1 to personel do
50181: LD_ADDR_VAR 0 8
50185: PUSH
50186: DOUBLE
50187: LD_INT 1
50189: DEC
50190: ST_TO_ADDR
50191: LD_VAR 0 6
50195: PUSH
50196: FOR_TO
50197: IFFALSE 50320
// begin if i > 4 then
50199: LD_VAR 0 8
50203: PUSH
50204: LD_INT 4
50206: GREATER
50207: IFFALSE 50211
// break ;
50209: GO 50320
// x := personel [ i ] ;
50211: LD_ADDR_VAR 0 13
50215: PUSH
50216: LD_VAR 0 6
50220: PUSH
50221: LD_VAR 0 8
50225: ARRAY
50226: ST_TO_ADDR
// if x = - 1 then
50227: LD_VAR 0 13
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: EQUAL
50236: IFFALSE 50240
// continue ;
50238: GO 50196
// PrepareHuman ( false , i , skill ) ;
50240: LD_INT 0
50242: PPUSH
50243: LD_VAR 0 8
50247: PPUSH
50248: LD_VAR 0 4
50252: PPUSH
50253: CALL_OW 380
// un := CreateHuman ;
50257: LD_ADDR_VAR 0 14
50261: PUSH
50262: CALL_OW 44
50266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50267: LD_VAR 0 14
50271: PPUSH
50272: LD_VAR 0 1
50276: PPUSH
50277: CALL_OW 250
50281: PPUSH
50282: LD_VAR 0 1
50286: PPUSH
50287: CALL_OW 251
50291: PPUSH
50292: LD_INT 10
50294: PPUSH
50295: LD_INT 0
50297: PPUSH
50298: CALL_OW 50
// result := result ^ un ;
50302: LD_ADDR_VAR 0 7
50306: PUSH
50307: LD_VAR 0 7
50311: PUSH
50312: LD_VAR 0 14
50316: ADD
50317: ST_TO_ADDR
// end ;
50318: GO 50196
50320: POP
50321: POP
// end ; end ;
50322: LD_VAR 0 7
50326: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50327: LD_INT 0
50329: PPUSH
50330: PPUSH
50331: PPUSH
50332: PPUSH
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
50337: PPUSH
50338: PPUSH
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
50343: PPUSH
50344: PPUSH
// result := false ;
50345: LD_ADDR_VAR 0 3
50349: PUSH
50350: LD_INT 0
50352: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50353: LD_VAR 0 1
50357: NOT
50358: PUSH
50359: LD_VAR 0 1
50363: PPUSH
50364: CALL_OW 266
50368: PUSH
50369: LD_INT 32
50371: PUSH
50372: LD_INT 33
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: IN
50379: NOT
50380: OR
50381: IFFALSE 50385
// exit ;
50383: GO 51494
// nat := GetNation ( tower ) ;
50385: LD_ADDR_VAR 0 12
50389: PUSH
50390: LD_VAR 0 1
50394: PPUSH
50395: CALL_OW 248
50399: ST_TO_ADDR
// side := GetSide ( tower ) ;
50400: LD_ADDR_VAR 0 16
50404: PUSH
50405: LD_VAR 0 1
50409: PPUSH
50410: CALL_OW 255
50414: ST_TO_ADDR
// x := GetX ( tower ) ;
50415: LD_ADDR_VAR 0 10
50419: PUSH
50420: LD_VAR 0 1
50424: PPUSH
50425: CALL_OW 250
50429: ST_TO_ADDR
// y := GetY ( tower ) ;
50430: LD_ADDR_VAR 0 11
50434: PUSH
50435: LD_VAR 0 1
50439: PPUSH
50440: CALL_OW 251
50444: ST_TO_ADDR
// if not x or not y then
50445: LD_VAR 0 10
50449: NOT
50450: PUSH
50451: LD_VAR 0 11
50455: NOT
50456: OR
50457: IFFALSE 50461
// exit ;
50459: GO 51494
// weapon := 0 ;
50461: LD_ADDR_VAR 0 18
50465: PUSH
50466: LD_INT 0
50468: ST_TO_ADDR
// fac_list := [ ] ;
50469: LD_ADDR_VAR 0 17
50473: PUSH
50474: EMPTY
50475: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50476: LD_ADDR_VAR 0 6
50480: PUSH
50481: LD_VAR 0 1
50485: PPUSH
50486: CALL_OW 274
50490: PPUSH
50491: LD_VAR 0 2
50495: PPUSH
50496: LD_INT 0
50498: PPUSH
50499: CALL 48065 0 3
50503: PPUSH
50504: LD_INT 30
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PPUSH
50514: CALL_OW 72
50518: ST_TO_ADDR
// if not factories then
50519: LD_VAR 0 6
50523: NOT
50524: IFFALSE 50528
// exit ;
50526: GO 51494
// for i in factories do
50528: LD_ADDR_VAR 0 8
50532: PUSH
50533: LD_VAR 0 6
50537: PUSH
50538: FOR_IN
50539: IFFALSE 50564
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50541: LD_ADDR_VAR 0 17
50545: PUSH
50546: LD_VAR 0 17
50550: PUSH
50551: LD_VAR 0 8
50555: PPUSH
50556: CALL_OW 478
50560: UNION
50561: ST_TO_ADDR
50562: GO 50538
50564: POP
50565: POP
// if not fac_list then
50566: LD_VAR 0 17
50570: NOT
50571: IFFALSE 50575
// exit ;
50573: GO 51494
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50575: LD_ADDR_VAR 0 5
50579: PUSH
50580: LD_INT 4
50582: PUSH
50583: LD_INT 5
50585: PUSH
50586: LD_INT 9
50588: PUSH
50589: LD_INT 10
50591: PUSH
50592: LD_INT 6
50594: PUSH
50595: LD_INT 7
50597: PUSH
50598: LD_INT 11
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 27
50612: PUSH
50613: LD_INT 28
50615: PUSH
50616: LD_INT 26
50618: PUSH
50619: LD_INT 30
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 43
50630: PUSH
50631: LD_INT 44
50633: PUSH
50634: LD_INT 46
50636: PUSH
50637: LD_INT 45
50639: PUSH
50640: LD_INT 47
50642: PUSH
50643: LD_INT 49
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: PUSH
50659: LD_VAR 0 12
50663: ARRAY
50664: ST_TO_ADDR
// list := list isect fac_list ;
50665: LD_ADDR_VAR 0 5
50669: PUSH
50670: LD_VAR 0 5
50674: PUSH
50675: LD_VAR 0 17
50679: ISECT
50680: ST_TO_ADDR
// if not list then
50681: LD_VAR 0 5
50685: NOT
50686: IFFALSE 50690
// exit ;
50688: GO 51494
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50690: LD_VAR 0 12
50694: PUSH
50695: LD_INT 3
50697: EQUAL
50698: PUSH
50699: LD_INT 49
50701: PUSH
50702: LD_VAR 0 5
50706: IN
50707: AND
50708: PUSH
50709: LD_INT 31
50711: PPUSH
50712: LD_VAR 0 16
50716: PPUSH
50717: CALL_OW 321
50721: PUSH
50722: LD_INT 2
50724: EQUAL
50725: AND
50726: IFFALSE 50786
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50728: LD_INT 22
50730: PUSH
50731: LD_VAR 0 16
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 35
50742: PUSH
50743: LD_INT 49
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 91
50752: PUSH
50753: LD_VAR 0 1
50757: PUSH
50758: LD_INT 10
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: PPUSH
50771: CALL_OW 69
50775: NOT
50776: IFFALSE 50786
// weapon := ru_time_lapser ;
50778: LD_ADDR_VAR 0 18
50782: PUSH
50783: LD_INT 49
50785: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50786: LD_VAR 0 12
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: IN
50801: PUSH
50802: LD_INT 11
50804: PUSH
50805: LD_VAR 0 5
50809: IN
50810: PUSH
50811: LD_INT 30
50813: PUSH
50814: LD_VAR 0 5
50818: IN
50819: OR
50820: AND
50821: PUSH
50822: LD_INT 6
50824: PPUSH
50825: LD_VAR 0 16
50829: PPUSH
50830: CALL_OW 321
50834: PUSH
50835: LD_INT 2
50837: EQUAL
50838: AND
50839: IFFALSE 51004
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50841: LD_INT 22
50843: PUSH
50844: LD_VAR 0 16
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 35
50858: PUSH
50859: LD_INT 11
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 35
50868: PUSH
50869: LD_INT 30
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 91
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 18
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: PPUSH
50902: CALL_OW 69
50906: NOT
50907: PUSH
50908: LD_INT 22
50910: PUSH
50911: LD_VAR 0 16
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 30
50925: PUSH
50926: LD_INT 32
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 30
50935: PUSH
50936: LD_INT 33
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 91
50950: PUSH
50951: LD_VAR 0 1
50955: PUSH
50956: LD_INT 12
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: PPUSH
50972: CALL_OW 69
50976: PUSH
50977: LD_INT 2
50979: GREATER
50980: AND
50981: IFFALSE 51004
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50983: LD_ADDR_VAR 0 18
50987: PUSH
50988: LD_INT 11
50990: PUSH
50991: LD_INT 30
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_VAR 0 12
51002: ARRAY
51003: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51004: LD_VAR 0 18
51008: NOT
51009: PUSH
51010: LD_INT 40
51012: PPUSH
51013: LD_VAR 0 16
51017: PPUSH
51018: CALL_OW 321
51022: PUSH
51023: LD_INT 2
51025: EQUAL
51026: AND
51027: PUSH
51028: LD_INT 7
51030: PUSH
51031: LD_VAR 0 5
51035: IN
51036: PUSH
51037: LD_INT 28
51039: PUSH
51040: LD_VAR 0 5
51044: IN
51045: OR
51046: PUSH
51047: LD_INT 45
51049: PUSH
51050: LD_VAR 0 5
51054: IN
51055: OR
51056: AND
51057: IFFALSE 51311
// begin hex := GetHexInfo ( x , y ) ;
51059: LD_ADDR_VAR 0 4
51063: PUSH
51064: LD_VAR 0 10
51068: PPUSH
51069: LD_VAR 0 11
51073: PPUSH
51074: CALL_OW 546
51078: ST_TO_ADDR
// if hex [ 1 ] then
51079: LD_VAR 0 4
51083: PUSH
51084: LD_INT 1
51086: ARRAY
51087: IFFALSE 51091
// exit ;
51089: GO 51494
// height := hex [ 2 ] ;
51091: LD_ADDR_VAR 0 15
51095: PUSH
51096: LD_VAR 0 4
51100: PUSH
51101: LD_INT 2
51103: ARRAY
51104: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51105: LD_ADDR_VAR 0 14
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 5
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// for i in tmp do
51128: LD_ADDR_VAR 0 8
51132: PUSH
51133: LD_VAR 0 14
51137: PUSH
51138: FOR_IN
51139: IFFALSE 51309
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51141: LD_ADDR_VAR 0 9
51145: PUSH
51146: LD_VAR 0 10
51150: PPUSH
51151: LD_VAR 0 8
51155: PPUSH
51156: LD_INT 5
51158: PPUSH
51159: CALL_OW 272
51163: PUSH
51164: LD_VAR 0 11
51168: PPUSH
51169: LD_VAR 0 8
51173: PPUSH
51174: LD_INT 5
51176: PPUSH
51177: CALL_OW 273
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51186: LD_VAR 0 9
51190: PUSH
51191: LD_INT 1
51193: ARRAY
51194: PPUSH
51195: LD_VAR 0 9
51199: PUSH
51200: LD_INT 2
51202: ARRAY
51203: PPUSH
51204: CALL_OW 488
51208: IFFALSE 51307
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51210: LD_ADDR_VAR 0 4
51214: PUSH
51215: LD_VAR 0 9
51219: PUSH
51220: LD_INT 1
51222: ARRAY
51223: PPUSH
51224: LD_VAR 0 9
51228: PUSH
51229: LD_INT 2
51231: ARRAY
51232: PPUSH
51233: CALL_OW 546
51237: ST_TO_ADDR
// if hex [ 1 ] then
51238: LD_VAR 0 4
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: IFFALSE 51250
// continue ;
51248: GO 51138
// h := hex [ 2 ] ;
51250: LD_ADDR_VAR 0 13
51254: PUSH
51255: LD_VAR 0 4
51259: PUSH
51260: LD_INT 2
51262: ARRAY
51263: ST_TO_ADDR
// if h + 7 < height then
51264: LD_VAR 0 13
51268: PUSH
51269: LD_INT 7
51271: PLUS
51272: PUSH
51273: LD_VAR 0 15
51277: LESS
51278: IFFALSE 51307
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51280: LD_ADDR_VAR 0 18
51284: PUSH
51285: LD_INT 7
51287: PUSH
51288: LD_INT 28
51290: PUSH
51291: LD_INT 45
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: PUSH
51299: LD_VAR 0 12
51303: ARRAY
51304: ST_TO_ADDR
// break ;
51305: GO 51309
// end ; end ; end ;
51307: GO 51138
51309: POP
51310: POP
// end ; if not weapon then
51311: LD_VAR 0 18
51315: NOT
51316: IFFALSE 51376
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51318: LD_ADDR_VAR 0 5
51322: PUSH
51323: LD_VAR 0 5
51327: PUSH
51328: LD_INT 11
51330: PUSH
51331: LD_INT 30
51333: PUSH
51334: LD_INT 49
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: DIFF
51342: ST_TO_ADDR
// if not list then
51343: LD_VAR 0 5
51347: NOT
51348: IFFALSE 51352
// exit ;
51350: GO 51494
// weapon := list [ rand ( 1 , list ) ] ;
51352: LD_ADDR_VAR 0 18
51356: PUSH
51357: LD_VAR 0 5
51361: PUSH
51362: LD_INT 1
51364: PPUSH
51365: LD_VAR 0 5
51369: PPUSH
51370: CALL_OW 12
51374: ARRAY
51375: ST_TO_ADDR
// end ; if weapon then
51376: LD_VAR 0 18
51380: IFFALSE 51494
// begin tmp := CostOfWeapon ( weapon ) ;
51382: LD_ADDR_VAR 0 14
51386: PUSH
51387: LD_VAR 0 18
51391: PPUSH
51392: CALL_OW 451
51396: ST_TO_ADDR
// j := GetBase ( tower ) ;
51397: LD_ADDR_VAR 0 9
51401: PUSH
51402: LD_VAR 0 1
51406: PPUSH
51407: CALL_OW 274
51411: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51412: LD_VAR 0 9
51416: PPUSH
51417: LD_INT 1
51419: PPUSH
51420: CALL_OW 275
51424: PUSH
51425: LD_VAR 0 14
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: GREATEREQUAL
51434: PUSH
51435: LD_VAR 0 9
51439: PPUSH
51440: LD_INT 2
51442: PPUSH
51443: CALL_OW 275
51447: PUSH
51448: LD_VAR 0 14
51452: PUSH
51453: LD_INT 2
51455: ARRAY
51456: GREATEREQUAL
51457: AND
51458: PUSH
51459: LD_VAR 0 9
51463: PPUSH
51464: LD_INT 3
51466: PPUSH
51467: CALL_OW 275
51471: PUSH
51472: LD_VAR 0 14
51476: PUSH
51477: LD_INT 3
51479: ARRAY
51480: GREATEREQUAL
51481: AND
51482: IFFALSE 51494
// result := weapon ;
51484: LD_ADDR_VAR 0 3
51488: PUSH
51489: LD_VAR 0 18
51493: ST_TO_ADDR
// end ; end ;
51494: LD_VAR 0 3
51498: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51499: LD_INT 0
51501: PPUSH
51502: PPUSH
// result := true ;
51503: LD_ADDR_VAR 0 3
51507: PUSH
51508: LD_INT 1
51510: ST_TO_ADDR
// if array1 = array2 then
51511: LD_VAR 0 1
51515: PUSH
51516: LD_VAR 0 2
51520: EQUAL
51521: IFFALSE 51581
// begin for i = 1 to array1 do
51523: LD_ADDR_VAR 0 4
51527: PUSH
51528: DOUBLE
51529: LD_INT 1
51531: DEC
51532: ST_TO_ADDR
51533: LD_VAR 0 1
51537: PUSH
51538: FOR_TO
51539: IFFALSE 51577
// if array1 [ i ] <> array2 [ i ] then
51541: LD_VAR 0 1
51545: PUSH
51546: LD_VAR 0 4
51550: ARRAY
51551: PUSH
51552: LD_VAR 0 2
51556: PUSH
51557: LD_VAR 0 4
51561: ARRAY
51562: NONEQUAL
51563: IFFALSE 51575
// begin result := false ;
51565: LD_ADDR_VAR 0 3
51569: PUSH
51570: LD_INT 0
51572: ST_TO_ADDR
// break ;
51573: GO 51577
// end ;
51575: GO 51538
51577: POP
51578: POP
// end else
51579: GO 51589
// result := false ;
51581: LD_ADDR_VAR 0 3
51585: PUSH
51586: LD_INT 0
51588: ST_TO_ADDR
// end ;
51589: LD_VAR 0 3
51593: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51594: LD_INT 0
51596: PPUSH
51597: PPUSH
// if not array1 or not array2 then
51598: LD_VAR 0 1
51602: NOT
51603: PUSH
51604: LD_VAR 0 2
51608: NOT
51609: OR
51610: IFFALSE 51614
// exit ;
51612: GO 51678
// result := true ;
51614: LD_ADDR_VAR 0 3
51618: PUSH
51619: LD_INT 1
51621: ST_TO_ADDR
// for i = 1 to array1 do
51622: LD_ADDR_VAR 0 4
51626: PUSH
51627: DOUBLE
51628: LD_INT 1
51630: DEC
51631: ST_TO_ADDR
51632: LD_VAR 0 1
51636: PUSH
51637: FOR_TO
51638: IFFALSE 51676
// if array1 [ i ] <> array2 [ i ] then
51640: LD_VAR 0 1
51644: PUSH
51645: LD_VAR 0 4
51649: ARRAY
51650: PUSH
51651: LD_VAR 0 2
51655: PUSH
51656: LD_VAR 0 4
51660: ARRAY
51661: NONEQUAL
51662: IFFALSE 51674
// begin result := false ;
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_INT 0
51671: ST_TO_ADDR
// break ;
51672: GO 51676
// end ;
51674: GO 51637
51676: POP
51677: POP
// end ;
51678: LD_VAR 0 3
51682: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51683: LD_INT 0
51685: PPUSH
51686: PPUSH
51687: PPUSH
// pom := GetBase ( fac ) ;
51688: LD_ADDR_VAR 0 5
51692: PUSH
51693: LD_VAR 0 1
51697: PPUSH
51698: CALL_OW 274
51702: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51703: LD_ADDR_VAR 0 4
51707: PUSH
51708: LD_VAR 0 2
51712: PUSH
51713: LD_INT 1
51715: ARRAY
51716: PPUSH
51717: LD_VAR 0 2
51721: PUSH
51722: LD_INT 2
51724: ARRAY
51725: PPUSH
51726: LD_VAR 0 2
51730: PUSH
51731: LD_INT 3
51733: ARRAY
51734: PPUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 4
51742: ARRAY
51743: PPUSH
51744: CALL_OW 449
51748: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51749: LD_ADDR_VAR 0 3
51753: PUSH
51754: LD_VAR 0 5
51758: PPUSH
51759: LD_INT 1
51761: PPUSH
51762: CALL_OW 275
51766: PUSH
51767: LD_VAR 0 4
51771: PUSH
51772: LD_INT 1
51774: ARRAY
51775: GREATEREQUAL
51776: PUSH
51777: LD_VAR 0 5
51781: PPUSH
51782: LD_INT 2
51784: PPUSH
51785: CALL_OW 275
51789: PUSH
51790: LD_VAR 0 4
51794: PUSH
51795: LD_INT 2
51797: ARRAY
51798: GREATEREQUAL
51799: AND
51800: PUSH
51801: LD_VAR 0 5
51805: PPUSH
51806: LD_INT 3
51808: PPUSH
51809: CALL_OW 275
51813: PUSH
51814: LD_VAR 0 4
51818: PUSH
51819: LD_INT 3
51821: ARRAY
51822: GREATEREQUAL
51823: AND
51824: ST_TO_ADDR
// end ;
51825: LD_VAR 0 3
51829: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51830: LD_INT 0
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
// pom := GetBase ( building ) ;
51836: LD_ADDR_VAR 0 3
51840: PUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 274
51850: ST_TO_ADDR
// if not pom then
51851: LD_VAR 0 3
51855: NOT
51856: IFFALSE 51860
// exit ;
51858: GO 52030
// btype := GetBType ( building ) ;
51860: LD_ADDR_VAR 0 5
51864: PUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: CALL_OW 266
51874: ST_TO_ADDR
// if btype = b_armoury then
51875: LD_VAR 0 5
51879: PUSH
51880: LD_INT 4
51882: EQUAL
51883: IFFALSE 51893
// btype := b_barracks ;
51885: LD_ADDR_VAR 0 5
51889: PUSH
51890: LD_INT 5
51892: ST_TO_ADDR
// if btype = b_depot then
51893: LD_VAR 0 5
51897: PUSH
51898: LD_INT 0
51900: EQUAL
51901: IFFALSE 51911
// btype := b_warehouse ;
51903: LD_ADDR_VAR 0 5
51907: PUSH
51908: LD_INT 1
51910: ST_TO_ADDR
// if btype = b_workshop then
51911: LD_VAR 0 5
51915: PUSH
51916: LD_INT 2
51918: EQUAL
51919: IFFALSE 51929
// btype := b_factory ;
51921: LD_ADDR_VAR 0 5
51925: PUSH
51926: LD_INT 3
51928: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51929: LD_ADDR_VAR 0 4
51933: PUSH
51934: LD_VAR 0 5
51938: PPUSH
51939: LD_VAR 0 1
51943: PPUSH
51944: CALL_OW 248
51948: PPUSH
51949: CALL_OW 450
51953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51954: LD_ADDR_VAR 0 2
51958: PUSH
51959: LD_VAR 0 3
51963: PPUSH
51964: LD_INT 1
51966: PPUSH
51967: CALL_OW 275
51971: PUSH
51972: LD_VAR 0 4
51976: PUSH
51977: LD_INT 1
51979: ARRAY
51980: GREATEREQUAL
51981: PUSH
51982: LD_VAR 0 3
51986: PPUSH
51987: LD_INT 2
51989: PPUSH
51990: CALL_OW 275
51994: PUSH
51995: LD_VAR 0 4
51999: PUSH
52000: LD_INT 2
52002: ARRAY
52003: GREATEREQUAL
52004: AND
52005: PUSH
52006: LD_VAR 0 3
52010: PPUSH
52011: LD_INT 3
52013: PPUSH
52014: CALL_OW 275
52018: PUSH
52019: LD_VAR 0 4
52023: PUSH
52024: LD_INT 3
52026: ARRAY
52027: GREATEREQUAL
52028: AND
52029: ST_TO_ADDR
// end ;
52030: LD_VAR 0 2
52034: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52035: LD_INT 0
52037: PPUSH
52038: PPUSH
52039: PPUSH
// pom := GetBase ( building ) ;
52040: LD_ADDR_VAR 0 4
52044: PUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 274
52054: ST_TO_ADDR
// if not pom then
52055: LD_VAR 0 4
52059: NOT
52060: IFFALSE 52064
// exit ;
52062: GO 52165
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52064: LD_ADDR_VAR 0 5
52068: PUSH
52069: LD_VAR 0 2
52073: PPUSH
52074: LD_VAR 0 1
52078: PPUSH
52079: CALL_OW 248
52083: PPUSH
52084: CALL_OW 450
52088: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52089: LD_ADDR_VAR 0 3
52093: PUSH
52094: LD_VAR 0 4
52098: PPUSH
52099: LD_INT 1
52101: PPUSH
52102: CALL_OW 275
52106: PUSH
52107: LD_VAR 0 5
52111: PUSH
52112: LD_INT 1
52114: ARRAY
52115: GREATEREQUAL
52116: PUSH
52117: LD_VAR 0 4
52121: PPUSH
52122: LD_INT 2
52124: PPUSH
52125: CALL_OW 275
52129: PUSH
52130: LD_VAR 0 5
52134: PUSH
52135: LD_INT 2
52137: ARRAY
52138: GREATEREQUAL
52139: AND
52140: PUSH
52141: LD_VAR 0 4
52145: PPUSH
52146: LD_INT 3
52148: PPUSH
52149: CALL_OW 275
52153: PUSH
52154: LD_VAR 0 5
52158: PUSH
52159: LD_INT 3
52161: ARRAY
52162: GREATEREQUAL
52163: AND
52164: ST_TO_ADDR
// end ;
52165: LD_VAR 0 3
52169: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52170: LD_INT 0
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
// result := false ;
52183: LD_ADDR_VAR 0 8
52187: PUSH
52188: LD_INT 0
52190: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52191: LD_VAR 0 5
52195: NOT
52196: PUSH
52197: LD_VAR 0 1
52201: NOT
52202: OR
52203: PUSH
52204: LD_VAR 0 2
52208: NOT
52209: OR
52210: PUSH
52211: LD_VAR 0 3
52215: NOT
52216: OR
52217: IFFALSE 52221
// exit ;
52219: GO 53035
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52221: LD_ADDR_VAR 0 14
52225: PUSH
52226: LD_VAR 0 1
52230: PPUSH
52231: LD_VAR 0 2
52235: PPUSH
52236: LD_VAR 0 3
52240: PPUSH
52241: LD_VAR 0 4
52245: PPUSH
52246: LD_VAR 0 5
52250: PUSH
52251: LD_INT 1
52253: ARRAY
52254: PPUSH
52255: CALL_OW 248
52259: PPUSH
52260: LD_INT 0
52262: PPUSH
52263: CALL 54288 0 6
52267: ST_TO_ADDR
// if not hexes then
52268: LD_VAR 0 14
52272: NOT
52273: IFFALSE 52277
// exit ;
52275: GO 53035
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52277: LD_ADDR_VAR 0 17
52281: PUSH
52282: LD_VAR 0 5
52286: PPUSH
52287: LD_INT 22
52289: PUSH
52290: LD_VAR 0 13
52294: PPUSH
52295: CALL_OW 255
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 30
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 30
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PPUSH
52336: CALL_OW 72
52340: ST_TO_ADDR
// for i = 1 to hexes do
52341: LD_ADDR_VAR 0 9
52345: PUSH
52346: DOUBLE
52347: LD_INT 1
52349: DEC
52350: ST_TO_ADDR
52351: LD_VAR 0 14
52355: PUSH
52356: FOR_TO
52357: IFFALSE 53033
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52359: LD_ADDR_VAR 0 13
52363: PUSH
52364: LD_VAR 0 14
52368: PUSH
52369: LD_VAR 0 9
52373: ARRAY
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: PPUSH
52379: LD_VAR 0 14
52383: PUSH
52384: LD_VAR 0 9
52388: ARRAY
52389: PUSH
52390: LD_INT 2
52392: ARRAY
52393: PPUSH
52394: CALL_OW 428
52398: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52399: LD_VAR 0 14
52403: PUSH
52404: LD_VAR 0 9
52408: ARRAY
52409: PUSH
52410: LD_INT 1
52412: ARRAY
52413: PPUSH
52414: LD_VAR 0 14
52418: PUSH
52419: LD_VAR 0 9
52423: ARRAY
52424: PUSH
52425: LD_INT 2
52427: ARRAY
52428: PPUSH
52429: CALL_OW 351
52433: PUSH
52434: LD_VAR 0 14
52438: PUSH
52439: LD_VAR 0 9
52443: ARRAY
52444: PUSH
52445: LD_INT 1
52447: ARRAY
52448: PPUSH
52449: LD_VAR 0 14
52453: PUSH
52454: LD_VAR 0 9
52458: ARRAY
52459: PUSH
52460: LD_INT 2
52462: ARRAY
52463: PPUSH
52464: CALL_OW 488
52468: NOT
52469: OR
52470: PUSH
52471: LD_VAR 0 13
52475: PPUSH
52476: CALL_OW 247
52480: PUSH
52481: LD_INT 3
52483: EQUAL
52484: OR
52485: IFFALSE 52491
// exit ;
52487: POP
52488: POP
52489: GO 53035
// if not tmp then
52491: LD_VAR 0 13
52495: NOT
52496: IFFALSE 52500
// continue ;
52498: GO 52356
// result := true ;
52500: LD_ADDR_VAR 0 8
52504: PUSH
52505: LD_INT 1
52507: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52508: LD_VAR 0 6
52512: PUSH
52513: LD_VAR 0 13
52517: PPUSH
52518: CALL_OW 247
52522: PUSH
52523: LD_INT 2
52525: EQUAL
52526: AND
52527: PUSH
52528: LD_VAR 0 13
52532: PPUSH
52533: CALL_OW 263
52537: PUSH
52538: LD_INT 1
52540: EQUAL
52541: AND
52542: IFFALSE 52706
// begin if IsDrivenBy ( tmp ) then
52544: LD_VAR 0 13
52548: PPUSH
52549: CALL_OW 311
52553: IFFALSE 52557
// continue ;
52555: GO 52356
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52557: LD_VAR 0 6
52561: PPUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 60
52567: PUSH
52568: EMPTY
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: LD_INT 55
52580: PUSH
52581: EMPTY
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PPUSH
52592: CALL_OW 72
52596: IFFALSE 52704
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52598: LD_ADDR_VAR 0 18
52602: PUSH
52603: LD_VAR 0 6
52607: PPUSH
52608: LD_INT 3
52610: PUSH
52611: LD_INT 60
52613: PUSH
52614: EMPTY
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: LD_INT 55
52626: PUSH
52627: EMPTY
52628: LIST
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PPUSH
52638: CALL_OW 72
52642: PUSH
52643: LD_INT 1
52645: ARRAY
52646: ST_TO_ADDR
// if IsInUnit ( driver ) then
52647: LD_VAR 0 18
52651: PPUSH
52652: CALL_OW 310
52656: IFFALSE 52667
// ComExit ( driver ) ;
52658: LD_VAR 0 18
52662: PPUSH
52663: CALL 78069 0 1
// AddComEnterUnit ( driver , tmp ) ;
52667: LD_VAR 0 18
52671: PPUSH
52672: LD_VAR 0 13
52676: PPUSH
52677: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52681: LD_VAR 0 18
52685: PPUSH
52686: LD_VAR 0 7
52690: PPUSH
52691: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52695: LD_VAR 0 18
52699: PPUSH
52700: CALL_OW 181
// end ; continue ;
52704: GO 52356
// end ; if not cleaners or not tmp in cleaners then
52706: LD_VAR 0 6
52710: NOT
52711: PUSH
52712: LD_VAR 0 13
52716: PUSH
52717: LD_VAR 0 6
52721: IN
52722: NOT
52723: OR
52724: IFFALSE 53031
// begin if dep then
52726: LD_VAR 0 17
52730: IFFALSE 52866
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52732: LD_ADDR_VAR 0 16
52736: PUSH
52737: LD_VAR 0 17
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PPUSH
52746: CALL_OW 250
52750: PPUSH
52751: LD_VAR 0 17
52755: PUSH
52756: LD_INT 1
52758: ARRAY
52759: PPUSH
52760: CALL_OW 254
52764: PPUSH
52765: LD_INT 5
52767: PPUSH
52768: CALL_OW 272
52772: PUSH
52773: LD_VAR 0 17
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PPUSH
52782: CALL_OW 251
52786: PPUSH
52787: LD_VAR 0 17
52791: PUSH
52792: LD_INT 1
52794: ARRAY
52795: PPUSH
52796: CALL_OW 254
52800: PPUSH
52801: LD_INT 5
52803: PPUSH
52804: CALL_OW 273
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52813: LD_VAR 0 16
52817: PUSH
52818: LD_INT 1
52820: ARRAY
52821: PPUSH
52822: LD_VAR 0 16
52826: PUSH
52827: LD_INT 2
52829: ARRAY
52830: PPUSH
52831: CALL_OW 488
52835: IFFALSE 52866
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52837: LD_VAR 0 13
52841: PPUSH
52842: LD_VAR 0 16
52846: PUSH
52847: LD_INT 1
52849: ARRAY
52850: PPUSH
52851: LD_VAR 0 16
52855: PUSH
52856: LD_INT 2
52858: ARRAY
52859: PPUSH
52860: CALL_OW 111
// continue ;
52864: GO 52356
// end ; end ; r := GetDir ( tmp ) ;
52866: LD_ADDR_VAR 0 15
52870: PUSH
52871: LD_VAR 0 13
52875: PPUSH
52876: CALL_OW 254
52880: ST_TO_ADDR
// if r = 5 then
52881: LD_VAR 0 15
52885: PUSH
52886: LD_INT 5
52888: EQUAL
52889: IFFALSE 52899
// r := 0 ;
52891: LD_ADDR_VAR 0 15
52895: PUSH
52896: LD_INT 0
52898: ST_TO_ADDR
// for j = r to 5 do
52899: LD_ADDR_VAR 0 10
52903: PUSH
52904: DOUBLE
52905: LD_VAR 0 15
52909: DEC
52910: ST_TO_ADDR
52911: LD_INT 5
52913: PUSH
52914: FOR_TO
52915: IFFALSE 53029
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52917: LD_ADDR_VAR 0 11
52921: PUSH
52922: LD_VAR 0 13
52926: PPUSH
52927: CALL_OW 250
52931: PPUSH
52932: LD_VAR 0 10
52936: PPUSH
52937: LD_INT 2
52939: PPUSH
52940: CALL_OW 272
52944: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52945: LD_ADDR_VAR 0 12
52949: PUSH
52950: LD_VAR 0 13
52954: PPUSH
52955: CALL_OW 251
52959: PPUSH
52960: LD_VAR 0 10
52964: PPUSH
52965: LD_INT 2
52967: PPUSH
52968: CALL_OW 273
52972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52973: LD_VAR 0 11
52977: PPUSH
52978: LD_VAR 0 12
52982: PPUSH
52983: CALL_OW 488
52987: PUSH
52988: LD_VAR 0 11
52992: PPUSH
52993: LD_VAR 0 12
52997: PPUSH
52998: CALL_OW 428
53002: NOT
53003: AND
53004: IFFALSE 53027
// begin ComMoveXY ( tmp , _x , _y ) ;
53006: LD_VAR 0 13
53010: PPUSH
53011: LD_VAR 0 11
53015: PPUSH
53016: LD_VAR 0 12
53020: PPUSH
53021: CALL_OW 111
// break ;
53025: GO 53029
// end ; end ;
53027: GO 52914
53029: POP
53030: POP
// end ; end ;
53031: GO 52356
53033: POP
53034: POP
// end ;
53035: LD_VAR 0 8
53039: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53040: LD_INT 0
53042: PPUSH
// result := true ;
53043: LD_ADDR_VAR 0 3
53047: PUSH
53048: LD_INT 1
53050: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53051: LD_VAR 0 2
53055: PUSH
53056: LD_INT 24
53058: DOUBLE
53059: EQUAL
53060: IFTRUE 53070
53062: LD_INT 33
53064: DOUBLE
53065: EQUAL
53066: IFTRUE 53070
53068: GO 53095
53070: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53071: LD_ADDR_VAR 0 3
53075: PUSH
53076: LD_INT 32
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 321
53088: PUSH
53089: LD_INT 2
53091: EQUAL
53092: ST_TO_ADDR
53093: GO 53411
53095: LD_INT 20
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53103
53101: GO 53128
53103: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53104: LD_ADDR_VAR 0 3
53108: PUSH
53109: LD_INT 6
53111: PPUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 321
53121: PUSH
53122: LD_INT 2
53124: EQUAL
53125: ST_TO_ADDR
53126: GO 53411
53128: LD_INT 22
53130: DOUBLE
53131: EQUAL
53132: IFTRUE 53142
53134: LD_INT 36
53136: DOUBLE
53137: EQUAL
53138: IFTRUE 53142
53140: GO 53167
53142: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53143: LD_ADDR_VAR 0 3
53147: PUSH
53148: LD_INT 15
53150: PPUSH
53151: LD_VAR 0 1
53155: PPUSH
53156: CALL_OW 321
53160: PUSH
53161: LD_INT 2
53163: EQUAL
53164: ST_TO_ADDR
53165: GO 53411
53167: LD_INT 30
53169: DOUBLE
53170: EQUAL
53171: IFTRUE 53175
53173: GO 53200
53175: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53176: LD_ADDR_VAR 0 3
53180: PUSH
53181: LD_INT 20
53183: PPUSH
53184: LD_VAR 0 1
53188: PPUSH
53189: CALL_OW 321
53193: PUSH
53194: LD_INT 2
53196: EQUAL
53197: ST_TO_ADDR
53198: GO 53411
53200: LD_INT 28
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53214
53206: LD_INT 21
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53239
53214: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53215: LD_ADDR_VAR 0 3
53219: PUSH
53220: LD_INT 21
53222: PPUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 321
53232: PUSH
53233: LD_INT 2
53235: EQUAL
53236: ST_TO_ADDR
53237: GO 53411
53239: LD_INT 16
53241: DOUBLE
53242: EQUAL
53243: IFTRUE 53247
53245: GO 53272
53247: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53248: LD_ADDR_VAR 0 3
53252: PUSH
53253: LD_INT 84
53255: PPUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 321
53265: PUSH
53266: LD_INT 2
53268: EQUAL
53269: ST_TO_ADDR
53270: GO 53411
53272: LD_INT 19
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53286
53278: LD_INT 23
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53311
53286: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53287: LD_ADDR_VAR 0 3
53291: PUSH
53292: LD_INT 83
53294: PPUSH
53295: LD_VAR 0 1
53299: PPUSH
53300: CALL_OW 321
53304: PUSH
53305: LD_INT 2
53307: EQUAL
53308: ST_TO_ADDR
53309: GO 53411
53311: LD_INT 17
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53319
53317: GO 53344
53319: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53320: LD_ADDR_VAR 0 3
53324: PUSH
53325: LD_INT 39
53327: PPUSH
53328: LD_VAR 0 1
53332: PPUSH
53333: CALL_OW 321
53337: PUSH
53338: LD_INT 2
53340: EQUAL
53341: ST_TO_ADDR
53342: GO 53411
53344: LD_INT 18
53346: DOUBLE
53347: EQUAL
53348: IFTRUE 53352
53350: GO 53377
53352: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53353: LD_ADDR_VAR 0 3
53357: PUSH
53358: LD_INT 40
53360: PPUSH
53361: LD_VAR 0 1
53365: PPUSH
53366: CALL_OW 321
53370: PUSH
53371: LD_INT 2
53373: EQUAL
53374: ST_TO_ADDR
53375: GO 53411
53377: LD_INT 27
53379: DOUBLE
53380: EQUAL
53381: IFTRUE 53385
53383: GO 53410
53385: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53386: LD_ADDR_VAR 0 3
53390: PUSH
53391: LD_INT 35
53393: PPUSH
53394: LD_VAR 0 1
53398: PPUSH
53399: CALL_OW 321
53403: PUSH
53404: LD_INT 2
53406: EQUAL
53407: ST_TO_ADDR
53408: GO 53411
53410: POP
// end ;
53411: LD_VAR 0 3
53415: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53416: LD_INT 0
53418: PPUSH
53419: PPUSH
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
// result := false ;
53429: LD_ADDR_VAR 0 6
53433: PUSH
53434: LD_INT 0
53436: ST_TO_ADDR
// if btype = b_depot then
53437: LD_VAR 0 2
53441: PUSH
53442: LD_INT 0
53444: EQUAL
53445: IFFALSE 53457
// begin result := true ;
53447: LD_ADDR_VAR 0 6
53451: PUSH
53452: LD_INT 1
53454: ST_TO_ADDR
// exit ;
53455: GO 54283
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53457: LD_VAR 0 1
53461: NOT
53462: PUSH
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 266
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: IN
53483: NOT
53484: OR
53485: PUSH
53486: LD_VAR 0 2
53490: NOT
53491: OR
53492: PUSH
53493: LD_VAR 0 5
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: LD_INT 5
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: IN
53524: NOT
53525: OR
53526: PUSH
53527: LD_VAR 0 3
53531: PPUSH
53532: LD_VAR 0 4
53536: PPUSH
53537: CALL_OW 488
53541: NOT
53542: OR
53543: IFFALSE 53547
// exit ;
53545: GO 54283
// side := GetSide ( depot ) ;
53547: LD_ADDR_VAR 0 9
53551: PUSH
53552: LD_VAR 0 1
53556: PPUSH
53557: CALL_OW 255
53561: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53562: LD_VAR 0 9
53566: PPUSH
53567: LD_VAR 0 2
53571: PPUSH
53572: CALL 53040 0 2
53576: NOT
53577: IFFALSE 53581
// exit ;
53579: GO 54283
// pom := GetBase ( depot ) ;
53581: LD_ADDR_VAR 0 10
53585: PUSH
53586: LD_VAR 0 1
53590: PPUSH
53591: CALL_OW 274
53595: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53596: LD_ADDR_VAR 0 11
53600: PUSH
53601: LD_VAR 0 2
53605: PPUSH
53606: LD_VAR 0 1
53610: PPUSH
53611: CALL_OW 248
53615: PPUSH
53616: CALL_OW 450
53620: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53621: LD_VAR 0 10
53625: PPUSH
53626: LD_INT 1
53628: PPUSH
53629: CALL_OW 275
53633: PUSH
53634: LD_VAR 0 11
53638: PUSH
53639: LD_INT 1
53641: ARRAY
53642: GREATEREQUAL
53643: PUSH
53644: LD_VAR 0 10
53648: PPUSH
53649: LD_INT 2
53651: PPUSH
53652: CALL_OW 275
53656: PUSH
53657: LD_VAR 0 11
53661: PUSH
53662: LD_INT 2
53664: ARRAY
53665: GREATEREQUAL
53666: AND
53667: PUSH
53668: LD_VAR 0 10
53672: PPUSH
53673: LD_INT 3
53675: PPUSH
53676: CALL_OW 275
53680: PUSH
53681: LD_VAR 0 11
53685: PUSH
53686: LD_INT 3
53688: ARRAY
53689: GREATEREQUAL
53690: AND
53691: NOT
53692: IFFALSE 53696
// exit ;
53694: GO 54283
// if GetBType ( depot ) = b_depot then
53696: LD_VAR 0 1
53700: PPUSH
53701: CALL_OW 266
53705: PUSH
53706: LD_INT 0
53708: EQUAL
53709: IFFALSE 53721
// dist := 28 else
53711: LD_ADDR_VAR 0 14
53715: PUSH
53716: LD_INT 28
53718: ST_TO_ADDR
53719: GO 53729
// dist := 36 ;
53721: LD_ADDR_VAR 0 14
53725: PUSH
53726: LD_INT 36
53728: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53729: LD_VAR 0 1
53733: PPUSH
53734: LD_VAR 0 3
53738: PPUSH
53739: LD_VAR 0 4
53743: PPUSH
53744: CALL_OW 297
53748: PUSH
53749: LD_VAR 0 14
53753: GREATER
53754: IFFALSE 53758
// exit ;
53756: GO 54283
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53758: LD_ADDR_VAR 0 12
53762: PUSH
53763: LD_VAR 0 2
53767: PPUSH
53768: LD_VAR 0 3
53772: PPUSH
53773: LD_VAR 0 4
53777: PPUSH
53778: LD_VAR 0 5
53782: PPUSH
53783: LD_VAR 0 1
53787: PPUSH
53788: CALL_OW 248
53792: PPUSH
53793: LD_INT 0
53795: PPUSH
53796: CALL 54288 0 6
53800: ST_TO_ADDR
// if not hexes then
53801: LD_VAR 0 12
53805: NOT
53806: IFFALSE 53810
// exit ;
53808: GO 54283
// hex := GetHexInfo ( x , y ) ;
53810: LD_ADDR_VAR 0 15
53814: PUSH
53815: LD_VAR 0 3
53819: PPUSH
53820: LD_VAR 0 4
53824: PPUSH
53825: CALL_OW 546
53829: ST_TO_ADDR
// if hex [ 1 ] then
53830: LD_VAR 0 15
53834: PUSH
53835: LD_INT 1
53837: ARRAY
53838: IFFALSE 53842
// exit ;
53840: GO 54283
// height := hex [ 2 ] ;
53842: LD_ADDR_VAR 0 13
53846: PUSH
53847: LD_VAR 0 15
53851: PUSH
53852: LD_INT 2
53854: ARRAY
53855: ST_TO_ADDR
// for i = 1 to hexes do
53856: LD_ADDR_VAR 0 7
53860: PUSH
53861: DOUBLE
53862: LD_INT 1
53864: DEC
53865: ST_TO_ADDR
53866: LD_VAR 0 12
53870: PUSH
53871: FOR_TO
53872: IFFALSE 54202
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53874: LD_VAR 0 12
53878: PUSH
53879: LD_VAR 0 7
53883: ARRAY
53884: PUSH
53885: LD_INT 1
53887: ARRAY
53888: PPUSH
53889: LD_VAR 0 12
53893: PUSH
53894: LD_VAR 0 7
53898: ARRAY
53899: PUSH
53900: LD_INT 2
53902: ARRAY
53903: PPUSH
53904: CALL_OW 488
53908: NOT
53909: PUSH
53910: LD_VAR 0 12
53914: PUSH
53915: LD_VAR 0 7
53919: ARRAY
53920: PUSH
53921: LD_INT 1
53923: ARRAY
53924: PPUSH
53925: LD_VAR 0 12
53929: PUSH
53930: LD_VAR 0 7
53934: ARRAY
53935: PUSH
53936: LD_INT 2
53938: ARRAY
53939: PPUSH
53940: CALL_OW 428
53944: PUSH
53945: LD_INT 0
53947: GREATER
53948: OR
53949: PUSH
53950: LD_VAR 0 12
53954: PUSH
53955: LD_VAR 0 7
53959: ARRAY
53960: PUSH
53961: LD_INT 1
53963: ARRAY
53964: PPUSH
53965: LD_VAR 0 12
53969: PUSH
53970: LD_VAR 0 7
53974: ARRAY
53975: PUSH
53976: LD_INT 2
53978: ARRAY
53979: PPUSH
53980: CALL_OW 351
53984: OR
53985: IFFALSE 53991
// exit ;
53987: POP
53988: POP
53989: GO 54283
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53991: LD_ADDR_VAR 0 8
53995: PUSH
53996: LD_VAR 0 12
54000: PUSH
54001: LD_VAR 0 7
54005: ARRAY
54006: PUSH
54007: LD_INT 1
54009: ARRAY
54010: PPUSH
54011: LD_VAR 0 12
54015: PUSH
54016: LD_VAR 0 7
54020: ARRAY
54021: PUSH
54022: LD_INT 2
54024: ARRAY
54025: PPUSH
54026: CALL_OW 546
54030: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54031: LD_VAR 0 8
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PUSH
54040: LD_VAR 0 8
54044: PUSH
54045: LD_INT 2
54047: ARRAY
54048: PUSH
54049: LD_VAR 0 13
54053: PUSH
54054: LD_INT 2
54056: PLUS
54057: GREATER
54058: OR
54059: PUSH
54060: LD_VAR 0 8
54064: PUSH
54065: LD_INT 2
54067: ARRAY
54068: PUSH
54069: LD_VAR 0 13
54073: PUSH
54074: LD_INT 2
54076: MINUS
54077: LESS
54078: OR
54079: PUSH
54080: LD_VAR 0 8
54084: PUSH
54085: LD_INT 3
54087: ARRAY
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 8
54094: PUSH
54095: LD_INT 9
54097: PUSH
54098: LD_INT 10
54100: PUSH
54101: LD_INT 11
54103: PUSH
54104: LD_INT 12
54106: PUSH
54107: LD_INT 13
54109: PUSH
54110: LD_INT 16
54112: PUSH
54113: LD_INT 17
54115: PUSH
54116: LD_INT 18
54118: PUSH
54119: LD_INT 19
54121: PUSH
54122: LD_INT 20
54124: PUSH
54125: LD_INT 21
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: IN
54143: NOT
54144: OR
54145: PUSH
54146: LD_VAR 0 8
54150: PUSH
54151: LD_INT 5
54153: ARRAY
54154: NOT
54155: OR
54156: PUSH
54157: LD_VAR 0 8
54161: PUSH
54162: LD_INT 6
54164: ARRAY
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 7
54174: PUSH
54175: LD_INT 9
54177: PUSH
54178: LD_INT 10
54180: PUSH
54181: LD_INT 11
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: IN
54192: NOT
54193: OR
54194: IFFALSE 54200
// exit ;
54196: POP
54197: POP
54198: GO 54283
// end ;
54200: GO 53871
54202: POP
54203: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54204: LD_VAR 0 9
54208: PPUSH
54209: LD_VAR 0 3
54213: PPUSH
54214: LD_VAR 0 4
54218: PPUSH
54219: LD_INT 20
54221: PPUSH
54222: CALL 46206 0 4
54226: PUSH
54227: LD_INT 4
54229: ARRAY
54230: IFFALSE 54234
// exit ;
54232: GO 54283
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54234: LD_VAR 0 2
54238: PUSH
54239: LD_INT 29
54241: PUSH
54242: LD_INT 30
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: IN
54249: PUSH
54250: LD_VAR 0 3
54254: PPUSH
54255: LD_VAR 0 4
54259: PPUSH
54260: LD_VAR 0 9
54264: PPUSH
54265: CALL_OW 440
54269: NOT
54270: AND
54271: IFFALSE 54275
// exit ;
54273: GO 54283
// result := true ;
54275: LD_ADDR_VAR 0 6
54279: PUSH
54280: LD_INT 1
54282: ST_TO_ADDR
// end ;
54283: LD_VAR 0 6
54287: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54288: LD_INT 0
54290: PPUSH
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
54307: PPUSH
54308: PPUSH
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
54313: PPUSH
54314: PPUSH
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
54328: PPUSH
54329: PPUSH
54330: PPUSH
54331: PPUSH
54332: PPUSH
54333: PPUSH
54334: PPUSH
54335: PPUSH
54336: PPUSH
54337: PPUSH
54338: PPUSH
54339: PPUSH
54340: PPUSH
54341: PPUSH
54342: PPUSH
54343: PPUSH
54344: PPUSH
54345: PPUSH
54346: PPUSH
54347: PPUSH
// result = [ ] ;
54348: LD_ADDR_VAR 0 7
54352: PUSH
54353: EMPTY
54354: ST_TO_ADDR
// temp_list = [ ] ;
54355: LD_ADDR_VAR 0 9
54359: PUSH
54360: EMPTY
54361: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54362: LD_VAR 0 4
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: LD_INT 4
54381: PUSH
54382: LD_INT 5
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: IN
54393: NOT
54394: PUSH
54395: LD_VAR 0 1
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: IN
54410: PUSH
54411: LD_VAR 0 5
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: IN
54430: NOT
54431: AND
54432: OR
54433: IFFALSE 54437
// exit ;
54435: GO 72828
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54437: LD_VAR 0 1
54441: PUSH
54442: LD_INT 6
54444: PUSH
54445: LD_INT 7
54447: PUSH
54448: LD_INT 8
54450: PUSH
54451: LD_INT 13
54453: PUSH
54454: LD_INT 12
54456: PUSH
54457: LD_INT 15
54459: PUSH
54460: LD_INT 11
54462: PUSH
54463: LD_INT 14
54465: PUSH
54466: LD_INT 10
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: IN
54480: IFFALSE 54490
// btype = b_lab ;
54482: LD_ADDR_VAR 0 1
54486: PUSH
54487: LD_INT 6
54489: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54490: LD_VAR 0 6
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: IN
54509: NOT
54510: PUSH
54511: LD_VAR 0 1
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: LD_INT 6
54530: PUSH
54531: LD_INT 36
54533: PUSH
54534: LD_INT 4
54536: PUSH
54537: LD_INT 5
54539: PUSH
54540: LD_INT 31
54542: PUSH
54543: LD_INT 32
54545: PUSH
54546: LD_INT 33
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: IN
54562: NOT
54563: PUSH
54564: LD_VAR 0 6
54568: PUSH
54569: LD_INT 1
54571: EQUAL
54572: AND
54573: OR
54574: PUSH
54575: LD_VAR 0 1
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: IN
54590: NOT
54591: PUSH
54592: LD_VAR 0 6
54596: PUSH
54597: LD_INT 2
54599: EQUAL
54600: AND
54601: OR
54602: IFFALSE 54612
// mode = 0 ;
54604: LD_ADDR_VAR 0 6
54608: PUSH
54609: LD_INT 0
54611: ST_TO_ADDR
// case mode of 0 :
54612: LD_VAR 0 6
54616: PUSH
54617: LD_INT 0
54619: DOUBLE
54620: EQUAL
54621: IFTRUE 54625
54623: GO 66078
54625: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54626: LD_ADDR_VAR 0 11
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54819: LD_ADDR_VAR 0 12
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55015: LD_ADDR_VAR 0 13
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: LD_INT 3
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55214: LD_ADDR_VAR 0 14
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55410: LD_ADDR_VAR 0 15
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55603: LD_ADDR_VAR 0 16
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55796: LD_ADDR_VAR 0 17
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56026: LD_ADDR_VAR 0 18
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56256: LD_ADDR_VAR 0 19
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56486: LD_ADDR_VAR 0 20
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56716: LD_ADDR_VAR 0 21
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56946: LD_ADDR_VAR 0 22
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57176: LD_ADDR_VAR 0 23
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57456: LD_ADDR_VAR 0 24
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 3
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57732: LD_ADDR_VAR 0 25
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58006: LD_ADDR_VAR 0 26
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58282: LD_ADDR_VAR 0 27
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58562: LD_ADDR_VAR 0 28
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58844: LD_ADDR_VAR 0 29
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 3
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59123: LD_ADDR_VAR 0 30
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59401: LD_ADDR_VAR 0 31
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59679: LD_ADDR_VAR 0 32
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59957: LD_ADDR_VAR 0 33
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 3
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60236: LD_ADDR_VAR 0 34
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: LD_INT 3
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60516: LD_ADDR_VAR 0 35
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60628: LD_ADDR_VAR 0 36
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60740: LD_ADDR_VAR 0 37
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60852: LD_ADDR_VAR 0 38
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60964: LD_ADDR_VAR 0 39
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61076: LD_ADDR_VAR 0 40
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61188: LD_ADDR_VAR 0 41
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61538: LD_ADDR_VAR 0 42
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 3
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 3
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61888: LD_ADDR_VAR 0 43
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 3
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62236: LD_ADDR_VAR 0 44
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 3
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62586: LD_ADDR_VAR 0 45
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 3
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 3
62883: NEG
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: NEG
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62936: LD_ADDR_VAR 0 46
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63284: LD_ADDR_VAR 0 47
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63435: LD_ADDR_VAR 0 48
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 2
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63582: LD_ADDR_VAR 0 49
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63726: LD_ADDR_VAR 0 50
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63870: LD_ADDR_VAR 0 51
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64017: LD_ADDR_VAR 0 52
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 2
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64168: LD_ADDR_VAR 0 53
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: LD_INT 2
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64398: LD_ADDR_VAR 0 54
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 2
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 2
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 2
64574: NEG
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: NEG
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: LD_INT 2
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64628: LD_ADDR_VAR 0 55
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 2
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 2
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 2
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64858: LD_ADDR_VAR 0 56
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 2
65034: NEG
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: NEG
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65088: LD_ADDR_VAR 0 57
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 2
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 2
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: NEG
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65318: LD_ADDR_VAR 0 58
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 2
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: NEG
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 2
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65548: LD_ADDR_VAR 0 59
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65636: LD_ADDR_VAR 0 60
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65724: LD_ADDR_VAR 0 61
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65812: LD_ADDR_VAR 0 62
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65900: LD_ADDR_VAR 0 63
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65988: LD_ADDR_VAR 0 64
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: ST_TO_ADDR
// end ; 1 :
66076: GO 71973
66078: LD_INT 1
66080: DOUBLE
66081: EQUAL
66082: IFTRUE 66086
66084: GO 68709
66086: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66087: LD_ADDR_VAR 0 11
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 3
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66131: LD_ADDR_VAR 0 12
66135: PUSH
66136: LD_INT 2
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 3
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66172: LD_ADDR_VAR 0 13
66176: PUSH
66177: LD_INT 3
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: LD_INT 3
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 3
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66212: LD_ADDR_VAR 0 14
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 3
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66253: LD_ADDR_VAR 0 15
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: LIST
66296: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66297: LD_ADDR_VAR 0 16
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: NEG
66329: PUSH
66330: LD_INT 3
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66343: LD_ADDR_VAR 0 17
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: LD_INT 3
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66387: LD_ADDR_VAR 0 18
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66428: LD_ADDR_VAR 0 19
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 2
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66468: LD_ADDR_VAR 0 20
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66509: LD_ADDR_VAR 0 21
66513: PUSH
66514: LD_INT 2
66516: NEG
66517: PUSH
66518: LD_INT 1
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 3
66527: NEG
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66553: LD_ADDR_VAR 0 22
66557: PUSH
66558: LD_INT 2
66560: NEG
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66599: LD_ADDR_VAR 0 23
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 3
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: LD_INT 4
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: LD_INT 3
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66643: LD_ADDR_VAR 0 24
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 3
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 4
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: LIST
66683: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66684: LD_ADDR_VAR 0 25
66688: PUSH
66689: LD_INT 3
66691: PUSH
66692: LD_INT 3
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 4
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: PUSH
66712: LD_INT 4
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66724: LD_ADDR_VAR 0 26
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 3
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: LD_INT 3
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66765: LD_ADDR_VAR 0 27
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 4
66794: NEG
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66809: LD_ADDR_VAR 0 28
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: LD_INT 3
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: NEG
66829: PUSH
66830: LD_INT 4
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 4
66840: NEG
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: LIST
66854: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66855: LD_ADDR_VAR 0 29
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 3
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 4
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: LD_INT 4
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: LD_INT 3
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 5
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 5
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 4
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: LD_INT 6
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 6
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: LD_INT 5
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67010: LD_ADDR_VAR 0 30
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 4
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 4
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 4
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 5
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 5
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 5
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 6
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 6
67131: PUSH
67132: LD_INT 1
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67153: LD_ADDR_VAR 0 31
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 3
67170: PUSH
67171: LD_INT 3
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: LD_INT 3
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 4
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 4
67200: PUSH
67201: LD_INT 4
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: LD_INT 4
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 5
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 5
67230: PUSH
67231: LD_INT 5
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 4
67240: PUSH
67241: LD_INT 5
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 6
67250: PUSH
67251: LD_INT 5
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 6
67260: PUSH
67261: LD_INT 6
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 5
67270: PUSH
67271: LD_INT 6
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67292: LD_ADDR_VAR 0 32
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: LD_INT 3
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: LD_INT 4
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 4
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 5
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: LD_INT 5
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: LD_INT 4
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 6
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 6
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 5
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67435: LD_ADDR_VAR 0 33
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: NEG
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 4
67487: NEG
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 4
67498: NEG
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 4
67510: NEG
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 5
67521: NEG
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 5
67532: NEG
67533: PUSH
67534: LD_INT 1
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 5
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 6
67555: NEG
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 6
67566: NEG
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67590: LD_ADDR_VAR 0 34
67594: PUSH
67595: LD_INT 2
67597: NEG
67598: PUSH
67599: LD_INT 3
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 4
67645: NEG
67646: PUSH
67647: LD_INT 3
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 4
67657: NEG
67658: PUSH
67659: LD_INT 4
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 4
67669: NEG
67670: PUSH
67671: LD_INT 5
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 5
67681: NEG
67682: PUSH
67683: LD_INT 4
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: NEG
67694: PUSH
67695: LD_INT 5
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 5
67705: NEG
67706: PUSH
67707: LD_INT 6
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 6
67717: NEG
67718: PUSH
67719: LD_INT 5
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 6
67729: NEG
67730: PUSH
67731: LD_INT 6
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67753: LD_ADDR_VAR 0 41
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: LD_INT 2
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67797: LD_ADDR_VAR 0 42
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: LIST
67837: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67838: LD_ADDR_VAR 0 43
67842: PUSH
67843: LD_INT 2
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 3
67855: PUSH
67856: LD_INT 2
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67878: LD_ADDR_VAR 0 44
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: LD_INT 2
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67919: LD_ADDR_VAR 0 45
67923: PUSH
67924: LD_INT 2
67926: NEG
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: LD_INT 1
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67963: LD_ADDR_VAR 0 46
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 3
67994: NEG
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: LIST
68008: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68009: LD_ADDR_VAR 0 47
68013: PUSH
68014: LD_INT 2
68016: NEG
68017: PUSH
68018: LD_INT 3
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: LD_INT 3
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68042: LD_ADDR_VAR 0 48
68046: PUSH
68047: LD_INT 1
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68073: LD_ADDR_VAR 0 49
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68102: LD_ADDR_VAR 0 50
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68131: LD_ADDR_VAR 0 51
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 2
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68162: LD_ADDR_VAR 0 52
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: NEG
68182: PUSH
68183: LD_INT 2
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68195: LD_ADDR_VAR 0 53
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: LD_INT 3
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 3
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68239: LD_ADDR_VAR 0 54
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68280: LD_ADDR_VAR 0 55
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: LD_INT 3
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: LD_INT 3
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68320: LD_ADDR_VAR 0 56
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: LD_INT 3
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: LD_INT 2
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: LIST
68360: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68361: LD_ADDR_VAR 0 57
68365: PUSH
68366: LD_INT 2
68368: NEG
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 1
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: LIST
68404: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68405: LD_ADDR_VAR 0 58
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: LD_INT 3
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: LD_INT 2
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: LD_INT 3
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68451: LD_ADDR_VAR 0 59
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: LD_INT 2
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 0
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68495: LD_ADDR_VAR 0 60
68499: PUSH
68500: LD_INT 1
68502: PUSH
68503: LD_INT 1
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68536: LD_ADDR_VAR 0 61
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 2
68553: PUSH
68554: LD_INT 2
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: LIST
68575: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68576: LD_ADDR_VAR 0 62
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68617: LD_ADDR_VAR 0 63
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68661: LD_ADDR_VAR 0 64
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 2
68692: NEG
68693: PUSH
68694: LD_INT 2
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: ST_TO_ADDR
// end ; 2 :
68707: GO 71973
68709: LD_INT 2
68711: DOUBLE
68712: EQUAL
68713: IFTRUE 68717
68715: GO 71972
68717: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68718: LD_ADDR_VAR 0 29
68722: PUSH
68723: LD_INT 4
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 4
68735: PUSH
68736: LD_INT 1
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 5
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 5
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 4
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 3
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 3
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 5
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 3
68818: PUSH
68819: LD_INT 3
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 3
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 4
68838: PUSH
68839: LD_INT 3
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 4
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 3
68858: PUSH
68859: LD_INT 4
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: LD_INT 3
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 2
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 4
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: LD_INT 4
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: LD_INT 4
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 0
68918: PUSH
68919: LD_INT 3
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 1
68938: PUSH
68939: LD_INT 5
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: LD_INT 5
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: LD_INT 4
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 1
68969: NEG
68970: PUSH
68971: LD_INT 3
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: LD_INT 5
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 2
69024: NEG
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 2
69035: NEG
69036: PUSH
69037: LD_INT 1
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: LD_INT 1
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 4
69057: NEG
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 4
69080: NEG
69081: PUSH
69082: LD_INT 2
69084: NEG
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 2
69092: NEG
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 4
69103: NEG
69104: PUSH
69105: LD_INT 4
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: LD_INT 5
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: LD_INT 4
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 4
69151: NEG
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 5
69163: NEG
69164: PUSH
69165: LD_INT 4
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 5
69175: NEG
69176: PUSH
69177: LD_INT 5
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: LD_INT 5
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 5
69199: NEG
69200: PUSH
69201: LD_INT 3
69203: NEG
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69256: LD_ADDR_VAR 0 30
69260: PUSH
69261: LD_INT 4
69263: PUSH
69264: LD_INT 4
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 4
69273: PUSH
69274: LD_INT 3
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 5
69283: PUSH
69284: LD_INT 4
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 5
69293: PUSH
69294: LD_INT 5
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 4
69303: PUSH
69304: LD_INT 5
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 3
69313: PUSH
69314: LD_INT 4
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 3
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 5
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: LD_INT 5
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: LD_INT 3
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: LD_INT 4
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: LD_INT 4
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: NEG
69415: PUSH
69416: LD_INT 2
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 2
69425: PUSH
69426: LD_INT 4
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 4
69446: NEG
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 4
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: LD_INT 0
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 3
69480: NEG
69481: PUSH
69482: LD_INT 1
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: LD_INT 1
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 5
69502: NEG
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 5
69513: NEG
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 5
69525: NEG
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 3
69537: NEG
69538: PUSH
69539: LD_INT 2
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: NEG
69549: PUSH
69550: LD_INT 3
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: NEG
69561: PUSH
69562: LD_INT 4
69564: NEG
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: NEG
69597: PUSH
69598: LD_INT 2
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 4
69608: NEG
69609: PUSH
69610: LD_INT 3
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 4
69620: NEG
69621: PUSH
69622: LD_INT 4
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: NEG
69633: PUSH
69634: LD_INT 4
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: LD_INT 2
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_INT 4
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 5
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: LD_INT 4
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: LD_INT 3
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 1
69711: NEG
69712: PUSH
69713: LD_INT 4
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: LD_INT 5
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 2
69735: PUSH
69736: LD_INT 3
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 2
69746: NEG
69747: PUSH
69748: LD_INT 5
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69803: LD_ADDR_VAR 0 31
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 4
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: LD_INT 4
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 1
69840: PUSH
69841: LD_INT 5
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: LD_INT 5
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 1
69860: NEG
69861: PUSH
69862: LD_INT 4
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 5
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: LD_INT 3
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 3
69914: NEG
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 2
69926: NEG
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 2
69937: NEG
69938: PUSH
69939: LD_INT 1
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 4
69959: NEG
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: NEG
69971: PUSH
69972: LD_INT 1
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 4
69982: NEG
69983: PUSH
69984: LD_INT 2
69986: NEG
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 2
69994: NEG
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: NEG
70006: PUSH
70007: LD_INT 4
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 4
70017: NEG
70018: PUSH
70019: LD_INT 5
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 3
70029: NEG
70030: PUSH
70031: LD_INT 4
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 3
70041: NEG
70042: PUSH
70043: LD_INT 3
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 4
70053: NEG
70054: PUSH
70055: LD_INT 3
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 5
70065: NEG
70066: PUSH
70067: LD_INT 4
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 5
70077: NEG
70078: PUSH
70079: LD_INT 5
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: NEG
70090: PUSH
70091: LD_INT 5
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 5
70101: NEG
70102: PUSH
70103: LD_INT 3
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_INT 3
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: LD_INT 4
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: LD_INT 3
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: LD_INT 2
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 0
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: LD_INT 3
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: NEG
70181: PUSH
70182: LD_INT 4
70184: NEG
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 2
70192: PUSH
70193: LD_INT 2
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 2
70203: NEG
70204: PUSH
70205: LD_INT 4
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 4
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 4
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 5
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 5
70246: PUSH
70247: LD_INT 1
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 4
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 3
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 3
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 3
70287: PUSH
70288: LD_INT 2
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 5
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70353: LD_ADDR_VAR 0 32
70357: PUSH
70358: LD_INT 4
70360: NEG
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 4
70371: NEG
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 3
70383: NEG
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 3
70394: NEG
70395: PUSH
70396: LD_INT 1
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: LD_INT 1
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 5
70416: NEG
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 5
70427: NEG
70428: PUSH
70429: LD_INT 1
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 5
70439: NEG
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 3
70451: NEG
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 3
70462: NEG
70463: PUSH
70464: LD_INT 3
70466: NEG
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 3
70474: NEG
70475: PUSH
70476: LD_INT 4
70478: NEG
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 2
70486: NEG
70487: PUSH
70488: LD_INT 3
70490: NEG
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 2
70498: NEG
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 3
70510: NEG
70511: PUSH
70512: LD_INT 2
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 4
70522: NEG
70523: PUSH
70524: LD_INT 3
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 4
70534: NEG
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 2
70546: NEG
70547: PUSH
70548: LD_INT 4
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 4
70558: NEG
70559: PUSH
70560: LD_INT 2
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: LD_INT 4
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 0
70581: PUSH
70582: LD_INT 5
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: LD_INT 4
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: PUSH
70604: LD_INT 3
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 3
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 1
70625: NEG
70626: PUSH
70627: LD_INT 4
70629: NEG
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 1
70637: NEG
70638: PUSH
70639: LD_INT 5
70641: NEG
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 2
70649: PUSH
70650: LD_INT 3
70652: NEG
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 2
70660: NEG
70661: PUSH
70662: LD_INT 5
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 3
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 3
70682: PUSH
70683: LD_INT 1
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 4
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 4
70703: PUSH
70704: LD_INT 1
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 3
70713: PUSH
70714: LD_INT 1
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 2
70733: PUSH
70734: LD_INT 1
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 2
70744: PUSH
70745: LD_INT 2
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 4
70755: PUSH
70756: LD_INT 2
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 4
70765: PUSH
70766: LD_INT 4
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 4
70775: PUSH
70776: LD_INT 3
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 5
70785: PUSH
70786: LD_INT 4
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 5
70795: PUSH
70796: LD_INT 5
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 4
70805: PUSH
70806: LD_INT 5
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: LD_INT 4
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 3
70825: PUSH
70826: LD_INT 3
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 5
70835: PUSH
70836: LD_INT 3
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 3
70845: PUSH
70846: LD_INT 5
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70900: LD_ADDR_VAR 0 33
70904: PUSH
70905: LD_INT 4
70907: NEG
70908: PUSH
70909: LD_INT 4
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 4
70919: NEG
70920: PUSH
70921: LD_INT 5
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 3
70931: NEG
70932: PUSH
70933: LD_INT 4
70935: NEG
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 3
70943: NEG
70944: PUSH
70945: LD_INT 3
70947: NEG
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 4
70955: NEG
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 5
70967: NEG
70968: PUSH
70969: LD_INT 4
70971: NEG
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 5
70979: NEG
70980: PUSH
70981: LD_INT 5
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 3
70991: NEG
70992: PUSH
70993: LD_INT 5
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 5
71003: NEG
71004: PUSH
71005: LD_INT 3
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 3
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 0
71026: PUSH
71027: LD_INT 4
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: LD_INT 3
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: PUSH
71049: LD_INT 2
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 0
71059: PUSH
71060: LD_INT 2
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 1
71070: NEG
71071: PUSH
71072: LD_INT 3
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 1
71082: NEG
71083: PUSH
71084: LD_INT 4
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 2
71094: PUSH
71095: LD_INT 2
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 2
71105: NEG
71106: PUSH
71107: LD_INT 4
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 4
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: LD_INT 1
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 5
71138: PUSH
71139: LD_INT 0
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 5
71148: PUSH
71149: LD_INT 1
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 3
71168: PUSH
71169: LD_INT 0
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 3
71178: PUSH
71179: LD_INT 1
71181: NEG
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: LD_INT 2
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 5
71200: PUSH
71201: LD_INT 2
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 3
71210: PUSH
71211: LD_INT 3
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 3
71220: PUSH
71221: LD_INT 2
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 4
71230: PUSH
71231: LD_INT 3
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 4
71240: PUSH
71241: LD_INT 4
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 3
71250: PUSH
71251: LD_INT 4
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 2
71260: PUSH
71261: LD_INT 3
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 2
71270: PUSH
71271: LD_INT 2
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 4
71280: PUSH
71281: LD_INT 2
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 2
71290: PUSH
71291: LD_INT 4
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: LD_INT 4
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: LD_INT 3
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: LD_INT 4
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: LD_INT 5
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: LD_INT 5
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: LD_INT 4
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 1
71361: NEG
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 2
71372: PUSH
71373: LD_INT 5
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 2
71382: NEG
71383: PUSH
71384: LD_INT 3
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71438: LD_ADDR_VAR 0 34
71442: PUSH
71443: LD_INT 0
71445: PUSH
71446: LD_INT 4
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 5
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 1
71467: PUSH
71468: LD_INT 4
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: LD_INT 3
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: LD_INT 3
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 1
71500: NEG
71501: PUSH
71502: LD_INT 4
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 1
71512: NEG
71513: PUSH
71514: LD_INT 5
71516: NEG
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 2
71524: PUSH
71525: LD_INT 3
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: LD_INT 5
71539: NEG
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: LD_INT 0
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 3
71557: PUSH
71558: LD_INT 1
71560: NEG
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 4
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 4
71578: PUSH
71579: LD_INT 1
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 3
71588: PUSH
71589: LD_INT 1
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 2
71608: PUSH
71609: LD_INT 1
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 2
71619: PUSH
71620: LD_INT 2
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 4
71630: PUSH
71631: LD_INT 2
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 4
71640: PUSH
71641: LD_INT 4
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 4
71650: PUSH
71651: LD_INT 3
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 5
71660: PUSH
71661: LD_INT 4
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 5
71670: PUSH
71671: LD_INT 5
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 4
71680: PUSH
71681: LD_INT 5
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 3
71690: PUSH
71691: LD_INT 4
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 3
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 5
71710: PUSH
71711: LD_INT 3
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 3
71720: PUSH
71721: LD_INT 5
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: LD_INT 3
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 0
71740: PUSH
71741: LD_INT 2
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: LD_INT 3
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 1
71760: PUSH
71761: LD_INT 4
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 0
71770: PUSH
71771: LD_INT 4
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 1
71780: NEG
71781: PUSH
71782: LD_INT 3
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 1
71791: NEG
71792: PUSH
71793: LD_INT 2
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 2
71802: PUSH
71803: LD_INT 4
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 2
71812: NEG
71813: PUSH
71814: LD_INT 2
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 4
71823: NEG
71824: PUSH
71825: LD_INT 0
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 4
71834: NEG
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 3
71846: NEG
71847: PUSH
71848: LD_INT 0
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 3
71857: NEG
71858: PUSH
71859: LD_INT 1
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 4
71868: NEG
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 5
71879: NEG
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 5
71890: NEG
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 5
71902: NEG
71903: PUSH
71904: LD_INT 2
71906: NEG
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 3
71914: NEG
71915: PUSH
71916: LD_INT 2
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: ST_TO_ADDR
// end ; end ;
71970: GO 71973
71972: POP
// case btype of b_depot , b_warehouse :
71973: LD_VAR 0 1
71977: PUSH
71978: LD_INT 0
71980: DOUBLE
71981: EQUAL
71982: IFTRUE 71992
71984: LD_INT 1
71986: DOUBLE
71987: EQUAL
71988: IFTRUE 71992
71990: GO 72193
71992: POP
// case nation of nation_american :
71993: LD_VAR 0 5
71997: PUSH
71998: LD_INT 1
72000: DOUBLE
72001: EQUAL
72002: IFTRUE 72006
72004: GO 72062
72006: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72007: LD_ADDR_VAR 0 9
72011: PUSH
72012: LD_VAR 0 11
72016: PUSH
72017: LD_VAR 0 12
72021: PUSH
72022: LD_VAR 0 13
72026: PUSH
72027: LD_VAR 0 14
72031: PUSH
72032: LD_VAR 0 15
72036: PUSH
72037: LD_VAR 0 16
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: PUSH
72050: LD_VAR 0 4
72054: PUSH
72055: LD_INT 1
72057: PLUS
72058: ARRAY
72059: ST_TO_ADDR
72060: GO 72191
72062: LD_INT 2
72064: DOUBLE
72065: EQUAL
72066: IFTRUE 72070
72068: GO 72126
72070: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72071: LD_ADDR_VAR 0 9
72075: PUSH
72076: LD_VAR 0 17
72080: PUSH
72081: LD_VAR 0 18
72085: PUSH
72086: LD_VAR 0 19
72090: PUSH
72091: LD_VAR 0 20
72095: PUSH
72096: LD_VAR 0 21
72100: PUSH
72101: LD_VAR 0 22
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: PUSH
72114: LD_VAR 0 4
72118: PUSH
72119: LD_INT 1
72121: PLUS
72122: ARRAY
72123: ST_TO_ADDR
72124: GO 72191
72126: LD_INT 3
72128: DOUBLE
72129: EQUAL
72130: IFTRUE 72134
72132: GO 72190
72134: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72135: LD_ADDR_VAR 0 9
72139: PUSH
72140: LD_VAR 0 23
72144: PUSH
72145: LD_VAR 0 24
72149: PUSH
72150: LD_VAR 0 25
72154: PUSH
72155: LD_VAR 0 26
72159: PUSH
72160: LD_VAR 0 27
72164: PUSH
72165: LD_VAR 0 28
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: PUSH
72178: LD_VAR 0 4
72182: PUSH
72183: LD_INT 1
72185: PLUS
72186: ARRAY
72187: ST_TO_ADDR
72188: GO 72191
72190: POP
72191: GO 72746
72193: LD_INT 2
72195: DOUBLE
72196: EQUAL
72197: IFTRUE 72207
72199: LD_INT 3
72201: DOUBLE
72202: EQUAL
72203: IFTRUE 72207
72205: GO 72263
72207: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72208: LD_ADDR_VAR 0 9
72212: PUSH
72213: LD_VAR 0 29
72217: PUSH
72218: LD_VAR 0 30
72222: PUSH
72223: LD_VAR 0 31
72227: PUSH
72228: LD_VAR 0 32
72232: PUSH
72233: LD_VAR 0 33
72237: PUSH
72238: LD_VAR 0 34
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: PUSH
72251: LD_VAR 0 4
72255: PUSH
72256: LD_INT 1
72258: PLUS
72259: ARRAY
72260: ST_TO_ADDR
72261: GO 72746
72263: LD_INT 16
72265: DOUBLE
72266: EQUAL
72267: IFTRUE 72325
72269: LD_INT 17
72271: DOUBLE
72272: EQUAL
72273: IFTRUE 72325
72275: LD_INT 18
72277: DOUBLE
72278: EQUAL
72279: IFTRUE 72325
72281: LD_INT 19
72283: DOUBLE
72284: EQUAL
72285: IFTRUE 72325
72287: LD_INT 22
72289: DOUBLE
72290: EQUAL
72291: IFTRUE 72325
72293: LD_INT 20
72295: DOUBLE
72296: EQUAL
72297: IFTRUE 72325
72299: LD_INT 21
72301: DOUBLE
72302: EQUAL
72303: IFTRUE 72325
72305: LD_INT 23
72307: DOUBLE
72308: EQUAL
72309: IFTRUE 72325
72311: LD_INT 24
72313: DOUBLE
72314: EQUAL
72315: IFTRUE 72325
72317: LD_INT 25
72319: DOUBLE
72320: EQUAL
72321: IFTRUE 72325
72323: GO 72381
72325: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72326: LD_ADDR_VAR 0 9
72330: PUSH
72331: LD_VAR 0 35
72335: PUSH
72336: LD_VAR 0 36
72340: PUSH
72341: LD_VAR 0 37
72345: PUSH
72346: LD_VAR 0 38
72350: PUSH
72351: LD_VAR 0 39
72355: PUSH
72356: LD_VAR 0 40
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: PUSH
72369: LD_VAR 0 4
72373: PUSH
72374: LD_INT 1
72376: PLUS
72377: ARRAY
72378: ST_TO_ADDR
72379: GO 72746
72381: LD_INT 6
72383: DOUBLE
72384: EQUAL
72385: IFTRUE 72437
72387: LD_INT 7
72389: DOUBLE
72390: EQUAL
72391: IFTRUE 72437
72393: LD_INT 8
72395: DOUBLE
72396: EQUAL
72397: IFTRUE 72437
72399: LD_INT 13
72401: DOUBLE
72402: EQUAL
72403: IFTRUE 72437
72405: LD_INT 12
72407: DOUBLE
72408: EQUAL
72409: IFTRUE 72437
72411: LD_INT 15
72413: DOUBLE
72414: EQUAL
72415: IFTRUE 72437
72417: LD_INT 11
72419: DOUBLE
72420: EQUAL
72421: IFTRUE 72437
72423: LD_INT 14
72425: DOUBLE
72426: EQUAL
72427: IFTRUE 72437
72429: LD_INT 10
72431: DOUBLE
72432: EQUAL
72433: IFTRUE 72437
72435: GO 72493
72437: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72438: LD_ADDR_VAR 0 9
72442: PUSH
72443: LD_VAR 0 41
72447: PUSH
72448: LD_VAR 0 42
72452: PUSH
72453: LD_VAR 0 43
72457: PUSH
72458: LD_VAR 0 44
72462: PUSH
72463: LD_VAR 0 45
72467: PUSH
72468: LD_VAR 0 46
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: PUSH
72481: LD_VAR 0 4
72485: PUSH
72486: LD_INT 1
72488: PLUS
72489: ARRAY
72490: ST_TO_ADDR
72491: GO 72746
72493: LD_INT 36
72495: DOUBLE
72496: EQUAL
72497: IFTRUE 72501
72499: GO 72557
72501: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72502: LD_ADDR_VAR 0 9
72506: PUSH
72507: LD_VAR 0 47
72511: PUSH
72512: LD_VAR 0 48
72516: PUSH
72517: LD_VAR 0 49
72521: PUSH
72522: LD_VAR 0 50
72526: PUSH
72527: LD_VAR 0 51
72531: PUSH
72532: LD_VAR 0 52
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: PUSH
72545: LD_VAR 0 4
72549: PUSH
72550: LD_INT 1
72552: PLUS
72553: ARRAY
72554: ST_TO_ADDR
72555: GO 72746
72557: LD_INT 4
72559: DOUBLE
72560: EQUAL
72561: IFTRUE 72583
72563: LD_INT 5
72565: DOUBLE
72566: EQUAL
72567: IFTRUE 72583
72569: LD_INT 34
72571: DOUBLE
72572: EQUAL
72573: IFTRUE 72583
72575: LD_INT 37
72577: DOUBLE
72578: EQUAL
72579: IFTRUE 72583
72581: GO 72639
72583: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72584: LD_ADDR_VAR 0 9
72588: PUSH
72589: LD_VAR 0 53
72593: PUSH
72594: LD_VAR 0 54
72598: PUSH
72599: LD_VAR 0 55
72603: PUSH
72604: LD_VAR 0 56
72608: PUSH
72609: LD_VAR 0 57
72613: PUSH
72614: LD_VAR 0 58
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: PUSH
72627: LD_VAR 0 4
72631: PUSH
72632: LD_INT 1
72634: PLUS
72635: ARRAY
72636: ST_TO_ADDR
72637: GO 72746
72639: LD_INT 31
72641: DOUBLE
72642: EQUAL
72643: IFTRUE 72689
72645: LD_INT 32
72647: DOUBLE
72648: EQUAL
72649: IFTRUE 72689
72651: LD_INT 33
72653: DOUBLE
72654: EQUAL
72655: IFTRUE 72689
72657: LD_INT 27
72659: DOUBLE
72660: EQUAL
72661: IFTRUE 72689
72663: LD_INT 26
72665: DOUBLE
72666: EQUAL
72667: IFTRUE 72689
72669: LD_INT 28
72671: DOUBLE
72672: EQUAL
72673: IFTRUE 72689
72675: LD_INT 29
72677: DOUBLE
72678: EQUAL
72679: IFTRUE 72689
72681: LD_INT 30
72683: DOUBLE
72684: EQUAL
72685: IFTRUE 72689
72687: GO 72745
72689: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72690: LD_ADDR_VAR 0 9
72694: PUSH
72695: LD_VAR 0 59
72699: PUSH
72700: LD_VAR 0 60
72704: PUSH
72705: LD_VAR 0 61
72709: PUSH
72710: LD_VAR 0 62
72714: PUSH
72715: LD_VAR 0 63
72719: PUSH
72720: LD_VAR 0 64
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: PUSH
72733: LD_VAR 0 4
72737: PUSH
72738: LD_INT 1
72740: PLUS
72741: ARRAY
72742: ST_TO_ADDR
72743: GO 72746
72745: POP
// temp_list2 = [ ] ;
72746: LD_ADDR_VAR 0 10
72750: PUSH
72751: EMPTY
72752: ST_TO_ADDR
// for i in temp_list do
72753: LD_ADDR_VAR 0 8
72757: PUSH
72758: LD_VAR 0 9
72762: PUSH
72763: FOR_IN
72764: IFFALSE 72816
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72766: LD_ADDR_VAR 0 10
72770: PUSH
72771: LD_VAR 0 10
72775: PUSH
72776: LD_VAR 0 8
72780: PUSH
72781: LD_INT 1
72783: ARRAY
72784: PUSH
72785: LD_VAR 0 2
72789: PLUS
72790: PUSH
72791: LD_VAR 0 8
72795: PUSH
72796: LD_INT 2
72798: ARRAY
72799: PUSH
72800: LD_VAR 0 3
72804: PLUS
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: EMPTY
72811: LIST
72812: ADD
72813: ST_TO_ADDR
72814: GO 72763
72816: POP
72817: POP
// result = temp_list2 ;
72818: LD_ADDR_VAR 0 7
72822: PUSH
72823: LD_VAR 0 10
72827: ST_TO_ADDR
// end ;
72828: LD_VAR 0 7
72832: RET
// export function EnemyInRange ( unit , dist ) ; begin
72833: LD_INT 0
72835: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72836: LD_ADDR_VAR 0 3
72840: PUSH
72841: LD_VAR 0 1
72845: PPUSH
72846: CALL_OW 255
72850: PPUSH
72851: LD_VAR 0 1
72855: PPUSH
72856: CALL_OW 250
72860: PPUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 251
72870: PPUSH
72871: LD_VAR 0 2
72875: PPUSH
72876: CALL 46206 0 4
72880: PUSH
72881: LD_INT 4
72883: ARRAY
72884: ST_TO_ADDR
// end ;
72885: LD_VAR 0 3
72889: RET
// export function PlayerSeeMe ( unit ) ; begin
72890: LD_INT 0
72892: PPUSH
// result := See ( your_side , unit ) ;
72893: LD_ADDR_VAR 0 2
72897: PUSH
72898: LD_OWVAR 2
72902: PPUSH
72903: LD_VAR 0 1
72907: PPUSH
72908: CALL_OW 292
72912: ST_TO_ADDR
// end ;
72913: LD_VAR 0 2
72917: RET
// export function ReverseDir ( unit ) ; begin
72918: LD_INT 0
72920: PPUSH
// if not unit then
72921: LD_VAR 0 1
72925: NOT
72926: IFFALSE 72930
// exit ;
72928: GO 72953
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72930: LD_ADDR_VAR 0 2
72934: PUSH
72935: LD_VAR 0 1
72939: PPUSH
72940: CALL_OW 254
72944: PUSH
72945: LD_INT 3
72947: PLUS
72948: PUSH
72949: LD_INT 6
72951: MOD
72952: ST_TO_ADDR
// end ;
72953: LD_VAR 0 2
72957: RET
// export function ReverseArray ( array ) ; var i ; begin
72958: LD_INT 0
72960: PPUSH
72961: PPUSH
// if not array then
72962: LD_VAR 0 1
72966: NOT
72967: IFFALSE 72971
// exit ;
72969: GO 73026
// result := [ ] ;
72971: LD_ADDR_VAR 0 2
72975: PUSH
72976: EMPTY
72977: ST_TO_ADDR
// for i := array downto 1 do
72978: LD_ADDR_VAR 0 3
72982: PUSH
72983: DOUBLE
72984: LD_VAR 0 1
72988: INC
72989: ST_TO_ADDR
72990: LD_INT 1
72992: PUSH
72993: FOR_DOWNTO
72994: IFFALSE 73024
// result := Join ( result , array [ i ] ) ;
72996: LD_ADDR_VAR 0 2
73000: PUSH
73001: LD_VAR 0 2
73005: PPUSH
73006: LD_VAR 0 1
73010: PUSH
73011: LD_VAR 0 3
73015: ARRAY
73016: PPUSH
73017: CALL 77671 0 2
73021: ST_TO_ADDR
73022: GO 72993
73024: POP
73025: POP
// end ;
73026: LD_VAR 0 2
73030: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73031: LD_INT 0
73033: PPUSH
73034: PPUSH
73035: PPUSH
73036: PPUSH
73037: PPUSH
73038: PPUSH
// if not unit or not hexes then
73039: LD_VAR 0 1
73043: NOT
73044: PUSH
73045: LD_VAR 0 2
73049: NOT
73050: OR
73051: IFFALSE 73055
// exit ;
73053: GO 73178
// dist := 9999 ;
73055: LD_ADDR_VAR 0 5
73059: PUSH
73060: LD_INT 9999
73062: ST_TO_ADDR
// for i = 1 to hexes do
73063: LD_ADDR_VAR 0 4
73067: PUSH
73068: DOUBLE
73069: LD_INT 1
73071: DEC
73072: ST_TO_ADDR
73073: LD_VAR 0 2
73077: PUSH
73078: FOR_TO
73079: IFFALSE 73166
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73081: LD_ADDR_VAR 0 6
73085: PUSH
73086: LD_VAR 0 1
73090: PPUSH
73091: LD_VAR 0 2
73095: PUSH
73096: LD_VAR 0 4
73100: ARRAY
73101: PUSH
73102: LD_INT 1
73104: ARRAY
73105: PPUSH
73106: LD_VAR 0 2
73110: PUSH
73111: LD_VAR 0 4
73115: ARRAY
73116: PUSH
73117: LD_INT 2
73119: ARRAY
73120: PPUSH
73121: CALL_OW 297
73125: ST_TO_ADDR
// if tdist < dist then
73126: LD_VAR 0 6
73130: PUSH
73131: LD_VAR 0 5
73135: LESS
73136: IFFALSE 73164
// begin hex := hexes [ i ] ;
73138: LD_ADDR_VAR 0 8
73142: PUSH
73143: LD_VAR 0 2
73147: PUSH
73148: LD_VAR 0 4
73152: ARRAY
73153: ST_TO_ADDR
// dist := tdist ;
73154: LD_ADDR_VAR 0 5
73158: PUSH
73159: LD_VAR 0 6
73163: ST_TO_ADDR
// end ; end ;
73164: GO 73078
73166: POP
73167: POP
// result := hex ;
73168: LD_ADDR_VAR 0 3
73172: PUSH
73173: LD_VAR 0 8
73177: ST_TO_ADDR
// end ;
73178: LD_VAR 0 3
73182: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73183: LD_INT 0
73185: PPUSH
73186: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73187: LD_VAR 0 1
73191: NOT
73192: PUSH
73193: LD_VAR 0 1
73197: PUSH
73198: LD_INT 21
73200: PUSH
73201: LD_INT 2
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 23
73210: PUSH
73211: LD_INT 2
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PPUSH
73222: CALL_OW 69
73226: IN
73227: NOT
73228: OR
73229: IFFALSE 73233
// exit ;
73231: GO 73280
// for i = 1 to 3 do
73233: LD_ADDR_VAR 0 3
73237: PUSH
73238: DOUBLE
73239: LD_INT 1
73241: DEC
73242: ST_TO_ADDR
73243: LD_INT 3
73245: PUSH
73246: FOR_TO
73247: IFFALSE 73278
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73249: LD_VAR 0 1
73253: PPUSH
73254: CALL_OW 250
73258: PPUSH
73259: LD_VAR 0 1
73263: PPUSH
73264: CALL_OW 251
73268: PPUSH
73269: LD_INT 1
73271: PPUSH
73272: CALL_OW 453
73276: GO 73246
73278: POP
73279: POP
// end ;
73280: LD_VAR 0 2
73284: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73285: LD_INT 0
73287: PPUSH
73288: PPUSH
73289: PPUSH
73290: PPUSH
73291: PPUSH
73292: PPUSH
// if not unit or not enemy_unit then
73293: LD_VAR 0 1
73297: NOT
73298: PUSH
73299: LD_VAR 0 2
73303: NOT
73304: OR
73305: IFFALSE 73309
// exit ;
73307: GO 73776
// if GetLives ( i ) < 250 then
73309: LD_VAR 0 4
73313: PPUSH
73314: CALL_OW 256
73318: PUSH
73319: LD_INT 250
73321: LESS
73322: IFFALSE 73335
// begin ComAutodestruct ( i ) ;
73324: LD_VAR 0 4
73328: PPUSH
73329: CALL 73183 0 1
// exit ;
73333: GO 73776
// end ; x := GetX ( enemy_unit ) ;
73335: LD_ADDR_VAR 0 7
73339: PUSH
73340: LD_VAR 0 2
73344: PPUSH
73345: CALL_OW 250
73349: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73350: LD_ADDR_VAR 0 8
73354: PUSH
73355: LD_VAR 0 2
73359: PPUSH
73360: CALL_OW 251
73364: ST_TO_ADDR
// if not x or not y then
73365: LD_VAR 0 7
73369: NOT
73370: PUSH
73371: LD_VAR 0 8
73375: NOT
73376: OR
73377: IFFALSE 73381
// exit ;
73379: GO 73776
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73381: LD_ADDR_VAR 0 6
73385: PUSH
73386: LD_VAR 0 7
73390: PPUSH
73391: LD_INT 0
73393: PPUSH
73394: LD_INT 4
73396: PPUSH
73397: CALL_OW 272
73401: PUSH
73402: LD_VAR 0 8
73406: PPUSH
73407: LD_INT 0
73409: PPUSH
73410: LD_INT 4
73412: PPUSH
73413: CALL_OW 273
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_VAR 0 7
73426: PPUSH
73427: LD_INT 1
73429: PPUSH
73430: LD_INT 4
73432: PPUSH
73433: CALL_OW 272
73437: PUSH
73438: LD_VAR 0 8
73442: PPUSH
73443: LD_INT 1
73445: PPUSH
73446: LD_INT 4
73448: PPUSH
73449: CALL_OW 273
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_VAR 0 7
73462: PPUSH
73463: LD_INT 2
73465: PPUSH
73466: LD_INT 4
73468: PPUSH
73469: CALL_OW 272
73473: PUSH
73474: LD_VAR 0 8
73478: PPUSH
73479: LD_INT 2
73481: PPUSH
73482: LD_INT 4
73484: PPUSH
73485: CALL_OW 273
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_VAR 0 7
73498: PPUSH
73499: LD_INT 3
73501: PPUSH
73502: LD_INT 4
73504: PPUSH
73505: CALL_OW 272
73509: PUSH
73510: LD_VAR 0 8
73514: PPUSH
73515: LD_INT 3
73517: PPUSH
73518: LD_INT 4
73520: PPUSH
73521: CALL_OW 273
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_VAR 0 7
73534: PPUSH
73535: LD_INT 4
73537: PPUSH
73538: LD_INT 4
73540: PPUSH
73541: CALL_OW 272
73545: PUSH
73546: LD_VAR 0 8
73550: PPUSH
73551: LD_INT 4
73553: PPUSH
73554: LD_INT 4
73556: PPUSH
73557: CALL_OW 273
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_VAR 0 7
73570: PPUSH
73571: LD_INT 5
73573: PPUSH
73574: LD_INT 4
73576: PPUSH
73577: CALL_OW 272
73581: PUSH
73582: LD_VAR 0 8
73586: PPUSH
73587: LD_INT 5
73589: PPUSH
73590: LD_INT 4
73592: PPUSH
73593: CALL_OW 273
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: ST_TO_ADDR
// for i = tmp downto 1 do
73610: LD_ADDR_VAR 0 4
73614: PUSH
73615: DOUBLE
73616: LD_VAR 0 6
73620: INC
73621: ST_TO_ADDR
73622: LD_INT 1
73624: PUSH
73625: FOR_DOWNTO
73626: IFFALSE 73727
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73628: LD_VAR 0 6
73632: PUSH
73633: LD_VAR 0 4
73637: ARRAY
73638: PUSH
73639: LD_INT 1
73641: ARRAY
73642: PPUSH
73643: LD_VAR 0 6
73647: PUSH
73648: LD_VAR 0 4
73652: ARRAY
73653: PUSH
73654: LD_INT 2
73656: ARRAY
73657: PPUSH
73658: CALL_OW 488
73662: NOT
73663: PUSH
73664: LD_VAR 0 6
73668: PUSH
73669: LD_VAR 0 4
73673: ARRAY
73674: PUSH
73675: LD_INT 1
73677: ARRAY
73678: PPUSH
73679: LD_VAR 0 6
73683: PUSH
73684: LD_VAR 0 4
73688: ARRAY
73689: PUSH
73690: LD_INT 2
73692: ARRAY
73693: PPUSH
73694: CALL_OW 428
73698: PUSH
73699: LD_INT 0
73701: NONEQUAL
73702: OR
73703: IFFALSE 73725
// tmp := Delete ( tmp , i ) ;
73705: LD_ADDR_VAR 0 6
73709: PUSH
73710: LD_VAR 0 6
73714: PPUSH
73715: LD_VAR 0 4
73719: PPUSH
73720: CALL_OW 3
73724: ST_TO_ADDR
73725: GO 73625
73727: POP
73728: POP
// j := GetClosestHex ( unit , tmp ) ;
73729: LD_ADDR_VAR 0 5
73733: PUSH
73734: LD_VAR 0 1
73738: PPUSH
73739: LD_VAR 0 6
73743: PPUSH
73744: CALL 73031 0 2
73748: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73749: LD_VAR 0 1
73753: PPUSH
73754: LD_VAR 0 5
73758: PUSH
73759: LD_INT 1
73761: ARRAY
73762: PPUSH
73763: LD_VAR 0 5
73767: PUSH
73768: LD_INT 2
73770: ARRAY
73771: PPUSH
73772: CALL_OW 111
// end ;
73776: LD_VAR 0 3
73780: RET
// export function PrepareApemanSoldier ( ) ; begin
73781: LD_INT 0
73783: PPUSH
// uc_nation := 0 ;
73784: LD_ADDR_OWVAR 21
73788: PUSH
73789: LD_INT 0
73791: ST_TO_ADDR
// hc_sex := sex_male ;
73792: LD_ADDR_OWVAR 27
73796: PUSH
73797: LD_INT 1
73799: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73800: LD_ADDR_OWVAR 28
73804: PUSH
73805: LD_INT 15
73807: ST_TO_ADDR
// hc_gallery :=  ;
73808: LD_ADDR_OWVAR 33
73812: PUSH
73813: LD_STRING 
73815: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73816: LD_ADDR_OWVAR 31
73820: PUSH
73821: LD_INT 0
73823: PPUSH
73824: LD_INT 3
73826: PPUSH
73827: CALL_OW 12
73831: PUSH
73832: LD_INT 0
73834: PPUSH
73835: LD_INT 3
73837: PPUSH
73838: CALL_OW 12
73842: PUSH
73843: LD_INT 0
73845: PUSH
73846: LD_INT 0
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: ST_TO_ADDR
// end ;
73855: LD_VAR 0 1
73859: RET
// export function PrepareApemanEngineer ( ) ; begin
73860: LD_INT 0
73862: PPUSH
// uc_nation := 0 ;
73863: LD_ADDR_OWVAR 21
73867: PUSH
73868: LD_INT 0
73870: ST_TO_ADDR
// hc_sex := sex_male ;
73871: LD_ADDR_OWVAR 27
73875: PUSH
73876: LD_INT 1
73878: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73879: LD_ADDR_OWVAR 28
73883: PUSH
73884: LD_INT 16
73886: ST_TO_ADDR
// hc_gallery :=  ;
73887: LD_ADDR_OWVAR 33
73891: PUSH
73892: LD_STRING 
73894: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73895: LD_ADDR_OWVAR 31
73899: PUSH
73900: LD_INT 0
73902: PPUSH
73903: LD_INT 3
73905: PPUSH
73906: CALL_OW 12
73910: PUSH
73911: LD_INT 0
73913: PPUSH
73914: LD_INT 3
73916: PPUSH
73917: CALL_OW 12
73921: PUSH
73922: LD_INT 0
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: ST_TO_ADDR
// end ;
73934: LD_VAR 0 1
73938: RET
// export function PrepareApeman ( agressivity ) ; begin
73939: LD_INT 0
73941: PPUSH
// uc_side := 0 ;
73942: LD_ADDR_OWVAR 20
73946: PUSH
73947: LD_INT 0
73949: ST_TO_ADDR
// uc_nation := 0 ;
73950: LD_ADDR_OWVAR 21
73954: PUSH
73955: LD_INT 0
73957: ST_TO_ADDR
// hc_sex := sex_male ;
73958: LD_ADDR_OWVAR 27
73962: PUSH
73963: LD_INT 1
73965: ST_TO_ADDR
// hc_class := class_apeman ;
73966: LD_ADDR_OWVAR 28
73970: PUSH
73971: LD_INT 12
73973: ST_TO_ADDR
// hc_gallery :=  ;
73974: LD_ADDR_OWVAR 33
73978: PUSH
73979: LD_STRING 
73981: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73982: LD_ADDR_OWVAR 35
73986: PUSH
73987: LD_VAR 0 1
73991: NEG
73992: PPUSH
73993: LD_VAR 0 1
73997: PPUSH
73998: CALL_OW 12
74002: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74003: LD_ADDR_OWVAR 31
74007: PUSH
74008: LD_INT 0
74010: PPUSH
74011: LD_INT 3
74013: PPUSH
74014: CALL_OW 12
74018: PUSH
74019: LD_INT 0
74021: PPUSH
74022: LD_INT 3
74024: PPUSH
74025: CALL_OW 12
74029: PUSH
74030: LD_INT 0
74032: PUSH
74033: LD_INT 0
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: ST_TO_ADDR
// end ;
74042: LD_VAR 0 2
74046: RET
// export function PrepareTiger ( agressivity ) ; begin
74047: LD_INT 0
74049: PPUSH
// uc_side := 0 ;
74050: LD_ADDR_OWVAR 20
74054: PUSH
74055: LD_INT 0
74057: ST_TO_ADDR
// uc_nation := 0 ;
74058: LD_ADDR_OWVAR 21
74062: PUSH
74063: LD_INT 0
74065: ST_TO_ADDR
// hc_class := class_tiger ;
74066: LD_ADDR_OWVAR 28
74070: PUSH
74071: LD_INT 14
74073: ST_TO_ADDR
// hc_gallery :=  ;
74074: LD_ADDR_OWVAR 33
74078: PUSH
74079: LD_STRING 
74081: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74082: LD_ADDR_OWVAR 35
74086: PUSH
74087: LD_VAR 0 1
74091: NEG
74092: PPUSH
74093: LD_VAR 0 1
74097: PPUSH
74098: CALL_OW 12
74102: ST_TO_ADDR
// end ;
74103: LD_VAR 0 2
74107: RET
// export function PrepareEnchidna ( ) ; begin
74108: LD_INT 0
74110: PPUSH
// uc_side := 0 ;
74111: LD_ADDR_OWVAR 20
74115: PUSH
74116: LD_INT 0
74118: ST_TO_ADDR
// uc_nation := 0 ;
74119: LD_ADDR_OWVAR 21
74123: PUSH
74124: LD_INT 0
74126: ST_TO_ADDR
// hc_class := class_baggie ;
74127: LD_ADDR_OWVAR 28
74131: PUSH
74132: LD_INT 13
74134: ST_TO_ADDR
// hc_gallery :=  ;
74135: LD_ADDR_OWVAR 33
74139: PUSH
74140: LD_STRING 
74142: ST_TO_ADDR
// end ;
74143: LD_VAR 0 1
74147: RET
// export function PrepareFrog ( ) ; begin
74148: LD_INT 0
74150: PPUSH
// uc_side := 0 ;
74151: LD_ADDR_OWVAR 20
74155: PUSH
74156: LD_INT 0
74158: ST_TO_ADDR
// uc_nation := 0 ;
74159: LD_ADDR_OWVAR 21
74163: PUSH
74164: LD_INT 0
74166: ST_TO_ADDR
// hc_class := class_frog ;
74167: LD_ADDR_OWVAR 28
74171: PUSH
74172: LD_INT 19
74174: ST_TO_ADDR
// hc_gallery :=  ;
74175: LD_ADDR_OWVAR 33
74179: PUSH
74180: LD_STRING 
74182: ST_TO_ADDR
// end ;
74183: LD_VAR 0 1
74187: RET
// export function PrepareFish ( ) ; begin
74188: LD_INT 0
74190: PPUSH
// uc_side := 0 ;
74191: LD_ADDR_OWVAR 20
74195: PUSH
74196: LD_INT 0
74198: ST_TO_ADDR
// uc_nation := 0 ;
74199: LD_ADDR_OWVAR 21
74203: PUSH
74204: LD_INT 0
74206: ST_TO_ADDR
// hc_class := class_fish ;
74207: LD_ADDR_OWVAR 28
74211: PUSH
74212: LD_INT 20
74214: ST_TO_ADDR
// hc_gallery :=  ;
74215: LD_ADDR_OWVAR 33
74219: PUSH
74220: LD_STRING 
74222: ST_TO_ADDR
// end ;
74223: LD_VAR 0 1
74227: RET
// export function PrepareBird ( ) ; begin
74228: LD_INT 0
74230: PPUSH
// uc_side := 0 ;
74231: LD_ADDR_OWVAR 20
74235: PUSH
74236: LD_INT 0
74238: ST_TO_ADDR
// uc_nation := 0 ;
74239: LD_ADDR_OWVAR 21
74243: PUSH
74244: LD_INT 0
74246: ST_TO_ADDR
// hc_class := class_phororhacos ;
74247: LD_ADDR_OWVAR 28
74251: PUSH
74252: LD_INT 18
74254: ST_TO_ADDR
// hc_gallery :=  ;
74255: LD_ADDR_OWVAR 33
74259: PUSH
74260: LD_STRING 
74262: ST_TO_ADDR
// end ;
74263: LD_VAR 0 1
74267: RET
// export function PrepareHorse ( ) ; begin
74268: LD_INT 0
74270: PPUSH
// uc_side := 0 ;
74271: LD_ADDR_OWVAR 20
74275: PUSH
74276: LD_INT 0
74278: ST_TO_ADDR
// uc_nation := 0 ;
74279: LD_ADDR_OWVAR 21
74283: PUSH
74284: LD_INT 0
74286: ST_TO_ADDR
// hc_class := class_horse ;
74287: LD_ADDR_OWVAR 28
74291: PUSH
74292: LD_INT 21
74294: ST_TO_ADDR
// hc_gallery :=  ;
74295: LD_ADDR_OWVAR 33
74299: PUSH
74300: LD_STRING 
74302: ST_TO_ADDR
// end ;
74303: LD_VAR 0 1
74307: RET
// export function PrepareMastodont ( ) ; begin
74308: LD_INT 0
74310: PPUSH
// uc_side := 0 ;
74311: LD_ADDR_OWVAR 20
74315: PUSH
74316: LD_INT 0
74318: ST_TO_ADDR
// uc_nation := 0 ;
74319: LD_ADDR_OWVAR 21
74323: PUSH
74324: LD_INT 0
74326: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74327: LD_ADDR_OWVAR 37
74331: PUSH
74332: LD_INT 31
74334: ST_TO_ADDR
// vc_control := control_rider ;
74335: LD_ADDR_OWVAR 38
74339: PUSH
74340: LD_INT 4
74342: ST_TO_ADDR
// end ;
74343: LD_VAR 0 1
74347: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74348: LD_INT 0
74350: PPUSH
74351: PPUSH
74352: PPUSH
// uc_side = 0 ;
74353: LD_ADDR_OWVAR 20
74357: PUSH
74358: LD_INT 0
74360: ST_TO_ADDR
// uc_nation = 0 ;
74361: LD_ADDR_OWVAR 21
74365: PUSH
74366: LD_INT 0
74368: ST_TO_ADDR
// InitHc_All ( ) ;
74369: CALL_OW 584
// InitVc ;
74373: CALL_OW 20
// if mastodonts then
74377: LD_VAR 0 6
74381: IFFALSE 74448
// for i = 1 to mastodonts do
74383: LD_ADDR_VAR 0 11
74387: PUSH
74388: DOUBLE
74389: LD_INT 1
74391: DEC
74392: ST_TO_ADDR
74393: LD_VAR 0 6
74397: PUSH
74398: FOR_TO
74399: IFFALSE 74446
// begin vc_chassis := 31 ;
74401: LD_ADDR_OWVAR 37
74405: PUSH
74406: LD_INT 31
74408: ST_TO_ADDR
// vc_control := control_rider ;
74409: LD_ADDR_OWVAR 38
74413: PUSH
74414: LD_INT 4
74416: ST_TO_ADDR
// animal := CreateVehicle ;
74417: LD_ADDR_VAR 0 12
74421: PUSH
74422: CALL_OW 45
74426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74427: LD_VAR 0 12
74431: PPUSH
74432: LD_VAR 0 8
74436: PPUSH
74437: LD_INT 0
74439: PPUSH
74440: CALL 76576 0 3
// end ;
74444: GO 74398
74446: POP
74447: POP
// if horses then
74448: LD_VAR 0 5
74452: IFFALSE 74519
// for i = 1 to horses do
74454: LD_ADDR_VAR 0 11
74458: PUSH
74459: DOUBLE
74460: LD_INT 1
74462: DEC
74463: ST_TO_ADDR
74464: LD_VAR 0 5
74468: PUSH
74469: FOR_TO
74470: IFFALSE 74517
// begin hc_class := 21 ;
74472: LD_ADDR_OWVAR 28
74476: PUSH
74477: LD_INT 21
74479: ST_TO_ADDR
// hc_gallery :=  ;
74480: LD_ADDR_OWVAR 33
74484: PUSH
74485: LD_STRING 
74487: ST_TO_ADDR
// animal := CreateHuman ;
74488: LD_ADDR_VAR 0 12
74492: PUSH
74493: CALL_OW 44
74497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74498: LD_VAR 0 12
74502: PPUSH
74503: LD_VAR 0 8
74507: PPUSH
74508: LD_INT 0
74510: PPUSH
74511: CALL 76576 0 3
// end ;
74515: GO 74469
74517: POP
74518: POP
// if birds then
74519: LD_VAR 0 1
74523: IFFALSE 74590
// for i = 1 to birds do
74525: LD_ADDR_VAR 0 11
74529: PUSH
74530: DOUBLE
74531: LD_INT 1
74533: DEC
74534: ST_TO_ADDR
74535: LD_VAR 0 1
74539: PUSH
74540: FOR_TO
74541: IFFALSE 74588
// begin hc_class := 18 ;
74543: LD_ADDR_OWVAR 28
74547: PUSH
74548: LD_INT 18
74550: ST_TO_ADDR
// hc_gallery =  ;
74551: LD_ADDR_OWVAR 33
74555: PUSH
74556: LD_STRING 
74558: ST_TO_ADDR
// animal := CreateHuman ;
74559: LD_ADDR_VAR 0 12
74563: PUSH
74564: CALL_OW 44
74568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74569: LD_VAR 0 12
74573: PPUSH
74574: LD_VAR 0 8
74578: PPUSH
74579: LD_INT 0
74581: PPUSH
74582: CALL 76576 0 3
// end ;
74586: GO 74540
74588: POP
74589: POP
// if tigers then
74590: LD_VAR 0 2
74594: IFFALSE 74678
// for i = 1 to tigers do
74596: LD_ADDR_VAR 0 11
74600: PUSH
74601: DOUBLE
74602: LD_INT 1
74604: DEC
74605: ST_TO_ADDR
74606: LD_VAR 0 2
74610: PUSH
74611: FOR_TO
74612: IFFALSE 74676
// begin hc_class = class_tiger ;
74614: LD_ADDR_OWVAR 28
74618: PUSH
74619: LD_INT 14
74621: ST_TO_ADDR
// hc_gallery =  ;
74622: LD_ADDR_OWVAR 33
74626: PUSH
74627: LD_STRING 
74629: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74630: LD_ADDR_OWVAR 35
74634: PUSH
74635: LD_INT 7
74637: NEG
74638: PPUSH
74639: LD_INT 7
74641: PPUSH
74642: CALL_OW 12
74646: ST_TO_ADDR
// animal := CreateHuman ;
74647: LD_ADDR_VAR 0 12
74651: PUSH
74652: CALL_OW 44
74656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74657: LD_VAR 0 12
74661: PPUSH
74662: LD_VAR 0 8
74666: PPUSH
74667: LD_INT 0
74669: PPUSH
74670: CALL 76576 0 3
// end ;
74674: GO 74611
74676: POP
74677: POP
// if apemans then
74678: LD_VAR 0 3
74682: IFFALSE 74805
// for i = 1 to apemans do
74684: LD_ADDR_VAR 0 11
74688: PUSH
74689: DOUBLE
74690: LD_INT 1
74692: DEC
74693: ST_TO_ADDR
74694: LD_VAR 0 3
74698: PUSH
74699: FOR_TO
74700: IFFALSE 74803
// begin hc_class = class_apeman ;
74702: LD_ADDR_OWVAR 28
74706: PUSH
74707: LD_INT 12
74709: ST_TO_ADDR
// hc_gallery =  ;
74710: LD_ADDR_OWVAR 33
74714: PUSH
74715: LD_STRING 
74717: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74718: LD_ADDR_OWVAR 35
74722: PUSH
74723: LD_INT 2
74725: NEG
74726: PPUSH
74727: LD_INT 2
74729: PPUSH
74730: CALL_OW 12
74734: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74735: LD_ADDR_OWVAR 31
74739: PUSH
74740: LD_INT 1
74742: PPUSH
74743: LD_INT 3
74745: PPUSH
74746: CALL_OW 12
74750: PUSH
74751: LD_INT 1
74753: PPUSH
74754: LD_INT 3
74756: PPUSH
74757: CALL_OW 12
74761: PUSH
74762: LD_INT 0
74764: PUSH
74765: LD_INT 0
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: ST_TO_ADDR
// animal := CreateHuman ;
74774: LD_ADDR_VAR 0 12
74778: PUSH
74779: CALL_OW 44
74783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74784: LD_VAR 0 12
74788: PPUSH
74789: LD_VAR 0 8
74793: PPUSH
74794: LD_INT 0
74796: PPUSH
74797: CALL 76576 0 3
// end ;
74801: GO 74699
74803: POP
74804: POP
// if enchidnas then
74805: LD_VAR 0 4
74809: IFFALSE 74876
// for i = 1 to enchidnas do
74811: LD_ADDR_VAR 0 11
74815: PUSH
74816: DOUBLE
74817: LD_INT 1
74819: DEC
74820: ST_TO_ADDR
74821: LD_VAR 0 4
74825: PUSH
74826: FOR_TO
74827: IFFALSE 74874
// begin hc_class = 13 ;
74829: LD_ADDR_OWVAR 28
74833: PUSH
74834: LD_INT 13
74836: ST_TO_ADDR
// hc_gallery =  ;
74837: LD_ADDR_OWVAR 33
74841: PUSH
74842: LD_STRING 
74844: ST_TO_ADDR
// animal := CreateHuman ;
74845: LD_ADDR_VAR 0 12
74849: PUSH
74850: CALL_OW 44
74854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74855: LD_VAR 0 12
74859: PPUSH
74860: LD_VAR 0 8
74864: PPUSH
74865: LD_INT 0
74867: PPUSH
74868: CALL 76576 0 3
// end ;
74872: GO 74826
74874: POP
74875: POP
// if fishes then
74876: LD_VAR 0 7
74880: IFFALSE 74947
// for i = 1 to fishes do
74882: LD_ADDR_VAR 0 11
74886: PUSH
74887: DOUBLE
74888: LD_INT 1
74890: DEC
74891: ST_TO_ADDR
74892: LD_VAR 0 7
74896: PUSH
74897: FOR_TO
74898: IFFALSE 74945
// begin hc_class = 20 ;
74900: LD_ADDR_OWVAR 28
74904: PUSH
74905: LD_INT 20
74907: ST_TO_ADDR
// hc_gallery =  ;
74908: LD_ADDR_OWVAR 33
74912: PUSH
74913: LD_STRING 
74915: ST_TO_ADDR
// animal := CreateHuman ;
74916: LD_ADDR_VAR 0 12
74920: PUSH
74921: CALL_OW 44
74925: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74926: LD_VAR 0 12
74930: PPUSH
74931: LD_VAR 0 9
74935: PPUSH
74936: LD_INT 0
74938: PPUSH
74939: CALL 76576 0 3
// end ;
74943: GO 74897
74945: POP
74946: POP
// end ;
74947: LD_VAR 0 10
74951: RET
// export function WantHeal ( sci , unit ) ; begin
74952: LD_INT 0
74954: PPUSH
// if GetTaskList ( sci ) > 0 then
74955: LD_VAR 0 1
74959: PPUSH
74960: CALL_OW 437
74964: PUSH
74965: LD_INT 0
74967: GREATER
74968: IFFALSE 75038
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74970: LD_VAR 0 1
74974: PPUSH
74975: CALL_OW 437
74979: PUSH
74980: LD_INT 1
74982: ARRAY
74983: PUSH
74984: LD_INT 1
74986: ARRAY
74987: PUSH
74988: LD_STRING l
74990: EQUAL
74991: PUSH
74992: LD_VAR 0 1
74996: PPUSH
74997: CALL_OW 437
75001: PUSH
75002: LD_INT 1
75004: ARRAY
75005: PUSH
75006: LD_INT 4
75008: ARRAY
75009: PUSH
75010: LD_VAR 0 2
75014: EQUAL
75015: AND
75016: IFFALSE 75028
// result := true else
75018: LD_ADDR_VAR 0 3
75022: PUSH
75023: LD_INT 1
75025: ST_TO_ADDR
75026: GO 75036
// result := false ;
75028: LD_ADDR_VAR 0 3
75032: PUSH
75033: LD_INT 0
75035: ST_TO_ADDR
// end else
75036: GO 75046
// result := false ;
75038: LD_ADDR_VAR 0 3
75042: PUSH
75043: LD_INT 0
75045: ST_TO_ADDR
// end ;
75046: LD_VAR 0 3
75050: RET
// export function HealTarget ( sci ) ; begin
75051: LD_INT 0
75053: PPUSH
// if not sci then
75054: LD_VAR 0 1
75058: NOT
75059: IFFALSE 75063
// exit ;
75061: GO 75128
// result := 0 ;
75063: LD_ADDR_VAR 0 2
75067: PUSH
75068: LD_INT 0
75070: ST_TO_ADDR
// if GetTaskList ( sci ) then
75071: LD_VAR 0 1
75075: PPUSH
75076: CALL_OW 437
75080: IFFALSE 75128
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75082: LD_VAR 0 1
75086: PPUSH
75087: CALL_OW 437
75091: PUSH
75092: LD_INT 1
75094: ARRAY
75095: PUSH
75096: LD_INT 1
75098: ARRAY
75099: PUSH
75100: LD_STRING l
75102: EQUAL
75103: IFFALSE 75128
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75105: LD_ADDR_VAR 0 2
75109: PUSH
75110: LD_VAR 0 1
75114: PPUSH
75115: CALL_OW 437
75119: PUSH
75120: LD_INT 1
75122: ARRAY
75123: PUSH
75124: LD_INT 4
75126: ARRAY
75127: ST_TO_ADDR
// end ;
75128: LD_VAR 0 2
75132: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75133: LD_INT 0
75135: PPUSH
75136: PPUSH
75137: PPUSH
75138: PPUSH
// if not base_units then
75139: LD_VAR 0 1
75143: NOT
75144: IFFALSE 75148
// exit ;
75146: GO 75235
// result := false ;
75148: LD_ADDR_VAR 0 2
75152: PUSH
75153: LD_INT 0
75155: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75156: LD_ADDR_VAR 0 5
75160: PUSH
75161: LD_VAR 0 1
75165: PPUSH
75166: LD_INT 21
75168: PUSH
75169: LD_INT 3
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PPUSH
75176: CALL_OW 72
75180: ST_TO_ADDR
// if not tmp then
75181: LD_VAR 0 5
75185: NOT
75186: IFFALSE 75190
// exit ;
75188: GO 75235
// for i in tmp do
75190: LD_ADDR_VAR 0 3
75194: PUSH
75195: LD_VAR 0 5
75199: PUSH
75200: FOR_IN
75201: IFFALSE 75233
// begin result := EnemyInRange ( i , 22 ) ;
75203: LD_ADDR_VAR 0 2
75207: PUSH
75208: LD_VAR 0 3
75212: PPUSH
75213: LD_INT 22
75215: PPUSH
75216: CALL 72833 0 2
75220: ST_TO_ADDR
// if result then
75221: LD_VAR 0 2
75225: IFFALSE 75231
// exit ;
75227: POP
75228: POP
75229: GO 75235
// end ;
75231: GO 75200
75233: POP
75234: POP
// end ;
75235: LD_VAR 0 2
75239: RET
// export function FilterByTag ( units , tag ) ; begin
75240: LD_INT 0
75242: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75243: LD_ADDR_VAR 0 3
75247: PUSH
75248: LD_VAR 0 1
75252: PPUSH
75253: LD_INT 120
75255: PUSH
75256: LD_VAR 0 2
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PPUSH
75265: CALL_OW 72
75269: ST_TO_ADDR
// end ;
75270: LD_VAR 0 3
75274: RET
// export function IsDriver ( un ) ; begin
75275: LD_INT 0
75277: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75278: LD_ADDR_VAR 0 2
75282: PUSH
75283: LD_VAR 0 1
75287: PUSH
75288: LD_INT 55
75290: PUSH
75291: EMPTY
75292: LIST
75293: PPUSH
75294: CALL_OW 69
75298: IN
75299: ST_TO_ADDR
// end ;
75300: LD_VAR 0 2
75304: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75305: LD_INT 0
75307: PPUSH
75308: PPUSH
// list := [ ] ;
75309: LD_ADDR_VAR 0 5
75313: PUSH
75314: EMPTY
75315: ST_TO_ADDR
// case d of 0 :
75316: LD_VAR 0 3
75320: PUSH
75321: LD_INT 0
75323: DOUBLE
75324: EQUAL
75325: IFTRUE 75329
75327: GO 75462
75329: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75330: LD_ADDR_VAR 0 5
75334: PUSH
75335: LD_VAR 0 1
75339: PUSH
75340: LD_INT 4
75342: MINUS
75343: PUSH
75344: LD_VAR 0 2
75348: PUSH
75349: LD_INT 4
75351: MINUS
75352: PUSH
75353: LD_INT 2
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: PUSH
75361: LD_VAR 0 1
75365: PUSH
75366: LD_INT 3
75368: MINUS
75369: PUSH
75370: LD_VAR 0 2
75374: PUSH
75375: LD_INT 1
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: LIST
75382: PUSH
75383: LD_VAR 0 1
75387: PUSH
75388: LD_INT 4
75390: PLUS
75391: PUSH
75392: LD_VAR 0 2
75396: PUSH
75397: LD_INT 4
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: LIST
75404: PUSH
75405: LD_VAR 0 1
75409: PUSH
75410: LD_INT 3
75412: PLUS
75413: PUSH
75414: LD_VAR 0 2
75418: PUSH
75419: LD_INT 3
75421: PLUS
75422: PUSH
75423: LD_INT 5
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: LIST
75430: PUSH
75431: LD_VAR 0 1
75435: PUSH
75436: LD_VAR 0 2
75440: PUSH
75441: LD_INT 4
75443: PLUS
75444: PUSH
75445: LD_INT 0
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: LIST
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: ST_TO_ADDR
// end ; 1 :
75460: GO 76160
75462: LD_INT 1
75464: DOUBLE
75465: EQUAL
75466: IFTRUE 75470
75468: GO 75603
75470: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75471: LD_ADDR_VAR 0 5
75475: PUSH
75476: LD_VAR 0 1
75480: PUSH
75481: LD_VAR 0 2
75485: PUSH
75486: LD_INT 4
75488: MINUS
75489: PUSH
75490: LD_INT 3
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: LIST
75497: PUSH
75498: LD_VAR 0 1
75502: PUSH
75503: LD_INT 3
75505: MINUS
75506: PUSH
75507: LD_VAR 0 2
75511: PUSH
75512: LD_INT 3
75514: MINUS
75515: PUSH
75516: LD_INT 2
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: PUSH
75524: LD_VAR 0 1
75528: PUSH
75529: LD_INT 4
75531: MINUS
75532: PUSH
75533: LD_VAR 0 2
75537: PUSH
75538: LD_INT 1
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: LIST
75545: PUSH
75546: LD_VAR 0 1
75550: PUSH
75551: LD_VAR 0 2
75555: PUSH
75556: LD_INT 3
75558: PLUS
75559: PUSH
75560: LD_INT 0
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: LIST
75567: PUSH
75568: LD_VAR 0 1
75572: PUSH
75573: LD_INT 4
75575: PLUS
75576: PUSH
75577: LD_VAR 0 2
75581: PUSH
75582: LD_INT 4
75584: PLUS
75585: PUSH
75586: LD_INT 5
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: ST_TO_ADDR
// end ; 2 :
75601: GO 76160
75603: LD_INT 2
75605: DOUBLE
75606: EQUAL
75607: IFTRUE 75611
75609: GO 75740
75611: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75612: LD_ADDR_VAR 0 5
75616: PUSH
75617: LD_VAR 0 1
75621: PUSH
75622: LD_VAR 0 2
75626: PUSH
75627: LD_INT 3
75629: MINUS
75630: PUSH
75631: LD_INT 3
75633: PUSH
75634: EMPTY
75635: LIST
75636: LIST
75637: LIST
75638: PUSH
75639: LD_VAR 0 1
75643: PUSH
75644: LD_INT 4
75646: PLUS
75647: PUSH
75648: LD_VAR 0 2
75652: PUSH
75653: LD_INT 4
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: LIST
75660: PUSH
75661: LD_VAR 0 1
75665: PUSH
75666: LD_VAR 0 2
75670: PUSH
75671: LD_INT 4
75673: PLUS
75674: PUSH
75675: LD_INT 0
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: LIST
75682: PUSH
75683: LD_VAR 0 1
75687: PUSH
75688: LD_INT 3
75690: MINUS
75691: PUSH
75692: LD_VAR 0 2
75696: PUSH
75697: LD_INT 1
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: LD_INT 4
75712: MINUS
75713: PUSH
75714: LD_VAR 0 2
75718: PUSH
75719: LD_INT 4
75721: MINUS
75722: PUSH
75723: LD_INT 2
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: LIST
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: ST_TO_ADDR
// end ; 3 :
75738: GO 76160
75740: LD_INT 3
75742: DOUBLE
75743: EQUAL
75744: IFTRUE 75748
75746: GO 75881
75748: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75749: LD_ADDR_VAR 0 5
75753: PUSH
75754: LD_VAR 0 1
75758: PUSH
75759: LD_INT 3
75761: PLUS
75762: PUSH
75763: LD_VAR 0 2
75767: PUSH
75768: LD_INT 4
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: PUSH
75776: LD_VAR 0 1
75780: PUSH
75781: LD_INT 4
75783: PLUS
75784: PUSH
75785: LD_VAR 0 2
75789: PUSH
75790: LD_INT 4
75792: PLUS
75793: PUSH
75794: LD_INT 5
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: LIST
75801: PUSH
75802: LD_VAR 0 1
75806: PUSH
75807: LD_INT 4
75809: MINUS
75810: PUSH
75811: LD_VAR 0 2
75815: PUSH
75816: LD_INT 1
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: LIST
75823: PUSH
75824: LD_VAR 0 1
75828: PUSH
75829: LD_VAR 0 2
75833: PUSH
75834: LD_INT 4
75836: MINUS
75837: PUSH
75838: LD_INT 3
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: LIST
75845: PUSH
75846: LD_VAR 0 1
75850: PUSH
75851: LD_INT 3
75853: MINUS
75854: PUSH
75855: LD_VAR 0 2
75859: PUSH
75860: LD_INT 3
75862: MINUS
75863: PUSH
75864: LD_INT 2
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: LIST
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: ST_TO_ADDR
// end ; 4 :
75879: GO 76160
75881: LD_INT 4
75883: DOUBLE
75884: EQUAL
75885: IFTRUE 75889
75887: GO 76022
75889: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75890: LD_ADDR_VAR 0 5
75894: PUSH
75895: LD_VAR 0 1
75899: PUSH
75900: LD_VAR 0 2
75904: PUSH
75905: LD_INT 4
75907: PLUS
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: LIST
75916: PUSH
75917: LD_VAR 0 1
75921: PUSH
75922: LD_INT 3
75924: PLUS
75925: PUSH
75926: LD_VAR 0 2
75930: PUSH
75931: LD_INT 3
75933: PLUS
75934: PUSH
75935: LD_INT 5
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: PUSH
75943: LD_VAR 0 1
75947: PUSH
75948: LD_INT 4
75950: PLUS
75951: PUSH
75952: LD_VAR 0 2
75956: PUSH
75957: LD_INT 4
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: LIST
75964: PUSH
75965: LD_VAR 0 1
75969: PUSH
75970: LD_VAR 0 2
75974: PUSH
75975: LD_INT 3
75977: MINUS
75978: PUSH
75979: LD_INT 3
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: LIST
75986: PUSH
75987: LD_VAR 0 1
75991: PUSH
75992: LD_INT 4
75994: MINUS
75995: PUSH
75996: LD_VAR 0 2
76000: PUSH
76001: LD_INT 4
76003: MINUS
76004: PUSH
76005: LD_INT 2
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: LIST
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: ST_TO_ADDR
// end ; 5 :
76020: GO 76160
76022: LD_INT 5
76024: DOUBLE
76025: EQUAL
76026: IFTRUE 76030
76028: GO 76159
76030: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76031: LD_ADDR_VAR 0 5
76035: PUSH
76036: LD_VAR 0 1
76040: PUSH
76041: LD_INT 4
76043: MINUS
76044: PUSH
76045: LD_VAR 0 2
76049: PUSH
76050: LD_INT 1
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: LIST
76057: PUSH
76058: LD_VAR 0 1
76062: PUSH
76063: LD_VAR 0 2
76067: PUSH
76068: LD_INT 4
76070: MINUS
76071: PUSH
76072: LD_INT 3
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: LIST
76079: PUSH
76080: LD_VAR 0 1
76084: PUSH
76085: LD_INT 4
76087: PLUS
76088: PUSH
76089: LD_VAR 0 2
76093: PUSH
76094: LD_INT 4
76096: PLUS
76097: PUSH
76098: LD_INT 5
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: LIST
76105: PUSH
76106: LD_VAR 0 1
76110: PUSH
76111: LD_INT 3
76113: PLUS
76114: PUSH
76115: LD_VAR 0 2
76119: PUSH
76120: LD_INT 4
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: PUSH
76128: LD_VAR 0 1
76132: PUSH
76133: LD_VAR 0 2
76137: PUSH
76138: LD_INT 3
76140: PLUS
76141: PUSH
76142: LD_INT 0
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: LIST
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: ST_TO_ADDR
// end ; end ;
76157: GO 76160
76159: POP
// result := list ;
76160: LD_ADDR_VAR 0 4
76164: PUSH
76165: LD_VAR 0 5
76169: ST_TO_ADDR
// end ;
76170: LD_VAR 0 4
76174: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76175: LD_INT 0
76177: PPUSH
76178: PPUSH
76179: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76180: LD_VAR 0 1
76184: NOT
76185: PUSH
76186: LD_VAR 0 2
76190: PUSH
76191: LD_INT 1
76193: PUSH
76194: LD_INT 2
76196: PUSH
76197: LD_INT 3
76199: PUSH
76200: LD_INT 4
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: IN
76209: NOT
76210: OR
76211: IFFALSE 76215
// exit ;
76213: GO 76298
// tmp := [ ] ;
76215: LD_ADDR_VAR 0 5
76219: PUSH
76220: EMPTY
76221: ST_TO_ADDR
// for i in units do
76222: LD_ADDR_VAR 0 4
76226: PUSH
76227: LD_VAR 0 1
76231: PUSH
76232: FOR_IN
76233: IFFALSE 76267
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76235: LD_ADDR_VAR 0 5
76239: PUSH
76240: LD_VAR 0 5
76244: PPUSH
76245: LD_VAR 0 4
76249: PPUSH
76250: LD_VAR 0 2
76254: PPUSH
76255: CALL_OW 259
76259: PPUSH
76260: CALL 77671 0 2
76264: ST_TO_ADDR
76265: GO 76232
76267: POP
76268: POP
// if not tmp then
76269: LD_VAR 0 5
76273: NOT
76274: IFFALSE 76278
// exit ;
76276: GO 76298
// result := SortListByListDesc ( units , tmp ) ;
76278: LD_ADDR_VAR 0 3
76282: PUSH
76283: LD_VAR 0 1
76287: PPUSH
76288: LD_VAR 0 5
76292: PPUSH
76293: CALL_OW 77
76297: ST_TO_ADDR
// end ;
76298: LD_VAR 0 3
76302: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76303: LD_INT 0
76305: PPUSH
76306: PPUSH
76307: PPUSH
// result := false ;
76308: LD_ADDR_VAR 0 3
76312: PUSH
76313: LD_INT 0
76315: ST_TO_ADDR
// if not building then
76316: LD_VAR 0 2
76320: NOT
76321: IFFALSE 76325
// exit ;
76323: GO 76463
// x := GetX ( building ) ;
76325: LD_ADDR_VAR 0 4
76329: PUSH
76330: LD_VAR 0 2
76334: PPUSH
76335: CALL_OW 250
76339: ST_TO_ADDR
// y := GetY ( building ) ;
76340: LD_ADDR_VAR 0 5
76344: PUSH
76345: LD_VAR 0 2
76349: PPUSH
76350: CALL_OW 251
76354: ST_TO_ADDR
// if not x or not y then
76355: LD_VAR 0 4
76359: NOT
76360: PUSH
76361: LD_VAR 0 5
76365: NOT
76366: OR
76367: IFFALSE 76371
// exit ;
76369: GO 76463
// if GetTaskList ( unit ) then
76371: LD_VAR 0 1
76375: PPUSH
76376: CALL_OW 437
76380: IFFALSE 76463
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76382: LD_STRING e
76384: PUSH
76385: LD_VAR 0 1
76389: PPUSH
76390: CALL_OW 437
76394: PUSH
76395: LD_INT 1
76397: ARRAY
76398: PUSH
76399: LD_INT 1
76401: ARRAY
76402: EQUAL
76403: PUSH
76404: LD_VAR 0 4
76408: PUSH
76409: LD_VAR 0 1
76413: PPUSH
76414: CALL_OW 437
76418: PUSH
76419: LD_INT 1
76421: ARRAY
76422: PUSH
76423: LD_INT 2
76425: ARRAY
76426: EQUAL
76427: AND
76428: PUSH
76429: LD_VAR 0 5
76433: PUSH
76434: LD_VAR 0 1
76438: PPUSH
76439: CALL_OW 437
76443: PUSH
76444: LD_INT 1
76446: ARRAY
76447: PUSH
76448: LD_INT 3
76450: ARRAY
76451: EQUAL
76452: AND
76453: IFFALSE 76463
// result := true end ;
76455: LD_ADDR_VAR 0 3
76459: PUSH
76460: LD_INT 1
76462: ST_TO_ADDR
// end ;
76463: LD_VAR 0 3
76467: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76468: LD_INT 0
76470: PPUSH
// result := false ;
76471: LD_ADDR_VAR 0 4
76475: PUSH
76476: LD_INT 0
76478: ST_TO_ADDR
// if GetTaskList ( unit ) then
76479: LD_VAR 0 1
76483: PPUSH
76484: CALL_OW 437
76488: IFFALSE 76571
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76490: LD_STRING M
76492: PUSH
76493: LD_VAR 0 1
76497: PPUSH
76498: CALL_OW 437
76502: PUSH
76503: LD_INT 1
76505: ARRAY
76506: PUSH
76507: LD_INT 1
76509: ARRAY
76510: EQUAL
76511: PUSH
76512: LD_VAR 0 2
76516: PUSH
76517: LD_VAR 0 1
76521: PPUSH
76522: CALL_OW 437
76526: PUSH
76527: LD_INT 1
76529: ARRAY
76530: PUSH
76531: LD_INT 2
76533: ARRAY
76534: EQUAL
76535: AND
76536: PUSH
76537: LD_VAR 0 3
76541: PUSH
76542: LD_VAR 0 1
76546: PPUSH
76547: CALL_OW 437
76551: PUSH
76552: LD_INT 1
76554: ARRAY
76555: PUSH
76556: LD_INT 3
76558: ARRAY
76559: EQUAL
76560: AND
76561: IFFALSE 76571
// result := true ;
76563: LD_ADDR_VAR 0 4
76567: PUSH
76568: LD_INT 1
76570: ST_TO_ADDR
// end ; end ;
76571: LD_VAR 0 4
76575: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76576: LD_INT 0
76578: PPUSH
76579: PPUSH
76580: PPUSH
76581: PPUSH
// if not unit or not area then
76582: LD_VAR 0 1
76586: NOT
76587: PUSH
76588: LD_VAR 0 2
76592: NOT
76593: OR
76594: IFFALSE 76598
// exit ;
76596: GO 76774
// tmp := AreaToList ( area , i ) ;
76598: LD_ADDR_VAR 0 6
76602: PUSH
76603: LD_VAR 0 2
76607: PPUSH
76608: LD_VAR 0 5
76612: PPUSH
76613: CALL_OW 517
76617: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76618: LD_ADDR_VAR 0 5
76622: PUSH
76623: DOUBLE
76624: LD_INT 1
76626: DEC
76627: ST_TO_ADDR
76628: LD_VAR 0 6
76632: PUSH
76633: LD_INT 1
76635: ARRAY
76636: PUSH
76637: FOR_TO
76638: IFFALSE 76772
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76640: LD_ADDR_VAR 0 7
76644: PUSH
76645: LD_VAR 0 6
76649: PUSH
76650: LD_INT 1
76652: ARRAY
76653: PUSH
76654: LD_VAR 0 5
76658: ARRAY
76659: PUSH
76660: LD_VAR 0 6
76664: PUSH
76665: LD_INT 2
76667: ARRAY
76668: PUSH
76669: LD_VAR 0 5
76673: ARRAY
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76679: LD_INT 92
76681: PUSH
76682: LD_VAR 0 7
76686: PUSH
76687: LD_INT 1
76689: ARRAY
76690: PUSH
76691: LD_VAR 0 7
76695: PUSH
76696: LD_INT 2
76698: ARRAY
76699: PUSH
76700: LD_INT 2
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: PPUSH
76709: CALL_OW 69
76713: PUSH
76714: LD_INT 0
76716: EQUAL
76717: IFFALSE 76770
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76719: LD_VAR 0 1
76723: PPUSH
76724: LD_VAR 0 7
76728: PUSH
76729: LD_INT 1
76731: ARRAY
76732: PPUSH
76733: LD_VAR 0 7
76737: PUSH
76738: LD_INT 2
76740: ARRAY
76741: PPUSH
76742: LD_VAR 0 3
76746: PPUSH
76747: CALL_OW 48
// result := IsPlaced ( unit ) ;
76751: LD_ADDR_VAR 0 4
76755: PUSH
76756: LD_VAR 0 1
76760: PPUSH
76761: CALL_OW 305
76765: ST_TO_ADDR
// exit ;
76766: POP
76767: POP
76768: GO 76774
// end ; end ;
76770: GO 76637
76772: POP
76773: POP
// end ;
76774: LD_VAR 0 4
76778: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76779: LD_INT 0
76781: PPUSH
76782: PPUSH
76783: PPUSH
// if not side or side > 8 then
76784: LD_VAR 0 1
76788: NOT
76789: PUSH
76790: LD_VAR 0 1
76794: PUSH
76795: LD_INT 8
76797: GREATER
76798: OR
76799: IFFALSE 76803
// exit ;
76801: GO 76990
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76803: LD_ADDR_VAR 0 4
76807: PUSH
76808: LD_INT 22
76810: PUSH
76811: LD_VAR 0 1
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: LD_INT 21
76822: PUSH
76823: LD_INT 3
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PPUSH
76834: CALL_OW 69
76838: ST_TO_ADDR
// if not tmp then
76839: LD_VAR 0 4
76843: NOT
76844: IFFALSE 76848
// exit ;
76846: GO 76990
// enable_addtolog := true ;
76848: LD_ADDR_OWVAR 81
76852: PUSH
76853: LD_INT 1
76855: ST_TO_ADDR
// AddToLog ( [ ) ;
76856: LD_STRING [
76858: PPUSH
76859: CALL_OW 561
// for i in tmp do
76863: LD_ADDR_VAR 0 3
76867: PUSH
76868: LD_VAR 0 4
76872: PUSH
76873: FOR_IN
76874: IFFALSE 76981
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76876: LD_STRING [
76878: PUSH
76879: LD_VAR 0 3
76883: PPUSH
76884: CALL_OW 266
76888: STR
76889: PUSH
76890: LD_STRING , 
76892: STR
76893: PUSH
76894: LD_VAR 0 3
76898: PPUSH
76899: CALL_OW 250
76903: STR
76904: PUSH
76905: LD_STRING , 
76907: STR
76908: PUSH
76909: LD_VAR 0 3
76913: PPUSH
76914: CALL_OW 251
76918: STR
76919: PUSH
76920: LD_STRING , 
76922: STR
76923: PUSH
76924: LD_VAR 0 3
76928: PPUSH
76929: CALL_OW 254
76933: STR
76934: PUSH
76935: LD_STRING , 
76937: STR
76938: PUSH
76939: LD_VAR 0 3
76943: PPUSH
76944: LD_INT 1
76946: PPUSH
76947: CALL_OW 268
76951: STR
76952: PUSH
76953: LD_STRING , 
76955: STR
76956: PUSH
76957: LD_VAR 0 3
76961: PPUSH
76962: LD_INT 2
76964: PPUSH
76965: CALL_OW 268
76969: STR
76970: PUSH
76971: LD_STRING ],
76973: STR
76974: PPUSH
76975: CALL_OW 561
// end ;
76979: GO 76873
76981: POP
76982: POP
// AddToLog ( ]; ) ;
76983: LD_STRING ];
76985: PPUSH
76986: CALL_OW 561
// end ;
76990: LD_VAR 0 2
76994: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76995: LD_INT 0
76997: PPUSH
76998: PPUSH
76999: PPUSH
77000: PPUSH
77001: PPUSH
// if not area or not rate or not max then
77002: LD_VAR 0 1
77006: NOT
77007: PUSH
77008: LD_VAR 0 2
77012: NOT
77013: OR
77014: PUSH
77015: LD_VAR 0 4
77019: NOT
77020: OR
77021: IFFALSE 77025
// exit ;
77023: GO 77214
// while 1 do
77025: LD_INT 1
77027: IFFALSE 77214
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77029: LD_ADDR_VAR 0 9
77033: PUSH
77034: LD_VAR 0 1
77038: PPUSH
77039: LD_INT 1
77041: PPUSH
77042: CALL_OW 287
77046: PUSH
77047: LD_INT 10
77049: MUL
77050: ST_TO_ADDR
// r := rate / 10 ;
77051: LD_ADDR_VAR 0 7
77055: PUSH
77056: LD_VAR 0 2
77060: PUSH
77061: LD_INT 10
77063: DIVREAL
77064: ST_TO_ADDR
// time := 1 1$00 ;
77065: LD_ADDR_VAR 0 8
77069: PUSH
77070: LD_INT 2100
77072: ST_TO_ADDR
// if amount < min then
77073: LD_VAR 0 9
77077: PUSH
77078: LD_VAR 0 3
77082: LESS
77083: IFFALSE 77101
// r := r * 2 else
77085: LD_ADDR_VAR 0 7
77089: PUSH
77090: LD_VAR 0 7
77094: PUSH
77095: LD_INT 2
77097: MUL
77098: ST_TO_ADDR
77099: GO 77127
// if amount > max then
77101: LD_VAR 0 9
77105: PUSH
77106: LD_VAR 0 4
77110: GREATER
77111: IFFALSE 77127
// r := r / 2 ;
77113: LD_ADDR_VAR 0 7
77117: PUSH
77118: LD_VAR 0 7
77122: PUSH
77123: LD_INT 2
77125: DIVREAL
77126: ST_TO_ADDR
// time := time / r ;
77127: LD_ADDR_VAR 0 8
77131: PUSH
77132: LD_VAR 0 8
77136: PUSH
77137: LD_VAR 0 7
77141: DIVREAL
77142: ST_TO_ADDR
// if time < 0 then
77143: LD_VAR 0 8
77147: PUSH
77148: LD_INT 0
77150: LESS
77151: IFFALSE 77168
// time := time * - 1 ;
77153: LD_ADDR_VAR 0 8
77157: PUSH
77158: LD_VAR 0 8
77162: PUSH
77163: LD_INT 1
77165: NEG
77166: MUL
77167: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77168: LD_VAR 0 8
77172: PUSH
77173: LD_INT 35
77175: PPUSH
77176: LD_INT 875
77178: PPUSH
77179: CALL_OW 12
77183: PLUS
77184: PPUSH
77185: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77189: LD_INT 1
77191: PPUSH
77192: LD_INT 5
77194: PPUSH
77195: CALL_OW 12
77199: PPUSH
77200: LD_VAR 0 1
77204: PPUSH
77205: LD_INT 1
77207: PPUSH
77208: CALL_OW 55
// end ;
77212: GO 77025
// end ;
77214: LD_VAR 0 5
77218: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77219: LD_INT 0
77221: PPUSH
77222: PPUSH
77223: PPUSH
77224: PPUSH
77225: PPUSH
77226: PPUSH
77227: PPUSH
77228: PPUSH
// if not turrets or not factories then
77229: LD_VAR 0 1
77233: NOT
77234: PUSH
77235: LD_VAR 0 2
77239: NOT
77240: OR
77241: IFFALSE 77245
// exit ;
77243: GO 77552
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77245: LD_ADDR_VAR 0 10
77249: PUSH
77250: LD_INT 5
77252: PUSH
77253: LD_INT 6
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: LD_INT 2
77262: PUSH
77263: LD_INT 4
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PUSH
77270: LD_INT 3
77272: PUSH
77273: LD_INT 5
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: LIST
77284: PUSH
77285: LD_INT 24
77287: PUSH
77288: LD_INT 25
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 23
77297: PUSH
77298: LD_INT 27
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: PUSH
77309: LD_INT 42
77311: PUSH
77312: LD_INT 43
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: LD_INT 44
77321: PUSH
77322: LD_INT 46
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: LD_INT 45
77331: PUSH
77332: LD_INT 47
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: PUSH
77339: EMPTY
77340: LIST
77341: LIST
77342: LIST
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: LIST
77348: ST_TO_ADDR
// result := [ ] ;
77349: LD_ADDR_VAR 0 3
77353: PUSH
77354: EMPTY
77355: ST_TO_ADDR
// for i in turrets do
77356: LD_ADDR_VAR 0 4
77360: PUSH
77361: LD_VAR 0 1
77365: PUSH
77366: FOR_IN
77367: IFFALSE 77550
// begin nat := GetNation ( i ) ;
77369: LD_ADDR_VAR 0 7
77373: PUSH
77374: LD_VAR 0 4
77378: PPUSH
77379: CALL_OW 248
77383: ST_TO_ADDR
// weapon := 0 ;
77384: LD_ADDR_VAR 0 8
77388: PUSH
77389: LD_INT 0
77391: ST_TO_ADDR
// if not nat then
77392: LD_VAR 0 7
77396: NOT
77397: IFFALSE 77401
// continue ;
77399: GO 77366
// for j in list [ nat ] do
77401: LD_ADDR_VAR 0 5
77405: PUSH
77406: LD_VAR 0 10
77410: PUSH
77411: LD_VAR 0 7
77415: ARRAY
77416: PUSH
77417: FOR_IN
77418: IFFALSE 77459
// if GetBWeapon ( i ) = j [ 1 ] then
77420: LD_VAR 0 4
77424: PPUSH
77425: CALL_OW 269
77429: PUSH
77430: LD_VAR 0 5
77434: PUSH
77435: LD_INT 1
77437: ARRAY
77438: EQUAL
77439: IFFALSE 77457
// begin weapon := j [ 2 ] ;
77441: LD_ADDR_VAR 0 8
77445: PUSH
77446: LD_VAR 0 5
77450: PUSH
77451: LD_INT 2
77453: ARRAY
77454: ST_TO_ADDR
// break ;
77455: GO 77459
// end ;
77457: GO 77417
77459: POP
77460: POP
// if not weapon then
77461: LD_VAR 0 8
77465: NOT
77466: IFFALSE 77470
// continue ;
77468: GO 77366
// for k in factories do
77470: LD_ADDR_VAR 0 6
77474: PUSH
77475: LD_VAR 0 2
77479: PUSH
77480: FOR_IN
77481: IFFALSE 77546
// begin weapons := AvailableWeaponList ( k ) ;
77483: LD_ADDR_VAR 0 9
77487: PUSH
77488: LD_VAR 0 6
77492: PPUSH
77493: CALL_OW 478
77497: ST_TO_ADDR
// if not weapons then
77498: LD_VAR 0 9
77502: NOT
77503: IFFALSE 77507
// continue ;
77505: GO 77480
// if weapon in weapons then
77507: LD_VAR 0 8
77511: PUSH
77512: LD_VAR 0 9
77516: IN
77517: IFFALSE 77544
// begin result := [ i , weapon ] ;
77519: LD_ADDR_VAR 0 3
77523: PUSH
77524: LD_VAR 0 4
77528: PUSH
77529: LD_VAR 0 8
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: ST_TO_ADDR
// exit ;
77538: POP
77539: POP
77540: POP
77541: POP
77542: GO 77552
// end ; end ;
77544: GO 77480
77546: POP
77547: POP
// end ;
77548: GO 77366
77550: POP
77551: POP
// end ;
77552: LD_VAR 0 3
77556: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77557: LD_INT 0
77559: PPUSH
// if not side or side > 8 then
77560: LD_VAR 0 3
77564: NOT
77565: PUSH
77566: LD_VAR 0 3
77570: PUSH
77571: LD_INT 8
77573: GREATER
77574: OR
77575: IFFALSE 77579
// exit ;
77577: GO 77638
// if not range then
77579: LD_VAR 0 4
77583: NOT
77584: IFFALSE 77595
// range := - 12 ;
77586: LD_ADDR_VAR 0 4
77590: PUSH
77591: LD_INT 12
77593: NEG
77594: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77595: LD_VAR 0 1
77599: PPUSH
77600: LD_VAR 0 2
77604: PPUSH
77605: LD_VAR 0 3
77609: PPUSH
77610: LD_VAR 0 4
77614: PPUSH
77615: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77619: LD_VAR 0 1
77623: PPUSH
77624: LD_VAR 0 2
77628: PPUSH
77629: LD_VAR 0 3
77633: PPUSH
77634: CALL_OW 331
// end ;
77638: LD_VAR 0 5
77642: RET
// export function Video ( mode ) ; begin
77643: LD_INT 0
77645: PPUSH
// ingame_video = mode ;
77646: LD_ADDR_OWVAR 52
77650: PUSH
77651: LD_VAR 0 1
77655: ST_TO_ADDR
// interface_hidden = mode ;
77656: LD_ADDR_OWVAR 54
77660: PUSH
77661: LD_VAR 0 1
77665: ST_TO_ADDR
// end ;
77666: LD_VAR 0 2
77670: RET
// export function Join ( array , element ) ; begin
77671: LD_INT 0
77673: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77674: LD_ADDR_VAR 0 3
77678: PUSH
77679: LD_VAR 0 1
77683: PPUSH
77684: LD_VAR 0 1
77688: PUSH
77689: LD_INT 1
77691: PLUS
77692: PPUSH
77693: LD_VAR 0 2
77697: PPUSH
77698: CALL_OW 1
77702: ST_TO_ADDR
// end ;
77703: LD_VAR 0 3
77707: RET
// export function JoinUnion ( array , element ) ; begin
77708: LD_INT 0
77710: PPUSH
// result := array union element ;
77711: LD_ADDR_VAR 0 3
77715: PUSH
77716: LD_VAR 0 1
77720: PUSH
77721: LD_VAR 0 2
77725: UNION
77726: ST_TO_ADDR
// end ;
77727: LD_VAR 0 3
77731: RET
// export function GetBehemoths ( side ) ; begin
77732: LD_INT 0
77734: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77735: LD_ADDR_VAR 0 2
77739: PUSH
77740: LD_INT 22
77742: PUSH
77743: LD_VAR 0 1
77747: PUSH
77748: EMPTY
77749: LIST
77750: LIST
77751: PUSH
77752: LD_INT 31
77754: PUSH
77755: LD_INT 25
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PPUSH
77766: CALL_OW 69
77770: ST_TO_ADDR
// end ;
77771: LD_VAR 0 2
77775: RET
// export function Shuffle ( array ) ; var i , index ; begin
77776: LD_INT 0
77778: PPUSH
77779: PPUSH
77780: PPUSH
// result := [ ] ;
77781: LD_ADDR_VAR 0 2
77785: PUSH
77786: EMPTY
77787: ST_TO_ADDR
// if not array then
77788: LD_VAR 0 1
77792: NOT
77793: IFFALSE 77797
// exit ;
77795: GO 77896
// Randomize ;
77797: CALL_OW 10
// for i = array downto 1 do
77801: LD_ADDR_VAR 0 3
77805: PUSH
77806: DOUBLE
77807: LD_VAR 0 1
77811: INC
77812: ST_TO_ADDR
77813: LD_INT 1
77815: PUSH
77816: FOR_DOWNTO
77817: IFFALSE 77894
// begin index := rand ( 1 , array ) ;
77819: LD_ADDR_VAR 0 4
77823: PUSH
77824: LD_INT 1
77826: PPUSH
77827: LD_VAR 0 1
77831: PPUSH
77832: CALL_OW 12
77836: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77837: LD_ADDR_VAR 0 2
77841: PUSH
77842: LD_VAR 0 2
77846: PPUSH
77847: LD_VAR 0 2
77851: PUSH
77852: LD_INT 1
77854: PLUS
77855: PPUSH
77856: LD_VAR 0 1
77860: PUSH
77861: LD_VAR 0 4
77865: ARRAY
77866: PPUSH
77867: CALL_OW 2
77871: ST_TO_ADDR
// array := Delete ( array , index ) ;
77872: LD_ADDR_VAR 0 1
77876: PUSH
77877: LD_VAR 0 1
77881: PPUSH
77882: LD_VAR 0 4
77886: PPUSH
77887: CALL_OW 3
77891: ST_TO_ADDR
// end ;
77892: GO 77816
77894: POP
77895: POP
// end ;
77896: LD_VAR 0 2
77900: RET
// export function GetBaseMaterials ( base ) ; begin
77901: LD_INT 0
77903: PPUSH
// result := [ 0 , 0 , 0 ] ;
77904: LD_ADDR_VAR 0 2
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: LD_INT 0
77914: PUSH
77915: LD_INT 0
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: LIST
77922: ST_TO_ADDR
// if not base then
77923: LD_VAR 0 1
77927: NOT
77928: IFFALSE 77932
// exit ;
77930: GO 77981
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77932: LD_ADDR_VAR 0 2
77936: PUSH
77937: LD_VAR 0 1
77941: PPUSH
77942: LD_INT 1
77944: PPUSH
77945: CALL_OW 275
77949: PUSH
77950: LD_VAR 0 1
77954: PPUSH
77955: LD_INT 2
77957: PPUSH
77958: CALL_OW 275
77962: PUSH
77963: LD_VAR 0 1
77967: PPUSH
77968: LD_INT 3
77970: PPUSH
77971: CALL_OW 275
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: LIST
77980: ST_TO_ADDR
// end ;
77981: LD_VAR 0 2
77985: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77986: LD_INT 0
77988: PPUSH
77989: PPUSH
// result := array ;
77990: LD_ADDR_VAR 0 3
77994: PUSH
77995: LD_VAR 0 1
77999: ST_TO_ADDR
// if size >= result then
78000: LD_VAR 0 2
78004: PUSH
78005: LD_VAR 0 3
78009: GREATEREQUAL
78010: IFFALSE 78014
// exit ;
78012: GO 78064
// if size then
78014: LD_VAR 0 2
78018: IFFALSE 78064
// for i := array downto size do
78020: LD_ADDR_VAR 0 4
78024: PUSH
78025: DOUBLE
78026: LD_VAR 0 1
78030: INC
78031: ST_TO_ADDR
78032: LD_VAR 0 2
78036: PUSH
78037: FOR_DOWNTO
78038: IFFALSE 78062
// result := Delete ( result , result ) ;
78040: LD_ADDR_VAR 0 3
78044: PUSH
78045: LD_VAR 0 3
78049: PPUSH
78050: LD_VAR 0 3
78054: PPUSH
78055: CALL_OW 3
78059: ST_TO_ADDR
78060: GO 78037
78062: POP
78063: POP
// end ;
78064: LD_VAR 0 3
78068: RET
// export function ComExit ( unit ) ; var tmp ; begin
78069: LD_INT 0
78071: PPUSH
78072: PPUSH
// if not IsInUnit ( unit ) then
78073: LD_VAR 0 1
78077: PPUSH
78078: CALL_OW 310
78082: NOT
78083: IFFALSE 78087
// exit ;
78085: GO 78147
// tmp := IsInUnit ( unit ) ;
78087: LD_ADDR_VAR 0 3
78091: PUSH
78092: LD_VAR 0 1
78096: PPUSH
78097: CALL_OW 310
78101: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78102: LD_VAR 0 3
78106: PPUSH
78107: CALL_OW 247
78111: PUSH
78112: LD_INT 2
78114: EQUAL
78115: IFFALSE 78128
// ComExitVehicle ( unit ) else
78117: LD_VAR 0 1
78121: PPUSH
78122: CALL_OW 121
78126: GO 78137
// ComExitBuilding ( unit ) ;
78128: LD_VAR 0 1
78132: PPUSH
78133: CALL_OW 122
// result := tmp ;
78137: LD_ADDR_VAR 0 2
78141: PUSH
78142: LD_VAR 0 3
78146: ST_TO_ADDR
// end ;
78147: LD_VAR 0 2
78151: RET
// export function ComExitAll ( units ) ; var i ; begin
78152: LD_INT 0
78154: PPUSH
78155: PPUSH
// if not units then
78156: LD_VAR 0 1
78160: NOT
78161: IFFALSE 78165
// exit ;
78163: GO 78191
// for i in units do
78165: LD_ADDR_VAR 0 3
78169: PUSH
78170: LD_VAR 0 1
78174: PUSH
78175: FOR_IN
78176: IFFALSE 78189
// ComExit ( i ) ;
78178: LD_VAR 0 3
78182: PPUSH
78183: CALL 78069 0 1
78187: GO 78175
78189: POP
78190: POP
// end ;
78191: LD_VAR 0 2
78195: RET
// export function ResetHc ; begin
78196: LD_INT 0
78198: PPUSH
// InitHc ;
78199: CALL_OW 19
// hc_importance := 0 ;
78203: LD_ADDR_OWVAR 32
78207: PUSH
78208: LD_INT 0
78210: ST_TO_ADDR
// end ;
78211: LD_VAR 0 1
78215: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78216: LD_INT 0
78218: PPUSH
78219: PPUSH
78220: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78221: LD_ADDR_VAR 0 6
78225: PUSH
78226: LD_VAR 0 1
78230: PUSH
78231: LD_VAR 0 3
78235: PLUS
78236: PUSH
78237: LD_INT 2
78239: DIV
78240: ST_TO_ADDR
// if _x < 0 then
78241: LD_VAR 0 6
78245: PUSH
78246: LD_INT 0
78248: LESS
78249: IFFALSE 78266
// _x := _x * - 1 ;
78251: LD_ADDR_VAR 0 6
78255: PUSH
78256: LD_VAR 0 6
78260: PUSH
78261: LD_INT 1
78263: NEG
78264: MUL
78265: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78266: LD_ADDR_VAR 0 7
78270: PUSH
78271: LD_VAR 0 2
78275: PUSH
78276: LD_VAR 0 4
78280: PLUS
78281: PUSH
78282: LD_INT 2
78284: DIV
78285: ST_TO_ADDR
// if _y < 0 then
78286: LD_VAR 0 7
78290: PUSH
78291: LD_INT 0
78293: LESS
78294: IFFALSE 78311
// _y := _y * - 1 ;
78296: LD_ADDR_VAR 0 7
78300: PUSH
78301: LD_VAR 0 7
78305: PUSH
78306: LD_INT 1
78308: NEG
78309: MUL
78310: ST_TO_ADDR
// result := [ _x , _y ] ;
78311: LD_ADDR_VAR 0 5
78315: PUSH
78316: LD_VAR 0 6
78320: PUSH
78321: LD_VAR 0 7
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: ST_TO_ADDR
// end ;
78330: LD_VAR 0 5
78334: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78335: LD_INT 0
78337: PPUSH
78338: PPUSH
78339: PPUSH
78340: PPUSH
// task := GetTaskList ( unit ) ;
78341: LD_ADDR_VAR 0 7
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: CALL_OW 437
78355: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78356: LD_VAR 0 7
78360: NOT
78361: PUSH
78362: LD_VAR 0 1
78366: PPUSH
78367: LD_VAR 0 2
78371: PPUSH
78372: CALL_OW 308
78376: NOT
78377: AND
78378: IFFALSE 78382
// exit ;
78380: GO 78500
// if IsInArea ( unit , area ) then
78382: LD_VAR 0 1
78386: PPUSH
78387: LD_VAR 0 2
78391: PPUSH
78392: CALL_OW 308
78396: IFFALSE 78414
// begin ComMoveToArea ( unit , goAway ) ;
78398: LD_VAR 0 1
78402: PPUSH
78403: LD_VAR 0 3
78407: PPUSH
78408: CALL_OW 113
// exit ;
78412: GO 78500
// end ; if task [ 1 ] [ 1 ] <> M then
78414: LD_VAR 0 7
78418: PUSH
78419: LD_INT 1
78421: ARRAY
78422: PUSH
78423: LD_INT 1
78425: ARRAY
78426: PUSH
78427: LD_STRING M
78429: NONEQUAL
78430: IFFALSE 78434
// exit ;
78432: GO 78500
// x := task [ 1 ] [ 2 ] ;
78434: LD_ADDR_VAR 0 5
78438: PUSH
78439: LD_VAR 0 7
78443: PUSH
78444: LD_INT 1
78446: ARRAY
78447: PUSH
78448: LD_INT 2
78450: ARRAY
78451: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78452: LD_ADDR_VAR 0 6
78456: PUSH
78457: LD_VAR 0 7
78461: PUSH
78462: LD_INT 1
78464: ARRAY
78465: PUSH
78466: LD_INT 3
78468: ARRAY
78469: ST_TO_ADDR
// if InArea ( x , y , area ) then
78470: LD_VAR 0 5
78474: PPUSH
78475: LD_VAR 0 6
78479: PPUSH
78480: LD_VAR 0 2
78484: PPUSH
78485: CALL_OW 309
78489: IFFALSE 78500
// ComStop ( unit ) ;
78491: LD_VAR 0 1
78495: PPUSH
78496: CALL_OW 141
// end ;
78500: LD_VAR 0 4
78504: RET
// export function Abs ( value ) ; begin
78505: LD_INT 0
78507: PPUSH
// result := value ;
78508: LD_ADDR_VAR 0 2
78512: PUSH
78513: LD_VAR 0 1
78517: ST_TO_ADDR
// if value < 0 then
78518: LD_VAR 0 1
78522: PUSH
78523: LD_INT 0
78525: LESS
78526: IFFALSE 78543
// result := value * - 1 ;
78528: LD_ADDR_VAR 0 2
78532: PUSH
78533: LD_VAR 0 1
78537: PUSH
78538: LD_INT 1
78540: NEG
78541: MUL
78542: ST_TO_ADDR
// end ;
78543: LD_VAR 0 2
78547: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78548: LD_INT 0
78550: PPUSH
78551: PPUSH
78552: PPUSH
78553: PPUSH
78554: PPUSH
78555: PPUSH
78556: PPUSH
78557: PPUSH
// if not unit or not building then
78558: LD_VAR 0 1
78562: NOT
78563: PUSH
78564: LD_VAR 0 2
78568: NOT
78569: OR
78570: IFFALSE 78574
// exit ;
78572: GO 78800
// x := GetX ( building ) ;
78574: LD_ADDR_VAR 0 4
78578: PUSH
78579: LD_VAR 0 2
78583: PPUSH
78584: CALL_OW 250
78588: ST_TO_ADDR
// y := GetY ( building ) ;
78589: LD_ADDR_VAR 0 6
78593: PUSH
78594: LD_VAR 0 2
78598: PPUSH
78599: CALL_OW 251
78603: ST_TO_ADDR
// d := GetDir ( building ) ;
78604: LD_ADDR_VAR 0 8
78608: PUSH
78609: LD_VAR 0 2
78613: PPUSH
78614: CALL_OW 254
78618: ST_TO_ADDR
// r := 4 ;
78619: LD_ADDR_VAR 0 9
78623: PUSH
78624: LD_INT 4
78626: ST_TO_ADDR
// for i := 1 to 5 do
78627: LD_ADDR_VAR 0 10
78631: PUSH
78632: DOUBLE
78633: LD_INT 1
78635: DEC
78636: ST_TO_ADDR
78637: LD_INT 5
78639: PUSH
78640: FOR_TO
78641: IFFALSE 78798
// begin _x := ShiftX ( x , d , r + i ) ;
78643: LD_ADDR_VAR 0 5
78647: PUSH
78648: LD_VAR 0 4
78652: PPUSH
78653: LD_VAR 0 8
78657: PPUSH
78658: LD_VAR 0 9
78662: PUSH
78663: LD_VAR 0 10
78667: PLUS
78668: PPUSH
78669: CALL_OW 272
78673: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78674: LD_ADDR_VAR 0 7
78678: PUSH
78679: LD_VAR 0 6
78683: PPUSH
78684: LD_VAR 0 8
78688: PPUSH
78689: LD_VAR 0 9
78693: PUSH
78694: LD_VAR 0 10
78698: PLUS
78699: PPUSH
78700: CALL_OW 273
78704: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78705: LD_VAR 0 5
78709: PPUSH
78710: LD_VAR 0 7
78714: PPUSH
78715: CALL_OW 488
78719: PUSH
78720: LD_VAR 0 5
78724: PPUSH
78725: LD_VAR 0 7
78729: PPUSH
78730: CALL_OW 428
78734: PPUSH
78735: CALL_OW 247
78739: PUSH
78740: LD_INT 3
78742: PUSH
78743: LD_INT 2
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: IN
78750: NOT
78751: AND
78752: IFFALSE 78796
// begin ComMoveXY ( unit , _x , _y ) ;
78754: LD_VAR 0 1
78758: PPUSH
78759: LD_VAR 0 5
78763: PPUSH
78764: LD_VAR 0 7
78768: PPUSH
78769: CALL_OW 111
// result := [ _x , _y ] ;
78773: LD_ADDR_VAR 0 3
78777: PUSH
78778: LD_VAR 0 5
78782: PUSH
78783: LD_VAR 0 7
78787: PUSH
78788: EMPTY
78789: LIST
78790: LIST
78791: ST_TO_ADDR
// exit ;
78792: POP
78793: POP
78794: GO 78800
// end ; end ;
78796: GO 78640
78798: POP
78799: POP
// end ;
78800: LD_VAR 0 3
78804: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78805: LD_INT 0
78807: PPUSH
78808: PPUSH
78809: PPUSH
// result := 0 ;
78810: LD_ADDR_VAR 0 3
78814: PUSH
78815: LD_INT 0
78817: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78818: LD_VAR 0 1
78822: PUSH
78823: LD_INT 0
78825: LESS
78826: PUSH
78827: LD_VAR 0 1
78831: PUSH
78832: LD_INT 8
78834: GREATER
78835: OR
78836: PUSH
78837: LD_VAR 0 2
78841: PUSH
78842: LD_INT 0
78844: LESS
78845: OR
78846: PUSH
78847: LD_VAR 0 2
78851: PUSH
78852: LD_INT 8
78854: GREATER
78855: OR
78856: IFFALSE 78860
// exit ;
78858: GO 78935
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78860: LD_ADDR_VAR 0 4
78864: PUSH
78865: LD_INT 22
78867: PUSH
78868: LD_VAR 0 2
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: PPUSH
78877: CALL_OW 69
78881: PUSH
78882: FOR_IN
78883: IFFALSE 78933
// begin un := UnitShoot ( i ) ;
78885: LD_ADDR_VAR 0 5
78889: PUSH
78890: LD_VAR 0 4
78894: PPUSH
78895: CALL_OW 504
78899: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78900: LD_VAR 0 5
78904: PPUSH
78905: CALL_OW 255
78909: PUSH
78910: LD_VAR 0 1
78914: EQUAL
78915: IFFALSE 78931
// begin result := un ;
78917: LD_ADDR_VAR 0 3
78921: PUSH
78922: LD_VAR 0 5
78926: ST_TO_ADDR
// exit ;
78927: POP
78928: POP
78929: GO 78935
// end ; end ;
78931: GO 78882
78933: POP
78934: POP
// end ;
78935: LD_VAR 0 3
78939: RET
// export function GetCargoBay ( units ) ; begin
78940: LD_INT 0
78942: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78943: LD_ADDR_VAR 0 2
78947: PUSH
78948: LD_VAR 0 1
78952: PPUSH
78953: LD_INT 2
78955: PUSH
78956: LD_INT 34
78958: PUSH
78959: LD_INT 12
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PUSH
78966: LD_INT 34
78968: PUSH
78969: LD_INT 51
78971: PUSH
78972: EMPTY
78973: LIST
78974: LIST
78975: PUSH
78976: LD_INT 34
78978: PUSH
78979: LD_INT 32
78981: PUSH
78982: EMPTY
78983: LIST
78984: LIST
78985: PUSH
78986: LD_INT 34
78988: PUSH
78989: LD_INT 89
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: PPUSH
79003: CALL_OW 72
79007: ST_TO_ADDR
// end ;
79008: LD_VAR 0 2
79012: RET
// export function Negate ( value ) ; begin
79013: LD_INT 0
79015: PPUSH
// result := not value ;
79016: LD_ADDR_VAR 0 2
79020: PUSH
79021: LD_VAR 0 1
79025: NOT
79026: ST_TO_ADDR
// end ;
79027: LD_VAR 0 2
79031: RET
// export function Inc ( value ) ; begin
79032: LD_INT 0
79034: PPUSH
// result := value + 1 ;
79035: LD_ADDR_VAR 0 2
79039: PUSH
79040: LD_VAR 0 1
79044: PUSH
79045: LD_INT 1
79047: PLUS
79048: ST_TO_ADDR
// end ;
79049: LD_VAR 0 2
79053: RET
// export function Dec ( value ) ; begin
79054: LD_INT 0
79056: PPUSH
// result := value - 1 ;
79057: LD_ADDR_VAR 0 2
79061: PUSH
79062: LD_VAR 0 1
79066: PUSH
79067: LD_INT 1
79069: MINUS
79070: ST_TO_ADDR
// end ;
79071: LD_VAR 0 2
79075: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79076: LD_INT 0
79078: PPUSH
79079: PPUSH
79080: PPUSH
79081: PPUSH
79082: PPUSH
79083: PPUSH
79084: PPUSH
79085: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79086: LD_VAR 0 1
79090: PPUSH
79091: LD_VAR 0 2
79095: PPUSH
79096: CALL_OW 488
79100: NOT
79101: PUSH
79102: LD_VAR 0 3
79106: PPUSH
79107: LD_VAR 0 4
79111: PPUSH
79112: CALL_OW 488
79116: NOT
79117: OR
79118: IFFALSE 79131
// begin result := - 1 ;
79120: LD_ADDR_VAR 0 5
79124: PUSH
79125: LD_INT 1
79127: NEG
79128: ST_TO_ADDR
// exit ;
79129: GO 79366
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79131: LD_ADDR_VAR 0 12
79135: PUSH
79136: LD_VAR 0 1
79140: PPUSH
79141: LD_VAR 0 2
79145: PPUSH
79146: LD_VAR 0 3
79150: PPUSH
79151: LD_VAR 0 4
79155: PPUSH
79156: CALL 78216 0 4
79160: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79161: LD_ADDR_VAR 0 11
79165: PUSH
79166: LD_VAR 0 1
79170: PPUSH
79171: LD_VAR 0 2
79175: PPUSH
79176: LD_VAR 0 12
79180: PUSH
79181: LD_INT 1
79183: ARRAY
79184: PPUSH
79185: LD_VAR 0 12
79189: PUSH
79190: LD_INT 2
79192: ARRAY
79193: PPUSH
79194: CALL_OW 298
79198: ST_TO_ADDR
// distance := 9999 ;
79199: LD_ADDR_VAR 0 10
79203: PUSH
79204: LD_INT 9999
79206: ST_TO_ADDR
// for i := 0 to 5 do
79207: LD_ADDR_VAR 0 6
79211: PUSH
79212: DOUBLE
79213: LD_INT 0
79215: DEC
79216: ST_TO_ADDR
79217: LD_INT 5
79219: PUSH
79220: FOR_TO
79221: IFFALSE 79364
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79223: LD_ADDR_VAR 0 7
79227: PUSH
79228: LD_VAR 0 1
79232: PPUSH
79233: LD_VAR 0 6
79237: PPUSH
79238: LD_VAR 0 11
79242: PPUSH
79243: CALL_OW 272
79247: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79248: LD_ADDR_VAR 0 8
79252: PUSH
79253: LD_VAR 0 2
79257: PPUSH
79258: LD_VAR 0 6
79262: PPUSH
79263: LD_VAR 0 11
79267: PPUSH
79268: CALL_OW 273
79272: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79273: LD_VAR 0 7
79277: PPUSH
79278: LD_VAR 0 8
79282: PPUSH
79283: CALL_OW 488
79287: NOT
79288: IFFALSE 79292
// continue ;
79290: GO 79220
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79292: LD_ADDR_VAR 0 9
79296: PUSH
79297: LD_VAR 0 12
79301: PUSH
79302: LD_INT 1
79304: ARRAY
79305: PPUSH
79306: LD_VAR 0 12
79310: PUSH
79311: LD_INT 2
79313: ARRAY
79314: PPUSH
79315: LD_VAR 0 7
79319: PPUSH
79320: LD_VAR 0 8
79324: PPUSH
79325: CALL_OW 298
79329: ST_TO_ADDR
// if tmp < distance then
79330: LD_VAR 0 9
79334: PUSH
79335: LD_VAR 0 10
79339: LESS
79340: IFFALSE 79362
// begin result := i ;
79342: LD_ADDR_VAR 0 5
79346: PUSH
79347: LD_VAR 0 6
79351: ST_TO_ADDR
// distance := tmp ;
79352: LD_ADDR_VAR 0 10
79356: PUSH
79357: LD_VAR 0 9
79361: ST_TO_ADDR
// end ; end ;
79362: GO 79220
79364: POP
79365: POP
// end ;
79366: LD_VAR 0 5
79370: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79371: LD_INT 0
79373: PPUSH
79374: PPUSH
// if not driver or not IsInUnit ( driver ) then
79375: LD_VAR 0 1
79379: NOT
79380: PUSH
79381: LD_VAR 0 1
79385: PPUSH
79386: CALL_OW 310
79390: NOT
79391: OR
79392: IFFALSE 79396
// exit ;
79394: GO 79486
// vehicle := IsInUnit ( driver ) ;
79396: LD_ADDR_VAR 0 3
79400: PUSH
79401: LD_VAR 0 1
79405: PPUSH
79406: CALL_OW 310
79410: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79411: LD_VAR 0 1
79415: PPUSH
79416: LD_STRING \
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: LD_INT 0
79427: PUSH
79428: LD_INT 0
79430: PUSH
79431: LD_INT 0
79433: PUSH
79434: LD_INT 0
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: LIST
79441: LIST
79442: LIST
79443: LIST
79444: LIST
79445: PUSH
79446: LD_STRING E
79448: PUSH
79449: LD_INT 0
79451: PUSH
79452: LD_INT 0
79454: PUSH
79455: LD_VAR 0 3
79459: PUSH
79460: LD_INT 0
79462: PUSH
79463: LD_INT 0
79465: PUSH
79466: LD_INT 0
79468: PUSH
79469: EMPTY
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: PPUSH
79482: CALL_OW 446
// end ;
79486: LD_VAR 0 2
79490: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79491: LD_INT 0
79493: PPUSH
79494: PPUSH
// if not driver or not IsInUnit ( driver ) then
79495: LD_VAR 0 1
79499: NOT
79500: PUSH
79501: LD_VAR 0 1
79505: PPUSH
79506: CALL_OW 310
79510: NOT
79511: OR
79512: IFFALSE 79516
// exit ;
79514: GO 79606
// vehicle := IsInUnit ( driver ) ;
79516: LD_ADDR_VAR 0 3
79520: PUSH
79521: LD_VAR 0 1
79525: PPUSH
79526: CALL_OW 310
79530: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79531: LD_VAR 0 1
79535: PPUSH
79536: LD_STRING \
79538: PUSH
79539: LD_INT 0
79541: PUSH
79542: LD_INT 0
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: LD_INT 0
79550: PUSH
79551: LD_INT 0
79553: PUSH
79554: LD_INT 0
79556: PUSH
79557: EMPTY
79558: LIST
79559: LIST
79560: LIST
79561: LIST
79562: LIST
79563: LIST
79564: LIST
79565: PUSH
79566: LD_STRING E
79568: PUSH
79569: LD_INT 0
79571: PUSH
79572: LD_INT 0
79574: PUSH
79575: LD_VAR 0 3
79579: PUSH
79580: LD_INT 0
79582: PUSH
79583: LD_INT 0
79585: PUSH
79586: LD_INT 0
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: LIST
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PPUSH
79602: CALL_OW 447
// end ;
79606: LD_VAR 0 2
79610: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79611: LD_INT 0
79613: PPUSH
79614: PPUSH
79615: PPUSH
// tmp := [ ] ;
79616: LD_ADDR_VAR 0 5
79620: PUSH
79621: EMPTY
79622: ST_TO_ADDR
// for i in units do
79623: LD_ADDR_VAR 0 4
79627: PUSH
79628: LD_VAR 0 1
79632: PUSH
79633: FOR_IN
79634: IFFALSE 79672
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79636: LD_ADDR_VAR 0 5
79640: PUSH
79641: LD_VAR 0 5
79645: PPUSH
79646: LD_VAR 0 5
79650: PUSH
79651: LD_INT 1
79653: PLUS
79654: PPUSH
79655: LD_VAR 0 4
79659: PPUSH
79660: CALL_OW 256
79664: PPUSH
79665: CALL_OW 2
79669: ST_TO_ADDR
79670: GO 79633
79672: POP
79673: POP
// if not tmp then
79674: LD_VAR 0 5
79678: NOT
79679: IFFALSE 79683
// exit ;
79681: GO 79731
// if asc then
79683: LD_VAR 0 2
79687: IFFALSE 79711
// result := SortListByListAsc ( units , tmp ) else
79689: LD_ADDR_VAR 0 3
79693: PUSH
79694: LD_VAR 0 1
79698: PPUSH
79699: LD_VAR 0 5
79703: PPUSH
79704: CALL_OW 76
79708: ST_TO_ADDR
79709: GO 79731
// result := SortListByListDesc ( units , tmp ) ;
79711: LD_ADDR_VAR 0 3
79715: PUSH
79716: LD_VAR 0 1
79720: PPUSH
79721: LD_VAR 0 5
79725: PPUSH
79726: CALL_OW 77
79730: ST_TO_ADDR
// end ;
79731: LD_VAR 0 3
79735: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79736: LD_INT 0
79738: PPUSH
79739: PPUSH
// task := GetTaskList ( mech ) ;
79740: LD_ADDR_VAR 0 4
79744: PUSH
79745: LD_VAR 0 1
79749: PPUSH
79750: CALL_OW 437
79754: ST_TO_ADDR
// if not task then
79755: LD_VAR 0 4
79759: NOT
79760: IFFALSE 79764
// exit ;
79762: GO 79806
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79764: LD_ADDR_VAR 0 3
79768: PUSH
79769: LD_VAR 0 4
79773: PUSH
79774: LD_INT 1
79776: ARRAY
79777: PUSH
79778: LD_INT 1
79780: ARRAY
79781: PUSH
79782: LD_STRING r
79784: EQUAL
79785: PUSH
79786: LD_VAR 0 4
79790: PUSH
79791: LD_INT 1
79793: ARRAY
79794: PUSH
79795: LD_INT 4
79797: ARRAY
79798: PUSH
79799: LD_VAR 0 2
79803: EQUAL
79804: AND
79805: ST_TO_ADDR
// end ;
79806: LD_VAR 0 3
79810: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79811: LD_INT 0
79813: PPUSH
// SetDir ( unit , d ) ;
79814: LD_VAR 0 1
79818: PPUSH
79819: LD_VAR 0 4
79823: PPUSH
79824: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79828: LD_VAR 0 1
79832: PPUSH
79833: LD_VAR 0 2
79837: PPUSH
79838: LD_VAR 0 3
79842: PPUSH
79843: LD_VAR 0 5
79847: PPUSH
79848: CALL_OW 48
// end ;
79852: LD_VAR 0 6
79856: RET
// export function ToNaturalNumber ( number ) ; begin
79857: LD_INT 0
79859: PPUSH
// result := number div 1 ;
79860: LD_ADDR_VAR 0 2
79864: PUSH
79865: LD_VAR 0 1
79869: PUSH
79870: LD_INT 1
79872: DIV
79873: ST_TO_ADDR
// if number < 0 then
79874: LD_VAR 0 1
79878: PUSH
79879: LD_INT 0
79881: LESS
79882: IFFALSE 79892
// result := 0 ;
79884: LD_ADDR_VAR 0 2
79888: PUSH
79889: LD_INT 0
79891: ST_TO_ADDR
// end ;
79892: LD_VAR 0 2
79896: RET
// export function SortByClass ( units , class ) ; var un ; begin
79897: LD_INT 0
79899: PPUSH
79900: PPUSH
// if not units or not class then
79901: LD_VAR 0 1
79905: NOT
79906: PUSH
79907: LD_VAR 0 2
79911: NOT
79912: OR
79913: IFFALSE 79917
// exit ;
79915: GO 80012
// result := [ ] ;
79917: LD_ADDR_VAR 0 3
79921: PUSH
79922: EMPTY
79923: ST_TO_ADDR
// for un in units do
79924: LD_ADDR_VAR 0 4
79928: PUSH
79929: LD_VAR 0 1
79933: PUSH
79934: FOR_IN
79935: IFFALSE 80010
// if GetClass ( un ) = class then
79937: LD_VAR 0 4
79941: PPUSH
79942: CALL_OW 257
79946: PUSH
79947: LD_VAR 0 2
79951: EQUAL
79952: IFFALSE 79979
// result := Insert ( result , 1 , un ) else
79954: LD_ADDR_VAR 0 3
79958: PUSH
79959: LD_VAR 0 3
79963: PPUSH
79964: LD_INT 1
79966: PPUSH
79967: LD_VAR 0 4
79971: PPUSH
79972: CALL_OW 2
79976: ST_TO_ADDR
79977: GO 80008
// result := Replace ( result , result + 1 , un ) ;
79979: LD_ADDR_VAR 0 3
79983: PUSH
79984: LD_VAR 0 3
79988: PPUSH
79989: LD_VAR 0 3
79993: PUSH
79994: LD_INT 1
79996: PLUS
79997: PPUSH
79998: LD_VAR 0 4
80002: PPUSH
80003: CALL_OW 1
80007: ST_TO_ADDR
80008: GO 79934
80010: POP
80011: POP
// end ;
80012: LD_VAR 0 3
80016: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80017: LD_INT 0
80019: PPUSH
80020: PPUSH
80021: PPUSH
80022: PPUSH
80023: PPUSH
80024: PPUSH
80025: PPUSH
// result := [ ] ;
80026: LD_ADDR_VAR 0 4
80030: PUSH
80031: EMPTY
80032: ST_TO_ADDR
// if x - r < 0 then
80033: LD_VAR 0 1
80037: PUSH
80038: LD_VAR 0 3
80042: MINUS
80043: PUSH
80044: LD_INT 0
80046: LESS
80047: IFFALSE 80059
// min_x := 0 else
80049: LD_ADDR_VAR 0 8
80053: PUSH
80054: LD_INT 0
80056: ST_TO_ADDR
80057: GO 80075
// min_x := x - r ;
80059: LD_ADDR_VAR 0 8
80063: PUSH
80064: LD_VAR 0 1
80068: PUSH
80069: LD_VAR 0 3
80073: MINUS
80074: ST_TO_ADDR
// if y - r < 0 then
80075: LD_VAR 0 2
80079: PUSH
80080: LD_VAR 0 3
80084: MINUS
80085: PUSH
80086: LD_INT 0
80088: LESS
80089: IFFALSE 80101
// min_y := 0 else
80091: LD_ADDR_VAR 0 7
80095: PUSH
80096: LD_INT 0
80098: ST_TO_ADDR
80099: GO 80117
// min_y := y - r ;
80101: LD_ADDR_VAR 0 7
80105: PUSH
80106: LD_VAR 0 2
80110: PUSH
80111: LD_VAR 0 3
80115: MINUS
80116: ST_TO_ADDR
// max_x := x + r ;
80117: LD_ADDR_VAR 0 9
80121: PUSH
80122: LD_VAR 0 1
80126: PUSH
80127: LD_VAR 0 3
80131: PLUS
80132: ST_TO_ADDR
// max_y := y + r ;
80133: LD_ADDR_VAR 0 10
80137: PUSH
80138: LD_VAR 0 2
80142: PUSH
80143: LD_VAR 0 3
80147: PLUS
80148: ST_TO_ADDR
// for _x = min_x to max_x do
80149: LD_ADDR_VAR 0 5
80153: PUSH
80154: DOUBLE
80155: LD_VAR 0 8
80159: DEC
80160: ST_TO_ADDR
80161: LD_VAR 0 9
80165: PUSH
80166: FOR_TO
80167: IFFALSE 80268
// for _y = min_y to max_y do
80169: LD_ADDR_VAR 0 6
80173: PUSH
80174: DOUBLE
80175: LD_VAR 0 7
80179: DEC
80180: ST_TO_ADDR
80181: LD_VAR 0 10
80185: PUSH
80186: FOR_TO
80187: IFFALSE 80264
// begin if not ValidHex ( _x , _y ) then
80189: LD_VAR 0 5
80193: PPUSH
80194: LD_VAR 0 6
80198: PPUSH
80199: CALL_OW 488
80203: NOT
80204: IFFALSE 80208
// continue ;
80206: GO 80186
// if GetResourceTypeXY ( _x , _y ) then
80208: LD_VAR 0 5
80212: PPUSH
80213: LD_VAR 0 6
80217: PPUSH
80218: CALL_OW 283
80222: IFFALSE 80262
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80224: LD_ADDR_VAR 0 4
80228: PUSH
80229: LD_VAR 0 4
80233: PPUSH
80234: LD_VAR 0 4
80238: PUSH
80239: LD_INT 1
80241: PLUS
80242: PPUSH
80243: LD_VAR 0 5
80247: PUSH
80248: LD_VAR 0 6
80252: PUSH
80253: EMPTY
80254: LIST
80255: LIST
80256: PPUSH
80257: CALL_OW 1
80261: ST_TO_ADDR
// end ;
80262: GO 80186
80264: POP
80265: POP
80266: GO 80166
80268: POP
80269: POP
// end ;
80270: LD_VAR 0 4
80274: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80275: LD_INT 0
80277: PPUSH
80278: PPUSH
80279: PPUSH
80280: PPUSH
80281: PPUSH
80282: PPUSH
80283: PPUSH
80284: PPUSH
// if not units then
80285: LD_VAR 0 1
80289: NOT
80290: IFFALSE 80294
// exit ;
80292: GO 80818
// result := UnitFilter ( units , [ f_ok ] ) ;
80294: LD_ADDR_VAR 0 3
80298: PUSH
80299: LD_VAR 0 1
80303: PPUSH
80304: LD_INT 50
80306: PUSH
80307: EMPTY
80308: LIST
80309: PPUSH
80310: CALL_OW 72
80314: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80315: LD_ADDR_VAR 0 8
80319: PUSH
80320: LD_VAR 0 1
80324: PUSH
80325: LD_INT 1
80327: ARRAY
80328: PPUSH
80329: CALL_OW 255
80333: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80334: LD_ADDR_VAR 0 10
80338: PUSH
80339: LD_INT 29
80341: PUSH
80342: LD_INT 91
80344: PUSH
80345: LD_INT 49
80347: PUSH
80348: EMPTY
80349: LIST
80350: LIST
80351: LIST
80352: ST_TO_ADDR
// if not result then
80353: LD_VAR 0 3
80357: NOT
80358: IFFALSE 80362
// exit ;
80360: GO 80818
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80362: LD_ADDR_VAR 0 5
80366: PUSH
80367: LD_INT 81
80369: PUSH
80370: LD_VAR 0 8
80374: PUSH
80375: EMPTY
80376: LIST
80377: LIST
80378: PPUSH
80379: CALL_OW 69
80383: ST_TO_ADDR
// for i in result do
80384: LD_ADDR_VAR 0 4
80388: PUSH
80389: LD_VAR 0 3
80393: PUSH
80394: FOR_IN
80395: IFFALSE 80816
// begin tag := GetTag ( i ) + 1 ;
80397: LD_ADDR_VAR 0 9
80401: PUSH
80402: LD_VAR 0 4
80406: PPUSH
80407: CALL_OW 110
80411: PUSH
80412: LD_INT 1
80414: PLUS
80415: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80416: LD_ADDR_VAR 0 7
80420: PUSH
80421: LD_VAR 0 4
80425: PPUSH
80426: CALL_OW 250
80430: PPUSH
80431: LD_VAR 0 4
80435: PPUSH
80436: CALL_OW 251
80440: PPUSH
80441: LD_INT 6
80443: PPUSH
80444: CALL 80017 0 3
80448: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80449: LD_VAR 0 4
80453: PPUSH
80454: CALL_OW 247
80458: PUSH
80459: LD_INT 2
80461: EQUAL
80462: PUSH
80463: LD_VAR 0 7
80467: AND
80468: PUSH
80469: LD_VAR 0 4
80473: PPUSH
80474: CALL_OW 264
80478: PUSH
80479: LD_VAR 0 10
80483: IN
80484: NOT
80485: AND
80486: IFFALSE 80525
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80488: LD_VAR 0 4
80492: PPUSH
80493: LD_VAR 0 7
80497: PUSH
80498: LD_INT 1
80500: ARRAY
80501: PUSH
80502: LD_INT 1
80504: ARRAY
80505: PPUSH
80506: LD_VAR 0 7
80510: PUSH
80511: LD_INT 1
80513: ARRAY
80514: PUSH
80515: LD_INT 2
80517: ARRAY
80518: PPUSH
80519: CALL_OW 116
80523: GO 80814
// if path > tag then
80525: LD_VAR 0 2
80529: PUSH
80530: LD_VAR 0 9
80534: GREATER
80535: IFFALSE 80743
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80537: LD_ADDR_VAR 0 6
80541: PUSH
80542: LD_VAR 0 5
80546: PPUSH
80547: LD_INT 91
80549: PUSH
80550: LD_VAR 0 4
80554: PUSH
80555: LD_INT 8
80557: PUSH
80558: EMPTY
80559: LIST
80560: LIST
80561: LIST
80562: PPUSH
80563: CALL_OW 72
80567: ST_TO_ADDR
// if nearEnemy then
80568: LD_VAR 0 6
80572: IFFALSE 80641
// begin if GetWeapon ( i ) = ru_time_lapser then
80574: LD_VAR 0 4
80578: PPUSH
80579: CALL_OW 264
80583: PUSH
80584: LD_INT 49
80586: EQUAL
80587: IFFALSE 80615
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80589: LD_VAR 0 4
80593: PPUSH
80594: LD_VAR 0 6
80598: PPUSH
80599: LD_VAR 0 4
80603: PPUSH
80604: CALL_OW 74
80608: PPUSH
80609: CALL_OW 112
80613: GO 80639
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80615: LD_VAR 0 4
80619: PPUSH
80620: LD_VAR 0 6
80624: PPUSH
80625: LD_VAR 0 4
80629: PPUSH
80630: CALL_OW 74
80634: PPUSH
80635: CALL 81743 0 2
// end else
80639: GO 80741
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80641: LD_VAR 0 4
80645: PPUSH
80646: LD_VAR 0 2
80650: PUSH
80651: LD_VAR 0 9
80655: ARRAY
80656: PUSH
80657: LD_INT 1
80659: ARRAY
80660: PPUSH
80661: LD_VAR 0 2
80665: PUSH
80666: LD_VAR 0 9
80670: ARRAY
80671: PUSH
80672: LD_INT 2
80674: ARRAY
80675: PPUSH
80676: CALL_OW 297
80680: PUSH
80681: LD_INT 6
80683: GREATER
80684: IFFALSE 80727
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80686: LD_VAR 0 4
80690: PPUSH
80691: LD_VAR 0 2
80695: PUSH
80696: LD_VAR 0 9
80700: ARRAY
80701: PUSH
80702: LD_INT 1
80704: ARRAY
80705: PPUSH
80706: LD_VAR 0 2
80710: PUSH
80711: LD_VAR 0 9
80715: ARRAY
80716: PUSH
80717: LD_INT 2
80719: ARRAY
80720: PPUSH
80721: CALL_OW 114
80725: GO 80741
// SetTag ( i , tag ) ;
80727: LD_VAR 0 4
80731: PPUSH
80732: LD_VAR 0 9
80736: PPUSH
80737: CALL_OW 109
// end else
80741: GO 80814
// if enemy then
80743: LD_VAR 0 5
80747: IFFALSE 80814
// begin if GetWeapon ( i ) = ru_time_lapser then
80749: LD_VAR 0 4
80753: PPUSH
80754: CALL_OW 264
80758: PUSH
80759: LD_INT 49
80761: EQUAL
80762: IFFALSE 80790
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80764: LD_VAR 0 4
80768: PPUSH
80769: LD_VAR 0 5
80773: PPUSH
80774: LD_VAR 0 4
80778: PPUSH
80779: CALL_OW 74
80783: PPUSH
80784: CALL_OW 112
80788: GO 80814
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80790: LD_VAR 0 4
80794: PPUSH
80795: LD_VAR 0 5
80799: PPUSH
80800: LD_VAR 0 4
80804: PPUSH
80805: CALL_OW 74
80809: PPUSH
80810: CALL 81743 0 2
// end ; end ;
80814: GO 80394
80816: POP
80817: POP
// end ;
80818: LD_VAR 0 3
80822: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80823: LD_INT 0
80825: PPUSH
80826: PPUSH
80827: PPUSH
// if not unit or IsInUnit ( unit ) then
80828: LD_VAR 0 1
80832: NOT
80833: PUSH
80834: LD_VAR 0 1
80838: PPUSH
80839: CALL_OW 310
80843: OR
80844: IFFALSE 80848
// exit ;
80846: GO 80939
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80848: LD_ADDR_VAR 0 4
80852: PUSH
80853: LD_VAR 0 1
80857: PPUSH
80858: CALL_OW 250
80862: PPUSH
80863: LD_VAR 0 2
80867: PPUSH
80868: LD_INT 1
80870: PPUSH
80871: CALL_OW 272
80875: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80876: LD_ADDR_VAR 0 5
80880: PUSH
80881: LD_VAR 0 1
80885: PPUSH
80886: CALL_OW 251
80890: PPUSH
80891: LD_VAR 0 2
80895: PPUSH
80896: LD_INT 1
80898: PPUSH
80899: CALL_OW 273
80903: ST_TO_ADDR
// if ValidHex ( x , y ) then
80904: LD_VAR 0 4
80908: PPUSH
80909: LD_VAR 0 5
80913: PPUSH
80914: CALL_OW 488
80918: IFFALSE 80939
// ComTurnXY ( unit , x , y ) ;
80920: LD_VAR 0 1
80924: PPUSH
80925: LD_VAR 0 4
80929: PPUSH
80930: LD_VAR 0 5
80934: PPUSH
80935: CALL_OW 118
// end ;
80939: LD_VAR 0 3
80943: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80944: LD_INT 0
80946: PPUSH
80947: PPUSH
// result := false ;
80948: LD_ADDR_VAR 0 3
80952: PUSH
80953: LD_INT 0
80955: ST_TO_ADDR
// if not units then
80956: LD_VAR 0 2
80960: NOT
80961: IFFALSE 80965
// exit ;
80963: GO 81010
// for i in units do
80965: LD_ADDR_VAR 0 4
80969: PUSH
80970: LD_VAR 0 2
80974: PUSH
80975: FOR_IN
80976: IFFALSE 81008
// if See ( side , i ) then
80978: LD_VAR 0 1
80982: PPUSH
80983: LD_VAR 0 4
80987: PPUSH
80988: CALL_OW 292
80992: IFFALSE 81006
// begin result := true ;
80994: LD_ADDR_VAR 0 3
80998: PUSH
80999: LD_INT 1
81001: ST_TO_ADDR
// exit ;
81002: POP
81003: POP
81004: GO 81010
// end ;
81006: GO 80975
81008: POP
81009: POP
// end ;
81010: LD_VAR 0 3
81014: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81015: LD_INT 0
81017: PPUSH
81018: PPUSH
81019: PPUSH
81020: PPUSH
// if not unit or not points then
81021: LD_VAR 0 1
81025: NOT
81026: PUSH
81027: LD_VAR 0 2
81031: NOT
81032: OR
81033: IFFALSE 81037
// exit ;
81035: GO 81127
// dist := 99999 ;
81037: LD_ADDR_VAR 0 5
81041: PUSH
81042: LD_INT 99999
81044: ST_TO_ADDR
// for i in points do
81045: LD_ADDR_VAR 0 4
81049: PUSH
81050: LD_VAR 0 2
81054: PUSH
81055: FOR_IN
81056: IFFALSE 81125
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81058: LD_ADDR_VAR 0 6
81062: PUSH
81063: LD_VAR 0 1
81067: PPUSH
81068: LD_VAR 0 4
81072: PUSH
81073: LD_INT 1
81075: ARRAY
81076: PPUSH
81077: LD_VAR 0 4
81081: PUSH
81082: LD_INT 2
81084: ARRAY
81085: PPUSH
81086: CALL_OW 297
81090: ST_TO_ADDR
// if tmpDist < dist then
81091: LD_VAR 0 6
81095: PUSH
81096: LD_VAR 0 5
81100: LESS
81101: IFFALSE 81123
// begin result := i ;
81103: LD_ADDR_VAR 0 3
81107: PUSH
81108: LD_VAR 0 4
81112: ST_TO_ADDR
// dist := tmpDist ;
81113: LD_ADDR_VAR 0 5
81117: PUSH
81118: LD_VAR 0 6
81122: ST_TO_ADDR
// end ; end ;
81123: GO 81055
81125: POP
81126: POP
// end ;
81127: LD_VAR 0 3
81131: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81132: LD_INT 0
81134: PPUSH
// uc_side := side ;
81135: LD_ADDR_OWVAR 20
81139: PUSH
81140: LD_VAR 0 1
81144: ST_TO_ADDR
// uc_nation := 3 ;
81145: LD_ADDR_OWVAR 21
81149: PUSH
81150: LD_INT 3
81152: ST_TO_ADDR
// vc_chassis := 25 ;
81153: LD_ADDR_OWVAR 37
81157: PUSH
81158: LD_INT 25
81160: ST_TO_ADDR
// vc_engine := engine_siberite ;
81161: LD_ADDR_OWVAR 39
81165: PUSH
81166: LD_INT 3
81168: ST_TO_ADDR
// vc_control := control_computer ;
81169: LD_ADDR_OWVAR 38
81173: PUSH
81174: LD_INT 3
81176: ST_TO_ADDR
// vc_weapon := 59 ;
81177: LD_ADDR_OWVAR 40
81181: PUSH
81182: LD_INT 59
81184: ST_TO_ADDR
// result := CreateVehicle ;
81185: LD_ADDR_VAR 0 5
81189: PUSH
81190: CALL_OW 45
81194: ST_TO_ADDR
// SetDir ( result , d ) ;
81195: LD_VAR 0 5
81199: PPUSH
81200: LD_VAR 0 4
81204: PPUSH
81205: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81209: LD_VAR 0 5
81213: PPUSH
81214: LD_VAR 0 2
81218: PPUSH
81219: LD_VAR 0 3
81223: PPUSH
81224: LD_INT 0
81226: PPUSH
81227: CALL_OW 48
// end ;
81231: LD_VAR 0 5
81235: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81236: LD_INT 0
81238: PPUSH
81239: PPUSH
81240: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81241: LD_ADDR_VAR 0 2
81245: PUSH
81246: LD_INT 0
81248: PUSH
81249: LD_INT 0
81251: PUSH
81252: LD_INT 0
81254: PUSH
81255: LD_INT 0
81257: PUSH
81258: EMPTY
81259: LIST
81260: LIST
81261: LIST
81262: LIST
81263: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81264: LD_VAR 0 1
81268: NOT
81269: PUSH
81270: LD_VAR 0 1
81274: PPUSH
81275: CALL_OW 264
81279: PUSH
81280: LD_INT 12
81282: PUSH
81283: LD_INT 51
81285: PUSH
81286: LD_INT 32
81288: PUSH
81289: LD_INT 89
81291: PUSH
81292: EMPTY
81293: LIST
81294: LIST
81295: LIST
81296: LIST
81297: IN
81298: NOT
81299: OR
81300: IFFALSE 81304
// exit ;
81302: GO 81402
// for i := 1 to 3 do
81304: LD_ADDR_VAR 0 3
81308: PUSH
81309: DOUBLE
81310: LD_INT 1
81312: DEC
81313: ST_TO_ADDR
81314: LD_INT 3
81316: PUSH
81317: FOR_TO
81318: IFFALSE 81400
// begin tmp := GetCargo ( cargo , i ) ;
81320: LD_ADDR_VAR 0 4
81324: PUSH
81325: LD_VAR 0 1
81329: PPUSH
81330: LD_VAR 0 3
81334: PPUSH
81335: CALL_OW 289
81339: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81340: LD_ADDR_VAR 0 2
81344: PUSH
81345: LD_VAR 0 2
81349: PPUSH
81350: LD_VAR 0 3
81354: PPUSH
81355: LD_VAR 0 4
81359: PPUSH
81360: CALL_OW 1
81364: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81365: LD_ADDR_VAR 0 2
81369: PUSH
81370: LD_VAR 0 2
81374: PPUSH
81375: LD_INT 4
81377: PPUSH
81378: LD_VAR 0 2
81382: PUSH
81383: LD_INT 4
81385: ARRAY
81386: PUSH
81387: LD_VAR 0 4
81391: PLUS
81392: PPUSH
81393: CALL_OW 1
81397: ST_TO_ADDR
// end ;
81398: GO 81317
81400: POP
81401: POP
// end ;
81402: LD_VAR 0 2
81406: RET
// export function Length ( array ) ; begin
81407: LD_INT 0
81409: PPUSH
// result := array + 0 ;
81410: LD_ADDR_VAR 0 2
81414: PUSH
81415: LD_VAR 0 1
81419: PUSH
81420: LD_INT 0
81422: PLUS
81423: ST_TO_ADDR
// end ;
81424: LD_VAR 0 2
81428: RET
// export function PrepareArray ( array ) ; begin
81429: LD_INT 0
81431: PPUSH
// result := array diff 0 ;
81432: LD_ADDR_VAR 0 2
81436: PUSH
81437: LD_VAR 0 1
81441: PUSH
81442: LD_INT 0
81444: DIFF
81445: ST_TO_ADDR
// if not result [ 1 ] then
81446: LD_VAR 0 2
81450: PUSH
81451: LD_INT 1
81453: ARRAY
81454: NOT
81455: IFFALSE 81475
// result := Delete ( result , 1 ) ;
81457: LD_ADDR_VAR 0 2
81461: PUSH
81462: LD_VAR 0 2
81466: PPUSH
81467: LD_INT 1
81469: PPUSH
81470: CALL_OW 3
81474: ST_TO_ADDR
// end ;
81475: LD_VAR 0 2
81479: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81480: LD_INT 0
81482: PPUSH
81483: PPUSH
81484: PPUSH
81485: PPUSH
// sibRocketRange := 25 ;
81486: LD_ADDR_VAR 0 6
81490: PUSH
81491: LD_INT 25
81493: ST_TO_ADDR
// result := false ;
81494: LD_ADDR_VAR 0 4
81498: PUSH
81499: LD_INT 0
81501: ST_TO_ADDR
// for i := 0 to 5 do
81502: LD_ADDR_VAR 0 5
81506: PUSH
81507: DOUBLE
81508: LD_INT 0
81510: DEC
81511: ST_TO_ADDR
81512: LD_INT 5
81514: PUSH
81515: FOR_TO
81516: IFFALSE 81583
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81518: LD_VAR 0 1
81522: PPUSH
81523: LD_VAR 0 5
81527: PPUSH
81528: LD_VAR 0 6
81532: PPUSH
81533: CALL_OW 272
81537: PPUSH
81538: LD_VAR 0 2
81542: PPUSH
81543: LD_VAR 0 5
81547: PPUSH
81548: LD_VAR 0 6
81552: PPUSH
81553: CALL_OW 273
81557: PPUSH
81558: LD_VAR 0 3
81562: PPUSH
81563: CALL_OW 309
81567: IFFALSE 81581
// begin result := true ;
81569: LD_ADDR_VAR 0 4
81573: PUSH
81574: LD_INT 1
81576: ST_TO_ADDR
// exit ;
81577: POP
81578: POP
81579: GO 81585
// end ;
81581: GO 81515
81583: POP
81584: POP
// end ;
81585: LD_VAR 0 4
81589: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81590: LD_INT 0
81592: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81593: LD_VAR 0 1
81597: PPUSH
81598: LD_VAR 0 2
81602: PPUSH
81603: LD_INT 0
81605: PPUSH
81606: LD_INT 0
81608: PPUSH
81609: LD_INT 1
81611: PPUSH
81612: LD_INT 0
81614: PPUSH
81615: CALL_OW 587
// end ;
81619: LD_VAR 0 3
81623: RET
// export function CenterOnNow ( unit ) ; begin
81624: LD_INT 0
81626: PPUSH
// result := IsInUnit ( unit ) ;
81627: LD_ADDR_VAR 0 2
81631: PUSH
81632: LD_VAR 0 1
81636: PPUSH
81637: CALL_OW 310
81641: ST_TO_ADDR
// if not result then
81642: LD_VAR 0 2
81646: NOT
81647: IFFALSE 81659
// result := unit ;
81649: LD_ADDR_VAR 0 2
81653: PUSH
81654: LD_VAR 0 1
81658: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81659: LD_VAR 0 1
81663: PPUSH
81664: CALL_OW 87
// end ;
81668: LD_VAR 0 2
81672: RET
// export function ComMoveHex ( unit , hex ) ; begin
81673: LD_INT 0
81675: PPUSH
// if not hex then
81676: LD_VAR 0 2
81680: NOT
81681: IFFALSE 81685
// exit ;
81683: GO 81738
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81685: LD_VAR 0 2
81689: PUSH
81690: LD_INT 1
81692: ARRAY
81693: PPUSH
81694: LD_VAR 0 2
81698: PUSH
81699: LD_INT 2
81701: ARRAY
81702: PPUSH
81703: CALL_OW 428
81707: IFFALSE 81711
// exit ;
81709: GO 81738
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81711: LD_VAR 0 1
81715: PPUSH
81716: LD_VAR 0 2
81720: PUSH
81721: LD_INT 1
81723: ARRAY
81724: PPUSH
81725: LD_VAR 0 2
81729: PUSH
81730: LD_INT 2
81732: ARRAY
81733: PPUSH
81734: CALL_OW 111
// end ;
81738: LD_VAR 0 3
81742: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81743: LD_INT 0
81745: PPUSH
81746: PPUSH
81747: PPUSH
// if not unit or not enemy then
81748: LD_VAR 0 1
81752: NOT
81753: PUSH
81754: LD_VAR 0 2
81758: NOT
81759: OR
81760: IFFALSE 81764
// exit ;
81762: GO 81888
// x := GetX ( enemy ) ;
81764: LD_ADDR_VAR 0 4
81768: PUSH
81769: LD_VAR 0 2
81773: PPUSH
81774: CALL_OW 250
81778: ST_TO_ADDR
// y := GetY ( enemy ) ;
81779: LD_ADDR_VAR 0 5
81783: PUSH
81784: LD_VAR 0 2
81788: PPUSH
81789: CALL_OW 251
81793: ST_TO_ADDR
// if ValidHex ( x , y ) then
81794: LD_VAR 0 4
81798: PPUSH
81799: LD_VAR 0 5
81803: PPUSH
81804: CALL_OW 488
81808: IFFALSE 81888
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81810: LD_VAR 0 2
81814: PPUSH
81815: CALL_OW 247
81819: PUSH
81820: LD_INT 3
81822: PUSH
81823: LD_INT 2
81825: PUSH
81826: EMPTY
81827: LIST
81828: LIST
81829: IN
81830: PUSH
81831: LD_VAR 0 1
81835: PPUSH
81836: CALL_OW 255
81840: PPUSH
81841: LD_VAR 0 2
81845: PPUSH
81846: CALL_OW 292
81850: OR
81851: IFFALSE 81869
// ComAttackUnit ( unit , enemy ) else
81853: LD_VAR 0 1
81857: PPUSH
81858: LD_VAR 0 2
81862: PPUSH
81863: CALL_OW 115
81867: GO 81888
// ComAgressiveMove ( unit , x , y ) ;
81869: LD_VAR 0 1
81873: PPUSH
81874: LD_VAR 0 4
81878: PPUSH
81879: LD_VAR 0 5
81883: PPUSH
81884: CALL_OW 114
// end ;
81888: LD_VAR 0 3
81892: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81893: LD_INT 0
81895: PPUSH
81896: PPUSH
81897: PPUSH
// list := AreaToList ( area , 0 ) ;
81898: LD_ADDR_VAR 0 5
81902: PUSH
81903: LD_VAR 0 1
81907: PPUSH
81908: LD_INT 0
81910: PPUSH
81911: CALL_OW 517
81915: ST_TO_ADDR
// if not list then
81916: LD_VAR 0 5
81920: NOT
81921: IFFALSE 81925
// exit ;
81923: GO 82055
// if all then
81925: LD_VAR 0 2
81929: IFFALSE 82017
// begin for i := 1 to list [ 1 ] do
81931: LD_ADDR_VAR 0 4
81935: PUSH
81936: DOUBLE
81937: LD_INT 1
81939: DEC
81940: ST_TO_ADDR
81941: LD_VAR 0 5
81945: PUSH
81946: LD_INT 1
81948: ARRAY
81949: PUSH
81950: FOR_TO
81951: IFFALSE 82013
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81953: LD_ADDR_VAR 0 3
81957: PUSH
81958: LD_VAR 0 3
81962: PPUSH
81963: LD_VAR 0 3
81967: PUSH
81968: LD_INT 1
81970: PLUS
81971: PPUSH
81972: LD_VAR 0 5
81976: PUSH
81977: LD_INT 1
81979: ARRAY
81980: PUSH
81981: LD_VAR 0 4
81985: ARRAY
81986: PUSH
81987: LD_VAR 0 5
81991: PUSH
81992: LD_INT 2
81994: ARRAY
81995: PUSH
81996: LD_VAR 0 4
82000: ARRAY
82001: PUSH
82002: EMPTY
82003: LIST
82004: LIST
82005: PPUSH
82006: CALL_OW 1
82010: ST_TO_ADDR
82011: GO 81950
82013: POP
82014: POP
// exit ;
82015: GO 82055
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82017: LD_ADDR_VAR 0 3
82021: PUSH
82022: LD_VAR 0 5
82026: PUSH
82027: LD_INT 1
82029: ARRAY
82030: PUSH
82031: LD_INT 1
82033: ARRAY
82034: PUSH
82035: LD_VAR 0 5
82039: PUSH
82040: LD_INT 2
82042: ARRAY
82043: PUSH
82044: LD_INT 1
82046: ARRAY
82047: PUSH
82048: EMPTY
82049: LIST
82050: LIST
82051: PUSH
82052: EMPTY
82053: LIST
82054: ST_TO_ADDR
// end ;
82055: LD_VAR 0 3
82059: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82060: LD_INT 0
82062: PPUSH
82063: PPUSH
// list := AreaToList ( area , 0 ) ;
82064: LD_ADDR_VAR 0 4
82068: PUSH
82069: LD_VAR 0 1
82073: PPUSH
82074: LD_INT 0
82076: PPUSH
82077: CALL_OW 517
82081: ST_TO_ADDR
// if not list then
82082: LD_VAR 0 4
82086: NOT
82087: IFFALSE 82091
// exit ;
82089: GO 82132
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82091: LD_ADDR_VAR 0 3
82095: PUSH
82096: LD_VAR 0 4
82100: PUSH
82101: LD_INT 1
82103: ARRAY
82104: PUSH
82105: LD_INT 1
82107: ARRAY
82108: PUSH
82109: LD_VAR 0 4
82113: PUSH
82114: LD_INT 2
82116: ARRAY
82117: PUSH
82118: LD_INT 1
82120: ARRAY
82121: PUSH
82122: LD_VAR 0 2
82126: PUSH
82127: EMPTY
82128: LIST
82129: LIST
82130: LIST
82131: ST_TO_ADDR
// end ;
82132: LD_VAR 0 3
82136: RET
// export function First ( array ) ; begin
82137: LD_INT 0
82139: PPUSH
// if not array then
82140: LD_VAR 0 1
82144: NOT
82145: IFFALSE 82149
// exit ;
82147: GO 82163
// result := array [ 1 ] ;
82149: LD_ADDR_VAR 0 2
82153: PUSH
82154: LD_VAR 0 1
82158: PUSH
82159: LD_INT 1
82161: ARRAY
82162: ST_TO_ADDR
// end ;
82163: LD_VAR 0 2
82167: RET
// export function Last ( array ) ; begin
82168: LD_INT 0
82170: PPUSH
// if not array then
82171: LD_VAR 0 1
82175: NOT
82176: IFFALSE 82180
// exit ;
82178: GO 82196
// result := array [ array ] ;
82180: LD_ADDR_VAR 0 2
82184: PUSH
82185: LD_VAR 0 1
82189: PUSH
82190: LD_VAR 0 1
82194: ARRAY
82195: ST_TO_ADDR
// end ;
82196: LD_VAR 0 2
82200: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82201: LD_INT 0
82203: PPUSH
82204: PPUSH
// result := [ ] ;
82205: LD_ADDR_VAR 0 5
82209: PUSH
82210: EMPTY
82211: ST_TO_ADDR
// if not array then
82212: LD_VAR 0 1
82216: NOT
82217: IFFALSE 82221
// exit ;
82219: GO 82333
// for i := 1 to array do
82221: LD_ADDR_VAR 0 6
82225: PUSH
82226: DOUBLE
82227: LD_INT 1
82229: DEC
82230: ST_TO_ADDR
82231: LD_VAR 0 1
82235: PUSH
82236: FOR_TO
82237: IFFALSE 82331
// if array [ i ] [ index ] = value then
82239: LD_VAR 0 1
82243: PUSH
82244: LD_VAR 0 6
82248: ARRAY
82249: PUSH
82250: LD_VAR 0 2
82254: ARRAY
82255: PUSH
82256: LD_VAR 0 3
82260: EQUAL
82261: IFFALSE 82329
// begin if indexColumn then
82263: LD_VAR 0 4
82267: IFFALSE 82303
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82269: LD_ADDR_VAR 0 5
82273: PUSH
82274: LD_VAR 0 5
82278: PPUSH
82279: LD_VAR 0 1
82283: PUSH
82284: LD_VAR 0 6
82288: ARRAY
82289: PUSH
82290: LD_VAR 0 4
82294: ARRAY
82295: PPUSH
82296: CALL 77671 0 2
82300: ST_TO_ADDR
82301: GO 82329
// result := Join ( result , array [ i ] ) ;
82303: LD_ADDR_VAR 0 5
82307: PUSH
82308: LD_VAR 0 5
82312: PPUSH
82313: LD_VAR 0 1
82317: PUSH
82318: LD_VAR 0 6
82322: ARRAY
82323: PPUSH
82324: CALL 77671 0 2
82328: ST_TO_ADDR
// end ;
82329: GO 82236
82331: POP
82332: POP
// end ;
82333: LD_VAR 0 5
82337: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82338: LD_INT 0
82340: PPUSH
82341: PPUSH
82342: PPUSH
// if btype = b_depot then
82343: LD_VAR 0 2
82347: PUSH
82348: LD_INT 0
82350: EQUAL
82351: IFFALSE 82363
// begin result := true ;
82353: LD_ADDR_VAR 0 3
82357: PUSH
82358: LD_INT 1
82360: ST_TO_ADDR
// exit ;
82361: GO 82479
// end ; pom := GetBase ( depot ) ;
82363: LD_ADDR_VAR 0 4
82367: PUSH
82368: LD_VAR 0 1
82372: PPUSH
82373: CALL_OW 274
82377: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82378: LD_ADDR_VAR 0 5
82382: PUSH
82383: LD_VAR 0 2
82387: PPUSH
82388: LD_VAR 0 1
82392: PPUSH
82393: CALL_OW 248
82397: PPUSH
82398: CALL_OW 450
82402: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82403: LD_ADDR_VAR 0 3
82407: PUSH
82408: LD_VAR 0 4
82412: PPUSH
82413: LD_INT 1
82415: PPUSH
82416: CALL_OW 275
82420: PUSH
82421: LD_VAR 0 5
82425: PUSH
82426: LD_INT 1
82428: ARRAY
82429: GREATEREQUAL
82430: PUSH
82431: LD_VAR 0 4
82435: PPUSH
82436: LD_INT 2
82438: PPUSH
82439: CALL_OW 275
82443: PUSH
82444: LD_VAR 0 5
82448: PUSH
82449: LD_INT 2
82451: ARRAY
82452: GREATEREQUAL
82453: AND
82454: PUSH
82455: LD_VAR 0 4
82459: PPUSH
82460: LD_INT 3
82462: PPUSH
82463: CALL_OW 275
82467: PUSH
82468: LD_VAR 0 5
82472: PUSH
82473: LD_INT 3
82475: ARRAY
82476: GREATEREQUAL
82477: AND
82478: ST_TO_ADDR
// end ;
82479: LD_VAR 0 3
82483: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
82484: LD_INT 0
82486: PPUSH
// if not vehicles or not parkingPoint then
82487: LD_VAR 0 1
82491: NOT
82492: PUSH
82493: LD_VAR 0 2
82497: NOT
82498: OR
82499: IFFALSE 82503
// exit ;
82501: GO 82601
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
82503: LD_ADDR_VAR 0 1
82507: PUSH
82508: LD_VAR 0 1
82512: PPUSH
82513: LD_INT 50
82515: PUSH
82516: EMPTY
82517: LIST
82518: PUSH
82519: LD_INT 3
82521: PUSH
82522: LD_INT 92
82524: PUSH
82525: LD_VAR 0 2
82529: PUSH
82530: LD_INT 1
82532: ARRAY
82533: PUSH
82534: LD_VAR 0 2
82538: PUSH
82539: LD_INT 2
82541: ARRAY
82542: PUSH
82543: LD_INT 8
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: LIST
82550: LIST
82551: PUSH
82552: EMPTY
82553: LIST
82554: LIST
82555: PUSH
82556: EMPTY
82557: LIST
82558: LIST
82559: PPUSH
82560: CALL_OW 72
82564: ST_TO_ADDR
// if not vehicles then
82565: LD_VAR 0 1
82569: NOT
82570: IFFALSE 82574
// exit ;
82572: GO 82601
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
82574: LD_VAR 0 1
82578: PPUSH
82579: LD_VAR 0 2
82583: PUSH
82584: LD_INT 1
82586: ARRAY
82587: PPUSH
82588: LD_VAR 0 2
82592: PUSH
82593: LD_INT 2
82595: ARRAY
82596: PPUSH
82597: CALL_OW 111
// end ;
82601: LD_VAR 0 3
82605: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
82606: LD_INT 0
82608: PPUSH
82609: PPUSH
82610: PPUSH
// if not side or not area then
82611: LD_VAR 0 1
82615: NOT
82616: PUSH
82617: LD_VAR 0 2
82621: NOT
82622: OR
82623: IFFALSE 82627
// exit ;
82625: GO 82746
// tmp := AreaToList ( area , 0 ) ;
82627: LD_ADDR_VAR 0 5
82631: PUSH
82632: LD_VAR 0 2
82636: PPUSH
82637: LD_INT 0
82639: PPUSH
82640: CALL_OW 517
82644: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
82645: LD_ADDR_VAR 0 4
82649: PUSH
82650: DOUBLE
82651: LD_INT 1
82653: DEC
82654: ST_TO_ADDR
82655: LD_VAR 0 5
82659: PUSH
82660: LD_INT 1
82662: ARRAY
82663: PUSH
82664: FOR_TO
82665: IFFALSE 82744
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
82667: LD_VAR 0 5
82671: PUSH
82672: LD_INT 1
82674: ARRAY
82675: PUSH
82676: LD_VAR 0 4
82680: ARRAY
82681: PPUSH
82682: LD_VAR 0 5
82686: PUSH
82687: LD_INT 2
82689: ARRAY
82690: PUSH
82691: LD_VAR 0 4
82695: ARRAY
82696: PPUSH
82697: CALL_OW 351
82701: IFFALSE 82742
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
82703: LD_VAR 0 5
82707: PUSH
82708: LD_INT 1
82710: ARRAY
82711: PUSH
82712: LD_VAR 0 4
82716: ARRAY
82717: PPUSH
82718: LD_VAR 0 5
82722: PUSH
82723: LD_INT 2
82725: ARRAY
82726: PUSH
82727: LD_VAR 0 4
82731: ARRAY
82732: PPUSH
82733: LD_VAR 0 1
82737: PPUSH
82738: CALL_OW 244
// end ;
82742: GO 82664
82744: POP
82745: POP
// end ; end_of_file
82746: LD_VAR 0 3
82750: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82751: LD_VAR 0 1
82755: PUSH
82756: LD_INT 200
82758: DOUBLE
82759: GREATEREQUAL
82760: IFFALSE 82768
82762: LD_INT 299
82764: DOUBLE
82765: LESSEQUAL
82766: IFTRUE 82770
82768: GO 82802
82770: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82771: LD_VAR 0 1
82775: PPUSH
82776: LD_VAR 0 2
82780: PPUSH
82781: LD_VAR 0 3
82785: PPUSH
82786: LD_VAR 0 4
82790: PPUSH
82791: LD_VAR 0 5
82795: PPUSH
82796: CALL 35462 0 5
82800: GO 82879
82802: LD_INT 300
82804: DOUBLE
82805: GREATEREQUAL
82806: IFFALSE 82814
82808: LD_INT 399
82810: DOUBLE
82811: LESSEQUAL
82812: IFTRUE 82816
82814: GO 82878
82816: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82817: LD_VAR 0 1
82821: PPUSH
82822: LD_VAR 0 2
82826: PPUSH
82827: LD_VAR 0 3
82831: PPUSH
82832: LD_VAR 0 4
82836: PPUSH
82837: LD_VAR 0 5
82841: PPUSH
82842: LD_VAR 0 6
82846: PPUSH
82847: LD_VAR 0 7
82851: PPUSH
82852: LD_VAR 0 8
82856: PPUSH
82857: LD_VAR 0 9
82861: PPUSH
82862: LD_VAR 0 10
82866: PPUSH
82867: LD_VAR 0 11
82871: PPUSH
82872: CALL 31787 0 11
82876: GO 82879
82878: POP
// end ;
82879: PPOPN 11
82881: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82882: LD_VAR 0 1
82886: PPUSH
82887: LD_VAR 0 2
82891: PPUSH
82892: LD_VAR 0 3
82896: PPUSH
82897: LD_VAR 0 4
82901: PPUSH
82902: LD_VAR 0 5
82906: PPUSH
82907: CALL 35198 0 5
// end ; end_of_file
82911: PPOPN 5
82913: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82914: LD_VAR 0 1
82918: PPUSH
82919: LD_VAR 0 2
82923: PPUSH
82924: LD_VAR 0 3
82928: PPUSH
82929: LD_VAR 0 4
82933: PPUSH
82934: LD_VAR 0 5
82938: PPUSH
82939: LD_VAR 0 6
82943: PPUSH
82944: CALL 19439 0 6
// end ;
82948: PPOPN 6
82950: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82951: LD_INT 0
82953: PPUSH
// begin if not units then
82954: LD_VAR 0 1
82958: NOT
82959: IFFALSE 82963
// exit ;
82961: GO 82963
// end ;
82963: PPOPN 7
82965: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82966: CALL 19326 0 0
// end ;
82970: PPOPN 1
82972: END
