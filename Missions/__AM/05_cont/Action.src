Export Function Action;
var m;
begin
InGameOn;

CenterNowOnXY(28, 51);

Wait(0$2);

Say(JMM, 'D1d-JMM-1a');
SayRadio(Harrison, 'D1d-Har-1');

InGameOff;

SaveForQuickRestart;

ChangeMissionObjectives('M1');

Wait(0$2);

Say(JMM, 'D2-JMM-1');
Say(Gladstone, 'D2-Glad-1');
Say(JMM, 'D2-JMM-2');
Say(Gladstone, 'D2-Glad-2');
Say(JMM, 'D2-JMM-3');

Wait(rand(0$30, 1$00));

// Weather LNW Mode On
SetWeather(1, 570, 350);

//m := PlaySoundXYLoop(-100, -1, 'Rain');

Wait(rand(3$00, 5$00));

//StopSound(m);

SetWeather(0, 570, 350);
// Weather LNW Mode Off
End;

// Delta builded
Every 0$01 trigger FilterAllUnits([[[f_side, 1], [f_not, [f_constructed]], [f_btype, b_depot]]]) and not deltaBuilded do
begin
deltaBuilded := true;
End;

// Rename new depot
Every 0$01 trigger not Delta and deltaBuilded and FilterAllUnits([[[f_side, 1], [f_not, [f_constructed]], [f_btype, b_depot]]]) do
begin
enable;
SetRestrict(b_depot, 1, state_disabled);
Delta := FilterAllUnits([[[f_side, 1], [f_not, [f_constructed]], [f_btype, b_depot]]])[1];
SetBName(Delta, 'Delta');
End;

// Tame allowed
Every 0$2 trigger GetTech(tech_ApeLang, 1) = state_researched and IsOk(Gladstone) do
begin
DialogueOn;

Say(Gladstone, 'D3-Glad-1');
Say(JMM, 'D3-JMM-1');
Say(Gladstone, 'D3-Glad-2');
Say(JMM, 'D3-JMM-2');

DialogueOff;
End;

// First apeman tamed --> moved to Events

// Apeman Psych researched
Every 0$1 trigger GetTech(tech_ApePsych, 1) = state_researched and (IsOk(Frank) or (IsOk(Denis) and GetSide(Denis) = 1) or UnitFilter(others, [f_sex, sex_male])) do
var i, sol, ape, b;
begin
InGameOn;
DialogueOn;

if Frank then
   Say(Frank, 'D8a-Frank-1');

sol := SayX(UnitFilter(others, [f_sex, sex_male]), 'D8a-Sol1-1');

if Denis and GetSide(Denis) = 1 then
   Say(Denis, 'D8a-Den-1');

if sol or Denis or Frank then
   begin
   SayX(UnitFilter(others, [[f_class, 4], [f_sex, sex_male]]) diff sol, 'D8a-Sci1-1');
   Say(JMM, 'D8a-JMM-1');
   end;

ape := FilterAllUnits([[f_side, 1], [f_class, class_apeman], [f_inside]]);
b := FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]])[1];

for i in ape do
    if i in UnitsInside(b) then
       begin
       ape := i;
       break;
       end;

if not ape then
   begin
   DialogueOff;
   InGameOff;   
   exit;
   end;

RemoveUnit(ape);

PrepareApeman(0);

uc_side := 1;

hc_name := 'Mike ';
hc_gallery := 'us';
hc_face_number := 30;

hc_attr := [GetAttr(ape, attr_stamina), GetAttr(ape, attr_speed)];
hc_skills := [GetSkill(ape, 1), GetSkill(ape, 2), GetSkill(ape, 3), GetSkill(ape, 4)];
hc_sex := sex_male;

Mike := CreateHuman;
PlaceHumanInUnit(Mike, b);

InitHc_All();

DialogueOff;
InGameOff;
End;

// First apeman eng
Every 0$1 trigger FilterAllUnits([[f_side, 1], [f_class, class_apeman_engineer]]) do
begin
ChangeMissionObjectives('M1a');

case Query('Q2') of
     1: end_mission := true;
     2: end_the_mission_allowed := true;
     end;   
End;


// Denis arrives
Every 0$2 trigger FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_lab], [f_btype, b_lab_half]]]) and FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_workshop], [f_btype, b_factory]]]) and Delta do
begin
Wait(rand(0$30, 0$50));

PlaceUnitArea(Denis, [denisArea1, denisArea2, denisArea3, denisArea4][Difficulty], false);
ComHold(Denis);

InGameOn;
DialogueOn;

if Delta then
   CenterNowOnUnits(Delta)
else
   CenterNowOnUnits(JMM);

SayRadioNoFaceNoName(Denis, 'DD-Den-1');
Say(JMM, 'DD-JMM-1');
SayRadioNoFaceNoName(Denis, 'DD-Den-2');

Wait(3);

DialogueOff;
InGameOff;

if Difficulty = 1 then
   begin
   PlaceSeeing(GetX(Denis), GetY(Denis), 1, -12);
   CenterNowOnUnits(Denis);
   wait(0$5);
   RemoveSeeing(GetX(Denis), GetY(Denis), 1);
   end;

repeat
 wait(0$01);
until See(1, Denis) or IsDead(Denis);

if IsDead(Denis) then
   exit;

SetSide(Denis, 1);

Say(Denis, 'DD-Den-2a');

repeat
 wait(0$01);
until GetBType(IsInUnit(Denis)) in [b_lab, b_lab_half, b_lab_full] or IsDead(Denis);

if IsDead(Denis) then
   exit;

Say(Denis, 'DD-Den-2b');

ComChangeProfession(Denis, 4);

Wait(0$02);

DialogueOn;

CenterNowOnUnits(Denis);

Say(JMM, 'D4-JMM-1');
Say(Denis, 'D4-Den-1');
Say(JMM, 'D4-JMM-2');
Say(Denis, 'D4-Den-2');

DialogueOff;

ChangeMissionObjectives('M2');

radar_allowed := true;

SetTech(tech_radar, 1, state_enabled);
SetRestrict(b_lab_opto, 1, state_enabled);
SetRestrict(b_ext_radar, 1, state_enabled);
End;

// Arab spotted
Every 0$1 trigger arab_spotted do
var sol, sol2;
begin
sol := SayX(UnitFilter(others, [f_sex, sex_male]), 'D5-Sol1-1');

if not sol then
   exit;

repeat
 wait(0$01);
until FilterAllUnits([[f_side, 2], [f_type, unit_human]]) = 0;

if IsOk(sol) then
   begin
   sol2 := others diff sol;
   end
  else
   exit; // non-sense dialog

if not Lisa and not sol2 then
   exit; // also non-sense dialog

DialogueOn;

if Lisa then
   Say(Lisa, 'D5a-Lisa-1')
  else
   if sol2 then
      case GetSex(sol2[1]) of
           sex_male: Say(sol2[1], 'D5-Sol2-1');
           sex_female: Say(sol2[1], 'D5-FSol2-1');
      end;

Say(sol, 'D5-Sol1-2');

if Lisa then
   Say(Lisa, 'D5a-Lisa-2')
  else
   if sol2 then
      case GetSex(sol2[1]) of
           sex_male: Say(sol2[1], 'D5-Sol2-2');
           sex_female: Say(sol2[1], 'D5-FSol2-2');
      end;

Say(sol, 'D5a-Sol1-3');

if Lisa then
   Say(Lisa, 'D5a-Lisa-3');

if not sol2 then
   begin
   DialogueOff;
   exit;
   end;

case GetSex(sol2[1]) of
     sex_male: Say(sol2[1], 'D5-Sol2-3');
     sex_female: Say(sol2[1], 'D5-FSol2-3');
end;

Say(sol, 'D5-Sol1-4');

case GetSex(sol2[1]) of
     sex_male: Say(sol2[1], 'D5-Sol2-4');
     sex_female: Say(sol2[1], 'D5-FSol2-4');
end;

Say(sol, 'D5-Sol1-5');

case GetSex(sol2[1]) of
     sex_male: Say(sol2[1], 'D5-Sol2-5');
     sex_female: Say(sol2[1], 'D5-FSol2-5');
end;

DialogueOff;
End;

Every 0$01 trigger FilterAllUnits([[f_side, 1], [f_class, class_apeman_engineer]]) >= 5 do
begin
ChangeMissionObjectives('M1b');
apeman_army := true;
End;

Every 0$1 trigger FilterAllUnits([[f_side, 1], [f_btype, b_factory], [f_constructed]]) do
ChangeMissionObjectives('M1c');

// Radar researched
Every 0$1 trigger GetTech(tech_radar, 1) = state_researched do
begin
ChangeMissionObjectives('M2a');
radar_researched := true;
End;

// Radar builded
Every 0$1 trigger FilterAllUnits([[f_side, 1], [f_or, [f_weapon, us_radar], [f_bweapon, us_radar]]]) do
begin
ChangeMissionObjectives('M2b');
radar_builded := true;
End;

// All apemans were killed
Every 0$3 trigger FilterAllUnits([[f_side, 0], [f_class, class_apeman]]) = 0 and not first_apeman_tamed do
YouLost('Apeman');

// Secrect Bonus
Every 0$1 trigger FilterAllUnits([[f_side, 1], [f_class, class_apeman_engineer]]) >= 7 do
var i, filter;
begin
filter := FilterAllUnits([[f_side, 1], [f_type, unit_human], [f_class, 4]]) ^ JMM;

if filter then
   for i in filter do
       AddExperience(i, 4, 3500);
End;

// End Mission
Every 0$1 trigger end_mission do
var i, tmp, m1, m2, m3;
begin

if apeKillCounter = 0 then
   SetAchievement('ACH_APEKILLER');

if FilterAllUnits([f_side, 2]) then  // delete trash from map
   for i in FilterAllUnits([f_side, 2]) do
       RemoveUnit(i);

// medals
m1 := false;
m2 := false;
m3 := false;

if apeman_army then
   begin
   AddMedal('Tame', 1);
   m1 := true;
   end
else
   AddMedal('Tame', -1);

if radar_researched then
   begin
   SaveVariable(true, 'radarResInDelta');
   AddMedal('Radar', 1);
   m2 := true;
   end
else
   if radar_allowed then
      AddMedal('Radar', -2)
     else
      AddMedal('Radar', -1);

if radar_builded then
   begin
   AddMedal('BuildRadar', 1);
   m3 := true;
   end
else
   AddMedal('BuildRadar', -1);

if tick <= 7$00 then
   SetAchievement('ACH_ASPEED_5');

if m1 and m2 and m3 and Difficulty >= 3 then
   SetAchievementEX('ACH_AMER', 5);

GiveMedals('MAIN');

tmp := FilterAllUnits([[f_side, 1], [f_type, unit_human], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]);

RewardPeople(tmp);

// save characters for next nefek's missions
SaveCharacters(JMM, mission_prefix&'JMM');

if IsOk(Gladstone) then
   begin
   ToLua('enableBioCharacter(BIO_TIM)');
   SaveCharacters(Gladstone, mission_prefix&'Gladstone');
   end;

if IsOk(Denis) and GetSide(Denis) = 1 then
   begin
   ToLua('enableBioCharacter(BIO_DENIS)');
   SaveCharacters(Denis, mission_prefix&'Denis');
   SaveVariable(true, 'DenisInDelta');
   end;

if IsOk(Lisa) then
   begin
   SaveCharacters(Lisa, mission_prefix&'Lisa');
   end;

if IsOk(Frank) then
   begin
   SaveCharacters(Frank, mission_prefix&'Frank');
   end;

if IsOk(Bobby) then
   begin
   SaveCharacters(Bobby, mission_prefix&'Bobby');
   end;

if IsOk(Cyrus) then
   begin
   SaveCharacters(Cyrus, mission_prefix&'Cyrus');
   end;

if IsOk(Brown) then
   begin
   SaveCharacters(Brown, mission_prefix&'Brown');
   end;

if IsOk(Donaldson) then
   begin
   SaveCharacters(Donaldson, mission_prefix&'Donaldson');
   end;

if IsOk(Mike) then
   SaveCharacters(Mike, mission_prefix & 'Mike');

if others then
   SaveCharacters(others, 'othersInDelta');

if FilterAllUnits([[f_side, 1], [f_class, class_apeman_engineer]]) then
   SaveCharacters(FilterAllUnits([[f_side, 1], [f_class, class_apeman_engineer]]) diff Mike, 'apeInDelta');

tmp := [];

if FilterAllUnits([[f_side, 1], [f_type, unit_vehicle]]) then
   for i in FilterAllUnits([[f_side, 1], [f_type, unit_vehicle]]) do
       tmp := tmp ^ [GetNation(i), GetChassis(i), GetEngine(i), GetControl(i), GetWeapon(i)];

if tmp then
   SaveVariable(tmp, 'vehiclesInDelta');

tmp := [];

if FilterAllUnits([[f_side, 1], [f_type, unit_building]]) then
   for i in FilterAllUnits([[f_side, 1], [f_type, unit_building]]) do
       tmp := tmp ^ [[GetBType(i), GetBLevel(i), GetX(i), GetY(i), GetDir(i), GetLabKind(i, 1), GetLabKind(i, 2), GetBWeapon(i)]];

if tmp then
   SaveVariable(tmp, 'buildingsInDelta');

YouWin; // your history end's here Tomato
End;