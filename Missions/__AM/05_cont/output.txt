// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 223 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 304 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 798 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 798 0 2
// CreateNature ;
  74: CALL 531 0 0
// PrepareAmericans ;
  78: CALL 1397 0 0
// Action ;
  82: CALL 2333 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// traitor := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// end ;
 218: LD_VAR 0 1
 222: RET
// function InitRestrictions ; begin
 223: LD_INT 0
 225: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 226: LD_INT 7
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 1
 234: PPUSH
 235: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 239: LD_INT 8
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 1
 247: PPUSH
 248: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 252: LD_INT 10
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 265: LD_INT 69
 267: PPUSH
 268: LD_INT 1
 270: PPUSH
 271: LD_STRING GatlingInGamma
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: CALL_OW 30
 281: PPUSH
 282: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 286: LD_INT 51
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 322
// end ;
 299: LD_VAR 0 1
 303: RET
// function DebugMode ; begin
 304: LD_INT 0
 306: PPUSH
// FogOff ( 1 ) ;
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 344
// Difficulty := 2 ;
 314: LD_ADDR_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// end ;
 322: LD_VAR 0 1
 326: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 327: LD_INT 22
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PPUSH
 351: CALL_OW 69
 355: PUSH
 356: LD_INT 7
 358: GREATEREQUAL
 359: IFFALSE 371
 361: GO 363
 363: DISABLE
// SetAchievement ( ACH_TAME ) ;
 364: LD_STRING ACH_TAME
 366: PPUSH
 367: CALL_OW 543
 371: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 372: LD_INT 22
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 35
 384: PUSH
 385: LD_INT 11
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 34
 413: PUSH
 414: LD_INT 11
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: AND
 430: IFFALSE 442
 432: GO 434
 434: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 435: LD_STRING ACH_RADAR
 437: PPUSH
 438: CALL_OW 543
 442: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 443: LD_INT 0
 445: PPUSH
// uc_side := side ;
 446: LD_ADDR_OWVAR 20
 450: PUSH
 451: LD_VAR 0 1
 455: ST_TO_ADDR
// uc_nation := nation ;
 456: LD_ADDR_OWVAR 21
 460: PUSH
 461: LD_VAR 0 2
 465: ST_TO_ADDR
// vc_chassis := chassis ;
 466: LD_ADDR_OWVAR 37
 470: PUSH
 471: LD_VAR 0 3
 475: ST_TO_ADDR
// vc_engine := engine ;
 476: LD_ADDR_OWVAR 39
 480: PUSH
 481: LD_VAR 0 4
 485: ST_TO_ADDR
// vc_control := control ;
 486: LD_ADDR_OWVAR 38
 490: PUSH
 491: LD_VAR 0 5
 495: ST_TO_ADDR
// vc_weapon := weapon ;
 496: LD_ADDR_OWVAR 40
 500: PUSH
 501: LD_VAR 0 6
 505: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 506: LD_ADDR_OWVAR 41
 510: PUSH
 511: LD_VAR 0 7
 515: ST_TO_ADDR
// result := CreateVehicle ;
 516: LD_ADDR_VAR 0 8
 520: PUSH
 521: CALL_OW 45
 525: ST_TO_ADDR
// end ;
 526: LD_VAR 0 8
 530: RET
// export function CreateNature ; var i ; begin
 531: LD_INT 0
 533: PPUSH
 534: PPUSH
// for i := 1 to 4 do
 535: LD_ADDR_VAR 0 2
 539: PUSH
 540: DOUBLE
 541: LD_INT 1
 543: DEC
 544: ST_TO_ADDR
 545: LD_INT 4
 547: PUSH
 548: FOR_TO
 549: IFFALSE 572
// begin PrepareFrog ( ) ;
 551: CALL 63745 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 555: CALL_OW 44
 559: PPUSH
 560: LD_INT 17
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end ;
 570: GO 548
 572: POP
 573: POP
// for i := 1 to 6 do
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: DOUBLE
 580: LD_INT 1
 582: DEC
 583: ST_TO_ADDR
 584: LD_INT 6
 586: PUSH
 587: FOR_TO
 588: IFFALSE 611
// begin PrepareBird ( ) ;
 590: CALL 63825 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 49
// end ;
 609: GO 587
 611: POP
 612: POP
// for i := 1 to 11 do
 613: LD_ADDR_VAR 0 2
 617: PUSH
 618: DOUBLE
 619: LD_INT 1
 621: DEC
 622: ST_TO_ADDR
 623: LD_INT 11
 625: PUSH
 626: FOR_TO
 627: IFFALSE 650
// begin PrepareEnchidna ( ) ;
 629: CALL 63705 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 633: CALL_OW 44
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 49
// end ;
 648: GO 626
 650: POP
 651: POP
// for i := 1 to 3 do
 652: LD_ADDR_VAR 0 2
 656: PUSH
 657: DOUBLE
 658: LD_INT 1
 660: DEC
 661: ST_TO_ADDR
 662: LD_INT 3
 664: PUSH
 665: FOR_TO
 666: IFFALSE 692
// begin PrepareTiger ( 10 ) ;
 668: LD_INT 10
 670: PPUSH
 671: CALL 63644 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 675: CALL_OW 44
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end ;
 690: GO 665
 692: POP
 693: POP
// PrepareMastodont ( ) ;
 694: CALL 63905 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 698: CALL_OW 45
 702: PPUSH
 703: LD_INT 18
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 49
// end ;
 713: LD_VAR 0 1
 717: RET
// export function SayX ( units , ident ) ; var i ; begin
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
// result := false ;
 722: LD_ADDR_VAR 0 3
 726: PUSH
 727: LD_INT 0
 729: ST_TO_ADDR
// if not units then
 730: LD_VAR 0 1
 734: NOT
 735: IFFALSE 739
// exit ;
 737: GO 793
// for i in units do
 739: LD_ADDR_VAR 0 4
 743: PUSH
 744: LD_VAR 0 1
 748: PUSH
 749: FOR_IN
 750: IFFALSE 791
// if IsOk ( i ) then
 752: LD_VAR 0 4
 756: PPUSH
 757: CALL_OW 302
 761: IFFALSE 789
// begin Say ( i , ident ) ;
 763: LD_VAR 0 4
 767: PPUSH
 768: LD_VAR 0 2
 772: PPUSH
 773: CALL_OW 88
// result := i ;
 777: LD_ADDR_VAR 0 3
 781: PUSH
 782: LD_VAR 0 4
 786: ST_TO_ADDR
// break ;
 787: GO 791
// end ;
 789: GO 749
 791: POP
 792: POP
// end ;
 793: LD_VAR 0 3
 797: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 798: LD_INT 0
 800: PPUSH
 801: PPUSH
// InitUc ;
 802: CALL_OW 18
// InitHc ;
 806: CALL_OW 19
// uc_side := 0 ;
 810: LD_ADDR_OWVAR 20
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// uc_nation := 0 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 0
 825: ST_TO_ADDR
// for i = 1 to amount do
 826: LD_ADDR_VAR 0 4
 830: PUSH
 831: DOUBLE
 832: LD_INT 1
 834: DEC
 835: ST_TO_ADDR
 836: LD_VAR 0 2
 840: PUSH
 841: FOR_TO
 842: IFFALSE 924
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 844: LD_ADDR_OWVAR 29
 848: PUSH
 849: LD_INT 9
 851: PPUSH
 852: LD_INT 12
 854: PPUSH
 855: CALL_OW 12
 859: PUSH
 860: LD_INT 9
 862: PPUSH
 863: LD_INT 12
 865: PPUSH
 866: CALL_OW 12
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 875: LD_ADDR_OWVAR 35
 879: PUSH
 880: LD_INT 5
 882: NEG
 883: PPUSH
 884: LD_INT 5
 886: PPUSH
 887: CALL_OW 12
 891: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 892: LD_INT 0
 894: PPUSH
 895: LD_INT 12
 897: PPUSH
 898: LD_INT 1
 900: PPUSH
 901: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 905: CALL_OW 44
 909: PPUSH
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 841
 924: POP
 925: POP
// InitHc ;
 926: CALL_OW 19
// end ;
 930: LD_VAR 0 3
 934: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 935: LD_INT 0
 937: PPUSH
 938: PPUSH
 939: PPUSH
// if not unit then
 940: LD_VAR 0 1
 944: NOT
 945: IFFALSE 949
// exit ;
 947: GO 1392
// if IsInUnit ( unit ) then
 949: LD_VAR 0 1
 953: PPUSH
 954: CALL_OW 310
 958: IFFALSE 975
// unit := IsDrivenBy ( unit ) ;
 960: LD_ADDR_VAR 0 1
 964: PUSH
 965: LD_VAR 0 1
 969: PPUSH
 970: CALL_OW 311
 974: ST_TO_ADDR
// targets_list := [ ] ;
 975: LD_ADDR_VAR 0 5
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 982: LD_ADDR_VAR 0 4
 986: PUSH
 987: LD_VAR 0 2
 991: PPUSH
 992: LD_INT 24
 994: PUSH
 995: LD_INT 250
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 3
1004: PUSH
1005: LD_INT 34
1007: PUSH
1008: LD_INT 12
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 21
1021: PUSH
1022: LD_INT 2
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 58
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PPUSH
1041: CALL_OW 72
1045: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1046: LD_VAR 0 4
1050: PPUSH
1051: LD_VAR 0 1
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 296
1070: PUSH
1071: LD_INT 11
1073: LESS
1074: PUSH
1075: LD_VAR 0 1
1079: PPUSH
1080: CALL_OW 310
1084: NOT
1085: AND
1086: IFFALSE 1114
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1088: LD_VAR 0 1
1092: PPUSH
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: CALL_OW 74
1107: PPUSH
1108: CALL_OW 120
// exit ;
1112: GO 1392
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1114: LD_ADDR_VAR 0 5
1118: PUSH
1119: LD_VAR 0 2
1123: PPUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: LD_INT 54
1139: PUSH
1140: EMPTY
1141: LIST
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 72
1155: PUSH
1156: LD_VAR 0 2
1160: PPUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 72
1175: PUSH
1176: LD_VAR 0 2
1180: PPUSH
1181: LD_INT 21
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 3
1193: PUSH
1194: LD_INT 58
1196: PUSH
1197: EMPTY
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 72
1212: PUSH
1213: LD_VAR 0 2
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: ST_TO_ADDR
// for target in targets_list do
1224: LD_ADDR_VAR 0 4
1228: PUSH
1229: LD_VAR 0 5
1233: PUSH
1234: FOR_IN
1235: IFFALSE 1390
// begin if target then
1237: LD_VAR 0 4
1241: IFFALSE 1388
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1243: LD_VAR 0 1
1247: PPUSH
1248: CALL_OW 110
1252: PUSH
1253: LD_INT 11
1255: EQUAL
1256: PUSH
1257: LD_VAR 0 4
1261: PPUSH
1262: LD_VAR 0 1
1266: PPUSH
1267: CALL_OW 74
1271: PPUSH
1272: CALL_OW 247
1276: PUSH
1277: LD_INT 3
1279: EQUAL
1280: PUSH
1281: LD_VAR 0 4
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: CALL_OW 74
1295: PPUSH
1296: CALL_OW 264
1300: PUSH
1301: LD_INT 12
1303: EQUAL
1304: OR
1305: AND
1306: IFFALSE 1352
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1308: LD_VAR 0 1
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: LD_VAR 0 1
1328: PPUSH
1329: CALL_OW 74
1333: PPUSH
1334: CALL_OW 132
// SetTag ( unit , 0 ) ;
1338: LD_VAR 0 1
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 109
// end else
1350: GO 1388
// if not HasTask ( unit ) then
1352: LD_VAR 0 1
1356: PPUSH
1357: CALL_OW 314
1361: NOT
1362: IFFALSE 1388
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1364: LD_VAR 0 1
1368: PPUSH
1369: LD_VAR 0 4
1373: PPUSH
1374: LD_VAR 0 1
1378: PPUSH
1379: CALL_OW 74
1383: PPUSH
1384: CALL_OW 115
// end ;
1388: GO 1234
1390: POP
1391: POP
// end ; end_of_file
1392: LD_VAR 0 3
1396: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
// uc_nation := 1 ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// uc_side := 4 ;
1412: LD_ADDR_OWVAR 20
1416: PUSH
1417: LD_INT 4
1419: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1420: LD_ADDR_EXP 20
1424: PUSH
1425: LD_STRING Denis
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: LD_STRING 
1433: PPUSH
1434: CALL 29566 0 3
1438: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1439: LD_ADDR_EXP 19
1443: PUSH
1444: LD_STRING Harisson
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: LD_STRING 
1452: PPUSH
1453: CALL 29566 0 3
1457: ST_TO_ADDR
// uc_side := 1 ;
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1466: LD_ADDR_EXP 17
1470: PUSH
1471: LD_STRING JMM
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 3
1484: PPUSH
1485: CALL 29566 0 3
1489: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1490: LD_ADDR_EXP 18
1494: PUSH
1495: LD_STRING Gladstone
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_EXP 3
1505: PPUSH
1506: CALL 29566 0 3
1510: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1511: LD_STRING BrownInDelta
1513: PPUSH
1514: LD_EXP 1
1518: PPUSH
1519: CALL_OW 30
1523: IFFALSE 1565
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1525: LD_ADDR_EXP 21
1529: PUSH
1530: LD_STRING Brown
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 3
1543: PPUSH
1544: CALL 29566 0 3
1548: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: LD_EXP 21
1563: ADD
1564: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1565: LD_STRING DonaldsonInDelta
1567: PPUSH
1568: LD_EXP 1
1572: PPUSH
1573: CALL_OW 30
1577: IFFALSE 1619
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1579: LD_ADDR_EXP 22
1583: PUSH
1584: LD_STRING Donaldson
1586: PPUSH
1587: LD_EXP 1
1591: NOT
1592: PPUSH
1593: LD_EXP 3
1597: PPUSH
1598: CALL 29566 0 3
1602: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1603: LD_ADDR_VAR 0 5
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_EXP 22
1617: ADD
1618: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1619: LD_STRING LisaInDelta
1621: PPUSH
1622: LD_EXP 1
1626: PPUSH
1627: CALL_OW 30
1631: IFFALSE 1673
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1633: LD_ADDR_EXP 23
1637: PUSH
1638: LD_STRING Lisa
1640: PPUSH
1641: LD_EXP 1
1645: NOT
1646: PPUSH
1647: LD_EXP 3
1651: PPUSH
1652: CALL 29566 0 3
1656: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_VAR 0 5
1666: PUSH
1667: LD_EXP 23
1671: ADD
1672: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1673: LD_STRING FrankInDelta
1675: PPUSH
1676: LD_EXP 1
1680: PPUSH
1681: CALL_OW 30
1685: IFFALSE 1727
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: LD_STRING Frank
1694: PPUSH
1695: LD_EXP 1
1699: NOT
1700: PPUSH
1701: LD_EXP 3
1705: PPUSH
1706: CALL 29566 0 3
1710: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_VAR 0 5
1720: PUSH
1721: LD_EXP 24
1725: ADD
1726: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1727: LD_STRING BobbyInDelta
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 30
1737: IFFALSE 1779
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1739: LD_ADDR_EXP 25
1743: PUSH
1744: LD_STRING Bobby
1746: PPUSH
1747: LD_EXP 1
1751: NOT
1752: PPUSH
1753: LD_EXP 3
1757: PPUSH
1758: CALL 29566 0 3
1762: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 5
1772: PUSH
1773: LD_EXP 25
1777: ADD
1778: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1779: LD_STRING CyrusInDelta
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 30
1789: IFFALSE 1831
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1791: LD_ADDR_EXP 26
1795: PUSH
1796: LD_STRING Cyrus
1798: PPUSH
1799: LD_EXP 1
1803: NOT
1804: PPUSH
1805: LD_EXP 3
1809: PPUSH
1810: CALL 29566 0 3
1814: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: LD_VAR 0 5
1824: PUSH
1825: LD_EXP 26
1829: ADD
1830: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1831: LD_ADDR_EXP 28
1835: PUSH
1836: LD_STRING othersDelta
1838: PPUSH
1839: CALL_OW 31
1843: ST_TO_ADDR
// if not others and debug then
1844: LD_EXP 28
1848: NOT
1849: PUSH
1850: LD_EXP 1
1854: AND
1855: IFFALSE 1920
// begin InitHc ;
1857: CALL_OW 19
// for i = 1 to 2 do
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: DOUBLE
1867: LD_INT 1
1869: DEC
1870: ST_TO_ADDR
1871: LD_INT 2
1873: PUSH
1874: FOR_TO
1875: IFFALSE 1918
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1877: LD_INT 0
1879: PPUSH
1880: LD_VAR 0 2
1884: PUSH
1885: LD_INT 4
1887: MOD
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: CALL_OW 380
// others := others ^ CreateHuman ;
1900: LD_ADDR_EXP 28
1904: PUSH
1905: LD_EXP 28
1909: PUSH
1910: CALL_OW 44
1914: ADD
1915: ST_TO_ADDR
// end ;
1916: GO 1874
1918: POP
1919: POP
// end ; if others then
1920: LD_EXP 28
1924: IFFALSE 1942
// tmp := tmp ^ others ;
1926: LD_ADDR_VAR 0 5
1930: PUSH
1931: LD_VAR 0 5
1935: PUSH
1936: LD_EXP 28
1940: ADD
1941: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1942: LD_ADDR_VAR 0 3
1946: PUSH
1947: LD_INT 28
1949: PUSH
1950: LD_INT 49
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 33
1959: PUSH
1960: LD_INT 54
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 38
1969: PUSH
1970: LD_INT 56
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1982: LD_ADDR_VAR 0 4
1986: PUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: LD_INT 2
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 12
2004: PPUSH
2005: LD_INT 80
2007: PPUSH
2008: CALL 443 0 7
2012: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 1
2020: PPUSH
2021: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2025: LD_VAR 0 4
2029: PPUSH
2030: LD_VAR 0 3
2034: PUSH
2035: LD_INT 1
2037: ARRAY
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: LD_VAR 0 3
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: PUSH
2052: LD_INT 2
2054: ARRAY
2055: PPUSH
2056: LD_INT 0
2058: PPUSH
2059: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2063: LD_VAR 0 4
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: LD_INT 100
2073: PPUSH
2074: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2078: LD_EXP 28
2082: PUSH
2083: LD_INT 1
2085: ARRAY
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2096: LD_ADDR_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: LD_INT 80
2121: PPUSH
2122: CALL 443 0 7
2126: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_VAR 0 3
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PUSH
2153: LD_INT 1
2155: ARRAY
2156: PPUSH
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 2
2164: ARRAY
2165: PUSH
2166: LD_INT 2
2168: ARRAY
2169: PPUSH
2170: LD_INT 0
2172: PPUSH
2173: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2177: LD_EXP 18
2181: PPUSH
2182: LD_VAR 0 4
2186: PPUSH
2187: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_INT 1
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: LD_INT 80
2216: PPUSH
2217: CALL 443 0 7
2221: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2222: LD_VAR 0 4
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2234: LD_VAR 0 4
2238: PPUSH
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 3
2246: ARRAY
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 3
2259: ARRAY
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2272: LD_EXP 17
2276: PPUSH
2277: LD_VAR 0 4
2281: PPUSH
2282: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: LD_VAR 0 5
2295: PUSH
2296: LD_EXP 28
2300: PUSH
2301: LD_INT 1
2303: ARRAY
2304: DIFF
2305: PUSH
2306: FOR_IN
2307: IFFALSE 2326
// PlaceUnitArea ( i , startArea , false ) ;
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_INT 5
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: CALL_OW 49
2324: GO 2306
2326: POP
2327: POP
// end ; end_of_file
2328: LD_VAR 0 1
2332: RET
// export function Action ; var m ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
// InGameOn ;
2337: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2341: LD_INT 28
2343: PPUSH
2344: LD_INT 51
2346: PPUSH
2347: CALL_OW 86
// Wait ( 3 ) ;
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2358: LD_EXP 17
2362: PPUSH
2363: LD_STRING D1d-JMM-1a
2365: PPUSH
2366: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2370: LD_EXP 19
2374: PPUSH
2375: LD_STRING D1d-Har-1
2377: PPUSH
2378: CALL_OW 94
// InGameOff ;
2382: CALL_OW 9
// SaveForQuickRestart ;
2386: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2390: LD_STRING M1
2392: PPUSH
2393: CALL_OW 337
// Wait ( 0 0$2 ) ;
2397: LD_INT 70
2399: PPUSH
2400: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_STRING D2-JMM-1
2411: PPUSH
2412: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2416: LD_EXP 18
2420: PPUSH
2421: LD_STRING D2-Glad-1
2423: PPUSH
2424: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2428: LD_EXP 17
2432: PPUSH
2433: LD_STRING D2-JMM-2
2435: PPUSH
2436: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2440: LD_EXP 18
2444: PPUSH
2445: LD_STRING D2-Glad-2
2447: PPUSH
2448: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2452: LD_EXP 17
2456: PPUSH
2457: LD_STRING D2-JMM-3
2459: PPUSH
2460: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2464: LD_INT 1050
2466: PPUSH
2467: LD_INT 2100
2469: PPUSH
2470: CALL_OW 12
2474: PPUSH
2475: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 570
2484: PPUSH
2485: LD_INT 350
2487: PPUSH
2488: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2492: LD_INT 6300
2494: PPUSH
2495: LD_INT 10500
2497: PPUSH
2498: CALL_OW 12
2502: PPUSH
2503: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2507: LD_INT 0
2509: PPUSH
2510: LD_INT 570
2512: PPUSH
2513: LD_INT 350
2515: PPUSH
2516: CALL_OW 550
// end ;
2520: LD_VAR 0 1
2524: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2525: LD_INT 22
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 3
2537: PUSH
2538: LD_INT 57
2540: PUSH
2541: EMPTY
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 30
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: PPUSH
2566: CALL_OW 69
2570: PUSH
2571: LD_EXP 4
2575: NOT
2576: AND
2577: IFFALSE 2590
2579: GO 2581
2581: DISABLE
// begin deltaBuilded := true ;
2582: LD_ADDR_EXP 4
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// end ;
2590: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2591: LD_EXP 6
2595: NOT
2596: PUSH
2597: LD_EXP 4
2601: AND
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 1
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: EMPTY
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 30
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: EMPTY
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: AND
2649: IFFALSE 2735
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2655: LD_INT 0
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2668: LD_ADDR_EXP 6
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: LD_INT 57
2688: PUSH
2689: EMPTY
2690: LIST
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: PPUSH
2714: CALL_OW 69
2718: PUSH
2719: LD_INT 1
2721: ARRAY
2722: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2723: LD_EXP 6
2727: PPUSH
2728: LD_STRING Delta
2730: PPUSH
2731: CALL_OW 500
// end ;
2735: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 321
2746: PUSH
2747: LD_INT 2
2749: EQUAL
2750: PUSH
2751: LD_EXP 18
2755: PPUSH
2756: CALL_OW 302
2760: AND
2761: IFFALSE 2822
2763: GO 2765
2765: DISABLE
// begin DialogueOn ;
2766: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2770: LD_EXP 18
2774: PPUSH
2775: LD_STRING D3-Glad-1
2777: PPUSH
2778: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2782: LD_EXP 17
2786: PPUSH
2787: LD_STRING D3-JMM-1
2789: PPUSH
2790: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2794: LD_EXP 18
2798: PPUSH
2799: LD_STRING D3-Glad-2
2801: PPUSH
2802: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_STRING D3-JMM-2
2813: PPUSH
2814: CALL_OW 88
// DialogueOff ;
2818: CALL_OW 7
// end ;
2822: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2823: LD_INT 2
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: CALL_OW 321
2833: PUSH
2834: LD_INT 2
2836: EQUAL
2837: PUSH
2838: LD_EXP 24
2842: PPUSH
2843: CALL_OW 302
2847: PUSH
2848: LD_EXP 20
2852: PPUSH
2853: CALL_OW 302
2857: PUSH
2858: LD_EXP 20
2862: PPUSH
2863: CALL_OW 255
2867: PUSH
2868: LD_INT 1
2870: EQUAL
2871: AND
2872: OR
2873: PUSH
2874: LD_EXP 28
2878: PPUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 72
2893: OR
2894: AND
2895: IFFALSE 3436
2897: GO 2899
2899: DISABLE
2900: LD_INT 0
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// begin InGameOn ;
2906: CALL_OW 8
// DialogueOn ;
2910: CALL_OW 6
// if Frank then
2914: LD_EXP 24
2918: IFFALSE 2932
// Say ( Frank , D8a-Frank-1 ) ;
2920: LD_EXP 24
2924: PPUSH
2925: LD_STRING D8a-Frank-1
2927: PPUSH
2928: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_EXP 28
2941: PPUSH
2942: LD_INT 26
2944: PUSH
2945: LD_INT 1
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 72
2956: PPUSH
2957: LD_STRING D8a-Sol1-1
2959: PPUSH
2960: CALL 718 0 2
2964: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2965: LD_EXP 20
2969: PUSH
2970: LD_EXP 20
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 1
2982: EQUAL
2983: AND
2984: IFFALSE 2998
// Say ( Denis , D8a-Den-1 ) ;
2986: LD_EXP 20
2990: PPUSH
2991: LD_STRING D8a-Den-1
2993: PPUSH
2994: CALL_OW 88
// if sol or Denis or Frank then
2998: LD_VAR 0 2
3002: PUSH
3003: LD_EXP 20
3007: OR
3008: PUSH
3009: LD_EXP 24
3013: OR
3014: IFFALSE 3075
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3016: LD_EXP 28
3020: PPUSH
3021: LD_INT 25
3023: PUSH
3024: LD_INT 4
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 26
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: PUSH
3050: LD_VAR 0 2
3054: DIFF
3055: PPUSH
3056: LD_STRING D8a-Sci1-1
3058: PPUSH
3059: CALL 718 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3063: LD_EXP 17
3067: PPUSH
3068: LD_STRING D8a-JMM-1
3070: PPUSH
3071: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_INT 22
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 12
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 54
3102: PUSH
3103: EMPTY
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 69
3115: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3116: LD_ADDR_VAR 0 4
3120: PUSH
3121: LD_INT 22
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 6
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 7
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 30
3156: PUSH
3157: LD_INT 8
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: PUSH
3179: LD_INT 1
3181: ARRAY
3182: ST_TO_ADDR
// for i in ape do
3183: LD_ADDR_VAR 0 1
3187: PUSH
3188: LD_VAR 0 3
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3227
// if i in UnitsInside ( b ) then
3196: LD_VAR 0 1
3200: PUSH
3201: LD_VAR 0 4
3205: PPUSH
3206: CALL_OW 313
3210: IN
3211: IFFALSE 3225
// begin ape := i ;
3213: LD_ADDR_VAR 0 3
3217: PUSH
3218: LD_VAR 0 1
3222: ST_TO_ADDR
// break ;
3223: GO 3227
// end ;
3225: GO 3193
3227: POP
3228: POP
// if not ape then
3229: LD_VAR 0 3
3233: NOT
3234: IFFALSE 3246
// begin DialogueOff ;
3236: CALL_OW 7
// InGameOff ;
3240: CALL_OW 9
// exit ;
3244: GO 3436
// end ; RemoveUnit ( ape ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL_OW 64
// PrepareApeman ( 0 ) ;
3255: LD_INT 0
3257: PPUSH
3258: CALL 63536 0 1
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// hc_name := Mike  ;
3270: LD_ADDR_OWVAR 26
3274: PUSH
3275: LD_STRING Mike 
3277: ST_TO_ADDR
// hc_gallery := us ;
3278: LD_ADDR_OWVAR 33
3282: PUSH
3283: LD_STRING us
3285: ST_TO_ADDR
// hc_face_number := 30 ;
3286: LD_ADDR_OWVAR 34
3290: PUSH
3291: LD_INT 30
3293: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3294: LD_ADDR_OWVAR 29
3298: PUSH
3299: LD_VAR 0 3
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PUSH
3312: LD_VAR 0 3
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: CALL_OW 260
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3329: LD_ADDR_OWVAR 31
3333: PUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: CALL_OW 259
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 259
3359: PUSH
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 259
3372: PUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 4
3380: PPUSH
3381: CALL_OW 259
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: ST_TO_ADDR
// hc_sex := sex_male ;
3392: LD_ADDR_OWVAR 27
3396: PUSH
3397: LD_INT 1
3399: ST_TO_ADDR
// Mike := CreateHuman ;
3400: LD_ADDR_EXP 27
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3410: LD_EXP 27
3414: PPUSH
3415: LD_VAR 0 4
3419: PPUSH
3420: CALL_OW 52
// InitHc_All ( ) ;
3424: CALL_OW 584
// DialogueOff ;
3428: CALL_OW 7
// InGameOff ;
3432: CALL_OW 9
// end ;
3436: PPOPN 4
3438: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3439: LD_INT 22
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 25
3451: PUSH
3452: LD_INT 16
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PPUSH
3463: CALL_OW 69
3467: IFFALSE 3526
3469: GO 3471
3471: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3472: LD_STRING M1a
3474: PPUSH
3475: CALL_OW 337
// case Query ( Q2 ) of 1 :
3479: LD_STRING Q2
3481: PPUSH
3482: CALL_OW 97
3486: PUSH
3487: LD_INT 1
3489: DOUBLE
3490: EQUAL
3491: IFTRUE 3495
3493: GO 3506
3495: POP
// end_mission := true ; 2 :
3496: LD_ADDR_EXP 14
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
3504: GO 3526
3506: LD_INT 2
3508: DOUBLE
3509: EQUAL
3510: IFTRUE 3514
3512: GO 3525
3514: POP
// end_the_mission_allowed := true ; end ;
3515: LD_ADDR_OWVAR 57
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
3523: GO 3526
3525: POP
// end ;
3526: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 30
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 30
3552: PUSH
3553: LD_INT 7
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 2
3586: PUSH
3587: LD_INT 30
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: AND
3621: PUSH
3622: LD_EXP 6
3626: AND
3627: IFFALSE 4142
3629: GO 3631
3631: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3632: LD_INT 1050
3634: PPUSH
3635: LD_INT 1750
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3647: LD_EXP 20
3651: PPUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 9
3657: PUSH
3658: LD_INT 10
3660: PUSH
3661: LD_INT 16
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: PUSH
3670: LD_OWVAR 67
3674: ARRAY
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// ComHold ( Denis ) ;
3683: LD_EXP 20
3687: PPUSH
3688: CALL_OW 140
// InGameOn ;
3692: CALL_OW 8
// DialogueOn ;
3696: CALL_OW 6
// if Delta then
3700: LD_EXP 6
3704: IFFALSE 3717
// CenterNowOnUnits ( Delta ) else
3706: LD_EXP 6
3710: PPUSH
3711: CALL_OW 87
3715: GO 3726
// CenterNowOnUnits ( JMM ) ;
3717: LD_EXP 17
3721: PPUSH
3722: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3726: LD_EXP 20
3730: PPUSH
3731: LD_STRING DD-Den-1
3733: PPUSH
3734: CALL 71187 0 2
// Say ( JMM , DD-JMM-1 ) ;
3738: LD_EXP 17
3742: PPUSH
3743: LD_STRING DD-JMM-1
3745: PPUSH
3746: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3750: LD_EXP 20
3754: PPUSH
3755: LD_STRING DD-Den-2
3757: PPUSH
3758: CALL 71187 0 2
// Wait ( 3 ) ;
3762: LD_INT 3
3764: PPUSH
3765: CALL_OW 67
// DialogueOff ;
3769: CALL_OW 7
// InGameOff ;
3773: CALL_OW 9
// if Difficulty = 1 then
3777: LD_OWVAR 67
3781: PUSH
3782: LD_INT 1
3784: EQUAL
3785: IFFALSE 3861
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3787: LD_EXP 20
3791: PPUSH
3792: CALL_OW 250
3796: PPUSH
3797: LD_EXP 20
3801: PPUSH
3802: CALL_OW 251
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_INT 12
3812: NEG
3813: PPUSH
3814: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3818: LD_EXP 20
3822: PPUSH
3823: CALL_OW 87
// wait ( 0 0$5 ) ;
3827: LD_INT 175
3829: PPUSH
3830: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3834: LD_EXP 20
3838: PPUSH
3839: CALL_OW 250
3843: PPUSH
3844: LD_EXP 20
3848: PPUSH
3849: CALL_OW 251
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3868: LD_INT 1
3870: PPUSH
3871: LD_EXP 20
3875: PPUSH
3876: CALL_OW 292
3880: PUSH
3881: LD_EXP 20
3885: PPUSH
3886: CALL_OW 301
3890: OR
3891: IFFALSE 3861
// if IsDead ( Denis ) then
3893: LD_EXP 20
3897: PPUSH
3898: CALL_OW 301
3902: IFFALSE 3906
// exit ;
3904: GO 4142
// SetSide ( Denis , 1 ) ;
3906: LD_EXP 20
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3918: LD_EXP 20
3922: PPUSH
3923: LD_STRING DD-Den-2a
3925: PPUSH
3926: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3930: LD_INT 35
3932: PPUSH
3933: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3937: LD_EXP 20
3941: PPUSH
3942: CALL_OW 310
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 6
3954: PUSH
3955: LD_INT 7
3957: PUSH
3958: LD_INT 8
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: IN
3966: PUSH
3967: LD_EXP 20
3971: PPUSH
3972: CALL_OW 301
3976: OR
3977: IFFALSE 3930
// if IsDead ( Denis ) then
3979: LD_EXP 20
3983: PPUSH
3984: CALL_OW 301
3988: IFFALSE 3992
// exit ;
3990: GO 4142
// Say ( Denis , DD-Den-2b ) ;
3992: LD_EXP 20
3996: PPUSH
3997: LD_STRING DD-Den-2b
3999: PPUSH
4000: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4004: LD_EXP 20
4008: PPUSH
4009: LD_INT 4
4011: PPUSH
4012: CALL_OW 123
// Wait ( 0 0$02 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// DialogueOn ;
4023: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4027: LD_EXP 20
4031: PPUSH
4032: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4036: LD_EXP 17
4040: PPUSH
4041: LD_STRING D4-JMM-1
4043: PPUSH
4044: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4048: LD_EXP 20
4052: PPUSH
4053: LD_STRING D4-Den-1
4055: PPUSH
4056: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4060: LD_EXP 17
4064: PPUSH
4065: LD_STRING D4-JMM-2
4067: PPUSH
4068: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4072: LD_EXP 20
4076: PPUSH
4077: LD_STRING D4-Den-2
4079: PPUSH
4080: CALL_OW 88
// DialogueOff ;
4084: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4088: LD_STRING M2
4090: PPUSH
4091: CALL_OW 337
// radar_allowed := true ;
4095: LD_ADDR_EXP 7
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4103: LD_INT 6
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4116: LD_INT 15
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4129: LD_INT 20
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: CALL_OW 324
// end ;
4142: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4143: LD_EXP 13
4147: IFFALSE 4770
4149: GO 4151
4151: DISABLE
4152: LD_INT 0
4154: PPUSH
4155: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4156: LD_ADDR_VAR 0 1
4160: PUSH
4161: LD_EXP 28
4165: PPUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 72
4180: PPUSH
4181: LD_STRING D5-Sol1-1
4183: PPUSH
4184: CALL 718 0 2
4188: ST_TO_ADDR
// if not sol then
4189: LD_VAR 0 1
4193: NOT
4194: IFFALSE 4198
// exit ;
4196: GO 4770
// repeat wait ( 0 0$01 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4205: LD_INT 22
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 21
4217: PUSH
4218: LD_INT 1
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 69
4233: PUSH
4234: LD_INT 0
4236: EQUAL
4237: IFFALSE 4198
// if IsOk ( sol ) then
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 302
4248: IFFALSE 4268
// begin sol2 := others diff sol ;
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_EXP 28
4259: PUSH
4260: LD_VAR 0 1
4264: DIFF
4265: ST_TO_ADDR
// end else
4266: GO 4270
// exit ;
4268: GO 4770
// if not Lisa and not sol2 then
4270: LD_EXP 23
4274: NOT
4275: PUSH
4276: LD_VAR 0 2
4280: NOT
4281: AND
4282: IFFALSE 4286
// exit ;
4284: GO 4770
// DialogueOn ;
4286: CALL_OW 6
// if Lisa then
4290: LD_EXP 23
4294: IFFALSE 4310
// Say ( Lisa , D5a-Lisa-1 ) else
4296: LD_EXP 23
4300: PPUSH
4301: LD_STRING D5a-Lisa-1
4303: PPUSH
4304: CALL_OW 88
4308: GO 4385
// if sol2 then
4310: LD_VAR 0 2
4314: IFFALSE 4385
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4316: LD_VAR 0 2
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: CALL_OW 258
4329: PUSH
4330: LD_INT 1
4332: DOUBLE
4333: EQUAL
4334: IFTRUE 4338
4336: GO 4357
4338: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4339: LD_VAR 0 2
4343: PUSH
4344: LD_INT 1
4346: ARRAY
4347: PPUSH
4348: LD_STRING D5-Sol2-1
4350: PPUSH
4351: CALL_OW 88
4355: GO 4385
4357: LD_INT 2
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4384
4365: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4366: LD_VAR 0 2
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PPUSH
4375: LD_STRING D5-FSol2-1
4377: PPUSH
4378: CALL_OW 88
4382: GO 4385
4384: POP
// Say ( sol , D5-Sol1-2 ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING D5-Sol1-2
4392: PPUSH
4393: CALL_OW 88
// if Lisa then
4397: LD_EXP 23
4401: IFFALSE 4417
// Say ( Lisa , D5a-Lisa-2 ) else
4403: LD_EXP 23
4407: PPUSH
4408: LD_STRING D5a-Lisa-2
4410: PPUSH
4411: CALL_OW 88
4415: GO 4492
// if sol2 then
4417: LD_VAR 0 2
4421: IFFALSE 4492
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4423: LD_VAR 0 2
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 258
4436: PUSH
4437: LD_INT 1
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4464
4445: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4446: LD_VAR 0 2
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_STRING D5-Sol2-2
4457: PPUSH
4458: CALL_OW 88
4462: GO 4492
4464: LD_INT 2
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4491
4472: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4473: LD_VAR 0 2
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_STRING D5-FSol2-2
4484: PPUSH
4485: CALL_OW 88
4489: GO 4492
4491: POP
// Say ( sol , D5a-Sol1-3 ) ;
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_STRING D5a-Sol1-3
4499: PPUSH
4500: CALL_OW 88
// if Lisa then
4504: LD_EXP 23
4508: IFFALSE 4522
// Say ( Lisa , D5a-Lisa-3 ) ;
4510: LD_EXP 23
4514: PPUSH
4515: LD_STRING D5a-Lisa-3
4517: PPUSH
4518: CALL_OW 88
// if not sol2 then
4522: LD_VAR 0 2
4526: NOT
4527: IFFALSE 4535
// begin DialogueOff ;
4529: CALL_OW 7
// exit ;
4533: GO 4770
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4535: LD_VAR 0 2
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 258
4548: PUSH
4549: LD_INT 1
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4576
4557: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4558: LD_VAR 0 2
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: LD_STRING D5-Sol2-3
4569: PPUSH
4570: CALL_OW 88
4574: GO 4604
4576: LD_INT 2
4578: DOUBLE
4579: EQUAL
4580: IFTRUE 4584
4582: GO 4603
4584: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4585: LD_VAR 0 2
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PPUSH
4594: LD_STRING D5-FSol2-3
4596: PPUSH
4597: CALL_OW 88
4601: GO 4604
4603: POP
// Say ( sol , D5-Sol1-4 ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_STRING D5-Sol1-4
4611: PPUSH
4612: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: CALL_OW 258
4629: PUSH
4630: LD_INT 1
4632: DOUBLE
4633: EQUAL
4634: IFTRUE 4638
4636: GO 4657
4638: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4639: LD_VAR 0 2
4643: PUSH
4644: LD_INT 1
4646: ARRAY
4647: PPUSH
4648: LD_STRING D5-Sol2-4
4650: PPUSH
4651: CALL_OW 88
4655: GO 4685
4657: LD_INT 2
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4684
4665: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4666: LD_VAR 0 2
4670: PUSH
4671: LD_INT 1
4673: ARRAY
4674: PPUSH
4675: LD_STRING D5-FSol2-4
4677: PPUSH
4678: CALL_OW 88
4682: GO 4685
4684: POP
// Say ( sol , D5-Sol1-5 ) ;
4685: LD_VAR 0 1
4689: PPUSH
4690: LD_STRING D5-Sol1-5
4692: PPUSH
4693: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4697: LD_VAR 0 2
4701: PUSH
4702: LD_INT 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 258
4710: PUSH
4711: LD_INT 1
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4738
4719: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: LD_STRING D5-Sol2-5
4731: PPUSH
4732: CALL_OW 88
4736: GO 4766
4738: LD_INT 2
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4765
4746: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4747: LD_VAR 0 2
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: LD_STRING D5-FSol2-5
4758: PPUSH
4759: CALL_OW 88
4763: GO 4766
4765: POP
// DialogueOff ;
4766: CALL_OW 7
// end ;
4770: PPOPN 2
4772: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4773: LD_INT 22
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 16
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 69
4801: PUSH
4802: LD_INT 5
4804: GREATEREQUAL
4805: IFFALSE 4825
4807: GO 4809
4809: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4810: LD_STRING M1b
4812: PPUSH
4813: CALL_OW 337
// apeman_army := true ;
4817: LD_ADDR_EXP 9
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// end ;
4825: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4826: LD_INT 22
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 57
4848: PUSH
4849: EMPTY
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: IFFALSE 4873
4863: GO 4865
4865: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4866: LD_STRING M1c
4868: PPUSH
4869: CALL_OW 337
4873: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4874: LD_INT 6
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 321
4884: PUSH
4885: LD_INT 2
4887: EQUAL
4888: IFFALSE 4908
4890: GO 4892
4892: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4893: LD_STRING M2a
4895: PPUSH
4896: CALL_OW 337
// radar_researched := true ;
4900: LD_ADDR_EXP 10
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// end ;
4908: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4909: LD_INT 22
4911: PUSH
4912: LD_INT 1
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 34
4924: PUSH
4925: LD_INT 11
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 35
4934: PUSH
4935: LD_INT 11
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: IFFALSE 4975
4957: GO 4959
4959: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4960: LD_STRING M2b
4962: PPUSH
4963: CALL_OW 337
// radar_builded := true ;
4967: LD_ADDR_EXP 11
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4976: LD_INT 22
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 12
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 69
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: PUSH
5009: LD_EXP 8
5013: NOT
5014: AND
5015: IFFALSE 5027
5017: GO 5019
5019: DISABLE
// YouLost ( Apeman ) ;
5020: LD_STRING Apeman
5022: PPUSH
5023: CALL_OW 104
5027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5028: LD_INT 22
5030: PUSH
5031: LD_INT 1
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 25
5040: PUSH
5041: LD_INT 16
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: PUSH
5057: LD_INT 7
5059: GREATEREQUAL
5060: IFFALSE 5158
5062: GO 5064
5064: DISABLE
5065: LD_INT 0
5067: PPUSH
5068: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5069: LD_ADDR_VAR 0 2
5073: PUSH
5074: LD_INT 22
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 21
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 25
5096: PUSH
5097: LD_INT 4
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 69
5113: PUSH
5114: LD_EXP 17
5118: ADD
5119: ST_TO_ADDR
// if filter then
5120: LD_VAR 0 2
5124: IFFALSE 5158
// for i in filter do
5126: LD_ADDR_VAR 0 1
5130: PUSH
5131: LD_VAR 0 2
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5156
// AddExperience ( i , 4 , 3500 ) ;
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 4
5146: PPUSH
5147: LD_INT 3500
5149: PPUSH
5150: CALL_OW 492
5154: GO 5136
5156: POP
5157: POP
// end ;
5158: PPOPN 2
5160: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5161: LD_EXP 14
5165: IFFALSE 6348
5167: GO 5169
5169: DISABLE
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
5176: PPUSH
// begin if apeKillCounter = 0 then
5177: LD_EXP 15
5181: PUSH
5182: LD_INT 0
5184: EQUAL
5185: IFFALSE 5194
// SetAchievement ( ACH_APEKILLER ) ;
5187: LD_STRING ACH_APEKILLER
5189: PPUSH
5190: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5194: LD_INT 22
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: IFFALSE 5246
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5210: LD_ADDR_VAR 0 1
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 2
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 69
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5244
// RemoveUnit ( i ) ;
5233: LD_VAR 0 1
5237: PPUSH
5238: CALL_OW 64
5242: GO 5230
5244: POP
5245: POP
// m1 := false ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m2 := false ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// m3 := false ;
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: LD_INT 0
5269: ST_TO_ADDR
// if apeman_army then
5270: LD_EXP 9
5274: IFFALSE 5296
// begin AddMedal ( Tame , 1 ) ;
5276: LD_STRING Tame
5278: PPUSH
5279: LD_INT 1
5281: PPUSH
5282: CALL_OW 101
// m1 := true ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// end else
5294: GO 5307
// AddMedal ( Tame , - 1 ) ;
5296: LD_STRING Tame
5298: PPUSH
5299: LD_INT 1
5301: NEG
5302: PPUSH
5303: CALL_OW 101
// if radar_researched then
5307: LD_EXP 10
5311: IFFALSE 5343
// begin SaveVariable ( true , radarResInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING radarResInDelta
5318: PPUSH
5319: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5323: LD_STRING Radar
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 101
// m2 := true ;
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// end else
5341: GO 5373
// if radar_allowed then
5343: LD_EXP 7
5347: IFFALSE 5362
// AddMedal ( Radar , - 2 ) else
5349: LD_STRING Radar
5351: PPUSH
5352: LD_INT 2
5354: NEG
5355: PPUSH
5356: CALL_OW 101
5360: GO 5373
// AddMedal ( Radar , - 1 ) ;
5362: LD_STRING Radar
5364: PPUSH
5365: LD_INT 1
5367: NEG
5368: PPUSH
5369: CALL_OW 101
// if radar_builded then
5373: LD_EXP 11
5377: IFFALSE 5399
// begin AddMedal ( BuildRadar , 1 ) ;
5379: LD_STRING BuildRadar
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 101
// m3 := true ;
5389: LD_ADDR_VAR 0 5
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// end else
5397: GO 5410
// AddMedal ( BuildRadar , - 1 ) ;
5399: LD_STRING BuildRadar
5401: PPUSH
5402: LD_INT 1
5404: NEG
5405: PPUSH
5406: CALL_OW 101
// if tick <= 7 7$00 then
5410: LD_OWVAR 1
5414: PUSH
5415: LD_INT 14700
5417: LESSEQUAL
5418: IFFALSE 5427
// SetAchievement ( ACH_ASPEED_5 ) ;
5420: LD_STRING ACH_ASPEED_5
5422: PPUSH
5423: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_VAR 0 4
5436: AND
5437: PUSH
5438: LD_VAR 0 5
5442: AND
5443: PUSH
5444: LD_OWVAR 67
5448: PUSH
5449: LD_INT 3
5451: GREATEREQUAL
5452: AND
5453: IFFALSE 5465
// SetAchievementEX ( ACH_AMER , 5 ) ;
5455: LD_STRING ACH_AMER
5457: PPUSH
5458: LD_INT 5
5460: PPUSH
5461: CALL_OW 564
// GiveMedals ( MAIN ) ;
5465: LD_STRING MAIN
5467: PPUSH
5468: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_INT 22
5479: PUSH
5480: LD_INT 1
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 21
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 2
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 25
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 25
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 25
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5566: LD_EXP 17
5570: PPUSH
5571: LD_EXP 2
5575: PUSH
5576: LD_STRING JMM
5578: STR
5579: PPUSH
5580: CALL_OW 38
// if IsOk ( Gladstone ) then
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 302
5593: IFFALSE 5620
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5595: LD_STRING enableBioCharacter(BIO_TIM)
5597: PPUSH
5598: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5602: LD_EXP 18
5606: PPUSH
5607: LD_EXP 2
5611: PUSH
5612: LD_STRING Gladstone
5614: STR
5615: PPUSH
5616: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5620: LD_EXP 20
5624: PPUSH
5625: CALL_OW 302
5629: PUSH
5630: LD_EXP 20
5634: PPUSH
5635: CALL_OW 255
5639: PUSH
5640: LD_INT 1
5642: EQUAL
5643: AND
5644: IFFALSE 5681
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5646: LD_STRING enableBioCharacter(BIO_DENIS)
5648: PPUSH
5649: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5653: LD_EXP 20
5657: PPUSH
5658: LD_EXP 2
5662: PUSH
5663: LD_STRING Denis
5665: STR
5666: PPUSH
5667: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5671: LD_INT 1
5673: PPUSH
5674: LD_STRING DenisInDelta
5676: PPUSH
5677: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5681: LD_EXP 23
5685: PPUSH
5686: CALL_OW 302
5690: IFFALSE 5710
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5692: LD_EXP 23
5696: PPUSH
5697: LD_EXP 2
5701: PUSH
5702: LD_STRING Lisa
5704: STR
5705: PPUSH
5706: CALL_OW 38
// end ; if IsOk ( Frank ) then
5710: LD_EXP 24
5714: PPUSH
5715: CALL_OW 302
5719: IFFALSE 5739
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5721: LD_EXP 24
5725: PPUSH
5726: LD_EXP 2
5730: PUSH
5731: LD_STRING Frank
5733: STR
5734: PPUSH
5735: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5739: LD_EXP 25
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5768
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5750: LD_EXP 25
5754: PPUSH
5755: LD_EXP 2
5759: PUSH
5760: LD_STRING Bobby
5762: STR
5763: PPUSH
5764: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5768: LD_EXP 26
5772: PPUSH
5773: CALL_OW 302
5777: IFFALSE 5797
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5779: LD_EXP 26
5783: PPUSH
5784: LD_EXP 2
5788: PUSH
5789: LD_STRING Cyrus
5791: STR
5792: PPUSH
5793: CALL_OW 38
// end ; if IsOk ( Brown ) then
5797: LD_EXP 21
5801: PPUSH
5802: CALL_OW 302
5806: IFFALSE 5826
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5808: LD_EXP 21
5812: PPUSH
5813: LD_EXP 2
5817: PUSH
5818: LD_STRING Brown
5820: STR
5821: PPUSH
5822: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5826: LD_EXP 22
5830: PPUSH
5831: CALL_OW 302
5835: IFFALSE 5855
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5837: LD_EXP 22
5841: PPUSH
5842: LD_EXP 2
5846: PUSH
5847: LD_STRING Donaldson
5849: STR
5850: PPUSH
5851: CALL_OW 38
// end ; if IsOk ( Mike ) then
5855: LD_EXP 27
5859: PPUSH
5860: CALL_OW 302
5864: IFFALSE 5884
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5866: LD_EXP 27
5870: PPUSH
5871: LD_EXP 2
5875: PUSH
5876: LD_STRING Mike
5878: STR
5879: PPUSH
5880: CALL_OW 38
// if others then
5884: LD_EXP 28
5888: IFFALSE 5902
// SaveCharacters ( others , othersInDelta ) ;
5890: LD_EXP 28
5894: PPUSH
5895: LD_STRING othersInDelta
5897: PPUSH
5898: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5902: LD_INT 22
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 16
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PPUSH
5926: CALL_OW 69
5930: IFFALSE 5974
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 25
5944: PUSH
5945: LD_INT 16
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: CALL_OW 69
5960: PUSH
5961: LD_EXP 27
5965: DIFF
5966: PPUSH
5967: LD_STRING apeInDelta
5969: PPUSH
5970: CALL_OW 38
// tmp := [ ] ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: EMPTY
5980: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5981: LD_INT 22
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: IFFALSE 6120
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6011: LD_ADDR_VAR 0 1
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6118
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: LD_VAR 0 2
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 248
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 265
6077: PUSH
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 262
6087: PUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 263
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 264
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ADD
6115: ST_TO_ADDR
6116: GO 6045
6118: POP
6119: POP
// if tmp then
6120: LD_VAR 0 2
6124: IFFALSE 6138
// SaveVariable ( tmp , vehiclesInDelta ) ;
6126: LD_VAR 0 2
6130: PPUSH
6131: LD_STRING vehiclesInDelta
6133: PPUSH
6134: CALL_OW 39
// tmp := [ ] ;
6138: LD_ADDR_VAR 0 2
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6145: LD_INT 22
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PPUSH
6169: CALL_OW 69
6173: IFFALSE 6326
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_INT 22
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6324
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 266
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 267
6241: PUSH
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL_OW 250
6251: PUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 251
6261: PUSH
6262: LD_VAR 0 1
6266: PPUSH
6267: CALL_OW 254
6271: PUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_INT 1
6279: PPUSH
6280: CALL_OW 268
6284: PUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: LD_INT 2
6292: PPUSH
6293: CALL_OW 268
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 269
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: ADD
6321: ST_TO_ADDR
6322: GO 6209
6324: POP
6325: POP
// if tmp then
6326: LD_VAR 0 2
6330: IFFALSE 6344
// SaveVariable ( tmp , buildingsInDelta ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_STRING buildingsInDelta
6339: PPUSH
6340: CALL_OW 39
// YouWin ;
6344: CALL_OW 103
// end ; end_of_file
6348: PPOPN 5
6350: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6351: LD_INT 0
6353: PPUSH
6354: PPUSH
6355: PPUSH
6356: PPUSH
// InitHc ;
6357: CALL_OW 19
// InitUc ;
6361: CALL_OW 18
// uc_side := 2 ;
6365: LD_ADDR_OWVAR 20
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// uc_nation := 2 ;
6373: LD_ADDR_OWVAR 21
6377: PUSH
6378: LD_INT 2
6380: ST_TO_ADDR
// if not amount then
6381: LD_VAR 0 1
6385: NOT
6386: IFFALSE 6390
// exit ;
6388: GO 6513
// for i = 1 to amount do
6390: LD_ADDR_VAR 0 5
6394: PUSH
6395: DOUBLE
6396: LD_INT 1
6398: DEC
6399: ST_TO_ADDR
6400: LD_VAR 0 1
6404: PUSH
6405: FOR_TO
6406: IFFALSE 6501
// begin PrepareHuman ( false , 1 , skill ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 1
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 380
// un := CreateHuman ;
6423: LD_ADDR_VAR 0 6
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6433: LD_ADDR_VAR 0 7
6437: PUSH
6438: LD_VAR 0 7
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: LD_VAR 0 6
6450: PPUSH
6451: CALL_OW 2
6455: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6456: LD_VAR 0 6
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 49
// if i mod 2 = 0 then
6473: LD_VAR 0 5
6477: PUSH
6478: LD_INT 2
6480: MOD
6481: PUSH
6482: LD_INT 0
6484: EQUAL
6485: IFFALSE 6499
// SetTag ( un , 11 ) ;
6487: LD_VAR 0 6
6491: PPUSH
6492: LD_INT 11
6494: PPUSH
6495: CALL_OW 109
// end ;
6499: GO 6405
6501: POP
6502: POP
// result := tmp ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: LD_VAR 0 7
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 4
6517: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6518: LD_EXP 6
6522: IFFALSE 7607
6524: GO 6526
6526: DISABLE
6527: LD_INT 0
6529: PPUSH
6530: PPUSH
6531: PPUSH
6532: PPUSH
6533: PPUSH
6534: PPUSH
6535: PPUSH
6536: PPUSH
// begin more_troops := false ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 5
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_OWVAR 67
6572: ARRAY
6573: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6574: LD_ADDR_VAR 0 2
6578: PUSH
6579: LD_INT 10500
6581: PUSH
6582: LD_INT 8400
6584: PUSH
6585: LD_INT 6300
6587: PUSH
6588: LD_INT 5250
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: PUSH
6597: LD_OWVAR 67
6601: ARRAY
6602: ST_TO_ADDR
// force := [ ] ;
6603: LD_ADDR_VAR 0 8
6607: PUSH
6608: EMPTY
6609: ST_TO_ADDR
// ar_forces := [ ] ;
6610: LD_ADDR_EXP 29
6614: PUSH
6615: EMPTY
6616: ST_TO_ADDR
// ap_killers := [ ] ;
6617: LD_ADDR_EXP 30
6621: PUSH
6622: EMPTY
6623: ST_TO_ADDR
// Wait ( timer ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6633: LD_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: CALL_OW 255
6647: PUSH
6648: LD_INT 4
6650: EQUAL
6651: AND
6652: IFFALSE 6661
// Wait ( 0 0$45 ) ;
6654: LD_INT 1575
6656: PPUSH
6657: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6661: LD_INT 22
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 30
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: IFFALSE 6706
// begin wait ( 1 1$25 ) ;
6691: LD_INT 2975
6693: PPUSH
6694: CALL_OW 67
// more_troops := true ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// end ; if more_troops then
6706: LD_VAR 0 3
6710: IFFALSE 6906
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6712: LD_ADDR_VAR 0 8
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: LD_INT 6
6725: PUSH
6726: LD_INT 7
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 6351 0 3
6753: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6754: LD_ADDR_VAR 0 7
6758: PUSH
6759: LD_INT 2
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: LD_INT 22
6767: PPUSH
6768: LD_INT 1
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 42
6776: PUSH
6777: LD_INT 42
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: LD_INT 44
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: LD_OWVAR 67
6796: ARRAY
6797: PPUSH
6798: LD_INT 90
6800: PPUSH
6801: CALL 443 0 7
6805: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6806: LD_VAR 0 7
6810: PPUSH
6811: LD_INT 4
6813: PPUSH
6814: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6818: LD_VAR 0 7
6822: PPUSH
6823: LD_INT 13
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 49
// uc_side := 2 ;
6833: LD_ADDR_OWVAR 20
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// uc_nation := 2 ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 2
6848: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6849: LD_INT 0
6851: PPUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_VAR 0 4
6859: PPUSH
6860: CALL_OW 380
// un := CreateHuman ;
6864: LD_ADDR_VAR 0 6
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6874: LD_VAR 0 6
6878: PPUSH
6879: LD_VAR 0 7
6883: PPUSH
6884: CALL_OW 52
// force := force ^ un ;
6888: LD_ADDR_VAR 0 8
6892: PUSH
6893: LD_VAR 0 8
6897: PUSH
6898: LD_VAR 0 6
6902: ADD
6903: ST_TO_ADDR
// end else
6904: GO 6948
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6906: LD_ADDR_VAR 0 8
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 6
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_OWVAR 67
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 14
6942: PPUSH
6943: CALL 6351 0 3
6947: ST_TO_ADDR
// end ; if force then
6948: LD_VAR 0 8
6952: IFFALSE 6964
// ar_forces := force ;
6954: LD_ADDR_EXP 29
6958: PUSH
6959: LD_VAR 0 8
6963: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6964: LD_INT 35
6966: PPUSH
6967: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6971: LD_INT 22
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 69
6999: PUSH
7000: LD_INT 0
7002: EQUAL
7003: IFFALSE 6964
// wait ( timer ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7014: LD_ADDR_VAR 0 8
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: LD_INT 5
7024: PUSH
7025: LD_INT 6
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_OWVAR 67
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 13
7050: PUSH
7051: LD_INT 14
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 2
7063: PPUSH
7064: CALL_OW 12
7068: ARRAY
7069: PPUSH
7070: CALL 6351 0 3
7074: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7075: LD_OWVAR 67
7079: PUSH
7080: LD_INT 1
7082: GREATER
7083: PUSH
7084: LD_EXP 6
7088: AND
7089: IFFALSE 7168
// begin uc_side := 2 ;
7091: LD_ADDR_OWVAR 20
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// uc_nation := 2 ;
7099: LD_ADDR_OWVAR 21
7103: PUSH
7104: LD_INT 2
7106: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7107: LD_INT 0
7109: PPUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 380
// eng := CreateHuman ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: CALL_OW 44
7131: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_INT 13
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// Wait ( 3 ) ;
7147: LD_INT 3
7149: PPUSH
7150: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7154: LD_VAR 0 5
7158: PPUSH
7159: LD_EXP 6
7163: PPUSH
7164: CALL_OW 180
// end ; if force then
7168: LD_VAR 0 8
7172: IFFALSE 7184
// ar_forces := force ;
7174: LD_ADDR_EXP 29
7178: PUSH
7179: LD_VAR 0 8
7183: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7184: LD_INT 35
7186: PPUSH
7187: CALL_OW 67
// if eng then
7191: LD_VAR 0 5
7195: IFFALSE 7249
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7197: LD_EXP 6
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: LD_INT 2
7209: EQUAL
7210: PUSH
7211: LD_VAR 0 5
7215: PPUSH
7216: CALL_OW 302
7220: AND
7221: PUSH
7222: LD_VAR 0 5
7226: PPUSH
7227: CALL_OW 310
7231: NOT
7232: AND
7233: IFFALSE 7249
// ComEnterUnit ( eng , Delta ) ;
7235: LD_VAR 0 5
7239: PPUSH
7240: LD_EXP 6
7244: PPUSH
7245: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7249: LD_INT 22
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 21
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PUSH
7278: LD_INT 0
7280: EQUAL
7281: IFFALSE 7184
// Wait ( 2 2$00 ) ;
7283: LD_INT 4200
7285: PPUSH
7286: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7290: LD_ADDR_EXP 30
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 2
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: LD_OWVAR 67
7317: ARRAY
7318: PPUSH
7319: LD_VAR 0 4
7323: PPUSH
7324: LD_INT 13
7326: PPUSH
7327: CALL 6351 0 3
7331: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 2
7339: MUL
7340: PPUSH
7341: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7345: LD_ADDR_EXP 29
7349: PUSH
7350: LD_INT 5
7352: PUSH
7353: LD_INT 6
7355: PUSH
7356: LD_INT 7
7358: PUSH
7359: LD_INT 8
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_OWVAR 67
7372: ARRAY
7373: PPUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 13
7381: PPUSH
7382: CALL 6351 0 3
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: LD_INT 4
7395: PUSH
7396: LD_INT 4
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: LD_VAR 0 4
7415: PPUSH
7416: LD_INT 14
7418: PPUSH
7419: CALL 6351 0 3
7423: ADD
7424: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7425: LD_OWVAR 67
7429: PUSH
7430: LD_INT 4
7432: LESS
7433: PUSH
7434: LD_EXP 16
7438: NOT
7439: AND
7440: IFFALSE 7444
// exit ;
7442: GO 7607
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 2
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: LD_INT 22
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: LD_INT 44
7466: PPUSH
7467: LD_INT 90
7469: PPUSH
7470: CALL 443 0 7
7474: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7475: LD_VAR 0 7
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7487: LD_VAR 0 7
7491: PPUSH
7492: LD_INT 28
7494: PPUSH
7495: LD_INT 51
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: CALL_OW 48
// uc_side := 2 ;
7505: LD_ADDR_OWVAR 20
7509: PUSH
7510: LD_INT 2
7512: ST_TO_ADDR
// uc_nation := 2 ;
7513: LD_ADDR_OWVAR 21
7517: PUSH
7518: LD_INT 2
7520: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7521: LD_INT 0
7523: PPUSH
7524: LD_INT 1
7526: PPUSH
7527: LD_VAR 0 4
7531: PPUSH
7532: CALL_OW 380
// un := CreateHuman ;
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: CALL_OW 44
7545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7546: LD_VAR 0 6
7550: PPUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7560: LD_ADDR_EXP 29
7564: PUSH
7565: LD_EXP 29
7569: PPUSH
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL 67268 0 2
7579: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7580: LD_ADDR_EXP 29
7584: PUSH
7585: LD_EXP 29
7589: PUSH
7590: LD_INT 4
7592: PPUSH
7593: LD_VAR 0 4
7597: PPUSH
7598: LD_INT 19
7600: PPUSH
7601: CALL 6351 0 3
7605: UNION
7606: ST_TO_ADDR
// end ;
7607: PPOPN 8
7609: END
// every 0 0$03 trigger ar_forces do var i , target ;
7610: LD_EXP 29
7614: IFFALSE 7812
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
7622: PPUSH
// begin enable ;
7623: ENABLE
// if not ar_forces then
7624: LD_EXP 29
7628: NOT
7629: IFFALSE 7633
// exit ;
7631: GO 7812
// if Delta then
7633: LD_EXP 6
7637: IFFALSE 7651
// target := Delta else
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_EXP 6
7648: ST_TO_ADDR
7649: GO 7661
// target := JMM ;
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_EXP 17
7660: ST_TO_ADDR
// for i in ar_forces do
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_EXP 29
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7810
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7674: LD_VAR 0 1
7678: PUSH
7679: LD_INT 55
7681: PUSH
7682: EMPTY
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: IN
7690: IFFALSE 7733
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_INT 22
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: PPUSH
7712: LD_VAR 0 1
7716: PPUSH
7717: CALL_OW 310
7721: PPUSH
7722: CALL_OW 74
7726: PPUSH
7727: CALL_OW 115
7731: GO 7808
// if GetDistUnits ( i , target ) > 30 then
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_VAR 0 2
7742: PPUSH
7743: CALL_OW 296
7747: PUSH
7748: LD_INT 30
7750: GREATER
7751: IFFALSE 7784
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: CALL_OW 250
7767: PPUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: CALL_OW 251
7777: PPUSH
7778: CALL_OW 114
7782: GO 7808
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: LD_INT 81
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: PPUSH
7804: CALL 935 0 2
// end ;
7808: GO 7671
7810: POP
7811: POP
// end ;
7812: PPOPN 2
7814: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7815: LD_EXP 30
7819: IFFALSE 7979
7821: GO 7823
7823: DISABLE
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
7828: PPUSH
// begin enable ;
7829: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 0
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 12
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
// if not filter then
7864: LD_VAR 0 1
7868: NOT
7869: IFFALSE 7896
// begin ar_forces := ar_forces ^ ap_killers ;
7871: LD_ADDR_EXP 29
7875: PUSH
7876: LD_EXP 29
7880: PUSH
7881: LD_EXP 30
7885: ADD
7886: ST_TO_ADDR
// ap_killers := [ ] ;
7887: LD_ADDR_EXP 30
7891: PUSH
7892: EMPTY
7893: ST_TO_ADDR
// exit ;
7894: GO 7979
// end ; for i in ap_killers do
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_EXP 30
7905: PUSH
7906: FOR_IN
7907: IFFALSE 7977
// begin if not IsOk ( i ) then
7909: LD_VAR 0 2
7913: PPUSH
7914: CALL_OW 302
7918: NOT
7919: IFFALSE 7923
// continue ;
7921: GO 7906
// if not HasTask ( i ) then
7923: LD_VAR 0 2
7927: PPUSH
7928: CALL_OW 314
7932: NOT
7933: IFFALSE 7955
// target := NearestUnitToUnit ( filter , i ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PPUSH
7950: CALL_OW 74
7954: ST_TO_ADDR
// if target then
7955: LD_VAR 0 3
7959: IFFALSE 7975
// ComAttackUnit ( i , target ) ;
7961: LD_VAR 0 2
7965: PPUSH
7966: LD_VAR 0 3
7970: PPUSH
7971: CALL_OW 115
// end ;
7975: GO 7906
7977: POP
7978: POP
// end ; end_of_file
7979: PPOPN 3
7981: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7982: LD_EXP 6
7986: IFFALSE 8122
7988: GO 7990
7990: DISABLE
7991: LD_INT 0
7993: PPUSH
7994: PPUSH
7995: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 300
8003: PUSH
8004: LD_INT 250
8006: PUSH
8007: LD_INT 220
8009: PUSH
8010: LD_INT 210
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_OWVAR 67
8023: ARRAY
8024: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8025: LD_INT 1
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: CALL_OW 12
8035: PPUSH
8036: LD_INT 7
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8046: LD_INT 3150
8048: PPUSH
8049: LD_INT 4900
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8061: LD_ADDR_VAR 0 3
8065: PUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 5
8071: PPUSH
8072: CALL_OW 12
8076: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8077: LD_VAR 0 3
8081: PPUSH
8082: LD_INT 7
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: CALL_OW 55
// counter := counter - cr * 10 ;
8092: LD_ADDR_VAR 0 2
8096: PUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 10
8109: MUL
8110: MINUS
8111: ST_TO_ADDR
// until counter <= 0 ;
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 0
8119: LESSEQUAL
8120: IFFALSE 8046
// end ;
8122: PPOPN 3
8124: END
// every 0 0$03 trigger not Delta do var i ;
8125: LD_EXP 6
8129: NOT
8130: IFFALSE 8200
8132: GO 8134
8134: DISABLE
8135: LD_INT 0
8137: PPUSH
// begin for i = 1 to 5 - Difficulty do
8138: LD_ADDR_VAR 0 1
8142: PUSH
8143: DOUBLE
8144: LD_INT 1
8146: DEC
8147: ST_TO_ADDR
8148: LD_INT 5
8150: PUSH
8151: LD_OWVAR 67
8155: MINUS
8156: PUSH
8157: FOR_TO
8158: IFFALSE 8198
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8160: LD_INT 2
8162: PPUSH
8163: LD_INT 5
8165: PPUSH
8166: CALL_OW 12
8170: PPUSH
8171: LD_INT 8
8173: PPUSH
8174: LD_INT 1
8176: PPUSH
8177: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8181: LD_INT 560
8183: PPUSH
8184: LD_INT 1365
8186: PPUSH
8187: CALL_OW 12
8191: PPUSH
8192: CALL_OW 67
// end ;
8196: GO 8157
8198: POP
8199: POP
// end ;
8200: PPOPN 1
8202: END
// every 3 3$00 trigger tick < 15 15$00 do
8203: LD_OWVAR 1
8207: PUSH
8208: LD_INT 31500
8210: LESS
8211: IFFALSE 8271
8213: GO 8215
8215: DISABLE
// begin enable ;
8216: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8217: LD_INT 1
8219: PPUSH
8220: LD_INT 3
8222: PPUSH
8223: CALL_OW 12
8227: PPUSH
8228: LD_INT 1
8230: PPUSH
8231: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8235: LD_INT 1330
8237: PPUSH
8238: LD_INT 2065
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8250: LD_INT 1
8252: PPUSH
8253: LD_INT 4
8255: PPUSH
8256: CALL_OW 12
8260: PPUSH
8261: LD_INT 15
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 55
// end ; end_of_file
8271: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL 24672 0 1
// if un = JMM then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 17
8290: EQUAL
8291: IFFALSE 8300
// YouLost ( JMM ) ;
8293: LD_STRING JMM
8295: PPUSH
8296: CALL_OW 104
// if un = Delta then
8300: LD_VAR 0 1
8304: PUSH
8305: LD_EXP 6
8309: EQUAL
8310: IFFALSE 8333
// begin Delta := 0 ;
8312: LD_ADDR_EXP 6
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 324
// end ; if un in ar_forces then
8333: LD_VAR 0 1
8337: PUSH
8338: LD_EXP 29
8342: IN
8343: IFFALSE 8361
// ar_forces := ar_forces diff un ;
8345: LD_ADDR_EXP 29
8349: PUSH
8350: LD_EXP 29
8354: PUSH
8355: LD_VAR 0 1
8359: DIFF
8360: ST_TO_ADDR
// if un in ap_killers then
8361: LD_VAR 0 1
8365: PUSH
8366: LD_EXP 30
8370: IN
8371: IFFALSE 8389
// ap_killers := ap_killers diff un ;
8373: LD_ADDR_EXP 30
8377: PUSH
8378: LD_EXP 30
8382: PUSH
8383: LD_VAR 0 1
8387: DIFF
8388: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8389: LD_VAR 0 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 25
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: IN
8427: IFFALSE 8443
// apeKillCounter := apeKillCounter + 1 ;
8429: LD_ADDR_EXP 15
8433: PUSH
8434: LD_EXP 15
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ST_TO_ADDR
// end ;
8443: PPOPN 1
8445: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 22
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: IN
8491: PUSH
8492: LD_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: AND
8501: IFFALSE 8511
// traitor := true ;
8503: LD_ADDR_EXP 16
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// end ;
8511: PPOPN 3
8513: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: LD_VAR 0 2
8523: PPUSH
8524: CALL 24792 0 2
// end ;
8528: PPOPN 2
8530: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8531: LD_VAR 0 1
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 2
8544: PUSH
8545: LD_INT 2
8547: EQUAL
8548: AND
8549: PUSH
8550: LD_EXP 13
8554: NOT
8555: AND
8556: IFFALSE 8566
// arab_spotted := true ;
8558: LD_ADDR_EXP 13
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// end ;
8566: PPOPN 2
8568: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8569: LD_INT 22
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 50
8581: PUSH
8582: EMPTY
8583: LIST
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: IFFALSE 8615
// begin Query ( QArabOnMap ) ;
8606: LD_STRING QArabOnMap
8608: PPUSH
8609: CALL_OW 97
// exit ;
8613: GO 8631
// end ; end_the_mission_allowed := false ;
8615: LD_ADDR_OWVAR 57
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// end_mission := true ;
8623: LD_ADDR_EXP 14
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// end ;
8631: PPOPN 1
8633: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8634: LD_VAR 0 2
8638: PPUSH
8639: CALL_OW 255
8643: PUSH
8644: LD_INT 1
8646: EQUAL
8647: IFFALSE 8663
// apeman_counter := apeman_counter + 1 ;
8649: LD_ADDR_EXP 12
8653: PUSH
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 1
8661: PLUS
8662: ST_TO_ADDR
// if not first_apeman_tamed then
8663: LD_EXP 8
8667: NOT
8668: IFFALSE 8867
// begin first_apeman_tamed := true ;
8670: LD_ADDR_EXP 8
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if sci = Gladstone then
8678: LD_VAR 0 2
8682: PUSH
8683: LD_EXP 18
8687: EQUAL
8688: IFFALSE 8702
// Say ( Gladstone , D7b-Glad-1 ) ;
8690: LD_EXP 18
8694: PPUSH
8695: LD_STRING D7b-Glad-1
8697: PPUSH
8698: CALL_OW 88
// if sci = Denis then
8702: LD_VAR 0 2
8706: PUSH
8707: LD_EXP 20
8711: EQUAL
8712: IFFALSE 8726
// Say ( Denis , D7a-Den-1 ) ;
8714: LD_EXP 20
8718: PPUSH
8719: LD_STRING D7a-Den-1
8721: PPUSH
8722: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8726: LD_VAR 0 2
8730: PUSH
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 18
8740: PUSH
8741: LD_EXP 20
8745: PUSH
8746: LD_EXP 23
8750: PUSH
8751: LD_EXP 24
8755: PUSH
8756: LD_EXP 25
8760: PUSH
8761: LD_EXP 26
8765: PUSH
8766: LD_EXP 22
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: IN
8781: NOT
8782: IFFALSE 8825
// begin if GetSex ( sci ) = sex_male then
8784: LD_VAR 0 2
8788: PPUSH
8789: CALL_OW 258
8793: PUSH
8794: LD_INT 1
8796: EQUAL
8797: IFFALSE 8813
// Say ( sci , D7c-Sci1-1 ) else
8799: LD_VAR 0 2
8803: PPUSH
8804: LD_STRING D7c-Sci1-1
8806: PPUSH
8807: CALL_OW 88
8811: GO 8825
// Say ( sci , D7c-FSci1-1 ) ;
8813: LD_VAR 0 2
8817: PPUSH
8818: LD_STRING D7c-FSci1-1
8820: PPUSH
8821: CALL_OW 88
// end ; if sci <> Gladstone then
8825: LD_VAR 0 2
8829: PUSH
8830: LD_EXP 18
8834: NONEQUAL
8835: IFFALSE 8849
// Say ( Gladstone , D7c-Glad-1 ) ;
8837: LD_EXP 18
8841: PPUSH
8842: LD_STRING D7c-Glad-1
8844: PPUSH
8845: CALL_OW 88
// if Lisa then
8849: LD_EXP 23
8853: IFFALSE 8867
// Say ( Lisa , D8-Lisa-1 ) ;
8855: LD_EXP 23
8859: PPUSH
8860: LD_STRING D8-Lisa-1
8862: PPUSH
8863: CALL_OW 88
// end ; end ; end_of_file end_of_file
8867: PPOPN 2
8869: END
// export globalGameSaveCounter ; every 0 0$1 do
8870: GO 8872
8872: DISABLE
// begin enable ;
8873: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8874: LD_STRING updateTimer(
8876: PUSH
8877: LD_OWVAR 1
8881: STR
8882: PUSH
8883: LD_STRING );
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: END
// every 0 0$1 do
8892: GO 8894
8894: DISABLE
// begin globalGameSaveCounter := 0 ;
8895: LD_ADDR_EXP 31
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8903: LD_STRING setGameSaveCounter(0)
8905: PPUSH
8906: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8910: LD_STRING initStreamRollete();
8912: PPUSH
8913: CALL_OW 559
// InitStreamMode ;
8917: CALL 10243 0 0
// DefineStreamItems ( false ) ;
8921: LD_INT 0
8923: PPUSH
8924: CALL 10707 0 1
// end ;
8928: END
// export function SOS_MapStart ( ) ; begin
8929: LD_INT 0
8931: PPUSH
// if streamModeActive then
8932: LD_EXP 32
8936: IFFALSE 8945
// DefineStreamItems ( true ) ;
8938: LD_INT 1
8940: PPUSH
8941: CALL 10707 0 1
// UpdateLuaVariables ( ) ;
8945: CALL 8962 0 0
// UpdateFactoryWaypoints ( ) ;
8949: CALL 23576 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8953: CALL 23833 0 0
// end ;
8957: LD_VAR 0 1
8961: RET
// function UpdateLuaVariables ( ) ; begin
8962: LD_INT 0
8964: PPUSH
// if globalGameSaveCounter then
8965: LD_EXP 31
8969: IFFALSE 9003
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8971: LD_ADDR_EXP 31
8975: PUSH
8976: LD_EXP 31
8980: PPUSH
8981: CALL 68629 0 1
8985: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8986: LD_STRING setGameSaveCounter(
8988: PUSH
8989: LD_EXP 31
8993: STR
8994: PUSH
8995: LD_STRING )
8997: STR
8998: PPUSH
8999: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9003: LD_STRING setGameDifficulty(
9005: PUSH
9006: LD_OWVAR 67
9010: STR
9011: PUSH
9012: LD_STRING )
9014: STR
9015: PPUSH
9016: CALL_OW 559
// end ;
9020: LD_VAR 0 1
9024: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9025: LD_INT 0
9027: PPUSH
// if p2 = stream_mode then
9028: LD_VAR 0 2
9032: PUSH
9033: LD_INT 100
9035: EQUAL
9036: IFFALSE 10039
// begin if not StreamModeActive then
9038: LD_EXP 32
9042: NOT
9043: IFFALSE 9053
// StreamModeActive := true ;
9045: LD_ADDR_EXP 32
9049: PUSH
9050: LD_INT 1
9052: ST_TO_ADDR
// if p3 = 0 then
9053: LD_VAR 0 3
9057: PUSH
9058: LD_INT 0
9060: EQUAL
9061: IFFALSE 9067
// InitStreamMode ;
9063: CALL 10243 0 0
// if p3 = 1 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 1
9074: EQUAL
9075: IFFALSE 9085
// sRocket := true ;
9077: LD_ADDR_EXP 37
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 2 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 2
9092: EQUAL
9093: IFFALSE 9103
// sSpeed := true ;
9095: LD_ADDR_EXP 36
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// if p3 = 3 then
9103: LD_VAR 0 3
9107: PUSH
9108: LD_INT 3
9110: EQUAL
9111: IFFALSE 9121
// sEngine := true ;
9113: LD_ADDR_EXP 38
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// if p3 = 4 then
9121: LD_VAR 0 3
9125: PUSH
9126: LD_INT 4
9128: EQUAL
9129: IFFALSE 9139
// sSpec := true ;
9131: LD_ADDR_EXP 35
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// if p3 = 5 then
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 5
9146: EQUAL
9147: IFFALSE 9157
// sLevel := true ;
9149: LD_ADDR_EXP 39
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// if p3 = 6 then
9157: LD_VAR 0 3
9161: PUSH
9162: LD_INT 6
9164: EQUAL
9165: IFFALSE 9175
// sArmoury := true ;
9167: LD_ADDR_EXP 40
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// if p3 = 7 then
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 7
9182: EQUAL
9183: IFFALSE 9193
// sRadar := true ;
9185: LD_ADDR_EXP 41
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// if p3 = 8 then
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 8
9200: EQUAL
9201: IFFALSE 9211
// sBunker := true ;
9203: LD_ADDR_EXP 42
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// if p3 = 9 then
9211: LD_VAR 0 3
9215: PUSH
9216: LD_INT 9
9218: EQUAL
9219: IFFALSE 9229
// sHack := true ;
9221: LD_ADDR_EXP 43
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// if p3 = 10 then
9229: LD_VAR 0 3
9233: PUSH
9234: LD_INT 10
9236: EQUAL
9237: IFFALSE 9247
// sFire := true ;
9239: LD_ADDR_EXP 44
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// if p3 = 11 then
9247: LD_VAR 0 3
9251: PUSH
9252: LD_INT 11
9254: EQUAL
9255: IFFALSE 9265
// sRefresh := true ;
9257: LD_ADDR_EXP 45
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// if p3 = 12 then
9265: LD_VAR 0 3
9269: PUSH
9270: LD_INT 12
9272: EQUAL
9273: IFFALSE 9283
// sExp := true ;
9275: LD_ADDR_EXP 46
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// if p3 = 13 then
9283: LD_VAR 0 3
9287: PUSH
9288: LD_INT 13
9290: EQUAL
9291: IFFALSE 9301
// sDepot := true ;
9293: LD_ADDR_EXP 47
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// if p3 = 14 then
9301: LD_VAR 0 3
9305: PUSH
9306: LD_INT 14
9308: EQUAL
9309: IFFALSE 9319
// sFlag := true ;
9311: LD_ADDR_EXP 48
9315: PUSH
9316: LD_INT 1
9318: ST_TO_ADDR
// if p3 = 15 then
9319: LD_VAR 0 3
9323: PUSH
9324: LD_INT 15
9326: EQUAL
9327: IFFALSE 9337
// sKamikadze := true ;
9329: LD_ADDR_EXP 56
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// if p3 = 16 then
9337: LD_VAR 0 3
9341: PUSH
9342: LD_INT 16
9344: EQUAL
9345: IFFALSE 9355
// sTroll := true ;
9347: LD_ADDR_EXP 57
9351: PUSH
9352: LD_INT 1
9354: ST_TO_ADDR
// if p3 = 17 then
9355: LD_VAR 0 3
9359: PUSH
9360: LD_INT 17
9362: EQUAL
9363: IFFALSE 9373
// sSlow := true ;
9365: LD_ADDR_EXP 58
9369: PUSH
9370: LD_INT 1
9372: ST_TO_ADDR
// if p3 = 18 then
9373: LD_VAR 0 3
9377: PUSH
9378: LD_INT 18
9380: EQUAL
9381: IFFALSE 9391
// sLack := true ;
9383: LD_ADDR_EXP 59
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// if p3 = 19 then
9391: LD_VAR 0 3
9395: PUSH
9396: LD_INT 19
9398: EQUAL
9399: IFFALSE 9409
// sTank := true ;
9401: LD_ADDR_EXP 61
9405: PUSH
9406: LD_INT 1
9408: ST_TO_ADDR
// if p3 = 20 then
9409: LD_VAR 0 3
9413: PUSH
9414: LD_INT 20
9416: EQUAL
9417: IFFALSE 9427
// sRemote := true ;
9419: LD_ADDR_EXP 62
9423: PUSH
9424: LD_INT 1
9426: ST_TO_ADDR
// if p3 = 21 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 21
9434: EQUAL
9435: IFFALSE 9445
// sPowell := true ;
9437: LD_ADDR_EXP 63
9441: PUSH
9442: LD_INT 1
9444: ST_TO_ADDR
// if p3 = 22 then
9445: LD_VAR 0 3
9449: PUSH
9450: LD_INT 22
9452: EQUAL
9453: IFFALSE 9463
// sTeleport := true ;
9455: LD_ADDR_EXP 66
9459: PUSH
9460: LD_INT 1
9462: ST_TO_ADDR
// if p3 = 23 then
9463: LD_VAR 0 3
9467: PUSH
9468: LD_INT 23
9470: EQUAL
9471: IFFALSE 9481
// sOilTower := true ;
9473: LD_ADDR_EXP 68
9477: PUSH
9478: LD_INT 1
9480: ST_TO_ADDR
// if p3 = 24 then
9481: LD_VAR 0 3
9485: PUSH
9486: LD_INT 24
9488: EQUAL
9489: IFFALSE 9499
// sShovel := true ;
9491: LD_ADDR_EXP 69
9495: PUSH
9496: LD_INT 1
9498: ST_TO_ADDR
// if p3 = 25 then
9499: LD_VAR 0 3
9503: PUSH
9504: LD_INT 25
9506: EQUAL
9507: IFFALSE 9517
// sSheik := true ;
9509: LD_ADDR_EXP 70
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// if p3 = 26 then
9517: LD_VAR 0 3
9521: PUSH
9522: LD_INT 26
9524: EQUAL
9525: IFFALSE 9535
// sEarthquake := true ;
9527: LD_ADDR_EXP 72
9531: PUSH
9532: LD_INT 1
9534: ST_TO_ADDR
// if p3 = 27 then
9535: LD_VAR 0 3
9539: PUSH
9540: LD_INT 27
9542: EQUAL
9543: IFFALSE 9553
// sAI := true ;
9545: LD_ADDR_EXP 73
9549: PUSH
9550: LD_INT 1
9552: ST_TO_ADDR
// if p3 = 28 then
9553: LD_VAR 0 3
9557: PUSH
9558: LD_INT 28
9560: EQUAL
9561: IFFALSE 9571
// sCargo := true ;
9563: LD_ADDR_EXP 76
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// if p3 = 29 then
9571: LD_VAR 0 3
9575: PUSH
9576: LD_INT 29
9578: EQUAL
9579: IFFALSE 9589
// sDLaser := true ;
9581: LD_ADDR_EXP 77
9585: PUSH
9586: LD_INT 1
9588: ST_TO_ADDR
// if p3 = 30 then
9589: LD_VAR 0 3
9593: PUSH
9594: LD_INT 30
9596: EQUAL
9597: IFFALSE 9607
// sExchange := true ;
9599: LD_ADDR_EXP 78
9603: PUSH
9604: LD_INT 1
9606: ST_TO_ADDR
// if p3 = 31 then
9607: LD_VAR 0 3
9611: PUSH
9612: LD_INT 31
9614: EQUAL
9615: IFFALSE 9625
// sFac := true ;
9617: LD_ADDR_EXP 79
9621: PUSH
9622: LD_INT 1
9624: ST_TO_ADDR
// if p3 = 32 then
9625: LD_VAR 0 3
9629: PUSH
9630: LD_INT 32
9632: EQUAL
9633: IFFALSE 9643
// sPower := true ;
9635: LD_ADDR_EXP 80
9639: PUSH
9640: LD_INT 1
9642: ST_TO_ADDR
// if p3 = 33 then
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 33
9650: EQUAL
9651: IFFALSE 9661
// sRandom := true ;
9653: LD_ADDR_EXP 81
9657: PUSH
9658: LD_INT 1
9660: ST_TO_ADDR
// if p3 = 34 then
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 34
9668: EQUAL
9669: IFFALSE 9679
// sShield := true ;
9671: LD_ADDR_EXP 82
9675: PUSH
9676: LD_INT 1
9678: ST_TO_ADDR
// if p3 = 35 then
9679: LD_VAR 0 3
9683: PUSH
9684: LD_INT 35
9686: EQUAL
9687: IFFALSE 9697
// sTime := true ;
9689: LD_ADDR_EXP 83
9693: PUSH
9694: LD_INT 1
9696: ST_TO_ADDR
// if p3 = 36 then
9697: LD_VAR 0 3
9701: PUSH
9702: LD_INT 36
9704: EQUAL
9705: IFFALSE 9715
// sTools := true ;
9707: LD_ADDR_EXP 84
9711: PUSH
9712: LD_INT 1
9714: ST_TO_ADDR
// if p3 = 101 then
9715: LD_VAR 0 3
9719: PUSH
9720: LD_INT 101
9722: EQUAL
9723: IFFALSE 9733
// sSold := true ;
9725: LD_ADDR_EXP 49
9729: PUSH
9730: LD_INT 1
9732: ST_TO_ADDR
// if p3 = 102 then
9733: LD_VAR 0 3
9737: PUSH
9738: LD_INT 102
9740: EQUAL
9741: IFFALSE 9751
// sDiff := true ;
9743: LD_ADDR_EXP 50
9747: PUSH
9748: LD_INT 1
9750: ST_TO_ADDR
// if p3 = 103 then
9751: LD_VAR 0 3
9755: PUSH
9756: LD_INT 103
9758: EQUAL
9759: IFFALSE 9769
// sFog := true ;
9761: LD_ADDR_EXP 53
9765: PUSH
9766: LD_INT 1
9768: ST_TO_ADDR
// if p3 = 104 then
9769: LD_VAR 0 3
9773: PUSH
9774: LD_INT 104
9776: EQUAL
9777: IFFALSE 9787
// sReset := true ;
9779: LD_ADDR_EXP 54
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// if p3 = 105 then
9787: LD_VAR 0 3
9791: PUSH
9792: LD_INT 105
9794: EQUAL
9795: IFFALSE 9805
// sSun := true ;
9797: LD_ADDR_EXP 55
9801: PUSH
9802: LD_INT 1
9804: ST_TO_ADDR
// if p3 = 106 then
9805: LD_VAR 0 3
9809: PUSH
9810: LD_INT 106
9812: EQUAL
9813: IFFALSE 9823
// sTiger := true ;
9815: LD_ADDR_EXP 51
9819: PUSH
9820: LD_INT 1
9822: ST_TO_ADDR
// if p3 = 107 then
9823: LD_VAR 0 3
9827: PUSH
9828: LD_INT 107
9830: EQUAL
9831: IFFALSE 9841
// sBomb := true ;
9833: LD_ADDR_EXP 52
9837: PUSH
9838: LD_INT 1
9840: ST_TO_ADDR
// if p3 = 108 then
9841: LD_VAR 0 3
9845: PUSH
9846: LD_INT 108
9848: EQUAL
9849: IFFALSE 9859
// sWound := true ;
9851: LD_ADDR_EXP 60
9855: PUSH
9856: LD_INT 1
9858: ST_TO_ADDR
// if p3 = 109 then
9859: LD_VAR 0 3
9863: PUSH
9864: LD_INT 109
9866: EQUAL
9867: IFFALSE 9877
// sBetray := true ;
9869: LD_ADDR_EXP 64
9873: PUSH
9874: LD_INT 1
9876: ST_TO_ADDR
// if p3 = 110 then
9877: LD_VAR 0 3
9881: PUSH
9882: LD_INT 110
9884: EQUAL
9885: IFFALSE 9895
// sContamin := true ;
9887: LD_ADDR_EXP 65
9891: PUSH
9892: LD_INT 1
9894: ST_TO_ADDR
// if p3 = 111 then
9895: LD_VAR 0 3
9899: PUSH
9900: LD_INT 111
9902: EQUAL
9903: IFFALSE 9913
// sOil := true ;
9905: LD_ADDR_EXP 67
9909: PUSH
9910: LD_INT 1
9912: ST_TO_ADDR
// if p3 = 112 then
9913: LD_VAR 0 3
9917: PUSH
9918: LD_INT 112
9920: EQUAL
9921: IFFALSE 9931
// sStu := true ;
9923: LD_ADDR_EXP 71
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// if p3 = 113 then
9931: LD_VAR 0 3
9935: PUSH
9936: LD_INT 113
9938: EQUAL
9939: IFFALSE 9949
// sBazooka := true ;
9941: LD_ADDR_EXP 74
9945: PUSH
9946: LD_INT 1
9948: ST_TO_ADDR
// if p3 = 114 then
9949: LD_VAR 0 3
9953: PUSH
9954: LD_INT 114
9956: EQUAL
9957: IFFALSE 9967
// sMortar := true ;
9959: LD_ADDR_EXP 75
9963: PUSH
9964: LD_INT 1
9966: ST_TO_ADDR
// if p3 = 115 then
9967: LD_VAR 0 3
9971: PUSH
9972: LD_INT 115
9974: EQUAL
9975: IFFALSE 9985
// sRanger := true ;
9977: LD_ADDR_EXP 85
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
// if p3 = 116 then
9985: LD_VAR 0 3
9989: PUSH
9990: LD_INT 116
9992: EQUAL
9993: IFFALSE 10003
// sComputer := true ;
9995: LD_ADDR_EXP 86
9999: PUSH
10000: LD_INT 1
10002: ST_TO_ADDR
// if p3 = 117 then
10003: LD_VAR 0 3
10007: PUSH
10008: LD_INT 117
10010: EQUAL
10011: IFFALSE 10021
// s30 := true ;
10013: LD_ADDR_EXP 87
10017: PUSH
10018: LD_INT 1
10020: ST_TO_ADDR
// if p3 = 118 then
10021: LD_VAR 0 3
10025: PUSH
10026: LD_INT 118
10028: EQUAL
10029: IFFALSE 10039
// s60 := true ;
10031: LD_ADDR_EXP 88
10035: PUSH
10036: LD_INT 1
10038: ST_TO_ADDR
// end ; if p2 = hack_mode then
10039: LD_VAR 0 2
10043: PUSH
10044: LD_INT 101
10046: EQUAL
10047: IFFALSE 10175
// begin case p3 of 1 :
10049: LD_VAR 0 3
10053: PUSH
10054: LD_INT 1
10056: DOUBLE
10057: EQUAL
10058: IFTRUE 10062
10060: GO 10069
10062: POP
// hHackUnlimitedResources ; 2 :
10063: CALL 22322 0 0
10067: GO 10175
10069: LD_INT 2
10071: DOUBLE
10072: EQUAL
10073: IFTRUE 10077
10075: GO 10084
10077: POP
// hHackSetLevel10 ; 3 :
10078: CALL 22455 0 0
10082: GO 10175
10084: LD_INT 3
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10099
10092: POP
// hHackSetLevel10YourUnits ; 4 :
10093: CALL 22540 0 0
10097: GO 10175
10099: LD_INT 4
10101: DOUBLE
10102: EQUAL
10103: IFTRUE 10107
10105: GO 10114
10107: POP
// hHackInvincible ; 5 :
10108: CALL 22988 0 0
10112: GO 10175
10114: LD_INT 5
10116: DOUBLE
10117: EQUAL
10118: IFTRUE 10122
10120: GO 10129
10122: POP
// hHackInvisible ; 6 :
10123: CALL 23099 0 0
10127: GO 10175
10129: LD_INT 6
10131: DOUBLE
10132: EQUAL
10133: IFTRUE 10137
10135: GO 10144
10137: POP
// hHackChangeYourSide ; 7 :
10138: CALL 23156 0 0
10142: GO 10175
10144: LD_INT 7
10146: DOUBLE
10147: EQUAL
10148: IFTRUE 10152
10150: GO 10159
10152: POP
// hHackChangeUnitSide ; 8 :
10153: CALL 23198 0 0
10157: GO 10175
10159: LD_INT 8
10161: DOUBLE
10162: EQUAL
10163: IFTRUE 10167
10165: GO 10174
10167: POP
// hHackFog ; end ;
10168: CALL 23299 0 0
10172: GO 10175
10174: POP
// end ; if p2 = game_save_mode then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_INT 102
10182: EQUAL
10183: IFFALSE 10238
// begin if p3 = 1 then
10185: LD_VAR 0 3
10189: PUSH
10190: LD_INT 1
10192: EQUAL
10193: IFFALSE 10205
// globalGameSaveCounter := p4 ;
10195: LD_ADDR_EXP 31
10199: PUSH
10200: LD_VAR 0 4
10204: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 2
10212: EQUAL
10213: PUSH
10214: LD_EXP 31
10218: AND
10219: IFFALSE 10238
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10221: LD_STRING setGameSaveCounter(
10223: PUSH
10224: LD_EXP 31
10228: STR
10229: PUSH
10230: LD_STRING )
10232: STR
10233: PPUSH
10234: CALL_OW 559
// end ; end ;
10238: LD_VAR 0 7
10242: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10243: LD_INT 0
10245: PPUSH
// streamModeActive := false ;
10246: LD_ADDR_EXP 32
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// normalCounter := 36 ;
10254: LD_ADDR_EXP 33
10258: PUSH
10259: LD_INT 36
10261: ST_TO_ADDR
// hardcoreCounter := 18 ;
10262: LD_ADDR_EXP 34
10266: PUSH
10267: LD_INT 18
10269: ST_TO_ADDR
// sRocket := false ;
10270: LD_ADDR_EXP 37
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// sSpeed := false ;
10278: LD_ADDR_EXP 36
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// sEngine := false ;
10286: LD_ADDR_EXP 38
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// sSpec := false ;
10294: LD_ADDR_EXP 35
10298: PUSH
10299: LD_INT 0
10301: ST_TO_ADDR
// sLevel := false ;
10302: LD_ADDR_EXP 39
10306: PUSH
10307: LD_INT 0
10309: ST_TO_ADDR
// sArmoury := false ;
10310: LD_ADDR_EXP 40
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// sRadar := false ;
10318: LD_ADDR_EXP 41
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// sBunker := false ;
10326: LD_ADDR_EXP 42
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// sHack := false ;
10334: LD_ADDR_EXP 43
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// sFire := false ;
10342: LD_ADDR_EXP 44
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// sRefresh := false ;
10350: LD_ADDR_EXP 45
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
// sExp := false ;
10358: LD_ADDR_EXP 46
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// sDepot := false ;
10366: LD_ADDR_EXP 47
10370: PUSH
10371: LD_INT 0
10373: ST_TO_ADDR
// sFlag := false ;
10374: LD_ADDR_EXP 48
10378: PUSH
10379: LD_INT 0
10381: ST_TO_ADDR
// sKamikadze := false ;
10382: LD_ADDR_EXP 56
10386: PUSH
10387: LD_INT 0
10389: ST_TO_ADDR
// sTroll := false ;
10390: LD_ADDR_EXP 57
10394: PUSH
10395: LD_INT 0
10397: ST_TO_ADDR
// sSlow := false ;
10398: LD_ADDR_EXP 58
10402: PUSH
10403: LD_INT 0
10405: ST_TO_ADDR
// sLack := false ;
10406: LD_ADDR_EXP 59
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// sTank := false ;
10414: LD_ADDR_EXP 61
10418: PUSH
10419: LD_INT 0
10421: ST_TO_ADDR
// sRemote := false ;
10422: LD_ADDR_EXP 62
10426: PUSH
10427: LD_INT 0
10429: ST_TO_ADDR
// sPowell := false ;
10430: LD_ADDR_EXP 63
10434: PUSH
10435: LD_INT 0
10437: ST_TO_ADDR
// sTeleport := false ;
10438: LD_ADDR_EXP 66
10442: PUSH
10443: LD_INT 0
10445: ST_TO_ADDR
// sOilTower := false ;
10446: LD_ADDR_EXP 68
10450: PUSH
10451: LD_INT 0
10453: ST_TO_ADDR
// sShovel := false ;
10454: LD_ADDR_EXP 69
10458: PUSH
10459: LD_INT 0
10461: ST_TO_ADDR
// sSheik := false ;
10462: LD_ADDR_EXP 70
10466: PUSH
10467: LD_INT 0
10469: ST_TO_ADDR
// sEarthquake := false ;
10470: LD_ADDR_EXP 72
10474: PUSH
10475: LD_INT 0
10477: ST_TO_ADDR
// sAI := false ;
10478: LD_ADDR_EXP 73
10482: PUSH
10483: LD_INT 0
10485: ST_TO_ADDR
// sCargo := false ;
10486: LD_ADDR_EXP 76
10490: PUSH
10491: LD_INT 0
10493: ST_TO_ADDR
// sDLaser := false ;
10494: LD_ADDR_EXP 77
10498: PUSH
10499: LD_INT 0
10501: ST_TO_ADDR
// sExchange := false ;
10502: LD_ADDR_EXP 78
10506: PUSH
10507: LD_INT 0
10509: ST_TO_ADDR
// sFac := false ;
10510: LD_ADDR_EXP 79
10514: PUSH
10515: LD_INT 0
10517: ST_TO_ADDR
// sPower := false ;
10518: LD_ADDR_EXP 80
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// sRandom := false ;
10526: LD_ADDR_EXP 81
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// sShield := false ;
10534: LD_ADDR_EXP 82
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// sTime := false ;
10542: LD_ADDR_EXP 83
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// sTools := false ;
10550: LD_ADDR_EXP 84
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// sSold := false ;
10558: LD_ADDR_EXP 49
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// sDiff := false ;
10566: LD_ADDR_EXP 50
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// sFog := false ;
10574: LD_ADDR_EXP 53
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// sReset := false ;
10582: LD_ADDR_EXP 54
10586: PUSH
10587: LD_INT 0
10589: ST_TO_ADDR
// sSun := false ;
10590: LD_ADDR_EXP 55
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// sTiger := false ;
10598: LD_ADDR_EXP 51
10602: PUSH
10603: LD_INT 0
10605: ST_TO_ADDR
// sBomb := false ;
10606: LD_ADDR_EXP 52
10610: PUSH
10611: LD_INT 0
10613: ST_TO_ADDR
// sWound := false ;
10614: LD_ADDR_EXP 60
10618: PUSH
10619: LD_INT 0
10621: ST_TO_ADDR
// sBetray := false ;
10622: LD_ADDR_EXP 64
10626: PUSH
10627: LD_INT 0
10629: ST_TO_ADDR
// sContamin := false ;
10630: LD_ADDR_EXP 65
10634: PUSH
10635: LD_INT 0
10637: ST_TO_ADDR
// sOil := false ;
10638: LD_ADDR_EXP 67
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// sStu := false ;
10646: LD_ADDR_EXP 71
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// sBazooka := false ;
10654: LD_ADDR_EXP 74
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// sMortar := false ;
10662: LD_ADDR_EXP 75
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// sRanger := false ;
10670: LD_ADDR_EXP 85
10674: PUSH
10675: LD_INT 0
10677: ST_TO_ADDR
// sComputer := false ;
10678: LD_ADDR_EXP 86
10682: PUSH
10683: LD_INT 0
10685: ST_TO_ADDR
// s30 := false ;
10686: LD_ADDR_EXP 87
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// s60 := false ;
10694: LD_ADDR_EXP 88
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// end ;
10702: LD_VAR 0 1
10706: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10707: LD_INT 0
10709: PPUSH
10710: PPUSH
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
// result := [ ] ;
10716: LD_ADDR_VAR 0 2
10720: PUSH
10721: EMPTY
10722: ST_TO_ADDR
// if campaign_id = 1 then
10723: LD_OWVAR 69
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 13897
// begin case mission_number of 1 :
10733: LD_OWVAR 70
10737: PUSH
10738: LD_INT 1
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 10822
10746: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: LD_INT 4
10757: PUSH
10758: LD_INT 11
10760: PUSH
10761: LD_INT 12
10763: PUSH
10764: LD_INT 15
10766: PUSH
10767: LD_INT 16
10769: PUSH
10770: LD_INT 22
10772: PUSH
10773: LD_INT 23
10775: PUSH
10776: LD_INT 26
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 101
10792: PUSH
10793: LD_INT 102
10795: PUSH
10796: LD_INT 106
10798: PUSH
10799: LD_INT 116
10801: PUSH
10802: LD_INT 117
10804: PUSH
10805: LD_INT 118
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: ST_TO_ADDR
10820: GO 13895
10822: LD_INT 2
10824: DOUBLE
10825: EQUAL
10826: IFTRUE 10830
10828: GO 10914
10830: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10831: LD_ADDR_VAR 0 2
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 4
10841: PUSH
10842: LD_INT 11
10844: PUSH
10845: LD_INT 12
10847: PUSH
10848: LD_INT 15
10850: PUSH
10851: LD_INT 16
10853: PUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 23
10859: PUSH
10860: LD_INT 26
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 101
10876: PUSH
10877: LD_INT 102
10879: PUSH
10880: LD_INT 105
10882: PUSH
10883: LD_INT 106
10885: PUSH
10886: LD_INT 108
10888: PUSH
10889: LD_INT 116
10891: PUSH
10892: LD_INT 117
10894: PUSH
10895: LD_INT 118
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: ST_TO_ADDR
10912: GO 13895
10914: LD_INT 3
10916: DOUBLE
10917: EQUAL
10918: IFTRUE 10922
10920: GO 11010
10922: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10923: LD_ADDR_VAR 0 2
10927: PUSH
10928: LD_INT 2
10930: PUSH
10931: LD_INT 4
10933: PUSH
10934: LD_INT 5
10936: PUSH
10937: LD_INT 11
10939: PUSH
10940: LD_INT 12
10942: PUSH
10943: LD_INT 15
10945: PUSH
10946: LD_INT 16
10948: PUSH
10949: LD_INT 22
10951: PUSH
10952: LD_INT 26
10954: PUSH
10955: LD_INT 36
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 101
10972: PUSH
10973: LD_INT 102
10975: PUSH
10976: LD_INT 105
10978: PUSH
10979: LD_INT 106
10981: PUSH
10982: LD_INT 108
10984: PUSH
10985: LD_INT 116
10987: PUSH
10988: LD_INT 117
10990: PUSH
10991: LD_INT 118
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: ST_TO_ADDR
11008: GO 13895
11010: LD_INT 4
11012: DOUBLE
11013: EQUAL
11014: IFTRUE 11018
11016: GO 11114
11018: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11019: LD_ADDR_VAR 0 2
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: LD_INT 4
11029: PUSH
11030: LD_INT 5
11032: PUSH
11033: LD_INT 8
11035: PUSH
11036: LD_INT 11
11038: PUSH
11039: LD_INT 12
11041: PUSH
11042: LD_INT 15
11044: PUSH
11045: LD_INT 16
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 23
11053: PUSH
11054: LD_INT 26
11056: PUSH
11057: LD_INT 36
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 102
11079: PUSH
11080: LD_INT 105
11082: PUSH
11083: LD_INT 106
11085: PUSH
11086: LD_INT 108
11088: PUSH
11089: LD_INT 116
11091: PUSH
11092: LD_INT 117
11094: PUSH
11095: LD_INT 118
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: ST_TO_ADDR
11112: GO 13895
11114: LD_INT 5
11116: DOUBLE
11117: EQUAL
11118: IFTRUE 11122
11120: GO 11234
11122: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11123: LD_ADDR_VAR 0 2
11127: PUSH
11128: LD_INT 2
11130: PUSH
11131: LD_INT 4
11133: PUSH
11134: LD_INT 5
11136: PUSH
11137: LD_INT 6
11139: PUSH
11140: LD_INT 8
11142: PUSH
11143: LD_INT 11
11145: PUSH
11146: LD_INT 12
11148: PUSH
11149: LD_INT 15
11151: PUSH
11152: LD_INT 16
11154: PUSH
11155: LD_INT 22
11157: PUSH
11158: LD_INT 23
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 26
11166: PUSH
11167: LD_INT 36
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 101
11188: PUSH
11189: LD_INT 102
11191: PUSH
11192: LD_INT 105
11194: PUSH
11195: LD_INT 106
11197: PUSH
11198: LD_INT 108
11200: PUSH
11201: LD_INT 109
11203: PUSH
11204: LD_INT 112
11206: PUSH
11207: LD_INT 116
11209: PUSH
11210: LD_INT 117
11212: PUSH
11213: LD_INT 118
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: ST_TO_ADDR
11232: GO 13895
11234: LD_INT 6
11236: DOUBLE
11237: EQUAL
11238: IFTRUE 11242
11240: GO 11374
11242: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11243: LD_ADDR_VAR 0 2
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 4
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: LD_INT 6
11259: PUSH
11260: LD_INT 8
11262: PUSH
11263: LD_INT 11
11265: PUSH
11266: LD_INT 12
11268: PUSH
11269: LD_INT 15
11271: PUSH
11272: LD_INT 16
11274: PUSH
11275: LD_INT 20
11277: PUSH
11278: LD_INT 21
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_INT 23
11286: PUSH
11287: LD_INT 25
11289: PUSH
11290: LD_INT 26
11292: PUSH
11293: LD_INT 30
11295: PUSH
11296: LD_INT 31
11298: PUSH
11299: LD_INT 32
11301: PUSH
11302: LD_INT 36
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 101
11328: PUSH
11329: LD_INT 102
11331: PUSH
11332: LD_INT 105
11334: PUSH
11335: LD_INT 106
11337: PUSH
11338: LD_INT 108
11340: PUSH
11341: LD_INT 109
11343: PUSH
11344: LD_INT 112
11346: PUSH
11347: LD_INT 116
11349: PUSH
11350: LD_INT 117
11352: PUSH
11353: LD_INT 118
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: ST_TO_ADDR
11372: GO 13895
11374: LD_INT 7
11376: DOUBLE
11377: EQUAL
11378: IFTRUE 11382
11380: GO 11494
11382: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11383: LD_ADDR_VAR 0 2
11387: PUSH
11388: LD_INT 2
11390: PUSH
11391: LD_INT 4
11393: PUSH
11394: LD_INT 5
11396: PUSH
11397: LD_INT 7
11399: PUSH
11400: LD_INT 11
11402: PUSH
11403: LD_INT 12
11405: PUSH
11406: LD_INT 15
11408: PUSH
11409: LD_INT 16
11411: PUSH
11412: LD_INT 20
11414: PUSH
11415: LD_INT 21
11417: PUSH
11418: LD_INT 22
11420: PUSH
11421: LD_INT 23
11423: PUSH
11424: LD_INT 25
11426: PUSH
11427: LD_INT 26
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 101
11448: PUSH
11449: LD_INT 102
11451: PUSH
11452: LD_INT 103
11454: PUSH
11455: LD_INT 105
11457: PUSH
11458: LD_INT 106
11460: PUSH
11461: LD_INT 108
11463: PUSH
11464: LD_INT 112
11466: PUSH
11467: LD_INT 116
11469: PUSH
11470: LD_INT 117
11472: PUSH
11473: LD_INT 118
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: ST_TO_ADDR
11492: GO 13895
11494: LD_INT 8
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11642
11502: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: LD_INT 4
11513: PUSH
11514: LD_INT 5
11516: PUSH
11517: LD_INT 6
11519: PUSH
11520: LD_INT 7
11522: PUSH
11523: LD_INT 8
11525: PUSH
11526: LD_INT 11
11528: PUSH
11529: LD_INT 12
11531: PUSH
11532: LD_INT 15
11534: PUSH
11535: LD_INT 16
11537: PUSH
11538: LD_INT 20
11540: PUSH
11541: LD_INT 21
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_INT 23
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 26
11555: PUSH
11556: LD_INT 30
11558: PUSH
11559: LD_INT 31
11561: PUSH
11562: LD_INT 32
11564: PUSH
11565: LD_INT 36
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: LD_INT 101
11592: PUSH
11593: LD_INT 102
11595: PUSH
11596: LD_INT 103
11598: PUSH
11599: LD_INT 105
11601: PUSH
11602: LD_INT 106
11604: PUSH
11605: LD_INT 108
11607: PUSH
11608: LD_INT 109
11610: PUSH
11611: LD_INT 112
11613: PUSH
11614: LD_INT 116
11616: PUSH
11617: LD_INT 117
11619: PUSH
11620: LD_INT 118
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: ST_TO_ADDR
11640: GO 13895
11642: LD_INT 9
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11798
11650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11651: LD_ADDR_VAR 0 2
11655: PUSH
11656: LD_INT 2
11658: PUSH
11659: LD_INT 4
11661: PUSH
11662: LD_INT 5
11664: PUSH
11665: LD_INT 6
11667: PUSH
11668: LD_INT 7
11670: PUSH
11671: LD_INT 8
11673: PUSH
11674: LD_INT 11
11676: PUSH
11677: LD_INT 12
11679: PUSH
11680: LD_INT 15
11682: PUSH
11683: LD_INT 16
11685: PUSH
11686: LD_INT 20
11688: PUSH
11689: LD_INT 21
11691: PUSH
11692: LD_INT 22
11694: PUSH
11695: LD_INT 23
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 26
11703: PUSH
11704: LD_INT 28
11706: PUSH
11707: LD_INT 30
11709: PUSH
11710: LD_INT 31
11712: PUSH
11713: LD_INT 32
11715: PUSH
11716: LD_INT 36
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 101
11744: PUSH
11745: LD_INT 102
11747: PUSH
11748: LD_INT 103
11750: PUSH
11751: LD_INT 105
11753: PUSH
11754: LD_INT 106
11756: PUSH
11757: LD_INT 108
11759: PUSH
11760: LD_INT 109
11762: PUSH
11763: LD_INT 112
11765: PUSH
11766: LD_INT 114
11768: PUSH
11769: LD_INT 116
11771: PUSH
11772: LD_INT 117
11774: PUSH
11775: LD_INT 118
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: ST_TO_ADDR
11796: GO 13895
11798: LD_INT 10
11800: DOUBLE
11801: EQUAL
11802: IFTRUE 11806
11804: GO 12002
11806: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11807: LD_ADDR_VAR 0 2
11811: PUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 4
11817: PUSH
11818: LD_INT 5
11820: PUSH
11821: LD_INT 6
11823: PUSH
11824: LD_INT 7
11826: PUSH
11827: LD_INT 8
11829: PUSH
11830: LD_INT 9
11832: PUSH
11833: LD_INT 10
11835: PUSH
11836: LD_INT 11
11838: PUSH
11839: LD_INT 12
11841: PUSH
11842: LD_INT 13
11844: PUSH
11845: LD_INT 14
11847: PUSH
11848: LD_INT 15
11850: PUSH
11851: LD_INT 16
11853: PUSH
11854: LD_INT 17
11856: PUSH
11857: LD_INT 18
11859: PUSH
11860: LD_INT 19
11862: PUSH
11863: LD_INT 20
11865: PUSH
11866: LD_INT 21
11868: PUSH
11869: LD_INT 22
11871: PUSH
11872: LD_INT 23
11874: PUSH
11875: LD_INT 24
11877: PUSH
11878: LD_INT 25
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: LD_INT 28
11886: PUSH
11887: LD_INT 30
11889: PUSH
11890: LD_INT 31
11892: PUSH
11893: LD_INT 32
11895: PUSH
11896: LD_INT 36
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 101
11932: PUSH
11933: LD_INT 102
11935: PUSH
11936: LD_INT 103
11938: PUSH
11939: LD_INT 104
11941: PUSH
11942: LD_INT 105
11944: PUSH
11945: LD_INT 106
11947: PUSH
11948: LD_INT 107
11950: PUSH
11951: LD_INT 108
11953: PUSH
11954: LD_INT 109
11956: PUSH
11957: LD_INT 110
11959: PUSH
11960: LD_INT 111
11962: PUSH
11963: LD_INT 112
11965: PUSH
11966: LD_INT 114
11968: PUSH
11969: LD_INT 116
11971: PUSH
11972: LD_INT 117
11974: PUSH
11975: LD_INT 118
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: ST_TO_ADDR
12000: GO 13895
12002: LD_INT 11
12004: DOUBLE
12005: EQUAL
12006: IFTRUE 12010
12008: GO 12214
12010: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12011: LD_ADDR_VAR 0 2
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: LD_INT 4
12024: PUSH
12025: LD_INT 5
12027: PUSH
12028: LD_INT 6
12030: PUSH
12031: LD_INT 7
12033: PUSH
12034: LD_INT 8
12036: PUSH
12037: LD_INT 9
12039: PUSH
12040: LD_INT 10
12042: PUSH
12043: LD_INT 11
12045: PUSH
12046: LD_INT 12
12048: PUSH
12049: LD_INT 13
12051: PUSH
12052: LD_INT 14
12054: PUSH
12055: LD_INT 15
12057: PUSH
12058: LD_INT 16
12060: PUSH
12061: LD_INT 17
12063: PUSH
12064: LD_INT 18
12066: PUSH
12067: LD_INT 19
12069: PUSH
12070: LD_INT 20
12072: PUSH
12073: LD_INT 21
12075: PUSH
12076: LD_INT 22
12078: PUSH
12079: LD_INT 23
12081: PUSH
12082: LD_INT 24
12084: PUSH
12085: LD_INT 25
12087: PUSH
12088: LD_INT 26
12090: PUSH
12091: LD_INT 28
12093: PUSH
12094: LD_INT 30
12096: PUSH
12097: LD_INT 31
12099: PUSH
12100: LD_INT 32
12102: PUSH
12103: LD_INT 34
12105: PUSH
12106: LD_INT 36
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 101
12144: PUSH
12145: LD_INT 102
12147: PUSH
12148: LD_INT 103
12150: PUSH
12151: LD_INT 104
12153: PUSH
12154: LD_INT 105
12156: PUSH
12157: LD_INT 106
12159: PUSH
12160: LD_INT 107
12162: PUSH
12163: LD_INT 108
12165: PUSH
12166: LD_INT 109
12168: PUSH
12169: LD_INT 110
12171: PUSH
12172: LD_INT 111
12174: PUSH
12175: LD_INT 112
12177: PUSH
12178: LD_INT 114
12180: PUSH
12181: LD_INT 116
12183: PUSH
12184: LD_INT 117
12186: PUSH
12187: LD_INT 118
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: ST_TO_ADDR
12212: GO 13895
12214: LD_INT 12
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12442
12222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 1
12230: PUSH
12231: LD_INT 2
12233: PUSH
12234: LD_INT 3
12236: PUSH
12237: LD_INT 4
12239: PUSH
12240: LD_INT 5
12242: PUSH
12243: LD_INT 6
12245: PUSH
12246: LD_INT 7
12248: PUSH
12249: LD_INT 8
12251: PUSH
12252: LD_INT 9
12254: PUSH
12255: LD_INT 10
12257: PUSH
12258: LD_INT 11
12260: PUSH
12261: LD_INT 12
12263: PUSH
12264: LD_INT 13
12266: PUSH
12267: LD_INT 14
12269: PUSH
12270: LD_INT 15
12272: PUSH
12273: LD_INT 16
12275: PUSH
12276: LD_INT 17
12278: PUSH
12279: LD_INT 18
12281: PUSH
12282: LD_INT 19
12284: PUSH
12285: LD_INT 20
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 24
12299: PUSH
12300: LD_INT 25
12302: PUSH
12303: LD_INT 26
12305: PUSH
12306: LD_INT 27
12308: PUSH
12309: LD_INT 28
12311: PUSH
12312: LD_INT 30
12314: PUSH
12315: LD_INT 31
12317: PUSH
12318: LD_INT 32
12320: PUSH
12321: LD_INT 33
12323: PUSH
12324: LD_INT 34
12326: PUSH
12327: LD_INT 36
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 101
12368: PUSH
12369: LD_INT 102
12371: PUSH
12372: LD_INT 103
12374: PUSH
12375: LD_INT 104
12377: PUSH
12378: LD_INT 105
12380: PUSH
12381: LD_INT 106
12383: PUSH
12384: LD_INT 107
12386: PUSH
12387: LD_INT 108
12389: PUSH
12390: LD_INT 109
12392: PUSH
12393: LD_INT 110
12395: PUSH
12396: LD_INT 111
12398: PUSH
12399: LD_INT 112
12401: PUSH
12402: LD_INT 113
12404: PUSH
12405: LD_INT 114
12407: PUSH
12408: LD_INT 116
12410: PUSH
12411: LD_INT 117
12413: PUSH
12414: LD_INT 118
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: ST_TO_ADDR
12440: GO 13895
12442: LD_INT 13
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12658
12450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12451: LD_ADDR_VAR 0 2
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: LD_INT 4
12467: PUSH
12468: LD_INT 5
12470: PUSH
12471: LD_INT 8
12473: PUSH
12474: LD_INT 9
12476: PUSH
12477: LD_INT 10
12479: PUSH
12480: LD_INT 11
12482: PUSH
12483: LD_INT 12
12485: PUSH
12486: LD_INT 14
12488: PUSH
12489: LD_INT 15
12491: PUSH
12492: LD_INT 16
12494: PUSH
12495: LD_INT 17
12497: PUSH
12498: LD_INT 18
12500: PUSH
12501: LD_INT 19
12503: PUSH
12504: LD_INT 20
12506: PUSH
12507: LD_INT 21
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_INT 23
12515: PUSH
12516: LD_INT 24
12518: PUSH
12519: LD_INT 25
12521: PUSH
12522: LD_INT 26
12524: PUSH
12525: LD_INT 27
12527: PUSH
12528: LD_INT 28
12530: PUSH
12531: LD_INT 30
12533: PUSH
12534: LD_INT 31
12536: PUSH
12537: LD_INT 32
12539: PUSH
12540: LD_INT 33
12542: PUSH
12543: LD_INT 34
12545: PUSH
12546: LD_INT 36
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 101
12584: PUSH
12585: LD_INT 102
12587: PUSH
12588: LD_INT 103
12590: PUSH
12591: LD_INT 104
12593: PUSH
12594: LD_INT 105
12596: PUSH
12597: LD_INT 106
12599: PUSH
12600: LD_INT 107
12602: PUSH
12603: LD_INT 108
12605: PUSH
12606: LD_INT 109
12608: PUSH
12609: LD_INT 110
12611: PUSH
12612: LD_INT 111
12614: PUSH
12615: LD_INT 112
12617: PUSH
12618: LD_INT 113
12620: PUSH
12621: LD_INT 114
12623: PUSH
12624: LD_INT 116
12626: PUSH
12627: LD_INT 117
12629: PUSH
12630: LD_INT 118
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: ST_TO_ADDR
12656: GO 13895
12658: LD_INT 14
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12890
12666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12667: LD_ADDR_VAR 0 2
12671: PUSH
12672: LD_INT 1
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: LD_INT 3
12680: PUSH
12681: LD_INT 4
12683: PUSH
12684: LD_INT 5
12686: PUSH
12687: LD_INT 6
12689: PUSH
12690: LD_INT 7
12692: PUSH
12693: LD_INT 8
12695: PUSH
12696: LD_INT 9
12698: PUSH
12699: LD_INT 10
12701: PUSH
12702: LD_INT 11
12704: PUSH
12705: LD_INT 12
12707: PUSH
12708: LD_INT 13
12710: PUSH
12711: LD_INT 14
12713: PUSH
12714: LD_INT 15
12716: PUSH
12717: LD_INT 16
12719: PUSH
12720: LD_INT 17
12722: PUSH
12723: LD_INT 18
12725: PUSH
12726: LD_INT 19
12728: PUSH
12729: LD_INT 20
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 22
12737: PUSH
12738: LD_INT 23
12740: PUSH
12741: LD_INT 24
12743: PUSH
12744: LD_INT 25
12746: PUSH
12747: LD_INT 26
12749: PUSH
12750: LD_INT 27
12752: PUSH
12753: LD_INT 28
12755: PUSH
12756: LD_INT 29
12758: PUSH
12759: LD_INT 30
12761: PUSH
12762: LD_INT 31
12764: PUSH
12765: LD_INT 32
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 34
12773: PUSH
12774: LD_INT 36
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 101
12816: PUSH
12817: LD_INT 102
12819: PUSH
12820: LD_INT 103
12822: PUSH
12823: LD_INT 104
12825: PUSH
12826: LD_INT 105
12828: PUSH
12829: LD_INT 106
12831: PUSH
12832: LD_INT 107
12834: PUSH
12835: LD_INT 108
12837: PUSH
12838: LD_INT 109
12840: PUSH
12841: LD_INT 110
12843: PUSH
12844: LD_INT 111
12846: PUSH
12847: LD_INT 112
12849: PUSH
12850: LD_INT 113
12852: PUSH
12853: LD_INT 114
12855: PUSH
12856: LD_INT 116
12858: PUSH
12859: LD_INT 117
12861: PUSH
12862: LD_INT 118
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: ST_TO_ADDR
12888: GO 13895
12890: LD_INT 15
12892: DOUBLE
12893: EQUAL
12894: IFTRUE 12898
12896: GO 13122
12898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12899: LD_ADDR_VAR 0 2
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 4
12915: PUSH
12916: LD_INT 5
12918: PUSH
12919: LD_INT 6
12921: PUSH
12922: LD_INT 7
12924: PUSH
12925: LD_INT 8
12927: PUSH
12928: LD_INT 9
12930: PUSH
12931: LD_INT 10
12933: PUSH
12934: LD_INT 11
12936: PUSH
12937: LD_INT 12
12939: PUSH
12940: LD_INT 13
12942: PUSH
12943: LD_INT 14
12945: PUSH
12946: LD_INT 15
12948: PUSH
12949: LD_INT 16
12951: PUSH
12952: LD_INT 17
12954: PUSH
12955: LD_INT 18
12957: PUSH
12958: LD_INT 19
12960: PUSH
12961: LD_INT 20
12963: PUSH
12964: LD_INT 21
12966: PUSH
12967: LD_INT 22
12969: PUSH
12970: LD_INT 23
12972: PUSH
12973: LD_INT 24
12975: PUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 26
12981: PUSH
12982: LD_INT 27
12984: PUSH
12985: LD_INT 28
12987: PUSH
12988: LD_INT 29
12990: PUSH
12991: LD_INT 30
12993: PUSH
12994: LD_INT 31
12996: PUSH
12997: LD_INT 32
12999: PUSH
13000: LD_INT 33
13002: PUSH
13003: LD_INT 34
13005: PUSH
13006: LD_INT 36
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 101
13048: PUSH
13049: LD_INT 102
13051: PUSH
13052: LD_INT 103
13054: PUSH
13055: LD_INT 104
13057: PUSH
13058: LD_INT 105
13060: PUSH
13061: LD_INT 106
13063: PUSH
13064: LD_INT 107
13066: PUSH
13067: LD_INT 108
13069: PUSH
13070: LD_INT 109
13072: PUSH
13073: LD_INT 110
13075: PUSH
13076: LD_INT 111
13078: PUSH
13079: LD_INT 112
13081: PUSH
13082: LD_INT 113
13084: PUSH
13085: LD_INT 114
13087: PUSH
13088: LD_INT 116
13090: PUSH
13091: LD_INT 117
13093: PUSH
13094: LD_INT 118
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: ST_TO_ADDR
13120: GO 13895
13122: LD_INT 16
13124: DOUBLE
13125: EQUAL
13126: IFTRUE 13130
13128: GO 13266
13130: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13131: LD_ADDR_VAR 0 2
13135: PUSH
13136: LD_INT 2
13138: PUSH
13139: LD_INT 4
13141: PUSH
13142: LD_INT 5
13144: PUSH
13145: LD_INT 7
13147: PUSH
13148: LD_INT 11
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 15
13156: PUSH
13157: LD_INT 16
13159: PUSH
13160: LD_INT 20
13162: PUSH
13163: LD_INT 21
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: LD_INT 25
13174: PUSH
13175: LD_INT 26
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 31
13183: PUSH
13184: LD_INT 32
13186: PUSH
13187: LD_INT 33
13189: PUSH
13190: LD_INT 34
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 101
13216: PUSH
13217: LD_INT 102
13219: PUSH
13220: LD_INT 103
13222: PUSH
13223: LD_INT 106
13225: PUSH
13226: LD_INT 108
13228: PUSH
13229: LD_INT 112
13231: PUSH
13232: LD_INT 113
13234: PUSH
13235: LD_INT 114
13237: PUSH
13238: LD_INT 116
13240: PUSH
13241: LD_INT 117
13243: PUSH
13244: LD_INT 118
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: ST_TO_ADDR
13264: GO 13895
13266: LD_INT 17
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13498
13274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_INT 1
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: LD_INT 3
13288: PUSH
13289: LD_INT 4
13291: PUSH
13292: LD_INT 5
13294: PUSH
13295: LD_INT 6
13297: PUSH
13298: LD_INT 7
13300: PUSH
13301: LD_INT 8
13303: PUSH
13304: LD_INT 9
13306: PUSH
13307: LD_INT 10
13309: PUSH
13310: LD_INT 11
13312: PUSH
13313: LD_INT 12
13315: PUSH
13316: LD_INT 13
13318: PUSH
13319: LD_INT 14
13321: PUSH
13322: LD_INT 15
13324: PUSH
13325: LD_INT 16
13327: PUSH
13328: LD_INT 17
13330: PUSH
13331: LD_INT 18
13333: PUSH
13334: LD_INT 19
13336: PUSH
13337: LD_INT 20
13339: PUSH
13340: LD_INT 21
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 23
13348: PUSH
13349: LD_INT 24
13351: PUSH
13352: LD_INT 25
13354: PUSH
13355: LD_INT 26
13357: PUSH
13358: LD_INT 27
13360: PUSH
13361: LD_INT 28
13363: PUSH
13364: LD_INT 29
13366: PUSH
13367: LD_INT 30
13369: PUSH
13370: LD_INT 31
13372: PUSH
13373: LD_INT 32
13375: PUSH
13376: LD_INT 33
13378: PUSH
13379: LD_INT 34
13381: PUSH
13382: LD_INT 36
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 101
13424: PUSH
13425: LD_INT 102
13427: PUSH
13428: LD_INT 103
13430: PUSH
13431: LD_INT 104
13433: PUSH
13434: LD_INT 105
13436: PUSH
13437: LD_INT 106
13439: PUSH
13440: LD_INT 107
13442: PUSH
13443: LD_INT 108
13445: PUSH
13446: LD_INT 109
13448: PUSH
13449: LD_INT 110
13451: PUSH
13452: LD_INT 111
13454: PUSH
13455: LD_INT 112
13457: PUSH
13458: LD_INT 113
13460: PUSH
13461: LD_INT 114
13463: PUSH
13464: LD_INT 116
13466: PUSH
13467: LD_INT 117
13469: PUSH
13470: LD_INT 118
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
13496: GO 13895
13498: LD_INT 18
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13654
13506: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13507: LD_ADDR_VAR 0 2
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 4
13517: PUSH
13518: LD_INT 5
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 11
13526: PUSH
13527: LD_INT 12
13529: PUSH
13530: LD_INT 15
13532: PUSH
13533: LD_INT 16
13535: PUSH
13536: LD_INT 20
13538: PUSH
13539: LD_INT 21
13541: PUSH
13542: LD_INT 22
13544: PUSH
13545: LD_INT 23
13547: PUSH
13548: LD_INT 25
13550: PUSH
13551: LD_INT 26
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 31
13559: PUSH
13560: LD_INT 32
13562: PUSH
13563: LD_INT 33
13565: PUSH
13566: LD_INT 34
13568: PUSH
13569: LD_INT 35
13571: PUSH
13572: LD_INT 36
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 102
13603: PUSH
13604: LD_INT 103
13606: PUSH
13607: LD_INT 106
13609: PUSH
13610: LD_INT 108
13612: PUSH
13613: LD_INT 112
13615: PUSH
13616: LD_INT 113
13618: PUSH
13619: LD_INT 114
13621: PUSH
13622: LD_INT 115
13624: PUSH
13625: LD_INT 116
13627: PUSH
13628: LD_INT 117
13630: PUSH
13631: LD_INT 118
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: ST_TO_ADDR
13652: GO 13895
13654: LD_INT 19
13656: DOUBLE
13657: EQUAL
13658: IFTRUE 13662
13660: GO 13894
13662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 1
13670: PUSH
13671: LD_INT 2
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: LD_INT 4
13679: PUSH
13680: LD_INT 5
13682: PUSH
13683: LD_INT 6
13685: PUSH
13686: LD_INT 7
13688: PUSH
13689: LD_INT 8
13691: PUSH
13692: LD_INT 9
13694: PUSH
13695: LD_INT 10
13697: PUSH
13698: LD_INT 11
13700: PUSH
13701: LD_INT 12
13703: PUSH
13704: LD_INT 13
13706: PUSH
13707: LD_INT 14
13709: PUSH
13710: LD_INT 15
13712: PUSH
13713: LD_INT 16
13715: PUSH
13716: LD_INT 17
13718: PUSH
13719: LD_INT 18
13721: PUSH
13722: LD_INT 19
13724: PUSH
13725: LD_INT 20
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 22
13733: PUSH
13734: LD_INT 23
13736: PUSH
13737: LD_INT 24
13739: PUSH
13740: LD_INT 25
13742: PUSH
13743: LD_INT 26
13745: PUSH
13746: LD_INT 27
13748: PUSH
13749: LD_INT 28
13751: PUSH
13752: LD_INT 29
13754: PUSH
13755: LD_INT 30
13757: PUSH
13758: LD_INT 31
13760: PUSH
13761: LD_INT 32
13763: PUSH
13764: LD_INT 33
13766: PUSH
13767: LD_INT 34
13769: PUSH
13770: LD_INT 35
13772: PUSH
13773: LD_INT 36
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 101
13816: PUSH
13817: LD_INT 102
13819: PUSH
13820: LD_INT 103
13822: PUSH
13823: LD_INT 104
13825: PUSH
13826: LD_INT 105
13828: PUSH
13829: LD_INT 106
13831: PUSH
13832: LD_INT 107
13834: PUSH
13835: LD_INT 108
13837: PUSH
13838: LD_INT 109
13840: PUSH
13841: LD_INT 110
13843: PUSH
13844: LD_INT 111
13846: PUSH
13847: LD_INT 112
13849: PUSH
13850: LD_INT 113
13852: PUSH
13853: LD_INT 114
13855: PUSH
13856: LD_INT 115
13858: PUSH
13859: LD_INT 116
13861: PUSH
13862: LD_INT 117
13864: PUSH
13865: LD_INT 118
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 13895
13894: POP
// end else
13895: GO 14126
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: LD_INT 1
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: LD_INT 3
13910: PUSH
13911: LD_INT 4
13913: PUSH
13914: LD_INT 5
13916: PUSH
13917: LD_INT 6
13919: PUSH
13920: LD_INT 7
13922: PUSH
13923: LD_INT 8
13925: PUSH
13926: LD_INT 9
13928: PUSH
13929: LD_INT 10
13931: PUSH
13932: LD_INT 11
13934: PUSH
13935: LD_INT 12
13937: PUSH
13938: LD_INT 13
13940: PUSH
13941: LD_INT 14
13943: PUSH
13944: LD_INT 15
13946: PUSH
13947: LD_INT 16
13949: PUSH
13950: LD_INT 17
13952: PUSH
13953: LD_INT 18
13955: PUSH
13956: LD_INT 19
13958: PUSH
13959: LD_INT 20
13961: PUSH
13962: LD_INT 21
13964: PUSH
13965: LD_INT 22
13967: PUSH
13968: LD_INT 23
13970: PUSH
13971: LD_INT 24
13973: PUSH
13974: LD_INT 25
13976: PUSH
13977: LD_INT 26
13979: PUSH
13980: LD_INT 27
13982: PUSH
13983: LD_INT 28
13985: PUSH
13986: LD_INT 29
13988: PUSH
13989: LD_INT 30
13991: PUSH
13992: LD_INT 31
13994: PUSH
13995: LD_INT 32
13997: PUSH
13998: LD_INT 33
14000: PUSH
14001: LD_INT 34
14003: PUSH
14004: LD_INT 35
14006: PUSH
14007: LD_INT 36
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 101
14050: PUSH
14051: LD_INT 102
14053: PUSH
14054: LD_INT 103
14056: PUSH
14057: LD_INT 104
14059: PUSH
14060: LD_INT 105
14062: PUSH
14063: LD_INT 106
14065: PUSH
14066: LD_INT 107
14068: PUSH
14069: LD_INT 108
14071: PUSH
14072: LD_INT 109
14074: PUSH
14075: LD_INT 110
14077: PUSH
14078: LD_INT 111
14080: PUSH
14081: LD_INT 112
14083: PUSH
14084: LD_INT 113
14086: PUSH
14087: LD_INT 114
14089: PUSH
14090: LD_INT 115
14092: PUSH
14093: LD_INT 116
14095: PUSH
14096: LD_INT 117
14098: PUSH
14099: LD_INT 118
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// if result then
14126: LD_VAR 0 2
14130: IFFALSE 14916
// begin normal :=  ;
14132: LD_ADDR_VAR 0 5
14136: PUSH
14137: LD_STRING 
14139: ST_TO_ADDR
// hardcore :=  ;
14140: LD_ADDR_VAR 0 6
14144: PUSH
14145: LD_STRING 
14147: ST_TO_ADDR
// active :=  ;
14148: LD_ADDR_VAR 0 7
14152: PUSH
14153: LD_STRING 
14155: ST_TO_ADDR
// for i = 1 to normalCounter do
14156: LD_ADDR_VAR 0 8
14160: PUSH
14161: DOUBLE
14162: LD_INT 1
14164: DEC
14165: ST_TO_ADDR
14166: LD_EXP 33
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14273
// begin tmp := 0 ;
14174: LD_ADDR_VAR 0 3
14178: PUSH
14179: LD_STRING 0
14181: ST_TO_ADDR
// if result [ 1 ] then
14182: LD_VAR 0 2
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: IFFALSE 14255
// if result [ 1 ] [ 1 ] = i then
14192: LD_VAR 0 2
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PUSH
14205: LD_VAR 0 8
14209: EQUAL
14210: IFFALSE 14255
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: LD_VAR 0 2
14221: PPUSH
14222: LD_INT 1
14224: PPUSH
14225: LD_VAR 0 2
14229: PUSH
14230: LD_INT 1
14232: ARRAY
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: CALL_OW 3
14241: PPUSH
14242: CALL_OW 1
14246: ST_TO_ADDR
// tmp := 1 ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_STRING 1
14254: ST_TO_ADDR
// end ; normal := normal & tmp ;
14255: LD_ADDR_VAR 0 5
14259: PUSH
14260: LD_VAR 0 5
14264: PUSH
14265: LD_VAR 0 3
14269: STR
14270: ST_TO_ADDR
// end ;
14271: GO 14171
14273: POP
14274: POP
// for i = 1 to hardcoreCounter do
14275: LD_ADDR_VAR 0 8
14279: PUSH
14280: DOUBLE
14281: LD_INT 1
14283: DEC
14284: ST_TO_ADDR
14285: LD_EXP 34
14289: PUSH
14290: FOR_TO
14291: IFFALSE 14396
// begin tmp := 0 ;
14293: LD_ADDR_VAR 0 3
14297: PUSH
14298: LD_STRING 0
14300: ST_TO_ADDR
// if result [ 2 ] then
14301: LD_VAR 0 2
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: IFFALSE 14378
// if result [ 2 ] [ 1 ] = 100 + i then
14311: LD_VAR 0 2
14315: PUSH
14316: LD_INT 2
14318: ARRAY
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PUSH
14324: LD_INT 100
14326: PUSH
14327: LD_VAR 0 8
14331: PLUS
14332: EQUAL
14333: IFFALSE 14378
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14335: LD_ADDR_VAR 0 2
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 2
14347: PPUSH
14348: LD_VAR 0 2
14352: PUSH
14353: LD_INT 2
14355: ARRAY
14356: PPUSH
14357: LD_INT 1
14359: PPUSH
14360: CALL_OW 3
14364: PPUSH
14365: CALL_OW 1
14369: ST_TO_ADDR
// tmp := 1 ;
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: LD_STRING 1
14377: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14378: LD_ADDR_VAR 0 6
14382: PUSH
14383: LD_VAR 0 6
14387: PUSH
14388: LD_VAR 0 3
14392: STR
14393: ST_TO_ADDR
// end ;
14394: GO 14290
14396: POP
14397: POP
// if isGameLoad then
14398: LD_VAR 0 1
14402: IFFALSE 14877
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14404: LD_ADDR_VAR 0 4
14408: PUSH
14409: LD_EXP 37
14413: PUSH
14414: LD_EXP 36
14418: PUSH
14419: LD_EXP 38
14423: PUSH
14424: LD_EXP 35
14428: PUSH
14429: LD_EXP 39
14433: PUSH
14434: LD_EXP 40
14438: PUSH
14439: LD_EXP 41
14443: PUSH
14444: LD_EXP 42
14448: PUSH
14449: LD_EXP 43
14453: PUSH
14454: LD_EXP 44
14458: PUSH
14459: LD_EXP 45
14463: PUSH
14464: LD_EXP 46
14468: PUSH
14469: LD_EXP 47
14473: PUSH
14474: LD_EXP 48
14478: PUSH
14479: LD_EXP 56
14483: PUSH
14484: LD_EXP 57
14488: PUSH
14489: LD_EXP 58
14493: PUSH
14494: LD_EXP 59
14498: PUSH
14499: LD_EXP 61
14503: PUSH
14504: LD_EXP 62
14508: PUSH
14509: LD_EXP 63
14513: PUSH
14514: LD_EXP 66
14518: PUSH
14519: LD_EXP 68
14523: PUSH
14524: LD_EXP 69
14528: PUSH
14529: LD_EXP 70
14533: PUSH
14534: LD_EXP 72
14538: PUSH
14539: LD_EXP 73
14543: PUSH
14544: LD_EXP 76
14548: PUSH
14549: LD_EXP 77
14553: PUSH
14554: LD_EXP 78
14558: PUSH
14559: LD_EXP 79
14563: PUSH
14564: LD_EXP 80
14568: PUSH
14569: LD_EXP 81
14573: PUSH
14574: LD_EXP 82
14578: PUSH
14579: LD_EXP 83
14583: PUSH
14584: LD_EXP 84
14588: PUSH
14589: LD_EXP 49
14593: PUSH
14594: LD_EXP 50
14598: PUSH
14599: LD_EXP 53
14603: PUSH
14604: LD_EXP 54
14608: PUSH
14609: LD_EXP 55
14613: PUSH
14614: LD_EXP 51
14618: PUSH
14619: LD_EXP 52
14623: PUSH
14624: LD_EXP 60
14628: PUSH
14629: LD_EXP 64
14633: PUSH
14634: LD_EXP 65
14638: PUSH
14639: LD_EXP 67
14643: PUSH
14644: LD_EXP 71
14648: PUSH
14649: LD_EXP 74
14653: PUSH
14654: LD_EXP 75
14658: PUSH
14659: LD_EXP 85
14663: PUSH
14664: LD_EXP 86
14668: PUSH
14669: LD_EXP 87
14673: PUSH
14674: LD_EXP 88
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: ST_TO_ADDR
// tmp :=  ;
14735: LD_ADDR_VAR 0 3
14739: PUSH
14740: LD_STRING 
14742: ST_TO_ADDR
// for i = 1 to normalCounter do
14743: LD_ADDR_VAR 0 8
14747: PUSH
14748: DOUBLE
14749: LD_INT 1
14751: DEC
14752: ST_TO_ADDR
14753: LD_EXP 33
14757: PUSH
14758: FOR_TO
14759: IFFALSE 14795
// begin if flags [ i ] then
14761: LD_VAR 0 4
14765: PUSH
14766: LD_VAR 0 8
14770: ARRAY
14771: IFFALSE 14793
// tmp := tmp & i & ; ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_VAR 0 3
14782: PUSH
14783: LD_VAR 0 8
14787: STR
14788: PUSH
14789: LD_STRING ;
14791: STR
14792: ST_TO_ADDR
// end ;
14793: GO 14758
14795: POP
14796: POP
// for i = 1 to hardcoreCounter do
14797: LD_ADDR_VAR 0 8
14801: PUSH
14802: DOUBLE
14803: LD_INT 1
14805: DEC
14806: ST_TO_ADDR
14807: LD_EXP 34
14811: PUSH
14812: FOR_TO
14813: IFFALSE 14859
// begin if flags [ normalCounter + i ] then
14815: LD_VAR 0 4
14819: PUSH
14820: LD_EXP 33
14824: PUSH
14825: LD_VAR 0 8
14829: PLUS
14830: ARRAY
14831: IFFALSE 14857
// tmp := tmp & ( 100 + i ) & ; ;
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_VAR 0 3
14842: PUSH
14843: LD_INT 100
14845: PUSH
14846: LD_VAR 0 8
14850: PLUS
14851: STR
14852: PUSH
14853: LD_STRING ;
14855: STR
14856: ST_TO_ADDR
// end ;
14857: GO 14812
14859: POP
14860: POP
// if tmp then
14861: LD_VAR 0 3
14865: IFFALSE 14877
// active := tmp ;
14867: LD_ADDR_VAR 0 7
14871: PUSH
14872: LD_VAR 0 3
14876: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14877: LD_STRING getStreamItemsFromMission("
14879: PUSH
14880: LD_VAR 0 5
14884: STR
14885: PUSH
14886: LD_STRING ","
14888: STR
14889: PUSH
14890: LD_VAR 0 6
14894: STR
14895: PUSH
14896: LD_STRING ","
14898: STR
14899: PUSH
14900: LD_VAR 0 7
14904: STR
14905: PUSH
14906: LD_STRING ")
14908: STR
14909: PPUSH
14910: CALL_OW 559
// end else
14914: GO 14923
// ToLua ( getStreamItemsFromMission("","","") ) ;
14916: LD_STRING getStreamItemsFromMission("","","")
14918: PPUSH
14919: CALL_OW 559
// end ;
14923: LD_VAR 0 2
14927: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14928: LD_EXP 32
14932: PUSH
14933: LD_EXP 37
14937: AND
14938: IFFALSE 15062
14940: GO 14942
14942: DISABLE
14943: LD_INT 0
14945: PPUSH
14946: PPUSH
// begin enable ;
14947: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_OWVAR 2
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 34
14970: PUSH
14971: LD_INT 7
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 34
14980: PUSH
14981: LD_INT 45
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 34
14990: PUSH
14991: LD_INT 28
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 34
15000: PUSH
15001: LD_INT 47
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: ST_TO_ADDR
// if not tmp then
15024: LD_VAR 0 2
15028: NOT
15029: IFFALSE 15033
// exit ;
15031: GO 15062
// for i in tmp do
15033: LD_ADDR_VAR 0 1
15037: PUSH
15038: LD_VAR 0 2
15042: PUSH
15043: FOR_IN
15044: IFFALSE 15060
// begin SetLives ( i , 0 ) ;
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL_OW 234
// end ;
15058: GO 15043
15060: POP
15061: POP
// end ;
15062: PPOPN 2
15064: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15065: LD_EXP 32
15069: PUSH
15070: LD_EXP 38
15074: AND
15075: IFFALSE 15159
15077: GO 15079
15079: DISABLE
15080: LD_INT 0
15082: PPUSH
15083: PPUSH
// begin enable ;
15084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15085: LD_ADDR_VAR 0 2
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_OWVAR 2
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 32
15104: PUSH
15105: LD_INT 3
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PPUSH
15116: CALL_OW 69
15120: ST_TO_ADDR
// if not tmp then
15121: LD_VAR 0 2
15125: NOT
15126: IFFALSE 15130
// exit ;
15128: GO 15159
// for i in tmp do
15130: LD_ADDR_VAR 0 1
15134: PUSH
15135: LD_VAR 0 2
15139: PUSH
15140: FOR_IN
15141: IFFALSE 15157
// begin SetLives ( i , 0 ) ;
15143: LD_VAR 0 1
15147: PPUSH
15148: LD_INT 0
15150: PPUSH
15151: CALL_OW 234
// end ;
15155: GO 15140
15157: POP
15158: POP
// end ;
15159: PPOPN 2
15161: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15162: LD_EXP 32
15166: PUSH
15167: LD_EXP 35
15171: AND
15172: IFFALSE 15265
15174: GO 15176
15176: DISABLE
15177: LD_INT 0
15179: PPUSH
// begin enable ;
15180: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_INT 22
15188: PUSH
15189: LD_OWVAR 2
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 25
15203: PUSH
15204: LD_INT 5
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 25
15213: PUSH
15214: LD_INT 9
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 25
15223: PUSH
15224: LD_INT 8
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PPUSH
15241: CALL_OW 69
15245: PUSH
15246: FOR_IN
15247: IFFALSE 15263
// begin SetClass ( i , 1 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: CALL_OW 336
// end ;
15261: GO 15246
15263: POP
15264: POP
// end ;
15265: PPOPN 1
15267: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15268: LD_EXP 32
15272: PUSH
15273: LD_EXP 36
15277: AND
15278: PUSH
15279: LD_OWVAR 65
15283: PUSH
15284: LD_INT 7
15286: LESS
15287: AND
15288: IFFALSE 15302
15290: GO 15292
15292: DISABLE
// begin enable ;
15293: ENABLE
// game_speed := 7 ;
15294: LD_ADDR_OWVAR 65
15298: PUSH
15299: LD_INT 7
15301: ST_TO_ADDR
// end ;
15302: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15303: LD_EXP 32
15307: PUSH
15308: LD_EXP 39
15312: AND
15313: IFFALSE 15515
15315: GO 15317
15317: DISABLE
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15323: LD_ADDR_VAR 0 3
15327: PUSH
15328: LD_INT 81
15330: PUSH
15331: LD_OWVAR 2
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 21
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 69
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 3
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15515
// if tmp > 5 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 5
15375: GREATER
15376: IFFALSE 15388
// k := 5 else
15378: LD_ADDR_VAR 0 2
15382: PUSH
15383: LD_INT 5
15385: ST_TO_ADDR
15386: GO 15398
// k := tmp ;
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: LD_VAR 0 3
15397: ST_TO_ADDR
// for i := 1 to k do
15398: LD_ADDR_VAR 0 1
15402: PUSH
15403: DOUBLE
15404: LD_INT 1
15406: DEC
15407: ST_TO_ADDR
15408: LD_VAR 0 2
15412: PUSH
15413: FOR_TO
15414: IFFALSE 15513
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15416: LD_VAR 0 3
15420: PUSH
15421: LD_VAR 0 1
15425: ARRAY
15426: PPUSH
15427: LD_VAR 0 1
15431: PUSH
15432: LD_INT 4
15434: MOD
15435: PUSH
15436: LD_INT 1
15438: PLUS
15439: PPUSH
15440: CALL_OW 259
15444: PUSH
15445: LD_INT 10
15447: LESS
15448: IFFALSE 15511
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15450: LD_VAR 0 3
15454: PUSH
15455: LD_VAR 0 1
15459: ARRAY
15460: PPUSH
15461: LD_VAR 0 1
15465: PUSH
15466: LD_INT 4
15468: MOD
15469: PUSH
15470: LD_INT 1
15472: PLUS
15473: PPUSH
15474: LD_VAR 0 3
15478: PUSH
15479: LD_VAR 0 1
15483: ARRAY
15484: PPUSH
15485: LD_VAR 0 1
15489: PUSH
15490: LD_INT 4
15492: MOD
15493: PUSH
15494: LD_INT 1
15496: PLUS
15497: PPUSH
15498: CALL_OW 259
15502: PUSH
15503: LD_INT 1
15505: PLUS
15506: PPUSH
15507: CALL_OW 237
15511: GO 15413
15513: POP
15514: POP
// end ;
15515: PPOPN 3
15517: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15518: LD_EXP 32
15522: PUSH
15523: LD_EXP 40
15527: AND
15528: IFFALSE 15548
15530: GO 15532
15532: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15533: LD_INT 4
15535: PPUSH
15536: LD_OWVAR 2
15540: PPUSH
15541: LD_INT 0
15543: PPUSH
15544: CALL_OW 324
15548: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15549: LD_EXP 32
15553: PUSH
15554: LD_EXP 69
15558: AND
15559: IFFALSE 15579
15561: GO 15563
15563: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15564: LD_INT 19
15566: PPUSH
15567: LD_OWVAR 2
15571: PPUSH
15572: LD_INT 0
15574: PPUSH
15575: CALL_OW 324
15579: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15580: LD_EXP 32
15584: PUSH
15585: LD_EXP 41
15589: AND
15590: IFFALSE 15692
15592: GO 15594
15594: DISABLE
15595: LD_INT 0
15597: PPUSH
15598: PPUSH
// begin enable ;
15599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_OWVAR 2
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 2
15619: PUSH
15620: LD_INT 34
15622: PUSH
15623: LD_INT 11
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 34
15632: PUSH
15633: LD_INT 30
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: ST_TO_ADDR
// if not tmp then
15654: LD_VAR 0 2
15658: NOT
15659: IFFALSE 15663
// exit ;
15661: GO 15692
// for i in tmp do
15663: LD_ADDR_VAR 0 1
15667: PUSH
15668: LD_VAR 0 2
15672: PUSH
15673: FOR_IN
15674: IFFALSE 15690
// begin SetLives ( i , 0 ) ;
15676: LD_VAR 0 1
15680: PPUSH
15681: LD_INT 0
15683: PPUSH
15684: CALL_OW 234
// end ;
15688: GO 15673
15690: POP
15691: POP
// end ;
15692: PPOPN 2
15694: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15695: LD_EXP 32
15699: PUSH
15700: LD_EXP 42
15704: AND
15705: IFFALSE 15725
15707: GO 15709
15709: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15710: LD_INT 32
15712: PPUSH
15713: LD_OWVAR 2
15717: PPUSH
15718: LD_INT 0
15720: PPUSH
15721: CALL_OW 324
15725: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15726: LD_EXP 32
15730: PUSH
15731: LD_EXP 43
15735: AND
15736: IFFALSE 15917
15738: GO 15740
15740: DISABLE
15741: LD_INT 0
15743: PPUSH
15744: PPUSH
15745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_OWVAR 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 33
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PPUSH
15777: CALL_OW 69
15781: ST_TO_ADDR
// if not tmp then
15782: LD_VAR 0 2
15786: NOT
15787: IFFALSE 15791
// exit ;
15789: GO 15917
// side := 0 ;
15791: LD_ADDR_VAR 0 3
15795: PUSH
15796: LD_INT 0
15798: ST_TO_ADDR
// for i := 1 to 8 do
15799: LD_ADDR_VAR 0 1
15803: PUSH
15804: DOUBLE
15805: LD_INT 1
15807: DEC
15808: ST_TO_ADDR
15809: LD_INT 8
15811: PUSH
15812: FOR_TO
15813: IFFALSE 15861
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15815: LD_OWVAR 2
15819: PUSH
15820: LD_VAR 0 1
15824: NONEQUAL
15825: PUSH
15826: LD_OWVAR 2
15830: PPUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 81
15840: PUSH
15841: LD_INT 2
15843: EQUAL
15844: AND
15845: IFFALSE 15859
// begin side := i ;
15847: LD_ADDR_VAR 0 3
15851: PUSH
15852: LD_VAR 0 1
15856: ST_TO_ADDR
// break ;
15857: GO 15861
// end ;
15859: GO 15812
15861: POP
15862: POP
// if not side then
15863: LD_VAR 0 3
15867: NOT
15868: IFFALSE 15872
// exit ;
15870: GO 15917
// for i := 1 to tmp do
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: DOUBLE
15878: LD_INT 1
15880: DEC
15881: ST_TO_ADDR
15882: LD_VAR 0 2
15886: PUSH
15887: FOR_TO
15888: IFFALSE 15915
// if Prob ( 60 ) then
15890: LD_INT 60
15892: PPUSH
15893: CALL_OW 13
15897: IFFALSE 15913
// SetSide ( i , side ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: CALL_OW 235
15913: GO 15887
15915: POP
15916: POP
// end ;
15917: PPOPN 3
15919: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15920: LD_EXP 32
15924: PUSH
15925: LD_EXP 45
15929: AND
15930: IFFALSE 16049
15932: GO 15934
15934: DISABLE
15935: LD_INT 0
15937: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15938: LD_ADDR_VAR 0 1
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_OWVAR 2
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 21
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 3
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 69
15991: PUSH
15992: FOR_IN
15993: IFFALSE 16047
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 257
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: LD_INT 4
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: IN
16023: IFFALSE 16045
// SetClass ( un , rand ( 1 , 4 ) ) ;
16025: LD_VAR 0 1
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: LD_INT 4
16035: PPUSH
16036: CALL_OW 12
16040: PPUSH
16041: CALL_OW 336
16045: GO 15992
16047: POP
16048: POP
// end ;
16049: PPOPN 1
16051: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16052: LD_EXP 32
16056: PUSH
16057: LD_EXP 44
16061: AND
16062: IFFALSE 16141
16064: GO 16066
16066: DISABLE
16067: LD_INT 0
16069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16070: LD_ADDR_VAR 0 1
16074: PUSH
16075: LD_INT 22
16077: PUSH
16078: LD_OWVAR 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 3
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: ST_TO_ADDR
// if not tmp then
16106: LD_VAR 0 1
16110: NOT
16111: IFFALSE 16115
// exit ;
16113: GO 16141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16115: LD_VAR 0 1
16119: PUSH
16120: LD_INT 1
16122: PPUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 12
16132: ARRAY
16133: PPUSH
16134: LD_INT 100
16136: PPUSH
16137: CALL_OW 234
// end ;
16141: PPOPN 1
16143: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16144: LD_EXP 32
16148: PUSH
16149: LD_EXP 46
16153: AND
16154: IFFALSE 16252
16156: GO 16158
16158: DISABLE
16159: LD_INT 0
16161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16162: LD_ADDR_VAR 0 1
16166: PUSH
16167: LD_INT 22
16169: PUSH
16170: LD_OWVAR 2
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL_OW 69
16197: ST_TO_ADDR
// if not tmp then
16198: LD_VAR 0 1
16202: NOT
16203: IFFALSE 16207
// exit ;
16205: GO 16252
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16207: LD_VAR 0 1
16211: PUSH
16212: LD_INT 1
16214: PPUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 12
16224: ARRAY
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_INT 4
16231: PPUSH
16232: CALL_OW 12
16236: PPUSH
16237: LD_INT 3000
16239: PPUSH
16240: LD_INT 9000
16242: PPUSH
16243: CALL_OW 12
16247: PPUSH
16248: CALL_OW 492
// end ;
16252: PPOPN 1
16254: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16255: LD_EXP 32
16259: PUSH
16260: LD_EXP 47
16264: AND
16265: IFFALSE 16285
16267: GO 16269
16269: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16270: LD_INT 1
16272: PPUSH
16273: LD_OWVAR 2
16277: PPUSH
16278: LD_INT 0
16280: PPUSH
16281: CALL_OW 324
16285: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16286: LD_EXP 32
16290: PUSH
16291: LD_EXP 48
16295: AND
16296: IFFALSE 16379
16298: GO 16300
16300: DISABLE
16301: LD_INT 0
16303: PPUSH
16304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16305: LD_ADDR_VAR 0 2
16309: PUSH
16310: LD_INT 22
16312: PUSH
16313: LD_OWVAR 2
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 21
16324: PUSH
16325: LD_INT 3
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: ST_TO_ADDR
// if not tmp then
16341: LD_VAR 0 2
16345: NOT
16346: IFFALSE 16350
// exit ;
16348: GO 16379
// for i in tmp do
16350: LD_ADDR_VAR 0 1
16354: PUSH
16355: LD_VAR 0 2
16359: PUSH
16360: FOR_IN
16361: IFFALSE 16377
// SetBLevel ( i , 10 ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_INT 10
16370: PPUSH
16371: CALL_OW 241
16375: GO 16360
16377: POP
16378: POP
// end ;
16379: PPOPN 2
16381: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16382: LD_EXP 32
16386: PUSH
16387: LD_EXP 49
16391: AND
16392: IFFALSE 16503
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
16401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16402: LD_ADDR_VAR 0 3
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_OWVAR 2
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 69
16437: ST_TO_ADDR
// if not tmp then
16438: LD_VAR 0 3
16442: NOT
16443: IFFALSE 16447
// exit ;
16445: GO 16503
// un := tmp [ rand ( 1 , tmp ) ] ;
16447: LD_ADDR_VAR 0 2
16451: PUSH
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 1
16459: PPUSH
16460: LD_VAR 0 3
16464: PPUSH
16465: CALL_OW 12
16469: ARRAY
16470: ST_TO_ADDR
// if Crawls ( un ) then
16471: LD_VAR 0 2
16475: PPUSH
16476: CALL_OW 318
16480: IFFALSE 16491
// ComWalk ( un ) ;
16482: LD_VAR 0 2
16486: PPUSH
16487: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 5
16498: PPUSH
16499: CALL_OW 336
// end ;
16503: PPOPN 3
16505: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16506: LD_EXP 32
16510: PUSH
16511: LD_EXP 50
16515: AND
16516: PUSH
16517: LD_OWVAR 67
16521: PUSH
16522: LD_INT 4
16524: LESS
16525: AND
16526: IFFALSE 16545
16528: GO 16530
16530: DISABLE
// begin Difficulty := Difficulty + 1 ;
16531: LD_ADDR_OWVAR 67
16535: PUSH
16536: LD_OWVAR 67
16540: PUSH
16541: LD_INT 1
16543: PLUS
16544: ST_TO_ADDR
// end ;
16545: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16546: LD_EXP 32
16550: PUSH
16551: LD_EXP 51
16555: AND
16556: IFFALSE 16659
16558: GO 16560
16560: DISABLE
16561: LD_INT 0
16563: PPUSH
// begin for i := 1 to 5 do
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_INT 5
16576: PUSH
16577: FOR_TO
16578: IFFALSE 16657
// begin uc_nation := nation_nature ;
16580: LD_ADDR_OWVAR 21
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// uc_side := 0 ;
16588: LD_ADDR_OWVAR 20
16592: PUSH
16593: LD_INT 0
16595: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16596: LD_ADDR_OWVAR 29
16600: PUSH
16601: LD_INT 12
16603: PUSH
16604: LD_INT 12
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: ST_TO_ADDR
// hc_agressivity := 20 ;
16611: LD_ADDR_OWVAR 35
16615: PUSH
16616: LD_INT 20
16618: ST_TO_ADDR
// hc_class := class_tiger ;
16619: LD_ADDR_OWVAR 28
16623: PUSH
16624: LD_INT 14
16626: ST_TO_ADDR
// hc_gallery :=  ;
16627: LD_ADDR_OWVAR 33
16631: PUSH
16632: LD_STRING 
16634: ST_TO_ADDR
// hc_name :=  ;
16635: LD_ADDR_OWVAR 26
16639: PUSH
16640: LD_STRING 
16642: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16643: CALL_OW 44
16647: PPUSH
16648: LD_INT 0
16650: PPUSH
16651: CALL_OW 51
// end ;
16655: GO 16577
16657: POP
16658: POP
// end ;
16659: PPOPN 1
16661: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16662: LD_EXP 32
16666: PUSH
16667: LD_EXP 52
16671: AND
16672: IFFALSE 16681
16674: GO 16676
16676: DISABLE
// StreamSibBomb ;
16677: CALL 16682 0 0
16681: END
// export function StreamSibBomb ; var i , x , y ; begin
16682: LD_INT 0
16684: PPUSH
16685: PPUSH
16686: PPUSH
16687: PPUSH
// result := false ;
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// for i := 1 to 16 do
16696: LD_ADDR_VAR 0 2
16700: PUSH
16701: DOUBLE
16702: LD_INT 1
16704: DEC
16705: ST_TO_ADDR
16706: LD_INT 16
16708: PUSH
16709: FOR_TO
16710: IFFALSE 16909
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16712: LD_ADDR_VAR 0 3
16716: PUSH
16717: LD_INT 10
16719: PUSH
16720: LD_INT 20
16722: PUSH
16723: LD_INT 30
16725: PUSH
16726: LD_INT 40
16728: PUSH
16729: LD_INT 50
16731: PUSH
16732: LD_INT 60
16734: PUSH
16735: LD_INT 70
16737: PUSH
16738: LD_INT 80
16740: PUSH
16741: LD_INT 90
16743: PUSH
16744: LD_INT 100
16746: PUSH
16747: LD_INT 110
16749: PUSH
16750: LD_INT 120
16752: PUSH
16753: LD_INT 130
16755: PUSH
16756: LD_INT 140
16758: PUSH
16759: LD_INT 150
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_INT 15
16784: PPUSH
16785: CALL_OW 12
16789: ARRAY
16790: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16791: LD_ADDR_VAR 0 4
16795: PUSH
16796: LD_INT 10
16798: PUSH
16799: LD_INT 20
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 40
16807: PUSH
16808: LD_INT 50
16810: PUSH
16811: LD_INT 60
16813: PUSH
16814: LD_INT 70
16816: PUSH
16817: LD_INT 80
16819: PUSH
16820: LD_INT 90
16822: PUSH
16823: LD_INT 100
16825: PUSH
16826: LD_INT 110
16828: PUSH
16829: LD_INT 120
16831: PUSH
16832: LD_INT 130
16834: PUSH
16835: LD_INT 140
16837: PUSH
16838: LD_INT 150
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 1
16860: PPUSH
16861: LD_INT 15
16863: PPUSH
16864: CALL_OW 12
16868: ARRAY
16869: ST_TO_ADDR
// if ValidHex ( x , y ) then
16870: LD_VAR 0 3
16874: PPUSH
16875: LD_VAR 0 4
16879: PPUSH
16880: CALL_OW 488
16884: IFFALSE 16907
// begin result := [ x , y ] ;
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_VAR 0 3
16895: PUSH
16896: LD_VAR 0 4
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: ST_TO_ADDR
// break ;
16905: GO 16909
// end ; end ;
16907: GO 16709
16909: POP
16910: POP
// if result then
16911: LD_VAR 0 1
16915: IFFALSE 16975
// begin ToLua ( playSibBomb() ) ;
16917: LD_STRING playSibBomb()
16919: PPUSH
16920: CALL_OW 559
// wait ( 0 0$14 ) ;
16924: LD_INT 490
16926: PPUSH
16927: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_INT 2
16947: ARRAY
16948: PPUSH
16949: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16953: LD_VAR 0 1
16957: PUSH
16958: LD_INT 1
16960: ARRAY
16961: PPUSH
16962: LD_VAR 0 1
16966: PUSH
16967: LD_INT 2
16969: ARRAY
16970: PPUSH
16971: CALL_OW 429
// end ; end ;
16975: LD_VAR 0 1
16979: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16980: LD_EXP 32
16984: PUSH
16985: LD_EXP 54
16989: AND
16990: IFFALSE 17002
16992: GO 16994
16994: DISABLE
// YouLost (  ) ;
16995: LD_STRING 
16997: PPUSH
16998: CALL_OW 104
17002: END
// every 0 0$1 trigger StreamModeActive and sFog do
17003: LD_EXP 32
17007: PUSH
17008: LD_EXP 53
17012: AND
17013: IFFALSE 17027
17015: GO 17017
17017: DISABLE
// FogOff ( your_side ) ;
17018: LD_OWVAR 2
17022: PPUSH
17023: CALL_OW 344
17027: END
// every 0 0$1 trigger StreamModeActive and sSun do
17028: LD_EXP 32
17032: PUSH
17033: LD_EXP 55
17037: AND
17038: IFFALSE 17066
17040: GO 17042
17042: DISABLE
// begin solar_recharge_percent := 0 ;
17043: LD_ADDR_OWVAR 79
17047: PUSH
17048: LD_INT 0
17050: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17051: LD_INT 10500
17053: PPUSH
17054: CALL_OW 67
// solar_recharge_percent := 100 ;
17058: LD_ADDR_OWVAR 79
17062: PUSH
17063: LD_INT 100
17065: ST_TO_ADDR
// end ;
17066: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17067: LD_EXP 32
17071: PUSH
17072: LD_EXP 56
17076: AND
17077: IFFALSE 17316
17079: GO 17081
17081: DISABLE
17082: LD_INT 0
17084: PPUSH
17085: PPUSH
17086: PPUSH
// begin tmp := [ ] ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: EMPTY
17093: ST_TO_ADDR
// for i := 1 to 6 do
17094: LD_ADDR_VAR 0 1
17098: PUSH
17099: DOUBLE
17100: LD_INT 1
17102: DEC
17103: ST_TO_ADDR
17104: LD_INT 6
17106: PUSH
17107: FOR_TO
17108: IFFALSE 17213
// begin uc_nation := nation_nature ;
17110: LD_ADDR_OWVAR 21
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// uc_side := 0 ;
17118: LD_ADDR_OWVAR 20
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17126: LD_ADDR_OWVAR 29
17130: PUSH
17131: LD_INT 12
17133: PUSH
17134: LD_INT 12
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: ST_TO_ADDR
// hc_agressivity := 20 ;
17141: LD_ADDR_OWVAR 35
17145: PUSH
17146: LD_INT 20
17148: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17149: LD_ADDR_OWVAR 28
17153: PUSH
17154: LD_INT 17
17156: ST_TO_ADDR
// hc_gallery :=  ;
17157: LD_ADDR_OWVAR 33
17161: PUSH
17162: LD_STRING 
17164: ST_TO_ADDR
// hc_name :=  ;
17165: LD_ADDR_OWVAR 26
17169: PUSH
17170: LD_STRING 
17172: ST_TO_ADDR
// un := CreateHuman ;
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: CALL_OW 44
17182: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17183: LD_VAR 0 2
17187: PPUSH
17188: LD_INT 1
17190: PPUSH
17191: CALL_OW 51
// tmp := tmp ^ un ;
17195: LD_ADDR_VAR 0 3
17199: PUSH
17200: LD_VAR 0 3
17204: PUSH
17205: LD_VAR 0 2
17209: ADD
17210: ST_TO_ADDR
// end ;
17211: GO 17107
17213: POP
17214: POP
// repeat wait ( 0 0$1 ) ;
17215: LD_INT 35
17217: PPUSH
17218: CALL_OW 67
// for un in tmp do
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_VAR 0 3
17231: PUSH
17232: FOR_IN
17233: IFFALSE 17307
// begin if IsDead ( un ) then
17235: LD_VAR 0 2
17239: PPUSH
17240: CALL_OW 301
17244: IFFALSE 17264
// begin tmp := tmp diff un ;
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: LD_VAR 0 3
17255: PUSH
17256: LD_VAR 0 2
17260: DIFF
17261: ST_TO_ADDR
// continue ;
17262: GO 17232
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17264: LD_VAR 0 2
17268: PPUSH
17269: LD_INT 3
17271: PUSH
17272: LD_INT 22
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 69
17290: PPUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: CALL_OW 74
17300: PPUSH
17301: CALL_OW 115
// end ;
17305: GO 17232
17307: POP
17308: POP
// until not tmp ;
17309: LD_VAR 0 3
17313: NOT
17314: IFFALSE 17215
// end ;
17316: PPOPN 3
17318: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17319: LD_EXP 32
17323: PUSH
17324: LD_EXP 57
17328: AND
17329: IFFALSE 17383
17331: GO 17333
17333: DISABLE
// begin ToLua ( displayTroll(); ) ;
17334: LD_STRING displayTroll();
17336: PPUSH
17337: CALL_OW 559
// wait ( 3 3$00 ) ;
17341: LD_INT 6300
17343: PPUSH
17344: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17348: LD_STRING hideTroll();
17350: PPUSH
17351: CALL_OW 559
// wait ( 1 1$00 ) ;
17355: LD_INT 2100
17357: PPUSH
17358: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17362: LD_STRING displayTroll();
17364: PPUSH
17365: CALL_OW 559
// wait ( 1 1$00 ) ;
17369: LD_INT 2100
17371: PPUSH
17372: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17376: LD_STRING hideTroll();
17378: PPUSH
17379: CALL_OW 559
// end ;
17383: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17384: LD_EXP 32
17388: PUSH
17389: LD_EXP 58
17393: AND
17394: IFFALSE 17457
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
// begin p := 0 ;
17402: LD_ADDR_VAR 0 1
17406: PUSH
17407: LD_INT 0
17409: ST_TO_ADDR
// repeat game_speed := 1 ;
17410: LD_ADDR_OWVAR 65
17414: PUSH
17415: LD_INT 1
17417: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17418: LD_INT 35
17420: PPUSH
17421: CALL_OW 67
// p := p + 1 ;
17425: LD_ADDR_VAR 0 1
17429: PUSH
17430: LD_VAR 0 1
17434: PUSH
17435: LD_INT 1
17437: PLUS
17438: ST_TO_ADDR
// until p >= 60 ;
17439: LD_VAR 0 1
17443: PUSH
17444: LD_INT 60
17446: GREATEREQUAL
17447: IFFALSE 17410
// game_speed := 4 ;
17449: LD_ADDR_OWVAR 65
17453: PUSH
17454: LD_INT 4
17456: ST_TO_ADDR
// end ;
17457: PPOPN 1
17459: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17460: LD_EXP 32
17464: PUSH
17465: LD_EXP 59
17469: AND
17470: IFFALSE 17616
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
17478: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17479: LD_ADDR_VAR 0 1
17483: PUSH
17484: LD_INT 22
17486: PUSH
17487: LD_OWVAR 2
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 30
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 30
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: ST_TO_ADDR
// if not depot then
17533: LD_VAR 0 1
17537: NOT
17538: IFFALSE 17542
// exit ;
17540: GO 17616
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17542: LD_ADDR_VAR 0 2
17546: PUSH
17547: LD_VAR 0 1
17551: PUSH
17552: LD_INT 1
17554: PPUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 12
17564: ARRAY
17565: PPUSH
17566: CALL_OW 274
17570: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17571: LD_VAR 0 2
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 0
17581: PPUSH
17582: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17586: LD_VAR 0 2
17590: PPUSH
17591: LD_INT 2
17593: PPUSH
17594: LD_INT 0
17596: PPUSH
17597: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 3
17608: PPUSH
17609: LD_INT 0
17611: PPUSH
17612: CALL_OW 277
// end ;
17616: PPOPN 2
17618: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17619: LD_EXP 32
17623: PUSH
17624: LD_EXP 60
17628: AND
17629: IFFALSE 17726
17631: GO 17633
17633: DISABLE
17634: LD_INT 0
17636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 22
17644: PUSH
17645: LD_OWVAR 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 21
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 3
17666: PUSH
17667: LD_INT 23
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 69
17690: ST_TO_ADDR
// if not tmp then
17691: LD_VAR 0 1
17695: NOT
17696: IFFALSE 17700
// exit ;
17698: GO 17726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17700: LD_VAR 0 1
17704: PUSH
17705: LD_INT 1
17707: PPUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 12
17717: ARRAY
17718: PPUSH
17719: LD_INT 200
17721: PPUSH
17722: CALL_OW 234
// end ;
17726: PPOPN 1
17728: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17729: LD_EXP 32
17733: PUSH
17734: LD_EXP 61
17738: AND
17739: IFFALSE 17818
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17747: LD_ADDR_VAR 0 1
17751: PUSH
17752: LD_INT 22
17754: PUSH
17755: LD_OWVAR 2
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 21
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 69
17782: ST_TO_ADDR
// if not tmp then
17783: LD_VAR 0 1
17787: NOT
17788: IFFALSE 17792
// exit ;
17790: GO 17818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17792: LD_VAR 0 1
17796: PUSH
17797: LD_INT 1
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 12
17809: ARRAY
17810: PPUSH
17811: LD_INT 60
17813: PPUSH
17814: CALL_OW 234
// end ;
17818: PPOPN 1
17820: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17821: LD_EXP 32
17825: PUSH
17826: LD_EXP 62
17830: AND
17831: IFFALSE 17930
17833: GO 17835
17835: DISABLE
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
// begin enable ;
17840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17841: LD_ADDR_VAR 0 1
17845: PUSH
17846: LD_INT 22
17848: PUSH
17849: LD_OWVAR 2
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 61
17860: PUSH
17861: EMPTY
17862: LIST
17863: PUSH
17864: LD_INT 33
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 69
17883: ST_TO_ADDR
// if not tmp then
17884: LD_VAR 0 1
17888: NOT
17889: IFFALSE 17893
// exit ;
17891: GO 17930
// for i in tmp do
17893: LD_ADDR_VAR 0 2
17897: PUSH
17898: LD_VAR 0 1
17902: PUSH
17903: FOR_IN
17904: IFFALSE 17928
// if IsControledBy ( i ) then
17906: LD_VAR 0 2
17910: PPUSH
17911: CALL_OW 312
17915: IFFALSE 17926
// ComUnlink ( i ) ;
17917: LD_VAR 0 2
17921: PPUSH
17922: CALL_OW 136
17926: GO 17903
17928: POP
17929: POP
// end ;
17930: PPOPN 2
17932: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17933: LD_EXP 32
17937: PUSH
17938: LD_EXP 63
17942: AND
17943: IFFALSE 18083
17945: GO 17947
17947: DISABLE
17948: LD_INT 0
17950: PPUSH
17951: PPUSH
// begin ToLua ( displayPowell(); ) ;
17952: LD_STRING displayPowell();
17954: PPUSH
17955: CALL_OW 559
// uc_side := 0 ;
17959: LD_ADDR_OWVAR 20
17963: PUSH
17964: LD_INT 0
17966: ST_TO_ADDR
// uc_nation := 2 ;
17967: LD_ADDR_OWVAR 21
17971: PUSH
17972: LD_INT 2
17974: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17975: LD_ADDR_OWVAR 37
17979: PUSH
17980: LD_INT 14
17982: ST_TO_ADDR
// vc_engine := engine_siberite ;
17983: LD_ADDR_OWVAR 39
17987: PUSH
17988: LD_INT 3
17990: ST_TO_ADDR
// vc_control := control_apeman ;
17991: LD_ADDR_OWVAR 38
17995: PUSH
17996: LD_INT 5
17998: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17999: LD_ADDR_OWVAR 40
18003: PUSH
18004: LD_INT 29
18006: ST_TO_ADDR
// un := CreateVehicle ;
18007: LD_ADDR_VAR 0 2
18011: PUSH
18012: CALL_OW 45
18016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18017: LD_VAR 0 2
18021: PPUSH
18022: LD_INT 1
18024: PPUSH
18025: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18029: LD_INT 35
18031: PPUSH
18032: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18036: LD_VAR 0 2
18040: PPUSH
18041: LD_INT 22
18043: PUSH
18044: LD_OWVAR 2
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 74
18067: PPUSH
18068: CALL_OW 115
// until IsDead ( un ) ;
18072: LD_VAR 0 2
18076: PPUSH
18077: CALL_OW 301
18081: IFFALSE 18029
// end ;
18083: PPOPN 2
18085: END
// every 0 0$1 trigger StreamModeActive and sStu do
18086: LD_EXP 32
18090: PUSH
18091: LD_EXP 71
18095: AND
18096: IFFALSE 18112
18098: GO 18100
18100: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18101: LD_STRING displayStucuk();
18103: PPUSH
18104: CALL_OW 559
// ResetFog ;
18108: CALL_OW 335
// end ;
18112: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18113: LD_EXP 32
18117: PUSH
18118: LD_EXP 64
18122: AND
18123: IFFALSE 18264
18125: GO 18127
18127: DISABLE
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18132: LD_ADDR_VAR 0 2
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_OWVAR 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 21
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: ST_TO_ADDR
// if not tmp then
18168: LD_VAR 0 2
18172: NOT
18173: IFFALSE 18177
// exit ;
18175: GO 18264
// un := tmp [ rand ( 1 , tmp ) ] ;
18177: LD_ADDR_VAR 0 1
18181: PUSH
18182: LD_VAR 0 2
18186: PUSH
18187: LD_INT 1
18189: PPUSH
18190: LD_VAR 0 2
18194: PPUSH
18195: CALL_OW 12
18199: ARRAY
18200: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18201: LD_VAR 0 1
18205: PPUSH
18206: LD_INT 0
18208: PPUSH
18209: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_OWVAR 3
18222: PUSH
18223: LD_VAR 0 1
18227: DIFF
18228: PPUSH
18229: LD_VAR 0 1
18233: PPUSH
18234: CALL_OW 74
18238: PPUSH
18239: CALL_OW 115
// wait ( 0 0$20 ) ;
18243: LD_INT 700
18245: PPUSH
18246: CALL_OW 67
// SetSide ( un , your_side ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_OWVAR 2
18259: PPUSH
18260: CALL_OW 235
// end ;
18264: PPOPN 2
18266: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18267: LD_EXP 32
18271: PUSH
18272: LD_EXP 65
18276: AND
18277: IFFALSE 18383
18279: GO 18281
18281: DISABLE
18282: LD_INT 0
18284: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: LD_INT 22
18292: PUSH
18293: LD_OWVAR 2
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: LD_INT 30
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 30
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: ST_TO_ADDR
// if not depot then
18339: LD_VAR 0 1
18343: NOT
18344: IFFALSE 18348
// exit ;
18346: GO 18383
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18348: LD_VAR 0 1
18352: PUSH
18353: LD_INT 1
18355: ARRAY
18356: PPUSH
18357: CALL_OW 250
18361: PPUSH
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PPUSH
18371: CALL_OW 251
18375: PPUSH
18376: LD_INT 70
18378: PPUSH
18379: CALL_OW 495
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18386: LD_EXP 32
18390: PUSH
18391: LD_EXP 66
18395: AND
18396: IFFALSE 18607
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18408: LD_ADDR_VAR 0 5
18412: PUSH
18413: LD_INT 22
18415: PUSH
18416: LD_OWVAR 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: ST_TO_ADDR
// if not tmp then
18444: LD_VAR 0 5
18448: NOT
18449: IFFALSE 18453
// exit ;
18451: GO 18607
// for i in tmp do
18453: LD_ADDR_VAR 0 1
18457: PUSH
18458: LD_VAR 0 5
18462: PUSH
18463: FOR_IN
18464: IFFALSE 18605
// begin d := rand ( 0 , 5 ) ;
18466: LD_ADDR_VAR 0 4
18470: PUSH
18471: LD_INT 0
18473: PPUSH
18474: LD_INT 5
18476: PPUSH
18477: CALL_OW 12
18481: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18482: LD_ADDR_VAR 0 2
18486: PUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 250
18496: PPUSH
18497: LD_VAR 0 4
18501: PPUSH
18502: LD_INT 3
18504: PPUSH
18505: LD_INT 12
18507: PPUSH
18508: CALL_OW 12
18512: PPUSH
18513: CALL_OW 272
18517: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18518: LD_ADDR_VAR 0 3
18522: PUSH
18523: LD_VAR 0 1
18527: PPUSH
18528: CALL_OW 251
18532: PPUSH
18533: LD_VAR 0 4
18537: PPUSH
18538: LD_INT 3
18540: PPUSH
18541: LD_INT 12
18543: PPUSH
18544: CALL_OW 12
18548: PPUSH
18549: CALL_OW 273
18553: ST_TO_ADDR
// if ValidHex ( x , y ) then
18554: LD_VAR 0 2
18558: PPUSH
18559: LD_VAR 0 3
18563: PPUSH
18564: CALL_OW 488
18568: IFFALSE 18603
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18570: LD_VAR 0 1
18574: PPUSH
18575: LD_VAR 0 2
18579: PPUSH
18580: LD_VAR 0 3
18584: PPUSH
18585: LD_INT 3
18587: PPUSH
18588: LD_INT 6
18590: PPUSH
18591: CALL_OW 12
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: CALL_OW 483
// end ;
18603: GO 18463
18605: POP
18606: POP
// end ;
18607: PPOPN 5
18609: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18610: LD_EXP 32
18614: PUSH
18615: LD_EXP 67
18619: AND
18620: IFFALSE 18714
18622: GO 18624
18624: DISABLE
18625: LD_INT 0
18627: PPUSH
18628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18629: LD_ADDR_VAR 0 2
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_OWVAR 2
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 32
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 21
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if not tmp then
18676: LD_VAR 0 2
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18714
// for i in tmp do
18685: LD_ADDR_VAR 0 1
18689: PUSH
18690: LD_VAR 0 2
18694: PUSH
18695: FOR_IN
18696: IFFALSE 18712
// SetFuel ( i , 0 ) ;
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_INT 0
18705: PPUSH
18706: CALL_OW 240
18710: GO 18695
18712: POP
18713: POP
// end ;
18714: PPOPN 2
18716: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18717: LD_EXP 32
18721: PUSH
18722: LD_EXP 68
18726: AND
18727: IFFALSE 18793
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18735: LD_ADDR_VAR 0 1
18739: PUSH
18740: LD_INT 22
18742: PUSH
18743: LD_OWVAR 2
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 29
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PPUSH
18766: CALL_OW 69
18770: ST_TO_ADDR
// if not tmp then
18771: LD_VAR 0 1
18775: NOT
18776: IFFALSE 18780
// exit ;
18778: GO 18793
// DestroyUnit ( tmp [ 1 ] ) ;
18780: LD_VAR 0 1
18784: PUSH
18785: LD_INT 1
18787: ARRAY
18788: PPUSH
18789: CALL_OW 65
// end ;
18793: PPOPN 1
18795: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18796: LD_EXP 32
18800: PUSH
18801: LD_EXP 70
18805: AND
18806: IFFALSE 18935
18808: GO 18810
18810: DISABLE
18811: LD_INT 0
18813: PPUSH
// begin uc_side := 0 ;
18814: LD_ADDR_OWVAR 20
18818: PUSH
18819: LD_INT 0
18821: ST_TO_ADDR
// uc_nation := nation_arabian ;
18822: LD_ADDR_OWVAR 21
18826: PUSH
18827: LD_INT 2
18829: ST_TO_ADDR
// hc_gallery :=  ;
18830: LD_ADDR_OWVAR 33
18834: PUSH
18835: LD_STRING 
18837: ST_TO_ADDR
// hc_name :=  ;
18838: LD_ADDR_OWVAR 26
18842: PUSH
18843: LD_STRING 
18845: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18846: LD_INT 1
18848: PPUSH
18849: LD_INT 11
18851: PPUSH
18852: LD_INT 10
18854: PPUSH
18855: CALL_OW 380
// un := CreateHuman ;
18859: LD_ADDR_VAR 0 1
18863: PUSH
18864: CALL_OW 44
18868: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18869: LD_VAR 0 1
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18881: LD_INT 35
18883: PPUSH
18884: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PPUSH
18905: CALL_OW 69
18909: PPUSH
18910: LD_VAR 0 1
18914: PPUSH
18915: CALL_OW 74
18919: PPUSH
18920: CALL_OW 115
// until IsDead ( un ) ;
18924: LD_VAR 0 1
18928: PPUSH
18929: CALL_OW 301
18933: IFFALSE 18881
// end ;
18935: PPOPN 1
18937: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18938: LD_EXP 32
18942: PUSH
18943: LD_EXP 72
18947: AND
18948: IFFALSE 18960
18950: GO 18952
18952: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18953: LD_STRING earthquake(getX(game), 0, 32)
18955: PPUSH
18956: CALL_OW 559
18960: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18961: LD_EXP 32
18965: PUSH
18966: LD_EXP 73
18970: AND
18971: IFFALSE 19062
18973: GO 18975
18975: DISABLE
18976: LD_INT 0
18978: PPUSH
// begin enable ;
18979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18980: LD_ADDR_VAR 0 1
18984: PUSH
18985: LD_INT 22
18987: PUSH
18988: LD_OWVAR 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 21
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 33
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: ST_TO_ADDR
// if not tmp then
19027: LD_VAR 0 1
19031: NOT
19032: IFFALSE 19036
// exit ;
19034: GO 19062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 1
19043: PPUSH
19044: LD_VAR 0 1
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: PPUSH
19055: LD_INT 1
19057: PPUSH
19058: CALL_OW 234
// end ;
19062: PPOPN 1
19064: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19065: LD_EXP 32
19069: PUSH
19070: LD_EXP 74
19074: AND
19075: IFFALSE 19216
19077: GO 19079
19079: DISABLE
19080: LD_INT 0
19082: PPUSH
19083: PPUSH
19084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: LD_INT 22
19092: PUSH
19093: LD_OWVAR 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 25
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PPUSH
19116: CALL_OW 69
19120: ST_TO_ADDR
// if not tmp then
19121: LD_VAR 0 3
19125: NOT
19126: IFFALSE 19130
// exit ;
19128: GO 19216
// un := tmp [ rand ( 1 , tmp ) ] ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_VAR 0 3
19139: PUSH
19140: LD_INT 1
19142: PPUSH
19143: LD_VAR 0 3
19147: PPUSH
19148: CALL_OW 12
19152: ARRAY
19153: ST_TO_ADDR
// if Crawls ( un ) then
19154: LD_VAR 0 2
19158: PPUSH
19159: CALL_OW 318
19163: IFFALSE 19174
// ComWalk ( un ) ;
19165: LD_VAR 0 2
19169: PPUSH
19170: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_INT 9
19181: PPUSH
19182: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19186: LD_INT 28
19188: PPUSH
19189: LD_OWVAR 2
19193: PPUSH
19194: LD_INT 2
19196: PPUSH
19197: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19201: LD_INT 29
19203: PPUSH
19204: LD_OWVAR 2
19208: PPUSH
19209: LD_INT 2
19211: PPUSH
19212: CALL_OW 322
// end ;
19216: PPOPN 3
19218: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19219: LD_EXP 32
19223: PUSH
19224: LD_EXP 75
19228: AND
19229: IFFALSE 19340
19231: GO 19233
19233: DISABLE
19234: LD_INT 0
19236: PPUSH
19237: PPUSH
19238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 22
19246: PUSH
19247: LD_OWVAR 2
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 25
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 3
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19340
// un := tmp [ rand ( 1 , tmp ) ] ;
19284: LD_ADDR_VAR 0 2
19288: PUSH
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 1
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 12
19306: ARRAY
19307: ST_TO_ADDR
// if Crawls ( un ) then
19308: LD_VAR 0 2
19312: PPUSH
19313: CALL_OW 318
19317: IFFALSE 19328
// ComWalk ( un ) ;
19319: LD_VAR 0 2
19323: PPUSH
19324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19328: LD_VAR 0 2
19332: PPUSH
19333: LD_INT 8
19335: PPUSH
19336: CALL_OW 336
// end ;
19340: PPOPN 3
19342: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19343: LD_EXP 32
19347: PUSH
19348: LD_EXP 76
19352: AND
19353: IFFALSE 19497
19355: GO 19357
19357: DISABLE
19358: LD_INT 0
19360: PPUSH
19361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: LD_INT 22
19369: PUSH
19370: LD_OWVAR 2
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 21
19381: PUSH
19382: LD_INT 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 34
19394: PUSH
19395: LD_INT 12
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 34
19404: PUSH
19405: LD_INT 51
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 34
19414: PUSH
19415: LD_INT 32
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: PPUSH
19433: CALL_OW 69
19437: ST_TO_ADDR
// if not tmp then
19438: LD_VAR 0 2
19442: NOT
19443: IFFALSE 19447
// exit ;
19445: GO 19497
// for i in tmp do
19447: LD_ADDR_VAR 0 1
19451: PUSH
19452: LD_VAR 0 2
19456: PUSH
19457: FOR_IN
19458: IFFALSE 19495
// if GetCargo ( i , mat_artifact ) = 0 then
19460: LD_VAR 0 1
19464: PPUSH
19465: LD_INT 4
19467: PPUSH
19468: CALL_OW 289
19472: PUSH
19473: LD_INT 0
19475: EQUAL
19476: IFFALSE 19493
// SetCargo ( i , mat_siberit , 100 ) ;
19478: LD_VAR 0 1
19482: PPUSH
19483: LD_INT 3
19485: PPUSH
19486: LD_INT 100
19488: PPUSH
19489: CALL_OW 290
19493: GO 19457
19495: POP
19496: POP
// end ;
19497: PPOPN 2
19499: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19500: LD_EXP 32
19504: PUSH
19505: LD_EXP 77
19509: AND
19510: IFFALSE 19693
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 22
19526: PUSH
19527: LD_OWVAR 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 69
19540: ST_TO_ADDR
// if not tmp then
19541: LD_VAR 0 2
19545: NOT
19546: IFFALSE 19550
// exit ;
19548: GO 19693
// for i := 1 to 2 do
19550: LD_ADDR_VAR 0 1
19554: PUSH
19555: DOUBLE
19556: LD_INT 1
19558: DEC
19559: ST_TO_ADDR
19560: LD_INT 2
19562: PUSH
19563: FOR_TO
19564: IFFALSE 19691
// begin uc_side := your_side ;
19566: LD_ADDR_OWVAR 20
19570: PUSH
19571: LD_OWVAR 2
19575: ST_TO_ADDR
// uc_nation := nation_american ;
19576: LD_ADDR_OWVAR 21
19580: PUSH
19581: LD_INT 1
19583: ST_TO_ADDR
// vc_chassis := us_morphling ;
19584: LD_ADDR_OWVAR 37
19588: PUSH
19589: LD_INT 5
19591: ST_TO_ADDR
// vc_engine := engine_siberite ;
19592: LD_ADDR_OWVAR 39
19596: PUSH
19597: LD_INT 3
19599: ST_TO_ADDR
// vc_control := control_computer ;
19600: LD_ADDR_OWVAR 38
19604: PUSH
19605: LD_INT 3
19607: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19608: LD_ADDR_OWVAR 40
19612: PUSH
19613: LD_INT 10
19615: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19616: LD_VAR 0 2
19620: PUSH
19621: LD_INT 1
19623: ARRAY
19624: PPUSH
19625: CALL_OW 310
19629: NOT
19630: IFFALSE 19677
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19632: CALL_OW 45
19636: PPUSH
19637: LD_VAR 0 2
19641: PUSH
19642: LD_INT 1
19644: ARRAY
19645: PPUSH
19646: CALL_OW 250
19650: PPUSH
19651: LD_VAR 0 2
19655: PUSH
19656: LD_INT 1
19658: ARRAY
19659: PPUSH
19660: CALL_OW 251
19664: PPUSH
19665: LD_INT 12
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 50
19675: GO 19689
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19677: CALL_OW 45
19681: PPUSH
19682: LD_INT 1
19684: PPUSH
19685: CALL_OW 51
// end ;
19689: GO 19563
19691: POP
19692: POP
// end ;
19693: PPOPN 2
19695: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19696: LD_EXP 32
19700: PUSH
19701: LD_EXP 78
19705: AND
19706: IFFALSE 19928
19708: GO 19710
19710: DISABLE
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19719: LD_ADDR_VAR 0 6
19723: PUSH
19724: LD_INT 22
19726: PUSH
19727: LD_OWVAR 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 21
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 3
19748: PUSH
19749: LD_INT 23
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: PPUSH
19768: CALL_OW 69
19772: ST_TO_ADDR
// if not tmp then
19773: LD_VAR 0 6
19777: NOT
19778: IFFALSE 19782
// exit ;
19780: GO 19928
// s1 := rand ( 1 , 4 ) ;
19782: LD_ADDR_VAR 0 2
19786: PUSH
19787: LD_INT 1
19789: PPUSH
19790: LD_INT 4
19792: PPUSH
19793: CALL_OW 12
19797: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19798: LD_ADDR_VAR 0 4
19802: PUSH
19803: LD_VAR 0 6
19807: PUSH
19808: LD_INT 1
19810: ARRAY
19811: PPUSH
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 259
19821: ST_TO_ADDR
// if s1 = 1 then
19822: LD_VAR 0 2
19826: PUSH
19827: LD_INT 1
19829: EQUAL
19830: IFFALSE 19850
// s2 := rand ( 2 , 4 ) else
19832: LD_ADDR_VAR 0 3
19836: PUSH
19837: LD_INT 2
19839: PPUSH
19840: LD_INT 4
19842: PPUSH
19843: CALL_OW 12
19847: ST_TO_ADDR
19848: GO 19858
// s2 := 1 ;
19850: LD_ADDR_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19858: LD_ADDR_VAR 0 5
19862: PUSH
19863: LD_VAR 0 6
19867: PUSH
19868: LD_INT 1
19870: ARRAY
19871: PPUSH
19872: LD_VAR 0 3
19876: PPUSH
19877: CALL_OW 259
19881: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19882: LD_VAR 0 6
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: PPUSH
19891: LD_VAR 0 2
19895: PPUSH
19896: LD_VAR 0 5
19900: PPUSH
19901: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19905: LD_VAR 0 6
19909: PUSH
19910: LD_INT 1
19912: ARRAY
19913: PPUSH
19914: LD_VAR 0 3
19918: PPUSH
19919: LD_VAR 0 4
19923: PPUSH
19924: CALL_OW 237
// end ;
19928: PPOPN 6
19930: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19931: LD_EXP 32
19935: PUSH
19936: LD_EXP 79
19940: AND
19941: IFFALSE 20020
19943: GO 19945
19945: DISABLE
19946: LD_INT 0
19948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19949: LD_ADDR_VAR 0 1
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_OWVAR 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 3
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PPUSH
19980: CALL_OW 69
19984: ST_TO_ADDR
// if not tmp then
19985: LD_VAR 0 1
19989: NOT
19990: IFFALSE 19994
// exit ;
19992: GO 20020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19994: LD_VAR 0 1
19998: PUSH
19999: LD_INT 1
20001: PPUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 12
20011: ARRAY
20012: PPUSH
20013: LD_INT 1
20015: PPUSH
20016: CALL_OW 234
// end ;
20020: PPOPN 1
20022: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20023: LD_EXP 32
20027: PUSH
20028: LD_EXP 80
20032: AND
20033: IFFALSE 20145
20035: GO 20037
20037: DISABLE
20038: LD_INT 0
20040: PPUSH
20041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20042: LD_ADDR_VAR 0 2
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_OWVAR 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 30
20064: PUSH
20065: LD_INT 27
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 30
20074: PUSH
20075: LD_INT 26
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 30
20084: PUSH
20085: LD_INT 28
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: ST_TO_ADDR
// if not tmp then
20107: LD_VAR 0 2
20111: NOT
20112: IFFALSE 20116
// exit ;
20114: GO 20145
// for i in tmp do
20116: LD_ADDR_VAR 0 1
20120: PUSH
20121: LD_VAR 0 2
20125: PUSH
20126: FOR_IN
20127: IFFALSE 20143
// SetLives ( i , 1 ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_INT 1
20136: PPUSH
20137: CALL_OW 234
20141: GO 20126
20143: POP
20144: POP
// end ;
20145: PPOPN 2
20147: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20148: LD_EXP 32
20152: PUSH
20153: LD_EXP 81
20157: AND
20158: IFFALSE 20445
20160: GO 20162
20162: DISABLE
20163: LD_INT 0
20165: PPUSH
20166: PPUSH
20167: PPUSH
// begin i := rand ( 1 , 7 ) ;
20168: LD_ADDR_VAR 0 1
20172: PUSH
20173: LD_INT 1
20175: PPUSH
20176: LD_INT 7
20178: PPUSH
20179: CALL_OW 12
20183: ST_TO_ADDR
// case i of 1 :
20184: LD_VAR 0 1
20188: PUSH
20189: LD_INT 1
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20207
20197: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20198: LD_STRING earthquake(getX(game), 0, 32)
20200: PPUSH
20201: CALL_OW 559
20205: GO 20445
20207: LD_INT 2
20209: DOUBLE
20210: EQUAL
20211: IFTRUE 20215
20213: GO 20229
20215: POP
// begin ToLua ( displayStucuk(); ) ;
20216: LD_STRING displayStucuk();
20218: PPUSH
20219: CALL_OW 559
// ResetFog ;
20223: CALL_OW 335
// end ; 3 :
20227: GO 20445
20229: LD_INT 3
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20341
20237: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20238: LD_ADDR_VAR 0 2
20242: PUSH
20243: LD_INT 22
20245: PUSH
20246: LD_OWVAR 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 25
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL_OW 69
20273: ST_TO_ADDR
// if not tmp then
20274: LD_VAR 0 2
20278: NOT
20279: IFFALSE 20283
// exit ;
20281: GO 20445
// un := tmp [ rand ( 1 , tmp ) ] ;
20283: LD_ADDR_VAR 0 3
20287: PUSH
20288: LD_VAR 0 2
20292: PUSH
20293: LD_INT 1
20295: PPUSH
20296: LD_VAR 0 2
20300: PPUSH
20301: CALL_OW 12
20305: ARRAY
20306: ST_TO_ADDR
// if Crawls ( un ) then
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 318
20316: IFFALSE 20327
// ComWalk ( un ) ;
20318: LD_VAR 0 3
20322: PPUSH
20323: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_INT 8
20334: PPUSH
20335: CALL_OW 336
// end ; 4 :
20339: GO 20445
20341: LD_INT 4
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20423
20349: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20350: LD_ADDR_VAR 0 2
20354: PUSH
20355: LD_INT 22
20357: PUSH
20358: LD_OWVAR 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 30
20369: PUSH
20370: LD_INT 29
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PPUSH
20381: CALL_OW 69
20385: ST_TO_ADDR
// if not tmp then
20386: LD_VAR 0 2
20390: NOT
20391: IFFALSE 20395
// exit ;
20393: GO 20445
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20395: LD_VAR 0 2
20399: PUSH
20400: LD_INT 1
20402: ARRAY
20403: PPUSH
20404: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20408: LD_VAR 0 2
20412: PUSH
20413: LD_INT 1
20415: ARRAY
20416: PPUSH
20417: CALL_OW 65
// end ; 5 .. 7 :
20421: GO 20445
20423: LD_INT 5
20425: DOUBLE
20426: GREATEREQUAL
20427: IFFALSE 20435
20429: LD_INT 7
20431: DOUBLE
20432: LESSEQUAL
20433: IFTRUE 20437
20435: GO 20444
20437: POP
// StreamSibBomb ; end ;
20438: CALL 16682 0 0
20442: GO 20445
20444: POP
// end ;
20445: PPOPN 3
20447: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20448: LD_EXP 32
20452: PUSH
20453: LD_EXP 82
20457: AND
20458: IFFALSE 20614
20460: GO 20462
20462: DISABLE
20463: LD_INT 0
20465: PPUSH
20466: PPUSH
20467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20468: LD_ADDR_VAR 0 2
20472: PUSH
20473: LD_INT 81
20475: PUSH
20476: LD_OWVAR 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: LD_INT 21
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 21
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 69
20521: ST_TO_ADDR
// if not tmp then
20522: LD_VAR 0 2
20526: NOT
20527: IFFALSE 20531
// exit ;
20529: GO 20614
// p := 0 ;
20531: LD_ADDR_VAR 0 3
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20539: LD_INT 35
20541: PPUSH
20542: CALL_OW 67
// p := p + 1 ;
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 1
20558: PLUS
20559: ST_TO_ADDR
// for i in tmp do
20560: LD_ADDR_VAR 0 1
20564: PUSH
20565: LD_VAR 0 2
20569: PUSH
20570: FOR_IN
20571: IFFALSE 20602
// if GetLives ( i ) < 1000 then
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 256
20582: PUSH
20583: LD_INT 1000
20585: LESS
20586: IFFALSE 20600
// SetLives ( i , 1000 ) ;
20588: LD_VAR 0 1
20592: PPUSH
20593: LD_INT 1000
20595: PPUSH
20596: CALL_OW 234
20600: GO 20570
20602: POP
20603: POP
// until p > 20 ;
20604: LD_VAR 0 3
20608: PUSH
20609: LD_INT 20
20611: GREATER
20612: IFFALSE 20539
// end ;
20614: PPOPN 3
20616: END
// every 0 0$1 trigger StreamModeActive and sTime do
20617: LD_EXP 32
20621: PUSH
20622: LD_EXP 83
20626: AND
20627: IFFALSE 20662
20629: GO 20631
20631: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20632: LD_INT 28
20634: PPUSH
20635: LD_OWVAR 2
20639: PPUSH
20640: LD_INT 2
20642: PPUSH
20643: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20647: LD_INT 30
20649: PPUSH
20650: LD_OWVAR 2
20654: PPUSH
20655: LD_INT 2
20657: PPUSH
20658: CALL_OW 322
// end ;
20662: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20663: LD_EXP 32
20667: PUSH
20668: LD_EXP 84
20672: AND
20673: IFFALSE 20794
20675: GO 20677
20677: DISABLE
20678: LD_INT 0
20680: PPUSH
20681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20682: LD_ADDR_VAR 0 2
20686: PUSH
20687: LD_INT 22
20689: PUSH
20690: LD_OWVAR 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 21
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 3
20711: PUSH
20712: LD_INT 23
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: PPUSH
20731: CALL_OW 69
20735: ST_TO_ADDR
// if not tmp then
20736: LD_VAR 0 2
20740: NOT
20741: IFFALSE 20745
// exit ;
20743: GO 20794
// for i in tmp do
20745: LD_ADDR_VAR 0 1
20749: PUSH
20750: LD_VAR 0 2
20754: PUSH
20755: FOR_IN
20756: IFFALSE 20792
// begin if Crawls ( i ) then
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL_OW 318
20767: IFFALSE 20778
// ComWalk ( i ) ;
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 138
// SetClass ( i , 2 ) ;
20778: LD_VAR 0 1
20782: PPUSH
20783: LD_INT 2
20785: PPUSH
20786: CALL_OW 336
// end ;
20790: GO 20755
20792: POP
20793: POP
// end ;
20794: PPOPN 2
20796: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20797: LD_EXP 32
20801: PUSH
20802: LD_EXP 85
20806: AND
20807: IFFALSE 21095
20809: GO 20811
20811: DISABLE
20812: LD_INT 0
20814: PPUSH
20815: PPUSH
20816: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20817: LD_OWVAR 2
20821: PPUSH
20822: LD_INT 9
20824: PPUSH
20825: LD_INT 1
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20835: LD_INT 9
20837: PPUSH
20838: LD_OWVAR 2
20842: PPUSH
20843: CALL_OW 343
// uc_side := 9 ;
20847: LD_ADDR_OWVAR 20
20851: PUSH
20852: LD_INT 9
20854: ST_TO_ADDR
// uc_nation := 2 ;
20855: LD_ADDR_OWVAR 21
20859: PUSH
20860: LD_INT 2
20862: ST_TO_ADDR
// hc_name := Dark Warrior ;
20863: LD_ADDR_OWVAR 26
20867: PUSH
20868: LD_STRING Dark Warrior
20870: ST_TO_ADDR
// hc_gallery :=  ;
20871: LD_ADDR_OWVAR 33
20875: PUSH
20876: LD_STRING 
20878: ST_TO_ADDR
// hc_noskilllimit := true ;
20879: LD_ADDR_OWVAR 76
20883: PUSH
20884: LD_INT 1
20886: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20887: LD_ADDR_OWVAR 31
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 30
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: ST_TO_ADDR
// un := CreateHuman ;
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: CALL_OW 44
20919: ST_TO_ADDR
// hc_noskilllimit := false ;
20920: LD_ADDR_OWVAR 76
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20928: LD_VAR 0 3
20932: PPUSH
20933: LD_INT 1
20935: PPUSH
20936: CALL_OW 51
// ToLua ( playRanger() ) ;
20940: LD_STRING playRanger()
20942: PPUSH
20943: CALL_OW 559
// p := 0 ;
20947: LD_ADDR_VAR 0 2
20951: PUSH
20952: LD_INT 0
20954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20955: LD_INT 35
20957: PPUSH
20958: CALL_OW 67
// p := p + 1 ;
20962: LD_ADDR_VAR 0 2
20966: PUSH
20967: LD_VAR 0 2
20971: PUSH
20972: LD_INT 1
20974: PLUS
20975: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20976: LD_VAR 0 3
20980: PPUSH
20981: CALL_OW 256
20985: PUSH
20986: LD_INT 1000
20988: LESS
20989: IFFALSE 21003
// SetLives ( un , 1000 ) ;
20991: LD_VAR 0 3
20995: PPUSH
20996: LD_INT 1000
20998: PPUSH
20999: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21003: LD_VAR 0 3
21007: PPUSH
21008: LD_INT 81
21010: PUSH
21011: LD_OWVAR 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 91
21022: PUSH
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 30
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PPUSH
21040: CALL_OW 69
21044: PPUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: CALL_OW 74
21054: PPUSH
21055: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21059: LD_VAR 0 2
21063: PUSH
21064: LD_INT 80
21066: GREATER
21067: PUSH
21068: LD_VAR 0 3
21072: PPUSH
21073: CALL_OW 301
21077: OR
21078: IFFALSE 20955
// if un then
21080: LD_VAR 0 3
21084: IFFALSE 21095
// RemoveUnit ( un ) ;
21086: LD_VAR 0 3
21090: PPUSH
21091: CALL_OW 64
// end ;
21095: PPOPN 3
21097: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21098: LD_EXP 86
21102: IFFALSE 21218
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
21111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21112: LD_ADDR_VAR 0 2
21116: PUSH
21117: LD_INT 81
21119: PUSH
21120: LD_OWVAR 2
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 21
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PPUSH
21143: CALL_OW 69
21147: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21148: LD_STRING playComputer()
21150: PPUSH
21151: CALL_OW 559
// if not tmp then
21155: LD_VAR 0 2
21159: NOT
21160: IFFALSE 21164
// exit ;
21162: GO 21218
// for i in tmp do
21164: LD_ADDR_VAR 0 1
21168: PUSH
21169: LD_VAR 0 2
21173: PUSH
21174: FOR_IN
21175: IFFALSE 21216
// for j := 1 to 4 do
21177: LD_ADDR_VAR 0 3
21181: PUSH
21182: DOUBLE
21183: LD_INT 1
21185: DEC
21186: ST_TO_ADDR
21187: LD_INT 4
21189: PUSH
21190: FOR_TO
21191: IFFALSE 21212
// SetSkill ( i , j , 10 ) ;
21193: LD_VAR 0 1
21197: PPUSH
21198: LD_VAR 0 3
21202: PPUSH
21203: LD_INT 10
21205: PPUSH
21206: CALL_OW 237
21210: GO 21190
21212: POP
21213: POP
21214: GO 21174
21216: POP
21217: POP
// end ;
21218: PPOPN 3
21220: END
// every 0 0$1 trigger s30 do var i , tmp ;
21221: LD_EXP 87
21225: IFFALSE 21294
21227: GO 21229
21229: DISABLE
21230: LD_INT 0
21232: PPUSH
21233: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21234: LD_ADDR_VAR 0 2
21238: PUSH
21239: LD_INT 22
21241: PUSH
21242: LD_OWVAR 2
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PPUSH
21251: CALL_OW 69
21255: ST_TO_ADDR
// if not tmp then
21256: LD_VAR 0 2
21260: NOT
21261: IFFALSE 21265
// exit ;
21263: GO 21294
// for i in tmp do
21265: LD_ADDR_VAR 0 1
21269: PUSH
21270: LD_VAR 0 2
21274: PUSH
21275: FOR_IN
21276: IFFALSE 21292
// SetLives ( i , 300 ) ;
21278: LD_VAR 0 1
21282: PPUSH
21283: LD_INT 300
21285: PPUSH
21286: CALL_OW 234
21290: GO 21275
21292: POP
21293: POP
// end ;
21294: PPOPN 2
21296: END
// every 0 0$1 trigger s60 do var i , tmp ;
21297: LD_EXP 88
21301: IFFALSE 21370
21303: GO 21305
21305: DISABLE
21306: LD_INT 0
21308: PPUSH
21309: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_INT 22
21317: PUSH
21318: LD_OWVAR 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: ST_TO_ADDR
// if not tmp then
21332: LD_VAR 0 2
21336: NOT
21337: IFFALSE 21341
// exit ;
21339: GO 21370
// for i in tmp do
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_VAR 0 2
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21368
// SetLives ( i , 600 ) ;
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 600
21361: PPUSH
21362: CALL_OW 234
21366: GO 21351
21368: POP
21369: POP
// end ;
21370: PPOPN 2
21372: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21373: LD_INT 0
21375: PPUSH
// case cmd of 301 :
21376: LD_VAR 0 1
21380: PUSH
21381: LD_INT 301
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21421
21389: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21390: LD_VAR 0 6
21394: PPUSH
21395: LD_VAR 0 7
21399: PPUSH
21400: LD_VAR 0 8
21404: PPUSH
21405: LD_VAR 0 4
21409: PPUSH
21410: LD_VAR 0 5
21414: PPUSH
21415: CALL 22630 0 5
21419: GO 21542
21421: LD_INT 302
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21466
21429: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21430: LD_VAR 0 6
21434: PPUSH
21435: LD_VAR 0 7
21439: PPUSH
21440: LD_VAR 0 8
21444: PPUSH
21445: LD_VAR 0 9
21449: PPUSH
21450: LD_VAR 0 4
21454: PPUSH
21455: LD_VAR 0 5
21459: PPUSH
21460: CALL 22721 0 6
21464: GO 21542
21466: LD_INT 303
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21511
21474: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21475: LD_VAR 0 6
21479: PPUSH
21480: LD_VAR 0 7
21484: PPUSH
21485: LD_VAR 0 8
21489: PPUSH
21490: LD_VAR 0 9
21494: PPUSH
21495: LD_VAR 0 4
21499: PPUSH
21500: LD_VAR 0 5
21504: PPUSH
21505: CALL 21547 0 6
21509: GO 21542
21511: LD_INT 304
21513: DOUBLE
21514: EQUAL
21515: IFTRUE 21519
21517: GO 21541
21519: POP
// hHackTeleport ( unit , x , y ) ; end ;
21520: LD_VAR 0 2
21524: PPUSH
21525: LD_VAR 0 4
21529: PPUSH
21530: LD_VAR 0 5
21534: PPUSH
21535: CALL 23314 0 3
21539: GO 21542
21541: POP
// end ;
21542: LD_VAR 0 12
21546: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21551: LD_VAR 0 1
21555: PUSH
21556: LD_INT 1
21558: LESS
21559: PUSH
21560: LD_VAR 0 1
21564: PUSH
21565: LD_INT 3
21567: GREATER
21568: OR
21569: PUSH
21570: LD_VAR 0 5
21574: PPUSH
21575: LD_VAR 0 6
21579: PPUSH
21580: CALL_OW 428
21584: OR
21585: IFFALSE 21589
// exit ;
21587: GO 22317
// uc_side := your_side ;
21589: LD_ADDR_OWVAR 20
21593: PUSH
21594: LD_OWVAR 2
21598: ST_TO_ADDR
// uc_nation := nation ;
21599: LD_ADDR_OWVAR 21
21603: PUSH
21604: LD_VAR 0 1
21608: ST_TO_ADDR
// bc_level = 1 ;
21609: LD_ADDR_OWVAR 43
21613: PUSH
21614: LD_INT 1
21616: ST_TO_ADDR
// case btype of 1 :
21617: LD_VAR 0 2
21621: PUSH
21622: LD_INT 1
21624: DOUBLE
21625: EQUAL
21626: IFTRUE 21630
21628: GO 21641
21630: POP
// bc_type := b_depot ; 2 :
21631: LD_ADDR_OWVAR 42
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
21639: GO 22261
21641: LD_INT 2
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21660
21649: POP
// bc_type := b_warehouse ; 3 :
21650: LD_ADDR_OWVAR 42
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
21658: GO 22261
21660: LD_INT 3
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21679
21668: POP
// bc_type := b_lab ; 4 .. 9 :
21669: LD_ADDR_OWVAR 42
21673: PUSH
21674: LD_INT 6
21676: ST_TO_ADDR
21677: GO 22261
21679: LD_INT 4
21681: DOUBLE
21682: GREATEREQUAL
21683: IFFALSE 21691
21685: LD_INT 9
21687: DOUBLE
21688: LESSEQUAL
21689: IFTRUE 21693
21691: GO 21753
21693: POP
// begin bc_type := b_lab_half ;
21694: LD_ADDR_OWVAR 42
21698: PUSH
21699: LD_INT 7
21701: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21702: LD_ADDR_OWVAR 44
21706: PUSH
21707: LD_INT 10
21709: PUSH
21710: LD_INT 11
21712: PUSH
21713: LD_INT 12
21715: PUSH
21716: LD_INT 15
21718: PUSH
21719: LD_INT 14
21721: PUSH
21722: LD_INT 13
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: PUSH
21733: LD_VAR 0 2
21737: PUSH
21738: LD_INT 3
21740: MINUS
21741: ARRAY
21742: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21743: LD_ADDR_OWVAR 45
21747: PUSH
21748: LD_INT 9
21750: ST_TO_ADDR
// end ; 10 .. 13 :
21751: GO 22261
21753: LD_INT 10
21755: DOUBLE
21756: GREATEREQUAL
21757: IFFALSE 21765
21759: LD_INT 13
21761: DOUBLE
21762: LESSEQUAL
21763: IFTRUE 21767
21765: GO 21844
21767: POP
// begin bc_type := b_lab_full ;
21768: LD_ADDR_OWVAR 42
21772: PUSH
21773: LD_INT 8
21775: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21776: LD_ADDR_OWVAR 44
21780: PUSH
21781: LD_INT 10
21783: PUSH
21784: LD_INT 12
21786: PUSH
21787: LD_INT 14
21789: PUSH
21790: LD_INT 13
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: LD_VAR 0 2
21803: PUSH
21804: LD_INT 9
21806: MINUS
21807: ARRAY
21808: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21809: LD_ADDR_OWVAR 45
21813: PUSH
21814: LD_INT 11
21816: PUSH
21817: LD_INT 15
21819: PUSH
21820: LD_INT 12
21822: PUSH
21823: LD_INT 15
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: LD_VAR 0 2
21836: PUSH
21837: LD_INT 9
21839: MINUS
21840: ARRAY
21841: ST_TO_ADDR
// end ; 14 :
21842: GO 22261
21844: LD_INT 14
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21863
21852: POP
// bc_type := b_workshop ; 15 :
21853: LD_ADDR_OWVAR 42
21857: PUSH
21858: LD_INT 2
21860: ST_TO_ADDR
21861: GO 22261
21863: LD_INT 15
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 21882
21871: POP
// bc_type := b_factory ; 16 :
21872: LD_ADDR_OWVAR 42
21876: PUSH
21877: LD_INT 3
21879: ST_TO_ADDR
21880: GO 22261
21882: LD_INT 16
21884: DOUBLE
21885: EQUAL
21886: IFTRUE 21890
21888: GO 21901
21890: POP
// bc_type := b_ext_gun ; 17 :
21891: LD_ADDR_OWVAR 42
21895: PUSH
21896: LD_INT 17
21898: ST_TO_ADDR
21899: GO 22261
21901: LD_INT 17
21903: DOUBLE
21904: EQUAL
21905: IFTRUE 21909
21907: GO 21937
21909: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21910: LD_ADDR_OWVAR 42
21914: PUSH
21915: LD_INT 19
21917: PUSH
21918: LD_INT 23
21920: PUSH
21921: LD_INT 19
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: PUSH
21929: LD_VAR 0 1
21933: ARRAY
21934: ST_TO_ADDR
21935: GO 22261
21937: LD_INT 18
21939: DOUBLE
21940: EQUAL
21941: IFTRUE 21945
21943: GO 21956
21945: POP
// bc_type := b_ext_radar ; 19 :
21946: LD_ADDR_OWVAR 42
21950: PUSH
21951: LD_INT 20
21953: ST_TO_ADDR
21954: GO 22261
21956: LD_INT 19
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 21975
21964: POP
// bc_type := b_ext_radio ; 20 :
21965: LD_ADDR_OWVAR 42
21969: PUSH
21970: LD_INT 22
21972: ST_TO_ADDR
21973: GO 22261
21975: LD_INT 20
21977: DOUBLE
21978: EQUAL
21979: IFTRUE 21983
21981: GO 21994
21983: POP
// bc_type := b_ext_siberium ; 21 :
21984: LD_ADDR_OWVAR 42
21988: PUSH
21989: LD_INT 21
21991: ST_TO_ADDR
21992: GO 22261
21994: LD_INT 21
21996: DOUBLE
21997: EQUAL
21998: IFTRUE 22002
22000: GO 22013
22002: POP
// bc_type := b_ext_computer ; 22 :
22003: LD_ADDR_OWVAR 42
22007: PUSH
22008: LD_INT 24
22010: ST_TO_ADDR
22011: GO 22261
22013: LD_INT 22
22015: DOUBLE
22016: EQUAL
22017: IFTRUE 22021
22019: GO 22032
22021: POP
// bc_type := b_ext_track ; 23 :
22022: LD_ADDR_OWVAR 42
22026: PUSH
22027: LD_INT 16
22029: ST_TO_ADDR
22030: GO 22261
22032: LD_INT 23
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22051
22040: POP
// bc_type := b_ext_laser ; 24 :
22041: LD_ADDR_OWVAR 42
22045: PUSH
22046: LD_INT 25
22048: ST_TO_ADDR
22049: GO 22261
22051: LD_INT 24
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22070
22059: POP
// bc_type := b_control_tower ; 25 :
22060: LD_ADDR_OWVAR 42
22064: PUSH
22065: LD_INT 36
22067: ST_TO_ADDR
22068: GO 22261
22070: LD_INT 25
22072: DOUBLE
22073: EQUAL
22074: IFTRUE 22078
22076: GO 22089
22078: POP
// bc_type := b_breastwork ; 26 :
22079: LD_ADDR_OWVAR 42
22083: PUSH
22084: LD_INT 31
22086: ST_TO_ADDR
22087: GO 22261
22089: LD_INT 26
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22108
22097: POP
// bc_type := b_bunker ; 27 :
22098: LD_ADDR_OWVAR 42
22102: PUSH
22103: LD_INT 32
22105: ST_TO_ADDR
22106: GO 22261
22108: LD_INT 27
22110: DOUBLE
22111: EQUAL
22112: IFTRUE 22116
22114: GO 22127
22116: POP
// bc_type := b_turret ; 28 :
22117: LD_ADDR_OWVAR 42
22121: PUSH
22122: LD_INT 33
22124: ST_TO_ADDR
22125: GO 22261
22127: LD_INT 28
22129: DOUBLE
22130: EQUAL
22131: IFTRUE 22135
22133: GO 22146
22135: POP
// bc_type := b_armoury ; 29 :
22136: LD_ADDR_OWVAR 42
22140: PUSH
22141: LD_INT 4
22143: ST_TO_ADDR
22144: GO 22261
22146: LD_INT 29
22148: DOUBLE
22149: EQUAL
22150: IFTRUE 22154
22152: GO 22165
22154: POP
// bc_type := b_barracks ; 30 :
22155: LD_ADDR_OWVAR 42
22159: PUSH
22160: LD_INT 5
22162: ST_TO_ADDR
22163: GO 22261
22165: LD_INT 30
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22184
22173: POP
// bc_type := b_solar_power ; 31 :
22174: LD_ADDR_OWVAR 42
22178: PUSH
22179: LD_INT 27
22181: ST_TO_ADDR
22182: GO 22261
22184: LD_INT 31
22186: DOUBLE
22187: EQUAL
22188: IFTRUE 22192
22190: GO 22203
22192: POP
// bc_type := b_oil_power ; 32 :
22193: LD_ADDR_OWVAR 42
22197: PUSH
22198: LD_INT 26
22200: ST_TO_ADDR
22201: GO 22261
22203: LD_INT 32
22205: DOUBLE
22206: EQUAL
22207: IFTRUE 22211
22209: GO 22222
22211: POP
// bc_type := b_siberite_power ; 33 :
22212: LD_ADDR_OWVAR 42
22216: PUSH
22217: LD_INT 28
22219: ST_TO_ADDR
22220: GO 22261
22222: LD_INT 33
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22230
22228: GO 22241
22230: POP
// bc_type := b_oil_mine ; 34 :
22231: LD_ADDR_OWVAR 42
22235: PUSH
22236: LD_INT 29
22238: ST_TO_ADDR
22239: GO 22261
22241: LD_INT 34
22243: DOUBLE
22244: EQUAL
22245: IFTRUE 22249
22247: GO 22260
22249: POP
// bc_type := b_siberite_mine ; end ;
22250: LD_ADDR_OWVAR 42
22254: PUSH
22255: LD_INT 30
22257: ST_TO_ADDR
22258: GO 22261
22260: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22261: LD_ADDR_VAR 0 8
22265: PUSH
22266: LD_VAR 0 5
22270: PPUSH
22271: LD_VAR 0 6
22275: PPUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: CALL_OW 47
22285: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22286: LD_OWVAR 42
22290: PUSH
22291: LD_INT 32
22293: PUSH
22294: LD_INT 33
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: IN
22301: IFFALSE 22317
// PlaceWeaponTurret ( b , weapon ) ;
22303: LD_VAR 0 8
22307: PPUSH
22308: LD_VAR 0 4
22312: PPUSH
22313: CALL_OW 431
// end ;
22317: LD_VAR 0 7
22321: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22322: LD_INT 0
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22328: LD_ADDR_VAR 0 4
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: LD_INT 30
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 30
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: LIST
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: ST_TO_ADDR
// if not tmp then
22382: LD_VAR 0 4
22386: NOT
22387: IFFALSE 22391
// exit ;
22389: GO 22450
// for i in tmp do
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_VAR 0 4
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22448
// for j = 1 to 3 do
22404: LD_ADDR_VAR 0 3
22408: PUSH
22409: DOUBLE
22410: LD_INT 1
22412: DEC
22413: ST_TO_ADDR
22414: LD_INT 3
22416: PUSH
22417: FOR_TO
22418: IFFALSE 22444
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22420: LD_VAR 0 2
22424: PPUSH
22425: CALL_OW 274
22429: PPUSH
22430: LD_VAR 0 3
22434: PPUSH
22435: LD_INT 99999
22437: PPUSH
22438: CALL_OW 277
22442: GO 22417
22444: POP
22445: POP
22446: GO 22401
22448: POP
22449: POP
// end ;
22450: LD_VAR 0 1
22454: RET
// export function hHackSetLevel10 ; var i , j ; begin
22455: LD_INT 0
22457: PPUSH
22458: PPUSH
22459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22460: LD_ADDR_VAR 0 2
22464: PUSH
22465: LD_INT 21
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PPUSH
22475: CALL_OW 69
22479: PUSH
22480: FOR_IN
22481: IFFALSE 22533
// if IsSelected ( i ) then
22483: LD_VAR 0 2
22487: PPUSH
22488: CALL_OW 306
22492: IFFALSE 22531
// begin for j := 1 to 4 do
22494: LD_ADDR_VAR 0 3
22498: PUSH
22499: DOUBLE
22500: LD_INT 1
22502: DEC
22503: ST_TO_ADDR
22504: LD_INT 4
22506: PUSH
22507: FOR_TO
22508: IFFALSE 22529
// SetSkill ( i , j , 10 ) ;
22510: LD_VAR 0 2
22514: PPUSH
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_INT 10
22522: PPUSH
22523: CALL_OW 237
22527: GO 22507
22529: POP
22530: POP
// end ;
22531: GO 22480
22533: POP
22534: POP
// end ;
22535: LD_VAR 0 1
22539: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22540: LD_INT 0
22542: PPUSH
22543: PPUSH
22544: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22545: LD_ADDR_VAR 0 2
22549: PUSH
22550: LD_INT 22
22552: PUSH
22553: LD_OWVAR 2
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 21
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: PUSH
22581: FOR_IN
22582: IFFALSE 22623
// begin for j := 1 to 4 do
22584: LD_ADDR_VAR 0 3
22588: PUSH
22589: DOUBLE
22590: LD_INT 1
22592: DEC
22593: ST_TO_ADDR
22594: LD_INT 4
22596: PUSH
22597: FOR_TO
22598: IFFALSE 22619
// SetSkill ( i , j , 10 ) ;
22600: LD_VAR 0 2
22604: PPUSH
22605: LD_VAR 0 3
22609: PPUSH
22610: LD_INT 10
22612: PPUSH
22613: CALL_OW 237
22617: GO 22597
22619: POP
22620: POP
// end ;
22621: GO 22581
22623: POP
22624: POP
// end ;
22625: LD_VAR 0 1
22629: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22630: LD_INT 0
22632: PPUSH
// uc_side := your_side ;
22633: LD_ADDR_OWVAR 20
22637: PUSH
22638: LD_OWVAR 2
22642: ST_TO_ADDR
// uc_nation := nation ;
22643: LD_ADDR_OWVAR 21
22647: PUSH
22648: LD_VAR 0 1
22652: ST_TO_ADDR
// InitHc ;
22653: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22657: LD_INT 0
22659: PPUSH
22660: LD_VAR 0 2
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22674: LD_VAR 0 4
22678: PPUSH
22679: LD_VAR 0 5
22683: PPUSH
22684: CALL_OW 428
22688: PUSH
22689: LD_INT 0
22691: EQUAL
22692: IFFALSE 22716
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22694: CALL_OW 44
22698: PPUSH
22699: LD_VAR 0 4
22703: PPUSH
22704: LD_VAR 0 5
22708: PPUSH
22709: LD_INT 1
22711: PPUSH
22712: CALL_OW 48
// end ;
22716: LD_VAR 0 6
22720: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22721: LD_INT 0
22723: PPUSH
22724: PPUSH
// uc_side := your_side ;
22725: LD_ADDR_OWVAR 20
22729: PUSH
22730: LD_OWVAR 2
22734: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22735: LD_VAR 0 1
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: IN
22762: IFFALSE 22774
// uc_nation := nation_american else
22764: LD_ADDR_OWVAR 21
22768: PUSH
22769: LD_INT 1
22771: ST_TO_ADDR
22772: GO 22817
// if chassis in [ 11 , 12 , 13 , 14 ] then
22774: LD_VAR 0 1
22778: PUSH
22779: LD_INT 11
22781: PUSH
22782: LD_INT 12
22784: PUSH
22785: LD_INT 13
22787: PUSH
22788: LD_INT 14
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: IN
22797: IFFALSE 22809
// uc_nation := nation_arabian else
22799: LD_ADDR_OWVAR 21
22803: PUSH
22804: LD_INT 2
22806: ST_TO_ADDR
22807: GO 22817
// uc_nation := nation_russian ;
22809: LD_ADDR_OWVAR 21
22813: PUSH
22814: LD_INT 3
22816: ST_TO_ADDR
// vc_chassis := chassis ;
22817: LD_ADDR_OWVAR 37
22821: PUSH
22822: LD_VAR 0 1
22826: ST_TO_ADDR
// vc_engine := engine ;
22827: LD_ADDR_OWVAR 39
22831: PUSH
22832: LD_VAR 0 2
22836: ST_TO_ADDR
// vc_control := control ;
22837: LD_ADDR_OWVAR 38
22841: PUSH
22842: LD_VAR 0 3
22846: ST_TO_ADDR
// vc_weapon := weapon ;
22847: LD_ADDR_OWVAR 40
22851: PUSH
22852: LD_VAR 0 4
22856: ST_TO_ADDR
// un := CreateVehicle ;
22857: LD_ADDR_VAR 0 8
22861: PUSH
22862: CALL_OW 45
22866: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22867: LD_VAR 0 8
22871: PPUSH
22872: LD_INT 0
22874: PPUSH
22875: LD_INT 5
22877: PPUSH
22878: CALL_OW 12
22882: PPUSH
22883: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22887: LD_VAR 0 8
22891: PPUSH
22892: LD_VAR 0 5
22896: PPUSH
22897: LD_VAR 0 6
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 48
// end ;
22909: LD_VAR 0 7
22913: RET
// export hInvincible ; every 1 do
22914: GO 22916
22916: DISABLE
// hInvincible := [ ] ;
22917: LD_ADDR_EXP 89
22921: PUSH
22922: EMPTY
22923: ST_TO_ADDR
22924: END
// every 10 do var i ;
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
// begin enable ;
22931: ENABLE
// if not hInvincible then
22932: LD_EXP 89
22936: NOT
22937: IFFALSE 22941
// exit ;
22939: GO 22985
// for i in hInvincible do
22941: LD_ADDR_VAR 0 1
22945: PUSH
22946: LD_EXP 89
22950: PUSH
22951: FOR_IN
22952: IFFALSE 22983
// if GetLives ( i ) < 1000 then
22954: LD_VAR 0 1
22958: PPUSH
22959: CALL_OW 256
22963: PUSH
22964: LD_INT 1000
22966: LESS
22967: IFFALSE 22981
// SetLives ( i , 1000 ) ;
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_INT 1000
22976: PPUSH
22977: CALL_OW 234
22981: GO 22951
22983: POP
22984: POP
// end ;
22985: PPOPN 1
22987: END
// export function hHackInvincible ; var i ; begin
22988: LD_INT 0
22990: PPUSH
22991: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22992: LD_ADDR_VAR 0 2
22996: PUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 21
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 21
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: PUSH
23030: FOR_IN
23031: IFFALSE 23092
// if IsSelected ( i ) then
23033: LD_VAR 0 2
23037: PPUSH
23038: CALL_OW 306
23042: IFFALSE 23090
// begin if i in hInvincible then
23044: LD_VAR 0 2
23048: PUSH
23049: LD_EXP 89
23053: IN
23054: IFFALSE 23074
// hInvincible := hInvincible diff i else
23056: LD_ADDR_EXP 89
23060: PUSH
23061: LD_EXP 89
23065: PUSH
23066: LD_VAR 0 2
23070: DIFF
23071: ST_TO_ADDR
23072: GO 23090
// hInvincible := hInvincible union i ;
23074: LD_ADDR_EXP 89
23078: PUSH
23079: LD_EXP 89
23083: PUSH
23084: LD_VAR 0 2
23088: UNION
23089: ST_TO_ADDR
// end ;
23090: GO 23030
23092: POP
23093: POP
// end ;
23094: LD_VAR 0 1
23098: RET
// export function hHackInvisible ; var i , j ; begin
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
23103: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23104: LD_ADDR_VAR 0 2
23108: PUSH
23109: LD_INT 21
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PPUSH
23119: CALL_OW 69
23123: PUSH
23124: FOR_IN
23125: IFFALSE 23149
// if IsSelected ( i ) then
23127: LD_VAR 0 2
23131: PPUSH
23132: CALL_OW 306
23136: IFFALSE 23147
// ComForceInvisible ( i ) ;
23138: LD_VAR 0 2
23142: PPUSH
23143: CALL_OW 496
23147: GO 23124
23149: POP
23150: POP
// end ;
23151: LD_VAR 0 1
23155: RET
// export function hHackChangeYourSide ; begin
23156: LD_INT 0
23158: PPUSH
// if your_side = 8 then
23159: LD_OWVAR 2
23163: PUSH
23164: LD_INT 8
23166: EQUAL
23167: IFFALSE 23179
// your_side := 0 else
23169: LD_ADDR_OWVAR 2
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
23177: GO 23193
// your_side := your_side + 1 ;
23179: LD_ADDR_OWVAR 2
23183: PUSH
23184: LD_OWVAR 2
23188: PUSH
23189: LD_INT 1
23191: PLUS
23192: ST_TO_ADDR
// end ;
23193: LD_VAR 0 1
23197: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23198: LD_INT 0
23200: PPUSH
23201: PPUSH
23202: PPUSH
// for i in all_units do
23203: LD_ADDR_VAR 0 2
23207: PUSH
23208: LD_OWVAR 3
23212: PUSH
23213: FOR_IN
23214: IFFALSE 23292
// if IsSelected ( i ) then
23216: LD_VAR 0 2
23220: PPUSH
23221: CALL_OW 306
23225: IFFALSE 23290
// begin j := GetSide ( i ) ;
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: LD_VAR 0 2
23236: PPUSH
23237: CALL_OW 255
23241: ST_TO_ADDR
// if j = 8 then
23242: LD_VAR 0 3
23246: PUSH
23247: LD_INT 8
23249: EQUAL
23250: IFFALSE 23262
// j := 0 else
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_INT 0
23259: ST_TO_ADDR
23260: GO 23276
// j := j + 1 ;
23262: LD_ADDR_VAR 0 3
23266: PUSH
23267: LD_VAR 0 3
23271: PUSH
23272: LD_INT 1
23274: PLUS
23275: ST_TO_ADDR
// SetSide ( i , j ) ;
23276: LD_VAR 0 2
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: CALL_OW 235
// end ;
23290: GO 23213
23292: POP
23293: POP
// end ;
23294: LD_VAR 0 1
23298: RET
// export function hHackFog ; begin
23299: LD_INT 0
23301: PPUSH
// FogOff ( true ) ;
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 344
// end ;
23309: LD_VAR 0 1
23313: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23314: LD_INT 0
23316: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23317: LD_VAR 0 1
23321: PPUSH
23322: LD_VAR 0 2
23326: PPUSH
23327: LD_VAR 0 3
23331: PPUSH
23332: LD_INT 1
23334: PPUSH
23335: LD_INT 1
23337: PPUSH
23338: CALL_OW 483
// CenterOnXY ( x , y ) ;
23342: LD_VAR 0 2
23346: PPUSH
23347: LD_VAR 0 3
23351: PPUSH
23352: CALL_OW 84
// end ;
23356: LD_VAR 0 4
23360: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23365: LD_VAR 0 1
23369: NOT
23370: PUSH
23371: LD_VAR 0 2
23375: PPUSH
23376: LD_VAR 0 3
23380: PPUSH
23381: CALL_OW 488
23385: NOT
23386: OR
23387: PUSH
23388: LD_VAR 0 1
23392: PPUSH
23393: CALL_OW 266
23397: PUSH
23398: LD_INT 3
23400: NONEQUAL
23401: PUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 247
23411: PUSH
23412: LD_INT 1
23414: EQUAL
23415: NOT
23416: AND
23417: OR
23418: IFFALSE 23422
// exit ;
23420: GO 23571
// if GetType ( factory ) = unit_human then
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 247
23431: PUSH
23432: LD_INT 1
23434: EQUAL
23435: IFFALSE 23452
// factory := IsInUnit ( factory ) ;
23437: LD_ADDR_VAR 0 1
23441: PUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: CALL_OW 310
23451: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23452: LD_VAR 0 1
23456: PPUSH
23457: CALL_OW 266
23461: PUSH
23462: LD_INT 3
23464: NONEQUAL
23465: IFFALSE 23469
// exit ;
23467: GO 23571
// if HexInfo ( x , y ) = factory then
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: CALL_OW 428
23483: PUSH
23484: LD_VAR 0 1
23488: EQUAL
23489: IFFALSE 23516
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23491: LD_ADDR_EXP 90
23495: PUSH
23496: LD_EXP 90
23500: PPUSH
23501: LD_VAR 0 1
23505: PPUSH
23506: LD_INT 0
23508: PPUSH
23509: CALL_OW 1
23513: ST_TO_ADDR
23514: GO 23567
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23516: LD_ADDR_EXP 90
23520: PUSH
23521: LD_EXP 90
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: LD_VAR 0 1
23535: PPUSH
23536: CALL_OW 255
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: LD_VAR 0 2
23550: PUSH
23551: LD_VAR 0 3
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 1
23566: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23567: CALL 23576 0 0
// end ;
23571: LD_VAR 0 4
23575: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23581: LD_STRING resetFactoryWaypoint();
23583: PPUSH
23584: CALL_OW 559
// if factoryWaypoints then
23588: LD_EXP 90
23592: IFFALSE 23718
// begin list := PrepareArray ( factoryWaypoints ) ;
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_EXP 90
23603: PPUSH
23604: CALL 71026 0 1
23608: ST_TO_ADDR
// for i := 1 to list do
23609: LD_ADDR_VAR 0 2
23613: PUSH
23614: DOUBLE
23615: LD_INT 1
23617: DEC
23618: ST_TO_ADDR
23619: LD_VAR 0 3
23623: PUSH
23624: FOR_TO
23625: IFFALSE 23716
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23627: LD_STRING setFactoryWaypointXY(
23629: PUSH
23630: LD_VAR 0 3
23634: PUSH
23635: LD_VAR 0 2
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: STR
23645: PUSH
23646: LD_STRING ,
23648: STR
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 2
23659: ARRAY
23660: PUSH
23661: LD_INT 2
23663: ARRAY
23664: STR
23665: PUSH
23666: LD_STRING ,
23668: STR
23669: PUSH
23670: LD_VAR 0 3
23674: PUSH
23675: LD_VAR 0 2
23679: ARRAY
23680: PUSH
23681: LD_INT 3
23683: ARRAY
23684: STR
23685: PUSH
23686: LD_STRING ,
23688: STR
23689: PUSH
23690: LD_VAR 0 3
23694: PUSH
23695: LD_VAR 0 2
23699: ARRAY
23700: PUSH
23701: LD_INT 4
23703: ARRAY
23704: STR
23705: PUSH
23706: LD_STRING )
23708: STR
23709: PPUSH
23710: CALL_OW 559
23714: GO 23624
23716: POP
23717: POP
// end ; end ;
23718: LD_VAR 0 1
23722: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23723: LD_INT 0
23725: PPUSH
// if HexInfo ( x , y ) = warehouse then
23726: LD_VAR 0 2
23730: PPUSH
23731: LD_VAR 0 3
23735: PPUSH
23736: CALL_OW 428
23740: PUSH
23741: LD_VAR 0 1
23745: EQUAL
23746: IFFALSE 23773
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23748: LD_ADDR_EXP 91
23752: PUSH
23753: LD_EXP 91
23757: PPUSH
23758: LD_VAR 0 1
23762: PPUSH
23763: LD_INT 0
23765: PPUSH
23766: CALL_OW 1
23770: ST_TO_ADDR
23771: GO 23824
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23773: LD_ADDR_EXP 91
23777: PUSH
23778: LD_EXP 91
23782: PPUSH
23783: LD_VAR 0 1
23787: PPUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 255
23797: PUSH
23798: LD_VAR 0 1
23802: PUSH
23803: LD_VAR 0 2
23807: PUSH
23808: LD_VAR 0 3
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: PPUSH
23819: CALL_OW 1
23823: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23824: CALL 23833 0 0
// end ;
23828: LD_VAR 0 4
23832: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23833: LD_INT 0
23835: PPUSH
23836: PPUSH
23837: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23838: LD_STRING resetWarehouseGatheringPoints();
23840: PPUSH
23841: CALL_OW 559
// if warehouseGatheringPoints then
23845: LD_EXP 91
23849: IFFALSE 23975
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23851: LD_ADDR_VAR 0 3
23855: PUSH
23856: LD_EXP 91
23860: PPUSH
23861: CALL 71026 0 1
23865: ST_TO_ADDR
// for i := 1 to list do
23866: LD_ADDR_VAR 0 2
23870: PUSH
23871: DOUBLE
23872: LD_INT 1
23874: DEC
23875: ST_TO_ADDR
23876: LD_VAR 0 3
23880: PUSH
23881: FOR_TO
23882: IFFALSE 23973
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23884: LD_STRING setWarehouseGatheringPointXY(
23886: PUSH
23887: LD_VAR 0 3
23891: PUSH
23892: LD_VAR 0 2
23896: ARRAY
23897: PUSH
23898: LD_INT 1
23900: ARRAY
23901: STR
23902: PUSH
23903: LD_STRING ,
23905: STR
23906: PUSH
23907: LD_VAR 0 3
23911: PUSH
23912: LD_VAR 0 2
23916: ARRAY
23917: PUSH
23918: LD_INT 2
23920: ARRAY
23921: STR
23922: PUSH
23923: LD_STRING ,
23925: STR
23926: PUSH
23927: LD_VAR 0 3
23931: PUSH
23932: LD_VAR 0 2
23936: ARRAY
23937: PUSH
23938: LD_INT 3
23940: ARRAY
23941: STR
23942: PUSH
23943: LD_STRING ,
23945: STR
23946: PUSH
23947: LD_VAR 0 3
23951: PUSH
23952: LD_VAR 0 2
23956: ARRAY
23957: PUSH
23958: LD_INT 4
23960: ARRAY
23961: STR
23962: PUSH
23963: LD_STRING )
23965: STR
23966: PPUSH
23967: CALL_OW 559
23971: GO 23881
23973: POP
23974: POP
// end ; end ;
23975: LD_VAR 0 1
23979: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23980: LD_EXP 91
23984: IFFALSE 24669
23986: GO 23988
23988: DISABLE
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
23993: PPUSH
23994: PPUSH
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
23999: PPUSH
// begin enable ;
24000: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_EXP 91
24010: PPUSH
24011: CALL 71026 0 1
24015: ST_TO_ADDR
// if not list then
24016: LD_VAR 0 3
24020: NOT
24021: IFFALSE 24025
// exit ;
24023: GO 24669
// for i := 1 to list do
24025: LD_ADDR_VAR 0 1
24029: PUSH
24030: DOUBLE
24031: LD_INT 1
24033: DEC
24034: ST_TO_ADDR
24035: LD_VAR 0 3
24039: PUSH
24040: FOR_TO
24041: IFFALSE 24667
// begin depot := list [ i ] [ 2 ] ;
24043: LD_ADDR_VAR 0 8
24047: PUSH
24048: LD_VAR 0 3
24052: PUSH
24053: LD_VAR 0 1
24057: ARRAY
24058: PUSH
24059: LD_INT 2
24061: ARRAY
24062: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24063: LD_ADDR_VAR 0 5
24067: PUSH
24068: LD_VAR 0 3
24072: PUSH
24073: LD_VAR 0 1
24077: ARRAY
24078: PUSH
24079: LD_INT 1
24081: ARRAY
24082: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24083: LD_VAR 0 8
24087: PPUSH
24088: CALL_OW 301
24092: PUSH
24093: LD_VAR 0 5
24097: PUSH
24098: LD_VAR 0 8
24102: PPUSH
24103: CALL_OW 255
24107: NONEQUAL
24108: OR
24109: IFFALSE 24138
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24111: LD_ADDR_EXP 91
24115: PUSH
24116: LD_EXP 91
24120: PPUSH
24121: LD_VAR 0 8
24125: PPUSH
24126: LD_INT 0
24128: PPUSH
24129: CALL_OW 1
24133: ST_TO_ADDR
// exit ;
24134: POP
24135: POP
24136: GO 24669
// end ; x := list [ i ] [ 3 ] ;
24138: LD_ADDR_VAR 0 6
24142: PUSH
24143: LD_VAR 0 3
24147: PUSH
24148: LD_VAR 0 1
24152: ARRAY
24153: PUSH
24154: LD_INT 3
24156: ARRAY
24157: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24158: LD_ADDR_VAR 0 7
24162: PUSH
24163: LD_VAR 0 3
24167: PUSH
24168: LD_VAR 0 1
24172: ARRAY
24173: PUSH
24174: LD_INT 4
24176: ARRAY
24177: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24178: LD_ADDR_VAR 0 9
24182: PUSH
24183: LD_VAR 0 6
24187: PPUSH
24188: LD_VAR 0 7
24192: PPUSH
24193: LD_INT 16
24195: PPUSH
24196: CALL 69614 0 3
24200: ST_TO_ADDR
// if not cratesNearbyPoint then
24201: LD_VAR 0 9
24205: NOT
24206: IFFALSE 24212
// exit ;
24208: POP
24209: POP
24210: GO 24669
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24212: LD_ADDR_VAR 0 4
24216: PUSH
24217: LD_INT 22
24219: PUSH
24220: LD_VAR 0 5
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 3
24231: PUSH
24232: LD_INT 60
24234: PUSH
24235: EMPTY
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 91
24244: PUSH
24245: LD_VAR 0 8
24249: PUSH
24250: LD_INT 6
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: LD_INT 25
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 25
24273: PUSH
24274: LD_INT 16
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: PPUSH
24292: CALL_OW 69
24296: PUSH
24297: LD_VAR 0 8
24301: PPUSH
24302: CALL_OW 313
24306: PPUSH
24307: LD_INT 3
24309: PUSH
24310: LD_INT 60
24312: PUSH
24313: EMPTY
24314: LIST
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: LD_INT 25
24325: PUSH
24326: LD_INT 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 25
24335: PUSH
24336: LD_INT 16
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PPUSH
24352: CALL_OW 72
24356: UNION
24357: ST_TO_ADDR
// if tmp then
24358: LD_VAR 0 4
24362: IFFALSE 24442
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24364: LD_ADDR_VAR 0 4
24368: PUSH
24369: LD_VAR 0 4
24373: PPUSH
24374: LD_INT 3
24376: PPUSH
24377: CALL 67583 0 2
24381: ST_TO_ADDR
// for j in tmp do
24382: LD_ADDR_VAR 0 2
24386: PUSH
24387: LD_VAR 0 4
24391: PUSH
24392: FOR_IN
24393: IFFALSE 24436
// begin if IsInUnit ( j ) then
24395: LD_VAR 0 2
24399: PPUSH
24400: CALL_OW 310
24404: IFFALSE 24415
// ComExit ( j ) ;
24406: LD_VAR 0 2
24410: PPUSH
24411: CALL 67666 0 1
// AddComCollect ( j , x , y ) ;
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_VAR 0 6
24424: PPUSH
24425: LD_VAR 0 7
24429: PPUSH
24430: CALL_OW 177
// end ;
24434: GO 24392
24436: POP
24437: POP
// exit ;
24438: POP
24439: POP
24440: GO 24669
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24442: LD_ADDR_VAR 0 4
24446: PUSH
24447: LD_INT 22
24449: PUSH
24450: LD_VAR 0 5
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 91
24461: PUSH
24462: LD_VAR 0 8
24466: PUSH
24467: LD_INT 8
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 34
24480: PUSH
24481: LD_INT 12
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 34
24490: PUSH
24491: LD_INT 51
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 34
24500: PUSH
24501: LD_INT 32
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 34
24510: PUSH
24511: LD_INT 89
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: PPUSH
24530: CALL_OW 69
24534: ST_TO_ADDR
// if tmp then
24535: LD_VAR 0 4
24539: IFFALSE 24665
// begin for j in tmp do
24541: LD_ADDR_VAR 0 2
24545: PUSH
24546: LD_VAR 0 4
24550: PUSH
24551: FOR_IN
24552: IFFALSE 24663
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24554: LD_VAR 0 2
24558: PPUSH
24559: CALL_OW 262
24563: PUSH
24564: LD_INT 3
24566: EQUAL
24567: PUSH
24568: LD_VAR 0 2
24572: PPUSH
24573: CALL_OW 261
24577: PUSH
24578: LD_INT 20
24580: GREATER
24581: OR
24582: PUSH
24583: LD_VAR 0 2
24587: PPUSH
24588: CALL_OW 314
24592: NOT
24593: AND
24594: PUSH
24595: LD_VAR 0 2
24599: PPUSH
24600: CALL_OW 263
24604: PUSH
24605: LD_INT 1
24607: NONEQUAL
24608: PUSH
24609: LD_VAR 0 2
24613: PPUSH
24614: CALL_OW 311
24618: OR
24619: AND
24620: IFFALSE 24661
// begin ComCollect ( j , x , y ) ;
24622: LD_VAR 0 2
24626: PPUSH
24627: LD_VAR 0 6
24631: PPUSH
24632: LD_VAR 0 7
24636: PPUSH
24637: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_VAR 0 8
24650: PPUSH
24651: CALL_OW 172
// exit ;
24655: POP
24656: POP
24657: POP
24658: POP
24659: GO 24669
// end ;
24661: GO 24551
24663: POP
24664: POP
// end ; end ;
24665: GO 24040
24667: POP
24668: POP
// end ; end_of_file
24669: PPOPN 9
24671: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24672: LD_INT 0
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 264
24687: PUSH
24688: LD_INT 91
24690: EQUAL
24691: IFFALSE 24763
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24693: LD_INT 68
24695: PPUSH
24696: LD_VAR 0 1
24700: PPUSH
24701: CALL_OW 255
24705: PPUSH
24706: CALL_OW 321
24710: PUSH
24711: LD_INT 2
24713: EQUAL
24714: IFFALSE 24726
// eff := 70 else
24716: LD_ADDR_VAR 0 4
24720: PUSH
24721: LD_INT 70
24723: ST_TO_ADDR
24724: GO 24734
// eff := 30 ;
24726: LD_ADDR_VAR 0 4
24730: PUSH
24731: LD_INT 30
24733: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24734: LD_VAR 0 1
24738: PPUSH
24739: CALL_OW 250
24743: PPUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 251
24753: PPUSH
24754: LD_VAR 0 4
24758: PPUSH
24759: CALL_OW 495
// end ; end ;
24763: LD_VAR 0 2
24767: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24768: LD_INT 0
24770: PPUSH
// end ;
24771: LD_VAR 0 4
24775: RET
// export function SOS_Command ( cmd ) ; begin
24776: LD_INT 0
24778: PPUSH
// end ;
24779: LD_VAR 0 2
24783: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24784: LD_INT 0
24786: PPUSH
// end ;
24787: LD_VAR 0 6
24791: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24792: LD_INT 0
24794: PPUSH
24795: PPUSH
// if not vehicle or not factory then
24796: LD_VAR 0 1
24800: NOT
24801: PUSH
24802: LD_VAR 0 2
24806: NOT
24807: OR
24808: IFFALSE 24812
// exit ;
24810: GO 25043
// if factoryWaypoints >= factory then
24812: LD_EXP 90
24816: PUSH
24817: LD_VAR 0 2
24821: GREATEREQUAL
24822: IFFALSE 25043
// if factoryWaypoints [ factory ] then
24824: LD_EXP 90
24828: PUSH
24829: LD_VAR 0 2
24833: ARRAY
24834: IFFALSE 25043
// begin if GetControl ( vehicle ) = control_manual then
24836: LD_VAR 0 1
24840: PPUSH
24841: CALL_OW 263
24845: PUSH
24846: LD_INT 1
24848: EQUAL
24849: IFFALSE 24930
// begin driver := IsDrivenBy ( vehicle ) ;
24851: LD_ADDR_VAR 0 4
24855: PUSH
24856: LD_VAR 0 1
24860: PPUSH
24861: CALL_OW 311
24865: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24866: LD_VAR 0 4
24870: PPUSH
24871: LD_EXP 90
24875: PUSH
24876: LD_VAR 0 2
24880: ARRAY
24881: PUSH
24882: LD_INT 3
24884: ARRAY
24885: PPUSH
24886: LD_EXP 90
24890: PUSH
24891: LD_VAR 0 2
24895: ARRAY
24896: PUSH
24897: LD_INT 4
24899: ARRAY
24900: PPUSH
24901: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24905: LD_VAR 0 4
24909: PPUSH
24910: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24914: LD_VAR 0 4
24918: PPUSH
24919: LD_VAR 0 2
24923: PPUSH
24924: CALL_OW 180
// end else
24928: GO 25043
// if GetControl ( vehicle ) = control_remote then
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 263
24939: PUSH
24940: LD_INT 2
24942: EQUAL
24943: IFFALSE 25004
// begin wait ( 0 0$2 ) ;
24945: LD_INT 70
24947: PPUSH
24948: CALL_OW 67
// if Connect ( vehicle ) then
24952: LD_VAR 0 1
24956: PPUSH
24957: CALL 37874 0 1
24961: IFFALSE 25002
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24963: LD_VAR 0 1
24967: PPUSH
24968: LD_EXP 90
24972: PUSH
24973: LD_VAR 0 2
24977: ARRAY
24978: PUSH
24979: LD_INT 3
24981: ARRAY
24982: PPUSH
24983: LD_EXP 90
24987: PUSH
24988: LD_VAR 0 2
24992: ARRAY
24993: PUSH
24994: LD_INT 4
24996: ARRAY
24997: PPUSH
24998: CALL_OW 171
// end else
25002: GO 25043
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25004: LD_VAR 0 1
25008: PPUSH
25009: LD_EXP 90
25013: PUSH
25014: LD_VAR 0 2
25018: ARRAY
25019: PUSH
25020: LD_INT 3
25022: ARRAY
25023: PPUSH
25024: LD_EXP 90
25028: PUSH
25029: LD_VAR 0 2
25033: ARRAY
25034: PUSH
25035: LD_INT 4
25037: ARRAY
25038: PPUSH
25039: CALL_OW 171
// end ; end ;
25043: LD_VAR 0 3
25047: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25048: LD_INT 0
25050: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25051: LD_VAR 0 1
25055: PUSH
25056: LD_INT 250
25058: EQUAL
25059: PUSH
25060: LD_VAR 0 2
25064: PPUSH
25065: CALL_OW 264
25069: PUSH
25070: LD_INT 81
25072: EQUAL
25073: AND
25074: IFFALSE 25095
// MinerPlaceMine ( unit , x , y ) ;
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 4
25085: PPUSH
25086: LD_VAR 0 5
25090: PPUSH
25091: CALL 28085 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25095: LD_VAR 0 1
25099: PUSH
25100: LD_INT 251
25102: EQUAL
25103: PUSH
25104: LD_VAR 0 2
25108: PPUSH
25109: CALL_OW 264
25113: PUSH
25114: LD_INT 81
25116: EQUAL
25117: AND
25118: IFFALSE 25139
// MinerDetonateMine ( unit , x , y ) ;
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 4
25129: PPUSH
25130: LD_VAR 0 5
25134: PPUSH
25135: CALL 28360 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25139: LD_VAR 0 1
25143: PUSH
25144: LD_INT 252
25146: EQUAL
25147: PUSH
25148: LD_VAR 0 2
25152: PPUSH
25153: CALL_OW 264
25157: PUSH
25158: LD_INT 81
25160: EQUAL
25161: AND
25162: IFFALSE 25183
// MinerCreateMinefield ( unit , x , y ) ;
25164: LD_VAR 0 2
25168: PPUSH
25169: LD_VAR 0 4
25173: PPUSH
25174: LD_VAR 0 5
25178: PPUSH
25179: CALL 28777 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25183: LD_VAR 0 1
25187: PUSH
25188: LD_INT 253
25190: EQUAL
25191: PUSH
25192: LD_VAR 0 2
25196: PPUSH
25197: CALL_OW 257
25201: PUSH
25202: LD_INT 5
25204: EQUAL
25205: AND
25206: IFFALSE 25227
// ComBinocular ( unit , x , y ) ;
25208: LD_VAR 0 2
25212: PPUSH
25213: LD_VAR 0 4
25217: PPUSH
25218: LD_VAR 0 5
25222: PPUSH
25223: CALL 29146 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25227: LD_VAR 0 1
25231: PUSH
25232: LD_INT 254
25234: EQUAL
25235: PUSH
25236: LD_VAR 0 2
25240: PPUSH
25241: CALL_OW 264
25245: PUSH
25246: LD_INT 99
25248: EQUAL
25249: AND
25250: PUSH
25251: LD_VAR 0 3
25255: PPUSH
25256: CALL_OW 263
25260: PUSH
25261: LD_INT 3
25263: EQUAL
25264: AND
25265: IFFALSE 25281
// HackDestroyVehicle ( unit , selectedUnit ) ;
25267: LD_VAR 0 2
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL 27449 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25281: LD_VAR 0 1
25285: PUSH
25286: LD_INT 255
25288: EQUAL
25289: PUSH
25290: LD_VAR 0 2
25294: PPUSH
25295: CALL_OW 264
25299: PUSH
25300: LD_INT 14
25302: PUSH
25303: LD_INT 53
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: IN
25310: AND
25311: PUSH
25312: LD_VAR 0 4
25316: PPUSH
25317: LD_VAR 0 5
25321: PPUSH
25322: CALL_OW 488
25326: AND
25327: IFFALSE 25351
// CutTreeXYR ( unit , x , y , 12 ) ;
25329: LD_VAR 0 2
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: LD_VAR 0 5
25343: PPUSH
25344: LD_INT 12
25346: PPUSH
25347: CALL 25446 0 4
// if cmd = 256 then
25351: LD_VAR 0 1
25355: PUSH
25356: LD_INT 256
25358: EQUAL
25359: IFFALSE 25380
// SetFactoryWaypoint ( unit , x , y ) ;
25361: LD_VAR 0 2
25365: PPUSH
25366: LD_VAR 0 4
25370: PPUSH
25371: LD_VAR 0 5
25375: PPUSH
25376: CALL 23361 0 3
// if cmd = 257 then
25380: LD_VAR 0 1
25384: PUSH
25385: LD_INT 257
25387: EQUAL
25388: IFFALSE 25409
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25390: LD_VAR 0 2
25394: PPUSH
25395: LD_VAR 0 4
25399: PPUSH
25400: LD_VAR 0 5
25404: PPUSH
25405: CALL 23723 0 3
// if cmd = 258 then
25409: LD_VAR 0 1
25413: PUSH
25414: LD_INT 258
25416: EQUAL
25417: IFFALSE 25441
// BurnTreeXYR ( unit , x , y , 8 ) ;
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_VAR 0 4
25428: PPUSH
25429: LD_VAR 0 5
25433: PPUSH
25434: LD_INT 8
25436: PPUSH
25437: CALL 25840 0 4
// end ;
25441: LD_VAR 0 6
25445: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25446: LD_INT 0
25448: PPUSH
25449: PPUSH
25450: PPUSH
25451: PPUSH
25452: PPUSH
25453: PPUSH
25454: PPUSH
25455: PPUSH
25456: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 302
25466: NOT
25467: PUSH
25468: LD_VAR 0 2
25472: PPUSH
25473: LD_VAR 0 3
25477: PPUSH
25478: CALL_OW 488
25482: NOT
25483: OR
25484: PUSH
25485: LD_VAR 0 4
25489: NOT
25490: OR
25491: IFFALSE 25495
// exit ;
25493: GO 25835
// list := [ ] ;
25495: LD_ADDR_VAR 0 13
25499: PUSH
25500: EMPTY
25501: ST_TO_ADDR
// if x - r < 0 then
25502: LD_VAR 0 2
25506: PUSH
25507: LD_VAR 0 4
25511: MINUS
25512: PUSH
25513: LD_INT 0
25515: LESS
25516: IFFALSE 25528
// min_x := 0 else
25518: LD_ADDR_VAR 0 7
25522: PUSH
25523: LD_INT 0
25525: ST_TO_ADDR
25526: GO 25544
// min_x := x - r ;
25528: LD_ADDR_VAR 0 7
25532: PUSH
25533: LD_VAR 0 2
25537: PUSH
25538: LD_VAR 0 4
25542: MINUS
25543: ST_TO_ADDR
// if y - r < 0 then
25544: LD_VAR 0 3
25548: PUSH
25549: LD_VAR 0 4
25553: MINUS
25554: PUSH
25555: LD_INT 0
25557: LESS
25558: IFFALSE 25570
// min_y := 0 else
25560: LD_ADDR_VAR 0 8
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
25568: GO 25586
// min_y := y - r ;
25570: LD_ADDR_VAR 0 8
25574: PUSH
25575: LD_VAR 0 3
25579: PUSH
25580: LD_VAR 0 4
25584: MINUS
25585: ST_TO_ADDR
// max_x := x + r ;
25586: LD_ADDR_VAR 0 9
25590: PUSH
25591: LD_VAR 0 2
25595: PUSH
25596: LD_VAR 0 4
25600: PLUS
25601: ST_TO_ADDR
// max_y := y + r ;
25602: LD_ADDR_VAR 0 10
25606: PUSH
25607: LD_VAR 0 3
25611: PUSH
25612: LD_VAR 0 4
25616: PLUS
25617: ST_TO_ADDR
// for _x = min_x to max_x do
25618: LD_ADDR_VAR 0 11
25622: PUSH
25623: DOUBLE
25624: LD_VAR 0 7
25628: DEC
25629: ST_TO_ADDR
25630: LD_VAR 0 9
25634: PUSH
25635: FOR_TO
25636: IFFALSE 25753
// for _y = min_y to max_y do
25638: LD_ADDR_VAR 0 12
25642: PUSH
25643: DOUBLE
25644: LD_VAR 0 8
25648: DEC
25649: ST_TO_ADDR
25650: LD_VAR 0 10
25654: PUSH
25655: FOR_TO
25656: IFFALSE 25749
// begin if not ValidHex ( _x , _y ) then
25658: LD_VAR 0 11
25662: PPUSH
25663: LD_VAR 0 12
25667: PPUSH
25668: CALL_OW 488
25672: NOT
25673: IFFALSE 25677
// continue ;
25675: GO 25655
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25677: LD_VAR 0 11
25681: PPUSH
25682: LD_VAR 0 12
25686: PPUSH
25687: CALL_OW 351
25691: PUSH
25692: LD_VAR 0 11
25696: PPUSH
25697: LD_VAR 0 12
25701: PPUSH
25702: CALL_OW 554
25706: AND
25707: IFFALSE 25747
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25709: LD_ADDR_VAR 0 13
25713: PUSH
25714: LD_VAR 0 13
25718: PPUSH
25719: LD_VAR 0 13
25723: PUSH
25724: LD_INT 1
25726: PLUS
25727: PPUSH
25728: LD_VAR 0 11
25732: PUSH
25733: LD_VAR 0 12
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 2
25746: ST_TO_ADDR
// end ;
25747: GO 25655
25749: POP
25750: POP
25751: GO 25635
25753: POP
25754: POP
// if not list then
25755: LD_VAR 0 13
25759: NOT
25760: IFFALSE 25764
// exit ;
25762: GO 25835
// for i in list do
25764: LD_ADDR_VAR 0 6
25768: PUSH
25769: LD_VAR 0 13
25773: PUSH
25774: FOR_IN
25775: IFFALSE 25833
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25777: LD_VAR 0 1
25781: PPUSH
25782: LD_STRING M
25784: PUSH
25785: LD_VAR 0 6
25789: PUSH
25790: LD_INT 1
25792: ARRAY
25793: PUSH
25794: LD_VAR 0 6
25798: PUSH
25799: LD_INT 2
25801: ARRAY
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: PUSH
25824: EMPTY
25825: LIST
25826: PPUSH
25827: CALL_OW 447
25831: GO 25774
25833: POP
25834: POP
// end ;
25835: LD_VAR 0 5
25839: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25840: LD_INT 0
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25852: LD_VAR 0 1
25856: PPUSH
25857: CALL_OW 302
25861: NOT
25862: PUSH
25863: LD_VAR 0 2
25867: PPUSH
25868: LD_VAR 0 3
25872: PPUSH
25873: CALL_OW 488
25877: NOT
25878: OR
25879: PUSH
25880: LD_VAR 0 4
25884: NOT
25885: OR
25886: IFFALSE 25890
// exit ;
25888: GO 26403
// list := [ ] ;
25890: LD_ADDR_VAR 0 13
25894: PUSH
25895: EMPTY
25896: ST_TO_ADDR
// if x - r < 0 then
25897: LD_VAR 0 2
25901: PUSH
25902: LD_VAR 0 4
25906: MINUS
25907: PUSH
25908: LD_INT 0
25910: LESS
25911: IFFALSE 25923
// min_x := 0 else
25913: LD_ADDR_VAR 0 7
25917: PUSH
25918: LD_INT 0
25920: ST_TO_ADDR
25921: GO 25939
// min_x := x - r ;
25923: LD_ADDR_VAR 0 7
25927: PUSH
25928: LD_VAR 0 2
25932: PUSH
25933: LD_VAR 0 4
25937: MINUS
25938: ST_TO_ADDR
// if y - r < 0 then
25939: LD_VAR 0 3
25943: PUSH
25944: LD_VAR 0 4
25948: MINUS
25949: PUSH
25950: LD_INT 0
25952: LESS
25953: IFFALSE 25965
// min_y := 0 else
25955: LD_ADDR_VAR 0 8
25959: PUSH
25960: LD_INT 0
25962: ST_TO_ADDR
25963: GO 25981
// min_y := y - r ;
25965: LD_ADDR_VAR 0 8
25969: PUSH
25970: LD_VAR 0 3
25974: PUSH
25975: LD_VAR 0 4
25979: MINUS
25980: ST_TO_ADDR
// max_x := x + r ;
25981: LD_ADDR_VAR 0 9
25985: PUSH
25986: LD_VAR 0 2
25990: PUSH
25991: LD_VAR 0 4
25995: PLUS
25996: ST_TO_ADDR
// max_y := y + r ;
25997: LD_ADDR_VAR 0 10
26001: PUSH
26002: LD_VAR 0 3
26006: PUSH
26007: LD_VAR 0 4
26011: PLUS
26012: ST_TO_ADDR
// for _x = min_x to max_x do
26013: LD_ADDR_VAR 0 11
26017: PUSH
26018: DOUBLE
26019: LD_VAR 0 7
26023: DEC
26024: ST_TO_ADDR
26025: LD_VAR 0 9
26029: PUSH
26030: FOR_TO
26031: IFFALSE 26148
// for _y = min_y to max_y do
26033: LD_ADDR_VAR 0 12
26037: PUSH
26038: DOUBLE
26039: LD_VAR 0 8
26043: DEC
26044: ST_TO_ADDR
26045: LD_VAR 0 10
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26144
// begin if not ValidHex ( _x , _y ) then
26053: LD_VAR 0 11
26057: PPUSH
26058: LD_VAR 0 12
26062: PPUSH
26063: CALL_OW 488
26067: NOT
26068: IFFALSE 26072
// continue ;
26070: GO 26050
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26072: LD_VAR 0 11
26076: PPUSH
26077: LD_VAR 0 12
26081: PPUSH
26082: CALL_OW 351
26086: PUSH
26087: LD_VAR 0 11
26091: PPUSH
26092: LD_VAR 0 12
26096: PPUSH
26097: CALL_OW 554
26101: AND
26102: IFFALSE 26142
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26104: LD_ADDR_VAR 0 13
26108: PUSH
26109: LD_VAR 0 13
26113: PPUSH
26114: LD_VAR 0 13
26118: PUSH
26119: LD_INT 1
26121: PLUS
26122: PPUSH
26123: LD_VAR 0 11
26127: PUSH
26128: LD_VAR 0 12
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PPUSH
26137: CALL_OW 2
26141: ST_TO_ADDR
// end ;
26142: GO 26050
26144: POP
26145: POP
26146: GO 26030
26148: POP
26149: POP
// if not list then
26150: LD_VAR 0 13
26154: NOT
26155: IFFALSE 26159
// exit ;
26157: GO 26403
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26159: LD_ADDR_VAR 0 13
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: LD_VAR 0 13
26173: PPUSH
26174: LD_INT 1
26176: PPUSH
26177: LD_INT 1
26179: PPUSH
26180: CALL 35016 0 4
26184: ST_TO_ADDR
// ComStop ( flame ) ;
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 141
// for i in list do
26194: LD_ADDR_VAR 0 6
26198: PUSH
26199: LD_VAR 0 13
26203: PUSH
26204: FOR_IN
26205: IFFALSE 26236
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26207: LD_VAR 0 1
26211: PPUSH
26212: LD_VAR 0 6
26216: PUSH
26217: LD_INT 1
26219: ARRAY
26220: PPUSH
26221: LD_VAR 0 6
26225: PUSH
26226: LD_INT 2
26228: ARRAY
26229: PPUSH
26230: CALL_OW 176
26234: GO 26204
26236: POP
26237: POP
// repeat wait ( 0 0$1 ) ;
26238: LD_INT 35
26240: PPUSH
26241: CALL_OW 67
// task := GetTaskList ( flame ) ;
26245: LD_ADDR_VAR 0 14
26249: PUSH
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 437
26259: ST_TO_ADDR
// if not task then
26260: LD_VAR 0 14
26264: NOT
26265: IFFALSE 26269
// exit ;
26267: GO 26403
// if task [ 1 ] [ 1 ] <> | then
26269: LD_VAR 0 14
26273: PUSH
26274: LD_INT 1
26276: ARRAY
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: PUSH
26282: LD_STRING |
26284: NONEQUAL
26285: IFFALSE 26289
// exit ;
26287: GO 26403
// _x := task [ 1 ] [ 2 ] ;
26289: LD_ADDR_VAR 0 11
26293: PUSH
26294: LD_VAR 0 14
26298: PUSH
26299: LD_INT 1
26301: ARRAY
26302: PUSH
26303: LD_INT 2
26305: ARRAY
26306: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26307: LD_ADDR_VAR 0 12
26311: PUSH
26312: LD_VAR 0 14
26316: PUSH
26317: LD_INT 1
26319: ARRAY
26320: PUSH
26321: LD_INT 3
26323: ARRAY
26324: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26325: LD_VAR 0 11
26329: PPUSH
26330: LD_VAR 0 12
26334: PPUSH
26335: CALL_OW 351
26339: NOT
26340: PUSH
26341: LD_VAR 0 11
26345: PPUSH
26346: LD_VAR 0 12
26350: PPUSH
26351: CALL_OW 554
26355: NOT
26356: OR
26357: IFFALSE 26391
// begin task := Delete ( task , 1 ) ;
26359: LD_ADDR_VAR 0 14
26363: PUSH
26364: LD_VAR 0 14
26368: PPUSH
26369: LD_INT 1
26371: PPUSH
26372: CALL_OW 3
26376: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26377: LD_VAR 0 1
26381: PPUSH
26382: LD_VAR 0 14
26386: PPUSH
26387: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 314
26400: NOT
26401: IFFALSE 26238
// end ;
26403: LD_VAR 0 5
26407: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26408: LD_EXP 93
26412: NOT
26413: IFFALSE 26463
26415: GO 26417
26417: DISABLE
// begin initHack := true ;
26418: LD_ADDR_EXP 93
26422: PUSH
26423: LD_INT 1
26425: ST_TO_ADDR
// hackTanks := [ ] ;
26426: LD_ADDR_EXP 94
26430: PUSH
26431: EMPTY
26432: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26433: LD_ADDR_EXP 95
26437: PUSH
26438: EMPTY
26439: ST_TO_ADDR
// hackLimit := 3 ;
26440: LD_ADDR_EXP 96
26444: PUSH
26445: LD_INT 3
26447: ST_TO_ADDR
// hackDist := 12 ;
26448: LD_ADDR_EXP 97
26452: PUSH
26453: LD_INT 12
26455: ST_TO_ADDR
// hackCounter := [ ] ;
26456: LD_ADDR_EXP 98
26460: PUSH
26461: EMPTY
26462: ST_TO_ADDR
// end ;
26463: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26464: LD_EXP 93
26468: PUSH
26469: LD_INT 34
26471: PUSH
26472: LD_INT 99
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PPUSH
26479: CALL_OW 69
26483: AND
26484: IFFALSE 26737
26486: GO 26488
26488: DISABLE
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
// begin enable ;
26493: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_INT 34
26501: PUSH
26502: LD_INT 99
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PPUSH
26509: CALL_OW 69
26513: PUSH
26514: FOR_IN
26515: IFFALSE 26735
// begin if not i in hackTanks then
26517: LD_VAR 0 1
26521: PUSH
26522: LD_EXP 94
26526: IN
26527: NOT
26528: IFFALSE 26611
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26530: LD_ADDR_EXP 94
26534: PUSH
26535: LD_EXP 94
26539: PPUSH
26540: LD_EXP 94
26544: PUSH
26545: LD_INT 1
26547: PLUS
26548: PPUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 1
26558: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26559: LD_ADDR_EXP 95
26563: PUSH
26564: LD_EXP 95
26568: PPUSH
26569: LD_EXP 95
26573: PUSH
26574: LD_INT 1
26576: PLUS
26577: PPUSH
26578: EMPTY
26579: PPUSH
26580: CALL_OW 1
26584: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26585: LD_ADDR_EXP 98
26589: PUSH
26590: LD_EXP 98
26594: PPUSH
26595: LD_EXP 98
26599: PUSH
26600: LD_INT 1
26602: PLUS
26603: PPUSH
26604: EMPTY
26605: PPUSH
26606: CALL_OW 1
26610: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26611: LD_VAR 0 1
26615: PPUSH
26616: CALL_OW 302
26620: NOT
26621: IFFALSE 26634
// begin HackUnlinkAll ( i ) ;
26623: LD_VAR 0 1
26627: PPUSH
26628: CALL 26740 0 1
// continue ;
26632: GO 26514
// end ; HackCheckCapturedStatus ( i ) ;
26634: LD_VAR 0 1
26638: PPUSH
26639: CALL 27183 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26643: LD_ADDR_VAR 0 2
26647: PUSH
26648: LD_INT 81
26650: PUSH
26651: LD_VAR 0 1
26655: PPUSH
26656: CALL_OW 255
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 33
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 91
26677: PUSH
26678: LD_VAR 0 1
26682: PUSH
26683: LD_EXP 97
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 50
26695: PUSH
26696: EMPTY
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 69
26709: ST_TO_ADDR
// if not tmp then
26710: LD_VAR 0 2
26714: NOT
26715: IFFALSE 26719
// continue ;
26717: GO 26514
// HackLink ( i , tmp ) ;
26719: LD_VAR 0 1
26723: PPUSH
26724: LD_VAR 0 2
26728: PPUSH
26729: CALL 26876 0 2
// end ;
26733: GO 26514
26735: POP
26736: POP
// end ;
26737: PPOPN 2
26739: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26740: LD_INT 0
26742: PPUSH
26743: PPUSH
26744: PPUSH
// if not hack in hackTanks then
26745: LD_VAR 0 1
26749: PUSH
26750: LD_EXP 94
26754: IN
26755: NOT
26756: IFFALSE 26760
// exit ;
26758: GO 26871
// index := GetElementIndex ( hackTanks , hack ) ;
26760: LD_ADDR_VAR 0 4
26764: PUSH
26765: LD_EXP 94
26769: PPUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL 34313 0 2
26779: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26780: LD_EXP 95
26784: PUSH
26785: LD_VAR 0 4
26789: ARRAY
26790: IFFALSE 26871
// begin for i in hackTanksCaptured [ index ] do
26792: LD_ADDR_VAR 0 3
26796: PUSH
26797: LD_EXP 95
26801: PUSH
26802: LD_VAR 0 4
26806: ARRAY
26807: PUSH
26808: FOR_IN
26809: IFFALSE 26835
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26811: LD_VAR 0 3
26815: PUSH
26816: LD_INT 1
26818: ARRAY
26819: PPUSH
26820: LD_VAR 0 3
26824: PUSH
26825: LD_INT 2
26827: ARRAY
26828: PPUSH
26829: CALL_OW 235
26833: GO 26808
26835: POP
26836: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26837: LD_ADDR_EXP 95
26841: PUSH
26842: LD_EXP 95
26846: PPUSH
26847: LD_VAR 0 4
26851: PPUSH
26852: EMPTY
26853: PPUSH
26854: CALL_OW 1
26858: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26859: LD_VAR 0 1
26863: PPUSH
26864: LD_INT 0
26866: PPUSH
26867: CALL_OW 505
// end ; end ;
26871: LD_VAR 0 2
26875: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
26880: PPUSH
// if not hack in hackTanks or not vehicles then
26881: LD_VAR 0 1
26885: PUSH
26886: LD_EXP 94
26890: IN
26891: NOT
26892: PUSH
26893: LD_VAR 0 2
26897: NOT
26898: OR
26899: IFFALSE 26903
// exit ;
26901: GO 27178
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26903: LD_ADDR_VAR 0 2
26907: PUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: LD_INT 1
26920: PPUSH
26921: LD_INT 1
26923: PPUSH
26924: CALL 34963 0 4
26928: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26929: LD_ADDR_VAR 0 5
26933: PUSH
26934: LD_EXP 94
26938: PPUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL 34313 0 2
26948: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26949: LD_EXP 95
26953: PUSH
26954: LD_VAR 0 5
26958: ARRAY
26959: PUSH
26960: LD_EXP 96
26964: LESS
26965: IFFALSE 27154
// begin for i := 1 to vehicles do
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: DOUBLE
26973: LD_INT 1
26975: DEC
26976: ST_TO_ADDR
26977: LD_VAR 0 2
26981: PUSH
26982: FOR_TO
26983: IFFALSE 27152
// begin if hackTanksCaptured [ index ] = hackLimit then
26985: LD_EXP 95
26989: PUSH
26990: LD_VAR 0 5
26994: ARRAY
26995: PUSH
26996: LD_EXP 96
27000: EQUAL
27001: IFFALSE 27005
// break ;
27003: GO 27152
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27005: LD_ADDR_EXP 98
27009: PUSH
27010: LD_EXP 98
27014: PPUSH
27015: LD_VAR 0 5
27019: PPUSH
27020: LD_EXP 98
27024: PUSH
27025: LD_VAR 0 5
27029: ARRAY
27030: PUSH
27031: LD_INT 1
27033: PLUS
27034: PPUSH
27035: CALL_OW 1
27039: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27040: LD_ADDR_EXP 95
27044: PUSH
27045: LD_EXP 95
27049: PPUSH
27050: LD_VAR 0 5
27054: PUSH
27055: LD_EXP 95
27059: PUSH
27060: LD_VAR 0 5
27064: ARRAY
27065: PUSH
27066: LD_INT 1
27068: PLUS
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: LD_VAR 0 2
27078: PUSH
27079: LD_VAR 0 4
27083: ARRAY
27084: PUSH
27085: LD_VAR 0 2
27089: PUSH
27090: LD_VAR 0 4
27094: ARRAY
27095: PPUSH
27096: CALL_OW 255
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PPUSH
27105: CALL 34528 0 3
27109: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27110: LD_VAR 0 2
27114: PUSH
27115: LD_VAR 0 4
27119: ARRAY
27120: PPUSH
27121: LD_VAR 0 1
27125: PPUSH
27126: CALL_OW 255
27130: PPUSH
27131: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27135: LD_VAR 0 2
27139: PUSH
27140: LD_VAR 0 4
27144: ARRAY
27145: PPUSH
27146: CALL_OW 141
// end ;
27150: GO 26982
27152: POP
27153: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27154: LD_VAR 0 1
27158: PPUSH
27159: LD_EXP 95
27163: PUSH
27164: LD_VAR 0 5
27168: ARRAY
27169: PUSH
27170: LD_INT 0
27172: PLUS
27173: PPUSH
27174: CALL_OW 505
// end ;
27178: LD_VAR 0 3
27182: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27183: LD_INT 0
27185: PPUSH
27186: PPUSH
27187: PPUSH
27188: PPUSH
// if not hack in hackTanks then
27189: LD_VAR 0 1
27193: PUSH
27194: LD_EXP 94
27198: IN
27199: NOT
27200: IFFALSE 27204
// exit ;
27202: GO 27444
// index := GetElementIndex ( hackTanks , hack ) ;
27204: LD_ADDR_VAR 0 4
27208: PUSH
27209: LD_EXP 94
27213: PPUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: CALL 34313 0 2
27223: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27224: LD_ADDR_VAR 0 3
27228: PUSH
27229: DOUBLE
27230: LD_EXP 95
27234: PUSH
27235: LD_VAR 0 4
27239: ARRAY
27240: INC
27241: ST_TO_ADDR
27242: LD_INT 1
27244: PUSH
27245: FOR_DOWNTO
27246: IFFALSE 27418
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_EXP 95
27257: PUSH
27258: LD_VAR 0 4
27262: ARRAY
27263: PUSH
27264: LD_VAR 0 3
27268: ARRAY
27269: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27270: LD_VAR 0 5
27274: PUSH
27275: LD_INT 1
27277: ARRAY
27278: PPUSH
27279: CALL_OW 302
27283: NOT
27284: PUSH
27285: LD_VAR 0 5
27289: PUSH
27290: LD_INT 1
27292: ARRAY
27293: PPUSH
27294: CALL_OW 255
27298: PUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 255
27308: NONEQUAL
27309: OR
27310: IFFALSE 27416
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27312: LD_VAR 0 5
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PPUSH
27321: CALL_OW 305
27325: PUSH
27326: LD_VAR 0 5
27330: PUSH
27331: LD_INT 1
27333: ARRAY
27334: PPUSH
27335: CALL_OW 255
27339: PUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL_OW 255
27349: EQUAL
27350: AND
27351: IFFALSE 27375
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27353: LD_VAR 0 5
27357: PUSH
27358: LD_INT 1
27360: ARRAY
27361: PPUSH
27362: LD_VAR 0 5
27366: PUSH
27367: LD_INT 2
27369: ARRAY
27370: PPUSH
27371: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27375: LD_ADDR_EXP 95
27379: PUSH
27380: LD_EXP 95
27384: PPUSH
27385: LD_VAR 0 4
27389: PPUSH
27390: LD_EXP 95
27394: PUSH
27395: LD_VAR 0 4
27399: ARRAY
27400: PPUSH
27401: LD_VAR 0 3
27405: PPUSH
27406: CALL_OW 3
27410: PPUSH
27411: CALL_OW 1
27415: ST_TO_ADDR
// end ; end ;
27416: GO 27245
27418: POP
27419: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27420: LD_VAR 0 1
27424: PPUSH
27425: LD_EXP 95
27429: PUSH
27430: LD_VAR 0 4
27434: ARRAY
27435: PUSH
27436: LD_INT 0
27438: PLUS
27439: PPUSH
27440: CALL_OW 505
// end ;
27444: LD_VAR 0 2
27448: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27449: LD_INT 0
27451: PPUSH
27452: PPUSH
27453: PPUSH
27454: PPUSH
// if not hack in hackTanks then
27455: LD_VAR 0 1
27459: PUSH
27460: LD_EXP 94
27464: IN
27465: NOT
27466: IFFALSE 27470
// exit ;
27468: GO 27555
// index := GetElementIndex ( hackTanks , hack ) ;
27470: LD_ADDR_VAR 0 5
27474: PUSH
27475: LD_EXP 94
27479: PPUSH
27480: LD_VAR 0 1
27484: PPUSH
27485: CALL 34313 0 2
27489: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27490: LD_ADDR_VAR 0 4
27494: PUSH
27495: DOUBLE
27496: LD_INT 1
27498: DEC
27499: ST_TO_ADDR
27500: LD_EXP 95
27504: PUSH
27505: LD_VAR 0 5
27509: ARRAY
27510: PUSH
27511: FOR_TO
27512: IFFALSE 27553
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27514: LD_EXP 95
27518: PUSH
27519: LD_VAR 0 5
27523: ARRAY
27524: PUSH
27525: LD_VAR 0 4
27529: ARRAY
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PUSH
27535: LD_VAR 0 2
27539: EQUAL
27540: IFFALSE 27551
// KillUnit ( vehicle ) ;
27542: LD_VAR 0 2
27546: PPUSH
27547: CALL_OW 66
27551: GO 27511
27553: POP
27554: POP
// end ;
27555: LD_VAR 0 3
27559: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27560: LD_EXP 99
27564: NOT
27565: IFFALSE 27600
27567: GO 27569
27569: DISABLE
// begin initMiner := true ;
27570: LD_ADDR_EXP 99
27574: PUSH
27575: LD_INT 1
27577: ST_TO_ADDR
// minersList := [ ] ;
27578: LD_ADDR_EXP 100
27582: PUSH
27583: EMPTY
27584: ST_TO_ADDR
// minerMinesList := [ ] ;
27585: LD_ADDR_EXP 101
27589: PUSH
27590: EMPTY
27591: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27592: LD_ADDR_EXP 102
27596: PUSH
27597: LD_INT 5
27599: ST_TO_ADDR
// end ;
27600: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27601: LD_EXP 99
27605: PUSH
27606: LD_INT 34
27608: PUSH
27609: LD_INT 81
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: AND
27621: IFFALSE 28082
27623: GO 27625
27625: DISABLE
27626: LD_INT 0
27628: PPUSH
27629: PPUSH
27630: PPUSH
27631: PPUSH
// begin enable ;
27632: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27633: LD_ADDR_VAR 0 1
27637: PUSH
27638: LD_INT 34
27640: PUSH
27641: LD_INT 81
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PPUSH
27648: CALL_OW 69
27652: PUSH
27653: FOR_IN
27654: IFFALSE 27726
// begin if not i in minersList then
27656: LD_VAR 0 1
27660: PUSH
27661: LD_EXP 100
27665: IN
27666: NOT
27667: IFFALSE 27724
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27669: LD_ADDR_EXP 100
27673: PUSH
27674: LD_EXP 100
27678: PPUSH
27679: LD_EXP 100
27683: PUSH
27684: LD_INT 1
27686: PLUS
27687: PPUSH
27688: LD_VAR 0 1
27692: PPUSH
27693: CALL_OW 1
27697: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27698: LD_ADDR_EXP 101
27702: PUSH
27703: LD_EXP 101
27707: PPUSH
27708: LD_EXP 101
27712: PUSH
27713: LD_INT 1
27715: PLUS
27716: PPUSH
27717: EMPTY
27718: PPUSH
27719: CALL_OW 1
27723: ST_TO_ADDR
// end end ;
27724: GO 27653
27726: POP
27727: POP
// for i := minerMinesList downto 1 do
27728: LD_ADDR_VAR 0 1
27732: PUSH
27733: DOUBLE
27734: LD_EXP 101
27738: INC
27739: ST_TO_ADDR
27740: LD_INT 1
27742: PUSH
27743: FOR_DOWNTO
27744: IFFALSE 28080
// begin if IsLive ( minersList [ i ] ) then
27746: LD_EXP 100
27750: PUSH
27751: LD_VAR 0 1
27755: ARRAY
27756: PPUSH
27757: CALL_OW 300
27761: IFFALSE 27789
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27763: LD_EXP 100
27767: PUSH
27768: LD_VAR 0 1
27772: ARRAY
27773: PPUSH
27774: LD_EXP 101
27778: PUSH
27779: LD_VAR 0 1
27783: ARRAY
27784: PPUSH
27785: CALL_OW 505
// if not minerMinesList [ i ] then
27789: LD_EXP 101
27793: PUSH
27794: LD_VAR 0 1
27798: ARRAY
27799: NOT
27800: IFFALSE 27804
// continue ;
27802: GO 27743
// for j := minerMinesList [ i ] downto 1 do
27804: LD_ADDR_VAR 0 2
27808: PUSH
27809: DOUBLE
27810: LD_EXP 101
27814: PUSH
27815: LD_VAR 0 1
27819: ARRAY
27820: INC
27821: ST_TO_ADDR
27822: LD_INT 1
27824: PUSH
27825: FOR_DOWNTO
27826: IFFALSE 28076
// begin side := GetSide ( minersList [ i ] ) ;
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_EXP 100
27837: PUSH
27838: LD_VAR 0 1
27842: ARRAY
27843: PPUSH
27844: CALL_OW 255
27848: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27849: LD_ADDR_VAR 0 4
27853: PUSH
27854: LD_EXP 101
27858: PUSH
27859: LD_VAR 0 1
27863: ARRAY
27864: PUSH
27865: LD_VAR 0 2
27869: ARRAY
27870: PUSH
27871: LD_INT 1
27873: ARRAY
27874: PPUSH
27875: LD_EXP 101
27879: PUSH
27880: LD_VAR 0 1
27884: ARRAY
27885: PUSH
27886: LD_VAR 0 2
27890: ARRAY
27891: PUSH
27892: LD_INT 2
27894: ARRAY
27895: PPUSH
27896: CALL_OW 428
27900: ST_TO_ADDR
// if not tmp then
27901: LD_VAR 0 4
27905: NOT
27906: IFFALSE 27910
// continue ;
27908: GO 27825
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27910: LD_VAR 0 4
27914: PUSH
27915: LD_INT 81
27917: PUSH
27918: LD_VAR 0 3
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PPUSH
27927: CALL_OW 69
27931: IN
27932: PUSH
27933: LD_EXP 101
27937: PUSH
27938: LD_VAR 0 1
27942: ARRAY
27943: PUSH
27944: LD_VAR 0 2
27948: ARRAY
27949: PUSH
27950: LD_INT 1
27952: ARRAY
27953: PPUSH
27954: LD_EXP 101
27958: PUSH
27959: LD_VAR 0 1
27963: ARRAY
27964: PUSH
27965: LD_VAR 0 2
27969: ARRAY
27970: PUSH
27971: LD_INT 2
27973: ARRAY
27974: PPUSH
27975: CALL_OW 458
27979: AND
27980: IFFALSE 28074
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27982: LD_EXP 101
27986: PUSH
27987: LD_VAR 0 1
27991: ARRAY
27992: PUSH
27993: LD_VAR 0 2
27997: ARRAY
27998: PUSH
27999: LD_INT 1
28001: ARRAY
28002: PPUSH
28003: LD_EXP 101
28007: PUSH
28008: LD_VAR 0 1
28012: ARRAY
28013: PUSH
28014: LD_VAR 0 2
28018: ARRAY
28019: PUSH
28020: LD_INT 2
28022: ARRAY
28023: PPUSH
28024: LD_VAR 0 3
28028: PPUSH
28029: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28033: LD_ADDR_EXP 101
28037: PUSH
28038: LD_EXP 101
28042: PPUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: LD_EXP 101
28052: PUSH
28053: LD_VAR 0 1
28057: ARRAY
28058: PPUSH
28059: LD_VAR 0 2
28063: PPUSH
28064: CALL_OW 3
28068: PPUSH
28069: CALL_OW 1
28073: ST_TO_ADDR
// end ; end ;
28074: GO 27825
28076: POP
28077: POP
// end ;
28078: GO 27743
28080: POP
28081: POP
// end ;
28082: PPOPN 4
28084: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28085: LD_INT 0
28087: PPUSH
28088: PPUSH
// result := false ;
28089: LD_ADDR_VAR 0 4
28093: PUSH
28094: LD_INT 0
28096: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28097: LD_VAR 0 1
28101: PPUSH
28102: CALL_OW 264
28106: PUSH
28107: LD_INT 81
28109: EQUAL
28110: NOT
28111: IFFALSE 28115
// exit ;
28113: GO 28355
// index := GetElementIndex ( minersList , unit ) ;
28115: LD_ADDR_VAR 0 5
28119: PUSH
28120: LD_EXP 100
28124: PPUSH
28125: LD_VAR 0 1
28129: PPUSH
28130: CALL 34313 0 2
28134: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28135: LD_EXP 101
28139: PUSH
28140: LD_VAR 0 5
28144: ARRAY
28145: PUSH
28146: LD_EXP 102
28150: GREATEREQUAL
28151: IFFALSE 28155
// exit ;
28153: GO 28355
// ComMoveXY ( unit , x , y ) ;
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_VAR 0 2
28164: PPUSH
28165: LD_VAR 0 3
28169: PPUSH
28170: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28174: LD_INT 35
28176: PPUSH
28177: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28181: LD_VAR 0 1
28185: PPUSH
28186: LD_VAR 0 2
28190: PPUSH
28191: LD_VAR 0 3
28195: PPUSH
28196: CALL 66065 0 3
28200: NOT
28201: PUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 314
28211: AND
28212: IFFALSE 28216
// exit ;
28214: GO 28355
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28216: LD_VAR 0 2
28220: PPUSH
28221: LD_VAR 0 3
28225: PPUSH
28226: CALL_OW 428
28230: PUSH
28231: LD_VAR 0 1
28235: EQUAL
28236: PUSH
28237: LD_VAR 0 1
28241: PPUSH
28242: CALL_OW 314
28246: NOT
28247: AND
28248: IFFALSE 28174
// PlaySoundXY ( x , y , PlantMine ) ;
28250: LD_VAR 0 2
28254: PPUSH
28255: LD_VAR 0 3
28259: PPUSH
28260: LD_STRING PlantMine
28262: PPUSH
28263: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28267: LD_VAR 0 2
28271: PPUSH
28272: LD_VAR 0 3
28276: PPUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 255
28286: PPUSH
28287: LD_INT 0
28289: PPUSH
28290: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28294: LD_ADDR_EXP 101
28298: PUSH
28299: LD_EXP 101
28303: PPUSH
28304: LD_VAR 0 5
28308: PUSH
28309: LD_EXP 101
28313: PUSH
28314: LD_VAR 0 5
28318: ARRAY
28319: PUSH
28320: LD_INT 1
28322: PLUS
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PPUSH
28328: LD_VAR 0 2
28332: PUSH
28333: LD_VAR 0 3
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PPUSH
28342: CALL 34528 0 3
28346: ST_TO_ADDR
// result := true ;
28347: LD_ADDR_VAR 0 4
28351: PUSH
28352: LD_INT 1
28354: ST_TO_ADDR
// end ;
28355: LD_VAR 0 4
28359: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
28364: PPUSH
// if not unit in minersList then
28365: LD_VAR 0 1
28369: PUSH
28370: LD_EXP 100
28374: IN
28375: NOT
28376: IFFALSE 28380
// exit ;
28378: GO 28772
// index := GetElementIndex ( minersList , unit ) ;
28380: LD_ADDR_VAR 0 6
28384: PUSH
28385: LD_EXP 100
28389: PPUSH
28390: LD_VAR 0 1
28394: PPUSH
28395: CALL 34313 0 2
28399: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28400: LD_ADDR_VAR 0 5
28404: PUSH
28405: DOUBLE
28406: LD_EXP 101
28410: PUSH
28411: LD_VAR 0 6
28415: ARRAY
28416: INC
28417: ST_TO_ADDR
28418: LD_INT 1
28420: PUSH
28421: FOR_DOWNTO
28422: IFFALSE 28583
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28424: LD_EXP 101
28428: PUSH
28429: LD_VAR 0 6
28433: ARRAY
28434: PUSH
28435: LD_VAR 0 5
28439: ARRAY
28440: PUSH
28441: LD_INT 1
28443: ARRAY
28444: PUSH
28445: LD_VAR 0 2
28449: EQUAL
28450: PUSH
28451: LD_EXP 101
28455: PUSH
28456: LD_VAR 0 6
28460: ARRAY
28461: PUSH
28462: LD_VAR 0 5
28466: ARRAY
28467: PUSH
28468: LD_INT 2
28470: ARRAY
28471: PUSH
28472: LD_VAR 0 3
28476: EQUAL
28477: AND
28478: IFFALSE 28581
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28480: LD_EXP 101
28484: PUSH
28485: LD_VAR 0 6
28489: ARRAY
28490: PUSH
28491: LD_VAR 0 5
28495: ARRAY
28496: PUSH
28497: LD_INT 1
28499: ARRAY
28500: PPUSH
28501: LD_EXP 101
28505: PUSH
28506: LD_VAR 0 6
28510: ARRAY
28511: PUSH
28512: LD_VAR 0 5
28516: ARRAY
28517: PUSH
28518: LD_INT 2
28520: ARRAY
28521: PPUSH
28522: LD_VAR 0 1
28526: PPUSH
28527: CALL_OW 255
28531: PPUSH
28532: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28536: LD_ADDR_EXP 101
28540: PUSH
28541: LD_EXP 101
28545: PPUSH
28546: LD_VAR 0 6
28550: PPUSH
28551: LD_EXP 101
28555: PUSH
28556: LD_VAR 0 6
28560: ARRAY
28561: PPUSH
28562: LD_VAR 0 5
28566: PPUSH
28567: CALL_OW 3
28571: PPUSH
28572: CALL_OW 1
28576: ST_TO_ADDR
// exit ;
28577: POP
28578: POP
28579: GO 28772
// end ; end ;
28581: GO 28421
28583: POP
28584: POP
// for i := minerMinesList [ index ] downto 1 do
28585: LD_ADDR_VAR 0 5
28589: PUSH
28590: DOUBLE
28591: LD_EXP 101
28595: PUSH
28596: LD_VAR 0 6
28600: ARRAY
28601: INC
28602: ST_TO_ADDR
28603: LD_INT 1
28605: PUSH
28606: FOR_DOWNTO
28607: IFFALSE 28770
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28609: LD_EXP 101
28613: PUSH
28614: LD_VAR 0 6
28618: ARRAY
28619: PUSH
28620: LD_VAR 0 5
28624: ARRAY
28625: PUSH
28626: LD_INT 1
28628: ARRAY
28629: PPUSH
28630: LD_EXP 101
28634: PUSH
28635: LD_VAR 0 6
28639: ARRAY
28640: PUSH
28641: LD_VAR 0 5
28645: ARRAY
28646: PUSH
28647: LD_INT 2
28649: ARRAY
28650: PPUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL_OW 298
28665: PUSH
28666: LD_INT 6
28668: LESS
28669: IFFALSE 28768
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28671: LD_EXP 101
28675: PUSH
28676: LD_VAR 0 6
28680: ARRAY
28681: PUSH
28682: LD_VAR 0 5
28686: ARRAY
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PPUSH
28692: LD_EXP 101
28696: PUSH
28697: LD_VAR 0 6
28701: ARRAY
28702: PUSH
28703: LD_VAR 0 5
28707: ARRAY
28708: PUSH
28709: LD_INT 2
28711: ARRAY
28712: PPUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 255
28722: PPUSH
28723: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28727: LD_ADDR_EXP 101
28731: PUSH
28732: LD_EXP 101
28736: PPUSH
28737: LD_VAR 0 6
28741: PPUSH
28742: LD_EXP 101
28746: PUSH
28747: LD_VAR 0 6
28751: ARRAY
28752: PPUSH
28753: LD_VAR 0 5
28757: PPUSH
28758: CALL_OW 3
28762: PPUSH
28763: CALL_OW 1
28767: ST_TO_ADDR
// end ; end ;
28768: GO 28606
28770: POP
28771: POP
// end ;
28772: LD_VAR 0 4
28776: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28777: LD_INT 0
28779: PPUSH
28780: PPUSH
28781: PPUSH
28782: PPUSH
28783: PPUSH
28784: PPUSH
28785: PPUSH
28786: PPUSH
28787: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28788: LD_VAR 0 1
28792: PPUSH
28793: CALL_OW 264
28797: PUSH
28798: LD_INT 81
28800: EQUAL
28801: NOT
28802: PUSH
28803: LD_VAR 0 1
28807: PUSH
28808: LD_EXP 100
28812: IN
28813: NOT
28814: OR
28815: IFFALSE 28819
// exit ;
28817: GO 29141
// index := GetElementIndex ( minersList , unit ) ;
28819: LD_ADDR_VAR 0 6
28823: PUSH
28824: LD_EXP 100
28828: PPUSH
28829: LD_VAR 0 1
28833: PPUSH
28834: CALL 34313 0 2
28838: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28839: LD_ADDR_VAR 0 8
28843: PUSH
28844: LD_EXP 102
28848: PUSH
28849: LD_EXP 101
28853: PUSH
28854: LD_VAR 0 6
28858: ARRAY
28859: MINUS
28860: ST_TO_ADDR
// if not minesFreeAmount then
28861: LD_VAR 0 8
28865: NOT
28866: IFFALSE 28870
// exit ;
28868: GO 29141
// tmp := [ ] ;
28870: LD_ADDR_VAR 0 7
28874: PUSH
28875: EMPTY
28876: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28877: LD_ADDR_VAR 0 5
28881: PUSH
28882: DOUBLE
28883: LD_INT 1
28885: DEC
28886: ST_TO_ADDR
28887: LD_VAR 0 8
28891: PUSH
28892: FOR_TO
28893: IFFALSE 29088
// begin _d := rand ( 0 , 5 ) ;
28895: LD_ADDR_VAR 0 11
28899: PUSH
28900: LD_INT 0
28902: PPUSH
28903: LD_INT 5
28905: PPUSH
28906: CALL_OW 12
28910: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28911: LD_ADDR_VAR 0 12
28915: PUSH
28916: LD_INT 2
28918: PPUSH
28919: LD_INT 6
28921: PPUSH
28922: CALL_OW 12
28926: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28927: LD_ADDR_VAR 0 9
28931: PUSH
28932: LD_VAR 0 2
28936: PPUSH
28937: LD_VAR 0 11
28941: PPUSH
28942: LD_VAR 0 12
28946: PPUSH
28947: CALL_OW 272
28951: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28952: LD_ADDR_VAR 0 10
28956: PUSH
28957: LD_VAR 0 3
28961: PPUSH
28962: LD_VAR 0 11
28966: PPUSH
28967: LD_VAR 0 12
28971: PPUSH
28972: CALL_OW 273
28976: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28977: LD_VAR 0 9
28981: PPUSH
28982: LD_VAR 0 10
28986: PPUSH
28987: CALL_OW 488
28991: PUSH
28992: LD_VAR 0 9
28996: PUSH
28997: LD_VAR 0 10
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_VAR 0 7
29010: IN
29011: NOT
29012: AND
29013: PUSH
29014: LD_VAR 0 9
29018: PPUSH
29019: LD_VAR 0 10
29023: PPUSH
29024: CALL_OW 458
29028: NOT
29029: AND
29030: IFFALSE 29072
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29032: LD_ADDR_VAR 0 7
29036: PUSH
29037: LD_VAR 0 7
29041: PPUSH
29042: LD_VAR 0 7
29046: PUSH
29047: LD_INT 1
29049: PLUS
29050: PPUSH
29051: LD_VAR 0 9
29055: PUSH
29056: LD_VAR 0 10
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 1
29069: ST_TO_ADDR
29070: GO 29086
// i := i - 1 ;
29072: LD_ADDR_VAR 0 5
29076: PUSH
29077: LD_VAR 0 5
29081: PUSH
29082: LD_INT 1
29084: MINUS
29085: ST_TO_ADDR
// end ;
29086: GO 28892
29088: POP
29089: POP
// for i in tmp do
29090: LD_ADDR_VAR 0 5
29094: PUSH
29095: LD_VAR 0 7
29099: PUSH
29100: FOR_IN
29101: IFFALSE 29139
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_VAR 0 5
29112: PUSH
29113: LD_INT 1
29115: ARRAY
29116: PPUSH
29117: LD_VAR 0 5
29121: PUSH
29122: LD_INT 2
29124: ARRAY
29125: PPUSH
29126: CALL 28085 0 3
29130: NOT
29131: IFFALSE 29137
// exit ;
29133: POP
29134: POP
29135: GO 29141
29137: GO 29100
29139: POP
29140: POP
// end ;
29141: LD_VAR 0 4
29145: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
// if not GetClass ( unit ) = class_sniper then
29155: LD_VAR 0 1
29159: PPUSH
29160: CALL_OW 257
29164: PUSH
29165: LD_INT 5
29167: EQUAL
29168: NOT
29169: IFFALSE 29173
// exit ;
29171: GO 29561
// dist := 8 ;
29173: LD_ADDR_VAR 0 5
29177: PUSH
29178: LD_INT 8
29180: ST_TO_ADDR
// viewRange := 12 ;
29181: LD_ADDR_VAR 0 7
29185: PUSH
29186: LD_INT 12
29188: ST_TO_ADDR
// side := GetSide ( unit ) ;
29189: LD_ADDR_VAR 0 6
29193: PUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL_OW 255
29203: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29204: LD_INT 61
29206: PPUSH
29207: LD_VAR 0 6
29211: PPUSH
29212: CALL_OW 321
29216: PUSH
29217: LD_INT 2
29219: EQUAL
29220: IFFALSE 29230
// viewRange := 16 ;
29222: LD_ADDR_VAR 0 7
29226: PUSH
29227: LD_INT 16
29229: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29230: LD_VAR 0 1
29234: PPUSH
29235: LD_VAR 0 2
29239: PPUSH
29240: LD_VAR 0 3
29244: PPUSH
29245: CALL_OW 297
29249: PUSH
29250: LD_VAR 0 5
29254: GREATER
29255: IFFALSE 29334
// begin ComMoveXY ( unit , x , y ) ;
29257: LD_VAR 0 1
29261: PPUSH
29262: LD_VAR 0 2
29266: PPUSH
29267: LD_VAR 0 3
29271: PPUSH
29272: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29276: LD_INT 35
29278: PPUSH
29279: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_VAR 0 2
29292: PPUSH
29293: LD_VAR 0 3
29297: PPUSH
29298: CALL 66065 0 3
29302: NOT
29303: IFFALSE 29307
// exit ;
29305: GO 29561
// until GetDistUnitXY ( unit , x , y ) < dist ;
29307: LD_VAR 0 1
29311: PPUSH
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_VAR 0 3
29321: PPUSH
29322: CALL_OW 297
29326: PUSH
29327: LD_VAR 0 5
29331: LESS
29332: IFFALSE 29276
// end ; ComTurnXY ( unit , x , y ) ;
29334: LD_VAR 0 1
29338: PPUSH
29339: LD_VAR 0 2
29343: PPUSH
29344: LD_VAR 0 3
29348: PPUSH
29349: CALL_OW 118
// wait ( 5 ) ;
29353: LD_INT 5
29355: PPUSH
29356: CALL_OW 67
// _d := GetDir ( unit ) ;
29360: LD_ADDR_VAR 0 10
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 254
29374: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29375: LD_ADDR_VAR 0 8
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 250
29389: PPUSH
29390: LD_VAR 0 10
29394: PPUSH
29395: LD_VAR 0 5
29399: PPUSH
29400: CALL_OW 272
29404: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29405: LD_ADDR_VAR 0 9
29409: PUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 251
29419: PPUSH
29420: LD_VAR 0 10
29424: PPUSH
29425: LD_VAR 0 5
29429: PPUSH
29430: CALL_OW 273
29434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29435: LD_VAR 0 8
29439: PPUSH
29440: LD_VAR 0 9
29444: PPUSH
29445: CALL_OW 488
29449: NOT
29450: IFFALSE 29454
// exit ;
29452: GO 29561
// ComAnimCustom ( unit , 1 ) ;
29454: LD_VAR 0 1
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29466: LD_VAR 0 8
29470: PPUSH
29471: LD_VAR 0 9
29475: PPUSH
29476: LD_VAR 0 6
29480: PPUSH
29481: LD_VAR 0 7
29485: PPUSH
29486: CALL_OW 330
// repeat wait ( 1 ) ;
29490: LD_INT 1
29492: PPUSH
29493: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 316
29506: PUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 314
29516: OR
29517: PUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 302
29527: NOT
29528: OR
29529: PUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 301
29539: OR
29540: IFFALSE 29490
// RemoveSeeing ( _x , _y , side ) ;
29542: LD_VAR 0 8
29546: PPUSH
29547: LD_VAR 0 9
29551: PPUSH
29552: LD_VAR 0 6
29556: PPUSH
29557: CALL_OW 331
// end ; end_of_file
29561: LD_VAR 0 4
29565: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29566: LD_INT 0
29568: PPUSH
29569: PPUSH
// if exist_mode then
29570: LD_VAR 0 2
29574: IFFALSE 29599
// unit := CreateCharacter ( prefix & ident ) else
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_VAR 0 3
29585: PUSH
29586: LD_VAR 0 1
29590: STR
29591: PPUSH
29592: CALL_OW 34
29596: ST_TO_ADDR
29597: GO 29614
// unit := NewCharacter ( ident ) ;
29599: LD_ADDR_VAR 0 5
29603: PUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 25
29613: ST_TO_ADDR
// result := unit ;
29614: LD_ADDR_VAR 0 4
29618: PUSH
29619: LD_VAR 0 5
29623: ST_TO_ADDR
// end ;
29624: LD_VAR 0 4
29628: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// if not side or not nation then
29633: LD_VAR 0 1
29637: NOT
29638: PUSH
29639: LD_VAR 0 2
29643: NOT
29644: OR
29645: IFFALSE 29649
// exit ;
29647: GO 30417
// case nation of nation_american :
29649: LD_VAR 0 2
29653: PUSH
29654: LD_INT 1
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29876
29662: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29663: LD_ADDR_VAR 0 4
29667: PUSH
29668: LD_INT 35
29670: PUSH
29671: LD_INT 45
29673: PUSH
29674: LD_INT 46
29676: PUSH
29677: LD_INT 47
29679: PUSH
29680: LD_INT 82
29682: PUSH
29683: LD_INT 83
29685: PUSH
29686: LD_INT 84
29688: PUSH
29689: LD_INT 85
29691: PUSH
29692: LD_INT 86
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: LD_INT 6
29703: PUSH
29704: LD_INT 15
29706: PUSH
29707: LD_INT 16
29709: PUSH
29710: LD_INT 7
29712: PUSH
29713: LD_INT 12
29715: PUSH
29716: LD_INT 13
29718: PUSH
29719: LD_INT 10
29721: PUSH
29722: LD_INT 14
29724: PUSH
29725: LD_INT 20
29727: PUSH
29728: LD_INT 21
29730: PUSH
29731: LD_INT 22
29733: PUSH
29734: LD_INT 25
29736: PUSH
29737: LD_INT 32
29739: PUSH
29740: LD_INT 27
29742: PUSH
29743: LD_INT 36
29745: PUSH
29746: LD_INT 69
29748: PUSH
29749: LD_INT 39
29751: PUSH
29752: LD_INT 34
29754: PUSH
29755: LD_INT 40
29757: PUSH
29758: LD_INT 48
29760: PUSH
29761: LD_INT 49
29763: PUSH
29764: LD_INT 50
29766: PUSH
29767: LD_INT 51
29769: PUSH
29770: LD_INT 52
29772: PUSH
29773: LD_INT 53
29775: PUSH
29776: LD_INT 54
29778: PUSH
29779: LD_INT 55
29781: PUSH
29782: LD_INT 56
29784: PUSH
29785: LD_INT 57
29787: PUSH
29788: LD_INT 58
29790: PUSH
29791: LD_INT 59
29793: PUSH
29794: LD_INT 60
29796: PUSH
29797: LD_INT 61
29799: PUSH
29800: LD_INT 62
29802: PUSH
29803: LD_INT 80
29805: PUSH
29806: LD_INT 82
29808: PUSH
29809: LD_INT 83
29811: PUSH
29812: LD_INT 84
29814: PUSH
29815: LD_INT 85
29817: PUSH
29818: LD_INT 86
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
29874: GO 30341
29876: LD_INT 2
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 30110
29884: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29885: LD_ADDR_VAR 0 4
29889: PUSH
29890: LD_INT 35
29892: PUSH
29893: LD_INT 45
29895: PUSH
29896: LD_INT 46
29898: PUSH
29899: LD_INT 47
29901: PUSH
29902: LD_INT 82
29904: PUSH
29905: LD_INT 83
29907: PUSH
29908: LD_INT 84
29910: PUSH
29911: LD_INT 85
29913: PUSH
29914: LD_INT 87
29916: PUSH
29917: LD_INT 70
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: LD_INT 11
29925: PUSH
29926: LD_INT 3
29928: PUSH
29929: LD_INT 4
29931: PUSH
29932: LD_INT 5
29934: PUSH
29935: LD_INT 6
29937: PUSH
29938: LD_INT 15
29940: PUSH
29941: LD_INT 18
29943: PUSH
29944: LD_INT 7
29946: PUSH
29947: LD_INT 17
29949: PUSH
29950: LD_INT 8
29952: PUSH
29953: LD_INT 20
29955: PUSH
29956: LD_INT 21
29958: PUSH
29959: LD_INT 22
29961: PUSH
29962: LD_INT 72
29964: PUSH
29965: LD_INT 26
29967: PUSH
29968: LD_INT 69
29970: PUSH
29971: LD_INT 39
29973: PUSH
29974: LD_INT 40
29976: PUSH
29977: LD_INT 41
29979: PUSH
29980: LD_INT 42
29982: PUSH
29983: LD_INT 43
29985: PUSH
29986: LD_INT 48
29988: PUSH
29989: LD_INT 49
29991: PUSH
29992: LD_INT 50
29994: PUSH
29995: LD_INT 51
29997: PUSH
29998: LD_INT 52
30000: PUSH
30001: LD_INT 53
30003: PUSH
30004: LD_INT 54
30006: PUSH
30007: LD_INT 55
30009: PUSH
30010: LD_INT 56
30012: PUSH
30013: LD_INT 60
30015: PUSH
30016: LD_INT 61
30018: PUSH
30019: LD_INT 62
30021: PUSH
30022: LD_INT 66
30024: PUSH
30025: LD_INT 67
30027: PUSH
30028: LD_INT 68
30030: PUSH
30031: LD_INT 81
30033: PUSH
30034: LD_INT 82
30036: PUSH
30037: LD_INT 83
30039: PUSH
30040: LD_INT 84
30042: PUSH
30043: LD_INT 85
30045: PUSH
30046: LD_INT 87
30048: PUSH
30049: LD_INT 88
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: ST_TO_ADDR
30108: GO 30341
30110: LD_INT 3
30112: DOUBLE
30113: EQUAL
30114: IFTRUE 30118
30116: GO 30340
30118: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30119: LD_ADDR_VAR 0 4
30123: PUSH
30124: LD_INT 46
30126: PUSH
30127: LD_INT 47
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: LD_INT 2
30135: PUSH
30136: LD_INT 82
30138: PUSH
30139: LD_INT 83
30141: PUSH
30142: LD_INT 84
30144: PUSH
30145: LD_INT 85
30147: PUSH
30148: LD_INT 86
30150: PUSH
30151: LD_INT 11
30153: PUSH
30154: LD_INT 9
30156: PUSH
30157: LD_INT 20
30159: PUSH
30160: LD_INT 19
30162: PUSH
30163: LD_INT 21
30165: PUSH
30166: LD_INT 24
30168: PUSH
30169: LD_INT 22
30171: PUSH
30172: LD_INT 25
30174: PUSH
30175: LD_INT 28
30177: PUSH
30178: LD_INT 29
30180: PUSH
30181: LD_INT 30
30183: PUSH
30184: LD_INT 31
30186: PUSH
30187: LD_INT 37
30189: PUSH
30190: LD_INT 38
30192: PUSH
30193: LD_INT 32
30195: PUSH
30196: LD_INT 27
30198: PUSH
30199: LD_INT 33
30201: PUSH
30202: LD_INT 69
30204: PUSH
30205: LD_INT 39
30207: PUSH
30208: LD_INT 34
30210: PUSH
30211: LD_INT 40
30213: PUSH
30214: LD_INT 71
30216: PUSH
30217: LD_INT 23
30219: PUSH
30220: LD_INT 44
30222: PUSH
30223: LD_INT 48
30225: PUSH
30226: LD_INT 49
30228: PUSH
30229: LD_INT 50
30231: PUSH
30232: LD_INT 51
30234: PUSH
30235: LD_INT 52
30237: PUSH
30238: LD_INT 53
30240: PUSH
30241: LD_INT 54
30243: PUSH
30244: LD_INT 55
30246: PUSH
30247: LD_INT 56
30249: PUSH
30250: LD_INT 57
30252: PUSH
30253: LD_INT 58
30255: PUSH
30256: LD_INT 59
30258: PUSH
30259: LD_INT 63
30261: PUSH
30262: LD_INT 64
30264: PUSH
30265: LD_INT 65
30267: PUSH
30268: LD_INT 82
30270: PUSH
30271: LD_INT 83
30273: PUSH
30274: LD_INT 84
30276: PUSH
30277: LD_INT 85
30279: PUSH
30280: LD_INT 86
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
30338: GO 30341
30340: POP
// if state > - 1 and state < 3 then
30341: LD_VAR 0 3
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: GREATER
30350: PUSH
30351: LD_VAR 0 3
30355: PUSH
30356: LD_INT 3
30358: LESS
30359: AND
30360: IFFALSE 30417
// for i in result do
30362: LD_ADDR_VAR 0 5
30366: PUSH
30367: LD_VAR 0 4
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30415
// if GetTech ( i , side ) <> state then
30375: LD_VAR 0 5
30379: PPUSH
30380: LD_VAR 0 1
30384: PPUSH
30385: CALL_OW 321
30389: PUSH
30390: LD_VAR 0 3
30394: NONEQUAL
30395: IFFALSE 30413
// result := result diff i ;
30397: LD_ADDR_VAR 0 4
30401: PUSH
30402: LD_VAR 0 4
30406: PUSH
30407: LD_VAR 0 5
30411: DIFF
30412: ST_TO_ADDR
30413: GO 30372
30415: POP
30416: POP
// end ;
30417: LD_VAR 0 4
30421: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30422: LD_INT 0
30424: PPUSH
30425: PPUSH
30426: PPUSH
// result := true ;
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_INT 1
30434: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30435: LD_ADDR_VAR 0 5
30439: PUSH
30440: LD_VAR 0 2
30444: PPUSH
30445: CALL_OW 480
30449: ST_TO_ADDR
// if not tmp then
30450: LD_VAR 0 5
30454: NOT
30455: IFFALSE 30459
// exit ;
30457: GO 30508
// for i in tmp do
30459: LD_ADDR_VAR 0 4
30463: PUSH
30464: LD_VAR 0 5
30468: PUSH
30469: FOR_IN
30470: IFFALSE 30506
// if GetTech ( i , side ) <> state_researched then
30472: LD_VAR 0 4
30476: PPUSH
30477: LD_VAR 0 1
30481: PPUSH
30482: CALL_OW 321
30486: PUSH
30487: LD_INT 2
30489: NONEQUAL
30490: IFFALSE 30504
// begin result := false ;
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: LD_INT 0
30499: ST_TO_ADDR
// exit ;
30500: POP
30501: POP
30502: GO 30508
// end ;
30504: GO 30469
30506: POP
30507: POP
// end ;
30508: LD_VAR 0 3
30512: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30513: LD_INT 0
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30528: LD_VAR 0 1
30532: NOT
30533: PUSH
30534: LD_VAR 0 1
30538: PPUSH
30539: CALL_OW 257
30543: PUSH
30544: LD_INT 9
30546: NONEQUAL
30547: OR
30548: IFFALSE 30552
// exit ;
30550: GO 31125
// side := GetSide ( unit ) ;
30552: LD_ADDR_VAR 0 9
30556: PUSH
30557: LD_VAR 0 1
30561: PPUSH
30562: CALL_OW 255
30566: ST_TO_ADDR
// tech_space := tech_spacanom ;
30567: LD_ADDR_VAR 0 12
30571: PUSH
30572: LD_INT 29
30574: ST_TO_ADDR
// tech_time := tech_taurad ;
30575: LD_ADDR_VAR 0 13
30579: PUSH
30580: LD_INT 28
30582: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30583: LD_ADDR_VAR 0 11
30587: PUSH
30588: LD_VAR 0 1
30592: PPUSH
30593: CALL_OW 310
30597: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30598: LD_VAR 0 11
30602: PPUSH
30603: CALL_OW 247
30607: PUSH
30608: LD_INT 2
30610: EQUAL
30611: IFFALSE 30615
// exit ;
30613: GO 31125
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30615: LD_ADDR_VAR 0 8
30619: PUSH
30620: LD_INT 81
30622: PUSH
30623: LD_VAR 0 9
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: LD_INT 21
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 69
30657: ST_TO_ADDR
// if not tmp then
30658: LD_VAR 0 8
30662: NOT
30663: IFFALSE 30667
// exit ;
30665: GO 31125
// if in_unit then
30667: LD_VAR 0 11
30671: IFFALSE 30695
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30673: LD_ADDR_VAR 0 10
30677: PUSH
30678: LD_VAR 0 8
30682: PPUSH
30683: LD_VAR 0 11
30687: PPUSH
30688: CALL_OW 74
30692: ST_TO_ADDR
30693: GO 30715
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30695: LD_ADDR_VAR 0 10
30699: PUSH
30700: LD_VAR 0 8
30704: PPUSH
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 74
30714: ST_TO_ADDR
// if not enemy then
30715: LD_VAR 0 10
30719: NOT
30720: IFFALSE 30724
// exit ;
30722: GO 31125
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30724: LD_VAR 0 11
30728: PUSH
30729: LD_VAR 0 11
30733: PPUSH
30734: LD_VAR 0 10
30738: PPUSH
30739: CALL_OW 296
30743: PUSH
30744: LD_INT 13
30746: GREATER
30747: AND
30748: PUSH
30749: LD_VAR 0 1
30753: PPUSH
30754: LD_VAR 0 10
30758: PPUSH
30759: CALL_OW 296
30763: PUSH
30764: LD_INT 12
30766: GREATER
30767: OR
30768: IFFALSE 30772
// exit ;
30770: GO 31125
// missile := [ 1 ] ;
30772: LD_ADDR_VAR 0 14
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: EMPTY
30781: LIST
30782: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30783: LD_VAR 0 9
30787: PPUSH
30788: LD_VAR 0 12
30792: PPUSH
30793: CALL_OW 325
30797: IFFALSE 30826
// missile := Replace ( missile , missile + 1 , 2 ) ;
30799: LD_ADDR_VAR 0 14
30803: PUSH
30804: LD_VAR 0 14
30808: PPUSH
30809: LD_VAR 0 14
30813: PUSH
30814: LD_INT 1
30816: PLUS
30817: PPUSH
30818: LD_INT 2
30820: PPUSH
30821: CALL_OW 1
30825: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30826: LD_VAR 0 9
30830: PPUSH
30831: LD_VAR 0 13
30835: PPUSH
30836: CALL_OW 325
30840: PUSH
30841: LD_VAR 0 10
30845: PPUSH
30846: CALL_OW 255
30850: PPUSH
30851: LD_VAR 0 13
30855: PPUSH
30856: CALL_OW 325
30860: NOT
30861: AND
30862: IFFALSE 30891
// missile := Replace ( missile , missile + 1 , 3 ) ;
30864: LD_ADDR_VAR 0 14
30868: PUSH
30869: LD_VAR 0 14
30873: PPUSH
30874: LD_VAR 0 14
30878: PUSH
30879: LD_INT 1
30881: PLUS
30882: PPUSH
30883: LD_INT 3
30885: PPUSH
30886: CALL_OW 1
30890: ST_TO_ADDR
// if missile < 2 then
30891: LD_VAR 0 14
30895: PUSH
30896: LD_INT 2
30898: LESS
30899: IFFALSE 30903
// exit ;
30901: GO 31125
// x := GetX ( enemy ) ;
30903: LD_ADDR_VAR 0 4
30907: PUSH
30908: LD_VAR 0 10
30912: PPUSH
30913: CALL_OW 250
30917: ST_TO_ADDR
// y := GetY ( enemy ) ;
30918: LD_ADDR_VAR 0 5
30922: PUSH
30923: LD_VAR 0 10
30927: PPUSH
30928: CALL_OW 251
30932: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30933: LD_ADDR_VAR 0 6
30937: PUSH
30938: LD_VAR 0 4
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PPUSH
30947: LD_INT 1
30949: PPUSH
30950: CALL_OW 12
30954: PLUS
30955: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30956: LD_ADDR_VAR 0 7
30960: PUSH
30961: LD_VAR 0 5
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PPUSH
30970: LD_INT 1
30972: PPUSH
30973: CALL_OW 12
30977: PLUS
30978: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: CALL_OW 488
30993: NOT
30994: IFFALSE 31016
// begin _x := x ;
30996: LD_ADDR_VAR 0 6
31000: PUSH
31001: LD_VAR 0 4
31005: ST_TO_ADDR
// _y := y ;
31006: LD_ADDR_VAR 0 7
31010: PUSH
31011: LD_VAR 0 5
31015: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31016: LD_ADDR_VAR 0 3
31020: PUSH
31021: LD_INT 1
31023: PPUSH
31024: LD_VAR 0 14
31028: PPUSH
31029: CALL_OW 12
31033: ST_TO_ADDR
// case i of 1 :
31034: LD_VAR 0 3
31038: PUSH
31039: LD_INT 1
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31047
31045: GO 31064
31047: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31048: LD_VAR 0 1
31052: PPUSH
31053: LD_VAR 0 10
31057: PPUSH
31058: CALL_OW 115
31062: GO 31125
31064: LD_INT 2
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31094
31072: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31073: LD_VAR 0 1
31077: PPUSH
31078: LD_VAR 0 6
31082: PPUSH
31083: LD_VAR 0 7
31087: PPUSH
31088: CALL_OW 153
31092: GO 31125
31094: LD_INT 3
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31102
31100: GO 31124
31102: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31103: LD_VAR 0 1
31107: PPUSH
31108: LD_VAR 0 6
31112: PPUSH
31113: LD_VAR 0 7
31117: PPUSH
31118: CALL_OW 154
31122: GO 31125
31124: POP
// end ;
31125: LD_VAR 0 2
31129: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31130: LD_INT 0
31132: PPUSH
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
// if not unit or not building then
31138: LD_VAR 0 1
31142: NOT
31143: PUSH
31144: LD_VAR 0 2
31148: NOT
31149: OR
31150: IFFALSE 31154
// exit ;
31152: GO 31312
// x := GetX ( building ) ;
31154: LD_ADDR_VAR 0 5
31158: PUSH
31159: LD_VAR 0 2
31163: PPUSH
31164: CALL_OW 250
31168: ST_TO_ADDR
// y := GetY ( building ) ;
31169: LD_ADDR_VAR 0 6
31173: PUSH
31174: LD_VAR 0 2
31178: PPUSH
31179: CALL_OW 251
31183: ST_TO_ADDR
// for i = 0 to 5 do
31184: LD_ADDR_VAR 0 4
31188: PUSH
31189: DOUBLE
31190: LD_INT 0
31192: DEC
31193: ST_TO_ADDR
31194: LD_INT 5
31196: PUSH
31197: FOR_TO
31198: IFFALSE 31310
// begin _x := ShiftX ( x , i , 3 ) ;
31200: LD_ADDR_VAR 0 7
31204: PUSH
31205: LD_VAR 0 5
31209: PPUSH
31210: LD_VAR 0 4
31214: PPUSH
31215: LD_INT 3
31217: PPUSH
31218: CALL_OW 272
31222: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31223: LD_ADDR_VAR 0 8
31227: PUSH
31228: LD_VAR 0 6
31232: PPUSH
31233: LD_VAR 0 4
31237: PPUSH
31238: LD_INT 3
31240: PPUSH
31241: CALL_OW 273
31245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31246: LD_VAR 0 7
31250: PPUSH
31251: LD_VAR 0 8
31255: PPUSH
31256: CALL_OW 488
31260: NOT
31261: IFFALSE 31265
// continue ;
31263: GO 31197
// if HexInfo ( _x , _y ) = 0 then
31265: LD_VAR 0 7
31269: PPUSH
31270: LD_VAR 0 8
31274: PPUSH
31275: CALL_OW 428
31279: PUSH
31280: LD_INT 0
31282: EQUAL
31283: IFFALSE 31308
// begin ComMoveXY ( unit , _x , _y ) ;
31285: LD_VAR 0 1
31289: PPUSH
31290: LD_VAR 0 7
31294: PPUSH
31295: LD_VAR 0 8
31299: PPUSH
31300: CALL_OW 111
// exit ;
31304: POP
31305: POP
31306: GO 31312
// end ; end ;
31308: GO 31197
31310: POP
31311: POP
// end ;
31312: LD_VAR 0 3
31316: RET
// export function ScanBase ( side , base_area ) ; begin
31317: LD_INT 0
31319: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31320: LD_ADDR_VAR 0 3
31324: PUSH
31325: LD_VAR 0 2
31329: PPUSH
31330: LD_INT 81
31332: PUSH
31333: LD_VAR 0 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PPUSH
31342: CALL_OW 70
31346: ST_TO_ADDR
// end ;
31347: LD_VAR 0 3
31351: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31352: LD_INT 0
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
// result := false ;
31358: LD_ADDR_VAR 0 2
31362: PUSH
31363: LD_INT 0
31365: ST_TO_ADDR
// side := GetSide ( unit ) ;
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_VAR 0 1
31375: PPUSH
31376: CALL_OW 255
31380: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31381: LD_ADDR_VAR 0 4
31385: PUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 248
31395: ST_TO_ADDR
// case nat of 1 :
31396: LD_VAR 0 4
31400: PUSH
31401: LD_INT 1
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31420
31409: POP
// tech := tech_lassight ; 2 :
31410: LD_ADDR_VAR 0 5
31414: PUSH
31415: LD_INT 12
31417: ST_TO_ADDR
31418: GO 31459
31420: LD_INT 2
31422: DOUBLE
31423: EQUAL
31424: IFTRUE 31428
31426: GO 31439
31428: POP
// tech := tech_mortar ; 3 :
31429: LD_ADDR_VAR 0 5
31433: PUSH
31434: LD_INT 41
31436: ST_TO_ADDR
31437: GO 31459
31439: LD_INT 3
31441: DOUBLE
31442: EQUAL
31443: IFTRUE 31447
31445: GO 31458
31447: POP
// tech := tech_bazooka ; end ;
31448: LD_ADDR_VAR 0 5
31452: PUSH
31453: LD_INT 44
31455: ST_TO_ADDR
31456: GO 31459
31458: POP
// if Researched ( side , tech ) then
31459: LD_VAR 0 3
31463: PPUSH
31464: LD_VAR 0 5
31468: PPUSH
31469: CALL_OW 325
31473: IFFALSE 31500
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31475: LD_ADDR_VAR 0 2
31479: PUSH
31480: LD_INT 5
31482: PUSH
31483: LD_INT 8
31485: PUSH
31486: LD_INT 9
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: PUSH
31494: LD_VAR 0 4
31498: ARRAY
31499: ST_TO_ADDR
// end ;
31500: LD_VAR 0 2
31504: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31505: LD_INT 0
31507: PPUSH
31508: PPUSH
31509: PPUSH
// if not mines then
31510: LD_VAR 0 2
31514: NOT
31515: IFFALSE 31519
// exit ;
31517: GO 31663
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31519: LD_ADDR_VAR 0 5
31523: PUSH
31524: LD_INT 81
31526: PUSH
31527: LD_VAR 0 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: LD_INT 21
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 69
31561: ST_TO_ADDR
// for i in mines do
31562: LD_ADDR_VAR 0 4
31566: PUSH
31567: LD_VAR 0 2
31571: PUSH
31572: FOR_IN
31573: IFFALSE 31661
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31575: LD_VAR 0 4
31579: PUSH
31580: LD_INT 1
31582: ARRAY
31583: PPUSH
31584: LD_VAR 0 4
31588: PUSH
31589: LD_INT 2
31591: ARRAY
31592: PPUSH
31593: CALL_OW 458
31597: NOT
31598: IFFALSE 31602
// continue ;
31600: GO 31572
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31602: LD_VAR 0 4
31606: PUSH
31607: LD_INT 1
31609: ARRAY
31610: PPUSH
31611: LD_VAR 0 4
31615: PUSH
31616: LD_INT 2
31618: ARRAY
31619: PPUSH
31620: CALL_OW 428
31624: PUSH
31625: LD_VAR 0 5
31629: IN
31630: IFFALSE 31659
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31632: LD_VAR 0 4
31636: PUSH
31637: LD_INT 1
31639: ARRAY
31640: PPUSH
31641: LD_VAR 0 4
31645: PUSH
31646: LD_INT 2
31648: ARRAY
31649: PPUSH
31650: LD_VAR 0 1
31654: PPUSH
31655: CALL_OW 456
// end ;
31659: GO 31572
31661: POP
31662: POP
// end ;
31663: LD_VAR 0 3
31667: RET
// export function Count ( array ) ; begin
31668: LD_INT 0
31670: PPUSH
// result := array + 0 ;
31671: LD_ADDR_VAR 0 2
31675: PUSH
31676: LD_VAR 0 1
31680: PUSH
31681: LD_INT 0
31683: PLUS
31684: ST_TO_ADDR
// end ;
31685: LD_VAR 0 2
31689: RET
// export function IsEmpty ( building ) ; begin
31690: LD_INT 0
31692: PPUSH
// if not building then
31693: LD_VAR 0 1
31697: NOT
31698: IFFALSE 31702
// exit ;
31700: GO 31745
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31702: LD_ADDR_VAR 0 2
31706: PUSH
31707: LD_VAR 0 1
31711: PUSH
31712: LD_INT 22
31714: PUSH
31715: LD_VAR 0 1
31719: PPUSH
31720: CALL_OW 255
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 58
31731: PUSH
31732: EMPTY
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PPUSH
31739: CALL_OW 69
31743: IN
31744: ST_TO_ADDR
// end ;
31745: LD_VAR 0 2
31749: RET
// export function IsNotFull ( building ) ; var places ; begin
31750: LD_INT 0
31752: PPUSH
31753: PPUSH
// if not building then
31754: LD_VAR 0 1
31758: NOT
31759: IFFALSE 31763
// exit ;
31761: GO 31791
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31763: LD_ADDR_VAR 0 2
31767: PUSH
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 3
31775: PUSH
31776: LD_INT 62
31778: PUSH
31779: EMPTY
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PPUSH
31786: CALL_OW 72
31790: ST_TO_ADDR
// end ;
31791: LD_VAR 0 2
31795: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31796: LD_INT 0
31798: PPUSH
31799: PPUSH
31800: PPUSH
31801: PPUSH
// tmp := [ ] ;
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: EMPTY
31808: ST_TO_ADDR
// list := [ ] ;
31809: LD_ADDR_VAR 0 5
31813: PUSH
31814: EMPTY
31815: ST_TO_ADDR
// for i = 16 to 25 do
31816: LD_ADDR_VAR 0 4
31820: PUSH
31821: DOUBLE
31822: LD_INT 16
31824: DEC
31825: ST_TO_ADDR
31826: LD_INT 25
31828: PUSH
31829: FOR_TO
31830: IFFALSE 31903
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31832: LD_ADDR_VAR 0 3
31836: PUSH
31837: LD_VAR 0 3
31841: PUSH
31842: LD_INT 22
31844: PUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 255
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 91
31861: PUSH
31862: LD_VAR 0 1
31866: PUSH
31867: LD_INT 6
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 30
31877: PUSH
31878: LD_VAR 0 4
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: PPUSH
31895: CALL_OW 69
31899: ADD
31900: ST_TO_ADDR
31901: GO 31829
31903: POP
31904: POP
// for i = 1 to tmp do
31905: LD_ADDR_VAR 0 4
31909: PUSH
31910: DOUBLE
31911: LD_INT 1
31913: DEC
31914: ST_TO_ADDR
31915: LD_VAR 0 3
31919: PUSH
31920: FOR_TO
31921: IFFALSE 32009
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_VAR 0 5
31932: PUSH
31933: LD_VAR 0 3
31937: PUSH
31938: LD_VAR 0 4
31942: ARRAY
31943: PPUSH
31944: CALL_OW 266
31948: PUSH
31949: LD_VAR 0 3
31953: PUSH
31954: LD_VAR 0 4
31958: ARRAY
31959: PPUSH
31960: CALL_OW 250
31964: PUSH
31965: LD_VAR 0 3
31969: PUSH
31970: LD_VAR 0 4
31974: ARRAY
31975: PPUSH
31976: CALL_OW 251
31980: PUSH
31981: LD_VAR 0 3
31985: PUSH
31986: LD_VAR 0 4
31990: ARRAY
31991: PPUSH
31992: CALL_OW 254
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: EMPTY
32004: LIST
32005: ADD
32006: ST_TO_ADDR
32007: GO 31920
32009: POP
32010: POP
// result := list ;
32011: LD_ADDR_VAR 0 2
32015: PUSH
32016: LD_VAR 0 5
32020: ST_TO_ADDR
// end ;
32021: LD_VAR 0 2
32025: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32026: LD_INT 0
32028: PPUSH
32029: PPUSH
32030: PPUSH
32031: PPUSH
32032: PPUSH
32033: PPUSH
32034: PPUSH
// if not factory then
32035: LD_VAR 0 1
32039: NOT
32040: IFFALSE 32044
// exit ;
32042: GO 32637
// if control = control_apeman then
32044: LD_VAR 0 4
32048: PUSH
32049: LD_INT 5
32051: EQUAL
32052: IFFALSE 32161
// begin tmp := UnitsInside ( factory ) ;
32054: LD_ADDR_VAR 0 8
32058: PUSH
32059: LD_VAR 0 1
32063: PPUSH
32064: CALL_OW 313
32068: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32069: LD_VAR 0 8
32073: PPUSH
32074: LD_INT 25
32076: PUSH
32077: LD_INT 12
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 72
32088: NOT
32089: IFFALSE 32099
// control := control_manual ;
32091: LD_ADDR_VAR 0 4
32095: PUSH
32096: LD_INT 1
32098: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32099: LD_ADDR_VAR 0 8
32103: PUSH
32104: LD_VAR 0 1
32108: PPUSH
32109: CALL 31796 0 1
32113: ST_TO_ADDR
// if tmp then
32114: LD_VAR 0 8
32118: IFFALSE 32161
// begin for i in tmp do
32120: LD_ADDR_VAR 0 7
32124: PUSH
32125: LD_VAR 0 8
32129: PUSH
32130: FOR_IN
32131: IFFALSE 32159
// if i [ 1 ] = b_ext_radio then
32133: LD_VAR 0 7
32137: PUSH
32138: LD_INT 1
32140: ARRAY
32141: PUSH
32142: LD_INT 22
32144: EQUAL
32145: IFFALSE 32157
// begin control := control_remote ;
32147: LD_ADDR_VAR 0 4
32151: PUSH
32152: LD_INT 2
32154: ST_TO_ADDR
// break ;
32155: GO 32159
// end ;
32157: GO 32130
32159: POP
32160: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32161: LD_VAR 0 1
32165: PPUSH
32166: LD_VAR 0 2
32170: PPUSH
32171: LD_VAR 0 3
32175: PPUSH
32176: LD_VAR 0 4
32180: PPUSH
32181: LD_VAR 0 5
32185: PPUSH
32186: CALL_OW 448
32190: IFFALSE 32225
// begin result := [ chassis , engine , control , weapon ] ;
32192: LD_ADDR_VAR 0 6
32196: PUSH
32197: LD_VAR 0 2
32201: PUSH
32202: LD_VAR 0 3
32206: PUSH
32207: LD_VAR 0 4
32211: PUSH
32212: LD_VAR 0 5
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// exit ;
32223: GO 32637
// end ; _chassis := AvailableChassisList ( factory ) ;
32225: LD_ADDR_VAR 0 9
32229: PUSH
32230: LD_VAR 0 1
32234: PPUSH
32235: CALL_OW 475
32239: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32240: LD_ADDR_VAR 0 11
32244: PUSH
32245: LD_VAR 0 1
32249: PPUSH
32250: CALL_OW 476
32254: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32255: LD_ADDR_VAR 0 12
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 477
32269: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32270: LD_ADDR_VAR 0 10
32274: PUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 478
32284: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32285: LD_VAR 0 9
32289: NOT
32290: PUSH
32291: LD_VAR 0 11
32295: NOT
32296: OR
32297: PUSH
32298: LD_VAR 0 12
32302: NOT
32303: OR
32304: PUSH
32305: LD_VAR 0 10
32309: NOT
32310: OR
32311: IFFALSE 32346
// begin result := [ chassis , engine , control , weapon ] ;
32313: LD_ADDR_VAR 0 6
32317: PUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_VAR 0 3
32327: PUSH
32328: LD_VAR 0 4
32332: PUSH
32333: LD_VAR 0 5
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: ST_TO_ADDR
// exit ;
32344: GO 32637
// end ; if not chassis in _chassis then
32346: LD_VAR 0 2
32350: PUSH
32351: LD_VAR 0 9
32355: IN
32356: NOT
32357: IFFALSE 32383
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32359: LD_ADDR_VAR 0 2
32363: PUSH
32364: LD_VAR 0 9
32368: PUSH
32369: LD_INT 1
32371: PPUSH
32372: LD_VAR 0 9
32376: PPUSH
32377: CALL_OW 12
32381: ARRAY
32382: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32383: LD_VAR 0 2
32387: PPUSH
32388: LD_VAR 0 3
32392: PPUSH
32393: CALL 32642 0 2
32397: NOT
32398: IFFALSE 32457
// repeat engine := _engine [ 1 ] ;
32400: LD_ADDR_VAR 0 3
32404: PUSH
32405: LD_VAR 0 11
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32414: LD_ADDR_VAR 0 11
32418: PUSH
32419: LD_VAR 0 11
32423: PPUSH
32424: LD_INT 1
32426: PPUSH
32427: CALL_OW 3
32431: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32432: LD_VAR 0 2
32436: PPUSH
32437: LD_VAR 0 3
32441: PPUSH
32442: CALL 32642 0 2
32446: PUSH
32447: LD_VAR 0 11
32451: PUSH
32452: EMPTY
32453: EQUAL
32454: OR
32455: IFFALSE 32400
// if not control in _control then
32457: LD_VAR 0 4
32461: PUSH
32462: LD_VAR 0 12
32466: IN
32467: NOT
32468: IFFALSE 32494
// control := _control [ rand ( 1 , _control ) ] ;
32470: LD_ADDR_VAR 0 4
32474: PUSH
32475: LD_VAR 0 12
32479: PUSH
32480: LD_INT 1
32482: PPUSH
32483: LD_VAR 0 12
32487: PPUSH
32488: CALL_OW 12
32492: ARRAY
32493: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32494: LD_VAR 0 2
32498: PPUSH
32499: LD_VAR 0 5
32503: PPUSH
32504: CALL 32862 0 2
32508: NOT
32509: IFFALSE 32568
// repeat weapon := _weapon [ 1 ] ;
32511: LD_ADDR_VAR 0 5
32515: PUSH
32516: LD_VAR 0 10
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32525: LD_ADDR_VAR 0 10
32529: PUSH
32530: LD_VAR 0 10
32534: PPUSH
32535: LD_INT 1
32537: PPUSH
32538: CALL_OW 3
32542: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32543: LD_VAR 0 2
32547: PPUSH
32548: LD_VAR 0 5
32552: PPUSH
32553: CALL 32862 0 2
32557: PUSH
32558: LD_VAR 0 10
32562: PUSH
32563: EMPTY
32564: EQUAL
32565: OR
32566: IFFALSE 32511
// result := [ ] ;
32568: LD_ADDR_VAR 0 6
32572: PUSH
32573: EMPTY
32574: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32575: LD_VAR 0 1
32579: PPUSH
32580: LD_VAR 0 2
32584: PPUSH
32585: LD_VAR 0 3
32589: PPUSH
32590: LD_VAR 0 4
32594: PPUSH
32595: LD_VAR 0 5
32599: PPUSH
32600: CALL_OW 448
32604: IFFALSE 32637
// result := [ chassis , engine , control , weapon ] ;
32606: LD_ADDR_VAR 0 6
32610: PUSH
32611: LD_VAR 0 2
32615: PUSH
32616: LD_VAR 0 3
32620: PUSH
32621: LD_VAR 0 4
32625: PUSH
32626: LD_VAR 0 5
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
// end ;
32637: LD_VAR 0 6
32641: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32642: LD_INT 0
32644: PPUSH
// if not chassis or not engine then
32645: LD_VAR 0 1
32649: NOT
32650: PUSH
32651: LD_VAR 0 2
32655: NOT
32656: OR
32657: IFFALSE 32661
// exit ;
32659: GO 32857
// case engine of engine_solar :
32661: LD_VAR 0 2
32665: PUSH
32666: LD_INT 2
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32712
32674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: LD_INT 11
32682: PUSH
32683: LD_INT 12
32685: PUSH
32686: LD_INT 13
32688: PUSH
32689: LD_INT 14
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: ST_TO_ADDR
32710: GO 32841
32712: LD_INT 1
32714: DOUBLE
32715: EQUAL
32716: IFTRUE 32720
32718: GO 32782
32720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_INT 11
32728: PUSH
32729: LD_INT 12
32731: PUSH
32732: LD_INT 13
32734: PUSH
32735: LD_INT 14
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: LD_INT 4
32749: PUSH
32750: LD_INT 5
32752: PUSH
32753: LD_INT 21
32755: PUSH
32756: LD_INT 23
32758: PUSH
32759: LD_INT 22
32761: PUSH
32762: LD_INT 24
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: ST_TO_ADDR
32780: GO 32841
32782: LD_INT 3
32784: DOUBLE
32785: EQUAL
32786: IFTRUE 32790
32788: GO 32840
32790: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_INT 13
32798: PUSH
32799: LD_INT 14
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: LD_INT 5
32813: PUSH
32814: LD_INT 21
32816: PUSH
32817: LD_INT 22
32819: PUSH
32820: LD_INT 23
32822: PUSH
32823: LD_INT 24
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: ST_TO_ADDR
32838: GO 32841
32840: POP
// result := ( chassis in result ) ;
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_VAR 0 1
32850: PUSH
32851: LD_VAR 0 3
32855: IN
32856: ST_TO_ADDR
// end ;
32857: LD_VAR 0 3
32861: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32862: LD_INT 0
32864: PPUSH
// if not chassis or not weapon then
32865: LD_VAR 0 1
32869: NOT
32870: PUSH
32871: LD_VAR 0 2
32875: NOT
32876: OR
32877: IFFALSE 32881
// exit ;
32879: GO 33941
// case weapon of us_machine_gun :
32881: LD_VAR 0 2
32885: PUSH
32886: LD_INT 2
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32924
32894: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 3
32908: PUSH
32909: LD_INT 4
32911: PUSH
32912: LD_INT 5
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
32922: GO 33925
32924: LD_INT 3
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32962
32932: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: LD_INT 5
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
32960: GO 33925
32962: LD_INT 11
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 33000
32970: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32971: LD_ADDR_VAR 0 3
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 3
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: LD_INT 5
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
32998: GO 33925
33000: LD_INT 4
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33034
33008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33009: LD_ADDR_VAR 0 3
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: LD_INT 4
33022: PUSH
33023: LD_INT 5
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: ST_TO_ADDR
33032: GO 33925
33034: LD_INT 5
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33068
33042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33043: LD_ADDR_VAR 0 3
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 3
33053: PUSH
33054: LD_INT 4
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
33066: GO 33925
33068: LD_INT 9
33070: DOUBLE
33071: EQUAL
33072: IFTRUE 33076
33074: GO 33102
33076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33077: LD_ADDR_VAR 0 3
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: LD_INT 4
33090: PUSH
33091: LD_INT 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: ST_TO_ADDR
33100: GO 33925
33102: LD_INT 7
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33136
33110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 3
33121: PUSH
33122: LD_INT 4
33124: PUSH
33125: LD_INT 5
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: ST_TO_ADDR
33134: GO 33925
33136: LD_INT 12
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33170
33144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: LD_INT 5
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: ST_TO_ADDR
33168: GO 33925
33170: LD_INT 13
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33178
33176: GO 33204
33178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33179: LD_ADDR_VAR 0 3
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 4
33192: PUSH
33193: LD_INT 5
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: ST_TO_ADDR
33202: GO 33925
33204: LD_INT 14
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33230
33212: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_INT 4
33220: PUSH
33221: LD_INT 5
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: ST_TO_ADDR
33228: GO 33925
33230: LD_INT 6
33232: DOUBLE
33233: EQUAL
33234: IFTRUE 33238
33236: GO 33256
33238: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: LD_INT 4
33246: PUSH
33247: LD_INT 5
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: ST_TO_ADDR
33254: GO 33925
33256: LD_INT 10
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33264
33262: GO 33282
33264: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33265: LD_ADDR_VAR 0 3
33269: PUSH
33270: LD_INT 4
33272: PUSH
33273: LD_INT 5
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: ST_TO_ADDR
33280: GO 33925
33282: LD_INT 22
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33290
33288: GO 33316
33290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_INT 11
33298: PUSH
33299: LD_INT 12
33301: PUSH
33302: LD_INT 13
33304: PUSH
33305: LD_INT 14
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
33314: GO 33925
33316: LD_INT 23
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33324
33322: GO 33350
33324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33325: LD_ADDR_VAR 0 3
33329: PUSH
33330: LD_INT 11
33332: PUSH
33333: LD_INT 12
33335: PUSH
33336: LD_INT 13
33338: PUSH
33339: LD_INT 14
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
33348: GO 33925
33350: LD_INT 24
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33384
33358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33359: LD_ADDR_VAR 0 3
33363: PUSH
33364: LD_INT 11
33366: PUSH
33367: LD_INT 12
33369: PUSH
33370: LD_INT 13
33372: PUSH
33373: LD_INT 14
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
33382: GO 33925
33384: LD_INT 30
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33392
33390: GO 33418
33392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_INT 11
33400: PUSH
33401: LD_INT 12
33403: PUSH
33404: LD_INT 13
33406: PUSH
33407: LD_INT 14
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
33416: GO 33925
33418: LD_INT 25
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33444
33426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 13
33434: PUSH
33435: LD_INT 14
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: ST_TO_ADDR
33442: GO 33925
33444: LD_INT 27
33446: DOUBLE
33447: EQUAL
33448: IFTRUE 33452
33450: GO 33470
33452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33453: LD_ADDR_VAR 0 3
33457: PUSH
33458: LD_INT 13
33460: PUSH
33461: LD_INT 14
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: ST_TO_ADDR
33468: GO 33925
33470: LD_INT 92
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33504
33478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33479: LD_ADDR_VAR 0 3
33483: PUSH
33484: LD_INT 11
33486: PUSH
33487: LD_INT 12
33489: PUSH
33490: LD_INT 13
33492: PUSH
33493: LD_INT 14
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: ST_TO_ADDR
33502: GO 33925
33504: LD_INT 28
33506: DOUBLE
33507: EQUAL
33508: IFTRUE 33512
33510: GO 33530
33512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33513: LD_ADDR_VAR 0 3
33517: PUSH
33518: LD_INT 13
33520: PUSH
33521: LD_INT 14
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: ST_TO_ADDR
33528: GO 33925
33530: LD_INT 29
33532: DOUBLE
33533: EQUAL
33534: IFTRUE 33538
33536: GO 33556
33538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_INT 13
33546: PUSH
33547: LD_INT 14
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: ST_TO_ADDR
33554: GO 33925
33556: LD_INT 31
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33582
33564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33565: LD_ADDR_VAR 0 3
33569: PUSH
33570: LD_INT 13
33572: PUSH
33573: LD_INT 14
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: ST_TO_ADDR
33580: GO 33925
33582: LD_INT 26
33584: DOUBLE
33585: EQUAL
33586: IFTRUE 33590
33588: GO 33608
33590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33591: LD_ADDR_VAR 0 3
33595: PUSH
33596: LD_INT 13
33598: PUSH
33599: LD_INT 14
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 33925
33608: LD_INT 42
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33642
33616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_INT 21
33624: PUSH
33625: LD_INT 22
33627: PUSH
33628: LD_INT 23
33630: PUSH
33631: LD_INT 24
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 33925
33642: LD_INT 43
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33676
33650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 21
33658: PUSH
33659: LD_INT 22
33661: PUSH
33662: LD_INT 23
33664: PUSH
33665: LD_INT 24
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 33925
33676: LD_INT 44
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 21
33692: PUSH
33693: LD_INT 22
33695: PUSH
33696: LD_INT 23
33698: PUSH
33699: LD_INT 24
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 33925
33710: LD_INT 45
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 21
33726: PUSH
33727: LD_INT 22
33729: PUSH
33730: LD_INT 23
33732: PUSH
33733: LD_INT 24
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 33925
33744: LD_INT 49
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33778
33752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 21
33760: PUSH
33761: LD_INT 22
33763: PUSH
33764: LD_INT 23
33766: PUSH
33767: LD_INT 24
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
33776: GO 33925
33778: LD_INT 51
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33812
33786: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 21
33794: PUSH
33795: LD_INT 22
33797: PUSH
33798: LD_INT 23
33800: PUSH
33801: LD_INT 24
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 33925
33812: LD_INT 52
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33846
33820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 21
33828: PUSH
33829: LD_INT 22
33831: PUSH
33832: LD_INT 23
33834: PUSH
33835: LD_INT 24
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
33844: GO 33925
33846: LD_INT 53
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33854
33852: GO 33872
33854: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 23
33862: PUSH
33863: LD_INT 24
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: ST_TO_ADDR
33870: GO 33925
33872: LD_INT 46
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33898
33880: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 23
33888: PUSH
33889: LD_INT 24
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: ST_TO_ADDR
33896: GO 33925
33898: LD_INT 47
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33924
33906: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 23
33914: PUSH
33915: LD_INT 24
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: ST_TO_ADDR
33922: GO 33925
33924: POP
// result := ( chassis in result ) ;
33925: LD_ADDR_VAR 0 3
33929: PUSH
33930: LD_VAR 0 1
33934: PUSH
33935: LD_VAR 0 3
33939: IN
33940: ST_TO_ADDR
// end ;
33941: LD_VAR 0 3
33945: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33946: LD_INT 0
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
// result := array ;
33955: LD_ADDR_VAR 0 5
33959: PUSH
33960: LD_VAR 0 1
33964: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33965: LD_VAR 0 1
33969: NOT
33970: PUSH
33971: LD_VAR 0 2
33975: NOT
33976: OR
33977: PUSH
33978: LD_VAR 0 3
33982: NOT
33983: OR
33984: PUSH
33985: LD_VAR 0 2
33989: PUSH
33990: LD_VAR 0 1
33994: GREATER
33995: OR
33996: PUSH
33997: LD_VAR 0 3
34001: PUSH
34002: LD_VAR 0 1
34006: GREATER
34007: OR
34008: IFFALSE 34012
// exit ;
34010: GO 34308
// if direction then
34012: LD_VAR 0 4
34016: IFFALSE 34080
// begin d := 1 ;
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: LD_INT 1
34025: ST_TO_ADDR
// if i_from > i_to then
34026: LD_VAR 0 2
34030: PUSH
34031: LD_VAR 0 3
34035: GREATER
34036: IFFALSE 34062
// length := ( array - i_from ) + i_to else
34038: LD_ADDR_VAR 0 11
34042: PUSH
34043: LD_VAR 0 1
34047: PUSH
34048: LD_VAR 0 2
34052: MINUS
34053: PUSH
34054: LD_VAR 0 3
34058: PLUS
34059: ST_TO_ADDR
34060: GO 34078
// length := i_to - i_from ;
34062: LD_ADDR_VAR 0 11
34066: PUSH
34067: LD_VAR 0 3
34071: PUSH
34072: LD_VAR 0 2
34076: MINUS
34077: ST_TO_ADDR
// end else
34078: GO 34141
// begin d := - 1 ;
34080: LD_ADDR_VAR 0 9
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: ST_TO_ADDR
// if i_from > i_to then
34089: LD_VAR 0 2
34093: PUSH
34094: LD_VAR 0 3
34098: GREATER
34099: IFFALSE 34119
// length := i_from - i_to else
34101: LD_ADDR_VAR 0 11
34105: PUSH
34106: LD_VAR 0 2
34110: PUSH
34111: LD_VAR 0 3
34115: MINUS
34116: ST_TO_ADDR
34117: GO 34141
// length := ( array - i_to ) + i_from ;
34119: LD_ADDR_VAR 0 11
34123: PUSH
34124: LD_VAR 0 1
34128: PUSH
34129: LD_VAR 0 3
34133: MINUS
34134: PUSH
34135: LD_VAR 0 2
34139: PLUS
34140: ST_TO_ADDR
// end ; if not length then
34141: LD_VAR 0 11
34145: NOT
34146: IFFALSE 34150
// exit ;
34148: GO 34308
// tmp := array ;
34150: LD_ADDR_VAR 0 10
34154: PUSH
34155: LD_VAR 0 1
34159: ST_TO_ADDR
// for i = 1 to length do
34160: LD_ADDR_VAR 0 6
34164: PUSH
34165: DOUBLE
34166: LD_INT 1
34168: DEC
34169: ST_TO_ADDR
34170: LD_VAR 0 11
34174: PUSH
34175: FOR_TO
34176: IFFALSE 34296
// begin for j = 1 to array do
34178: LD_ADDR_VAR 0 7
34182: PUSH
34183: DOUBLE
34184: LD_INT 1
34186: DEC
34187: ST_TO_ADDR
34188: LD_VAR 0 1
34192: PUSH
34193: FOR_TO
34194: IFFALSE 34282
// begin k := j + d ;
34196: LD_ADDR_VAR 0 8
34200: PUSH
34201: LD_VAR 0 7
34205: PUSH
34206: LD_VAR 0 9
34210: PLUS
34211: ST_TO_ADDR
// if k > array then
34212: LD_VAR 0 8
34216: PUSH
34217: LD_VAR 0 1
34221: GREATER
34222: IFFALSE 34232
// k := 1 ;
34224: LD_ADDR_VAR 0 8
34228: PUSH
34229: LD_INT 1
34231: ST_TO_ADDR
// if not k then
34232: LD_VAR 0 8
34236: NOT
34237: IFFALSE 34249
// k := array ;
34239: LD_ADDR_VAR 0 8
34243: PUSH
34244: LD_VAR 0 1
34248: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34249: LD_ADDR_VAR 0 10
34253: PUSH
34254: LD_VAR 0 10
34258: PPUSH
34259: LD_VAR 0 8
34263: PPUSH
34264: LD_VAR 0 1
34268: PUSH
34269: LD_VAR 0 7
34273: ARRAY
34274: PPUSH
34275: CALL_OW 1
34279: ST_TO_ADDR
// end ;
34280: GO 34193
34282: POP
34283: POP
// array := tmp ;
34284: LD_ADDR_VAR 0 1
34288: PUSH
34289: LD_VAR 0 10
34293: ST_TO_ADDR
// end ;
34294: GO 34175
34296: POP
34297: POP
// result := array ;
34298: LD_ADDR_VAR 0 5
34302: PUSH
34303: LD_VAR 0 1
34307: ST_TO_ADDR
// end ;
34308: LD_VAR 0 5
34312: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34313: LD_INT 0
34315: PPUSH
34316: PPUSH
// result := 0 ;
34317: LD_ADDR_VAR 0 3
34321: PUSH
34322: LD_INT 0
34324: ST_TO_ADDR
// if not array or not value in array then
34325: LD_VAR 0 1
34329: NOT
34330: PUSH
34331: LD_VAR 0 2
34335: PUSH
34336: LD_VAR 0 1
34340: IN
34341: NOT
34342: OR
34343: IFFALSE 34347
// exit ;
34345: GO 34401
// for i = 1 to array do
34347: LD_ADDR_VAR 0 4
34351: PUSH
34352: DOUBLE
34353: LD_INT 1
34355: DEC
34356: ST_TO_ADDR
34357: LD_VAR 0 1
34361: PUSH
34362: FOR_TO
34363: IFFALSE 34399
// if value = array [ i ] then
34365: LD_VAR 0 2
34369: PUSH
34370: LD_VAR 0 1
34374: PUSH
34375: LD_VAR 0 4
34379: ARRAY
34380: EQUAL
34381: IFFALSE 34397
// begin result := i ;
34383: LD_ADDR_VAR 0 3
34387: PUSH
34388: LD_VAR 0 4
34392: ST_TO_ADDR
// exit ;
34393: POP
34394: POP
34395: GO 34401
// end ;
34397: GO 34362
34399: POP
34400: POP
// end ;
34401: LD_VAR 0 3
34405: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34406: LD_INT 0
34408: PPUSH
// vc_chassis := chassis ;
34409: LD_ADDR_OWVAR 37
34413: PUSH
34414: LD_VAR 0 1
34418: ST_TO_ADDR
// vc_engine := engine ;
34419: LD_ADDR_OWVAR 39
34423: PUSH
34424: LD_VAR 0 2
34428: ST_TO_ADDR
// vc_control := control ;
34429: LD_ADDR_OWVAR 38
34433: PUSH
34434: LD_VAR 0 3
34438: ST_TO_ADDR
// vc_weapon := weapon ;
34439: LD_ADDR_OWVAR 40
34443: PUSH
34444: LD_VAR 0 4
34448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34449: LD_ADDR_OWVAR 41
34453: PUSH
34454: LD_VAR 0 5
34458: ST_TO_ADDR
// end ;
34459: LD_VAR 0 6
34463: RET
// export function WantPlant ( unit ) ; var task ; begin
34464: LD_INT 0
34466: PPUSH
34467: PPUSH
// result := false ;
34468: LD_ADDR_VAR 0 2
34472: PUSH
34473: LD_INT 0
34475: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34476: LD_ADDR_VAR 0 3
34480: PUSH
34481: LD_VAR 0 1
34485: PPUSH
34486: CALL_OW 437
34490: ST_TO_ADDR
// if task then
34491: LD_VAR 0 3
34495: IFFALSE 34523
// if task [ 1 ] [ 1 ] = p then
34497: LD_VAR 0 3
34501: PUSH
34502: LD_INT 1
34504: ARRAY
34505: PUSH
34506: LD_INT 1
34508: ARRAY
34509: PUSH
34510: LD_STRING p
34512: EQUAL
34513: IFFALSE 34523
// result := true ;
34515: LD_ADDR_VAR 0 2
34519: PUSH
34520: LD_INT 1
34522: ST_TO_ADDR
// end ;
34523: LD_VAR 0 2
34527: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34528: LD_INT 0
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
// if pos < 1 then
34534: LD_VAR 0 2
34538: PUSH
34539: LD_INT 1
34541: LESS
34542: IFFALSE 34546
// exit ;
34544: GO 34849
// if pos = 1 then
34546: LD_VAR 0 2
34550: PUSH
34551: LD_INT 1
34553: EQUAL
34554: IFFALSE 34587
// result := Replace ( arr , pos [ 1 ] , value ) else
34556: LD_ADDR_VAR 0 4
34560: PUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: LD_VAR 0 2
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: PPUSH
34575: LD_VAR 0 3
34579: PPUSH
34580: CALL_OW 1
34584: ST_TO_ADDR
34585: GO 34849
// begin tmp := arr ;
34587: LD_ADDR_VAR 0 6
34591: PUSH
34592: LD_VAR 0 1
34596: ST_TO_ADDR
// s_arr := [ tmp ] ;
34597: LD_ADDR_VAR 0 7
34601: PUSH
34602: LD_VAR 0 6
34606: PUSH
34607: EMPTY
34608: LIST
34609: ST_TO_ADDR
// for i = 1 to pos - 1 do
34610: LD_ADDR_VAR 0 5
34614: PUSH
34615: DOUBLE
34616: LD_INT 1
34618: DEC
34619: ST_TO_ADDR
34620: LD_VAR 0 2
34624: PUSH
34625: LD_INT 1
34627: MINUS
34628: PUSH
34629: FOR_TO
34630: IFFALSE 34675
// begin tmp := tmp [ pos [ i ] ] ;
34632: LD_ADDR_VAR 0 6
34636: PUSH
34637: LD_VAR 0 6
34641: PUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 5
34651: ARRAY
34652: ARRAY
34653: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34654: LD_ADDR_VAR 0 7
34658: PUSH
34659: LD_VAR 0 7
34663: PUSH
34664: LD_VAR 0 6
34668: PUSH
34669: EMPTY
34670: LIST
34671: ADD
34672: ST_TO_ADDR
// end ;
34673: GO 34629
34675: POP
34676: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34677: LD_ADDR_VAR 0 6
34681: PUSH
34682: LD_VAR 0 6
34686: PPUSH
34687: LD_VAR 0 2
34691: PUSH
34692: LD_VAR 0 2
34696: ARRAY
34697: PPUSH
34698: LD_VAR 0 3
34702: PPUSH
34703: CALL_OW 1
34707: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34708: LD_ADDR_VAR 0 7
34712: PUSH
34713: LD_VAR 0 7
34717: PPUSH
34718: LD_VAR 0 7
34722: PPUSH
34723: LD_VAR 0 6
34727: PPUSH
34728: CALL_OW 1
34732: ST_TO_ADDR
// for i = s_arr downto 2 do
34733: LD_ADDR_VAR 0 5
34737: PUSH
34738: DOUBLE
34739: LD_VAR 0 7
34743: INC
34744: ST_TO_ADDR
34745: LD_INT 2
34747: PUSH
34748: FOR_DOWNTO
34749: IFFALSE 34833
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34751: LD_ADDR_VAR 0 6
34755: PUSH
34756: LD_VAR 0 7
34760: PUSH
34761: LD_VAR 0 5
34765: PUSH
34766: LD_INT 1
34768: MINUS
34769: ARRAY
34770: PPUSH
34771: LD_VAR 0 2
34775: PUSH
34776: LD_VAR 0 5
34780: PUSH
34781: LD_INT 1
34783: MINUS
34784: ARRAY
34785: PPUSH
34786: LD_VAR 0 7
34790: PUSH
34791: LD_VAR 0 5
34795: ARRAY
34796: PPUSH
34797: CALL_OW 1
34801: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34802: LD_ADDR_VAR 0 7
34806: PUSH
34807: LD_VAR 0 7
34811: PPUSH
34812: LD_VAR 0 5
34816: PUSH
34817: LD_INT 1
34819: MINUS
34820: PPUSH
34821: LD_VAR 0 6
34825: PPUSH
34826: CALL_OW 1
34830: ST_TO_ADDR
// end ;
34831: GO 34748
34833: POP
34834: POP
// result := s_arr [ 1 ] ;
34835: LD_ADDR_VAR 0 4
34839: PUSH
34840: LD_VAR 0 7
34844: PUSH
34845: LD_INT 1
34847: ARRAY
34848: ST_TO_ADDR
// end ; end ;
34849: LD_VAR 0 4
34853: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34854: LD_INT 0
34856: PPUSH
34857: PPUSH
// if not list then
34858: LD_VAR 0 1
34862: NOT
34863: IFFALSE 34867
// exit ;
34865: GO 34958
// i := list [ pos1 ] ;
34867: LD_ADDR_VAR 0 5
34871: PUSH
34872: LD_VAR 0 1
34876: PUSH
34877: LD_VAR 0 2
34881: ARRAY
34882: ST_TO_ADDR
// if not i then
34883: LD_VAR 0 5
34887: NOT
34888: IFFALSE 34892
// exit ;
34890: GO 34958
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34892: LD_ADDR_VAR 0 1
34896: PUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: LD_VAR 0 2
34906: PPUSH
34907: LD_VAR 0 1
34911: PUSH
34912: LD_VAR 0 3
34916: ARRAY
34917: PPUSH
34918: CALL_OW 1
34922: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34923: LD_ADDR_VAR 0 1
34927: PUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: LD_VAR 0 3
34937: PPUSH
34938: LD_VAR 0 5
34942: PPUSH
34943: CALL_OW 1
34947: ST_TO_ADDR
// result := list ;
34948: LD_ADDR_VAR 0 4
34952: PUSH
34953: LD_VAR 0 1
34957: ST_TO_ADDR
// end ;
34958: LD_VAR 0 4
34962: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34963: LD_INT 0
34965: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34966: LD_ADDR_VAR 0 5
34970: PUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL_OW 250
34980: PPUSH
34981: LD_VAR 0 1
34985: PPUSH
34986: CALL_OW 251
34990: PPUSH
34991: LD_VAR 0 2
34995: PPUSH
34996: LD_VAR 0 3
35000: PPUSH
35001: LD_VAR 0 4
35005: PPUSH
35006: CALL 35384 0 5
35010: ST_TO_ADDR
// end ;
35011: LD_VAR 0 5
35015: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35016: LD_INT 0
35018: PPUSH
35019: PPUSH
35020: PPUSH
35021: PPUSH
// if not list or not unit then
35022: LD_VAR 0 2
35026: NOT
35027: PUSH
35028: LD_VAR 0 1
35032: NOT
35033: OR
35034: IFFALSE 35038
// exit ;
35036: GO 35379
// result := [ ] ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: EMPTY
35044: ST_TO_ADDR
// for i in list do
35045: LD_ADDR_VAR 0 6
35049: PUSH
35050: LD_VAR 0 2
35054: PUSH
35055: FOR_IN
35056: IFFALSE 35274
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35058: LD_ADDR_VAR 0 8
35062: PUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: LD_VAR 0 6
35072: PUSH
35073: LD_INT 1
35075: ARRAY
35076: PPUSH
35077: LD_VAR 0 6
35081: PUSH
35082: LD_INT 2
35084: ARRAY
35085: PPUSH
35086: CALL_OW 297
35090: ST_TO_ADDR
// if not Count ( result ) then
35091: LD_VAR 0 5
35095: PPUSH
35096: CALL 31668 0 1
35100: NOT
35101: IFFALSE 35134
// begin result := Join ( result , [ i , tmp ] ) ;
35103: LD_ADDR_VAR 0 5
35107: PUSH
35108: LD_VAR 0 5
35112: PPUSH
35113: LD_VAR 0 6
35117: PUSH
35118: LD_VAR 0 8
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PPUSH
35127: CALL 67268 0 2
35131: ST_TO_ADDR
// continue ;
35132: GO 35055
// end ; if result [ result ] [ 2 ] <= tmp then
35134: LD_VAR 0 5
35138: PUSH
35139: LD_VAR 0 5
35143: ARRAY
35144: PUSH
35145: LD_INT 2
35147: ARRAY
35148: PUSH
35149: LD_VAR 0 8
35153: LESSEQUAL
35154: IFFALSE 35187
// result := Join ( result , [ i , tmp ] ) else
35156: LD_ADDR_VAR 0 5
35160: PUSH
35161: LD_VAR 0 5
35165: PPUSH
35166: LD_VAR 0 6
35170: PUSH
35171: LD_VAR 0 8
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PPUSH
35180: CALL 67268 0 2
35184: ST_TO_ADDR
35185: GO 35272
// begin for j := 1 to Count ( result ) do
35187: LD_ADDR_VAR 0 7
35191: PUSH
35192: DOUBLE
35193: LD_INT 1
35195: DEC
35196: ST_TO_ADDR
35197: LD_VAR 0 5
35201: PPUSH
35202: CALL 31668 0 1
35206: PUSH
35207: FOR_TO
35208: IFFALSE 35270
// begin if tmp < result [ j ] [ 2 ] then
35210: LD_VAR 0 8
35214: PUSH
35215: LD_VAR 0 5
35219: PUSH
35220: LD_VAR 0 7
35224: ARRAY
35225: PUSH
35226: LD_INT 2
35228: ARRAY
35229: LESS
35230: IFFALSE 35268
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35232: LD_ADDR_VAR 0 5
35236: PUSH
35237: LD_VAR 0 5
35241: PPUSH
35242: LD_VAR 0 7
35246: PPUSH
35247: LD_VAR 0 6
35251: PUSH
35252: LD_VAR 0 8
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PPUSH
35261: CALL_OW 2
35265: ST_TO_ADDR
// break ;
35266: GO 35270
// end ; end ;
35268: GO 35207
35270: POP
35271: POP
// end ; end ;
35272: GO 35055
35274: POP
35275: POP
// if result and not asc then
35276: LD_VAR 0 5
35280: PUSH
35281: LD_VAR 0 3
35285: NOT
35286: AND
35287: IFFALSE 35304
// result := ReverseArray ( result ) ;
35289: LD_ADDR_VAR 0 5
35293: PUSH
35294: LD_VAR 0 5
35298: PPUSH
35299: CALL 62544 0 1
35303: ST_TO_ADDR
// tmp := [ ] ;
35304: LD_ADDR_VAR 0 8
35308: PUSH
35309: EMPTY
35310: ST_TO_ADDR
// if mode then
35311: LD_VAR 0 4
35315: IFFALSE 35379
// begin for i := 1 to result do
35317: LD_ADDR_VAR 0 6
35321: PUSH
35322: DOUBLE
35323: LD_INT 1
35325: DEC
35326: ST_TO_ADDR
35327: LD_VAR 0 5
35331: PUSH
35332: FOR_TO
35333: IFFALSE 35367
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35335: LD_ADDR_VAR 0 8
35339: PUSH
35340: LD_VAR 0 8
35344: PPUSH
35345: LD_VAR 0 5
35349: PUSH
35350: LD_VAR 0 6
35354: ARRAY
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: PPUSH
35360: CALL 67268 0 2
35364: ST_TO_ADDR
35365: GO 35332
35367: POP
35368: POP
// result := tmp ;
35369: LD_ADDR_VAR 0 5
35373: PUSH
35374: LD_VAR 0 8
35378: ST_TO_ADDR
// end ; end ;
35379: LD_VAR 0 5
35383: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35384: LD_INT 0
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
// if not list then
35390: LD_VAR 0 3
35394: NOT
35395: IFFALSE 35399
// exit ;
35397: GO 35787
// result := [ ] ;
35399: LD_ADDR_VAR 0 6
35403: PUSH
35404: EMPTY
35405: ST_TO_ADDR
// for i in list do
35406: LD_ADDR_VAR 0 7
35410: PUSH
35411: LD_VAR 0 3
35415: PUSH
35416: FOR_IN
35417: IFFALSE 35619
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_VAR 0 7
35428: PPUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: LD_VAR 0 2
35438: PPUSH
35439: CALL_OW 297
35443: ST_TO_ADDR
// if not result then
35444: LD_VAR 0 6
35448: NOT
35449: IFFALSE 35475
// result := [ [ i , tmp ] ] else
35451: LD_ADDR_VAR 0 6
35455: PUSH
35456: LD_VAR 0 7
35460: PUSH
35461: LD_VAR 0 9
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: EMPTY
35471: LIST
35472: ST_TO_ADDR
35473: GO 35617
// begin if result [ result ] [ 2 ] < tmp then
35475: LD_VAR 0 6
35479: PUSH
35480: LD_VAR 0 6
35484: ARRAY
35485: PUSH
35486: LD_INT 2
35488: ARRAY
35489: PUSH
35490: LD_VAR 0 9
35494: LESS
35495: IFFALSE 35537
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35497: LD_ADDR_VAR 0 6
35501: PUSH
35502: LD_VAR 0 6
35506: PPUSH
35507: LD_VAR 0 6
35511: PUSH
35512: LD_INT 1
35514: PLUS
35515: PPUSH
35516: LD_VAR 0 7
35520: PUSH
35521: LD_VAR 0 9
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PPUSH
35530: CALL_OW 2
35534: ST_TO_ADDR
35535: GO 35617
// for j = 1 to result do
35537: LD_ADDR_VAR 0 8
35541: PUSH
35542: DOUBLE
35543: LD_INT 1
35545: DEC
35546: ST_TO_ADDR
35547: LD_VAR 0 6
35551: PUSH
35552: FOR_TO
35553: IFFALSE 35615
// begin if tmp < result [ j ] [ 2 ] then
35555: LD_VAR 0 9
35559: PUSH
35560: LD_VAR 0 6
35564: PUSH
35565: LD_VAR 0 8
35569: ARRAY
35570: PUSH
35571: LD_INT 2
35573: ARRAY
35574: LESS
35575: IFFALSE 35613
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35577: LD_ADDR_VAR 0 6
35581: PUSH
35582: LD_VAR 0 6
35586: PPUSH
35587: LD_VAR 0 8
35591: PPUSH
35592: LD_VAR 0 7
35596: PUSH
35597: LD_VAR 0 9
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PPUSH
35606: CALL_OW 2
35610: ST_TO_ADDR
// break ;
35611: GO 35615
// end ; end ;
35613: GO 35552
35615: POP
35616: POP
// end ; end ;
35617: GO 35416
35619: POP
35620: POP
// if result and not asc then
35621: LD_VAR 0 6
35625: PUSH
35626: LD_VAR 0 4
35630: NOT
35631: AND
35632: IFFALSE 35707
// begin tmp := result ;
35634: LD_ADDR_VAR 0 9
35638: PUSH
35639: LD_VAR 0 6
35643: ST_TO_ADDR
// for i = tmp downto 1 do
35644: LD_ADDR_VAR 0 7
35648: PUSH
35649: DOUBLE
35650: LD_VAR 0 9
35654: INC
35655: ST_TO_ADDR
35656: LD_INT 1
35658: PUSH
35659: FOR_DOWNTO
35660: IFFALSE 35705
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35662: LD_ADDR_VAR 0 6
35666: PUSH
35667: LD_VAR 0 6
35671: PPUSH
35672: LD_VAR 0 9
35676: PUSH
35677: LD_VAR 0 7
35681: MINUS
35682: PUSH
35683: LD_INT 1
35685: PLUS
35686: PPUSH
35687: LD_VAR 0 9
35691: PUSH
35692: LD_VAR 0 7
35696: ARRAY
35697: PPUSH
35698: CALL_OW 1
35702: ST_TO_ADDR
35703: GO 35659
35705: POP
35706: POP
// end ; tmp := [ ] ;
35707: LD_ADDR_VAR 0 9
35711: PUSH
35712: EMPTY
35713: ST_TO_ADDR
// if mode then
35714: LD_VAR 0 5
35718: IFFALSE 35787
// begin for i = 1 to result do
35720: LD_ADDR_VAR 0 7
35724: PUSH
35725: DOUBLE
35726: LD_INT 1
35728: DEC
35729: ST_TO_ADDR
35730: LD_VAR 0 6
35734: PUSH
35735: FOR_TO
35736: IFFALSE 35775
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35738: LD_ADDR_VAR 0 9
35742: PUSH
35743: LD_VAR 0 9
35747: PPUSH
35748: LD_VAR 0 7
35752: PPUSH
35753: LD_VAR 0 6
35757: PUSH
35758: LD_VAR 0 7
35762: ARRAY
35763: PUSH
35764: LD_INT 1
35766: ARRAY
35767: PPUSH
35768: CALL_OW 1
35772: ST_TO_ADDR
35773: GO 35735
35775: POP
35776: POP
// result := tmp ;
35777: LD_ADDR_VAR 0 6
35781: PUSH
35782: LD_VAR 0 9
35786: ST_TO_ADDR
// end ; end ;
35787: LD_VAR 0 6
35791: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35792: LD_INT 0
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35800: LD_ADDR_VAR 0 5
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: ST_TO_ADDR
// if not x or not y then
35822: LD_VAR 0 2
35826: NOT
35827: PUSH
35828: LD_VAR 0 3
35832: NOT
35833: OR
35834: IFFALSE 35838
// exit ;
35836: GO 37488
// if not range then
35838: LD_VAR 0 4
35842: NOT
35843: IFFALSE 35853
// range := 10 ;
35845: LD_ADDR_VAR 0 4
35849: PUSH
35850: LD_INT 10
35852: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35853: LD_ADDR_VAR 0 8
35857: PUSH
35858: LD_INT 81
35860: PUSH
35861: LD_VAR 0 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 92
35872: PUSH
35873: LD_VAR 0 2
35877: PUSH
35878: LD_VAR 0 3
35882: PUSH
35883: LD_VAR 0 4
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 21
35899: PUSH
35900: LD_INT 3
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: PPUSH
35916: CALL_OW 69
35920: ST_TO_ADDR
// if not tmp then
35921: LD_VAR 0 8
35925: NOT
35926: IFFALSE 35930
// exit ;
35928: GO 37488
// for i in tmp do
35930: LD_ADDR_VAR 0 6
35934: PUSH
35935: LD_VAR 0 8
35939: PUSH
35940: FOR_IN
35941: IFFALSE 37463
// begin points := [ 0 , 0 , 0 ] ;
35943: LD_ADDR_VAR 0 9
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: ST_TO_ADDR
// bpoints := 1 ;
35962: LD_ADDR_VAR 0 10
35966: PUSH
35967: LD_INT 1
35969: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35970: LD_VAR 0 6
35974: PPUSH
35975: CALL_OW 247
35979: PUSH
35980: LD_INT 1
35982: DOUBLE
35983: EQUAL
35984: IFTRUE 35988
35986: GO 36566
35988: POP
// begin if GetClass ( i ) = 1 then
35989: LD_VAR 0 6
35993: PPUSH
35994: CALL_OW 257
35998: PUSH
35999: LD_INT 1
36001: EQUAL
36002: IFFALSE 36023
// points := [ 10 , 5 , 3 ] ;
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_INT 10
36011: PUSH
36012: LD_INT 5
36014: PUSH
36015: LD_INT 3
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36023: LD_VAR 0 6
36027: PPUSH
36028: CALL_OW 257
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: LD_INT 3
36038: PUSH
36039: LD_INT 4
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: IN
36047: IFFALSE 36068
// points := [ 3 , 2 , 1 ] ;
36049: LD_ADDR_VAR 0 9
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36068: LD_VAR 0 6
36072: PPUSH
36073: CALL_OW 257
36077: PUSH
36078: LD_INT 5
36080: EQUAL
36081: IFFALSE 36102
// points := [ 130 , 5 , 2 ] ;
36083: LD_ADDR_VAR 0 9
36087: PUSH
36088: LD_INT 130
36090: PUSH
36091: LD_INT 5
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36102: LD_VAR 0 6
36106: PPUSH
36107: CALL_OW 257
36111: PUSH
36112: LD_INT 8
36114: EQUAL
36115: IFFALSE 36136
// points := [ 35 , 35 , 30 ] ;
36117: LD_ADDR_VAR 0 9
36121: PUSH
36122: LD_INT 35
36124: PUSH
36125: LD_INT 35
36127: PUSH
36128: LD_INT 30
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36136: LD_VAR 0 6
36140: PPUSH
36141: CALL_OW 257
36145: PUSH
36146: LD_INT 9
36148: EQUAL
36149: IFFALSE 36170
// points := [ 20 , 55 , 40 ] ;
36151: LD_ADDR_VAR 0 9
36155: PUSH
36156: LD_INT 20
36158: PUSH
36159: LD_INT 55
36161: PUSH
36162: LD_INT 40
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36170: LD_VAR 0 6
36174: PPUSH
36175: CALL_OW 257
36179: PUSH
36180: LD_INT 12
36182: PUSH
36183: LD_INT 16
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: IN
36190: IFFALSE 36211
// points := [ 5 , 3 , 2 ] ;
36192: LD_ADDR_VAR 0 9
36196: PUSH
36197: LD_INT 5
36199: PUSH
36200: LD_INT 3
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36211: LD_VAR 0 6
36215: PPUSH
36216: CALL_OW 257
36220: PUSH
36221: LD_INT 17
36223: EQUAL
36224: IFFALSE 36245
// points := [ 100 , 50 , 75 ] ;
36226: LD_ADDR_VAR 0 9
36230: PUSH
36231: LD_INT 100
36233: PUSH
36234: LD_INT 50
36236: PUSH
36237: LD_INT 75
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36245: LD_VAR 0 6
36249: PPUSH
36250: CALL_OW 257
36254: PUSH
36255: LD_INT 15
36257: EQUAL
36258: IFFALSE 36279
// points := [ 10 , 5 , 3 ] ;
36260: LD_ADDR_VAR 0 9
36264: PUSH
36265: LD_INT 10
36267: PUSH
36268: LD_INT 5
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36279: LD_VAR 0 6
36283: PPUSH
36284: CALL_OW 257
36288: PUSH
36289: LD_INT 14
36291: EQUAL
36292: IFFALSE 36313
// points := [ 10 , 0 , 0 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 10
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 257
36322: PUSH
36323: LD_INT 11
36325: EQUAL
36326: IFFALSE 36347
// points := [ 30 , 10 , 5 ] ;
36328: LD_ADDR_VAR 0 9
36332: PUSH
36333: LD_INT 30
36335: PUSH
36336: LD_INT 10
36338: PUSH
36339: LD_INT 5
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36347: LD_VAR 0 1
36351: PPUSH
36352: LD_INT 5
36354: PPUSH
36355: CALL_OW 321
36359: PUSH
36360: LD_INT 2
36362: EQUAL
36363: IFFALSE 36380
// bpoints := bpoints * 1.8 ;
36365: LD_ADDR_VAR 0 10
36369: PUSH
36370: LD_VAR 0 10
36374: PUSH
36375: LD_REAL  1.80000000000000E+0000
36378: MUL
36379: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36380: LD_VAR 0 6
36384: PPUSH
36385: CALL_OW 257
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: LD_INT 3
36398: PUSH
36399: LD_INT 4
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: IN
36408: PUSH
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_INT 51
36416: PPUSH
36417: CALL_OW 321
36421: PUSH
36422: LD_INT 2
36424: EQUAL
36425: AND
36426: IFFALSE 36443
// bpoints := bpoints * 1.2 ;
36428: LD_ADDR_VAR 0 10
36432: PUSH
36433: LD_VAR 0 10
36437: PUSH
36438: LD_REAL  1.20000000000000E+0000
36441: MUL
36442: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36443: LD_VAR 0 6
36447: PPUSH
36448: CALL_OW 257
36452: PUSH
36453: LD_INT 5
36455: PUSH
36456: LD_INT 7
36458: PUSH
36459: LD_INT 9
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: IN
36467: PUSH
36468: LD_VAR 0 1
36472: PPUSH
36473: LD_INT 52
36475: PPUSH
36476: CALL_OW 321
36480: PUSH
36481: LD_INT 2
36483: EQUAL
36484: AND
36485: IFFALSE 36502
// bpoints := bpoints * 1.5 ;
36487: LD_ADDR_VAR 0 10
36491: PUSH
36492: LD_VAR 0 10
36496: PUSH
36497: LD_REAL  1.50000000000000E+0000
36500: MUL
36501: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_INT 66
36509: PPUSH
36510: CALL_OW 321
36514: PUSH
36515: LD_INT 2
36517: EQUAL
36518: IFFALSE 36535
// bpoints := bpoints * 1.1 ;
36520: LD_ADDR_VAR 0 10
36524: PUSH
36525: LD_VAR 0 10
36529: PUSH
36530: LD_REAL  1.10000000000000E+0000
36533: MUL
36534: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36535: LD_ADDR_VAR 0 10
36539: PUSH
36540: LD_VAR 0 10
36544: PUSH
36545: LD_VAR 0 6
36549: PPUSH
36550: LD_INT 1
36552: PPUSH
36553: CALL_OW 259
36557: PUSH
36558: LD_REAL  1.15000000000000E+0000
36561: MUL
36562: MUL
36563: ST_TO_ADDR
// end ; unit_vehicle :
36564: GO 37392
36566: LD_INT 2
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36574
36572: GO 37380
36574: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36575: LD_VAR 0 6
36579: PPUSH
36580: CALL_OW 264
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: LD_INT 42
36590: PUSH
36591: LD_INT 24
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 25 , 5 , 3 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 25
36608: PUSH
36609: LD_INT 5
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 264
36629: PUSH
36630: LD_INT 4
36632: PUSH
36633: LD_INT 43
36635: PUSH
36636: LD_INT 25
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: IN
36644: IFFALSE 36665
// points := [ 40 , 15 , 5 ] ;
36646: LD_ADDR_VAR 0 9
36650: PUSH
36651: LD_INT 40
36653: PUSH
36654: LD_INT 15
36656: PUSH
36657: LD_INT 5
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36665: LD_VAR 0 6
36669: PPUSH
36670: CALL_OW 264
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: LD_INT 23
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: IN
36685: IFFALSE 36706
// points := [ 7 , 25 , 8 ] ;
36687: LD_ADDR_VAR 0 9
36691: PUSH
36692: LD_INT 7
36694: PUSH
36695: LD_INT 25
36697: PUSH
36698: LD_INT 8
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36706: LD_VAR 0 6
36710: PPUSH
36711: CALL_OW 264
36715: PUSH
36716: LD_INT 5
36718: PUSH
36719: LD_INT 27
36721: PUSH
36722: LD_INT 44
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: IN
36730: IFFALSE 36751
// points := [ 14 , 50 , 16 ] ;
36732: LD_ADDR_VAR 0 9
36736: PUSH
36737: LD_INT 14
36739: PUSH
36740: LD_INT 50
36742: PUSH
36743: LD_INT 16
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36751: LD_VAR 0 6
36755: PPUSH
36756: CALL_OW 264
36760: PUSH
36761: LD_INT 6
36763: PUSH
36764: LD_INT 46
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: IN
36771: IFFALSE 36792
// points := [ 32 , 120 , 70 ] ;
36773: LD_ADDR_VAR 0 9
36777: PUSH
36778: LD_INT 32
36780: PUSH
36781: LD_INT 120
36783: PUSH
36784: LD_INT 70
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36792: LD_VAR 0 6
36796: PPUSH
36797: CALL_OW 264
36801: PUSH
36802: LD_INT 7
36804: PUSH
36805: LD_INT 28
36807: PUSH
36808: LD_INT 45
36810: PUSH
36811: LD_INT 92
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: IN
36820: IFFALSE 36841
// points := [ 35 , 20 , 45 ] ;
36822: LD_ADDR_VAR 0 9
36826: PUSH
36827: LD_INT 35
36829: PUSH
36830: LD_INT 20
36832: PUSH
36833: LD_INT 45
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36841: LD_VAR 0 6
36845: PPUSH
36846: CALL_OW 264
36850: PUSH
36851: LD_INT 47
36853: PUSH
36854: EMPTY
36855: LIST
36856: IN
36857: IFFALSE 36878
// points := [ 67 , 45 , 75 ] ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_INT 67
36866: PUSH
36867: LD_INT 45
36869: PUSH
36870: LD_INT 75
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36878: LD_VAR 0 6
36882: PPUSH
36883: CALL_OW 264
36887: PUSH
36888: LD_INT 26
36890: PUSH
36891: EMPTY
36892: LIST
36893: IN
36894: IFFALSE 36915
// points := [ 120 , 30 , 80 ] ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_INT 120
36903: PUSH
36904: LD_INT 30
36906: PUSH
36907: LD_INT 80
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36915: LD_VAR 0 6
36919: PPUSH
36920: CALL_OW 264
36924: PUSH
36925: LD_INT 22
36927: PUSH
36928: EMPTY
36929: LIST
36930: IN
36931: IFFALSE 36952
// points := [ 40 , 1 , 1 ] ;
36933: LD_ADDR_VAR 0 9
36937: PUSH
36938: LD_INT 40
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36952: LD_VAR 0 6
36956: PPUSH
36957: CALL_OW 264
36961: PUSH
36962: LD_INT 29
36964: PUSH
36965: EMPTY
36966: LIST
36967: IN
36968: IFFALSE 36989
// points := [ 70 , 200 , 400 ] ;
36970: LD_ADDR_VAR 0 9
36974: PUSH
36975: LD_INT 70
36977: PUSH
36978: LD_INT 200
36980: PUSH
36981: LD_INT 400
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36989: LD_VAR 0 6
36993: PPUSH
36994: CALL_OW 264
36998: PUSH
36999: LD_INT 14
37001: PUSH
37002: LD_INT 53
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: IN
37009: IFFALSE 37030
// points := [ 40 , 10 , 20 ] ;
37011: LD_ADDR_VAR 0 9
37015: PUSH
37016: LD_INT 40
37018: PUSH
37019: LD_INT 10
37021: PUSH
37022: LD_INT 20
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37030: LD_VAR 0 6
37034: PPUSH
37035: CALL_OW 264
37039: PUSH
37040: LD_INT 9
37042: PUSH
37043: EMPTY
37044: LIST
37045: IN
37046: IFFALSE 37067
// points := [ 5 , 70 , 20 ] ;
37048: LD_ADDR_VAR 0 9
37052: PUSH
37053: LD_INT 5
37055: PUSH
37056: LD_INT 70
37058: PUSH
37059: LD_INT 20
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37067: LD_VAR 0 6
37071: PPUSH
37072: CALL_OW 264
37076: PUSH
37077: LD_INT 10
37079: PUSH
37080: EMPTY
37081: LIST
37082: IN
37083: IFFALSE 37104
// points := [ 35 , 110 , 70 ] ;
37085: LD_ADDR_VAR 0 9
37089: PUSH
37090: LD_INT 35
37092: PUSH
37093: LD_INT 110
37095: PUSH
37096: LD_INT 70
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37104: LD_VAR 0 6
37108: PPUSH
37109: CALL_OW 265
37113: PUSH
37114: LD_INT 25
37116: EQUAL
37117: IFFALSE 37138
// points := [ 80 , 65 , 100 ] ;
37119: LD_ADDR_VAR 0 9
37123: PUSH
37124: LD_INT 80
37126: PUSH
37127: LD_INT 65
37129: PUSH
37130: LD_INT 100
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37138: LD_VAR 0 6
37142: PPUSH
37143: CALL_OW 263
37147: PUSH
37148: LD_INT 1
37150: EQUAL
37151: IFFALSE 37186
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37153: LD_ADDR_VAR 0 10
37157: PUSH
37158: LD_VAR 0 10
37162: PUSH
37163: LD_VAR 0 6
37167: PPUSH
37168: CALL_OW 311
37172: PPUSH
37173: LD_INT 3
37175: PPUSH
37176: CALL_OW 259
37180: PUSH
37181: LD_INT 4
37183: MUL
37184: MUL
37185: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37186: LD_VAR 0 6
37190: PPUSH
37191: CALL_OW 263
37195: PUSH
37196: LD_INT 2
37198: EQUAL
37199: IFFALSE 37250
// begin j := IsControledBy ( i ) ;
37201: LD_ADDR_VAR 0 7
37205: PUSH
37206: LD_VAR 0 6
37210: PPUSH
37211: CALL_OW 312
37215: ST_TO_ADDR
// if j then
37216: LD_VAR 0 7
37220: IFFALSE 37250
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37222: LD_ADDR_VAR 0 10
37226: PUSH
37227: LD_VAR 0 10
37231: PUSH
37232: LD_VAR 0 7
37236: PPUSH
37237: LD_INT 3
37239: PPUSH
37240: CALL_OW 259
37244: PUSH
37245: LD_INT 3
37247: MUL
37248: MUL
37249: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37250: LD_VAR 0 6
37254: PPUSH
37255: CALL_OW 264
37259: PUSH
37260: LD_INT 5
37262: PUSH
37263: LD_INT 6
37265: PUSH
37266: LD_INT 46
37268: PUSH
37269: LD_INT 44
37271: PUSH
37272: LD_INT 47
37274: PUSH
37275: LD_INT 45
37277: PUSH
37278: LD_INT 28
37280: PUSH
37281: LD_INT 7
37283: PUSH
37284: LD_INT 27
37286: PUSH
37287: LD_INT 29
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: IN
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: LD_INT 52
37310: PPUSH
37311: CALL_OW 321
37315: PUSH
37316: LD_INT 2
37318: EQUAL
37319: AND
37320: IFFALSE 37337
// bpoints := bpoints * 1.2 ;
37322: LD_ADDR_VAR 0 10
37326: PUSH
37327: LD_VAR 0 10
37331: PUSH
37332: LD_REAL  1.20000000000000E+0000
37335: MUL
37336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37337: LD_VAR 0 6
37341: PPUSH
37342: CALL_OW 264
37346: PUSH
37347: LD_INT 6
37349: PUSH
37350: LD_INT 46
37352: PUSH
37353: LD_INT 47
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: IN
37361: IFFALSE 37378
// bpoints := bpoints * 1.2 ;
37363: LD_ADDR_VAR 0 10
37367: PUSH
37368: LD_VAR 0 10
37372: PUSH
37373: LD_REAL  1.20000000000000E+0000
37376: MUL
37377: ST_TO_ADDR
// end ; unit_building :
37378: GO 37392
37380: LD_INT 3
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37388
37386: GO 37391
37388: POP
// ; end ;
37389: GO 37392
37391: POP
// for j = 1 to 3 do
37392: LD_ADDR_VAR 0 7
37396: PUSH
37397: DOUBLE
37398: LD_INT 1
37400: DEC
37401: ST_TO_ADDR
37402: LD_INT 3
37404: PUSH
37405: FOR_TO
37406: IFFALSE 37459
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37408: LD_ADDR_VAR 0 5
37412: PUSH
37413: LD_VAR 0 5
37417: PPUSH
37418: LD_VAR 0 7
37422: PPUSH
37423: LD_VAR 0 5
37427: PUSH
37428: LD_VAR 0 7
37432: ARRAY
37433: PUSH
37434: LD_VAR 0 9
37438: PUSH
37439: LD_VAR 0 7
37443: ARRAY
37444: PUSH
37445: LD_VAR 0 10
37449: MUL
37450: PLUS
37451: PPUSH
37452: CALL_OW 1
37456: ST_TO_ADDR
37457: GO 37405
37459: POP
37460: POP
// end ;
37461: GO 35940
37463: POP
37464: POP
// result := Replace ( result , 4 , tmp ) ;
37465: LD_ADDR_VAR 0 5
37469: PUSH
37470: LD_VAR 0 5
37474: PPUSH
37475: LD_INT 4
37477: PPUSH
37478: LD_VAR 0 8
37482: PPUSH
37483: CALL_OW 1
37487: ST_TO_ADDR
// end ;
37488: LD_VAR 0 5
37492: RET
// export function DangerAtRange ( unit , range ) ; begin
37493: LD_INT 0
37495: PPUSH
// if not unit then
37496: LD_VAR 0 1
37500: NOT
37501: IFFALSE 37505
// exit ;
37503: GO 37550
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37505: LD_ADDR_VAR 0 3
37509: PUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 255
37519: PPUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 250
37529: PPUSH
37530: LD_VAR 0 1
37534: PPUSH
37535: CALL_OW 251
37539: PPUSH
37540: LD_VAR 0 2
37544: PPUSH
37545: CALL 35792 0 4
37549: ST_TO_ADDR
// end ;
37550: LD_VAR 0 3
37554: RET
// export function DangerInArea ( side , area ) ; begin
37555: LD_INT 0
37557: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_VAR 0 2
37567: PPUSH
37568: LD_INT 81
37570: PUSH
37571: LD_VAR 0 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PPUSH
37580: CALL_OW 70
37584: ST_TO_ADDR
// end ;
37585: LD_VAR 0 3
37589: RET
// export function IsExtension ( b ) ; begin
37590: LD_INT 0
37592: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37593: LD_ADDR_VAR 0 2
37597: PUSH
37598: LD_VAR 0 1
37602: PUSH
37603: LD_INT 23
37605: PUSH
37606: LD_INT 20
37608: PUSH
37609: LD_INT 22
37611: PUSH
37612: LD_INT 17
37614: PUSH
37615: LD_INT 24
37617: PUSH
37618: LD_INT 21
37620: PUSH
37621: LD_INT 19
37623: PUSH
37624: LD_INT 16
37626: PUSH
37627: LD_INT 25
37629: PUSH
37630: LD_INT 18
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: IN
37645: ST_TO_ADDR
// end ;
37646: LD_VAR 0 2
37650: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
37655: PPUSH
// result := [ ] ;
37656: LD_ADDR_VAR 0 4
37660: PUSH
37661: EMPTY
37662: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37663: LD_ADDR_VAR 0 5
37667: PUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: LD_INT 21
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PPUSH
37683: CALL_OW 70
37687: ST_TO_ADDR
// if not tmp then
37688: LD_VAR 0 5
37692: NOT
37693: IFFALSE 37697
// exit ;
37695: GO 37761
// if checkLink then
37697: LD_VAR 0 3
37701: IFFALSE 37751
// begin for i in tmp do
37703: LD_ADDR_VAR 0 6
37707: PUSH
37708: LD_VAR 0 5
37712: PUSH
37713: FOR_IN
37714: IFFALSE 37749
// if GetBase ( i ) <> base then
37716: LD_VAR 0 6
37720: PPUSH
37721: CALL_OW 274
37725: PUSH
37726: LD_VAR 0 1
37730: NONEQUAL
37731: IFFALSE 37747
// ComLinkToBase ( base , i ) ;
37733: LD_VAR 0 1
37737: PPUSH
37738: LD_VAR 0 6
37742: PPUSH
37743: CALL_OW 169
37747: GO 37713
37749: POP
37750: POP
// end ; result := tmp ;
37751: LD_ADDR_VAR 0 4
37755: PUSH
37756: LD_VAR 0 5
37760: ST_TO_ADDR
// end ;
37761: LD_VAR 0 4
37765: RET
// export function ComComplete ( units , b ) ; var i ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
// if not units then
37770: LD_VAR 0 1
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 37869
// for i in units do
37779: LD_ADDR_VAR 0 4
37783: PUSH
37784: LD_VAR 0 1
37788: PUSH
37789: FOR_IN
37790: IFFALSE 37867
// if BuildingStatus ( b ) = bs_build then
37792: LD_VAR 0 2
37796: PPUSH
37797: CALL_OW 461
37801: PUSH
37802: LD_INT 1
37804: EQUAL
37805: IFFALSE 37865
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37807: LD_VAR 0 4
37811: PPUSH
37812: LD_STRING h
37814: PUSH
37815: LD_VAR 0 2
37819: PPUSH
37820: CALL_OW 250
37824: PUSH
37825: LD_VAR 0 2
37829: PPUSH
37830: CALL_OW 251
37834: PUSH
37835: LD_VAR 0 2
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: PPUSH
37861: CALL_OW 446
37865: GO 37789
37867: POP
37868: POP
// end ;
37869: LD_VAR 0 3
37873: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37874: LD_INT 0
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37882: LD_VAR 0 1
37886: NOT
37887: PUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 263
37897: PUSH
37898: LD_INT 2
37900: NONEQUAL
37901: OR
37902: IFFALSE 37906
// exit ;
37904: GO 38222
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37906: LD_ADDR_VAR 0 6
37910: PUSH
37911: LD_INT 22
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 255
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 30
37933: PUSH
37934: LD_INT 36
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 34
37943: PUSH
37944: LD_INT 31
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PPUSH
37960: CALL_OW 69
37964: ST_TO_ADDR
// if not tmp then
37965: LD_VAR 0 6
37969: NOT
37970: IFFALSE 37974
// exit ;
37972: GO 38222
// result := [ ] ;
37974: LD_ADDR_VAR 0 2
37978: PUSH
37979: EMPTY
37980: ST_TO_ADDR
// for i in tmp do
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_VAR 0 6
37990: PUSH
37991: FOR_IN
37992: IFFALSE 38063
// begin t := UnitsInside ( i ) ;
37994: LD_ADDR_VAR 0 4
37998: PUSH
37999: LD_VAR 0 3
38003: PPUSH
38004: CALL_OW 313
38008: ST_TO_ADDR
// if t then
38009: LD_VAR 0 4
38013: IFFALSE 38061
// for j in t do
38015: LD_ADDR_VAR 0 7
38019: PUSH
38020: LD_VAR 0 4
38024: PUSH
38025: FOR_IN
38026: IFFALSE 38059
// result := Replace ( result , result + 1 , j ) ;
38028: LD_ADDR_VAR 0 2
38032: PUSH
38033: LD_VAR 0 2
38037: PPUSH
38038: LD_VAR 0 2
38042: PUSH
38043: LD_INT 1
38045: PLUS
38046: PPUSH
38047: LD_VAR 0 7
38051: PPUSH
38052: CALL_OW 1
38056: ST_TO_ADDR
38057: GO 38025
38059: POP
38060: POP
// end ;
38061: GO 37991
38063: POP
38064: POP
// if not result then
38065: LD_VAR 0 2
38069: NOT
38070: IFFALSE 38074
// exit ;
38072: GO 38222
// mech := result [ 1 ] ;
38074: LD_ADDR_VAR 0 5
38078: PUSH
38079: LD_VAR 0 2
38083: PUSH
38084: LD_INT 1
38086: ARRAY
38087: ST_TO_ADDR
// if result > 1 then
38088: LD_VAR 0 2
38092: PUSH
38093: LD_INT 1
38095: GREATER
38096: IFFALSE 38208
// begin for i = 2 to result do
38098: LD_ADDR_VAR 0 3
38102: PUSH
38103: DOUBLE
38104: LD_INT 2
38106: DEC
38107: ST_TO_ADDR
38108: LD_VAR 0 2
38112: PUSH
38113: FOR_TO
38114: IFFALSE 38206
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38116: LD_ADDR_VAR 0 4
38120: PUSH
38121: LD_VAR 0 2
38125: PUSH
38126: LD_VAR 0 3
38130: ARRAY
38131: PPUSH
38132: LD_INT 3
38134: PPUSH
38135: CALL_OW 259
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_VAR 0 3
38149: ARRAY
38150: PPUSH
38151: CALL_OW 432
38155: MINUS
38156: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38157: LD_VAR 0 4
38161: PUSH
38162: LD_VAR 0 5
38166: PPUSH
38167: LD_INT 3
38169: PPUSH
38170: CALL_OW 259
38174: PUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: CALL_OW 432
38184: MINUS
38185: GREATEREQUAL
38186: IFFALSE 38204
// mech := result [ i ] ;
38188: LD_ADDR_VAR 0 5
38192: PUSH
38193: LD_VAR 0 2
38197: PUSH
38198: LD_VAR 0 3
38202: ARRAY
38203: ST_TO_ADDR
// end ;
38204: GO 38113
38206: POP
38207: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38208: LD_VAR 0 1
38212: PPUSH
38213: LD_VAR 0 5
38217: PPUSH
38218: CALL_OW 135
// end ;
38222: LD_VAR 0 2
38226: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38227: LD_INT 0
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
// result := [ ] ;
38242: LD_ADDR_VAR 0 7
38246: PUSH
38247: EMPTY
38248: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 266
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: IN
38269: NOT
38270: IFFALSE 38274
// exit ;
38272: GO 39908
// if name then
38274: LD_VAR 0 3
38278: IFFALSE 38294
// SetBName ( base_dep , name ) ;
38280: LD_VAR 0 1
38284: PPUSH
38285: LD_VAR 0 3
38289: PPUSH
38290: CALL_OW 500
// base := GetBase ( base_dep ) ;
38294: LD_ADDR_VAR 0 15
38298: PUSH
38299: LD_VAR 0 1
38303: PPUSH
38304: CALL_OW 274
38308: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38309: LD_ADDR_VAR 0 16
38313: PUSH
38314: LD_VAR 0 1
38318: PPUSH
38319: CALL_OW 255
38323: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38324: LD_ADDR_VAR 0 17
38328: PUSH
38329: LD_VAR 0 1
38333: PPUSH
38334: CALL_OW 248
38338: ST_TO_ADDR
// if sources then
38339: LD_VAR 0 5
38343: IFFALSE 38390
// for i = 1 to 3 do
38345: LD_ADDR_VAR 0 8
38349: PUSH
38350: DOUBLE
38351: LD_INT 1
38353: DEC
38354: ST_TO_ADDR
38355: LD_INT 3
38357: PUSH
38358: FOR_TO
38359: IFFALSE 38388
// AddResourceType ( base , i , sources [ i ] ) ;
38361: LD_VAR 0 15
38365: PPUSH
38366: LD_VAR 0 8
38370: PPUSH
38371: LD_VAR 0 5
38375: PUSH
38376: LD_VAR 0 8
38380: ARRAY
38381: PPUSH
38382: CALL_OW 276
38386: GO 38358
38388: POP
38389: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38390: LD_ADDR_VAR 0 18
38394: PUSH
38395: LD_VAR 0 15
38399: PPUSH
38400: LD_VAR 0 2
38404: PPUSH
38405: LD_INT 1
38407: PPUSH
38408: CALL 37651 0 3
38412: ST_TO_ADDR
// InitHc ;
38413: CALL_OW 19
// InitUc ;
38417: CALL_OW 18
// uc_side := side ;
38421: LD_ADDR_OWVAR 20
38425: PUSH
38426: LD_VAR 0 16
38430: ST_TO_ADDR
// uc_nation := nation ;
38431: LD_ADDR_OWVAR 21
38435: PUSH
38436: LD_VAR 0 17
38440: ST_TO_ADDR
// if buildings then
38441: LD_VAR 0 18
38445: IFFALSE 39767
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38447: LD_ADDR_VAR 0 19
38451: PUSH
38452: LD_VAR 0 18
38456: PPUSH
38457: LD_INT 2
38459: PUSH
38460: LD_INT 30
38462: PUSH
38463: LD_INT 29
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 30
38472: PUSH
38473: LD_INT 30
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: PPUSH
38485: CALL_OW 72
38489: ST_TO_ADDR
// if tmp then
38490: LD_VAR 0 19
38494: IFFALSE 38542
// for i in tmp do
38496: LD_ADDR_VAR 0 8
38500: PUSH
38501: LD_VAR 0 19
38505: PUSH
38506: FOR_IN
38507: IFFALSE 38540
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38509: LD_VAR 0 8
38513: PPUSH
38514: CALL_OW 250
38518: PPUSH
38519: LD_VAR 0 8
38523: PPUSH
38524: CALL_OW 251
38528: PPUSH
38529: LD_VAR 0 16
38533: PPUSH
38534: CALL_OW 441
38538: GO 38506
38540: POP
38541: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38542: LD_VAR 0 18
38546: PPUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 30
38552: PUSH
38553: LD_INT 32
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 30
38562: PUSH
38563: LD_INT 33
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: PPUSH
38575: CALL_OW 72
38579: IFFALSE 38667
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38581: LD_ADDR_VAR 0 8
38585: PUSH
38586: LD_VAR 0 18
38590: PPUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 30
38596: PUSH
38597: LD_INT 32
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 30
38606: PUSH
38607: LD_INT 33
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: LIST
38618: PPUSH
38619: CALL_OW 72
38623: PUSH
38624: FOR_IN
38625: IFFALSE 38665
// begin if not GetBWeapon ( i ) then
38627: LD_VAR 0 8
38631: PPUSH
38632: CALL_OW 269
38636: NOT
38637: IFFALSE 38663
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38639: LD_VAR 0 8
38643: PPUSH
38644: LD_VAR 0 8
38648: PPUSH
38649: LD_VAR 0 2
38653: PPUSH
38654: CALL 39913 0 2
38658: PPUSH
38659: CALL_OW 431
// end ;
38663: GO 38624
38665: POP
38666: POP
// end ; for i = 1 to personel do
38667: LD_ADDR_VAR 0 8
38671: PUSH
38672: DOUBLE
38673: LD_INT 1
38675: DEC
38676: ST_TO_ADDR
38677: LD_VAR 0 6
38681: PUSH
38682: FOR_TO
38683: IFFALSE 39747
// begin if i > 4 then
38685: LD_VAR 0 8
38689: PUSH
38690: LD_INT 4
38692: GREATER
38693: IFFALSE 38697
// break ;
38695: GO 39747
// case i of 1 :
38697: LD_VAR 0 8
38701: PUSH
38702: LD_INT 1
38704: DOUBLE
38705: EQUAL
38706: IFTRUE 38710
38708: GO 38790
38710: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38711: LD_ADDR_VAR 0 12
38715: PUSH
38716: LD_VAR 0 18
38720: PPUSH
38721: LD_INT 22
38723: PUSH
38724: LD_VAR 0 16
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 58
38735: PUSH
38736: EMPTY
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: LD_INT 32
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 30
38754: PUSH
38755: LD_INT 4
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 30
38764: PUSH
38765: LD_INT 5
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: PPUSH
38783: CALL_OW 72
38787: ST_TO_ADDR
38788: GO 39012
38790: LD_INT 2
38792: DOUBLE
38793: EQUAL
38794: IFTRUE 38798
38796: GO 38860
38798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38799: LD_ADDR_VAR 0 12
38803: PUSH
38804: LD_VAR 0 18
38808: PPUSH
38809: LD_INT 22
38811: PUSH
38812: LD_VAR 0 16
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 30
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 30
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PPUSH
38853: CALL_OW 72
38857: ST_TO_ADDR
38858: GO 39012
38860: LD_INT 3
38862: DOUBLE
38863: EQUAL
38864: IFTRUE 38868
38866: GO 38930
38868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38869: LD_ADDR_VAR 0 12
38873: PUSH
38874: LD_VAR 0 18
38878: PPUSH
38879: LD_INT 22
38881: PUSH
38882: LD_VAR 0 16
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: LD_INT 30
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 30
38906: PUSH
38907: LD_INT 3
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PPUSH
38923: CALL_OW 72
38927: ST_TO_ADDR
38928: GO 39012
38930: LD_INT 4
38932: DOUBLE
38933: EQUAL
38934: IFTRUE 38938
38936: GO 39011
38938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38939: LD_ADDR_VAR 0 12
38943: PUSH
38944: LD_VAR 0 18
38948: PPUSH
38949: LD_INT 22
38951: PUSH
38952: LD_VAR 0 16
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: LD_INT 30
38966: PUSH
38967: LD_INT 6
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 30
38976: PUSH
38977: LD_INT 7
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 30
38986: PUSH
38987: LD_INT 8
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PPUSH
39004: CALL_OW 72
39008: ST_TO_ADDR
39009: GO 39012
39011: POP
// if i = 1 then
39012: LD_VAR 0 8
39016: PUSH
39017: LD_INT 1
39019: EQUAL
39020: IFFALSE 39131
// begin tmp := [ ] ;
39022: LD_ADDR_VAR 0 19
39026: PUSH
39027: EMPTY
39028: ST_TO_ADDR
// for j in f do
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_VAR 0 12
39038: PUSH
39039: FOR_IN
39040: IFFALSE 39113
// if GetBType ( j ) = b_bunker then
39042: LD_VAR 0 9
39046: PPUSH
39047: CALL_OW 266
39051: PUSH
39052: LD_INT 32
39054: EQUAL
39055: IFFALSE 39082
// tmp := Insert ( tmp , 1 , j ) else
39057: LD_ADDR_VAR 0 19
39061: PUSH
39062: LD_VAR 0 19
39066: PPUSH
39067: LD_INT 1
39069: PPUSH
39070: LD_VAR 0 9
39074: PPUSH
39075: CALL_OW 2
39079: ST_TO_ADDR
39080: GO 39111
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39082: LD_ADDR_VAR 0 19
39086: PUSH
39087: LD_VAR 0 19
39091: PPUSH
39092: LD_VAR 0 19
39096: PUSH
39097: LD_INT 1
39099: PLUS
39100: PPUSH
39101: LD_VAR 0 9
39105: PPUSH
39106: CALL_OW 2
39110: ST_TO_ADDR
39111: GO 39039
39113: POP
39114: POP
// if tmp then
39115: LD_VAR 0 19
39119: IFFALSE 39131
// f := tmp ;
39121: LD_ADDR_VAR 0 12
39125: PUSH
39126: LD_VAR 0 19
39130: ST_TO_ADDR
// end ; x := personel [ i ] ;
39131: LD_ADDR_VAR 0 13
39135: PUSH
39136: LD_VAR 0 6
39140: PUSH
39141: LD_VAR 0 8
39145: ARRAY
39146: ST_TO_ADDR
// if x = - 1 then
39147: LD_VAR 0 13
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: EQUAL
39156: IFFALSE 39365
// begin for j in f do
39158: LD_ADDR_VAR 0 9
39162: PUSH
39163: LD_VAR 0 12
39167: PUSH
39168: FOR_IN
39169: IFFALSE 39361
// repeat InitHc ;
39171: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39175: LD_VAR 0 9
39179: PPUSH
39180: CALL_OW 266
39184: PUSH
39185: LD_INT 5
39187: EQUAL
39188: IFFALSE 39258
// begin if UnitsInside ( j ) < 3 then
39190: LD_VAR 0 9
39194: PPUSH
39195: CALL_OW 313
39199: PUSH
39200: LD_INT 3
39202: LESS
39203: IFFALSE 39239
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39205: LD_INT 0
39207: PPUSH
39208: LD_INT 5
39210: PUSH
39211: LD_INT 8
39213: PUSH
39214: LD_INT 9
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: PUSH
39222: LD_VAR 0 17
39226: ARRAY
39227: PPUSH
39228: LD_VAR 0 4
39232: PPUSH
39233: CALL_OW 380
39237: GO 39256
// PrepareHuman ( false , i , skill ) ;
39239: LD_INT 0
39241: PPUSH
39242: LD_VAR 0 8
39246: PPUSH
39247: LD_VAR 0 4
39251: PPUSH
39252: CALL_OW 380
// end else
39256: GO 39275
// PrepareHuman ( false , i , skill ) ;
39258: LD_INT 0
39260: PPUSH
39261: LD_VAR 0 8
39265: PPUSH
39266: LD_VAR 0 4
39270: PPUSH
39271: CALL_OW 380
// un := CreateHuman ;
39275: LD_ADDR_VAR 0 14
39279: PUSH
39280: CALL_OW 44
39284: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39285: LD_ADDR_VAR 0 7
39289: PUSH
39290: LD_VAR 0 7
39294: PPUSH
39295: LD_INT 1
39297: PPUSH
39298: LD_VAR 0 14
39302: PPUSH
39303: CALL_OW 2
39307: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39308: LD_VAR 0 14
39312: PPUSH
39313: LD_VAR 0 9
39317: PPUSH
39318: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39322: LD_VAR 0 9
39326: PPUSH
39327: CALL_OW 313
39331: PUSH
39332: LD_INT 6
39334: EQUAL
39335: PUSH
39336: LD_VAR 0 9
39340: PPUSH
39341: CALL_OW 266
39345: PUSH
39346: LD_INT 32
39348: PUSH
39349: LD_INT 31
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: IN
39356: OR
39357: IFFALSE 39171
39359: GO 39168
39361: POP
39362: POP
// end else
39363: GO 39745
// for j = 1 to x do
39365: LD_ADDR_VAR 0 9
39369: PUSH
39370: DOUBLE
39371: LD_INT 1
39373: DEC
39374: ST_TO_ADDR
39375: LD_VAR 0 13
39379: PUSH
39380: FOR_TO
39381: IFFALSE 39743
// begin InitHc ;
39383: CALL_OW 19
// if not f then
39387: LD_VAR 0 12
39391: NOT
39392: IFFALSE 39481
// begin PrepareHuman ( false , i , skill ) ;
39394: LD_INT 0
39396: PPUSH
39397: LD_VAR 0 8
39401: PPUSH
39402: LD_VAR 0 4
39406: PPUSH
39407: CALL_OW 380
// un := CreateHuman ;
39411: LD_ADDR_VAR 0 14
39415: PUSH
39416: CALL_OW 44
39420: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39421: LD_ADDR_VAR 0 7
39425: PUSH
39426: LD_VAR 0 7
39430: PPUSH
39431: LD_INT 1
39433: PPUSH
39434: LD_VAR 0 14
39438: PPUSH
39439: CALL_OW 2
39443: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39444: LD_VAR 0 14
39448: PPUSH
39449: LD_VAR 0 1
39453: PPUSH
39454: CALL_OW 250
39458: PPUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 251
39468: PPUSH
39469: LD_INT 10
39471: PPUSH
39472: LD_INT 0
39474: PPUSH
39475: CALL_OW 50
// continue ;
39479: GO 39380
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39481: LD_VAR 0 12
39485: PUSH
39486: LD_INT 1
39488: ARRAY
39489: PPUSH
39490: CALL_OW 313
39494: PUSH
39495: LD_VAR 0 12
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: CALL_OW 266
39508: PUSH
39509: LD_INT 32
39511: PUSH
39512: LD_INT 31
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: IN
39519: AND
39520: PUSH
39521: LD_VAR 0 12
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PPUSH
39530: CALL_OW 313
39534: PUSH
39535: LD_INT 6
39537: EQUAL
39538: OR
39539: IFFALSE 39559
// f := Delete ( f , 1 ) ;
39541: LD_ADDR_VAR 0 12
39545: PUSH
39546: LD_VAR 0 12
39550: PPUSH
39551: LD_INT 1
39553: PPUSH
39554: CALL_OW 3
39558: ST_TO_ADDR
// if not f then
39559: LD_VAR 0 12
39563: NOT
39564: IFFALSE 39582
// begin x := x + 2 ;
39566: LD_ADDR_VAR 0 13
39570: PUSH
39571: LD_VAR 0 13
39575: PUSH
39576: LD_INT 2
39578: PLUS
39579: ST_TO_ADDR
// continue ;
39580: GO 39380
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39582: LD_VAR 0 12
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: PPUSH
39591: CALL_OW 266
39595: PUSH
39596: LD_INT 5
39598: EQUAL
39599: IFFALSE 39673
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39601: LD_VAR 0 12
39605: PUSH
39606: LD_INT 1
39608: ARRAY
39609: PPUSH
39610: CALL_OW 313
39614: PUSH
39615: LD_INT 3
39617: LESS
39618: IFFALSE 39654
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39620: LD_INT 0
39622: PPUSH
39623: LD_INT 5
39625: PUSH
39626: LD_INT 8
39628: PUSH
39629: LD_INT 9
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: PUSH
39637: LD_VAR 0 17
39641: ARRAY
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: CALL_OW 380
39652: GO 39671
// PrepareHuman ( false , i , skill ) ;
39654: LD_INT 0
39656: PPUSH
39657: LD_VAR 0 8
39661: PPUSH
39662: LD_VAR 0 4
39666: PPUSH
39667: CALL_OW 380
// end else
39671: GO 39690
// PrepareHuman ( false , i , skill ) ;
39673: LD_INT 0
39675: PPUSH
39676: LD_VAR 0 8
39680: PPUSH
39681: LD_VAR 0 4
39685: PPUSH
39686: CALL_OW 380
// un := CreateHuman ;
39690: LD_ADDR_VAR 0 14
39694: PUSH
39695: CALL_OW 44
39699: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39700: LD_ADDR_VAR 0 7
39704: PUSH
39705: LD_VAR 0 7
39709: PPUSH
39710: LD_INT 1
39712: PPUSH
39713: LD_VAR 0 14
39717: PPUSH
39718: CALL_OW 2
39722: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39723: LD_VAR 0 14
39727: PPUSH
39728: LD_VAR 0 12
39732: PUSH
39733: LD_INT 1
39735: ARRAY
39736: PPUSH
39737: CALL_OW 52
// end ;
39741: GO 39380
39743: POP
39744: POP
// end ;
39745: GO 38682
39747: POP
39748: POP
// result := result ^ buildings ;
39749: LD_ADDR_VAR 0 7
39753: PUSH
39754: LD_VAR 0 7
39758: PUSH
39759: LD_VAR 0 18
39763: ADD
39764: ST_TO_ADDR
// end else
39765: GO 39908
// begin for i = 1 to personel do
39767: LD_ADDR_VAR 0 8
39771: PUSH
39772: DOUBLE
39773: LD_INT 1
39775: DEC
39776: ST_TO_ADDR
39777: LD_VAR 0 6
39781: PUSH
39782: FOR_TO
39783: IFFALSE 39906
// begin if i > 4 then
39785: LD_VAR 0 8
39789: PUSH
39790: LD_INT 4
39792: GREATER
39793: IFFALSE 39797
// break ;
39795: GO 39906
// x := personel [ i ] ;
39797: LD_ADDR_VAR 0 13
39801: PUSH
39802: LD_VAR 0 6
39806: PUSH
39807: LD_VAR 0 8
39811: ARRAY
39812: ST_TO_ADDR
// if x = - 1 then
39813: LD_VAR 0 13
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: EQUAL
39822: IFFALSE 39826
// continue ;
39824: GO 39782
// PrepareHuman ( false , i , skill ) ;
39826: LD_INT 0
39828: PPUSH
39829: LD_VAR 0 8
39833: PPUSH
39834: LD_VAR 0 4
39838: PPUSH
39839: CALL_OW 380
// un := CreateHuman ;
39843: LD_ADDR_VAR 0 14
39847: PUSH
39848: CALL_OW 44
39852: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39853: LD_VAR 0 14
39857: PPUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 250
39867: PPUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: CALL_OW 251
39877: PPUSH
39878: LD_INT 10
39880: PPUSH
39881: LD_INT 0
39883: PPUSH
39884: CALL_OW 50
// result := result ^ un ;
39888: LD_ADDR_VAR 0 7
39892: PUSH
39893: LD_VAR 0 7
39897: PUSH
39898: LD_VAR 0 14
39902: ADD
39903: ST_TO_ADDR
// end ;
39904: GO 39782
39906: POP
39907: POP
// end ; end ;
39908: LD_VAR 0 7
39912: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39913: LD_INT 0
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
39930: PPUSH
// result := false ;
39931: LD_ADDR_VAR 0 3
39935: PUSH
39936: LD_INT 0
39938: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39939: LD_VAR 0 1
39943: NOT
39944: PUSH
39945: LD_VAR 0 1
39949: PPUSH
39950: CALL_OW 266
39954: PUSH
39955: LD_INT 32
39957: PUSH
39958: LD_INT 33
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: IN
39965: NOT
39966: OR
39967: IFFALSE 39971
// exit ;
39969: GO 41080
// nat := GetNation ( tower ) ;
39971: LD_ADDR_VAR 0 12
39975: PUSH
39976: LD_VAR 0 1
39980: PPUSH
39981: CALL_OW 248
39985: ST_TO_ADDR
// side := GetSide ( tower ) ;
39986: LD_ADDR_VAR 0 16
39990: PUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: CALL_OW 255
40000: ST_TO_ADDR
// x := GetX ( tower ) ;
40001: LD_ADDR_VAR 0 10
40005: PUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 250
40015: ST_TO_ADDR
// y := GetY ( tower ) ;
40016: LD_ADDR_VAR 0 11
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 251
40030: ST_TO_ADDR
// if not x or not y then
40031: LD_VAR 0 10
40035: NOT
40036: PUSH
40037: LD_VAR 0 11
40041: NOT
40042: OR
40043: IFFALSE 40047
// exit ;
40045: GO 41080
// weapon := 0 ;
40047: LD_ADDR_VAR 0 18
40051: PUSH
40052: LD_INT 0
40054: ST_TO_ADDR
// fac_list := [ ] ;
40055: LD_ADDR_VAR 0 17
40059: PUSH
40060: EMPTY
40061: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40062: LD_ADDR_VAR 0 6
40066: PUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL_OW 274
40076: PPUSH
40077: LD_VAR 0 2
40081: PPUSH
40082: LD_INT 0
40084: PPUSH
40085: CALL 37651 0 3
40089: PPUSH
40090: LD_INT 30
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PPUSH
40100: CALL_OW 72
40104: ST_TO_ADDR
// if not factories then
40105: LD_VAR 0 6
40109: NOT
40110: IFFALSE 40114
// exit ;
40112: GO 41080
// for i in factories do
40114: LD_ADDR_VAR 0 8
40118: PUSH
40119: LD_VAR 0 6
40123: PUSH
40124: FOR_IN
40125: IFFALSE 40150
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40127: LD_ADDR_VAR 0 17
40131: PUSH
40132: LD_VAR 0 17
40136: PUSH
40137: LD_VAR 0 8
40141: PPUSH
40142: CALL_OW 478
40146: UNION
40147: ST_TO_ADDR
40148: GO 40124
40150: POP
40151: POP
// if not fac_list then
40152: LD_VAR 0 17
40156: NOT
40157: IFFALSE 40161
// exit ;
40159: GO 41080
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40161: LD_ADDR_VAR 0 5
40165: PUSH
40166: LD_INT 4
40168: PUSH
40169: LD_INT 5
40171: PUSH
40172: LD_INT 9
40174: PUSH
40175: LD_INT 10
40177: PUSH
40178: LD_INT 6
40180: PUSH
40181: LD_INT 7
40183: PUSH
40184: LD_INT 11
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 27
40198: PUSH
40199: LD_INT 28
40201: PUSH
40202: LD_INT 26
40204: PUSH
40205: LD_INT 30
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 43
40216: PUSH
40217: LD_INT 44
40219: PUSH
40220: LD_INT 46
40222: PUSH
40223: LD_INT 45
40225: PUSH
40226: LD_INT 47
40228: PUSH
40229: LD_INT 49
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: PUSH
40245: LD_VAR 0 12
40249: ARRAY
40250: ST_TO_ADDR
// list := list isect fac_list ;
40251: LD_ADDR_VAR 0 5
40255: PUSH
40256: LD_VAR 0 5
40260: PUSH
40261: LD_VAR 0 17
40265: ISECT
40266: ST_TO_ADDR
// if not list then
40267: LD_VAR 0 5
40271: NOT
40272: IFFALSE 40276
// exit ;
40274: GO 41080
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40276: LD_VAR 0 12
40280: PUSH
40281: LD_INT 3
40283: EQUAL
40284: PUSH
40285: LD_INT 49
40287: PUSH
40288: LD_VAR 0 5
40292: IN
40293: AND
40294: PUSH
40295: LD_INT 31
40297: PPUSH
40298: LD_VAR 0 16
40302: PPUSH
40303: CALL_OW 321
40307: PUSH
40308: LD_INT 2
40310: EQUAL
40311: AND
40312: IFFALSE 40372
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40314: LD_INT 22
40316: PUSH
40317: LD_VAR 0 16
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 35
40328: PUSH
40329: LD_INT 49
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 91
40338: PUSH
40339: LD_VAR 0 1
40343: PUSH
40344: LD_INT 10
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: PPUSH
40357: CALL_OW 69
40361: NOT
40362: IFFALSE 40372
// weapon := ru_time_lapser ;
40364: LD_ADDR_VAR 0 18
40368: PUSH
40369: LD_INT 49
40371: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40372: LD_VAR 0 12
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: IN
40387: PUSH
40388: LD_INT 11
40390: PUSH
40391: LD_VAR 0 5
40395: IN
40396: PUSH
40397: LD_INT 30
40399: PUSH
40400: LD_VAR 0 5
40404: IN
40405: OR
40406: AND
40407: PUSH
40408: LD_INT 6
40410: PPUSH
40411: LD_VAR 0 16
40415: PPUSH
40416: CALL_OW 321
40420: PUSH
40421: LD_INT 2
40423: EQUAL
40424: AND
40425: IFFALSE 40590
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40427: LD_INT 22
40429: PUSH
40430: LD_VAR 0 16
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: LD_INT 35
40444: PUSH
40445: LD_INT 11
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 35
40454: PUSH
40455: LD_INT 30
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 91
40469: PUSH
40470: LD_VAR 0 1
40474: PUSH
40475: LD_INT 18
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: PPUSH
40488: CALL_OW 69
40492: NOT
40493: PUSH
40494: LD_INT 22
40496: PUSH
40497: LD_VAR 0 16
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 30
40511: PUSH
40512: LD_INT 32
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 30
40521: PUSH
40522: LD_INT 33
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 91
40536: PUSH
40537: LD_VAR 0 1
40541: PUSH
40542: LD_INT 12
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: PPUSH
40558: CALL_OW 69
40562: PUSH
40563: LD_INT 2
40565: GREATER
40566: AND
40567: IFFALSE 40590
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40569: LD_ADDR_VAR 0 18
40573: PUSH
40574: LD_INT 11
40576: PUSH
40577: LD_INT 30
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_VAR 0 12
40588: ARRAY
40589: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40590: LD_VAR 0 18
40594: NOT
40595: PUSH
40596: LD_INT 40
40598: PPUSH
40599: LD_VAR 0 16
40603: PPUSH
40604: CALL_OW 321
40608: PUSH
40609: LD_INT 2
40611: EQUAL
40612: AND
40613: PUSH
40614: LD_INT 7
40616: PUSH
40617: LD_VAR 0 5
40621: IN
40622: PUSH
40623: LD_INT 28
40625: PUSH
40626: LD_VAR 0 5
40630: IN
40631: OR
40632: PUSH
40633: LD_INT 45
40635: PUSH
40636: LD_VAR 0 5
40640: IN
40641: OR
40642: AND
40643: IFFALSE 40897
// begin hex := GetHexInfo ( x , y ) ;
40645: LD_ADDR_VAR 0 4
40649: PUSH
40650: LD_VAR 0 10
40654: PPUSH
40655: LD_VAR 0 11
40659: PPUSH
40660: CALL_OW 546
40664: ST_TO_ADDR
// if hex [ 1 ] then
40665: LD_VAR 0 4
40669: PUSH
40670: LD_INT 1
40672: ARRAY
40673: IFFALSE 40677
// exit ;
40675: GO 41080
// height := hex [ 2 ] ;
40677: LD_ADDR_VAR 0 15
40681: PUSH
40682: LD_VAR 0 4
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40691: LD_ADDR_VAR 0 14
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 5
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// for i in tmp do
40714: LD_ADDR_VAR 0 8
40718: PUSH
40719: LD_VAR 0 14
40723: PUSH
40724: FOR_IN
40725: IFFALSE 40895
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40727: LD_ADDR_VAR 0 9
40731: PUSH
40732: LD_VAR 0 10
40736: PPUSH
40737: LD_VAR 0 8
40741: PPUSH
40742: LD_INT 5
40744: PPUSH
40745: CALL_OW 272
40749: PUSH
40750: LD_VAR 0 11
40754: PPUSH
40755: LD_VAR 0 8
40759: PPUSH
40760: LD_INT 5
40762: PPUSH
40763: CALL_OW 273
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40772: LD_VAR 0 9
40776: PUSH
40777: LD_INT 1
40779: ARRAY
40780: PPUSH
40781: LD_VAR 0 9
40785: PUSH
40786: LD_INT 2
40788: ARRAY
40789: PPUSH
40790: CALL_OW 488
40794: IFFALSE 40893
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40796: LD_ADDR_VAR 0 4
40800: PUSH
40801: LD_VAR 0 9
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 9
40814: PUSH
40815: LD_INT 2
40817: ARRAY
40818: PPUSH
40819: CALL_OW 546
40823: ST_TO_ADDR
// if hex [ 1 ] then
40824: LD_VAR 0 4
40828: PUSH
40829: LD_INT 1
40831: ARRAY
40832: IFFALSE 40836
// continue ;
40834: GO 40724
// h := hex [ 2 ] ;
40836: LD_ADDR_VAR 0 13
40840: PUSH
40841: LD_VAR 0 4
40845: PUSH
40846: LD_INT 2
40848: ARRAY
40849: ST_TO_ADDR
// if h + 7 < height then
40850: LD_VAR 0 13
40854: PUSH
40855: LD_INT 7
40857: PLUS
40858: PUSH
40859: LD_VAR 0 15
40863: LESS
40864: IFFALSE 40893
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40866: LD_ADDR_VAR 0 18
40870: PUSH
40871: LD_INT 7
40873: PUSH
40874: LD_INT 28
40876: PUSH
40877: LD_INT 45
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: PUSH
40885: LD_VAR 0 12
40889: ARRAY
40890: ST_TO_ADDR
// break ;
40891: GO 40895
// end ; end ; end ;
40893: GO 40724
40895: POP
40896: POP
// end ; if not weapon then
40897: LD_VAR 0 18
40901: NOT
40902: IFFALSE 40962
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40904: LD_ADDR_VAR 0 5
40908: PUSH
40909: LD_VAR 0 5
40913: PUSH
40914: LD_INT 11
40916: PUSH
40917: LD_INT 30
40919: PUSH
40920: LD_INT 49
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: DIFF
40928: ST_TO_ADDR
// if not list then
40929: LD_VAR 0 5
40933: NOT
40934: IFFALSE 40938
// exit ;
40936: GO 41080
// weapon := list [ rand ( 1 , list ) ] ;
40938: LD_ADDR_VAR 0 18
40942: PUSH
40943: LD_VAR 0 5
40947: PUSH
40948: LD_INT 1
40950: PPUSH
40951: LD_VAR 0 5
40955: PPUSH
40956: CALL_OW 12
40960: ARRAY
40961: ST_TO_ADDR
// end ; if weapon then
40962: LD_VAR 0 18
40966: IFFALSE 41080
// begin tmp := CostOfWeapon ( weapon ) ;
40968: LD_ADDR_VAR 0 14
40972: PUSH
40973: LD_VAR 0 18
40977: PPUSH
40978: CALL_OW 451
40982: ST_TO_ADDR
// j := GetBase ( tower ) ;
40983: LD_ADDR_VAR 0 9
40987: PUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 274
40997: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40998: LD_VAR 0 9
41002: PPUSH
41003: LD_INT 1
41005: PPUSH
41006: CALL_OW 275
41010: PUSH
41011: LD_VAR 0 14
41015: PUSH
41016: LD_INT 1
41018: ARRAY
41019: GREATEREQUAL
41020: PUSH
41021: LD_VAR 0 9
41025: PPUSH
41026: LD_INT 2
41028: PPUSH
41029: CALL_OW 275
41033: PUSH
41034: LD_VAR 0 14
41038: PUSH
41039: LD_INT 2
41041: ARRAY
41042: GREATEREQUAL
41043: AND
41044: PUSH
41045: LD_VAR 0 9
41049: PPUSH
41050: LD_INT 3
41052: PPUSH
41053: CALL_OW 275
41057: PUSH
41058: LD_VAR 0 14
41062: PUSH
41063: LD_INT 3
41065: ARRAY
41066: GREATEREQUAL
41067: AND
41068: IFFALSE 41080
// result := weapon ;
41070: LD_ADDR_VAR 0 3
41074: PUSH
41075: LD_VAR 0 18
41079: ST_TO_ADDR
// end ; end ;
41080: LD_VAR 0 3
41084: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
// result := true ;
41089: LD_ADDR_VAR 0 3
41093: PUSH
41094: LD_INT 1
41096: ST_TO_ADDR
// if array1 = array2 then
41097: LD_VAR 0 1
41101: PUSH
41102: LD_VAR 0 2
41106: EQUAL
41107: IFFALSE 41167
// begin for i = 1 to array1 do
41109: LD_ADDR_VAR 0 4
41113: PUSH
41114: DOUBLE
41115: LD_INT 1
41117: DEC
41118: ST_TO_ADDR
41119: LD_VAR 0 1
41123: PUSH
41124: FOR_TO
41125: IFFALSE 41163
// if array1 [ i ] <> array2 [ i ] then
41127: LD_VAR 0 1
41131: PUSH
41132: LD_VAR 0 4
41136: ARRAY
41137: PUSH
41138: LD_VAR 0 2
41142: PUSH
41143: LD_VAR 0 4
41147: ARRAY
41148: NONEQUAL
41149: IFFALSE 41161
// begin result := false ;
41151: LD_ADDR_VAR 0 3
41155: PUSH
41156: LD_INT 0
41158: ST_TO_ADDR
// break ;
41159: GO 41163
// end ;
41161: GO 41124
41163: POP
41164: POP
// end else
41165: GO 41175
// result := false ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 0
41174: ST_TO_ADDR
// end ;
41175: LD_VAR 0 3
41179: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41180: LD_INT 0
41182: PPUSH
41183: PPUSH
// if not array1 or not array2 then
41184: LD_VAR 0 1
41188: NOT
41189: PUSH
41190: LD_VAR 0 2
41194: NOT
41195: OR
41196: IFFALSE 41200
// exit ;
41198: GO 41264
// result := true ;
41200: LD_ADDR_VAR 0 3
41204: PUSH
41205: LD_INT 1
41207: ST_TO_ADDR
// for i = 1 to array1 do
41208: LD_ADDR_VAR 0 4
41212: PUSH
41213: DOUBLE
41214: LD_INT 1
41216: DEC
41217: ST_TO_ADDR
41218: LD_VAR 0 1
41222: PUSH
41223: FOR_TO
41224: IFFALSE 41262
// if array1 [ i ] <> array2 [ i ] then
41226: LD_VAR 0 1
41230: PUSH
41231: LD_VAR 0 4
41235: ARRAY
41236: PUSH
41237: LD_VAR 0 2
41241: PUSH
41242: LD_VAR 0 4
41246: ARRAY
41247: NONEQUAL
41248: IFFALSE 41260
// begin result := false ;
41250: LD_ADDR_VAR 0 3
41254: PUSH
41255: LD_INT 0
41257: ST_TO_ADDR
// break ;
41258: GO 41262
// end ;
41260: GO 41223
41262: POP
41263: POP
// end ;
41264: LD_VAR 0 3
41268: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41269: LD_INT 0
41271: PPUSH
41272: PPUSH
41273: PPUSH
// pom := GetBase ( fac ) ;
41274: LD_ADDR_VAR 0 5
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 274
41288: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41289: LD_ADDR_VAR 0 4
41293: PUSH
41294: LD_VAR 0 2
41298: PUSH
41299: LD_INT 1
41301: ARRAY
41302: PPUSH
41303: LD_VAR 0 2
41307: PUSH
41308: LD_INT 2
41310: ARRAY
41311: PPUSH
41312: LD_VAR 0 2
41316: PUSH
41317: LD_INT 3
41319: ARRAY
41320: PPUSH
41321: LD_VAR 0 2
41325: PUSH
41326: LD_INT 4
41328: ARRAY
41329: PPUSH
41330: CALL_OW 449
41334: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41335: LD_ADDR_VAR 0 3
41339: PUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: LD_INT 1
41347: PPUSH
41348: CALL_OW 275
41352: PUSH
41353: LD_VAR 0 4
41357: PUSH
41358: LD_INT 1
41360: ARRAY
41361: GREATEREQUAL
41362: PUSH
41363: LD_VAR 0 5
41367: PPUSH
41368: LD_INT 2
41370: PPUSH
41371: CALL_OW 275
41375: PUSH
41376: LD_VAR 0 4
41380: PUSH
41381: LD_INT 2
41383: ARRAY
41384: GREATEREQUAL
41385: AND
41386: PUSH
41387: LD_VAR 0 5
41391: PPUSH
41392: LD_INT 3
41394: PPUSH
41395: CALL_OW 275
41399: PUSH
41400: LD_VAR 0 4
41404: PUSH
41405: LD_INT 3
41407: ARRAY
41408: GREATEREQUAL
41409: AND
41410: ST_TO_ADDR
// end ;
41411: LD_VAR 0 3
41415: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41416: LD_INT 0
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
// pom := GetBase ( building ) ;
41422: LD_ADDR_VAR 0 3
41426: PUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 274
41436: ST_TO_ADDR
// if not pom then
41437: LD_VAR 0 3
41441: NOT
41442: IFFALSE 41446
// exit ;
41444: GO 41616
// btype := GetBType ( building ) ;
41446: LD_ADDR_VAR 0 5
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 266
41460: ST_TO_ADDR
// if btype = b_armoury then
41461: LD_VAR 0 5
41465: PUSH
41466: LD_INT 4
41468: EQUAL
41469: IFFALSE 41479
// btype := b_barracks ;
41471: LD_ADDR_VAR 0 5
41475: PUSH
41476: LD_INT 5
41478: ST_TO_ADDR
// if btype = b_depot then
41479: LD_VAR 0 5
41483: PUSH
41484: LD_INT 0
41486: EQUAL
41487: IFFALSE 41497
// btype := b_warehouse ;
41489: LD_ADDR_VAR 0 5
41493: PUSH
41494: LD_INT 1
41496: ST_TO_ADDR
// if btype = b_workshop then
41497: LD_VAR 0 5
41501: PUSH
41502: LD_INT 2
41504: EQUAL
41505: IFFALSE 41515
// btype := b_factory ;
41507: LD_ADDR_VAR 0 5
41511: PUSH
41512: LD_INT 3
41514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41515: LD_ADDR_VAR 0 4
41519: PUSH
41520: LD_VAR 0 5
41524: PPUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 248
41534: PPUSH
41535: CALL_OW 450
41539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41540: LD_ADDR_VAR 0 2
41544: PUSH
41545: LD_VAR 0 3
41549: PPUSH
41550: LD_INT 1
41552: PPUSH
41553: CALL_OW 275
41557: PUSH
41558: LD_VAR 0 4
41562: PUSH
41563: LD_INT 1
41565: ARRAY
41566: GREATEREQUAL
41567: PUSH
41568: LD_VAR 0 3
41572: PPUSH
41573: LD_INT 2
41575: PPUSH
41576: CALL_OW 275
41580: PUSH
41581: LD_VAR 0 4
41585: PUSH
41586: LD_INT 2
41588: ARRAY
41589: GREATEREQUAL
41590: AND
41591: PUSH
41592: LD_VAR 0 3
41596: PPUSH
41597: LD_INT 3
41599: PPUSH
41600: CALL_OW 275
41604: PUSH
41605: LD_VAR 0 4
41609: PUSH
41610: LD_INT 3
41612: ARRAY
41613: GREATEREQUAL
41614: AND
41615: ST_TO_ADDR
// end ;
41616: LD_VAR 0 2
41620: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41621: LD_INT 0
41623: PPUSH
41624: PPUSH
41625: PPUSH
// pom := GetBase ( building ) ;
41626: LD_ADDR_VAR 0 4
41630: PUSH
41631: LD_VAR 0 1
41635: PPUSH
41636: CALL_OW 274
41640: ST_TO_ADDR
// if not pom then
41641: LD_VAR 0 4
41645: NOT
41646: IFFALSE 41650
// exit ;
41648: GO 41751
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41650: LD_ADDR_VAR 0 5
41654: PUSH
41655: LD_VAR 0 2
41659: PPUSH
41660: LD_VAR 0 1
41664: PPUSH
41665: CALL_OW 248
41669: PPUSH
41670: CALL_OW 450
41674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41675: LD_ADDR_VAR 0 3
41679: PUSH
41680: LD_VAR 0 4
41684: PPUSH
41685: LD_INT 1
41687: PPUSH
41688: CALL_OW 275
41692: PUSH
41693: LD_VAR 0 5
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: GREATEREQUAL
41702: PUSH
41703: LD_VAR 0 4
41707: PPUSH
41708: LD_INT 2
41710: PPUSH
41711: CALL_OW 275
41715: PUSH
41716: LD_VAR 0 5
41720: PUSH
41721: LD_INT 2
41723: ARRAY
41724: GREATEREQUAL
41725: AND
41726: PUSH
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_INT 3
41734: PPUSH
41735: CALL_OW 275
41739: PUSH
41740: LD_VAR 0 5
41744: PUSH
41745: LD_INT 3
41747: ARRAY
41748: GREATEREQUAL
41749: AND
41750: ST_TO_ADDR
// end ;
41751: LD_VAR 0 3
41755: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41756: LD_INT 0
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
41765: PPUSH
41766: PPUSH
41767: PPUSH
41768: PPUSH
// result := false ;
41769: LD_ADDR_VAR 0 8
41773: PUSH
41774: LD_INT 0
41776: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41777: LD_VAR 0 5
41781: NOT
41782: PUSH
41783: LD_VAR 0 1
41787: NOT
41788: OR
41789: PUSH
41790: LD_VAR 0 2
41794: NOT
41795: OR
41796: PUSH
41797: LD_VAR 0 3
41801: NOT
41802: OR
41803: IFFALSE 41807
// exit ;
41805: GO 42621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41807: LD_ADDR_VAR 0 14
41811: PUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: LD_VAR 0 2
41821: PPUSH
41822: LD_VAR 0 3
41826: PPUSH
41827: LD_VAR 0 4
41831: PPUSH
41832: LD_VAR 0 5
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PPUSH
41841: CALL_OW 248
41845: PPUSH
41846: LD_INT 0
41848: PPUSH
41849: CALL 43874 0 6
41853: ST_TO_ADDR
// if not hexes then
41854: LD_VAR 0 14
41858: NOT
41859: IFFALSE 41863
// exit ;
41861: GO 42621
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41863: LD_ADDR_VAR 0 17
41867: PUSH
41868: LD_VAR 0 5
41872: PPUSH
41873: LD_INT 22
41875: PUSH
41876: LD_VAR 0 13
41880: PPUSH
41881: CALL_OW 255
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: LD_INT 30
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 30
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PPUSH
41922: CALL_OW 72
41926: ST_TO_ADDR
// for i = 1 to hexes do
41927: LD_ADDR_VAR 0 9
41931: PUSH
41932: DOUBLE
41933: LD_INT 1
41935: DEC
41936: ST_TO_ADDR
41937: LD_VAR 0 14
41941: PUSH
41942: FOR_TO
41943: IFFALSE 42619
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41945: LD_ADDR_VAR 0 13
41949: PUSH
41950: LD_VAR 0 14
41954: PUSH
41955: LD_VAR 0 9
41959: ARRAY
41960: PUSH
41961: LD_INT 1
41963: ARRAY
41964: PPUSH
41965: LD_VAR 0 14
41969: PUSH
41970: LD_VAR 0 9
41974: ARRAY
41975: PUSH
41976: LD_INT 2
41978: ARRAY
41979: PPUSH
41980: CALL_OW 428
41984: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41985: LD_VAR 0 14
41989: PUSH
41990: LD_VAR 0 9
41994: ARRAY
41995: PUSH
41996: LD_INT 1
41998: ARRAY
41999: PPUSH
42000: LD_VAR 0 14
42004: PUSH
42005: LD_VAR 0 9
42009: ARRAY
42010: PUSH
42011: LD_INT 2
42013: ARRAY
42014: PPUSH
42015: CALL_OW 351
42019: PUSH
42020: LD_VAR 0 14
42024: PUSH
42025: LD_VAR 0 9
42029: ARRAY
42030: PUSH
42031: LD_INT 1
42033: ARRAY
42034: PPUSH
42035: LD_VAR 0 14
42039: PUSH
42040: LD_VAR 0 9
42044: ARRAY
42045: PUSH
42046: LD_INT 2
42048: ARRAY
42049: PPUSH
42050: CALL_OW 488
42054: NOT
42055: OR
42056: PUSH
42057: LD_VAR 0 13
42061: PPUSH
42062: CALL_OW 247
42066: PUSH
42067: LD_INT 3
42069: EQUAL
42070: OR
42071: IFFALSE 42077
// exit ;
42073: POP
42074: POP
42075: GO 42621
// if not tmp then
42077: LD_VAR 0 13
42081: NOT
42082: IFFALSE 42086
// continue ;
42084: GO 41942
// result := true ;
42086: LD_ADDR_VAR 0 8
42090: PUSH
42091: LD_INT 1
42093: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42094: LD_VAR 0 6
42098: PUSH
42099: LD_VAR 0 13
42103: PPUSH
42104: CALL_OW 247
42108: PUSH
42109: LD_INT 2
42111: EQUAL
42112: AND
42113: PUSH
42114: LD_VAR 0 13
42118: PPUSH
42119: CALL_OW 263
42123: PUSH
42124: LD_INT 1
42126: EQUAL
42127: AND
42128: IFFALSE 42292
// begin if IsDrivenBy ( tmp ) then
42130: LD_VAR 0 13
42134: PPUSH
42135: CALL_OW 311
42139: IFFALSE 42143
// continue ;
42141: GO 41942
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42143: LD_VAR 0 6
42147: PPUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 60
42153: PUSH
42154: EMPTY
42155: LIST
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 3
42163: PUSH
42164: LD_INT 55
42166: PUSH
42167: EMPTY
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PPUSH
42178: CALL_OW 72
42182: IFFALSE 42290
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42184: LD_ADDR_VAR 0 18
42188: PUSH
42189: LD_VAR 0 6
42193: PPUSH
42194: LD_INT 3
42196: PUSH
42197: LD_INT 60
42199: PUSH
42200: EMPTY
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: LD_INT 55
42212: PUSH
42213: EMPTY
42214: LIST
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PPUSH
42224: CALL_OW 72
42228: PUSH
42229: LD_INT 1
42231: ARRAY
42232: ST_TO_ADDR
// if IsInUnit ( driver ) then
42233: LD_VAR 0 18
42237: PPUSH
42238: CALL_OW 310
42242: IFFALSE 42253
// ComExit ( driver ) ;
42244: LD_VAR 0 18
42248: PPUSH
42249: CALL 67666 0 1
// AddComEnterUnit ( driver , tmp ) ;
42253: LD_VAR 0 18
42257: PPUSH
42258: LD_VAR 0 13
42262: PPUSH
42263: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42267: LD_VAR 0 18
42271: PPUSH
42272: LD_VAR 0 7
42276: PPUSH
42277: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42281: LD_VAR 0 18
42285: PPUSH
42286: CALL_OW 181
// end ; continue ;
42290: GO 41942
// end ; if not cleaners or not tmp in cleaners then
42292: LD_VAR 0 6
42296: NOT
42297: PUSH
42298: LD_VAR 0 13
42302: PUSH
42303: LD_VAR 0 6
42307: IN
42308: NOT
42309: OR
42310: IFFALSE 42617
// begin if dep then
42312: LD_VAR 0 17
42316: IFFALSE 42452
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42318: LD_ADDR_VAR 0 16
42322: PUSH
42323: LD_VAR 0 17
42327: PUSH
42328: LD_INT 1
42330: ARRAY
42331: PPUSH
42332: CALL_OW 250
42336: PPUSH
42337: LD_VAR 0 17
42341: PUSH
42342: LD_INT 1
42344: ARRAY
42345: PPUSH
42346: CALL_OW 254
42350: PPUSH
42351: LD_INT 5
42353: PPUSH
42354: CALL_OW 272
42358: PUSH
42359: LD_VAR 0 17
42363: PUSH
42364: LD_INT 1
42366: ARRAY
42367: PPUSH
42368: CALL_OW 251
42372: PPUSH
42373: LD_VAR 0 17
42377: PUSH
42378: LD_INT 1
42380: ARRAY
42381: PPUSH
42382: CALL_OW 254
42386: PPUSH
42387: LD_INT 5
42389: PPUSH
42390: CALL_OW 273
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42399: LD_VAR 0 16
42403: PUSH
42404: LD_INT 1
42406: ARRAY
42407: PPUSH
42408: LD_VAR 0 16
42412: PUSH
42413: LD_INT 2
42415: ARRAY
42416: PPUSH
42417: CALL_OW 488
42421: IFFALSE 42452
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42423: LD_VAR 0 13
42427: PPUSH
42428: LD_VAR 0 16
42432: PUSH
42433: LD_INT 1
42435: ARRAY
42436: PPUSH
42437: LD_VAR 0 16
42441: PUSH
42442: LD_INT 2
42444: ARRAY
42445: PPUSH
42446: CALL_OW 111
// continue ;
42450: GO 41942
// end ; end ; r := GetDir ( tmp ) ;
42452: LD_ADDR_VAR 0 15
42456: PUSH
42457: LD_VAR 0 13
42461: PPUSH
42462: CALL_OW 254
42466: ST_TO_ADDR
// if r = 5 then
42467: LD_VAR 0 15
42471: PUSH
42472: LD_INT 5
42474: EQUAL
42475: IFFALSE 42485
// r := 0 ;
42477: LD_ADDR_VAR 0 15
42481: PUSH
42482: LD_INT 0
42484: ST_TO_ADDR
// for j = r to 5 do
42485: LD_ADDR_VAR 0 10
42489: PUSH
42490: DOUBLE
42491: LD_VAR 0 15
42495: DEC
42496: ST_TO_ADDR
42497: LD_INT 5
42499: PUSH
42500: FOR_TO
42501: IFFALSE 42615
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42503: LD_ADDR_VAR 0 11
42507: PUSH
42508: LD_VAR 0 13
42512: PPUSH
42513: CALL_OW 250
42517: PPUSH
42518: LD_VAR 0 10
42522: PPUSH
42523: LD_INT 2
42525: PPUSH
42526: CALL_OW 272
42530: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42531: LD_ADDR_VAR 0 12
42535: PUSH
42536: LD_VAR 0 13
42540: PPUSH
42541: CALL_OW 251
42545: PPUSH
42546: LD_VAR 0 10
42550: PPUSH
42551: LD_INT 2
42553: PPUSH
42554: CALL_OW 273
42558: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42559: LD_VAR 0 11
42563: PPUSH
42564: LD_VAR 0 12
42568: PPUSH
42569: CALL_OW 488
42573: PUSH
42574: LD_VAR 0 11
42578: PPUSH
42579: LD_VAR 0 12
42583: PPUSH
42584: CALL_OW 428
42588: NOT
42589: AND
42590: IFFALSE 42613
// begin ComMoveXY ( tmp , _x , _y ) ;
42592: LD_VAR 0 13
42596: PPUSH
42597: LD_VAR 0 11
42601: PPUSH
42602: LD_VAR 0 12
42606: PPUSH
42607: CALL_OW 111
// break ;
42611: GO 42615
// end ; end ;
42613: GO 42500
42615: POP
42616: POP
// end ; end ;
42617: GO 41942
42619: POP
42620: POP
// end ;
42621: LD_VAR 0 8
42625: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42626: LD_INT 0
42628: PPUSH
// result := true ;
42629: LD_ADDR_VAR 0 3
42633: PUSH
42634: LD_INT 1
42636: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42637: LD_VAR 0 2
42641: PUSH
42642: LD_INT 24
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42656
42648: LD_INT 33
42650: DOUBLE
42651: EQUAL
42652: IFTRUE 42656
42654: GO 42681
42656: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_INT 32
42664: PPUSH
42665: LD_VAR 0 1
42669: PPUSH
42670: CALL_OW 321
42674: PUSH
42675: LD_INT 2
42677: EQUAL
42678: ST_TO_ADDR
42679: GO 42997
42681: LD_INT 20
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42689
42687: GO 42714
42689: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_INT 6
42697: PPUSH
42698: LD_VAR 0 1
42702: PPUSH
42703: CALL_OW 321
42707: PUSH
42708: LD_INT 2
42710: EQUAL
42711: ST_TO_ADDR
42712: GO 42997
42714: LD_INT 22
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42728
42720: LD_INT 36
42722: DOUBLE
42723: EQUAL
42724: IFTRUE 42728
42726: GO 42753
42728: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42729: LD_ADDR_VAR 0 3
42733: PUSH
42734: LD_INT 15
42736: PPUSH
42737: LD_VAR 0 1
42741: PPUSH
42742: CALL_OW 321
42746: PUSH
42747: LD_INT 2
42749: EQUAL
42750: ST_TO_ADDR
42751: GO 42997
42753: LD_INT 30
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42761
42759: GO 42786
42761: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 20
42769: PPUSH
42770: LD_VAR 0 1
42774: PPUSH
42775: CALL_OW 321
42779: PUSH
42780: LD_INT 2
42782: EQUAL
42783: ST_TO_ADDR
42784: GO 42997
42786: LD_INT 28
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42800
42792: LD_INT 21
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42825
42800: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42801: LD_ADDR_VAR 0 3
42805: PUSH
42806: LD_INT 21
42808: PPUSH
42809: LD_VAR 0 1
42813: PPUSH
42814: CALL_OW 321
42818: PUSH
42819: LD_INT 2
42821: EQUAL
42822: ST_TO_ADDR
42823: GO 42997
42825: LD_INT 16
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42858
42833: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42834: LD_ADDR_VAR 0 3
42838: PUSH
42839: LD_INT 84
42841: PPUSH
42842: LD_VAR 0 1
42846: PPUSH
42847: CALL_OW 321
42851: PUSH
42852: LD_INT 2
42854: EQUAL
42855: ST_TO_ADDR
42856: GO 42997
42858: LD_INT 19
42860: DOUBLE
42861: EQUAL
42862: IFTRUE 42872
42864: LD_INT 23
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 42897
42872: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42873: LD_ADDR_VAR 0 3
42877: PUSH
42878: LD_INT 83
42880: PPUSH
42881: LD_VAR 0 1
42885: PPUSH
42886: CALL_OW 321
42890: PUSH
42891: LD_INT 2
42893: EQUAL
42894: ST_TO_ADDR
42895: GO 42997
42897: LD_INT 17
42899: DOUBLE
42900: EQUAL
42901: IFTRUE 42905
42903: GO 42930
42905: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_INT 39
42913: PPUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: CALL_OW 321
42923: PUSH
42924: LD_INT 2
42926: EQUAL
42927: ST_TO_ADDR
42928: GO 42997
42930: LD_INT 18
42932: DOUBLE
42933: EQUAL
42934: IFTRUE 42938
42936: GO 42963
42938: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_INT 40
42946: PPUSH
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 321
42956: PUSH
42957: LD_INT 2
42959: EQUAL
42960: ST_TO_ADDR
42961: GO 42997
42963: LD_INT 27
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 42996
42971: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_INT 35
42979: PPUSH
42980: LD_VAR 0 1
42984: PPUSH
42985: CALL_OW 321
42989: PUSH
42990: LD_INT 2
42992: EQUAL
42993: ST_TO_ADDR
42994: GO 42997
42996: POP
// end ;
42997: LD_VAR 0 3
43001: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43002: LD_INT 0
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
// result := false ;
43015: LD_ADDR_VAR 0 6
43019: PUSH
43020: LD_INT 0
43022: ST_TO_ADDR
// if btype = b_depot then
43023: LD_VAR 0 2
43027: PUSH
43028: LD_INT 0
43030: EQUAL
43031: IFFALSE 43043
// begin result := true ;
43033: LD_ADDR_VAR 0 6
43037: PUSH
43038: LD_INT 1
43040: ST_TO_ADDR
// exit ;
43041: GO 43869
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43043: LD_VAR 0 1
43047: NOT
43048: PUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 266
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: IN
43069: NOT
43070: OR
43071: PUSH
43072: LD_VAR 0 2
43076: NOT
43077: OR
43078: PUSH
43079: LD_VAR 0 5
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: LD_INT 4
43098: PUSH
43099: LD_INT 5
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: IN
43110: NOT
43111: OR
43112: PUSH
43113: LD_VAR 0 3
43117: PPUSH
43118: LD_VAR 0 4
43122: PPUSH
43123: CALL_OW 488
43127: NOT
43128: OR
43129: IFFALSE 43133
// exit ;
43131: GO 43869
// side := GetSide ( depot ) ;
43133: LD_ADDR_VAR 0 9
43137: PUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 255
43147: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43148: LD_VAR 0 9
43152: PPUSH
43153: LD_VAR 0 2
43157: PPUSH
43158: CALL 42626 0 2
43162: NOT
43163: IFFALSE 43167
// exit ;
43165: GO 43869
// pom := GetBase ( depot ) ;
43167: LD_ADDR_VAR 0 10
43171: PUSH
43172: LD_VAR 0 1
43176: PPUSH
43177: CALL_OW 274
43181: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43182: LD_ADDR_VAR 0 11
43186: PUSH
43187: LD_VAR 0 2
43191: PPUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 248
43201: PPUSH
43202: CALL_OW 450
43206: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43207: LD_VAR 0 10
43211: PPUSH
43212: LD_INT 1
43214: PPUSH
43215: CALL_OW 275
43219: PUSH
43220: LD_VAR 0 11
43224: PUSH
43225: LD_INT 1
43227: ARRAY
43228: GREATEREQUAL
43229: PUSH
43230: LD_VAR 0 10
43234: PPUSH
43235: LD_INT 2
43237: PPUSH
43238: CALL_OW 275
43242: PUSH
43243: LD_VAR 0 11
43247: PUSH
43248: LD_INT 2
43250: ARRAY
43251: GREATEREQUAL
43252: AND
43253: PUSH
43254: LD_VAR 0 10
43258: PPUSH
43259: LD_INT 3
43261: PPUSH
43262: CALL_OW 275
43266: PUSH
43267: LD_VAR 0 11
43271: PUSH
43272: LD_INT 3
43274: ARRAY
43275: GREATEREQUAL
43276: AND
43277: NOT
43278: IFFALSE 43282
// exit ;
43280: GO 43869
// if GetBType ( depot ) = b_depot then
43282: LD_VAR 0 1
43286: PPUSH
43287: CALL_OW 266
43291: PUSH
43292: LD_INT 0
43294: EQUAL
43295: IFFALSE 43307
// dist := 28 else
43297: LD_ADDR_VAR 0 14
43301: PUSH
43302: LD_INT 28
43304: ST_TO_ADDR
43305: GO 43315
// dist := 36 ;
43307: LD_ADDR_VAR 0 14
43311: PUSH
43312: LD_INT 36
43314: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43315: LD_VAR 0 1
43319: PPUSH
43320: LD_VAR 0 3
43324: PPUSH
43325: LD_VAR 0 4
43329: PPUSH
43330: CALL_OW 297
43334: PUSH
43335: LD_VAR 0 14
43339: GREATER
43340: IFFALSE 43344
// exit ;
43342: GO 43869
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43344: LD_ADDR_VAR 0 12
43348: PUSH
43349: LD_VAR 0 2
43353: PPUSH
43354: LD_VAR 0 3
43358: PPUSH
43359: LD_VAR 0 4
43363: PPUSH
43364: LD_VAR 0 5
43368: PPUSH
43369: LD_VAR 0 1
43373: PPUSH
43374: CALL_OW 248
43378: PPUSH
43379: LD_INT 0
43381: PPUSH
43382: CALL 43874 0 6
43386: ST_TO_ADDR
// if not hexes then
43387: LD_VAR 0 12
43391: NOT
43392: IFFALSE 43396
// exit ;
43394: GO 43869
// hex := GetHexInfo ( x , y ) ;
43396: LD_ADDR_VAR 0 15
43400: PUSH
43401: LD_VAR 0 3
43405: PPUSH
43406: LD_VAR 0 4
43410: PPUSH
43411: CALL_OW 546
43415: ST_TO_ADDR
// if hex [ 1 ] then
43416: LD_VAR 0 15
43420: PUSH
43421: LD_INT 1
43423: ARRAY
43424: IFFALSE 43428
// exit ;
43426: GO 43869
// height := hex [ 2 ] ;
43428: LD_ADDR_VAR 0 13
43432: PUSH
43433: LD_VAR 0 15
43437: PUSH
43438: LD_INT 2
43440: ARRAY
43441: ST_TO_ADDR
// for i = 1 to hexes do
43442: LD_ADDR_VAR 0 7
43446: PUSH
43447: DOUBLE
43448: LD_INT 1
43450: DEC
43451: ST_TO_ADDR
43452: LD_VAR 0 12
43456: PUSH
43457: FOR_TO
43458: IFFALSE 43788
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43460: LD_VAR 0 12
43464: PUSH
43465: LD_VAR 0 7
43469: ARRAY
43470: PUSH
43471: LD_INT 1
43473: ARRAY
43474: PPUSH
43475: LD_VAR 0 12
43479: PUSH
43480: LD_VAR 0 7
43484: ARRAY
43485: PUSH
43486: LD_INT 2
43488: ARRAY
43489: PPUSH
43490: CALL_OW 488
43494: NOT
43495: PUSH
43496: LD_VAR 0 12
43500: PUSH
43501: LD_VAR 0 7
43505: ARRAY
43506: PUSH
43507: LD_INT 1
43509: ARRAY
43510: PPUSH
43511: LD_VAR 0 12
43515: PUSH
43516: LD_VAR 0 7
43520: ARRAY
43521: PUSH
43522: LD_INT 2
43524: ARRAY
43525: PPUSH
43526: CALL_OW 428
43530: PUSH
43531: LD_INT 0
43533: GREATER
43534: OR
43535: PUSH
43536: LD_VAR 0 12
43540: PUSH
43541: LD_VAR 0 7
43545: ARRAY
43546: PUSH
43547: LD_INT 1
43549: ARRAY
43550: PPUSH
43551: LD_VAR 0 12
43555: PUSH
43556: LD_VAR 0 7
43560: ARRAY
43561: PUSH
43562: LD_INT 2
43564: ARRAY
43565: PPUSH
43566: CALL_OW 351
43570: OR
43571: IFFALSE 43577
// exit ;
43573: POP
43574: POP
43575: GO 43869
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43577: LD_ADDR_VAR 0 8
43581: PUSH
43582: LD_VAR 0 12
43586: PUSH
43587: LD_VAR 0 7
43591: ARRAY
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PPUSH
43597: LD_VAR 0 12
43601: PUSH
43602: LD_VAR 0 7
43606: ARRAY
43607: PUSH
43608: LD_INT 2
43610: ARRAY
43611: PPUSH
43612: CALL_OW 546
43616: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43617: LD_VAR 0 8
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PUSH
43626: LD_VAR 0 8
43630: PUSH
43631: LD_INT 2
43633: ARRAY
43634: PUSH
43635: LD_VAR 0 13
43639: PUSH
43640: LD_INT 2
43642: PLUS
43643: GREATER
43644: OR
43645: PUSH
43646: LD_VAR 0 8
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: PUSH
43655: LD_VAR 0 13
43659: PUSH
43660: LD_INT 2
43662: MINUS
43663: LESS
43664: OR
43665: PUSH
43666: LD_VAR 0 8
43670: PUSH
43671: LD_INT 3
43673: ARRAY
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 8
43680: PUSH
43681: LD_INT 9
43683: PUSH
43684: LD_INT 10
43686: PUSH
43687: LD_INT 11
43689: PUSH
43690: LD_INT 12
43692: PUSH
43693: LD_INT 13
43695: PUSH
43696: LD_INT 16
43698: PUSH
43699: LD_INT 17
43701: PUSH
43702: LD_INT 18
43704: PUSH
43705: LD_INT 19
43707: PUSH
43708: LD_INT 20
43710: PUSH
43711: LD_INT 21
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: IN
43729: NOT
43730: OR
43731: PUSH
43732: LD_VAR 0 8
43736: PUSH
43737: LD_INT 5
43739: ARRAY
43740: NOT
43741: OR
43742: PUSH
43743: LD_VAR 0 8
43747: PUSH
43748: LD_INT 6
43750: ARRAY
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 7
43760: PUSH
43761: LD_INT 9
43763: PUSH
43764: LD_INT 10
43766: PUSH
43767: LD_INT 11
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: IN
43778: NOT
43779: OR
43780: IFFALSE 43786
// exit ;
43782: POP
43783: POP
43784: GO 43869
// end ;
43786: GO 43457
43788: POP
43789: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43790: LD_VAR 0 9
43794: PPUSH
43795: LD_VAR 0 3
43799: PPUSH
43800: LD_VAR 0 4
43804: PPUSH
43805: LD_INT 20
43807: PPUSH
43808: CALL 35792 0 4
43812: PUSH
43813: LD_INT 4
43815: ARRAY
43816: IFFALSE 43820
// exit ;
43818: GO 43869
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43820: LD_VAR 0 2
43824: PUSH
43825: LD_INT 29
43827: PUSH
43828: LD_INT 30
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: IN
43835: PUSH
43836: LD_VAR 0 3
43840: PPUSH
43841: LD_VAR 0 4
43845: PPUSH
43846: LD_VAR 0 9
43850: PPUSH
43851: CALL_OW 440
43855: NOT
43856: AND
43857: IFFALSE 43861
// exit ;
43859: GO 43869
// result := true ;
43861: LD_ADDR_VAR 0 6
43865: PUSH
43866: LD_INT 1
43868: ST_TO_ADDR
// end ;
43869: LD_VAR 0 6
43873: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43874: LD_INT 0
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
// result = [ ] ;
43934: LD_ADDR_VAR 0 7
43938: PUSH
43939: EMPTY
43940: ST_TO_ADDR
// temp_list = [ ] ;
43941: LD_ADDR_VAR 0 9
43945: PUSH
43946: EMPTY
43947: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43948: LD_VAR 0 4
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 3
43964: PUSH
43965: LD_INT 4
43967: PUSH
43968: LD_INT 5
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: IN
43979: NOT
43980: PUSH
43981: LD_VAR 0 1
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: IN
43996: PUSH
43997: LD_VAR 0 5
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: IN
44016: NOT
44017: AND
44018: OR
44019: IFFALSE 44023
// exit ;
44021: GO 62414
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44023: LD_VAR 0 1
44027: PUSH
44028: LD_INT 6
44030: PUSH
44031: LD_INT 7
44033: PUSH
44034: LD_INT 8
44036: PUSH
44037: LD_INT 13
44039: PUSH
44040: LD_INT 12
44042: PUSH
44043: LD_INT 15
44045: PUSH
44046: LD_INT 11
44048: PUSH
44049: LD_INT 14
44051: PUSH
44052: LD_INT 10
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: IN
44066: IFFALSE 44076
// btype = b_lab ;
44068: LD_ADDR_VAR 0 1
44072: PUSH
44073: LD_INT 6
44075: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44076: LD_VAR 0 6
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: IN
44095: NOT
44096: PUSH
44097: LD_VAR 0 1
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: LD_INT 6
44116: PUSH
44117: LD_INT 36
44119: PUSH
44120: LD_INT 4
44122: PUSH
44123: LD_INT 5
44125: PUSH
44126: LD_INT 31
44128: PUSH
44129: LD_INT 32
44131: PUSH
44132: LD_INT 33
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: IN
44148: NOT
44149: PUSH
44150: LD_VAR 0 6
44154: PUSH
44155: LD_INT 1
44157: EQUAL
44158: AND
44159: OR
44160: PUSH
44161: LD_VAR 0 1
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: LD_INT 3
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: IN
44176: NOT
44177: PUSH
44178: LD_VAR 0 6
44182: PUSH
44183: LD_INT 2
44185: EQUAL
44186: AND
44187: OR
44188: IFFALSE 44198
// mode = 0 ;
44190: LD_ADDR_VAR 0 6
44194: PUSH
44195: LD_INT 0
44197: ST_TO_ADDR
// case mode of 0 :
44198: LD_VAR 0 6
44202: PUSH
44203: LD_INT 0
44205: DOUBLE
44206: EQUAL
44207: IFTRUE 44211
44209: GO 55664
44211: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44212: LD_ADDR_VAR 0 11
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44405: LD_ADDR_VAR 0 12
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44601: LD_ADDR_VAR 0 13
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44800: LD_ADDR_VAR 0 14
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44996: LD_ADDR_VAR 0 15
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45189: LD_ADDR_VAR 0 16
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45382: LD_ADDR_VAR 0 17
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45612: LD_ADDR_VAR 0 18
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45842: LD_ADDR_VAR 0 19
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46072: LD_ADDR_VAR 0 20
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46302: LD_ADDR_VAR 0 21
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 22
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46762: LD_ADDR_VAR 0 23
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47042: LD_ADDR_VAR 0 24
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47318: LD_ADDR_VAR 0 25
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47592: LD_ADDR_VAR 0 26
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47868: LD_ADDR_VAR 0 27
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48148: LD_ADDR_VAR 0 28
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48430: LD_ADDR_VAR 0 29
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: LD_INT 3
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 3
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48709: LD_ADDR_VAR 0 30
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 3
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48987: LD_ADDR_VAR 0 31
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49265: LD_ADDR_VAR 0 32
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49543: LD_ADDR_VAR 0 33
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 3
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49822: LD_ADDR_VAR 0 34
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 3
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50102: LD_ADDR_VAR 0 35
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50214: LD_ADDR_VAR 0 36
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50326: LD_ADDR_VAR 0 37
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50438: LD_ADDR_VAR 0 38
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50550: LD_ADDR_VAR 0 39
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50662: LD_ADDR_VAR 0 40
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50774: LD_ADDR_VAR 0 41
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51124: LD_ADDR_VAR 0 42
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51474: LD_ADDR_VAR 0 43
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51822: LD_ADDR_VAR 0 44
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52172: LD_ADDR_VAR 0 45
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52522: LD_ADDR_VAR 0 46
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52870: LD_ADDR_VAR 0 47
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53021: LD_ADDR_VAR 0 48
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53168: LD_ADDR_VAR 0 49
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53312: LD_ADDR_VAR 0 50
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53456: LD_ADDR_VAR 0 51
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53603: LD_ADDR_VAR 0 52
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53754: LD_ADDR_VAR 0 53
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53984: LD_ADDR_VAR 0 54
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54214: LD_ADDR_VAR 0 55
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54444: LD_ADDR_VAR 0 56
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54674: LD_ADDR_VAR 0 57
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54904: LD_ADDR_VAR 0 58
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55134: LD_ADDR_VAR 0 59
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55222: LD_ADDR_VAR 0 60
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55310: LD_ADDR_VAR 0 61
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55398: LD_ADDR_VAR 0 62
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55486: LD_ADDR_VAR 0 63
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55574: LD_ADDR_VAR 0 64
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// end ; 1 :
55662: GO 61559
55664: LD_INT 1
55666: DOUBLE
55667: EQUAL
55668: IFTRUE 55672
55670: GO 58295
55672: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55673: LD_ADDR_VAR 0 11
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55717: LD_ADDR_VAR 0 12
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55758: LD_ADDR_VAR 0 13
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55798: LD_ADDR_VAR 0 14
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55839: LD_ADDR_VAR 0 15
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55883: LD_ADDR_VAR 0 16
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55929: LD_ADDR_VAR 0 17
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 3
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55973: LD_ADDR_VAR 0 18
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56014: LD_ADDR_VAR 0 19
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56054: LD_ADDR_VAR 0 20
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56095: LD_ADDR_VAR 0 21
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56139: LD_ADDR_VAR 0 22
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56185: LD_ADDR_VAR 0 23
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 3
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 4
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 3
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56229: LD_ADDR_VAR 0 24
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56270: LD_ADDR_VAR 0 25
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 4
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56310: LD_ADDR_VAR 0 26
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56351: LD_ADDR_VAR 0 27
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56395: LD_ADDR_VAR 0 28
56399: PUSH
56400: LD_INT 3
56402: NEG
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: LD_INT 4
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56441: LD_ADDR_VAR 0 29
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 4
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 5
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 5
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 4
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 6
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 6
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 5
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56596: LD_ADDR_VAR 0 30
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 4
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 4
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 5
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 5
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 5
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 6
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 6
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56739: LD_ADDR_VAR 0 31
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 4
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 4
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 5
56816: PUSH
56817: LD_INT 5
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 4
56826: PUSH
56827: LD_INT 5
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 6
56836: PUSH
56837: LD_INT 5
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 6
56846: PUSH
56847: LD_INT 6
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 5
56856: PUSH
56857: LD_INT 6
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56878: LD_ADDR_VAR 0 32
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 4
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 5
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 5
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 6
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 6
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 5
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57021: LD_ADDR_VAR 0 33
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 4
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 4
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 5
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 5
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 6
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 6
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57176: LD_ADDR_VAR 0 34
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: LD_INT 4
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 4
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: NEG
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 4
57255: NEG
57256: PUSH
57257: LD_INT 5
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 5
57267: NEG
57268: PUSH
57269: LD_INT 4
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 5
57279: NEG
57280: PUSH
57281: LD_INT 5
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 5
57291: NEG
57292: PUSH
57293: LD_INT 6
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 6
57303: NEG
57304: PUSH
57305: LD_INT 5
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 6
57315: NEG
57316: PUSH
57317: LD_INT 6
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57339: LD_ADDR_VAR 0 41
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57383: LD_ADDR_VAR 0 42
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57424: LD_ADDR_VAR 0 43
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57464: LD_ADDR_VAR 0 44
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57505: LD_ADDR_VAR 0 45
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57549: LD_ADDR_VAR 0 46
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57595: LD_ADDR_VAR 0 47
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57628: LD_ADDR_VAR 0 48
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57659: LD_ADDR_VAR 0 49
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57688: LD_ADDR_VAR 0 50
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57717: LD_ADDR_VAR 0 51
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57748: LD_ADDR_VAR 0 52
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57781: LD_ADDR_VAR 0 53
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57825: LD_ADDR_VAR 0 54
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57866: LD_ADDR_VAR 0 55
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57906: LD_ADDR_VAR 0 56
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57947: LD_ADDR_VAR 0 57
57951: PUSH
57952: LD_INT 2
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57991: LD_ADDR_VAR 0 58
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58037: LD_ADDR_VAR 0 59
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58081: LD_ADDR_VAR 0 60
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58122: LD_ADDR_VAR 0 61
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58162: LD_ADDR_VAR 0 62
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58203: LD_ADDR_VAR 0 63
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58247: LD_ADDR_VAR 0 64
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// end ; 2 :
58293: GO 61559
58295: LD_INT 2
58297: DOUBLE
58298: EQUAL
58299: IFTRUE 58303
58301: GO 61558
58303: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58304: LD_ADDR_VAR 0 29
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 5
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 4
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 4
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 3
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 5
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 5
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 4
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 5
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 4
58643: NEG
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 4
58666: NEG
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 4
58689: NEG
58690: PUSH
58691: LD_INT 4
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 4
58701: NEG
58702: PUSH
58703: LD_INT 5
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: LD_INT 4
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 5
58749: NEG
58750: PUSH
58751: LD_INT 4
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 5
58761: NEG
58762: PUSH
58763: LD_INT 5
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: NEG
58774: PUSH
58775: LD_INT 5
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 5
58785: NEG
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58842: LD_ADDR_VAR 0 30
58846: PUSH
58847: LD_INT 4
58849: PUSH
58850: LD_INT 4
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 5
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: PUSH
58880: LD_INT 5
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: PUSH
58890: LD_INT 5
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 5
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: LD_INT 5
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 4
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 4
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 4
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 5
59088: NEG
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 5
59099: NEG
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 5
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: LD_INT 4
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: NEG
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 4
59206: NEG
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 4
59230: NEG
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 4
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 5
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 4
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 4
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: LD_INT 5
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 5
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59389: LD_ADDR_VAR 0 31
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 4
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 4
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 5
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 4
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 5
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 4
59545: NEG
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: NEG
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: LD_INT 5
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 5
59651: NEG
59652: PUSH
59653: LD_INT 4
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 5
59663: NEG
59664: PUSH
59665: LD_INT 5
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 5
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 5
59687: NEG
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 4
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 4
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 4
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 5
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 5
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 5
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59939: LD_ADDR_VAR 0 32
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 4
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 5
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 5
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 4
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 4
60108: NEG
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 4
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 4
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 5
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 4
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 4
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: LD_INT 5
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 5
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 4
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: PUSH
60352: LD_INT 4
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 4
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 5
60371: PUSH
60372: LD_INT 4
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: PUSH
60382: LD_INT 5
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 4
60391: PUSH
60392: LD_INT 5
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: LD_INT 4
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 5
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 5
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60486: LD_ADDR_VAR 0 33
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 4
60505: NEG
60506: PUSH
60507: LD_INT 5
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: LD_INT 3
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: NEG
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 5
60553: NEG
60554: PUSH
60555: LD_INT 4
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 5
60565: NEG
60566: PUSH
60567: LD_INT 5
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 5
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 5
60589: NEG
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 4
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 3
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 4
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 4
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 4
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 5
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 5
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 3
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 4
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 4
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 4
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 4
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 4
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 4
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 5
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: LD_INT 4
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61024: LD_ADDR_VAR 0 34
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 5
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 4
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 4
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 5
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 5
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 4
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 4
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: LD_INT 4
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 4
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: LD_INT 4
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: LD_INT 5
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: LD_INT 5
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 5
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 5
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 4
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 4
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 4
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: NEG
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 5
61465: NEG
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 5
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 5
61488: NEG
61489: PUSH
61490: LD_INT 2
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: ST_TO_ADDR
// end ; end ;
61556: GO 61559
61558: POP
// case btype of b_depot , b_warehouse :
61559: LD_VAR 0 1
61563: PUSH
61564: LD_INT 0
61566: DOUBLE
61567: EQUAL
61568: IFTRUE 61578
61570: LD_INT 1
61572: DOUBLE
61573: EQUAL
61574: IFTRUE 61578
61576: GO 61779
61578: POP
// case nation of nation_american :
61579: LD_VAR 0 5
61583: PUSH
61584: LD_INT 1
61586: DOUBLE
61587: EQUAL
61588: IFTRUE 61592
61590: GO 61648
61592: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61593: LD_ADDR_VAR 0 9
61597: PUSH
61598: LD_VAR 0 11
61602: PUSH
61603: LD_VAR 0 12
61607: PUSH
61608: LD_VAR 0 13
61612: PUSH
61613: LD_VAR 0 14
61617: PUSH
61618: LD_VAR 0 15
61622: PUSH
61623: LD_VAR 0 16
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: PUSH
61636: LD_VAR 0 4
61640: PUSH
61641: LD_INT 1
61643: PLUS
61644: ARRAY
61645: ST_TO_ADDR
61646: GO 61777
61648: LD_INT 2
61650: DOUBLE
61651: EQUAL
61652: IFTRUE 61656
61654: GO 61712
61656: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61657: LD_ADDR_VAR 0 9
61661: PUSH
61662: LD_VAR 0 17
61666: PUSH
61667: LD_VAR 0 18
61671: PUSH
61672: LD_VAR 0 19
61676: PUSH
61677: LD_VAR 0 20
61681: PUSH
61682: LD_VAR 0 21
61686: PUSH
61687: LD_VAR 0 22
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: PUSH
61700: LD_VAR 0 4
61704: PUSH
61705: LD_INT 1
61707: PLUS
61708: ARRAY
61709: ST_TO_ADDR
61710: GO 61777
61712: LD_INT 3
61714: DOUBLE
61715: EQUAL
61716: IFTRUE 61720
61718: GO 61776
61720: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61721: LD_ADDR_VAR 0 9
61725: PUSH
61726: LD_VAR 0 23
61730: PUSH
61731: LD_VAR 0 24
61735: PUSH
61736: LD_VAR 0 25
61740: PUSH
61741: LD_VAR 0 26
61745: PUSH
61746: LD_VAR 0 27
61750: PUSH
61751: LD_VAR 0 28
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: PUSH
61764: LD_VAR 0 4
61768: PUSH
61769: LD_INT 1
61771: PLUS
61772: ARRAY
61773: ST_TO_ADDR
61774: GO 61777
61776: POP
61777: GO 62332
61779: LD_INT 2
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61793
61785: LD_INT 3
61787: DOUBLE
61788: EQUAL
61789: IFTRUE 61793
61791: GO 61849
61793: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61794: LD_ADDR_VAR 0 9
61798: PUSH
61799: LD_VAR 0 29
61803: PUSH
61804: LD_VAR 0 30
61808: PUSH
61809: LD_VAR 0 31
61813: PUSH
61814: LD_VAR 0 32
61818: PUSH
61819: LD_VAR 0 33
61823: PUSH
61824: LD_VAR 0 34
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: LD_VAR 0 4
61841: PUSH
61842: LD_INT 1
61844: PLUS
61845: ARRAY
61846: ST_TO_ADDR
61847: GO 62332
61849: LD_INT 16
61851: DOUBLE
61852: EQUAL
61853: IFTRUE 61911
61855: LD_INT 17
61857: DOUBLE
61858: EQUAL
61859: IFTRUE 61911
61861: LD_INT 18
61863: DOUBLE
61864: EQUAL
61865: IFTRUE 61911
61867: LD_INT 19
61869: DOUBLE
61870: EQUAL
61871: IFTRUE 61911
61873: LD_INT 22
61875: DOUBLE
61876: EQUAL
61877: IFTRUE 61911
61879: LD_INT 20
61881: DOUBLE
61882: EQUAL
61883: IFTRUE 61911
61885: LD_INT 21
61887: DOUBLE
61888: EQUAL
61889: IFTRUE 61911
61891: LD_INT 23
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61911
61897: LD_INT 24
61899: DOUBLE
61900: EQUAL
61901: IFTRUE 61911
61903: LD_INT 25
61905: DOUBLE
61906: EQUAL
61907: IFTRUE 61911
61909: GO 61967
61911: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61912: LD_ADDR_VAR 0 9
61916: PUSH
61917: LD_VAR 0 35
61921: PUSH
61922: LD_VAR 0 36
61926: PUSH
61927: LD_VAR 0 37
61931: PUSH
61932: LD_VAR 0 38
61936: PUSH
61937: LD_VAR 0 39
61941: PUSH
61942: LD_VAR 0 40
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: LD_VAR 0 4
61959: PUSH
61960: LD_INT 1
61962: PLUS
61963: ARRAY
61964: ST_TO_ADDR
61965: GO 62332
61967: LD_INT 6
61969: DOUBLE
61970: EQUAL
61971: IFTRUE 62023
61973: LD_INT 7
61975: DOUBLE
61976: EQUAL
61977: IFTRUE 62023
61979: LD_INT 8
61981: DOUBLE
61982: EQUAL
61983: IFTRUE 62023
61985: LD_INT 13
61987: DOUBLE
61988: EQUAL
61989: IFTRUE 62023
61991: LD_INT 12
61993: DOUBLE
61994: EQUAL
61995: IFTRUE 62023
61997: LD_INT 15
61999: DOUBLE
62000: EQUAL
62001: IFTRUE 62023
62003: LD_INT 11
62005: DOUBLE
62006: EQUAL
62007: IFTRUE 62023
62009: LD_INT 14
62011: DOUBLE
62012: EQUAL
62013: IFTRUE 62023
62015: LD_INT 10
62017: DOUBLE
62018: EQUAL
62019: IFTRUE 62023
62021: GO 62079
62023: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62024: LD_ADDR_VAR 0 9
62028: PUSH
62029: LD_VAR 0 41
62033: PUSH
62034: LD_VAR 0 42
62038: PUSH
62039: LD_VAR 0 43
62043: PUSH
62044: LD_VAR 0 44
62048: PUSH
62049: LD_VAR 0 45
62053: PUSH
62054: LD_VAR 0 46
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: PUSH
62067: LD_VAR 0 4
62071: PUSH
62072: LD_INT 1
62074: PLUS
62075: ARRAY
62076: ST_TO_ADDR
62077: GO 62332
62079: LD_INT 36
62081: DOUBLE
62082: EQUAL
62083: IFTRUE 62087
62085: GO 62143
62087: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62088: LD_ADDR_VAR 0 9
62092: PUSH
62093: LD_VAR 0 47
62097: PUSH
62098: LD_VAR 0 48
62102: PUSH
62103: LD_VAR 0 49
62107: PUSH
62108: LD_VAR 0 50
62112: PUSH
62113: LD_VAR 0 51
62117: PUSH
62118: LD_VAR 0 52
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: PUSH
62131: LD_VAR 0 4
62135: PUSH
62136: LD_INT 1
62138: PLUS
62139: ARRAY
62140: ST_TO_ADDR
62141: GO 62332
62143: LD_INT 4
62145: DOUBLE
62146: EQUAL
62147: IFTRUE 62169
62149: LD_INT 5
62151: DOUBLE
62152: EQUAL
62153: IFTRUE 62169
62155: LD_INT 34
62157: DOUBLE
62158: EQUAL
62159: IFTRUE 62169
62161: LD_INT 37
62163: DOUBLE
62164: EQUAL
62165: IFTRUE 62169
62167: GO 62225
62169: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62170: LD_ADDR_VAR 0 9
62174: PUSH
62175: LD_VAR 0 53
62179: PUSH
62180: LD_VAR 0 54
62184: PUSH
62185: LD_VAR 0 55
62189: PUSH
62190: LD_VAR 0 56
62194: PUSH
62195: LD_VAR 0 57
62199: PUSH
62200: LD_VAR 0 58
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: PUSH
62213: LD_VAR 0 4
62217: PUSH
62218: LD_INT 1
62220: PLUS
62221: ARRAY
62222: ST_TO_ADDR
62223: GO 62332
62225: LD_INT 31
62227: DOUBLE
62228: EQUAL
62229: IFTRUE 62275
62231: LD_INT 32
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62275
62237: LD_INT 33
62239: DOUBLE
62240: EQUAL
62241: IFTRUE 62275
62243: LD_INT 27
62245: DOUBLE
62246: EQUAL
62247: IFTRUE 62275
62249: LD_INT 26
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62275
62255: LD_INT 28
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62275
62261: LD_INT 29
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62275
62267: LD_INT 30
62269: DOUBLE
62270: EQUAL
62271: IFTRUE 62275
62273: GO 62331
62275: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62276: LD_ADDR_VAR 0 9
62280: PUSH
62281: LD_VAR 0 59
62285: PUSH
62286: LD_VAR 0 60
62290: PUSH
62291: LD_VAR 0 61
62295: PUSH
62296: LD_VAR 0 62
62300: PUSH
62301: LD_VAR 0 63
62305: PUSH
62306: LD_VAR 0 64
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: PUSH
62319: LD_VAR 0 4
62323: PUSH
62324: LD_INT 1
62326: PLUS
62327: ARRAY
62328: ST_TO_ADDR
62329: GO 62332
62331: POP
// temp_list2 = [ ] ;
62332: LD_ADDR_VAR 0 10
62336: PUSH
62337: EMPTY
62338: ST_TO_ADDR
// for i in temp_list do
62339: LD_ADDR_VAR 0 8
62343: PUSH
62344: LD_VAR 0 9
62348: PUSH
62349: FOR_IN
62350: IFFALSE 62402
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62352: LD_ADDR_VAR 0 10
62356: PUSH
62357: LD_VAR 0 10
62361: PUSH
62362: LD_VAR 0 8
62366: PUSH
62367: LD_INT 1
62369: ARRAY
62370: PUSH
62371: LD_VAR 0 2
62375: PLUS
62376: PUSH
62377: LD_VAR 0 8
62381: PUSH
62382: LD_INT 2
62384: ARRAY
62385: PUSH
62386: LD_VAR 0 3
62390: PLUS
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: ADD
62399: ST_TO_ADDR
62400: GO 62349
62402: POP
62403: POP
// result = temp_list2 ;
62404: LD_ADDR_VAR 0 7
62408: PUSH
62409: LD_VAR 0 10
62413: ST_TO_ADDR
// end ;
62414: LD_VAR 0 7
62418: RET
// export function EnemyInRange ( unit , dist ) ; begin
62419: LD_INT 0
62421: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62422: LD_ADDR_VAR 0 3
62426: PUSH
62427: LD_VAR 0 1
62431: PPUSH
62432: CALL_OW 255
62436: PPUSH
62437: LD_VAR 0 1
62441: PPUSH
62442: CALL_OW 250
62446: PPUSH
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 251
62456: PPUSH
62457: LD_VAR 0 2
62461: PPUSH
62462: CALL 35792 0 4
62466: PUSH
62467: LD_INT 4
62469: ARRAY
62470: ST_TO_ADDR
// end ;
62471: LD_VAR 0 3
62475: RET
// export function PlayerSeeMe ( unit ) ; begin
62476: LD_INT 0
62478: PPUSH
// result := See ( your_side , unit ) ;
62479: LD_ADDR_VAR 0 2
62483: PUSH
62484: LD_OWVAR 2
62488: PPUSH
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 292
62498: ST_TO_ADDR
// end ;
62499: LD_VAR 0 2
62503: RET
// export function ReverseDir ( unit ) ; begin
62504: LD_INT 0
62506: PPUSH
// if not unit then
62507: LD_VAR 0 1
62511: NOT
62512: IFFALSE 62516
// exit ;
62514: GO 62539
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62516: LD_ADDR_VAR 0 2
62520: PUSH
62521: LD_VAR 0 1
62525: PPUSH
62526: CALL_OW 254
62530: PUSH
62531: LD_INT 3
62533: PLUS
62534: PUSH
62535: LD_INT 6
62537: MOD
62538: ST_TO_ADDR
// end ;
62539: LD_VAR 0 2
62543: RET
// export function ReverseArray ( array ) ; var i ; begin
62544: LD_INT 0
62546: PPUSH
62547: PPUSH
// if not array then
62548: LD_VAR 0 1
62552: NOT
62553: IFFALSE 62557
// exit ;
62555: GO 62612
// result := [ ] ;
62557: LD_ADDR_VAR 0 2
62561: PUSH
62562: EMPTY
62563: ST_TO_ADDR
// for i := array downto 1 do
62564: LD_ADDR_VAR 0 3
62568: PUSH
62569: DOUBLE
62570: LD_VAR 0 1
62574: INC
62575: ST_TO_ADDR
62576: LD_INT 1
62578: PUSH
62579: FOR_DOWNTO
62580: IFFALSE 62610
// result := Join ( result , array [ i ] ) ;
62582: LD_ADDR_VAR 0 2
62586: PUSH
62587: LD_VAR 0 2
62591: PPUSH
62592: LD_VAR 0 1
62596: PUSH
62597: LD_VAR 0 3
62601: ARRAY
62602: PPUSH
62603: CALL 67268 0 2
62607: ST_TO_ADDR
62608: GO 62579
62610: POP
62611: POP
// end ;
62612: LD_VAR 0 2
62616: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62617: LD_INT 0
62619: PPUSH
62620: PPUSH
62621: PPUSH
62622: PPUSH
62623: PPUSH
62624: PPUSH
// if not unit or not hexes then
62625: LD_VAR 0 1
62629: NOT
62630: PUSH
62631: LD_VAR 0 2
62635: NOT
62636: OR
62637: IFFALSE 62641
// exit ;
62639: GO 62764
// dist := 9999 ;
62641: LD_ADDR_VAR 0 5
62645: PUSH
62646: LD_INT 9999
62648: ST_TO_ADDR
// for i = 1 to hexes do
62649: LD_ADDR_VAR 0 4
62653: PUSH
62654: DOUBLE
62655: LD_INT 1
62657: DEC
62658: ST_TO_ADDR
62659: LD_VAR 0 2
62663: PUSH
62664: FOR_TO
62665: IFFALSE 62752
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62667: LD_ADDR_VAR 0 6
62671: PUSH
62672: LD_VAR 0 1
62676: PPUSH
62677: LD_VAR 0 2
62681: PUSH
62682: LD_VAR 0 4
62686: ARRAY
62687: PUSH
62688: LD_INT 1
62690: ARRAY
62691: PPUSH
62692: LD_VAR 0 2
62696: PUSH
62697: LD_VAR 0 4
62701: ARRAY
62702: PUSH
62703: LD_INT 2
62705: ARRAY
62706: PPUSH
62707: CALL_OW 297
62711: ST_TO_ADDR
// if tdist < dist then
62712: LD_VAR 0 6
62716: PUSH
62717: LD_VAR 0 5
62721: LESS
62722: IFFALSE 62750
// begin hex := hexes [ i ] ;
62724: LD_ADDR_VAR 0 8
62728: PUSH
62729: LD_VAR 0 2
62733: PUSH
62734: LD_VAR 0 4
62738: ARRAY
62739: ST_TO_ADDR
// dist := tdist ;
62740: LD_ADDR_VAR 0 5
62744: PUSH
62745: LD_VAR 0 6
62749: ST_TO_ADDR
// end ; end ;
62750: GO 62664
62752: POP
62753: POP
// result := hex ;
62754: LD_ADDR_VAR 0 3
62758: PUSH
62759: LD_VAR 0 8
62763: ST_TO_ADDR
// end ;
62764: LD_VAR 0 3
62768: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62773: LD_VAR 0 1
62777: NOT
62778: PUSH
62779: LD_VAR 0 1
62783: PUSH
62784: LD_INT 21
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 23
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PPUSH
62808: CALL_OW 69
62812: IN
62813: NOT
62814: OR
62815: IFFALSE 62819
// exit ;
62817: GO 62866
// for i = 1 to 3 do
62819: LD_ADDR_VAR 0 3
62823: PUSH
62824: DOUBLE
62825: LD_INT 1
62827: DEC
62828: ST_TO_ADDR
62829: LD_INT 3
62831: PUSH
62832: FOR_TO
62833: IFFALSE 62864
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 250
62844: PPUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL_OW 251
62854: PPUSH
62855: LD_INT 1
62857: PPUSH
62858: CALL_OW 453
62862: GO 62832
62864: POP
62865: POP
// end ;
62866: LD_VAR 0 2
62870: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62871: LD_INT 0
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
62878: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62879: LD_VAR 0 1
62883: NOT
62884: PUSH
62885: LD_VAR 0 2
62889: NOT
62890: OR
62891: PUSH
62892: LD_VAR 0 1
62896: PPUSH
62897: CALL_OW 314
62901: OR
62902: IFFALSE 62906
// exit ;
62904: GO 63373
// if GetLives ( i ) < 250 then
62906: LD_VAR 0 4
62910: PPUSH
62911: CALL_OW 256
62915: PUSH
62916: LD_INT 250
62918: LESS
62919: IFFALSE 62932
// begin ComAutodestruct ( i ) ;
62921: LD_VAR 0 4
62925: PPUSH
62926: CALL 62769 0 1
// exit ;
62930: GO 63373
// end ; x := GetX ( enemy_unit ) ;
62932: LD_ADDR_VAR 0 7
62936: PUSH
62937: LD_VAR 0 2
62941: PPUSH
62942: CALL_OW 250
62946: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62947: LD_ADDR_VAR 0 8
62951: PUSH
62952: LD_VAR 0 2
62956: PPUSH
62957: CALL_OW 251
62961: ST_TO_ADDR
// if not x or not y then
62962: LD_VAR 0 7
62966: NOT
62967: PUSH
62968: LD_VAR 0 8
62972: NOT
62973: OR
62974: IFFALSE 62978
// exit ;
62976: GO 63373
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62978: LD_ADDR_VAR 0 6
62982: PUSH
62983: LD_VAR 0 7
62987: PPUSH
62988: LD_INT 0
62990: PPUSH
62991: LD_INT 4
62993: PPUSH
62994: CALL_OW 272
62998: PUSH
62999: LD_VAR 0 8
63003: PPUSH
63004: LD_INT 0
63006: PPUSH
63007: LD_INT 4
63009: PPUSH
63010: CALL_OW 273
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_VAR 0 7
63023: PPUSH
63024: LD_INT 1
63026: PPUSH
63027: LD_INT 4
63029: PPUSH
63030: CALL_OW 272
63034: PUSH
63035: LD_VAR 0 8
63039: PPUSH
63040: LD_INT 1
63042: PPUSH
63043: LD_INT 4
63045: PPUSH
63046: CALL_OW 273
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_VAR 0 7
63059: PPUSH
63060: LD_INT 2
63062: PPUSH
63063: LD_INT 4
63065: PPUSH
63066: CALL_OW 272
63070: PUSH
63071: LD_VAR 0 8
63075: PPUSH
63076: LD_INT 2
63078: PPUSH
63079: LD_INT 4
63081: PPUSH
63082: CALL_OW 273
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_VAR 0 7
63095: PPUSH
63096: LD_INT 3
63098: PPUSH
63099: LD_INT 4
63101: PPUSH
63102: CALL_OW 272
63106: PUSH
63107: LD_VAR 0 8
63111: PPUSH
63112: LD_INT 3
63114: PPUSH
63115: LD_INT 4
63117: PPUSH
63118: CALL_OW 273
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_VAR 0 7
63131: PPUSH
63132: LD_INT 4
63134: PPUSH
63135: LD_INT 4
63137: PPUSH
63138: CALL_OW 272
63142: PUSH
63143: LD_VAR 0 8
63147: PPUSH
63148: LD_INT 4
63150: PPUSH
63151: LD_INT 4
63153: PPUSH
63154: CALL_OW 273
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_VAR 0 7
63167: PPUSH
63168: LD_INT 5
63170: PPUSH
63171: LD_INT 4
63173: PPUSH
63174: CALL_OW 272
63178: PUSH
63179: LD_VAR 0 8
63183: PPUSH
63184: LD_INT 5
63186: PPUSH
63187: LD_INT 4
63189: PPUSH
63190: CALL_OW 273
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: ST_TO_ADDR
// for i = tmp downto 1 do
63207: LD_ADDR_VAR 0 4
63211: PUSH
63212: DOUBLE
63213: LD_VAR 0 6
63217: INC
63218: ST_TO_ADDR
63219: LD_INT 1
63221: PUSH
63222: FOR_DOWNTO
63223: IFFALSE 63324
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63225: LD_VAR 0 6
63229: PUSH
63230: LD_VAR 0 4
63234: ARRAY
63235: PUSH
63236: LD_INT 1
63238: ARRAY
63239: PPUSH
63240: LD_VAR 0 6
63244: PUSH
63245: LD_VAR 0 4
63249: ARRAY
63250: PUSH
63251: LD_INT 2
63253: ARRAY
63254: PPUSH
63255: CALL_OW 488
63259: NOT
63260: PUSH
63261: LD_VAR 0 6
63265: PUSH
63266: LD_VAR 0 4
63270: ARRAY
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: PPUSH
63276: LD_VAR 0 6
63280: PUSH
63281: LD_VAR 0 4
63285: ARRAY
63286: PUSH
63287: LD_INT 2
63289: ARRAY
63290: PPUSH
63291: CALL_OW 428
63295: PUSH
63296: LD_INT 0
63298: NONEQUAL
63299: OR
63300: IFFALSE 63322
// tmp := Delete ( tmp , i ) ;
63302: LD_ADDR_VAR 0 6
63306: PUSH
63307: LD_VAR 0 6
63311: PPUSH
63312: LD_VAR 0 4
63316: PPUSH
63317: CALL_OW 3
63321: ST_TO_ADDR
63322: GO 63222
63324: POP
63325: POP
// j := GetClosestHex ( unit , tmp ) ;
63326: LD_ADDR_VAR 0 5
63330: PUSH
63331: LD_VAR 0 1
63335: PPUSH
63336: LD_VAR 0 6
63340: PPUSH
63341: CALL 62617 0 2
63345: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63346: LD_VAR 0 1
63350: PPUSH
63351: LD_VAR 0 5
63355: PUSH
63356: LD_INT 1
63358: ARRAY
63359: PPUSH
63360: LD_VAR 0 5
63364: PUSH
63365: LD_INT 2
63367: ARRAY
63368: PPUSH
63369: CALL_OW 111
// end ;
63373: LD_VAR 0 3
63377: RET
// export function PrepareApemanSoldier ( ) ; begin
63378: LD_INT 0
63380: PPUSH
// uc_nation := 0 ;
63381: LD_ADDR_OWVAR 21
63385: PUSH
63386: LD_INT 0
63388: ST_TO_ADDR
// hc_sex := sex_male ;
63389: LD_ADDR_OWVAR 27
63393: PUSH
63394: LD_INT 1
63396: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63397: LD_ADDR_OWVAR 28
63401: PUSH
63402: LD_INT 15
63404: ST_TO_ADDR
// hc_gallery :=  ;
63405: LD_ADDR_OWVAR 33
63409: PUSH
63410: LD_STRING 
63412: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63413: LD_ADDR_OWVAR 31
63417: PUSH
63418: LD_INT 0
63420: PPUSH
63421: LD_INT 3
63423: PPUSH
63424: CALL_OW 12
63428: PUSH
63429: LD_INT 0
63431: PPUSH
63432: LD_INT 3
63434: PPUSH
63435: CALL_OW 12
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// end ;
63452: LD_VAR 0 1
63456: RET
// export function PrepareApemanEngineer ( ) ; begin
63457: LD_INT 0
63459: PPUSH
// uc_nation := 0 ;
63460: LD_ADDR_OWVAR 21
63464: PUSH
63465: LD_INT 0
63467: ST_TO_ADDR
// hc_sex := sex_male ;
63468: LD_ADDR_OWVAR 27
63472: PUSH
63473: LD_INT 1
63475: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63476: LD_ADDR_OWVAR 28
63480: PUSH
63481: LD_INT 16
63483: ST_TO_ADDR
// hc_gallery :=  ;
63484: LD_ADDR_OWVAR 33
63488: PUSH
63489: LD_STRING 
63491: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63492: LD_ADDR_OWVAR 31
63496: PUSH
63497: LD_INT 0
63499: PPUSH
63500: LD_INT 3
63502: PPUSH
63503: CALL_OW 12
63507: PUSH
63508: LD_INT 0
63510: PPUSH
63511: LD_INT 3
63513: PPUSH
63514: CALL_OW 12
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// end ;
63531: LD_VAR 0 1
63535: RET
// export function PrepareApeman ( agressivity ) ; begin
63536: LD_INT 0
63538: PPUSH
// uc_side := 0 ;
63539: LD_ADDR_OWVAR 20
63543: PUSH
63544: LD_INT 0
63546: ST_TO_ADDR
// uc_nation := 0 ;
63547: LD_ADDR_OWVAR 21
63551: PUSH
63552: LD_INT 0
63554: ST_TO_ADDR
// hc_sex := sex_male ;
63555: LD_ADDR_OWVAR 27
63559: PUSH
63560: LD_INT 1
63562: ST_TO_ADDR
// hc_class := class_apeman ;
63563: LD_ADDR_OWVAR 28
63567: PUSH
63568: LD_INT 12
63570: ST_TO_ADDR
// hc_gallery :=  ;
63571: LD_ADDR_OWVAR 33
63575: PUSH
63576: LD_STRING 
63578: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63579: LD_ADDR_OWVAR 35
63583: PUSH
63584: LD_VAR 0 1
63588: NEG
63589: PPUSH
63590: LD_VAR 0 1
63594: PPUSH
63595: CALL_OW 12
63599: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63600: LD_ADDR_OWVAR 31
63604: PUSH
63605: LD_INT 0
63607: PPUSH
63608: LD_INT 3
63610: PPUSH
63611: CALL_OW 12
63615: PUSH
63616: LD_INT 0
63618: PPUSH
63619: LD_INT 3
63621: PPUSH
63622: CALL_OW 12
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: ST_TO_ADDR
// end ;
63639: LD_VAR 0 2
63643: RET
// export function PrepareTiger ( agressivity ) ; begin
63644: LD_INT 0
63646: PPUSH
// uc_side := 0 ;
63647: LD_ADDR_OWVAR 20
63651: PUSH
63652: LD_INT 0
63654: ST_TO_ADDR
// uc_nation := 0 ;
63655: LD_ADDR_OWVAR 21
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// hc_class := class_tiger ;
63663: LD_ADDR_OWVAR 28
63667: PUSH
63668: LD_INT 14
63670: ST_TO_ADDR
// hc_gallery :=  ;
63671: LD_ADDR_OWVAR 33
63675: PUSH
63676: LD_STRING 
63678: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63679: LD_ADDR_OWVAR 35
63683: PUSH
63684: LD_VAR 0 1
63688: NEG
63689: PPUSH
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL_OW 12
63699: ST_TO_ADDR
// end ;
63700: LD_VAR 0 2
63704: RET
// export function PrepareEnchidna ( ) ; begin
63705: LD_INT 0
63707: PPUSH
// uc_side := 0 ;
63708: LD_ADDR_OWVAR 20
63712: PUSH
63713: LD_INT 0
63715: ST_TO_ADDR
// uc_nation := 0 ;
63716: LD_ADDR_OWVAR 21
63720: PUSH
63721: LD_INT 0
63723: ST_TO_ADDR
// hc_class := class_baggie ;
63724: LD_ADDR_OWVAR 28
63728: PUSH
63729: LD_INT 13
63731: ST_TO_ADDR
// hc_gallery :=  ;
63732: LD_ADDR_OWVAR 33
63736: PUSH
63737: LD_STRING 
63739: ST_TO_ADDR
// end ;
63740: LD_VAR 0 1
63744: RET
// export function PrepareFrog ( ) ; begin
63745: LD_INT 0
63747: PPUSH
// uc_side := 0 ;
63748: LD_ADDR_OWVAR 20
63752: PUSH
63753: LD_INT 0
63755: ST_TO_ADDR
// uc_nation := 0 ;
63756: LD_ADDR_OWVAR 21
63760: PUSH
63761: LD_INT 0
63763: ST_TO_ADDR
// hc_class := class_frog ;
63764: LD_ADDR_OWVAR 28
63768: PUSH
63769: LD_INT 19
63771: ST_TO_ADDR
// hc_gallery :=  ;
63772: LD_ADDR_OWVAR 33
63776: PUSH
63777: LD_STRING 
63779: ST_TO_ADDR
// end ;
63780: LD_VAR 0 1
63784: RET
// export function PrepareFish ( ) ; begin
63785: LD_INT 0
63787: PPUSH
// uc_side := 0 ;
63788: LD_ADDR_OWVAR 20
63792: PUSH
63793: LD_INT 0
63795: ST_TO_ADDR
// uc_nation := 0 ;
63796: LD_ADDR_OWVAR 21
63800: PUSH
63801: LD_INT 0
63803: ST_TO_ADDR
// hc_class := class_fish ;
63804: LD_ADDR_OWVAR 28
63808: PUSH
63809: LD_INT 20
63811: ST_TO_ADDR
// hc_gallery :=  ;
63812: LD_ADDR_OWVAR 33
63816: PUSH
63817: LD_STRING 
63819: ST_TO_ADDR
// end ;
63820: LD_VAR 0 1
63824: RET
// export function PrepareBird ( ) ; begin
63825: LD_INT 0
63827: PPUSH
// uc_side := 0 ;
63828: LD_ADDR_OWVAR 20
63832: PUSH
63833: LD_INT 0
63835: ST_TO_ADDR
// uc_nation := 0 ;
63836: LD_ADDR_OWVAR 21
63840: PUSH
63841: LD_INT 0
63843: ST_TO_ADDR
// hc_class := class_phororhacos ;
63844: LD_ADDR_OWVAR 28
63848: PUSH
63849: LD_INT 18
63851: ST_TO_ADDR
// hc_gallery :=  ;
63852: LD_ADDR_OWVAR 33
63856: PUSH
63857: LD_STRING 
63859: ST_TO_ADDR
// end ;
63860: LD_VAR 0 1
63864: RET
// export function PrepareHorse ( ) ; begin
63865: LD_INT 0
63867: PPUSH
// uc_side := 0 ;
63868: LD_ADDR_OWVAR 20
63872: PUSH
63873: LD_INT 0
63875: ST_TO_ADDR
// uc_nation := 0 ;
63876: LD_ADDR_OWVAR 21
63880: PUSH
63881: LD_INT 0
63883: ST_TO_ADDR
// hc_class := class_horse ;
63884: LD_ADDR_OWVAR 28
63888: PUSH
63889: LD_INT 21
63891: ST_TO_ADDR
// hc_gallery :=  ;
63892: LD_ADDR_OWVAR 33
63896: PUSH
63897: LD_STRING 
63899: ST_TO_ADDR
// end ;
63900: LD_VAR 0 1
63904: RET
// export function PrepareMastodont ( ) ; begin
63905: LD_INT 0
63907: PPUSH
// uc_side := 0 ;
63908: LD_ADDR_OWVAR 20
63912: PUSH
63913: LD_INT 0
63915: ST_TO_ADDR
// uc_nation := 0 ;
63916: LD_ADDR_OWVAR 21
63920: PUSH
63921: LD_INT 0
63923: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63924: LD_ADDR_OWVAR 37
63928: PUSH
63929: LD_INT 31
63931: ST_TO_ADDR
// vc_control := control_rider ;
63932: LD_ADDR_OWVAR 38
63936: PUSH
63937: LD_INT 4
63939: ST_TO_ADDR
// end ;
63940: LD_VAR 0 1
63944: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63945: LD_INT 0
63947: PPUSH
63948: PPUSH
63949: PPUSH
// uc_side = 0 ;
63950: LD_ADDR_OWVAR 20
63954: PUSH
63955: LD_INT 0
63957: ST_TO_ADDR
// uc_nation = 0 ;
63958: LD_ADDR_OWVAR 21
63962: PUSH
63963: LD_INT 0
63965: ST_TO_ADDR
// InitHc_All ( ) ;
63966: CALL_OW 584
// InitVc ;
63970: CALL_OW 20
// if mastodonts then
63974: LD_VAR 0 6
63978: IFFALSE 64045
// for i = 1 to mastodonts do
63980: LD_ADDR_VAR 0 11
63984: PUSH
63985: DOUBLE
63986: LD_INT 1
63988: DEC
63989: ST_TO_ADDR
63990: LD_VAR 0 6
63994: PUSH
63995: FOR_TO
63996: IFFALSE 64043
// begin vc_chassis := 31 ;
63998: LD_ADDR_OWVAR 37
64002: PUSH
64003: LD_INT 31
64005: ST_TO_ADDR
// vc_control := control_rider ;
64006: LD_ADDR_OWVAR 38
64010: PUSH
64011: LD_INT 4
64013: ST_TO_ADDR
// animal := CreateVehicle ;
64014: LD_ADDR_VAR 0 12
64018: PUSH
64019: CALL_OW 45
64023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64024: LD_VAR 0 12
64028: PPUSH
64029: LD_VAR 0 8
64033: PPUSH
64034: LD_INT 0
64036: PPUSH
64037: CALL 66173 0 3
// end ;
64041: GO 63995
64043: POP
64044: POP
// if horses then
64045: LD_VAR 0 5
64049: IFFALSE 64116
// for i = 1 to horses do
64051: LD_ADDR_VAR 0 11
64055: PUSH
64056: DOUBLE
64057: LD_INT 1
64059: DEC
64060: ST_TO_ADDR
64061: LD_VAR 0 5
64065: PUSH
64066: FOR_TO
64067: IFFALSE 64114
// begin hc_class := 21 ;
64069: LD_ADDR_OWVAR 28
64073: PUSH
64074: LD_INT 21
64076: ST_TO_ADDR
// hc_gallery :=  ;
64077: LD_ADDR_OWVAR 33
64081: PUSH
64082: LD_STRING 
64084: ST_TO_ADDR
// animal := CreateHuman ;
64085: LD_ADDR_VAR 0 12
64089: PUSH
64090: CALL_OW 44
64094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64095: LD_VAR 0 12
64099: PPUSH
64100: LD_VAR 0 8
64104: PPUSH
64105: LD_INT 0
64107: PPUSH
64108: CALL 66173 0 3
// end ;
64112: GO 64066
64114: POP
64115: POP
// if birds then
64116: LD_VAR 0 1
64120: IFFALSE 64187
// for i = 1 to birds do
64122: LD_ADDR_VAR 0 11
64126: PUSH
64127: DOUBLE
64128: LD_INT 1
64130: DEC
64131: ST_TO_ADDR
64132: LD_VAR 0 1
64136: PUSH
64137: FOR_TO
64138: IFFALSE 64185
// begin hc_class := 18 ;
64140: LD_ADDR_OWVAR 28
64144: PUSH
64145: LD_INT 18
64147: ST_TO_ADDR
// hc_gallery =  ;
64148: LD_ADDR_OWVAR 33
64152: PUSH
64153: LD_STRING 
64155: ST_TO_ADDR
// animal := CreateHuman ;
64156: LD_ADDR_VAR 0 12
64160: PUSH
64161: CALL_OW 44
64165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64166: LD_VAR 0 12
64170: PPUSH
64171: LD_VAR 0 8
64175: PPUSH
64176: LD_INT 0
64178: PPUSH
64179: CALL 66173 0 3
// end ;
64183: GO 64137
64185: POP
64186: POP
// if tigers then
64187: LD_VAR 0 2
64191: IFFALSE 64275
// for i = 1 to tigers do
64193: LD_ADDR_VAR 0 11
64197: PUSH
64198: DOUBLE
64199: LD_INT 1
64201: DEC
64202: ST_TO_ADDR
64203: LD_VAR 0 2
64207: PUSH
64208: FOR_TO
64209: IFFALSE 64273
// begin hc_class = class_tiger ;
64211: LD_ADDR_OWVAR 28
64215: PUSH
64216: LD_INT 14
64218: ST_TO_ADDR
// hc_gallery =  ;
64219: LD_ADDR_OWVAR 33
64223: PUSH
64224: LD_STRING 
64226: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64227: LD_ADDR_OWVAR 35
64231: PUSH
64232: LD_INT 7
64234: NEG
64235: PPUSH
64236: LD_INT 7
64238: PPUSH
64239: CALL_OW 12
64243: ST_TO_ADDR
// animal := CreateHuman ;
64244: LD_ADDR_VAR 0 12
64248: PUSH
64249: CALL_OW 44
64253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64254: LD_VAR 0 12
64258: PPUSH
64259: LD_VAR 0 8
64263: PPUSH
64264: LD_INT 0
64266: PPUSH
64267: CALL 66173 0 3
// end ;
64271: GO 64208
64273: POP
64274: POP
// if apemans then
64275: LD_VAR 0 3
64279: IFFALSE 64402
// for i = 1 to apemans do
64281: LD_ADDR_VAR 0 11
64285: PUSH
64286: DOUBLE
64287: LD_INT 1
64289: DEC
64290: ST_TO_ADDR
64291: LD_VAR 0 3
64295: PUSH
64296: FOR_TO
64297: IFFALSE 64400
// begin hc_class = class_apeman ;
64299: LD_ADDR_OWVAR 28
64303: PUSH
64304: LD_INT 12
64306: ST_TO_ADDR
// hc_gallery =  ;
64307: LD_ADDR_OWVAR 33
64311: PUSH
64312: LD_STRING 
64314: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64315: LD_ADDR_OWVAR 35
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PPUSH
64324: LD_INT 2
64326: PPUSH
64327: CALL_OW 12
64331: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64332: LD_ADDR_OWVAR 31
64336: PUSH
64337: LD_INT 1
64339: PPUSH
64340: LD_INT 3
64342: PPUSH
64343: CALL_OW 12
64347: PUSH
64348: LD_INT 1
64350: PPUSH
64351: LD_INT 3
64353: PPUSH
64354: CALL_OW 12
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// animal := CreateHuman ;
64371: LD_ADDR_VAR 0 12
64375: PUSH
64376: CALL_OW 44
64380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64381: LD_VAR 0 12
64385: PPUSH
64386: LD_VAR 0 8
64390: PPUSH
64391: LD_INT 0
64393: PPUSH
64394: CALL 66173 0 3
// end ;
64398: GO 64296
64400: POP
64401: POP
// if enchidnas then
64402: LD_VAR 0 4
64406: IFFALSE 64473
// for i = 1 to enchidnas do
64408: LD_ADDR_VAR 0 11
64412: PUSH
64413: DOUBLE
64414: LD_INT 1
64416: DEC
64417: ST_TO_ADDR
64418: LD_VAR 0 4
64422: PUSH
64423: FOR_TO
64424: IFFALSE 64471
// begin hc_class = 13 ;
64426: LD_ADDR_OWVAR 28
64430: PUSH
64431: LD_INT 13
64433: ST_TO_ADDR
// hc_gallery =  ;
64434: LD_ADDR_OWVAR 33
64438: PUSH
64439: LD_STRING 
64441: ST_TO_ADDR
// animal := CreateHuman ;
64442: LD_ADDR_VAR 0 12
64446: PUSH
64447: CALL_OW 44
64451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64452: LD_VAR 0 12
64456: PPUSH
64457: LD_VAR 0 8
64461: PPUSH
64462: LD_INT 0
64464: PPUSH
64465: CALL 66173 0 3
// end ;
64469: GO 64423
64471: POP
64472: POP
// if fishes then
64473: LD_VAR 0 7
64477: IFFALSE 64544
// for i = 1 to fishes do
64479: LD_ADDR_VAR 0 11
64483: PUSH
64484: DOUBLE
64485: LD_INT 1
64487: DEC
64488: ST_TO_ADDR
64489: LD_VAR 0 7
64493: PUSH
64494: FOR_TO
64495: IFFALSE 64542
// begin hc_class = 20 ;
64497: LD_ADDR_OWVAR 28
64501: PUSH
64502: LD_INT 20
64504: ST_TO_ADDR
// hc_gallery =  ;
64505: LD_ADDR_OWVAR 33
64509: PUSH
64510: LD_STRING 
64512: ST_TO_ADDR
// animal := CreateHuman ;
64513: LD_ADDR_VAR 0 12
64517: PUSH
64518: CALL_OW 44
64522: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64523: LD_VAR 0 12
64527: PPUSH
64528: LD_VAR 0 9
64532: PPUSH
64533: LD_INT 0
64535: PPUSH
64536: CALL 66173 0 3
// end ;
64540: GO 64494
64542: POP
64543: POP
// end ;
64544: LD_VAR 0 10
64548: RET
// export function WantHeal ( sci , unit ) ; begin
64549: LD_INT 0
64551: PPUSH
// if GetTaskList ( sci ) > 0 then
64552: LD_VAR 0 1
64556: PPUSH
64557: CALL_OW 437
64561: PUSH
64562: LD_INT 0
64564: GREATER
64565: IFFALSE 64635
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 437
64576: PUSH
64577: LD_INT 1
64579: ARRAY
64580: PUSH
64581: LD_INT 1
64583: ARRAY
64584: PUSH
64585: LD_STRING l
64587: EQUAL
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 437
64598: PUSH
64599: LD_INT 1
64601: ARRAY
64602: PUSH
64603: LD_INT 4
64605: ARRAY
64606: PUSH
64607: LD_VAR 0 2
64611: EQUAL
64612: AND
64613: IFFALSE 64625
// result := true else
64615: LD_ADDR_VAR 0 3
64619: PUSH
64620: LD_INT 1
64622: ST_TO_ADDR
64623: GO 64633
// result := false ;
64625: LD_ADDR_VAR 0 3
64629: PUSH
64630: LD_INT 0
64632: ST_TO_ADDR
// end else
64633: GO 64643
// result := false ;
64635: LD_ADDR_VAR 0 3
64639: PUSH
64640: LD_INT 0
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 3
64647: RET
// export function HealTarget ( sci ) ; begin
64648: LD_INT 0
64650: PPUSH
// if not sci then
64651: LD_VAR 0 1
64655: NOT
64656: IFFALSE 64660
// exit ;
64658: GO 64725
// result := 0 ;
64660: LD_ADDR_VAR 0 2
64664: PUSH
64665: LD_INT 0
64667: ST_TO_ADDR
// if GetTaskList ( sci ) then
64668: LD_VAR 0 1
64672: PPUSH
64673: CALL_OW 437
64677: IFFALSE 64725
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64679: LD_VAR 0 1
64683: PPUSH
64684: CALL_OW 437
64688: PUSH
64689: LD_INT 1
64691: ARRAY
64692: PUSH
64693: LD_INT 1
64695: ARRAY
64696: PUSH
64697: LD_STRING l
64699: EQUAL
64700: IFFALSE 64725
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64702: LD_ADDR_VAR 0 2
64706: PUSH
64707: LD_VAR 0 1
64711: PPUSH
64712: CALL_OW 437
64716: PUSH
64717: LD_INT 1
64719: ARRAY
64720: PUSH
64721: LD_INT 4
64723: ARRAY
64724: ST_TO_ADDR
// end ;
64725: LD_VAR 0 2
64729: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64730: LD_INT 0
64732: PPUSH
64733: PPUSH
64734: PPUSH
64735: PPUSH
// if not base_units then
64736: LD_VAR 0 1
64740: NOT
64741: IFFALSE 64745
// exit ;
64743: GO 64832
// result := false ;
64745: LD_ADDR_VAR 0 2
64749: PUSH
64750: LD_INT 0
64752: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64753: LD_ADDR_VAR 0 5
64757: PUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_INT 21
64765: PUSH
64766: LD_INT 3
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PPUSH
64773: CALL_OW 72
64777: ST_TO_ADDR
// if not tmp then
64778: LD_VAR 0 5
64782: NOT
64783: IFFALSE 64787
// exit ;
64785: GO 64832
// for i in tmp do
64787: LD_ADDR_VAR 0 3
64791: PUSH
64792: LD_VAR 0 5
64796: PUSH
64797: FOR_IN
64798: IFFALSE 64830
// begin result := EnemyInRange ( i , 22 ) ;
64800: LD_ADDR_VAR 0 2
64804: PUSH
64805: LD_VAR 0 3
64809: PPUSH
64810: LD_INT 22
64812: PPUSH
64813: CALL 62419 0 2
64817: ST_TO_ADDR
// if result then
64818: LD_VAR 0 2
64822: IFFALSE 64828
// exit ;
64824: POP
64825: POP
64826: GO 64832
// end ;
64828: GO 64797
64830: POP
64831: POP
// end ;
64832: LD_VAR 0 2
64836: RET
// export function FilterByTag ( units , tag ) ; begin
64837: LD_INT 0
64839: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64840: LD_ADDR_VAR 0 3
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: LD_INT 120
64852: PUSH
64853: LD_VAR 0 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PPUSH
64862: CALL_OW 72
64866: ST_TO_ADDR
// end ;
64867: LD_VAR 0 3
64871: RET
// export function IsDriver ( un ) ; begin
64872: LD_INT 0
64874: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64875: LD_ADDR_VAR 0 2
64879: PUSH
64880: LD_VAR 0 1
64884: PUSH
64885: LD_INT 55
64887: PUSH
64888: EMPTY
64889: LIST
64890: PPUSH
64891: CALL_OW 69
64895: IN
64896: ST_TO_ADDR
// end ;
64897: LD_VAR 0 2
64901: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64902: LD_INT 0
64904: PPUSH
64905: PPUSH
// list := [ ] ;
64906: LD_ADDR_VAR 0 5
64910: PUSH
64911: EMPTY
64912: ST_TO_ADDR
// case d of 0 :
64913: LD_VAR 0 3
64917: PUSH
64918: LD_INT 0
64920: DOUBLE
64921: EQUAL
64922: IFTRUE 64926
64924: GO 65059
64926: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64927: LD_ADDR_VAR 0 5
64931: PUSH
64932: LD_VAR 0 1
64936: PUSH
64937: LD_INT 4
64939: MINUS
64940: PUSH
64941: LD_VAR 0 2
64945: PUSH
64946: LD_INT 4
64948: MINUS
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: PUSH
64958: LD_VAR 0 1
64962: PUSH
64963: LD_INT 3
64965: MINUS
64966: PUSH
64967: LD_VAR 0 2
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: PUSH
64980: LD_VAR 0 1
64984: PUSH
64985: LD_INT 4
64987: PLUS
64988: PUSH
64989: LD_VAR 0 2
64993: PUSH
64994: LD_INT 4
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: PUSH
65002: LD_VAR 0 1
65006: PUSH
65007: LD_INT 3
65009: PLUS
65010: PUSH
65011: LD_VAR 0 2
65015: PUSH
65016: LD_INT 3
65018: PLUS
65019: PUSH
65020: LD_INT 5
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: LD_VAR 0 1
65032: PUSH
65033: LD_VAR 0 2
65037: PUSH
65038: LD_INT 4
65040: PLUS
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// end ; 1 :
65057: GO 65757
65059: LD_INT 1
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65067
65065: GO 65200
65067: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65068: LD_ADDR_VAR 0 5
65072: PUSH
65073: LD_VAR 0 1
65077: PUSH
65078: LD_VAR 0 2
65082: PUSH
65083: LD_INT 4
65085: MINUS
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: LIST
65094: PUSH
65095: LD_VAR 0 1
65099: PUSH
65100: LD_INT 3
65102: MINUS
65103: PUSH
65104: LD_VAR 0 2
65108: PUSH
65109: LD_INT 3
65111: MINUS
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: PUSH
65121: LD_VAR 0 1
65125: PUSH
65126: LD_INT 4
65128: MINUS
65129: PUSH
65130: LD_VAR 0 2
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: PUSH
65143: LD_VAR 0 1
65147: PUSH
65148: LD_VAR 0 2
65152: PUSH
65153: LD_INT 3
65155: PLUS
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: PUSH
65165: LD_VAR 0 1
65169: PUSH
65170: LD_INT 4
65172: PLUS
65173: PUSH
65174: LD_VAR 0 2
65178: PUSH
65179: LD_INT 4
65181: PLUS
65182: PUSH
65183: LD_INT 5
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: ST_TO_ADDR
// end ; 2 :
65198: GO 65757
65200: LD_INT 2
65202: DOUBLE
65203: EQUAL
65204: IFTRUE 65208
65206: GO 65337
65208: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65209: LD_ADDR_VAR 0 5
65213: PUSH
65214: LD_VAR 0 1
65218: PUSH
65219: LD_VAR 0 2
65223: PUSH
65224: LD_INT 3
65226: MINUS
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: PUSH
65236: LD_VAR 0 1
65240: PUSH
65241: LD_INT 4
65243: PLUS
65244: PUSH
65245: LD_VAR 0 2
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: PUSH
65258: LD_VAR 0 1
65262: PUSH
65263: LD_VAR 0 2
65267: PUSH
65268: LD_INT 4
65270: PLUS
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: LIST
65279: PUSH
65280: LD_VAR 0 1
65284: PUSH
65285: LD_INT 3
65287: MINUS
65288: PUSH
65289: LD_VAR 0 2
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: PUSH
65302: LD_VAR 0 1
65306: PUSH
65307: LD_INT 4
65309: MINUS
65310: PUSH
65311: LD_VAR 0 2
65315: PUSH
65316: LD_INT 4
65318: MINUS
65319: PUSH
65320: LD_INT 2
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// end ; 3 :
65335: GO 65757
65337: LD_INT 3
65339: DOUBLE
65340: EQUAL
65341: IFTRUE 65345
65343: GO 65478
65345: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65346: LD_ADDR_VAR 0 5
65350: PUSH
65351: LD_VAR 0 1
65355: PUSH
65356: LD_INT 3
65358: PLUS
65359: PUSH
65360: LD_VAR 0 2
65364: PUSH
65365: LD_INT 4
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: PUSH
65373: LD_VAR 0 1
65377: PUSH
65378: LD_INT 4
65380: PLUS
65381: PUSH
65382: LD_VAR 0 2
65386: PUSH
65387: LD_INT 4
65389: PLUS
65390: PUSH
65391: LD_INT 5
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: PUSH
65399: LD_VAR 0 1
65403: PUSH
65404: LD_INT 4
65406: MINUS
65407: PUSH
65408: LD_VAR 0 2
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: LD_VAR 0 1
65425: PUSH
65426: LD_VAR 0 2
65430: PUSH
65431: LD_INT 4
65433: MINUS
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: LIST
65442: PUSH
65443: LD_VAR 0 1
65447: PUSH
65448: LD_INT 3
65450: MINUS
65451: PUSH
65452: LD_VAR 0 2
65456: PUSH
65457: LD_INT 3
65459: MINUS
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: ST_TO_ADDR
// end ; 4 :
65476: GO 65757
65478: LD_INT 4
65480: DOUBLE
65481: EQUAL
65482: IFTRUE 65486
65484: GO 65619
65486: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65487: LD_ADDR_VAR 0 5
65491: PUSH
65492: LD_VAR 0 1
65496: PUSH
65497: LD_VAR 0 2
65501: PUSH
65502: LD_INT 4
65504: PLUS
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: PUSH
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 3
65521: PLUS
65522: PUSH
65523: LD_VAR 0 2
65527: PUSH
65528: LD_INT 3
65530: PLUS
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: LD_INT 4
65547: PLUS
65548: PUSH
65549: LD_VAR 0 2
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_VAR 0 1
65566: PUSH
65567: LD_VAR 0 2
65571: PUSH
65572: LD_INT 3
65574: MINUS
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 4
65591: MINUS
65592: PUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_INT 4
65600: MINUS
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// end ; 5 :
65617: GO 65757
65619: LD_INT 5
65621: DOUBLE
65622: EQUAL
65623: IFTRUE 65627
65625: GO 65756
65627: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65628: LD_ADDR_VAR 0 5
65632: PUSH
65633: LD_VAR 0 1
65637: PUSH
65638: LD_INT 4
65640: MINUS
65641: PUSH
65642: LD_VAR 0 2
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: PUSH
65655: LD_VAR 0 1
65659: PUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_INT 4
65667: MINUS
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: PUSH
65677: LD_VAR 0 1
65681: PUSH
65682: LD_INT 4
65684: PLUS
65685: PUSH
65686: LD_VAR 0 2
65690: PUSH
65691: LD_INT 4
65693: PLUS
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: PUSH
65703: LD_VAR 0 1
65707: PUSH
65708: LD_INT 3
65710: PLUS
65711: PUSH
65712: LD_VAR 0 2
65716: PUSH
65717: LD_INT 4
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: LIST
65724: PUSH
65725: LD_VAR 0 1
65729: PUSH
65730: LD_VAR 0 2
65734: PUSH
65735: LD_INT 3
65737: PLUS
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// end ; end ;
65754: GO 65757
65756: POP
// result := list ;
65757: LD_ADDR_VAR 0 4
65761: PUSH
65762: LD_VAR 0 5
65766: ST_TO_ADDR
// end ;
65767: LD_VAR 0 4
65771: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65772: LD_INT 0
65774: PPUSH
65775: PPUSH
65776: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65777: LD_VAR 0 1
65781: NOT
65782: PUSH
65783: LD_VAR 0 2
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: LD_INT 3
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: IN
65806: NOT
65807: OR
65808: IFFALSE 65812
// exit ;
65810: GO 65895
// tmp := [ ] ;
65812: LD_ADDR_VAR 0 5
65816: PUSH
65817: EMPTY
65818: ST_TO_ADDR
// for i in units do
65819: LD_ADDR_VAR 0 4
65823: PUSH
65824: LD_VAR 0 1
65828: PUSH
65829: FOR_IN
65830: IFFALSE 65864
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65832: LD_ADDR_VAR 0 5
65836: PUSH
65837: LD_VAR 0 5
65841: PPUSH
65842: LD_VAR 0 4
65846: PPUSH
65847: LD_VAR 0 2
65851: PPUSH
65852: CALL_OW 259
65856: PPUSH
65857: CALL 67268 0 2
65861: ST_TO_ADDR
65862: GO 65829
65864: POP
65865: POP
// if not tmp then
65866: LD_VAR 0 5
65870: NOT
65871: IFFALSE 65875
// exit ;
65873: GO 65895
// result := SortListByListDesc ( units , tmp ) ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: LD_VAR 0 5
65889: PPUSH
65890: CALL_OW 77
65894: ST_TO_ADDR
// end ;
65895: LD_VAR 0 3
65899: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65900: LD_INT 0
65902: PPUSH
65903: PPUSH
65904: PPUSH
// result := false ;
65905: LD_ADDR_VAR 0 3
65909: PUSH
65910: LD_INT 0
65912: ST_TO_ADDR
// if not building then
65913: LD_VAR 0 2
65917: NOT
65918: IFFALSE 65922
// exit ;
65920: GO 66060
// x := GetX ( building ) ;
65922: LD_ADDR_VAR 0 4
65926: PUSH
65927: LD_VAR 0 2
65931: PPUSH
65932: CALL_OW 250
65936: ST_TO_ADDR
// y := GetY ( building ) ;
65937: LD_ADDR_VAR 0 5
65941: PUSH
65942: LD_VAR 0 2
65946: PPUSH
65947: CALL_OW 251
65951: ST_TO_ADDR
// if not x or not y then
65952: LD_VAR 0 4
65956: NOT
65957: PUSH
65958: LD_VAR 0 5
65962: NOT
65963: OR
65964: IFFALSE 65968
// exit ;
65966: GO 66060
// if GetTaskList ( unit ) then
65968: LD_VAR 0 1
65972: PPUSH
65973: CALL_OW 437
65977: IFFALSE 66060
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65979: LD_STRING e
65981: PUSH
65982: LD_VAR 0 1
65986: PPUSH
65987: CALL_OW 437
65991: PUSH
65992: LD_INT 1
65994: ARRAY
65995: PUSH
65996: LD_INT 1
65998: ARRAY
65999: EQUAL
66000: PUSH
66001: LD_VAR 0 4
66005: PUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: CALL_OW 437
66015: PUSH
66016: LD_INT 1
66018: ARRAY
66019: PUSH
66020: LD_INT 2
66022: ARRAY
66023: EQUAL
66024: AND
66025: PUSH
66026: LD_VAR 0 5
66030: PUSH
66031: LD_VAR 0 1
66035: PPUSH
66036: CALL_OW 437
66040: PUSH
66041: LD_INT 1
66043: ARRAY
66044: PUSH
66045: LD_INT 3
66047: ARRAY
66048: EQUAL
66049: AND
66050: IFFALSE 66060
// result := true end ;
66052: LD_ADDR_VAR 0 3
66056: PUSH
66057: LD_INT 1
66059: ST_TO_ADDR
// end ;
66060: LD_VAR 0 3
66064: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66065: LD_INT 0
66067: PPUSH
// result := false ;
66068: LD_ADDR_VAR 0 4
66072: PUSH
66073: LD_INT 0
66075: ST_TO_ADDR
// if GetTaskList ( unit ) then
66076: LD_VAR 0 1
66080: PPUSH
66081: CALL_OW 437
66085: IFFALSE 66168
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66087: LD_STRING M
66089: PUSH
66090: LD_VAR 0 1
66094: PPUSH
66095: CALL_OW 437
66099: PUSH
66100: LD_INT 1
66102: ARRAY
66103: PUSH
66104: LD_INT 1
66106: ARRAY
66107: EQUAL
66108: PUSH
66109: LD_VAR 0 2
66113: PUSH
66114: LD_VAR 0 1
66118: PPUSH
66119: CALL_OW 437
66123: PUSH
66124: LD_INT 1
66126: ARRAY
66127: PUSH
66128: LD_INT 2
66130: ARRAY
66131: EQUAL
66132: AND
66133: PUSH
66134: LD_VAR 0 3
66138: PUSH
66139: LD_VAR 0 1
66143: PPUSH
66144: CALL_OW 437
66148: PUSH
66149: LD_INT 1
66151: ARRAY
66152: PUSH
66153: LD_INT 3
66155: ARRAY
66156: EQUAL
66157: AND
66158: IFFALSE 66168
// result := true ;
66160: LD_ADDR_VAR 0 4
66164: PUSH
66165: LD_INT 1
66167: ST_TO_ADDR
// end ; end ;
66168: LD_VAR 0 4
66172: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66173: LD_INT 0
66175: PPUSH
66176: PPUSH
66177: PPUSH
66178: PPUSH
// if not unit or not area then
66179: LD_VAR 0 1
66183: NOT
66184: PUSH
66185: LD_VAR 0 2
66189: NOT
66190: OR
66191: IFFALSE 66195
// exit ;
66193: GO 66371
// tmp := AreaToList ( area , i ) ;
66195: LD_ADDR_VAR 0 6
66199: PUSH
66200: LD_VAR 0 2
66204: PPUSH
66205: LD_VAR 0 5
66209: PPUSH
66210: CALL_OW 517
66214: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66215: LD_ADDR_VAR 0 5
66219: PUSH
66220: DOUBLE
66221: LD_INT 1
66223: DEC
66224: ST_TO_ADDR
66225: LD_VAR 0 6
66229: PUSH
66230: LD_INT 1
66232: ARRAY
66233: PUSH
66234: FOR_TO
66235: IFFALSE 66369
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66237: LD_ADDR_VAR 0 7
66241: PUSH
66242: LD_VAR 0 6
66246: PUSH
66247: LD_INT 1
66249: ARRAY
66250: PUSH
66251: LD_VAR 0 5
66255: ARRAY
66256: PUSH
66257: LD_VAR 0 6
66261: PUSH
66262: LD_INT 2
66264: ARRAY
66265: PUSH
66266: LD_VAR 0 5
66270: ARRAY
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66276: LD_INT 92
66278: PUSH
66279: LD_VAR 0 7
66283: PUSH
66284: LD_INT 1
66286: ARRAY
66287: PUSH
66288: LD_VAR 0 7
66292: PUSH
66293: LD_INT 2
66295: ARRAY
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: PPUSH
66306: CALL_OW 69
66310: PUSH
66311: LD_INT 0
66313: EQUAL
66314: IFFALSE 66367
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66316: LD_VAR 0 1
66320: PPUSH
66321: LD_VAR 0 7
66325: PUSH
66326: LD_INT 1
66328: ARRAY
66329: PPUSH
66330: LD_VAR 0 7
66334: PUSH
66335: LD_INT 2
66337: ARRAY
66338: PPUSH
66339: LD_VAR 0 3
66343: PPUSH
66344: CALL_OW 48
// result := IsPlaced ( unit ) ;
66348: LD_ADDR_VAR 0 4
66352: PUSH
66353: LD_VAR 0 1
66357: PPUSH
66358: CALL_OW 305
66362: ST_TO_ADDR
// exit ;
66363: POP
66364: POP
66365: GO 66371
// end ; end ;
66367: GO 66234
66369: POP
66370: POP
// end ;
66371: LD_VAR 0 4
66375: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66376: LD_INT 0
66378: PPUSH
66379: PPUSH
66380: PPUSH
// if not side or side > 8 then
66381: LD_VAR 0 1
66385: NOT
66386: PUSH
66387: LD_VAR 0 1
66391: PUSH
66392: LD_INT 8
66394: GREATER
66395: OR
66396: IFFALSE 66400
// exit ;
66398: GO 66587
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66400: LD_ADDR_VAR 0 4
66404: PUSH
66405: LD_INT 22
66407: PUSH
66408: LD_VAR 0 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 21
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PPUSH
66431: CALL_OW 69
66435: ST_TO_ADDR
// if not tmp then
66436: LD_VAR 0 4
66440: NOT
66441: IFFALSE 66445
// exit ;
66443: GO 66587
// enable_addtolog := true ;
66445: LD_ADDR_OWVAR 81
66449: PUSH
66450: LD_INT 1
66452: ST_TO_ADDR
// AddToLog ( [ ) ;
66453: LD_STRING [
66455: PPUSH
66456: CALL_OW 561
// for i in tmp do
66460: LD_ADDR_VAR 0 3
66464: PUSH
66465: LD_VAR 0 4
66469: PUSH
66470: FOR_IN
66471: IFFALSE 66578
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66473: LD_STRING [
66475: PUSH
66476: LD_VAR 0 3
66480: PPUSH
66481: CALL_OW 266
66485: STR
66486: PUSH
66487: LD_STRING , 
66489: STR
66490: PUSH
66491: LD_VAR 0 3
66495: PPUSH
66496: CALL_OW 250
66500: STR
66501: PUSH
66502: LD_STRING , 
66504: STR
66505: PUSH
66506: LD_VAR 0 3
66510: PPUSH
66511: CALL_OW 251
66515: STR
66516: PUSH
66517: LD_STRING , 
66519: STR
66520: PUSH
66521: LD_VAR 0 3
66525: PPUSH
66526: CALL_OW 254
66530: STR
66531: PUSH
66532: LD_STRING , 
66534: STR
66535: PUSH
66536: LD_VAR 0 3
66540: PPUSH
66541: LD_INT 1
66543: PPUSH
66544: CALL_OW 268
66548: STR
66549: PUSH
66550: LD_STRING , 
66552: STR
66553: PUSH
66554: LD_VAR 0 3
66558: PPUSH
66559: LD_INT 2
66561: PPUSH
66562: CALL_OW 268
66566: STR
66567: PUSH
66568: LD_STRING ],
66570: STR
66571: PPUSH
66572: CALL_OW 561
// end ;
66576: GO 66470
66578: POP
66579: POP
// AddToLog ( ]; ) ;
66580: LD_STRING ];
66582: PPUSH
66583: CALL_OW 561
// end ;
66587: LD_VAR 0 2
66591: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66592: LD_INT 0
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
66598: PPUSH
// if not area or not rate or not max then
66599: LD_VAR 0 1
66603: NOT
66604: PUSH
66605: LD_VAR 0 2
66609: NOT
66610: OR
66611: PUSH
66612: LD_VAR 0 4
66616: NOT
66617: OR
66618: IFFALSE 66622
// exit ;
66620: GO 66811
// while 1 do
66622: LD_INT 1
66624: IFFALSE 66811
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66626: LD_ADDR_VAR 0 9
66630: PUSH
66631: LD_VAR 0 1
66635: PPUSH
66636: LD_INT 1
66638: PPUSH
66639: CALL_OW 287
66643: PUSH
66644: LD_INT 10
66646: MUL
66647: ST_TO_ADDR
// r := rate / 10 ;
66648: LD_ADDR_VAR 0 7
66652: PUSH
66653: LD_VAR 0 2
66657: PUSH
66658: LD_INT 10
66660: DIVREAL
66661: ST_TO_ADDR
// time := 1 1$00 ;
66662: LD_ADDR_VAR 0 8
66666: PUSH
66667: LD_INT 2100
66669: ST_TO_ADDR
// if amount < min then
66670: LD_VAR 0 9
66674: PUSH
66675: LD_VAR 0 3
66679: LESS
66680: IFFALSE 66698
// r := r * 2 else
66682: LD_ADDR_VAR 0 7
66686: PUSH
66687: LD_VAR 0 7
66691: PUSH
66692: LD_INT 2
66694: MUL
66695: ST_TO_ADDR
66696: GO 66724
// if amount > max then
66698: LD_VAR 0 9
66702: PUSH
66703: LD_VAR 0 4
66707: GREATER
66708: IFFALSE 66724
// r := r / 2 ;
66710: LD_ADDR_VAR 0 7
66714: PUSH
66715: LD_VAR 0 7
66719: PUSH
66720: LD_INT 2
66722: DIVREAL
66723: ST_TO_ADDR
// time := time / r ;
66724: LD_ADDR_VAR 0 8
66728: PUSH
66729: LD_VAR 0 8
66733: PUSH
66734: LD_VAR 0 7
66738: DIVREAL
66739: ST_TO_ADDR
// if time < 0 then
66740: LD_VAR 0 8
66744: PUSH
66745: LD_INT 0
66747: LESS
66748: IFFALSE 66765
// time := time * - 1 ;
66750: LD_ADDR_VAR 0 8
66754: PUSH
66755: LD_VAR 0 8
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: MUL
66764: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66765: LD_VAR 0 8
66769: PUSH
66770: LD_INT 35
66772: PPUSH
66773: LD_INT 875
66775: PPUSH
66776: CALL_OW 12
66780: PLUS
66781: PPUSH
66782: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66786: LD_INT 1
66788: PPUSH
66789: LD_INT 5
66791: PPUSH
66792: CALL_OW 12
66796: PPUSH
66797: LD_VAR 0 1
66801: PPUSH
66802: LD_INT 1
66804: PPUSH
66805: CALL_OW 55
// end ;
66809: GO 66622
// end ;
66811: LD_VAR 0 5
66815: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
66825: PPUSH
// if not turrets or not factories then
66826: LD_VAR 0 1
66830: NOT
66831: PUSH
66832: LD_VAR 0 2
66836: NOT
66837: OR
66838: IFFALSE 66842
// exit ;
66840: GO 67149
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66842: LD_ADDR_VAR 0 10
66846: PUSH
66847: LD_INT 5
66849: PUSH
66850: LD_INT 6
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: PUSH
66870: LD_INT 5
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 24
66884: PUSH
66885: LD_INT 25
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 23
66894: PUSH
66895: LD_INT 27
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 42
66908: PUSH
66909: LD_INT 43
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 44
66918: PUSH
66919: LD_INT 46
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 45
66928: PUSH
66929: LD_INT 47
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: ST_TO_ADDR
// result := [ ] ;
66946: LD_ADDR_VAR 0 3
66950: PUSH
66951: EMPTY
66952: ST_TO_ADDR
// for i in turrets do
66953: LD_ADDR_VAR 0 4
66957: PUSH
66958: LD_VAR 0 1
66962: PUSH
66963: FOR_IN
66964: IFFALSE 67147
// begin nat := GetNation ( i ) ;
66966: LD_ADDR_VAR 0 7
66970: PUSH
66971: LD_VAR 0 4
66975: PPUSH
66976: CALL_OW 248
66980: ST_TO_ADDR
// weapon := 0 ;
66981: LD_ADDR_VAR 0 8
66985: PUSH
66986: LD_INT 0
66988: ST_TO_ADDR
// if not nat then
66989: LD_VAR 0 7
66993: NOT
66994: IFFALSE 66998
// continue ;
66996: GO 66963
// for j in list [ nat ] do
66998: LD_ADDR_VAR 0 5
67002: PUSH
67003: LD_VAR 0 10
67007: PUSH
67008: LD_VAR 0 7
67012: ARRAY
67013: PUSH
67014: FOR_IN
67015: IFFALSE 67056
// if GetBWeapon ( i ) = j [ 1 ] then
67017: LD_VAR 0 4
67021: PPUSH
67022: CALL_OW 269
67026: PUSH
67027: LD_VAR 0 5
67031: PUSH
67032: LD_INT 1
67034: ARRAY
67035: EQUAL
67036: IFFALSE 67054
// begin weapon := j [ 2 ] ;
67038: LD_ADDR_VAR 0 8
67042: PUSH
67043: LD_VAR 0 5
67047: PUSH
67048: LD_INT 2
67050: ARRAY
67051: ST_TO_ADDR
// break ;
67052: GO 67056
// end ;
67054: GO 67014
67056: POP
67057: POP
// if not weapon then
67058: LD_VAR 0 8
67062: NOT
67063: IFFALSE 67067
// continue ;
67065: GO 66963
// for k in factories do
67067: LD_ADDR_VAR 0 6
67071: PUSH
67072: LD_VAR 0 2
67076: PUSH
67077: FOR_IN
67078: IFFALSE 67143
// begin weapons := AvailableWeaponList ( k ) ;
67080: LD_ADDR_VAR 0 9
67084: PUSH
67085: LD_VAR 0 6
67089: PPUSH
67090: CALL_OW 478
67094: ST_TO_ADDR
// if not weapons then
67095: LD_VAR 0 9
67099: NOT
67100: IFFALSE 67104
// continue ;
67102: GO 67077
// if weapon in weapons then
67104: LD_VAR 0 8
67108: PUSH
67109: LD_VAR 0 9
67113: IN
67114: IFFALSE 67141
// begin result := [ i , weapon ] ;
67116: LD_ADDR_VAR 0 3
67120: PUSH
67121: LD_VAR 0 4
67125: PUSH
67126: LD_VAR 0 8
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: ST_TO_ADDR
// exit ;
67135: POP
67136: POP
67137: POP
67138: POP
67139: GO 67149
// end ; end ;
67141: GO 67077
67143: POP
67144: POP
// end ;
67145: GO 66963
67147: POP
67148: POP
// end ;
67149: LD_VAR 0 3
67153: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67154: LD_INT 0
67156: PPUSH
// if not side or side > 8 then
67157: LD_VAR 0 3
67161: NOT
67162: PUSH
67163: LD_VAR 0 3
67167: PUSH
67168: LD_INT 8
67170: GREATER
67171: OR
67172: IFFALSE 67176
// exit ;
67174: GO 67235
// if not range then
67176: LD_VAR 0 4
67180: NOT
67181: IFFALSE 67192
// range := - 12 ;
67183: LD_ADDR_VAR 0 4
67187: PUSH
67188: LD_INT 12
67190: NEG
67191: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67192: LD_VAR 0 1
67196: PPUSH
67197: LD_VAR 0 2
67201: PPUSH
67202: LD_VAR 0 3
67206: PPUSH
67207: LD_VAR 0 4
67211: PPUSH
67212: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67216: LD_VAR 0 1
67220: PPUSH
67221: LD_VAR 0 2
67225: PPUSH
67226: LD_VAR 0 3
67230: PPUSH
67231: CALL_OW 331
// end ;
67235: LD_VAR 0 5
67239: RET
// export function Video ( mode ) ; begin
67240: LD_INT 0
67242: PPUSH
// ingame_video = mode ;
67243: LD_ADDR_OWVAR 52
67247: PUSH
67248: LD_VAR 0 1
67252: ST_TO_ADDR
// interface_hidden = mode ;
67253: LD_ADDR_OWVAR 54
67257: PUSH
67258: LD_VAR 0 1
67262: ST_TO_ADDR
// end ;
67263: LD_VAR 0 2
67267: RET
// export function Join ( array , element ) ; begin
67268: LD_INT 0
67270: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67271: LD_ADDR_VAR 0 3
67275: PUSH
67276: LD_VAR 0 1
67280: PPUSH
67281: LD_VAR 0 1
67285: PUSH
67286: LD_INT 1
67288: PLUS
67289: PPUSH
67290: LD_VAR 0 2
67294: PPUSH
67295: CALL_OW 1
67299: ST_TO_ADDR
// end ;
67300: LD_VAR 0 3
67304: RET
// export function JoinUnion ( array , element ) ; begin
67305: LD_INT 0
67307: PPUSH
// result := array union element ;
67308: LD_ADDR_VAR 0 3
67312: PUSH
67313: LD_VAR 0 1
67317: PUSH
67318: LD_VAR 0 2
67322: UNION
67323: ST_TO_ADDR
// end ;
67324: LD_VAR 0 3
67328: RET
// export function GetBehemoths ( side ) ; begin
67329: LD_INT 0
67331: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67332: LD_ADDR_VAR 0 2
67336: PUSH
67337: LD_INT 22
67339: PUSH
67340: LD_VAR 0 1
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 31
67351: PUSH
67352: LD_INT 25
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PPUSH
67363: CALL_OW 69
67367: ST_TO_ADDR
// end ;
67368: LD_VAR 0 2
67372: RET
// export function Shuffle ( array ) ; var i , index ; begin
67373: LD_INT 0
67375: PPUSH
67376: PPUSH
67377: PPUSH
// result := [ ] ;
67378: LD_ADDR_VAR 0 2
67382: PUSH
67383: EMPTY
67384: ST_TO_ADDR
// if not array then
67385: LD_VAR 0 1
67389: NOT
67390: IFFALSE 67394
// exit ;
67392: GO 67493
// Randomize ;
67394: CALL_OW 10
// for i = array downto 1 do
67398: LD_ADDR_VAR 0 3
67402: PUSH
67403: DOUBLE
67404: LD_VAR 0 1
67408: INC
67409: ST_TO_ADDR
67410: LD_INT 1
67412: PUSH
67413: FOR_DOWNTO
67414: IFFALSE 67491
// begin index := rand ( 1 , array ) ;
67416: LD_ADDR_VAR 0 4
67420: PUSH
67421: LD_INT 1
67423: PPUSH
67424: LD_VAR 0 1
67428: PPUSH
67429: CALL_OW 12
67433: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67434: LD_ADDR_VAR 0 2
67438: PUSH
67439: LD_VAR 0 2
67443: PPUSH
67444: LD_VAR 0 2
67448: PUSH
67449: LD_INT 1
67451: PLUS
67452: PPUSH
67453: LD_VAR 0 1
67457: PUSH
67458: LD_VAR 0 4
67462: ARRAY
67463: PPUSH
67464: CALL_OW 2
67468: ST_TO_ADDR
// array := Delete ( array , index ) ;
67469: LD_ADDR_VAR 0 1
67473: PUSH
67474: LD_VAR 0 1
67478: PPUSH
67479: LD_VAR 0 4
67483: PPUSH
67484: CALL_OW 3
67488: ST_TO_ADDR
// end ;
67489: GO 67413
67491: POP
67492: POP
// end ;
67493: LD_VAR 0 2
67497: RET
// export function GetBaseMaterials ( base ) ; begin
67498: LD_INT 0
67500: PPUSH
// result := [ 0 , 0 , 0 ] ;
67501: LD_ADDR_VAR 0 2
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// if not base then
67520: LD_VAR 0 1
67524: NOT
67525: IFFALSE 67529
// exit ;
67527: GO 67578
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67529: LD_ADDR_VAR 0 2
67533: PUSH
67534: LD_VAR 0 1
67538: PPUSH
67539: LD_INT 1
67541: PPUSH
67542: CALL_OW 275
67546: PUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: LD_INT 2
67554: PPUSH
67555: CALL_OW 275
67559: PUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: LD_INT 3
67567: PPUSH
67568: CALL_OW 275
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: LIST
67577: ST_TO_ADDR
// end ;
67578: LD_VAR 0 2
67582: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67583: LD_INT 0
67585: PPUSH
67586: PPUSH
// result := array ;
67587: LD_ADDR_VAR 0 3
67591: PUSH
67592: LD_VAR 0 1
67596: ST_TO_ADDR
// if size >= result then
67597: LD_VAR 0 2
67601: PUSH
67602: LD_VAR 0 3
67606: GREATEREQUAL
67607: IFFALSE 67611
// exit ;
67609: GO 67661
// if size then
67611: LD_VAR 0 2
67615: IFFALSE 67661
// for i := array downto size do
67617: LD_ADDR_VAR 0 4
67621: PUSH
67622: DOUBLE
67623: LD_VAR 0 1
67627: INC
67628: ST_TO_ADDR
67629: LD_VAR 0 2
67633: PUSH
67634: FOR_DOWNTO
67635: IFFALSE 67659
// result := Delete ( result , result ) ;
67637: LD_ADDR_VAR 0 3
67641: PUSH
67642: LD_VAR 0 3
67646: PPUSH
67647: LD_VAR 0 3
67651: PPUSH
67652: CALL_OW 3
67656: ST_TO_ADDR
67657: GO 67634
67659: POP
67660: POP
// end ;
67661: LD_VAR 0 3
67665: RET
// export function ComExit ( unit ) ; var tmp ; begin
67666: LD_INT 0
67668: PPUSH
67669: PPUSH
// if not IsInUnit ( unit ) then
67670: LD_VAR 0 1
67674: PPUSH
67675: CALL_OW 310
67679: NOT
67680: IFFALSE 67684
// exit ;
67682: GO 67744
// tmp := IsInUnit ( unit ) ;
67684: LD_ADDR_VAR 0 3
67688: PUSH
67689: LD_VAR 0 1
67693: PPUSH
67694: CALL_OW 310
67698: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67699: LD_VAR 0 3
67703: PPUSH
67704: CALL_OW 247
67708: PUSH
67709: LD_INT 2
67711: EQUAL
67712: IFFALSE 67725
// ComExitVehicle ( unit ) else
67714: LD_VAR 0 1
67718: PPUSH
67719: CALL_OW 121
67723: GO 67734
// ComExitBuilding ( unit ) ;
67725: LD_VAR 0 1
67729: PPUSH
67730: CALL_OW 122
// result := tmp ;
67734: LD_ADDR_VAR 0 2
67738: PUSH
67739: LD_VAR 0 3
67743: ST_TO_ADDR
// end ;
67744: LD_VAR 0 2
67748: RET
// export function ComExitAll ( units ) ; var i ; begin
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
// if not units then
67753: LD_VAR 0 1
67757: NOT
67758: IFFALSE 67762
// exit ;
67760: GO 67788
// for i in units do
67762: LD_ADDR_VAR 0 3
67766: PUSH
67767: LD_VAR 0 1
67771: PUSH
67772: FOR_IN
67773: IFFALSE 67786
// ComExit ( i ) ;
67775: LD_VAR 0 3
67779: PPUSH
67780: CALL 67666 0 1
67784: GO 67772
67786: POP
67787: POP
// end ;
67788: LD_VAR 0 2
67792: RET
// export function ResetHc ; begin
67793: LD_INT 0
67795: PPUSH
// InitHc ;
67796: CALL_OW 19
// hc_importance := 0 ;
67800: LD_ADDR_OWVAR 32
67804: PUSH
67805: LD_INT 0
67807: ST_TO_ADDR
// end ;
67808: LD_VAR 0 1
67812: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67813: LD_INT 0
67815: PPUSH
67816: PPUSH
67817: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67818: LD_ADDR_VAR 0 6
67822: PUSH
67823: LD_VAR 0 1
67827: PUSH
67828: LD_VAR 0 3
67832: PLUS
67833: PUSH
67834: LD_INT 2
67836: DIV
67837: ST_TO_ADDR
// if _x < 0 then
67838: LD_VAR 0 6
67842: PUSH
67843: LD_INT 0
67845: LESS
67846: IFFALSE 67863
// _x := _x * - 1 ;
67848: LD_ADDR_VAR 0 6
67852: PUSH
67853: LD_VAR 0 6
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: MUL
67862: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67863: LD_ADDR_VAR 0 7
67867: PUSH
67868: LD_VAR 0 2
67872: PUSH
67873: LD_VAR 0 4
67877: PLUS
67878: PUSH
67879: LD_INT 2
67881: DIV
67882: ST_TO_ADDR
// if _y < 0 then
67883: LD_VAR 0 7
67887: PUSH
67888: LD_INT 0
67890: LESS
67891: IFFALSE 67908
// _y := _y * - 1 ;
67893: LD_ADDR_VAR 0 7
67897: PUSH
67898: LD_VAR 0 7
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: MUL
67907: ST_TO_ADDR
// result := [ _x , _y ] ;
67908: LD_ADDR_VAR 0 5
67912: PUSH
67913: LD_VAR 0 6
67917: PUSH
67918: LD_VAR 0 7
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: ST_TO_ADDR
// end ;
67927: LD_VAR 0 5
67931: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67932: LD_INT 0
67934: PPUSH
67935: PPUSH
67936: PPUSH
67937: PPUSH
// task := GetTaskList ( unit ) ;
67938: LD_ADDR_VAR 0 7
67942: PUSH
67943: LD_VAR 0 1
67947: PPUSH
67948: CALL_OW 437
67952: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67953: LD_VAR 0 7
67957: NOT
67958: PUSH
67959: LD_VAR 0 1
67963: PPUSH
67964: LD_VAR 0 2
67968: PPUSH
67969: CALL_OW 308
67973: NOT
67974: AND
67975: IFFALSE 67979
// exit ;
67977: GO 68097
// if IsInArea ( unit , area ) then
67979: LD_VAR 0 1
67983: PPUSH
67984: LD_VAR 0 2
67988: PPUSH
67989: CALL_OW 308
67993: IFFALSE 68011
// begin ComMoveToArea ( unit , goAway ) ;
67995: LD_VAR 0 1
67999: PPUSH
68000: LD_VAR 0 3
68004: PPUSH
68005: CALL_OW 113
// exit ;
68009: GO 68097
// end ; if task [ 1 ] [ 1 ] <> M then
68011: LD_VAR 0 7
68015: PUSH
68016: LD_INT 1
68018: ARRAY
68019: PUSH
68020: LD_INT 1
68022: ARRAY
68023: PUSH
68024: LD_STRING M
68026: NONEQUAL
68027: IFFALSE 68031
// exit ;
68029: GO 68097
// x := task [ 1 ] [ 2 ] ;
68031: LD_ADDR_VAR 0 5
68035: PUSH
68036: LD_VAR 0 7
68040: PUSH
68041: LD_INT 1
68043: ARRAY
68044: PUSH
68045: LD_INT 2
68047: ARRAY
68048: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68049: LD_ADDR_VAR 0 6
68053: PUSH
68054: LD_VAR 0 7
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: PUSH
68063: LD_INT 3
68065: ARRAY
68066: ST_TO_ADDR
// if InArea ( x , y , area ) then
68067: LD_VAR 0 5
68071: PPUSH
68072: LD_VAR 0 6
68076: PPUSH
68077: LD_VAR 0 2
68081: PPUSH
68082: CALL_OW 309
68086: IFFALSE 68097
// ComStop ( unit ) ;
68088: LD_VAR 0 1
68092: PPUSH
68093: CALL_OW 141
// end ;
68097: LD_VAR 0 4
68101: RET
// export function Abs ( value ) ; begin
68102: LD_INT 0
68104: PPUSH
// result := value ;
68105: LD_ADDR_VAR 0 2
68109: PUSH
68110: LD_VAR 0 1
68114: ST_TO_ADDR
// if value < 0 then
68115: LD_VAR 0 1
68119: PUSH
68120: LD_INT 0
68122: LESS
68123: IFFALSE 68140
// result := value * - 1 ;
68125: LD_ADDR_VAR 0 2
68129: PUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: MUL
68139: ST_TO_ADDR
// end ;
68140: LD_VAR 0 2
68144: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68145: LD_INT 0
68147: PPUSH
68148: PPUSH
68149: PPUSH
68150: PPUSH
68151: PPUSH
68152: PPUSH
68153: PPUSH
68154: PPUSH
// if not unit or not building then
68155: LD_VAR 0 1
68159: NOT
68160: PUSH
68161: LD_VAR 0 2
68165: NOT
68166: OR
68167: IFFALSE 68171
// exit ;
68169: GO 68397
// x := GetX ( building ) ;
68171: LD_ADDR_VAR 0 4
68175: PUSH
68176: LD_VAR 0 2
68180: PPUSH
68181: CALL_OW 250
68185: ST_TO_ADDR
// y := GetY ( building ) ;
68186: LD_ADDR_VAR 0 6
68190: PUSH
68191: LD_VAR 0 2
68195: PPUSH
68196: CALL_OW 251
68200: ST_TO_ADDR
// d := GetDir ( building ) ;
68201: LD_ADDR_VAR 0 8
68205: PUSH
68206: LD_VAR 0 2
68210: PPUSH
68211: CALL_OW 254
68215: ST_TO_ADDR
// r := 4 ;
68216: LD_ADDR_VAR 0 9
68220: PUSH
68221: LD_INT 4
68223: ST_TO_ADDR
// for i := 1 to 5 do
68224: LD_ADDR_VAR 0 10
68228: PUSH
68229: DOUBLE
68230: LD_INT 1
68232: DEC
68233: ST_TO_ADDR
68234: LD_INT 5
68236: PUSH
68237: FOR_TO
68238: IFFALSE 68395
// begin _x := ShiftX ( x , d , r + i ) ;
68240: LD_ADDR_VAR 0 5
68244: PUSH
68245: LD_VAR 0 4
68249: PPUSH
68250: LD_VAR 0 8
68254: PPUSH
68255: LD_VAR 0 9
68259: PUSH
68260: LD_VAR 0 10
68264: PLUS
68265: PPUSH
68266: CALL_OW 272
68270: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68271: LD_ADDR_VAR 0 7
68275: PUSH
68276: LD_VAR 0 6
68280: PPUSH
68281: LD_VAR 0 8
68285: PPUSH
68286: LD_VAR 0 9
68290: PUSH
68291: LD_VAR 0 10
68295: PLUS
68296: PPUSH
68297: CALL_OW 273
68301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68302: LD_VAR 0 5
68306: PPUSH
68307: LD_VAR 0 7
68311: PPUSH
68312: CALL_OW 488
68316: PUSH
68317: LD_VAR 0 5
68321: PPUSH
68322: LD_VAR 0 7
68326: PPUSH
68327: CALL_OW 428
68331: PPUSH
68332: CALL_OW 247
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: LD_INT 2
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: IN
68347: NOT
68348: AND
68349: IFFALSE 68393
// begin ComMoveXY ( unit , _x , _y ) ;
68351: LD_VAR 0 1
68355: PPUSH
68356: LD_VAR 0 5
68360: PPUSH
68361: LD_VAR 0 7
68365: PPUSH
68366: CALL_OW 111
// result := [ _x , _y ] ;
68370: LD_ADDR_VAR 0 3
68374: PUSH
68375: LD_VAR 0 5
68379: PUSH
68380: LD_VAR 0 7
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: ST_TO_ADDR
// exit ;
68389: POP
68390: POP
68391: GO 68397
// end ; end ;
68393: GO 68237
68395: POP
68396: POP
// end ;
68397: LD_VAR 0 3
68401: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68402: LD_INT 0
68404: PPUSH
68405: PPUSH
68406: PPUSH
// result := 0 ;
68407: LD_ADDR_VAR 0 3
68411: PUSH
68412: LD_INT 0
68414: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68415: LD_VAR 0 1
68419: PUSH
68420: LD_INT 0
68422: LESS
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 8
68431: GREATER
68432: OR
68433: PUSH
68434: LD_VAR 0 2
68438: PUSH
68439: LD_INT 0
68441: LESS
68442: OR
68443: PUSH
68444: LD_VAR 0 2
68448: PUSH
68449: LD_INT 8
68451: GREATER
68452: OR
68453: IFFALSE 68457
// exit ;
68455: GO 68532
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68457: LD_ADDR_VAR 0 4
68461: PUSH
68462: LD_INT 22
68464: PUSH
68465: LD_VAR 0 2
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PPUSH
68474: CALL_OW 69
68478: PUSH
68479: FOR_IN
68480: IFFALSE 68530
// begin un := UnitShoot ( i ) ;
68482: LD_ADDR_VAR 0 5
68486: PUSH
68487: LD_VAR 0 4
68491: PPUSH
68492: CALL_OW 504
68496: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68497: LD_VAR 0 5
68501: PPUSH
68502: CALL_OW 255
68506: PUSH
68507: LD_VAR 0 1
68511: EQUAL
68512: IFFALSE 68528
// begin result := un ;
68514: LD_ADDR_VAR 0 3
68518: PUSH
68519: LD_VAR 0 5
68523: ST_TO_ADDR
// exit ;
68524: POP
68525: POP
68526: GO 68532
// end ; end ;
68528: GO 68479
68530: POP
68531: POP
// end ;
68532: LD_VAR 0 3
68536: RET
// export function GetCargoBay ( units ) ; begin
68537: LD_INT 0
68539: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68540: LD_ADDR_VAR 0 2
68544: PUSH
68545: LD_VAR 0 1
68549: PPUSH
68550: LD_INT 2
68552: PUSH
68553: LD_INT 34
68555: PUSH
68556: LD_INT 12
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 34
68565: PUSH
68566: LD_INT 51
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 34
68575: PUSH
68576: LD_INT 32
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 34
68585: PUSH
68586: LD_INT 89
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: PPUSH
68600: CALL_OW 72
68604: ST_TO_ADDR
// end ;
68605: LD_VAR 0 2
68609: RET
// export function Negate ( value ) ; begin
68610: LD_INT 0
68612: PPUSH
// result := not value ;
68613: LD_ADDR_VAR 0 2
68617: PUSH
68618: LD_VAR 0 1
68622: NOT
68623: ST_TO_ADDR
// end ;
68624: LD_VAR 0 2
68628: RET
// export function Inc ( value ) ; begin
68629: LD_INT 0
68631: PPUSH
// result := value + 1 ;
68632: LD_ADDR_VAR 0 2
68636: PUSH
68637: LD_VAR 0 1
68641: PUSH
68642: LD_INT 1
68644: PLUS
68645: ST_TO_ADDR
// end ;
68646: LD_VAR 0 2
68650: RET
// export function Dec ( value ) ; begin
68651: LD_INT 0
68653: PPUSH
// result := value - 1 ;
68654: LD_ADDR_VAR 0 2
68658: PUSH
68659: LD_VAR 0 1
68663: PUSH
68664: LD_INT 1
68666: MINUS
68667: ST_TO_ADDR
// end ;
68668: LD_VAR 0 2
68672: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68673: LD_INT 0
68675: PPUSH
68676: PPUSH
68677: PPUSH
68678: PPUSH
68679: PPUSH
68680: PPUSH
68681: PPUSH
68682: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68683: LD_VAR 0 1
68687: PPUSH
68688: LD_VAR 0 2
68692: PPUSH
68693: CALL_OW 488
68697: NOT
68698: PUSH
68699: LD_VAR 0 3
68703: PPUSH
68704: LD_VAR 0 4
68708: PPUSH
68709: CALL_OW 488
68713: NOT
68714: OR
68715: IFFALSE 68728
// begin result := - 1 ;
68717: LD_ADDR_VAR 0 5
68721: PUSH
68722: LD_INT 1
68724: NEG
68725: ST_TO_ADDR
// exit ;
68726: GO 68963
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68728: LD_ADDR_VAR 0 12
68732: PUSH
68733: LD_VAR 0 1
68737: PPUSH
68738: LD_VAR 0 2
68742: PPUSH
68743: LD_VAR 0 3
68747: PPUSH
68748: LD_VAR 0 4
68752: PPUSH
68753: CALL 67813 0 4
68757: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68758: LD_ADDR_VAR 0 11
68762: PUSH
68763: LD_VAR 0 1
68767: PPUSH
68768: LD_VAR 0 2
68772: PPUSH
68773: LD_VAR 0 12
68777: PUSH
68778: LD_INT 1
68780: ARRAY
68781: PPUSH
68782: LD_VAR 0 12
68786: PUSH
68787: LD_INT 2
68789: ARRAY
68790: PPUSH
68791: CALL_OW 298
68795: ST_TO_ADDR
// distance := 9999 ;
68796: LD_ADDR_VAR 0 10
68800: PUSH
68801: LD_INT 9999
68803: ST_TO_ADDR
// for i := 0 to 5 do
68804: LD_ADDR_VAR 0 6
68808: PUSH
68809: DOUBLE
68810: LD_INT 0
68812: DEC
68813: ST_TO_ADDR
68814: LD_INT 5
68816: PUSH
68817: FOR_TO
68818: IFFALSE 68961
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68820: LD_ADDR_VAR 0 7
68824: PUSH
68825: LD_VAR 0 1
68829: PPUSH
68830: LD_VAR 0 6
68834: PPUSH
68835: LD_VAR 0 11
68839: PPUSH
68840: CALL_OW 272
68844: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68845: LD_ADDR_VAR 0 8
68849: PUSH
68850: LD_VAR 0 2
68854: PPUSH
68855: LD_VAR 0 6
68859: PPUSH
68860: LD_VAR 0 11
68864: PPUSH
68865: CALL_OW 273
68869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68870: LD_VAR 0 7
68874: PPUSH
68875: LD_VAR 0 8
68879: PPUSH
68880: CALL_OW 488
68884: NOT
68885: IFFALSE 68889
// continue ;
68887: GO 68817
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68889: LD_ADDR_VAR 0 9
68893: PUSH
68894: LD_VAR 0 12
68898: PUSH
68899: LD_INT 1
68901: ARRAY
68902: PPUSH
68903: LD_VAR 0 12
68907: PUSH
68908: LD_INT 2
68910: ARRAY
68911: PPUSH
68912: LD_VAR 0 7
68916: PPUSH
68917: LD_VAR 0 8
68921: PPUSH
68922: CALL_OW 298
68926: ST_TO_ADDR
// if tmp < distance then
68927: LD_VAR 0 9
68931: PUSH
68932: LD_VAR 0 10
68936: LESS
68937: IFFALSE 68959
// begin result := i ;
68939: LD_ADDR_VAR 0 5
68943: PUSH
68944: LD_VAR 0 6
68948: ST_TO_ADDR
// distance := tmp ;
68949: LD_ADDR_VAR 0 10
68953: PUSH
68954: LD_VAR 0 9
68958: ST_TO_ADDR
// end ; end ;
68959: GO 68817
68961: POP
68962: POP
// end ;
68963: LD_VAR 0 5
68967: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68968: LD_INT 0
68970: PPUSH
68971: PPUSH
// if not driver or not IsInUnit ( driver ) then
68972: LD_VAR 0 1
68976: NOT
68977: PUSH
68978: LD_VAR 0 1
68982: PPUSH
68983: CALL_OW 310
68987: NOT
68988: OR
68989: IFFALSE 68993
// exit ;
68991: GO 69083
// vehicle := IsInUnit ( driver ) ;
68993: LD_ADDR_VAR 0 3
68997: PUSH
68998: LD_VAR 0 1
69002: PPUSH
69003: CALL_OW 310
69007: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69008: LD_VAR 0 1
69012: PPUSH
69013: LD_STRING \
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: PUSH
69043: LD_STRING E
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_VAR 0 3
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PPUSH
69079: CALL_OW 446
// end ;
69083: LD_VAR 0 2
69087: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69088: LD_INT 0
69090: PPUSH
69091: PPUSH
// if not driver or not IsInUnit ( driver ) then
69092: LD_VAR 0 1
69096: NOT
69097: PUSH
69098: LD_VAR 0 1
69102: PPUSH
69103: CALL_OW 310
69107: NOT
69108: OR
69109: IFFALSE 69113
// exit ;
69111: GO 69203
// vehicle := IsInUnit ( driver ) ;
69113: LD_ADDR_VAR 0 3
69117: PUSH
69118: LD_VAR 0 1
69122: PPUSH
69123: CALL_OW 310
69127: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69128: LD_VAR 0 1
69132: PPUSH
69133: LD_STRING \
69135: PUSH
69136: LD_INT 0
69138: PUSH
69139: LD_INT 0
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: PUSH
69163: LD_STRING E
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: LD_VAR 0 3
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: LD_INT 0
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PPUSH
69199: CALL_OW 447
// end ;
69203: LD_VAR 0 2
69207: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69208: LD_INT 0
69210: PPUSH
69211: PPUSH
69212: PPUSH
// tmp := [ ] ;
69213: LD_ADDR_VAR 0 5
69217: PUSH
69218: EMPTY
69219: ST_TO_ADDR
// for i in units do
69220: LD_ADDR_VAR 0 4
69224: PUSH
69225: LD_VAR 0 1
69229: PUSH
69230: FOR_IN
69231: IFFALSE 69269
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69233: LD_ADDR_VAR 0 5
69237: PUSH
69238: LD_VAR 0 5
69242: PPUSH
69243: LD_VAR 0 5
69247: PUSH
69248: LD_INT 1
69250: PLUS
69251: PPUSH
69252: LD_VAR 0 4
69256: PPUSH
69257: CALL_OW 256
69261: PPUSH
69262: CALL_OW 2
69266: ST_TO_ADDR
69267: GO 69230
69269: POP
69270: POP
// if not tmp then
69271: LD_VAR 0 5
69275: NOT
69276: IFFALSE 69280
// exit ;
69278: GO 69328
// if asc then
69280: LD_VAR 0 2
69284: IFFALSE 69308
// result := SortListByListAsc ( units , tmp ) else
69286: LD_ADDR_VAR 0 3
69290: PUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: LD_VAR 0 5
69300: PPUSH
69301: CALL_OW 76
69305: ST_TO_ADDR
69306: GO 69328
// result := SortListByListDesc ( units , tmp ) ;
69308: LD_ADDR_VAR 0 3
69312: PUSH
69313: LD_VAR 0 1
69317: PPUSH
69318: LD_VAR 0 5
69322: PPUSH
69323: CALL_OW 77
69327: ST_TO_ADDR
// end ;
69328: LD_VAR 0 3
69332: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69333: LD_INT 0
69335: PPUSH
69336: PPUSH
// task := GetTaskList ( mech ) ;
69337: LD_ADDR_VAR 0 4
69341: PUSH
69342: LD_VAR 0 1
69346: PPUSH
69347: CALL_OW 437
69351: ST_TO_ADDR
// if not task then
69352: LD_VAR 0 4
69356: NOT
69357: IFFALSE 69361
// exit ;
69359: GO 69403
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69361: LD_ADDR_VAR 0 3
69365: PUSH
69366: LD_VAR 0 4
69370: PUSH
69371: LD_INT 1
69373: ARRAY
69374: PUSH
69375: LD_INT 1
69377: ARRAY
69378: PUSH
69379: LD_STRING r
69381: EQUAL
69382: PUSH
69383: LD_VAR 0 4
69387: PUSH
69388: LD_INT 1
69390: ARRAY
69391: PUSH
69392: LD_INT 4
69394: ARRAY
69395: PUSH
69396: LD_VAR 0 2
69400: EQUAL
69401: AND
69402: ST_TO_ADDR
// end ;
69403: LD_VAR 0 3
69407: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69408: LD_INT 0
69410: PPUSH
// SetDir ( unit , d ) ;
69411: LD_VAR 0 1
69415: PPUSH
69416: LD_VAR 0 4
69420: PPUSH
69421: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69425: LD_VAR 0 1
69429: PPUSH
69430: LD_VAR 0 2
69434: PPUSH
69435: LD_VAR 0 3
69439: PPUSH
69440: LD_VAR 0 5
69444: PPUSH
69445: CALL_OW 48
// end ;
69449: LD_VAR 0 6
69453: RET
// export function ToNaturalNumber ( number ) ; begin
69454: LD_INT 0
69456: PPUSH
// result := number div 1 ;
69457: LD_ADDR_VAR 0 2
69461: PUSH
69462: LD_VAR 0 1
69466: PUSH
69467: LD_INT 1
69469: DIV
69470: ST_TO_ADDR
// if number < 0 then
69471: LD_VAR 0 1
69475: PUSH
69476: LD_INT 0
69478: LESS
69479: IFFALSE 69489
// result := 0 ;
69481: LD_ADDR_VAR 0 2
69485: PUSH
69486: LD_INT 0
69488: ST_TO_ADDR
// end ;
69489: LD_VAR 0 2
69493: RET
// export function SortByClass ( units , class ) ; var un ; begin
69494: LD_INT 0
69496: PPUSH
69497: PPUSH
// if not units or not class then
69498: LD_VAR 0 1
69502: NOT
69503: PUSH
69504: LD_VAR 0 2
69508: NOT
69509: OR
69510: IFFALSE 69514
// exit ;
69512: GO 69609
// result := [ ] ;
69514: LD_ADDR_VAR 0 3
69518: PUSH
69519: EMPTY
69520: ST_TO_ADDR
// for un in units do
69521: LD_ADDR_VAR 0 4
69525: PUSH
69526: LD_VAR 0 1
69530: PUSH
69531: FOR_IN
69532: IFFALSE 69607
// if GetClass ( un ) = class then
69534: LD_VAR 0 4
69538: PPUSH
69539: CALL_OW 257
69543: PUSH
69544: LD_VAR 0 2
69548: EQUAL
69549: IFFALSE 69576
// result := Insert ( result , 1 , un ) else
69551: LD_ADDR_VAR 0 3
69555: PUSH
69556: LD_VAR 0 3
69560: PPUSH
69561: LD_INT 1
69563: PPUSH
69564: LD_VAR 0 4
69568: PPUSH
69569: CALL_OW 2
69573: ST_TO_ADDR
69574: GO 69605
// result := Replace ( result , result + 1 , un ) ;
69576: LD_ADDR_VAR 0 3
69580: PUSH
69581: LD_VAR 0 3
69585: PPUSH
69586: LD_VAR 0 3
69590: PUSH
69591: LD_INT 1
69593: PLUS
69594: PPUSH
69595: LD_VAR 0 4
69599: PPUSH
69600: CALL_OW 1
69604: ST_TO_ADDR
69605: GO 69531
69607: POP
69608: POP
// end ;
69609: LD_VAR 0 3
69613: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69614: LD_INT 0
69616: PPUSH
69617: PPUSH
69618: PPUSH
69619: PPUSH
69620: PPUSH
69621: PPUSH
69622: PPUSH
// result := [ ] ;
69623: LD_ADDR_VAR 0 4
69627: PUSH
69628: EMPTY
69629: ST_TO_ADDR
// if x - r < 0 then
69630: LD_VAR 0 1
69634: PUSH
69635: LD_VAR 0 3
69639: MINUS
69640: PUSH
69641: LD_INT 0
69643: LESS
69644: IFFALSE 69656
// min_x := 0 else
69646: LD_ADDR_VAR 0 8
69650: PUSH
69651: LD_INT 0
69653: ST_TO_ADDR
69654: GO 69672
// min_x := x - r ;
69656: LD_ADDR_VAR 0 8
69660: PUSH
69661: LD_VAR 0 1
69665: PUSH
69666: LD_VAR 0 3
69670: MINUS
69671: ST_TO_ADDR
// if y - r < 0 then
69672: LD_VAR 0 2
69676: PUSH
69677: LD_VAR 0 3
69681: MINUS
69682: PUSH
69683: LD_INT 0
69685: LESS
69686: IFFALSE 69698
// min_y := 0 else
69688: LD_ADDR_VAR 0 7
69692: PUSH
69693: LD_INT 0
69695: ST_TO_ADDR
69696: GO 69714
// min_y := y - r ;
69698: LD_ADDR_VAR 0 7
69702: PUSH
69703: LD_VAR 0 2
69707: PUSH
69708: LD_VAR 0 3
69712: MINUS
69713: ST_TO_ADDR
// max_x := x + r ;
69714: LD_ADDR_VAR 0 9
69718: PUSH
69719: LD_VAR 0 1
69723: PUSH
69724: LD_VAR 0 3
69728: PLUS
69729: ST_TO_ADDR
// max_y := y + r ;
69730: LD_ADDR_VAR 0 10
69734: PUSH
69735: LD_VAR 0 2
69739: PUSH
69740: LD_VAR 0 3
69744: PLUS
69745: ST_TO_ADDR
// for _x = min_x to max_x do
69746: LD_ADDR_VAR 0 5
69750: PUSH
69751: DOUBLE
69752: LD_VAR 0 8
69756: DEC
69757: ST_TO_ADDR
69758: LD_VAR 0 9
69762: PUSH
69763: FOR_TO
69764: IFFALSE 69865
// for _y = min_y to max_y do
69766: LD_ADDR_VAR 0 6
69770: PUSH
69771: DOUBLE
69772: LD_VAR 0 7
69776: DEC
69777: ST_TO_ADDR
69778: LD_VAR 0 10
69782: PUSH
69783: FOR_TO
69784: IFFALSE 69861
// begin if not ValidHex ( _x , _y ) then
69786: LD_VAR 0 5
69790: PPUSH
69791: LD_VAR 0 6
69795: PPUSH
69796: CALL_OW 488
69800: NOT
69801: IFFALSE 69805
// continue ;
69803: GO 69783
// if GetResourceTypeXY ( _x , _y ) then
69805: LD_VAR 0 5
69809: PPUSH
69810: LD_VAR 0 6
69814: PPUSH
69815: CALL_OW 283
69819: IFFALSE 69859
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69821: LD_ADDR_VAR 0 4
69825: PUSH
69826: LD_VAR 0 4
69830: PPUSH
69831: LD_VAR 0 4
69835: PUSH
69836: LD_INT 1
69838: PLUS
69839: PPUSH
69840: LD_VAR 0 5
69844: PUSH
69845: LD_VAR 0 6
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PPUSH
69854: CALL_OW 1
69858: ST_TO_ADDR
// end ;
69859: GO 69783
69861: POP
69862: POP
69863: GO 69763
69865: POP
69866: POP
// end ;
69867: LD_VAR 0 4
69871: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69872: LD_INT 0
69874: PPUSH
69875: PPUSH
69876: PPUSH
69877: PPUSH
69878: PPUSH
69879: PPUSH
69880: PPUSH
69881: PPUSH
// if not units then
69882: LD_VAR 0 1
69886: NOT
69887: IFFALSE 69891
// exit ;
69889: GO 70415
// result := UnitFilter ( units , [ f_ok ] ) ;
69891: LD_ADDR_VAR 0 3
69895: PUSH
69896: LD_VAR 0 1
69900: PPUSH
69901: LD_INT 50
69903: PUSH
69904: EMPTY
69905: LIST
69906: PPUSH
69907: CALL_OW 72
69911: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69912: LD_ADDR_VAR 0 8
69916: PUSH
69917: LD_VAR 0 1
69921: PUSH
69922: LD_INT 1
69924: ARRAY
69925: PPUSH
69926: CALL_OW 255
69930: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69931: LD_ADDR_VAR 0 10
69935: PUSH
69936: LD_INT 29
69938: PUSH
69939: LD_INT 91
69941: PUSH
69942: LD_INT 49
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: LIST
69949: ST_TO_ADDR
// if not result then
69950: LD_VAR 0 3
69954: NOT
69955: IFFALSE 69959
// exit ;
69957: GO 70415
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69959: LD_ADDR_VAR 0 5
69963: PUSH
69964: LD_INT 81
69966: PUSH
69967: LD_VAR 0 8
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PPUSH
69976: CALL_OW 69
69980: ST_TO_ADDR
// for i in result do
69981: LD_ADDR_VAR 0 4
69985: PUSH
69986: LD_VAR 0 3
69990: PUSH
69991: FOR_IN
69992: IFFALSE 70413
// begin tag := GetTag ( i ) + 1 ;
69994: LD_ADDR_VAR 0 9
69998: PUSH
69999: LD_VAR 0 4
70003: PPUSH
70004: CALL_OW 110
70008: PUSH
70009: LD_INT 1
70011: PLUS
70012: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70013: LD_ADDR_VAR 0 7
70017: PUSH
70018: LD_VAR 0 4
70022: PPUSH
70023: CALL_OW 250
70027: PPUSH
70028: LD_VAR 0 4
70032: PPUSH
70033: CALL_OW 251
70037: PPUSH
70038: LD_INT 6
70040: PPUSH
70041: CALL 69614 0 3
70045: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70046: LD_VAR 0 4
70050: PPUSH
70051: CALL_OW 247
70055: PUSH
70056: LD_INT 2
70058: EQUAL
70059: PUSH
70060: LD_VAR 0 7
70064: AND
70065: PUSH
70066: LD_VAR 0 4
70070: PPUSH
70071: CALL_OW 264
70075: PUSH
70076: LD_VAR 0 10
70080: IN
70081: NOT
70082: AND
70083: IFFALSE 70122
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70085: LD_VAR 0 4
70089: PPUSH
70090: LD_VAR 0 7
70094: PUSH
70095: LD_INT 1
70097: ARRAY
70098: PUSH
70099: LD_INT 1
70101: ARRAY
70102: PPUSH
70103: LD_VAR 0 7
70107: PUSH
70108: LD_INT 1
70110: ARRAY
70111: PUSH
70112: LD_INT 2
70114: ARRAY
70115: PPUSH
70116: CALL_OW 116
70120: GO 70411
// if path > tag then
70122: LD_VAR 0 2
70126: PUSH
70127: LD_VAR 0 9
70131: GREATER
70132: IFFALSE 70340
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70134: LD_ADDR_VAR 0 6
70138: PUSH
70139: LD_VAR 0 5
70143: PPUSH
70144: LD_INT 91
70146: PUSH
70147: LD_VAR 0 4
70151: PUSH
70152: LD_INT 8
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: PPUSH
70160: CALL_OW 72
70164: ST_TO_ADDR
// if nearEnemy then
70165: LD_VAR 0 6
70169: IFFALSE 70238
// begin if GetWeapon ( i ) = ru_time_lapser then
70171: LD_VAR 0 4
70175: PPUSH
70176: CALL_OW 264
70180: PUSH
70181: LD_INT 49
70183: EQUAL
70184: IFFALSE 70212
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70186: LD_VAR 0 4
70190: PPUSH
70191: LD_VAR 0 6
70195: PPUSH
70196: LD_VAR 0 4
70200: PPUSH
70201: CALL_OW 74
70205: PPUSH
70206: CALL_OW 112
70210: GO 70236
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70212: LD_VAR 0 4
70216: PPUSH
70217: LD_VAR 0 6
70221: PPUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: CALL_OW 74
70231: PPUSH
70232: CALL 71340 0 2
// end else
70236: GO 70338
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70238: LD_VAR 0 4
70242: PPUSH
70243: LD_VAR 0 2
70247: PUSH
70248: LD_VAR 0 9
70252: ARRAY
70253: PUSH
70254: LD_INT 1
70256: ARRAY
70257: PPUSH
70258: LD_VAR 0 2
70262: PUSH
70263: LD_VAR 0 9
70267: ARRAY
70268: PUSH
70269: LD_INT 2
70271: ARRAY
70272: PPUSH
70273: CALL_OW 297
70277: PUSH
70278: LD_INT 6
70280: GREATER
70281: IFFALSE 70324
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70283: LD_VAR 0 4
70287: PPUSH
70288: LD_VAR 0 2
70292: PUSH
70293: LD_VAR 0 9
70297: ARRAY
70298: PUSH
70299: LD_INT 1
70301: ARRAY
70302: PPUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_VAR 0 9
70312: ARRAY
70313: PUSH
70314: LD_INT 2
70316: ARRAY
70317: PPUSH
70318: CALL_OW 114
70322: GO 70338
// SetTag ( i , tag ) ;
70324: LD_VAR 0 4
70328: PPUSH
70329: LD_VAR 0 9
70333: PPUSH
70334: CALL_OW 109
// end else
70338: GO 70411
// if enemy then
70340: LD_VAR 0 5
70344: IFFALSE 70411
// begin if GetWeapon ( i ) = ru_time_lapser then
70346: LD_VAR 0 4
70350: PPUSH
70351: CALL_OW 264
70355: PUSH
70356: LD_INT 49
70358: EQUAL
70359: IFFALSE 70387
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70361: LD_VAR 0 4
70365: PPUSH
70366: LD_VAR 0 5
70370: PPUSH
70371: LD_VAR 0 4
70375: PPUSH
70376: CALL_OW 74
70380: PPUSH
70381: CALL_OW 112
70385: GO 70411
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70387: LD_VAR 0 4
70391: PPUSH
70392: LD_VAR 0 5
70396: PPUSH
70397: LD_VAR 0 4
70401: PPUSH
70402: CALL_OW 74
70406: PPUSH
70407: CALL 71340 0 2
// end ; end ;
70411: GO 69991
70413: POP
70414: POP
// end ;
70415: LD_VAR 0 3
70419: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70420: LD_INT 0
70422: PPUSH
70423: PPUSH
70424: PPUSH
// if not unit or IsInUnit ( unit ) then
70425: LD_VAR 0 1
70429: NOT
70430: PUSH
70431: LD_VAR 0 1
70435: PPUSH
70436: CALL_OW 310
70440: OR
70441: IFFALSE 70445
// exit ;
70443: GO 70536
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70445: LD_ADDR_VAR 0 4
70449: PUSH
70450: LD_VAR 0 1
70454: PPUSH
70455: CALL_OW 250
70459: PPUSH
70460: LD_VAR 0 2
70464: PPUSH
70465: LD_INT 1
70467: PPUSH
70468: CALL_OW 272
70472: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70473: LD_ADDR_VAR 0 5
70477: PUSH
70478: LD_VAR 0 1
70482: PPUSH
70483: CALL_OW 251
70487: PPUSH
70488: LD_VAR 0 2
70492: PPUSH
70493: LD_INT 1
70495: PPUSH
70496: CALL_OW 273
70500: ST_TO_ADDR
// if ValidHex ( x , y ) then
70501: LD_VAR 0 4
70505: PPUSH
70506: LD_VAR 0 5
70510: PPUSH
70511: CALL_OW 488
70515: IFFALSE 70536
// ComTurnXY ( unit , x , y ) ;
70517: LD_VAR 0 1
70521: PPUSH
70522: LD_VAR 0 4
70526: PPUSH
70527: LD_VAR 0 5
70531: PPUSH
70532: CALL_OW 118
// end ;
70536: LD_VAR 0 3
70540: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70541: LD_INT 0
70543: PPUSH
70544: PPUSH
// result := false ;
70545: LD_ADDR_VAR 0 3
70549: PUSH
70550: LD_INT 0
70552: ST_TO_ADDR
// if not units then
70553: LD_VAR 0 2
70557: NOT
70558: IFFALSE 70562
// exit ;
70560: GO 70607
// for i in units do
70562: LD_ADDR_VAR 0 4
70566: PUSH
70567: LD_VAR 0 2
70571: PUSH
70572: FOR_IN
70573: IFFALSE 70605
// if See ( side , i ) then
70575: LD_VAR 0 1
70579: PPUSH
70580: LD_VAR 0 4
70584: PPUSH
70585: CALL_OW 292
70589: IFFALSE 70603
// begin result := true ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_INT 1
70598: ST_TO_ADDR
// exit ;
70599: POP
70600: POP
70601: GO 70607
// end ;
70603: GO 70572
70605: POP
70606: POP
// end ;
70607: LD_VAR 0 3
70611: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70612: LD_INT 0
70614: PPUSH
70615: PPUSH
70616: PPUSH
70617: PPUSH
// if not unit or not points then
70618: LD_VAR 0 1
70622: NOT
70623: PUSH
70624: LD_VAR 0 2
70628: NOT
70629: OR
70630: IFFALSE 70634
// exit ;
70632: GO 70724
// dist := 99999 ;
70634: LD_ADDR_VAR 0 5
70638: PUSH
70639: LD_INT 99999
70641: ST_TO_ADDR
// for i in points do
70642: LD_ADDR_VAR 0 4
70646: PUSH
70647: LD_VAR 0 2
70651: PUSH
70652: FOR_IN
70653: IFFALSE 70722
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70655: LD_ADDR_VAR 0 6
70659: PUSH
70660: LD_VAR 0 1
70664: PPUSH
70665: LD_VAR 0 4
70669: PUSH
70670: LD_INT 1
70672: ARRAY
70673: PPUSH
70674: LD_VAR 0 4
70678: PUSH
70679: LD_INT 2
70681: ARRAY
70682: PPUSH
70683: CALL_OW 297
70687: ST_TO_ADDR
// if tmpDist < dist then
70688: LD_VAR 0 6
70692: PUSH
70693: LD_VAR 0 5
70697: LESS
70698: IFFALSE 70720
// begin result := i ;
70700: LD_ADDR_VAR 0 3
70704: PUSH
70705: LD_VAR 0 4
70709: ST_TO_ADDR
// dist := tmpDist ;
70710: LD_ADDR_VAR 0 5
70714: PUSH
70715: LD_VAR 0 6
70719: ST_TO_ADDR
// end ; end ;
70720: GO 70652
70722: POP
70723: POP
// end ;
70724: LD_VAR 0 3
70728: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70729: LD_INT 0
70731: PPUSH
// uc_side := side ;
70732: LD_ADDR_OWVAR 20
70736: PUSH
70737: LD_VAR 0 1
70741: ST_TO_ADDR
// uc_nation := 3 ;
70742: LD_ADDR_OWVAR 21
70746: PUSH
70747: LD_INT 3
70749: ST_TO_ADDR
// vc_chassis := 25 ;
70750: LD_ADDR_OWVAR 37
70754: PUSH
70755: LD_INT 25
70757: ST_TO_ADDR
// vc_engine := engine_siberite ;
70758: LD_ADDR_OWVAR 39
70762: PUSH
70763: LD_INT 3
70765: ST_TO_ADDR
// vc_control := control_computer ;
70766: LD_ADDR_OWVAR 38
70770: PUSH
70771: LD_INT 3
70773: ST_TO_ADDR
// vc_weapon := 59 ;
70774: LD_ADDR_OWVAR 40
70778: PUSH
70779: LD_INT 59
70781: ST_TO_ADDR
// result := CreateVehicle ;
70782: LD_ADDR_VAR 0 5
70786: PUSH
70787: CALL_OW 45
70791: ST_TO_ADDR
// SetDir ( result , d ) ;
70792: LD_VAR 0 5
70796: PPUSH
70797: LD_VAR 0 4
70801: PPUSH
70802: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70806: LD_VAR 0 5
70810: PPUSH
70811: LD_VAR 0 2
70815: PPUSH
70816: LD_VAR 0 3
70820: PPUSH
70821: LD_INT 0
70823: PPUSH
70824: CALL_OW 48
// end ;
70828: LD_VAR 0 5
70832: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70833: LD_INT 0
70835: PPUSH
70836: PPUSH
70837: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70838: LD_ADDR_VAR 0 2
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: LD_INT 0
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70861: LD_VAR 0 1
70865: NOT
70866: PUSH
70867: LD_VAR 0 1
70871: PPUSH
70872: CALL_OW 264
70876: PUSH
70877: LD_INT 12
70879: PUSH
70880: LD_INT 51
70882: PUSH
70883: LD_INT 32
70885: PUSH
70886: LD_INT 89
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: IN
70895: NOT
70896: OR
70897: IFFALSE 70901
// exit ;
70899: GO 70999
// for i := 1 to 3 do
70901: LD_ADDR_VAR 0 3
70905: PUSH
70906: DOUBLE
70907: LD_INT 1
70909: DEC
70910: ST_TO_ADDR
70911: LD_INT 3
70913: PUSH
70914: FOR_TO
70915: IFFALSE 70997
// begin tmp := GetCargo ( cargo , i ) ;
70917: LD_ADDR_VAR 0 4
70921: PUSH
70922: LD_VAR 0 1
70926: PPUSH
70927: LD_VAR 0 3
70931: PPUSH
70932: CALL_OW 289
70936: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70937: LD_ADDR_VAR 0 2
70941: PUSH
70942: LD_VAR 0 2
70946: PPUSH
70947: LD_VAR 0 3
70951: PPUSH
70952: LD_VAR 0 4
70956: PPUSH
70957: CALL_OW 1
70961: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70962: LD_ADDR_VAR 0 2
70966: PUSH
70967: LD_VAR 0 2
70971: PPUSH
70972: LD_INT 4
70974: PPUSH
70975: LD_VAR 0 2
70979: PUSH
70980: LD_INT 4
70982: ARRAY
70983: PUSH
70984: LD_VAR 0 4
70988: PLUS
70989: PPUSH
70990: CALL_OW 1
70994: ST_TO_ADDR
// end ;
70995: GO 70914
70997: POP
70998: POP
// end ;
70999: LD_VAR 0 2
71003: RET
// export function Length ( array ) ; begin
71004: LD_INT 0
71006: PPUSH
// result := array + 0 ;
71007: LD_ADDR_VAR 0 2
71011: PUSH
71012: LD_VAR 0 1
71016: PUSH
71017: LD_INT 0
71019: PLUS
71020: ST_TO_ADDR
// end ;
71021: LD_VAR 0 2
71025: RET
// export function PrepareArray ( array ) ; begin
71026: LD_INT 0
71028: PPUSH
// result := array diff 0 ;
71029: LD_ADDR_VAR 0 2
71033: PUSH
71034: LD_VAR 0 1
71038: PUSH
71039: LD_INT 0
71041: DIFF
71042: ST_TO_ADDR
// if not result [ 1 ] then
71043: LD_VAR 0 2
71047: PUSH
71048: LD_INT 1
71050: ARRAY
71051: NOT
71052: IFFALSE 71072
// result := Delete ( result , 1 ) ;
71054: LD_ADDR_VAR 0 2
71058: PUSH
71059: LD_VAR 0 2
71063: PPUSH
71064: LD_INT 1
71066: PPUSH
71067: CALL_OW 3
71071: ST_TO_ADDR
// end ;
71072: LD_VAR 0 2
71076: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71077: LD_INT 0
71079: PPUSH
71080: PPUSH
71081: PPUSH
71082: PPUSH
// sibRocketRange := 25 ;
71083: LD_ADDR_VAR 0 6
71087: PUSH
71088: LD_INT 25
71090: ST_TO_ADDR
// result := false ;
71091: LD_ADDR_VAR 0 4
71095: PUSH
71096: LD_INT 0
71098: ST_TO_ADDR
// for i := 0 to 5 do
71099: LD_ADDR_VAR 0 5
71103: PUSH
71104: DOUBLE
71105: LD_INT 0
71107: DEC
71108: ST_TO_ADDR
71109: LD_INT 5
71111: PUSH
71112: FOR_TO
71113: IFFALSE 71180
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71115: LD_VAR 0 1
71119: PPUSH
71120: LD_VAR 0 5
71124: PPUSH
71125: LD_VAR 0 6
71129: PPUSH
71130: CALL_OW 272
71134: PPUSH
71135: LD_VAR 0 2
71139: PPUSH
71140: LD_VAR 0 5
71144: PPUSH
71145: LD_VAR 0 6
71149: PPUSH
71150: CALL_OW 273
71154: PPUSH
71155: LD_VAR 0 3
71159: PPUSH
71160: CALL_OW 309
71164: IFFALSE 71178
// begin result := true ;
71166: LD_ADDR_VAR 0 4
71170: PUSH
71171: LD_INT 1
71173: ST_TO_ADDR
// exit ;
71174: POP
71175: POP
71176: GO 71182
// end ;
71178: GO 71112
71180: POP
71181: POP
// end ;
71182: LD_VAR 0 4
71186: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71187: LD_INT 0
71189: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71190: LD_VAR 0 1
71194: PPUSH
71195: LD_VAR 0 2
71199: PPUSH
71200: LD_INT 0
71202: PPUSH
71203: LD_INT 0
71205: PPUSH
71206: LD_INT 1
71208: PPUSH
71209: LD_INT 0
71211: PPUSH
71212: CALL_OW 587
// end ;
71216: LD_VAR 0 3
71220: RET
// export function CenterOnNow ( unit ) ; begin
71221: LD_INT 0
71223: PPUSH
// result := IsInUnit ( unit ) ;
71224: LD_ADDR_VAR 0 2
71228: PUSH
71229: LD_VAR 0 1
71233: PPUSH
71234: CALL_OW 310
71238: ST_TO_ADDR
// if not result then
71239: LD_VAR 0 2
71243: NOT
71244: IFFALSE 71256
// result := unit ;
71246: LD_ADDR_VAR 0 2
71250: PUSH
71251: LD_VAR 0 1
71255: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71256: LD_VAR 0 1
71260: PPUSH
71261: CALL_OW 87
// end ;
71265: LD_VAR 0 2
71269: RET
// export function ComMoveHex ( unit , hex ) ; begin
71270: LD_INT 0
71272: PPUSH
// if not hex then
71273: LD_VAR 0 2
71277: NOT
71278: IFFALSE 71282
// exit ;
71280: GO 71335
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71282: LD_VAR 0 2
71286: PUSH
71287: LD_INT 1
71289: ARRAY
71290: PPUSH
71291: LD_VAR 0 2
71295: PUSH
71296: LD_INT 2
71298: ARRAY
71299: PPUSH
71300: CALL_OW 428
71304: IFFALSE 71308
// exit ;
71306: GO 71335
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71308: LD_VAR 0 1
71312: PPUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_INT 1
71320: ARRAY
71321: PPUSH
71322: LD_VAR 0 2
71326: PUSH
71327: LD_INT 2
71329: ARRAY
71330: PPUSH
71331: CALL_OW 111
// end ;
71335: LD_VAR 0 3
71339: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71340: LD_INT 0
71342: PPUSH
71343: PPUSH
71344: PPUSH
// if not unit or not enemy then
71345: LD_VAR 0 1
71349: NOT
71350: PUSH
71351: LD_VAR 0 2
71355: NOT
71356: OR
71357: IFFALSE 71361
// exit ;
71359: GO 71485
// x := GetX ( enemy ) ;
71361: LD_ADDR_VAR 0 4
71365: PUSH
71366: LD_VAR 0 2
71370: PPUSH
71371: CALL_OW 250
71375: ST_TO_ADDR
// y := GetY ( enemy ) ;
71376: LD_ADDR_VAR 0 5
71380: PUSH
71381: LD_VAR 0 2
71385: PPUSH
71386: CALL_OW 251
71390: ST_TO_ADDR
// if ValidHex ( x , y ) then
71391: LD_VAR 0 4
71395: PPUSH
71396: LD_VAR 0 5
71400: PPUSH
71401: CALL_OW 488
71405: IFFALSE 71485
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71407: LD_VAR 0 2
71411: PPUSH
71412: CALL_OW 247
71416: PUSH
71417: LD_INT 3
71419: PUSH
71420: LD_INT 2
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: IN
71427: PUSH
71428: LD_VAR 0 1
71432: PPUSH
71433: CALL_OW 255
71437: PPUSH
71438: LD_VAR 0 2
71442: PPUSH
71443: CALL_OW 292
71447: AND
71448: IFFALSE 71466
// ComAttackUnit ( unit , enemy ) else
71450: LD_VAR 0 1
71454: PPUSH
71455: LD_VAR 0 2
71459: PPUSH
71460: CALL_OW 115
71464: GO 71485
// ComAgressiveMove ( unit , x , y ) ;
71466: LD_VAR 0 1
71470: PPUSH
71471: LD_VAR 0 4
71475: PPUSH
71476: LD_VAR 0 5
71480: PPUSH
71481: CALL_OW 114
// end ;
71485: LD_VAR 0 3
71489: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71490: LD_INT 0
71492: PPUSH
71493: PPUSH
71494: PPUSH
// list := AreaToList ( area , 0 ) ;
71495: LD_ADDR_VAR 0 5
71499: PUSH
71500: LD_VAR 0 1
71504: PPUSH
71505: LD_INT 0
71507: PPUSH
71508: CALL_OW 517
71512: ST_TO_ADDR
// if not list then
71513: LD_VAR 0 5
71517: NOT
71518: IFFALSE 71522
// exit ;
71520: GO 71652
// if all then
71522: LD_VAR 0 2
71526: IFFALSE 71614
// begin for i := 1 to list [ 1 ] do
71528: LD_ADDR_VAR 0 4
71532: PUSH
71533: DOUBLE
71534: LD_INT 1
71536: DEC
71537: ST_TO_ADDR
71538: LD_VAR 0 5
71542: PUSH
71543: LD_INT 1
71545: ARRAY
71546: PUSH
71547: FOR_TO
71548: IFFALSE 71610
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71550: LD_ADDR_VAR 0 3
71554: PUSH
71555: LD_VAR 0 3
71559: PPUSH
71560: LD_VAR 0 3
71564: PUSH
71565: LD_INT 1
71567: PLUS
71568: PPUSH
71569: LD_VAR 0 5
71573: PUSH
71574: LD_INT 1
71576: ARRAY
71577: PUSH
71578: LD_VAR 0 4
71582: ARRAY
71583: PUSH
71584: LD_VAR 0 5
71588: PUSH
71589: LD_INT 2
71591: ARRAY
71592: PUSH
71593: LD_VAR 0 4
71597: ARRAY
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PPUSH
71603: CALL_OW 1
71607: ST_TO_ADDR
71608: GO 71547
71610: POP
71611: POP
// exit ;
71612: GO 71652
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71614: LD_ADDR_VAR 0 3
71618: PUSH
71619: LD_VAR 0 5
71623: PUSH
71624: LD_INT 1
71626: ARRAY
71627: PUSH
71628: LD_INT 1
71630: ARRAY
71631: PUSH
71632: LD_VAR 0 5
71636: PUSH
71637: LD_INT 2
71639: ARRAY
71640: PUSH
71641: LD_INT 1
71643: ARRAY
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: EMPTY
71650: LIST
71651: ST_TO_ADDR
// end ;
71652: LD_VAR 0 3
71656: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71657: LD_INT 0
71659: PPUSH
71660: PPUSH
// list := AreaToList ( area , 0 ) ;
71661: LD_ADDR_VAR 0 4
71665: PUSH
71666: LD_VAR 0 1
71670: PPUSH
71671: LD_INT 0
71673: PPUSH
71674: CALL_OW 517
71678: ST_TO_ADDR
// if not list then
71679: LD_VAR 0 4
71683: NOT
71684: IFFALSE 71688
// exit ;
71686: GO 71729
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71688: LD_ADDR_VAR 0 3
71692: PUSH
71693: LD_VAR 0 4
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: PUSH
71702: LD_INT 1
71704: ARRAY
71705: PUSH
71706: LD_VAR 0 4
71710: PUSH
71711: LD_INT 2
71713: ARRAY
71714: PUSH
71715: LD_INT 1
71717: ARRAY
71718: PUSH
71719: LD_VAR 0 2
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: LIST
71728: ST_TO_ADDR
// end ;
71729: LD_VAR 0 3
71733: RET
// export function First ( array ) ; begin
71734: LD_INT 0
71736: PPUSH
// if not array then
71737: LD_VAR 0 1
71741: NOT
71742: IFFALSE 71746
// exit ;
71744: GO 71760
// result := array [ 1 ] ;
71746: LD_ADDR_VAR 0 2
71750: PUSH
71751: LD_VAR 0 1
71755: PUSH
71756: LD_INT 1
71758: ARRAY
71759: ST_TO_ADDR
// end ;
71760: LD_VAR 0 2
71764: RET
// export function Last ( array ) ; begin
71765: LD_INT 0
71767: PPUSH
// if not array then
71768: LD_VAR 0 1
71772: NOT
71773: IFFALSE 71777
// exit ;
71775: GO 71793
// result := array [ array ] ;
71777: LD_ADDR_VAR 0 2
71781: PUSH
71782: LD_VAR 0 1
71786: PUSH
71787: LD_VAR 0 1
71791: ARRAY
71792: ST_TO_ADDR
// end ; end_of_file
71793: LD_VAR 0 2
71797: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71798: LD_VAR 0 1
71802: PUSH
71803: LD_INT 200
71805: DOUBLE
71806: GREATEREQUAL
71807: IFFALSE 71815
71809: LD_INT 299
71811: DOUBLE
71812: LESSEQUAL
71813: IFTRUE 71817
71815: GO 71849
71817: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71818: LD_VAR 0 1
71822: PPUSH
71823: LD_VAR 0 2
71827: PPUSH
71828: LD_VAR 0 3
71832: PPUSH
71833: LD_VAR 0 4
71837: PPUSH
71838: LD_VAR 0 5
71842: PPUSH
71843: CALL 25048 0 5
71847: GO 71926
71849: LD_INT 300
71851: DOUBLE
71852: GREATEREQUAL
71853: IFFALSE 71861
71855: LD_INT 399
71857: DOUBLE
71858: LESSEQUAL
71859: IFTRUE 71863
71861: GO 71925
71863: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71864: LD_VAR 0 1
71868: PPUSH
71869: LD_VAR 0 2
71873: PPUSH
71874: LD_VAR 0 3
71878: PPUSH
71879: LD_VAR 0 4
71883: PPUSH
71884: LD_VAR 0 5
71888: PPUSH
71889: LD_VAR 0 6
71893: PPUSH
71894: LD_VAR 0 7
71898: PPUSH
71899: LD_VAR 0 8
71903: PPUSH
71904: LD_VAR 0 9
71908: PPUSH
71909: LD_VAR 0 10
71913: PPUSH
71914: LD_VAR 0 11
71918: PPUSH
71919: CALL 21373 0 11
71923: GO 71926
71925: POP
// end ;
71926: PPOPN 11
71928: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71929: LD_VAR 0 1
71933: PPUSH
71934: LD_VAR 0 2
71938: PPUSH
71939: LD_VAR 0 3
71943: PPUSH
71944: LD_VAR 0 4
71948: PPUSH
71949: LD_VAR 0 5
71953: PPUSH
71954: CALL 24784 0 5
// end ; end_of_file
71958: PPOPN 5
71960: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71961: LD_VAR 0 1
71965: PPUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_VAR 0 3
71975: PPUSH
71976: LD_VAR 0 4
71980: PPUSH
71981: LD_VAR 0 5
71985: PPUSH
71986: LD_VAR 0 6
71990: PPUSH
71991: CALL 9025 0 6
// end ;
71995: PPOPN 6
71997: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71998: LD_INT 0
72000: PPUSH
// begin if not units then
72001: LD_VAR 0 1
72005: NOT
72006: IFFALSE 72010
// exit ;
72008: GO 72010
// end ;
72010: PPOPN 7
72012: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72013: CALL 8929 0 0
// end ;
72017: PPOPN 1
72019: END
