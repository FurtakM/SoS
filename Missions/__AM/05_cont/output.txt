// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 25859 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 25859 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 25859 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 25859 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 25859 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 25859 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 25859 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 25859 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 25859 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 25859 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_EXP 16
7429: EQUAL
7430: IFFALSE 7439
// YouLost ( JMM ) ;
7432: LD_STRING JMM
7434: PPUSH
7435: CALL_OW 104
// if un = Delta then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_EXP 6
7448: EQUAL
7449: IFFALSE 7472
// begin Delta := 0 ;
7451: LD_ADDR_EXP 6
7455: PUSH
7456: LD_INT 0
7458: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7459: LD_INT 0
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 324
// end ; if un in ar_forces then
7472: LD_VAR 0 1
7476: PUSH
7477: LD_EXP 27
7481: IN
7482: IFFALSE 7500
// ar_forces := ar_forces diff un ;
7484: LD_ADDR_EXP 27
7488: PUSH
7489: LD_EXP 27
7493: PUSH
7494: LD_VAR 0 1
7498: DIFF
7499: ST_TO_ADDR
// if un in ap_killers then
7500: LD_VAR 0 1
7504: PUSH
7505: LD_EXP 28
7509: IN
7510: IFFALSE 7528
// ap_killers := ap_killers diff un ;
7512: LD_ADDR_EXP 28
7516: PUSH
7517: LD_EXP 28
7521: PUSH
7522: LD_VAR 0 1
7526: DIFF
7527: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7528: LD_VAR 0 1
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 12
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 16
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: IN
7566: IFFALSE 7582
// apeKillCounter := apeKillCounter + 1 ;
7568: LD_ADDR_EXP 15
7572: PUSH
7573: LD_EXP 15
7577: PUSH
7578: LD_INT 1
7580: PLUS
7581: ST_TO_ADDR
// end ;
7582: PPOPN 1
7584: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7585: LD_VAR 0 1
7589: PUSH
7590: LD_INT 1
7592: EQUAL
7593: PUSH
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 2
7601: EQUAL
7602: AND
7603: PUSH
7604: LD_EXP 13
7608: NOT
7609: AND
7610: IFFALSE 7620
// arab_spotted := true ;
7612: LD_ADDR_EXP 13
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
7620: PPOPN 2
7622: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7623: LD_ADDR_OWVAR 57
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// end_mission := true ;
7631: LD_ADDR_EXP 14
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// end ;
7639: PPOPN 1
7641: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7671
// apeman_counter := apeman_counter + 1 ;
7657: LD_ADDR_EXP 12
7661: PUSH
7662: LD_EXP 12
7666: PUSH
7667: LD_INT 1
7669: PLUS
7670: ST_TO_ADDR
// if not first_apeman_tamed then
7671: LD_EXP 8
7675: NOT
7676: IFFALSE 7876
// begin first_apeman_tamed := true ;
7678: LD_ADDR_EXP 8
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if sci = Gladstone then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 17
7695: EQUAL
7696: IFFALSE 7710
// Say ( Gladstone , D7b-Glad-1 ) ;
7698: LD_EXP 17
7702: PPUSH
7703: LD_STRING D7b-Glad-1
7705: PPUSH
7706: CALL_OW 88
// if sci = Denis then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_EXP 19
7719: EQUAL
7720: IFFALSE 7734
// Say ( Denis , D7a-Den-1 ) ;
7722: LD_EXP 19
7726: PPUSH
7727: LD_STRING D7a-Den-1
7729: PPUSH
7730: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7734: LD_VAR 0 2
7738: PUSH
7739: LD_EXP 16
7743: PUSH
7744: LD_EXP 17
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_EXP 22
7758: PUSH
7759: LD_EXP 23
7763: PUSH
7764: LD_EXP 24
7768: PUSH
7769: LD_EXP 25
7773: PUSH
7774: LD_EXP 21
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: NOT
7790: IFFALSE 7833
// begin if GetSex ( sci ) = sex_male then
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 258
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: IFFALSE 7821
// Say ( sci , D7c-Sci1-1 ) else
7807: LD_VAR 0 2
7811: PPUSH
7812: LD_STRING D7c-Sci1-1
7814: PPUSH
7815: CALL_OW 88
7819: GO 7833
// Say ( sci , D7c-FSci1-1 ) ;
7821: LD_VAR 0 2
7825: PPUSH
7826: LD_STRING D7c-FSci1-1
7828: PPUSH
7829: CALL_OW 88
// end ; if not sci = Gladstone then
7833: LD_VAR 0 2
7837: PUSH
7838: LD_EXP 17
7842: EQUAL
7843: NOT
7844: IFFALSE 7858
// Say ( Gladstone , D7c-Glad-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING D7c-Glad-1
7853: PPUSH
7854: CALL_OW 88
// if Lisa then
7858: LD_EXP 22
7862: IFFALSE 7876
// Say ( Lisa , D8-Lisa-1 ) ;
7864: LD_EXP 22
7868: PPUSH
7869: LD_STRING D8-Lisa-1
7871: PPUSH
7872: CALL_OW 88
// end ; end ; end_of_file
7876: PPOPN 2
7878: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7879: LD_INT 0
7881: PPUSH
// ar_miner := 81 ;
7882: LD_ADDR_EXP 36
7886: PUSH
7887: LD_INT 81
7889: ST_TO_ADDR
// ar_crane := 88 ;
7890: LD_ADDR_EXP 35
7894: PUSH
7895: LD_INT 88
7897: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7898: LD_ADDR_EXP 30
7902: PUSH
7903: LD_INT 89
7905: ST_TO_ADDR
// us_hack := 99 ;
7906: LD_ADDR_EXP 31
7910: PUSH
7911: LD_INT 99
7913: ST_TO_ADDR
// us_artillery := 97 ;
7914: LD_ADDR_EXP 32
7918: PUSH
7919: LD_INT 97
7921: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7922: LD_ADDR_EXP 33
7926: PUSH
7927: LD_INT 91
7929: ST_TO_ADDR
// ar_mortar := 92 ;
7930: LD_ADDR_EXP 34
7934: PUSH
7935: LD_INT 92
7937: ST_TO_ADDR
// ru_radar := 98 ;
7938: LD_ADDR_EXP 29
7942: PUSH
7943: LD_INT 98
7945: ST_TO_ADDR
// tech_Artillery := 80 ;
7946: LD_ADDR_EXP 37
7950: PUSH
7951: LD_INT 80
7953: ST_TO_ADDR
// tech_RadMat := 81 ;
7954: LD_ADDR_EXP 38
7958: PUSH
7959: LD_INT 81
7961: ST_TO_ADDR
// tech_BasicTools := 82 ;
7962: LD_ADDR_EXP 39
7966: PUSH
7967: LD_INT 82
7969: ST_TO_ADDR
// tech_Cargo := 83 ;
7970: LD_ADDR_EXP 40
7974: PUSH
7975: LD_INT 83
7977: ST_TO_ADDR
// tech_Track := 84 ;
7978: LD_ADDR_EXP 41
7982: PUSH
7983: LD_INT 84
7985: ST_TO_ADDR
// tech_Crane := 85 ;
7986: LD_ADDR_EXP 42
7990: PUSH
7991: LD_INT 85
7993: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7994: LD_ADDR_EXP 43
7998: PUSH
7999: LD_INT 86
8001: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8002: LD_ADDR_EXP 44
8006: PUSH
8007: LD_INT 87
8009: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8010: LD_ADDR_EXP 45
8014: PUSH
8015: LD_INT 88
8017: ST_TO_ADDR
// class_mastodont := 31 ;
8018: LD_ADDR_EXP 46
8022: PUSH
8023: LD_INT 31
8025: ST_TO_ADDR
// class_horse := 21 ;
8026: LD_ADDR_EXP 47
8030: PUSH
8031: LD_INT 21
8033: ST_TO_ADDR
// end ;
8034: LD_VAR 0 1
8038: RET
// every 1 do
8039: GO 8041
8041: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8042: CALL 7879 0 0
8046: END
// every 0 0$1 do
8047: GO 8049
8049: DISABLE
// begin enable ;
8050: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8051: LD_STRING updateTimer(
8053: PUSH
8054: LD_OWVAR 1
8058: STR
8059: PUSH
8060: LD_STRING );
8062: STR
8063: PPUSH
8064: CALL_OW 559
// end ;
8068: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8069: LD_INT 0
8071: PPUSH
// if p2 = 100 then
8072: LD_VAR 0 2
8076: PUSH
8077: LD_INT 100
8079: EQUAL
8080: IFFALSE 9083
// begin if not StreamModeActive then
8082: LD_EXP 48
8086: NOT
8087: IFFALSE 8097
// StreamModeActive := true ;
8089: LD_ADDR_EXP 48
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 0 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 0
8104: EQUAL
8105: IFFALSE 8111
// InitStreamMode ;
8107: CALL 9243 0 0
// if p3 = 1 then
8111: LD_VAR 0 3
8115: PUSH
8116: LD_INT 1
8118: EQUAL
8119: IFFALSE 8129
// sRocket := true ;
8121: LD_ADDR_EXP 53
8125: PUSH
8126: LD_INT 1
8128: ST_TO_ADDR
// if p3 = 2 then
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 2
8136: EQUAL
8137: IFFALSE 8147
// sSpeed := true ;
8139: LD_ADDR_EXP 52
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// if p3 = 3 then
8147: LD_VAR 0 3
8151: PUSH
8152: LD_INT 3
8154: EQUAL
8155: IFFALSE 8165
// sEngine := true ;
8157: LD_ADDR_EXP 54
8161: PUSH
8162: LD_INT 1
8164: ST_TO_ADDR
// if p3 = 4 then
8165: LD_VAR 0 3
8169: PUSH
8170: LD_INT 4
8172: EQUAL
8173: IFFALSE 8183
// sSpec := true ;
8175: LD_ADDR_EXP 51
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// if p3 = 5 then
8183: LD_VAR 0 3
8187: PUSH
8188: LD_INT 5
8190: EQUAL
8191: IFFALSE 8201
// sLevel := true ;
8193: LD_ADDR_EXP 55
8197: PUSH
8198: LD_INT 1
8200: ST_TO_ADDR
// if p3 = 6 then
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 6
8208: EQUAL
8209: IFFALSE 8219
// sArmoury := true ;
8211: LD_ADDR_EXP 56
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// if p3 = 7 then
8219: LD_VAR 0 3
8223: PUSH
8224: LD_INT 7
8226: EQUAL
8227: IFFALSE 8237
// sRadar := true ;
8229: LD_ADDR_EXP 57
8233: PUSH
8234: LD_INT 1
8236: ST_TO_ADDR
// if p3 = 8 then
8237: LD_VAR 0 3
8241: PUSH
8242: LD_INT 8
8244: EQUAL
8245: IFFALSE 8255
// sBunker := true ;
8247: LD_ADDR_EXP 58
8251: PUSH
8252: LD_INT 1
8254: ST_TO_ADDR
// if p3 = 9 then
8255: LD_VAR 0 3
8259: PUSH
8260: LD_INT 9
8262: EQUAL
8263: IFFALSE 8273
// sHack := true ;
8265: LD_ADDR_EXP 59
8269: PUSH
8270: LD_INT 1
8272: ST_TO_ADDR
// if p3 = 10 then
8273: LD_VAR 0 3
8277: PUSH
8278: LD_INT 10
8280: EQUAL
8281: IFFALSE 8291
// sFire := true ;
8283: LD_ADDR_EXP 60
8287: PUSH
8288: LD_INT 1
8290: ST_TO_ADDR
// if p3 = 11 then
8291: LD_VAR 0 3
8295: PUSH
8296: LD_INT 11
8298: EQUAL
8299: IFFALSE 8309
// sRefresh := true ;
8301: LD_ADDR_EXP 61
8305: PUSH
8306: LD_INT 1
8308: ST_TO_ADDR
// if p3 = 12 then
8309: LD_VAR 0 3
8313: PUSH
8314: LD_INT 12
8316: EQUAL
8317: IFFALSE 8327
// sExp := true ;
8319: LD_ADDR_EXP 62
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// if p3 = 13 then
8327: LD_VAR 0 3
8331: PUSH
8332: LD_INT 13
8334: EQUAL
8335: IFFALSE 8345
// sDepot := true ;
8337: LD_ADDR_EXP 63
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// if p3 = 14 then
8345: LD_VAR 0 3
8349: PUSH
8350: LD_INT 14
8352: EQUAL
8353: IFFALSE 8363
// sFlag := true ;
8355: LD_ADDR_EXP 64
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// if p3 = 15 then
8363: LD_VAR 0 3
8367: PUSH
8368: LD_INT 15
8370: EQUAL
8371: IFFALSE 8381
// sKamikadze := true ;
8373: LD_ADDR_EXP 72
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// if p3 = 16 then
8381: LD_VAR 0 3
8385: PUSH
8386: LD_INT 16
8388: EQUAL
8389: IFFALSE 8399
// sTroll := true ;
8391: LD_ADDR_EXP 73
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// if p3 = 17 then
8399: LD_VAR 0 3
8403: PUSH
8404: LD_INT 17
8406: EQUAL
8407: IFFALSE 8417
// sSlow := true ;
8409: LD_ADDR_EXP 74
8413: PUSH
8414: LD_INT 1
8416: ST_TO_ADDR
// if p3 = 18 then
8417: LD_VAR 0 3
8421: PUSH
8422: LD_INT 18
8424: EQUAL
8425: IFFALSE 8435
// sLack := true ;
8427: LD_ADDR_EXP 75
8431: PUSH
8432: LD_INT 1
8434: ST_TO_ADDR
// if p3 = 19 then
8435: LD_VAR 0 3
8439: PUSH
8440: LD_INT 19
8442: EQUAL
8443: IFFALSE 8453
// sTank := true ;
8445: LD_ADDR_EXP 77
8449: PUSH
8450: LD_INT 1
8452: ST_TO_ADDR
// if p3 = 20 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 20
8460: EQUAL
8461: IFFALSE 8471
// sRemote := true ;
8463: LD_ADDR_EXP 78
8467: PUSH
8468: LD_INT 1
8470: ST_TO_ADDR
// if p3 = 21 then
8471: LD_VAR 0 3
8475: PUSH
8476: LD_INT 21
8478: EQUAL
8479: IFFALSE 8489
// sPowell := true ;
8481: LD_ADDR_EXP 79
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// if p3 = 22 then
8489: LD_VAR 0 3
8493: PUSH
8494: LD_INT 22
8496: EQUAL
8497: IFFALSE 8507
// sTeleport := true ;
8499: LD_ADDR_EXP 82
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// if p3 = 23 then
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 23
8514: EQUAL
8515: IFFALSE 8525
// sOilTower := true ;
8517: LD_ADDR_EXP 84
8521: PUSH
8522: LD_INT 1
8524: ST_TO_ADDR
// if p3 = 24 then
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 24
8532: EQUAL
8533: IFFALSE 8543
// sShovel := true ;
8535: LD_ADDR_EXP 85
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// if p3 = 25 then
8543: LD_VAR 0 3
8547: PUSH
8548: LD_INT 25
8550: EQUAL
8551: IFFALSE 8561
// sSheik := true ;
8553: LD_ADDR_EXP 86
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// if p3 = 26 then
8561: LD_VAR 0 3
8565: PUSH
8566: LD_INT 26
8568: EQUAL
8569: IFFALSE 8579
// sEarthquake := true ;
8571: LD_ADDR_EXP 88
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// if p3 = 27 then
8579: LD_VAR 0 3
8583: PUSH
8584: LD_INT 27
8586: EQUAL
8587: IFFALSE 8597
// sAI := true ;
8589: LD_ADDR_EXP 89
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// if p3 = 28 then
8597: LD_VAR 0 3
8601: PUSH
8602: LD_INT 28
8604: EQUAL
8605: IFFALSE 8615
// sCargo := true ;
8607: LD_ADDR_EXP 92
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// if p3 = 29 then
8615: LD_VAR 0 3
8619: PUSH
8620: LD_INT 29
8622: EQUAL
8623: IFFALSE 8633
// sDLaser := true ;
8625: LD_ADDR_EXP 93
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// if p3 = 30 then
8633: LD_VAR 0 3
8637: PUSH
8638: LD_INT 30
8640: EQUAL
8641: IFFALSE 8651
// sExchange := true ;
8643: LD_ADDR_EXP 94
8647: PUSH
8648: LD_INT 1
8650: ST_TO_ADDR
// if p3 = 31 then
8651: LD_VAR 0 3
8655: PUSH
8656: LD_INT 31
8658: EQUAL
8659: IFFALSE 8669
// sFac := true ;
8661: LD_ADDR_EXP 95
8665: PUSH
8666: LD_INT 1
8668: ST_TO_ADDR
// if p3 = 32 then
8669: LD_VAR 0 3
8673: PUSH
8674: LD_INT 32
8676: EQUAL
8677: IFFALSE 8687
// sPower := true ;
8679: LD_ADDR_EXP 96
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// if p3 = 33 then
8687: LD_VAR 0 3
8691: PUSH
8692: LD_INT 33
8694: EQUAL
8695: IFFALSE 8705
// sRandom := true ;
8697: LD_ADDR_EXP 97
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// if p3 = 34 then
8705: LD_VAR 0 3
8709: PUSH
8710: LD_INT 34
8712: EQUAL
8713: IFFALSE 8723
// sShield := true ;
8715: LD_ADDR_EXP 98
8719: PUSH
8720: LD_INT 1
8722: ST_TO_ADDR
// if p3 = 35 then
8723: LD_VAR 0 3
8727: PUSH
8728: LD_INT 35
8730: EQUAL
8731: IFFALSE 8741
// sTime := true ;
8733: LD_ADDR_EXP 99
8737: PUSH
8738: LD_INT 1
8740: ST_TO_ADDR
// if p3 = 36 then
8741: LD_VAR 0 3
8745: PUSH
8746: LD_INT 36
8748: EQUAL
8749: IFFALSE 8759
// sTools := true ;
8751: LD_ADDR_EXP 100
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if p3 = 101 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 101
8766: EQUAL
8767: IFFALSE 8777
// sSold := true ;
8769: LD_ADDR_EXP 65
8773: PUSH
8774: LD_INT 1
8776: ST_TO_ADDR
// if p3 = 102 then
8777: LD_VAR 0 3
8781: PUSH
8782: LD_INT 102
8784: EQUAL
8785: IFFALSE 8795
// sDiff := true ;
8787: LD_ADDR_EXP 66
8791: PUSH
8792: LD_INT 1
8794: ST_TO_ADDR
// if p3 = 103 then
8795: LD_VAR 0 3
8799: PUSH
8800: LD_INT 103
8802: EQUAL
8803: IFFALSE 8813
// sFog := true ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 1
8812: ST_TO_ADDR
// if p3 = 104 then
8813: LD_VAR 0 3
8817: PUSH
8818: LD_INT 104
8820: EQUAL
8821: IFFALSE 8831
// sReset := true ;
8823: LD_ADDR_EXP 70
8827: PUSH
8828: LD_INT 1
8830: ST_TO_ADDR
// if p3 = 105 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 105
8838: EQUAL
8839: IFFALSE 8849
// sSun := true ;
8841: LD_ADDR_EXP 71
8845: PUSH
8846: LD_INT 1
8848: ST_TO_ADDR
// if p3 = 106 then
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 106
8856: EQUAL
8857: IFFALSE 8867
// sTiger := true ;
8859: LD_ADDR_EXP 67
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if p3 = 107 then
8867: LD_VAR 0 3
8871: PUSH
8872: LD_INT 107
8874: EQUAL
8875: IFFALSE 8885
// sBomb := true ;
8877: LD_ADDR_EXP 68
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// if p3 = 108 then
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 108
8892: EQUAL
8893: IFFALSE 8903
// sWound := true ;
8895: LD_ADDR_EXP 76
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// if p3 = 109 then
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 109
8910: EQUAL
8911: IFFALSE 8921
// sBetray := true ;
8913: LD_ADDR_EXP 80
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if p3 = 110 then
8921: LD_VAR 0 3
8925: PUSH
8926: LD_INT 110
8928: EQUAL
8929: IFFALSE 8939
// sContamin := true ;
8931: LD_ADDR_EXP 81
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// if p3 = 111 then
8939: LD_VAR 0 3
8943: PUSH
8944: LD_INT 111
8946: EQUAL
8947: IFFALSE 8957
// sOil := true ;
8949: LD_ADDR_EXP 83
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if p3 = 112 then
8957: LD_VAR 0 3
8961: PUSH
8962: LD_INT 112
8964: EQUAL
8965: IFFALSE 8975
// sStu := true ;
8967: LD_ADDR_EXP 87
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// if p3 = 113 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 113
8982: EQUAL
8983: IFFALSE 8993
// sBazooka := true ;
8985: LD_ADDR_EXP 90
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if p3 = 114 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 114
9000: EQUAL
9001: IFFALSE 9011
// sMortar := true ;
9003: LD_ADDR_EXP 91
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if p3 = 115 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 115
9018: EQUAL
9019: IFFALSE 9029
// sRanger := true ;
9021: LD_ADDR_EXP 101
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// if p3 = 116 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 116
9036: EQUAL
9037: IFFALSE 9047
// sComputer := true ;
9039: LD_ADDR_EXP 102
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// if p3 = 117 then
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 117
9054: EQUAL
9055: IFFALSE 9065
// s30 := true ;
9057: LD_ADDR_EXP 103
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// if p3 = 118 then
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 118
9072: EQUAL
9073: IFFALSE 9083
// s60 := true ;
9075: LD_ADDR_EXP 104
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// end ; if p2 = 101 then
9083: LD_VAR 0 2
9087: PUSH
9088: LD_INT 101
9090: EQUAL
9091: IFFALSE 9219
// begin case p3 of 1 :
9093: LD_VAR 0 3
9097: PUSH
9098: LD_INT 1
9100: DOUBLE
9101: EQUAL
9102: IFTRUE 9106
9104: GO 9113
9106: POP
// hHackUnlimitedResources ; 2 :
9107: CALL 20815 0 0
9111: GO 9219
9113: LD_INT 2
9115: DOUBLE
9116: EQUAL
9117: IFTRUE 9121
9119: GO 9128
9121: POP
// hHackSetLevel10 ; 3 :
9122: CALL 20948 0 0
9126: GO 9219
9128: LD_INT 3
9130: DOUBLE
9131: EQUAL
9132: IFTRUE 9136
9134: GO 9143
9136: POP
// hHackSetLevel10YourUnits ; 4 :
9137: CALL 21033 0 0
9141: GO 9219
9143: LD_INT 4
9145: DOUBLE
9146: EQUAL
9147: IFTRUE 9151
9149: GO 9158
9151: POP
// hHackInvincible ; 5 :
9152: CALL 21481 0 0
9156: GO 9219
9158: LD_INT 5
9160: DOUBLE
9161: EQUAL
9162: IFTRUE 9166
9164: GO 9173
9166: POP
// hHackInvisible ; 6 :
9167: CALL 21592 0 0
9171: GO 9219
9173: LD_INT 6
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9188
9181: POP
// hHackChangeYourSide ; 7 :
9182: CALL 21649 0 0
9186: GO 9219
9188: LD_INT 7
9190: DOUBLE
9191: EQUAL
9192: IFTRUE 9196
9194: GO 9203
9196: POP
// hHackChangeUnitSide ; 8 :
9197: CALL 21691 0 0
9201: GO 9219
9203: LD_INT 8
9205: DOUBLE
9206: EQUAL
9207: IFTRUE 9211
9209: GO 9218
9211: POP
// hHackFog ; end ;
9212: CALL 21792 0 0
9216: GO 9219
9218: POP
// end ; end ;
9219: LD_VAR 0 7
9223: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9224: GO 9226
9226: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9227: LD_STRING initStreamRollete();
9229: PPUSH
9230: CALL_OW 559
// InitStreamMode ;
9234: CALL 9243 0 0
// DefineStreamItems ( ) ;
9238: CALL 9707 0 0
// end ;
9242: END
// function InitStreamMode ; begin
9243: LD_INT 0
9245: PPUSH
// streamModeActive := false ;
9246: LD_ADDR_EXP 48
9250: PUSH
9251: LD_INT 0
9253: ST_TO_ADDR
// normalCounter := 36 ;
9254: LD_ADDR_EXP 49
9258: PUSH
9259: LD_INT 36
9261: ST_TO_ADDR
// hardcoreCounter := 16 ;
9262: LD_ADDR_EXP 50
9266: PUSH
9267: LD_INT 16
9269: ST_TO_ADDR
// sRocket := false ;
9270: LD_ADDR_EXP 53
9274: PUSH
9275: LD_INT 0
9277: ST_TO_ADDR
// sSpeed := false ;
9278: LD_ADDR_EXP 52
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// sEngine := false ;
9286: LD_ADDR_EXP 54
9290: PUSH
9291: LD_INT 0
9293: ST_TO_ADDR
// sSpec := false ;
9294: LD_ADDR_EXP 51
9298: PUSH
9299: LD_INT 0
9301: ST_TO_ADDR
// sLevel := false ;
9302: LD_ADDR_EXP 55
9306: PUSH
9307: LD_INT 0
9309: ST_TO_ADDR
// sArmoury := false ;
9310: LD_ADDR_EXP 56
9314: PUSH
9315: LD_INT 0
9317: ST_TO_ADDR
// sRadar := false ;
9318: LD_ADDR_EXP 57
9322: PUSH
9323: LD_INT 0
9325: ST_TO_ADDR
// sBunker := false ;
9326: LD_ADDR_EXP 58
9330: PUSH
9331: LD_INT 0
9333: ST_TO_ADDR
// sHack := false ;
9334: LD_ADDR_EXP 59
9338: PUSH
9339: LD_INT 0
9341: ST_TO_ADDR
// sFire := false ;
9342: LD_ADDR_EXP 60
9346: PUSH
9347: LD_INT 0
9349: ST_TO_ADDR
// sRefresh := false ;
9350: LD_ADDR_EXP 61
9354: PUSH
9355: LD_INT 0
9357: ST_TO_ADDR
// sExp := false ;
9358: LD_ADDR_EXP 62
9362: PUSH
9363: LD_INT 0
9365: ST_TO_ADDR
// sDepot := false ;
9366: LD_ADDR_EXP 63
9370: PUSH
9371: LD_INT 0
9373: ST_TO_ADDR
// sFlag := false ;
9374: LD_ADDR_EXP 64
9378: PUSH
9379: LD_INT 0
9381: ST_TO_ADDR
// sKamikadze := false ;
9382: LD_ADDR_EXP 72
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// sTroll := false ;
9390: LD_ADDR_EXP 73
9394: PUSH
9395: LD_INT 0
9397: ST_TO_ADDR
// sSlow := false ;
9398: LD_ADDR_EXP 74
9402: PUSH
9403: LD_INT 0
9405: ST_TO_ADDR
// sLack := false ;
9406: LD_ADDR_EXP 75
9410: PUSH
9411: LD_INT 0
9413: ST_TO_ADDR
// sTank := false ;
9414: LD_ADDR_EXP 77
9418: PUSH
9419: LD_INT 0
9421: ST_TO_ADDR
// sRemote := false ;
9422: LD_ADDR_EXP 78
9426: PUSH
9427: LD_INT 0
9429: ST_TO_ADDR
// sPowell := false ;
9430: LD_ADDR_EXP 79
9434: PUSH
9435: LD_INT 0
9437: ST_TO_ADDR
// sTeleport := false ;
9438: LD_ADDR_EXP 82
9442: PUSH
9443: LD_INT 0
9445: ST_TO_ADDR
// sOilTower := false ;
9446: LD_ADDR_EXP 84
9450: PUSH
9451: LD_INT 0
9453: ST_TO_ADDR
// sShovel := false ;
9454: LD_ADDR_EXP 85
9458: PUSH
9459: LD_INT 0
9461: ST_TO_ADDR
// sSheik := false ;
9462: LD_ADDR_EXP 86
9466: PUSH
9467: LD_INT 0
9469: ST_TO_ADDR
// sEarthquake := false ;
9470: LD_ADDR_EXP 88
9474: PUSH
9475: LD_INT 0
9477: ST_TO_ADDR
// sAI := false ;
9478: LD_ADDR_EXP 89
9482: PUSH
9483: LD_INT 0
9485: ST_TO_ADDR
// sCargo := false ;
9486: LD_ADDR_EXP 92
9490: PUSH
9491: LD_INT 0
9493: ST_TO_ADDR
// sDLaser := false ;
9494: LD_ADDR_EXP 93
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// sExchange := false ;
9502: LD_ADDR_EXP 94
9506: PUSH
9507: LD_INT 0
9509: ST_TO_ADDR
// sFac := false ;
9510: LD_ADDR_EXP 95
9514: PUSH
9515: LD_INT 0
9517: ST_TO_ADDR
// sPower := false ;
9518: LD_ADDR_EXP 96
9522: PUSH
9523: LD_INT 0
9525: ST_TO_ADDR
// sRandom := false ;
9526: LD_ADDR_EXP 97
9530: PUSH
9531: LD_INT 0
9533: ST_TO_ADDR
// sShield := false ;
9534: LD_ADDR_EXP 98
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// sTime := false ;
9542: LD_ADDR_EXP 99
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// sTools := false ;
9550: LD_ADDR_EXP 100
9554: PUSH
9555: LD_INT 0
9557: ST_TO_ADDR
// sSold := false ;
9558: LD_ADDR_EXP 65
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// sDiff := false ;
9566: LD_ADDR_EXP 66
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// sFog := false ;
9574: LD_ADDR_EXP 69
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// sReset := false ;
9582: LD_ADDR_EXP 70
9586: PUSH
9587: LD_INT 0
9589: ST_TO_ADDR
// sSun := false ;
9590: LD_ADDR_EXP 71
9594: PUSH
9595: LD_INT 0
9597: ST_TO_ADDR
// sTiger := false ;
9598: LD_ADDR_EXP 67
9602: PUSH
9603: LD_INT 0
9605: ST_TO_ADDR
// sBomb := false ;
9606: LD_ADDR_EXP 68
9610: PUSH
9611: LD_INT 0
9613: ST_TO_ADDR
// sWound := false ;
9614: LD_ADDR_EXP 76
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// sBetray := false ;
9622: LD_ADDR_EXP 80
9626: PUSH
9627: LD_INT 0
9629: ST_TO_ADDR
// sContamin := false ;
9630: LD_ADDR_EXP 81
9634: PUSH
9635: LD_INT 0
9637: ST_TO_ADDR
// sOil := false ;
9638: LD_ADDR_EXP 83
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// sStu := false ;
9646: LD_ADDR_EXP 87
9650: PUSH
9651: LD_INT 0
9653: ST_TO_ADDR
// sBazooka := false ;
9654: LD_ADDR_EXP 90
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// sMortar := false ;
9662: LD_ADDR_EXP 91
9666: PUSH
9667: LD_INT 0
9669: ST_TO_ADDR
// sRanger := false ;
9670: LD_ADDR_EXP 101
9674: PUSH
9675: LD_INT 0
9677: ST_TO_ADDR
// sComputer := false ;
9678: LD_ADDR_EXP 102
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// s30 := false ;
9686: LD_ADDR_EXP 103
9690: PUSH
9691: LD_INT 0
9693: ST_TO_ADDR
// s60 := false ;
9694: LD_ADDR_EXP 104
9698: PUSH
9699: LD_INT 0
9701: ST_TO_ADDR
// end ;
9702: LD_VAR 0 1
9706: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9707: LD_INT 0
9709: PPUSH
9710: PPUSH
9711: PPUSH
9712: PPUSH
9713: PPUSH
// result := [ ] ;
9714: LD_ADDR_VAR 0 1
9718: PUSH
9719: EMPTY
9720: ST_TO_ADDR
// if campaign_id = 1 then
9721: LD_OWVAR 69
9725: PUSH
9726: LD_INT 1
9728: EQUAL
9729: IFFALSE 12895
// begin case mission_number of 1 :
9731: LD_OWVAR 70
9735: PUSH
9736: LD_INT 1
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9820
9744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9745: LD_ADDR_VAR 0 1
9749: PUSH
9750: LD_INT 2
9752: PUSH
9753: LD_INT 4
9755: PUSH
9756: LD_INT 11
9758: PUSH
9759: LD_INT 12
9761: PUSH
9762: LD_INT 15
9764: PUSH
9765: LD_INT 16
9767: PUSH
9768: LD_INT 22
9770: PUSH
9771: LD_INT 23
9773: PUSH
9774: LD_INT 26
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 101
9790: PUSH
9791: LD_INT 102
9793: PUSH
9794: LD_INT 106
9796: PUSH
9797: LD_INT 116
9799: PUSH
9800: LD_INT 117
9802: PUSH
9803: LD_INT 118
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: ST_TO_ADDR
9818: GO 12893
9820: LD_INT 2
9822: DOUBLE
9823: EQUAL
9824: IFTRUE 9828
9826: GO 9912
9828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9829: LD_ADDR_VAR 0 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 4
9839: PUSH
9840: LD_INT 11
9842: PUSH
9843: LD_INT 12
9845: PUSH
9846: LD_INT 15
9848: PUSH
9849: LD_INT 16
9851: PUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 23
9857: PUSH
9858: LD_INT 26
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 101
9874: PUSH
9875: LD_INT 102
9877: PUSH
9878: LD_INT 105
9880: PUSH
9881: LD_INT 106
9883: PUSH
9884: LD_INT 108
9886: PUSH
9887: LD_INT 116
9889: PUSH
9890: LD_INT 117
9892: PUSH
9893: LD_INT 118
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: ST_TO_ADDR
9910: GO 12893
9912: LD_INT 3
9914: DOUBLE
9915: EQUAL
9916: IFTRUE 9920
9918: GO 10008
9920: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9921: LD_ADDR_VAR 0 1
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 11
9937: PUSH
9938: LD_INT 12
9940: PUSH
9941: LD_INT 15
9943: PUSH
9944: LD_INT 16
9946: PUSH
9947: LD_INT 22
9949: PUSH
9950: LD_INT 26
9952: PUSH
9953: LD_INT 36
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 101
9970: PUSH
9971: LD_INT 102
9973: PUSH
9974: LD_INT 105
9976: PUSH
9977: LD_INT 106
9979: PUSH
9980: LD_INT 108
9982: PUSH
9983: LD_INT 116
9985: PUSH
9986: LD_INT 117
9988: PUSH
9989: LD_INT 118
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: ST_TO_ADDR
10006: GO 12893
10008: LD_INT 4
10010: DOUBLE
10011: EQUAL
10012: IFTRUE 10016
10014: GO 10112
10016: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10017: LD_ADDR_VAR 0 1
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: LD_INT 4
10027: PUSH
10028: LD_INT 5
10030: PUSH
10031: LD_INT 8
10033: PUSH
10034: LD_INT 11
10036: PUSH
10037: LD_INT 12
10039: PUSH
10040: LD_INT 15
10042: PUSH
10043: LD_INT 16
10045: PUSH
10046: LD_INT 22
10048: PUSH
10049: LD_INT 23
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: LD_INT 36
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: PUSH
10072: LD_INT 101
10074: PUSH
10075: LD_INT 102
10077: PUSH
10078: LD_INT 105
10080: PUSH
10081: LD_INT 106
10083: PUSH
10084: LD_INT 108
10086: PUSH
10087: LD_INT 116
10089: PUSH
10090: LD_INT 117
10092: PUSH
10093: LD_INT 118
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: ST_TO_ADDR
10110: GO 12893
10112: LD_INT 5
10114: DOUBLE
10115: EQUAL
10116: IFTRUE 10120
10118: GO 10232
10120: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10121: LD_ADDR_VAR 0 1
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: LD_INT 4
10131: PUSH
10132: LD_INT 5
10134: PUSH
10135: LD_INT 6
10137: PUSH
10138: LD_INT 8
10140: PUSH
10141: LD_INT 11
10143: PUSH
10144: LD_INT 12
10146: PUSH
10147: LD_INT 15
10149: PUSH
10150: LD_INT 16
10152: PUSH
10153: LD_INT 22
10155: PUSH
10156: LD_INT 23
10158: PUSH
10159: LD_INT 25
10161: PUSH
10162: LD_INT 26
10164: PUSH
10165: LD_INT 36
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 101
10186: PUSH
10187: LD_INT 102
10189: PUSH
10190: LD_INT 105
10192: PUSH
10193: LD_INT 106
10195: PUSH
10196: LD_INT 108
10198: PUSH
10199: LD_INT 109
10201: PUSH
10202: LD_INT 112
10204: PUSH
10205: LD_INT 116
10207: PUSH
10208: LD_INT 117
10210: PUSH
10211: LD_INT 118
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: ST_TO_ADDR
10230: GO 12893
10232: LD_INT 6
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10372
10240: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10241: LD_ADDR_VAR 0 1
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: LD_INT 4
10251: PUSH
10252: LD_INT 5
10254: PUSH
10255: LD_INT 6
10257: PUSH
10258: LD_INT 8
10260: PUSH
10261: LD_INT 11
10263: PUSH
10264: LD_INT 12
10266: PUSH
10267: LD_INT 15
10269: PUSH
10270: LD_INT 16
10272: PUSH
10273: LD_INT 20
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 22
10281: PUSH
10282: LD_INT 23
10284: PUSH
10285: LD_INT 25
10287: PUSH
10288: LD_INT 26
10290: PUSH
10291: LD_INT 30
10293: PUSH
10294: LD_INT 31
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: LD_INT 36
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 101
10326: PUSH
10327: LD_INT 102
10329: PUSH
10330: LD_INT 105
10332: PUSH
10333: LD_INT 106
10335: PUSH
10336: LD_INT 108
10338: PUSH
10339: LD_INT 109
10341: PUSH
10342: LD_INT 112
10344: PUSH
10345: LD_INT 116
10347: PUSH
10348: LD_INT 117
10350: PUSH
10351: LD_INT 118
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: ST_TO_ADDR
10370: GO 12893
10372: LD_INT 7
10374: DOUBLE
10375: EQUAL
10376: IFTRUE 10380
10378: GO 10492
10380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10381: LD_ADDR_VAR 0 1
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: LD_INT 4
10391: PUSH
10392: LD_INT 5
10394: PUSH
10395: LD_INT 7
10397: PUSH
10398: LD_INT 11
10400: PUSH
10401: LD_INT 12
10403: PUSH
10404: LD_INT 15
10406: PUSH
10407: LD_INT 16
10409: PUSH
10410: LD_INT 20
10412: PUSH
10413: LD_INT 21
10415: PUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 23
10421: PUSH
10422: LD_INT 25
10424: PUSH
10425: LD_INT 26
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 101
10446: PUSH
10447: LD_INT 102
10449: PUSH
10450: LD_INT 103
10452: PUSH
10453: LD_INT 105
10455: PUSH
10456: LD_INT 106
10458: PUSH
10459: LD_INT 108
10461: PUSH
10462: LD_INT 112
10464: PUSH
10465: LD_INT 116
10467: PUSH
10468: LD_INT 117
10470: PUSH
10471: LD_INT 118
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: ST_TO_ADDR
10490: GO 12893
10492: LD_INT 8
10494: DOUBLE
10495: EQUAL
10496: IFTRUE 10500
10498: GO 10640
10500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10501: LD_ADDR_VAR 0 1
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: LD_INT 4
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: LD_INT 6
10517: PUSH
10518: LD_INT 7
10520: PUSH
10521: LD_INT 8
10523: PUSH
10524: LD_INT 11
10526: PUSH
10527: LD_INT 12
10529: PUSH
10530: LD_INT 15
10532: PUSH
10533: LD_INT 16
10535: PUSH
10536: LD_INT 20
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 22
10544: PUSH
10545: LD_INT 23
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 26
10553: PUSH
10554: LD_INT 30
10556: PUSH
10557: LD_INT 31
10559: PUSH
10560: LD_INT 32
10562: PUSH
10563: LD_INT 36
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 101
10590: PUSH
10591: LD_INT 102
10593: PUSH
10594: LD_INT 103
10596: PUSH
10597: LD_INT 105
10599: PUSH
10600: LD_INT 106
10602: PUSH
10603: LD_INT 108
10605: PUSH
10606: LD_INT 109
10608: PUSH
10609: LD_INT 112
10611: PUSH
10612: LD_INT 116
10614: PUSH
10615: LD_INT 117
10617: PUSH
10618: LD_INT 118
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: ST_TO_ADDR
10638: GO 12893
10640: LD_INT 9
10642: DOUBLE
10643: EQUAL
10644: IFTRUE 10648
10646: GO 10796
10648: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10649: LD_ADDR_VAR 0 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: LD_INT 5
10662: PUSH
10663: LD_INT 6
10665: PUSH
10666: LD_INT 7
10668: PUSH
10669: LD_INT 8
10671: PUSH
10672: LD_INT 11
10674: PUSH
10675: LD_INT 12
10677: PUSH
10678: LD_INT 15
10680: PUSH
10681: LD_INT 16
10683: PUSH
10684: LD_INT 20
10686: PUSH
10687: LD_INT 21
10689: PUSH
10690: LD_INT 22
10692: PUSH
10693: LD_INT 23
10695: PUSH
10696: LD_INT 25
10698: PUSH
10699: LD_INT 26
10701: PUSH
10702: LD_INT 28
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: LD_INT 31
10710: PUSH
10711: LD_INT 32
10713: PUSH
10714: LD_INT 36
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 101
10742: PUSH
10743: LD_INT 102
10745: PUSH
10746: LD_INT 103
10748: PUSH
10749: LD_INT 105
10751: PUSH
10752: LD_INT 106
10754: PUSH
10755: LD_INT 108
10757: PUSH
10758: LD_INT 109
10760: PUSH
10761: LD_INT 112
10763: PUSH
10764: LD_INT 114
10766: PUSH
10767: LD_INT 116
10769: PUSH
10770: LD_INT 117
10772: PUSH
10773: LD_INT 118
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: ST_TO_ADDR
10794: GO 12893
10796: LD_INT 10
10798: DOUBLE
10799: EQUAL
10800: IFTRUE 10804
10802: GO 11000
10804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10805: LD_ADDR_VAR 0 1
10809: PUSH
10810: LD_INT 2
10812: PUSH
10813: LD_INT 4
10815: PUSH
10816: LD_INT 5
10818: PUSH
10819: LD_INT 6
10821: PUSH
10822: LD_INT 7
10824: PUSH
10825: LD_INT 8
10827: PUSH
10828: LD_INT 9
10830: PUSH
10831: LD_INT 10
10833: PUSH
10834: LD_INT 11
10836: PUSH
10837: LD_INT 12
10839: PUSH
10840: LD_INT 13
10842: PUSH
10843: LD_INT 14
10845: PUSH
10846: LD_INT 15
10848: PUSH
10849: LD_INT 16
10851: PUSH
10852: LD_INT 17
10854: PUSH
10855: LD_INT 18
10857: PUSH
10858: LD_INT 19
10860: PUSH
10861: LD_INT 20
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 22
10869: PUSH
10870: LD_INT 23
10872: PUSH
10873: LD_INT 24
10875: PUSH
10876: LD_INT 25
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 28
10884: PUSH
10885: LD_INT 30
10887: PUSH
10888: LD_INT 31
10890: PUSH
10891: LD_INT 32
10893: PUSH
10894: LD_INT 36
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 101
10930: PUSH
10931: LD_INT 102
10933: PUSH
10934: LD_INT 103
10936: PUSH
10937: LD_INT 104
10939: PUSH
10940: LD_INT 105
10942: PUSH
10943: LD_INT 106
10945: PUSH
10946: LD_INT 107
10948: PUSH
10949: LD_INT 108
10951: PUSH
10952: LD_INT 109
10954: PUSH
10955: LD_INT 110
10957: PUSH
10958: LD_INT 111
10960: PUSH
10961: LD_INT 112
10963: PUSH
10964: LD_INT 114
10966: PUSH
10967: LD_INT 116
10969: PUSH
10970: LD_INT 117
10972: PUSH
10973: LD_INT 118
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: ST_TO_ADDR
10998: GO 12893
11000: LD_INT 11
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11008
11006: GO 11212
11008: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11009: LD_ADDR_VAR 0 1
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 3
11019: PUSH
11020: LD_INT 4
11022: PUSH
11023: LD_INT 5
11025: PUSH
11026: LD_INT 6
11028: PUSH
11029: LD_INT 7
11031: PUSH
11032: LD_INT 8
11034: PUSH
11035: LD_INT 9
11037: PUSH
11038: LD_INT 10
11040: PUSH
11041: LD_INT 11
11043: PUSH
11044: LD_INT 12
11046: PUSH
11047: LD_INT 13
11049: PUSH
11050: LD_INT 14
11052: PUSH
11053: LD_INT 15
11055: PUSH
11056: LD_INT 16
11058: PUSH
11059: LD_INT 17
11061: PUSH
11062: LD_INT 18
11064: PUSH
11065: LD_INT 19
11067: PUSH
11068: LD_INT 20
11070: PUSH
11071: LD_INT 21
11073: PUSH
11074: LD_INT 22
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 24
11082: PUSH
11083: LD_INT 25
11085: PUSH
11086: LD_INT 26
11088: PUSH
11089: LD_INT 28
11091: PUSH
11092: LD_INT 30
11094: PUSH
11095: LD_INT 31
11097: PUSH
11098: LD_INT 32
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: LD_INT 36
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 101
11142: PUSH
11143: LD_INT 102
11145: PUSH
11146: LD_INT 103
11148: PUSH
11149: LD_INT 104
11151: PUSH
11152: LD_INT 105
11154: PUSH
11155: LD_INT 106
11157: PUSH
11158: LD_INT 107
11160: PUSH
11161: LD_INT 108
11163: PUSH
11164: LD_INT 109
11166: PUSH
11167: LD_INT 110
11169: PUSH
11170: LD_INT 111
11172: PUSH
11173: LD_INT 112
11175: PUSH
11176: LD_INT 114
11178: PUSH
11179: LD_INT 116
11181: PUSH
11182: LD_INT 117
11184: PUSH
11185: LD_INT 118
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: ST_TO_ADDR
11210: GO 12893
11212: LD_INT 12
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11440
11220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: LD_INT 3
11234: PUSH
11235: LD_INT 4
11237: PUSH
11238: LD_INT 5
11240: PUSH
11241: LD_INT 6
11243: PUSH
11244: LD_INT 7
11246: PUSH
11247: LD_INT 8
11249: PUSH
11250: LD_INT 9
11252: PUSH
11253: LD_INT 10
11255: PUSH
11256: LD_INT 11
11258: PUSH
11259: LD_INT 12
11261: PUSH
11262: LD_INT 13
11264: PUSH
11265: LD_INT 14
11267: PUSH
11268: LD_INT 15
11270: PUSH
11271: LD_INT 16
11273: PUSH
11274: LD_INT 17
11276: PUSH
11277: LD_INT 18
11279: PUSH
11280: LD_INT 19
11282: PUSH
11283: LD_INT 20
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 22
11291: PUSH
11292: LD_INT 23
11294: PUSH
11295: LD_INT 24
11297: PUSH
11298: LD_INT 25
11300: PUSH
11301: LD_INT 26
11303: PUSH
11304: LD_INT 27
11306: PUSH
11307: LD_INT 28
11309: PUSH
11310: LD_INT 30
11312: PUSH
11313: LD_INT 31
11315: PUSH
11316: LD_INT 32
11318: PUSH
11319: LD_INT 33
11321: PUSH
11322: LD_INT 34
11324: PUSH
11325: LD_INT 36
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 101
11366: PUSH
11367: LD_INT 102
11369: PUSH
11370: LD_INT 103
11372: PUSH
11373: LD_INT 104
11375: PUSH
11376: LD_INT 105
11378: PUSH
11379: LD_INT 106
11381: PUSH
11382: LD_INT 107
11384: PUSH
11385: LD_INT 108
11387: PUSH
11388: LD_INT 109
11390: PUSH
11391: LD_INT 110
11393: PUSH
11394: LD_INT 111
11396: PUSH
11397: LD_INT 112
11399: PUSH
11400: LD_INT 113
11402: PUSH
11403: LD_INT 114
11405: PUSH
11406: LD_INT 116
11408: PUSH
11409: LD_INT 117
11411: PUSH
11412: LD_INT 118
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: ST_TO_ADDR
11438: GO 12893
11440: LD_INT 13
11442: DOUBLE
11443: EQUAL
11444: IFTRUE 11448
11446: GO 11656
11448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: LD_INT 2
11459: PUSH
11460: LD_INT 3
11462: PUSH
11463: LD_INT 4
11465: PUSH
11466: LD_INT 5
11468: PUSH
11469: LD_INT 8
11471: PUSH
11472: LD_INT 9
11474: PUSH
11475: LD_INT 10
11477: PUSH
11478: LD_INT 11
11480: PUSH
11481: LD_INT 12
11483: PUSH
11484: LD_INT 14
11486: PUSH
11487: LD_INT 15
11489: PUSH
11490: LD_INT 16
11492: PUSH
11493: LD_INT 17
11495: PUSH
11496: LD_INT 18
11498: PUSH
11499: LD_INT 19
11501: PUSH
11502: LD_INT 20
11504: PUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_INT 23
11513: PUSH
11514: LD_INT 24
11516: PUSH
11517: LD_INT 25
11519: PUSH
11520: LD_INT 26
11522: PUSH
11523: LD_INT 27
11525: PUSH
11526: LD_INT 28
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 31
11534: PUSH
11535: LD_INT 32
11537: PUSH
11538: LD_INT 33
11540: PUSH
11541: LD_INT 34
11543: PUSH
11544: LD_INT 36
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 101
11582: PUSH
11583: LD_INT 102
11585: PUSH
11586: LD_INT 103
11588: PUSH
11589: LD_INT 104
11591: PUSH
11592: LD_INT 105
11594: PUSH
11595: LD_INT 106
11597: PUSH
11598: LD_INT 107
11600: PUSH
11601: LD_INT 108
11603: PUSH
11604: LD_INT 109
11606: PUSH
11607: LD_INT 110
11609: PUSH
11610: LD_INT 111
11612: PUSH
11613: LD_INT 112
11615: PUSH
11616: LD_INT 113
11618: PUSH
11619: LD_INT 114
11621: PUSH
11622: LD_INT 116
11624: PUSH
11625: LD_INT 117
11627: PUSH
11628: LD_INT 118
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: ST_TO_ADDR
11654: GO 12893
11656: LD_INT 14
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11888
11664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: LD_INT 2
11675: PUSH
11676: LD_INT 3
11678: PUSH
11679: LD_INT 4
11681: PUSH
11682: LD_INT 5
11684: PUSH
11685: LD_INT 6
11687: PUSH
11688: LD_INT 7
11690: PUSH
11691: LD_INT 8
11693: PUSH
11694: LD_INT 9
11696: PUSH
11697: LD_INT 10
11699: PUSH
11700: LD_INT 11
11702: PUSH
11703: LD_INT 12
11705: PUSH
11706: LD_INT 13
11708: PUSH
11709: LD_INT 14
11711: PUSH
11712: LD_INT 15
11714: PUSH
11715: LD_INT 16
11717: PUSH
11718: LD_INT 17
11720: PUSH
11721: LD_INT 18
11723: PUSH
11724: LD_INT 19
11726: PUSH
11727: LD_INT 20
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_INT 23
11738: PUSH
11739: LD_INT 24
11741: PUSH
11742: LD_INT 25
11744: PUSH
11745: LD_INT 26
11747: PUSH
11748: LD_INT 27
11750: PUSH
11751: LD_INT 28
11753: PUSH
11754: LD_INT 29
11756: PUSH
11757: LD_INT 30
11759: PUSH
11760: LD_INT 31
11762: PUSH
11763: LD_INT 32
11765: PUSH
11766: LD_INT 33
11768: PUSH
11769: LD_INT 34
11771: PUSH
11772: LD_INT 36
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 101
11814: PUSH
11815: LD_INT 102
11817: PUSH
11818: LD_INT 103
11820: PUSH
11821: LD_INT 104
11823: PUSH
11824: LD_INT 105
11826: PUSH
11827: LD_INT 106
11829: PUSH
11830: LD_INT 107
11832: PUSH
11833: LD_INT 108
11835: PUSH
11836: LD_INT 109
11838: PUSH
11839: LD_INT 110
11841: PUSH
11842: LD_INT 111
11844: PUSH
11845: LD_INT 112
11847: PUSH
11848: LD_INT 113
11850: PUSH
11851: LD_INT 114
11853: PUSH
11854: LD_INT 116
11856: PUSH
11857: LD_INT 117
11859: PUSH
11860: LD_INT 118
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: ST_TO_ADDR
11886: GO 12893
11888: LD_INT 15
11890: DOUBLE
11891: EQUAL
11892: IFTRUE 11896
11894: GO 12120
11896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11897: LD_ADDR_VAR 0 1
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 3
11910: PUSH
11911: LD_INT 4
11913: PUSH
11914: LD_INT 5
11916: PUSH
11917: LD_INT 6
11919: PUSH
11920: LD_INT 7
11922: PUSH
11923: LD_INT 8
11925: PUSH
11926: LD_INT 9
11928: PUSH
11929: LD_INT 10
11931: PUSH
11932: LD_INT 11
11934: PUSH
11935: LD_INT 12
11937: PUSH
11938: LD_INT 13
11940: PUSH
11941: LD_INT 14
11943: PUSH
11944: LD_INT 15
11946: PUSH
11947: LD_INT 16
11949: PUSH
11950: LD_INT 17
11952: PUSH
11953: LD_INT 18
11955: PUSH
11956: LD_INT 19
11958: PUSH
11959: LD_INT 20
11961: PUSH
11962: LD_INT 21
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 23
11970: PUSH
11971: LD_INT 24
11973: PUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 26
11979: PUSH
11980: LD_INT 27
11982: PUSH
11983: LD_INT 28
11985: PUSH
11986: LD_INT 29
11988: PUSH
11989: LD_INT 30
11991: PUSH
11992: LD_INT 31
11994: PUSH
11995: LD_INT 32
11997: PUSH
11998: LD_INT 33
12000: PUSH
12001: LD_INT 34
12003: PUSH
12004: LD_INT 36
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 101
12046: PUSH
12047: LD_INT 102
12049: PUSH
12050: LD_INT 103
12052: PUSH
12053: LD_INT 104
12055: PUSH
12056: LD_INT 105
12058: PUSH
12059: LD_INT 106
12061: PUSH
12062: LD_INT 107
12064: PUSH
12065: LD_INT 108
12067: PUSH
12068: LD_INT 109
12070: PUSH
12071: LD_INT 110
12073: PUSH
12074: LD_INT 111
12076: PUSH
12077: LD_INT 112
12079: PUSH
12080: LD_INT 113
12082: PUSH
12083: LD_INT 114
12085: PUSH
12086: LD_INT 116
12088: PUSH
12089: LD_INT 117
12091: PUSH
12092: LD_INT 118
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: ST_TO_ADDR
12118: GO 12893
12120: LD_INT 16
12122: DOUBLE
12123: EQUAL
12124: IFTRUE 12128
12126: GO 12264
12128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12129: LD_ADDR_VAR 0 1
12133: PUSH
12134: LD_INT 2
12136: PUSH
12137: LD_INT 4
12139: PUSH
12140: LD_INT 5
12142: PUSH
12143: LD_INT 7
12145: PUSH
12146: LD_INT 11
12148: PUSH
12149: LD_INT 12
12151: PUSH
12152: LD_INT 15
12154: PUSH
12155: LD_INT 16
12157: PUSH
12158: LD_INT 20
12160: PUSH
12161: LD_INT 21
12163: PUSH
12164: LD_INT 22
12166: PUSH
12167: LD_INT 23
12169: PUSH
12170: LD_INT 25
12172: PUSH
12173: LD_INT 26
12175: PUSH
12176: LD_INT 30
12178: PUSH
12179: LD_INT 31
12181: PUSH
12182: LD_INT 32
12184: PUSH
12185: LD_INT 33
12187: PUSH
12188: LD_INT 34
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 101
12214: PUSH
12215: LD_INT 102
12217: PUSH
12218: LD_INT 103
12220: PUSH
12221: LD_INT 106
12223: PUSH
12224: LD_INT 108
12226: PUSH
12227: LD_INT 112
12229: PUSH
12230: LD_INT 113
12232: PUSH
12233: LD_INT 114
12235: PUSH
12236: LD_INT 116
12238: PUSH
12239: LD_INT 117
12241: PUSH
12242: LD_INT 118
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 12893
12264: LD_INT 17
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12496
12272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12273: LD_ADDR_VAR 0 1
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: LD_INT 3
12286: PUSH
12287: LD_INT 4
12289: PUSH
12290: LD_INT 5
12292: PUSH
12293: LD_INT 6
12295: PUSH
12296: LD_INT 7
12298: PUSH
12299: LD_INT 8
12301: PUSH
12302: LD_INT 9
12304: PUSH
12305: LD_INT 10
12307: PUSH
12308: LD_INT 11
12310: PUSH
12311: LD_INT 12
12313: PUSH
12314: LD_INT 13
12316: PUSH
12317: LD_INT 14
12319: PUSH
12320: LD_INT 15
12322: PUSH
12323: LD_INT 16
12325: PUSH
12326: LD_INT 17
12328: PUSH
12329: LD_INT 18
12331: PUSH
12332: LD_INT 19
12334: PUSH
12335: LD_INT 20
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_INT 23
12346: PUSH
12347: LD_INT 24
12349: PUSH
12350: LD_INT 25
12352: PUSH
12353: LD_INT 26
12355: PUSH
12356: LD_INT 27
12358: PUSH
12359: LD_INT 28
12361: PUSH
12362: LD_INT 29
12364: PUSH
12365: LD_INT 30
12367: PUSH
12368: LD_INT 31
12370: PUSH
12371: LD_INT 32
12373: PUSH
12374: LD_INT 33
12376: PUSH
12377: LD_INT 34
12379: PUSH
12380: LD_INT 36
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 101
12422: PUSH
12423: LD_INT 102
12425: PUSH
12426: LD_INT 103
12428: PUSH
12429: LD_INT 104
12431: PUSH
12432: LD_INT 105
12434: PUSH
12435: LD_INT 106
12437: PUSH
12438: LD_INT 107
12440: PUSH
12441: LD_INT 108
12443: PUSH
12444: LD_INT 109
12446: PUSH
12447: LD_INT 110
12449: PUSH
12450: LD_INT 111
12452: PUSH
12453: LD_INT 112
12455: PUSH
12456: LD_INT 113
12458: PUSH
12459: LD_INT 114
12461: PUSH
12462: LD_INT 116
12464: PUSH
12465: LD_INT 117
12467: PUSH
12468: LD_INT 118
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: ST_TO_ADDR
12494: GO 12893
12496: LD_INT 18
12498: DOUBLE
12499: EQUAL
12500: IFTRUE 12504
12502: GO 12652
12504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_INT 2
12512: PUSH
12513: LD_INT 4
12515: PUSH
12516: LD_INT 5
12518: PUSH
12519: LD_INT 7
12521: PUSH
12522: LD_INT 11
12524: PUSH
12525: LD_INT 12
12527: PUSH
12528: LD_INT 15
12530: PUSH
12531: LD_INT 16
12533: PUSH
12534: LD_INT 20
12536: PUSH
12537: LD_INT 21
12539: PUSH
12540: LD_INT 22
12542: PUSH
12543: LD_INT 23
12545: PUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 26
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 31
12557: PUSH
12558: LD_INT 32
12560: PUSH
12561: LD_INT 33
12563: PUSH
12564: LD_INT 34
12566: PUSH
12567: LD_INT 35
12569: PUSH
12570: LD_INT 36
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 101
12598: PUSH
12599: LD_INT 102
12601: PUSH
12602: LD_INT 103
12604: PUSH
12605: LD_INT 106
12607: PUSH
12608: LD_INT 108
12610: PUSH
12611: LD_INT 112
12613: PUSH
12614: LD_INT 113
12616: PUSH
12617: LD_INT 114
12619: PUSH
12620: LD_INT 115
12622: PUSH
12623: LD_INT 116
12625: PUSH
12626: LD_INT 117
12628: PUSH
12629: LD_INT 118
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: ST_TO_ADDR
12650: GO 12893
12652: LD_INT 19
12654: DOUBLE
12655: EQUAL
12656: IFTRUE 12660
12658: GO 12892
12660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12661: LD_ADDR_VAR 0 1
12665: PUSH
12666: LD_INT 1
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: LD_INT 4
12677: PUSH
12678: LD_INT 5
12680: PUSH
12681: LD_INT 6
12683: PUSH
12684: LD_INT 7
12686: PUSH
12687: LD_INT 8
12689: PUSH
12690: LD_INT 9
12692: PUSH
12693: LD_INT 10
12695: PUSH
12696: LD_INT 11
12698: PUSH
12699: LD_INT 12
12701: PUSH
12702: LD_INT 13
12704: PUSH
12705: LD_INT 14
12707: PUSH
12708: LD_INT 15
12710: PUSH
12711: LD_INT 16
12713: PUSH
12714: LD_INT 17
12716: PUSH
12717: LD_INT 18
12719: PUSH
12720: LD_INT 19
12722: PUSH
12723: LD_INT 20
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 22
12731: PUSH
12732: LD_INT 23
12734: PUSH
12735: LD_INT 24
12737: PUSH
12738: LD_INT 25
12740: PUSH
12741: LD_INT 26
12743: PUSH
12744: LD_INT 27
12746: PUSH
12747: LD_INT 28
12749: PUSH
12750: LD_INT 29
12752: PUSH
12753: LD_INT 30
12755: PUSH
12756: LD_INT 31
12758: PUSH
12759: LD_INT 32
12761: PUSH
12762: LD_INT 33
12764: PUSH
12765: LD_INT 34
12767: PUSH
12768: LD_INT 35
12770: PUSH
12771: LD_INT 36
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 101
12814: PUSH
12815: LD_INT 102
12817: PUSH
12818: LD_INT 103
12820: PUSH
12821: LD_INT 104
12823: PUSH
12824: LD_INT 105
12826: PUSH
12827: LD_INT 106
12829: PUSH
12830: LD_INT 107
12832: PUSH
12833: LD_INT 108
12835: PUSH
12836: LD_INT 109
12838: PUSH
12839: LD_INT 110
12841: PUSH
12842: LD_INT 111
12844: PUSH
12845: LD_INT 112
12847: PUSH
12848: LD_INT 113
12850: PUSH
12851: LD_INT 114
12853: PUSH
12854: LD_INT 115
12856: PUSH
12857: LD_INT 116
12859: PUSH
12860: LD_INT 117
12862: PUSH
12863: LD_INT 118
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: ST_TO_ADDR
12890: GO 12893
12892: POP
// end else
12893: GO 13124
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: LD_INT 1
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: LD_INT 4
12911: PUSH
12912: LD_INT 5
12914: PUSH
12915: LD_INT 6
12917: PUSH
12918: LD_INT 7
12920: PUSH
12921: LD_INT 8
12923: PUSH
12924: LD_INT 9
12926: PUSH
12927: LD_INT 10
12929: PUSH
12930: LD_INT 11
12932: PUSH
12933: LD_INT 12
12935: PUSH
12936: LD_INT 13
12938: PUSH
12939: LD_INT 14
12941: PUSH
12942: LD_INT 15
12944: PUSH
12945: LD_INT 16
12947: PUSH
12948: LD_INT 17
12950: PUSH
12951: LD_INT 18
12953: PUSH
12954: LD_INT 19
12956: PUSH
12957: LD_INT 20
12959: PUSH
12960: LD_INT 21
12962: PUSH
12963: LD_INT 22
12965: PUSH
12966: LD_INT 23
12968: PUSH
12969: LD_INT 24
12971: PUSH
12972: LD_INT 25
12974: PUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 27
12980: PUSH
12981: LD_INT 28
12983: PUSH
12984: LD_INT 29
12986: PUSH
12987: LD_INT 30
12989: PUSH
12990: LD_INT 31
12992: PUSH
12993: LD_INT 32
12995: PUSH
12996: LD_INT 33
12998: PUSH
12999: LD_INT 34
13001: PUSH
13002: LD_INT 35
13004: PUSH
13005: LD_INT 36
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 101
13048: PUSH
13049: LD_INT 102
13051: PUSH
13052: LD_INT 103
13054: PUSH
13055: LD_INT 104
13057: PUSH
13058: LD_INT 105
13060: PUSH
13061: LD_INT 106
13063: PUSH
13064: LD_INT 107
13066: PUSH
13067: LD_INT 108
13069: PUSH
13070: LD_INT 109
13072: PUSH
13073: LD_INT 110
13075: PUSH
13076: LD_INT 111
13078: PUSH
13079: LD_INT 112
13081: PUSH
13082: LD_INT 113
13084: PUSH
13085: LD_INT 114
13087: PUSH
13088: LD_INT 115
13090: PUSH
13091: LD_INT 116
13093: PUSH
13094: LD_INT 117
13096: PUSH
13097: LD_INT 118
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: ST_TO_ADDR
// if result then
13124: LD_VAR 0 1
13128: IFFALSE 13417
// begin normal :=  ;
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_STRING 
13137: ST_TO_ADDR
// hardcore :=  ;
13138: LD_ADDR_VAR 0 4
13142: PUSH
13143: LD_STRING 
13145: ST_TO_ADDR
// for i = 1 to normalCounter do
13146: LD_ADDR_VAR 0 5
13150: PUSH
13151: DOUBLE
13152: LD_INT 1
13154: DEC
13155: ST_TO_ADDR
13156: LD_EXP 49
13160: PUSH
13161: FOR_TO
13162: IFFALSE 13263
// begin tmp := 0 ;
13164: LD_ADDR_VAR 0 2
13168: PUSH
13169: LD_STRING 0
13171: ST_TO_ADDR
// if result [ 1 ] then
13172: LD_VAR 0 1
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: IFFALSE 13245
// if result [ 1 ] [ 1 ] = i then
13182: LD_VAR 0 1
13186: PUSH
13187: LD_INT 1
13189: ARRAY
13190: PUSH
13191: LD_INT 1
13193: ARRAY
13194: PUSH
13195: LD_VAR 0 5
13199: EQUAL
13200: IFFALSE 13245
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13202: LD_ADDR_VAR 0 1
13206: PUSH
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: LD_VAR 0 1
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 3
13231: PPUSH
13232: CALL_OW 1
13236: ST_TO_ADDR
// tmp := 1 ;
13237: LD_ADDR_VAR 0 2
13241: PUSH
13242: LD_STRING 1
13244: ST_TO_ADDR
// end ; normal := normal & tmp ;
13245: LD_ADDR_VAR 0 3
13249: PUSH
13250: LD_VAR 0 3
13254: PUSH
13255: LD_VAR 0 2
13259: STR
13260: ST_TO_ADDR
// end ;
13261: GO 13161
13263: POP
13264: POP
// for i = 1 to hardcoreCounter do
13265: LD_ADDR_VAR 0 5
13269: PUSH
13270: DOUBLE
13271: LD_INT 1
13273: DEC
13274: ST_TO_ADDR
13275: LD_EXP 50
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13386
// begin tmp := 0 ;
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: LD_STRING 0
13290: ST_TO_ADDR
// if result [ 2 ] then
13291: LD_VAR 0 1
13295: PUSH
13296: LD_INT 2
13298: ARRAY
13299: IFFALSE 13368
// if result [ 2 ] [ 1 ] = 100 + i then
13301: LD_VAR 0 1
13305: PUSH
13306: LD_INT 2
13308: ARRAY
13309: PUSH
13310: LD_INT 1
13312: ARRAY
13313: PUSH
13314: LD_INT 100
13316: PUSH
13317: LD_VAR 0 5
13321: PLUS
13322: EQUAL
13323: IFFALSE 13368
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_INT 2
13337: PPUSH
13338: LD_VAR 0 1
13342: PUSH
13343: LD_INT 2
13345: ARRAY
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 3
13354: PPUSH
13355: CALL_OW 1
13359: ST_TO_ADDR
// tmp := 1 ;
13360: LD_ADDR_VAR 0 2
13364: PUSH
13365: LD_STRING 1
13367: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13368: LD_ADDR_VAR 0 4
13372: PUSH
13373: LD_VAR 0 4
13377: PUSH
13378: LD_VAR 0 2
13382: STR
13383: ST_TO_ADDR
// end ;
13384: GO 13280
13386: POP
13387: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13388: LD_STRING getStreamItemsFromMission("
13390: PUSH
13391: LD_VAR 0 3
13395: STR
13396: PUSH
13397: LD_STRING ","
13399: STR
13400: PUSH
13401: LD_VAR 0 4
13405: STR
13406: PUSH
13407: LD_STRING ")
13409: STR
13410: PPUSH
13411: CALL_OW 559
// end else
13415: GO 13424
// ToLua ( getStreamItemsFromMission("","") ) ;
13417: LD_STRING getStreamItemsFromMission("","")
13419: PPUSH
13420: CALL_OW 559
// end ;
13424: LD_VAR 0 1
13428: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13429: LD_EXP 48
13433: PUSH
13434: LD_EXP 53
13438: AND
13439: IFFALSE 13563
13441: GO 13443
13443: DISABLE
13444: LD_INT 0
13446: PPUSH
13447: PPUSH
// begin enable ;
13448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13449: LD_ADDR_VAR 0 2
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_OWVAR 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: LD_INT 34
13471: PUSH
13472: LD_INT 7
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 34
13481: PUSH
13482: LD_INT 45
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 34
13491: PUSH
13492: LD_INT 28
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 34
13501: PUSH
13502: LD_INT 47
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PPUSH
13520: CALL_OW 69
13524: ST_TO_ADDR
// if not tmp then
13525: LD_VAR 0 2
13529: NOT
13530: IFFALSE 13534
// exit ;
13532: GO 13563
// for i in tmp do
13534: LD_ADDR_VAR 0 1
13538: PUSH
13539: LD_VAR 0 2
13543: PUSH
13544: FOR_IN
13545: IFFALSE 13561
// begin SetLives ( i , 0 ) ;
13547: LD_VAR 0 1
13551: PPUSH
13552: LD_INT 0
13554: PPUSH
13555: CALL_OW 234
// end ;
13559: GO 13544
13561: POP
13562: POP
// end ;
13563: PPOPN 2
13565: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13566: LD_EXP 48
13570: PUSH
13571: LD_EXP 54
13575: AND
13576: IFFALSE 13660
13578: GO 13580
13580: DISABLE
13581: LD_INT 0
13583: PPUSH
13584: PPUSH
// begin enable ;
13585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_INT 22
13593: PUSH
13594: LD_OWVAR 2
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 32
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PPUSH
13617: CALL_OW 69
13621: ST_TO_ADDR
// if not tmp then
13622: LD_VAR 0 2
13626: NOT
13627: IFFALSE 13631
// exit ;
13629: GO 13660
// for i in tmp do
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_VAR 0 2
13640: PUSH
13641: FOR_IN
13642: IFFALSE 13658
// begin SetLives ( i , 0 ) ;
13644: LD_VAR 0 1
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: CALL_OW 234
// end ;
13656: GO 13641
13658: POP
13659: POP
// end ;
13660: PPOPN 2
13662: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13663: LD_EXP 48
13667: PUSH
13668: LD_EXP 51
13672: AND
13673: IFFALSE 13766
13675: GO 13677
13677: DISABLE
13678: LD_INT 0
13680: PPUSH
// begin enable ;
13681: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_INT 22
13689: PUSH
13690: LD_OWVAR 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 2
13701: PUSH
13702: LD_INT 25
13704: PUSH
13705: LD_INT 5
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 25
13714: PUSH
13715: LD_INT 9
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 25
13724: PUSH
13725: LD_INT 8
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PPUSH
13742: CALL_OW 69
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13764
// begin SetClass ( i , 1 ) ;
13750: LD_VAR 0 1
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 336
// end ;
13762: GO 13747
13764: POP
13765: POP
// end ;
13766: PPOPN 1
13768: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13769: LD_EXP 48
13773: PUSH
13774: LD_EXP 52
13778: AND
13779: PUSH
13780: LD_OWVAR 65
13784: PUSH
13785: LD_INT 7
13787: LESS
13788: AND
13789: IFFALSE 13803
13791: GO 13793
13793: DISABLE
// begin enable ;
13794: ENABLE
// game_speed := 7 ;
13795: LD_ADDR_OWVAR 65
13799: PUSH
13800: LD_INT 7
13802: ST_TO_ADDR
// end ;
13803: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13804: LD_EXP 48
13808: PUSH
13809: LD_EXP 55
13813: AND
13814: IFFALSE 14016
13816: GO 13818
13818: DISABLE
13819: LD_INT 0
13821: PPUSH
13822: PPUSH
13823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13824: LD_ADDR_VAR 0 3
13828: PUSH
13829: LD_INT 81
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 21
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PPUSH
13855: CALL_OW 69
13859: ST_TO_ADDR
// if not tmp then
13860: LD_VAR 0 3
13864: NOT
13865: IFFALSE 13869
// exit ;
13867: GO 14016
// if tmp > 5 then
13869: LD_VAR 0 3
13873: PUSH
13874: LD_INT 5
13876: GREATER
13877: IFFALSE 13889
// k := 5 else
13879: LD_ADDR_VAR 0 2
13883: PUSH
13884: LD_INT 5
13886: ST_TO_ADDR
13887: GO 13899
// k := tmp ;
13889: LD_ADDR_VAR 0 2
13893: PUSH
13894: LD_VAR 0 3
13898: ST_TO_ADDR
// for i := 1 to k do
13899: LD_ADDR_VAR 0 1
13903: PUSH
13904: DOUBLE
13905: LD_INT 1
13907: DEC
13908: ST_TO_ADDR
13909: LD_VAR 0 2
13913: PUSH
13914: FOR_TO
13915: IFFALSE 14014
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13917: LD_VAR 0 3
13921: PUSH
13922: LD_VAR 0 1
13926: ARRAY
13927: PPUSH
13928: LD_VAR 0 1
13932: PUSH
13933: LD_INT 4
13935: MOD
13936: PUSH
13937: LD_INT 1
13939: PLUS
13940: PPUSH
13941: CALL_OW 259
13945: PUSH
13946: LD_INT 10
13948: LESS
13949: IFFALSE 14012
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13951: LD_VAR 0 3
13955: PUSH
13956: LD_VAR 0 1
13960: ARRAY
13961: PPUSH
13962: LD_VAR 0 1
13966: PUSH
13967: LD_INT 4
13969: MOD
13970: PUSH
13971: LD_INT 1
13973: PLUS
13974: PPUSH
13975: LD_VAR 0 3
13979: PUSH
13980: LD_VAR 0 1
13984: ARRAY
13985: PPUSH
13986: LD_VAR 0 1
13990: PUSH
13991: LD_INT 4
13993: MOD
13994: PUSH
13995: LD_INT 1
13997: PLUS
13998: PPUSH
13999: CALL_OW 259
14003: PUSH
14004: LD_INT 1
14006: PLUS
14007: PPUSH
14008: CALL_OW 237
14012: GO 13914
14014: POP
14015: POP
// end ;
14016: PPOPN 3
14018: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14019: LD_EXP 48
14023: PUSH
14024: LD_EXP 56
14028: AND
14029: IFFALSE 14049
14031: GO 14033
14033: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14034: LD_INT 4
14036: PPUSH
14037: LD_OWVAR 2
14041: PPUSH
14042: LD_INT 0
14044: PPUSH
14045: CALL_OW 324
14049: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14050: LD_EXP 48
14054: PUSH
14055: LD_EXP 85
14059: AND
14060: IFFALSE 14080
14062: GO 14064
14064: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14065: LD_INT 19
14067: PPUSH
14068: LD_OWVAR 2
14072: PPUSH
14073: LD_INT 0
14075: PPUSH
14076: CALL_OW 324
14080: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14081: LD_EXP 48
14085: PUSH
14086: LD_EXP 57
14090: AND
14091: IFFALSE 14193
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
// begin enable ;
14100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14101: LD_ADDR_VAR 0 2
14105: PUSH
14106: LD_INT 22
14108: PUSH
14109: LD_OWVAR 2
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 2
14120: PUSH
14121: LD_INT 34
14123: PUSH
14124: LD_INT 11
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 34
14133: PUSH
14134: LD_INT 30
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 69
14154: ST_TO_ADDR
// if not tmp then
14155: LD_VAR 0 2
14159: NOT
14160: IFFALSE 14164
// exit ;
14162: GO 14193
// for i in tmp do
14164: LD_ADDR_VAR 0 1
14168: PUSH
14169: LD_VAR 0 2
14173: PUSH
14174: FOR_IN
14175: IFFALSE 14191
// begin SetLives ( i , 0 ) ;
14177: LD_VAR 0 1
14181: PPUSH
14182: LD_INT 0
14184: PPUSH
14185: CALL_OW 234
// end ;
14189: GO 14174
14191: POP
14192: POP
// end ;
14193: PPOPN 2
14195: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14196: LD_EXP 48
14200: PUSH
14201: LD_EXP 58
14205: AND
14206: IFFALSE 14226
14208: GO 14210
14210: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14211: LD_INT 32
14213: PPUSH
14214: LD_OWVAR 2
14218: PPUSH
14219: LD_INT 0
14221: PPUSH
14222: CALL_OW 324
14226: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14227: LD_EXP 48
14231: PUSH
14232: LD_EXP 59
14236: AND
14237: IFFALSE 14418
14239: GO 14241
14241: DISABLE
14242: LD_INT 0
14244: PPUSH
14245: PPUSH
14246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14247: LD_ADDR_VAR 0 2
14251: PUSH
14252: LD_INT 22
14254: PUSH
14255: LD_OWVAR 2
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 33
14266: PUSH
14267: LD_INT 3
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 69
14282: ST_TO_ADDR
// if not tmp then
14283: LD_VAR 0 2
14287: NOT
14288: IFFALSE 14292
// exit ;
14290: GO 14418
// side := 0 ;
14292: LD_ADDR_VAR 0 3
14296: PUSH
14297: LD_INT 0
14299: ST_TO_ADDR
// for i := 1 to 8 do
14300: LD_ADDR_VAR 0 1
14304: PUSH
14305: DOUBLE
14306: LD_INT 1
14308: DEC
14309: ST_TO_ADDR
14310: LD_INT 8
14312: PUSH
14313: FOR_TO
14314: IFFALSE 14362
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14316: LD_OWVAR 2
14320: PUSH
14321: LD_VAR 0 1
14325: NONEQUAL
14326: PUSH
14327: LD_OWVAR 2
14331: PPUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 81
14341: PUSH
14342: LD_INT 2
14344: EQUAL
14345: AND
14346: IFFALSE 14360
// begin side := i ;
14348: LD_ADDR_VAR 0 3
14352: PUSH
14353: LD_VAR 0 1
14357: ST_TO_ADDR
// break ;
14358: GO 14362
// end ;
14360: GO 14313
14362: POP
14363: POP
// if not side then
14364: LD_VAR 0 3
14368: NOT
14369: IFFALSE 14373
// exit ;
14371: GO 14418
// for i := 1 to tmp do
14373: LD_ADDR_VAR 0 1
14377: PUSH
14378: DOUBLE
14379: LD_INT 1
14381: DEC
14382: ST_TO_ADDR
14383: LD_VAR 0 2
14387: PUSH
14388: FOR_TO
14389: IFFALSE 14416
// if Prob ( 60 ) then
14391: LD_INT 60
14393: PPUSH
14394: CALL_OW 13
14398: IFFALSE 14414
// SetSide ( i , side ) ;
14400: LD_VAR 0 1
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: CALL_OW 235
14414: GO 14388
14416: POP
14417: POP
// end ;
14418: PPOPN 3
14420: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14421: LD_EXP 48
14425: PUSH
14426: LD_EXP 61
14430: AND
14431: IFFALSE 14550
14433: GO 14435
14435: DISABLE
14436: LD_INT 0
14438: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_OWVAR 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 1
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 3
14468: PUSH
14469: LD_INT 23
14471: PUSH
14472: LD_INT 0
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 69
14492: PUSH
14493: FOR_IN
14494: IFFALSE 14548
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 257
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: IN
14524: IFFALSE 14546
// SetClass ( un , rand ( 1 , 4 ) ) ;
14526: LD_VAR 0 1
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: LD_INT 4
14536: PPUSH
14537: CALL_OW 12
14541: PPUSH
14542: CALL_OW 336
14546: GO 14493
14548: POP
14549: POP
// end ;
14550: PPOPN 1
14552: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14553: LD_EXP 48
14557: PUSH
14558: LD_EXP 60
14562: AND
14563: IFFALSE 14642
14565: GO 14567
14567: DISABLE
14568: LD_INT 0
14570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14571: LD_ADDR_VAR 0 1
14575: PUSH
14576: LD_INT 22
14578: PUSH
14579: LD_OWVAR 2
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 21
14590: PUSH
14591: LD_INT 3
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PPUSH
14602: CALL_OW 69
14606: ST_TO_ADDR
// if not tmp then
14607: LD_VAR 0 1
14611: NOT
14612: IFFALSE 14616
// exit ;
14614: GO 14642
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14616: LD_VAR 0 1
14620: PUSH
14621: LD_INT 1
14623: PPUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 12
14633: ARRAY
14634: PPUSH
14635: LD_INT 100
14637: PPUSH
14638: CALL_OW 234
// end ;
14642: PPOPN 1
14644: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14645: LD_EXP 48
14649: PUSH
14650: LD_EXP 62
14654: AND
14655: IFFALSE 14753
14657: GO 14659
14659: DISABLE
14660: LD_INT 0
14662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_OWVAR 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 1
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14753
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14708: LD_VAR 0 1
14712: PUSH
14713: LD_INT 1
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 12
14725: ARRAY
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: LD_INT 4
14732: PPUSH
14733: CALL_OW 12
14737: PPUSH
14738: LD_INT 3000
14740: PPUSH
14741: LD_INT 9000
14743: PPUSH
14744: CALL_OW 12
14748: PPUSH
14749: CALL_OW 492
// end ;
14753: PPOPN 1
14755: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14756: LD_EXP 48
14760: PUSH
14761: LD_EXP 63
14765: AND
14766: IFFALSE 14786
14768: GO 14770
14770: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14771: LD_INT 1
14773: PPUSH
14774: LD_OWVAR 2
14778: PPUSH
14779: LD_INT 0
14781: PPUSH
14782: CALL_OW 324
14786: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14787: LD_EXP 48
14791: PUSH
14792: LD_EXP 64
14796: AND
14797: IFFALSE 14880
14799: GO 14801
14801: DISABLE
14802: LD_INT 0
14804: PPUSH
14805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14806: LD_ADDR_VAR 0 2
14810: PUSH
14811: LD_INT 22
14813: PUSH
14814: LD_OWVAR 2
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 21
14825: PUSH
14826: LD_INT 3
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: ST_TO_ADDR
// if not tmp then
14842: LD_VAR 0 2
14846: NOT
14847: IFFALSE 14851
// exit ;
14849: GO 14880
// for i in tmp do
14851: LD_ADDR_VAR 0 1
14855: PUSH
14856: LD_VAR 0 2
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14878
// SetBLevel ( i , 10 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_INT 10
14871: PPUSH
14872: CALL_OW 241
14876: GO 14861
14878: POP
14879: POP
// end ;
14880: PPOPN 2
14882: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14883: LD_EXP 48
14887: PUSH
14888: LD_EXP 65
14892: AND
14893: IFFALSE 15004
14895: GO 14897
14897: DISABLE
14898: LD_INT 0
14900: PPUSH
14901: PPUSH
14902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14903: LD_ADDR_VAR 0 3
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_OWVAR 2
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 25
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PPUSH
14934: CALL_OW 69
14938: ST_TO_ADDR
// if not tmp then
14939: LD_VAR 0 3
14943: NOT
14944: IFFALSE 14948
// exit ;
14946: GO 15004
// un := tmp [ rand ( 1 , tmp ) ] ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_VAR 0 3
14957: PUSH
14958: LD_INT 1
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: CALL_OW 12
14970: ARRAY
14971: ST_TO_ADDR
// if Crawls ( un ) then
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL_OW 318
14981: IFFALSE 14992
// ComWalk ( un ) ;
14983: LD_VAR 0 2
14987: PPUSH
14988: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14992: LD_VAR 0 2
14996: PPUSH
14997: LD_INT 5
14999: PPUSH
15000: CALL_OW 336
// end ;
15004: PPOPN 3
15006: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15007: LD_EXP 48
15011: PUSH
15012: LD_EXP 66
15016: AND
15017: PUSH
15018: LD_OWVAR 67
15022: PUSH
15023: LD_INT 4
15025: LESS
15026: AND
15027: IFFALSE 15046
15029: GO 15031
15031: DISABLE
// begin Difficulty := Difficulty + 1 ;
15032: LD_ADDR_OWVAR 67
15036: PUSH
15037: LD_OWVAR 67
15041: PUSH
15042: LD_INT 1
15044: PLUS
15045: ST_TO_ADDR
// end ;
15046: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15047: LD_EXP 48
15051: PUSH
15052: LD_EXP 67
15056: AND
15057: IFFALSE 15160
15059: GO 15061
15061: DISABLE
15062: LD_INT 0
15064: PPUSH
// begin for i := 1 to 5 do
15065: LD_ADDR_VAR 0 1
15069: PUSH
15070: DOUBLE
15071: LD_INT 1
15073: DEC
15074: ST_TO_ADDR
15075: LD_INT 5
15077: PUSH
15078: FOR_TO
15079: IFFALSE 15158
// begin uc_nation := nation_nature ;
15081: LD_ADDR_OWVAR 21
15085: PUSH
15086: LD_INT 0
15088: ST_TO_ADDR
// uc_side := 0 ;
15089: LD_ADDR_OWVAR 20
15093: PUSH
15094: LD_INT 0
15096: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15097: LD_ADDR_OWVAR 29
15101: PUSH
15102: LD_INT 12
15104: PUSH
15105: LD_INT 12
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: ST_TO_ADDR
// hc_agressivity := 20 ;
15112: LD_ADDR_OWVAR 35
15116: PUSH
15117: LD_INT 20
15119: ST_TO_ADDR
// hc_class := class_tiger ;
15120: LD_ADDR_OWVAR 28
15124: PUSH
15125: LD_INT 14
15127: ST_TO_ADDR
// hc_gallery :=  ;
15128: LD_ADDR_OWVAR 33
15132: PUSH
15133: LD_STRING 
15135: ST_TO_ADDR
// hc_name :=  ;
15136: LD_ADDR_OWVAR 26
15140: PUSH
15141: LD_STRING 
15143: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15144: CALL_OW 44
15148: PPUSH
15149: LD_INT 0
15151: PPUSH
15152: CALL_OW 51
// end ;
15156: GO 15078
15158: POP
15159: POP
// end ;
15160: PPOPN 1
15162: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15163: LD_EXP 48
15167: PUSH
15168: LD_EXP 68
15172: AND
15173: IFFALSE 15182
15175: GO 15177
15177: DISABLE
// StreamSibBomb ;
15178: CALL 15183 0 0
15182: END
// export function StreamSibBomb ; var i , x , y ; begin
15183: LD_INT 0
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
// result := false ;
15189: LD_ADDR_VAR 0 1
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// for i := 1 to 16 do
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: DOUBLE
15203: LD_INT 1
15205: DEC
15206: ST_TO_ADDR
15207: LD_INT 16
15209: PUSH
15210: FOR_TO
15211: IFFALSE 15410
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: LD_INT 10
15220: PUSH
15221: LD_INT 20
15223: PUSH
15224: LD_INT 30
15226: PUSH
15227: LD_INT 40
15229: PUSH
15230: LD_INT 50
15232: PUSH
15233: LD_INT 60
15235: PUSH
15236: LD_INT 70
15238: PUSH
15239: LD_INT 80
15241: PUSH
15242: LD_INT 90
15244: PUSH
15245: LD_INT 100
15247: PUSH
15248: LD_INT 110
15250: PUSH
15251: LD_INT 120
15253: PUSH
15254: LD_INT 130
15256: PUSH
15257: LD_INT 140
15259: PUSH
15260: LD_INT 150
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 1
15282: PPUSH
15283: LD_INT 15
15285: PPUSH
15286: CALL_OW 12
15290: ARRAY
15291: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15292: LD_ADDR_VAR 0 4
15296: PUSH
15297: LD_INT 10
15299: PUSH
15300: LD_INT 20
15302: PUSH
15303: LD_INT 30
15305: PUSH
15306: LD_INT 40
15308: PUSH
15309: LD_INT 50
15311: PUSH
15312: LD_INT 60
15314: PUSH
15315: LD_INT 70
15317: PUSH
15318: LD_INT 80
15320: PUSH
15321: LD_INT 90
15323: PUSH
15324: LD_INT 100
15326: PUSH
15327: LD_INT 110
15329: PUSH
15330: LD_INT 120
15332: PUSH
15333: LD_INT 130
15335: PUSH
15336: LD_INT 140
15338: PUSH
15339: LD_INT 150
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 1
15361: PPUSH
15362: LD_INT 15
15364: PPUSH
15365: CALL_OW 12
15369: ARRAY
15370: ST_TO_ADDR
// if ValidHex ( x , y ) then
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_VAR 0 4
15380: PPUSH
15381: CALL_OW 488
15385: IFFALSE 15408
// begin result := [ x , y ] ;
15387: LD_ADDR_VAR 0 1
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_VAR 0 4
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: ST_TO_ADDR
// break ;
15406: GO 15410
// end ; end ;
15408: GO 15210
15410: POP
15411: POP
// if result then
15412: LD_VAR 0 1
15416: IFFALSE 15476
// begin ToLua ( playSibBomb() ) ;
15418: LD_STRING playSibBomb()
15420: PPUSH
15421: CALL_OW 559
// wait ( 0 0$14 ) ;
15425: LD_INT 490
15427: PPUSH
15428: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15432: LD_VAR 0 1
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: LD_VAR 0 1
15445: PUSH
15446: LD_INT 2
15448: ARRAY
15449: PPUSH
15450: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15454: LD_VAR 0 1
15458: PUSH
15459: LD_INT 1
15461: ARRAY
15462: PPUSH
15463: LD_VAR 0 1
15467: PUSH
15468: LD_INT 2
15470: ARRAY
15471: PPUSH
15472: CALL_OW 429
// end ; end ;
15476: LD_VAR 0 1
15480: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15481: LD_EXP 48
15485: PUSH
15486: LD_EXP 70
15490: AND
15491: IFFALSE 15503
15493: GO 15495
15495: DISABLE
// YouLost (  ) ;
15496: LD_STRING 
15498: PPUSH
15499: CALL_OW 104
15503: END
// every 0 0$1 trigger StreamModeActive and sFog do
15504: LD_EXP 48
15508: PUSH
15509: LD_EXP 69
15513: AND
15514: IFFALSE 15528
15516: GO 15518
15518: DISABLE
// FogOff ( your_side ) ;
15519: LD_OWVAR 2
15523: PPUSH
15524: CALL_OW 344
15528: END
// every 0 0$1 trigger StreamModeActive and sSun do
15529: LD_EXP 48
15533: PUSH
15534: LD_EXP 71
15538: AND
15539: IFFALSE 15567
15541: GO 15543
15543: DISABLE
// begin solar_recharge_percent := 0 ;
15544: LD_ADDR_OWVAR 79
15548: PUSH
15549: LD_INT 0
15551: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15552: LD_INT 10500
15554: PPUSH
15555: CALL_OW 67
// solar_recharge_percent := 100 ;
15559: LD_ADDR_OWVAR 79
15563: PUSH
15564: LD_INT 100
15566: ST_TO_ADDR
// end ;
15567: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15568: LD_EXP 48
15572: PUSH
15573: LD_EXP 72
15577: AND
15578: IFFALSE 15817
15580: GO 15582
15582: DISABLE
15583: LD_INT 0
15585: PPUSH
15586: PPUSH
15587: PPUSH
// begin tmp := [ ] ;
15588: LD_ADDR_VAR 0 3
15592: PUSH
15593: EMPTY
15594: ST_TO_ADDR
// for i := 1 to 6 do
15595: LD_ADDR_VAR 0 1
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_INT 6
15607: PUSH
15608: FOR_TO
15609: IFFALSE 15714
// begin uc_nation := nation_nature ;
15611: LD_ADDR_OWVAR 21
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// uc_side := 0 ;
15619: LD_ADDR_OWVAR 20
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15627: LD_ADDR_OWVAR 29
15631: PUSH
15632: LD_INT 12
15634: PUSH
15635: LD_INT 12
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: ST_TO_ADDR
// hc_agressivity := 20 ;
15642: LD_ADDR_OWVAR 35
15646: PUSH
15647: LD_INT 20
15649: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15650: LD_ADDR_OWVAR 28
15654: PUSH
15655: LD_INT 17
15657: ST_TO_ADDR
// hc_gallery :=  ;
15658: LD_ADDR_OWVAR 33
15662: PUSH
15663: LD_STRING 
15665: ST_TO_ADDR
// hc_name :=  ;
15666: LD_ADDR_OWVAR 26
15670: PUSH
15671: LD_STRING 
15673: ST_TO_ADDR
// un := CreateHuman ;
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: CALL_OW 44
15683: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15684: LD_VAR 0 2
15688: PPUSH
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 51
// tmp := tmp ^ un ;
15696: LD_ADDR_VAR 0 3
15700: PUSH
15701: LD_VAR 0 3
15705: PUSH
15706: LD_VAR 0 2
15710: ADD
15711: ST_TO_ADDR
// end ;
15712: GO 15608
15714: POP
15715: POP
// repeat wait ( 0 0$1 ) ;
15716: LD_INT 35
15718: PPUSH
15719: CALL_OW 67
// for un in tmp do
15723: LD_ADDR_VAR 0 2
15727: PUSH
15728: LD_VAR 0 3
15732: PUSH
15733: FOR_IN
15734: IFFALSE 15808
// begin if IsDead ( un ) then
15736: LD_VAR 0 2
15740: PPUSH
15741: CALL_OW 301
15745: IFFALSE 15765
// begin tmp := tmp diff un ;
15747: LD_ADDR_VAR 0 3
15751: PUSH
15752: LD_VAR 0 3
15756: PUSH
15757: LD_VAR 0 2
15761: DIFF
15762: ST_TO_ADDR
// continue ;
15763: GO 15733
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15765: LD_VAR 0 2
15769: PPUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 22
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 69
15791: PPUSH
15792: LD_VAR 0 2
15796: PPUSH
15797: CALL_OW 74
15801: PPUSH
15802: CALL_OW 115
// end ;
15806: GO 15733
15808: POP
15809: POP
// until not tmp ;
15810: LD_VAR 0 3
15814: NOT
15815: IFFALSE 15716
// end ;
15817: PPOPN 3
15819: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15820: LD_EXP 48
15824: PUSH
15825: LD_EXP 73
15829: AND
15830: IFFALSE 15884
15832: GO 15834
15834: DISABLE
// begin ToLua ( displayTroll(); ) ;
15835: LD_STRING displayTroll();
15837: PPUSH
15838: CALL_OW 559
// wait ( 3 3$00 ) ;
15842: LD_INT 6300
15844: PPUSH
15845: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15849: LD_STRING hideTroll();
15851: PPUSH
15852: CALL_OW 559
// wait ( 1 1$00 ) ;
15856: LD_INT 2100
15858: PPUSH
15859: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15863: LD_STRING displayTroll();
15865: PPUSH
15866: CALL_OW 559
// wait ( 1 1$00 ) ;
15870: LD_INT 2100
15872: PPUSH
15873: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15877: LD_STRING hideTroll();
15879: PPUSH
15880: CALL_OW 559
// end ;
15884: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15885: LD_EXP 48
15889: PUSH
15890: LD_EXP 74
15894: AND
15895: IFFALSE 15958
15897: GO 15899
15899: DISABLE
15900: LD_INT 0
15902: PPUSH
// begin p := 0 ;
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_INT 0
15910: ST_TO_ADDR
// repeat game_speed := 1 ;
15911: LD_ADDR_OWVAR 65
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15919: LD_INT 35
15921: PPUSH
15922: CALL_OW 67
// p := p + 1 ;
15926: LD_ADDR_VAR 0 1
15930: PUSH
15931: LD_VAR 0 1
15935: PUSH
15936: LD_INT 1
15938: PLUS
15939: ST_TO_ADDR
// until p >= 60 ;
15940: LD_VAR 0 1
15944: PUSH
15945: LD_INT 60
15947: GREATEREQUAL
15948: IFFALSE 15911
// game_speed := 4 ;
15950: LD_ADDR_OWVAR 65
15954: PUSH
15955: LD_INT 4
15957: ST_TO_ADDR
// end ;
15958: PPOPN 1
15960: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15961: LD_EXP 48
15965: PUSH
15966: LD_EXP 75
15970: AND
15971: IFFALSE 16117
15973: GO 15975
15975: DISABLE
15976: LD_INT 0
15978: PPUSH
15979: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15980: LD_ADDR_VAR 0 1
15984: PUSH
15985: LD_INT 22
15987: PUSH
15988: LD_OWVAR 2
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 2
15999: PUSH
16000: LD_INT 30
16002: PUSH
16003: LD_INT 0
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 30
16012: PUSH
16013: LD_INT 1
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PPUSH
16029: CALL_OW 69
16033: ST_TO_ADDR
// if not depot then
16034: LD_VAR 0 1
16038: NOT
16039: IFFALSE 16043
// exit ;
16041: GO 16117
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16043: LD_ADDR_VAR 0 2
16047: PUSH
16048: LD_VAR 0 1
16052: PUSH
16053: LD_INT 1
16055: PPUSH
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 12
16065: ARRAY
16066: PPUSH
16067: CALL_OW 274
16071: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16072: LD_VAR 0 2
16076: PPUSH
16077: LD_INT 1
16079: PPUSH
16080: LD_INT 0
16082: PPUSH
16083: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16087: LD_VAR 0 2
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: LD_INT 0
16097: PPUSH
16098: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: LD_INT 3
16109: PPUSH
16110: LD_INT 0
16112: PPUSH
16113: CALL_OW 277
// end ;
16117: PPOPN 2
16119: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16120: LD_EXP 48
16124: PUSH
16125: LD_EXP 76
16129: AND
16130: IFFALSE 16227
16132: GO 16134
16134: DISABLE
16135: LD_INT 0
16137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16138: LD_ADDR_VAR 0 1
16142: PUSH
16143: LD_INT 22
16145: PUSH
16146: LD_OWVAR 2
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 21
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 3
16167: PUSH
16168: LD_INT 23
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: PPUSH
16187: CALL_OW 69
16191: ST_TO_ADDR
// if not tmp then
16192: LD_VAR 0 1
16196: NOT
16197: IFFALSE 16201
// exit ;
16199: GO 16227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16201: LD_VAR 0 1
16205: PUSH
16206: LD_INT 1
16208: PPUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 12
16218: ARRAY
16219: PPUSH
16220: LD_INT 200
16222: PPUSH
16223: CALL_OW 234
// end ;
16227: PPOPN 1
16229: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16230: LD_EXP 48
16234: PUSH
16235: LD_EXP 77
16239: AND
16240: IFFALSE 16319
16242: GO 16244
16244: DISABLE
16245: LD_INT 0
16247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16248: LD_ADDR_VAR 0 1
16252: PUSH
16253: LD_INT 22
16255: PUSH
16256: LD_OWVAR 2
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 21
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PPUSH
16279: CALL_OW 69
16283: ST_TO_ADDR
// if not tmp then
16284: LD_VAR 0 1
16288: NOT
16289: IFFALSE 16293
// exit ;
16291: GO 16319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16293: LD_VAR 0 1
16297: PUSH
16298: LD_INT 1
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 12
16310: ARRAY
16311: PPUSH
16312: LD_INT 60
16314: PPUSH
16315: CALL_OW 234
// end ;
16319: PPOPN 1
16321: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16322: LD_EXP 48
16326: PUSH
16327: LD_EXP 78
16331: AND
16332: IFFALSE 16431
16334: GO 16336
16336: DISABLE
16337: LD_INT 0
16339: PPUSH
16340: PPUSH
// begin enable ;
16341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16342: LD_ADDR_VAR 0 1
16346: PUSH
16347: LD_INT 22
16349: PUSH
16350: LD_OWVAR 2
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 61
16361: PUSH
16362: EMPTY
16363: LIST
16364: PUSH
16365: LD_INT 33
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: PPUSH
16380: CALL_OW 69
16384: ST_TO_ADDR
// if not tmp then
16385: LD_VAR 0 1
16389: NOT
16390: IFFALSE 16394
// exit ;
16392: GO 16431
// for i in tmp do
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: LD_VAR 0 1
16403: PUSH
16404: FOR_IN
16405: IFFALSE 16429
// if IsControledBy ( i ) then
16407: LD_VAR 0 2
16411: PPUSH
16412: CALL_OW 312
16416: IFFALSE 16427
// ComUnlink ( i ) ;
16418: LD_VAR 0 2
16422: PPUSH
16423: CALL_OW 136
16427: GO 16404
16429: POP
16430: POP
// end ;
16431: PPOPN 2
16433: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16434: LD_EXP 48
16438: PUSH
16439: LD_EXP 79
16443: AND
16444: IFFALSE 16584
16446: GO 16448
16448: DISABLE
16449: LD_INT 0
16451: PPUSH
16452: PPUSH
// begin ToLua ( displayPowell(); ) ;
16453: LD_STRING displayPowell();
16455: PPUSH
16456: CALL_OW 559
// uc_side := 0 ;
16460: LD_ADDR_OWVAR 20
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// uc_nation := 2 ;
16468: LD_ADDR_OWVAR 21
16472: PUSH
16473: LD_INT 2
16475: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16476: LD_ADDR_OWVAR 37
16480: PUSH
16481: LD_INT 14
16483: ST_TO_ADDR
// vc_engine := engine_siberite ;
16484: LD_ADDR_OWVAR 39
16488: PUSH
16489: LD_INT 3
16491: ST_TO_ADDR
// vc_control := control_apeman ;
16492: LD_ADDR_OWVAR 38
16496: PUSH
16497: LD_INT 5
16499: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16500: LD_ADDR_OWVAR 40
16504: PUSH
16505: LD_INT 29
16507: ST_TO_ADDR
// un := CreateVehicle ;
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: CALL_OW 45
16517: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16518: LD_VAR 0 2
16522: PPUSH
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16530: LD_INT 35
16532: PPUSH
16533: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16537: LD_VAR 0 2
16541: PPUSH
16542: LD_INT 22
16544: PUSH
16545: LD_OWVAR 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: PPUSH
16559: LD_VAR 0 2
16563: PPUSH
16564: CALL_OW 74
16568: PPUSH
16569: CALL_OW 115
// until IsDead ( un ) ;
16573: LD_VAR 0 2
16577: PPUSH
16578: CALL_OW 301
16582: IFFALSE 16530
// end ;
16584: PPOPN 2
16586: END
// every 0 0$1 trigger StreamModeActive and sStu do
16587: LD_EXP 48
16591: PUSH
16592: LD_EXP 87
16596: AND
16597: IFFALSE 16613
16599: GO 16601
16601: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16602: LD_STRING displayStucuk();
16604: PPUSH
16605: CALL_OW 559
// ResetFog ;
16609: CALL_OW 335
// end ;
16613: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16614: LD_EXP 48
16618: PUSH
16619: LD_EXP 80
16623: AND
16624: IFFALSE 16765
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_OWVAR 2
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 21
16652: PUSH
16653: LD_INT 1
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PPUSH
16664: CALL_OW 69
16668: ST_TO_ADDR
// if not tmp then
16669: LD_VAR 0 2
16673: NOT
16674: IFFALSE 16678
// exit ;
16676: GO 16765
// un := tmp [ rand ( 1 , tmp ) ] ;
16678: LD_ADDR_VAR 0 1
16682: PUSH
16683: LD_VAR 0 2
16687: PUSH
16688: LD_INT 1
16690: PPUSH
16691: LD_VAR 0 2
16695: PPUSH
16696: CALL_OW 12
16700: ARRAY
16701: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_INT 0
16709: PPUSH
16710: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16714: LD_VAR 0 1
16718: PPUSH
16719: LD_OWVAR 3
16723: PUSH
16724: LD_VAR 0 1
16728: DIFF
16729: PPUSH
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 74
16739: PPUSH
16740: CALL_OW 115
// wait ( 0 0$20 ) ;
16744: LD_INT 700
16746: PPUSH
16747: CALL_OW 67
// SetSide ( un , your_side ) ;
16751: LD_VAR 0 1
16755: PPUSH
16756: LD_OWVAR 2
16760: PPUSH
16761: CALL_OW 235
// end ;
16765: PPOPN 2
16767: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16768: LD_EXP 48
16772: PUSH
16773: LD_EXP 81
16777: AND
16778: IFFALSE 16884
16780: GO 16782
16782: DISABLE
16783: LD_INT 0
16785: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16786: LD_ADDR_VAR 0 1
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_OWVAR 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 2
16805: PUSH
16806: LD_INT 30
16808: PUSH
16809: LD_INT 0
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 30
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: ST_TO_ADDR
// if not depot then
16840: LD_VAR 0 1
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 16884
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 1
16856: ARRAY
16857: PPUSH
16858: CALL_OW 250
16862: PPUSH
16863: LD_VAR 0 1
16867: PUSH
16868: LD_INT 1
16870: ARRAY
16871: PPUSH
16872: CALL_OW 251
16876: PPUSH
16877: LD_INT 70
16879: PPUSH
16880: CALL_OW 495
// end ;
16884: PPOPN 1
16886: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16887: LD_EXP 48
16891: PUSH
16892: LD_EXP 82
16896: AND
16897: IFFALSE 17108
16899: GO 16901
16901: DISABLE
16902: LD_INT 0
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16909: LD_ADDR_VAR 0 5
16913: PUSH
16914: LD_INT 22
16916: PUSH
16917: LD_OWVAR 2
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 21
16928: PUSH
16929: LD_INT 1
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: ST_TO_ADDR
// if not tmp then
16945: LD_VAR 0 5
16949: NOT
16950: IFFALSE 16954
// exit ;
16952: GO 17108
// for i in tmp do
16954: LD_ADDR_VAR 0 1
16958: PUSH
16959: LD_VAR 0 5
16963: PUSH
16964: FOR_IN
16965: IFFALSE 17106
// begin d := rand ( 0 , 5 ) ;
16967: LD_ADDR_VAR 0 4
16971: PUSH
16972: LD_INT 0
16974: PPUSH
16975: LD_INT 5
16977: PPUSH
16978: CALL_OW 12
16982: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16983: LD_ADDR_VAR 0 2
16987: PUSH
16988: LD_VAR 0 1
16992: PPUSH
16993: CALL_OW 250
16997: PPUSH
16998: LD_VAR 0 4
17002: PPUSH
17003: LD_INT 3
17005: PPUSH
17006: LD_INT 12
17008: PPUSH
17009: CALL_OW 12
17013: PPUSH
17014: CALL_OW 272
17018: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17019: LD_ADDR_VAR 0 3
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 251
17033: PPUSH
17034: LD_VAR 0 4
17038: PPUSH
17039: LD_INT 3
17041: PPUSH
17042: LD_INT 12
17044: PPUSH
17045: CALL_OW 12
17049: PPUSH
17050: CALL_OW 273
17054: ST_TO_ADDR
// if ValidHex ( x , y ) then
17055: LD_VAR 0 2
17059: PPUSH
17060: LD_VAR 0 3
17064: PPUSH
17065: CALL_OW 488
17069: IFFALSE 17104
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_VAR 0 2
17080: PPUSH
17081: LD_VAR 0 3
17085: PPUSH
17086: LD_INT 3
17088: PPUSH
17089: LD_INT 6
17091: PPUSH
17092: CALL_OW 12
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 483
// end ;
17104: GO 16964
17106: POP
17107: POP
// end ;
17108: PPOPN 5
17110: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17111: LD_EXP 48
17115: PUSH
17116: LD_EXP 83
17120: AND
17121: IFFALSE 17215
17123: GO 17125
17125: DISABLE
17126: LD_INT 0
17128: PPUSH
17129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17130: LD_ADDR_VAR 0 2
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_OWVAR 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 32
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 21
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if not tmp then
17177: LD_VAR 0 2
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17215
// for i in tmp do
17186: LD_ADDR_VAR 0 1
17190: PUSH
17191: LD_VAR 0 2
17195: PUSH
17196: FOR_IN
17197: IFFALSE 17213
// SetFuel ( i , 0 ) ;
17199: LD_VAR 0 1
17203: PPUSH
17204: LD_INT 0
17206: PPUSH
17207: CALL_OW 240
17211: GO 17196
17213: POP
17214: POP
// end ;
17215: PPOPN 2
17217: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17218: LD_EXP 48
17222: PUSH
17223: LD_EXP 84
17227: AND
17228: IFFALSE 17294
17230: GO 17232
17232: DISABLE
17233: LD_INT 0
17235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17236: LD_ADDR_VAR 0 1
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_OWVAR 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 30
17255: PUSH
17256: LD_INT 29
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: ST_TO_ADDR
// if not tmp then
17272: LD_VAR 0 1
17276: NOT
17277: IFFALSE 17281
// exit ;
17279: GO 17294
// DestroyUnit ( tmp [ 1 ] ) ;
17281: LD_VAR 0 1
17285: PUSH
17286: LD_INT 1
17288: ARRAY
17289: PPUSH
17290: CALL_OW 65
// end ;
17294: PPOPN 1
17296: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17297: LD_EXP 48
17301: PUSH
17302: LD_EXP 86
17306: AND
17307: IFFALSE 17436
17309: GO 17311
17311: DISABLE
17312: LD_INT 0
17314: PPUSH
// begin uc_side := 0 ;
17315: LD_ADDR_OWVAR 20
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// uc_nation := nation_arabian ;
17323: LD_ADDR_OWVAR 21
17327: PUSH
17328: LD_INT 2
17330: ST_TO_ADDR
// hc_gallery :=  ;
17331: LD_ADDR_OWVAR 33
17335: PUSH
17336: LD_STRING 
17338: ST_TO_ADDR
// hc_name :=  ;
17339: LD_ADDR_OWVAR 26
17343: PUSH
17344: LD_STRING 
17346: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17347: LD_INT 1
17349: PPUSH
17350: LD_INT 11
17352: PPUSH
17353: LD_INT 10
17355: PPUSH
17356: CALL_OW 380
// un := CreateHuman ;
17360: LD_ADDR_VAR 0 1
17364: PUSH
17365: CALL_OW 44
17369: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17370: LD_VAR 0 1
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17382: LD_INT 35
17384: PPUSH
17385: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17389: LD_VAR 0 1
17393: PPUSH
17394: LD_INT 22
17396: PUSH
17397: LD_OWVAR 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 69
17410: PPUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 74
17420: PPUSH
17421: CALL_OW 115
// until IsDead ( un ) ;
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 301
17434: IFFALSE 17382
// end ;
17436: PPOPN 1
17438: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17439: LD_EXP 48
17443: PUSH
17444: LD_EXP 88
17448: AND
17449: IFFALSE 17461
17451: GO 17453
17453: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17454: LD_STRING earthquake(getX(game), 0, 32)
17456: PPUSH
17457: CALL_OW 559
17461: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17462: LD_EXP 48
17466: PUSH
17467: LD_EXP 89
17471: AND
17472: IFFALSE 17563
17474: GO 17476
17476: DISABLE
17477: LD_INT 0
17479: PPUSH
// begin enable ;
17480: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_INT 22
17488: PUSH
17489: LD_OWVAR 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 21
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 33
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 69
17527: ST_TO_ADDR
// if not tmp then
17528: LD_VAR 0 1
17532: NOT
17533: IFFALSE 17537
// exit ;
17535: GO 17563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 1
17544: PPUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 12
17554: ARRAY
17555: PPUSH
17556: LD_INT 1
17558: PPUSH
17559: CALL_OW 234
// end ;
17563: PPOPN 1
17565: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17566: LD_EXP 48
17570: PUSH
17571: LD_EXP 90
17575: AND
17576: IFFALSE 17717
17578: GO 17580
17580: DISABLE
17581: LD_INT 0
17583: PPUSH
17584: PPUSH
17585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17586: LD_ADDR_VAR 0 3
17590: PUSH
17591: LD_INT 22
17593: PUSH
17594: LD_OWVAR 2
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 1
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PPUSH
17617: CALL_OW 69
17621: ST_TO_ADDR
// if not tmp then
17622: LD_VAR 0 3
17626: NOT
17627: IFFALSE 17631
// exit ;
17629: GO 17717
// un := tmp [ rand ( 1 , tmp ) ] ;
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_INT 1
17643: PPUSH
17644: LD_VAR 0 3
17648: PPUSH
17649: CALL_OW 12
17653: ARRAY
17654: ST_TO_ADDR
// if Crawls ( un ) then
17655: LD_VAR 0 2
17659: PPUSH
17660: CALL_OW 318
17664: IFFALSE 17675
// ComWalk ( un ) ;
17666: LD_VAR 0 2
17670: PPUSH
17671: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17675: LD_VAR 0 2
17679: PPUSH
17680: LD_INT 9
17682: PPUSH
17683: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17687: LD_INT 28
17689: PPUSH
17690: LD_OWVAR 2
17694: PPUSH
17695: LD_INT 2
17697: PPUSH
17698: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17702: LD_INT 29
17704: PPUSH
17705: LD_OWVAR 2
17709: PPUSH
17710: LD_INT 2
17712: PPUSH
17713: CALL_OW 322
// end ;
17717: PPOPN 3
17719: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17720: LD_EXP 48
17724: PUSH
17725: LD_EXP 91
17729: AND
17730: IFFALSE 17841
17732: GO 17734
17734: DISABLE
17735: LD_INT 0
17737: PPUSH
17738: PPUSH
17739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: LD_INT 22
17747: PUSH
17748: LD_OWVAR 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 25
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 69
17775: ST_TO_ADDR
// if not tmp then
17776: LD_VAR 0 3
17780: NOT
17781: IFFALSE 17785
// exit ;
17783: GO 17841
// un := tmp [ rand ( 1 , tmp ) ] ;
17785: LD_ADDR_VAR 0 2
17789: PUSH
17790: LD_VAR 0 3
17794: PUSH
17795: LD_INT 1
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: CALL_OW 12
17807: ARRAY
17808: ST_TO_ADDR
// if Crawls ( un ) then
17809: LD_VAR 0 2
17813: PPUSH
17814: CALL_OW 318
17818: IFFALSE 17829
// ComWalk ( un ) ;
17820: LD_VAR 0 2
17824: PPUSH
17825: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17829: LD_VAR 0 2
17833: PPUSH
17834: LD_INT 8
17836: PPUSH
17837: CALL_OW 336
// end ;
17841: PPOPN 3
17843: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17844: LD_EXP 48
17848: PUSH
17849: LD_EXP 92
17853: AND
17854: IFFALSE 17998
17856: GO 17858
17858: DISABLE
17859: LD_INT 0
17861: PPUSH
17862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17863: LD_ADDR_VAR 0 2
17867: PUSH
17868: LD_INT 22
17870: PUSH
17871: LD_OWVAR 2
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 21
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 34
17895: PUSH
17896: LD_INT 12
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 34
17905: PUSH
17906: LD_INT 51
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 34
17915: PUSH
17916: LD_INT 32
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 69
17938: ST_TO_ADDR
// if not tmp then
17939: LD_VAR 0 2
17943: NOT
17944: IFFALSE 17948
// exit ;
17946: GO 17998
// for i in tmp do
17948: LD_ADDR_VAR 0 1
17952: PUSH
17953: LD_VAR 0 2
17957: PUSH
17958: FOR_IN
17959: IFFALSE 17996
// if GetCargo ( i , mat_artifact ) = 0 then
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_INT 4
17968: PPUSH
17969: CALL_OW 289
17973: PUSH
17974: LD_INT 0
17976: EQUAL
17977: IFFALSE 17994
// SetCargo ( i , mat_siberit , 100 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 3
17986: PPUSH
17987: LD_INT 100
17989: PPUSH
17990: CALL_OW 290
17994: GO 17958
17996: POP
17997: POP
// end ;
17998: PPOPN 2
18000: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18001: LD_EXP 48
18005: PUSH
18006: LD_EXP 93
18010: AND
18011: IFFALSE 18194
18013: GO 18015
18015: DISABLE
18016: LD_INT 0
18018: PPUSH
18019: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18020: LD_ADDR_VAR 0 2
18024: PUSH
18025: LD_INT 22
18027: PUSH
18028: LD_OWVAR 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PPUSH
18037: CALL_OW 69
18041: ST_TO_ADDR
// if not tmp then
18042: LD_VAR 0 2
18046: NOT
18047: IFFALSE 18051
// exit ;
18049: GO 18194
// for i := 1 to 2 do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: DOUBLE
18057: LD_INT 1
18059: DEC
18060: ST_TO_ADDR
18061: LD_INT 2
18063: PUSH
18064: FOR_TO
18065: IFFALSE 18192
// begin uc_side := your_side ;
18067: LD_ADDR_OWVAR 20
18071: PUSH
18072: LD_OWVAR 2
18076: ST_TO_ADDR
// uc_nation := nation_american ;
18077: LD_ADDR_OWVAR 21
18081: PUSH
18082: LD_INT 1
18084: ST_TO_ADDR
// vc_chassis := us_morphling ;
18085: LD_ADDR_OWVAR 37
18089: PUSH
18090: LD_INT 5
18092: ST_TO_ADDR
// vc_engine := engine_siberite ;
18093: LD_ADDR_OWVAR 39
18097: PUSH
18098: LD_INT 3
18100: ST_TO_ADDR
// vc_control := control_computer ;
18101: LD_ADDR_OWVAR 38
18105: PUSH
18106: LD_INT 3
18108: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18109: LD_ADDR_OWVAR 40
18113: PUSH
18114: LD_INT 10
18116: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18117: LD_VAR 0 2
18121: PUSH
18122: LD_INT 1
18124: ARRAY
18125: PPUSH
18126: CALL_OW 310
18130: NOT
18131: IFFALSE 18178
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18133: CALL_OW 45
18137: PPUSH
18138: LD_VAR 0 2
18142: PUSH
18143: LD_INT 1
18145: ARRAY
18146: PPUSH
18147: CALL_OW 250
18151: PPUSH
18152: LD_VAR 0 2
18156: PUSH
18157: LD_INT 1
18159: ARRAY
18160: PPUSH
18161: CALL_OW 251
18165: PPUSH
18166: LD_INT 12
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: CALL_OW 50
18176: GO 18190
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18178: CALL_OW 45
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 51
// end ;
18190: GO 18064
18192: POP
18193: POP
// end ;
18194: PPOPN 2
18196: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18197: LD_EXP 48
18201: PUSH
18202: LD_EXP 94
18206: AND
18207: IFFALSE 18429
18209: GO 18211
18211: DISABLE
18212: LD_INT 0
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
18218: PPUSH
18219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18220: LD_ADDR_VAR 0 6
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_OWVAR 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 21
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 3
18249: PUSH
18250: LD_INT 23
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: ST_TO_ADDR
// if not tmp then
18274: LD_VAR 0 6
18278: NOT
18279: IFFALSE 18283
// exit ;
18281: GO 18429
// s1 := rand ( 1 , 4 ) ;
18283: LD_ADDR_VAR 0 2
18287: PUSH
18288: LD_INT 1
18290: PPUSH
18291: LD_INT 4
18293: PPUSH
18294: CALL_OW 12
18298: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18299: LD_ADDR_VAR 0 4
18303: PUSH
18304: LD_VAR 0 6
18308: PUSH
18309: LD_INT 1
18311: ARRAY
18312: PPUSH
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 259
18322: ST_TO_ADDR
// if s1 = 1 then
18323: LD_VAR 0 2
18327: PUSH
18328: LD_INT 1
18330: EQUAL
18331: IFFALSE 18351
// s2 := rand ( 2 , 4 ) else
18333: LD_ADDR_VAR 0 3
18337: PUSH
18338: LD_INT 2
18340: PPUSH
18341: LD_INT 4
18343: PPUSH
18344: CALL_OW 12
18348: ST_TO_ADDR
18349: GO 18359
// s2 := 1 ;
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18359: LD_ADDR_VAR 0 5
18363: PUSH
18364: LD_VAR 0 6
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: LD_VAR 0 3
18377: PPUSH
18378: CALL_OW 259
18382: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18383: LD_VAR 0 6
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: PPUSH
18392: LD_VAR 0 2
18396: PPUSH
18397: LD_VAR 0 5
18401: PPUSH
18402: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18406: LD_VAR 0 6
18410: PUSH
18411: LD_INT 1
18413: ARRAY
18414: PPUSH
18415: LD_VAR 0 3
18419: PPUSH
18420: LD_VAR 0 4
18424: PPUSH
18425: CALL_OW 237
// end ;
18429: PPOPN 6
18431: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18432: LD_EXP 48
18436: PUSH
18437: LD_EXP 95
18441: AND
18442: IFFALSE 18521
18444: GO 18446
18446: DISABLE
18447: LD_INT 0
18449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_INT 22
18457: PUSH
18458: LD_OWVAR 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 30
18469: PUSH
18470: LD_INT 3
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PPUSH
18481: CALL_OW 69
18485: ST_TO_ADDR
// if not tmp then
18486: LD_VAR 0 1
18490: NOT
18491: IFFALSE 18495
// exit ;
18493: GO 18521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18495: LD_VAR 0 1
18499: PUSH
18500: LD_INT 1
18502: PPUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 12
18512: ARRAY
18513: PPUSH
18514: LD_INT 1
18516: PPUSH
18517: CALL_OW 234
// end ;
18521: PPOPN 1
18523: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18524: LD_EXP 48
18528: PUSH
18529: LD_EXP 96
18533: AND
18534: IFFALSE 18646
18536: GO 18538
18538: DISABLE
18539: LD_INT 0
18541: PPUSH
18542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18543: LD_ADDR_VAR 0 2
18547: PUSH
18548: LD_INT 22
18550: PUSH
18551: LD_OWVAR 2
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 30
18565: PUSH
18566: LD_INT 27
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 30
18575: PUSH
18576: LD_INT 26
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 30
18585: PUSH
18586: LD_INT 28
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PPUSH
18603: CALL_OW 69
18607: ST_TO_ADDR
// if not tmp then
18608: LD_VAR 0 2
18612: NOT
18613: IFFALSE 18617
// exit ;
18615: GO 18646
// for i in tmp do
18617: LD_ADDR_VAR 0 1
18621: PUSH
18622: LD_VAR 0 2
18626: PUSH
18627: FOR_IN
18628: IFFALSE 18644
// SetLives ( i , 1 ) ;
18630: LD_VAR 0 1
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: CALL_OW 234
18642: GO 18627
18644: POP
18645: POP
// end ;
18646: PPOPN 2
18648: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18649: LD_EXP 48
18653: PUSH
18654: LD_EXP 97
18658: AND
18659: IFFALSE 18946
18661: GO 18663
18663: DISABLE
18664: LD_INT 0
18666: PPUSH
18667: PPUSH
18668: PPUSH
// begin i := rand ( 1 , 7 ) ;
18669: LD_ADDR_VAR 0 1
18673: PUSH
18674: LD_INT 1
18676: PPUSH
18677: LD_INT 7
18679: PPUSH
18680: CALL_OW 12
18684: ST_TO_ADDR
// case i of 1 :
18685: LD_VAR 0 1
18689: PUSH
18690: LD_INT 1
18692: DOUBLE
18693: EQUAL
18694: IFTRUE 18698
18696: GO 18708
18698: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18699: LD_STRING earthquake(getX(game), 0, 32)
18701: PPUSH
18702: CALL_OW 559
18706: GO 18946
18708: LD_INT 2
18710: DOUBLE
18711: EQUAL
18712: IFTRUE 18716
18714: GO 18730
18716: POP
// begin ToLua ( displayStucuk(); ) ;
18717: LD_STRING displayStucuk();
18719: PPUSH
18720: CALL_OW 559
// ResetFog ;
18724: CALL_OW 335
// end ; 3 :
18728: GO 18946
18730: LD_INT 3
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18842
18738: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18739: LD_ADDR_VAR 0 2
18743: PUSH
18744: LD_INT 22
18746: PUSH
18747: LD_OWVAR 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 25
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PPUSH
18770: CALL_OW 69
18774: ST_TO_ADDR
// if not tmp then
18775: LD_VAR 0 2
18779: NOT
18780: IFFALSE 18784
// exit ;
18782: GO 18946
// un := tmp [ rand ( 1 , tmp ) ] ;
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_VAR 0 2
18793: PUSH
18794: LD_INT 1
18796: PPUSH
18797: LD_VAR 0 2
18801: PPUSH
18802: CALL_OW 12
18806: ARRAY
18807: ST_TO_ADDR
// if Crawls ( un ) then
18808: LD_VAR 0 3
18812: PPUSH
18813: CALL_OW 318
18817: IFFALSE 18828
// ComWalk ( un ) ;
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18828: LD_VAR 0 3
18832: PPUSH
18833: LD_INT 8
18835: PPUSH
18836: CALL_OW 336
// end ; 4 :
18840: GO 18946
18842: LD_INT 4
18844: DOUBLE
18845: EQUAL
18846: IFTRUE 18850
18848: GO 18924
18850: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18851: LD_ADDR_VAR 0 2
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_OWVAR 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 30
18870: PUSH
18871: LD_INT 29
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: ST_TO_ADDR
// if not tmp then
18887: LD_VAR 0 2
18891: NOT
18892: IFFALSE 18896
// exit ;
18894: GO 18946
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18896: LD_VAR 0 2
18900: PUSH
18901: LD_INT 1
18903: ARRAY
18904: PPUSH
18905: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18909: LD_VAR 0 2
18913: PUSH
18914: LD_INT 1
18916: ARRAY
18917: PPUSH
18918: CALL_OW 65
// end ; 5 .. 7 :
18922: GO 18946
18924: LD_INT 5
18926: DOUBLE
18927: GREATEREQUAL
18928: IFFALSE 18936
18930: LD_INT 7
18932: DOUBLE
18933: LESSEQUAL
18934: IFTRUE 18938
18936: GO 18945
18938: POP
// StreamSibBomb ; end ;
18939: CALL 15183 0 0
18943: GO 18946
18945: POP
// end ;
18946: PPOPN 3
18948: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18949: LD_EXP 48
18953: PUSH
18954: LD_EXP 98
18958: AND
18959: IFFALSE 19115
18961: GO 18963
18963: DISABLE
18964: LD_INT 0
18966: PPUSH
18967: PPUSH
18968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18969: LD_ADDR_VAR 0 2
18973: PUSH
18974: LD_INT 81
18976: PUSH
18977: LD_OWVAR 2
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: LD_INT 21
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 21
19001: PUSH
19002: LD_INT 2
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PPUSH
19018: CALL_OW 69
19022: ST_TO_ADDR
// if not tmp then
19023: LD_VAR 0 2
19027: NOT
19028: IFFALSE 19032
// exit ;
19030: GO 19115
// p := 0 ;
19032: LD_ADDR_VAR 0 3
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19040: LD_INT 35
19042: PPUSH
19043: CALL_OW 67
// p := p + 1 ;
19047: LD_ADDR_VAR 0 3
19051: PUSH
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: ST_TO_ADDR
// for i in tmp do
19061: LD_ADDR_VAR 0 1
19065: PUSH
19066: LD_VAR 0 2
19070: PUSH
19071: FOR_IN
19072: IFFALSE 19103
// if GetLives ( i ) < 1000 then
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL_OW 256
19083: PUSH
19084: LD_INT 1000
19086: LESS
19087: IFFALSE 19101
// SetLives ( i , 1000 ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_INT 1000
19096: PPUSH
19097: CALL_OW 234
19101: GO 19071
19103: POP
19104: POP
// until p > 20 ;
19105: LD_VAR 0 3
19109: PUSH
19110: LD_INT 20
19112: GREATER
19113: IFFALSE 19040
// end ;
19115: PPOPN 3
19117: END
// every 0 0$1 trigger StreamModeActive and sTime do
19118: LD_EXP 48
19122: PUSH
19123: LD_EXP 99
19127: AND
19128: IFFALSE 19163
19130: GO 19132
19132: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19133: LD_INT 28
19135: PPUSH
19136: LD_OWVAR 2
19140: PPUSH
19141: LD_INT 2
19143: PPUSH
19144: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19148: LD_INT 30
19150: PPUSH
19151: LD_OWVAR 2
19155: PPUSH
19156: LD_INT 2
19158: PPUSH
19159: CALL_OW 322
// end ;
19163: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19164: LD_EXP 48
19168: PUSH
19169: LD_EXP 100
19173: AND
19174: IFFALSE 19295
19176: GO 19178
19178: DISABLE
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19183: LD_ADDR_VAR 0 2
19187: PUSH
19188: LD_INT 22
19190: PUSH
19191: LD_OWVAR 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 21
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 3
19212: PUSH
19213: LD_INT 23
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: ST_TO_ADDR
// if not tmp then
19237: LD_VAR 0 2
19241: NOT
19242: IFFALSE 19246
// exit ;
19244: GO 19295
// for i in tmp do
19246: LD_ADDR_VAR 0 1
19250: PUSH
19251: LD_VAR 0 2
19255: PUSH
19256: FOR_IN
19257: IFFALSE 19293
// begin if Crawls ( i ) then
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 318
19268: IFFALSE 19279
// ComWalk ( i ) ;
19270: LD_VAR 0 1
19274: PPUSH
19275: CALL_OW 138
// SetClass ( i , 2 ) ;
19279: LD_VAR 0 1
19283: PPUSH
19284: LD_INT 2
19286: PPUSH
19287: CALL_OW 336
// end ;
19291: GO 19256
19293: POP
19294: POP
// end ;
19295: PPOPN 2
19297: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19298: LD_EXP 48
19302: PUSH
19303: LD_EXP 101
19307: AND
19308: IFFALSE 19596
19310: GO 19312
19312: DISABLE
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
19317: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19318: LD_OWVAR 2
19322: PPUSH
19323: LD_INT 9
19325: PPUSH
19326: LD_INT 1
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19336: LD_INT 9
19338: PPUSH
19339: LD_OWVAR 2
19343: PPUSH
19344: CALL_OW 343
// uc_side := 9 ;
19348: LD_ADDR_OWVAR 20
19352: PUSH
19353: LD_INT 9
19355: ST_TO_ADDR
// uc_nation := 2 ;
19356: LD_ADDR_OWVAR 21
19360: PUSH
19361: LD_INT 2
19363: ST_TO_ADDR
// hc_name := Dark Warrior ;
19364: LD_ADDR_OWVAR 26
19368: PUSH
19369: LD_STRING Dark Warrior
19371: ST_TO_ADDR
// hc_gallery :=  ;
19372: LD_ADDR_OWVAR 33
19376: PUSH
19377: LD_STRING 
19379: ST_TO_ADDR
// hc_noskilllimit := true ;
19380: LD_ADDR_OWVAR 76
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19388: LD_ADDR_OWVAR 31
19392: PUSH
19393: LD_INT 30
19395: PUSH
19396: LD_INT 30
19398: PUSH
19399: LD_INT 30
19401: PUSH
19402: LD_INT 30
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: ST_TO_ADDR
// un := CreateHuman ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: CALL_OW 44
19420: ST_TO_ADDR
// hc_noskilllimit := false ;
19421: LD_ADDR_OWVAR 76
19425: PUSH
19426: LD_INT 0
19428: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19429: LD_VAR 0 3
19433: PPUSH
19434: LD_INT 1
19436: PPUSH
19437: CALL_OW 51
// ToLua ( playRanger() ) ;
19441: LD_STRING playRanger()
19443: PPUSH
19444: CALL_OW 559
// p := 0 ;
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19456: LD_INT 35
19458: PPUSH
19459: CALL_OW 67
// p := p + 1 ;
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: LD_INT 1
19475: PLUS
19476: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19477: LD_VAR 0 3
19481: PPUSH
19482: CALL_OW 256
19486: PUSH
19487: LD_INT 1000
19489: LESS
19490: IFFALSE 19504
// SetLives ( un , 1000 ) ;
19492: LD_VAR 0 3
19496: PPUSH
19497: LD_INT 1000
19499: PPUSH
19500: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19504: LD_VAR 0 3
19508: PPUSH
19509: LD_INT 81
19511: PUSH
19512: LD_OWVAR 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 91
19523: PUSH
19524: LD_VAR 0 3
19528: PUSH
19529: LD_INT 30
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 69
19545: PPUSH
19546: LD_VAR 0 3
19550: PPUSH
19551: CALL_OW 74
19555: PPUSH
19556: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19560: LD_VAR 0 2
19564: PUSH
19565: LD_INT 80
19567: GREATER
19568: PUSH
19569: LD_VAR 0 3
19573: PPUSH
19574: CALL_OW 301
19578: OR
19579: IFFALSE 19456
// if un then
19581: LD_VAR 0 3
19585: IFFALSE 19596
// RemoveUnit ( un ) ;
19587: LD_VAR 0 3
19591: PPUSH
19592: CALL_OW 64
// end ;
19596: PPOPN 3
19598: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19599: LD_EXP 102
19603: IFFALSE 19719
19605: GO 19607
19607: DISABLE
19608: LD_INT 0
19610: PPUSH
19611: PPUSH
19612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 81
19620: PUSH
19621: LD_OWVAR 2
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 21
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PPUSH
19644: CALL_OW 69
19648: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19649: LD_STRING playComputer()
19651: PPUSH
19652: CALL_OW 559
// if not tmp then
19656: LD_VAR 0 2
19660: NOT
19661: IFFALSE 19665
// exit ;
19663: GO 19719
// for i in tmp do
19665: LD_ADDR_VAR 0 1
19669: PUSH
19670: LD_VAR 0 2
19674: PUSH
19675: FOR_IN
19676: IFFALSE 19717
// for j := 1 to 4 do
19678: LD_ADDR_VAR 0 3
19682: PUSH
19683: DOUBLE
19684: LD_INT 1
19686: DEC
19687: ST_TO_ADDR
19688: LD_INT 4
19690: PUSH
19691: FOR_TO
19692: IFFALSE 19713
// SetSkill ( i , j , 10 ) ;
19694: LD_VAR 0 1
19698: PPUSH
19699: LD_VAR 0 3
19703: PPUSH
19704: LD_INT 10
19706: PPUSH
19707: CALL_OW 237
19711: GO 19691
19713: POP
19714: POP
19715: GO 19675
19717: POP
19718: POP
// end ;
19719: PPOPN 3
19721: END
// every 0 0$1 trigger s30 do var i , tmp ;
19722: LD_EXP 103
19726: IFFALSE 19795
19728: GO 19730
19730: DISABLE
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19735: LD_ADDR_VAR 0 2
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PPUSH
19752: CALL_OW 69
19756: ST_TO_ADDR
// if not tmp then
19757: LD_VAR 0 2
19761: NOT
19762: IFFALSE 19766
// exit ;
19764: GO 19795
// for i in tmp do
19766: LD_ADDR_VAR 0 1
19770: PUSH
19771: LD_VAR 0 2
19775: PUSH
19776: FOR_IN
19777: IFFALSE 19793
// SetLives ( i , 300 ) ;
19779: LD_VAR 0 1
19783: PPUSH
19784: LD_INT 300
19786: PPUSH
19787: CALL_OW 234
19791: GO 19776
19793: POP
19794: POP
// end ;
19795: PPOPN 2
19797: END
// every 0 0$1 trigger s60 do var i , tmp ;
19798: LD_EXP 104
19802: IFFALSE 19871
19804: GO 19806
19806: DISABLE
19807: LD_INT 0
19809: PPUSH
19810: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19811: LD_ADDR_VAR 0 2
19815: PUSH
19816: LD_INT 22
19818: PUSH
19819: LD_OWVAR 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PPUSH
19828: CALL_OW 69
19832: ST_TO_ADDR
// if not tmp then
19833: LD_VAR 0 2
19837: NOT
19838: IFFALSE 19842
// exit ;
19840: GO 19871
// for i in tmp do
19842: LD_ADDR_VAR 0 1
19846: PUSH
19847: LD_VAR 0 2
19851: PUSH
19852: FOR_IN
19853: IFFALSE 19869
// SetLives ( i , 600 ) ;
19855: LD_VAR 0 1
19859: PPUSH
19860: LD_INT 600
19862: PPUSH
19863: CALL_OW 234
19867: GO 19852
19869: POP
19870: POP
// end ;
19871: PPOPN 2
19873: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19874: LD_INT 0
19876: PPUSH
// case cmd of 301 :
19877: LD_VAR 0 1
19881: PUSH
19882: LD_INT 301
19884: DOUBLE
19885: EQUAL
19886: IFTRUE 19890
19888: GO 19922
19890: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19891: LD_VAR 0 6
19895: PPUSH
19896: LD_VAR 0 7
19900: PPUSH
19901: LD_VAR 0 8
19905: PPUSH
19906: LD_VAR 0 4
19910: PPUSH
19911: LD_VAR 0 5
19915: PPUSH
19916: CALL 21123 0 5
19920: GO 20043
19922: LD_INT 302
19924: DOUBLE
19925: EQUAL
19926: IFTRUE 19930
19928: GO 19967
19930: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19931: LD_VAR 0 6
19935: PPUSH
19936: LD_VAR 0 7
19940: PPUSH
19941: LD_VAR 0 8
19945: PPUSH
19946: LD_VAR 0 9
19950: PPUSH
19951: LD_VAR 0 4
19955: PPUSH
19956: LD_VAR 0 5
19960: PPUSH
19961: CALL 21214 0 6
19965: GO 20043
19967: LD_INT 303
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 20012
19975: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19976: LD_VAR 0 6
19980: PPUSH
19981: LD_VAR 0 7
19985: PPUSH
19986: LD_VAR 0 8
19990: PPUSH
19991: LD_VAR 0 9
19995: PPUSH
19996: LD_VAR 0 4
20000: PPUSH
20001: LD_VAR 0 5
20005: PPUSH
20006: CALL 20048 0 6
20010: GO 20043
20012: LD_INT 304
20014: DOUBLE
20015: EQUAL
20016: IFTRUE 20020
20018: GO 20042
20020: POP
// hHackTeleport ( unit , x , y ) ; end ;
20021: LD_VAR 0 2
20025: PPUSH
20026: LD_VAR 0 4
20030: PPUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: CALL 21807 0 3
20040: GO 20043
20042: POP
// end ;
20043: LD_VAR 0 12
20047: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20048: LD_INT 0
20050: PPUSH
20051: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20052: LD_VAR 0 1
20056: PUSH
20057: LD_INT 1
20059: LESS
20060: PUSH
20061: LD_VAR 0 1
20065: PUSH
20066: LD_INT 3
20068: GREATER
20069: OR
20070: PUSH
20071: LD_VAR 0 5
20075: PPUSH
20076: LD_VAR 0 6
20080: PPUSH
20081: CALL_OW 428
20085: OR
20086: IFFALSE 20090
// exit ;
20088: GO 20810
// uc_side := your_side ;
20090: LD_ADDR_OWVAR 20
20094: PUSH
20095: LD_OWVAR 2
20099: ST_TO_ADDR
// uc_nation := nation ;
20100: LD_ADDR_OWVAR 21
20104: PUSH
20105: LD_VAR 0 1
20109: ST_TO_ADDR
// bc_level = 1 ;
20110: LD_ADDR_OWVAR 43
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// case btype of 1 :
20118: LD_VAR 0 2
20122: PUSH
20123: LD_INT 1
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20142
20131: POP
// bc_type := b_depot ; 2 :
20132: LD_ADDR_OWVAR 42
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
20140: GO 20754
20142: LD_INT 2
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20161
20150: POP
// bc_type := b_warehouse ; 3 :
20151: LD_ADDR_OWVAR 42
20155: PUSH
20156: LD_INT 1
20158: ST_TO_ADDR
20159: GO 20754
20161: LD_INT 3
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20180
20169: POP
// bc_type := b_lab ; 4 .. 9 :
20170: LD_ADDR_OWVAR 42
20174: PUSH
20175: LD_INT 6
20177: ST_TO_ADDR
20178: GO 20754
20180: LD_INT 4
20182: DOUBLE
20183: GREATEREQUAL
20184: IFFALSE 20192
20186: LD_INT 9
20188: DOUBLE
20189: LESSEQUAL
20190: IFTRUE 20194
20192: GO 20246
20194: POP
// begin bc_type := b_lab_half ;
20195: LD_ADDR_OWVAR 42
20199: PUSH
20200: LD_INT 7
20202: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20203: LD_ADDR_OWVAR 44
20207: PUSH
20208: LD_INT 10
20210: PUSH
20211: LD_INT 11
20213: PUSH
20214: LD_INT 12
20216: PUSH
20217: LD_INT 15
20219: PUSH
20220: LD_INT 14
20222: PUSH
20223: LD_INT 13
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: LD_VAR 0 2
20238: PUSH
20239: LD_INT 3
20241: MINUS
20242: ARRAY
20243: ST_TO_ADDR
// end ; 10 .. 13 :
20244: GO 20754
20246: LD_INT 10
20248: DOUBLE
20249: GREATEREQUAL
20250: IFFALSE 20258
20252: LD_INT 13
20254: DOUBLE
20255: LESSEQUAL
20256: IFTRUE 20260
20258: GO 20337
20260: POP
// begin bc_type := b_lab_full ;
20261: LD_ADDR_OWVAR 42
20265: PUSH
20266: LD_INT 8
20268: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20269: LD_ADDR_OWVAR 44
20273: PUSH
20274: LD_INT 10
20276: PUSH
20277: LD_INT 12
20279: PUSH
20280: LD_INT 14
20282: PUSH
20283: LD_INT 13
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: PUSH
20292: LD_VAR 0 2
20296: PUSH
20297: LD_INT 9
20299: MINUS
20300: ARRAY
20301: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20302: LD_ADDR_OWVAR 45
20306: PUSH
20307: LD_INT 11
20309: PUSH
20310: LD_INT 15
20312: PUSH
20313: LD_INT 12
20315: PUSH
20316: LD_INT 15
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: PUSH
20325: LD_VAR 0 2
20329: PUSH
20330: LD_INT 9
20332: MINUS
20333: ARRAY
20334: ST_TO_ADDR
// end ; 14 :
20335: GO 20754
20337: LD_INT 14
20339: DOUBLE
20340: EQUAL
20341: IFTRUE 20345
20343: GO 20356
20345: POP
// bc_type := b_workshop ; 15 :
20346: LD_ADDR_OWVAR 42
20350: PUSH
20351: LD_INT 2
20353: ST_TO_ADDR
20354: GO 20754
20356: LD_INT 15
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20375
20364: POP
// bc_type := b_factory ; 16 :
20365: LD_ADDR_OWVAR 42
20369: PUSH
20370: LD_INT 3
20372: ST_TO_ADDR
20373: GO 20754
20375: LD_INT 16
20377: DOUBLE
20378: EQUAL
20379: IFTRUE 20383
20381: GO 20394
20383: POP
// bc_type := b_ext_gun ; 17 :
20384: LD_ADDR_OWVAR 42
20388: PUSH
20389: LD_INT 17
20391: ST_TO_ADDR
20392: GO 20754
20394: LD_INT 17
20396: DOUBLE
20397: EQUAL
20398: IFTRUE 20402
20400: GO 20430
20402: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20403: LD_ADDR_OWVAR 42
20407: PUSH
20408: LD_INT 19
20410: PUSH
20411: LD_INT 23
20413: PUSH
20414: LD_INT 19
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: PUSH
20422: LD_VAR 0 1
20426: ARRAY
20427: ST_TO_ADDR
20428: GO 20754
20430: LD_INT 18
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20449
20438: POP
// bc_type := b_ext_radar ; 19 :
20439: LD_ADDR_OWVAR 42
20443: PUSH
20444: LD_INT 20
20446: ST_TO_ADDR
20447: GO 20754
20449: LD_INT 19
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20468
20457: POP
// bc_type := b_ext_radio ; 20 :
20458: LD_ADDR_OWVAR 42
20462: PUSH
20463: LD_INT 22
20465: ST_TO_ADDR
20466: GO 20754
20468: LD_INT 20
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20487
20476: POP
// bc_type := b_ext_siberium ; 21 :
20477: LD_ADDR_OWVAR 42
20481: PUSH
20482: LD_INT 21
20484: ST_TO_ADDR
20485: GO 20754
20487: LD_INT 21
20489: DOUBLE
20490: EQUAL
20491: IFTRUE 20495
20493: GO 20506
20495: POP
// bc_type := b_ext_computer ; 22 :
20496: LD_ADDR_OWVAR 42
20500: PUSH
20501: LD_INT 24
20503: ST_TO_ADDR
20504: GO 20754
20506: LD_INT 22
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_ext_track ; 23 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 16
20522: ST_TO_ADDR
20523: GO 20754
20525: LD_INT 23
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_ext_laser ; 24 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 25
20541: ST_TO_ADDR
20542: GO 20754
20544: LD_INT 24
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_control_tower ; 25 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 36
20560: ST_TO_ADDR
20561: GO 20754
20563: LD_INT 25
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_breastwork ; 26 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 31
20579: ST_TO_ADDR
20580: GO 20754
20582: LD_INT 26
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_bunker ; 27 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 32
20598: ST_TO_ADDR
20599: GO 20754
20601: LD_INT 27
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_turret ; 28 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 33
20617: ST_TO_ADDR
20618: GO 20754
20620: LD_INT 28
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_armoury ; 29 :
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 4
20636: ST_TO_ADDR
20637: GO 20754
20639: LD_INT 29
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20658
20647: POP
// bc_type := b_barracks ; 30 :
20648: LD_ADDR_OWVAR 42
20652: PUSH
20653: LD_INT 5
20655: ST_TO_ADDR
20656: GO 20754
20658: LD_INT 30
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20677
20666: POP
// bc_type := b_solar_power ; 31 :
20667: LD_ADDR_OWVAR 42
20671: PUSH
20672: LD_INT 27
20674: ST_TO_ADDR
20675: GO 20754
20677: LD_INT 31
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20696
20685: POP
// bc_type := b_oil_power ; 32 :
20686: LD_ADDR_OWVAR 42
20690: PUSH
20691: LD_INT 26
20693: ST_TO_ADDR
20694: GO 20754
20696: LD_INT 32
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20715
20704: POP
// bc_type := b_siberite_power ; 33 :
20705: LD_ADDR_OWVAR 42
20709: PUSH
20710: LD_INT 28
20712: ST_TO_ADDR
20713: GO 20754
20715: LD_INT 33
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20734
20723: POP
// bc_type := b_oil_mine ; 34 :
20724: LD_ADDR_OWVAR 42
20728: PUSH
20729: LD_INT 29
20731: ST_TO_ADDR
20732: GO 20754
20734: LD_INT 34
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20753
20742: POP
// bc_type := b_siberite_mine ; end ;
20743: LD_ADDR_OWVAR 42
20747: PUSH
20748: LD_INT 30
20750: ST_TO_ADDR
20751: GO 20754
20753: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20754: LD_ADDR_VAR 0 8
20758: PUSH
20759: LD_VAR 0 5
20763: PPUSH
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 3
20773: PPUSH
20774: CALL_OW 47
20778: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20779: LD_OWVAR 42
20783: PUSH
20784: LD_INT 32
20786: PUSH
20787: LD_INT 33
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: IN
20794: IFFALSE 20810
// PlaceWeaponTurret ( b , weapon ) ;
20796: LD_VAR 0 8
20800: PPUSH
20801: LD_VAR 0 4
20805: PPUSH
20806: CALL_OW 431
// end ;
20810: LD_VAR 0 7
20814: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
20819: PPUSH
20820: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20821: LD_ADDR_VAR 0 4
20825: PUSH
20826: LD_INT 22
20828: PUSH
20829: LD_OWVAR 2
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 30
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PPUSH
20870: CALL_OW 69
20874: ST_TO_ADDR
// if not tmp then
20875: LD_VAR 0 4
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 20943
// for i in tmp do
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: LD_VAR 0 4
20893: PUSH
20894: FOR_IN
20895: IFFALSE 20941
// for j = 1 to 3 do
20897: LD_ADDR_VAR 0 3
20901: PUSH
20902: DOUBLE
20903: LD_INT 1
20905: DEC
20906: ST_TO_ADDR
20907: LD_INT 3
20909: PUSH
20910: FOR_TO
20911: IFFALSE 20937
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20913: LD_VAR 0 2
20917: PPUSH
20918: CALL_OW 274
20922: PPUSH
20923: LD_VAR 0 3
20927: PPUSH
20928: LD_INT 99999
20930: PPUSH
20931: CALL_OW 277
20935: GO 20910
20937: POP
20938: POP
20939: GO 20894
20941: POP
20942: POP
// end ;
20943: LD_VAR 0 1
20947: RET
// export function hHackSetLevel10 ; var i , j ; begin
20948: LD_INT 0
20950: PPUSH
20951: PPUSH
20952: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20953: LD_ADDR_VAR 0 2
20957: PUSH
20958: LD_INT 21
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PPUSH
20968: CALL_OW 69
20972: PUSH
20973: FOR_IN
20974: IFFALSE 21026
// if IsSelected ( i ) then
20976: LD_VAR 0 2
20980: PPUSH
20981: CALL_OW 306
20985: IFFALSE 21024
// begin for j := 1 to 4 do
20987: LD_ADDR_VAR 0 3
20991: PUSH
20992: DOUBLE
20993: LD_INT 1
20995: DEC
20996: ST_TO_ADDR
20997: LD_INT 4
20999: PUSH
21000: FOR_TO
21001: IFFALSE 21022
// SetSkill ( i , j , 10 ) ;
21003: LD_VAR 0 2
21007: PPUSH
21008: LD_VAR 0 3
21012: PPUSH
21013: LD_INT 10
21015: PPUSH
21016: CALL_OW 237
21020: GO 21000
21022: POP
21023: POP
// end ;
21024: GO 20973
21026: POP
21027: POP
// end ;
21028: LD_VAR 0 1
21032: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21033: LD_INT 0
21035: PPUSH
21036: PPUSH
21037: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21038: LD_ADDR_VAR 0 2
21042: PUSH
21043: LD_INT 22
21045: PUSH
21046: LD_OWVAR 2
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 21
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: PUSH
21074: FOR_IN
21075: IFFALSE 21116
// begin for j := 1 to 4 do
21077: LD_ADDR_VAR 0 3
21081: PUSH
21082: DOUBLE
21083: LD_INT 1
21085: DEC
21086: ST_TO_ADDR
21087: LD_INT 4
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21112
// SetSkill ( i , j , 10 ) ;
21093: LD_VAR 0 2
21097: PPUSH
21098: LD_VAR 0 3
21102: PPUSH
21103: LD_INT 10
21105: PPUSH
21106: CALL_OW 237
21110: GO 21090
21112: POP
21113: POP
// end ;
21114: GO 21074
21116: POP
21117: POP
// end ;
21118: LD_VAR 0 1
21122: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21123: LD_INT 0
21125: PPUSH
// uc_side := your_side ;
21126: LD_ADDR_OWVAR 20
21130: PUSH
21131: LD_OWVAR 2
21135: ST_TO_ADDR
// uc_nation := nation ;
21136: LD_ADDR_OWVAR 21
21140: PUSH
21141: LD_VAR 0 1
21145: ST_TO_ADDR
// InitHc ;
21146: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21150: LD_INT 0
21152: PPUSH
21153: LD_VAR 0 2
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21167: LD_VAR 0 4
21171: PPUSH
21172: LD_VAR 0 5
21176: PPUSH
21177: CALL_OW 428
21181: PUSH
21182: LD_INT 0
21184: EQUAL
21185: IFFALSE 21209
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21187: CALL_OW 44
21191: PPUSH
21192: LD_VAR 0 4
21196: PPUSH
21197: LD_VAR 0 5
21201: PPUSH
21202: LD_INT 1
21204: PPUSH
21205: CALL_OW 48
// end ;
21209: LD_VAR 0 6
21213: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21214: LD_INT 0
21216: PPUSH
21217: PPUSH
// uc_side := your_side ;
21218: LD_ADDR_OWVAR 20
21222: PUSH
21223: LD_OWVAR 2
21227: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21228: LD_VAR 0 1
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 3
21241: PUSH
21242: LD_INT 4
21244: PUSH
21245: LD_INT 5
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: IN
21255: IFFALSE 21267
// uc_nation := nation_american else
21257: LD_ADDR_OWVAR 21
21261: PUSH
21262: LD_INT 1
21264: ST_TO_ADDR
21265: GO 21310
// if chassis in [ 11 , 12 , 13 , 14 ] then
21267: LD_VAR 0 1
21271: PUSH
21272: LD_INT 11
21274: PUSH
21275: LD_INT 12
21277: PUSH
21278: LD_INT 13
21280: PUSH
21281: LD_INT 14
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: IN
21290: IFFALSE 21302
// uc_nation := nation_arabian else
21292: LD_ADDR_OWVAR 21
21296: PUSH
21297: LD_INT 2
21299: ST_TO_ADDR
21300: GO 21310
// uc_nation := nation_russian ;
21302: LD_ADDR_OWVAR 21
21306: PUSH
21307: LD_INT 3
21309: ST_TO_ADDR
// vc_chassis := chassis ;
21310: LD_ADDR_OWVAR 37
21314: PUSH
21315: LD_VAR 0 1
21319: ST_TO_ADDR
// vc_engine := engine ;
21320: LD_ADDR_OWVAR 39
21324: PUSH
21325: LD_VAR 0 2
21329: ST_TO_ADDR
// vc_control := control ;
21330: LD_ADDR_OWVAR 38
21334: PUSH
21335: LD_VAR 0 3
21339: ST_TO_ADDR
// vc_weapon := weapon ;
21340: LD_ADDR_OWVAR 40
21344: PUSH
21345: LD_VAR 0 4
21349: ST_TO_ADDR
// un := CreateVehicle ;
21350: LD_ADDR_VAR 0 8
21354: PUSH
21355: CALL_OW 45
21359: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21360: LD_VAR 0 8
21364: PPUSH
21365: LD_INT 0
21367: PPUSH
21368: LD_INT 5
21370: PPUSH
21371: CALL_OW 12
21375: PPUSH
21376: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21380: LD_VAR 0 8
21384: PPUSH
21385: LD_VAR 0 5
21389: PPUSH
21390: LD_VAR 0 6
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: CALL_OW 48
// end ;
21402: LD_VAR 0 7
21406: RET
// export hInvincible ; every 1 do
21407: GO 21409
21409: DISABLE
// hInvincible := [ ] ;
21410: LD_ADDR_EXP 105
21414: PUSH
21415: EMPTY
21416: ST_TO_ADDR
21417: END
// every 10 do var i ;
21418: GO 21420
21420: DISABLE
21421: LD_INT 0
21423: PPUSH
// begin enable ;
21424: ENABLE
// if not hInvincible then
21425: LD_EXP 105
21429: NOT
21430: IFFALSE 21434
// exit ;
21432: GO 21478
// for i in hInvincible do
21434: LD_ADDR_VAR 0 1
21438: PUSH
21439: LD_EXP 105
21443: PUSH
21444: FOR_IN
21445: IFFALSE 21476
// if GetLives ( i ) < 1000 then
21447: LD_VAR 0 1
21451: PPUSH
21452: CALL_OW 256
21456: PUSH
21457: LD_INT 1000
21459: LESS
21460: IFFALSE 21474
// SetLives ( i , 1000 ) ;
21462: LD_VAR 0 1
21466: PPUSH
21467: LD_INT 1000
21469: PPUSH
21470: CALL_OW 234
21474: GO 21444
21476: POP
21477: POP
// end ;
21478: PPOPN 1
21480: END
// export function hHackInvincible ; var i ; begin
21481: LD_INT 0
21483: PPUSH
21484: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 21
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 21
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: PPUSH
21518: CALL_OW 69
21522: PUSH
21523: FOR_IN
21524: IFFALSE 21585
// if IsSelected ( i ) then
21526: LD_VAR 0 2
21530: PPUSH
21531: CALL_OW 306
21535: IFFALSE 21583
// begin if i in hInvincible then
21537: LD_VAR 0 2
21541: PUSH
21542: LD_EXP 105
21546: IN
21547: IFFALSE 21567
// hInvincible := hInvincible diff i else
21549: LD_ADDR_EXP 105
21553: PUSH
21554: LD_EXP 105
21558: PUSH
21559: LD_VAR 0 2
21563: DIFF
21564: ST_TO_ADDR
21565: GO 21583
// hInvincible := hInvincible union i ;
21567: LD_ADDR_EXP 105
21571: PUSH
21572: LD_EXP 105
21576: PUSH
21577: LD_VAR 0 2
21581: UNION
21582: ST_TO_ADDR
// end ;
21583: GO 21523
21585: POP
21586: POP
// end ;
21587: LD_VAR 0 1
21591: RET
// export function hHackInvisible ; var i , j ; begin
21592: LD_INT 0
21594: PPUSH
21595: PPUSH
21596: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21597: LD_ADDR_VAR 0 2
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PPUSH
21612: CALL_OW 69
21616: PUSH
21617: FOR_IN
21618: IFFALSE 21642
// if IsSelected ( i ) then
21620: LD_VAR 0 2
21624: PPUSH
21625: CALL_OW 306
21629: IFFALSE 21640
// ComForceInvisible ( i ) ;
21631: LD_VAR 0 2
21635: PPUSH
21636: CALL_OW 496
21640: GO 21617
21642: POP
21643: POP
// end ;
21644: LD_VAR 0 1
21648: RET
// export function hHackChangeYourSide ; begin
21649: LD_INT 0
21651: PPUSH
// if your_side = 8 then
21652: LD_OWVAR 2
21656: PUSH
21657: LD_INT 8
21659: EQUAL
21660: IFFALSE 21672
// your_side := 0 else
21662: LD_ADDR_OWVAR 2
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
21670: GO 21686
// your_side := your_side + 1 ;
21672: LD_ADDR_OWVAR 2
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: LD_INT 1
21684: PLUS
21685: ST_TO_ADDR
// end ;
21686: LD_VAR 0 1
21690: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21691: LD_INT 0
21693: PPUSH
21694: PPUSH
21695: PPUSH
// for i in all_units do
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_OWVAR 3
21705: PUSH
21706: FOR_IN
21707: IFFALSE 21785
// if IsSelected ( i ) then
21709: LD_VAR 0 2
21713: PPUSH
21714: CALL_OW 306
21718: IFFALSE 21783
// begin j := GetSide ( i ) ;
21720: LD_ADDR_VAR 0 3
21724: PUSH
21725: LD_VAR 0 2
21729: PPUSH
21730: CALL_OW 255
21734: ST_TO_ADDR
// if j = 8 then
21735: LD_VAR 0 3
21739: PUSH
21740: LD_INT 8
21742: EQUAL
21743: IFFALSE 21755
// j := 0 else
21745: LD_ADDR_VAR 0 3
21749: PUSH
21750: LD_INT 0
21752: ST_TO_ADDR
21753: GO 21769
// j := j + 1 ;
21755: LD_ADDR_VAR 0 3
21759: PUSH
21760: LD_VAR 0 3
21764: PUSH
21765: LD_INT 1
21767: PLUS
21768: ST_TO_ADDR
// SetSide ( i , j ) ;
21769: LD_VAR 0 2
21773: PPUSH
21774: LD_VAR 0 3
21778: PPUSH
21779: CALL_OW 235
// end ;
21783: GO 21706
21785: POP
21786: POP
// end ;
21787: LD_VAR 0 1
21791: RET
// export function hHackFog ; begin
21792: LD_INT 0
21794: PPUSH
// FogOff ( true ) ;
21795: LD_INT 1
21797: PPUSH
21798: CALL_OW 344
// end ;
21802: LD_VAR 0 1
21806: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21807: LD_INT 0
21809: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21810: LD_VAR 0 1
21814: PPUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: LD_INT 1
21827: PPUSH
21828: LD_INT 1
21830: PPUSH
21831: CALL_OW 483
// CenterOnXY ( x , y ) ;
21835: LD_VAR 0 2
21839: PPUSH
21840: LD_VAR 0 3
21844: PPUSH
21845: CALL_OW 84
// end ; end_of_file
21849: LD_VAR 0 4
21853: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21854: LD_INT 0
21856: PPUSH
21857: PPUSH
21858: PPUSH
21859: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 264
21869: PUSH
21870: LD_EXP 33
21874: EQUAL
21875: IFFALSE 21947
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21877: LD_INT 68
21879: PPUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 255
21889: PPUSH
21890: CALL_OW 321
21894: PUSH
21895: LD_INT 2
21897: EQUAL
21898: IFFALSE 21910
// eff := 70 else
21900: LD_ADDR_VAR 0 4
21904: PUSH
21905: LD_INT 70
21907: ST_TO_ADDR
21908: GO 21918
// eff := 30 ;
21910: LD_ADDR_VAR 0 4
21914: PUSH
21915: LD_INT 30
21917: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 250
21927: PPUSH
21928: LD_VAR 0 1
21932: PPUSH
21933: CALL_OW 251
21937: PPUSH
21938: LD_VAR 0 4
21942: PPUSH
21943: CALL_OW 495
// end ; end ;
21947: LD_VAR 0 2
21951: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21952: LD_INT 0
21954: PPUSH
// end ;
21955: LD_VAR 0 4
21959: RET
// export function SOS_Command ( cmd ) ; begin
21960: LD_INT 0
21962: PPUSH
// end ;
21963: LD_VAR 0 2
21967: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21968: LD_INT 0
21970: PPUSH
// end ;
21971: LD_VAR 0 6
21975: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21976: LD_INT 0
21978: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21979: LD_VAR 0 1
21983: PUSH
21984: LD_INT 250
21986: EQUAL
21987: PUSH
21988: LD_VAR 0 2
21992: PPUSH
21993: CALL_OW 264
21997: PUSH
21998: LD_EXP 36
22002: EQUAL
22003: AND
22004: IFFALSE 22025
// MinerPlaceMine ( unit , x , y ) ;
22006: LD_VAR 0 2
22010: PPUSH
22011: LD_VAR 0 4
22015: PPUSH
22016: LD_VAR 0 5
22020: PPUSH
22021: CALL 24374 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22025: LD_VAR 0 1
22029: PUSH
22030: LD_INT 251
22032: EQUAL
22033: PUSH
22034: LD_VAR 0 2
22038: PPUSH
22039: CALL_OW 264
22043: PUSH
22044: LD_EXP 36
22048: EQUAL
22049: AND
22050: IFFALSE 22071
// MinerDetonateMine ( unit , x , y ) ;
22052: LD_VAR 0 2
22056: PPUSH
22057: LD_VAR 0 4
22061: PPUSH
22062: LD_VAR 0 5
22066: PPUSH
22067: CALL 24651 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22071: LD_VAR 0 1
22075: PUSH
22076: LD_INT 252
22078: EQUAL
22079: PUSH
22080: LD_VAR 0 2
22084: PPUSH
22085: CALL_OW 264
22089: PUSH
22090: LD_EXP 36
22094: EQUAL
22095: AND
22096: IFFALSE 22117
// MinerCreateMinefield ( unit , x , y ) ;
22098: LD_VAR 0 2
22102: PPUSH
22103: LD_VAR 0 4
22107: PPUSH
22108: LD_VAR 0 5
22112: PPUSH
22113: CALL 25068 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22117: LD_VAR 0 1
22121: PUSH
22122: LD_INT 253
22124: EQUAL
22125: PUSH
22126: LD_VAR 0 2
22130: PPUSH
22131: CALL_OW 257
22135: PUSH
22136: LD_INT 5
22138: EQUAL
22139: AND
22140: IFFALSE 22161
// ComBinocular ( unit , x , y ) ;
22142: LD_VAR 0 2
22146: PPUSH
22147: LD_VAR 0 4
22151: PPUSH
22152: LD_VAR 0 5
22156: PPUSH
22157: CALL 25439 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22161: LD_VAR 0 1
22165: PUSH
22166: LD_INT 254
22168: EQUAL
22169: PUSH
22170: LD_VAR 0 2
22174: PPUSH
22175: CALL_OW 264
22179: PUSH
22180: LD_EXP 31
22184: EQUAL
22185: AND
22186: PUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: CALL_OW 263
22196: PUSH
22197: LD_INT 3
22199: EQUAL
22200: AND
22201: IFFALSE 22217
// HackDestroyVehicle ( unit , selectedUnit ) ;
22203: LD_VAR 0 2
22207: PPUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: CALL 23734 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22217: LD_VAR 0 1
22221: PUSH
22222: LD_INT 255
22224: EQUAL
22225: PUSH
22226: LD_VAR 0 2
22230: PPUSH
22231: CALL_OW 264
22235: PUSH
22236: LD_INT 14
22238: PUSH
22239: LD_INT 53
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: IN
22246: AND
22247: PUSH
22248: LD_VAR 0 4
22252: PPUSH
22253: LD_VAR 0 5
22257: PPUSH
22258: CALL_OW 488
22262: AND
22263: IFFALSE 22287
// CutTreeXYR ( unit , x , y , 12 ) ;
22265: LD_VAR 0 2
22269: PPUSH
22270: LD_VAR 0 4
22274: PPUSH
22275: LD_VAR 0 5
22279: PPUSH
22280: LD_INT 12
22282: PPUSH
22283: CALL 22300 0 4
// end ;
22287: LD_VAR 0 6
22291: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
22292: LD_INT 0
22294: PPUSH
// end ;
22295: LD_VAR 0 4
22299: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
22304: PPUSH
22305: PPUSH
22306: PPUSH
22307: PPUSH
22308: PPUSH
22309: PPUSH
22310: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22311: LD_VAR 0 1
22315: NOT
22316: PUSH
22317: LD_VAR 0 2
22321: PPUSH
22322: LD_VAR 0 3
22326: PPUSH
22327: CALL_OW 488
22331: NOT
22332: OR
22333: PUSH
22334: LD_VAR 0 4
22338: NOT
22339: OR
22340: IFFALSE 22344
// exit ;
22342: GO 22684
// list := [ ] ;
22344: LD_ADDR_VAR 0 13
22348: PUSH
22349: EMPTY
22350: ST_TO_ADDR
// if x - r < 0 then
22351: LD_VAR 0 2
22355: PUSH
22356: LD_VAR 0 4
22360: MINUS
22361: PUSH
22362: LD_INT 0
22364: LESS
22365: IFFALSE 22377
// min_x := 0 else
22367: LD_ADDR_VAR 0 7
22371: PUSH
22372: LD_INT 0
22374: ST_TO_ADDR
22375: GO 22393
// min_x := x - r ;
22377: LD_ADDR_VAR 0 7
22381: PUSH
22382: LD_VAR 0 2
22386: PUSH
22387: LD_VAR 0 4
22391: MINUS
22392: ST_TO_ADDR
// if y - r < 0 then
22393: LD_VAR 0 3
22397: PUSH
22398: LD_VAR 0 4
22402: MINUS
22403: PUSH
22404: LD_INT 0
22406: LESS
22407: IFFALSE 22419
// min_y := 0 else
22409: LD_ADDR_VAR 0 8
22413: PUSH
22414: LD_INT 0
22416: ST_TO_ADDR
22417: GO 22435
// min_y := y - r ;
22419: LD_ADDR_VAR 0 8
22423: PUSH
22424: LD_VAR 0 3
22428: PUSH
22429: LD_VAR 0 4
22433: MINUS
22434: ST_TO_ADDR
// max_x := x + r ;
22435: LD_ADDR_VAR 0 9
22439: PUSH
22440: LD_VAR 0 2
22444: PUSH
22445: LD_VAR 0 4
22449: PLUS
22450: ST_TO_ADDR
// max_y := y + r ;
22451: LD_ADDR_VAR 0 10
22455: PUSH
22456: LD_VAR 0 3
22460: PUSH
22461: LD_VAR 0 4
22465: PLUS
22466: ST_TO_ADDR
// for _x = min_x to max_x do
22467: LD_ADDR_VAR 0 11
22471: PUSH
22472: DOUBLE
22473: LD_VAR 0 7
22477: DEC
22478: ST_TO_ADDR
22479: LD_VAR 0 9
22483: PUSH
22484: FOR_TO
22485: IFFALSE 22602
// for _y = min_y to max_y do
22487: LD_ADDR_VAR 0 12
22491: PUSH
22492: DOUBLE
22493: LD_VAR 0 8
22497: DEC
22498: ST_TO_ADDR
22499: LD_VAR 0 10
22503: PUSH
22504: FOR_TO
22505: IFFALSE 22598
// begin if not ValidHex ( _x , _y ) then
22507: LD_VAR 0 11
22511: PPUSH
22512: LD_VAR 0 12
22516: PPUSH
22517: CALL_OW 488
22521: NOT
22522: IFFALSE 22526
// continue ;
22524: GO 22504
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22526: LD_VAR 0 11
22530: PPUSH
22531: LD_VAR 0 12
22535: PPUSH
22536: CALL_OW 351
22540: PUSH
22541: LD_VAR 0 11
22545: PPUSH
22546: LD_VAR 0 12
22550: PPUSH
22551: CALL_OW 554
22555: AND
22556: IFFALSE 22596
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22558: LD_ADDR_VAR 0 13
22562: PUSH
22563: LD_VAR 0 13
22567: PPUSH
22568: LD_VAR 0 13
22572: PUSH
22573: LD_INT 1
22575: PLUS
22576: PPUSH
22577: LD_VAR 0 11
22581: PUSH
22582: LD_VAR 0 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PPUSH
22591: CALL_OW 2
22595: ST_TO_ADDR
// end ;
22596: GO 22504
22598: POP
22599: POP
22600: GO 22484
22602: POP
22603: POP
// if not list then
22604: LD_VAR 0 13
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22684
// for i in list do
22613: LD_ADDR_VAR 0 6
22617: PUSH
22618: LD_VAR 0 13
22622: PUSH
22623: FOR_IN
22624: IFFALSE 22682
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22626: LD_VAR 0 1
22630: PPUSH
22631: LD_STRING M
22633: PUSH
22634: LD_VAR 0 6
22638: PUSH
22639: LD_INT 1
22641: ARRAY
22642: PUSH
22643: LD_VAR 0 6
22647: PUSH
22648: LD_INT 2
22650: ARRAY
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: PPUSH
22676: CALL_OW 447
22680: GO 22623
22682: POP
22683: POP
// end ;
22684: LD_VAR 0 5
22688: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22689: LD_EXP 108
22693: NOT
22694: IFFALSE 22744
22696: GO 22698
22698: DISABLE
// begin initHack := true ;
22699: LD_ADDR_EXP 108
22703: PUSH
22704: LD_INT 1
22706: ST_TO_ADDR
// hackTanks := [ ] ;
22707: LD_ADDR_EXP 109
22711: PUSH
22712: EMPTY
22713: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22714: LD_ADDR_EXP 110
22718: PUSH
22719: EMPTY
22720: ST_TO_ADDR
// hackLimit := 3 ;
22721: LD_ADDR_EXP 111
22725: PUSH
22726: LD_INT 3
22728: ST_TO_ADDR
// hackDist := 12 ;
22729: LD_ADDR_EXP 112
22733: PUSH
22734: LD_INT 12
22736: ST_TO_ADDR
// hackCounter := [ ] ;
22737: LD_ADDR_EXP 113
22741: PUSH
22742: EMPTY
22743: ST_TO_ADDR
// end ;
22744: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22745: LD_EXP 108
22749: PUSH
22750: LD_INT 34
22752: PUSH
22753: LD_EXP 31
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PPUSH
22762: CALL_OW 69
22766: AND
22767: IFFALSE 23022
22769: GO 22771
22771: DISABLE
22772: LD_INT 0
22774: PPUSH
22775: PPUSH
// begin enable ;
22776: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22777: LD_ADDR_VAR 0 1
22781: PUSH
22782: LD_INT 34
22784: PUSH
22785: LD_EXP 31
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PPUSH
22794: CALL_OW 69
22798: PUSH
22799: FOR_IN
22800: IFFALSE 23020
// begin if not i in hackTanks then
22802: LD_VAR 0 1
22806: PUSH
22807: LD_EXP 109
22811: IN
22812: NOT
22813: IFFALSE 22896
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22815: LD_ADDR_EXP 109
22819: PUSH
22820: LD_EXP 109
22824: PPUSH
22825: LD_EXP 109
22829: PUSH
22830: LD_INT 1
22832: PLUS
22833: PPUSH
22834: LD_VAR 0 1
22838: PPUSH
22839: CALL_OW 1
22843: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22844: LD_ADDR_EXP 110
22848: PUSH
22849: LD_EXP 110
22853: PPUSH
22854: LD_EXP 110
22858: PUSH
22859: LD_INT 1
22861: PLUS
22862: PPUSH
22863: EMPTY
22864: PPUSH
22865: CALL_OW 1
22869: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22870: LD_ADDR_EXP 113
22874: PUSH
22875: LD_EXP 113
22879: PPUSH
22880: LD_EXP 113
22884: PUSH
22885: LD_INT 1
22887: PLUS
22888: PPUSH
22889: EMPTY
22890: PPUSH
22891: CALL_OW 1
22895: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 302
22905: NOT
22906: IFFALSE 22919
// begin HackUnlinkAll ( i ) ;
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL 23025 0 1
// continue ;
22917: GO 22799
// end ; HackCheckCapturedStatus ( i ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: CALL 23468 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22928: LD_ADDR_VAR 0 2
22932: PUSH
22933: LD_INT 81
22935: PUSH
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 255
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 33
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 91
22962: PUSH
22963: LD_VAR 0 1
22967: PUSH
22968: LD_EXP 112
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 50
22980: PUSH
22981: EMPTY
22982: LIST
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 69
22994: ST_TO_ADDR
// if not tmp then
22995: LD_VAR 0 2
22999: NOT
23000: IFFALSE 23004
// continue ;
23002: GO 22799
// HackLink ( i , tmp ) ;
23004: LD_VAR 0 1
23008: PPUSH
23009: LD_VAR 0 2
23013: PPUSH
23014: CALL 23161 0 2
// end ;
23018: GO 22799
23020: POP
23021: POP
// end ;
23022: PPOPN 2
23024: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
23029: PPUSH
// if not hack in hackTanks then
23030: LD_VAR 0 1
23034: PUSH
23035: LD_EXP 109
23039: IN
23040: NOT
23041: IFFALSE 23045
// exit ;
23043: GO 23156
// index := GetElementIndex ( hackTanks , hack ) ;
23045: LD_ADDR_VAR 0 4
23049: PUSH
23050: LD_EXP 109
23054: PPUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL 30630 0 2
23064: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23065: LD_EXP 110
23069: PUSH
23070: LD_VAR 0 4
23074: ARRAY
23075: IFFALSE 23156
// begin for i in hackTanksCaptured [ index ] do
23077: LD_ADDR_VAR 0 3
23081: PUSH
23082: LD_EXP 110
23086: PUSH
23087: LD_VAR 0 4
23091: ARRAY
23092: PUSH
23093: FOR_IN
23094: IFFALSE 23120
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23096: LD_VAR 0 3
23100: PUSH
23101: LD_INT 1
23103: ARRAY
23104: PPUSH
23105: LD_VAR 0 3
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PPUSH
23114: CALL_OW 235
23118: GO 23093
23120: POP
23121: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23122: LD_ADDR_EXP 110
23126: PUSH
23127: LD_EXP 110
23131: PPUSH
23132: LD_VAR 0 4
23136: PPUSH
23137: EMPTY
23138: PPUSH
23139: CALL_OW 1
23143: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23144: LD_VAR 0 1
23148: PPUSH
23149: LD_INT 0
23151: PPUSH
23152: CALL_OW 505
// end ; end ;
23156: LD_VAR 0 2
23160: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23161: LD_INT 0
23163: PPUSH
23164: PPUSH
23165: PPUSH
// if not hack in hackTanks or not vehicles then
23166: LD_VAR 0 1
23170: PUSH
23171: LD_EXP 109
23175: IN
23176: NOT
23177: PUSH
23178: LD_VAR 0 2
23182: NOT
23183: OR
23184: IFFALSE 23188
// exit ;
23186: GO 23463
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23188: LD_ADDR_VAR 0 2
23192: PUSH
23193: LD_VAR 0 1
23197: PPUSH
23198: LD_VAR 0 2
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL 31280 0 4
23213: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23214: LD_ADDR_VAR 0 5
23218: PUSH
23219: LD_EXP 109
23223: PPUSH
23224: LD_VAR 0 1
23228: PPUSH
23229: CALL 30630 0 2
23233: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23234: LD_EXP 110
23238: PUSH
23239: LD_VAR 0 5
23243: ARRAY
23244: PUSH
23245: LD_EXP 111
23249: LESS
23250: IFFALSE 23439
// begin for i := 1 to vehicles do
23252: LD_ADDR_VAR 0 4
23256: PUSH
23257: DOUBLE
23258: LD_INT 1
23260: DEC
23261: ST_TO_ADDR
23262: LD_VAR 0 2
23266: PUSH
23267: FOR_TO
23268: IFFALSE 23437
// begin if hackTanksCaptured [ index ] = hackLimit then
23270: LD_EXP 110
23274: PUSH
23275: LD_VAR 0 5
23279: ARRAY
23280: PUSH
23281: LD_EXP 111
23285: EQUAL
23286: IFFALSE 23290
// break ;
23288: GO 23437
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23290: LD_ADDR_EXP 113
23294: PUSH
23295: LD_EXP 113
23299: PPUSH
23300: LD_VAR 0 5
23304: PPUSH
23305: LD_EXP 113
23309: PUSH
23310: LD_VAR 0 5
23314: ARRAY
23315: PUSH
23316: LD_INT 1
23318: PLUS
23319: PPUSH
23320: CALL_OW 1
23324: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23325: LD_ADDR_EXP 110
23329: PUSH
23330: LD_EXP 110
23334: PPUSH
23335: LD_VAR 0 5
23339: PUSH
23340: LD_EXP 110
23344: PUSH
23345: LD_VAR 0 5
23349: ARRAY
23350: PUSH
23351: LD_INT 1
23353: PLUS
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: LD_VAR 0 2
23363: PUSH
23364: LD_VAR 0 4
23368: ARRAY
23369: PUSH
23370: LD_VAR 0 2
23374: PUSH
23375: LD_VAR 0 4
23379: ARRAY
23380: PPUSH
23381: CALL_OW 255
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PPUSH
23390: CALL 30845 0 3
23394: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23395: LD_VAR 0 2
23399: PUSH
23400: LD_VAR 0 4
23404: ARRAY
23405: PPUSH
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 255
23415: PPUSH
23416: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23420: LD_VAR 0 2
23424: PUSH
23425: LD_VAR 0 4
23429: ARRAY
23430: PPUSH
23431: CALL_OW 141
// end ;
23435: GO 23267
23437: POP
23438: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23439: LD_VAR 0 1
23443: PPUSH
23444: LD_EXP 110
23448: PUSH
23449: LD_VAR 0 5
23453: ARRAY
23454: PUSH
23455: LD_INT 0
23457: PLUS
23458: PPUSH
23459: CALL_OW 505
// end ;
23463: LD_VAR 0 3
23467: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23468: LD_INT 0
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
// if not hack in hackTanks then
23474: LD_VAR 0 1
23478: PUSH
23479: LD_EXP 109
23483: IN
23484: NOT
23485: IFFALSE 23489
// exit ;
23487: GO 23729
// index := GetElementIndex ( hackTanks , hack ) ;
23489: LD_ADDR_VAR 0 4
23493: PUSH
23494: LD_EXP 109
23498: PPUSH
23499: LD_VAR 0 1
23503: PPUSH
23504: CALL 30630 0 2
23508: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: DOUBLE
23515: LD_EXP 110
23519: PUSH
23520: LD_VAR 0 4
23524: ARRAY
23525: INC
23526: ST_TO_ADDR
23527: LD_INT 1
23529: PUSH
23530: FOR_DOWNTO
23531: IFFALSE 23703
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23533: LD_ADDR_VAR 0 5
23537: PUSH
23538: LD_EXP 110
23542: PUSH
23543: LD_VAR 0 4
23547: ARRAY
23548: PUSH
23549: LD_VAR 0 3
23553: ARRAY
23554: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23555: LD_VAR 0 5
23559: PUSH
23560: LD_INT 1
23562: ARRAY
23563: PPUSH
23564: CALL_OW 302
23568: NOT
23569: PUSH
23570: LD_VAR 0 5
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PPUSH
23579: CALL_OW 255
23583: PUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 255
23593: NONEQUAL
23594: OR
23595: IFFALSE 23701
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23597: LD_VAR 0 5
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: PPUSH
23606: CALL_OW 305
23610: PUSH
23611: LD_VAR 0 5
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PPUSH
23620: CALL_OW 255
23624: PUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL_OW 255
23634: EQUAL
23635: AND
23636: IFFALSE 23660
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23638: LD_VAR 0 5
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: PPUSH
23647: LD_VAR 0 5
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: PPUSH
23656: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23660: LD_ADDR_EXP 110
23664: PUSH
23665: LD_EXP 110
23669: PPUSH
23670: LD_VAR 0 4
23674: PPUSH
23675: LD_EXP 110
23679: PUSH
23680: LD_VAR 0 4
23684: ARRAY
23685: PPUSH
23686: LD_VAR 0 3
23690: PPUSH
23691: CALL_OW 3
23695: PPUSH
23696: CALL_OW 1
23700: ST_TO_ADDR
// end ; end ;
23701: GO 23530
23703: POP
23704: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23705: LD_VAR 0 1
23709: PPUSH
23710: LD_EXP 110
23714: PUSH
23715: LD_VAR 0 4
23719: ARRAY
23720: PUSH
23721: LD_INT 0
23723: PLUS
23724: PPUSH
23725: CALL_OW 505
// end ;
23729: LD_VAR 0 2
23733: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23734: LD_INT 0
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
// if not hack in hackTanks then
23740: LD_VAR 0 1
23744: PUSH
23745: LD_EXP 109
23749: IN
23750: NOT
23751: IFFALSE 23755
// exit ;
23753: GO 23840
// index := GetElementIndex ( hackTanks , hack ) ;
23755: LD_ADDR_VAR 0 5
23759: PUSH
23760: LD_EXP 109
23764: PPUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL 30630 0 2
23774: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23775: LD_ADDR_VAR 0 4
23779: PUSH
23780: DOUBLE
23781: LD_INT 1
23783: DEC
23784: ST_TO_ADDR
23785: LD_EXP 110
23789: PUSH
23790: LD_VAR 0 5
23794: ARRAY
23795: PUSH
23796: FOR_TO
23797: IFFALSE 23838
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23799: LD_EXP 110
23803: PUSH
23804: LD_VAR 0 5
23808: ARRAY
23809: PUSH
23810: LD_VAR 0 4
23814: ARRAY
23815: PUSH
23816: LD_INT 1
23818: ARRAY
23819: PUSH
23820: LD_VAR 0 2
23824: EQUAL
23825: IFFALSE 23836
// KillUnit ( vehicle ) ;
23827: LD_VAR 0 2
23831: PPUSH
23832: CALL_OW 66
23836: GO 23796
23838: POP
23839: POP
// end ;
23840: LD_VAR 0 3
23844: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23845: LD_EXP 114
23849: NOT
23850: IFFALSE 23885
23852: GO 23854
23854: DISABLE
// begin initMiner := true ;
23855: LD_ADDR_EXP 114
23859: PUSH
23860: LD_INT 1
23862: ST_TO_ADDR
// minersList := [ ] ;
23863: LD_ADDR_EXP 115
23867: PUSH
23868: EMPTY
23869: ST_TO_ADDR
// minerMinesList := [ ] ;
23870: LD_ADDR_EXP 116
23874: PUSH
23875: EMPTY
23876: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23877: LD_ADDR_EXP 117
23881: PUSH
23882: LD_INT 5
23884: ST_TO_ADDR
// end ;
23885: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23886: LD_EXP 114
23890: PUSH
23891: LD_INT 34
23893: PUSH
23894: LD_EXP 36
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PPUSH
23903: CALL_OW 69
23907: AND
23908: IFFALSE 24371
23910: GO 23912
23912: DISABLE
23913: LD_INT 0
23915: PPUSH
23916: PPUSH
23917: PPUSH
23918: PPUSH
// begin enable ;
23919: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23920: LD_ADDR_VAR 0 1
23924: PUSH
23925: LD_INT 34
23927: PUSH
23928: LD_EXP 36
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PPUSH
23937: CALL_OW 69
23941: PUSH
23942: FOR_IN
23943: IFFALSE 24015
// begin if not i in minersList then
23945: LD_VAR 0 1
23949: PUSH
23950: LD_EXP 115
23954: IN
23955: NOT
23956: IFFALSE 24013
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23958: LD_ADDR_EXP 115
23962: PUSH
23963: LD_EXP 115
23967: PPUSH
23968: LD_EXP 115
23972: PUSH
23973: LD_INT 1
23975: PLUS
23976: PPUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 1
23986: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23987: LD_ADDR_EXP 116
23991: PUSH
23992: LD_EXP 116
23996: PPUSH
23997: LD_EXP 116
24001: PUSH
24002: LD_INT 1
24004: PLUS
24005: PPUSH
24006: EMPTY
24007: PPUSH
24008: CALL_OW 1
24012: ST_TO_ADDR
// end end ;
24013: GO 23942
24015: POP
24016: POP
// for i := minerMinesList downto 1 do
24017: LD_ADDR_VAR 0 1
24021: PUSH
24022: DOUBLE
24023: LD_EXP 116
24027: INC
24028: ST_TO_ADDR
24029: LD_INT 1
24031: PUSH
24032: FOR_DOWNTO
24033: IFFALSE 24369
// begin if IsLive ( minersList [ i ] ) then
24035: LD_EXP 115
24039: PUSH
24040: LD_VAR 0 1
24044: ARRAY
24045: PPUSH
24046: CALL_OW 300
24050: IFFALSE 24078
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24052: LD_EXP 115
24056: PUSH
24057: LD_VAR 0 1
24061: ARRAY
24062: PPUSH
24063: LD_EXP 116
24067: PUSH
24068: LD_VAR 0 1
24072: ARRAY
24073: PPUSH
24074: CALL_OW 505
// if not minerMinesList [ i ] then
24078: LD_EXP 116
24082: PUSH
24083: LD_VAR 0 1
24087: ARRAY
24088: NOT
24089: IFFALSE 24093
// continue ;
24091: GO 24032
// for j := minerMinesList [ i ] downto 1 do
24093: LD_ADDR_VAR 0 2
24097: PUSH
24098: DOUBLE
24099: LD_EXP 116
24103: PUSH
24104: LD_VAR 0 1
24108: ARRAY
24109: INC
24110: ST_TO_ADDR
24111: LD_INT 1
24113: PUSH
24114: FOR_DOWNTO
24115: IFFALSE 24365
// begin side := GetSide ( minersList [ i ] ) ;
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_EXP 115
24126: PUSH
24127: LD_VAR 0 1
24131: ARRAY
24132: PPUSH
24133: CALL_OW 255
24137: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24138: LD_ADDR_VAR 0 4
24142: PUSH
24143: LD_EXP 116
24147: PUSH
24148: LD_VAR 0 1
24152: ARRAY
24153: PUSH
24154: LD_VAR 0 2
24158: ARRAY
24159: PUSH
24160: LD_INT 1
24162: ARRAY
24163: PPUSH
24164: LD_EXP 116
24168: PUSH
24169: LD_VAR 0 1
24173: ARRAY
24174: PUSH
24175: LD_VAR 0 2
24179: ARRAY
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: PPUSH
24185: CALL_OW 428
24189: ST_TO_ADDR
// if not tmp then
24190: LD_VAR 0 4
24194: NOT
24195: IFFALSE 24199
// continue ;
24197: GO 24114
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24199: LD_VAR 0 4
24203: PUSH
24204: LD_INT 81
24206: PUSH
24207: LD_VAR 0 3
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PPUSH
24216: CALL_OW 69
24220: IN
24221: PUSH
24222: LD_EXP 116
24226: PUSH
24227: LD_VAR 0 1
24231: ARRAY
24232: PUSH
24233: LD_VAR 0 2
24237: ARRAY
24238: PUSH
24239: LD_INT 1
24241: ARRAY
24242: PPUSH
24243: LD_EXP 116
24247: PUSH
24248: LD_VAR 0 1
24252: ARRAY
24253: PUSH
24254: LD_VAR 0 2
24258: ARRAY
24259: PUSH
24260: LD_INT 2
24262: ARRAY
24263: PPUSH
24264: CALL_OW 458
24268: AND
24269: IFFALSE 24363
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24271: LD_EXP 116
24275: PUSH
24276: LD_VAR 0 1
24280: ARRAY
24281: PUSH
24282: LD_VAR 0 2
24286: ARRAY
24287: PUSH
24288: LD_INT 1
24290: ARRAY
24291: PPUSH
24292: LD_EXP 116
24296: PUSH
24297: LD_VAR 0 1
24301: ARRAY
24302: PUSH
24303: LD_VAR 0 2
24307: ARRAY
24308: PUSH
24309: LD_INT 2
24311: ARRAY
24312: PPUSH
24313: LD_VAR 0 3
24317: PPUSH
24318: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24322: LD_ADDR_EXP 116
24326: PUSH
24327: LD_EXP 116
24331: PPUSH
24332: LD_VAR 0 1
24336: PPUSH
24337: LD_EXP 116
24341: PUSH
24342: LD_VAR 0 1
24346: ARRAY
24347: PPUSH
24348: LD_VAR 0 2
24352: PPUSH
24353: CALL_OW 3
24357: PPUSH
24358: CALL_OW 1
24362: ST_TO_ADDR
// end ; end ;
24363: GO 24114
24365: POP
24366: POP
// end ;
24367: GO 24032
24369: POP
24370: POP
// end ;
24371: PPOPN 4
24373: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24374: LD_INT 0
24376: PPUSH
24377: PPUSH
// result := false ;
24378: LD_ADDR_VAR 0 4
24382: PUSH
24383: LD_INT 0
24385: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24386: LD_VAR 0 1
24390: PPUSH
24391: CALL_OW 264
24395: PUSH
24396: LD_EXP 36
24400: EQUAL
24401: NOT
24402: IFFALSE 24406
// exit ;
24404: GO 24646
// index := GetElementIndex ( minersList , unit ) ;
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_EXP 115
24415: PPUSH
24416: LD_VAR 0 1
24420: PPUSH
24421: CALL 30630 0 2
24425: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24426: LD_EXP 116
24430: PUSH
24431: LD_VAR 0 5
24435: ARRAY
24436: PUSH
24437: LD_EXP 117
24441: GREATEREQUAL
24442: IFFALSE 24446
// exit ;
24444: GO 24646
// ComMoveXY ( unit , x , y ) ;
24446: LD_VAR 0 1
24450: PPUSH
24451: LD_VAR 0 2
24455: PPUSH
24456: LD_VAR 0 3
24460: PPUSH
24461: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24465: LD_INT 35
24467: PPUSH
24468: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24472: LD_VAR 0 1
24476: PPUSH
24477: LD_VAR 0 2
24481: PPUSH
24482: LD_VAR 0 3
24486: PPUSH
24487: CALL 61402 0 3
24491: NOT
24492: PUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 314
24502: AND
24503: IFFALSE 24507
// exit ;
24505: GO 24646
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24507: LD_VAR 0 2
24511: PPUSH
24512: LD_VAR 0 3
24516: PPUSH
24517: CALL_OW 428
24521: PUSH
24522: LD_VAR 0 1
24526: EQUAL
24527: PUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 314
24537: NOT
24538: AND
24539: IFFALSE 24465
// PlaySoundXY ( x , y , PlantMine ) ;
24541: LD_VAR 0 2
24545: PPUSH
24546: LD_VAR 0 3
24550: PPUSH
24551: LD_STRING PlantMine
24553: PPUSH
24554: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24558: LD_VAR 0 2
24562: PPUSH
24563: LD_VAR 0 3
24567: PPUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 255
24577: PPUSH
24578: LD_INT 0
24580: PPUSH
24581: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24585: LD_ADDR_EXP 116
24589: PUSH
24590: LD_EXP 116
24594: PPUSH
24595: LD_VAR 0 5
24599: PUSH
24600: LD_EXP 116
24604: PUSH
24605: LD_VAR 0 5
24609: ARRAY
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PPUSH
24619: LD_VAR 0 2
24623: PUSH
24624: LD_VAR 0 3
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PPUSH
24633: CALL 30845 0 3
24637: ST_TO_ADDR
// result := true ;
24638: LD_ADDR_VAR 0 4
24642: PUSH
24643: LD_INT 1
24645: ST_TO_ADDR
// end ;
24646: LD_VAR 0 4
24650: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24651: LD_INT 0
24653: PPUSH
24654: PPUSH
24655: PPUSH
// if not unit in minersList then
24656: LD_VAR 0 1
24660: PUSH
24661: LD_EXP 115
24665: IN
24666: NOT
24667: IFFALSE 24671
// exit ;
24669: GO 25063
// index := GetElementIndex ( minersList , unit ) ;
24671: LD_ADDR_VAR 0 6
24675: PUSH
24676: LD_EXP 115
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL 30630 0 2
24690: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24691: LD_ADDR_VAR 0 5
24695: PUSH
24696: DOUBLE
24697: LD_EXP 116
24701: PUSH
24702: LD_VAR 0 6
24706: ARRAY
24707: INC
24708: ST_TO_ADDR
24709: LD_INT 1
24711: PUSH
24712: FOR_DOWNTO
24713: IFFALSE 24874
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24715: LD_EXP 116
24719: PUSH
24720: LD_VAR 0 6
24724: ARRAY
24725: PUSH
24726: LD_VAR 0 5
24730: ARRAY
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PUSH
24736: LD_VAR 0 2
24740: EQUAL
24741: PUSH
24742: LD_EXP 116
24746: PUSH
24747: LD_VAR 0 6
24751: ARRAY
24752: PUSH
24753: LD_VAR 0 5
24757: ARRAY
24758: PUSH
24759: LD_INT 2
24761: ARRAY
24762: PUSH
24763: LD_VAR 0 3
24767: EQUAL
24768: AND
24769: IFFALSE 24872
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24771: LD_EXP 116
24775: PUSH
24776: LD_VAR 0 6
24780: ARRAY
24781: PUSH
24782: LD_VAR 0 5
24786: ARRAY
24787: PUSH
24788: LD_INT 1
24790: ARRAY
24791: PPUSH
24792: LD_EXP 116
24796: PUSH
24797: LD_VAR 0 6
24801: ARRAY
24802: PUSH
24803: LD_VAR 0 5
24807: ARRAY
24808: PUSH
24809: LD_INT 2
24811: ARRAY
24812: PPUSH
24813: LD_VAR 0 1
24817: PPUSH
24818: CALL_OW 255
24822: PPUSH
24823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24827: LD_ADDR_EXP 116
24831: PUSH
24832: LD_EXP 116
24836: PPUSH
24837: LD_VAR 0 6
24841: PPUSH
24842: LD_EXP 116
24846: PUSH
24847: LD_VAR 0 6
24851: ARRAY
24852: PPUSH
24853: LD_VAR 0 5
24857: PPUSH
24858: CALL_OW 3
24862: PPUSH
24863: CALL_OW 1
24867: ST_TO_ADDR
// exit ;
24868: POP
24869: POP
24870: GO 25063
// end ; end ;
24872: GO 24712
24874: POP
24875: POP
// for i := minerMinesList [ index ] downto 1 do
24876: LD_ADDR_VAR 0 5
24880: PUSH
24881: DOUBLE
24882: LD_EXP 116
24886: PUSH
24887: LD_VAR 0 6
24891: ARRAY
24892: INC
24893: ST_TO_ADDR
24894: LD_INT 1
24896: PUSH
24897: FOR_DOWNTO
24898: IFFALSE 25061
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24900: LD_EXP 116
24904: PUSH
24905: LD_VAR 0 6
24909: ARRAY
24910: PUSH
24911: LD_VAR 0 5
24915: ARRAY
24916: PUSH
24917: LD_INT 1
24919: ARRAY
24920: PPUSH
24921: LD_EXP 116
24925: PUSH
24926: LD_VAR 0 6
24930: ARRAY
24931: PUSH
24932: LD_VAR 0 5
24936: ARRAY
24937: PUSH
24938: LD_INT 2
24940: ARRAY
24941: PPUSH
24942: LD_VAR 0 2
24946: PPUSH
24947: LD_VAR 0 3
24951: PPUSH
24952: CALL_OW 298
24956: PUSH
24957: LD_INT 6
24959: LESS
24960: IFFALSE 25059
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24962: LD_EXP 116
24966: PUSH
24967: LD_VAR 0 6
24971: ARRAY
24972: PUSH
24973: LD_VAR 0 5
24977: ARRAY
24978: PUSH
24979: LD_INT 1
24981: ARRAY
24982: PPUSH
24983: LD_EXP 116
24987: PUSH
24988: LD_VAR 0 6
24992: ARRAY
24993: PUSH
24994: LD_VAR 0 5
24998: ARRAY
24999: PUSH
25000: LD_INT 2
25002: ARRAY
25003: PPUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 255
25013: PPUSH
25014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25018: LD_ADDR_EXP 116
25022: PUSH
25023: LD_EXP 116
25027: PPUSH
25028: LD_VAR 0 6
25032: PPUSH
25033: LD_EXP 116
25037: PUSH
25038: LD_VAR 0 6
25042: ARRAY
25043: PPUSH
25044: LD_VAR 0 5
25048: PPUSH
25049: CALL_OW 3
25053: PPUSH
25054: CALL_OW 1
25058: ST_TO_ADDR
// end ; end ;
25059: GO 24897
25061: POP
25062: POP
// end ;
25063: LD_VAR 0 4
25067: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25068: LD_INT 0
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 264
25088: PUSH
25089: LD_EXP 36
25093: EQUAL
25094: NOT
25095: PUSH
25096: LD_VAR 0 1
25100: PUSH
25101: LD_EXP 115
25105: IN
25106: NOT
25107: OR
25108: IFFALSE 25112
// exit ;
25110: GO 25434
// index := GetElementIndex ( minersList , unit ) ;
25112: LD_ADDR_VAR 0 6
25116: PUSH
25117: LD_EXP 115
25121: PPUSH
25122: LD_VAR 0 1
25126: PPUSH
25127: CALL 30630 0 2
25131: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25132: LD_ADDR_VAR 0 8
25136: PUSH
25137: LD_EXP 117
25141: PUSH
25142: LD_EXP 116
25146: PUSH
25147: LD_VAR 0 6
25151: ARRAY
25152: MINUS
25153: ST_TO_ADDR
// if not minesFreeAmount then
25154: LD_VAR 0 8
25158: NOT
25159: IFFALSE 25163
// exit ;
25161: GO 25434
// tmp := [ ] ;
25163: LD_ADDR_VAR 0 7
25167: PUSH
25168: EMPTY
25169: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25170: LD_ADDR_VAR 0 5
25174: PUSH
25175: DOUBLE
25176: LD_INT 1
25178: DEC
25179: ST_TO_ADDR
25180: LD_VAR 0 8
25184: PUSH
25185: FOR_TO
25186: IFFALSE 25381
// begin _d := rand ( 0 , 5 ) ;
25188: LD_ADDR_VAR 0 11
25192: PUSH
25193: LD_INT 0
25195: PPUSH
25196: LD_INT 5
25198: PPUSH
25199: CALL_OW 12
25203: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25204: LD_ADDR_VAR 0 12
25208: PUSH
25209: LD_INT 2
25211: PPUSH
25212: LD_INT 6
25214: PPUSH
25215: CALL_OW 12
25219: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25220: LD_ADDR_VAR 0 9
25224: PUSH
25225: LD_VAR 0 2
25229: PPUSH
25230: LD_VAR 0 11
25234: PPUSH
25235: LD_VAR 0 12
25239: PPUSH
25240: CALL_OW 272
25244: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25245: LD_ADDR_VAR 0 10
25249: PUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: LD_VAR 0 11
25259: PPUSH
25260: LD_VAR 0 12
25264: PPUSH
25265: CALL_OW 273
25269: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25270: LD_VAR 0 9
25274: PPUSH
25275: LD_VAR 0 10
25279: PPUSH
25280: CALL_OW 488
25284: PUSH
25285: LD_VAR 0 9
25289: PUSH
25290: LD_VAR 0 10
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_VAR 0 7
25303: IN
25304: NOT
25305: AND
25306: PUSH
25307: LD_VAR 0 9
25311: PPUSH
25312: LD_VAR 0 10
25316: PPUSH
25317: CALL_OW 458
25321: NOT
25322: AND
25323: IFFALSE 25365
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25325: LD_ADDR_VAR 0 7
25329: PUSH
25330: LD_VAR 0 7
25334: PPUSH
25335: LD_VAR 0 7
25339: PUSH
25340: LD_INT 1
25342: PLUS
25343: PPUSH
25344: LD_VAR 0 9
25348: PUSH
25349: LD_VAR 0 10
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PPUSH
25358: CALL_OW 1
25362: ST_TO_ADDR
25363: GO 25379
// i := i - 1 ;
25365: LD_ADDR_VAR 0 5
25369: PUSH
25370: LD_VAR 0 5
25374: PUSH
25375: LD_INT 1
25377: MINUS
25378: ST_TO_ADDR
// end ;
25379: GO 25185
25381: POP
25382: POP
// for i in tmp do
25383: LD_ADDR_VAR 0 5
25387: PUSH
25388: LD_VAR 0 7
25392: PUSH
25393: FOR_IN
25394: IFFALSE 25432
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25396: LD_VAR 0 1
25400: PPUSH
25401: LD_VAR 0 5
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PPUSH
25410: LD_VAR 0 5
25414: PUSH
25415: LD_INT 2
25417: ARRAY
25418: PPUSH
25419: CALL 24374 0 3
25423: NOT
25424: IFFALSE 25430
// exit ;
25426: POP
25427: POP
25428: GO 25434
25430: GO 25393
25432: POP
25433: POP
// end ;
25434: LD_VAR 0 4
25438: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25439: LD_INT 0
25441: PPUSH
25442: PPUSH
25443: PPUSH
25444: PPUSH
25445: PPUSH
25446: PPUSH
25447: PPUSH
// if not GetClass ( unit ) = class_sniper then
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 257
25457: PUSH
25458: LD_INT 5
25460: EQUAL
25461: NOT
25462: IFFALSE 25466
// exit ;
25464: GO 25854
// dist := 8 ;
25466: LD_ADDR_VAR 0 5
25470: PUSH
25471: LD_INT 8
25473: ST_TO_ADDR
// viewRange := 12 ;
25474: LD_ADDR_VAR 0 7
25478: PUSH
25479: LD_INT 12
25481: ST_TO_ADDR
// side := GetSide ( unit ) ;
25482: LD_ADDR_VAR 0 6
25486: PUSH
25487: LD_VAR 0 1
25491: PPUSH
25492: CALL_OW 255
25496: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25497: LD_INT 61
25499: PPUSH
25500: LD_VAR 0 6
25504: PPUSH
25505: CALL_OW 321
25509: PUSH
25510: LD_INT 2
25512: EQUAL
25513: IFFALSE 25523
// viewRange := 16 ;
25515: LD_ADDR_VAR 0 7
25519: PUSH
25520: LD_INT 16
25522: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_VAR 0 2
25532: PPUSH
25533: LD_VAR 0 3
25537: PPUSH
25538: CALL_OW 297
25542: PUSH
25543: LD_VAR 0 5
25547: GREATER
25548: IFFALSE 25627
// begin ComMoveXY ( unit , x , y ) ;
25550: LD_VAR 0 1
25554: PPUSH
25555: LD_VAR 0 2
25559: PPUSH
25560: LD_VAR 0 3
25564: PPUSH
25565: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25569: LD_INT 35
25571: PPUSH
25572: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25576: LD_VAR 0 1
25580: PPUSH
25581: LD_VAR 0 2
25585: PPUSH
25586: LD_VAR 0 3
25590: PPUSH
25591: CALL 61402 0 3
25595: NOT
25596: IFFALSE 25600
// exit ;
25598: GO 25854
// until GetDistUnitXY ( unit , x , y ) < dist ;
25600: LD_VAR 0 1
25604: PPUSH
25605: LD_VAR 0 2
25609: PPUSH
25610: LD_VAR 0 3
25614: PPUSH
25615: CALL_OW 297
25619: PUSH
25620: LD_VAR 0 5
25624: LESS
25625: IFFALSE 25569
// end ; ComTurnXY ( unit , x , y ) ;
25627: LD_VAR 0 1
25631: PPUSH
25632: LD_VAR 0 2
25636: PPUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: CALL_OW 118
// wait ( 5 ) ;
25646: LD_INT 5
25648: PPUSH
25649: CALL_OW 67
// _d := GetDir ( unit ) ;
25653: LD_ADDR_VAR 0 10
25657: PUSH
25658: LD_VAR 0 1
25662: PPUSH
25663: CALL_OW 254
25667: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25668: LD_ADDR_VAR 0 8
25672: PUSH
25673: LD_VAR 0 1
25677: PPUSH
25678: CALL_OW 250
25682: PPUSH
25683: LD_VAR 0 10
25687: PPUSH
25688: LD_VAR 0 5
25692: PPUSH
25693: CALL_OW 272
25697: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25698: LD_ADDR_VAR 0 9
25702: PUSH
25703: LD_VAR 0 1
25707: PPUSH
25708: CALL_OW 251
25712: PPUSH
25713: LD_VAR 0 10
25717: PPUSH
25718: LD_VAR 0 5
25722: PPUSH
25723: CALL_OW 273
25727: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25728: LD_VAR 0 8
25732: PPUSH
25733: LD_VAR 0 9
25737: PPUSH
25738: CALL_OW 488
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25854
// ComAnimCustom ( unit , 1 ) ;
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_INT 1
25754: PPUSH
25755: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25759: LD_VAR 0 8
25763: PPUSH
25764: LD_VAR 0 9
25768: PPUSH
25769: LD_VAR 0 6
25773: PPUSH
25774: LD_VAR 0 7
25778: PPUSH
25779: CALL_OW 330
// repeat wait ( 1 ) ;
25783: LD_INT 1
25785: PPUSH
25786: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 316
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 314
25809: OR
25810: PUSH
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 302
25820: NOT
25821: OR
25822: PUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 301
25832: OR
25833: IFFALSE 25783
// RemoveSeeing ( _x , _y , side ) ;
25835: LD_VAR 0 8
25839: PPUSH
25840: LD_VAR 0 9
25844: PPUSH
25845: LD_VAR 0 6
25849: PPUSH
25850: CALL_OW 331
// end ; end_of_file
25854: LD_VAR 0 4
25858: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25859: LD_INT 0
25861: PPUSH
25862: PPUSH
// if exist_mode then
25863: LD_VAR 0 2
25867: IFFALSE 25892
// unit := CreateCharacter ( prefix & ident ) else
25869: LD_ADDR_VAR 0 5
25873: PUSH
25874: LD_VAR 0 3
25878: PUSH
25879: LD_VAR 0 1
25883: STR
25884: PPUSH
25885: CALL_OW 34
25889: ST_TO_ADDR
25890: GO 25907
// unit := NewCharacter ( ident ) ;
25892: LD_ADDR_VAR 0 5
25896: PUSH
25897: LD_VAR 0 1
25901: PPUSH
25902: CALL_OW 25
25906: ST_TO_ADDR
// result := unit ;
25907: LD_ADDR_VAR 0 4
25911: PUSH
25912: LD_VAR 0 5
25916: ST_TO_ADDR
// end ;
25917: LD_VAR 0 4
25921: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
// if not side or not nation then
25926: LD_VAR 0 1
25930: NOT
25931: PUSH
25932: LD_VAR 0 2
25936: NOT
25937: OR
25938: IFFALSE 25942
// exit ;
25940: GO 26710
// case nation of nation_american :
25942: LD_VAR 0 2
25946: PUSH
25947: LD_INT 1
25949: DOUBLE
25950: EQUAL
25951: IFTRUE 25955
25953: GO 26169
25955: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25956: LD_ADDR_VAR 0 4
25960: PUSH
25961: LD_INT 35
25963: PUSH
25964: LD_INT 45
25966: PUSH
25967: LD_INT 46
25969: PUSH
25970: LD_INT 47
25972: PUSH
25973: LD_INT 82
25975: PUSH
25976: LD_INT 83
25978: PUSH
25979: LD_INT 84
25981: PUSH
25982: LD_INT 85
25984: PUSH
25985: LD_INT 86
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: LD_INT 6
25996: PUSH
25997: LD_INT 15
25999: PUSH
26000: LD_INT 16
26002: PUSH
26003: LD_INT 7
26005: PUSH
26006: LD_INT 12
26008: PUSH
26009: LD_INT 13
26011: PUSH
26012: LD_INT 10
26014: PUSH
26015: LD_INT 14
26017: PUSH
26018: LD_INT 20
26020: PUSH
26021: LD_INT 21
26023: PUSH
26024: LD_INT 22
26026: PUSH
26027: LD_INT 25
26029: PUSH
26030: LD_INT 32
26032: PUSH
26033: LD_INT 27
26035: PUSH
26036: LD_INT 36
26038: PUSH
26039: LD_INT 69
26041: PUSH
26042: LD_INT 39
26044: PUSH
26045: LD_INT 34
26047: PUSH
26048: LD_INT 40
26050: PUSH
26051: LD_INT 48
26053: PUSH
26054: LD_INT 49
26056: PUSH
26057: LD_INT 50
26059: PUSH
26060: LD_INT 51
26062: PUSH
26063: LD_INT 52
26065: PUSH
26066: LD_INT 53
26068: PUSH
26069: LD_INT 54
26071: PUSH
26072: LD_INT 55
26074: PUSH
26075: LD_INT 56
26077: PUSH
26078: LD_INT 57
26080: PUSH
26081: LD_INT 58
26083: PUSH
26084: LD_INT 59
26086: PUSH
26087: LD_INT 60
26089: PUSH
26090: LD_INT 61
26092: PUSH
26093: LD_INT 62
26095: PUSH
26096: LD_INT 80
26098: PUSH
26099: LD_INT 82
26101: PUSH
26102: LD_INT 83
26104: PUSH
26105: LD_INT 84
26107: PUSH
26108: LD_INT 85
26110: PUSH
26111: LD_INT 86
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: ST_TO_ADDR
26167: GO 26634
26169: LD_INT 2
26171: DOUBLE
26172: EQUAL
26173: IFTRUE 26177
26175: GO 26403
26177: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26178: LD_ADDR_VAR 0 4
26182: PUSH
26183: LD_INT 35
26185: PUSH
26186: LD_INT 45
26188: PUSH
26189: LD_INT 46
26191: PUSH
26192: LD_INT 47
26194: PUSH
26195: LD_INT 82
26197: PUSH
26198: LD_INT 83
26200: PUSH
26201: LD_INT 84
26203: PUSH
26204: LD_INT 85
26206: PUSH
26207: LD_INT 87
26209: PUSH
26210: LD_INT 70
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 11
26218: PUSH
26219: LD_INT 3
26221: PUSH
26222: LD_INT 4
26224: PUSH
26225: LD_INT 5
26227: PUSH
26228: LD_INT 6
26230: PUSH
26231: LD_INT 15
26233: PUSH
26234: LD_INT 18
26236: PUSH
26237: LD_INT 7
26239: PUSH
26240: LD_INT 17
26242: PUSH
26243: LD_INT 8
26245: PUSH
26246: LD_INT 20
26248: PUSH
26249: LD_INT 21
26251: PUSH
26252: LD_INT 22
26254: PUSH
26255: LD_INT 72
26257: PUSH
26258: LD_INT 26
26260: PUSH
26261: LD_INT 69
26263: PUSH
26264: LD_INT 39
26266: PUSH
26267: LD_INT 40
26269: PUSH
26270: LD_INT 41
26272: PUSH
26273: LD_INT 42
26275: PUSH
26276: LD_INT 43
26278: PUSH
26279: LD_INT 48
26281: PUSH
26282: LD_INT 49
26284: PUSH
26285: LD_INT 50
26287: PUSH
26288: LD_INT 51
26290: PUSH
26291: LD_INT 52
26293: PUSH
26294: LD_INT 53
26296: PUSH
26297: LD_INT 54
26299: PUSH
26300: LD_INT 55
26302: PUSH
26303: LD_INT 56
26305: PUSH
26306: LD_INT 60
26308: PUSH
26309: LD_INT 61
26311: PUSH
26312: LD_INT 62
26314: PUSH
26315: LD_INT 66
26317: PUSH
26318: LD_INT 67
26320: PUSH
26321: LD_INT 68
26323: PUSH
26324: LD_INT 81
26326: PUSH
26327: LD_INT 82
26329: PUSH
26330: LD_INT 83
26332: PUSH
26333: LD_INT 84
26335: PUSH
26336: LD_INT 85
26338: PUSH
26339: LD_INT 87
26341: PUSH
26342: LD_INT 88
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: ST_TO_ADDR
26401: GO 26634
26403: LD_INT 3
26405: DOUBLE
26406: EQUAL
26407: IFTRUE 26411
26409: GO 26633
26411: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26412: LD_ADDR_VAR 0 4
26416: PUSH
26417: LD_INT 46
26419: PUSH
26420: LD_INT 47
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: LD_INT 82
26431: PUSH
26432: LD_INT 83
26434: PUSH
26435: LD_INT 84
26437: PUSH
26438: LD_INT 85
26440: PUSH
26441: LD_INT 86
26443: PUSH
26444: LD_INT 11
26446: PUSH
26447: LD_INT 9
26449: PUSH
26450: LD_INT 20
26452: PUSH
26453: LD_INT 19
26455: PUSH
26456: LD_INT 21
26458: PUSH
26459: LD_INT 24
26461: PUSH
26462: LD_INT 22
26464: PUSH
26465: LD_INT 25
26467: PUSH
26468: LD_INT 28
26470: PUSH
26471: LD_INT 29
26473: PUSH
26474: LD_INT 30
26476: PUSH
26477: LD_INT 31
26479: PUSH
26480: LD_INT 37
26482: PUSH
26483: LD_INT 38
26485: PUSH
26486: LD_INT 32
26488: PUSH
26489: LD_INT 27
26491: PUSH
26492: LD_INT 33
26494: PUSH
26495: LD_INT 69
26497: PUSH
26498: LD_INT 39
26500: PUSH
26501: LD_INT 34
26503: PUSH
26504: LD_INT 40
26506: PUSH
26507: LD_INT 71
26509: PUSH
26510: LD_INT 23
26512: PUSH
26513: LD_INT 44
26515: PUSH
26516: LD_INT 48
26518: PUSH
26519: LD_INT 49
26521: PUSH
26522: LD_INT 50
26524: PUSH
26525: LD_INT 51
26527: PUSH
26528: LD_INT 52
26530: PUSH
26531: LD_INT 53
26533: PUSH
26534: LD_INT 54
26536: PUSH
26537: LD_INT 55
26539: PUSH
26540: LD_INT 56
26542: PUSH
26543: LD_INT 57
26545: PUSH
26546: LD_INT 58
26548: PUSH
26549: LD_INT 59
26551: PUSH
26552: LD_INT 63
26554: PUSH
26555: LD_INT 64
26557: PUSH
26558: LD_INT 65
26560: PUSH
26561: LD_INT 82
26563: PUSH
26564: LD_INT 83
26566: PUSH
26567: LD_INT 84
26569: PUSH
26570: LD_INT 85
26572: PUSH
26573: LD_INT 86
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: ST_TO_ADDR
26631: GO 26634
26633: POP
// if state > - 1 and state < 3 then
26634: LD_VAR 0 3
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: GREATER
26643: PUSH
26644: LD_VAR 0 3
26648: PUSH
26649: LD_INT 3
26651: LESS
26652: AND
26653: IFFALSE 26710
// for i in result do
26655: LD_ADDR_VAR 0 5
26659: PUSH
26660: LD_VAR 0 4
26664: PUSH
26665: FOR_IN
26666: IFFALSE 26708
// if GetTech ( i , side ) <> state then
26668: LD_VAR 0 5
26672: PPUSH
26673: LD_VAR 0 1
26677: PPUSH
26678: CALL_OW 321
26682: PUSH
26683: LD_VAR 0 3
26687: NONEQUAL
26688: IFFALSE 26706
// result := result diff i ;
26690: LD_ADDR_VAR 0 4
26694: PUSH
26695: LD_VAR 0 4
26699: PUSH
26700: LD_VAR 0 5
26704: DIFF
26705: ST_TO_ADDR
26706: GO 26665
26708: POP
26709: POP
// end ;
26710: LD_VAR 0 4
26714: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
26719: PPUSH
// result := true ;
26720: LD_ADDR_VAR 0 3
26724: PUSH
26725: LD_INT 1
26727: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26728: LD_ADDR_VAR 0 5
26732: PUSH
26733: LD_VAR 0 2
26737: PPUSH
26738: CALL_OW 480
26742: ST_TO_ADDR
// if not tmp then
26743: LD_VAR 0 5
26747: NOT
26748: IFFALSE 26752
// exit ;
26750: GO 26801
// for i in tmp do
26752: LD_ADDR_VAR 0 4
26756: PUSH
26757: LD_VAR 0 5
26761: PUSH
26762: FOR_IN
26763: IFFALSE 26799
// if GetTech ( i , side ) <> state_researched then
26765: LD_VAR 0 4
26769: PPUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL_OW 321
26779: PUSH
26780: LD_INT 2
26782: NONEQUAL
26783: IFFALSE 26797
// begin result := false ;
26785: LD_ADDR_VAR 0 3
26789: PUSH
26790: LD_INT 0
26792: ST_TO_ADDR
// exit ;
26793: POP
26794: POP
26795: GO 26801
// end ;
26797: GO 26762
26799: POP
26800: POP
// end ;
26801: LD_VAR 0 3
26805: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
26820: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26821: LD_VAR 0 1
26825: NOT
26826: PUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 257
26836: PUSH
26837: LD_INT 9
26839: NONEQUAL
26840: OR
26841: IFFALSE 26845
// exit ;
26843: GO 27418
// side := GetSide ( unit ) ;
26845: LD_ADDR_VAR 0 9
26849: PUSH
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 255
26859: ST_TO_ADDR
// tech_space := tech_spacanom ;
26860: LD_ADDR_VAR 0 12
26864: PUSH
26865: LD_INT 29
26867: ST_TO_ADDR
// tech_time := tech_taurad ;
26868: LD_ADDR_VAR 0 13
26872: PUSH
26873: LD_INT 28
26875: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26876: LD_ADDR_VAR 0 11
26880: PUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 310
26890: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26891: LD_VAR 0 11
26895: PPUSH
26896: CALL_OW 247
26900: PUSH
26901: LD_INT 2
26903: EQUAL
26904: IFFALSE 26908
// exit ;
26906: GO 27418
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26908: LD_ADDR_VAR 0 8
26912: PUSH
26913: LD_INT 81
26915: PUSH
26916: LD_VAR 0 9
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 3
26927: PUSH
26928: LD_INT 21
26930: PUSH
26931: LD_INT 3
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 69
26950: ST_TO_ADDR
// if not tmp then
26951: LD_VAR 0 8
26955: NOT
26956: IFFALSE 26960
// exit ;
26958: GO 27418
// if in_unit then
26960: LD_VAR 0 11
26964: IFFALSE 26988
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26966: LD_ADDR_VAR 0 10
26970: PUSH
26971: LD_VAR 0 8
26975: PPUSH
26976: LD_VAR 0 11
26980: PPUSH
26981: CALL_OW 74
26985: ST_TO_ADDR
26986: GO 27008
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26988: LD_ADDR_VAR 0 10
26992: PUSH
26993: LD_VAR 0 8
26997: PPUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL_OW 74
27007: ST_TO_ADDR
// if not enemy then
27008: LD_VAR 0 10
27012: NOT
27013: IFFALSE 27017
// exit ;
27015: GO 27418
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27017: LD_VAR 0 11
27021: PUSH
27022: LD_VAR 0 11
27026: PPUSH
27027: LD_VAR 0 10
27031: PPUSH
27032: CALL_OW 296
27036: PUSH
27037: LD_INT 13
27039: GREATER
27040: AND
27041: PUSH
27042: LD_VAR 0 1
27046: PPUSH
27047: LD_VAR 0 10
27051: PPUSH
27052: CALL_OW 296
27056: PUSH
27057: LD_INT 12
27059: GREATER
27060: OR
27061: IFFALSE 27065
// exit ;
27063: GO 27418
// missile := [ 1 ] ;
27065: LD_ADDR_VAR 0 14
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: EMPTY
27074: LIST
27075: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27076: LD_VAR 0 9
27080: PPUSH
27081: LD_VAR 0 12
27085: PPUSH
27086: CALL_OW 325
27090: IFFALSE 27119
// missile := Insert ( missile , missile + 1 , 2 ) ;
27092: LD_ADDR_VAR 0 14
27096: PUSH
27097: LD_VAR 0 14
27101: PPUSH
27102: LD_VAR 0 14
27106: PUSH
27107: LD_INT 1
27109: PLUS
27110: PPUSH
27111: LD_INT 2
27113: PPUSH
27114: CALL_OW 2
27118: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27119: LD_VAR 0 9
27123: PPUSH
27124: LD_VAR 0 13
27128: PPUSH
27129: CALL_OW 325
27133: PUSH
27134: LD_VAR 0 10
27138: PPUSH
27139: CALL_OW 255
27143: PPUSH
27144: LD_VAR 0 13
27148: PPUSH
27149: CALL_OW 325
27153: NOT
27154: AND
27155: IFFALSE 27184
// missile := Insert ( missile , missile + 1 , 3 ) ;
27157: LD_ADDR_VAR 0 14
27161: PUSH
27162: LD_VAR 0 14
27166: PPUSH
27167: LD_VAR 0 14
27171: PUSH
27172: LD_INT 1
27174: PLUS
27175: PPUSH
27176: LD_INT 3
27178: PPUSH
27179: CALL_OW 2
27183: ST_TO_ADDR
// if missile < 2 then
27184: LD_VAR 0 14
27188: PUSH
27189: LD_INT 2
27191: LESS
27192: IFFALSE 27196
// exit ;
27194: GO 27418
// x := GetX ( enemy ) ;
27196: LD_ADDR_VAR 0 4
27200: PUSH
27201: LD_VAR 0 10
27205: PPUSH
27206: CALL_OW 250
27210: ST_TO_ADDR
// y := GetY ( enemy ) ;
27211: LD_ADDR_VAR 0 5
27215: PUSH
27216: LD_VAR 0 10
27220: PPUSH
27221: CALL_OW 251
27225: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27226: LD_ADDR_VAR 0 6
27230: PUSH
27231: LD_VAR 0 4
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PPUSH
27240: LD_INT 1
27242: PPUSH
27243: CALL_OW 12
27247: PLUS
27248: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27249: LD_ADDR_VAR 0 7
27253: PUSH
27254: LD_VAR 0 5
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PPUSH
27263: LD_INT 1
27265: PPUSH
27266: CALL_OW 12
27270: PLUS
27271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27272: LD_VAR 0 6
27276: PPUSH
27277: LD_VAR 0 7
27281: PPUSH
27282: CALL_OW 488
27286: NOT
27287: IFFALSE 27309
// begin _x := x ;
27289: LD_ADDR_VAR 0 6
27293: PUSH
27294: LD_VAR 0 4
27298: ST_TO_ADDR
// _y := y ;
27299: LD_ADDR_VAR 0 7
27303: PUSH
27304: LD_VAR 0 5
27308: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_INT 1
27316: PPUSH
27317: LD_VAR 0 14
27321: PPUSH
27322: CALL_OW 12
27326: ST_TO_ADDR
// case i of 1 :
27327: LD_VAR 0 3
27331: PUSH
27332: LD_INT 1
27334: DOUBLE
27335: EQUAL
27336: IFTRUE 27340
27338: GO 27357
27340: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27341: LD_VAR 0 1
27345: PPUSH
27346: LD_VAR 0 10
27350: PPUSH
27351: CALL_OW 115
27355: GO 27418
27357: LD_INT 2
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27365
27363: GO 27387
27365: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27366: LD_VAR 0 1
27370: PPUSH
27371: LD_VAR 0 6
27375: PPUSH
27376: LD_VAR 0 7
27380: PPUSH
27381: CALL_OW 153
27385: GO 27418
27387: LD_INT 3
27389: DOUBLE
27390: EQUAL
27391: IFTRUE 27395
27393: GO 27417
27395: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27396: LD_VAR 0 1
27400: PPUSH
27401: LD_VAR 0 6
27405: PPUSH
27406: LD_VAR 0 7
27410: PPUSH
27411: CALL_OW 154
27415: GO 27418
27417: POP
// end ;
27418: LD_VAR 0 2
27422: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
27427: PPUSH
27428: PPUSH
27429: PPUSH
27430: PPUSH
// if not unit or not building then
27431: LD_VAR 0 1
27435: NOT
27436: PUSH
27437: LD_VAR 0 2
27441: NOT
27442: OR
27443: IFFALSE 27447
// exit ;
27445: GO 27605
// x := GetX ( building ) ;
27447: LD_ADDR_VAR 0 5
27451: PUSH
27452: LD_VAR 0 2
27456: PPUSH
27457: CALL_OW 250
27461: ST_TO_ADDR
// y := GetY ( building ) ;
27462: LD_ADDR_VAR 0 6
27466: PUSH
27467: LD_VAR 0 2
27471: PPUSH
27472: CALL_OW 251
27476: ST_TO_ADDR
// for i = 0 to 5 do
27477: LD_ADDR_VAR 0 4
27481: PUSH
27482: DOUBLE
27483: LD_INT 0
27485: DEC
27486: ST_TO_ADDR
27487: LD_INT 5
27489: PUSH
27490: FOR_TO
27491: IFFALSE 27603
// begin _x := ShiftX ( x , i , 3 ) ;
27493: LD_ADDR_VAR 0 7
27497: PUSH
27498: LD_VAR 0 5
27502: PPUSH
27503: LD_VAR 0 4
27507: PPUSH
27508: LD_INT 3
27510: PPUSH
27511: CALL_OW 272
27515: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27516: LD_ADDR_VAR 0 8
27520: PUSH
27521: LD_VAR 0 6
27525: PPUSH
27526: LD_VAR 0 4
27530: PPUSH
27531: LD_INT 3
27533: PPUSH
27534: CALL_OW 273
27538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27539: LD_VAR 0 7
27543: PPUSH
27544: LD_VAR 0 8
27548: PPUSH
27549: CALL_OW 488
27553: NOT
27554: IFFALSE 27558
// continue ;
27556: GO 27490
// if HexInfo ( _x , _y ) = 0 then
27558: LD_VAR 0 7
27562: PPUSH
27563: LD_VAR 0 8
27567: PPUSH
27568: CALL_OW 428
27572: PUSH
27573: LD_INT 0
27575: EQUAL
27576: IFFALSE 27601
// begin ComMoveXY ( unit , _x , _y ) ;
27578: LD_VAR 0 1
27582: PPUSH
27583: LD_VAR 0 7
27587: PPUSH
27588: LD_VAR 0 8
27592: PPUSH
27593: CALL_OW 111
// exit ;
27597: POP
27598: POP
27599: GO 27605
// end ; end ;
27601: GO 27490
27603: POP
27604: POP
// end ;
27605: LD_VAR 0 3
27609: RET
// export function ScanBase ( side , base_area ) ; begin
27610: LD_INT 0
27612: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27613: LD_ADDR_VAR 0 3
27617: PUSH
27618: LD_VAR 0 2
27622: PPUSH
27623: LD_INT 81
27625: PUSH
27626: LD_VAR 0 1
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 70
27639: ST_TO_ADDR
// end ;
27640: LD_VAR 0 3
27644: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27645: LD_INT 0
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
// result := false ;
27651: LD_ADDR_VAR 0 2
27655: PUSH
27656: LD_INT 0
27658: ST_TO_ADDR
// side := GetSide ( unit ) ;
27659: LD_ADDR_VAR 0 3
27663: PUSH
27664: LD_VAR 0 1
27668: PPUSH
27669: CALL_OW 255
27673: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27674: LD_ADDR_VAR 0 4
27678: PUSH
27679: LD_VAR 0 1
27683: PPUSH
27684: CALL_OW 248
27688: ST_TO_ADDR
// case nat of 1 :
27689: LD_VAR 0 4
27693: PUSH
27694: LD_INT 1
27696: DOUBLE
27697: EQUAL
27698: IFTRUE 27702
27700: GO 27713
27702: POP
// tech := tech_lassight ; 2 :
27703: LD_ADDR_VAR 0 5
27707: PUSH
27708: LD_INT 12
27710: ST_TO_ADDR
27711: GO 27752
27713: LD_INT 2
27715: DOUBLE
27716: EQUAL
27717: IFTRUE 27721
27719: GO 27732
27721: POP
// tech := tech_mortar ; 3 :
27722: LD_ADDR_VAR 0 5
27726: PUSH
27727: LD_INT 41
27729: ST_TO_ADDR
27730: GO 27752
27732: LD_INT 3
27734: DOUBLE
27735: EQUAL
27736: IFTRUE 27740
27738: GO 27751
27740: POP
// tech := tech_bazooka ; end ;
27741: LD_ADDR_VAR 0 5
27745: PUSH
27746: LD_INT 44
27748: ST_TO_ADDR
27749: GO 27752
27751: POP
// if Researched ( side , tech ) then
27752: LD_VAR 0 3
27756: PPUSH
27757: LD_VAR 0 5
27761: PPUSH
27762: CALL_OW 325
27766: IFFALSE 27793
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: LD_INT 5
27775: PUSH
27776: LD_INT 8
27778: PUSH
27779: LD_INT 9
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: PUSH
27787: LD_VAR 0 4
27791: ARRAY
27792: ST_TO_ADDR
// end ;
27793: LD_VAR 0 2
27797: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27798: LD_INT 0
27800: PPUSH
27801: PPUSH
27802: PPUSH
// if not mines then
27803: LD_VAR 0 2
27807: NOT
27808: IFFALSE 27812
// exit ;
27810: GO 27956
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27812: LD_ADDR_VAR 0 5
27816: PUSH
27817: LD_INT 81
27819: PUSH
27820: LD_VAR 0 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 3
27831: PUSH
27832: LD_INT 21
27834: PUSH
27835: LD_INT 3
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PPUSH
27850: CALL_OW 69
27854: ST_TO_ADDR
// for i in mines do
27855: LD_ADDR_VAR 0 4
27859: PUSH
27860: LD_VAR 0 2
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27954
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27868: LD_VAR 0 4
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 4
27881: PUSH
27882: LD_INT 2
27884: ARRAY
27885: PPUSH
27886: CALL_OW 458
27890: NOT
27891: IFFALSE 27895
// continue ;
27893: GO 27865
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27895: LD_VAR 0 4
27899: PUSH
27900: LD_INT 1
27902: ARRAY
27903: PPUSH
27904: LD_VAR 0 4
27908: PUSH
27909: LD_INT 2
27911: ARRAY
27912: PPUSH
27913: CALL_OW 428
27917: PUSH
27918: LD_VAR 0 5
27922: IN
27923: IFFALSE 27952
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27925: LD_VAR 0 4
27929: PUSH
27930: LD_INT 1
27932: ARRAY
27933: PPUSH
27934: LD_VAR 0 4
27938: PUSH
27939: LD_INT 2
27941: ARRAY
27942: PPUSH
27943: LD_VAR 0 1
27947: PPUSH
27948: CALL_OW 456
// end ;
27952: GO 27865
27954: POP
27955: POP
// end ;
27956: LD_VAR 0 3
27960: RET
// export function Count ( array ) ; var i ; begin
27961: LD_INT 0
27963: PPUSH
27964: PPUSH
// result := 0 ;
27965: LD_ADDR_VAR 0 2
27969: PUSH
27970: LD_INT 0
27972: ST_TO_ADDR
// for i in array do
27973: LD_ADDR_VAR 0 3
27977: PUSH
27978: LD_VAR 0 1
27982: PUSH
27983: FOR_IN
27984: IFFALSE 28008
// if i then
27986: LD_VAR 0 3
27990: IFFALSE 28006
// result := result + 1 ;
27992: LD_ADDR_VAR 0 2
27996: PUSH
27997: LD_VAR 0 2
28001: PUSH
28002: LD_INT 1
28004: PLUS
28005: ST_TO_ADDR
28006: GO 27983
28008: POP
28009: POP
// end ;
28010: LD_VAR 0 2
28014: RET
// export function IsEmpty ( building ) ; begin
28015: LD_INT 0
28017: PPUSH
// if not building then
28018: LD_VAR 0 1
28022: NOT
28023: IFFALSE 28027
// exit ;
28025: GO 28070
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28027: LD_ADDR_VAR 0 2
28031: PUSH
28032: LD_VAR 0 1
28036: PUSH
28037: LD_INT 22
28039: PUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 255
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 58
28056: PUSH
28057: EMPTY
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: IN
28069: ST_TO_ADDR
// end ;
28070: LD_VAR 0 2
28074: RET
// export function IsNotFull ( building ) ; begin
28075: LD_INT 0
28077: PPUSH
// if not building then
28078: LD_VAR 0 1
28082: NOT
28083: IFFALSE 28087
// exit ;
28085: GO 28106
// result := UnitsInside ( building ) < 6 ;
28087: LD_ADDR_VAR 0 2
28091: PUSH
28092: LD_VAR 0 1
28096: PPUSH
28097: CALL_OW 313
28101: PUSH
28102: LD_INT 6
28104: LESS
28105: ST_TO_ADDR
// end ;
28106: LD_VAR 0 2
28110: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28111: LD_INT 0
28113: PPUSH
28114: PPUSH
28115: PPUSH
28116: PPUSH
// tmp := [ ] ;
28117: LD_ADDR_VAR 0 3
28121: PUSH
28122: EMPTY
28123: ST_TO_ADDR
// list := [ ] ;
28124: LD_ADDR_VAR 0 5
28128: PUSH
28129: EMPTY
28130: ST_TO_ADDR
// for i = 16 to 25 do
28131: LD_ADDR_VAR 0 4
28135: PUSH
28136: DOUBLE
28137: LD_INT 16
28139: DEC
28140: ST_TO_ADDR
28141: LD_INT 25
28143: PUSH
28144: FOR_TO
28145: IFFALSE 28218
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28147: LD_ADDR_VAR 0 3
28151: PUSH
28152: LD_VAR 0 3
28156: PUSH
28157: LD_INT 22
28159: PUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 255
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 91
28176: PUSH
28177: LD_VAR 0 1
28181: PUSH
28182: LD_INT 6
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_VAR 0 4
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: PPUSH
28210: CALL_OW 69
28214: ADD
28215: ST_TO_ADDR
28216: GO 28144
28218: POP
28219: POP
// for i = 1 to tmp do
28220: LD_ADDR_VAR 0 4
28224: PUSH
28225: DOUBLE
28226: LD_INT 1
28228: DEC
28229: ST_TO_ADDR
28230: LD_VAR 0 3
28234: PUSH
28235: FOR_TO
28236: IFFALSE 28324
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28238: LD_ADDR_VAR 0 5
28242: PUSH
28243: LD_VAR 0 5
28247: PUSH
28248: LD_VAR 0 3
28252: PUSH
28253: LD_VAR 0 4
28257: ARRAY
28258: PPUSH
28259: CALL_OW 266
28263: PUSH
28264: LD_VAR 0 3
28268: PUSH
28269: LD_VAR 0 4
28273: ARRAY
28274: PPUSH
28275: CALL_OW 250
28279: PUSH
28280: LD_VAR 0 3
28284: PUSH
28285: LD_VAR 0 4
28289: ARRAY
28290: PPUSH
28291: CALL_OW 251
28295: PUSH
28296: LD_VAR 0 3
28300: PUSH
28301: LD_VAR 0 4
28305: ARRAY
28306: PPUSH
28307: CALL_OW 254
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: ADD
28321: ST_TO_ADDR
28322: GO 28235
28324: POP
28325: POP
// result := list ;
28326: LD_ADDR_VAR 0 2
28330: PUSH
28331: LD_VAR 0 5
28335: ST_TO_ADDR
// end ;
28336: LD_VAR 0 2
28340: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28341: LD_INT 0
28343: PPUSH
28344: PPUSH
28345: PPUSH
28346: PPUSH
28347: PPUSH
28348: PPUSH
28349: PPUSH
// if not factory then
28350: LD_VAR 0 1
28354: NOT
28355: IFFALSE 28359
// exit ;
28357: GO 28952
// if control = control_apeman then
28359: LD_VAR 0 4
28363: PUSH
28364: LD_INT 5
28366: EQUAL
28367: IFFALSE 28476
// begin tmp := UnitsInside ( factory ) ;
28369: LD_ADDR_VAR 0 8
28373: PUSH
28374: LD_VAR 0 1
28378: PPUSH
28379: CALL_OW 313
28383: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28384: LD_VAR 0 8
28388: PPUSH
28389: LD_INT 25
28391: PUSH
28392: LD_INT 12
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PPUSH
28399: CALL_OW 72
28403: NOT
28404: IFFALSE 28414
// control := control_manual ;
28406: LD_ADDR_VAR 0 4
28410: PUSH
28411: LD_INT 1
28413: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28414: LD_ADDR_VAR 0 8
28418: PUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL 28111 0 1
28428: ST_TO_ADDR
// if tmp then
28429: LD_VAR 0 8
28433: IFFALSE 28476
// begin for i in tmp do
28435: LD_ADDR_VAR 0 7
28439: PUSH
28440: LD_VAR 0 8
28444: PUSH
28445: FOR_IN
28446: IFFALSE 28474
// if i [ 1 ] = b_ext_radio then
28448: LD_VAR 0 7
28452: PUSH
28453: LD_INT 1
28455: ARRAY
28456: PUSH
28457: LD_INT 22
28459: EQUAL
28460: IFFALSE 28472
// begin control := control_remote ;
28462: LD_ADDR_VAR 0 4
28466: PUSH
28467: LD_INT 2
28469: ST_TO_ADDR
// break ;
28470: GO 28474
// end ;
28472: GO 28445
28474: POP
28475: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28476: LD_VAR 0 1
28480: PPUSH
28481: LD_VAR 0 2
28485: PPUSH
28486: LD_VAR 0 3
28490: PPUSH
28491: LD_VAR 0 4
28495: PPUSH
28496: LD_VAR 0 5
28500: PPUSH
28501: CALL_OW 448
28505: IFFALSE 28540
// begin result := [ chassis , engine , control , weapon ] ;
28507: LD_ADDR_VAR 0 6
28511: PUSH
28512: LD_VAR 0 2
28516: PUSH
28517: LD_VAR 0 3
28521: PUSH
28522: LD_VAR 0 4
28526: PUSH
28527: LD_VAR 0 5
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// exit ;
28538: GO 28952
// end ; _chassis := AvailableChassisList ( factory ) ;
28540: LD_ADDR_VAR 0 9
28544: PUSH
28545: LD_VAR 0 1
28549: PPUSH
28550: CALL_OW 475
28554: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28555: LD_ADDR_VAR 0 11
28559: PUSH
28560: LD_VAR 0 1
28564: PPUSH
28565: CALL_OW 476
28569: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28570: LD_ADDR_VAR 0 12
28574: PUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 477
28584: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28585: LD_ADDR_VAR 0 10
28589: PUSH
28590: LD_VAR 0 1
28594: PPUSH
28595: CALL_OW 478
28599: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28600: LD_VAR 0 9
28604: NOT
28605: PUSH
28606: LD_VAR 0 11
28610: NOT
28611: OR
28612: PUSH
28613: LD_VAR 0 12
28617: NOT
28618: OR
28619: PUSH
28620: LD_VAR 0 10
28624: NOT
28625: OR
28626: IFFALSE 28661
// begin result := [ chassis , engine , control , weapon ] ;
28628: LD_ADDR_VAR 0 6
28632: PUSH
28633: LD_VAR 0 2
28637: PUSH
28638: LD_VAR 0 3
28642: PUSH
28643: LD_VAR 0 4
28647: PUSH
28648: LD_VAR 0 5
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// exit ;
28659: GO 28952
// end ; if not chassis in _chassis then
28661: LD_VAR 0 2
28665: PUSH
28666: LD_VAR 0 9
28670: IN
28671: NOT
28672: IFFALSE 28698
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28674: LD_ADDR_VAR 0 2
28678: PUSH
28679: LD_VAR 0 9
28683: PUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_VAR 0 9
28691: PPUSH
28692: CALL_OW 12
28696: ARRAY
28697: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28698: LD_VAR 0 2
28702: PPUSH
28703: LD_VAR 0 3
28707: PPUSH
28708: CALL 28957 0 2
28712: NOT
28713: IFFALSE 28772
// repeat engine := _engine [ 1 ] ;
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: LD_VAR 0 11
28724: PUSH
28725: LD_INT 1
28727: ARRAY
28728: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28729: LD_ADDR_VAR 0 11
28733: PUSH
28734: LD_VAR 0 11
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL_OW 3
28746: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28747: LD_VAR 0 2
28751: PPUSH
28752: LD_VAR 0 3
28756: PPUSH
28757: CALL 28957 0 2
28761: PUSH
28762: LD_VAR 0 11
28766: PUSH
28767: EMPTY
28768: EQUAL
28769: OR
28770: IFFALSE 28715
// if not control in _control then
28772: LD_VAR 0 4
28776: PUSH
28777: LD_VAR 0 12
28781: IN
28782: NOT
28783: IFFALSE 28809
// control := _control [ rand ( 1 , _control ) ] ;
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: LD_VAR 0 12
28794: PUSH
28795: LD_INT 1
28797: PPUSH
28798: LD_VAR 0 12
28802: PPUSH
28803: CALL_OW 12
28807: ARRAY
28808: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28809: LD_VAR 0 2
28813: PPUSH
28814: LD_VAR 0 5
28818: PPUSH
28819: CALL 29177 0 2
28823: NOT
28824: IFFALSE 28883
// repeat weapon := _weapon [ 1 ] ;
28826: LD_ADDR_VAR 0 5
28830: PUSH
28831: LD_VAR 0 10
28835: PUSH
28836: LD_INT 1
28838: ARRAY
28839: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28840: LD_ADDR_VAR 0 10
28844: PUSH
28845: LD_VAR 0 10
28849: PPUSH
28850: LD_INT 1
28852: PPUSH
28853: CALL_OW 3
28857: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28858: LD_VAR 0 2
28862: PPUSH
28863: LD_VAR 0 5
28867: PPUSH
28868: CALL 29177 0 2
28872: PUSH
28873: LD_VAR 0 10
28877: PUSH
28878: EMPTY
28879: EQUAL
28880: OR
28881: IFFALSE 28826
// result := [ ] ;
28883: LD_ADDR_VAR 0 6
28887: PUSH
28888: EMPTY
28889: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28890: LD_VAR 0 1
28894: PPUSH
28895: LD_VAR 0 2
28899: PPUSH
28900: LD_VAR 0 3
28904: PPUSH
28905: LD_VAR 0 4
28909: PPUSH
28910: LD_VAR 0 5
28914: PPUSH
28915: CALL_OW 448
28919: IFFALSE 28952
// result := [ chassis , engine , control , weapon ] ;
28921: LD_ADDR_VAR 0 6
28925: PUSH
28926: LD_VAR 0 2
28930: PUSH
28931: LD_VAR 0 3
28935: PUSH
28936: LD_VAR 0 4
28940: PUSH
28941: LD_VAR 0 5
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: ST_TO_ADDR
// end ;
28952: LD_VAR 0 6
28956: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28957: LD_INT 0
28959: PPUSH
// if not chassis or not engine then
28960: LD_VAR 0 1
28964: NOT
28965: PUSH
28966: LD_VAR 0 2
28970: NOT
28971: OR
28972: IFFALSE 28976
// exit ;
28974: GO 29172
// case engine of engine_solar :
28976: LD_VAR 0 2
28980: PUSH
28981: LD_INT 2
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29027
28989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28990: LD_ADDR_VAR 0 3
28994: PUSH
28995: LD_INT 11
28997: PUSH
28998: LD_INT 12
29000: PUSH
29001: LD_INT 13
29003: PUSH
29004: LD_INT 14
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
29025: GO 29156
29027: LD_INT 1
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29097
29035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: LD_INT 11
29043: PUSH
29044: LD_INT 12
29046: PUSH
29047: LD_INT 13
29049: PUSH
29050: LD_INT 14
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 4
29064: PUSH
29065: LD_INT 5
29067: PUSH
29068: LD_INT 21
29070: PUSH
29071: LD_INT 23
29073: PUSH
29074: LD_INT 22
29076: PUSH
29077: LD_INT 24
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: ST_TO_ADDR
29095: GO 29156
29097: LD_INT 3
29099: DOUBLE
29100: EQUAL
29101: IFTRUE 29105
29103: GO 29155
29105: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29106: LD_ADDR_VAR 0 3
29110: PUSH
29111: LD_INT 13
29113: PUSH
29114: LD_INT 14
29116: PUSH
29117: LD_INT 2
29119: PUSH
29120: LD_INT 3
29122: PUSH
29123: LD_INT 4
29125: PUSH
29126: LD_INT 5
29128: PUSH
29129: LD_INT 21
29131: PUSH
29132: LD_INT 22
29134: PUSH
29135: LD_INT 23
29137: PUSH
29138: LD_INT 24
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
29153: GO 29156
29155: POP
// result := ( chassis in result ) ;
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_VAR 0 1
29165: PUSH
29166: LD_VAR 0 3
29170: IN
29171: ST_TO_ADDR
// end ;
29172: LD_VAR 0 3
29176: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29177: LD_INT 0
29179: PPUSH
// if not chassis or not weapon then
29180: LD_VAR 0 1
29184: NOT
29185: PUSH
29186: LD_VAR 0 2
29190: NOT
29191: OR
29192: IFFALSE 29196
// exit ;
29194: GO 30258
// case weapon of us_machine_gun :
29196: LD_VAR 0 2
29200: PUSH
29201: LD_INT 2
29203: DOUBLE
29204: EQUAL
29205: IFTRUE 29209
29207: GO 29239
29209: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29210: LD_ADDR_VAR 0 3
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 3
29223: PUSH
29224: LD_INT 4
29226: PUSH
29227: LD_INT 5
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
29237: GO 30242
29239: LD_INT 3
29241: DOUBLE
29242: EQUAL
29243: IFTRUE 29247
29245: GO 29277
29247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 4
29264: PUSH
29265: LD_INT 5
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: ST_TO_ADDR
29275: GO 30242
29277: LD_INT 11
29279: DOUBLE
29280: EQUAL
29281: IFTRUE 29285
29283: GO 29315
29285: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 5
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
29313: GO 30242
29315: LD_INT 4
29317: DOUBLE
29318: EQUAL
29319: IFTRUE 29323
29321: GO 29349
29323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29324: LD_ADDR_VAR 0 3
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 3
29334: PUSH
29335: LD_INT 4
29337: PUSH
29338: LD_INT 5
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: ST_TO_ADDR
29347: GO 30242
29349: LD_INT 5
29351: DOUBLE
29352: EQUAL
29353: IFTRUE 29357
29355: GO 29383
29357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 4
29371: PUSH
29372: LD_INT 5
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
29381: GO 30242
29383: LD_INT 9
29385: DOUBLE
29386: EQUAL
29387: IFTRUE 29391
29389: GO 29417
29391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: LD_INT 4
29405: PUSH
29406: LD_INT 5
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
29415: GO 30242
29417: LD_INT 7
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29425
29423: GO 29451
29425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: LD_INT 4
29439: PUSH
29440: LD_INT 5
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
29449: GO 30242
29451: LD_INT 12
29453: DOUBLE
29454: EQUAL
29455: IFTRUE 29459
29457: GO 29485
29459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: LD_INT 4
29473: PUSH
29474: LD_INT 5
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
29483: GO 30242
29485: LD_INT 13
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29519
29493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 4
29507: PUSH
29508: LD_INT 5
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
29517: GO 30242
29519: LD_INT 14
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29545
29527: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29528: LD_ADDR_VAR 0 3
29532: PUSH
29533: LD_INT 4
29535: PUSH
29536: LD_INT 5
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: ST_TO_ADDR
29543: GO 30242
29545: LD_INT 6
29547: DOUBLE
29548: EQUAL
29549: IFTRUE 29553
29551: GO 29571
29553: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29554: LD_ADDR_VAR 0 3
29558: PUSH
29559: LD_INT 4
29561: PUSH
29562: LD_INT 5
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: ST_TO_ADDR
29569: GO 30242
29571: LD_INT 10
29573: DOUBLE
29574: EQUAL
29575: IFTRUE 29579
29577: GO 29597
29579: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 4
29587: PUSH
29588: LD_INT 5
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: ST_TO_ADDR
29595: GO 30242
29597: LD_INT 22
29599: DOUBLE
29600: EQUAL
29601: IFTRUE 29605
29603: GO 29631
29605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29606: LD_ADDR_VAR 0 3
29610: PUSH
29611: LD_INT 11
29613: PUSH
29614: LD_INT 12
29616: PUSH
29617: LD_INT 13
29619: PUSH
29620: LD_INT 14
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
29629: GO 30242
29631: LD_INT 23
29633: DOUBLE
29634: EQUAL
29635: IFTRUE 29639
29637: GO 29665
29639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29640: LD_ADDR_VAR 0 3
29644: PUSH
29645: LD_INT 11
29647: PUSH
29648: LD_INT 12
29650: PUSH
29651: LD_INT 13
29653: PUSH
29654: LD_INT 14
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: ST_TO_ADDR
29663: GO 30242
29665: LD_INT 24
29667: DOUBLE
29668: EQUAL
29669: IFTRUE 29673
29671: GO 29699
29673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29674: LD_ADDR_VAR 0 3
29678: PUSH
29679: LD_INT 11
29681: PUSH
29682: LD_INT 12
29684: PUSH
29685: LD_INT 13
29687: PUSH
29688: LD_INT 14
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
29697: GO 30242
29699: LD_INT 30
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29733
29707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: LD_INT 11
29715: PUSH
29716: LD_INT 12
29718: PUSH
29719: LD_INT 13
29721: PUSH
29722: LD_INT 14
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
29731: GO 30242
29733: LD_INT 25
29735: DOUBLE
29736: EQUAL
29737: IFTRUE 29741
29739: GO 29759
29741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 13
29749: PUSH
29750: LD_INT 14
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: ST_TO_ADDR
29757: GO 30242
29759: LD_INT 27
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29785
29767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29768: LD_ADDR_VAR 0 3
29772: PUSH
29773: LD_INT 13
29775: PUSH
29776: LD_INT 14
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: ST_TO_ADDR
29783: GO 30242
29785: LD_EXP 34
29789: DOUBLE
29790: EQUAL
29791: IFTRUE 29795
29793: GO 29821
29795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29796: LD_ADDR_VAR 0 3
29800: PUSH
29801: LD_INT 11
29803: PUSH
29804: LD_INT 12
29806: PUSH
29807: LD_INT 13
29809: PUSH
29810: LD_INT 14
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: ST_TO_ADDR
29819: GO 30242
29821: LD_INT 28
29823: DOUBLE
29824: EQUAL
29825: IFTRUE 29829
29827: GO 29847
29829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29830: LD_ADDR_VAR 0 3
29834: PUSH
29835: LD_INT 13
29837: PUSH
29838: LD_INT 14
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: ST_TO_ADDR
29845: GO 30242
29847: LD_INT 29
29849: DOUBLE
29850: EQUAL
29851: IFTRUE 29855
29853: GO 29873
29855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29856: LD_ADDR_VAR 0 3
29860: PUSH
29861: LD_INT 13
29863: PUSH
29864: LD_INT 14
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: ST_TO_ADDR
29871: GO 30242
29873: LD_INT 31
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 29899
29881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29882: LD_ADDR_VAR 0 3
29886: PUSH
29887: LD_INT 13
29889: PUSH
29890: LD_INT 14
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: ST_TO_ADDR
29897: GO 30242
29899: LD_INT 26
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29925
29907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29908: LD_ADDR_VAR 0 3
29912: PUSH
29913: LD_INT 13
29915: PUSH
29916: LD_INT 14
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: ST_TO_ADDR
29923: GO 30242
29925: LD_INT 42
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29959
29933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29934: LD_ADDR_VAR 0 3
29938: PUSH
29939: LD_INT 21
29941: PUSH
29942: LD_INT 22
29944: PUSH
29945: LD_INT 23
29947: PUSH
29948: LD_INT 24
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
29957: GO 30242
29959: LD_INT 43
29961: DOUBLE
29962: EQUAL
29963: IFTRUE 29967
29965: GO 29993
29967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_INT 21
29975: PUSH
29976: LD_INT 22
29978: PUSH
29979: LD_INT 23
29981: PUSH
29982: LD_INT 24
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
29991: GO 30242
29993: LD_INT 44
29995: DOUBLE
29996: EQUAL
29997: IFTRUE 30001
29999: GO 30027
30001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: LD_INT 21
30009: PUSH
30010: LD_INT 22
30012: PUSH
30013: LD_INT 23
30015: PUSH
30016: LD_INT 24
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: ST_TO_ADDR
30025: GO 30242
30027: LD_INT 45
30029: DOUBLE
30030: EQUAL
30031: IFTRUE 30035
30033: GO 30061
30035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30036: LD_ADDR_VAR 0 3
30040: PUSH
30041: LD_INT 21
30043: PUSH
30044: LD_INT 22
30046: PUSH
30047: LD_INT 23
30049: PUSH
30050: LD_INT 24
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
30059: GO 30242
30061: LD_INT 49
30063: DOUBLE
30064: EQUAL
30065: IFTRUE 30069
30067: GO 30095
30069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30070: LD_ADDR_VAR 0 3
30074: PUSH
30075: LD_INT 21
30077: PUSH
30078: LD_INT 22
30080: PUSH
30081: LD_INT 23
30083: PUSH
30084: LD_INT 24
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
30093: GO 30242
30095: LD_INT 51
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30129
30103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30104: LD_ADDR_VAR 0 3
30108: PUSH
30109: LD_INT 21
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_INT 23
30117: PUSH
30118: LD_INT 24
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
30127: GO 30242
30129: LD_INT 52
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30137
30135: GO 30163
30137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: LD_INT 21
30145: PUSH
30146: LD_INT 22
30148: PUSH
30149: LD_INT 23
30151: PUSH
30152: LD_INT 24
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
30161: GO 30242
30163: LD_INT 53
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30189
30171: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 23
30179: PUSH
30180: LD_INT 24
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: ST_TO_ADDR
30187: GO 30242
30189: LD_INT 46
30191: DOUBLE
30192: EQUAL
30193: IFTRUE 30197
30195: GO 30215
30197: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30198: LD_ADDR_VAR 0 3
30202: PUSH
30203: LD_INT 23
30205: PUSH
30206: LD_INT 24
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: ST_TO_ADDR
30213: GO 30242
30215: LD_INT 47
30217: DOUBLE
30218: EQUAL
30219: IFTRUE 30223
30221: GO 30241
30223: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30224: LD_ADDR_VAR 0 3
30228: PUSH
30229: LD_INT 23
30231: PUSH
30232: LD_INT 24
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: ST_TO_ADDR
30239: GO 30242
30241: POP
// result := ( chassis in result ) ;
30242: LD_ADDR_VAR 0 3
30246: PUSH
30247: LD_VAR 0 1
30251: PUSH
30252: LD_VAR 0 3
30256: IN
30257: ST_TO_ADDR
// end ;
30258: LD_VAR 0 3
30262: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30263: LD_INT 0
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
// result := array ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 1
30281: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30282: LD_VAR 0 1
30286: NOT
30287: PUSH
30288: LD_VAR 0 2
30292: NOT
30293: OR
30294: PUSH
30295: LD_VAR 0 3
30299: NOT
30300: OR
30301: PUSH
30302: LD_VAR 0 2
30306: PUSH
30307: LD_VAR 0 1
30311: GREATER
30312: OR
30313: PUSH
30314: LD_VAR 0 3
30318: PUSH
30319: LD_VAR 0 1
30323: GREATER
30324: OR
30325: IFFALSE 30329
// exit ;
30327: GO 30625
// if direction then
30329: LD_VAR 0 4
30333: IFFALSE 30397
// begin d := 1 ;
30335: LD_ADDR_VAR 0 9
30339: PUSH
30340: LD_INT 1
30342: ST_TO_ADDR
// if i_from > i_to then
30343: LD_VAR 0 2
30347: PUSH
30348: LD_VAR 0 3
30352: GREATER
30353: IFFALSE 30379
// length := ( array - i_from ) + i_to else
30355: LD_ADDR_VAR 0 11
30359: PUSH
30360: LD_VAR 0 1
30364: PUSH
30365: LD_VAR 0 2
30369: MINUS
30370: PUSH
30371: LD_VAR 0 3
30375: PLUS
30376: ST_TO_ADDR
30377: GO 30395
// length := i_to - i_from ;
30379: LD_ADDR_VAR 0 11
30383: PUSH
30384: LD_VAR 0 3
30388: PUSH
30389: LD_VAR 0 2
30393: MINUS
30394: ST_TO_ADDR
// end else
30395: GO 30458
// begin d := - 1 ;
30397: LD_ADDR_VAR 0 9
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: ST_TO_ADDR
// if i_from > i_to then
30406: LD_VAR 0 2
30410: PUSH
30411: LD_VAR 0 3
30415: GREATER
30416: IFFALSE 30436
// length := i_from - i_to else
30418: LD_ADDR_VAR 0 11
30422: PUSH
30423: LD_VAR 0 2
30427: PUSH
30428: LD_VAR 0 3
30432: MINUS
30433: ST_TO_ADDR
30434: GO 30458
// length := ( array - i_to ) + i_from ;
30436: LD_ADDR_VAR 0 11
30440: PUSH
30441: LD_VAR 0 1
30445: PUSH
30446: LD_VAR 0 3
30450: MINUS
30451: PUSH
30452: LD_VAR 0 2
30456: PLUS
30457: ST_TO_ADDR
// end ; if not length then
30458: LD_VAR 0 11
30462: NOT
30463: IFFALSE 30467
// exit ;
30465: GO 30625
// tmp := array ;
30467: LD_ADDR_VAR 0 10
30471: PUSH
30472: LD_VAR 0 1
30476: ST_TO_ADDR
// for i = 1 to length do
30477: LD_ADDR_VAR 0 6
30481: PUSH
30482: DOUBLE
30483: LD_INT 1
30485: DEC
30486: ST_TO_ADDR
30487: LD_VAR 0 11
30491: PUSH
30492: FOR_TO
30493: IFFALSE 30613
// begin for j = 1 to array do
30495: LD_ADDR_VAR 0 7
30499: PUSH
30500: DOUBLE
30501: LD_INT 1
30503: DEC
30504: ST_TO_ADDR
30505: LD_VAR 0 1
30509: PUSH
30510: FOR_TO
30511: IFFALSE 30599
// begin k := j + d ;
30513: LD_ADDR_VAR 0 8
30517: PUSH
30518: LD_VAR 0 7
30522: PUSH
30523: LD_VAR 0 9
30527: PLUS
30528: ST_TO_ADDR
// if k > array then
30529: LD_VAR 0 8
30533: PUSH
30534: LD_VAR 0 1
30538: GREATER
30539: IFFALSE 30549
// k := 1 ;
30541: LD_ADDR_VAR 0 8
30545: PUSH
30546: LD_INT 1
30548: ST_TO_ADDR
// if not k then
30549: LD_VAR 0 8
30553: NOT
30554: IFFALSE 30566
// k := array ;
30556: LD_ADDR_VAR 0 8
30560: PUSH
30561: LD_VAR 0 1
30565: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30566: LD_ADDR_VAR 0 10
30570: PUSH
30571: LD_VAR 0 10
30575: PPUSH
30576: LD_VAR 0 8
30580: PPUSH
30581: LD_VAR 0 1
30585: PUSH
30586: LD_VAR 0 7
30590: ARRAY
30591: PPUSH
30592: CALL_OW 1
30596: ST_TO_ADDR
// end ;
30597: GO 30510
30599: POP
30600: POP
// array := tmp ;
30601: LD_ADDR_VAR 0 1
30605: PUSH
30606: LD_VAR 0 10
30610: ST_TO_ADDR
// end ;
30611: GO 30492
30613: POP
30614: POP
// result := array ;
30615: LD_ADDR_VAR 0 5
30619: PUSH
30620: LD_VAR 0 1
30624: ST_TO_ADDR
// end ;
30625: LD_VAR 0 5
30629: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30630: LD_INT 0
30632: PPUSH
30633: PPUSH
// result := 0 ;
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_INT 0
30641: ST_TO_ADDR
// if not array or not value in array then
30642: LD_VAR 0 1
30646: NOT
30647: PUSH
30648: LD_VAR 0 2
30652: PUSH
30653: LD_VAR 0 1
30657: IN
30658: NOT
30659: OR
30660: IFFALSE 30664
// exit ;
30662: GO 30718
// for i = 1 to array do
30664: LD_ADDR_VAR 0 4
30668: PUSH
30669: DOUBLE
30670: LD_INT 1
30672: DEC
30673: ST_TO_ADDR
30674: LD_VAR 0 1
30678: PUSH
30679: FOR_TO
30680: IFFALSE 30716
// if value = array [ i ] then
30682: LD_VAR 0 2
30686: PUSH
30687: LD_VAR 0 1
30691: PUSH
30692: LD_VAR 0 4
30696: ARRAY
30697: EQUAL
30698: IFFALSE 30714
// begin result := i ;
30700: LD_ADDR_VAR 0 3
30704: PUSH
30705: LD_VAR 0 4
30709: ST_TO_ADDR
// exit ;
30710: POP
30711: POP
30712: GO 30718
// end ;
30714: GO 30679
30716: POP
30717: POP
// end ;
30718: LD_VAR 0 3
30722: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30723: LD_INT 0
30725: PPUSH
// vc_chassis := chassis ;
30726: LD_ADDR_OWVAR 37
30730: PUSH
30731: LD_VAR 0 1
30735: ST_TO_ADDR
// vc_engine := engine ;
30736: LD_ADDR_OWVAR 39
30740: PUSH
30741: LD_VAR 0 2
30745: ST_TO_ADDR
// vc_control := control ;
30746: LD_ADDR_OWVAR 38
30750: PUSH
30751: LD_VAR 0 3
30755: ST_TO_ADDR
// vc_weapon := weapon ;
30756: LD_ADDR_OWVAR 40
30760: PUSH
30761: LD_VAR 0 4
30765: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30766: LD_ADDR_OWVAR 41
30770: PUSH
30771: LD_VAR 0 5
30775: ST_TO_ADDR
// end ;
30776: LD_VAR 0 6
30780: RET
// export function WantPlant ( unit ) ; var task ; begin
30781: LD_INT 0
30783: PPUSH
30784: PPUSH
// result := false ;
30785: LD_ADDR_VAR 0 2
30789: PUSH
30790: LD_INT 0
30792: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30793: LD_ADDR_VAR 0 3
30797: PUSH
30798: LD_VAR 0 1
30802: PPUSH
30803: CALL_OW 437
30807: ST_TO_ADDR
// if task then
30808: LD_VAR 0 3
30812: IFFALSE 30840
// if task [ 1 ] [ 1 ] = p then
30814: LD_VAR 0 3
30818: PUSH
30819: LD_INT 1
30821: ARRAY
30822: PUSH
30823: LD_INT 1
30825: ARRAY
30826: PUSH
30827: LD_STRING p
30829: EQUAL
30830: IFFALSE 30840
// result := true ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_INT 1
30839: ST_TO_ADDR
// end ;
30840: LD_VAR 0 2
30844: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30845: LD_INT 0
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
// if pos < 1 then
30851: LD_VAR 0 2
30855: PUSH
30856: LD_INT 1
30858: LESS
30859: IFFALSE 30863
// exit ;
30861: GO 31166
// if pos = 1 then
30863: LD_VAR 0 2
30867: PUSH
30868: LD_INT 1
30870: EQUAL
30871: IFFALSE 30904
// result := Replace ( arr , pos [ 1 ] , value ) else
30873: LD_ADDR_VAR 0 4
30877: PUSH
30878: LD_VAR 0 1
30882: PPUSH
30883: LD_VAR 0 2
30887: PUSH
30888: LD_INT 1
30890: ARRAY
30891: PPUSH
30892: LD_VAR 0 3
30896: PPUSH
30897: CALL_OW 1
30901: ST_TO_ADDR
30902: GO 31166
// begin tmp := arr ;
30904: LD_ADDR_VAR 0 6
30908: PUSH
30909: LD_VAR 0 1
30913: ST_TO_ADDR
// s_arr := [ tmp ] ;
30914: LD_ADDR_VAR 0 7
30918: PUSH
30919: LD_VAR 0 6
30923: PUSH
30924: EMPTY
30925: LIST
30926: ST_TO_ADDR
// for i = 1 to pos - 1 do
30927: LD_ADDR_VAR 0 5
30931: PUSH
30932: DOUBLE
30933: LD_INT 1
30935: DEC
30936: ST_TO_ADDR
30937: LD_VAR 0 2
30941: PUSH
30942: LD_INT 1
30944: MINUS
30945: PUSH
30946: FOR_TO
30947: IFFALSE 30992
// begin tmp := tmp [ pos [ i ] ] ;
30949: LD_ADDR_VAR 0 6
30953: PUSH
30954: LD_VAR 0 6
30958: PUSH
30959: LD_VAR 0 2
30963: PUSH
30964: LD_VAR 0 5
30968: ARRAY
30969: ARRAY
30970: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30971: LD_ADDR_VAR 0 7
30975: PUSH
30976: LD_VAR 0 7
30980: PUSH
30981: LD_VAR 0 6
30985: PUSH
30986: EMPTY
30987: LIST
30988: ADD
30989: ST_TO_ADDR
// end ;
30990: GO 30946
30992: POP
30993: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30994: LD_ADDR_VAR 0 6
30998: PUSH
30999: LD_VAR 0 6
31003: PPUSH
31004: LD_VAR 0 2
31008: PUSH
31009: LD_VAR 0 2
31013: ARRAY
31014: PPUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: CALL_OW 1
31024: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31025: LD_ADDR_VAR 0 7
31029: PUSH
31030: LD_VAR 0 7
31034: PPUSH
31035: LD_VAR 0 7
31039: PPUSH
31040: LD_VAR 0 6
31044: PPUSH
31045: CALL_OW 1
31049: ST_TO_ADDR
// for i = s_arr downto 2 do
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: DOUBLE
31056: LD_VAR 0 7
31060: INC
31061: ST_TO_ADDR
31062: LD_INT 2
31064: PUSH
31065: FOR_DOWNTO
31066: IFFALSE 31150
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31068: LD_ADDR_VAR 0 6
31072: PUSH
31073: LD_VAR 0 7
31077: PUSH
31078: LD_VAR 0 5
31082: PUSH
31083: LD_INT 1
31085: MINUS
31086: ARRAY
31087: PPUSH
31088: LD_VAR 0 2
31092: PUSH
31093: LD_VAR 0 5
31097: PUSH
31098: LD_INT 1
31100: MINUS
31101: ARRAY
31102: PPUSH
31103: LD_VAR 0 7
31107: PUSH
31108: LD_VAR 0 5
31112: ARRAY
31113: PPUSH
31114: CALL_OW 1
31118: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31119: LD_ADDR_VAR 0 7
31123: PUSH
31124: LD_VAR 0 7
31128: PPUSH
31129: LD_VAR 0 5
31133: PUSH
31134: LD_INT 1
31136: MINUS
31137: PPUSH
31138: LD_VAR 0 6
31142: PPUSH
31143: CALL_OW 1
31147: ST_TO_ADDR
// end ;
31148: GO 31065
31150: POP
31151: POP
// result := s_arr [ 1 ] ;
31152: LD_ADDR_VAR 0 4
31156: PUSH
31157: LD_VAR 0 7
31161: PUSH
31162: LD_INT 1
31164: ARRAY
31165: ST_TO_ADDR
// end ; end ;
31166: LD_VAR 0 4
31170: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31171: LD_INT 0
31173: PPUSH
31174: PPUSH
// if not list then
31175: LD_VAR 0 1
31179: NOT
31180: IFFALSE 31184
// exit ;
31182: GO 31275
// i := list [ pos1 ] ;
31184: LD_ADDR_VAR 0 5
31188: PUSH
31189: LD_VAR 0 1
31193: PUSH
31194: LD_VAR 0 2
31198: ARRAY
31199: ST_TO_ADDR
// if not i then
31200: LD_VAR 0 5
31204: NOT
31205: IFFALSE 31209
// exit ;
31207: GO 31275
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31209: LD_ADDR_VAR 0 1
31213: PUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: LD_VAR 0 2
31223: PPUSH
31224: LD_VAR 0 1
31228: PUSH
31229: LD_VAR 0 3
31233: ARRAY
31234: PPUSH
31235: CALL_OW 1
31239: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31240: LD_ADDR_VAR 0 1
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: LD_VAR 0 3
31254: PPUSH
31255: LD_VAR 0 5
31259: PPUSH
31260: CALL_OW 1
31264: ST_TO_ADDR
// result := list ;
31265: LD_ADDR_VAR 0 4
31269: PUSH
31270: LD_VAR 0 1
31274: ST_TO_ADDR
// end ;
31275: LD_VAR 0 4
31279: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31280: LD_INT 0
31282: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31283: LD_ADDR_VAR 0 5
31287: PUSH
31288: LD_VAR 0 1
31292: PPUSH
31293: CALL_OW 250
31297: PPUSH
31298: LD_VAR 0 1
31302: PPUSH
31303: CALL_OW 251
31307: PPUSH
31308: LD_VAR 0 2
31312: PPUSH
31313: LD_VAR 0 3
31317: PPUSH
31318: LD_VAR 0 4
31322: PPUSH
31323: CALL 31333 0 5
31327: ST_TO_ADDR
// end ;
31328: LD_VAR 0 5
31332: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31333: LD_INT 0
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
// if not list then
31339: LD_VAR 0 3
31343: NOT
31344: IFFALSE 31348
// exit ;
31346: GO 31736
// result := [ ] ;
31348: LD_ADDR_VAR 0 6
31352: PUSH
31353: EMPTY
31354: ST_TO_ADDR
// for i in list do
31355: LD_ADDR_VAR 0 7
31359: PUSH
31360: LD_VAR 0 3
31364: PUSH
31365: FOR_IN
31366: IFFALSE 31568
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31368: LD_ADDR_VAR 0 9
31372: PUSH
31373: LD_VAR 0 7
31377: PPUSH
31378: LD_VAR 0 1
31382: PPUSH
31383: LD_VAR 0 2
31387: PPUSH
31388: CALL_OW 297
31392: ST_TO_ADDR
// if not result then
31393: LD_VAR 0 6
31397: NOT
31398: IFFALSE 31424
// result := [ [ i , tmp ] ] else
31400: LD_ADDR_VAR 0 6
31404: PUSH
31405: LD_VAR 0 7
31409: PUSH
31410: LD_VAR 0 9
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: EMPTY
31420: LIST
31421: ST_TO_ADDR
31422: GO 31566
// begin if result [ result ] [ 2 ] < tmp then
31424: LD_VAR 0 6
31428: PUSH
31429: LD_VAR 0 6
31433: ARRAY
31434: PUSH
31435: LD_INT 2
31437: ARRAY
31438: PUSH
31439: LD_VAR 0 9
31443: LESS
31444: IFFALSE 31486
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31446: LD_ADDR_VAR 0 6
31450: PUSH
31451: LD_VAR 0 6
31455: PPUSH
31456: LD_VAR 0 6
31460: PUSH
31461: LD_INT 1
31463: PLUS
31464: PPUSH
31465: LD_VAR 0 7
31469: PUSH
31470: LD_VAR 0 9
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PPUSH
31479: CALL_OW 2
31483: ST_TO_ADDR
31484: GO 31566
// for j = 1 to result do
31486: LD_ADDR_VAR 0 8
31490: PUSH
31491: DOUBLE
31492: LD_INT 1
31494: DEC
31495: ST_TO_ADDR
31496: LD_VAR 0 6
31500: PUSH
31501: FOR_TO
31502: IFFALSE 31564
// begin if tmp < result [ j ] [ 2 ] then
31504: LD_VAR 0 9
31508: PUSH
31509: LD_VAR 0 6
31513: PUSH
31514: LD_VAR 0 8
31518: ARRAY
31519: PUSH
31520: LD_INT 2
31522: ARRAY
31523: LESS
31524: IFFALSE 31562
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31526: LD_ADDR_VAR 0 6
31530: PUSH
31531: LD_VAR 0 6
31535: PPUSH
31536: LD_VAR 0 8
31540: PPUSH
31541: LD_VAR 0 7
31545: PUSH
31546: LD_VAR 0 9
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PPUSH
31555: CALL_OW 2
31559: ST_TO_ADDR
// break ;
31560: GO 31564
// end ; end ;
31562: GO 31501
31564: POP
31565: POP
// end ; end ;
31566: GO 31365
31568: POP
31569: POP
// if result and not asc then
31570: LD_VAR 0 6
31574: PUSH
31575: LD_VAR 0 4
31579: NOT
31580: AND
31581: IFFALSE 31656
// begin tmp := result ;
31583: LD_ADDR_VAR 0 9
31587: PUSH
31588: LD_VAR 0 6
31592: ST_TO_ADDR
// for i = tmp downto 1 do
31593: LD_ADDR_VAR 0 7
31597: PUSH
31598: DOUBLE
31599: LD_VAR 0 9
31603: INC
31604: ST_TO_ADDR
31605: LD_INT 1
31607: PUSH
31608: FOR_DOWNTO
31609: IFFALSE 31654
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31611: LD_ADDR_VAR 0 6
31615: PUSH
31616: LD_VAR 0 6
31620: PPUSH
31621: LD_VAR 0 9
31625: PUSH
31626: LD_VAR 0 7
31630: MINUS
31631: PUSH
31632: LD_INT 1
31634: PLUS
31635: PPUSH
31636: LD_VAR 0 9
31640: PUSH
31641: LD_VAR 0 7
31645: ARRAY
31646: PPUSH
31647: CALL_OW 1
31651: ST_TO_ADDR
31652: GO 31608
31654: POP
31655: POP
// end ; tmp := [ ] ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: EMPTY
31662: ST_TO_ADDR
// if mode then
31663: LD_VAR 0 5
31667: IFFALSE 31736
// begin for i = 1 to result do
31669: LD_ADDR_VAR 0 7
31673: PUSH
31674: DOUBLE
31675: LD_INT 1
31677: DEC
31678: ST_TO_ADDR
31679: LD_VAR 0 6
31683: PUSH
31684: FOR_TO
31685: IFFALSE 31724
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31687: LD_ADDR_VAR 0 9
31691: PUSH
31692: LD_VAR 0 9
31696: PPUSH
31697: LD_VAR 0 7
31701: PPUSH
31702: LD_VAR 0 6
31706: PUSH
31707: LD_VAR 0 7
31711: ARRAY
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: CALL_OW 1
31721: ST_TO_ADDR
31722: GO 31684
31724: POP
31725: POP
// result := tmp ;
31726: LD_ADDR_VAR 0 6
31730: PUSH
31731: LD_VAR 0 9
31735: ST_TO_ADDR
// end ; end ;
31736: LD_VAR 0 6
31740: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31749: LD_ADDR_VAR 0 5
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// if not x or not y then
31771: LD_VAR 0 2
31775: NOT
31776: PUSH
31777: LD_VAR 0 3
31781: NOT
31782: OR
31783: IFFALSE 31787
// exit ;
31785: GO 33439
// if not range then
31787: LD_VAR 0 4
31791: NOT
31792: IFFALSE 31802
// range := 10 ;
31794: LD_ADDR_VAR 0 4
31798: PUSH
31799: LD_INT 10
31801: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31802: LD_ADDR_VAR 0 8
31806: PUSH
31807: LD_INT 81
31809: PUSH
31810: LD_VAR 0 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 92
31821: PUSH
31822: LD_VAR 0 2
31826: PUSH
31827: LD_VAR 0 3
31831: PUSH
31832: LD_VAR 0 4
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 21
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PPUSH
31865: CALL_OW 69
31869: ST_TO_ADDR
// if not tmp then
31870: LD_VAR 0 8
31874: NOT
31875: IFFALSE 31879
// exit ;
31877: GO 33439
// for i in tmp do
31879: LD_ADDR_VAR 0 6
31883: PUSH
31884: LD_VAR 0 8
31888: PUSH
31889: FOR_IN
31890: IFFALSE 33414
// begin points := [ 0 , 0 , 0 ] ;
31892: LD_ADDR_VAR 0 9
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: ST_TO_ADDR
// bpoints := 1 ;
31911: LD_ADDR_VAR 0 10
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31919: LD_VAR 0 6
31923: PPUSH
31924: CALL_OW 247
31928: PUSH
31929: LD_INT 1
31931: DOUBLE
31932: EQUAL
31933: IFTRUE 31937
31935: GO 32515
31937: POP
// begin if GetClass ( i ) = 1 then
31938: LD_VAR 0 6
31942: PPUSH
31943: CALL_OW 257
31947: PUSH
31948: LD_INT 1
31950: EQUAL
31951: IFFALSE 31972
// points := [ 10 , 5 , 3 ] ;
31953: LD_ADDR_VAR 0 9
31957: PUSH
31958: LD_INT 10
31960: PUSH
31961: LD_INT 5
31963: PUSH
31964: LD_INT 3
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 257
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 4
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: IN
31996: IFFALSE 32017
// points := [ 3 , 2 , 1 ] ;
31998: LD_ADDR_VAR 0 9
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32017: LD_VAR 0 6
32021: PPUSH
32022: CALL_OW 257
32026: PUSH
32027: LD_INT 5
32029: EQUAL
32030: IFFALSE 32051
// points := [ 130 , 5 , 2 ] ;
32032: LD_ADDR_VAR 0 9
32036: PUSH
32037: LD_INT 130
32039: PUSH
32040: LD_INT 5
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32051: LD_VAR 0 6
32055: PPUSH
32056: CALL_OW 257
32060: PUSH
32061: LD_INT 8
32063: EQUAL
32064: IFFALSE 32085
// points := [ 35 , 35 , 30 ] ;
32066: LD_ADDR_VAR 0 9
32070: PUSH
32071: LD_INT 35
32073: PUSH
32074: LD_INT 35
32076: PUSH
32077: LD_INT 30
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32085: LD_VAR 0 6
32089: PPUSH
32090: CALL_OW 257
32094: PUSH
32095: LD_INT 9
32097: EQUAL
32098: IFFALSE 32119
// points := [ 20 , 55 , 40 ] ;
32100: LD_ADDR_VAR 0 9
32104: PUSH
32105: LD_INT 20
32107: PUSH
32108: LD_INT 55
32110: PUSH
32111: LD_INT 40
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32119: LD_VAR 0 6
32123: PPUSH
32124: CALL_OW 257
32128: PUSH
32129: LD_INT 12
32131: PUSH
32132: LD_INT 16
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: IN
32139: IFFALSE 32160
// points := [ 5 , 3 , 2 ] ;
32141: LD_ADDR_VAR 0 9
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32160: LD_VAR 0 6
32164: PPUSH
32165: CALL_OW 257
32169: PUSH
32170: LD_INT 17
32172: EQUAL
32173: IFFALSE 32194
// points := [ 100 , 50 , 75 ] ;
32175: LD_ADDR_VAR 0 9
32179: PUSH
32180: LD_INT 100
32182: PUSH
32183: LD_INT 50
32185: PUSH
32186: LD_INT 75
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32194: LD_VAR 0 6
32198: PPUSH
32199: CALL_OW 257
32203: PUSH
32204: LD_INT 15
32206: EQUAL
32207: IFFALSE 32228
// points := [ 10 , 5 , 3 ] ;
32209: LD_ADDR_VAR 0 9
32213: PUSH
32214: LD_INT 10
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32228: LD_VAR 0 6
32232: PPUSH
32233: CALL_OW 257
32237: PUSH
32238: LD_INT 14
32240: EQUAL
32241: IFFALSE 32262
// points := [ 10 , 0 , 0 ] ;
32243: LD_ADDR_VAR 0 9
32247: PUSH
32248: LD_INT 10
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32262: LD_VAR 0 6
32266: PPUSH
32267: CALL_OW 257
32271: PUSH
32272: LD_INT 11
32274: EQUAL
32275: IFFALSE 32296
// points := [ 30 , 10 , 5 ] ;
32277: LD_ADDR_VAR 0 9
32281: PUSH
32282: LD_INT 30
32284: PUSH
32285: LD_INT 10
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32296: LD_VAR 0 1
32300: PPUSH
32301: LD_INT 5
32303: PPUSH
32304: CALL_OW 321
32308: PUSH
32309: LD_INT 2
32311: EQUAL
32312: IFFALSE 32329
// bpoints := bpoints * 1.8 ;
32314: LD_ADDR_VAR 0 10
32318: PUSH
32319: LD_VAR 0 10
32323: PUSH
32324: LD_REAL  1.80000000000000E+0000
32327: MUL
32328: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32329: LD_VAR 0 6
32333: PPUSH
32334: CALL_OW 257
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: IN
32357: PUSH
32358: LD_VAR 0 1
32362: PPUSH
32363: LD_INT 51
32365: PPUSH
32366: CALL_OW 321
32370: PUSH
32371: LD_INT 2
32373: EQUAL
32374: AND
32375: IFFALSE 32392
// bpoints := bpoints * 1.2 ;
32377: LD_ADDR_VAR 0 10
32381: PUSH
32382: LD_VAR 0 10
32386: PUSH
32387: LD_REAL  1.20000000000000E+0000
32390: MUL
32391: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32392: LD_VAR 0 6
32396: PPUSH
32397: CALL_OW 257
32401: PUSH
32402: LD_INT 5
32404: PUSH
32405: LD_INT 7
32407: PUSH
32408: LD_INT 9
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: IN
32416: PUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_INT 52
32424: PPUSH
32425: CALL_OW 321
32429: PUSH
32430: LD_INT 2
32432: EQUAL
32433: AND
32434: IFFALSE 32451
// bpoints := bpoints * 1.5 ;
32436: LD_ADDR_VAR 0 10
32440: PUSH
32441: LD_VAR 0 10
32445: PUSH
32446: LD_REAL  1.50000000000000E+0000
32449: MUL
32450: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32451: LD_VAR 0 1
32455: PPUSH
32456: LD_INT 66
32458: PPUSH
32459: CALL_OW 321
32463: PUSH
32464: LD_INT 2
32466: EQUAL
32467: IFFALSE 32484
// bpoints := bpoints * 1.1 ;
32469: LD_ADDR_VAR 0 10
32473: PUSH
32474: LD_VAR 0 10
32478: PUSH
32479: LD_REAL  1.10000000000000E+0000
32482: MUL
32483: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32484: LD_ADDR_VAR 0 10
32488: PUSH
32489: LD_VAR 0 10
32493: PUSH
32494: LD_VAR 0 6
32498: PPUSH
32499: LD_INT 1
32501: PPUSH
32502: CALL_OW 259
32506: PUSH
32507: LD_REAL  1.15000000000000E+0000
32510: MUL
32511: MUL
32512: ST_TO_ADDR
// end ; unit_vehicle :
32513: GO 33343
32515: LD_INT 2
32517: DOUBLE
32518: EQUAL
32519: IFTRUE 32523
32521: GO 33331
32523: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32524: LD_VAR 0 6
32528: PPUSH
32529: CALL_OW 264
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 42
32539: PUSH
32540: LD_INT 24
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: IN
32548: IFFALSE 32569
// points := [ 25 , 5 , 3 ] ;
32550: LD_ADDR_VAR 0 9
32554: PUSH
32555: LD_INT 25
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: LD_INT 3
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32569: LD_VAR 0 6
32573: PPUSH
32574: CALL_OW 264
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: LD_INT 43
32584: PUSH
32585: LD_INT 25
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: IN
32593: IFFALSE 32614
// points := [ 40 , 15 , 5 ] ;
32595: LD_ADDR_VAR 0 9
32599: PUSH
32600: LD_INT 40
32602: PUSH
32603: LD_INT 15
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32614: LD_VAR 0 6
32618: PPUSH
32619: CALL_OW 264
32623: PUSH
32624: LD_INT 3
32626: PUSH
32627: LD_INT 23
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: IN
32634: IFFALSE 32655
// points := [ 7 , 25 , 8 ] ;
32636: LD_ADDR_VAR 0 9
32640: PUSH
32641: LD_INT 7
32643: PUSH
32644: LD_INT 25
32646: PUSH
32647: LD_INT 8
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32655: LD_VAR 0 6
32659: PPUSH
32660: CALL_OW 264
32664: PUSH
32665: LD_INT 5
32667: PUSH
32668: LD_INT 27
32670: PUSH
32671: LD_INT 44
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: IN
32679: IFFALSE 32700
// points := [ 14 , 50 , 16 ] ;
32681: LD_ADDR_VAR 0 9
32685: PUSH
32686: LD_INT 14
32688: PUSH
32689: LD_INT 50
32691: PUSH
32692: LD_INT 16
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32700: LD_VAR 0 6
32704: PPUSH
32705: CALL_OW 264
32709: PUSH
32710: LD_INT 6
32712: PUSH
32713: LD_INT 46
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: IN
32720: IFFALSE 32741
// points := [ 32 , 120 , 70 ] ;
32722: LD_ADDR_VAR 0 9
32726: PUSH
32727: LD_INT 32
32729: PUSH
32730: LD_INT 120
32732: PUSH
32733: LD_INT 70
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32741: LD_VAR 0 6
32745: PPUSH
32746: CALL_OW 264
32750: PUSH
32751: LD_INT 7
32753: PUSH
32754: LD_INT 28
32756: PUSH
32757: LD_INT 45
32759: PUSH
32760: LD_EXP 34
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: IN
32771: IFFALSE 32792
// points := [ 35 , 20 , 45 ] ;
32773: LD_ADDR_VAR 0 9
32777: PUSH
32778: LD_INT 35
32780: PUSH
32781: LD_INT 20
32783: PUSH
32784: LD_INT 45
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32792: LD_VAR 0 6
32796: PPUSH
32797: CALL_OW 264
32801: PUSH
32802: LD_INT 47
32804: PUSH
32805: EMPTY
32806: LIST
32807: IN
32808: IFFALSE 32829
// points := [ 67 , 45 , 75 ] ;
32810: LD_ADDR_VAR 0 9
32814: PUSH
32815: LD_INT 67
32817: PUSH
32818: LD_INT 45
32820: PUSH
32821: LD_INT 75
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32829: LD_VAR 0 6
32833: PPUSH
32834: CALL_OW 264
32838: PUSH
32839: LD_INT 26
32841: PUSH
32842: EMPTY
32843: LIST
32844: IN
32845: IFFALSE 32866
// points := [ 120 , 30 , 80 ] ;
32847: LD_ADDR_VAR 0 9
32851: PUSH
32852: LD_INT 120
32854: PUSH
32855: LD_INT 30
32857: PUSH
32858: LD_INT 80
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32866: LD_VAR 0 6
32870: PPUSH
32871: CALL_OW 264
32875: PUSH
32876: LD_INT 22
32878: PUSH
32879: EMPTY
32880: LIST
32881: IN
32882: IFFALSE 32903
// points := [ 40 , 1 , 1 ] ;
32884: LD_ADDR_VAR 0 9
32888: PUSH
32889: LD_INT 40
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32903: LD_VAR 0 6
32907: PPUSH
32908: CALL_OW 264
32912: PUSH
32913: LD_INT 29
32915: PUSH
32916: EMPTY
32917: LIST
32918: IN
32919: IFFALSE 32940
// points := [ 70 , 200 , 400 ] ;
32921: LD_ADDR_VAR 0 9
32925: PUSH
32926: LD_INT 70
32928: PUSH
32929: LD_INT 200
32931: PUSH
32932: LD_INT 400
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: LIST
32939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32940: LD_VAR 0 6
32944: PPUSH
32945: CALL_OW 264
32949: PUSH
32950: LD_INT 14
32952: PUSH
32953: LD_INT 53
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: IN
32960: IFFALSE 32981
// points := [ 40 , 10 , 20 ] ;
32962: LD_ADDR_VAR 0 9
32966: PUSH
32967: LD_INT 40
32969: PUSH
32970: LD_INT 10
32972: PUSH
32973: LD_INT 20
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32981: LD_VAR 0 6
32985: PPUSH
32986: CALL_OW 264
32990: PUSH
32991: LD_INT 9
32993: PUSH
32994: EMPTY
32995: LIST
32996: IN
32997: IFFALSE 33018
// points := [ 5 , 70 , 20 ] ;
32999: LD_ADDR_VAR 0 9
33003: PUSH
33004: LD_INT 5
33006: PUSH
33007: LD_INT 70
33009: PUSH
33010: LD_INT 20
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33018: LD_VAR 0 6
33022: PPUSH
33023: CALL_OW 264
33027: PUSH
33028: LD_INT 10
33030: PUSH
33031: EMPTY
33032: LIST
33033: IN
33034: IFFALSE 33055
// points := [ 35 , 110 , 70 ] ;
33036: LD_ADDR_VAR 0 9
33040: PUSH
33041: LD_INT 35
33043: PUSH
33044: LD_INT 110
33046: PUSH
33047: LD_INT 70
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33055: LD_VAR 0 6
33059: PPUSH
33060: CALL_OW 265
33064: PUSH
33065: LD_INT 25
33067: EQUAL
33068: IFFALSE 33089
// points := [ 80 , 65 , 100 ] ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_INT 80
33077: PUSH
33078: LD_INT 65
33080: PUSH
33081: LD_INT 100
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 263
33098: PUSH
33099: LD_INT 1
33101: EQUAL
33102: IFFALSE 33137
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33104: LD_ADDR_VAR 0 10
33108: PUSH
33109: LD_VAR 0 10
33113: PUSH
33114: LD_VAR 0 6
33118: PPUSH
33119: CALL_OW 311
33123: PPUSH
33124: LD_INT 3
33126: PPUSH
33127: CALL_OW 259
33131: PUSH
33132: LD_INT 4
33134: MUL
33135: MUL
33136: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33137: LD_VAR 0 6
33141: PPUSH
33142: CALL_OW 263
33146: PUSH
33147: LD_INT 2
33149: EQUAL
33150: IFFALSE 33201
// begin j := IsControledBy ( i ) ;
33152: LD_ADDR_VAR 0 7
33156: PUSH
33157: LD_VAR 0 6
33161: PPUSH
33162: CALL_OW 312
33166: ST_TO_ADDR
// if j then
33167: LD_VAR 0 7
33171: IFFALSE 33201
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: LD_VAR 0 10
33182: PUSH
33183: LD_VAR 0 7
33187: PPUSH
33188: LD_INT 3
33190: PPUSH
33191: CALL_OW 259
33195: PUSH
33196: LD_INT 3
33198: MUL
33199: MUL
33200: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33201: LD_VAR 0 6
33205: PPUSH
33206: CALL_OW 264
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: LD_INT 6
33216: PUSH
33217: LD_INT 46
33219: PUSH
33220: LD_INT 44
33222: PUSH
33223: LD_INT 47
33225: PUSH
33226: LD_INT 45
33228: PUSH
33229: LD_INT 28
33231: PUSH
33232: LD_INT 7
33234: PUSH
33235: LD_INT 27
33237: PUSH
33238: LD_INT 29
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: IN
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_INT 52
33261: PPUSH
33262: CALL_OW 321
33266: PUSH
33267: LD_INT 2
33269: EQUAL
33270: AND
33271: IFFALSE 33288
// bpoints := bpoints * 1.2 ;
33273: LD_ADDR_VAR 0 10
33277: PUSH
33278: LD_VAR 0 10
33282: PUSH
33283: LD_REAL  1.20000000000000E+0000
33286: MUL
33287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33288: LD_VAR 0 6
33292: PPUSH
33293: CALL_OW 264
33297: PUSH
33298: LD_INT 6
33300: PUSH
33301: LD_INT 46
33303: PUSH
33304: LD_INT 47
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: IN
33312: IFFALSE 33329
// bpoints := bpoints * 1.2 ;
33314: LD_ADDR_VAR 0 10
33318: PUSH
33319: LD_VAR 0 10
33323: PUSH
33324: LD_REAL  1.20000000000000E+0000
33327: MUL
33328: ST_TO_ADDR
// end ; unit_building :
33329: GO 33343
33331: LD_INT 3
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33342
33339: POP
// ; end ;
33340: GO 33343
33342: POP
// for j = 1 to 3 do
33343: LD_ADDR_VAR 0 7
33347: PUSH
33348: DOUBLE
33349: LD_INT 1
33351: DEC
33352: ST_TO_ADDR
33353: LD_INT 3
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33410
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33359: LD_ADDR_VAR 0 5
33363: PUSH
33364: LD_VAR 0 5
33368: PPUSH
33369: LD_VAR 0 7
33373: PPUSH
33374: LD_VAR 0 5
33378: PUSH
33379: LD_VAR 0 7
33383: ARRAY
33384: PUSH
33385: LD_VAR 0 9
33389: PUSH
33390: LD_VAR 0 7
33394: ARRAY
33395: PUSH
33396: LD_VAR 0 10
33400: MUL
33401: PLUS
33402: PPUSH
33403: CALL_OW 1
33407: ST_TO_ADDR
33408: GO 33356
33410: POP
33411: POP
// end ;
33412: GO 31889
33414: POP
33415: POP
// result := Replace ( result , 4 , tmp ) ;
33416: LD_ADDR_VAR 0 5
33420: PUSH
33421: LD_VAR 0 5
33425: PPUSH
33426: LD_INT 4
33428: PPUSH
33429: LD_VAR 0 8
33433: PPUSH
33434: CALL_OW 1
33438: ST_TO_ADDR
// end ;
33439: LD_VAR 0 5
33443: RET
// export function DangerAtRange ( unit , range ) ; begin
33444: LD_INT 0
33446: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL_OW 255
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 250
33471: PPUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 251
33481: PPUSH
33482: LD_VAR 0 2
33486: PPUSH
33487: CALL 31741 0 4
33491: ST_TO_ADDR
// end ;
33492: LD_VAR 0 3
33496: RET
// export function DangerInArea ( side , area ) ; begin
33497: LD_INT 0
33499: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_VAR 0 2
33509: PPUSH
33510: LD_INT 81
33512: PUSH
33513: LD_VAR 0 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 70
33526: ST_TO_ADDR
// end ;
33527: LD_VAR 0 3
33531: RET
// export function IsExtension ( b ) ; begin
33532: LD_INT 0
33534: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33535: LD_ADDR_VAR 0 2
33539: PUSH
33540: LD_VAR 0 1
33544: PUSH
33545: LD_INT 23
33547: PUSH
33548: LD_INT 20
33550: PUSH
33551: LD_INT 22
33553: PUSH
33554: LD_INT 17
33556: PUSH
33557: LD_INT 24
33559: PUSH
33560: LD_INT 21
33562: PUSH
33563: LD_INT 19
33565: PUSH
33566: LD_INT 16
33568: PUSH
33569: LD_INT 25
33571: PUSH
33572: LD_INT 18
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: IN
33587: ST_TO_ADDR
// end ;
33588: LD_VAR 0 2
33592: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33593: LD_INT 0
33595: PPUSH
33596: PPUSH
33597: PPUSH
// result := [ ] ;
33598: LD_ADDR_VAR 0 4
33602: PUSH
33603: EMPTY
33604: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33605: LD_ADDR_VAR 0 5
33609: PUSH
33610: LD_VAR 0 2
33614: PPUSH
33615: LD_INT 21
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 70
33629: ST_TO_ADDR
// if not tmp then
33630: LD_VAR 0 5
33634: NOT
33635: IFFALSE 33639
// exit ;
33637: GO 33703
// if checkLink then
33639: LD_VAR 0 3
33643: IFFALSE 33693
// begin for i in tmp do
33645: LD_ADDR_VAR 0 6
33649: PUSH
33650: LD_VAR 0 5
33654: PUSH
33655: FOR_IN
33656: IFFALSE 33691
// if GetBase ( i ) <> base then
33658: LD_VAR 0 6
33662: PPUSH
33663: CALL_OW 274
33667: PUSH
33668: LD_VAR 0 1
33672: NONEQUAL
33673: IFFALSE 33689
// ComLinkToBase ( base , i ) ;
33675: LD_VAR 0 1
33679: PPUSH
33680: LD_VAR 0 6
33684: PPUSH
33685: CALL_OW 169
33689: GO 33655
33691: POP
33692: POP
// end ; result := tmp ;
33693: LD_ADDR_VAR 0 4
33697: PUSH
33698: LD_VAR 0 5
33702: ST_TO_ADDR
// end ;
33703: LD_VAR 0 4
33707: RET
// export function ComComplete ( units , b ) ; var i ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
// if not units then
33712: LD_VAR 0 1
33716: NOT
33717: IFFALSE 33721
// exit ;
33719: GO 33811
// for i in units do
33721: LD_ADDR_VAR 0 4
33725: PUSH
33726: LD_VAR 0 1
33730: PUSH
33731: FOR_IN
33732: IFFALSE 33809
// if BuildingStatus ( b ) = bs_build then
33734: LD_VAR 0 2
33738: PPUSH
33739: CALL_OW 461
33743: PUSH
33744: LD_INT 1
33746: EQUAL
33747: IFFALSE 33807
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33749: LD_VAR 0 4
33753: PPUSH
33754: LD_STRING h
33756: PUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: CALL_OW 250
33766: PUSH
33767: LD_VAR 0 2
33771: PPUSH
33772: CALL_OW 251
33776: PUSH
33777: LD_VAR 0 2
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: PUSH
33800: EMPTY
33801: LIST
33802: PPUSH
33803: CALL_OW 446
33807: GO 33731
33809: POP
33810: POP
// end ;
33811: LD_VAR 0 3
33815: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33816: LD_INT 0
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33824: LD_VAR 0 1
33828: NOT
33829: PUSH
33830: LD_VAR 0 1
33834: PPUSH
33835: CALL_OW 263
33839: PUSH
33840: LD_INT 2
33842: NONEQUAL
33843: OR
33844: IFFALSE 33848
// exit ;
33846: GO 34164
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33848: LD_ADDR_VAR 0 6
33852: PUSH
33853: LD_INT 22
33855: PUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL_OW 255
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 30
33875: PUSH
33876: LD_INT 36
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 34
33885: PUSH
33886: LD_INT 31
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PPUSH
33902: CALL_OW 69
33906: ST_TO_ADDR
// if not tmp then
33907: LD_VAR 0 6
33911: NOT
33912: IFFALSE 33916
// exit ;
33914: GO 34164
// result := [ ] ;
33916: LD_ADDR_VAR 0 2
33920: PUSH
33921: EMPTY
33922: ST_TO_ADDR
// for i in tmp do
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: LD_VAR 0 6
33932: PUSH
33933: FOR_IN
33934: IFFALSE 34005
// begin t := UnitsInside ( i ) ;
33936: LD_ADDR_VAR 0 4
33940: PUSH
33941: LD_VAR 0 3
33945: PPUSH
33946: CALL_OW 313
33950: ST_TO_ADDR
// if t then
33951: LD_VAR 0 4
33955: IFFALSE 34003
// for j in t do
33957: LD_ADDR_VAR 0 7
33961: PUSH
33962: LD_VAR 0 4
33966: PUSH
33967: FOR_IN
33968: IFFALSE 34001
// result := Replace ( result , result + 1 , j ) ;
33970: LD_ADDR_VAR 0 2
33974: PUSH
33975: LD_VAR 0 2
33979: PPUSH
33980: LD_VAR 0 2
33984: PUSH
33985: LD_INT 1
33987: PLUS
33988: PPUSH
33989: LD_VAR 0 7
33993: PPUSH
33994: CALL_OW 1
33998: ST_TO_ADDR
33999: GO 33967
34001: POP
34002: POP
// end ;
34003: GO 33933
34005: POP
34006: POP
// if not result then
34007: LD_VAR 0 2
34011: NOT
34012: IFFALSE 34016
// exit ;
34014: GO 34164
// mech := result [ 1 ] ;
34016: LD_ADDR_VAR 0 5
34020: PUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_INT 1
34028: ARRAY
34029: ST_TO_ADDR
// if result > 1 then
34030: LD_VAR 0 2
34034: PUSH
34035: LD_INT 1
34037: GREATER
34038: IFFALSE 34150
// begin for i = 2 to result do
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: DOUBLE
34046: LD_INT 2
34048: DEC
34049: ST_TO_ADDR
34050: LD_VAR 0 2
34054: PUSH
34055: FOR_TO
34056: IFFALSE 34148
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34058: LD_ADDR_VAR 0 4
34062: PUSH
34063: LD_VAR 0 2
34067: PUSH
34068: LD_VAR 0 3
34072: ARRAY
34073: PPUSH
34074: LD_INT 3
34076: PPUSH
34077: CALL_OW 259
34081: PUSH
34082: LD_VAR 0 2
34086: PUSH
34087: LD_VAR 0 3
34091: ARRAY
34092: PPUSH
34093: CALL_OW 432
34097: MINUS
34098: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34099: LD_VAR 0 4
34103: PUSH
34104: LD_VAR 0 5
34108: PPUSH
34109: LD_INT 3
34111: PPUSH
34112: CALL_OW 259
34116: PUSH
34117: LD_VAR 0 5
34121: PPUSH
34122: CALL_OW 432
34126: MINUS
34127: GREATEREQUAL
34128: IFFALSE 34146
// mech := result [ i ] ;
34130: LD_ADDR_VAR 0 5
34134: PUSH
34135: LD_VAR 0 2
34139: PUSH
34140: LD_VAR 0 3
34144: ARRAY
34145: ST_TO_ADDR
// end ;
34146: GO 34055
34148: POP
34149: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34150: LD_VAR 0 1
34154: PPUSH
34155: LD_VAR 0 5
34159: PPUSH
34160: CALL_OW 135
// end ;
34164: LD_VAR 0 2
34168: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
34176: PPUSH
34177: PPUSH
34178: PPUSH
34179: PPUSH
34180: PPUSH
34181: PPUSH
34182: PPUSH
34183: PPUSH
// result := [ ] ;
34184: LD_ADDR_VAR 0 7
34188: PUSH
34189: EMPTY
34190: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL_OW 266
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: IN
34211: NOT
34212: IFFALSE 34216
// exit ;
34214: GO 35850
// if name then
34216: LD_VAR 0 3
34220: IFFALSE 34236
// SetBName ( base_dep , name ) ;
34222: LD_VAR 0 1
34226: PPUSH
34227: LD_VAR 0 3
34231: PPUSH
34232: CALL_OW 500
// base := GetBase ( base_dep ) ;
34236: LD_ADDR_VAR 0 15
34240: PUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: CALL_OW 274
34250: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34251: LD_ADDR_VAR 0 16
34255: PUSH
34256: LD_VAR 0 1
34260: PPUSH
34261: CALL_OW 255
34265: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34266: LD_ADDR_VAR 0 17
34270: PUSH
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL_OW 248
34280: ST_TO_ADDR
// if sources then
34281: LD_VAR 0 5
34285: IFFALSE 34332
// for i = 1 to 3 do
34287: LD_ADDR_VAR 0 8
34291: PUSH
34292: DOUBLE
34293: LD_INT 1
34295: DEC
34296: ST_TO_ADDR
34297: LD_INT 3
34299: PUSH
34300: FOR_TO
34301: IFFALSE 34330
// AddResourceType ( base , i , sources [ i ] ) ;
34303: LD_VAR 0 15
34307: PPUSH
34308: LD_VAR 0 8
34312: PPUSH
34313: LD_VAR 0 5
34317: PUSH
34318: LD_VAR 0 8
34322: ARRAY
34323: PPUSH
34324: CALL_OW 276
34328: GO 34300
34330: POP
34331: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34332: LD_ADDR_VAR 0 18
34336: PUSH
34337: LD_VAR 0 15
34341: PPUSH
34342: LD_VAR 0 2
34346: PPUSH
34347: LD_INT 1
34349: PPUSH
34350: CALL 33593 0 3
34354: ST_TO_ADDR
// InitHc ;
34355: CALL_OW 19
// InitUc ;
34359: CALL_OW 18
// uc_side := side ;
34363: LD_ADDR_OWVAR 20
34367: PUSH
34368: LD_VAR 0 16
34372: ST_TO_ADDR
// uc_nation := nation ;
34373: LD_ADDR_OWVAR 21
34377: PUSH
34378: LD_VAR 0 17
34382: ST_TO_ADDR
// if buildings then
34383: LD_VAR 0 18
34387: IFFALSE 35709
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34389: LD_ADDR_VAR 0 19
34393: PUSH
34394: LD_VAR 0 18
34398: PPUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 30
34404: PUSH
34405: LD_INT 29
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 30
34414: PUSH
34415: LD_INT 30
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: PPUSH
34427: CALL_OW 72
34431: ST_TO_ADDR
// if tmp then
34432: LD_VAR 0 19
34436: IFFALSE 34484
// for i in tmp do
34438: LD_ADDR_VAR 0 8
34442: PUSH
34443: LD_VAR 0 19
34447: PUSH
34448: FOR_IN
34449: IFFALSE 34482
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34451: LD_VAR 0 8
34455: PPUSH
34456: CALL_OW 250
34460: PPUSH
34461: LD_VAR 0 8
34465: PPUSH
34466: CALL_OW 251
34470: PPUSH
34471: LD_VAR 0 16
34475: PPUSH
34476: CALL_OW 441
34480: GO 34448
34482: POP
34483: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34484: LD_VAR 0 18
34488: PPUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 30
34494: PUSH
34495: LD_INT 32
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 30
34504: PUSH
34505: LD_INT 33
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: PPUSH
34517: CALL_OW 72
34521: IFFALSE 34609
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34523: LD_ADDR_VAR 0 8
34527: PUSH
34528: LD_VAR 0 18
34532: PPUSH
34533: LD_INT 2
34535: PUSH
34536: LD_INT 30
34538: PUSH
34539: LD_INT 32
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 30
34548: PUSH
34549: LD_INT 33
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: PPUSH
34561: CALL_OW 72
34565: PUSH
34566: FOR_IN
34567: IFFALSE 34607
// begin if not GetBWeapon ( i ) then
34569: LD_VAR 0 8
34573: PPUSH
34574: CALL_OW 269
34578: NOT
34579: IFFALSE 34605
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34581: LD_VAR 0 8
34585: PPUSH
34586: LD_VAR 0 8
34590: PPUSH
34591: LD_VAR 0 2
34595: PPUSH
34596: CALL 35855 0 2
34600: PPUSH
34601: CALL_OW 431
// end ;
34605: GO 34566
34607: POP
34608: POP
// end ; for i = 1 to personel do
34609: LD_ADDR_VAR 0 8
34613: PUSH
34614: DOUBLE
34615: LD_INT 1
34617: DEC
34618: ST_TO_ADDR
34619: LD_VAR 0 6
34623: PUSH
34624: FOR_TO
34625: IFFALSE 35689
// begin if i > 4 then
34627: LD_VAR 0 8
34631: PUSH
34632: LD_INT 4
34634: GREATER
34635: IFFALSE 34639
// break ;
34637: GO 35689
// case i of 1 :
34639: LD_VAR 0 8
34643: PUSH
34644: LD_INT 1
34646: DOUBLE
34647: EQUAL
34648: IFTRUE 34652
34650: GO 34732
34652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34653: LD_ADDR_VAR 0 12
34657: PUSH
34658: LD_VAR 0 18
34662: PPUSH
34663: LD_INT 22
34665: PUSH
34666: LD_VAR 0 16
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 58
34677: PUSH
34678: EMPTY
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: LD_INT 30
34686: PUSH
34687: LD_INT 32
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 30
34696: PUSH
34697: LD_INT 4
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 30
34706: PUSH
34707: LD_INT 5
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: PPUSH
34725: CALL_OW 72
34729: ST_TO_ADDR
34730: GO 34954
34732: LD_INT 2
34734: DOUBLE
34735: EQUAL
34736: IFTRUE 34740
34738: GO 34802
34740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34741: LD_ADDR_VAR 0 12
34745: PUSH
34746: LD_VAR 0 18
34750: PPUSH
34751: LD_INT 22
34753: PUSH
34754: LD_VAR 0 16
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 30
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 30
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PPUSH
34795: CALL_OW 72
34799: ST_TO_ADDR
34800: GO 34954
34802: LD_INT 3
34804: DOUBLE
34805: EQUAL
34806: IFTRUE 34810
34808: GO 34872
34810: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34811: LD_ADDR_VAR 0 12
34815: PUSH
34816: LD_VAR 0 18
34820: PPUSH
34821: LD_INT 22
34823: PUSH
34824: LD_VAR 0 16
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 30
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 30
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 72
34869: ST_TO_ADDR
34870: GO 34954
34872: LD_INT 4
34874: DOUBLE
34875: EQUAL
34876: IFTRUE 34880
34878: GO 34953
34880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34881: LD_ADDR_VAR 0 12
34885: PUSH
34886: LD_VAR 0 18
34890: PPUSH
34891: LD_INT 22
34893: PUSH
34894: LD_VAR 0 16
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 30
34908: PUSH
34909: LD_INT 6
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 30
34918: PUSH
34919: LD_INT 7
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 30
34928: PUSH
34929: LD_INT 8
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PPUSH
34946: CALL_OW 72
34950: ST_TO_ADDR
34951: GO 34954
34953: POP
// if i = 1 then
34954: LD_VAR 0 8
34958: PUSH
34959: LD_INT 1
34961: EQUAL
34962: IFFALSE 35073
// begin tmp := [ ] ;
34964: LD_ADDR_VAR 0 19
34968: PUSH
34969: EMPTY
34970: ST_TO_ADDR
// for j in f do
34971: LD_ADDR_VAR 0 9
34975: PUSH
34976: LD_VAR 0 12
34980: PUSH
34981: FOR_IN
34982: IFFALSE 35055
// if GetBType ( j ) = b_bunker then
34984: LD_VAR 0 9
34988: PPUSH
34989: CALL_OW 266
34993: PUSH
34994: LD_INT 32
34996: EQUAL
34997: IFFALSE 35024
// tmp := Insert ( tmp , 1 , j ) else
34999: LD_ADDR_VAR 0 19
35003: PUSH
35004: LD_VAR 0 19
35008: PPUSH
35009: LD_INT 1
35011: PPUSH
35012: LD_VAR 0 9
35016: PPUSH
35017: CALL_OW 2
35021: ST_TO_ADDR
35022: GO 35053
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35024: LD_ADDR_VAR 0 19
35028: PUSH
35029: LD_VAR 0 19
35033: PPUSH
35034: LD_VAR 0 19
35038: PUSH
35039: LD_INT 1
35041: PLUS
35042: PPUSH
35043: LD_VAR 0 9
35047: PPUSH
35048: CALL_OW 2
35052: ST_TO_ADDR
35053: GO 34981
35055: POP
35056: POP
// if tmp then
35057: LD_VAR 0 19
35061: IFFALSE 35073
// f := tmp ;
35063: LD_ADDR_VAR 0 12
35067: PUSH
35068: LD_VAR 0 19
35072: ST_TO_ADDR
// end ; x := personel [ i ] ;
35073: LD_ADDR_VAR 0 13
35077: PUSH
35078: LD_VAR 0 6
35082: PUSH
35083: LD_VAR 0 8
35087: ARRAY
35088: ST_TO_ADDR
// if x = - 1 then
35089: LD_VAR 0 13
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: EQUAL
35098: IFFALSE 35307
// begin for j in f do
35100: LD_ADDR_VAR 0 9
35104: PUSH
35105: LD_VAR 0 12
35109: PUSH
35110: FOR_IN
35111: IFFALSE 35303
// repeat InitHc ;
35113: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35117: LD_VAR 0 9
35121: PPUSH
35122: CALL_OW 266
35126: PUSH
35127: LD_INT 5
35129: EQUAL
35130: IFFALSE 35200
// begin if UnitsInside ( j ) < 3 then
35132: LD_VAR 0 9
35136: PPUSH
35137: CALL_OW 313
35141: PUSH
35142: LD_INT 3
35144: LESS
35145: IFFALSE 35181
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35147: LD_INT 0
35149: PPUSH
35150: LD_INT 5
35152: PUSH
35153: LD_INT 8
35155: PUSH
35156: LD_INT 9
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: PUSH
35164: LD_VAR 0 17
35168: ARRAY
35169: PPUSH
35170: LD_VAR 0 4
35174: PPUSH
35175: CALL_OW 380
35179: GO 35198
// PrepareHuman ( false , i , skill ) ;
35181: LD_INT 0
35183: PPUSH
35184: LD_VAR 0 8
35188: PPUSH
35189: LD_VAR 0 4
35193: PPUSH
35194: CALL_OW 380
// end else
35198: GO 35217
// PrepareHuman ( false , i , skill ) ;
35200: LD_INT 0
35202: PPUSH
35203: LD_VAR 0 8
35207: PPUSH
35208: LD_VAR 0 4
35212: PPUSH
35213: CALL_OW 380
// un := CreateHuman ;
35217: LD_ADDR_VAR 0 14
35221: PUSH
35222: CALL_OW 44
35226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: LD_VAR 0 7
35236: PPUSH
35237: LD_INT 1
35239: PPUSH
35240: LD_VAR 0 14
35244: PPUSH
35245: CALL_OW 2
35249: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35250: LD_VAR 0 14
35254: PPUSH
35255: LD_VAR 0 9
35259: PPUSH
35260: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35264: LD_VAR 0 9
35268: PPUSH
35269: CALL_OW 313
35273: PUSH
35274: LD_INT 6
35276: EQUAL
35277: PUSH
35278: LD_VAR 0 9
35282: PPUSH
35283: CALL_OW 266
35287: PUSH
35288: LD_INT 32
35290: PUSH
35291: LD_INT 31
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: IN
35298: OR
35299: IFFALSE 35113
35301: GO 35110
35303: POP
35304: POP
// end else
35305: GO 35687
// for j = 1 to x do
35307: LD_ADDR_VAR 0 9
35311: PUSH
35312: DOUBLE
35313: LD_INT 1
35315: DEC
35316: ST_TO_ADDR
35317: LD_VAR 0 13
35321: PUSH
35322: FOR_TO
35323: IFFALSE 35685
// begin InitHc ;
35325: CALL_OW 19
// if not f then
35329: LD_VAR 0 12
35333: NOT
35334: IFFALSE 35423
// begin PrepareHuman ( false , i , skill ) ;
35336: LD_INT 0
35338: PPUSH
35339: LD_VAR 0 8
35343: PPUSH
35344: LD_VAR 0 4
35348: PPUSH
35349: CALL_OW 380
// un := CreateHuman ;
35353: LD_ADDR_VAR 0 14
35357: PUSH
35358: CALL_OW 44
35362: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35363: LD_ADDR_VAR 0 7
35367: PUSH
35368: LD_VAR 0 7
35372: PPUSH
35373: LD_INT 1
35375: PPUSH
35376: LD_VAR 0 14
35380: PPUSH
35381: CALL_OW 2
35385: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35386: LD_VAR 0 14
35390: PPUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 250
35400: PPUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 251
35410: PPUSH
35411: LD_INT 10
35413: PPUSH
35414: LD_INT 0
35416: PPUSH
35417: CALL_OW 50
// continue ;
35421: GO 35322
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35423: LD_VAR 0 12
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: PPUSH
35432: CALL_OW 313
35436: PUSH
35437: LD_VAR 0 12
35441: PUSH
35442: LD_INT 1
35444: ARRAY
35445: PPUSH
35446: CALL_OW 266
35450: PUSH
35451: LD_INT 32
35453: PUSH
35454: LD_INT 31
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: IN
35461: AND
35462: PUSH
35463: LD_VAR 0 12
35467: PUSH
35468: LD_INT 1
35470: ARRAY
35471: PPUSH
35472: CALL_OW 313
35476: PUSH
35477: LD_INT 6
35479: EQUAL
35480: OR
35481: IFFALSE 35501
// f := Delete ( f , 1 ) ;
35483: LD_ADDR_VAR 0 12
35487: PUSH
35488: LD_VAR 0 12
35492: PPUSH
35493: LD_INT 1
35495: PPUSH
35496: CALL_OW 3
35500: ST_TO_ADDR
// if not f then
35501: LD_VAR 0 12
35505: NOT
35506: IFFALSE 35524
// begin x := x + 2 ;
35508: LD_ADDR_VAR 0 13
35512: PUSH
35513: LD_VAR 0 13
35517: PUSH
35518: LD_INT 2
35520: PLUS
35521: ST_TO_ADDR
// continue ;
35522: GO 35322
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35524: LD_VAR 0 12
35528: PUSH
35529: LD_INT 1
35531: ARRAY
35532: PPUSH
35533: CALL_OW 266
35537: PUSH
35538: LD_INT 5
35540: EQUAL
35541: IFFALSE 35615
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35543: LD_VAR 0 12
35547: PUSH
35548: LD_INT 1
35550: ARRAY
35551: PPUSH
35552: CALL_OW 313
35556: PUSH
35557: LD_INT 3
35559: LESS
35560: IFFALSE 35596
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35562: LD_INT 0
35564: PPUSH
35565: LD_INT 5
35567: PUSH
35568: LD_INT 8
35570: PUSH
35571: LD_INT 9
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: PUSH
35579: LD_VAR 0 17
35583: ARRAY
35584: PPUSH
35585: LD_VAR 0 4
35589: PPUSH
35590: CALL_OW 380
35594: GO 35613
// PrepareHuman ( false , i , skill ) ;
35596: LD_INT 0
35598: PPUSH
35599: LD_VAR 0 8
35603: PPUSH
35604: LD_VAR 0 4
35608: PPUSH
35609: CALL_OW 380
// end else
35613: GO 35632
// PrepareHuman ( false , i , skill ) ;
35615: LD_INT 0
35617: PPUSH
35618: LD_VAR 0 8
35622: PPUSH
35623: LD_VAR 0 4
35627: PPUSH
35628: CALL_OW 380
// un := CreateHuman ;
35632: LD_ADDR_VAR 0 14
35636: PUSH
35637: CALL_OW 44
35641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35642: LD_ADDR_VAR 0 7
35646: PUSH
35647: LD_VAR 0 7
35651: PPUSH
35652: LD_INT 1
35654: PPUSH
35655: LD_VAR 0 14
35659: PPUSH
35660: CALL_OW 2
35664: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35665: LD_VAR 0 14
35669: PPUSH
35670: LD_VAR 0 12
35674: PUSH
35675: LD_INT 1
35677: ARRAY
35678: PPUSH
35679: CALL_OW 52
// end ;
35683: GO 35322
35685: POP
35686: POP
// end ;
35687: GO 34624
35689: POP
35690: POP
// result := result ^ buildings ;
35691: LD_ADDR_VAR 0 7
35695: PUSH
35696: LD_VAR 0 7
35700: PUSH
35701: LD_VAR 0 18
35705: ADD
35706: ST_TO_ADDR
// end else
35707: GO 35850
// begin for i = 1 to personel do
35709: LD_ADDR_VAR 0 8
35713: PUSH
35714: DOUBLE
35715: LD_INT 1
35717: DEC
35718: ST_TO_ADDR
35719: LD_VAR 0 6
35723: PUSH
35724: FOR_TO
35725: IFFALSE 35848
// begin if i > 4 then
35727: LD_VAR 0 8
35731: PUSH
35732: LD_INT 4
35734: GREATER
35735: IFFALSE 35739
// break ;
35737: GO 35848
// x := personel [ i ] ;
35739: LD_ADDR_VAR 0 13
35743: PUSH
35744: LD_VAR 0 6
35748: PUSH
35749: LD_VAR 0 8
35753: ARRAY
35754: ST_TO_ADDR
// if x = - 1 then
35755: LD_VAR 0 13
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: EQUAL
35764: IFFALSE 35768
// continue ;
35766: GO 35724
// PrepareHuman ( false , i , skill ) ;
35768: LD_INT 0
35770: PPUSH
35771: LD_VAR 0 8
35775: PPUSH
35776: LD_VAR 0 4
35780: PPUSH
35781: CALL_OW 380
// un := CreateHuman ;
35785: LD_ADDR_VAR 0 14
35789: PUSH
35790: CALL_OW 44
35794: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35795: LD_VAR 0 14
35799: PPUSH
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 250
35809: PPUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 251
35819: PPUSH
35820: LD_INT 10
35822: PPUSH
35823: LD_INT 0
35825: PPUSH
35826: CALL_OW 50
// result := result ^ un ;
35830: LD_ADDR_VAR 0 7
35834: PUSH
35835: LD_VAR 0 7
35839: PUSH
35840: LD_VAR 0 14
35844: ADD
35845: ST_TO_ADDR
// end ;
35846: GO 35724
35848: POP
35849: POP
// end ; end ;
35850: LD_VAR 0 7
35854: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35855: LD_INT 0
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
// result := false ;
35873: LD_ADDR_VAR 0 3
35877: PUSH
35878: LD_INT 0
35880: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35881: LD_VAR 0 1
35885: NOT
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 266
35896: PUSH
35897: LD_INT 32
35899: PUSH
35900: LD_INT 33
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: IN
35907: NOT
35908: OR
35909: IFFALSE 35913
// exit ;
35911: GO 37022
// nat := GetNation ( tower ) ;
35913: LD_ADDR_VAR 0 12
35917: PUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 248
35927: ST_TO_ADDR
// side := GetSide ( tower ) ;
35928: LD_ADDR_VAR 0 16
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 255
35942: ST_TO_ADDR
// x := GetX ( tower ) ;
35943: LD_ADDR_VAR 0 10
35947: PUSH
35948: LD_VAR 0 1
35952: PPUSH
35953: CALL_OW 250
35957: ST_TO_ADDR
// y := GetY ( tower ) ;
35958: LD_ADDR_VAR 0 11
35962: PUSH
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 251
35972: ST_TO_ADDR
// if not x or not y then
35973: LD_VAR 0 10
35977: NOT
35978: PUSH
35979: LD_VAR 0 11
35983: NOT
35984: OR
35985: IFFALSE 35989
// exit ;
35987: GO 37022
// weapon := 0 ;
35989: LD_ADDR_VAR 0 18
35993: PUSH
35994: LD_INT 0
35996: ST_TO_ADDR
// fac_list := [ ] ;
35997: LD_ADDR_VAR 0 17
36001: PUSH
36002: EMPTY
36003: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36004: LD_ADDR_VAR 0 6
36008: PUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 274
36018: PPUSH
36019: LD_VAR 0 2
36023: PPUSH
36024: LD_INT 0
36026: PPUSH
36027: CALL 33593 0 3
36031: PPUSH
36032: LD_INT 30
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PPUSH
36042: CALL_OW 72
36046: ST_TO_ADDR
// if not factories then
36047: LD_VAR 0 6
36051: NOT
36052: IFFALSE 36056
// exit ;
36054: GO 37022
// for i in factories do
36056: LD_ADDR_VAR 0 8
36060: PUSH
36061: LD_VAR 0 6
36065: PUSH
36066: FOR_IN
36067: IFFALSE 36092
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36069: LD_ADDR_VAR 0 17
36073: PUSH
36074: LD_VAR 0 17
36078: PUSH
36079: LD_VAR 0 8
36083: PPUSH
36084: CALL_OW 478
36088: UNION
36089: ST_TO_ADDR
36090: GO 36066
36092: POP
36093: POP
// if not fac_list then
36094: LD_VAR 0 17
36098: NOT
36099: IFFALSE 36103
// exit ;
36101: GO 37022
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36103: LD_ADDR_VAR 0 5
36107: PUSH
36108: LD_INT 4
36110: PUSH
36111: LD_INT 5
36113: PUSH
36114: LD_INT 9
36116: PUSH
36117: LD_INT 10
36119: PUSH
36120: LD_INT 6
36122: PUSH
36123: LD_INT 7
36125: PUSH
36126: LD_INT 11
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 27
36140: PUSH
36141: LD_INT 28
36143: PUSH
36144: LD_INT 26
36146: PUSH
36147: LD_INT 30
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 43
36158: PUSH
36159: LD_INT 44
36161: PUSH
36162: LD_INT 46
36164: PUSH
36165: LD_INT 45
36167: PUSH
36168: LD_INT 47
36170: PUSH
36171: LD_INT 49
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: PUSH
36187: LD_VAR 0 12
36191: ARRAY
36192: ST_TO_ADDR
// list := list isect fac_list ;
36193: LD_ADDR_VAR 0 5
36197: PUSH
36198: LD_VAR 0 5
36202: PUSH
36203: LD_VAR 0 17
36207: ISECT
36208: ST_TO_ADDR
// if not list then
36209: LD_VAR 0 5
36213: NOT
36214: IFFALSE 36218
// exit ;
36216: GO 37022
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36218: LD_VAR 0 12
36222: PUSH
36223: LD_INT 3
36225: EQUAL
36226: PUSH
36227: LD_INT 49
36229: PUSH
36230: LD_VAR 0 5
36234: IN
36235: AND
36236: PUSH
36237: LD_INT 31
36239: PPUSH
36240: LD_VAR 0 16
36244: PPUSH
36245: CALL_OW 321
36249: PUSH
36250: LD_INT 2
36252: EQUAL
36253: AND
36254: IFFALSE 36314
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36256: LD_INT 22
36258: PUSH
36259: LD_VAR 0 16
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 35
36270: PUSH
36271: LD_INT 49
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 91
36280: PUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_INT 10
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: PPUSH
36299: CALL_OW 69
36303: NOT
36304: IFFALSE 36314
// weapon := ru_time_lapser ;
36306: LD_ADDR_VAR 0 18
36310: PUSH
36311: LD_INT 49
36313: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36314: LD_VAR 0 12
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: IN
36329: PUSH
36330: LD_INT 11
36332: PUSH
36333: LD_VAR 0 5
36337: IN
36338: PUSH
36339: LD_INT 30
36341: PUSH
36342: LD_VAR 0 5
36346: IN
36347: OR
36348: AND
36349: PUSH
36350: LD_INT 6
36352: PPUSH
36353: LD_VAR 0 16
36357: PPUSH
36358: CALL_OW 321
36362: PUSH
36363: LD_INT 2
36365: EQUAL
36366: AND
36367: IFFALSE 36532
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36369: LD_INT 22
36371: PUSH
36372: LD_VAR 0 16
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: LD_INT 35
36386: PUSH
36387: LD_INT 11
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 35
36396: PUSH
36397: LD_INT 30
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 91
36411: PUSH
36412: LD_VAR 0 1
36416: PUSH
36417: LD_INT 18
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: PPUSH
36430: CALL_OW 69
36434: NOT
36435: PUSH
36436: LD_INT 22
36438: PUSH
36439: LD_VAR 0 16
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 30
36453: PUSH
36454: LD_INT 32
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 30
36463: PUSH
36464: LD_INT 33
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 91
36478: PUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_INT 12
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: PPUSH
36500: CALL_OW 69
36504: PUSH
36505: LD_INT 2
36507: GREATER
36508: AND
36509: IFFALSE 36532
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36511: LD_ADDR_VAR 0 18
36515: PUSH
36516: LD_INT 11
36518: PUSH
36519: LD_INT 30
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_VAR 0 12
36530: ARRAY
36531: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36532: LD_VAR 0 18
36536: NOT
36537: PUSH
36538: LD_INT 40
36540: PPUSH
36541: LD_VAR 0 16
36545: PPUSH
36546: CALL_OW 321
36550: PUSH
36551: LD_INT 2
36553: EQUAL
36554: AND
36555: PUSH
36556: LD_INT 7
36558: PUSH
36559: LD_VAR 0 5
36563: IN
36564: PUSH
36565: LD_INT 28
36567: PUSH
36568: LD_VAR 0 5
36572: IN
36573: OR
36574: PUSH
36575: LD_INT 45
36577: PUSH
36578: LD_VAR 0 5
36582: IN
36583: OR
36584: AND
36585: IFFALSE 36839
// begin hex := GetHexInfo ( x , y ) ;
36587: LD_ADDR_VAR 0 4
36591: PUSH
36592: LD_VAR 0 10
36596: PPUSH
36597: LD_VAR 0 11
36601: PPUSH
36602: CALL_OW 546
36606: ST_TO_ADDR
// if hex [ 1 ] then
36607: LD_VAR 0 4
36611: PUSH
36612: LD_INT 1
36614: ARRAY
36615: IFFALSE 36619
// exit ;
36617: GO 37022
// height := hex [ 2 ] ;
36619: LD_ADDR_VAR 0 15
36623: PUSH
36624: LD_VAR 0 4
36628: PUSH
36629: LD_INT 2
36631: ARRAY
36632: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36633: LD_ADDR_VAR 0 14
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: LD_INT 5
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// for i in tmp do
36656: LD_ADDR_VAR 0 8
36660: PUSH
36661: LD_VAR 0 14
36665: PUSH
36666: FOR_IN
36667: IFFALSE 36837
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36669: LD_ADDR_VAR 0 9
36673: PUSH
36674: LD_VAR 0 10
36678: PPUSH
36679: LD_VAR 0 8
36683: PPUSH
36684: LD_INT 5
36686: PPUSH
36687: CALL_OW 272
36691: PUSH
36692: LD_VAR 0 11
36696: PPUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_INT 5
36704: PPUSH
36705: CALL_OW 273
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36714: LD_VAR 0 9
36718: PUSH
36719: LD_INT 1
36721: ARRAY
36722: PPUSH
36723: LD_VAR 0 9
36727: PUSH
36728: LD_INT 2
36730: ARRAY
36731: PPUSH
36732: CALL_OW 488
36736: IFFALSE 36835
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36738: LD_ADDR_VAR 0 4
36742: PUSH
36743: LD_VAR 0 9
36747: PUSH
36748: LD_INT 1
36750: ARRAY
36751: PPUSH
36752: LD_VAR 0 9
36756: PUSH
36757: LD_INT 2
36759: ARRAY
36760: PPUSH
36761: CALL_OW 546
36765: ST_TO_ADDR
// if hex [ 1 ] then
36766: LD_VAR 0 4
36770: PUSH
36771: LD_INT 1
36773: ARRAY
36774: IFFALSE 36778
// continue ;
36776: GO 36666
// h := hex [ 2 ] ;
36778: LD_ADDR_VAR 0 13
36782: PUSH
36783: LD_VAR 0 4
36787: PUSH
36788: LD_INT 2
36790: ARRAY
36791: ST_TO_ADDR
// if h + 7 < height then
36792: LD_VAR 0 13
36796: PUSH
36797: LD_INT 7
36799: PLUS
36800: PUSH
36801: LD_VAR 0 15
36805: LESS
36806: IFFALSE 36835
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36808: LD_ADDR_VAR 0 18
36812: PUSH
36813: LD_INT 7
36815: PUSH
36816: LD_INT 28
36818: PUSH
36819: LD_INT 45
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: PUSH
36827: LD_VAR 0 12
36831: ARRAY
36832: ST_TO_ADDR
// break ;
36833: GO 36837
// end ; end ; end ;
36835: GO 36666
36837: POP
36838: POP
// end ; if not weapon then
36839: LD_VAR 0 18
36843: NOT
36844: IFFALSE 36904
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36846: LD_ADDR_VAR 0 5
36850: PUSH
36851: LD_VAR 0 5
36855: PUSH
36856: LD_INT 11
36858: PUSH
36859: LD_INT 30
36861: PUSH
36862: LD_INT 49
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: DIFF
36870: ST_TO_ADDR
// if not list then
36871: LD_VAR 0 5
36875: NOT
36876: IFFALSE 36880
// exit ;
36878: GO 37022
// weapon := list [ rand ( 1 , list ) ] ;
36880: LD_ADDR_VAR 0 18
36884: PUSH
36885: LD_VAR 0 5
36889: PUSH
36890: LD_INT 1
36892: PPUSH
36893: LD_VAR 0 5
36897: PPUSH
36898: CALL_OW 12
36902: ARRAY
36903: ST_TO_ADDR
// end ; if weapon then
36904: LD_VAR 0 18
36908: IFFALSE 37022
// begin tmp := CostOfWeapon ( weapon ) ;
36910: LD_ADDR_VAR 0 14
36914: PUSH
36915: LD_VAR 0 18
36919: PPUSH
36920: CALL_OW 451
36924: ST_TO_ADDR
// j := GetBase ( tower ) ;
36925: LD_ADDR_VAR 0 9
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 274
36939: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36940: LD_VAR 0 9
36944: PPUSH
36945: LD_INT 1
36947: PPUSH
36948: CALL_OW 275
36952: PUSH
36953: LD_VAR 0 14
36957: PUSH
36958: LD_INT 1
36960: ARRAY
36961: GREATEREQUAL
36962: PUSH
36963: LD_VAR 0 9
36967: PPUSH
36968: LD_INT 2
36970: PPUSH
36971: CALL_OW 275
36975: PUSH
36976: LD_VAR 0 14
36980: PUSH
36981: LD_INT 2
36983: ARRAY
36984: GREATEREQUAL
36985: AND
36986: PUSH
36987: LD_VAR 0 9
36991: PPUSH
36992: LD_INT 3
36994: PPUSH
36995: CALL_OW 275
36999: PUSH
37000: LD_VAR 0 14
37004: PUSH
37005: LD_INT 3
37007: ARRAY
37008: GREATEREQUAL
37009: AND
37010: IFFALSE 37022
// result := weapon ;
37012: LD_ADDR_VAR 0 3
37016: PUSH
37017: LD_VAR 0 18
37021: ST_TO_ADDR
// end ; end ;
37022: LD_VAR 0 3
37026: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37027: LD_INT 0
37029: PPUSH
37030: PPUSH
// result := true ;
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_INT 1
37038: ST_TO_ADDR
// if array1 = array2 then
37039: LD_VAR 0 1
37043: PUSH
37044: LD_VAR 0 2
37048: EQUAL
37049: IFFALSE 37109
// begin for i = 1 to array1 do
37051: LD_ADDR_VAR 0 4
37055: PUSH
37056: DOUBLE
37057: LD_INT 1
37059: DEC
37060: ST_TO_ADDR
37061: LD_VAR 0 1
37065: PUSH
37066: FOR_TO
37067: IFFALSE 37105
// if array1 [ i ] <> array2 [ i ] then
37069: LD_VAR 0 1
37073: PUSH
37074: LD_VAR 0 4
37078: ARRAY
37079: PUSH
37080: LD_VAR 0 2
37084: PUSH
37085: LD_VAR 0 4
37089: ARRAY
37090: NONEQUAL
37091: IFFALSE 37103
// begin result := false ;
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// break ;
37101: GO 37105
// end ;
37103: GO 37066
37105: POP
37106: POP
// end else
37107: GO 37117
// result := false ;
37109: LD_ADDR_VAR 0 3
37113: PUSH
37114: LD_INT 0
37116: ST_TO_ADDR
// end ;
37117: LD_VAR 0 3
37121: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37122: LD_INT 0
37124: PPUSH
37125: PPUSH
// if not array1 or not array2 then
37126: LD_VAR 0 1
37130: NOT
37131: PUSH
37132: LD_VAR 0 2
37136: NOT
37137: OR
37138: IFFALSE 37142
// exit ;
37140: GO 37206
// result := true ;
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_INT 1
37149: ST_TO_ADDR
// for i = 1 to array1 do
37150: LD_ADDR_VAR 0 4
37154: PUSH
37155: DOUBLE
37156: LD_INT 1
37158: DEC
37159: ST_TO_ADDR
37160: LD_VAR 0 1
37164: PUSH
37165: FOR_TO
37166: IFFALSE 37204
// if array1 [ i ] <> array2 [ i ] then
37168: LD_VAR 0 1
37172: PUSH
37173: LD_VAR 0 4
37177: ARRAY
37178: PUSH
37179: LD_VAR 0 2
37183: PUSH
37184: LD_VAR 0 4
37188: ARRAY
37189: NONEQUAL
37190: IFFALSE 37202
// begin result := false ;
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_INT 0
37199: ST_TO_ADDR
// break ;
37200: GO 37204
// end ;
37202: GO 37165
37204: POP
37205: POP
// end ;
37206: LD_VAR 0 3
37210: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
37215: PPUSH
// pom := GetBase ( fac ) ;
37216: LD_ADDR_VAR 0 5
37220: PUSH
37221: LD_VAR 0 1
37225: PPUSH
37226: CALL_OW 274
37230: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 2
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: LD_VAR 0 2
37249: PUSH
37250: LD_INT 2
37252: ARRAY
37253: PPUSH
37254: LD_VAR 0 2
37258: PUSH
37259: LD_INT 3
37261: ARRAY
37262: PPUSH
37263: LD_VAR 0 2
37267: PUSH
37268: LD_INT 4
37270: ARRAY
37271: PPUSH
37272: CALL_OW 449
37276: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37277: LD_ADDR_VAR 0 3
37281: PUSH
37282: LD_VAR 0 5
37286: PPUSH
37287: LD_INT 1
37289: PPUSH
37290: CALL_OW 275
37294: PUSH
37295: LD_VAR 0 4
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: GREATEREQUAL
37304: PUSH
37305: LD_VAR 0 5
37309: PPUSH
37310: LD_INT 2
37312: PPUSH
37313: CALL_OW 275
37317: PUSH
37318: LD_VAR 0 4
37322: PUSH
37323: LD_INT 2
37325: ARRAY
37326: GREATEREQUAL
37327: AND
37328: PUSH
37329: LD_VAR 0 5
37333: PPUSH
37334: LD_INT 3
37336: PPUSH
37337: CALL_OW 275
37341: PUSH
37342: LD_VAR 0 4
37346: PUSH
37347: LD_INT 3
37349: ARRAY
37350: GREATEREQUAL
37351: AND
37352: ST_TO_ADDR
// end ;
37353: LD_VAR 0 3
37357: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37358: LD_INT 0
37360: PPUSH
37361: PPUSH
37362: PPUSH
37363: PPUSH
// pom := GetBase ( building ) ;
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 274
37378: ST_TO_ADDR
// if not pom then
37379: LD_VAR 0 3
37383: NOT
37384: IFFALSE 37388
// exit ;
37386: GO 37558
// btype := GetBType ( building ) ;
37388: LD_ADDR_VAR 0 5
37392: PUSH
37393: LD_VAR 0 1
37397: PPUSH
37398: CALL_OW 266
37402: ST_TO_ADDR
// if btype = b_armoury then
37403: LD_VAR 0 5
37407: PUSH
37408: LD_INT 4
37410: EQUAL
37411: IFFALSE 37421
// btype := b_barracks ;
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: LD_INT 5
37420: ST_TO_ADDR
// if btype = b_depot then
37421: LD_VAR 0 5
37425: PUSH
37426: LD_INT 0
37428: EQUAL
37429: IFFALSE 37439
// btype := b_warehouse ;
37431: LD_ADDR_VAR 0 5
37435: PUSH
37436: LD_INT 1
37438: ST_TO_ADDR
// if btype = b_workshop then
37439: LD_VAR 0 5
37443: PUSH
37444: LD_INT 2
37446: EQUAL
37447: IFFALSE 37457
// btype := b_factory ;
37449: LD_ADDR_VAR 0 5
37453: PUSH
37454: LD_INT 3
37456: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37457: LD_ADDR_VAR 0 4
37461: PUSH
37462: LD_VAR 0 5
37466: PPUSH
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 248
37476: PPUSH
37477: CALL_OW 450
37481: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37482: LD_ADDR_VAR 0 2
37486: PUSH
37487: LD_VAR 0 3
37491: PPUSH
37492: LD_INT 1
37494: PPUSH
37495: CALL_OW 275
37499: PUSH
37500: LD_VAR 0 4
37504: PUSH
37505: LD_INT 1
37507: ARRAY
37508: GREATEREQUAL
37509: PUSH
37510: LD_VAR 0 3
37514: PPUSH
37515: LD_INT 2
37517: PPUSH
37518: CALL_OW 275
37522: PUSH
37523: LD_VAR 0 4
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: GREATEREQUAL
37532: AND
37533: PUSH
37534: LD_VAR 0 3
37538: PPUSH
37539: LD_INT 3
37541: PPUSH
37542: CALL_OW 275
37546: PUSH
37547: LD_VAR 0 4
37551: PUSH
37552: LD_INT 3
37554: ARRAY
37555: GREATEREQUAL
37556: AND
37557: ST_TO_ADDR
// end ;
37558: LD_VAR 0 2
37562: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37563: LD_INT 0
37565: PPUSH
37566: PPUSH
37567: PPUSH
// pom := GetBase ( building ) ;
37568: LD_ADDR_VAR 0 4
37572: PUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL_OW 274
37582: ST_TO_ADDR
// if not pom then
37583: LD_VAR 0 4
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 37693
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37592: LD_ADDR_VAR 0 5
37596: PUSH
37597: LD_VAR 0 2
37601: PPUSH
37602: LD_VAR 0 1
37606: PPUSH
37607: CALL_OW 248
37611: PPUSH
37612: CALL_OW 450
37616: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37617: LD_ADDR_VAR 0 3
37621: PUSH
37622: LD_VAR 0 4
37626: PPUSH
37627: LD_INT 1
37629: PPUSH
37630: CALL_OW 275
37634: PUSH
37635: LD_VAR 0 5
37639: PUSH
37640: LD_INT 1
37642: ARRAY
37643: GREATEREQUAL
37644: PUSH
37645: LD_VAR 0 4
37649: PPUSH
37650: LD_INT 2
37652: PPUSH
37653: CALL_OW 275
37657: PUSH
37658: LD_VAR 0 5
37662: PUSH
37663: LD_INT 2
37665: ARRAY
37666: GREATEREQUAL
37667: AND
37668: PUSH
37669: LD_VAR 0 4
37673: PPUSH
37674: LD_INT 3
37676: PPUSH
37677: CALL_OW 275
37681: PUSH
37682: LD_VAR 0 5
37686: PUSH
37687: LD_INT 3
37689: ARRAY
37690: GREATEREQUAL
37691: AND
37692: ST_TO_ADDR
// end ;
37693: LD_VAR 0 3
37697: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37698: LD_INT 0
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
// result := false ;
37711: LD_ADDR_VAR 0 8
37715: PUSH
37716: LD_INT 0
37718: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37719: LD_VAR 0 5
37723: NOT
37724: PUSH
37725: LD_VAR 0 1
37729: NOT
37730: OR
37731: PUSH
37732: LD_VAR 0 2
37736: NOT
37737: OR
37738: PUSH
37739: LD_VAR 0 3
37743: NOT
37744: OR
37745: IFFALSE 37749
// exit ;
37747: GO 38563
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37749: LD_ADDR_VAR 0 14
37753: PUSH
37754: LD_VAR 0 1
37758: PPUSH
37759: LD_VAR 0 2
37763: PPUSH
37764: LD_VAR 0 3
37768: PPUSH
37769: LD_VAR 0 4
37773: PPUSH
37774: LD_VAR 0 5
37778: PUSH
37779: LD_INT 1
37781: ARRAY
37782: PPUSH
37783: CALL_OW 248
37787: PPUSH
37788: LD_INT 0
37790: PPUSH
37791: CALL 39800 0 6
37795: ST_TO_ADDR
// if not hexes then
37796: LD_VAR 0 14
37800: NOT
37801: IFFALSE 37805
// exit ;
37803: GO 38563
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37805: LD_ADDR_VAR 0 17
37809: PUSH
37810: LD_VAR 0 5
37814: PPUSH
37815: LD_INT 22
37817: PUSH
37818: LD_VAR 0 13
37822: PPUSH
37823: CALL_OW 255
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 30
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 30
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PPUSH
37864: CALL_OW 72
37868: ST_TO_ADDR
// for i = 1 to hexes do
37869: LD_ADDR_VAR 0 9
37873: PUSH
37874: DOUBLE
37875: LD_INT 1
37877: DEC
37878: ST_TO_ADDR
37879: LD_VAR 0 14
37883: PUSH
37884: FOR_TO
37885: IFFALSE 38561
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37887: LD_ADDR_VAR 0 13
37891: PUSH
37892: LD_VAR 0 14
37896: PUSH
37897: LD_VAR 0 9
37901: ARRAY
37902: PUSH
37903: LD_INT 1
37905: ARRAY
37906: PPUSH
37907: LD_VAR 0 14
37911: PUSH
37912: LD_VAR 0 9
37916: ARRAY
37917: PUSH
37918: LD_INT 2
37920: ARRAY
37921: PPUSH
37922: CALL_OW 428
37926: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37927: LD_VAR 0 14
37931: PUSH
37932: LD_VAR 0 9
37936: ARRAY
37937: PUSH
37938: LD_INT 1
37940: ARRAY
37941: PPUSH
37942: LD_VAR 0 14
37946: PUSH
37947: LD_VAR 0 9
37951: ARRAY
37952: PUSH
37953: LD_INT 2
37955: ARRAY
37956: PPUSH
37957: CALL_OW 351
37961: PUSH
37962: LD_VAR 0 14
37966: PUSH
37967: LD_VAR 0 9
37971: ARRAY
37972: PUSH
37973: LD_INT 1
37975: ARRAY
37976: PPUSH
37977: LD_VAR 0 14
37981: PUSH
37982: LD_VAR 0 9
37986: ARRAY
37987: PUSH
37988: LD_INT 2
37990: ARRAY
37991: PPUSH
37992: CALL_OW 488
37996: NOT
37997: OR
37998: PUSH
37999: LD_VAR 0 13
38003: PPUSH
38004: CALL_OW 247
38008: PUSH
38009: LD_INT 3
38011: EQUAL
38012: OR
38013: IFFALSE 38019
// exit ;
38015: POP
38016: POP
38017: GO 38563
// if not tmp then
38019: LD_VAR 0 13
38023: NOT
38024: IFFALSE 38028
// continue ;
38026: GO 37884
// result := true ;
38028: LD_ADDR_VAR 0 8
38032: PUSH
38033: LD_INT 1
38035: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38036: LD_VAR 0 6
38040: PUSH
38041: LD_VAR 0 13
38045: PPUSH
38046: CALL_OW 247
38050: PUSH
38051: LD_INT 2
38053: EQUAL
38054: AND
38055: PUSH
38056: LD_VAR 0 13
38060: PPUSH
38061: CALL_OW 263
38065: PUSH
38066: LD_INT 1
38068: EQUAL
38069: AND
38070: IFFALSE 38234
// begin if IsDrivenBy ( tmp ) then
38072: LD_VAR 0 13
38076: PPUSH
38077: CALL_OW 311
38081: IFFALSE 38085
// continue ;
38083: GO 37884
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38085: LD_VAR 0 6
38089: PPUSH
38090: LD_INT 3
38092: PUSH
38093: LD_INT 60
38095: PUSH
38096: EMPTY
38097: LIST
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 3
38105: PUSH
38106: LD_INT 55
38108: PUSH
38109: EMPTY
38110: LIST
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PPUSH
38120: CALL_OW 72
38124: IFFALSE 38232
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38126: LD_ADDR_VAR 0 18
38130: PUSH
38131: LD_VAR 0 6
38135: PPUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 60
38141: PUSH
38142: EMPTY
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 55
38154: PUSH
38155: EMPTY
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PPUSH
38166: CALL_OW 72
38170: PUSH
38171: LD_INT 1
38173: ARRAY
38174: ST_TO_ADDR
// if IsInUnit ( driver ) then
38175: LD_VAR 0 18
38179: PPUSH
38180: CALL_OW 310
38184: IFFALSE 38195
// ComExit ( driver ) ;
38186: LD_VAR 0 18
38190: PPUSH
38191: CALL 62984 0 1
// AddComEnterUnit ( driver , tmp ) ;
38195: LD_VAR 0 18
38199: PPUSH
38200: LD_VAR 0 13
38204: PPUSH
38205: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38209: LD_VAR 0 18
38213: PPUSH
38214: LD_VAR 0 7
38218: PPUSH
38219: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38223: LD_VAR 0 18
38227: PPUSH
38228: CALL_OW 181
// end ; continue ;
38232: GO 37884
// end ; if not cleaners or not tmp in cleaners then
38234: LD_VAR 0 6
38238: NOT
38239: PUSH
38240: LD_VAR 0 13
38244: PUSH
38245: LD_VAR 0 6
38249: IN
38250: NOT
38251: OR
38252: IFFALSE 38559
// begin if dep then
38254: LD_VAR 0 17
38258: IFFALSE 38394
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38260: LD_ADDR_VAR 0 16
38264: PUSH
38265: LD_VAR 0 17
38269: PUSH
38270: LD_INT 1
38272: ARRAY
38273: PPUSH
38274: CALL_OW 250
38278: PPUSH
38279: LD_VAR 0 17
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PPUSH
38288: CALL_OW 254
38292: PPUSH
38293: LD_INT 5
38295: PPUSH
38296: CALL_OW 272
38300: PUSH
38301: LD_VAR 0 17
38305: PUSH
38306: LD_INT 1
38308: ARRAY
38309: PPUSH
38310: CALL_OW 251
38314: PPUSH
38315: LD_VAR 0 17
38319: PUSH
38320: LD_INT 1
38322: ARRAY
38323: PPUSH
38324: CALL_OW 254
38328: PPUSH
38329: LD_INT 5
38331: PPUSH
38332: CALL_OW 273
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38341: LD_VAR 0 16
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: PPUSH
38350: LD_VAR 0 16
38354: PUSH
38355: LD_INT 2
38357: ARRAY
38358: PPUSH
38359: CALL_OW 488
38363: IFFALSE 38394
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38365: LD_VAR 0 13
38369: PPUSH
38370: LD_VAR 0 16
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PPUSH
38379: LD_VAR 0 16
38383: PUSH
38384: LD_INT 2
38386: ARRAY
38387: PPUSH
38388: CALL_OW 111
// continue ;
38392: GO 37884
// end ; end ; r := GetDir ( tmp ) ;
38394: LD_ADDR_VAR 0 15
38398: PUSH
38399: LD_VAR 0 13
38403: PPUSH
38404: CALL_OW 254
38408: ST_TO_ADDR
// if r = 5 then
38409: LD_VAR 0 15
38413: PUSH
38414: LD_INT 5
38416: EQUAL
38417: IFFALSE 38427
// r := 0 ;
38419: LD_ADDR_VAR 0 15
38423: PUSH
38424: LD_INT 0
38426: ST_TO_ADDR
// for j = r to 5 do
38427: LD_ADDR_VAR 0 10
38431: PUSH
38432: DOUBLE
38433: LD_VAR 0 15
38437: DEC
38438: ST_TO_ADDR
38439: LD_INT 5
38441: PUSH
38442: FOR_TO
38443: IFFALSE 38557
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38445: LD_ADDR_VAR 0 11
38449: PUSH
38450: LD_VAR 0 13
38454: PPUSH
38455: CALL_OW 250
38459: PPUSH
38460: LD_VAR 0 10
38464: PPUSH
38465: LD_INT 2
38467: PPUSH
38468: CALL_OW 272
38472: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38473: LD_ADDR_VAR 0 12
38477: PUSH
38478: LD_VAR 0 13
38482: PPUSH
38483: CALL_OW 251
38487: PPUSH
38488: LD_VAR 0 10
38492: PPUSH
38493: LD_INT 2
38495: PPUSH
38496: CALL_OW 273
38500: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38501: LD_VAR 0 11
38505: PPUSH
38506: LD_VAR 0 12
38510: PPUSH
38511: CALL_OW 488
38515: PUSH
38516: LD_VAR 0 11
38520: PPUSH
38521: LD_VAR 0 12
38525: PPUSH
38526: CALL_OW 428
38530: NOT
38531: AND
38532: IFFALSE 38555
// begin ComMoveXY ( tmp , _x , _y ) ;
38534: LD_VAR 0 13
38538: PPUSH
38539: LD_VAR 0 11
38543: PPUSH
38544: LD_VAR 0 12
38548: PPUSH
38549: CALL_OW 111
// break ;
38553: GO 38557
// end ; end ;
38555: GO 38442
38557: POP
38558: POP
// end ; end ;
38559: GO 37884
38561: POP
38562: POP
// end ;
38563: LD_VAR 0 8
38567: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38568: LD_INT 0
38570: PPUSH
// result := true ;
38571: LD_ADDR_VAR 0 3
38575: PUSH
38576: LD_INT 1
38578: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38579: LD_VAR 0 2
38583: PUSH
38584: LD_INT 24
38586: DOUBLE
38587: EQUAL
38588: IFTRUE 38598
38590: LD_INT 33
38592: DOUBLE
38593: EQUAL
38594: IFTRUE 38598
38596: GO 38623
38598: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38599: LD_ADDR_VAR 0 3
38603: PUSH
38604: LD_INT 32
38606: PPUSH
38607: LD_VAR 0 1
38611: PPUSH
38612: CALL_OW 321
38616: PUSH
38617: LD_INT 2
38619: EQUAL
38620: ST_TO_ADDR
38621: GO 38943
38623: LD_INT 20
38625: DOUBLE
38626: EQUAL
38627: IFTRUE 38631
38629: GO 38656
38631: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38632: LD_ADDR_VAR 0 3
38636: PUSH
38637: LD_INT 6
38639: PPUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 321
38649: PUSH
38650: LD_INT 2
38652: EQUAL
38653: ST_TO_ADDR
38654: GO 38943
38656: LD_INT 22
38658: DOUBLE
38659: EQUAL
38660: IFTRUE 38670
38662: LD_INT 36
38664: DOUBLE
38665: EQUAL
38666: IFTRUE 38670
38668: GO 38695
38670: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38671: LD_ADDR_VAR 0 3
38675: PUSH
38676: LD_INT 15
38678: PPUSH
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 321
38688: PUSH
38689: LD_INT 2
38691: EQUAL
38692: ST_TO_ADDR
38693: GO 38943
38695: LD_INT 30
38697: DOUBLE
38698: EQUAL
38699: IFTRUE 38703
38701: GO 38728
38703: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38704: LD_ADDR_VAR 0 3
38708: PUSH
38709: LD_INT 20
38711: PPUSH
38712: LD_VAR 0 1
38716: PPUSH
38717: CALL_OW 321
38721: PUSH
38722: LD_INT 2
38724: EQUAL
38725: ST_TO_ADDR
38726: GO 38943
38728: LD_INT 28
38730: DOUBLE
38731: EQUAL
38732: IFTRUE 38742
38734: LD_INT 21
38736: DOUBLE
38737: EQUAL
38738: IFTRUE 38742
38740: GO 38767
38742: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_INT 21
38750: PPUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 321
38760: PUSH
38761: LD_INT 2
38763: EQUAL
38764: ST_TO_ADDR
38765: GO 38943
38767: LD_INT 16
38769: DOUBLE
38770: EQUAL
38771: IFTRUE 38775
38773: GO 38802
38775: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38776: LD_ADDR_VAR 0 3
38780: PUSH
38781: LD_EXP 41
38785: PPUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: CALL_OW 321
38795: PUSH
38796: LD_INT 2
38798: EQUAL
38799: ST_TO_ADDR
38800: GO 38943
38802: LD_INT 19
38804: DOUBLE
38805: EQUAL
38806: IFTRUE 38816
38808: LD_INT 23
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38816
38814: GO 38843
38816: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38817: LD_ADDR_VAR 0 3
38821: PUSH
38822: LD_EXP 40
38826: PPUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 321
38836: PUSH
38837: LD_INT 2
38839: EQUAL
38840: ST_TO_ADDR
38841: GO 38943
38843: LD_INT 17
38845: DOUBLE
38846: EQUAL
38847: IFTRUE 38851
38849: GO 38876
38851: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38852: LD_ADDR_VAR 0 3
38856: PUSH
38857: LD_INT 39
38859: PPUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 321
38869: PUSH
38870: LD_INT 2
38872: EQUAL
38873: ST_TO_ADDR
38874: GO 38943
38876: LD_INT 18
38878: DOUBLE
38879: EQUAL
38880: IFTRUE 38884
38882: GO 38909
38884: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38885: LD_ADDR_VAR 0 3
38889: PUSH
38890: LD_INT 40
38892: PPUSH
38893: LD_VAR 0 1
38897: PPUSH
38898: CALL_OW 321
38902: PUSH
38903: LD_INT 2
38905: EQUAL
38906: ST_TO_ADDR
38907: GO 38943
38909: LD_INT 27
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38942
38917: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38918: LD_ADDR_VAR 0 3
38922: PUSH
38923: LD_INT 35
38925: PPUSH
38926: LD_VAR 0 1
38930: PPUSH
38931: CALL_OW 321
38935: PUSH
38936: LD_INT 2
38938: EQUAL
38939: ST_TO_ADDR
38940: GO 38943
38942: POP
// end ;
38943: LD_VAR 0 3
38947: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38948: LD_INT 0
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
// result := false ;
38961: LD_ADDR_VAR 0 6
38965: PUSH
38966: LD_INT 0
38968: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38969: LD_VAR 0 1
38973: NOT
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 266
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: IN
38995: NOT
38996: OR
38997: PUSH
38998: LD_VAR 0 2
39002: NOT
39003: OR
39004: PUSH
39005: LD_VAR 0 5
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: LD_INT 5
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: IN
39036: NOT
39037: OR
39038: PUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: LD_VAR 0 4
39048: PPUSH
39049: CALL_OW 488
39053: NOT
39054: OR
39055: IFFALSE 39059
// exit ;
39057: GO 39795
// side := GetSide ( depot ) ;
39059: LD_ADDR_VAR 0 9
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 255
39073: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39074: LD_VAR 0 9
39078: PPUSH
39079: LD_VAR 0 2
39083: PPUSH
39084: CALL 38568 0 2
39088: NOT
39089: IFFALSE 39093
// exit ;
39091: GO 39795
// pom := GetBase ( depot ) ;
39093: LD_ADDR_VAR 0 10
39097: PUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 274
39107: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39108: LD_ADDR_VAR 0 11
39112: PUSH
39113: LD_VAR 0 2
39117: PPUSH
39118: LD_VAR 0 1
39122: PPUSH
39123: CALL_OW 248
39127: PPUSH
39128: CALL_OW 450
39132: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39133: LD_VAR 0 10
39137: PPUSH
39138: LD_INT 1
39140: PPUSH
39141: CALL_OW 275
39145: PUSH
39146: LD_VAR 0 11
39150: PUSH
39151: LD_INT 1
39153: ARRAY
39154: GREATEREQUAL
39155: PUSH
39156: LD_VAR 0 10
39160: PPUSH
39161: LD_INT 2
39163: PPUSH
39164: CALL_OW 275
39168: PUSH
39169: LD_VAR 0 11
39173: PUSH
39174: LD_INT 2
39176: ARRAY
39177: GREATEREQUAL
39178: AND
39179: PUSH
39180: LD_VAR 0 10
39184: PPUSH
39185: LD_INT 3
39187: PPUSH
39188: CALL_OW 275
39192: PUSH
39193: LD_VAR 0 11
39197: PUSH
39198: LD_INT 3
39200: ARRAY
39201: GREATEREQUAL
39202: AND
39203: NOT
39204: IFFALSE 39208
// exit ;
39206: GO 39795
// if GetBType ( depot ) = b_depot then
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 266
39217: PUSH
39218: LD_INT 0
39220: EQUAL
39221: IFFALSE 39233
// dist := 28 else
39223: LD_ADDR_VAR 0 14
39227: PUSH
39228: LD_INT 28
39230: ST_TO_ADDR
39231: GO 39241
// dist := 36 ;
39233: LD_ADDR_VAR 0 14
39237: PUSH
39238: LD_INT 36
39240: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39241: LD_VAR 0 1
39245: PPUSH
39246: LD_VAR 0 3
39250: PPUSH
39251: LD_VAR 0 4
39255: PPUSH
39256: CALL_OW 297
39260: PUSH
39261: LD_VAR 0 14
39265: GREATER
39266: IFFALSE 39270
// exit ;
39268: GO 39795
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39270: LD_ADDR_VAR 0 12
39274: PUSH
39275: LD_VAR 0 2
39279: PPUSH
39280: LD_VAR 0 3
39284: PPUSH
39285: LD_VAR 0 4
39289: PPUSH
39290: LD_VAR 0 5
39294: PPUSH
39295: LD_VAR 0 1
39299: PPUSH
39300: CALL_OW 248
39304: PPUSH
39305: LD_INT 0
39307: PPUSH
39308: CALL 39800 0 6
39312: ST_TO_ADDR
// if not hexes then
39313: LD_VAR 0 12
39317: NOT
39318: IFFALSE 39322
// exit ;
39320: GO 39795
// hex := GetHexInfo ( x , y ) ;
39322: LD_ADDR_VAR 0 15
39326: PUSH
39327: LD_VAR 0 3
39331: PPUSH
39332: LD_VAR 0 4
39336: PPUSH
39337: CALL_OW 546
39341: ST_TO_ADDR
// if hex [ 1 ] then
39342: LD_VAR 0 15
39346: PUSH
39347: LD_INT 1
39349: ARRAY
39350: IFFALSE 39354
// exit ;
39352: GO 39795
// height := hex [ 2 ] ;
39354: LD_ADDR_VAR 0 13
39358: PUSH
39359: LD_VAR 0 15
39363: PUSH
39364: LD_INT 2
39366: ARRAY
39367: ST_TO_ADDR
// for i = 1 to hexes do
39368: LD_ADDR_VAR 0 7
39372: PUSH
39373: DOUBLE
39374: LD_INT 1
39376: DEC
39377: ST_TO_ADDR
39378: LD_VAR 0 12
39382: PUSH
39383: FOR_TO
39384: IFFALSE 39714
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39386: LD_VAR 0 12
39390: PUSH
39391: LD_VAR 0 7
39395: ARRAY
39396: PUSH
39397: LD_INT 1
39399: ARRAY
39400: PPUSH
39401: LD_VAR 0 12
39405: PUSH
39406: LD_VAR 0 7
39410: ARRAY
39411: PUSH
39412: LD_INT 2
39414: ARRAY
39415: PPUSH
39416: CALL_OW 488
39420: NOT
39421: PUSH
39422: LD_VAR 0 12
39426: PUSH
39427: LD_VAR 0 7
39431: ARRAY
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: PPUSH
39437: LD_VAR 0 12
39441: PUSH
39442: LD_VAR 0 7
39446: ARRAY
39447: PUSH
39448: LD_INT 2
39450: ARRAY
39451: PPUSH
39452: CALL_OW 428
39456: PUSH
39457: LD_INT 0
39459: GREATER
39460: OR
39461: PUSH
39462: LD_VAR 0 12
39466: PUSH
39467: LD_VAR 0 7
39471: ARRAY
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: PPUSH
39477: LD_VAR 0 12
39481: PUSH
39482: LD_VAR 0 7
39486: ARRAY
39487: PUSH
39488: LD_INT 2
39490: ARRAY
39491: PPUSH
39492: CALL_OW 351
39496: OR
39497: IFFALSE 39503
// exit ;
39499: POP
39500: POP
39501: GO 39795
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39503: LD_ADDR_VAR 0 8
39507: PUSH
39508: LD_VAR 0 12
39512: PUSH
39513: LD_VAR 0 7
39517: ARRAY
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 12
39527: PUSH
39528: LD_VAR 0 7
39532: ARRAY
39533: PUSH
39534: LD_INT 2
39536: ARRAY
39537: PPUSH
39538: CALL_OW 546
39542: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39543: LD_VAR 0 8
39547: PUSH
39548: LD_INT 1
39550: ARRAY
39551: PUSH
39552: LD_VAR 0 8
39556: PUSH
39557: LD_INT 2
39559: ARRAY
39560: PUSH
39561: LD_VAR 0 13
39565: PUSH
39566: LD_INT 2
39568: PLUS
39569: GREATER
39570: OR
39571: PUSH
39572: LD_VAR 0 8
39576: PUSH
39577: LD_INT 2
39579: ARRAY
39580: PUSH
39581: LD_VAR 0 13
39585: PUSH
39586: LD_INT 2
39588: MINUS
39589: LESS
39590: OR
39591: PUSH
39592: LD_VAR 0 8
39596: PUSH
39597: LD_INT 3
39599: ARRAY
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 8
39606: PUSH
39607: LD_INT 9
39609: PUSH
39610: LD_INT 10
39612: PUSH
39613: LD_INT 11
39615: PUSH
39616: LD_INT 12
39618: PUSH
39619: LD_INT 13
39621: PUSH
39622: LD_INT 16
39624: PUSH
39625: LD_INT 17
39627: PUSH
39628: LD_INT 18
39630: PUSH
39631: LD_INT 19
39633: PUSH
39634: LD_INT 20
39636: PUSH
39637: LD_INT 21
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: IN
39655: NOT
39656: OR
39657: PUSH
39658: LD_VAR 0 8
39662: PUSH
39663: LD_INT 5
39665: ARRAY
39666: NOT
39667: OR
39668: PUSH
39669: LD_VAR 0 8
39673: PUSH
39674: LD_INT 6
39676: ARRAY
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 7
39686: PUSH
39687: LD_INT 9
39689: PUSH
39690: LD_INT 10
39692: PUSH
39693: LD_INT 11
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: IN
39704: NOT
39705: OR
39706: IFFALSE 39712
// exit ;
39708: POP
39709: POP
39710: GO 39795
// end ;
39712: GO 39383
39714: POP
39715: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39716: LD_VAR 0 9
39720: PPUSH
39721: LD_VAR 0 3
39725: PPUSH
39726: LD_VAR 0 4
39730: PPUSH
39731: LD_INT 20
39733: PPUSH
39734: CALL 31741 0 4
39738: PUSH
39739: LD_INT 4
39741: ARRAY
39742: IFFALSE 39746
// exit ;
39744: GO 39795
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39746: LD_VAR 0 2
39750: PUSH
39751: LD_INT 29
39753: PUSH
39754: LD_INT 30
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: IN
39761: PUSH
39762: LD_VAR 0 3
39766: PPUSH
39767: LD_VAR 0 4
39771: PPUSH
39772: LD_VAR 0 9
39776: PPUSH
39777: CALL_OW 440
39781: NOT
39782: AND
39783: IFFALSE 39787
// exit ;
39785: GO 39795
// result := true ;
39787: LD_ADDR_VAR 0 6
39791: PUSH
39792: LD_INT 1
39794: ST_TO_ADDR
// end ;
39795: LD_VAR 0 6
39799: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39800: LD_INT 0
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
// result = [ ] ;
39860: LD_ADDR_VAR 0 7
39864: PUSH
39865: EMPTY
39866: ST_TO_ADDR
// temp_list = [ ] ;
39867: LD_ADDR_VAR 0 9
39871: PUSH
39872: EMPTY
39873: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39874: LD_VAR 0 4
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: LD_INT 4
39893: PUSH
39894: LD_INT 5
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: IN
39905: NOT
39906: PUSH
39907: LD_VAR 0 1
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: IN
39922: PUSH
39923: LD_VAR 0 5
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: IN
39942: NOT
39943: AND
39944: OR
39945: IFFALSE 39949
// exit ;
39947: GO 58340
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39949: LD_VAR 0 1
39953: PUSH
39954: LD_INT 6
39956: PUSH
39957: LD_INT 7
39959: PUSH
39960: LD_INT 8
39962: PUSH
39963: LD_INT 13
39965: PUSH
39966: LD_INT 12
39968: PUSH
39969: LD_INT 15
39971: PUSH
39972: LD_INT 11
39974: PUSH
39975: LD_INT 14
39977: PUSH
39978: LD_INT 10
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: IN
39992: IFFALSE 40002
// btype = b_lab ;
39994: LD_ADDR_VAR 0 1
39998: PUSH
39999: LD_INT 6
40001: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40002: LD_VAR 0 6
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: IN
40021: NOT
40022: PUSH
40023: LD_VAR 0 1
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: LD_INT 3
40039: PUSH
40040: LD_INT 6
40042: PUSH
40043: LD_INT 36
40045: PUSH
40046: LD_INT 4
40048: PUSH
40049: LD_INT 5
40051: PUSH
40052: LD_INT 31
40054: PUSH
40055: LD_INT 32
40057: PUSH
40058: LD_INT 33
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: IN
40074: NOT
40075: PUSH
40076: LD_VAR 0 6
40080: PUSH
40081: LD_INT 1
40083: EQUAL
40084: AND
40085: OR
40086: PUSH
40087: LD_VAR 0 1
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 3
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: IN
40102: NOT
40103: PUSH
40104: LD_VAR 0 6
40108: PUSH
40109: LD_INT 2
40111: EQUAL
40112: AND
40113: OR
40114: IFFALSE 40124
// mode = 0 ;
40116: LD_ADDR_VAR 0 6
40120: PUSH
40121: LD_INT 0
40123: ST_TO_ADDR
// case mode of 0 :
40124: LD_VAR 0 6
40128: PUSH
40129: LD_INT 0
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 51590
40137: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40138: LD_ADDR_VAR 0 11
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 3
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40331: LD_ADDR_VAR 0 12
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40527: LD_ADDR_VAR 0 13
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 3
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: NEG
40699: PUSH
40700: LD_INT 3
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40726: LD_ADDR_VAR 0 14
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 3
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 3
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40922: LD_ADDR_VAR 0 15
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41115: LD_ADDR_VAR 0 16
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 3
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41308: LD_ADDR_VAR 0 17
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41538: LD_ADDR_VAR 0 18
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41768: LD_ADDR_VAR 0 19
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41998: LD_ADDR_VAR 0 20
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42228: LD_ADDR_VAR 0 21
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42458: LD_ADDR_VAR 0 22
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42688: LD_ADDR_VAR 0 23
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 3
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 3
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42968: LD_ADDR_VAR 0 24
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: NEG
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43244: LD_ADDR_VAR 0 25
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43518: LD_ADDR_VAR 0 26
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43794: LD_ADDR_VAR 0 27
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44074: LD_ADDR_VAR 0 28
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 3
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 3
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 3
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44356: LD_ADDR_VAR 0 29
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 3
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 3
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 3
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44635: LD_ADDR_VAR 0 30
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 3
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44913: LD_ADDR_VAR 0 31
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 3
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 3
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 3
45156: NEG
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45191: LD_ADDR_VAR 0 32
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45469: LD_ADDR_VAR 0 33
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 3
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 3
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45748: LD_ADDR_VAR 0 34
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 3
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46028: LD_ADDR_VAR 0 35
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46140: LD_ADDR_VAR 0 36
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46252: LD_ADDR_VAR 0 37
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46364: LD_ADDR_VAR 0 38
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46476: LD_ADDR_VAR 0 39
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46588: LD_ADDR_VAR 0 40
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46700: LD_ADDR_VAR 0 41
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47050: LD_ADDR_VAR 0 42
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 3
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 3
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: LD_INT 3
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47400: LD_ADDR_VAR 0 43
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 3
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47748: LD_ADDR_VAR 0 44
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 3
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48098: LD_ADDR_VAR 0 45
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48448: LD_ADDR_VAR 0 46
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 3
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48796: LD_ADDR_VAR 0 47
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48947: LD_ADDR_VAR 0 48
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49094: LD_ADDR_VAR 0 49
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49238: LD_ADDR_VAR 0 50
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49382: LD_ADDR_VAR 0 51
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49529: LD_ADDR_VAR 0 52
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49680: LD_ADDR_VAR 0 53
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49910: LD_ADDR_VAR 0 54
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50140: LD_ADDR_VAR 0 55
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50370: LD_ADDR_VAR 0 56
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50600: LD_ADDR_VAR 0 57
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50830: LD_ADDR_VAR 0 58
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51060: LD_ADDR_VAR 0 59
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51148: LD_ADDR_VAR 0 60
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51236: LD_ADDR_VAR 0 61
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51324: LD_ADDR_VAR 0 62
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51412: LD_ADDR_VAR 0 63
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51500: LD_ADDR_VAR 0 64
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// end ; 1 :
51588: GO 57485
51590: LD_INT 1
51592: DOUBLE
51593: EQUAL
51594: IFTRUE 51598
51596: GO 54221
51598: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51599: LD_ADDR_VAR 0 11
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51643: LD_ADDR_VAR 0 12
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: LIST
51683: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51684: LD_ADDR_VAR 0 13
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51724: LD_ADDR_VAR 0 14
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 3
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51765: LD_ADDR_VAR 0 15
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51809: LD_ADDR_VAR 0 16
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51855: LD_ADDR_VAR 0 17
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51899: LD_ADDR_VAR 0 18
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51940: LD_ADDR_VAR 0 19
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51980: LD_ADDR_VAR 0 20
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: LIST
52020: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52021: LD_ADDR_VAR 0 21
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52065: LD_ADDR_VAR 0 22
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52111: LD_ADDR_VAR 0 23
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 4
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52155: LD_ADDR_VAR 0 24
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 4
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52196: LD_ADDR_VAR 0 25
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 4
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: LD_INT 4
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52236: LD_ADDR_VAR 0 26
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 4
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52277: LD_ADDR_VAR 0 27
52281: PUSH
52282: LD_INT 3
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 4
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52321: LD_ADDR_VAR 0 28
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: LD_INT 4
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 4
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52367: LD_ADDR_VAR 0 29
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 4
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 4
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 3
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 5
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 5
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 4
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 6
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 6
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 5
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52522: LD_ADDR_VAR 0 30
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 4
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 4
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 5
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 5
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 5
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 6
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 6
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52665: LD_ADDR_VAR 0 31
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 4
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 4
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: LD_INT 4
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 5
52732: PUSH
52733: LD_INT 4
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 5
52742: PUSH
52743: LD_INT 5
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: LD_INT 5
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 6
52762: PUSH
52763: LD_INT 5
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 6
52772: PUSH
52773: LD_INT 6
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 5
52782: PUSH
52783: LD_INT 6
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52804: LD_ADDR_VAR 0 32
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 4
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 4
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 5
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 5
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 4
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 6
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 6
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 5
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52947: LD_ADDR_VAR 0 33
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 3
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 4
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 4
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 5
53033: NEG
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 5
53044: NEG
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 5
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 6
53067: NEG
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 6
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53102: LD_ADDR_VAR 0 34
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 4
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 4
53157: NEG
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 4
53169: NEG
53170: PUSH
53171: LD_INT 4
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: NEG
53182: PUSH
53183: LD_INT 5
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 5
53193: NEG
53194: PUSH
53195: LD_INT 4
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 5
53205: NEG
53206: PUSH
53207: LD_INT 5
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 5
53217: NEG
53218: PUSH
53219: LD_INT 6
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 6
53229: NEG
53230: PUSH
53231: LD_INT 5
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 6
53241: NEG
53242: PUSH
53243: LD_INT 6
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53265: LD_ADDR_VAR 0 41
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53309: LD_ADDR_VAR 0 42
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53350: LD_ADDR_VAR 0 43
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53390: LD_ADDR_VAR 0 44
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53431: LD_ADDR_VAR 0 45
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53475: LD_ADDR_VAR 0 46
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53521: LD_ADDR_VAR 0 47
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53554: LD_ADDR_VAR 0 48
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53585: LD_ADDR_VAR 0 49
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53614: LD_ADDR_VAR 0 50
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53643: LD_ADDR_VAR 0 51
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53674: LD_ADDR_VAR 0 52
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53707: LD_ADDR_VAR 0 53
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: LIST
53750: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53751: LD_ADDR_VAR 0 54
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53792: LD_ADDR_VAR 0 55
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53832: LD_ADDR_VAR 0 56
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53873: LD_ADDR_VAR 0 57
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53917: LD_ADDR_VAR 0 58
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53963: LD_ADDR_VAR 0 59
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54007: LD_ADDR_VAR 0 60
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54048: LD_ADDR_VAR 0 61
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54088: LD_ADDR_VAR 0 62
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54129: LD_ADDR_VAR 0 63
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54173: LD_ADDR_VAR 0 64
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: ST_TO_ADDR
// end ; 2 :
54219: GO 57485
54221: LD_INT 2
54223: DOUBLE
54224: EQUAL
54225: IFTRUE 54229
54227: GO 57484
54229: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54230: LD_ADDR_VAR 0 29
54234: PUSH
54235: LD_INT 4
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 5
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 5
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 5
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: PUSH
54351: LD_INT 3
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 4
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 4
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 4
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 4
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 5
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 5
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 4
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 5
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: NEG
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 4
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 4
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 4
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 4
54615: NEG
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: NEG
54628: PUSH
54629: LD_INT 5
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 5
54675: NEG
54676: PUSH
54677: LD_INT 4
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 5
54687: NEG
54688: PUSH
54689: LD_INT 5
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 5
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: NEG
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54768: LD_ADDR_VAR 0 30
54772: PUSH
54773: LD_INT 4
54775: PUSH
54776: LD_INT 4
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 5
54795: PUSH
54796: LD_INT 4
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 5
54805: PUSH
54806: LD_INT 5
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 4
54815: PUSH
54816: LD_INT 5
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 5
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: LD_INT 5
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 4
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 4
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 4
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 4
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 4
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 3
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 4
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 5
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 5
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: LD_INT 4
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 4
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 4
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 5
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 4
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 4
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 5
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 5
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55315: LD_ADDR_VAR 0 31
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 3
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 4
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 5
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 5
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 4
55471: NEG
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 4
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: NEG
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 4
55529: NEG
55530: PUSH
55531: LD_INT 5
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 5
55577: NEG
55578: PUSH
55579: LD_INT 4
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 5
55589: NEG
55590: PUSH
55591: LD_INT 5
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 5
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 5
55613: NEG
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 3
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 4
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 4
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 4
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 5
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55865: LD_ADDR_VAR 0 32
55869: PUSH
55870: LD_INT 4
55872: NEG
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 4
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 4
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 5
55928: NEG
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 5
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 5
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 4
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 4
56034: NEG
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 4
56046: NEG
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: LD_INT 4
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 5
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: LD_INT 4
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 4
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 5
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: LD_INT 5
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 4
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: LD_INT 4
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 4
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 5
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: PUSH
56308: LD_INT 5
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: LD_INT 5
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: LD_INT 3
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 5
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56412: LD_ADDR_VAR 0 33
56416: PUSH
56417: LD_INT 4
56419: NEG
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: NEG
56432: PUSH
56433: LD_INT 5
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 5
56479: NEG
56480: PUSH
56481: LD_INT 4
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 5
56491: NEG
56492: PUSH
56493: LD_INT 5
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 5
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 5
56515: NEG
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 4
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 4
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 4
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 5
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 5
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 4
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 5
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 4
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 4
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: LD_INT 4
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 4
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 4
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 4
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 5
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 5
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 4
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 5
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56950: LD_ADDR_VAR 0 34
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 5
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 4
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 4
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 5
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: LD_INT 5
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 4
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 4
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 4
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 4
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 5
57172: PUSH
57173: LD_INT 4
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 5
57182: PUSH
57183: LD_INT 5
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: PUSH
57193: LD_INT 5
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 5
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 5
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 4
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 4
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 4
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 5
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 5
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 5
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: ST_TO_ADDR
// end ; end ;
57482: GO 57485
57484: POP
// case btype of b_depot , b_warehouse :
57485: LD_VAR 0 1
57489: PUSH
57490: LD_INT 0
57492: DOUBLE
57493: EQUAL
57494: IFTRUE 57504
57496: LD_INT 1
57498: DOUBLE
57499: EQUAL
57500: IFTRUE 57504
57502: GO 57705
57504: POP
// case nation of nation_american :
57505: LD_VAR 0 5
57509: PUSH
57510: LD_INT 1
57512: DOUBLE
57513: EQUAL
57514: IFTRUE 57518
57516: GO 57574
57518: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57519: LD_ADDR_VAR 0 9
57523: PUSH
57524: LD_VAR 0 11
57528: PUSH
57529: LD_VAR 0 12
57533: PUSH
57534: LD_VAR 0 13
57538: PUSH
57539: LD_VAR 0 14
57543: PUSH
57544: LD_VAR 0 15
57548: PUSH
57549: LD_VAR 0 16
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: PUSH
57562: LD_VAR 0 4
57566: PUSH
57567: LD_INT 1
57569: PLUS
57570: ARRAY
57571: ST_TO_ADDR
57572: GO 57703
57574: LD_INT 2
57576: DOUBLE
57577: EQUAL
57578: IFTRUE 57582
57580: GO 57638
57582: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57583: LD_ADDR_VAR 0 9
57587: PUSH
57588: LD_VAR 0 17
57592: PUSH
57593: LD_VAR 0 18
57597: PUSH
57598: LD_VAR 0 19
57602: PUSH
57603: LD_VAR 0 20
57607: PUSH
57608: LD_VAR 0 21
57612: PUSH
57613: LD_VAR 0 22
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: PUSH
57626: LD_VAR 0 4
57630: PUSH
57631: LD_INT 1
57633: PLUS
57634: ARRAY
57635: ST_TO_ADDR
57636: GO 57703
57638: LD_INT 3
57640: DOUBLE
57641: EQUAL
57642: IFTRUE 57646
57644: GO 57702
57646: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57647: LD_ADDR_VAR 0 9
57651: PUSH
57652: LD_VAR 0 23
57656: PUSH
57657: LD_VAR 0 24
57661: PUSH
57662: LD_VAR 0 25
57666: PUSH
57667: LD_VAR 0 26
57671: PUSH
57672: LD_VAR 0 27
57676: PUSH
57677: LD_VAR 0 28
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: PUSH
57690: LD_VAR 0 4
57694: PUSH
57695: LD_INT 1
57697: PLUS
57698: ARRAY
57699: ST_TO_ADDR
57700: GO 57703
57702: POP
57703: GO 58258
57705: LD_INT 2
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57719
57711: LD_INT 3
57713: DOUBLE
57714: EQUAL
57715: IFTRUE 57719
57717: GO 57775
57719: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57720: LD_ADDR_VAR 0 9
57724: PUSH
57725: LD_VAR 0 29
57729: PUSH
57730: LD_VAR 0 30
57734: PUSH
57735: LD_VAR 0 31
57739: PUSH
57740: LD_VAR 0 32
57744: PUSH
57745: LD_VAR 0 33
57749: PUSH
57750: LD_VAR 0 34
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: PUSH
57763: LD_VAR 0 4
57767: PUSH
57768: LD_INT 1
57770: PLUS
57771: ARRAY
57772: ST_TO_ADDR
57773: GO 58258
57775: LD_INT 16
57777: DOUBLE
57778: EQUAL
57779: IFTRUE 57837
57781: LD_INT 17
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57837
57787: LD_INT 18
57789: DOUBLE
57790: EQUAL
57791: IFTRUE 57837
57793: LD_INT 19
57795: DOUBLE
57796: EQUAL
57797: IFTRUE 57837
57799: LD_INT 22
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57837
57805: LD_INT 20
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57837
57811: LD_INT 21
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57837
57817: LD_INT 23
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57837
57823: LD_INT 24
57825: DOUBLE
57826: EQUAL
57827: IFTRUE 57837
57829: LD_INT 25
57831: DOUBLE
57832: EQUAL
57833: IFTRUE 57837
57835: GO 57893
57837: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57838: LD_ADDR_VAR 0 9
57842: PUSH
57843: LD_VAR 0 35
57847: PUSH
57848: LD_VAR 0 36
57852: PUSH
57853: LD_VAR 0 37
57857: PUSH
57858: LD_VAR 0 38
57862: PUSH
57863: LD_VAR 0 39
57867: PUSH
57868: LD_VAR 0 40
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: PUSH
57881: LD_VAR 0 4
57885: PUSH
57886: LD_INT 1
57888: PLUS
57889: ARRAY
57890: ST_TO_ADDR
57891: GO 58258
57893: LD_INT 6
57895: DOUBLE
57896: EQUAL
57897: IFTRUE 57949
57899: LD_INT 7
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57949
57905: LD_INT 8
57907: DOUBLE
57908: EQUAL
57909: IFTRUE 57949
57911: LD_INT 13
57913: DOUBLE
57914: EQUAL
57915: IFTRUE 57949
57917: LD_INT 12
57919: DOUBLE
57920: EQUAL
57921: IFTRUE 57949
57923: LD_INT 15
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57949
57929: LD_INT 11
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57949
57935: LD_INT 14
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57949
57941: LD_INT 10
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57949
57947: GO 58005
57949: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57950: LD_ADDR_VAR 0 9
57954: PUSH
57955: LD_VAR 0 41
57959: PUSH
57960: LD_VAR 0 42
57964: PUSH
57965: LD_VAR 0 43
57969: PUSH
57970: LD_VAR 0 44
57974: PUSH
57975: LD_VAR 0 45
57979: PUSH
57980: LD_VAR 0 46
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: PUSH
57993: LD_VAR 0 4
57997: PUSH
57998: LD_INT 1
58000: PLUS
58001: ARRAY
58002: ST_TO_ADDR
58003: GO 58258
58005: LD_INT 36
58007: DOUBLE
58008: EQUAL
58009: IFTRUE 58013
58011: GO 58069
58013: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58014: LD_ADDR_VAR 0 9
58018: PUSH
58019: LD_VAR 0 47
58023: PUSH
58024: LD_VAR 0 48
58028: PUSH
58029: LD_VAR 0 49
58033: PUSH
58034: LD_VAR 0 50
58038: PUSH
58039: LD_VAR 0 51
58043: PUSH
58044: LD_VAR 0 52
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: PUSH
58057: LD_VAR 0 4
58061: PUSH
58062: LD_INT 1
58064: PLUS
58065: ARRAY
58066: ST_TO_ADDR
58067: GO 58258
58069: LD_INT 4
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58095
58075: LD_INT 5
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58095
58081: LD_INT 34
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58095
58087: LD_INT 37
58089: DOUBLE
58090: EQUAL
58091: IFTRUE 58095
58093: GO 58151
58095: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58096: LD_ADDR_VAR 0 9
58100: PUSH
58101: LD_VAR 0 53
58105: PUSH
58106: LD_VAR 0 54
58110: PUSH
58111: LD_VAR 0 55
58115: PUSH
58116: LD_VAR 0 56
58120: PUSH
58121: LD_VAR 0 57
58125: PUSH
58126: LD_VAR 0 58
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: PUSH
58139: LD_VAR 0 4
58143: PUSH
58144: LD_INT 1
58146: PLUS
58147: ARRAY
58148: ST_TO_ADDR
58149: GO 58258
58151: LD_INT 31
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58201
58157: LD_INT 32
58159: DOUBLE
58160: EQUAL
58161: IFTRUE 58201
58163: LD_INT 33
58165: DOUBLE
58166: EQUAL
58167: IFTRUE 58201
58169: LD_INT 27
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58201
58175: LD_INT 26
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58201
58181: LD_INT 28
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58201
58187: LD_INT 29
58189: DOUBLE
58190: EQUAL
58191: IFTRUE 58201
58193: LD_INT 30
58195: DOUBLE
58196: EQUAL
58197: IFTRUE 58201
58199: GO 58257
58201: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58202: LD_ADDR_VAR 0 9
58206: PUSH
58207: LD_VAR 0 59
58211: PUSH
58212: LD_VAR 0 60
58216: PUSH
58217: LD_VAR 0 61
58221: PUSH
58222: LD_VAR 0 62
58226: PUSH
58227: LD_VAR 0 63
58231: PUSH
58232: LD_VAR 0 64
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: PUSH
58245: LD_VAR 0 4
58249: PUSH
58250: LD_INT 1
58252: PLUS
58253: ARRAY
58254: ST_TO_ADDR
58255: GO 58258
58257: POP
// temp_list2 = [ ] ;
58258: LD_ADDR_VAR 0 10
58262: PUSH
58263: EMPTY
58264: ST_TO_ADDR
// for i in temp_list do
58265: LD_ADDR_VAR 0 8
58269: PUSH
58270: LD_VAR 0 9
58274: PUSH
58275: FOR_IN
58276: IFFALSE 58328
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58278: LD_ADDR_VAR 0 10
58282: PUSH
58283: LD_VAR 0 10
58287: PUSH
58288: LD_VAR 0 8
58292: PUSH
58293: LD_INT 1
58295: ARRAY
58296: PUSH
58297: LD_VAR 0 2
58301: PLUS
58302: PUSH
58303: LD_VAR 0 8
58307: PUSH
58308: LD_INT 2
58310: ARRAY
58311: PUSH
58312: LD_VAR 0 3
58316: PLUS
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: EMPTY
58323: LIST
58324: ADD
58325: ST_TO_ADDR
58326: GO 58275
58328: POP
58329: POP
// result = temp_list2 ;
58330: LD_ADDR_VAR 0 7
58334: PUSH
58335: LD_VAR 0 10
58339: ST_TO_ADDR
// end ;
58340: LD_VAR 0 7
58344: RET
// export function EnemyInRange ( unit , dist ) ; begin
58345: LD_INT 0
58347: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58348: LD_ADDR_VAR 0 3
58352: PUSH
58353: LD_VAR 0 1
58357: PPUSH
58358: CALL_OW 255
58362: PPUSH
58363: LD_VAR 0 1
58367: PPUSH
58368: CALL_OW 250
58372: PPUSH
58373: LD_VAR 0 1
58377: PPUSH
58378: CALL_OW 251
58382: PPUSH
58383: LD_VAR 0 2
58387: PPUSH
58388: CALL 31741 0 4
58392: PUSH
58393: LD_INT 4
58395: ARRAY
58396: ST_TO_ADDR
// end ;
58397: LD_VAR 0 3
58401: RET
// export function PlayerSeeMe ( unit ) ; begin
58402: LD_INT 0
58404: PPUSH
// result := See ( your_side , unit ) ;
58405: LD_ADDR_VAR 0 2
58409: PUSH
58410: LD_OWVAR 2
58414: PPUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: CALL_OW 292
58424: ST_TO_ADDR
// end ;
58425: LD_VAR 0 2
58429: RET
// export function ReverseDir ( unit ) ; begin
58430: LD_INT 0
58432: PPUSH
// if not unit then
58433: LD_VAR 0 1
58437: NOT
58438: IFFALSE 58442
// exit ;
58440: GO 58465
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58442: LD_ADDR_VAR 0 2
58446: PUSH
58447: LD_VAR 0 1
58451: PPUSH
58452: CALL_OW 254
58456: PUSH
58457: LD_INT 3
58459: PLUS
58460: PUSH
58461: LD_INT 6
58463: MOD
58464: ST_TO_ADDR
// end ;
58465: LD_VAR 0 2
58469: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58470: LD_INT 0
58472: PPUSH
58473: PPUSH
58474: PPUSH
58475: PPUSH
58476: PPUSH
// if not hexes then
58477: LD_VAR 0 2
58481: NOT
58482: IFFALSE 58486
// exit ;
58484: GO 58634
// dist := 9999 ;
58486: LD_ADDR_VAR 0 5
58490: PUSH
58491: LD_INT 9999
58493: ST_TO_ADDR
// for i = 1 to hexes do
58494: LD_ADDR_VAR 0 4
58498: PUSH
58499: DOUBLE
58500: LD_INT 1
58502: DEC
58503: ST_TO_ADDR
58504: LD_VAR 0 2
58508: PUSH
58509: FOR_TO
58510: IFFALSE 58622
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58512: LD_VAR 0 1
58516: PPUSH
58517: LD_VAR 0 2
58521: PUSH
58522: LD_VAR 0 4
58526: ARRAY
58527: PUSH
58528: LD_INT 1
58530: ARRAY
58531: PPUSH
58532: LD_VAR 0 2
58536: PUSH
58537: LD_VAR 0 4
58541: ARRAY
58542: PUSH
58543: LD_INT 2
58545: ARRAY
58546: PPUSH
58547: CALL_OW 297
58551: PUSH
58552: LD_VAR 0 5
58556: LESS
58557: IFFALSE 58620
// begin hex := hexes [ i ] ;
58559: LD_ADDR_VAR 0 7
58563: PUSH
58564: LD_VAR 0 2
58568: PUSH
58569: LD_VAR 0 4
58573: ARRAY
58574: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58575: LD_ADDR_VAR 0 5
58579: PUSH
58580: LD_VAR 0 1
58584: PPUSH
58585: LD_VAR 0 2
58589: PUSH
58590: LD_VAR 0 4
58594: ARRAY
58595: PUSH
58596: LD_INT 1
58598: ARRAY
58599: PPUSH
58600: LD_VAR 0 2
58604: PUSH
58605: LD_VAR 0 4
58609: ARRAY
58610: PUSH
58611: LD_INT 2
58613: ARRAY
58614: PPUSH
58615: CALL_OW 297
58619: ST_TO_ADDR
// end ; end ;
58620: GO 58509
58622: POP
58623: POP
// result := hex ;
58624: LD_ADDR_VAR 0 3
58628: PUSH
58629: LD_VAR 0 7
58633: ST_TO_ADDR
// end ;
58634: LD_VAR 0 3
58638: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58639: LD_INT 0
58641: PPUSH
58642: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58643: LD_VAR 0 1
58647: NOT
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: LD_INT 21
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 23
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PPUSH
58678: CALL_OW 69
58682: IN
58683: NOT
58684: OR
58685: IFFALSE 58689
// exit ;
58687: GO 58736
// for i = 1 to 3 do
58689: LD_ADDR_VAR 0 3
58693: PUSH
58694: DOUBLE
58695: LD_INT 1
58697: DEC
58698: ST_TO_ADDR
58699: LD_INT 3
58701: PUSH
58702: FOR_TO
58703: IFFALSE 58734
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58705: LD_VAR 0 1
58709: PPUSH
58710: CALL_OW 250
58714: PPUSH
58715: LD_VAR 0 1
58719: PPUSH
58720: CALL_OW 251
58724: PPUSH
58725: LD_INT 1
58727: PPUSH
58728: CALL_OW 453
58732: GO 58702
58734: POP
58735: POP
// end ;
58736: LD_VAR 0 2
58740: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58741: LD_INT 0
58743: PPUSH
58744: PPUSH
58745: PPUSH
58746: PPUSH
58747: PPUSH
58748: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58749: LD_VAR 0 1
58753: NOT
58754: PUSH
58755: LD_VAR 0 2
58759: NOT
58760: OR
58761: PUSH
58762: LD_VAR 0 1
58766: PPUSH
58767: CALL_OW 314
58771: OR
58772: IFFALSE 58776
// exit ;
58774: GO 59217
// x := GetX ( enemy_unit ) ;
58776: LD_ADDR_VAR 0 7
58780: PUSH
58781: LD_VAR 0 2
58785: PPUSH
58786: CALL_OW 250
58790: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58791: LD_ADDR_VAR 0 8
58795: PUSH
58796: LD_VAR 0 2
58800: PPUSH
58801: CALL_OW 251
58805: ST_TO_ADDR
// if not x or not y then
58806: LD_VAR 0 7
58810: NOT
58811: PUSH
58812: LD_VAR 0 8
58816: NOT
58817: OR
58818: IFFALSE 58822
// exit ;
58820: GO 59217
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58822: LD_ADDR_VAR 0 6
58826: PUSH
58827: LD_VAR 0 7
58831: PPUSH
58832: LD_INT 0
58834: PPUSH
58835: LD_INT 4
58837: PPUSH
58838: CALL_OW 272
58842: PUSH
58843: LD_VAR 0 8
58847: PPUSH
58848: LD_INT 0
58850: PPUSH
58851: LD_INT 4
58853: PPUSH
58854: CALL_OW 273
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_VAR 0 7
58867: PPUSH
58868: LD_INT 1
58870: PPUSH
58871: LD_INT 4
58873: PPUSH
58874: CALL_OW 272
58878: PUSH
58879: LD_VAR 0 8
58883: PPUSH
58884: LD_INT 1
58886: PPUSH
58887: LD_INT 4
58889: PPUSH
58890: CALL_OW 273
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_VAR 0 7
58903: PPUSH
58904: LD_INT 2
58906: PPUSH
58907: LD_INT 4
58909: PPUSH
58910: CALL_OW 272
58914: PUSH
58915: LD_VAR 0 8
58919: PPUSH
58920: LD_INT 2
58922: PPUSH
58923: LD_INT 4
58925: PPUSH
58926: CALL_OW 273
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_VAR 0 7
58939: PPUSH
58940: LD_INT 3
58942: PPUSH
58943: LD_INT 4
58945: PPUSH
58946: CALL_OW 272
58950: PUSH
58951: LD_VAR 0 8
58955: PPUSH
58956: LD_INT 3
58958: PPUSH
58959: LD_INT 4
58961: PPUSH
58962: CALL_OW 273
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_VAR 0 7
58975: PPUSH
58976: LD_INT 4
58978: PPUSH
58979: LD_INT 4
58981: PPUSH
58982: CALL_OW 272
58986: PUSH
58987: LD_VAR 0 8
58991: PPUSH
58992: LD_INT 4
58994: PPUSH
58995: LD_INT 4
58997: PPUSH
58998: CALL_OW 273
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_VAR 0 7
59011: PPUSH
59012: LD_INT 5
59014: PPUSH
59015: LD_INT 4
59017: PPUSH
59018: CALL_OW 272
59022: PUSH
59023: LD_VAR 0 8
59027: PPUSH
59028: LD_INT 5
59030: PPUSH
59031: LD_INT 4
59033: PPUSH
59034: CALL_OW 273
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: ST_TO_ADDR
// for i = tmp downto 1 do
59051: LD_ADDR_VAR 0 4
59055: PUSH
59056: DOUBLE
59057: LD_VAR 0 6
59061: INC
59062: ST_TO_ADDR
59063: LD_INT 1
59065: PUSH
59066: FOR_DOWNTO
59067: IFFALSE 59168
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59069: LD_VAR 0 6
59073: PUSH
59074: LD_VAR 0 4
59078: ARRAY
59079: PUSH
59080: LD_INT 1
59082: ARRAY
59083: PPUSH
59084: LD_VAR 0 6
59088: PUSH
59089: LD_VAR 0 4
59093: ARRAY
59094: PUSH
59095: LD_INT 2
59097: ARRAY
59098: PPUSH
59099: CALL_OW 488
59103: NOT
59104: PUSH
59105: LD_VAR 0 6
59109: PUSH
59110: LD_VAR 0 4
59114: ARRAY
59115: PUSH
59116: LD_INT 1
59118: ARRAY
59119: PPUSH
59120: LD_VAR 0 6
59124: PUSH
59125: LD_VAR 0 4
59129: ARRAY
59130: PUSH
59131: LD_INT 2
59133: ARRAY
59134: PPUSH
59135: CALL_OW 428
59139: PUSH
59140: LD_INT 0
59142: NONEQUAL
59143: OR
59144: IFFALSE 59166
// tmp := Delete ( tmp , i ) ;
59146: LD_ADDR_VAR 0 6
59150: PUSH
59151: LD_VAR 0 6
59155: PPUSH
59156: LD_VAR 0 4
59160: PPUSH
59161: CALL_OW 3
59165: ST_TO_ADDR
59166: GO 59066
59168: POP
59169: POP
// j := GetClosestHex ( unit , tmp ) ;
59170: LD_ADDR_VAR 0 5
59174: PUSH
59175: LD_VAR 0 1
59179: PPUSH
59180: LD_VAR 0 6
59184: PPUSH
59185: CALL 58470 0 2
59189: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59190: LD_VAR 0 1
59194: PPUSH
59195: LD_VAR 0 5
59199: PUSH
59200: LD_INT 1
59202: ARRAY
59203: PPUSH
59204: LD_VAR 0 5
59208: PUSH
59209: LD_INT 2
59211: ARRAY
59212: PPUSH
59213: CALL_OW 111
// end ;
59217: LD_VAR 0 3
59221: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59222: LD_INT 0
59224: PPUSH
59225: PPUSH
59226: PPUSH
// uc_side = 0 ;
59227: LD_ADDR_OWVAR 20
59231: PUSH
59232: LD_INT 0
59234: ST_TO_ADDR
// uc_nation = 0 ;
59235: LD_ADDR_OWVAR 21
59239: PUSH
59240: LD_INT 0
59242: ST_TO_ADDR
// InitHc_All ( ) ;
59243: CALL_OW 584
// InitVc ;
59247: CALL_OW 20
// if mastodonts then
59251: LD_VAR 0 6
59255: IFFALSE 59322
// for i = 1 to mastodonts do
59257: LD_ADDR_VAR 0 11
59261: PUSH
59262: DOUBLE
59263: LD_INT 1
59265: DEC
59266: ST_TO_ADDR
59267: LD_VAR 0 6
59271: PUSH
59272: FOR_TO
59273: IFFALSE 59320
// begin vc_chassis := 31 ;
59275: LD_ADDR_OWVAR 37
59279: PUSH
59280: LD_INT 31
59282: ST_TO_ADDR
// vc_control := control_rider ;
59283: LD_ADDR_OWVAR 38
59287: PUSH
59288: LD_INT 4
59290: ST_TO_ADDR
// animal := CreateVehicle ;
59291: LD_ADDR_VAR 0 12
59295: PUSH
59296: CALL_OW 45
59300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59301: LD_VAR 0 12
59305: PPUSH
59306: LD_VAR 0 8
59310: PPUSH
59311: LD_INT 0
59313: PPUSH
59314: CALL 61510 0 3
// end ;
59318: GO 59272
59320: POP
59321: POP
// if horses then
59322: LD_VAR 0 5
59326: IFFALSE 59393
// for i = 1 to horses do
59328: LD_ADDR_VAR 0 11
59332: PUSH
59333: DOUBLE
59334: LD_INT 1
59336: DEC
59337: ST_TO_ADDR
59338: LD_VAR 0 5
59342: PUSH
59343: FOR_TO
59344: IFFALSE 59391
// begin hc_class := 21 ;
59346: LD_ADDR_OWVAR 28
59350: PUSH
59351: LD_INT 21
59353: ST_TO_ADDR
// hc_gallery :=  ;
59354: LD_ADDR_OWVAR 33
59358: PUSH
59359: LD_STRING 
59361: ST_TO_ADDR
// animal := CreateHuman ;
59362: LD_ADDR_VAR 0 12
59366: PUSH
59367: CALL_OW 44
59371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59372: LD_VAR 0 12
59376: PPUSH
59377: LD_VAR 0 8
59381: PPUSH
59382: LD_INT 0
59384: PPUSH
59385: CALL 61510 0 3
// end ;
59389: GO 59343
59391: POP
59392: POP
// if birds then
59393: LD_VAR 0 1
59397: IFFALSE 59464
// for i = 1 to birds do
59399: LD_ADDR_VAR 0 11
59403: PUSH
59404: DOUBLE
59405: LD_INT 1
59407: DEC
59408: ST_TO_ADDR
59409: LD_VAR 0 1
59413: PUSH
59414: FOR_TO
59415: IFFALSE 59462
// begin hc_class = 18 ;
59417: LD_ADDR_OWVAR 28
59421: PUSH
59422: LD_INT 18
59424: ST_TO_ADDR
// hc_gallery =  ;
59425: LD_ADDR_OWVAR 33
59429: PUSH
59430: LD_STRING 
59432: ST_TO_ADDR
// animal := CreateHuman ;
59433: LD_ADDR_VAR 0 12
59437: PUSH
59438: CALL_OW 44
59442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59443: LD_VAR 0 12
59447: PPUSH
59448: LD_VAR 0 8
59452: PPUSH
59453: LD_INT 0
59455: PPUSH
59456: CALL 61510 0 3
// end ;
59460: GO 59414
59462: POP
59463: POP
// if tigers then
59464: LD_VAR 0 2
59468: IFFALSE 59552
// for i = 1 to tigers do
59470: LD_ADDR_VAR 0 11
59474: PUSH
59475: DOUBLE
59476: LD_INT 1
59478: DEC
59479: ST_TO_ADDR
59480: LD_VAR 0 2
59484: PUSH
59485: FOR_TO
59486: IFFALSE 59550
// begin hc_class = class_tiger ;
59488: LD_ADDR_OWVAR 28
59492: PUSH
59493: LD_INT 14
59495: ST_TO_ADDR
// hc_gallery =  ;
59496: LD_ADDR_OWVAR 33
59500: PUSH
59501: LD_STRING 
59503: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59504: LD_ADDR_OWVAR 35
59508: PUSH
59509: LD_INT 7
59511: NEG
59512: PPUSH
59513: LD_INT 7
59515: PPUSH
59516: CALL_OW 12
59520: ST_TO_ADDR
// animal := CreateHuman ;
59521: LD_ADDR_VAR 0 12
59525: PUSH
59526: CALL_OW 44
59530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59531: LD_VAR 0 12
59535: PPUSH
59536: LD_VAR 0 8
59540: PPUSH
59541: LD_INT 0
59543: PPUSH
59544: CALL 61510 0 3
// end ;
59548: GO 59485
59550: POP
59551: POP
// if apemans then
59552: LD_VAR 0 3
59556: IFFALSE 59679
// for i = 1 to apemans do
59558: LD_ADDR_VAR 0 11
59562: PUSH
59563: DOUBLE
59564: LD_INT 1
59566: DEC
59567: ST_TO_ADDR
59568: LD_VAR 0 3
59572: PUSH
59573: FOR_TO
59574: IFFALSE 59677
// begin hc_class = class_apeman ;
59576: LD_ADDR_OWVAR 28
59580: PUSH
59581: LD_INT 12
59583: ST_TO_ADDR
// hc_gallery =  ;
59584: LD_ADDR_OWVAR 33
59588: PUSH
59589: LD_STRING 
59591: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59592: LD_ADDR_OWVAR 35
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PPUSH
59601: LD_INT 2
59603: PPUSH
59604: CALL_OW 12
59608: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59609: LD_ADDR_OWVAR 31
59613: PUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_INT 3
59619: PPUSH
59620: CALL_OW 12
59624: PUSH
59625: LD_INT 1
59627: PPUSH
59628: LD_INT 3
59630: PPUSH
59631: CALL_OW 12
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// animal := CreateHuman ;
59648: LD_ADDR_VAR 0 12
59652: PUSH
59653: CALL_OW 44
59657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59658: LD_VAR 0 12
59662: PPUSH
59663: LD_VAR 0 8
59667: PPUSH
59668: LD_INT 0
59670: PPUSH
59671: CALL 61510 0 3
// end ;
59675: GO 59573
59677: POP
59678: POP
// if enchidnas then
59679: LD_VAR 0 4
59683: IFFALSE 59750
// for i = 1 to enchidnas do
59685: LD_ADDR_VAR 0 11
59689: PUSH
59690: DOUBLE
59691: LD_INT 1
59693: DEC
59694: ST_TO_ADDR
59695: LD_VAR 0 4
59699: PUSH
59700: FOR_TO
59701: IFFALSE 59748
// begin hc_class = 13 ;
59703: LD_ADDR_OWVAR 28
59707: PUSH
59708: LD_INT 13
59710: ST_TO_ADDR
// hc_gallery =  ;
59711: LD_ADDR_OWVAR 33
59715: PUSH
59716: LD_STRING 
59718: ST_TO_ADDR
// animal := CreateHuman ;
59719: LD_ADDR_VAR 0 12
59723: PUSH
59724: CALL_OW 44
59728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59729: LD_VAR 0 12
59733: PPUSH
59734: LD_VAR 0 8
59738: PPUSH
59739: LD_INT 0
59741: PPUSH
59742: CALL 61510 0 3
// end ;
59746: GO 59700
59748: POP
59749: POP
// if fishes then
59750: LD_VAR 0 7
59754: IFFALSE 59821
// for i = 1 to fishes do
59756: LD_ADDR_VAR 0 11
59760: PUSH
59761: DOUBLE
59762: LD_INT 1
59764: DEC
59765: ST_TO_ADDR
59766: LD_VAR 0 7
59770: PUSH
59771: FOR_TO
59772: IFFALSE 59819
// begin hc_class = 20 ;
59774: LD_ADDR_OWVAR 28
59778: PUSH
59779: LD_INT 20
59781: ST_TO_ADDR
// hc_gallery =  ;
59782: LD_ADDR_OWVAR 33
59786: PUSH
59787: LD_STRING 
59789: ST_TO_ADDR
// animal := CreateHuman ;
59790: LD_ADDR_VAR 0 12
59794: PUSH
59795: CALL_OW 44
59799: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59800: LD_VAR 0 12
59804: PPUSH
59805: LD_VAR 0 9
59809: PPUSH
59810: LD_INT 0
59812: PPUSH
59813: CALL 61510 0 3
// end ;
59817: GO 59771
59819: POP
59820: POP
// end ;
59821: LD_VAR 0 10
59825: RET
// export function WantHeal ( sci , unit ) ; begin
59826: LD_INT 0
59828: PPUSH
// if GetTaskList ( sci ) > 0 then
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 437
59838: PUSH
59839: LD_INT 0
59841: GREATER
59842: IFFALSE 59912
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 437
59853: PUSH
59854: LD_INT 1
59856: ARRAY
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PUSH
59862: LD_STRING l
59864: EQUAL
59865: PUSH
59866: LD_VAR 0 1
59870: PPUSH
59871: CALL_OW 437
59875: PUSH
59876: LD_INT 1
59878: ARRAY
59879: PUSH
59880: LD_INT 4
59882: ARRAY
59883: PUSH
59884: LD_VAR 0 2
59888: EQUAL
59889: AND
59890: IFFALSE 59902
// result := true else
59892: LD_ADDR_VAR 0 3
59896: PUSH
59897: LD_INT 1
59899: ST_TO_ADDR
59900: GO 59910
// result := false ;
59902: LD_ADDR_VAR 0 3
59906: PUSH
59907: LD_INT 0
59909: ST_TO_ADDR
// end else
59910: GO 59920
// result := false ;
59912: LD_ADDR_VAR 0 3
59916: PUSH
59917: LD_INT 0
59919: ST_TO_ADDR
// end ;
59920: LD_VAR 0 3
59924: RET
// export function HealTarget ( sci ) ; begin
59925: LD_INT 0
59927: PPUSH
// if not sci then
59928: LD_VAR 0 1
59932: NOT
59933: IFFALSE 59937
// exit ;
59935: GO 60002
// result := 0 ;
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// if GetTaskList ( sci ) then
59945: LD_VAR 0 1
59949: PPUSH
59950: CALL_OW 437
59954: IFFALSE 60002
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59956: LD_VAR 0 1
59960: PPUSH
59961: CALL_OW 437
59965: PUSH
59966: LD_INT 1
59968: ARRAY
59969: PUSH
59970: LD_INT 1
59972: ARRAY
59973: PUSH
59974: LD_STRING l
59976: EQUAL
59977: IFFALSE 60002
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59979: LD_ADDR_VAR 0 2
59983: PUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 437
59993: PUSH
59994: LD_INT 1
59996: ARRAY
59997: PUSH
59998: LD_INT 4
60000: ARRAY
60001: ST_TO_ADDR
// end ;
60002: LD_VAR 0 2
60006: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60007: LD_INT 0
60009: PPUSH
60010: PPUSH
60011: PPUSH
60012: PPUSH
// if not base_units then
60013: LD_VAR 0 1
60017: NOT
60018: IFFALSE 60022
// exit ;
60020: GO 60109
// result := false ;
60022: LD_ADDR_VAR 0 2
60026: PUSH
60027: LD_INT 0
60029: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60030: LD_ADDR_VAR 0 5
60034: PUSH
60035: LD_VAR 0 1
60039: PPUSH
60040: LD_INT 21
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PPUSH
60050: CALL_OW 72
60054: ST_TO_ADDR
// if not tmp then
60055: LD_VAR 0 5
60059: NOT
60060: IFFALSE 60064
// exit ;
60062: GO 60109
// for i in tmp do
60064: LD_ADDR_VAR 0 3
60068: PUSH
60069: LD_VAR 0 5
60073: PUSH
60074: FOR_IN
60075: IFFALSE 60107
// begin result := EnemyInRange ( i , 22 ) ;
60077: LD_ADDR_VAR 0 2
60081: PUSH
60082: LD_VAR 0 3
60086: PPUSH
60087: LD_INT 22
60089: PPUSH
60090: CALL 58345 0 2
60094: ST_TO_ADDR
// if result then
60095: LD_VAR 0 2
60099: IFFALSE 60105
// exit ;
60101: POP
60102: POP
60103: GO 60109
// end ;
60105: GO 60074
60107: POP
60108: POP
// end ;
60109: LD_VAR 0 2
60113: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60114: LD_INT 0
60116: PPUSH
60117: PPUSH
// if not units then
60118: LD_VAR 0 1
60122: NOT
60123: IFFALSE 60127
// exit ;
60125: GO 60197
// result := [ ] ;
60127: LD_ADDR_VAR 0 3
60131: PUSH
60132: EMPTY
60133: ST_TO_ADDR
// for i in units do
60134: LD_ADDR_VAR 0 4
60138: PUSH
60139: LD_VAR 0 1
60143: PUSH
60144: FOR_IN
60145: IFFALSE 60195
// if GetTag ( i ) = tag then
60147: LD_VAR 0 4
60151: PPUSH
60152: CALL_OW 110
60156: PUSH
60157: LD_VAR 0 2
60161: EQUAL
60162: IFFALSE 60193
// result := Replace ( result , result + 1 , i ) ;
60164: LD_ADDR_VAR 0 3
60168: PUSH
60169: LD_VAR 0 3
60173: PPUSH
60174: LD_VAR 0 3
60178: PUSH
60179: LD_INT 1
60181: PLUS
60182: PPUSH
60183: LD_VAR 0 4
60187: PPUSH
60188: CALL_OW 1
60192: ST_TO_ADDR
60193: GO 60144
60195: POP
60196: POP
// end ;
60197: LD_VAR 0 3
60201: RET
// export function IsDriver ( un ) ; begin
60202: LD_INT 0
60204: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60205: LD_ADDR_VAR 0 2
60209: PUSH
60210: LD_VAR 0 1
60214: PUSH
60215: LD_INT 55
60217: PUSH
60218: EMPTY
60219: LIST
60220: PPUSH
60221: CALL_OW 69
60225: IN
60226: ST_TO_ADDR
// end ;
60227: LD_VAR 0 2
60231: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60232: LD_INT 0
60234: PPUSH
60235: PPUSH
// list := [ ] ;
60236: LD_ADDR_VAR 0 5
60240: PUSH
60241: EMPTY
60242: ST_TO_ADDR
// case d of 0 :
60243: LD_VAR 0 3
60247: PUSH
60248: LD_INT 0
60250: DOUBLE
60251: EQUAL
60252: IFTRUE 60256
60254: GO 60389
60256: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60257: LD_ADDR_VAR 0 5
60261: PUSH
60262: LD_VAR 0 1
60266: PUSH
60267: LD_INT 4
60269: MINUS
60270: PUSH
60271: LD_VAR 0 2
60275: PUSH
60276: LD_INT 4
60278: MINUS
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: PUSH
60288: LD_VAR 0 1
60292: PUSH
60293: LD_INT 3
60295: MINUS
60296: PUSH
60297: LD_VAR 0 2
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: PUSH
60310: LD_VAR 0 1
60314: PUSH
60315: LD_INT 4
60317: PLUS
60318: PUSH
60319: LD_VAR 0 2
60323: PUSH
60324: LD_INT 4
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: PUSH
60332: LD_VAR 0 1
60336: PUSH
60337: LD_INT 3
60339: PLUS
60340: PUSH
60341: LD_VAR 0 2
60345: PUSH
60346: LD_INT 3
60348: PLUS
60349: PUSH
60350: LD_INT 5
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: PUSH
60358: LD_VAR 0 1
60362: PUSH
60363: LD_VAR 0 2
60367: PUSH
60368: LD_INT 4
60370: PLUS
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// end ; 1 :
60387: GO 61087
60389: LD_INT 1
60391: DOUBLE
60392: EQUAL
60393: IFTRUE 60397
60395: GO 60530
60397: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60398: LD_ADDR_VAR 0 5
60402: PUSH
60403: LD_VAR 0 1
60407: PUSH
60408: LD_VAR 0 2
60412: PUSH
60413: LD_INT 4
60415: MINUS
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: PUSH
60425: LD_VAR 0 1
60429: PUSH
60430: LD_INT 3
60432: MINUS
60433: PUSH
60434: LD_VAR 0 2
60438: PUSH
60439: LD_INT 3
60441: MINUS
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: PUSH
60451: LD_VAR 0 1
60455: PUSH
60456: LD_INT 4
60458: MINUS
60459: PUSH
60460: LD_VAR 0 2
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: PUSH
60473: LD_VAR 0 1
60477: PUSH
60478: LD_VAR 0 2
60482: PUSH
60483: LD_INT 3
60485: PLUS
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: LIST
60494: PUSH
60495: LD_VAR 0 1
60499: PUSH
60500: LD_INT 4
60502: PLUS
60503: PUSH
60504: LD_VAR 0 2
60508: PUSH
60509: LD_INT 4
60511: PLUS
60512: PUSH
60513: LD_INT 5
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: LIST
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: ST_TO_ADDR
// end ; 2 :
60528: GO 61087
60530: LD_INT 2
60532: DOUBLE
60533: EQUAL
60534: IFTRUE 60538
60536: GO 60667
60538: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60539: LD_ADDR_VAR 0 5
60543: PUSH
60544: LD_VAR 0 1
60548: PUSH
60549: LD_VAR 0 2
60553: PUSH
60554: LD_INT 3
60556: MINUS
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: PUSH
60566: LD_VAR 0 1
60570: PUSH
60571: LD_INT 4
60573: PLUS
60574: PUSH
60575: LD_VAR 0 2
60579: PUSH
60580: LD_INT 4
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: PUSH
60588: LD_VAR 0 1
60592: PUSH
60593: LD_VAR 0 2
60597: PUSH
60598: LD_INT 4
60600: PLUS
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: PUSH
60610: LD_VAR 0 1
60614: PUSH
60615: LD_INT 3
60617: MINUS
60618: PUSH
60619: LD_VAR 0 2
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: PUSH
60632: LD_VAR 0 1
60636: PUSH
60637: LD_INT 4
60639: MINUS
60640: PUSH
60641: LD_VAR 0 2
60645: PUSH
60646: LD_INT 4
60648: MINUS
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: ST_TO_ADDR
// end ; 3 :
60665: GO 61087
60667: LD_INT 3
60669: DOUBLE
60670: EQUAL
60671: IFTRUE 60675
60673: GO 60808
60675: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60676: LD_ADDR_VAR 0 5
60680: PUSH
60681: LD_VAR 0 1
60685: PUSH
60686: LD_INT 3
60688: PLUS
60689: PUSH
60690: LD_VAR 0 2
60694: PUSH
60695: LD_INT 4
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: PUSH
60703: LD_VAR 0 1
60707: PUSH
60708: LD_INT 4
60710: PLUS
60711: PUSH
60712: LD_VAR 0 2
60716: PUSH
60717: LD_INT 4
60719: PLUS
60720: PUSH
60721: LD_INT 5
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: PUSH
60729: LD_VAR 0 1
60733: PUSH
60734: LD_INT 4
60736: MINUS
60737: PUSH
60738: LD_VAR 0 2
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: PUSH
60751: LD_VAR 0 1
60755: PUSH
60756: LD_VAR 0 2
60760: PUSH
60761: LD_INT 4
60763: MINUS
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: LIST
60772: PUSH
60773: LD_VAR 0 1
60777: PUSH
60778: LD_INT 3
60780: MINUS
60781: PUSH
60782: LD_VAR 0 2
60786: PUSH
60787: LD_INT 3
60789: MINUS
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// end ; 4 :
60806: GO 61087
60808: LD_INT 4
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60816
60814: GO 60949
60816: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60817: LD_ADDR_VAR 0 5
60821: PUSH
60822: LD_VAR 0 1
60826: PUSH
60827: LD_VAR 0 2
60831: PUSH
60832: LD_INT 4
60834: PLUS
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: PUSH
60844: LD_VAR 0 1
60848: PUSH
60849: LD_INT 3
60851: PLUS
60852: PUSH
60853: LD_VAR 0 2
60857: PUSH
60858: LD_INT 3
60860: PLUS
60861: PUSH
60862: LD_INT 5
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_VAR 0 1
60874: PUSH
60875: LD_INT 4
60877: PLUS
60878: PUSH
60879: LD_VAR 0 2
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: PUSH
60892: LD_VAR 0 1
60896: PUSH
60897: LD_VAR 0 2
60901: PUSH
60902: LD_INT 3
60904: MINUS
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: PUSH
60914: LD_VAR 0 1
60918: PUSH
60919: LD_INT 4
60921: MINUS
60922: PUSH
60923: LD_VAR 0 2
60927: PUSH
60928: LD_INT 4
60930: MINUS
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: ST_TO_ADDR
// end ; 5 :
60947: GO 61087
60949: LD_INT 5
60951: DOUBLE
60952: EQUAL
60953: IFTRUE 60957
60955: GO 61086
60957: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60958: LD_ADDR_VAR 0 5
60962: PUSH
60963: LD_VAR 0 1
60967: PUSH
60968: LD_INT 4
60970: MINUS
60971: PUSH
60972: LD_VAR 0 2
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: PUSH
60985: LD_VAR 0 1
60989: PUSH
60990: LD_VAR 0 2
60994: PUSH
60995: LD_INT 4
60997: MINUS
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: LIST
61006: PUSH
61007: LD_VAR 0 1
61011: PUSH
61012: LD_INT 4
61014: PLUS
61015: PUSH
61016: LD_VAR 0 2
61020: PUSH
61021: LD_INT 4
61023: PLUS
61024: PUSH
61025: LD_INT 5
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: PUSH
61033: LD_VAR 0 1
61037: PUSH
61038: LD_INT 3
61040: PLUS
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 4
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: PUSH
61055: LD_VAR 0 1
61059: PUSH
61060: LD_VAR 0 2
61064: PUSH
61065: LD_INT 3
61067: PLUS
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: ST_TO_ADDR
// end ; end ;
61084: GO 61087
61086: POP
// result := list ;
61087: LD_ADDR_VAR 0 4
61091: PUSH
61092: LD_VAR 0 5
61096: ST_TO_ADDR
// end ;
61097: LD_VAR 0 4
61101: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61102: LD_INT 0
61104: PPUSH
61105: PPUSH
61106: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61107: LD_VAR 0 1
61111: NOT
61112: PUSH
61113: LD_VAR 0 2
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: IN
61136: NOT
61137: OR
61138: IFFALSE 61142
// exit ;
61140: GO 61234
// tmp := [ ] ;
61142: LD_ADDR_VAR 0 5
61146: PUSH
61147: EMPTY
61148: ST_TO_ADDR
// for i in units do
61149: LD_ADDR_VAR 0 4
61153: PUSH
61154: LD_VAR 0 1
61158: PUSH
61159: FOR_IN
61160: IFFALSE 61203
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61162: LD_ADDR_VAR 0 5
61166: PUSH
61167: LD_VAR 0 5
61171: PPUSH
61172: LD_VAR 0 5
61176: PUSH
61177: LD_INT 1
61179: PLUS
61180: PPUSH
61181: LD_VAR 0 4
61185: PPUSH
61186: LD_VAR 0 2
61190: PPUSH
61191: CALL_OW 259
61195: PPUSH
61196: CALL_OW 2
61200: ST_TO_ADDR
61201: GO 61159
61203: POP
61204: POP
// if not tmp then
61205: LD_VAR 0 5
61209: NOT
61210: IFFALSE 61214
// exit ;
61212: GO 61234
// result := SortListByListDesc ( units , tmp ) ;
61214: LD_ADDR_VAR 0 3
61218: PUSH
61219: LD_VAR 0 1
61223: PPUSH
61224: LD_VAR 0 5
61228: PPUSH
61229: CALL_OW 77
61233: ST_TO_ADDR
// end ;
61234: LD_VAR 0 3
61238: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61239: LD_INT 0
61241: PPUSH
61242: PPUSH
61243: PPUSH
// result := false ;
61244: LD_ADDR_VAR 0 3
61248: PUSH
61249: LD_INT 0
61251: ST_TO_ADDR
// x := GetX ( building ) ;
61252: LD_ADDR_VAR 0 4
61256: PUSH
61257: LD_VAR 0 2
61261: PPUSH
61262: CALL_OW 250
61266: ST_TO_ADDR
// y := GetY ( building ) ;
61267: LD_ADDR_VAR 0 5
61271: PUSH
61272: LD_VAR 0 2
61276: PPUSH
61277: CALL_OW 251
61281: ST_TO_ADDR
// if not building or not x or not y then
61282: LD_VAR 0 2
61286: NOT
61287: PUSH
61288: LD_VAR 0 4
61292: NOT
61293: OR
61294: PUSH
61295: LD_VAR 0 5
61299: NOT
61300: OR
61301: IFFALSE 61305
// exit ;
61303: GO 61397
// if GetTaskList ( unit ) then
61305: LD_VAR 0 1
61309: PPUSH
61310: CALL_OW 437
61314: IFFALSE 61397
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61316: LD_STRING e
61318: PUSH
61319: LD_VAR 0 1
61323: PPUSH
61324: CALL_OW 437
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PUSH
61333: LD_INT 1
61335: ARRAY
61336: EQUAL
61337: PUSH
61338: LD_VAR 0 4
61342: PUSH
61343: LD_VAR 0 1
61347: PPUSH
61348: CALL_OW 437
61352: PUSH
61353: LD_INT 1
61355: ARRAY
61356: PUSH
61357: LD_INT 2
61359: ARRAY
61360: EQUAL
61361: AND
61362: PUSH
61363: LD_VAR 0 5
61367: PUSH
61368: LD_VAR 0 1
61372: PPUSH
61373: CALL_OW 437
61377: PUSH
61378: LD_INT 1
61380: ARRAY
61381: PUSH
61382: LD_INT 3
61384: ARRAY
61385: EQUAL
61386: AND
61387: IFFALSE 61397
// result := true end ;
61389: LD_ADDR_VAR 0 3
61393: PUSH
61394: LD_INT 1
61396: ST_TO_ADDR
// end ;
61397: LD_VAR 0 3
61401: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61402: LD_INT 0
61404: PPUSH
// result := false ;
61405: LD_ADDR_VAR 0 4
61409: PUSH
61410: LD_INT 0
61412: ST_TO_ADDR
// if GetTaskList ( unit ) then
61413: LD_VAR 0 1
61417: PPUSH
61418: CALL_OW 437
61422: IFFALSE 61505
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61424: LD_STRING M
61426: PUSH
61427: LD_VAR 0 1
61431: PPUSH
61432: CALL_OW 437
61436: PUSH
61437: LD_INT 1
61439: ARRAY
61440: PUSH
61441: LD_INT 1
61443: ARRAY
61444: EQUAL
61445: PUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_VAR 0 1
61455: PPUSH
61456: CALL_OW 437
61460: PUSH
61461: LD_INT 1
61463: ARRAY
61464: PUSH
61465: LD_INT 2
61467: ARRAY
61468: EQUAL
61469: AND
61470: PUSH
61471: LD_VAR 0 3
61475: PUSH
61476: LD_VAR 0 1
61480: PPUSH
61481: CALL_OW 437
61485: PUSH
61486: LD_INT 1
61488: ARRAY
61489: PUSH
61490: LD_INT 3
61492: ARRAY
61493: EQUAL
61494: AND
61495: IFFALSE 61505
// result := true ;
61497: LD_ADDR_VAR 0 4
61501: PUSH
61502: LD_INT 1
61504: ST_TO_ADDR
// end ; end ;
61505: LD_VAR 0 4
61509: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61510: LD_INT 0
61512: PPUSH
61513: PPUSH
61514: PPUSH
61515: PPUSH
// if not unit or not area then
61516: LD_VAR 0 1
61520: NOT
61521: PUSH
61522: LD_VAR 0 2
61526: NOT
61527: OR
61528: IFFALSE 61532
// exit ;
61530: GO 61696
// tmp := AreaToList ( area , i ) ;
61532: LD_ADDR_VAR 0 6
61536: PUSH
61537: LD_VAR 0 2
61541: PPUSH
61542: LD_VAR 0 5
61546: PPUSH
61547: CALL_OW 517
61551: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61552: LD_ADDR_VAR 0 5
61556: PUSH
61557: DOUBLE
61558: LD_INT 1
61560: DEC
61561: ST_TO_ADDR
61562: LD_VAR 0 6
61566: PUSH
61567: LD_INT 1
61569: ARRAY
61570: PUSH
61571: FOR_TO
61572: IFFALSE 61694
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61574: LD_ADDR_VAR 0 7
61578: PUSH
61579: LD_VAR 0 6
61583: PUSH
61584: LD_INT 1
61586: ARRAY
61587: PUSH
61588: LD_VAR 0 5
61592: ARRAY
61593: PUSH
61594: LD_VAR 0 6
61598: PUSH
61599: LD_INT 2
61601: ARRAY
61602: PUSH
61603: LD_VAR 0 5
61607: ARRAY
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61613: LD_VAR 0 7
61617: PUSH
61618: LD_INT 1
61620: ARRAY
61621: PPUSH
61622: LD_VAR 0 7
61626: PUSH
61627: LD_INT 2
61629: ARRAY
61630: PPUSH
61631: CALL_OW 428
61635: PUSH
61636: LD_INT 0
61638: EQUAL
61639: IFFALSE 61692
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61641: LD_VAR 0 1
61645: PPUSH
61646: LD_VAR 0 7
61650: PUSH
61651: LD_INT 1
61653: ARRAY
61654: PPUSH
61655: LD_VAR 0 7
61659: PUSH
61660: LD_INT 2
61662: ARRAY
61663: PPUSH
61664: LD_VAR 0 3
61668: PPUSH
61669: CALL_OW 48
// result := IsPlaced ( unit ) ;
61673: LD_ADDR_VAR 0 4
61677: PUSH
61678: LD_VAR 0 1
61682: PPUSH
61683: CALL_OW 305
61687: ST_TO_ADDR
// exit ;
61688: POP
61689: POP
61690: GO 61696
// end ; end ;
61692: GO 61571
61694: POP
61695: POP
// end ;
61696: LD_VAR 0 4
61700: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61701: LD_INT 0
61703: PPUSH
61704: PPUSH
61705: PPUSH
// if not side or side > 8 then
61706: LD_VAR 0 1
61710: NOT
61711: PUSH
61712: LD_VAR 0 1
61716: PUSH
61717: LD_INT 8
61719: GREATER
61720: OR
61721: IFFALSE 61725
// exit ;
61723: GO 61912
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61725: LD_ADDR_VAR 0 4
61729: PUSH
61730: LD_INT 22
61732: PUSH
61733: LD_VAR 0 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 21
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PPUSH
61756: CALL_OW 69
61760: ST_TO_ADDR
// if not tmp then
61761: LD_VAR 0 4
61765: NOT
61766: IFFALSE 61770
// exit ;
61768: GO 61912
// enable_addtolog := true ;
61770: LD_ADDR_OWVAR 81
61774: PUSH
61775: LD_INT 1
61777: ST_TO_ADDR
// AddToLog ( [ ) ;
61778: LD_STRING [
61780: PPUSH
61781: CALL_OW 561
// for i in tmp do
61785: LD_ADDR_VAR 0 3
61789: PUSH
61790: LD_VAR 0 4
61794: PUSH
61795: FOR_IN
61796: IFFALSE 61903
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61798: LD_STRING [
61800: PUSH
61801: LD_VAR 0 3
61805: PPUSH
61806: CALL_OW 266
61810: STR
61811: PUSH
61812: LD_STRING , 
61814: STR
61815: PUSH
61816: LD_VAR 0 3
61820: PPUSH
61821: CALL_OW 250
61825: STR
61826: PUSH
61827: LD_STRING , 
61829: STR
61830: PUSH
61831: LD_VAR 0 3
61835: PPUSH
61836: CALL_OW 251
61840: STR
61841: PUSH
61842: LD_STRING , 
61844: STR
61845: PUSH
61846: LD_VAR 0 3
61850: PPUSH
61851: CALL_OW 254
61855: STR
61856: PUSH
61857: LD_STRING , 
61859: STR
61860: PUSH
61861: LD_VAR 0 3
61865: PPUSH
61866: LD_INT 1
61868: PPUSH
61869: CALL_OW 268
61873: STR
61874: PUSH
61875: LD_STRING , 
61877: STR
61878: PUSH
61879: LD_VAR 0 3
61883: PPUSH
61884: LD_INT 2
61886: PPUSH
61887: CALL_OW 268
61891: STR
61892: PUSH
61893: LD_STRING ],
61895: STR
61896: PPUSH
61897: CALL_OW 561
// end ;
61901: GO 61795
61903: POP
61904: POP
// AddToLog ( ]; ) ;
61905: LD_STRING ];
61907: PPUSH
61908: CALL_OW 561
// end ;
61912: LD_VAR 0 2
61916: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61917: LD_INT 0
61919: PPUSH
61920: PPUSH
61921: PPUSH
61922: PPUSH
61923: PPUSH
// if not area or not rate or not max then
61924: LD_VAR 0 1
61928: NOT
61929: PUSH
61930: LD_VAR 0 2
61934: NOT
61935: OR
61936: PUSH
61937: LD_VAR 0 4
61941: NOT
61942: OR
61943: IFFALSE 61947
// exit ;
61945: GO 62139
// while 1 do
61947: LD_INT 1
61949: IFFALSE 62139
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61951: LD_ADDR_VAR 0 9
61955: PUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: LD_INT 1
61963: PPUSH
61964: CALL_OW 287
61968: PUSH
61969: LD_INT 10
61971: MUL
61972: ST_TO_ADDR
// r := rate / 10 ;
61973: LD_ADDR_VAR 0 7
61977: PUSH
61978: LD_VAR 0 2
61982: PUSH
61983: LD_INT 10
61985: DIVREAL
61986: ST_TO_ADDR
// time := 1 1$00 ;
61987: LD_ADDR_VAR 0 8
61991: PUSH
61992: LD_INT 2100
61994: ST_TO_ADDR
// if amount < min then
61995: LD_VAR 0 9
61999: PUSH
62000: LD_VAR 0 3
62004: LESS
62005: IFFALSE 62023
// r := r * 2 else
62007: LD_ADDR_VAR 0 7
62011: PUSH
62012: LD_VAR 0 7
62016: PUSH
62017: LD_INT 2
62019: MUL
62020: ST_TO_ADDR
62021: GO 62049
// if amount > max then
62023: LD_VAR 0 9
62027: PUSH
62028: LD_VAR 0 4
62032: GREATER
62033: IFFALSE 62049
// r := r / 2 ;
62035: LD_ADDR_VAR 0 7
62039: PUSH
62040: LD_VAR 0 7
62044: PUSH
62045: LD_INT 2
62047: DIVREAL
62048: ST_TO_ADDR
// time := time / r ;
62049: LD_ADDR_VAR 0 8
62053: PUSH
62054: LD_VAR 0 8
62058: PUSH
62059: LD_VAR 0 7
62063: DIVREAL
62064: ST_TO_ADDR
// if time < 0 then
62065: LD_VAR 0 8
62069: PUSH
62070: LD_INT 0
62072: LESS
62073: IFFALSE 62090
// time := time * - 1 ;
62075: LD_ADDR_VAR 0 8
62079: PUSH
62080: LD_VAR 0 8
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: MUL
62089: ST_TO_ADDR
// wait ( time ) ;
62090: LD_VAR 0 8
62094: PPUSH
62095: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62099: LD_INT 35
62101: PPUSH
62102: LD_INT 875
62104: PPUSH
62105: CALL_OW 12
62109: PPUSH
62110: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62114: LD_INT 1
62116: PPUSH
62117: LD_INT 5
62119: PPUSH
62120: CALL_OW 12
62124: PPUSH
62125: LD_VAR 0 1
62129: PPUSH
62130: LD_INT 1
62132: PPUSH
62133: CALL_OW 55
// end ;
62137: GO 61947
// end ;
62139: LD_VAR 0 5
62143: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62144: LD_INT 0
62146: PPUSH
62147: PPUSH
62148: PPUSH
62149: PPUSH
62150: PPUSH
62151: PPUSH
62152: PPUSH
62153: PPUSH
// if not turrets or not factories then
62154: LD_VAR 0 1
62158: NOT
62159: PUSH
62160: LD_VAR 0 2
62164: NOT
62165: OR
62166: IFFALSE 62170
// exit ;
62168: GO 62477
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62170: LD_ADDR_VAR 0 10
62174: PUSH
62175: LD_INT 5
62177: PUSH
62178: LD_INT 6
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: LD_INT 4
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 5
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 24
62212: PUSH
62213: LD_INT 25
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 23
62222: PUSH
62223: LD_INT 27
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 42
62236: PUSH
62237: LD_INT 43
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 44
62246: PUSH
62247: LD_INT 46
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 45
62256: PUSH
62257: LD_INT 47
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: ST_TO_ADDR
// result := [ ] ;
62274: LD_ADDR_VAR 0 3
62278: PUSH
62279: EMPTY
62280: ST_TO_ADDR
// for i in turrets do
62281: LD_ADDR_VAR 0 4
62285: PUSH
62286: LD_VAR 0 1
62290: PUSH
62291: FOR_IN
62292: IFFALSE 62475
// begin nat := GetNation ( i ) ;
62294: LD_ADDR_VAR 0 7
62298: PUSH
62299: LD_VAR 0 4
62303: PPUSH
62304: CALL_OW 248
62308: ST_TO_ADDR
// weapon := 0 ;
62309: LD_ADDR_VAR 0 8
62313: PUSH
62314: LD_INT 0
62316: ST_TO_ADDR
// if not nat then
62317: LD_VAR 0 7
62321: NOT
62322: IFFALSE 62326
// continue ;
62324: GO 62291
// for j in list [ nat ] do
62326: LD_ADDR_VAR 0 5
62330: PUSH
62331: LD_VAR 0 10
62335: PUSH
62336: LD_VAR 0 7
62340: ARRAY
62341: PUSH
62342: FOR_IN
62343: IFFALSE 62384
// if GetBWeapon ( i ) = j [ 1 ] then
62345: LD_VAR 0 4
62349: PPUSH
62350: CALL_OW 269
62354: PUSH
62355: LD_VAR 0 5
62359: PUSH
62360: LD_INT 1
62362: ARRAY
62363: EQUAL
62364: IFFALSE 62382
// begin weapon := j [ 2 ] ;
62366: LD_ADDR_VAR 0 8
62370: PUSH
62371: LD_VAR 0 5
62375: PUSH
62376: LD_INT 2
62378: ARRAY
62379: ST_TO_ADDR
// break ;
62380: GO 62384
// end ;
62382: GO 62342
62384: POP
62385: POP
// if not weapon then
62386: LD_VAR 0 8
62390: NOT
62391: IFFALSE 62395
// continue ;
62393: GO 62291
// for k in factories do
62395: LD_ADDR_VAR 0 6
62399: PUSH
62400: LD_VAR 0 2
62404: PUSH
62405: FOR_IN
62406: IFFALSE 62471
// begin weapons := AvailableWeaponList ( k ) ;
62408: LD_ADDR_VAR 0 9
62412: PUSH
62413: LD_VAR 0 6
62417: PPUSH
62418: CALL_OW 478
62422: ST_TO_ADDR
// if not weapons then
62423: LD_VAR 0 9
62427: NOT
62428: IFFALSE 62432
// continue ;
62430: GO 62405
// if weapon in weapons then
62432: LD_VAR 0 8
62436: PUSH
62437: LD_VAR 0 9
62441: IN
62442: IFFALSE 62469
// begin result := [ i , weapon ] ;
62444: LD_ADDR_VAR 0 3
62448: PUSH
62449: LD_VAR 0 4
62453: PUSH
62454: LD_VAR 0 8
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: ST_TO_ADDR
// exit ;
62463: POP
62464: POP
62465: POP
62466: POP
62467: GO 62477
// end ; end ;
62469: GO 62405
62471: POP
62472: POP
// end ;
62473: GO 62291
62475: POP
62476: POP
// end ;
62477: LD_VAR 0 3
62481: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62482: LD_INT 0
62484: PPUSH
// if not side or side > 8 then
62485: LD_VAR 0 3
62489: NOT
62490: PUSH
62491: LD_VAR 0 3
62495: PUSH
62496: LD_INT 8
62498: GREATER
62499: OR
62500: IFFALSE 62504
// exit ;
62502: GO 62563
// if not range then
62504: LD_VAR 0 4
62508: NOT
62509: IFFALSE 62520
// range := - 12 ;
62511: LD_ADDR_VAR 0 4
62515: PUSH
62516: LD_INT 12
62518: NEG
62519: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62520: LD_VAR 0 1
62524: PPUSH
62525: LD_VAR 0 2
62529: PPUSH
62530: LD_VAR 0 3
62534: PPUSH
62535: LD_VAR 0 4
62539: PPUSH
62540: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62544: LD_VAR 0 1
62548: PPUSH
62549: LD_VAR 0 2
62553: PPUSH
62554: LD_VAR 0 3
62558: PPUSH
62559: CALL_OW 331
// end ;
62563: LD_VAR 0 5
62567: RET
// export function Video ( mode ) ; begin
62568: LD_INT 0
62570: PPUSH
// ingame_video = mode ;
62571: LD_ADDR_OWVAR 52
62575: PUSH
62576: LD_VAR 0 1
62580: ST_TO_ADDR
// interface_hidden = mode ;
62581: LD_ADDR_OWVAR 54
62585: PUSH
62586: LD_VAR 0 1
62590: ST_TO_ADDR
// end ;
62591: LD_VAR 0 2
62595: RET
// export function Join ( array , element ) ; begin
62596: LD_INT 0
62598: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62599: LD_ADDR_VAR 0 3
62603: PUSH
62604: LD_VAR 0 1
62608: PPUSH
62609: LD_VAR 0 1
62613: PUSH
62614: LD_INT 1
62616: PLUS
62617: PPUSH
62618: LD_VAR 0 2
62622: PPUSH
62623: CALL_OW 1
62627: ST_TO_ADDR
// end ;
62628: LD_VAR 0 3
62632: RET
// export function JoinUnion ( array , element ) ; begin
62633: LD_INT 0
62635: PPUSH
// result := array union element ;
62636: LD_ADDR_VAR 0 3
62640: PUSH
62641: LD_VAR 0 1
62645: PUSH
62646: LD_VAR 0 2
62650: UNION
62651: ST_TO_ADDR
// end ;
62652: LD_VAR 0 3
62656: RET
// export function GetBehemoths ( side ) ; begin
62657: LD_INT 0
62659: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62660: LD_ADDR_VAR 0 2
62664: PUSH
62665: LD_INT 22
62667: PUSH
62668: LD_VAR 0 1
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 31
62679: PUSH
62680: LD_INT 25
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PPUSH
62691: CALL_OW 69
62695: ST_TO_ADDR
// end ;
62696: LD_VAR 0 2
62700: RET
// export function Shuffle ( array ) ; var i , index ; begin
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
62705: PPUSH
// result := [ ] ;
62706: LD_ADDR_VAR 0 2
62710: PUSH
62711: EMPTY
62712: ST_TO_ADDR
// if not array then
62713: LD_VAR 0 1
62717: NOT
62718: IFFALSE 62722
// exit ;
62720: GO 62821
// Randomize ;
62722: CALL_OW 10
// for i = array downto 1 do
62726: LD_ADDR_VAR 0 3
62730: PUSH
62731: DOUBLE
62732: LD_VAR 0 1
62736: INC
62737: ST_TO_ADDR
62738: LD_INT 1
62740: PUSH
62741: FOR_DOWNTO
62742: IFFALSE 62819
// begin index := rand ( 1 , array ) ;
62744: LD_ADDR_VAR 0 4
62748: PUSH
62749: LD_INT 1
62751: PPUSH
62752: LD_VAR 0 1
62756: PPUSH
62757: CALL_OW 12
62761: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62762: LD_ADDR_VAR 0 2
62766: PUSH
62767: LD_VAR 0 2
62771: PPUSH
62772: LD_VAR 0 2
62776: PUSH
62777: LD_INT 1
62779: PLUS
62780: PPUSH
62781: LD_VAR 0 1
62785: PUSH
62786: LD_VAR 0 4
62790: ARRAY
62791: PPUSH
62792: CALL_OW 2
62796: ST_TO_ADDR
// array := Delete ( array , index ) ;
62797: LD_ADDR_VAR 0 1
62801: PUSH
62802: LD_VAR 0 1
62806: PPUSH
62807: LD_VAR 0 4
62811: PPUSH
62812: CALL_OW 3
62816: ST_TO_ADDR
// end ;
62817: GO 62741
62819: POP
62820: POP
// end ;
62821: LD_VAR 0 2
62825: RET
// export function GetBaseMaterials ( base ) ; begin
62826: LD_INT 0
62828: PPUSH
// result := [ 0 , 0 , 0 ] ;
62829: LD_ADDR_VAR 0 2
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: ST_TO_ADDR
// if not base then
62848: LD_VAR 0 1
62852: NOT
62853: IFFALSE 62857
// exit ;
62855: GO 62906
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62857: LD_ADDR_VAR 0 2
62861: PUSH
62862: LD_VAR 0 1
62866: PPUSH
62867: LD_INT 1
62869: PPUSH
62870: CALL_OW 275
62874: PUSH
62875: LD_VAR 0 1
62879: PPUSH
62880: LD_INT 2
62882: PPUSH
62883: CALL_OW 275
62887: PUSH
62888: LD_VAR 0 1
62892: PPUSH
62893: LD_INT 3
62895: PPUSH
62896: CALL_OW 275
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: LIST
62905: ST_TO_ADDR
// end ;
62906: LD_VAR 0 2
62910: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62911: LD_INT 0
62913: PPUSH
62914: PPUSH
// result := array ;
62915: LD_ADDR_VAR 0 3
62919: PUSH
62920: LD_VAR 0 1
62924: ST_TO_ADDR
// if size > 0 then
62925: LD_VAR 0 2
62929: PUSH
62930: LD_INT 0
62932: GREATER
62933: IFFALSE 62979
// for i := array downto size do
62935: LD_ADDR_VAR 0 4
62939: PUSH
62940: DOUBLE
62941: LD_VAR 0 1
62945: INC
62946: ST_TO_ADDR
62947: LD_VAR 0 2
62951: PUSH
62952: FOR_DOWNTO
62953: IFFALSE 62977
// result := Delete ( result , result ) ;
62955: LD_ADDR_VAR 0 3
62959: PUSH
62960: LD_VAR 0 3
62964: PPUSH
62965: LD_VAR 0 3
62969: PPUSH
62970: CALL_OW 3
62974: ST_TO_ADDR
62975: GO 62952
62977: POP
62978: POP
// end ;
62979: LD_VAR 0 3
62983: RET
// export function ComExit ( unit ) ; var tmp ; begin
62984: LD_INT 0
62986: PPUSH
62987: PPUSH
// if not IsInUnit ( unit ) then
62988: LD_VAR 0 1
62992: PPUSH
62993: CALL_OW 310
62997: NOT
62998: IFFALSE 63002
// exit ;
63000: GO 63062
// tmp := IsInUnit ( unit ) ;
63002: LD_ADDR_VAR 0 3
63006: PUSH
63007: LD_VAR 0 1
63011: PPUSH
63012: CALL_OW 310
63016: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63017: LD_VAR 0 3
63021: PPUSH
63022: CALL_OW 247
63026: PUSH
63027: LD_INT 2
63029: EQUAL
63030: IFFALSE 63043
// ComExitVehicle ( unit ) else
63032: LD_VAR 0 1
63036: PPUSH
63037: CALL_OW 121
63041: GO 63052
// ComExitBuilding ( unit ) ;
63043: LD_VAR 0 1
63047: PPUSH
63048: CALL_OW 122
// result := tmp ;
63052: LD_ADDR_VAR 0 2
63056: PUSH
63057: LD_VAR 0 3
63061: ST_TO_ADDR
// end ;
63062: LD_VAR 0 2
63066: RET
// export function ComExitAll ( units ) ; var i ; begin
63067: LD_INT 0
63069: PPUSH
63070: PPUSH
// if not units then
63071: LD_VAR 0 1
63075: NOT
63076: IFFALSE 63080
// exit ;
63078: GO 63106
// for i in units do
63080: LD_ADDR_VAR 0 3
63084: PUSH
63085: LD_VAR 0 1
63089: PUSH
63090: FOR_IN
63091: IFFALSE 63104
// ComExit ( i ) ;
63093: LD_VAR 0 3
63097: PPUSH
63098: CALL 62984 0 1
63102: GO 63090
63104: POP
63105: POP
// end ;
63106: LD_VAR 0 2
63110: RET
// export function ResetHc ; begin
63111: LD_INT 0
63113: PPUSH
// InitHc ;
63114: CALL_OW 19
// hc_importance := 0 ;
63118: LD_ADDR_OWVAR 32
63122: PUSH
63123: LD_INT 0
63125: ST_TO_ADDR
// end ;
63126: LD_VAR 0 1
63130: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63131: LD_INT 0
63133: PPUSH
63134: PPUSH
63135: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63136: LD_ADDR_VAR 0 6
63140: PUSH
63141: LD_VAR 0 1
63145: PUSH
63146: LD_VAR 0 3
63150: PLUS
63151: PUSH
63152: LD_INT 2
63154: DIV
63155: ST_TO_ADDR
// if _x < 0 then
63156: LD_VAR 0 6
63160: PUSH
63161: LD_INT 0
63163: LESS
63164: IFFALSE 63181
// _x := _x * - 1 ;
63166: LD_ADDR_VAR 0 6
63170: PUSH
63171: LD_VAR 0 6
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: MUL
63180: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63181: LD_ADDR_VAR 0 7
63185: PUSH
63186: LD_VAR 0 2
63190: PUSH
63191: LD_VAR 0 4
63195: PLUS
63196: PUSH
63197: LD_INT 2
63199: DIV
63200: ST_TO_ADDR
// if _y < 0 then
63201: LD_VAR 0 7
63205: PUSH
63206: LD_INT 0
63208: LESS
63209: IFFALSE 63226
// _y := _y * - 1 ;
63211: LD_ADDR_VAR 0 7
63215: PUSH
63216: LD_VAR 0 7
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: MUL
63225: ST_TO_ADDR
// result := [ _x , _y ] ;
63226: LD_ADDR_VAR 0 5
63230: PUSH
63231: LD_VAR 0 6
63235: PUSH
63236: LD_VAR 0 7
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// end ;
63245: LD_VAR 0 5
63249: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63250: LD_INT 0
63252: PPUSH
63253: PPUSH
63254: PPUSH
63255: PPUSH
// task := GetTaskList ( unit ) ;
63256: LD_ADDR_VAR 0 7
63260: PUSH
63261: LD_VAR 0 1
63265: PPUSH
63266: CALL_OW 437
63270: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63271: LD_VAR 0 7
63275: NOT
63276: PUSH
63277: LD_VAR 0 1
63281: PPUSH
63282: LD_VAR 0 2
63286: PPUSH
63287: CALL_OW 308
63291: NOT
63292: AND
63293: IFFALSE 63297
// exit ;
63295: GO 63415
// if IsInArea ( unit , area ) then
63297: LD_VAR 0 1
63301: PPUSH
63302: LD_VAR 0 2
63306: PPUSH
63307: CALL_OW 308
63311: IFFALSE 63329
// begin ComMoveToArea ( unit , goAway ) ;
63313: LD_VAR 0 1
63317: PPUSH
63318: LD_VAR 0 3
63322: PPUSH
63323: CALL_OW 113
// exit ;
63327: GO 63415
// end ; if task [ 1 ] [ 1 ] <> M then
63329: LD_VAR 0 7
63333: PUSH
63334: LD_INT 1
63336: ARRAY
63337: PUSH
63338: LD_INT 1
63340: ARRAY
63341: PUSH
63342: LD_STRING M
63344: NONEQUAL
63345: IFFALSE 63349
// exit ;
63347: GO 63415
// x := task [ 1 ] [ 2 ] ;
63349: LD_ADDR_VAR 0 5
63353: PUSH
63354: LD_VAR 0 7
63358: PUSH
63359: LD_INT 1
63361: ARRAY
63362: PUSH
63363: LD_INT 2
63365: ARRAY
63366: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63367: LD_ADDR_VAR 0 6
63371: PUSH
63372: LD_VAR 0 7
63376: PUSH
63377: LD_INT 1
63379: ARRAY
63380: PUSH
63381: LD_INT 3
63383: ARRAY
63384: ST_TO_ADDR
// if InArea ( x , y , area ) then
63385: LD_VAR 0 5
63389: PPUSH
63390: LD_VAR 0 6
63394: PPUSH
63395: LD_VAR 0 2
63399: PPUSH
63400: CALL_OW 309
63404: IFFALSE 63415
// ComStop ( unit ) ;
63406: LD_VAR 0 1
63410: PPUSH
63411: CALL_OW 141
// end ;
63415: LD_VAR 0 4
63419: RET
// export function Abs ( value ) ; begin
63420: LD_INT 0
63422: PPUSH
// result := value ;
63423: LD_ADDR_VAR 0 2
63427: PUSH
63428: LD_VAR 0 1
63432: ST_TO_ADDR
// if value < 0 then
63433: LD_VAR 0 1
63437: PUSH
63438: LD_INT 0
63440: LESS
63441: IFFALSE 63458
// result := value * - 1 ;
63443: LD_ADDR_VAR 0 2
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: MUL
63457: ST_TO_ADDR
// end ;
63458: LD_VAR 0 2
63462: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63463: LD_INT 0
63465: PPUSH
63466: PPUSH
63467: PPUSH
63468: PPUSH
63469: PPUSH
63470: PPUSH
63471: PPUSH
63472: PPUSH
// if not unit or not building then
63473: LD_VAR 0 1
63477: NOT
63478: PUSH
63479: LD_VAR 0 2
63483: NOT
63484: OR
63485: IFFALSE 63489
// exit ;
63487: GO 63715
// x := GetX ( building ) ;
63489: LD_ADDR_VAR 0 4
63493: PUSH
63494: LD_VAR 0 2
63498: PPUSH
63499: CALL_OW 250
63503: ST_TO_ADDR
// y := GetY ( building ) ;
63504: LD_ADDR_VAR 0 6
63508: PUSH
63509: LD_VAR 0 2
63513: PPUSH
63514: CALL_OW 251
63518: ST_TO_ADDR
// d := GetDir ( building ) ;
63519: LD_ADDR_VAR 0 8
63523: PUSH
63524: LD_VAR 0 2
63528: PPUSH
63529: CALL_OW 254
63533: ST_TO_ADDR
// r := 4 ;
63534: LD_ADDR_VAR 0 9
63538: PUSH
63539: LD_INT 4
63541: ST_TO_ADDR
// for i := 1 to 5 do
63542: LD_ADDR_VAR 0 10
63546: PUSH
63547: DOUBLE
63548: LD_INT 1
63550: DEC
63551: ST_TO_ADDR
63552: LD_INT 5
63554: PUSH
63555: FOR_TO
63556: IFFALSE 63713
// begin _x := ShiftX ( x , d , r + i ) ;
63558: LD_ADDR_VAR 0 5
63562: PUSH
63563: LD_VAR 0 4
63567: PPUSH
63568: LD_VAR 0 8
63572: PPUSH
63573: LD_VAR 0 9
63577: PUSH
63578: LD_VAR 0 10
63582: PLUS
63583: PPUSH
63584: CALL_OW 272
63588: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63589: LD_ADDR_VAR 0 7
63593: PUSH
63594: LD_VAR 0 6
63598: PPUSH
63599: LD_VAR 0 8
63603: PPUSH
63604: LD_VAR 0 9
63608: PUSH
63609: LD_VAR 0 10
63613: PLUS
63614: PPUSH
63615: CALL_OW 273
63619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63620: LD_VAR 0 5
63624: PPUSH
63625: LD_VAR 0 7
63629: PPUSH
63630: CALL_OW 488
63634: PUSH
63635: LD_VAR 0 5
63639: PPUSH
63640: LD_VAR 0 7
63644: PPUSH
63645: CALL_OW 428
63649: PPUSH
63650: CALL_OW 247
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: IN
63665: NOT
63666: AND
63667: IFFALSE 63711
// begin ComMoveXY ( unit , _x , _y ) ;
63669: LD_VAR 0 1
63673: PPUSH
63674: LD_VAR 0 5
63678: PPUSH
63679: LD_VAR 0 7
63683: PPUSH
63684: CALL_OW 111
// result := [ _x , _y ] ;
63688: LD_ADDR_VAR 0 3
63692: PUSH
63693: LD_VAR 0 5
63697: PUSH
63698: LD_VAR 0 7
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: ST_TO_ADDR
// exit ;
63707: POP
63708: POP
63709: GO 63715
// end ; end ;
63711: GO 63555
63713: POP
63714: POP
// end ;
63715: LD_VAR 0 3
63719: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63720: LD_INT 0
63722: PPUSH
63723: PPUSH
63724: PPUSH
// result := 0 ;
63725: LD_ADDR_VAR 0 3
63729: PUSH
63730: LD_INT 0
63732: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63733: LD_VAR 0 1
63737: PUSH
63738: LD_INT 0
63740: LESS
63741: PUSH
63742: LD_VAR 0 1
63746: PUSH
63747: LD_INT 8
63749: GREATER
63750: OR
63751: PUSH
63752: LD_VAR 0 2
63756: PUSH
63757: LD_INT 0
63759: LESS
63760: OR
63761: PUSH
63762: LD_VAR 0 2
63766: PUSH
63767: LD_INT 8
63769: GREATER
63770: OR
63771: IFFALSE 63775
// exit ;
63773: GO 63850
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63775: LD_ADDR_VAR 0 4
63779: PUSH
63780: LD_INT 22
63782: PUSH
63783: LD_VAR 0 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PPUSH
63792: CALL_OW 69
63796: PUSH
63797: FOR_IN
63798: IFFALSE 63848
// begin un := UnitShoot ( i ) ;
63800: LD_ADDR_VAR 0 5
63804: PUSH
63805: LD_VAR 0 4
63809: PPUSH
63810: CALL_OW 504
63814: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63815: LD_VAR 0 5
63819: PPUSH
63820: CALL_OW 255
63824: PUSH
63825: LD_VAR 0 1
63829: EQUAL
63830: IFFALSE 63846
// begin result := un ;
63832: LD_ADDR_VAR 0 3
63836: PUSH
63837: LD_VAR 0 5
63841: ST_TO_ADDR
// exit ;
63842: POP
63843: POP
63844: GO 63850
// end ; end ;
63846: GO 63797
63848: POP
63849: POP
// end ;
63850: LD_VAR 0 3
63854: RET
// export function GetCargoBay ( units ) ; begin
63855: LD_INT 0
63857: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63858: LD_ADDR_VAR 0 2
63862: PUSH
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_INT 2
63870: PUSH
63871: LD_INT 34
63873: PUSH
63874: LD_INT 12
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 34
63883: PUSH
63884: LD_INT 51
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 34
63893: PUSH
63894: LD_INT 32
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 34
63903: PUSH
63904: LD_EXP 30
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: PPUSH
63920: CALL_OW 72
63924: ST_TO_ADDR
// end ;
63925: LD_VAR 0 2
63929: RET
// export function Negate ( value ) ; begin
63930: LD_INT 0
63932: PPUSH
// result := not value ;
63933: LD_ADDR_VAR 0 2
63937: PUSH
63938: LD_VAR 0 1
63942: NOT
63943: ST_TO_ADDR
// end ;
63944: LD_VAR 0 2
63948: RET
// export function Inc ( value ) ; begin
63949: LD_INT 0
63951: PPUSH
// result := value + 1 ;
63952: LD_ADDR_VAR 0 2
63956: PUSH
63957: LD_VAR 0 1
63961: PUSH
63962: LD_INT 1
63964: PLUS
63965: ST_TO_ADDR
// end ;
63966: LD_VAR 0 2
63970: RET
// export function Dec ( value ) ; begin
63971: LD_INT 0
63973: PPUSH
// result := value - 1 ;
63974: LD_ADDR_VAR 0 2
63978: PUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_INT 1
63986: MINUS
63987: ST_TO_ADDR
// end ;
63988: LD_VAR 0 2
63992: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: CALL_OW 488
64017: NOT
64018: PUSH
64019: LD_VAR 0 3
64023: PPUSH
64024: LD_VAR 0 4
64028: PPUSH
64029: CALL_OW 488
64033: NOT
64034: OR
64035: IFFALSE 64048
// begin result := - 1 ;
64037: LD_ADDR_VAR 0 5
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: ST_TO_ADDR
// exit ;
64046: GO 64283
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64048: LD_ADDR_VAR 0 12
64052: PUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: LD_VAR 0 2
64062: PPUSH
64063: LD_VAR 0 3
64067: PPUSH
64068: LD_VAR 0 4
64072: PPUSH
64073: CALL 63131 0 4
64077: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64078: LD_ADDR_VAR 0 11
64082: PUSH
64083: LD_VAR 0 1
64087: PPUSH
64088: LD_VAR 0 2
64092: PPUSH
64093: LD_VAR 0 12
64097: PUSH
64098: LD_INT 1
64100: ARRAY
64101: PPUSH
64102: LD_VAR 0 12
64106: PUSH
64107: LD_INT 2
64109: ARRAY
64110: PPUSH
64111: CALL_OW 298
64115: ST_TO_ADDR
// distance := 9999 ;
64116: LD_ADDR_VAR 0 10
64120: PUSH
64121: LD_INT 9999
64123: ST_TO_ADDR
// for i := 0 to 5 do
64124: LD_ADDR_VAR 0 6
64128: PUSH
64129: DOUBLE
64130: LD_INT 0
64132: DEC
64133: ST_TO_ADDR
64134: LD_INT 5
64136: PUSH
64137: FOR_TO
64138: IFFALSE 64281
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64140: LD_ADDR_VAR 0 7
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_VAR 0 6
64154: PPUSH
64155: LD_VAR 0 11
64159: PPUSH
64160: CALL_OW 272
64164: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64165: LD_ADDR_VAR 0 8
64169: PUSH
64170: LD_VAR 0 2
64174: PPUSH
64175: LD_VAR 0 6
64179: PPUSH
64180: LD_VAR 0 11
64184: PPUSH
64185: CALL_OW 273
64189: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64190: LD_VAR 0 7
64194: PPUSH
64195: LD_VAR 0 8
64199: PPUSH
64200: CALL_OW 488
64204: NOT
64205: IFFALSE 64209
// continue ;
64207: GO 64137
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64209: LD_ADDR_VAR 0 9
64213: PUSH
64214: LD_VAR 0 12
64218: PUSH
64219: LD_INT 1
64221: ARRAY
64222: PPUSH
64223: LD_VAR 0 12
64227: PUSH
64228: LD_INT 2
64230: ARRAY
64231: PPUSH
64232: LD_VAR 0 7
64236: PPUSH
64237: LD_VAR 0 8
64241: PPUSH
64242: CALL_OW 298
64246: ST_TO_ADDR
// if tmp < distance then
64247: LD_VAR 0 9
64251: PUSH
64252: LD_VAR 0 10
64256: LESS
64257: IFFALSE 64279
// begin result := i ;
64259: LD_ADDR_VAR 0 5
64263: PUSH
64264: LD_VAR 0 6
64268: ST_TO_ADDR
// distance := tmp ;
64269: LD_ADDR_VAR 0 10
64273: PUSH
64274: LD_VAR 0 9
64278: ST_TO_ADDR
// end ; end ;
64279: GO 64137
64281: POP
64282: POP
// end ;
64283: LD_VAR 0 5
64287: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64288: LD_INT 0
64290: PPUSH
64291: PPUSH
// if not driver or not IsInUnit ( driver ) then
64292: LD_VAR 0 1
64296: NOT
64297: PUSH
64298: LD_VAR 0 1
64302: PPUSH
64303: CALL_OW 310
64307: NOT
64308: OR
64309: IFFALSE 64313
// exit ;
64311: GO 64403
// vehicle := IsInUnit ( driver ) ;
64313: LD_ADDR_VAR 0 3
64317: PUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: CALL_OW 310
64327: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64328: LD_VAR 0 1
64332: PPUSH
64333: LD_STRING \
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: PUSH
64363: LD_STRING E
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_VAR 0 3
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PPUSH
64399: CALL_OW 446
// end ;
64403: LD_VAR 0 2
64407: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64408: LD_INT 0
64410: PPUSH
64411: PPUSH
// if not driver or not IsInUnit ( driver ) then
64412: LD_VAR 0 1
64416: NOT
64417: PUSH
64418: LD_VAR 0 1
64422: PPUSH
64423: CALL_OW 310
64427: NOT
64428: OR
64429: IFFALSE 64433
// exit ;
64431: GO 64523
// vehicle := IsInUnit ( driver ) ;
64433: LD_ADDR_VAR 0 3
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: CALL_OW 310
64447: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64448: LD_VAR 0 1
64452: PPUSH
64453: LD_STRING \
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: LD_STRING E
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_VAR 0 3
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PPUSH
64519: CALL_OW 447
// end ;
64523: LD_VAR 0 2
64527: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64528: LD_INT 0
64530: PPUSH
64531: PPUSH
64532: PPUSH
// tmp := [ ] ;
64533: LD_ADDR_VAR 0 5
64537: PUSH
64538: EMPTY
64539: ST_TO_ADDR
// for i in units do
64540: LD_ADDR_VAR 0 4
64544: PUSH
64545: LD_VAR 0 1
64549: PUSH
64550: FOR_IN
64551: IFFALSE 64589
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64553: LD_ADDR_VAR 0 5
64557: PUSH
64558: LD_VAR 0 5
64562: PPUSH
64563: LD_VAR 0 5
64567: PUSH
64568: LD_INT 1
64570: PLUS
64571: PPUSH
64572: LD_VAR 0 4
64576: PPUSH
64577: CALL_OW 256
64581: PPUSH
64582: CALL_OW 2
64586: ST_TO_ADDR
64587: GO 64550
64589: POP
64590: POP
// if not tmp then
64591: LD_VAR 0 5
64595: NOT
64596: IFFALSE 64600
// exit ;
64598: GO 64648
// if asc then
64600: LD_VAR 0 2
64604: IFFALSE 64628
// result := SortListByListAsc ( units , tmp ) else
64606: LD_ADDR_VAR 0 3
64610: PUSH
64611: LD_VAR 0 1
64615: PPUSH
64616: LD_VAR 0 5
64620: PPUSH
64621: CALL_OW 76
64625: ST_TO_ADDR
64626: GO 64648
// result := SortListByListDesc ( units , tmp ) ;
64628: LD_ADDR_VAR 0 3
64632: PUSH
64633: LD_VAR 0 1
64637: PPUSH
64638: LD_VAR 0 5
64642: PPUSH
64643: CALL_OW 77
64647: ST_TO_ADDR
// end ;
64648: LD_VAR 0 3
64652: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64653: LD_INT 0
64655: PPUSH
64656: PPUSH
// task := GetTaskList ( mech ) ;
64657: LD_ADDR_VAR 0 4
64661: PUSH
64662: LD_VAR 0 1
64666: PPUSH
64667: CALL_OW 437
64671: ST_TO_ADDR
// if not task then
64672: LD_VAR 0 4
64676: NOT
64677: IFFALSE 64681
// exit ;
64679: GO 64723
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64681: LD_ADDR_VAR 0 3
64685: PUSH
64686: LD_VAR 0 4
64690: PUSH
64691: LD_INT 1
64693: ARRAY
64694: PUSH
64695: LD_INT 1
64697: ARRAY
64698: PUSH
64699: LD_STRING r
64701: EQUAL
64702: PUSH
64703: LD_VAR 0 4
64707: PUSH
64708: LD_INT 1
64710: ARRAY
64711: PUSH
64712: LD_INT 4
64714: ARRAY
64715: PUSH
64716: LD_VAR 0 2
64720: EQUAL
64721: AND
64722: ST_TO_ADDR
// end ;
64723: LD_VAR 0 3
64727: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64728: LD_INT 0
64730: PPUSH
// SetDir ( unit , d ) ;
64731: LD_VAR 0 1
64735: PPUSH
64736: LD_VAR 0 4
64740: PPUSH
64741: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64745: LD_VAR 0 1
64749: PPUSH
64750: LD_VAR 0 2
64754: PPUSH
64755: LD_VAR 0 3
64759: PPUSH
64760: LD_VAR 0 5
64764: PPUSH
64765: CALL_OW 48
// end ;
64769: LD_VAR 0 6
64773: RET
// export function ToNaturalNumber ( number ) ; begin
64774: LD_INT 0
64776: PPUSH
// result := number div 1 ;
64777: LD_ADDR_VAR 0 2
64781: PUSH
64782: LD_VAR 0 1
64786: PUSH
64787: LD_INT 1
64789: DIV
64790: ST_TO_ADDR
// if number < 0 then
64791: LD_VAR 0 1
64795: PUSH
64796: LD_INT 0
64798: LESS
64799: IFFALSE 64809
// result := 0 ;
64801: LD_ADDR_VAR 0 2
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// end ;
64809: LD_VAR 0 2
64813: RET
// export function SortByClass ( units , class ) ; var un ; begin
64814: LD_INT 0
64816: PPUSH
64817: PPUSH
// if not units or not class then
64818: LD_VAR 0 1
64822: NOT
64823: PUSH
64824: LD_VAR 0 2
64828: NOT
64829: OR
64830: IFFALSE 64834
// exit ;
64832: GO 64929
// result := [ ] ;
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: EMPTY
64840: ST_TO_ADDR
// for un in units do
64841: LD_ADDR_VAR 0 4
64845: PUSH
64846: LD_VAR 0 1
64850: PUSH
64851: FOR_IN
64852: IFFALSE 64927
// if GetClass ( un ) = class then
64854: LD_VAR 0 4
64858: PPUSH
64859: CALL_OW 257
64863: PUSH
64864: LD_VAR 0 2
64868: EQUAL
64869: IFFALSE 64896
// result := Insert ( result , 1 , un ) else
64871: LD_ADDR_VAR 0 3
64875: PUSH
64876: LD_VAR 0 3
64880: PPUSH
64881: LD_INT 1
64883: PPUSH
64884: LD_VAR 0 4
64888: PPUSH
64889: CALL_OW 2
64893: ST_TO_ADDR
64894: GO 64925
// result := Replace ( result , result + 1 , un ) ;
64896: LD_ADDR_VAR 0 3
64900: PUSH
64901: LD_VAR 0 3
64905: PPUSH
64906: LD_VAR 0 3
64910: PUSH
64911: LD_INT 1
64913: PLUS
64914: PPUSH
64915: LD_VAR 0 4
64919: PPUSH
64920: CALL_OW 1
64924: ST_TO_ADDR
64925: GO 64851
64927: POP
64928: POP
// end ;
64929: LD_VAR 0 3
64933: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64934: LD_INT 0
64936: PPUSH
64937: PPUSH
64938: PPUSH
64939: PPUSH
64940: PPUSH
64941: PPUSH
64942: PPUSH
// result := [ ] ;
64943: LD_ADDR_VAR 0 4
64947: PUSH
64948: EMPTY
64949: ST_TO_ADDR
// if x - r < 0 then
64950: LD_VAR 0 1
64954: PUSH
64955: LD_VAR 0 3
64959: MINUS
64960: PUSH
64961: LD_INT 0
64963: LESS
64964: IFFALSE 64976
// min_x := 0 else
64966: LD_ADDR_VAR 0 8
64970: PUSH
64971: LD_INT 0
64973: ST_TO_ADDR
64974: GO 64992
// min_x := x - r ;
64976: LD_ADDR_VAR 0 8
64980: PUSH
64981: LD_VAR 0 1
64985: PUSH
64986: LD_VAR 0 3
64990: MINUS
64991: ST_TO_ADDR
// if y - r < 0 then
64992: LD_VAR 0 2
64996: PUSH
64997: LD_VAR 0 3
65001: MINUS
65002: PUSH
65003: LD_INT 0
65005: LESS
65006: IFFALSE 65018
// min_y := 0 else
65008: LD_ADDR_VAR 0 7
65012: PUSH
65013: LD_INT 0
65015: ST_TO_ADDR
65016: GO 65034
// min_y := y - r ;
65018: LD_ADDR_VAR 0 7
65022: PUSH
65023: LD_VAR 0 2
65027: PUSH
65028: LD_VAR 0 3
65032: MINUS
65033: ST_TO_ADDR
// max_x := x + r ;
65034: LD_ADDR_VAR 0 9
65038: PUSH
65039: LD_VAR 0 1
65043: PUSH
65044: LD_VAR 0 3
65048: PLUS
65049: ST_TO_ADDR
// max_y := y + r ;
65050: LD_ADDR_VAR 0 10
65054: PUSH
65055: LD_VAR 0 2
65059: PUSH
65060: LD_VAR 0 3
65064: PLUS
65065: ST_TO_ADDR
// for _x = min_x to max_x do
65066: LD_ADDR_VAR 0 5
65070: PUSH
65071: DOUBLE
65072: LD_VAR 0 8
65076: DEC
65077: ST_TO_ADDR
65078: LD_VAR 0 9
65082: PUSH
65083: FOR_TO
65084: IFFALSE 65185
// for _y = min_y to max_y do
65086: LD_ADDR_VAR 0 6
65090: PUSH
65091: DOUBLE
65092: LD_VAR 0 7
65096: DEC
65097: ST_TO_ADDR
65098: LD_VAR 0 10
65102: PUSH
65103: FOR_TO
65104: IFFALSE 65181
// begin if not ValidHex ( _x , _y ) then
65106: LD_VAR 0 5
65110: PPUSH
65111: LD_VAR 0 6
65115: PPUSH
65116: CALL_OW 488
65120: NOT
65121: IFFALSE 65125
// continue ;
65123: GO 65103
// if GetResourceTypeXY ( _x , _y ) then
65125: LD_VAR 0 5
65129: PPUSH
65130: LD_VAR 0 6
65134: PPUSH
65135: CALL_OW 283
65139: IFFALSE 65179
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65141: LD_ADDR_VAR 0 4
65145: PUSH
65146: LD_VAR 0 4
65150: PPUSH
65151: LD_VAR 0 4
65155: PUSH
65156: LD_INT 1
65158: PLUS
65159: PPUSH
65160: LD_VAR 0 5
65164: PUSH
65165: LD_VAR 0 6
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PPUSH
65174: CALL_OW 1
65178: ST_TO_ADDR
// end ;
65179: GO 65103
65181: POP
65182: POP
65183: GO 65083
65185: POP
65186: POP
// end ;
65187: LD_VAR 0 4
65191: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65192: LD_INT 0
65194: PPUSH
65195: PPUSH
65196: PPUSH
65197: PPUSH
65198: PPUSH
65199: PPUSH
65200: PPUSH
65201: PPUSH
// if not units then
65202: LD_VAR 0 1
65206: NOT
65207: IFFALSE 65211
// exit ;
65209: GO 65636
// result := UnitFilter ( units , [ f_ok ] ) ;
65211: LD_ADDR_VAR 0 3
65215: PUSH
65216: LD_VAR 0 1
65220: PPUSH
65221: LD_INT 50
65223: PUSH
65224: EMPTY
65225: LIST
65226: PPUSH
65227: CALL_OW 72
65231: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65232: LD_ADDR_VAR 0 8
65236: PUSH
65237: LD_VAR 0 1
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PPUSH
65246: CALL_OW 255
65250: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
65251: LD_ADDR_VAR 0 10
65255: PUSH
65256: LD_INT 29
65258: PUSH
65259: LD_EXP 33
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// if not result then
65268: LD_VAR 0 3
65272: NOT
65273: IFFALSE 65277
// exit ;
65275: GO 65636
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65277: LD_ADDR_VAR 0 5
65281: PUSH
65282: LD_INT 81
65284: PUSH
65285: LD_VAR 0 8
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PPUSH
65294: CALL_OW 69
65298: ST_TO_ADDR
// for i in result do
65299: LD_ADDR_VAR 0 4
65303: PUSH
65304: LD_VAR 0 3
65308: PUSH
65309: FOR_IN
65310: IFFALSE 65634
// begin tag := GetTag ( i ) + 1 ;
65312: LD_ADDR_VAR 0 9
65316: PUSH
65317: LD_VAR 0 4
65321: PPUSH
65322: CALL_OW 110
65326: PUSH
65327: LD_INT 1
65329: PLUS
65330: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65331: LD_ADDR_VAR 0 7
65335: PUSH
65336: LD_VAR 0 4
65340: PPUSH
65341: CALL_OW 250
65345: PPUSH
65346: LD_VAR 0 4
65350: PPUSH
65351: CALL_OW 251
65355: PPUSH
65356: LD_INT 6
65358: PPUSH
65359: CALL 64934 0 3
65363: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65364: LD_VAR 0 7
65368: PUSH
65369: LD_VAR 0 4
65373: PPUSH
65374: CALL_OW 264
65378: PUSH
65379: LD_VAR 0 10
65383: IN
65384: NOT
65385: AND
65386: IFFALSE 65425
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65388: LD_VAR 0 4
65392: PPUSH
65393: LD_VAR 0 7
65397: PUSH
65398: LD_INT 1
65400: ARRAY
65401: PUSH
65402: LD_INT 1
65404: ARRAY
65405: PPUSH
65406: LD_VAR 0 7
65410: PUSH
65411: LD_INT 1
65413: ARRAY
65414: PUSH
65415: LD_INT 2
65417: ARRAY
65418: PPUSH
65419: CALL_OW 116
65423: GO 65632
// if path > tag then
65425: LD_VAR 0 2
65429: PUSH
65430: LD_VAR 0 9
65434: GREATER
65435: IFFALSE 65602
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65437: LD_ADDR_VAR 0 6
65441: PUSH
65442: LD_VAR 0 5
65446: PPUSH
65447: LD_INT 91
65449: PUSH
65450: LD_VAR 0 4
65454: PUSH
65455: LD_INT 12
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: PPUSH
65463: CALL_OW 72
65467: ST_TO_ADDR
// if nearEnemy then
65468: LD_VAR 0 6
65472: IFFALSE 65500
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65474: LD_VAR 0 4
65478: PPUSH
65479: LD_VAR 0 6
65483: PPUSH
65484: LD_VAR 0 4
65488: PPUSH
65489: CALL_OW 74
65493: PPUSH
65494: CALL_OW 115
65498: GO 65600
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65500: LD_VAR 0 4
65504: PPUSH
65505: LD_VAR 0 2
65509: PUSH
65510: LD_VAR 0 9
65514: ARRAY
65515: PUSH
65516: LD_INT 1
65518: ARRAY
65519: PPUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_VAR 0 9
65529: ARRAY
65530: PUSH
65531: LD_INT 2
65533: ARRAY
65534: PPUSH
65535: CALL_OW 297
65539: PUSH
65540: LD_INT 6
65542: GREATER
65543: IFFALSE 65586
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65545: LD_VAR 0 4
65549: PPUSH
65550: LD_VAR 0 2
65554: PUSH
65555: LD_VAR 0 9
65559: ARRAY
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: PPUSH
65565: LD_VAR 0 2
65569: PUSH
65570: LD_VAR 0 9
65574: ARRAY
65575: PUSH
65576: LD_INT 2
65578: ARRAY
65579: PPUSH
65580: CALL_OW 114
65584: GO 65600
// SetTag ( i , tag ) ;
65586: LD_VAR 0 4
65590: PPUSH
65591: LD_VAR 0 9
65595: PPUSH
65596: CALL_OW 109
// end else
65600: GO 65632
// if enemy then
65602: LD_VAR 0 5
65606: IFFALSE 65632
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65608: LD_VAR 0 4
65612: PPUSH
65613: LD_VAR 0 5
65617: PPUSH
65618: LD_VAR 0 4
65622: PPUSH
65623: CALL_OW 74
65627: PPUSH
65628: CALL_OW 115
// end ;
65632: GO 65309
65634: POP
65635: POP
// end ;
65636: LD_VAR 0 3
65640: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65641: LD_INT 0
65643: PPUSH
65644: PPUSH
65645: PPUSH
// if not unit or IsInUnit ( unit ) then
65646: LD_VAR 0 1
65650: NOT
65651: PUSH
65652: LD_VAR 0 1
65656: PPUSH
65657: CALL_OW 310
65661: OR
65662: IFFALSE 65666
// exit ;
65664: GO 65757
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65666: LD_ADDR_VAR 0 4
65670: PUSH
65671: LD_VAR 0 1
65675: PPUSH
65676: CALL_OW 250
65680: PPUSH
65681: LD_VAR 0 2
65685: PPUSH
65686: LD_INT 1
65688: PPUSH
65689: CALL_OW 272
65693: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65694: LD_ADDR_VAR 0 5
65698: PUSH
65699: LD_VAR 0 1
65703: PPUSH
65704: CALL_OW 251
65708: PPUSH
65709: LD_VAR 0 2
65713: PPUSH
65714: LD_INT 1
65716: PPUSH
65717: CALL_OW 273
65721: ST_TO_ADDR
// if ValidHex ( x , y ) then
65722: LD_VAR 0 4
65726: PPUSH
65727: LD_VAR 0 5
65731: PPUSH
65732: CALL_OW 488
65736: IFFALSE 65757
// ComTurnXY ( unit , x , y ) ;
65738: LD_VAR 0 1
65742: PPUSH
65743: LD_VAR 0 4
65747: PPUSH
65748: LD_VAR 0 5
65752: PPUSH
65753: CALL_OW 118
// end ;
65757: LD_VAR 0 3
65761: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65762: LD_INT 0
65764: PPUSH
65765: PPUSH
// result := false ;
65766: LD_ADDR_VAR 0 3
65770: PUSH
65771: LD_INT 0
65773: ST_TO_ADDR
// if not units then
65774: LD_VAR 0 2
65778: NOT
65779: IFFALSE 65783
// exit ;
65781: GO 65828
// for i in units do
65783: LD_ADDR_VAR 0 4
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: FOR_IN
65794: IFFALSE 65826
// if See ( side , i ) then
65796: LD_VAR 0 1
65800: PPUSH
65801: LD_VAR 0 4
65805: PPUSH
65806: CALL_OW 292
65810: IFFALSE 65824
// begin result := true ;
65812: LD_ADDR_VAR 0 3
65816: PUSH
65817: LD_INT 1
65819: ST_TO_ADDR
// exit ;
65820: POP
65821: POP
65822: GO 65828
// end ;
65824: GO 65793
65826: POP
65827: POP
// end ;
65828: LD_VAR 0 3
65832: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65833: LD_INT 0
65835: PPUSH
65836: PPUSH
65837: PPUSH
65838: PPUSH
// if not unit or not points then
65839: LD_VAR 0 1
65843: NOT
65844: PUSH
65845: LD_VAR 0 2
65849: NOT
65850: OR
65851: IFFALSE 65855
// exit ;
65853: GO 65945
// dist := 99999 ;
65855: LD_ADDR_VAR 0 5
65859: PUSH
65860: LD_INT 99999
65862: ST_TO_ADDR
// for i in points do
65863: LD_ADDR_VAR 0 4
65867: PUSH
65868: LD_VAR 0 2
65872: PUSH
65873: FOR_IN
65874: IFFALSE 65943
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65876: LD_ADDR_VAR 0 6
65880: PUSH
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_VAR 0 4
65890: PUSH
65891: LD_INT 1
65893: ARRAY
65894: PPUSH
65895: LD_VAR 0 4
65899: PUSH
65900: LD_INT 2
65902: ARRAY
65903: PPUSH
65904: CALL_OW 297
65908: ST_TO_ADDR
// if tmpDist < dist then
65909: LD_VAR 0 6
65913: PUSH
65914: LD_VAR 0 5
65918: LESS
65919: IFFALSE 65941
// begin result := i ;
65921: LD_ADDR_VAR 0 3
65925: PUSH
65926: LD_VAR 0 4
65930: ST_TO_ADDR
// dist := tmpDist ;
65931: LD_ADDR_VAR 0 5
65935: PUSH
65936: LD_VAR 0 6
65940: ST_TO_ADDR
// end ; end ;
65941: GO 65873
65943: POP
65944: POP
// end ; end_of_file
65945: LD_VAR 0 3
65949: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 200
65957: DOUBLE
65958: GREATEREQUAL
65959: IFFALSE 65967
65961: LD_INT 299
65963: DOUBLE
65964: LESSEQUAL
65965: IFTRUE 65969
65967: GO 66001
65969: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65970: LD_VAR 0 1
65974: PPUSH
65975: LD_VAR 0 2
65979: PPUSH
65980: LD_VAR 0 3
65984: PPUSH
65985: LD_VAR 0 4
65989: PPUSH
65990: LD_VAR 0 5
65994: PPUSH
65995: CALL 21976 0 5
65999: GO 66078
66001: LD_INT 300
66003: DOUBLE
66004: GREATEREQUAL
66005: IFFALSE 66013
66007: LD_INT 399
66009: DOUBLE
66010: LESSEQUAL
66011: IFTRUE 66015
66013: GO 66077
66015: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66016: LD_VAR 0 1
66020: PPUSH
66021: LD_VAR 0 2
66025: PPUSH
66026: LD_VAR 0 3
66030: PPUSH
66031: LD_VAR 0 4
66035: PPUSH
66036: LD_VAR 0 5
66040: PPUSH
66041: LD_VAR 0 6
66045: PPUSH
66046: LD_VAR 0 7
66050: PPUSH
66051: LD_VAR 0 8
66055: PPUSH
66056: LD_VAR 0 9
66060: PPUSH
66061: LD_VAR 0 10
66065: PPUSH
66066: LD_VAR 0 11
66070: PPUSH
66071: CALL 19874 0 11
66075: GO 66078
66077: POP
// end ;
66078: PPOPN 11
66080: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66081: LD_VAR 0 1
66085: PPUSH
66086: LD_VAR 0 2
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: LD_VAR 0 4
66100: PPUSH
66101: LD_VAR 0 5
66105: PPUSH
66106: CALL 21968 0 5
// end ; end_of_file
66110: PPOPN 5
66112: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66113: LD_VAR 0 1
66117: PPUSH
66118: LD_VAR 0 2
66122: PPUSH
66123: LD_VAR 0 3
66127: PPUSH
66128: LD_VAR 0 4
66132: PPUSH
66133: LD_VAR 0 5
66137: PPUSH
66138: LD_VAR 0 6
66142: PPUSH
66143: CALL 8069 0 6
// end ;
66147: PPOPN 6
66149: END
