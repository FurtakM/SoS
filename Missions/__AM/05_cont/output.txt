// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 62421 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 62501 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 62381 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 62320 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 62581 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 28490 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 28490 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 28490 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 28490 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 28490 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 28490 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 28490 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 28490 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 28490 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 28490 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if ape in UnitsInside ( b ) then
3188: LD_VAR 0 3
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 62212 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL_OW 94
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6326
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5605
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5587: LD_EXP 17
5591: PPUSH
5592: LD_EXP 2
5596: PUSH
5597: LD_STRING Gladstone
5599: STR
5600: PPUSH
5601: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5605: LD_EXP 19
5609: PPUSH
5610: CALL_OW 302
5614: PUSH
5615: LD_EXP 19
5619: PPUSH
5620: CALL_OW 255
5624: PUSH
5625: LD_INT 1
5627: EQUAL
5628: AND
5629: IFFALSE 5659
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5631: LD_EXP 19
5635: PPUSH
5636: LD_EXP 2
5640: PUSH
5641: LD_STRING Denis
5643: STR
5644: PPUSH
5645: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5649: LD_INT 1
5651: PPUSH
5652: LD_STRING DenisInDelta
5654: PPUSH
5655: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5659: LD_EXP 22
5663: PPUSH
5664: CALL_OW 302
5668: IFFALSE 5688
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5670: LD_EXP 22
5674: PPUSH
5675: LD_EXP 2
5679: PUSH
5680: LD_STRING Lisa
5682: STR
5683: PPUSH
5684: CALL_OW 38
// end ; if IsOk ( Frank ) then
5688: LD_EXP 23
5692: PPUSH
5693: CALL_OW 302
5697: IFFALSE 5717
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5699: LD_EXP 23
5703: PPUSH
5704: LD_EXP 2
5708: PUSH
5709: LD_STRING Frank
5711: STR
5712: PPUSH
5713: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5717: LD_EXP 24
5721: PPUSH
5722: CALL_OW 302
5726: IFFALSE 5746
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5728: LD_EXP 24
5732: PPUSH
5733: LD_EXP 2
5737: PUSH
5738: LD_STRING Bobby
5740: STR
5741: PPUSH
5742: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5746: LD_EXP 25
5750: PPUSH
5751: CALL_OW 302
5755: IFFALSE 5775
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5757: LD_EXP 25
5761: PPUSH
5762: LD_EXP 2
5766: PUSH
5767: LD_STRING Cyrus
5769: STR
5770: PPUSH
5771: CALL_OW 38
// end ; if IsOk ( Brown ) then
5775: LD_EXP 20
5779: PPUSH
5780: CALL_OW 302
5784: IFFALSE 5804
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5786: LD_EXP 20
5790: PPUSH
5791: LD_EXP 2
5795: PUSH
5796: LD_STRING Brown
5798: STR
5799: PPUSH
5800: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5804: LD_EXP 21
5808: PPUSH
5809: CALL_OW 302
5813: IFFALSE 5833
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5815: LD_EXP 21
5819: PPUSH
5820: LD_EXP 2
5824: PUSH
5825: LD_STRING Donaldson
5827: STR
5828: PPUSH
5829: CALL_OW 38
// end ; if IsOk ( Mike ) then
5833: LD_EXP 26
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5862
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5844: LD_EXP 26
5848: PPUSH
5849: LD_EXP 2
5853: PUSH
5854: LD_STRING Mike
5856: STR
5857: PPUSH
5858: CALL_OW 38
// if others then
5862: LD_EXP 27
5866: IFFALSE 5880
// SaveCharacters ( others , othersInDelta ) ;
5868: LD_EXP 27
5872: PPUSH
5873: LD_STRING othersInDelta
5875: PPUSH
5876: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5880: LD_INT 22
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: IFFALSE 5952
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 16
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 69
5938: PUSH
5939: LD_EXP 26
5943: DIFF
5944: PPUSH
5945: LD_STRING apeInDelta
5947: PPUSH
5948: CALL_OW 38
// tmp := [ ] ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: EMPTY
5958: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5959: LD_INT 22
5961: PUSH
5962: LD_INT 1
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 21
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: IFFALSE 6098
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5989: LD_ADDR_VAR 0 1
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: PUSH
6023: FOR_IN
6024: IFFALSE 6096
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 248
6045: PUSH
6046: LD_VAR 0 1
6050: PPUSH
6051: CALL_OW 265
6055: PUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 262
6065: PUSH
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL_OW 263
6075: PUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: CALL_OW 264
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ADD
6093: ST_TO_ADDR
6094: GO 6023
6096: POP
6097: POP
// if tmp then
6098: LD_VAR 0 2
6102: IFFALSE 6116
// SaveVariable ( tmp , vehiclesInDelta ) ;
6104: LD_VAR 0 2
6108: PPUSH
6109: LD_STRING vehiclesInDelta
6111: PPUSH
6112: CALL_OW 39
// tmp := [ ] ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: EMPTY
6122: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 21
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PPUSH
6147: CALL_OW 69
6151: IFFALSE 6304
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6153: LD_ADDR_VAR 0 1
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 21
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 69
6186: PUSH
6187: FOR_IN
6188: IFFALSE 6302
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_VAR 0 2
6199: PUSH
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 266
6209: PUSH
6210: LD_VAR 0 1
6214: PPUSH
6215: CALL_OW 267
6219: PUSH
6220: LD_VAR 0 1
6224: PPUSH
6225: CALL_OW 250
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 251
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 254
6249: PUSH
6250: LD_VAR 0 1
6254: PPUSH
6255: LD_INT 1
6257: PPUSH
6258: CALL_OW 268
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: CALL_OW 268
6275: PUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: CALL_OW 269
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: ADD
6299: ST_TO_ADDR
6300: GO 6187
6302: POP
6303: POP
// if tmp then
6304: LD_VAR 0 2
6308: IFFALSE 6322
// SaveVariable ( tmp , buildingsInDelta ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_STRING buildingsInDelta
6317: PPUSH
6318: CALL_OW 39
// YouWin ;
6322: CALL_OW 103
// end ; end_of_file
6326: PPOPN 5
6328: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
6333: PPUSH
6334: PPUSH
// InitHc ;
6335: CALL_OW 19
// InitUc ;
6339: CALL_OW 18
// uc_side := 2 ;
6343: LD_ADDR_OWVAR 20
6347: PUSH
6348: LD_INT 2
6350: ST_TO_ADDR
// uc_nation := 2 ;
6351: LD_ADDR_OWVAR 21
6355: PUSH
6356: LD_INT 2
6358: ST_TO_ADDR
// if not amount then
6359: LD_VAR 0 1
6363: NOT
6364: IFFALSE 6368
// exit ;
6366: GO 6491
// for i = 1 to amount do
6368: LD_ADDR_VAR 0 5
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6479
// begin PrepareHuman ( false , 1 , skill ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 380
// un := CreateHuman ;
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: CALL_OW 44
6410: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6411: LD_ADDR_VAR 0 7
6415: PUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: LD_INT 1
6423: PPUSH
6424: LD_VAR 0 6
6428: PPUSH
6429: CALL_OW 2
6433: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6434: LD_VAR 0 6
6438: PPUSH
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// if i mod 2 = 0 then
6451: LD_VAR 0 5
6455: PUSH
6456: LD_INT 2
6458: MOD
6459: PUSH
6460: LD_INT 0
6462: EQUAL
6463: IFFALSE 6477
// SetTag ( un , 11 ) ;
6465: LD_VAR 0 6
6469: PPUSH
6470: LD_INT 11
6472: PPUSH
6473: CALL_OW 109
// end ;
6477: GO 6383
6479: POP
6480: POP
// result := tmp ;
6481: LD_ADDR_VAR 0 4
6485: PUSH
6486: LD_VAR 0 7
6490: ST_TO_ADDR
// end ;
6491: LD_VAR 0 4
6495: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6496: LD_EXP 6
6500: IFFALSE 7403
6502: GO 6504
6504: DISABLE
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
// begin more_troops := false ;
6515: LD_ADDR_VAR 0 3
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 10500
6559: PUSH
6560: LD_INT 8400
6562: PUSH
6563: LD_INT 6300
6565: PUSH
6566: LD_INT 5250
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_OWVAR 67
6579: ARRAY
6580: ST_TO_ADDR
// force := [ ] ;
6581: LD_ADDR_VAR 0 8
6585: PUSH
6586: EMPTY
6587: ST_TO_ADDR
// ar_forces := [ ] ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: EMPTY
6594: ST_TO_ADDR
// ap_killers := [ ] ;
6595: LD_ADDR_EXP 29
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// Wait ( timer ) ;
6602: LD_VAR 0 2
6606: PPUSH
6607: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6611: LD_EXP 19
6615: PUSH
6616: LD_EXP 19
6620: PPUSH
6621: CALL_OW 255
6625: PUSH
6626: LD_INT 4
6628: EQUAL
6629: AND
6630: IFFALSE 6639
// Wait ( 0 0$45 ) ;
6632: LD_INT 1575
6634: PPUSH
6635: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: IFFALSE 6684
// begin Wait ( 1 1$25 ) ;
6669: LD_INT 2975
6671: PPUSH
6672: CALL_OW 67
// more_troops := true ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// end ; if more_troops then
6684: LD_VAR 0 3
6688: IFFALSE 6884
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6690: LD_ADDR_VAR 0 8
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: LD_INT 5
6700: PUSH
6701: LD_INT 6
6703: PUSH
6704: LD_INT 7
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_OWVAR 67
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PPUSH
6724: LD_INT 14
6726: PPUSH
6727: CALL 6329 0 3
6731: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6732: LD_ADDR_VAR 0 7
6736: PUSH
6737: LD_INT 2
6739: PPUSH
6740: LD_INT 3
6742: PPUSH
6743: LD_INT 22
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 42
6754: PUSH
6755: LD_INT 42
6757: PUSH
6758: LD_INT 43
6760: PUSH
6761: LD_INT 44
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: PUSH
6770: LD_OWVAR 67
6774: ARRAY
6775: PPUSH
6776: LD_INT 90
6778: PPUSH
6779: CALL 435 0 7
6783: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 4
6791: PPUSH
6792: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6796: LD_VAR 0 7
6800: PPUSH
6801: LD_INT 13
6803: PPUSH
6804: LD_INT 0
6806: PPUSH
6807: CALL_OW 49
// uc_side := 2 ;
6811: LD_ADDR_OWVAR 20
6815: PUSH
6816: LD_INT 2
6818: ST_TO_ADDR
// uc_nation := 2 ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 2
6826: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6827: LD_INT 0
6829: PPUSH
6830: LD_INT 1
6832: PPUSH
6833: LD_VAR 0 4
6837: PPUSH
6838: CALL_OW 380
// un := CreateHuman ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: CALL_OW 44
6851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6852: LD_VAR 0 6
6856: PPUSH
6857: LD_VAR 0 7
6861: PPUSH
6862: CALL_OW 52
// force := force ^ un ;
6866: LD_ADDR_VAR 0 8
6870: PUSH
6871: LD_VAR 0 8
6875: PUSH
6876: LD_VAR 0 6
6880: ADD
6881: ST_TO_ADDR
// end else
6882: GO 6926
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6884: LD_ADDR_VAR 0 8
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_OWVAR 67
6911: ARRAY
6912: PPUSH
6913: LD_VAR 0 4
6917: PPUSH
6918: LD_INT 14
6920: PPUSH
6921: CALL 6329 0 3
6925: ST_TO_ADDR
// end ; if force then
6926: LD_VAR 0 8
6930: IFFALSE 6942
// ar_forces := force ;
6932: LD_ADDR_EXP 28
6936: PUSH
6937: LD_VAR 0 8
6941: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6949: LD_INT 22
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 21
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PUSH
6978: LD_INT 0
6980: EQUAL
6981: IFFALSE 6942
// Wait ( timer ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6992: LD_ADDR_VAR 0 8
6996: PUSH
6997: LD_INT 4
6999: PUSH
7000: LD_INT 5
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: LD_INT 7
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_OWVAR 67
7019: ARRAY
7020: PPUSH
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_INT 13
7028: PUSH
7029: LD_INT 14
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: CALL_OW 12
7046: ARRAY
7047: PPUSH
7048: CALL 6329 0 3
7052: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: PUSH
7062: LD_EXP 6
7066: AND
7067: IFFALSE 7146
// begin uc_side := 2 ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_INT 2
7076: ST_TO_ADDR
// uc_nation := 2 ;
7077: LD_ADDR_OWVAR 21
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7085: LD_INT 0
7087: PPUSH
7088: LD_INT 2
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: CALL_OW 380
// eng := CreateHuman ;
7100: LD_ADDR_VAR 0 5
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7110: LD_VAR 0 5
7114: PPUSH
7115: LD_INT 13
7117: PPUSH
7118: LD_INT 0
7120: PPUSH
7121: CALL_OW 49
// Wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_EXP 6
7141: PPUSH
7142: CALL_OW 180
// end ; if force then
7146: LD_VAR 0 8
7150: IFFALSE 7162
// ar_forces := force ;
7152: LD_ADDR_EXP 28
7156: PUSH
7157: LD_VAR 0 8
7161: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// if eng then
7169: LD_VAR 0 5
7173: IFFALSE 7227
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7175: LD_EXP 6
7179: PPUSH
7180: CALL_OW 255
7184: PUSH
7185: LD_INT 2
7187: EQUAL
7188: PUSH
7189: LD_VAR 0 5
7193: PPUSH
7194: CALL_OW 302
7198: AND
7199: PUSH
7200: LD_VAR 0 5
7204: PPUSH
7205: CALL_OW 310
7209: NOT
7210: AND
7211: IFFALSE 7227
// ComEnterUnit ( eng , Delta ) ;
7213: LD_VAR 0 5
7217: PPUSH
7218: LD_EXP 6
7222: PPUSH
7223: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 69
7255: PUSH
7256: LD_INT 0
7258: EQUAL
7259: IFFALSE 7162
// Wait ( 2 2$00 ) ;
7261: LD_INT 4200
7263: PPUSH
7264: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7268: LD_ADDR_EXP 29
7272: PUSH
7273: LD_INT 1
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_OWVAR 67
7295: ARRAY
7296: PPUSH
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_INT 13
7304: PPUSH
7305: CALL 6329 0 3
7309: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 2
7317: MUL
7318: PPUSH
7319: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7323: LD_ADDR_EXP 28
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: LD_INT 6
7333: PUSH
7334: LD_INT 7
7336: PUSH
7337: LD_INT 8
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 4
7356: PPUSH
7357: LD_INT 13
7359: PPUSH
7360: CALL 6329 0 3
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: LD_INT 4
7373: PUSH
7374: LD_INT 4
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_OWVAR 67
7387: ARRAY
7388: PPUSH
7389: LD_VAR 0 4
7393: PPUSH
7394: LD_INT 14
7396: PPUSH
7397: CALL 6329 0 3
7401: ADD
7402: ST_TO_ADDR
// end ;
7403: PPOPN 8
7405: END
// every 0 0$03 trigger ar_forces do var i , target ;
7406: LD_EXP 28
7410: IFFALSE 7608
7412: GO 7414
7414: DISABLE
7415: LD_INT 0
7417: PPUSH
7418: PPUSH
// begin enable ;
7419: ENABLE
// if not ar_forces then
7420: LD_EXP 28
7424: NOT
7425: IFFALSE 7429
// exit ;
7427: GO 7608
// if Delta then
7429: LD_EXP 6
7433: IFFALSE 7447
// target := Delta else
7435: LD_ADDR_VAR 0 2
7439: PUSH
7440: LD_EXP 6
7444: ST_TO_ADDR
7445: GO 7457
// target := JMM ;
7447: LD_ADDR_VAR 0 2
7451: PUSH
7452: LD_EXP 16
7456: ST_TO_ADDR
// for i in ar_forces do
7457: LD_ADDR_VAR 0 1
7461: PUSH
7462: LD_EXP 28
7466: PUSH
7467: FOR_IN
7468: IFFALSE 7606
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7470: LD_VAR 0 1
7474: PUSH
7475: LD_INT 55
7477: PUSH
7478: EMPTY
7479: LIST
7480: PPUSH
7481: CALL_OW 69
7485: IN
7486: IFFALSE 7529
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT 22
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PPUSH
7503: CALL_OW 69
7507: PPUSH
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 310
7517: PPUSH
7518: CALL_OW 74
7522: PPUSH
7523: CALL_OW 115
7527: GO 7604
// if GetDistUnits ( i , target ) > 30 then
7529: LD_VAR 0 1
7533: PPUSH
7534: LD_VAR 0 2
7538: PPUSH
7539: CALL_OW 296
7543: PUSH
7544: LD_INT 30
7546: GREATER
7547: IFFALSE 7580
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL_OW 250
7563: PPUSH
7564: LD_VAR 0 2
7568: PPUSH
7569: CALL_OW 251
7573: PPUSH
7574: CALL_OW 114
7578: GO 7604
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 81
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 69
7599: PPUSH
7600: CALL 927 0 2
// end ;
7604: GO 7467
7606: POP
7607: POP
// end ;
7608: PPOPN 2
7610: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7611: LD_EXP 29
7615: IFFALSE 7775
7617: GO 7619
7619: DISABLE
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
7624: PPUSH
// begin enable ;
7625: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7626: LD_ADDR_VAR 0 1
7630: PUSH
7631: LD_INT 22
7633: PUSH
7634: LD_INT 0
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 25
7643: PUSH
7644: LD_INT 12
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PPUSH
7655: CALL_OW 69
7659: ST_TO_ADDR
// if not filter then
7660: LD_VAR 0 1
7664: NOT
7665: IFFALSE 7692
// begin ar_forces := ar_forces ^ ap_killers ;
7667: LD_ADDR_EXP 28
7671: PUSH
7672: LD_EXP 28
7676: PUSH
7677: LD_EXP 29
7681: ADD
7682: ST_TO_ADDR
// ap_killers := [ ] ;
7683: LD_ADDR_EXP 29
7687: PUSH
7688: EMPTY
7689: ST_TO_ADDR
// exit ;
7690: GO 7775
// end ; for i in ap_killers do
7692: LD_ADDR_VAR 0 2
7696: PUSH
7697: LD_EXP 29
7701: PUSH
7702: FOR_IN
7703: IFFALSE 7773
// begin if not IsOk ( i ) then
7705: LD_VAR 0 2
7709: PPUSH
7710: CALL_OW 302
7714: NOT
7715: IFFALSE 7719
// continue ;
7717: GO 7702
// if not HasTask ( i ) then
7719: LD_VAR 0 2
7723: PPUSH
7724: CALL_OW 314
7728: NOT
7729: IFFALSE 7751
// target := NearestUnitToUnit ( filter , i ) ;
7731: LD_ADDR_VAR 0 3
7735: PUSH
7736: LD_VAR 0 1
7740: PPUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: CALL_OW 74
7750: ST_TO_ADDR
// if target then
7751: LD_VAR 0 3
7755: IFFALSE 7771
// ComAttackUnit ( i , target ) ;
7757: LD_VAR 0 2
7761: PPUSH
7762: LD_VAR 0 3
7766: PPUSH
7767: CALL_OW 115
// end ;
7771: GO 7702
7773: POP
7774: POP
// end ; end_of_file
7775: PPOPN 3
7777: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7778: LD_EXP 6
7782: IFFALSE 7918
7784: GO 7786
7786: DISABLE
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
7791: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7792: LD_ADDR_VAR 0 2
7796: PUSH
7797: LD_INT 300
7799: PUSH
7800: LD_INT 250
7802: PUSH
7803: LD_INT 220
7805: PUSH
7806: LD_INT 210
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_OWVAR 67
7819: ARRAY
7820: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7821: LD_INT 1
7823: PPUSH
7824: LD_INT 3
7826: PPUSH
7827: CALL_OW 12
7831: PPUSH
7832: LD_INT 7
7834: PPUSH
7835: LD_INT 1
7837: PPUSH
7838: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7842: LD_INT 3150
7844: PPUSH
7845: LD_INT 4900
7847: PPUSH
7848: CALL_OW 12
7852: PPUSH
7853: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7857: LD_ADDR_VAR 0 3
7861: PUSH
7862: LD_INT 1
7864: PPUSH
7865: LD_INT 5
7867: PPUSH
7868: CALL_OW 12
7872: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7873: LD_VAR 0 3
7877: PPUSH
7878: LD_INT 7
7880: PPUSH
7881: LD_INT 1
7883: PPUSH
7884: CALL_OW 55
// counter := counter - cr * 10 ;
7888: LD_ADDR_VAR 0 2
7892: PUSH
7893: LD_VAR 0 2
7897: PUSH
7898: LD_VAR 0 3
7902: PUSH
7903: LD_INT 10
7905: MUL
7906: MINUS
7907: ST_TO_ADDR
// until counter <= 0 ;
7908: LD_VAR 0 2
7912: PUSH
7913: LD_INT 0
7915: LESSEQUAL
7916: IFFALSE 7842
// end ;
7918: PPOPN 3
7920: END
// every 0 0$03 trigger not Delta do var i ;
7921: LD_EXP 6
7925: NOT
7926: IFFALSE 7996
7928: GO 7930
7930: DISABLE
7931: LD_INT 0
7933: PPUSH
// begin for i = 1 to 5 - Difficulty do
7934: LD_ADDR_VAR 0 1
7938: PUSH
7939: DOUBLE
7940: LD_INT 1
7942: DEC
7943: ST_TO_ADDR
7944: LD_INT 5
7946: PUSH
7947: LD_OWVAR 67
7951: MINUS
7952: PUSH
7953: FOR_TO
7954: IFFALSE 7994
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7956: LD_INT 2
7958: PPUSH
7959: LD_INT 5
7961: PPUSH
7962: CALL_OW 12
7966: PPUSH
7967: LD_INT 8
7969: PPUSH
7970: LD_INT 1
7972: PPUSH
7973: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7977: LD_INT 560
7979: PPUSH
7980: LD_INT 1365
7982: PPUSH
7983: CALL_OW 12
7987: PPUSH
7988: CALL_OW 67
// end ;
7992: GO 7953
7994: POP
7995: POP
// end ;
7996: PPOPN 1
7998: END
// every 3 3$00 trigger tick < 15 15$00 do
7999: LD_OWVAR 1
8003: PUSH
8004: LD_INT 31500
8006: LESS
8007: IFFALSE 8067
8009: GO 8011
8011: DISABLE
// begin enable ;
8012: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8013: LD_INT 1
8015: PPUSH
8016: LD_INT 3
8018: PPUSH
8019: CALL_OW 12
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8031: LD_INT 1330
8033: PPUSH
8034: LD_INT 2065
8036: PPUSH
8037: CALL_OW 12
8041: PPUSH
8042: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 4
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: LD_INT 15
8059: PPUSH
8060: LD_INT 1
8062: PPUSH
8063: CALL_OW 55
// end ; end_of_file
8067: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL 24201 0 1
// if un = JMM then
8077: LD_VAR 0 1
8081: PUSH
8082: LD_EXP 16
8086: EQUAL
8087: IFFALSE 8096
// YouLost ( JMM ) ;
8089: LD_STRING JMM
8091: PPUSH
8092: CALL_OW 104
// if un = Delta then
8096: LD_VAR 0 1
8100: PUSH
8101: LD_EXP 6
8105: EQUAL
8106: IFFALSE 8129
// begin Delta := 0 ;
8108: LD_ADDR_EXP 6
8112: PUSH
8113: LD_INT 0
8115: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8116: LD_INT 0
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_INT 1
8124: PPUSH
8125: CALL_OW 324
// end ; if un in ar_forces then
8129: LD_VAR 0 1
8133: PUSH
8134: LD_EXP 28
8138: IN
8139: IFFALSE 8157
// ar_forces := ar_forces diff un ;
8141: LD_ADDR_EXP 28
8145: PUSH
8146: LD_EXP 28
8150: PUSH
8151: LD_VAR 0 1
8155: DIFF
8156: ST_TO_ADDR
// if un in ap_killers then
8157: LD_VAR 0 1
8161: PUSH
8162: LD_EXP 29
8166: IN
8167: IFFALSE 8185
// ap_killers := ap_killers diff un ;
8169: LD_ADDR_EXP 29
8173: PUSH
8174: LD_EXP 29
8178: PUSH
8179: LD_VAR 0 1
8183: DIFF
8184: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8185: LD_VAR 0 1
8189: PUSH
8190: LD_INT 2
8192: PUSH
8193: LD_INT 25
8195: PUSH
8196: LD_INT 12
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: LD_INT 25
8205: PUSH
8206: LD_INT 16
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 69
8222: IN
8223: IFFALSE 8239
// apeKillCounter := apeKillCounter + 1 ;
8225: LD_ADDR_EXP 15
8229: PUSH
8230: LD_EXP 15
8234: PUSH
8235: LD_INT 1
8237: PLUS
8238: ST_TO_ADDR
// end ;
8239: PPOPN 1
8241: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8242: LD_VAR 0 1
8246: PPUSH
8247: LD_VAR 0 2
8251: PPUSH
8252: CALL 24321 0 2
// end ;
8256: PPOPN 2
8258: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8259: LD_VAR 0 1
8263: PUSH
8264: LD_INT 1
8266: EQUAL
8267: PUSH
8268: LD_VAR 0 2
8272: PUSH
8273: LD_INT 2
8275: EQUAL
8276: AND
8277: PUSH
8278: LD_EXP 13
8282: NOT
8283: AND
8284: IFFALSE 8294
// arab_spotted := true ;
8286: LD_ADDR_EXP 13
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// end ;
8294: PPOPN 2
8296: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8297: LD_ADDR_OWVAR 57
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// end_mission := true ;
8305: LD_ADDR_EXP 14
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// end ;
8313: PPOPN 1
8315: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8316: LD_VAR 0 2
8320: PPUSH
8321: CALL_OW 255
8325: PUSH
8326: LD_INT 1
8328: EQUAL
8329: IFFALSE 8345
// apeman_counter := apeman_counter + 1 ;
8331: LD_ADDR_EXP 12
8335: PUSH
8336: LD_EXP 12
8340: PUSH
8341: LD_INT 1
8343: PLUS
8344: ST_TO_ADDR
// if not first_apeman_tamed then
8345: LD_EXP 8
8349: NOT
8350: IFFALSE 8549
// begin first_apeman_tamed := true ;
8352: LD_ADDR_EXP 8
8356: PUSH
8357: LD_INT 1
8359: ST_TO_ADDR
// if sci = Gladstone then
8360: LD_VAR 0 2
8364: PUSH
8365: LD_EXP 17
8369: EQUAL
8370: IFFALSE 8384
// Say ( Gladstone , D7b-Glad-1 ) ;
8372: LD_EXP 17
8376: PPUSH
8377: LD_STRING D7b-Glad-1
8379: PPUSH
8380: CALL_OW 88
// if sci = Denis then
8384: LD_VAR 0 2
8388: PUSH
8389: LD_EXP 19
8393: EQUAL
8394: IFFALSE 8408
// Say ( Denis , D7a-Den-1 ) ;
8396: LD_EXP 19
8400: PPUSH
8401: LD_STRING D7a-Den-1
8403: PPUSH
8404: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8408: LD_VAR 0 2
8412: PUSH
8413: LD_EXP 16
8417: PUSH
8418: LD_EXP 17
8422: PUSH
8423: LD_EXP 19
8427: PUSH
8428: LD_EXP 22
8432: PUSH
8433: LD_EXP 23
8437: PUSH
8438: LD_EXP 24
8442: PUSH
8443: LD_EXP 25
8447: PUSH
8448: LD_EXP 21
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: IN
8463: NOT
8464: IFFALSE 8507
// begin if GetSex ( sci ) = sex_male then
8466: LD_VAR 0 2
8470: PPUSH
8471: CALL_OW 258
8475: PUSH
8476: LD_INT 1
8478: EQUAL
8479: IFFALSE 8495
// Say ( sci , D7c-Sci1-1 ) else
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_STRING D7c-Sci1-1
8488: PPUSH
8489: CALL_OW 88
8493: GO 8507
// Say ( sci , D7c-FSci1-1 ) ;
8495: LD_VAR 0 2
8499: PPUSH
8500: LD_STRING D7c-FSci1-1
8502: PPUSH
8503: CALL_OW 88
// end ; if sci <> Gladstone then
8507: LD_VAR 0 2
8511: PUSH
8512: LD_EXP 17
8516: NONEQUAL
8517: IFFALSE 8531
// Say ( Gladstone , D7c-Glad-1 ) ;
8519: LD_EXP 17
8523: PPUSH
8524: LD_STRING D7c-Glad-1
8526: PPUSH
8527: CALL_OW 88
// if Lisa then
8531: LD_EXP 22
8535: IFFALSE 8549
// Say ( Lisa , D8-Lisa-1 ) ;
8537: LD_EXP 22
8541: PPUSH
8542: LD_STRING D8-Lisa-1
8544: PPUSH
8545: CALL_OW 88
// end ; end ; end_of_file end_of_file
8549: PPOPN 2
8551: END
// every 0 0$1 do
8552: GO 8554
8554: DISABLE
// begin enable ;
8555: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8556: LD_STRING updateTimer(
8558: PUSH
8559: LD_OWVAR 1
8563: STR
8564: PUSH
8565: LD_STRING );
8567: STR
8568: PPUSH
8569: CALL_OW 559
// end ;
8573: END
// export function SOS_MapStart ( ) ; begin
8574: LD_INT 0
8576: PPUSH
// if streamModeActive then
8577: LD_EXP 30
8581: IFFALSE 8590
// DefineStreamItems ( true ) ;
8583: LD_INT 1
8585: PPUSH
8586: CALL 10244 0 1
// UpdateFactoryWaypoints ( ) ;
8590: CALL 23105 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8594: CALL 23362 0 0
// end ;
8598: LD_VAR 0 1
8602: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8603: LD_INT 0
8605: PPUSH
// if p2 = hack_mode then
8606: LD_VAR 0 2
8610: PUSH
8611: LD_INT 100
8613: EQUAL
8614: IFFALSE 9617
// begin if not StreamModeActive then
8616: LD_EXP 30
8620: NOT
8621: IFFALSE 8631
// StreamModeActive := true ;
8623: LD_ADDR_EXP 30
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// if p3 = 0 then
8631: LD_VAR 0 3
8635: PUSH
8636: LD_INT 0
8638: EQUAL
8639: IFFALSE 8645
// InitStreamMode ;
8641: CALL 9780 0 0
// if p3 = 1 then
8645: LD_VAR 0 3
8649: PUSH
8650: LD_INT 1
8652: EQUAL
8653: IFFALSE 8663
// sRocket := true ;
8655: LD_ADDR_EXP 35
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// if p3 = 2 then
8663: LD_VAR 0 3
8667: PUSH
8668: LD_INT 2
8670: EQUAL
8671: IFFALSE 8681
// sSpeed := true ;
8673: LD_ADDR_EXP 34
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// if p3 = 3 then
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 3
8688: EQUAL
8689: IFFALSE 8699
// sEngine := true ;
8691: LD_ADDR_EXP 36
8695: PUSH
8696: LD_INT 1
8698: ST_TO_ADDR
// if p3 = 4 then
8699: LD_VAR 0 3
8703: PUSH
8704: LD_INT 4
8706: EQUAL
8707: IFFALSE 8717
// sSpec := true ;
8709: LD_ADDR_EXP 33
8713: PUSH
8714: LD_INT 1
8716: ST_TO_ADDR
// if p3 = 5 then
8717: LD_VAR 0 3
8721: PUSH
8722: LD_INT 5
8724: EQUAL
8725: IFFALSE 8735
// sLevel := true ;
8727: LD_ADDR_EXP 37
8731: PUSH
8732: LD_INT 1
8734: ST_TO_ADDR
// if p3 = 6 then
8735: LD_VAR 0 3
8739: PUSH
8740: LD_INT 6
8742: EQUAL
8743: IFFALSE 8753
// sArmoury := true ;
8745: LD_ADDR_EXP 38
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// if p3 = 7 then
8753: LD_VAR 0 3
8757: PUSH
8758: LD_INT 7
8760: EQUAL
8761: IFFALSE 8771
// sRadar := true ;
8763: LD_ADDR_EXP 39
8767: PUSH
8768: LD_INT 1
8770: ST_TO_ADDR
// if p3 = 8 then
8771: LD_VAR 0 3
8775: PUSH
8776: LD_INT 8
8778: EQUAL
8779: IFFALSE 8789
// sBunker := true ;
8781: LD_ADDR_EXP 40
8785: PUSH
8786: LD_INT 1
8788: ST_TO_ADDR
// if p3 = 9 then
8789: LD_VAR 0 3
8793: PUSH
8794: LD_INT 9
8796: EQUAL
8797: IFFALSE 8807
// sHack := true ;
8799: LD_ADDR_EXP 41
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// if p3 = 10 then
8807: LD_VAR 0 3
8811: PUSH
8812: LD_INT 10
8814: EQUAL
8815: IFFALSE 8825
// sFire := true ;
8817: LD_ADDR_EXP 42
8821: PUSH
8822: LD_INT 1
8824: ST_TO_ADDR
// if p3 = 11 then
8825: LD_VAR 0 3
8829: PUSH
8830: LD_INT 11
8832: EQUAL
8833: IFFALSE 8843
// sRefresh := true ;
8835: LD_ADDR_EXP 43
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// if p3 = 12 then
8843: LD_VAR 0 3
8847: PUSH
8848: LD_INT 12
8850: EQUAL
8851: IFFALSE 8861
// sExp := true ;
8853: LD_ADDR_EXP 44
8857: PUSH
8858: LD_INT 1
8860: ST_TO_ADDR
// if p3 = 13 then
8861: LD_VAR 0 3
8865: PUSH
8866: LD_INT 13
8868: EQUAL
8869: IFFALSE 8879
// sDepot := true ;
8871: LD_ADDR_EXP 45
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
// if p3 = 14 then
8879: LD_VAR 0 3
8883: PUSH
8884: LD_INT 14
8886: EQUAL
8887: IFFALSE 8897
// sFlag := true ;
8889: LD_ADDR_EXP 46
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// if p3 = 15 then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 15
8904: EQUAL
8905: IFFALSE 8915
// sKamikadze := true ;
8907: LD_ADDR_EXP 54
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 16 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 16
8922: EQUAL
8923: IFFALSE 8933
// sTroll := true ;
8925: LD_ADDR_EXP 55
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// if p3 = 17 then
8933: LD_VAR 0 3
8937: PUSH
8938: LD_INT 17
8940: EQUAL
8941: IFFALSE 8951
// sSlow := true ;
8943: LD_ADDR_EXP 56
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// if p3 = 18 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 18
8958: EQUAL
8959: IFFALSE 8969
// sLack := true ;
8961: LD_ADDR_EXP 57
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// if p3 = 19 then
8969: LD_VAR 0 3
8973: PUSH
8974: LD_INT 19
8976: EQUAL
8977: IFFALSE 8987
// sTank := true ;
8979: LD_ADDR_EXP 59
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// if p3 = 20 then
8987: LD_VAR 0 3
8991: PUSH
8992: LD_INT 20
8994: EQUAL
8995: IFFALSE 9005
// sRemote := true ;
8997: LD_ADDR_EXP 60
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// if p3 = 21 then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_INT 21
9012: EQUAL
9013: IFFALSE 9023
// sPowell := true ;
9015: LD_ADDR_EXP 61
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// if p3 = 22 then
9023: LD_VAR 0 3
9027: PUSH
9028: LD_INT 22
9030: EQUAL
9031: IFFALSE 9041
// sTeleport := true ;
9033: LD_ADDR_EXP 64
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// if p3 = 23 then
9041: LD_VAR 0 3
9045: PUSH
9046: LD_INT 23
9048: EQUAL
9049: IFFALSE 9059
// sOilTower := true ;
9051: LD_ADDR_EXP 66
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// if p3 = 24 then
9059: LD_VAR 0 3
9063: PUSH
9064: LD_INT 24
9066: EQUAL
9067: IFFALSE 9077
// sShovel := true ;
9069: LD_ADDR_EXP 67
9073: PUSH
9074: LD_INT 1
9076: ST_TO_ADDR
// if p3 = 25 then
9077: LD_VAR 0 3
9081: PUSH
9082: LD_INT 25
9084: EQUAL
9085: IFFALSE 9095
// sSheik := true ;
9087: LD_ADDR_EXP 68
9091: PUSH
9092: LD_INT 1
9094: ST_TO_ADDR
// if p3 = 26 then
9095: LD_VAR 0 3
9099: PUSH
9100: LD_INT 26
9102: EQUAL
9103: IFFALSE 9113
// sEarthquake := true ;
9105: LD_ADDR_EXP 70
9109: PUSH
9110: LD_INT 1
9112: ST_TO_ADDR
// if p3 = 27 then
9113: LD_VAR 0 3
9117: PUSH
9118: LD_INT 27
9120: EQUAL
9121: IFFALSE 9131
// sAI := true ;
9123: LD_ADDR_EXP 71
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// if p3 = 28 then
9131: LD_VAR 0 3
9135: PUSH
9136: LD_INT 28
9138: EQUAL
9139: IFFALSE 9149
// sCargo := true ;
9141: LD_ADDR_EXP 74
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// if p3 = 29 then
9149: LD_VAR 0 3
9153: PUSH
9154: LD_INT 29
9156: EQUAL
9157: IFFALSE 9167
// sDLaser := true ;
9159: LD_ADDR_EXP 75
9163: PUSH
9164: LD_INT 1
9166: ST_TO_ADDR
// if p3 = 30 then
9167: LD_VAR 0 3
9171: PUSH
9172: LD_INT 30
9174: EQUAL
9175: IFFALSE 9185
// sExchange := true ;
9177: LD_ADDR_EXP 76
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// if p3 = 31 then
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 31
9192: EQUAL
9193: IFFALSE 9203
// sFac := true ;
9195: LD_ADDR_EXP 77
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// if p3 = 32 then
9203: LD_VAR 0 3
9207: PUSH
9208: LD_INT 32
9210: EQUAL
9211: IFFALSE 9221
// sPower := true ;
9213: LD_ADDR_EXP 78
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// if p3 = 33 then
9221: LD_VAR 0 3
9225: PUSH
9226: LD_INT 33
9228: EQUAL
9229: IFFALSE 9239
// sRandom := true ;
9231: LD_ADDR_EXP 79
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// if p3 = 34 then
9239: LD_VAR 0 3
9243: PUSH
9244: LD_INT 34
9246: EQUAL
9247: IFFALSE 9257
// sShield := true ;
9249: LD_ADDR_EXP 80
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// if p3 = 35 then
9257: LD_VAR 0 3
9261: PUSH
9262: LD_INT 35
9264: EQUAL
9265: IFFALSE 9275
// sTime := true ;
9267: LD_ADDR_EXP 81
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// if p3 = 36 then
9275: LD_VAR 0 3
9279: PUSH
9280: LD_INT 36
9282: EQUAL
9283: IFFALSE 9293
// sTools := true ;
9285: LD_ADDR_EXP 82
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// if p3 = 101 then
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 101
9300: EQUAL
9301: IFFALSE 9311
// sSold := true ;
9303: LD_ADDR_EXP 47
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// if p3 = 102 then
9311: LD_VAR 0 3
9315: PUSH
9316: LD_INT 102
9318: EQUAL
9319: IFFALSE 9329
// sDiff := true ;
9321: LD_ADDR_EXP 48
9325: PUSH
9326: LD_INT 1
9328: ST_TO_ADDR
// if p3 = 103 then
9329: LD_VAR 0 3
9333: PUSH
9334: LD_INT 103
9336: EQUAL
9337: IFFALSE 9347
// sFog := true ;
9339: LD_ADDR_EXP 51
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// if p3 = 104 then
9347: LD_VAR 0 3
9351: PUSH
9352: LD_INT 104
9354: EQUAL
9355: IFFALSE 9365
// sReset := true ;
9357: LD_ADDR_EXP 52
9361: PUSH
9362: LD_INT 1
9364: ST_TO_ADDR
// if p3 = 105 then
9365: LD_VAR 0 3
9369: PUSH
9370: LD_INT 105
9372: EQUAL
9373: IFFALSE 9383
// sSun := true ;
9375: LD_ADDR_EXP 53
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// if p3 = 106 then
9383: LD_VAR 0 3
9387: PUSH
9388: LD_INT 106
9390: EQUAL
9391: IFFALSE 9401
// sTiger := true ;
9393: LD_ADDR_EXP 49
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// if p3 = 107 then
9401: LD_VAR 0 3
9405: PUSH
9406: LD_INT 107
9408: EQUAL
9409: IFFALSE 9419
// sBomb := true ;
9411: LD_ADDR_EXP 50
9415: PUSH
9416: LD_INT 1
9418: ST_TO_ADDR
// if p3 = 108 then
9419: LD_VAR 0 3
9423: PUSH
9424: LD_INT 108
9426: EQUAL
9427: IFFALSE 9437
// sWound := true ;
9429: LD_ADDR_EXP 58
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// if p3 = 109 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 109
9444: EQUAL
9445: IFFALSE 9455
// sBetray := true ;
9447: LD_ADDR_EXP 62
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
// if p3 = 110 then
9455: LD_VAR 0 3
9459: PUSH
9460: LD_INT 110
9462: EQUAL
9463: IFFALSE 9473
// sContamin := true ;
9465: LD_ADDR_EXP 63
9469: PUSH
9470: LD_INT 1
9472: ST_TO_ADDR
// if p3 = 111 then
9473: LD_VAR 0 3
9477: PUSH
9478: LD_INT 111
9480: EQUAL
9481: IFFALSE 9491
// sOil := true ;
9483: LD_ADDR_EXP 65
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// if p3 = 112 then
9491: LD_VAR 0 3
9495: PUSH
9496: LD_INT 112
9498: EQUAL
9499: IFFALSE 9509
// sStu := true ;
9501: LD_ADDR_EXP 69
9505: PUSH
9506: LD_INT 1
9508: ST_TO_ADDR
// if p3 = 113 then
9509: LD_VAR 0 3
9513: PUSH
9514: LD_INT 113
9516: EQUAL
9517: IFFALSE 9527
// sBazooka := true ;
9519: LD_ADDR_EXP 72
9523: PUSH
9524: LD_INT 1
9526: ST_TO_ADDR
// if p3 = 114 then
9527: LD_VAR 0 3
9531: PUSH
9532: LD_INT 114
9534: EQUAL
9535: IFFALSE 9545
// sMortar := true ;
9537: LD_ADDR_EXP 73
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// if p3 = 115 then
9545: LD_VAR 0 3
9549: PUSH
9550: LD_INT 115
9552: EQUAL
9553: IFFALSE 9563
// sRanger := true ;
9555: LD_ADDR_EXP 83
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// if p3 = 116 then
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 116
9570: EQUAL
9571: IFFALSE 9581
// sComputer := true ;
9573: LD_ADDR_EXP 84
9577: PUSH
9578: LD_INT 1
9580: ST_TO_ADDR
// if p3 = 117 then
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 117
9588: EQUAL
9589: IFFALSE 9599
// s30 := true ;
9591: LD_ADDR_EXP 85
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// if p3 = 118 then
9599: LD_VAR 0 3
9603: PUSH
9604: LD_INT 118
9606: EQUAL
9607: IFFALSE 9617
// s60 := true ;
9609: LD_ADDR_EXP 86
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// end ; if p2 = stream_mode then
9617: LD_VAR 0 2
9621: PUSH
9622: LD_INT 101
9624: EQUAL
9625: IFFALSE 9753
// begin case p3 of 1 :
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 1
9634: DOUBLE
9635: EQUAL
9636: IFTRUE 9640
9638: GO 9647
9640: POP
// hHackUnlimitedResources ; 2 :
9641: CALL 21851 0 0
9645: GO 9753
9647: LD_INT 2
9649: DOUBLE
9650: EQUAL
9651: IFTRUE 9655
9653: GO 9662
9655: POP
// hHackSetLevel10 ; 3 :
9656: CALL 21984 0 0
9660: GO 9753
9662: LD_INT 3
9664: DOUBLE
9665: EQUAL
9666: IFTRUE 9670
9668: GO 9677
9670: POP
// hHackSetLevel10YourUnits ; 4 :
9671: CALL 22069 0 0
9675: GO 9753
9677: LD_INT 4
9679: DOUBLE
9680: EQUAL
9681: IFTRUE 9685
9683: GO 9692
9685: POP
// hHackInvincible ; 5 :
9686: CALL 22517 0 0
9690: GO 9753
9692: LD_INT 5
9694: DOUBLE
9695: EQUAL
9696: IFTRUE 9700
9698: GO 9707
9700: POP
// hHackInvisible ; 6 :
9701: CALL 22628 0 0
9705: GO 9753
9707: LD_INT 6
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9722
9715: POP
// hHackChangeYourSide ; 7 :
9716: CALL 22685 0 0
9720: GO 9753
9722: LD_INT 7
9724: DOUBLE
9725: EQUAL
9726: IFTRUE 9730
9728: GO 9737
9730: POP
// hHackChangeUnitSide ; 8 :
9731: CALL 22727 0 0
9735: GO 9753
9737: LD_INT 8
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9752
9745: POP
// hHackFog ; end ;
9746: CALL 22828 0 0
9750: GO 9753
9752: POP
// end ; end ;
9753: LD_VAR 0 7
9757: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9758: GO 9760
9760: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9761: LD_STRING initStreamRollete();
9763: PPUSH
9764: CALL_OW 559
// InitStreamMode ;
9768: CALL 9780 0 0
// DefineStreamItems ( false ) ;
9772: LD_INT 0
9774: PPUSH
9775: CALL 10244 0 1
// end ;
9779: END
// function InitStreamMode ; begin
9780: LD_INT 0
9782: PPUSH
// streamModeActive := false ;
9783: LD_ADDR_EXP 30
9787: PUSH
9788: LD_INT 0
9790: ST_TO_ADDR
// normalCounter := 36 ;
9791: LD_ADDR_EXP 31
9795: PUSH
9796: LD_INT 36
9798: ST_TO_ADDR
// hardcoreCounter := 18 ;
9799: LD_ADDR_EXP 32
9803: PUSH
9804: LD_INT 18
9806: ST_TO_ADDR
// sRocket := false ;
9807: LD_ADDR_EXP 35
9811: PUSH
9812: LD_INT 0
9814: ST_TO_ADDR
// sSpeed := false ;
9815: LD_ADDR_EXP 34
9819: PUSH
9820: LD_INT 0
9822: ST_TO_ADDR
// sEngine := false ;
9823: LD_ADDR_EXP 36
9827: PUSH
9828: LD_INT 0
9830: ST_TO_ADDR
// sSpec := false ;
9831: LD_ADDR_EXP 33
9835: PUSH
9836: LD_INT 0
9838: ST_TO_ADDR
// sLevel := false ;
9839: LD_ADDR_EXP 37
9843: PUSH
9844: LD_INT 0
9846: ST_TO_ADDR
// sArmoury := false ;
9847: LD_ADDR_EXP 38
9851: PUSH
9852: LD_INT 0
9854: ST_TO_ADDR
// sRadar := false ;
9855: LD_ADDR_EXP 39
9859: PUSH
9860: LD_INT 0
9862: ST_TO_ADDR
// sBunker := false ;
9863: LD_ADDR_EXP 40
9867: PUSH
9868: LD_INT 0
9870: ST_TO_ADDR
// sHack := false ;
9871: LD_ADDR_EXP 41
9875: PUSH
9876: LD_INT 0
9878: ST_TO_ADDR
// sFire := false ;
9879: LD_ADDR_EXP 42
9883: PUSH
9884: LD_INT 0
9886: ST_TO_ADDR
// sRefresh := false ;
9887: LD_ADDR_EXP 43
9891: PUSH
9892: LD_INT 0
9894: ST_TO_ADDR
// sExp := false ;
9895: LD_ADDR_EXP 44
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// sDepot := false ;
9903: LD_ADDR_EXP 45
9907: PUSH
9908: LD_INT 0
9910: ST_TO_ADDR
// sFlag := false ;
9911: LD_ADDR_EXP 46
9915: PUSH
9916: LD_INT 0
9918: ST_TO_ADDR
// sKamikadze := false ;
9919: LD_ADDR_EXP 54
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// sTroll := false ;
9927: LD_ADDR_EXP 55
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// sSlow := false ;
9935: LD_ADDR_EXP 56
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// sLack := false ;
9943: LD_ADDR_EXP 57
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// sTank := false ;
9951: LD_ADDR_EXP 59
9955: PUSH
9956: LD_INT 0
9958: ST_TO_ADDR
// sRemote := false ;
9959: LD_ADDR_EXP 60
9963: PUSH
9964: LD_INT 0
9966: ST_TO_ADDR
// sPowell := false ;
9967: LD_ADDR_EXP 61
9971: PUSH
9972: LD_INT 0
9974: ST_TO_ADDR
// sTeleport := false ;
9975: LD_ADDR_EXP 64
9979: PUSH
9980: LD_INT 0
9982: ST_TO_ADDR
// sOilTower := false ;
9983: LD_ADDR_EXP 66
9987: PUSH
9988: LD_INT 0
9990: ST_TO_ADDR
// sShovel := false ;
9991: LD_ADDR_EXP 67
9995: PUSH
9996: LD_INT 0
9998: ST_TO_ADDR
// sSheik := false ;
9999: LD_ADDR_EXP 68
10003: PUSH
10004: LD_INT 0
10006: ST_TO_ADDR
// sEarthquake := false ;
10007: LD_ADDR_EXP 70
10011: PUSH
10012: LD_INT 0
10014: ST_TO_ADDR
// sAI := false ;
10015: LD_ADDR_EXP 71
10019: PUSH
10020: LD_INT 0
10022: ST_TO_ADDR
// sCargo := false ;
10023: LD_ADDR_EXP 74
10027: PUSH
10028: LD_INT 0
10030: ST_TO_ADDR
// sDLaser := false ;
10031: LD_ADDR_EXP 75
10035: PUSH
10036: LD_INT 0
10038: ST_TO_ADDR
// sExchange := false ;
10039: LD_ADDR_EXP 76
10043: PUSH
10044: LD_INT 0
10046: ST_TO_ADDR
// sFac := false ;
10047: LD_ADDR_EXP 77
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// sPower := false ;
10055: LD_ADDR_EXP 78
10059: PUSH
10060: LD_INT 0
10062: ST_TO_ADDR
// sRandom := false ;
10063: LD_ADDR_EXP 79
10067: PUSH
10068: LD_INT 0
10070: ST_TO_ADDR
// sShield := false ;
10071: LD_ADDR_EXP 80
10075: PUSH
10076: LD_INT 0
10078: ST_TO_ADDR
// sTime := false ;
10079: LD_ADDR_EXP 81
10083: PUSH
10084: LD_INT 0
10086: ST_TO_ADDR
// sTools := false ;
10087: LD_ADDR_EXP 82
10091: PUSH
10092: LD_INT 0
10094: ST_TO_ADDR
// sSold := false ;
10095: LD_ADDR_EXP 47
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// sDiff := false ;
10103: LD_ADDR_EXP 48
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// sFog := false ;
10111: LD_ADDR_EXP 51
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// sReset := false ;
10119: LD_ADDR_EXP 52
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// sSun := false ;
10127: LD_ADDR_EXP 53
10131: PUSH
10132: LD_INT 0
10134: ST_TO_ADDR
// sTiger := false ;
10135: LD_ADDR_EXP 49
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// sBomb := false ;
10143: LD_ADDR_EXP 50
10147: PUSH
10148: LD_INT 0
10150: ST_TO_ADDR
// sWound := false ;
10151: LD_ADDR_EXP 58
10155: PUSH
10156: LD_INT 0
10158: ST_TO_ADDR
// sBetray := false ;
10159: LD_ADDR_EXP 62
10163: PUSH
10164: LD_INT 0
10166: ST_TO_ADDR
// sContamin := false ;
10167: LD_ADDR_EXP 63
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// sOil := false ;
10175: LD_ADDR_EXP 65
10179: PUSH
10180: LD_INT 0
10182: ST_TO_ADDR
// sStu := false ;
10183: LD_ADDR_EXP 69
10187: PUSH
10188: LD_INT 0
10190: ST_TO_ADDR
// sBazooka := false ;
10191: LD_ADDR_EXP 72
10195: PUSH
10196: LD_INT 0
10198: ST_TO_ADDR
// sMortar := false ;
10199: LD_ADDR_EXP 73
10203: PUSH
10204: LD_INT 0
10206: ST_TO_ADDR
// sRanger := false ;
10207: LD_ADDR_EXP 83
10211: PUSH
10212: LD_INT 0
10214: ST_TO_ADDR
// sComputer := false ;
10215: LD_ADDR_EXP 84
10219: PUSH
10220: LD_INT 0
10222: ST_TO_ADDR
// s30 := false ;
10223: LD_ADDR_EXP 85
10227: PUSH
10228: LD_INT 0
10230: ST_TO_ADDR
// s60 := false ;
10231: LD_ADDR_EXP 86
10235: PUSH
10236: LD_INT 0
10238: ST_TO_ADDR
// end ;
10239: LD_VAR 0 1
10243: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10244: LD_INT 0
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
// result := [ ] ;
10253: LD_ADDR_VAR 0 2
10257: PUSH
10258: EMPTY
10259: ST_TO_ADDR
// if campaign_id = 1 then
10260: LD_OWVAR 69
10264: PUSH
10265: LD_INT 1
10267: EQUAL
10268: IFFALSE 13434
// begin case mission_number of 1 :
10270: LD_OWVAR 70
10274: PUSH
10275: LD_INT 1
10277: DOUBLE
10278: EQUAL
10279: IFTRUE 10283
10281: GO 10359
10283: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10284: LD_ADDR_VAR 0 2
10288: PUSH
10289: LD_INT 2
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: LD_INT 11
10297: PUSH
10298: LD_INT 12
10300: PUSH
10301: LD_INT 15
10303: PUSH
10304: LD_INT 16
10306: PUSH
10307: LD_INT 22
10309: PUSH
10310: LD_INT 23
10312: PUSH
10313: LD_INT 26
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 101
10329: PUSH
10330: LD_INT 102
10332: PUSH
10333: LD_INT 106
10335: PUSH
10336: LD_INT 116
10338: PUSH
10339: LD_INT 117
10341: PUSH
10342: LD_INT 118
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: ST_TO_ADDR
10357: GO 13432
10359: LD_INT 2
10361: DOUBLE
10362: EQUAL
10363: IFTRUE 10367
10365: GO 10451
10367: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10368: LD_ADDR_VAR 0 2
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: LD_INT 4
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 12
10384: PUSH
10385: LD_INT 15
10387: PUSH
10388: LD_INT 16
10390: PUSH
10391: LD_INT 22
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: LD_INT 26
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 101
10413: PUSH
10414: LD_INT 102
10416: PUSH
10417: LD_INT 105
10419: PUSH
10420: LD_INT 106
10422: PUSH
10423: LD_INT 108
10425: PUSH
10426: LD_INT 116
10428: PUSH
10429: LD_INT 117
10431: PUSH
10432: LD_INT 118
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: ST_TO_ADDR
10449: GO 13432
10451: LD_INT 3
10453: DOUBLE
10454: EQUAL
10455: IFTRUE 10459
10457: GO 10547
10459: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: LD_INT 4
10470: PUSH
10471: LD_INT 5
10473: PUSH
10474: LD_INT 11
10476: PUSH
10477: LD_INT 12
10479: PUSH
10480: LD_INT 15
10482: PUSH
10483: LD_INT 16
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_INT 26
10491: PUSH
10492: LD_INT 36
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 101
10509: PUSH
10510: LD_INT 102
10512: PUSH
10513: LD_INT 105
10515: PUSH
10516: LD_INT 106
10518: PUSH
10519: LD_INT 108
10521: PUSH
10522: LD_INT 116
10524: PUSH
10525: LD_INT 117
10527: PUSH
10528: LD_INT 118
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: ST_TO_ADDR
10545: GO 13432
10547: LD_INT 4
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10651
10555: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10556: LD_ADDR_VAR 0 2
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: LD_INT 5
10569: PUSH
10570: LD_INT 8
10572: PUSH
10573: LD_INT 11
10575: PUSH
10576: LD_INT 12
10578: PUSH
10579: LD_INT 15
10581: PUSH
10582: LD_INT 16
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 23
10590: PUSH
10591: LD_INT 26
10593: PUSH
10594: LD_INT 36
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 101
10613: PUSH
10614: LD_INT 102
10616: PUSH
10617: LD_INT 105
10619: PUSH
10620: LD_INT 106
10622: PUSH
10623: LD_INT 108
10625: PUSH
10626: LD_INT 116
10628: PUSH
10629: LD_INT 117
10631: PUSH
10632: LD_INT 118
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 13432
10651: LD_INT 5
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10771
10659: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10660: LD_ADDR_VAR 0 2
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: LD_INT 6
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: LD_INT 11
10682: PUSH
10683: LD_INT 12
10685: PUSH
10686: LD_INT 15
10688: PUSH
10689: LD_INT 16
10691: PUSH
10692: LD_INT 22
10694: PUSH
10695: LD_INT 23
10697: PUSH
10698: LD_INT 25
10700: PUSH
10701: LD_INT 26
10703: PUSH
10704: LD_INT 36
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 101
10725: PUSH
10726: LD_INT 102
10728: PUSH
10729: LD_INT 105
10731: PUSH
10732: LD_INT 106
10734: PUSH
10735: LD_INT 108
10737: PUSH
10738: LD_INT 109
10740: PUSH
10741: LD_INT 112
10743: PUSH
10744: LD_INT 116
10746: PUSH
10747: LD_INT 117
10749: PUSH
10750: LD_INT 118
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: ST_TO_ADDR
10769: GO 13432
10771: LD_INT 6
10773: DOUBLE
10774: EQUAL
10775: IFTRUE 10779
10777: GO 10911
10779: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: LD_INT 4
10790: PUSH
10791: LD_INT 5
10793: PUSH
10794: LD_INT 6
10796: PUSH
10797: LD_INT 8
10799: PUSH
10800: LD_INT 11
10802: PUSH
10803: LD_INT 12
10805: PUSH
10806: LD_INT 15
10808: PUSH
10809: LD_INT 16
10811: PUSH
10812: LD_INT 20
10814: PUSH
10815: LD_INT 21
10817: PUSH
10818: LD_INT 22
10820: PUSH
10821: LD_INT 23
10823: PUSH
10824: LD_INT 25
10826: PUSH
10827: LD_INT 26
10829: PUSH
10830: LD_INT 30
10832: PUSH
10833: LD_INT 31
10835: PUSH
10836: LD_INT 32
10838: PUSH
10839: LD_INT 36
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 101
10865: PUSH
10866: LD_INT 102
10868: PUSH
10869: LD_INT 105
10871: PUSH
10872: LD_INT 106
10874: PUSH
10875: LD_INT 108
10877: PUSH
10878: LD_INT 109
10880: PUSH
10881: LD_INT 112
10883: PUSH
10884: LD_INT 116
10886: PUSH
10887: LD_INT 117
10889: PUSH
10890: LD_INT 118
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: ST_TO_ADDR
10909: GO 13432
10911: LD_INT 7
10913: DOUBLE
10914: EQUAL
10915: IFTRUE 10919
10917: GO 11031
10919: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10920: LD_ADDR_VAR 0 2
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: LD_INT 4
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: LD_INT 7
10936: PUSH
10937: LD_INT 11
10939: PUSH
10940: LD_INT 12
10942: PUSH
10943: LD_INT 15
10945: PUSH
10946: LD_INT 16
10948: PUSH
10949: LD_INT 20
10951: PUSH
10952: LD_INT 21
10954: PUSH
10955: LD_INT 22
10957: PUSH
10958: LD_INT 23
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 26
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 101
10985: PUSH
10986: LD_INT 102
10988: PUSH
10989: LD_INT 103
10991: PUSH
10992: LD_INT 105
10994: PUSH
10995: LD_INT 106
10997: PUSH
10998: LD_INT 108
11000: PUSH
11001: LD_INT 112
11003: PUSH
11004: LD_INT 116
11006: PUSH
11007: LD_INT 117
11009: PUSH
11010: LD_INT 118
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
11029: GO 13432
11031: LD_INT 8
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11179
11039: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: LD_INT 2
11047: PUSH
11048: LD_INT 4
11050: PUSH
11051: LD_INT 5
11053: PUSH
11054: LD_INT 6
11056: PUSH
11057: LD_INT 7
11059: PUSH
11060: LD_INT 8
11062: PUSH
11063: LD_INT 11
11065: PUSH
11066: LD_INT 12
11068: PUSH
11069: LD_INT 15
11071: PUSH
11072: LD_INT 16
11074: PUSH
11075: LD_INT 20
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 23
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 26
11092: PUSH
11093: LD_INT 30
11095: PUSH
11096: LD_INT 31
11098: PUSH
11099: LD_INT 32
11101: PUSH
11102: LD_INT 36
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 101
11129: PUSH
11130: LD_INT 102
11132: PUSH
11133: LD_INT 103
11135: PUSH
11136: LD_INT 105
11138: PUSH
11139: LD_INT 106
11141: PUSH
11142: LD_INT 108
11144: PUSH
11145: LD_INT 109
11147: PUSH
11148: LD_INT 112
11150: PUSH
11151: LD_INT 116
11153: PUSH
11154: LD_INT 117
11156: PUSH
11157: LD_INT 118
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: ST_TO_ADDR
11177: GO 13432
11179: LD_INT 9
11181: DOUBLE
11182: EQUAL
11183: IFTRUE 11187
11185: GO 11335
11187: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11188: LD_ADDR_VAR 0 2
11192: PUSH
11193: LD_INT 2
11195: PUSH
11196: LD_INT 4
11198: PUSH
11199: LD_INT 5
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: LD_INT 7
11207: PUSH
11208: LD_INT 8
11210: PUSH
11211: LD_INT 11
11213: PUSH
11214: LD_INT 12
11216: PUSH
11217: LD_INT 15
11219: PUSH
11220: LD_INT 16
11222: PUSH
11223: LD_INT 20
11225: PUSH
11226: LD_INT 21
11228: PUSH
11229: LD_INT 22
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 25
11237: PUSH
11238: LD_INT 26
11240: PUSH
11241: LD_INT 28
11243: PUSH
11244: LD_INT 30
11246: PUSH
11247: LD_INT 31
11249: PUSH
11250: LD_INT 32
11252: PUSH
11253: LD_INT 36
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 101
11281: PUSH
11282: LD_INT 102
11284: PUSH
11285: LD_INT 103
11287: PUSH
11288: LD_INT 105
11290: PUSH
11291: LD_INT 106
11293: PUSH
11294: LD_INT 108
11296: PUSH
11297: LD_INT 109
11299: PUSH
11300: LD_INT 112
11302: PUSH
11303: LD_INT 114
11305: PUSH
11306: LD_INT 116
11308: PUSH
11309: LD_INT 117
11311: PUSH
11312: LD_INT 118
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: ST_TO_ADDR
11333: GO 13432
11335: LD_INT 10
11337: DOUBLE
11338: EQUAL
11339: IFTRUE 11343
11341: GO 11539
11343: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11344: LD_ADDR_VAR 0 2
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 4
11354: PUSH
11355: LD_INT 5
11357: PUSH
11358: LD_INT 6
11360: PUSH
11361: LD_INT 7
11363: PUSH
11364: LD_INT 8
11366: PUSH
11367: LD_INT 9
11369: PUSH
11370: LD_INT 10
11372: PUSH
11373: LD_INT 11
11375: PUSH
11376: LD_INT 12
11378: PUSH
11379: LD_INT 13
11381: PUSH
11382: LD_INT 14
11384: PUSH
11385: LD_INT 15
11387: PUSH
11388: LD_INT 16
11390: PUSH
11391: LD_INT 17
11393: PUSH
11394: LD_INT 18
11396: PUSH
11397: LD_INT 19
11399: PUSH
11400: LD_INT 20
11402: PUSH
11403: LD_INT 21
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_INT 23
11411: PUSH
11412: LD_INT 24
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 26
11420: PUSH
11421: LD_INT 28
11423: PUSH
11424: LD_INT 30
11426: PUSH
11427: LD_INT 31
11429: PUSH
11430: LD_INT 32
11432: PUSH
11433: LD_INT 36
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 101
11469: PUSH
11470: LD_INT 102
11472: PUSH
11473: LD_INT 103
11475: PUSH
11476: LD_INT 104
11478: PUSH
11479: LD_INT 105
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 107
11487: PUSH
11488: LD_INT 108
11490: PUSH
11491: LD_INT 109
11493: PUSH
11494: LD_INT 110
11496: PUSH
11497: LD_INT 111
11499: PUSH
11500: LD_INT 112
11502: PUSH
11503: LD_INT 114
11505: PUSH
11506: LD_INT 116
11508: PUSH
11509: LD_INT 117
11511: PUSH
11512: LD_INT 118
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: ST_TO_ADDR
11537: GO 13432
11539: LD_INT 11
11541: DOUBLE
11542: EQUAL
11543: IFTRUE 11547
11545: GO 11751
11547: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 2
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: LD_INT 4
11561: PUSH
11562: LD_INT 5
11564: PUSH
11565: LD_INT 6
11567: PUSH
11568: LD_INT 7
11570: PUSH
11571: LD_INT 8
11573: PUSH
11574: LD_INT 9
11576: PUSH
11577: LD_INT 10
11579: PUSH
11580: LD_INT 11
11582: PUSH
11583: LD_INT 12
11585: PUSH
11586: LD_INT 13
11588: PUSH
11589: LD_INT 14
11591: PUSH
11592: LD_INT 15
11594: PUSH
11595: LD_INT 16
11597: PUSH
11598: LD_INT 17
11600: PUSH
11601: LD_INT 18
11603: PUSH
11604: LD_INT 19
11606: PUSH
11607: LD_INT 20
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 22
11615: PUSH
11616: LD_INT 23
11618: PUSH
11619: LD_INT 24
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 26
11627: PUSH
11628: LD_INT 28
11630: PUSH
11631: LD_INT 30
11633: PUSH
11634: LD_INT 31
11636: PUSH
11637: LD_INT 32
11639: PUSH
11640: LD_INT 34
11642: PUSH
11643: LD_INT 36
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 101
11681: PUSH
11682: LD_INT 102
11684: PUSH
11685: LD_INT 103
11687: PUSH
11688: LD_INT 104
11690: PUSH
11691: LD_INT 105
11693: PUSH
11694: LD_INT 106
11696: PUSH
11697: LD_INT 107
11699: PUSH
11700: LD_INT 108
11702: PUSH
11703: LD_INT 109
11705: PUSH
11706: LD_INT 110
11708: PUSH
11709: LD_INT 111
11711: PUSH
11712: LD_INT 112
11714: PUSH
11715: LD_INT 114
11717: PUSH
11718: LD_INT 116
11720: PUSH
11721: LD_INT 117
11723: PUSH
11724: LD_INT 118
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: ST_TO_ADDR
11749: GO 13432
11751: LD_INT 12
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11979
11759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11760: LD_ADDR_VAR 0 2
11764: PUSH
11765: LD_INT 1
11767: PUSH
11768: LD_INT 2
11770: PUSH
11771: LD_INT 3
11773: PUSH
11774: LD_INT 4
11776: PUSH
11777: LD_INT 5
11779: PUSH
11780: LD_INT 6
11782: PUSH
11783: LD_INT 7
11785: PUSH
11786: LD_INT 8
11788: PUSH
11789: LD_INT 9
11791: PUSH
11792: LD_INT 10
11794: PUSH
11795: LD_INT 11
11797: PUSH
11798: LD_INT 12
11800: PUSH
11801: LD_INT 13
11803: PUSH
11804: LD_INT 14
11806: PUSH
11807: LD_INT 15
11809: PUSH
11810: LD_INT 16
11812: PUSH
11813: LD_INT 17
11815: PUSH
11816: LD_INT 18
11818: PUSH
11819: LD_INT 19
11821: PUSH
11822: LD_INT 20
11824: PUSH
11825: LD_INT 21
11827: PUSH
11828: LD_INT 22
11830: PUSH
11831: LD_INT 23
11833: PUSH
11834: LD_INT 24
11836: PUSH
11837: LD_INT 25
11839: PUSH
11840: LD_INT 26
11842: PUSH
11843: LD_INT 27
11845: PUSH
11846: LD_INT 28
11848: PUSH
11849: LD_INT 30
11851: PUSH
11852: LD_INT 31
11854: PUSH
11855: LD_INT 32
11857: PUSH
11858: LD_INT 33
11860: PUSH
11861: LD_INT 34
11863: PUSH
11864: LD_INT 36
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 101
11905: PUSH
11906: LD_INT 102
11908: PUSH
11909: LD_INT 103
11911: PUSH
11912: LD_INT 104
11914: PUSH
11915: LD_INT 105
11917: PUSH
11918: LD_INT 106
11920: PUSH
11921: LD_INT 107
11923: PUSH
11924: LD_INT 108
11926: PUSH
11927: LD_INT 109
11929: PUSH
11930: LD_INT 110
11932: PUSH
11933: LD_INT 111
11935: PUSH
11936: LD_INT 112
11938: PUSH
11939: LD_INT 113
11941: PUSH
11942: LD_INT 114
11944: PUSH
11945: LD_INT 116
11947: PUSH
11948: LD_INT 117
11950: PUSH
11951: LD_INT 118
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: ST_TO_ADDR
11977: GO 13432
11979: LD_INT 13
11981: DOUBLE
11982: EQUAL
11983: IFTRUE 11987
11985: GO 12195
11987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 3
12001: PUSH
12002: LD_INT 4
12004: PUSH
12005: LD_INT 5
12007: PUSH
12008: LD_INT 8
12010: PUSH
12011: LD_INT 9
12013: PUSH
12014: LD_INT 10
12016: PUSH
12017: LD_INT 11
12019: PUSH
12020: LD_INT 12
12022: PUSH
12023: LD_INT 14
12025: PUSH
12026: LD_INT 15
12028: PUSH
12029: LD_INT 16
12031: PUSH
12032: LD_INT 17
12034: PUSH
12035: LD_INT 18
12037: PUSH
12038: LD_INT 19
12040: PUSH
12041: LD_INT 20
12043: PUSH
12044: LD_INT 21
12046: PUSH
12047: LD_INT 22
12049: PUSH
12050: LD_INT 23
12052: PUSH
12053: LD_INT 24
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 26
12061: PUSH
12062: LD_INT 27
12064: PUSH
12065: LD_INT 28
12067: PUSH
12068: LD_INT 30
12070: PUSH
12071: LD_INT 31
12073: PUSH
12074: LD_INT 32
12076: PUSH
12077: LD_INT 33
12079: PUSH
12080: LD_INT 34
12082: PUSH
12083: LD_INT 36
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 101
12121: PUSH
12122: LD_INT 102
12124: PUSH
12125: LD_INT 103
12127: PUSH
12128: LD_INT 104
12130: PUSH
12131: LD_INT 105
12133: PUSH
12134: LD_INT 106
12136: PUSH
12137: LD_INT 107
12139: PUSH
12140: LD_INT 108
12142: PUSH
12143: LD_INT 109
12145: PUSH
12146: LD_INT 110
12148: PUSH
12149: LD_INT 111
12151: PUSH
12152: LD_INT 112
12154: PUSH
12155: LD_INT 113
12157: PUSH
12158: LD_INT 114
12160: PUSH
12161: LD_INT 116
12163: PUSH
12164: LD_INT 117
12166: PUSH
12167: LD_INT 118
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: ST_TO_ADDR
12193: GO 13432
12195: LD_INT 14
12197: DOUBLE
12198: EQUAL
12199: IFTRUE 12203
12201: GO 12427
12203: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12204: LD_ADDR_VAR 0 2
12208: PUSH
12209: LD_INT 1
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: LD_INT 3
12217: PUSH
12218: LD_INT 4
12220: PUSH
12221: LD_INT 5
12223: PUSH
12224: LD_INT 6
12226: PUSH
12227: LD_INT 7
12229: PUSH
12230: LD_INT 8
12232: PUSH
12233: LD_INT 9
12235: PUSH
12236: LD_INT 10
12238: PUSH
12239: LD_INT 11
12241: PUSH
12242: LD_INT 12
12244: PUSH
12245: LD_INT 13
12247: PUSH
12248: LD_INT 14
12250: PUSH
12251: LD_INT 15
12253: PUSH
12254: LD_INT 16
12256: PUSH
12257: LD_INT 17
12259: PUSH
12260: LD_INT 18
12262: PUSH
12263: LD_INT 19
12265: PUSH
12266: LD_INT 20
12268: PUSH
12269: LD_INT 21
12271: PUSH
12272: LD_INT 22
12274: PUSH
12275: LD_INT 23
12277: PUSH
12278: LD_INT 24
12280: PUSH
12281: LD_INT 25
12283: PUSH
12284: LD_INT 26
12286: PUSH
12287: LD_INT 27
12289: PUSH
12290: LD_INT 28
12292: PUSH
12293: LD_INT 29
12295: PUSH
12296: LD_INT 30
12298: PUSH
12299: LD_INT 31
12301: PUSH
12302: LD_INT 32
12304: PUSH
12305: LD_INT 33
12307: PUSH
12308: LD_INT 34
12310: PUSH
12311: LD_INT 36
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 101
12353: PUSH
12354: LD_INT 102
12356: PUSH
12357: LD_INT 103
12359: PUSH
12360: LD_INT 104
12362: PUSH
12363: LD_INT 105
12365: PUSH
12366: LD_INT 106
12368: PUSH
12369: LD_INT 107
12371: PUSH
12372: LD_INT 108
12374: PUSH
12375: LD_INT 109
12377: PUSH
12378: LD_INT 110
12380: PUSH
12381: LD_INT 111
12383: PUSH
12384: LD_INT 112
12386: PUSH
12387: LD_INT 113
12389: PUSH
12390: LD_INT 114
12392: PUSH
12393: LD_INT 116
12395: PUSH
12396: LD_INT 117
12398: PUSH
12399: LD_INT 118
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: ST_TO_ADDR
12425: GO 13432
12427: LD_INT 15
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12659
12435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12436: LD_ADDR_VAR 0 2
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: LD_INT 4
12452: PUSH
12453: LD_INT 5
12455: PUSH
12456: LD_INT 6
12458: PUSH
12459: LD_INT 7
12461: PUSH
12462: LD_INT 8
12464: PUSH
12465: LD_INT 9
12467: PUSH
12468: LD_INT 10
12470: PUSH
12471: LD_INT 11
12473: PUSH
12474: LD_INT 12
12476: PUSH
12477: LD_INT 13
12479: PUSH
12480: LD_INT 14
12482: PUSH
12483: LD_INT 15
12485: PUSH
12486: LD_INT 16
12488: PUSH
12489: LD_INT 17
12491: PUSH
12492: LD_INT 18
12494: PUSH
12495: LD_INT 19
12497: PUSH
12498: LD_INT 20
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 23
12509: PUSH
12510: LD_INT 24
12512: PUSH
12513: LD_INT 25
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 27
12521: PUSH
12522: LD_INT 28
12524: PUSH
12525: LD_INT 29
12527: PUSH
12528: LD_INT 30
12530: PUSH
12531: LD_INT 31
12533: PUSH
12534: LD_INT 32
12536: PUSH
12537: LD_INT 33
12539: PUSH
12540: LD_INT 34
12542: PUSH
12543: LD_INT 36
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 101
12585: PUSH
12586: LD_INT 102
12588: PUSH
12589: LD_INT 103
12591: PUSH
12592: LD_INT 104
12594: PUSH
12595: LD_INT 105
12597: PUSH
12598: LD_INT 106
12600: PUSH
12601: LD_INT 107
12603: PUSH
12604: LD_INT 108
12606: PUSH
12607: LD_INT 109
12609: PUSH
12610: LD_INT 110
12612: PUSH
12613: LD_INT 111
12615: PUSH
12616: LD_INT 112
12618: PUSH
12619: LD_INT 113
12621: PUSH
12622: LD_INT 114
12624: PUSH
12625: LD_INT 116
12627: PUSH
12628: LD_INT 117
12630: PUSH
12631: LD_INT 118
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: ST_TO_ADDR
12657: GO 13432
12659: LD_INT 16
12661: DOUBLE
12662: EQUAL
12663: IFTRUE 12667
12665: GO 12803
12667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12668: LD_ADDR_VAR 0 2
12672: PUSH
12673: LD_INT 2
12675: PUSH
12676: LD_INT 4
12678: PUSH
12679: LD_INT 5
12681: PUSH
12682: LD_INT 7
12684: PUSH
12685: LD_INT 11
12687: PUSH
12688: LD_INT 12
12690: PUSH
12691: LD_INT 15
12693: PUSH
12694: LD_INT 16
12696: PUSH
12697: LD_INT 20
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 23
12708: PUSH
12709: LD_INT 25
12711: PUSH
12712: LD_INT 26
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 31
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: LD_INT 33
12726: PUSH
12727: LD_INT 34
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 101
12753: PUSH
12754: LD_INT 102
12756: PUSH
12757: LD_INT 103
12759: PUSH
12760: LD_INT 106
12762: PUSH
12763: LD_INT 108
12765: PUSH
12766: LD_INT 112
12768: PUSH
12769: LD_INT 113
12771: PUSH
12772: LD_INT 114
12774: PUSH
12775: LD_INT 116
12777: PUSH
12778: LD_INT 117
12780: PUSH
12781: LD_INT 118
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: ST_TO_ADDR
12801: GO 13432
12803: LD_INT 17
12805: DOUBLE
12806: EQUAL
12807: IFTRUE 12811
12809: GO 13035
12811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12812: LD_ADDR_VAR 0 2
12816: PUSH
12817: LD_INT 1
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 3
12825: PUSH
12826: LD_INT 4
12828: PUSH
12829: LD_INT 5
12831: PUSH
12832: LD_INT 6
12834: PUSH
12835: LD_INT 7
12837: PUSH
12838: LD_INT 8
12840: PUSH
12841: LD_INT 9
12843: PUSH
12844: LD_INT 10
12846: PUSH
12847: LD_INT 11
12849: PUSH
12850: LD_INT 12
12852: PUSH
12853: LD_INT 13
12855: PUSH
12856: LD_INT 14
12858: PUSH
12859: LD_INT 15
12861: PUSH
12862: LD_INT 16
12864: PUSH
12865: LD_INT 17
12867: PUSH
12868: LD_INT 18
12870: PUSH
12871: LD_INT 19
12873: PUSH
12874: LD_INT 20
12876: PUSH
12877: LD_INT 21
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 23
12885: PUSH
12886: LD_INT 24
12888: PUSH
12889: LD_INT 25
12891: PUSH
12892: LD_INT 26
12894: PUSH
12895: LD_INT 27
12897: PUSH
12898: LD_INT 28
12900: PUSH
12901: LD_INT 29
12903: PUSH
12904: LD_INT 30
12906: PUSH
12907: LD_INT 31
12909: PUSH
12910: LD_INT 32
12912: PUSH
12913: LD_INT 33
12915: PUSH
12916: LD_INT 34
12918: PUSH
12919: LD_INT 36
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 101
12961: PUSH
12962: LD_INT 102
12964: PUSH
12965: LD_INT 103
12967: PUSH
12968: LD_INT 104
12970: PUSH
12971: LD_INT 105
12973: PUSH
12974: LD_INT 106
12976: PUSH
12977: LD_INT 107
12979: PUSH
12980: LD_INT 108
12982: PUSH
12983: LD_INT 109
12985: PUSH
12986: LD_INT 110
12988: PUSH
12989: LD_INT 111
12991: PUSH
12992: LD_INT 112
12994: PUSH
12995: LD_INT 113
12997: PUSH
12998: LD_INT 114
13000: PUSH
13001: LD_INT 116
13003: PUSH
13004: LD_INT 117
13006: PUSH
13007: LD_INT 118
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: ST_TO_ADDR
13033: GO 13432
13035: LD_INT 18
13037: DOUBLE
13038: EQUAL
13039: IFTRUE 13043
13041: GO 13191
13043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_INT 2
13051: PUSH
13052: LD_INT 4
13054: PUSH
13055: LD_INT 5
13057: PUSH
13058: LD_INT 7
13060: PUSH
13061: LD_INT 11
13063: PUSH
13064: LD_INT 12
13066: PUSH
13067: LD_INT 15
13069: PUSH
13070: LD_INT 16
13072: PUSH
13073: LD_INT 20
13075: PUSH
13076: LD_INT 21
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 23
13084: PUSH
13085: LD_INT 25
13087: PUSH
13088: LD_INT 26
13090: PUSH
13091: LD_INT 30
13093: PUSH
13094: LD_INT 31
13096: PUSH
13097: LD_INT 32
13099: PUSH
13100: LD_INT 33
13102: PUSH
13103: LD_INT 34
13105: PUSH
13106: LD_INT 35
13108: PUSH
13109: LD_INT 36
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 101
13137: PUSH
13138: LD_INT 102
13140: PUSH
13141: LD_INT 103
13143: PUSH
13144: LD_INT 106
13146: PUSH
13147: LD_INT 108
13149: PUSH
13150: LD_INT 112
13152: PUSH
13153: LD_INT 113
13155: PUSH
13156: LD_INT 114
13158: PUSH
13159: LD_INT 115
13161: PUSH
13162: LD_INT 116
13164: PUSH
13165: LD_INT 117
13167: PUSH
13168: LD_INT 118
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: ST_TO_ADDR
13189: GO 13432
13191: LD_INT 19
13193: DOUBLE
13194: EQUAL
13195: IFTRUE 13199
13197: GO 13431
13199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13200: LD_ADDR_VAR 0 2
13204: PUSH
13205: LD_INT 1
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: LD_INT 3
13213: PUSH
13214: LD_INT 4
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 6
13222: PUSH
13223: LD_INT 7
13225: PUSH
13226: LD_INT 8
13228: PUSH
13229: LD_INT 9
13231: PUSH
13232: LD_INT 10
13234: PUSH
13235: LD_INT 11
13237: PUSH
13238: LD_INT 12
13240: PUSH
13241: LD_INT 13
13243: PUSH
13244: LD_INT 14
13246: PUSH
13247: LD_INT 15
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 17
13255: PUSH
13256: LD_INT 18
13258: PUSH
13259: LD_INT 19
13261: PUSH
13262: LD_INT 20
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_INT 23
13273: PUSH
13274: LD_INT 24
13276: PUSH
13277: LD_INT 25
13279: PUSH
13280: LD_INT 26
13282: PUSH
13283: LD_INT 27
13285: PUSH
13286: LD_INT 28
13288: PUSH
13289: LD_INT 29
13291: PUSH
13292: LD_INT 30
13294: PUSH
13295: LD_INT 31
13297: PUSH
13298: LD_INT 32
13300: PUSH
13301: LD_INT 33
13303: PUSH
13304: LD_INT 34
13306: PUSH
13307: LD_INT 35
13309: PUSH
13310: LD_INT 36
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 101
13353: PUSH
13354: LD_INT 102
13356: PUSH
13357: LD_INT 103
13359: PUSH
13360: LD_INT 104
13362: PUSH
13363: LD_INT 105
13365: PUSH
13366: LD_INT 106
13368: PUSH
13369: LD_INT 107
13371: PUSH
13372: LD_INT 108
13374: PUSH
13375: LD_INT 109
13377: PUSH
13378: LD_INT 110
13380: PUSH
13381: LD_INT 111
13383: PUSH
13384: LD_INT 112
13386: PUSH
13387: LD_INT 113
13389: PUSH
13390: LD_INT 114
13392: PUSH
13393: LD_INT 115
13395: PUSH
13396: LD_INT 116
13398: PUSH
13399: LD_INT 117
13401: PUSH
13402: LD_INT 118
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: ST_TO_ADDR
13429: GO 13432
13431: POP
// end else
13432: GO 13663
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13434: LD_ADDR_VAR 0 2
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: LD_INT 3
13447: PUSH
13448: LD_INT 4
13450: PUSH
13451: LD_INT 5
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: LD_INT 7
13459: PUSH
13460: LD_INT 8
13462: PUSH
13463: LD_INT 9
13465: PUSH
13466: LD_INT 10
13468: PUSH
13469: LD_INT 11
13471: PUSH
13472: LD_INT 12
13474: PUSH
13475: LD_INT 13
13477: PUSH
13478: LD_INT 14
13480: PUSH
13481: LD_INT 15
13483: PUSH
13484: LD_INT 16
13486: PUSH
13487: LD_INT 17
13489: PUSH
13490: LD_INT 18
13492: PUSH
13493: LD_INT 19
13495: PUSH
13496: LD_INT 20
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 22
13504: PUSH
13505: LD_INT 23
13507: PUSH
13508: LD_INT 24
13510: PUSH
13511: LD_INT 25
13513: PUSH
13514: LD_INT 26
13516: PUSH
13517: LD_INT 27
13519: PUSH
13520: LD_INT 28
13522: PUSH
13523: LD_INT 29
13525: PUSH
13526: LD_INT 30
13528: PUSH
13529: LD_INT 31
13531: PUSH
13532: LD_INT 32
13534: PUSH
13535: LD_INT 33
13537: PUSH
13538: LD_INT 34
13540: PUSH
13541: LD_INT 35
13543: PUSH
13544: LD_INT 36
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 101
13587: PUSH
13588: LD_INT 102
13590: PUSH
13591: LD_INT 103
13593: PUSH
13594: LD_INT 104
13596: PUSH
13597: LD_INT 105
13599: PUSH
13600: LD_INT 106
13602: PUSH
13603: LD_INT 107
13605: PUSH
13606: LD_INT 108
13608: PUSH
13609: LD_INT 109
13611: PUSH
13612: LD_INT 110
13614: PUSH
13615: LD_INT 111
13617: PUSH
13618: LD_INT 112
13620: PUSH
13621: LD_INT 113
13623: PUSH
13624: LD_INT 114
13626: PUSH
13627: LD_INT 115
13629: PUSH
13630: LD_INT 116
13632: PUSH
13633: LD_INT 117
13635: PUSH
13636: LD_INT 118
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: ST_TO_ADDR
// if result then
13663: LD_VAR 0 2
13667: IFFALSE 14453
// begin normal :=  ;
13669: LD_ADDR_VAR 0 5
13673: PUSH
13674: LD_STRING 
13676: ST_TO_ADDR
// hardcore :=  ;
13677: LD_ADDR_VAR 0 6
13681: PUSH
13682: LD_STRING 
13684: ST_TO_ADDR
// active :=  ;
13685: LD_ADDR_VAR 0 7
13689: PUSH
13690: LD_STRING 
13692: ST_TO_ADDR
// for i = 1 to normalCounter do
13693: LD_ADDR_VAR 0 8
13697: PUSH
13698: DOUBLE
13699: LD_INT 1
13701: DEC
13702: ST_TO_ADDR
13703: LD_EXP 31
13707: PUSH
13708: FOR_TO
13709: IFFALSE 13810
// begin tmp := 0 ;
13711: LD_ADDR_VAR 0 3
13715: PUSH
13716: LD_STRING 0
13718: ST_TO_ADDR
// if result [ 1 ] then
13719: LD_VAR 0 2
13723: PUSH
13724: LD_INT 1
13726: ARRAY
13727: IFFALSE 13792
// if result [ 1 ] [ 1 ] = i then
13729: LD_VAR 0 2
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PUSH
13738: LD_INT 1
13740: ARRAY
13741: PUSH
13742: LD_VAR 0 8
13746: EQUAL
13747: IFFALSE 13792
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13749: LD_ADDR_VAR 0 2
13753: PUSH
13754: LD_VAR 0 2
13758: PPUSH
13759: LD_INT 1
13761: PPUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 3
13778: PPUSH
13779: CALL_OW 1
13783: ST_TO_ADDR
// tmp := 1 ;
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_STRING 1
13791: ST_TO_ADDR
// end ; normal := normal & tmp ;
13792: LD_ADDR_VAR 0 5
13796: PUSH
13797: LD_VAR 0 5
13801: PUSH
13802: LD_VAR 0 3
13806: STR
13807: ST_TO_ADDR
// end ;
13808: GO 13708
13810: POP
13811: POP
// for i = 1 to hardcoreCounter do
13812: LD_ADDR_VAR 0 8
13816: PUSH
13817: DOUBLE
13818: LD_INT 1
13820: DEC
13821: ST_TO_ADDR
13822: LD_EXP 32
13826: PUSH
13827: FOR_TO
13828: IFFALSE 13933
// begin tmp := 0 ;
13830: LD_ADDR_VAR 0 3
13834: PUSH
13835: LD_STRING 0
13837: ST_TO_ADDR
// if result [ 2 ] then
13838: LD_VAR 0 2
13842: PUSH
13843: LD_INT 2
13845: ARRAY
13846: IFFALSE 13915
// if result [ 2 ] [ 1 ] = 100 + i then
13848: LD_VAR 0 2
13852: PUSH
13853: LD_INT 2
13855: ARRAY
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PUSH
13861: LD_INT 100
13863: PUSH
13864: LD_VAR 0 8
13868: PLUS
13869: EQUAL
13870: IFFALSE 13915
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13872: LD_ADDR_VAR 0 2
13876: PUSH
13877: LD_VAR 0 2
13881: PPUSH
13882: LD_INT 2
13884: PPUSH
13885: LD_VAR 0 2
13889: PUSH
13890: LD_INT 2
13892: ARRAY
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: CALL_OW 3
13901: PPUSH
13902: CALL_OW 1
13906: ST_TO_ADDR
// tmp := 1 ;
13907: LD_ADDR_VAR 0 3
13911: PUSH
13912: LD_STRING 1
13914: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13915: LD_ADDR_VAR 0 6
13919: PUSH
13920: LD_VAR 0 6
13924: PUSH
13925: LD_VAR 0 3
13929: STR
13930: ST_TO_ADDR
// end ;
13931: GO 13827
13933: POP
13934: POP
// if isGameLoad then
13935: LD_VAR 0 1
13939: IFFALSE 14414
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13941: LD_ADDR_VAR 0 4
13945: PUSH
13946: LD_EXP 35
13950: PUSH
13951: LD_EXP 34
13955: PUSH
13956: LD_EXP 36
13960: PUSH
13961: LD_EXP 33
13965: PUSH
13966: LD_EXP 37
13970: PUSH
13971: LD_EXP 38
13975: PUSH
13976: LD_EXP 39
13980: PUSH
13981: LD_EXP 40
13985: PUSH
13986: LD_EXP 41
13990: PUSH
13991: LD_EXP 42
13995: PUSH
13996: LD_EXP 43
14000: PUSH
14001: LD_EXP 44
14005: PUSH
14006: LD_EXP 45
14010: PUSH
14011: LD_EXP 46
14015: PUSH
14016: LD_EXP 54
14020: PUSH
14021: LD_EXP 55
14025: PUSH
14026: LD_EXP 56
14030: PUSH
14031: LD_EXP 57
14035: PUSH
14036: LD_EXP 59
14040: PUSH
14041: LD_EXP 60
14045: PUSH
14046: LD_EXP 61
14050: PUSH
14051: LD_EXP 64
14055: PUSH
14056: LD_EXP 66
14060: PUSH
14061: LD_EXP 67
14065: PUSH
14066: LD_EXP 68
14070: PUSH
14071: LD_EXP 70
14075: PUSH
14076: LD_EXP 71
14080: PUSH
14081: LD_EXP 74
14085: PUSH
14086: LD_EXP 75
14090: PUSH
14091: LD_EXP 76
14095: PUSH
14096: LD_EXP 77
14100: PUSH
14101: LD_EXP 78
14105: PUSH
14106: LD_EXP 79
14110: PUSH
14111: LD_EXP 80
14115: PUSH
14116: LD_EXP 81
14120: PUSH
14121: LD_EXP 82
14125: PUSH
14126: LD_EXP 47
14130: PUSH
14131: LD_EXP 48
14135: PUSH
14136: LD_EXP 51
14140: PUSH
14141: LD_EXP 52
14145: PUSH
14146: LD_EXP 53
14150: PUSH
14151: LD_EXP 49
14155: PUSH
14156: LD_EXP 50
14160: PUSH
14161: LD_EXP 58
14165: PUSH
14166: LD_EXP 62
14170: PUSH
14171: LD_EXP 63
14175: PUSH
14176: LD_EXP 65
14180: PUSH
14181: LD_EXP 69
14185: PUSH
14186: LD_EXP 72
14190: PUSH
14191: LD_EXP 73
14195: PUSH
14196: LD_EXP 83
14200: PUSH
14201: LD_EXP 84
14205: PUSH
14206: LD_EXP 85
14210: PUSH
14211: LD_EXP 86
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: ST_TO_ADDR
// tmp :=  ;
14272: LD_ADDR_VAR 0 3
14276: PUSH
14277: LD_STRING 
14279: ST_TO_ADDR
// for i = 1 to normalCounter do
14280: LD_ADDR_VAR 0 8
14284: PUSH
14285: DOUBLE
14286: LD_INT 1
14288: DEC
14289: ST_TO_ADDR
14290: LD_EXP 31
14294: PUSH
14295: FOR_TO
14296: IFFALSE 14332
// begin if flags [ i ] then
14298: LD_VAR 0 4
14302: PUSH
14303: LD_VAR 0 8
14307: ARRAY
14308: IFFALSE 14330
// tmp := tmp & i & ; ;
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_VAR 0 3
14319: PUSH
14320: LD_VAR 0 8
14324: STR
14325: PUSH
14326: LD_STRING ;
14328: STR
14329: ST_TO_ADDR
// end ;
14330: GO 14295
14332: POP
14333: POP
// for i = 1 to hardcoreCounter do
14334: LD_ADDR_VAR 0 8
14338: PUSH
14339: DOUBLE
14340: LD_INT 1
14342: DEC
14343: ST_TO_ADDR
14344: LD_EXP 32
14348: PUSH
14349: FOR_TO
14350: IFFALSE 14396
// begin if flags [ normalCounter + i ] then
14352: LD_VAR 0 4
14356: PUSH
14357: LD_EXP 31
14361: PUSH
14362: LD_VAR 0 8
14366: PLUS
14367: ARRAY
14368: IFFALSE 14394
// tmp := tmp & ( 100 + i ) & ; ;
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: LD_VAR 0 3
14379: PUSH
14380: LD_INT 100
14382: PUSH
14383: LD_VAR 0 8
14387: PLUS
14388: STR
14389: PUSH
14390: LD_STRING ;
14392: STR
14393: ST_TO_ADDR
// end ;
14394: GO 14349
14396: POP
14397: POP
// if tmp then
14398: LD_VAR 0 3
14402: IFFALSE 14414
// active := tmp ;
14404: LD_ADDR_VAR 0 7
14408: PUSH
14409: LD_VAR 0 3
14413: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14414: LD_STRING getStreamItemsFromMission("
14416: PUSH
14417: LD_VAR 0 5
14421: STR
14422: PUSH
14423: LD_STRING ","
14425: STR
14426: PUSH
14427: LD_VAR 0 6
14431: STR
14432: PUSH
14433: LD_STRING ","
14435: STR
14436: PUSH
14437: LD_VAR 0 7
14441: STR
14442: PUSH
14443: LD_STRING ")
14445: STR
14446: PPUSH
14447: CALL_OW 559
// end else
14451: GO 14460
// ToLua ( getStreamItemsFromMission("","","") ) ;
14453: LD_STRING getStreamItemsFromMission("","","")
14455: PPUSH
14456: CALL_OW 559
// end ;
14460: LD_VAR 0 2
14464: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14465: LD_EXP 30
14469: PUSH
14470: LD_EXP 35
14474: AND
14475: IFFALSE 14599
14477: GO 14479
14479: DISABLE
14480: LD_INT 0
14482: PPUSH
14483: PPUSH
// begin enable ;
14484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14485: LD_ADDR_VAR 0 2
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_OWVAR 2
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 2
14504: PUSH
14505: LD_INT 34
14507: PUSH
14508: LD_INT 7
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 34
14517: PUSH
14518: LD_INT 45
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 34
14527: PUSH
14528: LD_INT 28
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 34
14537: PUSH
14538: LD_INT 47
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: ST_TO_ADDR
// if not tmp then
14561: LD_VAR 0 2
14565: NOT
14566: IFFALSE 14570
// exit ;
14568: GO 14599
// for i in tmp do
14570: LD_ADDR_VAR 0 1
14574: PUSH
14575: LD_VAR 0 2
14579: PUSH
14580: FOR_IN
14581: IFFALSE 14597
// begin SetLives ( i , 0 ) ;
14583: LD_VAR 0 1
14587: PPUSH
14588: LD_INT 0
14590: PPUSH
14591: CALL_OW 234
// end ;
14595: GO 14580
14597: POP
14598: POP
// end ;
14599: PPOPN 2
14601: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14602: LD_EXP 30
14606: PUSH
14607: LD_EXP 36
14611: AND
14612: IFFALSE 14696
14614: GO 14616
14616: DISABLE
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// begin enable ;
14621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14622: LD_ADDR_VAR 0 2
14626: PUSH
14627: LD_INT 22
14629: PUSH
14630: LD_OWVAR 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 32
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PPUSH
14653: CALL_OW 69
14657: ST_TO_ADDR
// if not tmp then
14658: LD_VAR 0 2
14662: NOT
14663: IFFALSE 14667
// exit ;
14665: GO 14696
// for i in tmp do
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: FOR_IN
14678: IFFALSE 14694
// begin SetLives ( i , 0 ) ;
14680: LD_VAR 0 1
14684: PPUSH
14685: LD_INT 0
14687: PPUSH
14688: CALL_OW 234
// end ;
14692: GO 14677
14694: POP
14695: POP
// end ;
14696: PPOPN 2
14698: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14699: LD_EXP 30
14703: PUSH
14704: LD_EXP 33
14708: AND
14709: IFFALSE 14802
14711: GO 14713
14713: DISABLE
14714: LD_INT 0
14716: PPUSH
// begin enable ;
14717: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: LD_INT 22
14725: PUSH
14726: LD_OWVAR 2
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: LD_INT 25
14740: PUSH
14741: LD_INT 5
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 25
14750: PUSH
14751: LD_INT 9
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 25
14760: PUSH
14761: LD_INT 8
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: PUSH
14783: FOR_IN
14784: IFFALSE 14800
// begin SetClass ( i , 1 ) ;
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 336
// end ;
14798: GO 14783
14800: POP
14801: POP
// end ;
14802: PPOPN 1
14804: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14805: LD_EXP 30
14809: PUSH
14810: LD_EXP 34
14814: AND
14815: PUSH
14816: LD_OWVAR 65
14820: PUSH
14821: LD_INT 7
14823: LESS
14824: AND
14825: IFFALSE 14839
14827: GO 14829
14829: DISABLE
// begin enable ;
14830: ENABLE
// game_speed := 7 ;
14831: LD_ADDR_OWVAR 65
14835: PUSH
14836: LD_INT 7
14838: ST_TO_ADDR
// end ;
14839: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14840: LD_EXP 30
14844: PUSH
14845: LD_EXP 37
14849: AND
14850: IFFALSE 15052
14852: GO 14854
14854: DISABLE
14855: LD_INT 0
14857: PPUSH
14858: PPUSH
14859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_INT 81
14867: PUSH
14868: LD_OWVAR 2
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 21
14879: PUSH
14880: LD_INT 1
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 3
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 15052
// if tmp > 5 then
14905: LD_VAR 0 3
14909: PUSH
14910: LD_INT 5
14912: GREATER
14913: IFFALSE 14925
// k := 5 else
14915: LD_ADDR_VAR 0 2
14919: PUSH
14920: LD_INT 5
14922: ST_TO_ADDR
14923: GO 14935
// k := tmp ;
14925: LD_ADDR_VAR 0 2
14929: PUSH
14930: LD_VAR 0 3
14934: ST_TO_ADDR
// for i := 1 to k do
14935: LD_ADDR_VAR 0 1
14939: PUSH
14940: DOUBLE
14941: LD_INT 1
14943: DEC
14944: ST_TO_ADDR
14945: LD_VAR 0 2
14949: PUSH
14950: FOR_TO
14951: IFFALSE 15050
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14953: LD_VAR 0 3
14957: PUSH
14958: LD_VAR 0 1
14962: ARRAY
14963: PPUSH
14964: LD_VAR 0 1
14968: PUSH
14969: LD_INT 4
14971: MOD
14972: PUSH
14973: LD_INT 1
14975: PLUS
14976: PPUSH
14977: CALL_OW 259
14981: PUSH
14982: LD_INT 10
14984: LESS
14985: IFFALSE 15048
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14987: LD_VAR 0 3
14991: PUSH
14992: LD_VAR 0 1
14996: ARRAY
14997: PPUSH
14998: LD_VAR 0 1
15002: PUSH
15003: LD_INT 4
15005: MOD
15006: PUSH
15007: LD_INT 1
15009: PLUS
15010: PPUSH
15011: LD_VAR 0 3
15015: PUSH
15016: LD_VAR 0 1
15020: ARRAY
15021: PPUSH
15022: LD_VAR 0 1
15026: PUSH
15027: LD_INT 4
15029: MOD
15030: PUSH
15031: LD_INT 1
15033: PLUS
15034: PPUSH
15035: CALL_OW 259
15039: PUSH
15040: LD_INT 1
15042: PLUS
15043: PPUSH
15044: CALL_OW 237
15048: GO 14950
15050: POP
15051: POP
// end ;
15052: PPOPN 3
15054: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15055: LD_EXP 30
15059: PUSH
15060: LD_EXP 38
15064: AND
15065: IFFALSE 15085
15067: GO 15069
15069: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15070: LD_INT 4
15072: PPUSH
15073: LD_OWVAR 2
15077: PPUSH
15078: LD_INT 0
15080: PPUSH
15081: CALL_OW 324
15085: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15086: LD_EXP 30
15090: PUSH
15091: LD_EXP 67
15095: AND
15096: IFFALSE 15116
15098: GO 15100
15100: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15101: LD_INT 19
15103: PPUSH
15104: LD_OWVAR 2
15108: PPUSH
15109: LD_INT 0
15111: PPUSH
15112: CALL_OW 324
15116: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15117: LD_EXP 30
15121: PUSH
15122: LD_EXP 39
15126: AND
15127: IFFALSE 15229
15129: GO 15131
15131: DISABLE
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
// begin enable ;
15136: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 34
15159: PUSH
15160: LD_INT 11
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 34
15169: PUSH
15170: LD_INT 30
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: ST_TO_ADDR
// if not tmp then
15191: LD_VAR 0 2
15195: NOT
15196: IFFALSE 15200
// exit ;
15198: GO 15229
// for i in tmp do
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_VAR 0 2
15209: PUSH
15210: FOR_IN
15211: IFFALSE 15227
// begin SetLives ( i , 0 ) ;
15213: LD_VAR 0 1
15217: PPUSH
15218: LD_INT 0
15220: PPUSH
15221: CALL_OW 234
// end ;
15225: GO 15210
15227: POP
15228: POP
// end ;
15229: PPOPN 2
15231: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15232: LD_EXP 30
15236: PUSH
15237: LD_EXP 40
15241: AND
15242: IFFALSE 15262
15244: GO 15246
15246: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15247: LD_INT 32
15249: PPUSH
15250: LD_OWVAR 2
15254: PPUSH
15255: LD_INT 0
15257: PPUSH
15258: CALL_OW 324
15262: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15263: LD_EXP 30
15267: PUSH
15268: LD_EXP 41
15272: AND
15273: IFFALSE 15454
15275: GO 15277
15277: DISABLE
15278: LD_INT 0
15280: PPUSH
15281: PPUSH
15282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15283: LD_ADDR_VAR 0 2
15287: PUSH
15288: LD_INT 22
15290: PUSH
15291: LD_OWVAR 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 33
15302: PUSH
15303: LD_INT 3
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 69
15318: ST_TO_ADDR
// if not tmp then
15319: LD_VAR 0 2
15323: NOT
15324: IFFALSE 15328
// exit ;
15326: GO 15454
// side := 0 ;
15328: LD_ADDR_VAR 0 3
15332: PUSH
15333: LD_INT 0
15335: ST_TO_ADDR
// for i := 1 to 8 do
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: DOUBLE
15342: LD_INT 1
15344: DEC
15345: ST_TO_ADDR
15346: LD_INT 8
15348: PUSH
15349: FOR_TO
15350: IFFALSE 15398
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15352: LD_OWVAR 2
15356: PUSH
15357: LD_VAR 0 1
15361: NONEQUAL
15362: PUSH
15363: LD_OWVAR 2
15367: PPUSH
15368: LD_VAR 0 1
15372: PPUSH
15373: CALL_OW 81
15377: PUSH
15378: LD_INT 2
15380: EQUAL
15381: AND
15382: IFFALSE 15396
// begin side := i ;
15384: LD_ADDR_VAR 0 3
15388: PUSH
15389: LD_VAR 0 1
15393: ST_TO_ADDR
// break ;
15394: GO 15398
// end ;
15396: GO 15349
15398: POP
15399: POP
// if not side then
15400: LD_VAR 0 3
15404: NOT
15405: IFFALSE 15409
// exit ;
15407: GO 15454
// for i := 1 to tmp do
15409: LD_ADDR_VAR 0 1
15413: PUSH
15414: DOUBLE
15415: LD_INT 1
15417: DEC
15418: ST_TO_ADDR
15419: LD_VAR 0 2
15423: PUSH
15424: FOR_TO
15425: IFFALSE 15452
// if Prob ( 60 ) then
15427: LD_INT 60
15429: PPUSH
15430: CALL_OW 13
15434: IFFALSE 15450
// SetSide ( i , side ) ;
15436: LD_VAR 0 1
15440: PPUSH
15441: LD_VAR 0 3
15445: PPUSH
15446: CALL_OW 235
15450: GO 15424
15452: POP
15453: POP
// end ;
15454: PPOPN 3
15456: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15457: LD_EXP 30
15461: PUSH
15462: LD_EXP 43
15466: AND
15467: IFFALSE 15586
15469: GO 15471
15471: DISABLE
15472: LD_INT 0
15474: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15475: LD_ADDR_VAR 0 1
15479: PUSH
15480: LD_INT 22
15482: PUSH
15483: LD_OWVAR 2
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 21
15494: PUSH
15495: LD_INT 1
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 3
15504: PUSH
15505: LD_INT 23
15507: PUSH
15508: LD_INT 0
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: PUSH
15529: FOR_IN
15530: IFFALSE 15584
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 257
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: LD_INT 2
15547: PUSH
15548: LD_INT 3
15550: PUSH
15551: LD_INT 4
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: IN
15560: IFFALSE 15582
// SetClass ( un , rand ( 1 , 4 ) ) ;
15562: LD_VAR 0 1
15566: PPUSH
15567: LD_INT 1
15569: PPUSH
15570: LD_INT 4
15572: PPUSH
15573: CALL_OW 12
15577: PPUSH
15578: CALL_OW 336
15582: GO 15529
15584: POP
15585: POP
// end ;
15586: PPOPN 1
15588: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15589: LD_EXP 30
15593: PUSH
15594: LD_EXP 42
15598: AND
15599: IFFALSE 15678
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 22
15614: PUSH
15615: LD_OWVAR 2
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 21
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 69
15642: ST_TO_ADDR
// if not tmp then
15643: LD_VAR 0 1
15647: NOT
15648: IFFALSE 15652
// exit ;
15650: GO 15678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15652: LD_VAR 0 1
15656: PUSH
15657: LD_INT 1
15659: PPUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 12
15669: ARRAY
15670: PPUSH
15671: LD_INT 100
15673: PPUSH
15674: CALL_OW 234
// end ;
15678: PPOPN 1
15680: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15681: LD_EXP 30
15685: PUSH
15686: LD_EXP 44
15690: AND
15691: IFFALSE 15789
15693: GO 15695
15695: DISABLE
15696: LD_INT 0
15698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15699: LD_ADDR_VAR 0 1
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_OWVAR 2
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 21
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: ST_TO_ADDR
// if not tmp then
15735: LD_VAR 0 1
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15789
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15744: LD_VAR 0 1
15748: PUSH
15749: LD_INT 1
15751: PPUSH
15752: LD_VAR 0 1
15756: PPUSH
15757: CALL_OW 12
15761: ARRAY
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: LD_INT 4
15768: PPUSH
15769: CALL_OW 12
15773: PPUSH
15774: LD_INT 3000
15776: PPUSH
15777: LD_INT 9000
15779: PPUSH
15780: CALL_OW 12
15784: PPUSH
15785: CALL_OW 492
// end ;
15789: PPOPN 1
15791: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15792: LD_EXP 30
15796: PUSH
15797: LD_EXP 45
15801: AND
15802: IFFALSE 15822
15804: GO 15806
15806: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15807: LD_INT 1
15809: PPUSH
15810: LD_OWVAR 2
15814: PPUSH
15815: LD_INT 0
15817: PPUSH
15818: CALL_OW 324
15822: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15823: LD_EXP 30
15827: PUSH
15828: LD_EXP 46
15832: AND
15833: IFFALSE 15916
15835: GO 15837
15837: DISABLE
15838: LD_INT 0
15840: PPUSH
15841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15842: LD_ADDR_VAR 0 2
15846: PUSH
15847: LD_INT 22
15849: PUSH
15850: LD_OWVAR 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 3
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PPUSH
15873: CALL_OW 69
15877: ST_TO_ADDR
// if not tmp then
15878: LD_VAR 0 2
15882: NOT
15883: IFFALSE 15887
// exit ;
15885: GO 15916
// for i in tmp do
15887: LD_ADDR_VAR 0 1
15891: PUSH
15892: LD_VAR 0 2
15896: PUSH
15897: FOR_IN
15898: IFFALSE 15914
// SetBLevel ( i , 10 ) ;
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_INT 10
15907: PPUSH
15908: CALL_OW 241
15912: GO 15897
15914: POP
15915: POP
// end ;
15916: PPOPN 2
15918: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15919: LD_EXP 30
15923: PUSH
15924: LD_EXP 47
15928: AND
15929: IFFALSE 16040
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
15937: PPUSH
15938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: LD_INT 22
15946: PUSH
15947: LD_OWVAR 2
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 25
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PPUSH
15970: CALL_OW 69
15974: ST_TO_ADDR
// if not tmp then
15975: LD_VAR 0 3
15979: NOT
15980: IFFALSE 15984
// exit ;
15982: GO 16040
// un := tmp [ rand ( 1 , tmp ) ] ;
15984: LD_ADDR_VAR 0 2
15988: PUSH
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 1
15996: PPUSH
15997: LD_VAR 0 3
16001: PPUSH
16002: CALL_OW 12
16006: ARRAY
16007: ST_TO_ADDR
// if Crawls ( un ) then
16008: LD_VAR 0 2
16012: PPUSH
16013: CALL_OW 318
16017: IFFALSE 16028
// ComWalk ( un ) ;
16019: LD_VAR 0 2
16023: PPUSH
16024: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16028: LD_VAR 0 2
16032: PPUSH
16033: LD_INT 5
16035: PPUSH
16036: CALL_OW 336
// end ;
16040: PPOPN 3
16042: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16043: LD_EXP 30
16047: PUSH
16048: LD_EXP 48
16052: AND
16053: PUSH
16054: LD_OWVAR 67
16058: PUSH
16059: LD_INT 4
16061: LESS
16062: AND
16063: IFFALSE 16082
16065: GO 16067
16067: DISABLE
// begin Difficulty := Difficulty + 1 ;
16068: LD_ADDR_OWVAR 67
16072: PUSH
16073: LD_OWVAR 67
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: ST_TO_ADDR
// end ;
16082: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16083: LD_EXP 30
16087: PUSH
16088: LD_EXP 49
16092: AND
16093: IFFALSE 16196
16095: GO 16097
16097: DISABLE
16098: LD_INT 0
16100: PPUSH
// begin for i := 1 to 5 do
16101: LD_ADDR_VAR 0 1
16105: PUSH
16106: DOUBLE
16107: LD_INT 1
16109: DEC
16110: ST_TO_ADDR
16111: LD_INT 5
16113: PUSH
16114: FOR_TO
16115: IFFALSE 16194
// begin uc_nation := nation_nature ;
16117: LD_ADDR_OWVAR 21
16121: PUSH
16122: LD_INT 0
16124: ST_TO_ADDR
// uc_side := 0 ;
16125: LD_ADDR_OWVAR 20
16129: PUSH
16130: LD_INT 0
16132: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16133: LD_ADDR_OWVAR 29
16137: PUSH
16138: LD_INT 12
16140: PUSH
16141: LD_INT 12
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: ST_TO_ADDR
// hc_agressivity := 20 ;
16148: LD_ADDR_OWVAR 35
16152: PUSH
16153: LD_INT 20
16155: ST_TO_ADDR
// hc_class := class_tiger ;
16156: LD_ADDR_OWVAR 28
16160: PUSH
16161: LD_INT 14
16163: ST_TO_ADDR
// hc_gallery :=  ;
16164: LD_ADDR_OWVAR 33
16168: PUSH
16169: LD_STRING 
16171: ST_TO_ADDR
// hc_name :=  ;
16172: LD_ADDR_OWVAR 26
16176: PUSH
16177: LD_STRING 
16179: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16180: CALL_OW 44
16184: PPUSH
16185: LD_INT 0
16187: PPUSH
16188: CALL_OW 51
// end ;
16192: GO 16114
16194: POP
16195: POP
// end ;
16196: PPOPN 1
16198: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16199: LD_EXP 30
16203: PUSH
16204: LD_EXP 50
16208: AND
16209: IFFALSE 16218
16211: GO 16213
16213: DISABLE
// StreamSibBomb ;
16214: CALL 16219 0 0
16218: END
// export function StreamSibBomb ; var i , x , y ; begin
16219: LD_INT 0
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
// result := false ;
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_INT 0
16232: ST_TO_ADDR
// for i := 1 to 16 do
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_INT 16
16245: PUSH
16246: FOR_TO
16247: IFFALSE 16446
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16249: LD_ADDR_VAR 0 3
16253: PUSH
16254: LD_INT 10
16256: PUSH
16257: LD_INT 20
16259: PUSH
16260: LD_INT 30
16262: PUSH
16263: LD_INT 40
16265: PUSH
16266: LD_INT 50
16268: PUSH
16269: LD_INT 60
16271: PUSH
16272: LD_INT 70
16274: PUSH
16275: LD_INT 80
16277: PUSH
16278: LD_INT 90
16280: PUSH
16281: LD_INT 100
16283: PUSH
16284: LD_INT 110
16286: PUSH
16287: LD_INT 120
16289: PUSH
16290: LD_INT 130
16292: PUSH
16293: LD_INT 140
16295: PUSH
16296: LD_INT 150
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 1
16318: PPUSH
16319: LD_INT 15
16321: PPUSH
16322: CALL_OW 12
16326: ARRAY
16327: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16328: LD_ADDR_VAR 0 4
16332: PUSH
16333: LD_INT 10
16335: PUSH
16336: LD_INT 20
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: LD_INT 40
16344: PUSH
16345: LD_INT 50
16347: PUSH
16348: LD_INT 60
16350: PUSH
16351: LD_INT 70
16353: PUSH
16354: LD_INT 80
16356: PUSH
16357: LD_INT 90
16359: PUSH
16360: LD_INT 100
16362: PUSH
16363: LD_INT 110
16365: PUSH
16366: LD_INT 120
16368: PUSH
16369: LD_INT 130
16371: PUSH
16372: LD_INT 140
16374: PUSH
16375: LD_INT 150
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 1
16397: PPUSH
16398: LD_INT 15
16400: PPUSH
16401: CALL_OW 12
16405: ARRAY
16406: ST_TO_ADDR
// if ValidHex ( x , y ) then
16407: LD_VAR 0 3
16411: PPUSH
16412: LD_VAR 0 4
16416: PPUSH
16417: CALL_OW 488
16421: IFFALSE 16444
// begin result := [ x , y ] ;
16423: LD_ADDR_VAR 0 1
16427: PUSH
16428: LD_VAR 0 3
16432: PUSH
16433: LD_VAR 0 4
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: ST_TO_ADDR
// break ;
16442: GO 16446
// end ; end ;
16444: GO 16246
16446: POP
16447: POP
// if result then
16448: LD_VAR 0 1
16452: IFFALSE 16512
// begin ToLua ( playSibBomb() ) ;
16454: LD_STRING playSibBomb()
16456: PPUSH
16457: CALL_OW 559
// wait ( 0 0$14 ) ;
16461: LD_INT 490
16463: PPUSH
16464: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16468: LD_VAR 0 1
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: PPUSH
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 2
16484: ARRAY
16485: PPUSH
16486: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16490: LD_VAR 0 1
16494: PUSH
16495: LD_INT 1
16497: ARRAY
16498: PPUSH
16499: LD_VAR 0 1
16503: PUSH
16504: LD_INT 2
16506: ARRAY
16507: PPUSH
16508: CALL_OW 429
// end ; end ;
16512: LD_VAR 0 1
16516: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16517: LD_EXP 30
16521: PUSH
16522: LD_EXP 52
16526: AND
16527: IFFALSE 16539
16529: GO 16531
16531: DISABLE
// YouLost (  ) ;
16532: LD_STRING 
16534: PPUSH
16535: CALL_OW 104
16539: END
// every 0 0$1 trigger StreamModeActive and sFog do
16540: LD_EXP 30
16544: PUSH
16545: LD_EXP 51
16549: AND
16550: IFFALSE 16564
16552: GO 16554
16554: DISABLE
// FogOff ( your_side ) ;
16555: LD_OWVAR 2
16559: PPUSH
16560: CALL_OW 344
16564: END
// every 0 0$1 trigger StreamModeActive and sSun do
16565: LD_EXP 30
16569: PUSH
16570: LD_EXP 53
16574: AND
16575: IFFALSE 16603
16577: GO 16579
16579: DISABLE
// begin solar_recharge_percent := 0 ;
16580: LD_ADDR_OWVAR 79
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16588: LD_INT 10500
16590: PPUSH
16591: CALL_OW 67
// solar_recharge_percent := 100 ;
16595: LD_ADDR_OWVAR 79
16599: PUSH
16600: LD_INT 100
16602: ST_TO_ADDR
// end ;
16603: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16604: LD_EXP 30
16608: PUSH
16609: LD_EXP 54
16613: AND
16614: IFFALSE 16853
16616: GO 16618
16618: DISABLE
16619: LD_INT 0
16621: PPUSH
16622: PPUSH
16623: PPUSH
// begin tmp := [ ] ;
16624: LD_ADDR_VAR 0 3
16628: PUSH
16629: EMPTY
16630: ST_TO_ADDR
// for i := 1 to 6 do
16631: LD_ADDR_VAR 0 1
16635: PUSH
16636: DOUBLE
16637: LD_INT 1
16639: DEC
16640: ST_TO_ADDR
16641: LD_INT 6
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16750
// begin uc_nation := nation_nature ;
16647: LD_ADDR_OWVAR 21
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// uc_side := 0 ;
16655: LD_ADDR_OWVAR 20
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16663: LD_ADDR_OWVAR 29
16667: PUSH
16668: LD_INT 12
16670: PUSH
16671: LD_INT 12
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: ST_TO_ADDR
// hc_agressivity := 20 ;
16678: LD_ADDR_OWVAR 35
16682: PUSH
16683: LD_INT 20
16685: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16686: LD_ADDR_OWVAR 28
16690: PUSH
16691: LD_INT 17
16693: ST_TO_ADDR
// hc_gallery :=  ;
16694: LD_ADDR_OWVAR 33
16698: PUSH
16699: LD_STRING 
16701: ST_TO_ADDR
// hc_name :=  ;
16702: LD_ADDR_OWVAR 26
16706: PUSH
16707: LD_STRING 
16709: ST_TO_ADDR
// un := CreateHuman ;
16710: LD_ADDR_VAR 0 2
16714: PUSH
16715: CALL_OW 44
16719: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16720: LD_VAR 0 2
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 51
// tmp := tmp ^ un ;
16732: LD_ADDR_VAR 0 3
16736: PUSH
16737: LD_VAR 0 3
16741: PUSH
16742: LD_VAR 0 2
16746: ADD
16747: ST_TO_ADDR
// end ;
16748: GO 16644
16750: POP
16751: POP
// repeat wait ( 0 0$1 ) ;
16752: LD_INT 35
16754: PPUSH
16755: CALL_OW 67
// for un in tmp do
16759: LD_ADDR_VAR 0 2
16763: PUSH
16764: LD_VAR 0 3
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16844
// begin if IsDead ( un ) then
16772: LD_VAR 0 2
16776: PPUSH
16777: CALL_OW 301
16781: IFFALSE 16801
// begin tmp := tmp diff un ;
16783: LD_ADDR_VAR 0 3
16787: PUSH
16788: LD_VAR 0 3
16792: PUSH
16793: LD_VAR 0 2
16797: DIFF
16798: ST_TO_ADDR
// continue ;
16799: GO 16769
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16801: LD_VAR 0 2
16805: PPUSH
16806: LD_INT 3
16808: PUSH
16809: LD_INT 22
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PPUSH
16823: CALL_OW 69
16827: PPUSH
16828: LD_VAR 0 2
16832: PPUSH
16833: CALL_OW 74
16837: PPUSH
16838: CALL_OW 115
// end ;
16842: GO 16769
16844: POP
16845: POP
// until not tmp ;
16846: LD_VAR 0 3
16850: NOT
16851: IFFALSE 16752
// end ;
16853: PPOPN 3
16855: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16856: LD_EXP 30
16860: PUSH
16861: LD_EXP 55
16865: AND
16866: IFFALSE 16920
16868: GO 16870
16870: DISABLE
// begin ToLua ( displayTroll(); ) ;
16871: LD_STRING displayTroll();
16873: PPUSH
16874: CALL_OW 559
// wait ( 3 3$00 ) ;
16878: LD_INT 6300
16880: PPUSH
16881: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16885: LD_STRING hideTroll();
16887: PPUSH
16888: CALL_OW 559
// wait ( 1 1$00 ) ;
16892: LD_INT 2100
16894: PPUSH
16895: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16899: LD_STRING displayTroll();
16901: PPUSH
16902: CALL_OW 559
// wait ( 1 1$00 ) ;
16906: LD_INT 2100
16908: PPUSH
16909: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16913: LD_STRING hideTroll();
16915: PPUSH
16916: CALL_OW 559
// end ;
16920: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16921: LD_EXP 30
16925: PUSH
16926: LD_EXP 56
16930: AND
16931: IFFALSE 16994
16933: GO 16935
16935: DISABLE
16936: LD_INT 0
16938: PPUSH
// begin p := 0 ;
16939: LD_ADDR_VAR 0 1
16943: PUSH
16944: LD_INT 0
16946: ST_TO_ADDR
// repeat game_speed := 1 ;
16947: LD_ADDR_OWVAR 65
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16955: LD_INT 35
16957: PPUSH
16958: CALL_OW 67
// p := p + 1 ;
16962: LD_ADDR_VAR 0 1
16966: PUSH
16967: LD_VAR 0 1
16971: PUSH
16972: LD_INT 1
16974: PLUS
16975: ST_TO_ADDR
// until p >= 60 ;
16976: LD_VAR 0 1
16980: PUSH
16981: LD_INT 60
16983: GREATEREQUAL
16984: IFFALSE 16947
// game_speed := 4 ;
16986: LD_ADDR_OWVAR 65
16990: PUSH
16991: LD_INT 4
16993: ST_TO_ADDR
// end ;
16994: PPOPN 1
16996: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16997: LD_EXP 30
17001: PUSH
17002: LD_EXP 57
17006: AND
17007: IFFALSE 17153
17009: GO 17011
17011: DISABLE
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17016: LD_ADDR_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_OWVAR 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 30
17038: PUSH
17039: LD_INT 0
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 30
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PPUSH
17065: CALL_OW 69
17069: ST_TO_ADDR
// if not depot then
17070: LD_VAR 0 1
17074: NOT
17075: IFFALSE 17079
// exit ;
17077: GO 17153
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_VAR 0 1
17088: PUSH
17089: LD_INT 1
17091: PPUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 12
17101: ARRAY
17102: PPUSH
17103: CALL_OW 274
17107: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17108: LD_VAR 0 2
17112: PPUSH
17113: LD_INT 1
17115: PPUSH
17116: LD_INT 0
17118: PPUSH
17119: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_INT 2
17130: PPUSH
17131: LD_INT 0
17133: PPUSH
17134: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_INT 3
17145: PPUSH
17146: LD_INT 0
17148: PPUSH
17149: CALL_OW 277
// end ;
17153: PPOPN 2
17155: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17156: LD_EXP 30
17160: PUSH
17161: LD_EXP 58
17165: AND
17166: IFFALSE 17263
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17174: LD_ADDR_VAR 0 1
17178: PUSH
17179: LD_INT 22
17181: PUSH
17182: LD_OWVAR 2
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 21
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 3
17203: PUSH
17204: LD_INT 23
17206: PUSH
17207: LD_INT 0
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: ST_TO_ADDR
// if not tmp then
17228: LD_VAR 0 1
17232: NOT
17233: IFFALSE 17237
// exit ;
17235: GO 17263
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17237: LD_VAR 0 1
17241: PUSH
17242: LD_INT 1
17244: PPUSH
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 12
17254: ARRAY
17255: PPUSH
17256: LD_INT 200
17258: PPUSH
17259: CALL_OW 234
// end ;
17263: PPOPN 1
17265: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17266: LD_EXP 30
17270: PUSH
17271: LD_EXP 59
17275: AND
17276: IFFALSE 17355
17278: GO 17280
17280: DISABLE
17281: LD_INT 0
17283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17284: LD_ADDR_VAR 0 1
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_OWVAR 2
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 21
17303: PUSH
17304: LD_INT 2
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// if not tmp then
17320: LD_VAR 0 1
17324: NOT
17325: IFFALSE 17329
// exit ;
17327: GO 17355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17329: LD_VAR 0 1
17333: PUSH
17334: LD_INT 1
17336: PPUSH
17337: LD_VAR 0 1
17341: PPUSH
17342: CALL_OW 12
17346: ARRAY
17347: PPUSH
17348: LD_INT 60
17350: PPUSH
17351: CALL_OW 234
// end ;
17355: PPOPN 1
17357: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17358: LD_EXP 30
17362: PUSH
17363: LD_EXP 60
17367: AND
17368: IFFALSE 17467
17370: GO 17372
17372: DISABLE
17373: LD_INT 0
17375: PPUSH
17376: PPUSH
// begin enable ;
17377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17378: LD_ADDR_VAR 0 1
17382: PUSH
17383: LD_INT 22
17385: PUSH
17386: LD_OWVAR 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 61
17397: PUSH
17398: EMPTY
17399: LIST
17400: PUSH
17401: LD_INT 33
17403: PUSH
17404: LD_INT 2
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: PPUSH
17416: CALL_OW 69
17420: ST_TO_ADDR
// if not tmp then
17421: LD_VAR 0 1
17425: NOT
17426: IFFALSE 17430
// exit ;
17428: GO 17467
// for i in tmp do
17430: LD_ADDR_VAR 0 2
17434: PUSH
17435: LD_VAR 0 1
17439: PUSH
17440: FOR_IN
17441: IFFALSE 17465
// if IsControledBy ( i ) then
17443: LD_VAR 0 2
17447: PPUSH
17448: CALL_OW 312
17452: IFFALSE 17463
// ComUnlink ( i ) ;
17454: LD_VAR 0 2
17458: PPUSH
17459: CALL_OW 136
17463: GO 17440
17465: POP
17466: POP
// end ;
17467: PPOPN 2
17469: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17470: LD_EXP 30
17474: PUSH
17475: LD_EXP 61
17479: AND
17480: IFFALSE 17620
17482: GO 17484
17484: DISABLE
17485: LD_INT 0
17487: PPUSH
17488: PPUSH
// begin ToLua ( displayPowell(); ) ;
17489: LD_STRING displayPowell();
17491: PPUSH
17492: CALL_OW 559
// uc_side := 0 ;
17496: LD_ADDR_OWVAR 20
17500: PUSH
17501: LD_INT 0
17503: ST_TO_ADDR
// uc_nation := 2 ;
17504: LD_ADDR_OWVAR 21
17508: PUSH
17509: LD_INT 2
17511: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17512: LD_ADDR_OWVAR 37
17516: PUSH
17517: LD_INT 14
17519: ST_TO_ADDR
// vc_engine := engine_siberite ;
17520: LD_ADDR_OWVAR 39
17524: PUSH
17525: LD_INT 3
17527: ST_TO_ADDR
// vc_control := control_apeman ;
17528: LD_ADDR_OWVAR 38
17532: PUSH
17533: LD_INT 5
17535: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17536: LD_ADDR_OWVAR 40
17540: PUSH
17541: LD_INT 29
17543: ST_TO_ADDR
// un := CreateVehicle ;
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: CALL_OW 45
17553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17554: LD_VAR 0 2
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17566: LD_INT 35
17568: PPUSH
17569: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_INT 22
17580: PUSH
17581: LD_OWVAR 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: PPUSH
17595: LD_VAR 0 2
17599: PPUSH
17600: CALL_OW 74
17604: PPUSH
17605: CALL_OW 115
// until IsDead ( un ) ;
17609: LD_VAR 0 2
17613: PPUSH
17614: CALL_OW 301
17618: IFFALSE 17566
// end ;
17620: PPOPN 2
17622: END
// every 0 0$1 trigger StreamModeActive and sStu do
17623: LD_EXP 30
17627: PUSH
17628: LD_EXP 69
17632: AND
17633: IFFALSE 17649
17635: GO 17637
17637: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17638: LD_STRING displayStucuk();
17640: PPUSH
17641: CALL_OW 559
// ResetFog ;
17645: CALL_OW 335
// end ;
17649: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17650: LD_EXP 30
17654: PUSH
17655: LD_EXP 62
17659: AND
17660: IFFALSE 17801
17662: GO 17664
17664: DISABLE
17665: LD_INT 0
17667: PPUSH
17668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: LD_INT 22
17676: PUSH
17677: LD_OWVAR 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 21
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: ST_TO_ADDR
// if not tmp then
17705: LD_VAR 0 2
17709: NOT
17710: IFFALSE 17714
// exit ;
17712: GO 17801
// un := tmp [ rand ( 1 , tmp ) ] ;
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_VAR 0 2
17723: PUSH
17724: LD_INT 1
17726: PPUSH
17727: LD_VAR 0 2
17731: PPUSH
17732: CALL_OW 12
17736: ARRAY
17737: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_INT 0
17745: PPUSH
17746: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_OWVAR 3
17759: PUSH
17760: LD_VAR 0 1
17764: DIFF
17765: PPUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 74
17775: PPUSH
17776: CALL_OW 115
// wait ( 0 0$20 ) ;
17780: LD_INT 700
17782: PPUSH
17783: CALL_OW 67
// SetSide ( un , your_side ) ;
17787: LD_VAR 0 1
17791: PPUSH
17792: LD_OWVAR 2
17796: PPUSH
17797: CALL_OW 235
// end ;
17801: PPOPN 2
17803: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17804: LD_EXP 30
17808: PUSH
17809: LD_EXP 63
17813: AND
17814: IFFALSE 17920
17816: GO 17818
17818: DISABLE
17819: LD_INT 0
17821: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17822: LD_ADDR_VAR 0 1
17826: PUSH
17827: LD_INT 22
17829: PUSH
17830: LD_OWVAR 2
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 30
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 30
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PPUSH
17871: CALL_OW 69
17875: ST_TO_ADDR
// if not depot then
17876: LD_VAR 0 1
17880: NOT
17881: IFFALSE 17885
// exit ;
17883: GO 17920
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17885: LD_VAR 0 1
17889: PUSH
17890: LD_INT 1
17892: ARRAY
17893: PPUSH
17894: CALL_OW 250
17898: PPUSH
17899: LD_VAR 0 1
17903: PUSH
17904: LD_INT 1
17906: ARRAY
17907: PPUSH
17908: CALL_OW 251
17912: PPUSH
17913: LD_INT 70
17915: PPUSH
17916: CALL_OW 495
// end ;
17920: PPOPN 1
17922: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17923: LD_EXP 30
17927: PUSH
17928: LD_EXP 64
17932: AND
17933: IFFALSE 18144
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
17943: PPUSH
17944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17945: LD_ADDR_VAR 0 5
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 21
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: ST_TO_ADDR
// if not tmp then
17981: LD_VAR 0 5
17985: NOT
17986: IFFALSE 17990
// exit ;
17988: GO 18144
// for i in tmp do
17990: LD_ADDR_VAR 0 1
17994: PUSH
17995: LD_VAR 0 5
17999: PUSH
18000: FOR_IN
18001: IFFALSE 18142
// begin d := rand ( 0 , 5 ) ;
18003: LD_ADDR_VAR 0 4
18007: PUSH
18008: LD_INT 0
18010: PPUSH
18011: LD_INT 5
18013: PPUSH
18014: CALL_OW 12
18018: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18019: LD_ADDR_VAR 0 2
18023: PUSH
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 250
18033: PPUSH
18034: LD_VAR 0 4
18038: PPUSH
18039: LD_INT 3
18041: PPUSH
18042: LD_INT 12
18044: PPUSH
18045: CALL_OW 12
18049: PPUSH
18050: CALL_OW 272
18054: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18055: LD_ADDR_VAR 0 3
18059: PUSH
18060: LD_VAR 0 1
18064: PPUSH
18065: CALL_OW 251
18069: PPUSH
18070: LD_VAR 0 4
18074: PPUSH
18075: LD_INT 3
18077: PPUSH
18078: LD_INT 12
18080: PPUSH
18081: CALL_OW 12
18085: PPUSH
18086: CALL_OW 273
18090: ST_TO_ADDR
// if ValidHex ( x , y ) then
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: CALL_OW 488
18105: IFFALSE 18140
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_VAR 0 2
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: LD_INT 3
18124: PPUSH
18125: LD_INT 6
18127: PPUSH
18128: CALL_OW 12
18132: PPUSH
18133: LD_INT 1
18135: PPUSH
18136: CALL_OW 483
// end ;
18140: GO 18000
18142: POP
18143: POP
// end ;
18144: PPOPN 5
18146: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18147: LD_EXP 30
18151: PUSH
18152: LD_EXP 65
18156: AND
18157: IFFALSE 18251
18159: GO 18161
18161: DISABLE
18162: LD_INT 0
18164: PPUSH
18165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18166: LD_ADDR_VAR 0 2
18170: PUSH
18171: LD_INT 22
18173: PUSH
18174: LD_OWVAR 2
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 32
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 21
18195: PUSH
18196: LD_INT 2
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 69
18212: ST_TO_ADDR
// if not tmp then
18213: LD_VAR 0 2
18217: NOT
18218: IFFALSE 18222
// exit ;
18220: GO 18251
// for i in tmp do
18222: LD_ADDR_VAR 0 1
18226: PUSH
18227: LD_VAR 0 2
18231: PUSH
18232: FOR_IN
18233: IFFALSE 18249
// SetFuel ( i , 0 ) ;
18235: LD_VAR 0 1
18239: PPUSH
18240: LD_INT 0
18242: PPUSH
18243: CALL_OW 240
18247: GO 18232
18249: POP
18250: POP
// end ;
18251: PPOPN 2
18253: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18254: LD_EXP 30
18258: PUSH
18259: LD_EXP 66
18263: AND
18264: IFFALSE 18330
18266: GO 18268
18268: DISABLE
18269: LD_INT 0
18271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18272: LD_ADDR_VAR 0 1
18276: PUSH
18277: LD_INT 22
18279: PUSH
18280: LD_OWVAR 2
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 30
18291: PUSH
18292: LD_INT 29
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: ST_TO_ADDR
// if not tmp then
18308: LD_VAR 0 1
18312: NOT
18313: IFFALSE 18317
// exit ;
18315: GO 18330
// DestroyUnit ( tmp [ 1 ] ) ;
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 1
18324: ARRAY
18325: PPUSH
18326: CALL_OW 65
// end ;
18330: PPOPN 1
18332: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18333: LD_EXP 30
18337: PUSH
18338: LD_EXP 68
18342: AND
18343: IFFALSE 18472
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
// begin uc_side := 0 ;
18351: LD_ADDR_OWVAR 20
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// uc_nation := nation_arabian ;
18359: LD_ADDR_OWVAR 21
18363: PUSH
18364: LD_INT 2
18366: ST_TO_ADDR
// hc_gallery :=  ;
18367: LD_ADDR_OWVAR 33
18371: PUSH
18372: LD_STRING 
18374: ST_TO_ADDR
// hc_name :=  ;
18375: LD_ADDR_OWVAR 26
18379: PUSH
18380: LD_STRING 
18382: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18383: LD_INT 1
18385: PPUSH
18386: LD_INT 11
18388: PPUSH
18389: LD_INT 10
18391: PPUSH
18392: CALL_OW 380
// un := CreateHuman ;
18396: LD_ADDR_VAR 0 1
18400: PUSH
18401: CALL_OW 44
18405: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18406: LD_VAR 0 1
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18418: LD_INT 35
18420: PPUSH
18421: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18425: LD_VAR 0 1
18429: PPUSH
18430: LD_INT 22
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PPUSH
18442: CALL_OW 69
18446: PPUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 74
18456: PPUSH
18457: CALL_OW 115
// until IsDead ( un ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 301
18470: IFFALSE 18418
// end ;
18472: PPOPN 1
18474: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18475: LD_EXP 30
18479: PUSH
18480: LD_EXP 70
18484: AND
18485: IFFALSE 18497
18487: GO 18489
18489: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18490: LD_STRING earthquake(getX(game), 0, 32)
18492: PPUSH
18493: CALL_OW 559
18497: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18498: LD_EXP 30
18502: PUSH
18503: LD_EXP 71
18507: AND
18508: IFFALSE 18599
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
// begin enable ;
18516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18517: LD_ADDR_VAR 0 1
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_OWVAR 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 21
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 33
18546: PUSH
18547: LD_INT 3
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: ST_TO_ADDR
// if not tmp then
18564: LD_VAR 0 1
18568: NOT
18569: IFFALSE 18573
// exit ;
18571: GO 18599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 1
18580: PPUSH
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 12
18590: ARRAY
18591: PPUSH
18592: LD_INT 1
18594: PPUSH
18595: CALL_OW 234
// end ;
18599: PPOPN 1
18601: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18602: LD_EXP 30
18606: PUSH
18607: LD_EXP 72
18611: AND
18612: IFFALSE 18753
18614: GO 18616
18616: DISABLE
18617: LD_INT 0
18619: PPUSH
18620: PPUSH
18621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18622: LD_ADDR_VAR 0 3
18626: PUSH
18627: LD_INT 22
18629: PUSH
18630: LD_OWVAR 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 25
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 69
18657: ST_TO_ADDR
// if not tmp then
18658: LD_VAR 0 3
18662: NOT
18663: IFFALSE 18667
// exit ;
18665: GO 18753
// un := tmp [ rand ( 1 , tmp ) ] ;
18667: LD_ADDR_VAR 0 2
18671: PUSH
18672: LD_VAR 0 3
18676: PUSH
18677: LD_INT 1
18679: PPUSH
18680: LD_VAR 0 3
18684: PPUSH
18685: CALL_OW 12
18689: ARRAY
18690: ST_TO_ADDR
// if Crawls ( un ) then
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 318
18700: IFFALSE 18711
// ComWalk ( un ) ;
18702: LD_VAR 0 2
18706: PPUSH
18707: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18711: LD_VAR 0 2
18715: PPUSH
18716: LD_INT 9
18718: PPUSH
18719: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18723: LD_INT 28
18725: PPUSH
18726: LD_OWVAR 2
18730: PPUSH
18731: LD_INT 2
18733: PPUSH
18734: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18738: LD_INT 29
18740: PPUSH
18741: LD_OWVAR 2
18745: PPUSH
18746: LD_INT 2
18748: PPUSH
18749: CALL_OW 322
// end ;
18753: PPOPN 3
18755: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18756: LD_EXP 30
18760: PUSH
18761: LD_EXP 73
18765: AND
18766: IFFALSE 18877
18768: GO 18770
18770: DISABLE
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
18775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18776: LD_ADDR_VAR 0 3
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_OWVAR 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 25
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 69
18811: ST_TO_ADDR
// if not tmp then
18812: LD_VAR 0 3
18816: NOT
18817: IFFALSE 18821
// exit ;
18819: GO 18877
// un := tmp [ rand ( 1 , tmp ) ] ;
18821: LD_ADDR_VAR 0 2
18825: PUSH
18826: LD_VAR 0 3
18830: PUSH
18831: LD_INT 1
18833: PPUSH
18834: LD_VAR 0 3
18838: PPUSH
18839: CALL_OW 12
18843: ARRAY
18844: ST_TO_ADDR
// if Crawls ( un ) then
18845: LD_VAR 0 2
18849: PPUSH
18850: CALL_OW 318
18854: IFFALSE 18865
// ComWalk ( un ) ;
18856: LD_VAR 0 2
18860: PPUSH
18861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18865: LD_VAR 0 2
18869: PPUSH
18870: LD_INT 8
18872: PPUSH
18873: CALL_OW 336
// end ;
18877: PPOPN 3
18879: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18880: LD_EXP 30
18884: PUSH
18885: LD_EXP 74
18889: AND
18890: IFFALSE 19034
18892: GO 18894
18894: DISABLE
18895: LD_INT 0
18897: PPUSH
18898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_OWVAR 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 21
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 34
18931: PUSH
18932: LD_INT 12
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 34
18941: PUSH
18942: LD_INT 51
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 34
18951: PUSH
18952: LD_INT 32
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 2
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19034
// for i in tmp do
18984: LD_ADDR_VAR 0 1
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19032
// if GetCargo ( i , mat_artifact ) = 0 then
18997: LD_VAR 0 1
19001: PPUSH
19002: LD_INT 4
19004: PPUSH
19005: CALL_OW 289
19009: PUSH
19010: LD_INT 0
19012: EQUAL
19013: IFFALSE 19030
// SetCargo ( i , mat_siberit , 100 ) ;
19015: LD_VAR 0 1
19019: PPUSH
19020: LD_INT 3
19022: PPUSH
19023: LD_INT 100
19025: PPUSH
19026: CALL_OW 290
19030: GO 18994
19032: POP
19033: POP
// end ;
19034: PPOPN 2
19036: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19037: LD_EXP 30
19041: PUSH
19042: LD_EXP 75
19046: AND
19047: IFFALSE 19230
19049: GO 19051
19051: DISABLE
19052: LD_INT 0
19054: PPUSH
19055: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_OWVAR 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PPUSH
19073: CALL_OW 69
19077: ST_TO_ADDR
// if not tmp then
19078: LD_VAR 0 2
19082: NOT
19083: IFFALSE 19087
// exit ;
19085: GO 19230
// for i := 1 to 2 do
19087: LD_ADDR_VAR 0 1
19091: PUSH
19092: DOUBLE
19093: LD_INT 1
19095: DEC
19096: ST_TO_ADDR
19097: LD_INT 2
19099: PUSH
19100: FOR_TO
19101: IFFALSE 19228
// begin uc_side := your_side ;
19103: LD_ADDR_OWVAR 20
19107: PUSH
19108: LD_OWVAR 2
19112: ST_TO_ADDR
// uc_nation := nation_american ;
19113: LD_ADDR_OWVAR 21
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// vc_chassis := us_morphling ;
19121: LD_ADDR_OWVAR 37
19125: PUSH
19126: LD_INT 5
19128: ST_TO_ADDR
// vc_engine := engine_siberite ;
19129: LD_ADDR_OWVAR 39
19133: PUSH
19134: LD_INT 3
19136: ST_TO_ADDR
// vc_control := control_computer ;
19137: LD_ADDR_OWVAR 38
19141: PUSH
19142: LD_INT 3
19144: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19145: LD_ADDR_OWVAR 40
19149: PUSH
19150: LD_INT 10
19152: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19153: LD_VAR 0 2
19157: PUSH
19158: LD_INT 1
19160: ARRAY
19161: PPUSH
19162: CALL_OW 310
19166: NOT
19167: IFFALSE 19214
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19169: CALL_OW 45
19173: PPUSH
19174: LD_VAR 0 2
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: CALL_OW 250
19187: PPUSH
19188: LD_VAR 0 2
19192: PUSH
19193: LD_INT 1
19195: ARRAY
19196: PPUSH
19197: CALL_OW 251
19201: PPUSH
19202: LD_INT 12
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 50
19212: GO 19226
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19214: CALL_OW 45
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 51
// end ;
19226: GO 19100
19228: POP
19229: POP
// end ;
19230: PPOPN 2
19232: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19233: LD_EXP 30
19237: PUSH
19238: LD_EXP 76
19242: AND
19243: IFFALSE 19465
19245: GO 19247
19247: DISABLE
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19256: LD_ADDR_VAR 0 6
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_OWVAR 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 21
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 3
19285: PUSH
19286: LD_INT 23
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: PPUSH
19305: CALL_OW 69
19309: ST_TO_ADDR
// if not tmp then
19310: LD_VAR 0 6
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19465
// s1 := rand ( 1 , 4 ) ;
19319: LD_ADDR_VAR 0 2
19323: PUSH
19324: LD_INT 1
19326: PPUSH
19327: LD_INT 4
19329: PPUSH
19330: CALL_OW 12
19334: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19335: LD_ADDR_VAR 0 4
19339: PUSH
19340: LD_VAR 0 6
19344: PUSH
19345: LD_INT 1
19347: ARRAY
19348: PPUSH
19349: LD_VAR 0 2
19353: PPUSH
19354: CALL_OW 259
19358: ST_TO_ADDR
// if s1 = 1 then
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 1
19366: EQUAL
19367: IFFALSE 19387
// s2 := rand ( 2 , 4 ) else
19369: LD_ADDR_VAR 0 3
19373: PUSH
19374: LD_INT 2
19376: PPUSH
19377: LD_INT 4
19379: PPUSH
19380: CALL_OW 12
19384: ST_TO_ADDR
19385: GO 19395
// s2 := 1 ;
19387: LD_ADDR_VAR 0 3
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19395: LD_ADDR_VAR 0 5
19399: PUSH
19400: LD_VAR 0 6
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: LD_VAR 0 3
19413: PPUSH
19414: CALL_OW 259
19418: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19419: LD_VAR 0 6
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: LD_VAR 0 2
19432: PPUSH
19433: LD_VAR 0 5
19437: PPUSH
19438: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19442: LD_VAR 0 6
19446: PUSH
19447: LD_INT 1
19449: ARRAY
19450: PPUSH
19451: LD_VAR 0 3
19455: PPUSH
19456: LD_VAR 0 4
19460: PPUSH
19461: CALL_OW 237
// end ;
19465: PPOPN 6
19467: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19468: LD_EXP 30
19472: PUSH
19473: LD_EXP 77
19477: AND
19478: IFFALSE 19557
19480: GO 19482
19482: DISABLE
19483: LD_INT 0
19485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19486: LD_ADDR_VAR 0 1
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_OWVAR 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 30
19505: PUSH
19506: LD_INT 3
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 69
19521: ST_TO_ADDR
// if not tmp then
19522: LD_VAR 0 1
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19531: LD_VAR 0 1
19535: PUSH
19536: LD_INT 1
19538: PPUSH
19539: LD_VAR 0 1
19543: PPUSH
19544: CALL_OW 12
19548: ARRAY
19549: PPUSH
19550: LD_INT 1
19552: PPUSH
19553: CALL_OW 234
// end ;
19557: PPOPN 1
19559: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19560: LD_EXP 30
19564: PUSH
19565: LD_EXP 78
19569: AND
19570: IFFALSE 19682
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
19578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19579: LD_ADDR_VAR 0 2
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: LD_INT 30
19601: PUSH
19602: LD_INT 27
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 30
19611: PUSH
19612: LD_INT 26
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 30
19621: PUSH
19622: LD_INT 28
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PPUSH
19639: CALL_OW 69
19643: ST_TO_ADDR
// if not tmp then
19644: LD_VAR 0 2
19648: NOT
19649: IFFALSE 19653
// exit ;
19651: GO 19682
// for i in tmp do
19653: LD_ADDR_VAR 0 1
19657: PUSH
19658: LD_VAR 0 2
19662: PUSH
19663: FOR_IN
19664: IFFALSE 19680
// SetLives ( i , 1 ) ;
19666: LD_VAR 0 1
19670: PPUSH
19671: LD_INT 1
19673: PPUSH
19674: CALL_OW 234
19678: GO 19663
19680: POP
19681: POP
// end ;
19682: PPOPN 2
19684: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19685: LD_EXP 30
19689: PUSH
19690: LD_EXP 79
19694: AND
19695: IFFALSE 19982
19697: GO 19699
19699: DISABLE
19700: LD_INT 0
19702: PPUSH
19703: PPUSH
19704: PPUSH
// begin i := rand ( 1 , 7 ) ;
19705: LD_ADDR_VAR 0 1
19709: PUSH
19710: LD_INT 1
19712: PPUSH
19713: LD_INT 7
19715: PPUSH
19716: CALL_OW 12
19720: ST_TO_ADDR
// case i of 1 :
19721: LD_VAR 0 1
19725: PUSH
19726: LD_INT 1
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19744
19734: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19735: LD_STRING earthquake(getX(game), 0, 32)
19737: PPUSH
19738: CALL_OW 559
19742: GO 19982
19744: LD_INT 2
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19766
19752: POP
// begin ToLua ( displayStucuk(); ) ;
19753: LD_STRING displayStucuk();
19755: PPUSH
19756: CALL_OW 559
// ResetFog ;
19760: CALL_OW 335
// end ; 3 :
19764: GO 19982
19766: LD_INT 3
19768: DOUBLE
19769: EQUAL
19770: IFTRUE 19774
19772: GO 19878
19774: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19775: LD_ADDR_VAR 0 2
19779: PUSH
19780: LD_INT 22
19782: PUSH
19783: LD_OWVAR 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 25
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: ST_TO_ADDR
// if not tmp then
19811: LD_VAR 0 2
19815: NOT
19816: IFFALSE 19820
// exit ;
19818: GO 19982
// un := tmp [ rand ( 1 , tmp ) ] ;
19820: LD_ADDR_VAR 0 3
19824: PUSH
19825: LD_VAR 0 2
19829: PUSH
19830: LD_INT 1
19832: PPUSH
19833: LD_VAR 0 2
19837: PPUSH
19838: CALL_OW 12
19842: ARRAY
19843: ST_TO_ADDR
// if Crawls ( un ) then
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 318
19853: IFFALSE 19864
// ComWalk ( un ) ;
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19864: LD_VAR 0 3
19868: PPUSH
19869: LD_INT 8
19871: PPUSH
19872: CALL_OW 336
// end ; 4 :
19876: GO 19982
19878: LD_INT 4
19880: DOUBLE
19881: EQUAL
19882: IFTRUE 19886
19884: GO 19960
19886: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19887: LD_ADDR_VAR 0 2
19891: PUSH
19892: LD_INT 22
19894: PUSH
19895: LD_OWVAR 2
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 30
19906: PUSH
19907: LD_INT 29
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PPUSH
19918: CALL_OW 69
19922: ST_TO_ADDR
// if not tmp then
19923: LD_VAR 0 2
19927: NOT
19928: IFFALSE 19932
// exit ;
19930: GO 19982
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19932: LD_VAR 0 2
19936: PUSH
19937: LD_INT 1
19939: ARRAY
19940: PPUSH
19941: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19945: LD_VAR 0 2
19949: PUSH
19950: LD_INT 1
19952: ARRAY
19953: PPUSH
19954: CALL_OW 65
// end ; 5 .. 7 :
19958: GO 19982
19960: LD_INT 5
19962: DOUBLE
19963: GREATEREQUAL
19964: IFFALSE 19972
19966: LD_INT 7
19968: DOUBLE
19969: LESSEQUAL
19970: IFTRUE 19974
19972: GO 19981
19974: POP
// StreamSibBomb ; end ;
19975: CALL 16219 0 0
19979: GO 19982
19981: POP
// end ;
19982: PPOPN 3
19984: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19985: LD_EXP 30
19989: PUSH
19990: LD_EXP 80
19994: AND
19995: IFFALSE 20151
19997: GO 19999
19999: DISABLE
20000: LD_INT 0
20002: PPUSH
20003: PPUSH
20004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_INT 81
20012: PUSH
20013: LD_OWVAR 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: LD_INT 21
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 21
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 69
20058: ST_TO_ADDR
// if not tmp then
20059: LD_VAR 0 2
20063: NOT
20064: IFFALSE 20068
// exit ;
20066: GO 20151
// p := 0 ;
20068: LD_ADDR_VAR 0 3
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20076: LD_INT 35
20078: PPUSH
20079: CALL_OW 67
// p := p + 1 ;
20083: LD_ADDR_VAR 0 3
20087: PUSH
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 1
20095: PLUS
20096: ST_TO_ADDR
// for i in tmp do
20097: LD_ADDR_VAR 0 1
20101: PUSH
20102: LD_VAR 0 2
20106: PUSH
20107: FOR_IN
20108: IFFALSE 20139
// if GetLives ( i ) < 1000 then
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 256
20119: PUSH
20120: LD_INT 1000
20122: LESS
20123: IFFALSE 20137
// SetLives ( i , 1000 ) ;
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_INT 1000
20132: PPUSH
20133: CALL_OW 234
20137: GO 20107
20139: POP
20140: POP
// until p > 20 ;
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 20
20148: GREATER
20149: IFFALSE 20076
// end ;
20151: PPOPN 3
20153: END
// every 0 0$1 trigger StreamModeActive and sTime do
20154: LD_EXP 30
20158: PUSH
20159: LD_EXP 81
20163: AND
20164: IFFALSE 20199
20166: GO 20168
20168: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20169: LD_INT 28
20171: PPUSH
20172: LD_OWVAR 2
20176: PPUSH
20177: LD_INT 2
20179: PPUSH
20180: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20184: LD_INT 30
20186: PPUSH
20187: LD_OWVAR 2
20191: PPUSH
20192: LD_INT 2
20194: PPUSH
20195: CALL_OW 322
// end ;
20199: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20200: LD_EXP 30
20204: PUSH
20205: LD_EXP 82
20209: AND
20210: IFFALSE 20331
20212: GO 20214
20214: DISABLE
20215: LD_INT 0
20217: PPUSH
20218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: LD_INT 22
20226: PUSH
20227: LD_OWVAR 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 21
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 3
20248: PUSH
20249: LD_INT 23
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: PPUSH
20268: CALL_OW 69
20272: ST_TO_ADDR
// if not tmp then
20273: LD_VAR 0 2
20277: NOT
20278: IFFALSE 20282
// exit ;
20280: GO 20331
// for i in tmp do
20282: LD_ADDR_VAR 0 1
20286: PUSH
20287: LD_VAR 0 2
20291: PUSH
20292: FOR_IN
20293: IFFALSE 20329
// begin if Crawls ( i ) then
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 318
20304: IFFALSE 20315
// ComWalk ( i ) ;
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL_OW 138
// SetClass ( i , 2 ) ;
20315: LD_VAR 0 1
20319: PPUSH
20320: LD_INT 2
20322: PPUSH
20323: CALL_OW 336
// end ;
20327: GO 20292
20329: POP
20330: POP
// end ;
20331: PPOPN 2
20333: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20334: LD_EXP 30
20338: PUSH
20339: LD_EXP 83
20343: AND
20344: IFFALSE 20632
20346: GO 20348
20348: DISABLE
20349: LD_INT 0
20351: PPUSH
20352: PPUSH
20353: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20354: LD_OWVAR 2
20358: PPUSH
20359: LD_INT 9
20361: PPUSH
20362: LD_INT 1
20364: PPUSH
20365: LD_INT 1
20367: PPUSH
20368: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20372: LD_INT 9
20374: PPUSH
20375: LD_OWVAR 2
20379: PPUSH
20380: CALL_OW 343
// uc_side := 9 ;
20384: LD_ADDR_OWVAR 20
20388: PUSH
20389: LD_INT 9
20391: ST_TO_ADDR
// uc_nation := 2 ;
20392: LD_ADDR_OWVAR 21
20396: PUSH
20397: LD_INT 2
20399: ST_TO_ADDR
// hc_name := Dark Warrior ;
20400: LD_ADDR_OWVAR 26
20404: PUSH
20405: LD_STRING Dark Warrior
20407: ST_TO_ADDR
// hc_gallery :=  ;
20408: LD_ADDR_OWVAR 33
20412: PUSH
20413: LD_STRING 
20415: ST_TO_ADDR
// hc_noskilllimit := true ;
20416: LD_ADDR_OWVAR 76
20420: PUSH
20421: LD_INT 1
20423: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20424: LD_ADDR_OWVAR 31
20428: PUSH
20429: LD_INT 30
20431: PUSH
20432: LD_INT 30
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: ST_TO_ADDR
// un := CreateHuman ;
20447: LD_ADDR_VAR 0 3
20451: PUSH
20452: CALL_OW 44
20456: ST_TO_ADDR
// hc_noskilllimit := false ;
20457: LD_ADDR_OWVAR 76
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 1
20472: PPUSH
20473: CALL_OW 51
// ToLua ( playRanger() ) ;
20477: LD_STRING playRanger()
20479: PPUSH
20480: CALL_OW 559
// p := 0 ;
20484: LD_ADDR_VAR 0 2
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20492: LD_INT 35
20494: PPUSH
20495: CALL_OW 67
// p := p + 1 ;
20499: LD_ADDR_VAR 0 2
20503: PUSH
20504: LD_VAR 0 2
20508: PUSH
20509: LD_INT 1
20511: PLUS
20512: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20513: LD_VAR 0 3
20517: PPUSH
20518: CALL_OW 256
20522: PUSH
20523: LD_INT 1000
20525: LESS
20526: IFFALSE 20540
// SetLives ( un , 1000 ) ;
20528: LD_VAR 0 3
20532: PPUSH
20533: LD_INT 1000
20535: PPUSH
20536: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20540: LD_VAR 0 3
20544: PPUSH
20545: LD_INT 81
20547: PUSH
20548: LD_OWVAR 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 91
20559: PUSH
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PPUSH
20577: CALL_OW 69
20581: PPUSH
20582: LD_VAR 0 3
20586: PPUSH
20587: CALL_OW 74
20591: PPUSH
20592: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20596: LD_VAR 0 2
20600: PUSH
20601: LD_INT 80
20603: GREATER
20604: PUSH
20605: LD_VAR 0 3
20609: PPUSH
20610: CALL_OW 301
20614: OR
20615: IFFALSE 20492
// if un then
20617: LD_VAR 0 3
20621: IFFALSE 20632
// RemoveUnit ( un ) ;
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 64
// end ;
20632: PPOPN 3
20634: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20635: LD_EXP 84
20639: IFFALSE 20755
20641: GO 20643
20643: DISABLE
20644: LD_INT 0
20646: PPUSH
20647: PPUSH
20648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20649: LD_ADDR_VAR 0 2
20653: PUSH
20654: LD_INT 81
20656: PUSH
20657: LD_OWVAR 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 21
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PPUSH
20680: CALL_OW 69
20684: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20685: LD_STRING playComputer()
20687: PPUSH
20688: CALL_OW 559
// if not tmp then
20692: LD_VAR 0 2
20696: NOT
20697: IFFALSE 20701
// exit ;
20699: GO 20755
// for i in tmp do
20701: LD_ADDR_VAR 0 1
20705: PUSH
20706: LD_VAR 0 2
20710: PUSH
20711: FOR_IN
20712: IFFALSE 20753
// for j := 1 to 4 do
20714: LD_ADDR_VAR 0 3
20718: PUSH
20719: DOUBLE
20720: LD_INT 1
20722: DEC
20723: ST_TO_ADDR
20724: LD_INT 4
20726: PUSH
20727: FOR_TO
20728: IFFALSE 20749
// SetSkill ( i , j , 10 ) ;
20730: LD_VAR 0 1
20734: PPUSH
20735: LD_VAR 0 3
20739: PPUSH
20740: LD_INT 10
20742: PPUSH
20743: CALL_OW 237
20747: GO 20727
20749: POP
20750: POP
20751: GO 20711
20753: POP
20754: POP
// end ;
20755: PPOPN 3
20757: END
// every 0 0$1 trigger s30 do var i , tmp ;
20758: LD_EXP 85
20762: IFFALSE 20831
20764: GO 20766
20766: DISABLE
20767: LD_INT 0
20769: PPUSH
20770: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20771: LD_ADDR_VAR 0 2
20775: PUSH
20776: LD_INT 22
20778: PUSH
20779: LD_OWVAR 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PPUSH
20788: CALL_OW 69
20792: ST_TO_ADDR
// if not tmp then
20793: LD_VAR 0 2
20797: NOT
20798: IFFALSE 20802
// exit ;
20800: GO 20831
// for i in tmp do
20802: LD_ADDR_VAR 0 1
20806: PUSH
20807: LD_VAR 0 2
20811: PUSH
20812: FOR_IN
20813: IFFALSE 20829
// SetLives ( i , 300 ) ;
20815: LD_VAR 0 1
20819: PPUSH
20820: LD_INT 300
20822: PPUSH
20823: CALL_OW 234
20827: GO 20812
20829: POP
20830: POP
// end ;
20831: PPOPN 2
20833: END
// every 0 0$1 trigger s60 do var i , tmp ;
20834: LD_EXP 86
20838: IFFALSE 20907
20840: GO 20842
20842: DISABLE
20843: LD_INT 0
20845: PPUSH
20846: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20847: LD_ADDR_VAR 0 2
20851: PUSH
20852: LD_INT 22
20854: PUSH
20855: LD_OWVAR 2
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PPUSH
20864: CALL_OW 69
20868: ST_TO_ADDR
// if not tmp then
20869: LD_VAR 0 2
20873: NOT
20874: IFFALSE 20878
// exit ;
20876: GO 20907
// for i in tmp do
20878: LD_ADDR_VAR 0 1
20882: PUSH
20883: LD_VAR 0 2
20887: PUSH
20888: FOR_IN
20889: IFFALSE 20905
// SetLives ( i , 600 ) ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_INT 600
20898: PPUSH
20899: CALL_OW 234
20903: GO 20888
20905: POP
20906: POP
// end ;
20907: PPOPN 2
20909: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20910: LD_INT 0
20912: PPUSH
// case cmd of 301 :
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 301
20920: DOUBLE
20921: EQUAL
20922: IFTRUE 20926
20924: GO 20958
20926: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20927: LD_VAR 0 6
20931: PPUSH
20932: LD_VAR 0 7
20936: PPUSH
20937: LD_VAR 0 8
20941: PPUSH
20942: LD_VAR 0 4
20946: PPUSH
20947: LD_VAR 0 5
20951: PPUSH
20952: CALL 22159 0 5
20956: GO 21079
20958: LD_INT 302
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 21003
20966: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20967: LD_VAR 0 6
20971: PPUSH
20972: LD_VAR 0 7
20976: PPUSH
20977: LD_VAR 0 8
20981: PPUSH
20982: LD_VAR 0 9
20986: PPUSH
20987: LD_VAR 0 4
20991: PPUSH
20992: LD_VAR 0 5
20996: PPUSH
20997: CALL 22250 0 6
21001: GO 21079
21003: LD_INT 303
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21048
21011: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21012: LD_VAR 0 6
21016: PPUSH
21017: LD_VAR 0 7
21021: PPUSH
21022: LD_VAR 0 8
21026: PPUSH
21027: LD_VAR 0 9
21031: PPUSH
21032: LD_VAR 0 4
21036: PPUSH
21037: LD_VAR 0 5
21041: PPUSH
21042: CALL 21084 0 6
21046: GO 21079
21048: LD_INT 304
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21078
21056: POP
// hHackTeleport ( unit , x , y ) ; end ;
21057: LD_VAR 0 2
21061: PPUSH
21062: LD_VAR 0 4
21066: PPUSH
21067: LD_VAR 0 5
21071: PPUSH
21072: CALL 22843 0 3
21076: GO 21079
21078: POP
// end ;
21079: LD_VAR 0 12
21083: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21084: LD_INT 0
21086: PPUSH
21087: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21088: LD_VAR 0 1
21092: PUSH
21093: LD_INT 1
21095: LESS
21096: PUSH
21097: LD_VAR 0 1
21101: PUSH
21102: LD_INT 3
21104: GREATER
21105: OR
21106: PUSH
21107: LD_VAR 0 5
21111: PPUSH
21112: LD_VAR 0 6
21116: PPUSH
21117: CALL_OW 428
21121: OR
21122: IFFALSE 21126
// exit ;
21124: GO 21846
// uc_side := your_side ;
21126: LD_ADDR_OWVAR 20
21130: PUSH
21131: LD_OWVAR 2
21135: ST_TO_ADDR
// uc_nation := nation ;
21136: LD_ADDR_OWVAR 21
21140: PUSH
21141: LD_VAR 0 1
21145: ST_TO_ADDR
// bc_level = 1 ;
21146: LD_ADDR_OWVAR 43
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// case btype of 1 :
21154: LD_VAR 0 2
21158: PUSH
21159: LD_INT 1
21161: DOUBLE
21162: EQUAL
21163: IFTRUE 21167
21165: GO 21178
21167: POP
// bc_type := b_depot ; 2 :
21168: LD_ADDR_OWVAR 42
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
21176: GO 21790
21178: LD_INT 2
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21197
21186: POP
// bc_type := b_warehouse ; 3 :
21187: LD_ADDR_OWVAR 42
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
21195: GO 21790
21197: LD_INT 3
21199: DOUBLE
21200: EQUAL
21201: IFTRUE 21205
21203: GO 21216
21205: POP
// bc_type := b_lab ; 4 .. 9 :
21206: LD_ADDR_OWVAR 42
21210: PUSH
21211: LD_INT 6
21213: ST_TO_ADDR
21214: GO 21790
21216: LD_INT 4
21218: DOUBLE
21219: GREATEREQUAL
21220: IFFALSE 21228
21222: LD_INT 9
21224: DOUBLE
21225: LESSEQUAL
21226: IFTRUE 21230
21228: GO 21282
21230: POP
// begin bc_type := b_lab_half ;
21231: LD_ADDR_OWVAR 42
21235: PUSH
21236: LD_INT 7
21238: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21239: LD_ADDR_OWVAR 44
21243: PUSH
21244: LD_INT 10
21246: PUSH
21247: LD_INT 11
21249: PUSH
21250: LD_INT 12
21252: PUSH
21253: LD_INT 15
21255: PUSH
21256: LD_INT 14
21258: PUSH
21259: LD_INT 13
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: PUSH
21270: LD_VAR 0 2
21274: PUSH
21275: LD_INT 3
21277: MINUS
21278: ARRAY
21279: ST_TO_ADDR
// end ; 10 .. 13 :
21280: GO 21790
21282: LD_INT 10
21284: DOUBLE
21285: GREATEREQUAL
21286: IFFALSE 21294
21288: LD_INT 13
21290: DOUBLE
21291: LESSEQUAL
21292: IFTRUE 21296
21294: GO 21373
21296: POP
// begin bc_type := b_lab_full ;
21297: LD_ADDR_OWVAR 42
21301: PUSH
21302: LD_INT 8
21304: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21305: LD_ADDR_OWVAR 44
21309: PUSH
21310: LD_INT 10
21312: PUSH
21313: LD_INT 12
21315: PUSH
21316: LD_INT 14
21318: PUSH
21319: LD_INT 13
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: PUSH
21328: LD_VAR 0 2
21332: PUSH
21333: LD_INT 9
21335: MINUS
21336: ARRAY
21337: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21338: LD_ADDR_OWVAR 45
21342: PUSH
21343: LD_INT 11
21345: PUSH
21346: LD_INT 15
21348: PUSH
21349: LD_INT 12
21351: PUSH
21352: LD_INT 15
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: PUSH
21361: LD_VAR 0 2
21365: PUSH
21366: LD_INT 9
21368: MINUS
21369: ARRAY
21370: ST_TO_ADDR
// end ; 14 :
21371: GO 21790
21373: LD_INT 14
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21392
21381: POP
// bc_type := b_workshop ; 15 :
21382: LD_ADDR_OWVAR 42
21386: PUSH
21387: LD_INT 2
21389: ST_TO_ADDR
21390: GO 21790
21392: LD_INT 15
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 21411
21400: POP
// bc_type := b_factory ; 16 :
21401: LD_ADDR_OWVAR 42
21405: PUSH
21406: LD_INT 3
21408: ST_TO_ADDR
21409: GO 21790
21411: LD_INT 16
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21430
21419: POP
// bc_type := b_ext_gun ; 17 :
21420: LD_ADDR_OWVAR 42
21424: PUSH
21425: LD_INT 17
21427: ST_TO_ADDR
21428: GO 21790
21430: LD_INT 17
21432: DOUBLE
21433: EQUAL
21434: IFTRUE 21438
21436: GO 21466
21438: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21439: LD_ADDR_OWVAR 42
21443: PUSH
21444: LD_INT 19
21446: PUSH
21447: LD_INT 23
21449: PUSH
21450: LD_INT 19
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: LD_VAR 0 1
21462: ARRAY
21463: ST_TO_ADDR
21464: GO 21790
21466: LD_INT 18
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21485
21474: POP
// bc_type := b_ext_radar ; 19 :
21475: LD_ADDR_OWVAR 42
21479: PUSH
21480: LD_INT 20
21482: ST_TO_ADDR
21483: GO 21790
21485: LD_INT 19
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21504
21493: POP
// bc_type := b_ext_radio ; 20 :
21494: LD_ADDR_OWVAR 42
21498: PUSH
21499: LD_INT 22
21501: ST_TO_ADDR
21502: GO 21790
21504: LD_INT 20
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21523
21512: POP
// bc_type := b_ext_siberium ; 21 :
21513: LD_ADDR_OWVAR 42
21517: PUSH
21518: LD_INT 21
21520: ST_TO_ADDR
21521: GO 21790
21523: LD_INT 21
21525: DOUBLE
21526: EQUAL
21527: IFTRUE 21531
21529: GO 21542
21531: POP
// bc_type := b_ext_computer ; 22 :
21532: LD_ADDR_OWVAR 42
21536: PUSH
21537: LD_INT 24
21539: ST_TO_ADDR
21540: GO 21790
21542: LD_INT 22
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21561
21550: POP
// bc_type := b_ext_track ; 23 :
21551: LD_ADDR_OWVAR 42
21555: PUSH
21556: LD_INT 16
21558: ST_TO_ADDR
21559: GO 21790
21561: LD_INT 23
21563: DOUBLE
21564: EQUAL
21565: IFTRUE 21569
21567: GO 21580
21569: POP
// bc_type := b_ext_laser ; 24 :
21570: LD_ADDR_OWVAR 42
21574: PUSH
21575: LD_INT 25
21577: ST_TO_ADDR
21578: GO 21790
21580: LD_INT 24
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21599
21588: POP
// bc_type := b_control_tower ; 25 :
21589: LD_ADDR_OWVAR 42
21593: PUSH
21594: LD_INT 36
21596: ST_TO_ADDR
21597: GO 21790
21599: LD_INT 25
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21618
21607: POP
// bc_type := b_breastwork ; 26 :
21608: LD_ADDR_OWVAR 42
21612: PUSH
21613: LD_INT 31
21615: ST_TO_ADDR
21616: GO 21790
21618: LD_INT 26
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21637
21626: POP
// bc_type := b_bunker ; 27 :
21627: LD_ADDR_OWVAR 42
21631: PUSH
21632: LD_INT 32
21634: ST_TO_ADDR
21635: GO 21790
21637: LD_INT 27
21639: DOUBLE
21640: EQUAL
21641: IFTRUE 21645
21643: GO 21656
21645: POP
// bc_type := b_turret ; 28 :
21646: LD_ADDR_OWVAR 42
21650: PUSH
21651: LD_INT 33
21653: ST_TO_ADDR
21654: GO 21790
21656: LD_INT 28
21658: DOUBLE
21659: EQUAL
21660: IFTRUE 21664
21662: GO 21675
21664: POP
// bc_type := b_armoury ; 29 :
21665: LD_ADDR_OWVAR 42
21669: PUSH
21670: LD_INT 4
21672: ST_TO_ADDR
21673: GO 21790
21675: LD_INT 29
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21694
21683: POP
// bc_type := b_barracks ; 30 :
21684: LD_ADDR_OWVAR 42
21688: PUSH
21689: LD_INT 5
21691: ST_TO_ADDR
21692: GO 21790
21694: LD_INT 30
21696: DOUBLE
21697: EQUAL
21698: IFTRUE 21702
21700: GO 21713
21702: POP
// bc_type := b_solar_power ; 31 :
21703: LD_ADDR_OWVAR 42
21707: PUSH
21708: LD_INT 27
21710: ST_TO_ADDR
21711: GO 21790
21713: LD_INT 31
21715: DOUBLE
21716: EQUAL
21717: IFTRUE 21721
21719: GO 21732
21721: POP
// bc_type := b_oil_power ; 32 :
21722: LD_ADDR_OWVAR 42
21726: PUSH
21727: LD_INT 26
21729: ST_TO_ADDR
21730: GO 21790
21732: LD_INT 32
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21751
21740: POP
// bc_type := b_siberite_power ; 33 :
21741: LD_ADDR_OWVAR 42
21745: PUSH
21746: LD_INT 28
21748: ST_TO_ADDR
21749: GO 21790
21751: LD_INT 33
21753: DOUBLE
21754: EQUAL
21755: IFTRUE 21759
21757: GO 21770
21759: POP
// bc_type := b_oil_mine ; 34 :
21760: LD_ADDR_OWVAR 42
21764: PUSH
21765: LD_INT 29
21767: ST_TO_ADDR
21768: GO 21790
21770: LD_INT 34
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21789
21778: POP
// bc_type := b_siberite_mine ; end ;
21779: LD_ADDR_OWVAR 42
21783: PUSH
21784: LD_INT 30
21786: ST_TO_ADDR
21787: GO 21790
21789: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21790: LD_ADDR_VAR 0 8
21794: PUSH
21795: LD_VAR 0 5
21799: PPUSH
21800: LD_VAR 0 6
21804: PPUSH
21805: LD_VAR 0 3
21809: PPUSH
21810: CALL_OW 47
21814: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21815: LD_OWVAR 42
21819: PUSH
21820: LD_INT 32
21822: PUSH
21823: LD_INT 33
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: IN
21830: IFFALSE 21846
// PlaceWeaponTurret ( b , weapon ) ;
21832: LD_VAR 0 8
21836: PPUSH
21837: LD_VAR 0 4
21841: PPUSH
21842: CALL_OW 431
// end ;
21846: LD_VAR 0 7
21850: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21857: LD_ADDR_VAR 0 4
21861: PUSH
21862: LD_INT 22
21864: PUSH
21865: LD_OWVAR 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 30
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 30
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 69
21910: ST_TO_ADDR
// if not tmp then
21911: LD_VAR 0 4
21915: NOT
21916: IFFALSE 21920
// exit ;
21918: GO 21979
// for i in tmp do
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: LD_VAR 0 4
21929: PUSH
21930: FOR_IN
21931: IFFALSE 21977
// for j = 1 to 3 do
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: DOUBLE
21939: LD_INT 1
21941: DEC
21942: ST_TO_ADDR
21943: LD_INT 3
21945: PUSH
21946: FOR_TO
21947: IFFALSE 21973
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: CALL_OW 274
21958: PPUSH
21959: LD_VAR 0 3
21963: PPUSH
21964: LD_INT 99999
21966: PPUSH
21967: CALL_OW 277
21971: GO 21946
21973: POP
21974: POP
21975: GO 21930
21977: POP
21978: POP
// end ;
21979: LD_VAR 0 1
21983: RET
// export function hHackSetLevel10 ; var i , j ; begin
21984: LD_INT 0
21986: PPUSH
21987: PPUSH
21988: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21989: LD_ADDR_VAR 0 2
21993: PUSH
21994: LD_INT 21
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 69
22008: PUSH
22009: FOR_IN
22010: IFFALSE 22062
// if IsSelected ( i ) then
22012: LD_VAR 0 2
22016: PPUSH
22017: CALL_OW 306
22021: IFFALSE 22060
// begin for j := 1 to 4 do
22023: LD_ADDR_VAR 0 3
22027: PUSH
22028: DOUBLE
22029: LD_INT 1
22031: DEC
22032: ST_TO_ADDR
22033: LD_INT 4
22035: PUSH
22036: FOR_TO
22037: IFFALSE 22058
// SetSkill ( i , j , 10 ) ;
22039: LD_VAR 0 2
22043: PPUSH
22044: LD_VAR 0 3
22048: PPUSH
22049: LD_INT 10
22051: PPUSH
22052: CALL_OW 237
22056: GO 22036
22058: POP
22059: POP
// end ;
22060: GO 22009
22062: POP
22063: POP
// end ;
22064: LD_VAR 0 1
22068: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22069: LD_INT 0
22071: PPUSH
22072: PPUSH
22073: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22074: LD_ADDR_VAR 0 2
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PPUSH
22105: CALL_OW 69
22109: PUSH
22110: FOR_IN
22111: IFFALSE 22152
// begin for j := 1 to 4 do
22113: LD_ADDR_VAR 0 3
22117: PUSH
22118: DOUBLE
22119: LD_INT 1
22121: DEC
22122: ST_TO_ADDR
22123: LD_INT 4
22125: PUSH
22126: FOR_TO
22127: IFFALSE 22148
// SetSkill ( i , j , 10 ) ;
22129: LD_VAR 0 2
22133: PPUSH
22134: LD_VAR 0 3
22138: PPUSH
22139: LD_INT 10
22141: PPUSH
22142: CALL_OW 237
22146: GO 22126
22148: POP
22149: POP
// end ;
22150: GO 22110
22152: POP
22153: POP
// end ;
22154: LD_VAR 0 1
22158: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22159: LD_INT 0
22161: PPUSH
// uc_side := your_side ;
22162: LD_ADDR_OWVAR 20
22166: PUSH
22167: LD_OWVAR 2
22171: ST_TO_ADDR
// uc_nation := nation ;
22172: LD_ADDR_OWVAR 21
22176: PUSH
22177: LD_VAR 0 1
22181: ST_TO_ADDR
// InitHc ;
22182: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22186: LD_INT 0
22188: PPUSH
22189: LD_VAR 0 2
22193: PPUSH
22194: LD_VAR 0 3
22198: PPUSH
22199: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22203: LD_VAR 0 4
22207: PPUSH
22208: LD_VAR 0 5
22212: PPUSH
22213: CALL_OW 428
22217: PUSH
22218: LD_INT 0
22220: EQUAL
22221: IFFALSE 22245
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22223: CALL_OW 44
22227: PPUSH
22228: LD_VAR 0 4
22232: PPUSH
22233: LD_VAR 0 5
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: CALL_OW 48
// end ;
22245: LD_VAR 0 6
22249: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22250: LD_INT 0
22252: PPUSH
22253: PPUSH
// uc_side := your_side ;
22254: LD_ADDR_OWVAR 20
22258: PUSH
22259: LD_OWVAR 2
22263: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22264: LD_VAR 0 1
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 3
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: LD_INT 5
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: IN
22291: IFFALSE 22303
// uc_nation := nation_american else
22293: LD_ADDR_OWVAR 21
22297: PUSH
22298: LD_INT 1
22300: ST_TO_ADDR
22301: GO 22346
// if chassis in [ 11 , 12 , 13 , 14 ] then
22303: LD_VAR 0 1
22307: PUSH
22308: LD_INT 11
22310: PUSH
22311: LD_INT 12
22313: PUSH
22314: LD_INT 13
22316: PUSH
22317: LD_INT 14
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: IN
22326: IFFALSE 22338
// uc_nation := nation_arabian else
22328: LD_ADDR_OWVAR 21
22332: PUSH
22333: LD_INT 2
22335: ST_TO_ADDR
22336: GO 22346
// uc_nation := nation_russian ;
22338: LD_ADDR_OWVAR 21
22342: PUSH
22343: LD_INT 3
22345: ST_TO_ADDR
// vc_chassis := chassis ;
22346: LD_ADDR_OWVAR 37
22350: PUSH
22351: LD_VAR 0 1
22355: ST_TO_ADDR
// vc_engine := engine ;
22356: LD_ADDR_OWVAR 39
22360: PUSH
22361: LD_VAR 0 2
22365: ST_TO_ADDR
// vc_control := control ;
22366: LD_ADDR_OWVAR 38
22370: PUSH
22371: LD_VAR 0 3
22375: ST_TO_ADDR
// vc_weapon := weapon ;
22376: LD_ADDR_OWVAR 40
22380: PUSH
22381: LD_VAR 0 4
22385: ST_TO_ADDR
// un := CreateVehicle ;
22386: LD_ADDR_VAR 0 8
22390: PUSH
22391: CALL_OW 45
22395: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22396: LD_VAR 0 8
22400: PPUSH
22401: LD_INT 0
22403: PPUSH
22404: LD_INT 5
22406: PPUSH
22407: CALL_OW 12
22411: PPUSH
22412: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22416: LD_VAR 0 8
22420: PPUSH
22421: LD_VAR 0 5
22425: PPUSH
22426: LD_VAR 0 6
22430: PPUSH
22431: LD_INT 1
22433: PPUSH
22434: CALL_OW 48
// end ;
22438: LD_VAR 0 7
22442: RET
// export hInvincible ; every 1 do
22443: GO 22445
22445: DISABLE
// hInvincible := [ ] ;
22446: LD_ADDR_EXP 87
22450: PUSH
22451: EMPTY
22452: ST_TO_ADDR
22453: END
// every 10 do var i ;
22454: GO 22456
22456: DISABLE
22457: LD_INT 0
22459: PPUSH
// begin enable ;
22460: ENABLE
// if not hInvincible then
22461: LD_EXP 87
22465: NOT
22466: IFFALSE 22470
// exit ;
22468: GO 22514
// for i in hInvincible do
22470: LD_ADDR_VAR 0 1
22474: PUSH
22475: LD_EXP 87
22479: PUSH
22480: FOR_IN
22481: IFFALSE 22512
// if GetLives ( i ) < 1000 then
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 256
22492: PUSH
22493: LD_INT 1000
22495: LESS
22496: IFFALSE 22510
// SetLives ( i , 1000 ) ;
22498: LD_VAR 0 1
22502: PPUSH
22503: LD_INT 1000
22505: PPUSH
22506: CALL_OW 234
22510: GO 22480
22512: POP
22513: POP
// end ;
22514: PPOPN 1
22516: END
// export function hHackInvincible ; var i ; begin
22517: LD_INT 0
22519: PPUSH
22520: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22521: LD_ADDR_VAR 0 2
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 21
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 21
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: PPUSH
22554: CALL_OW 69
22558: PUSH
22559: FOR_IN
22560: IFFALSE 22621
// if IsSelected ( i ) then
22562: LD_VAR 0 2
22566: PPUSH
22567: CALL_OW 306
22571: IFFALSE 22619
// begin if i in hInvincible then
22573: LD_VAR 0 2
22577: PUSH
22578: LD_EXP 87
22582: IN
22583: IFFALSE 22603
// hInvincible := hInvincible diff i else
22585: LD_ADDR_EXP 87
22589: PUSH
22590: LD_EXP 87
22594: PUSH
22595: LD_VAR 0 2
22599: DIFF
22600: ST_TO_ADDR
22601: GO 22619
// hInvincible := hInvincible union i ;
22603: LD_ADDR_EXP 87
22607: PUSH
22608: LD_EXP 87
22612: PUSH
22613: LD_VAR 0 2
22617: UNION
22618: ST_TO_ADDR
// end ;
22619: GO 22559
22621: POP
22622: POP
// end ;
22623: LD_VAR 0 1
22627: RET
// export function hHackInvisible ; var i , j ; begin
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
22632: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: LD_INT 21
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22678
// if IsSelected ( i ) then
22656: LD_VAR 0 2
22660: PPUSH
22661: CALL_OW 306
22665: IFFALSE 22676
// ComForceInvisible ( i ) ;
22667: LD_VAR 0 2
22671: PPUSH
22672: CALL_OW 496
22676: GO 22653
22678: POP
22679: POP
// end ;
22680: LD_VAR 0 1
22684: RET
// export function hHackChangeYourSide ; begin
22685: LD_INT 0
22687: PPUSH
// if your_side = 8 then
22688: LD_OWVAR 2
22692: PUSH
22693: LD_INT 8
22695: EQUAL
22696: IFFALSE 22708
// your_side := 0 else
22698: LD_ADDR_OWVAR 2
22702: PUSH
22703: LD_INT 0
22705: ST_TO_ADDR
22706: GO 22722
// your_side := your_side + 1 ;
22708: LD_ADDR_OWVAR 2
22712: PUSH
22713: LD_OWVAR 2
22717: PUSH
22718: LD_INT 1
22720: PLUS
22721: ST_TO_ADDR
// end ;
22722: LD_VAR 0 1
22726: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22727: LD_INT 0
22729: PPUSH
22730: PPUSH
22731: PPUSH
// for i in all_units do
22732: LD_ADDR_VAR 0 2
22736: PUSH
22737: LD_OWVAR 3
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22821
// if IsSelected ( i ) then
22745: LD_VAR 0 2
22749: PPUSH
22750: CALL_OW 306
22754: IFFALSE 22819
// begin j := GetSide ( i ) ;
22756: LD_ADDR_VAR 0 3
22760: PUSH
22761: LD_VAR 0 2
22765: PPUSH
22766: CALL_OW 255
22770: ST_TO_ADDR
// if j = 8 then
22771: LD_VAR 0 3
22775: PUSH
22776: LD_INT 8
22778: EQUAL
22779: IFFALSE 22791
// j := 0 else
22781: LD_ADDR_VAR 0 3
22785: PUSH
22786: LD_INT 0
22788: ST_TO_ADDR
22789: GO 22805
// j := j + 1 ;
22791: LD_ADDR_VAR 0 3
22795: PUSH
22796: LD_VAR 0 3
22800: PUSH
22801: LD_INT 1
22803: PLUS
22804: ST_TO_ADDR
// SetSide ( i , j ) ;
22805: LD_VAR 0 2
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: CALL_OW 235
// end ;
22819: GO 22742
22821: POP
22822: POP
// end ;
22823: LD_VAR 0 1
22827: RET
// export function hHackFog ; begin
22828: LD_INT 0
22830: PPUSH
// FogOff ( true ) ;
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 344
// end ;
22838: LD_VAR 0 1
22842: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22843: LD_INT 0
22845: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22846: LD_VAR 0 1
22850: PPUSH
22851: LD_VAR 0 2
22855: PPUSH
22856: LD_VAR 0 3
22860: PPUSH
22861: LD_INT 1
22863: PPUSH
22864: LD_INT 1
22866: PPUSH
22867: CALL_OW 483
// CenterOnXY ( x , y ) ;
22871: LD_VAR 0 2
22875: PPUSH
22876: LD_VAR 0 3
22880: PPUSH
22881: CALL_OW 84
// end ;
22885: LD_VAR 0 4
22889: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22890: LD_INT 0
22892: PPUSH
22893: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22894: LD_VAR 0 1
22898: NOT
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: LD_VAR 0 3
22909: PPUSH
22910: CALL_OW 488
22914: NOT
22915: OR
22916: PUSH
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 266
22926: PUSH
22927: LD_INT 3
22929: NONEQUAL
22930: PUSH
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 247
22940: PUSH
22941: LD_INT 1
22943: EQUAL
22944: NOT
22945: AND
22946: OR
22947: IFFALSE 22951
// exit ;
22949: GO 23100
// if GetType ( factory ) = unit_human then
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 247
22960: PUSH
22961: LD_INT 1
22963: EQUAL
22964: IFFALSE 22981
// factory := IsInUnit ( factory ) ;
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 310
22980: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 266
22990: PUSH
22991: LD_INT 3
22993: NONEQUAL
22994: IFFALSE 22998
// exit ;
22996: GO 23100
// if HexInfo ( x , y ) = factory then
22998: LD_VAR 0 2
23002: PPUSH
23003: LD_VAR 0 3
23007: PPUSH
23008: CALL_OW 428
23012: PUSH
23013: LD_VAR 0 1
23017: EQUAL
23018: IFFALSE 23045
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23020: LD_ADDR_EXP 88
23024: PUSH
23025: LD_EXP 88
23029: PPUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_INT 0
23037: PPUSH
23038: CALL_OW 1
23042: ST_TO_ADDR
23043: GO 23096
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23045: LD_ADDR_EXP 88
23049: PUSH
23050: LD_EXP 88
23054: PPUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_VAR 0 1
23064: PPUSH
23065: CALL_OW 255
23069: PUSH
23070: LD_VAR 0 1
23074: PUSH
23075: LD_VAR 0 2
23079: PUSH
23080: LD_VAR 0 3
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 1
23095: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23096: CALL 23105 0 0
// end ;
23100: LD_VAR 0 4
23104: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23105: LD_INT 0
23107: PPUSH
23108: PPUSH
23109: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23110: LD_STRING resetFactoryWaypoint();
23112: PPUSH
23113: CALL_OW 559
// if factoryWaypoints then
23117: LD_EXP 88
23121: IFFALSE 23247
// begin list := PrepareArray ( factoryWaypoints ) ;
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_EXP 88
23132: PPUSH
23133: CALL 69697 0 1
23137: ST_TO_ADDR
// for i := 1 to list do
23138: LD_ADDR_VAR 0 2
23142: PUSH
23143: DOUBLE
23144: LD_INT 1
23146: DEC
23147: ST_TO_ADDR
23148: LD_VAR 0 3
23152: PUSH
23153: FOR_TO
23154: IFFALSE 23245
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23156: LD_STRING setFactoryWaypointXY(
23158: PUSH
23159: LD_VAR 0 3
23163: PUSH
23164: LD_VAR 0 2
23168: ARRAY
23169: PUSH
23170: LD_INT 1
23172: ARRAY
23173: STR
23174: PUSH
23175: LD_STRING ,
23177: STR
23178: PUSH
23179: LD_VAR 0 3
23183: PUSH
23184: LD_VAR 0 2
23188: ARRAY
23189: PUSH
23190: LD_INT 2
23192: ARRAY
23193: STR
23194: PUSH
23195: LD_STRING ,
23197: STR
23198: PUSH
23199: LD_VAR 0 3
23203: PUSH
23204: LD_VAR 0 2
23208: ARRAY
23209: PUSH
23210: LD_INT 3
23212: ARRAY
23213: STR
23214: PUSH
23215: LD_STRING ,
23217: STR
23218: PUSH
23219: LD_VAR 0 3
23223: PUSH
23224: LD_VAR 0 2
23228: ARRAY
23229: PUSH
23230: LD_INT 4
23232: ARRAY
23233: STR
23234: PUSH
23235: LD_STRING )
23237: STR
23238: PPUSH
23239: CALL_OW 559
23243: GO 23153
23245: POP
23246: POP
// end ; end ;
23247: LD_VAR 0 1
23251: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23252: LD_INT 0
23254: PPUSH
// if HexInfo ( x , y ) = warehouse then
23255: LD_VAR 0 2
23259: PPUSH
23260: LD_VAR 0 3
23264: PPUSH
23265: CALL_OW 428
23269: PUSH
23270: LD_VAR 0 1
23274: EQUAL
23275: IFFALSE 23302
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23277: LD_ADDR_EXP 89
23281: PUSH
23282: LD_EXP 89
23286: PPUSH
23287: LD_VAR 0 1
23291: PPUSH
23292: LD_INT 0
23294: PPUSH
23295: CALL_OW 1
23299: ST_TO_ADDR
23300: GO 23353
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23302: LD_ADDR_EXP 89
23306: PUSH
23307: LD_EXP 89
23311: PPUSH
23312: LD_VAR 0 1
23316: PPUSH
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL_OW 255
23326: PUSH
23327: LD_VAR 0 1
23331: PUSH
23332: LD_VAR 0 2
23336: PUSH
23337: LD_VAR 0 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 1
23352: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23353: CALL 23362 0 0
// end ;
23357: LD_VAR 0 4
23361: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23362: LD_INT 0
23364: PPUSH
23365: PPUSH
23366: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23367: LD_STRING resetWarehouseGatheringPoints();
23369: PPUSH
23370: CALL_OW 559
// if warehouseGatheringPoints then
23374: LD_EXP 89
23378: IFFALSE 23504
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23380: LD_ADDR_VAR 0 3
23384: PUSH
23385: LD_EXP 89
23389: PPUSH
23390: CALL 69697 0 1
23394: ST_TO_ADDR
// for i := 1 to list do
23395: LD_ADDR_VAR 0 2
23399: PUSH
23400: DOUBLE
23401: LD_INT 1
23403: DEC
23404: ST_TO_ADDR
23405: LD_VAR 0 3
23409: PUSH
23410: FOR_TO
23411: IFFALSE 23502
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23413: LD_STRING setWarehouseGatheringPointXY(
23415: PUSH
23416: LD_VAR 0 3
23420: PUSH
23421: LD_VAR 0 2
23425: ARRAY
23426: PUSH
23427: LD_INT 1
23429: ARRAY
23430: STR
23431: PUSH
23432: LD_STRING ,
23434: STR
23435: PUSH
23436: LD_VAR 0 3
23440: PUSH
23441: LD_VAR 0 2
23445: ARRAY
23446: PUSH
23447: LD_INT 2
23449: ARRAY
23450: STR
23451: PUSH
23452: LD_STRING ,
23454: STR
23455: PUSH
23456: LD_VAR 0 3
23460: PUSH
23461: LD_VAR 0 2
23465: ARRAY
23466: PUSH
23467: LD_INT 3
23469: ARRAY
23470: STR
23471: PUSH
23472: LD_STRING ,
23474: STR
23475: PUSH
23476: LD_VAR 0 3
23480: PUSH
23481: LD_VAR 0 2
23485: ARRAY
23486: PUSH
23487: LD_INT 4
23489: ARRAY
23490: STR
23491: PUSH
23492: LD_STRING )
23494: STR
23495: PPUSH
23496: CALL_OW 559
23500: GO 23410
23502: POP
23503: POP
// end ; end ;
23504: LD_VAR 0 1
23508: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23509: LD_EXP 89
23513: IFFALSE 24198
23515: GO 23517
23517: DISABLE
23518: LD_INT 0
23520: PPUSH
23521: PPUSH
23522: PPUSH
23523: PPUSH
23524: PPUSH
23525: PPUSH
23526: PPUSH
23527: PPUSH
23528: PPUSH
// begin enable ;
23529: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_EXP 89
23539: PPUSH
23540: CALL 69697 0 1
23544: ST_TO_ADDR
// if not list then
23545: LD_VAR 0 3
23549: NOT
23550: IFFALSE 23554
// exit ;
23552: GO 24198
// for i := 1 to list do
23554: LD_ADDR_VAR 0 1
23558: PUSH
23559: DOUBLE
23560: LD_INT 1
23562: DEC
23563: ST_TO_ADDR
23564: LD_VAR 0 3
23568: PUSH
23569: FOR_TO
23570: IFFALSE 24196
// begin depot := list [ i ] [ 2 ] ;
23572: LD_ADDR_VAR 0 8
23576: PUSH
23577: LD_VAR 0 3
23581: PUSH
23582: LD_VAR 0 1
23586: ARRAY
23587: PUSH
23588: LD_INT 2
23590: ARRAY
23591: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23592: LD_ADDR_VAR 0 5
23596: PUSH
23597: LD_VAR 0 3
23601: PUSH
23602: LD_VAR 0 1
23606: ARRAY
23607: PUSH
23608: LD_INT 1
23610: ARRAY
23611: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23612: LD_VAR 0 8
23616: PPUSH
23617: CALL_OW 301
23621: PUSH
23622: LD_VAR 0 5
23626: PUSH
23627: LD_VAR 0 8
23631: PPUSH
23632: CALL_OW 255
23636: NONEQUAL
23637: OR
23638: IFFALSE 23667
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23640: LD_ADDR_EXP 89
23644: PUSH
23645: LD_EXP 89
23649: PPUSH
23650: LD_VAR 0 8
23654: PPUSH
23655: LD_INT 0
23657: PPUSH
23658: CALL_OW 1
23662: ST_TO_ADDR
// exit ;
23663: POP
23664: POP
23665: GO 24198
// end ; x := list [ i ] [ 3 ] ;
23667: LD_ADDR_VAR 0 6
23671: PUSH
23672: LD_VAR 0 3
23676: PUSH
23677: LD_VAR 0 1
23681: ARRAY
23682: PUSH
23683: LD_INT 3
23685: ARRAY
23686: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23687: LD_ADDR_VAR 0 7
23691: PUSH
23692: LD_VAR 0 3
23696: PUSH
23697: LD_VAR 0 1
23701: ARRAY
23702: PUSH
23703: LD_INT 4
23705: ARRAY
23706: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23707: LD_ADDR_VAR 0 9
23711: PUSH
23712: LD_VAR 0 6
23716: PPUSH
23717: LD_VAR 0 7
23721: PPUSH
23722: LD_INT 16
23724: PPUSH
23725: CALL 68285 0 3
23729: ST_TO_ADDR
// if not cratesNearbyPoint then
23730: LD_VAR 0 9
23734: NOT
23735: IFFALSE 23741
// exit ;
23737: POP
23738: POP
23739: GO 24198
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23741: LD_ADDR_VAR 0 4
23745: PUSH
23746: LD_INT 22
23748: PUSH
23749: LD_VAR 0 5
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 60
23763: PUSH
23764: EMPTY
23765: LIST
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 91
23773: PUSH
23774: LD_VAR 0 8
23778: PUSH
23779: LD_INT 6
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 25
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 25
23802: PUSH
23803: LD_INT 16
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: PPUSH
23821: CALL_OW 69
23825: PUSH
23826: LD_VAR 0 8
23830: PPUSH
23831: CALL_OW 313
23835: PPUSH
23836: LD_INT 3
23838: PUSH
23839: LD_INT 60
23841: PUSH
23842: EMPTY
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 25
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 25
23864: PUSH
23865: LD_INT 16
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PPUSH
23881: CALL_OW 72
23885: UNION
23886: ST_TO_ADDR
// if tmp then
23887: LD_VAR 0 4
23891: IFFALSE 23971
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23893: LD_ADDR_VAR 0 4
23897: PUSH
23898: LD_VAR 0 4
23902: PPUSH
23903: LD_INT 3
23905: PPUSH
23906: CALL 66254 0 2
23910: ST_TO_ADDR
// for j in tmp do
23911: LD_ADDR_VAR 0 2
23915: PUSH
23916: LD_VAR 0 4
23920: PUSH
23921: FOR_IN
23922: IFFALSE 23965
// begin if IsInUnit ( j ) then
23924: LD_VAR 0 2
23928: PPUSH
23929: CALL_OW 310
23933: IFFALSE 23944
// ComExit ( j ) ;
23935: LD_VAR 0 2
23939: PPUSH
23940: CALL 66337 0 1
// AddComCollect ( j , x , y ) ;
23944: LD_VAR 0 2
23948: PPUSH
23949: LD_VAR 0 6
23953: PPUSH
23954: LD_VAR 0 7
23958: PPUSH
23959: CALL_OW 177
// end ;
23963: GO 23921
23965: POP
23966: POP
// exit ;
23967: POP
23968: POP
23969: GO 24198
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23971: LD_ADDR_VAR 0 4
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_VAR 0 5
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 91
23990: PUSH
23991: LD_VAR 0 8
23995: PUSH
23996: LD_INT 8
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 34
24009: PUSH
24010: LD_INT 12
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 34
24019: PUSH
24020: LD_INT 51
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 34
24029: PUSH
24030: LD_INT 32
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 34
24039: PUSH
24040: LD_INT 89
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: ST_TO_ADDR
// if tmp then
24064: LD_VAR 0 4
24068: IFFALSE 24194
// begin for j in tmp do
24070: LD_ADDR_VAR 0 2
24074: PUSH
24075: LD_VAR 0 4
24079: PUSH
24080: FOR_IN
24081: IFFALSE 24192
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24083: LD_VAR 0 2
24087: PPUSH
24088: CALL_OW 262
24092: PUSH
24093: LD_INT 3
24095: EQUAL
24096: PUSH
24097: LD_VAR 0 2
24101: PPUSH
24102: CALL_OW 261
24106: PUSH
24107: LD_INT 20
24109: GREATER
24110: OR
24111: PUSH
24112: LD_VAR 0 2
24116: PPUSH
24117: CALL_OW 314
24121: NOT
24122: AND
24123: PUSH
24124: LD_VAR 0 2
24128: PPUSH
24129: CALL_OW 263
24133: PUSH
24134: LD_INT 1
24136: NONEQUAL
24137: PUSH
24138: LD_VAR 0 2
24142: PPUSH
24143: CALL_OW 311
24147: OR
24148: AND
24149: IFFALSE 24190
// begin ComCollect ( j , x , y ) ;
24151: LD_VAR 0 2
24155: PPUSH
24156: LD_VAR 0 6
24160: PPUSH
24161: LD_VAR 0 7
24165: PPUSH
24166: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24170: LD_VAR 0 2
24174: PPUSH
24175: LD_VAR 0 8
24179: PPUSH
24180: CALL_OW 172
// exit ;
24184: POP
24185: POP
24186: POP
24187: POP
24188: GO 24198
// end ;
24190: GO 24080
24192: POP
24193: POP
// end ; end ;
24194: GO 23569
24196: POP
24197: POP
// end ; end_of_file
24198: PPOPN 9
24200: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24201: LD_INT 0
24203: PPUSH
24204: PPUSH
24205: PPUSH
24206: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 264
24216: PUSH
24217: LD_INT 91
24219: EQUAL
24220: IFFALSE 24292
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24222: LD_INT 68
24224: PPUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL_OW 255
24234: PPUSH
24235: CALL_OW 321
24239: PUSH
24240: LD_INT 2
24242: EQUAL
24243: IFFALSE 24255
// eff := 70 else
24245: LD_ADDR_VAR 0 4
24249: PUSH
24250: LD_INT 70
24252: ST_TO_ADDR
24253: GO 24263
// eff := 30 ;
24255: LD_ADDR_VAR 0 4
24259: PUSH
24260: LD_INT 30
24262: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24263: LD_VAR 0 1
24267: PPUSH
24268: CALL_OW 250
24272: PPUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 251
24282: PPUSH
24283: LD_VAR 0 4
24287: PPUSH
24288: CALL_OW 495
// end ; end ;
24292: LD_VAR 0 2
24296: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24297: LD_INT 0
24299: PPUSH
// end ;
24300: LD_VAR 0 4
24304: RET
// export function SOS_Command ( cmd ) ; begin
24305: LD_INT 0
24307: PPUSH
// end ;
24308: LD_VAR 0 2
24312: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24313: LD_INT 0
24315: PPUSH
// end ;
24316: LD_VAR 0 6
24320: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24321: LD_INT 0
24323: PPUSH
24324: PPUSH
// if not vehicle or not factory then
24325: LD_VAR 0 1
24329: NOT
24330: PUSH
24331: LD_VAR 0 2
24335: NOT
24336: OR
24337: IFFALSE 24341
// exit ;
24339: GO 24572
// if factoryWaypoints >= factory then
24341: LD_EXP 88
24345: PUSH
24346: LD_VAR 0 2
24350: GREATEREQUAL
24351: IFFALSE 24572
// if factoryWaypoints [ factory ] then
24353: LD_EXP 88
24357: PUSH
24358: LD_VAR 0 2
24362: ARRAY
24363: IFFALSE 24572
// begin if GetControl ( vehicle ) = control_manual then
24365: LD_VAR 0 1
24369: PPUSH
24370: CALL_OW 263
24374: PUSH
24375: LD_INT 1
24377: EQUAL
24378: IFFALSE 24459
// begin driver := IsDrivenBy ( vehicle ) ;
24380: LD_ADDR_VAR 0 4
24384: PUSH
24385: LD_VAR 0 1
24389: PPUSH
24390: CALL_OW 311
24394: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24395: LD_VAR 0 4
24399: PPUSH
24400: LD_EXP 88
24404: PUSH
24405: LD_VAR 0 2
24409: ARRAY
24410: PUSH
24411: LD_INT 3
24413: ARRAY
24414: PPUSH
24415: LD_EXP 88
24419: PUSH
24420: LD_VAR 0 2
24424: ARRAY
24425: PUSH
24426: LD_INT 4
24428: ARRAY
24429: PPUSH
24430: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24434: LD_VAR 0 4
24438: PPUSH
24439: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24443: LD_VAR 0 4
24447: PPUSH
24448: LD_VAR 0 2
24452: PPUSH
24453: CALL_OW 180
// end else
24457: GO 24572
// if GetControl ( vehicle ) = control_remote then
24459: LD_VAR 0 1
24463: PPUSH
24464: CALL_OW 263
24468: PUSH
24469: LD_INT 2
24471: EQUAL
24472: IFFALSE 24533
// begin wait ( 0 0$2 ) ;
24474: LD_INT 70
24476: PPUSH
24477: CALL_OW 67
// if Connect ( vehicle ) then
24481: LD_VAR 0 1
24485: PPUSH
24486: CALL 36596 0 1
24490: IFFALSE 24531
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24492: LD_VAR 0 1
24496: PPUSH
24497: LD_EXP 88
24501: PUSH
24502: LD_VAR 0 2
24506: ARRAY
24507: PUSH
24508: LD_INT 3
24510: ARRAY
24511: PPUSH
24512: LD_EXP 88
24516: PUSH
24517: LD_VAR 0 2
24521: ARRAY
24522: PUSH
24523: LD_INT 4
24525: ARRAY
24526: PPUSH
24527: CALL_OW 171
// end else
24531: GO 24572
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24533: LD_VAR 0 1
24537: PPUSH
24538: LD_EXP 88
24542: PUSH
24543: LD_VAR 0 2
24547: ARRAY
24548: PUSH
24549: LD_INT 3
24551: ARRAY
24552: PPUSH
24553: LD_EXP 88
24557: PUSH
24558: LD_VAR 0 2
24562: ARRAY
24563: PUSH
24564: LD_INT 4
24566: ARRAY
24567: PPUSH
24568: CALL_OW 171
// end ; end ;
24572: LD_VAR 0 3
24576: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24577: LD_INT 0
24579: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24580: LD_VAR 0 1
24584: PUSH
24585: LD_INT 250
24587: EQUAL
24588: PUSH
24589: LD_VAR 0 2
24593: PPUSH
24594: CALL_OW 264
24598: PUSH
24599: LD_INT 81
24601: EQUAL
24602: AND
24603: IFFALSE 24624
// MinerPlaceMine ( unit , x , y ) ;
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_VAR 0 4
24614: PPUSH
24615: LD_VAR 0 5
24619: PPUSH
24620: CALL 27009 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24624: LD_VAR 0 1
24628: PUSH
24629: LD_INT 251
24631: EQUAL
24632: PUSH
24633: LD_VAR 0 2
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 81
24645: EQUAL
24646: AND
24647: IFFALSE 24668
// MinerDetonateMine ( unit , x , y ) ;
24649: LD_VAR 0 2
24653: PPUSH
24654: LD_VAR 0 4
24658: PPUSH
24659: LD_VAR 0 5
24663: PPUSH
24664: CALL 27284 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24668: LD_VAR 0 1
24672: PUSH
24673: LD_INT 252
24675: EQUAL
24676: PUSH
24677: LD_VAR 0 2
24681: PPUSH
24682: CALL_OW 264
24686: PUSH
24687: LD_INT 81
24689: EQUAL
24690: AND
24691: IFFALSE 24712
// MinerCreateMinefield ( unit , x , y ) ;
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 4
24702: PPUSH
24703: LD_VAR 0 5
24707: PPUSH
24708: CALL 27701 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24712: LD_VAR 0 1
24716: PUSH
24717: LD_INT 253
24719: EQUAL
24720: PUSH
24721: LD_VAR 0 2
24725: PPUSH
24726: CALL_OW 257
24730: PUSH
24731: LD_INT 5
24733: EQUAL
24734: AND
24735: IFFALSE 24756
// ComBinocular ( unit , x , y ) ;
24737: LD_VAR 0 2
24741: PPUSH
24742: LD_VAR 0 4
24746: PPUSH
24747: LD_VAR 0 5
24751: PPUSH
24752: CALL 28070 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24756: LD_VAR 0 1
24760: PUSH
24761: LD_INT 254
24763: EQUAL
24764: PUSH
24765: LD_VAR 0 2
24769: PPUSH
24770: CALL_OW 264
24774: PUSH
24775: LD_INT 99
24777: EQUAL
24778: AND
24779: PUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: CALL_OW 263
24789: PUSH
24790: LD_INT 3
24792: EQUAL
24793: AND
24794: IFFALSE 24810
// HackDestroyVehicle ( unit , selectedUnit ) ;
24796: LD_VAR 0 2
24800: PPUSH
24801: LD_VAR 0 3
24805: PPUSH
24806: CALL 26373 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24810: LD_VAR 0 1
24814: PUSH
24815: LD_INT 255
24817: EQUAL
24818: PUSH
24819: LD_VAR 0 2
24823: PPUSH
24824: CALL_OW 264
24828: PUSH
24829: LD_INT 14
24831: PUSH
24832: LD_INT 53
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: IN
24839: AND
24840: PUSH
24841: LD_VAR 0 4
24845: PPUSH
24846: LD_VAR 0 5
24850: PPUSH
24851: CALL_OW 488
24855: AND
24856: IFFALSE 24880
// CutTreeXYR ( unit , x , y , 12 ) ;
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 4
24867: PPUSH
24868: LD_VAR 0 5
24872: PPUSH
24873: LD_INT 12
24875: PPUSH
24876: CALL 24943 0 4
// if cmd = 256 then
24880: LD_VAR 0 1
24884: PUSH
24885: LD_INT 256
24887: EQUAL
24888: IFFALSE 24909
// SetFactoryWaypoint ( unit , x , y ) ;
24890: LD_VAR 0 2
24894: PPUSH
24895: LD_VAR 0 4
24899: PPUSH
24900: LD_VAR 0 5
24904: PPUSH
24905: CALL 22890 0 3
// if cmd = 257 then
24909: LD_VAR 0 1
24913: PUSH
24914: LD_INT 257
24916: EQUAL
24917: IFFALSE 24938
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24919: LD_VAR 0 2
24923: PPUSH
24924: LD_VAR 0 4
24928: PPUSH
24929: LD_VAR 0 5
24933: PPUSH
24934: CALL 23252 0 3
// end ;
24938: LD_VAR 0 6
24942: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24943: LD_INT 0
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
24952: PPUSH
24953: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24954: LD_VAR 0 1
24958: NOT
24959: PUSH
24960: LD_VAR 0 2
24964: PPUSH
24965: LD_VAR 0 3
24969: PPUSH
24970: CALL_OW 488
24974: NOT
24975: OR
24976: PUSH
24977: LD_VAR 0 4
24981: NOT
24982: OR
24983: IFFALSE 24987
// exit ;
24985: GO 25327
// list := [ ] ;
24987: LD_ADDR_VAR 0 13
24991: PUSH
24992: EMPTY
24993: ST_TO_ADDR
// if x - r < 0 then
24994: LD_VAR 0 2
24998: PUSH
24999: LD_VAR 0 4
25003: MINUS
25004: PUSH
25005: LD_INT 0
25007: LESS
25008: IFFALSE 25020
// min_x := 0 else
25010: LD_ADDR_VAR 0 7
25014: PUSH
25015: LD_INT 0
25017: ST_TO_ADDR
25018: GO 25036
// min_x := x - r ;
25020: LD_ADDR_VAR 0 7
25024: PUSH
25025: LD_VAR 0 2
25029: PUSH
25030: LD_VAR 0 4
25034: MINUS
25035: ST_TO_ADDR
// if y - r < 0 then
25036: LD_VAR 0 3
25040: PUSH
25041: LD_VAR 0 4
25045: MINUS
25046: PUSH
25047: LD_INT 0
25049: LESS
25050: IFFALSE 25062
// min_y := 0 else
25052: LD_ADDR_VAR 0 8
25056: PUSH
25057: LD_INT 0
25059: ST_TO_ADDR
25060: GO 25078
// min_y := y - r ;
25062: LD_ADDR_VAR 0 8
25066: PUSH
25067: LD_VAR 0 3
25071: PUSH
25072: LD_VAR 0 4
25076: MINUS
25077: ST_TO_ADDR
// max_x := x + r ;
25078: LD_ADDR_VAR 0 9
25082: PUSH
25083: LD_VAR 0 2
25087: PUSH
25088: LD_VAR 0 4
25092: PLUS
25093: ST_TO_ADDR
// max_y := y + r ;
25094: LD_ADDR_VAR 0 10
25098: PUSH
25099: LD_VAR 0 3
25103: PUSH
25104: LD_VAR 0 4
25108: PLUS
25109: ST_TO_ADDR
// for _x = min_x to max_x do
25110: LD_ADDR_VAR 0 11
25114: PUSH
25115: DOUBLE
25116: LD_VAR 0 7
25120: DEC
25121: ST_TO_ADDR
25122: LD_VAR 0 9
25126: PUSH
25127: FOR_TO
25128: IFFALSE 25245
// for _y = min_y to max_y do
25130: LD_ADDR_VAR 0 12
25134: PUSH
25135: DOUBLE
25136: LD_VAR 0 8
25140: DEC
25141: ST_TO_ADDR
25142: LD_VAR 0 10
25146: PUSH
25147: FOR_TO
25148: IFFALSE 25241
// begin if not ValidHex ( _x , _y ) then
25150: LD_VAR 0 11
25154: PPUSH
25155: LD_VAR 0 12
25159: PPUSH
25160: CALL_OW 488
25164: NOT
25165: IFFALSE 25169
// continue ;
25167: GO 25147
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25169: LD_VAR 0 11
25173: PPUSH
25174: LD_VAR 0 12
25178: PPUSH
25179: CALL_OW 351
25183: PUSH
25184: LD_VAR 0 11
25188: PPUSH
25189: LD_VAR 0 12
25193: PPUSH
25194: CALL_OW 554
25198: AND
25199: IFFALSE 25239
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25201: LD_ADDR_VAR 0 13
25205: PUSH
25206: LD_VAR 0 13
25210: PPUSH
25211: LD_VAR 0 13
25215: PUSH
25216: LD_INT 1
25218: PLUS
25219: PPUSH
25220: LD_VAR 0 11
25224: PUSH
25225: LD_VAR 0 12
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PPUSH
25234: CALL_OW 2
25238: ST_TO_ADDR
// end ;
25239: GO 25147
25241: POP
25242: POP
25243: GO 25127
25245: POP
25246: POP
// if not list then
25247: LD_VAR 0 13
25251: NOT
25252: IFFALSE 25256
// exit ;
25254: GO 25327
// for i in list do
25256: LD_ADDR_VAR 0 6
25260: PUSH
25261: LD_VAR 0 13
25265: PUSH
25266: FOR_IN
25267: IFFALSE 25325
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25269: LD_VAR 0 1
25273: PPUSH
25274: LD_STRING M
25276: PUSH
25277: LD_VAR 0 6
25281: PUSH
25282: LD_INT 1
25284: ARRAY
25285: PUSH
25286: LD_VAR 0 6
25290: PUSH
25291: LD_INT 2
25293: ARRAY
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: PPUSH
25319: CALL_OW 447
25323: GO 25266
25325: POP
25326: POP
// end ;
25327: LD_VAR 0 5
25331: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25332: LD_EXP 91
25336: NOT
25337: IFFALSE 25387
25339: GO 25341
25341: DISABLE
// begin initHack := true ;
25342: LD_ADDR_EXP 91
25346: PUSH
25347: LD_INT 1
25349: ST_TO_ADDR
// hackTanks := [ ] ;
25350: LD_ADDR_EXP 92
25354: PUSH
25355: EMPTY
25356: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25357: LD_ADDR_EXP 93
25361: PUSH
25362: EMPTY
25363: ST_TO_ADDR
// hackLimit := 3 ;
25364: LD_ADDR_EXP 94
25368: PUSH
25369: LD_INT 3
25371: ST_TO_ADDR
// hackDist := 12 ;
25372: LD_ADDR_EXP 95
25376: PUSH
25377: LD_INT 12
25379: ST_TO_ADDR
// hackCounter := [ ] ;
25380: LD_ADDR_EXP 96
25384: PUSH
25385: EMPTY
25386: ST_TO_ADDR
// end ;
25387: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25388: LD_EXP 91
25392: PUSH
25393: LD_INT 34
25395: PUSH
25396: LD_INT 99
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: AND
25408: IFFALSE 25661
25410: GO 25412
25412: DISABLE
25413: LD_INT 0
25415: PPUSH
25416: PPUSH
// begin enable ;
25417: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25418: LD_ADDR_VAR 0 1
25422: PUSH
25423: LD_INT 34
25425: PUSH
25426: LD_INT 99
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: PUSH
25438: FOR_IN
25439: IFFALSE 25659
// begin if not i in hackTanks then
25441: LD_VAR 0 1
25445: PUSH
25446: LD_EXP 92
25450: IN
25451: NOT
25452: IFFALSE 25535
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25454: LD_ADDR_EXP 92
25458: PUSH
25459: LD_EXP 92
25463: PPUSH
25464: LD_EXP 92
25468: PUSH
25469: LD_INT 1
25471: PLUS
25472: PPUSH
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL_OW 1
25482: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25483: LD_ADDR_EXP 93
25487: PUSH
25488: LD_EXP 93
25492: PPUSH
25493: LD_EXP 93
25497: PUSH
25498: LD_INT 1
25500: PLUS
25501: PPUSH
25502: EMPTY
25503: PPUSH
25504: CALL_OW 1
25508: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25509: LD_ADDR_EXP 96
25513: PUSH
25514: LD_EXP 96
25518: PPUSH
25519: LD_EXP 96
25523: PUSH
25524: LD_INT 1
25526: PLUS
25527: PPUSH
25528: EMPTY
25529: PPUSH
25530: CALL_OW 1
25534: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 302
25544: NOT
25545: IFFALSE 25558
// begin HackUnlinkAll ( i ) ;
25547: LD_VAR 0 1
25551: PPUSH
25552: CALL 25664 0 1
// continue ;
25556: GO 25438
// end ; HackCheckCapturedStatus ( i ) ;
25558: LD_VAR 0 1
25562: PPUSH
25563: CALL 26107 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25567: LD_ADDR_VAR 0 2
25571: PUSH
25572: LD_INT 81
25574: PUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 255
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 33
25591: PUSH
25592: LD_INT 3
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 91
25601: PUSH
25602: LD_VAR 0 1
25606: PUSH
25607: LD_EXP 95
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 50
25619: PUSH
25620: EMPTY
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: PPUSH
25629: CALL_OW 69
25633: ST_TO_ADDR
// if not tmp then
25634: LD_VAR 0 2
25638: NOT
25639: IFFALSE 25643
// continue ;
25641: GO 25438
// HackLink ( i , tmp ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_VAR 0 2
25652: PPUSH
25653: CALL 25800 0 2
// end ;
25657: GO 25438
25659: POP
25660: POP
// end ;
25661: PPOPN 2
25663: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25664: LD_INT 0
25666: PPUSH
25667: PPUSH
25668: PPUSH
// if not hack in hackTanks then
25669: LD_VAR 0 1
25673: PUSH
25674: LD_EXP 92
25678: IN
25679: NOT
25680: IFFALSE 25684
// exit ;
25682: GO 25795
// index := GetElementIndex ( hackTanks , hack ) ;
25684: LD_ADDR_VAR 0 4
25688: PUSH
25689: LD_EXP 92
25693: PPUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL 33412 0 2
25703: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25704: LD_EXP 93
25708: PUSH
25709: LD_VAR 0 4
25713: ARRAY
25714: IFFALSE 25795
// begin for i in hackTanksCaptured [ index ] do
25716: LD_ADDR_VAR 0 3
25720: PUSH
25721: LD_EXP 93
25725: PUSH
25726: LD_VAR 0 4
25730: ARRAY
25731: PUSH
25732: FOR_IN
25733: IFFALSE 25759
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25735: LD_VAR 0 3
25739: PUSH
25740: LD_INT 1
25742: ARRAY
25743: PPUSH
25744: LD_VAR 0 3
25748: PUSH
25749: LD_INT 2
25751: ARRAY
25752: PPUSH
25753: CALL_OW 235
25757: GO 25732
25759: POP
25760: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25761: LD_ADDR_EXP 93
25765: PUSH
25766: LD_EXP 93
25770: PPUSH
25771: LD_VAR 0 4
25775: PPUSH
25776: EMPTY
25777: PPUSH
25778: CALL_OW 1
25782: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25783: LD_VAR 0 1
25787: PPUSH
25788: LD_INT 0
25790: PPUSH
25791: CALL_OW 505
// end ; end ;
25795: LD_VAR 0 2
25799: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25800: LD_INT 0
25802: PPUSH
25803: PPUSH
25804: PPUSH
// if not hack in hackTanks or not vehicles then
25805: LD_VAR 0 1
25809: PUSH
25810: LD_EXP 92
25814: IN
25815: NOT
25816: PUSH
25817: LD_VAR 0 2
25821: NOT
25822: OR
25823: IFFALSE 25827
// exit ;
25825: GO 26102
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25827: LD_ADDR_VAR 0 2
25831: PUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: LD_VAR 0 2
25841: PPUSH
25842: LD_INT 1
25844: PPUSH
25845: LD_INT 1
25847: PPUSH
25848: CALL 34062 0 4
25852: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25853: LD_ADDR_VAR 0 5
25857: PUSH
25858: LD_EXP 92
25862: PPUSH
25863: LD_VAR 0 1
25867: PPUSH
25868: CALL 33412 0 2
25872: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25873: LD_EXP 93
25877: PUSH
25878: LD_VAR 0 5
25882: ARRAY
25883: PUSH
25884: LD_EXP 94
25888: LESS
25889: IFFALSE 26078
// begin for i := 1 to vehicles do
25891: LD_ADDR_VAR 0 4
25895: PUSH
25896: DOUBLE
25897: LD_INT 1
25899: DEC
25900: ST_TO_ADDR
25901: LD_VAR 0 2
25905: PUSH
25906: FOR_TO
25907: IFFALSE 26076
// begin if hackTanksCaptured [ index ] = hackLimit then
25909: LD_EXP 93
25913: PUSH
25914: LD_VAR 0 5
25918: ARRAY
25919: PUSH
25920: LD_EXP 94
25924: EQUAL
25925: IFFALSE 25929
// break ;
25927: GO 26076
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25929: LD_ADDR_EXP 96
25933: PUSH
25934: LD_EXP 96
25938: PPUSH
25939: LD_VAR 0 5
25943: PPUSH
25944: LD_EXP 96
25948: PUSH
25949: LD_VAR 0 5
25953: ARRAY
25954: PUSH
25955: LD_INT 1
25957: PLUS
25958: PPUSH
25959: CALL_OW 1
25963: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25964: LD_ADDR_EXP 93
25968: PUSH
25969: LD_EXP 93
25973: PPUSH
25974: LD_VAR 0 5
25978: PUSH
25979: LD_EXP 93
25983: PUSH
25984: LD_VAR 0 5
25988: ARRAY
25989: PUSH
25990: LD_INT 1
25992: PLUS
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PPUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_VAR 0 4
26007: ARRAY
26008: PUSH
26009: LD_VAR 0 2
26013: PUSH
26014: LD_VAR 0 4
26018: ARRAY
26019: PPUSH
26020: CALL_OW 255
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PPUSH
26029: CALL 33627 0 3
26033: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26034: LD_VAR 0 2
26038: PUSH
26039: LD_VAR 0 4
26043: ARRAY
26044: PPUSH
26045: LD_VAR 0 1
26049: PPUSH
26050: CALL_OW 255
26054: PPUSH
26055: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26059: LD_VAR 0 2
26063: PUSH
26064: LD_VAR 0 4
26068: ARRAY
26069: PPUSH
26070: CALL_OW 141
// end ;
26074: GO 25906
26076: POP
26077: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26078: LD_VAR 0 1
26082: PPUSH
26083: LD_EXP 93
26087: PUSH
26088: LD_VAR 0 5
26092: ARRAY
26093: PUSH
26094: LD_INT 0
26096: PLUS
26097: PPUSH
26098: CALL_OW 505
// end ;
26102: LD_VAR 0 3
26106: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26107: LD_INT 0
26109: PPUSH
26110: PPUSH
26111: PPUSH
26112: PPUSH
// if not hack in hackTanks then
26113: LD_VAR 0 1
26117: PUSH
26118: LD_EXP 92
26122: IN
26123: NOT
26124: IFFALSE 26128
// exit ;
26126: GO 26368
// index := GetElementIndex ( hackTanks , hack ) ;
26128: LD_ADDR_VAR 0 4
26132: PUSH
26133: LD_EXP 92
26137: PPUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL 33412 0 2
26147: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26148: LD_ADDR_VAR 0 3
26152: PUSH
26153: DOUBLE
26154: LD_EXP 93
26158: PUSH
26159: LD_VAR 0 4
26163: ARRAY
26164: INC
26165: ST_TO_ADDR
26166: LD_INT 1
26168: PUSH
26169: FOR_DOWNTO
26170: IFFALSE 26342
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26172: LD_ADDR_VAR 0 5
26176: PUSH
26177: LD_EXP 93
26181: PUSH
26182: LD_VAR 0 4
26186: ARRAY
26187: PUSH
26188: LD_VAR 0 3
26192: ARRAY
26193: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26194: LD_VAR 0 5
26198: PUSH
26199: LD_INT 1
26201: ARRAY
26202: PPUSH
26203: CALL_OW 302
26207: NOT
26208: PUSH
26209: LD_VAR 0 5
26213: PUSH
26214: LD_INT 1
26216: ARRAY
26217: PPUSH
26218: CALL_OW 255
26222: PUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 255
26232: NONEQUAL
26233: OR
26234: IFFALSE 26340
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26236: LD_VAR 0 5
26240: PUSH
26241: LD_INT 1
26243: ARRAY
26244: PPUSH
26245: CALL_OW 305
26249: PUSH
26250: LD_VAR 0 5
26254: PUSH
26255: LD_INT 1
26257: ARRAY
26258: PPUSH
26259: CALL_OW 255
26263: PUSH
26264: LD_VAR 0 1
26268: PPUSH
26269: CALL_OW 255
26273: EQUAL
26274: AND
26275: IFFALSE 26299
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26277: LD_VAR 0 5
26281: PUSH
26282: LD_INT 1
26284: ARRAY
26285: PPUSH
26286: LD_VAR 0 5
26290: PUSH
26291: LD_INT 2
26293: ARRAY
26294: PPUSH
26295: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26299: LD_ADDR_EXP 93
26303: PUSH
26304: LD_EXP 93
26308: PPUSH
26309: LD_VAR 0 4
26313: PPUSH
26314: LD_EXP 93
26318: PUSH
26319: LD_VAR 0 4
26323: ARRAY
26324: PPUSH
26325: LD_VAR 0 3
26329: PPUSH
26330: CALL_OW 3
26334: PPUSH
26335: CALL_OW 1
26339: ST_TO_ADDR
// end ; end ;
26340: GO 26169
26342: POP
26343: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26344: LD_VAR 0 1
26348: PPUSH
26349: LD_EXP 93
26353: PUSH
26354: LD_VAR 0 4
26358: ARRAY
26359: PUSH
26360: LD_INT 0
26362: PLUS
26363: PPUSH
26364: CALL_OW 505
// end ;
26368: LD_VAR 0 2
26372: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26373: LD_INT 0
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
// if not hack in hackTanks then
26379: LD_VAR 0 1
26383: PUSH
26384: LD_EXP 92
26388: IN
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26479
// index := GetElementIndex ( hackTanks , hack ) ;
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_EXP 92
26403: PPUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL 33412 0 2
26413: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26414: LD_ADDR_VAR 0 4
26418: PUSH
26419: DOUBLE
26420: LD_INT 1
26422: DEC
26423: ST_TO_ADDR
26424: LD_EXP 93
26428: PUSH
26429: LD_VAR 0 5
26433: ARRAY
26434: PUSH
26435: FOR_TO
26436: IFFALSE 26477
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26438: LD_EXP 93
26442: PUSH
26443: LD_VAR 0 5
26447: ARRAY
26448: PUSH
26449: LD_VAR 0 4
26453: ARRAY
26454: PUSH
26455: LD_INT 1
26457: ARRAY
26458: PUSH
26459: LD_VAR 0 2
26463: EQUAL
26464: IFFALSE 26475
// KillUnit ( vehicle ) ;
26466: LD_VAR 0 2
26470: PPUSH
26471: CALL_OW 66
26475: GO 26435
26477: POP
26478: POP
// end ;
26479: LD_VAR 0 3
26483: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26484: LD_EXP 97
26488: NOT
26489: IFFALSE 26524
26491: GO 26493
26493: DISABLE
// begin initMiner := true ;
26494: LD_ADDR_EXP 97
26498: PUSH
26499: LD_INT 1
26501: ST_TO_ADDR
// minersList := [ ] ;
26502: LD_ADDR_EXP 98
26506: PUSH
26507: EMPTY
26508: ST_TO_ADDR
// minerMinesList := [ ] ;
26509: LD_ADDR_EXP 99
26513: PUSH
26514: EMPTY
26515: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26516: LD_ADDR_EXP 100
26520: PUSH
26521: LD_INT 5
26523: ST_TO_ADDR
// end ;
26524: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26525: LD_EXP 97
26529: PUSH
26530: LD_INT 34
26532: PUSH
26533: LD_INT 81
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PPUSH
26540: CALL_OW 69
26544: AND
26545: IFFALSE 27006
26547: GO 26549
26549: DISABLE
26550: LD_INT 0
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
// begin enable ;
26556: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26557: LD_ADDR_VAR 0 1
26561: PUSH
26562: LD_INT 34
26564: PUSH
26565: LD_INT 81
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 69
26576: PUSH
26577: FOR_IN
26578: IFFALSE 26650
// begin if not i in minersList then
26580: LD_VAR 0 1
26584: PUSH
26585: LD_EXP 98
26589: IN
26590: NOT
26591: IFFALSE 26648
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26593: LD_ADDR_EXP 98
26597: PUSH
26598: LD_EXP 98
26602: PPUSH
26603: LD_EXP 98
26607: PUSH
26608: LD_INT 1
26610: PLUS
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 1
26621: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26622: LD_ADDR_EXP 99
26626: PUSH
26627: LD_EXP 99
26631: PPUSH
26632: LD_EXP 99
26636: PUSH
26637: LD_INT 1
26639: PLUS
26640: PPUSH
26641: EMPTY
26642: PPUSH
26643: CALL_OW 1
26647: ST_TO_ADDR
// end end ;
26648: GO 26577
26650: POP
26651: POP
// for i := minerMinesList downto 1 do
26652: LD_ADDR_VAR 0 1
26656: PUSH
26657: DOUBLE
26658: LD_EXP 99
26662: INC
26663: ST_TO_ADDR
26664: LD_INT 1
26666: PUSH
26667: FOR_DOWNTO
26668: IFFALSE 27004
// begin if IsLive ( minersList [ i ] ) then
26670: LD_EXP 98
26674: PUSH
26675: LD_VAR 0 1
26679: ARRAY
26680: PPUSH
26681: CALL_OW 300
26685: IFFALSE 26713
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26687: LD_EXP 98
26691: PUSH
26692: LD_VAR 0 1
26696: ARRAY
26697: PPUSH
26698: LD_EXP 99
26702: PUSH
26703: LD_VAR 0 1
26707: ARRAY
26708: PPUSH
26709: CALL_OW 505
// if not minerMinesList [ i ] then
26713: LD_EXP 99
26717: PUSH
26718: LD_VAR 0 1
26722: ARRAY
26723: NOT
26724: IFFALSE 26728
// continue ;
26726: GO 26667
// for j := minerMinesList [ i ] downto 1 do
26728: LD_ADDR_VAR 0 2
26732: PUSH
26733: DOUBLE
26734: LD_EXP 99
26738: PUSH
26739: LD_VAR 0 1
26743: ARRAY
26744: INC
26745: ST_TO_ADDR
26746: LD_INT 1
26748: PUSH
26749: FOR_DOWNTO
26750: IFFALSE 27000
// begin side := GetSide ( minersList [ i ] ) ;
26752: LD_ADDR_VAR 0 3
26756: PUSH
26757: LD_EXP 98
26761: PUSH
26762: LD_VAR 0 1
26766: ARRAY
26767: PPUSH
26768: CALL_OW 255
26772: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26773: LD_ADDR_VAR 0 4
26777: PUSH
26778: LD_EXP 99
26782: PUSH
26783: LD_VAR 0 1
26787: ARRAY
26788: PUSH
26789: LD_VAR 0 2
26793: ARRAY
26794: PUSH
26795: LD_INT 1
26797: ARRAY
26798: PPUSH
26799: LD_EXP 99
26803: PUSH
26804: LD_VAR 0 1
26808: ARRAY
26809: PUSH
26810: LD_VAR 0 2
26814: ARRAY
26815: PUSH
26816: LD_INT 2
26818: ARRAY
26819: PPUSH
26820: CALL_OW 428
26824: ST_TO_ADDR
// if not tmp then
26825: LD_VAR 0 4
26829: NOT
26830: IFFALSE 26834
// continue ;
26832: GO 26749
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26834: LD_VAR 0 4
26838: PUSH
26839: LD_INT 81
26841: PUSH
26842: LD_VAR 0 3
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: IN
26856: PUSH
26857: LD_EXP 99
26861: PUSH
26862: LD_VAR 0 1
26866: ARRAY
26867: PUSH
26868: LD_VAR 0 2
26872: ARRAY
26873: PUSH
26874: LD_INT 1
26876: ARRAY
26877: PPUSH
26878: LD_EXP 99
26882: PUSH
26883: LD_VAR 0 1
26887: ARRAY
26888: PUSH
26889: LD_VAR 0 2
26893: ARRAY
26894: PUSH
26895: LD_INT 2
26897: ARRAY
26898: PPUSH
26899: CALL_OW 458
26903: AND
26904: IFFALSE 26998
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26906: LD_EXP 99
26910: PUSH
26911: LD_VAR 0 1
26915: ARRAY
26916: PUSH
26917: LD_VAR 0 2
26921: ARRAY
26922: PUSH
26923: LD_INT 1
26925: ARRAY
26926: PPUSH
26927: LD_EXP 99
26931: PUSH
26932: LD_VAR 0 1
26936: ARRAY
26937: PUSH
26938: LD_VAR 0 2
26942: ARRAY
26943: PUSH
26944: LD_INT 2
26946: ARRAY
26947: PPUSH
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26957: LD_ADDR_EXP 99
26961: PUSH
26962: LD_EXP 99
26966: PPUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: LD_EXP 99
26976: PUSH
26977: LD_VAR 0 1
26981: ARRAY
26982: PPUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: CALL_OW 3
26992: PPUSH
26993: CALL_OW 1
26997: ST_TO_ADDR
// end ; end ;
26998: GO 26749
27000: POP
27001: POP
// end ;
27002: GO 26667
27004: POP
27005: POP
// end ;
27006: PPOPN 4
27008: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27009: LD_INT 0
27011: PPUSH
27012: PPUSH
// result := false ;
27013: LD_ADDR_VAR 0 4
27017: PUSH
27018: LD_INT 0
27020: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 264
27030: PUSH
27031: LD_INT 81
27033: EQUAL
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27279
// index := GetElementIndex ( minersList , unit ) ;
27039: LD_ADDR_VAR 0 5
27043: PUSH
27044: LD_EXP 98
27048: PPUSH
27049: LD_VAR 0 1
27053: PPUSH
27054: CALL 33412 0 2
27058: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27059: LD_EXP 99
27063: PUSH
27064: LD_VAR 0 5
27068: ARRAY
27069: PUSH
27070: LD_EXP 100
27074: GREATEREQUAL
27075: IFFALSE 27079
// exit ;
27077: GO 27279
// ComMoveXY ( unit , x , y ) ;
27079: LD_VAR 0 1
27083: PPUSH
27084: LD_VAR 0 2
27088: PPUSH
27089: LD_VAR 0 3
27093: PPUSH
27094: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27098: LD_INT 35
27100: PPUSH
27101: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27105: LD_VAR 0 1
27109: PPUSH
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL 64748 0 3
27124: NOT
27125: PUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 314
27135: AND
27136: IFFALSE 27140
// exit ;
27138: GO 27279
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27140: LD_VAR 0 2
27144: PPUSH
27145: LD_VAR 0 3
27149: PPUSH
27150: CALL_OW 428
27154: PUSH
27155: LD_VAR 0 1
27159: EQUAL
27160: PUSH
27161: LD_VAR 0 1
27165: PPUSH
27166: CALL_OW 314
27170: NOT
27171: AND
27172: IFFALSE 27098
// PlaySoundXY ( x , y , PlantMine ) ;
27174: LD_VAR 0 2
27178: PPUSH
27179: LD_VAR 0 3
27183: PPUSH
27184: LD_STRING PlantMine
27186: PPUSH
27187: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27191: LD_VAR 0 2
27195: PPUSH
27196: LD_VAR 0 3
27200: PPUSH
27201: LD_VAR 0 1
27205: PPUSH
27206: CALL_OW 255
27210: PPUSH
27211: LD_INT 0
27213: PPUSH
27214: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27218: LD_ADDR_EXP 99
27222: PUSH
27223: LD_EXP 99
27227: PPUSH
27228: LD_VAR 0 5
27232: PUSH
27233: LD_EXP 99
27237: PUSH
27238: LD_VAR 0 5
27242: ARRAY
27243: PUSH
27244: LD_INT 1
27246: PLUS
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PPUSH
27252: LD_VAR 0 2
27256: PUSH
27257: LD_VAR 0 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL 33627 0 3
27270: ST_TO_ADDR
// result := true ;
27271: LD_ADDR_VAR 0 4
27275: PUSH
27276: LD_INT 1
27278: ST_TO_ADDR
// end ;
27279: LD_VAR 0 4
27283: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27284: LD_INT 0
27286: PPUSH
27287: PPUSH
27288: PPUSH
// if not unit in minersList then
27289: LD_VAR 0 1
27293: PUSH
27294: LD_EXP 98
27298: IN
27299: NOT
27300: IFFALSE 27304
// exit ;
27302: GO 27696
// index := GetElementIndex ( minersList , unit ) ;
27304: LD_ADDR_VAR 0 6
27308: PUSH
27309: LD_EXP 98
27313: PPUSH
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL 33412 0 2
27323: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27324: LD_ADDR_VAR 0 5
27328: PUSH
27329: DOUBLE
27330: LD_EXP 99
27334: PUSH
27335: LD_VAR 0 6
27339: ARRAY
27340: INC
27341: ST_TO_ADDR
27342: LD_INT 1
27344: PUSH
27345: FOR_DOWNTO
27346: IFFALSE 27507
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27348: LD_EXP 99
27352: PUSH
27353: LD_VAR 0 6
27357: ARRAY
27358: PUSH
27359: LD_VAR 0 5
27363: ARRAY
27364: PUSH
27365: LD_INT 1
27367: ARRAY
27368: PUSH
27369: LD_VAR 0 2
27373: EQUAL
27374: PUSH
27375: LD_EXP 99
27379: PUSH
27380: LD_VAR 0 6
27384: ARRAY
27385: PUSH
27386: LD_VAR 0 5
27390: ARRAY
27391: PUSH
27392: LD_INT 2
27394: ARRAY
27395: PUSH
27396: LD_VAR 0 3
27400: EQUAL
27401: AND
27402: IFFALSE 27505
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27404: LD_EXP 99
27408: PUSH
27409: LD_VAR 0 6
27413: ARRAY
27414: PUSH
27415: LD_VAR 0 5
27419: ARRAY
27420: PUSH
27421: LD_INT 1
27423: ARRAY
27424: PPUSH
27425: LD_EXP 99
27429: PUSH
27430: LD_VAR 0 6
27434: ARRAY
27435: PUSH
27436: LD_VAR 0 5
27440: ARRAY
27441: PUSH
27442: LD_INT 2
27444: ARRAY
27445: PPUSH
27446: LD_VAR 0 1
27450: PPUSH
27451: CALL_OW 255
27455: PPUSH
27456: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27460: LD_ADDR_EXP 99
27464: PUSH
27465: LD_EXP 99
27469: PPUSH
27470: LD_VAR 0 6
27474: PPUSH
27475: LD_EXP 99
27479: PUSH
27480: LD_VAR 0 6
27484: ARRAY
27485: PPUSH
27486: LD_VAR 0 5
27490: PPUSH
27491: CALL_OW 3
27495: PPUSH
27496: CALL_OW 1
27500: ST_TO_ADDR
// exit ;
27501: POP
27502: POP
27503: GO 27696
// end ; end ;
27505: GO 27345
27507: POP
27508: POP
// for i := minerMinesList [ index ] downto 1 do
27509: LD_ADDR_VAR 0 5
27513: PUSH
27514: DOUBLE
27515: LD_EXP 99
27519: PUSH
27520: LD_VAR 0 6
27524: ARRAY
27525: INC
27526: ST_TO_ADDR
27527: LD_INT 1
27529: PUSH
27530: FOR_DOWNTO
27531: IFFALSE 27694
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27533: LD_EXP 99
27537: PUSH
27538: LD_VAR 0 6
27542: ARRAY
27543: PUSH
27544: LD_VAR 0 5
27548: ARRAY
27549: PUSH
27550: LD_INT 1
27552: ARRAY
27553: PPUSH
27554: LD_EXP 99
27558: PUSH
27559: LD_VAR 0 6
27563: ARRAY
27564: PUSH
27565: LD_VAR 0 5
27569: ARRAY
27570: PUSH
27571: LD_INT 2
27573: ARRAY
27574: PPUSH
27575: LD_VAR 0 2
27579: PPUSH
27580: LD_VAR 0 3
27584: PPUSH
27585: CALL_OW 298
27589: PUSH
27590: LD_INT 6
27592: LESS
27593: IFFALSE 27692
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27595: LD_EXP 99
27599: PUSH
27600: LD_VAR 0 6
27604: ARRAY
27605: PUSH
27606: LD_VAR 0 5
27610: ARRAY
27611: PUSH
27612: LD_INT 1
27614: ARRAY
27615: PPUSH
27616: LD_EXP 99
27620: PUSH
27621: LD_VAR 0 6
27625: ARRAY
27626: PUSH
27627: LD_VAR 0 5
27631: ARRAY
27632: PUSH
27633: LD_INT 2
27635: ARRAY
27636: PPUSH
27637: LD_VAR 0 1
27641: PPUSH
27642: CALL_OW 255
27646: PPUSH
27647: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27651: LD_ADDR_EXP 99
27655: PUSH
27656: LD_EXP 99
27660: PPUSH
27661: LD_VAR 0 6
27665: PPUSH
27666: LD_EXP 99
27670: PUSH
27671: LD_VAR 0 6
27675: ARRAY
27676: PPUSH
27677: LD_VAR 0 5
27681: PPUSH
27682: CALL_OW 3
27686: PPUSH
27687: CALL_OW 1
27691: ST_TO_ADDR
// end ; end ;
27692: GO 27530
27694: POP
27695: POP
// end ;
27696: LD_VAR 0 4
27700: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27701: LD_INT 0
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL_OW 264
27721: PUSH
27722: LD_INT 81
27724: EQUAL
27725: NOT
27726: PUSH
27727: LD_VAR 0 1
27731: PUSH
27732: LD_EXP 98
27736: IN
27737: NOT
27738: OR
27739: IFFALSE 27743
// exit ;
27741: GO 28065
// index := GetElementIndex ( minersList , unit ) ;
27743: LD_ADDR_VAR 0 6
27747: PUSH
27748: LD_EXP 98
27752: PPUSH
27753: LD_VAR 0 1
27757: PPUSH
27758: CALL 33412 0 2
27762: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27763: LD_ADDR_VAR 0 8
27767: PUSH
27768: LD_EXP 100
27772: PUSH
27773: LD_EXP 99
27777: PUSH
27778: LD_VAR 0 6
27782: ARRAY
27783: MINUS
27784: ST_TO_ADDR
// if not minesFreeAmount then
27785: LD_VAR 0 8
27789: NOT
27790: IFFALSE 27794
// exit ;
27792: GO 28065
// tmp := [ ] ;
27794: LD_ADDR_VAR 0 7
27798: PUSH
27799: EMPTY
27800: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27801: LD_ADDR_VAR 0 5
27805: PUSH
27806: DOUBLE
27807: LD_INT 1
27809: DEC
27810: ST_TO_ADDR
27811: LD_VAR 0 8
27815: PUSH
27816: FOR_TO
27817: IFFALSE 28012
// begin _d := rand ( 0 , 5 ) ;
27819: LD_ADDR_VAR 0 11
27823: PUSH
27824: LD_INT 0
27826: PPUSH
27827: LD_INT 5
27829: PPUSH
27830: CALL_OW 12
27834: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27835: LD_ADDR_VAR 0 12
27839: PUSH
27840: LD_INT 2
27842: PPUSH
27843: LD_INT 6
27845: PPUSH
27846: CALL_OW 12
27850: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27851: LD_ADDR_VAR 0 9
27855: PUSH
27856: LD_VAR 0 2
27860: PPUSH
27861: LD_VAR 0 11
27865: PPUSH
27866: LD_VAR 0 12
27870: PPUSH
27871: CALL_OW 272
27875: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27876: LD_ADDR_VAR 0 10
27880: PUSH
27881: LD_VAR 0 3
27885: PPUSH
27886: LD_VAR 0 11
27890: PPUSH
27891: LD_VAR 0 12
27895: PPUSH
27896: CALL_OW 273
27900: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27901: LD_VAR 0 9
27905: PPUSH
27906: LD_VAR 0 10
27910: PPUSH
27911: CALL_OW 488
27915: PUSH
27916: LD_VAR 0 9
27920: PUSH
27921: LD_VAR 0 10
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_VAR 0 7
27934: IN
27935: NOT
27936: AND
27937: PUSH
27938: LD_VAR 0 9
27942: PPUSH
27943: LD_VAR 0 10
27947: PPUSH
27948: CALL_OW 458
27952: NOT
27953: AND
27954: IFFALSE 27996
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27956: LD_ADDR_VAR 0 7
27960: PUSH
27961: LD_VAR 0 7
27965: PPUSH
27966: LD_VAR 0 7
27970: PUSH
27971: LD_INT 1
27973: PLUS
27974: PPUSH
27975: LD_VAR 0 9
27979: PUSH
27980: LD_VAR 0 10
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PPUSH
27989: CALL_OW 1
27993: ST_TO_ADDR
27994: GO 28010
// i := i - 1 ;
27996: LD_ADDR_VAR 0 5
28000: PUSH
28001: LD_VAR 0 5
28005: PUSH
28006: LD_INT 1
28008: MINUS
28009: ST_TO_ADDR
// end ;
28010: GO 27816
28012: POP
28013: POP
// for i in tmp do
28014: LD_ADDR_VAR 0 5
28018: PUSH
28019: LD_VAR 0 7
28023: PUSH
28024: FOR_IN
28025: IFFALSE 28063
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28027: LD_VAR 0 1
28031: PPUSH
28032: LD_VAR 0 5
28036: PUSH
28037: LD_INT 1
28039: ARRAY
28040: PPUSH
28041: LD_VAR 0 5
28045: PUSH
28046: LD_INT 2
28048: ARRAY
28049: PPUSH
28050: CALL 27009 0 3
28054: NOT
28055: IFFALSE 28061
// exit ;
28057: POP
28058: POP
28059: GO 28065
28061: GO 28024
28063: POP
28064: POP
// end ;
28065: LD_VAR 0 4
28069: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28070: LD_INT 0
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
// if not GetClass ( unit ) = class_sniper then
28079: LD_VAR 0 1
28083: PPUSH
28084: CALL_OW 257
28088: PUSH
28089: LD_INT 5
28091: EQUAL
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28485
// dist := 8 ;
28097: LD_ADDR_VAR 0 5
28101: PUSH
28102: LD_INT 8
28104: ST_TO_ADDR
// viewRange := 12 ;
28105: LD_ADDR_VAR 0 7
28109: PUSH
28110: LD_INT 12
28112: ST_TO_ADDR
// side := GetSide ( unit ) ;
28113: LD_ADDR_VAR 0 6
28117: PUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 255
28127: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28128: LD_INT 61
28130: PPUSH
28131: LD_VAR 0 6
28135: PPUSH
28136: CALL_OW 321
28140: PUSH
28141: LD_INT 2
28143: EQUAL
28144: IFFALSE 28154
// viewRange := 16 ;
28146: LD_ADDR_VAR 0 7
28150: PUSH
28151: LD_INT 16
28153: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28154: LD_VAR 0 1
28158: PPUSH
28159: LD_VAR 0 2
28163: PPUSH
28164: LD_VAR 0 3
28168: PPUSH
28169: CALL_OW 297
28173: PUSH
28174: LD_VAR 0 5
28178: GREATER
28179: IFFALSE 28258
// begin ComMoveXY ( unit , x , y ) ;
28181: LD_VAR 0 1
28185: PPUSH
28186: LD_VAR 0 2
28190: PPUSH
28191: LD_VAR 0 3
28195: PPUSH
28196: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28200: LD_INT 35
28202: PPUSH
28203: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28207: LD_VAR 0 1
28211: PPUSH
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_VAR 0 3
28221: PPUSH
28222: CALL 64748 0 3
28226: NOT
28227: IFFALSE 28231
// exit ;
28229: GO 28485
// until GetDistUnitXY ( unit , x , y ) < dist ;
28231: LD_VAR 0 1
28235: PPUSH
28236: LD_VAR 0 2
28240: PPUSH
28241: LD_VAR 0 3
28245: PPUSH
28246: CALL_OW 297
28250: PUSH
28251: LD_VAR 0 5
28255: LESS
28256: IFFALSE 28200
// end ; ComTurnXY ( unit , x , y ) ;
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_VAR 0 2
28267: PPUSH
28268: LD_VAR 0 3
28272: PPUSH
28273: CALL_OW 118
// wait ( 5 ) ;
28277: LD_INT 5
28279: PPUSH
28280: CALL_OW 67
// _d := GetDir ( unit ) ;
28284: LD_ADDR_VAR 0 10
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 254
28298: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28299: LD_ADDR_VAR 0 8
28303: PUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL_OW 250
28313: PPUSH
28314: LD_VAR 0 10
28318: PPUSH
28319: LD_VAR 0 5
28323: PPUSH
28324: CALL_OW 272
28328: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28329: LD_ADDR_VAR 0 9
28333: PUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 251
28343: PPUSH
28344: LD_VAR 0 10
28348: PPUSH
28349: LD_VAR 0 5
28353: PPUSH
28354: CALL_OW 273
28358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28359: LD_VAR 0 8
28363: PPUSH
28364: LD_VAR 0 9
28368: PPUSH
28369: CALL_OW 488
28373: NOT
28374: IFFALSE 28378
// exit ;
28376: GO 28485
// ComAnimCustom ( unit , 1 ) ;
28378: LD_VAR 0 1
28382: PPUSH
28383: LD_INT 1
28385: PPUSH
28386: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28390: LD_VAR 0 8
28394: PPUSH
28395: LD_VAR 0 9
28399: PPUSH
28400: LD_VAR 0 6
28404: PPUSH
28405: LD_VAR 0 7
28409: PPUSH
28410: CALL_OW 330
// repeat wait ( 1 ) ;
28414: LD_INT 1
28416: PPUSH
28417: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 316
28430: PUSH
28431: LD_VAR 0 1
28435: PPUSH
28436: CALL_OW 314
28440: OR
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 302
28451: NOT
28452: OR
28453: PUSH
28454: LD_VAR 0 1
28458: PPUSH
28459: CALL_OW 301
28463: OR
28464: IFFALSE 28414
// RemoveSeeing ( _x , _y , side ) ;
28466: LD_VAR 0 8
28470: PPUSH
28471: LD_VAR 0 9
28475: PPUSH
28476: LD_VAR 0 6
28480: PPUSH
28481: CALL_OW 331
// end ; end_of_file
28485: LD_VAR 0 4
28489: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28490: LD_INT 0
28492: PPUSH
28493: PPUSH
// if exist_mode then
28494: LD_VAR 0 2
28498: IFFALSE 28523
// unit := CreateCharacter ( prefix & ident ) else
28500: LD_ADDR_VAR 0 5
28504: PUSH
28505: LD_VAR 0 3
28509: PUSH
28510: LD_VAR 0 1
28514: STR
28515: PPUSH
28516: CALL_OW 34
28520: ST_TO_ADDR
28521: GO 28538
// unit := NewCharacter ( ident ) ;
28523: LD_ADDR_VAR 0 5
28527: PUSH
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 25
28537: ST_TO_ADDR
// result := unit ;
28538: LD_ADDR_VAR 0 4
28542: PUSH
28543: LD_VAR 0 5
28547: ST_TO_ADDR
// end ;
28548: LD_VAR 0 4
28552: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
// if not side or not nation then
28557: LD_VAR 0 1
28561: NOT
28562: PUSH
28563: LD_VAR 0 2
28567: NOT
28568: OR
28569: IFFALSE 28573
// exit ;
28571: GO 29341
// case nation of nation_american :
28573: LD_VAR 0 2
28577: PUSH
28578: LD_INT 1
28580: DOUBLE
28581: EQUAL
28582: IFTRUE 28586
28584: GO 28800
28586: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28587: LD_ADDR_VAR 0 4
28591: PUSH
28592: LD_INT 35
28594: PUSH
28595: LD_INT 45
28597: PUSH
28598: LD_INT 46
28600: PUSH
28601: LD_INT 47
28603: PUSH
28604: LD_INT 82
28606: PUSH
28607: LD_INT 83
28609: PUSH
28610: LD_INT 84
28612: PUSH
28613: LD_INT 85
28615: PUSH
28616: LD_INT 86
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: LD_INT 6
28627: PUSH
28628: LD_INT 15
28630: PUSH
28631: LD_INT 16
28633: PUSH
28634: LD_INT 7
28636: PUSH
28637: LD_INT 12
28639: PUSH
28640: LD_INT 13
28642: PUSH
28643: LD_INT 10
28645: PUSH
28646: LD_INT 14
28648: PUSH
28649: LD_INT 20
28651: PUSH
28652: LD_INT 21
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_INT 25
28660: PUSH
28661: LD_INT 32
28663: PUSH
28664: LD_INT 27
28666: PUSH
28667: LD_INT 36
28669: PUSH
28670: LD_INT 69
28672: PUSH
28673: LD_INT 39
28675: PUSH
28676: LD_INT 34
28678: PUSH
28679: LD_INT 40
28681: PUSH
28682: LD_INT 48
28684: PUSH
28685: LD_INT 49
28687: PUSH
28688: LD_INT 50
28690: PUSH
28691: LD_INT 51
28693: PUSH
28694: LD_INT 52
28696: PUSH
28697: LD_INT 53
28699: PUSH
28700: LD_INT 54
28702: PUSH
28703: LD_INT 55
28705: PUSH
28706: LD_INT 56
28708: PUSH
28709: LD_INT 57
28711: PUSH
28712: LD_INT 58
28714: PUSH
28715: LD_INT 59
28717: PUSH
28718: LD_INT 60
28720: PUSH
28721: LD_INT 61
28723: PUSH
28724: LD_INT 62
28726: PUSH
28727: LD_INT 80
28729: PUSH
28730: LD_INT 82
28732: PUSH
28733: LD_INT 83
28735: PUSH
28736: LD_INT 84
28738: PUSH
28739: LD_INT 85
28741: PUSH
28742: LD_INT 86
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
28798: GO 29265
28800: LD_INT 2
28802: DOUBLE
28803: EQUAL
28804: IFTRUE 28808
28806: GO 29034
28808: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28809: LD_ADDR_VAR 0 4
28813: PUSH
28814: LD_INT 35
28816: PUSH
28817: LD_INT 45
28819: PUSH
28820: LD_INT 46
28822: PUSH
28823: LD_INT 47
28825: PUSH
28826: LD_INT 82
28828: PUSH
28829: LD_INT 83
28831: PUSH
28832: LD_INT 84
28834: PUSH
28835: LD_INT 85
28837: PUSH
28838: LD_INT 87
28840: PUSH
28841: LD_INT 70
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 11
28849: PUSH
28850: LD_INT 3
28852: PUSH
28853: LD_INT 4
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: LD_INT 6
28861: PUSH
28862: LD_INT 15
28864: PUSH
28865: LD_INT 18
28867: PUSH
28868: LD_INT 7
28870: PUSH
28871: LD_INT 17
28873: PUSH
28874: LD_INT 8
28876: PUSH
28877: LD_INT 20
28879: PUSH
28880: LD_INT 21
28882: PUSH
28883: LD_INT 22
28885: PUSH
28886: LD_INT 72
28888: PUSH
28889: LD_INT 26
28891: PUSH
28892: LD_INT 69
28894: PUSH
28895: LD_INT 39
28897: PUSH
28898: LD_INT 40
28900: PUSH
28901: LD_INT 41
28903: PUSH
28904: LD_INT 42
28906: PUSH
28907: LD_INT 43
28909: PUSH
28910: LD_INT 48
28912: PUSH
28913: LD_INT 49
28915: PUSH
28916: LD_INT 50
28918: PUSH
28919: LD_INT 51
28921: PUSH
28922: LD_INT 52
28924: PUSH
28925: LD_INT 53
28927: PUSH
28928: LD_INT 54
28930: PUSH
28931: LD_INT 55
28933: PUSH
28934: LD_INT 56
28936: PUSH
28937: LD_INT 60
28939: PUSH
28940: LD_INT 61
28942: PUSH
28943: LD_INT 62
28945: PUSH
28946: LD_INT 66
28948: PUSH
28949: LD_INT 67
28951: PUSH
28952: LD_INT 68
28954: PUSH
28955: LD_INT 81
28957: PUSH
28958: LD_INT 82
28960: PUSH
28961: LD_INT 83
28963: PUSH
28964: LD_INT 84
28966: PUSH
28967: LD_INT 85
28969: PUSH
28970: LD_INT 87
28972: PUSH
28973: LD_INT 88
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: ST_TO_ADDR
29032: GO 29265
29034: LD_INT 3
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29042
29040: GO 29264
29042: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29043: LD_ADDR_VAR 0 4
29047: PUSH
29048: LD_INT 46
29050: PUSH
29051: LD_INT 47
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 82
29062: PUSH
29063: LD_INT 83
29065: PUSH
29066: LD_INT 84
29068: PUSH
29069: LD_INT 85
29071: PUSH
29072: LD_INT 86
29074: PUSH
29075: LD_INT 11
29077: PUSH
29078: LD_INT 9
29080: PUSH
29081: LD_INT 20
29083: PUSH
29084: LD_INT 19
29086: PUSH
29087: LD_INT 21
29089: PUSH
29090: LD_INT 24
29092: PUSH
29093: LD_INT 22
29095: PUSH
29096: LD_INT 25
29098: PUSH
29099: LD_INT 28
29101: PUSH
29102: LD_INT 29
29104: PUSH
29105: LD_INT 30
29107: PUSH
29108: LD_INT 31
29110: PUSH
29111: LD_INT 37
29113: PUSH
29114: LD_INT 38
29116: PUSH
29117: LD_INT 32
29119: PUSH
29120: LD_INT 27
29122: PUSH
29123: LD_INT 33
29125: PUSH
29126: LD_INT 69
29128: PUSH
29129: LD_INT 39
29131: PUSH
29132: LD_INT 34
29134: PUSH
29135: LD_INT 40
29137: PUSH
29138: LD_INT 71
29140: PUSH
29141: LD_INT 23
29143: PUSH
29144: LD_INT 44
29146: PUSH
29147: LD_INT 48
29149: PUSH
29150: LD_INT 49
29152: PUSH
29153: LD_INT 50
29155: PUSH
29156: LD_INT 51
29158: PUSH
29159: LD_INT 52
29161: PUSH
29162: LD_INT 53
29164: PUSH
29165: LD_INT 54
29167: PUSH
29168: LD_INT 55
29170: PUSH
29171: LD_INT 56
29173: PUSH
29174: LD_INT 57
29176: PUSH
29177: LD_INT 58
29179: PUSH
29180: LD_INT 59
29182: PUSH
29183: LD_INT 63
29185: PUSH
29186: LD_INT 64
29188: PUSH
29189: LD_INT 65
29191: PUSH
29192: LD_INT 82
29194: PUSH
29195: LD_INT 83
29197: PUSH
29198: LD_INT 84
29200: PUSH
29201: LD_INT 85
29203: PUSH
29204: LD_INT 86
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: ST_TO_ADDR
29262: GO 29265
29264: POP
// if state > - 1 and state < 3 then
29265: LD_VAR 0 3
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: GREATER
29274: PUSH
29275: LD_VAR 0 3
29279: PUSH
29280: LD_INT 3
29282: LESS
29283: AND
29284: IFFALSE 29341
// for i in result do
29286: LD_ADDR_VAR 0 5
29290: PUSH
29291: LD_VAR 0 4
29295: PUSH
29296: FOR_IN
29297: IFFALSE 29339
// if GetTech ( i , side ) <> state then
29299: LD_VAR 0 5
29303: PPUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 321
29313: PUSH
29314: LD_VAR 0 3
29318: NONEQUAL
29319: IFFALSE 29337
// result := result diff i ;
29321: LD_ADDR_VAR 0 4
29325: PUSH
29326: LD_VAR 0 4
29330: PUSH
29331: LD_VAR 0 5
29335: DIFF
29336: ST_TO_ADDR
29337: GO 29296
29339: POP
29340: POP
// end ;
29341: LD_VAR 0 4
29345: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29346: LD_INT 0
29348: PPUSH
29349: PPUSH
29350: PPUSH
// result := true ;
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_INT 1
29358: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29359: LD_ADDR_VAR 0 5
29363: PUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: CALL_OW 480
29373: ST_TO_ADDR
// if not tmp then
29374: LD_VAR 0 5
29378: NOT
29379: IFFALSE 29383
// exit ;
29381: GO 29432
// for i in tmp do
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_VAR 0 5
29392: PUSH
29393: FOR_IN
29394: IFFALSE 29430
// if GetTech ( i , side ) <> state_researched then
29396: LD_VAR 0 4
29400: PPUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: CALL_OW 321
29410: PUSH
29411: LD_INT 2
29413: NONEQUAL
29414: IFFALSE 29428
// begin result := false ;
29416: LD_ADDR_VAR 0 3
29420: PUSH
29421: LD_INT 0
29423: ST_TO_ADDR
// exit ;
29424: POP
29425: POP
29426: GO 29432
// end ;
29428: GO 29393
29430: POP
29431: POP
// end ;
29432: LD_VAR 0 3
29436: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29452: LD_VAR 0 1
29456: NOT
29457: PUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 257
29467: PUSH
29468: LD_INT 9
29470: NONEQUAL
29471: OR
29472: IFFALSE 29476
// exit ;
29474: GO 30049
// side := GetSide ( unit ) ;
29476: LD_ADDR_VAR 0 9
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 255
29490: ST_TO_ADDR
// tech_space := tech_spacanom ;
29491: LD_ADDR_VAR 0 12
29495: PUSH
29496: LD_INT 29
29498: ST_TO_ADDR
// tech_time := tech_taurad ;
29499: LD_ADDR_VAR 0 13
29503: PUSH
29504: LD_INT 28
29506: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29507: LD_ADDR_VAR 0 11
29511: PUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 310
29521: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29522: LD_VAR 0 11
29526: PPUSH
29527: CALL_OW 247
29531: PUSH
29532: LD_INT 2
29534: EQUAL
29535: IFFALSE 29539
// exit ;
29537: GO 30049
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29539: LD_ADDR_VAR 0 8
29543: PUSH
29544: LD_INT 81
29546: PUSH
29547: LD_VAR 0 9
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: LD_INT 21
29561: PUSH
29562: LD_INT 3
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 69
29581: ST_TO_ADDR
// if not tmp then
29582: LD_VAR 0 8
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 30049
// if in_unit then
29591: LD_VAR 0 11
29595: IFFALSE 29619
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29597: LD_ADDR_VAR 0 10
29601: PUSH
29602: LD_VAR 0 8
29606: PPUSH
29607: LD_VAR 0 11
29611: PPUSH
29612: CALL_OW 74
29616: ST_TO_ADDR
29617: GO 29639
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29619: LD_ADDR_VAR 0 10
29623: PUSH
29624: LD_VAR 0 8
29628: PPUSH
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 74
29638: ST_TO_ADDR
// if not enemy then
29639: LD_VAR 0 10
29643: NOT
29644: IFFALSE 29648
// exit ;
29646: GO 30049
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29648: LD_VAR 0 11
29652: PUSH
29653: LD_VAR 0 11
29657: PPUSH
29658: LD_VAR 0 10
29662: PPUSH
29663: CALL_OW 296
29667: PUSH
29668: LD_INT 13
29670: GREATER
29671: AND
29672: PUSH
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_VAR 0 10
29682: PPUSH
29683: CALL_OW 296
29687: PUSH
29688: LD_INT 12
29690: GREATER
29691: OR
29692: IFFALSE 29696
// exit ;
29694: GO 30049
// missile := [ 1 ] ;
29696: LD_ADDR_VAR 0 14
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29707: LD_VAR 0 9
29711: PPUSH
29712: LD_VAR 0 12
29716: PPUSH
29717: CALL_OW 325
29721: IFFALSE 29750
// missile := Replace ( missile , missile + 1 , 2 ) ;
29723: LD_ADDR_VAR 0 14
29727: PUSH
29728: LD_VAR 0 14
29732: PPUSH
29733: LD_VAR 0 14
29737: PUSH
29738: LD_INT 1
29740: PLUS
29741: PPUSH
29742: LD_INT 2
29744: PPUSH
29745: CALL_OW 1
29749: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29750: LD_VAR 0 9
29754: PPUSH
29755: LD_VAR 0 13
29759: PPUSH
29760: CALL_OW 325
29764: PUSH
29765: LD_VAR 0 10
29769: PPUSH
29770: CALL_OW 255
29774: PPUSH
29775: LD_VAR 0 13
29779: PPUSH
29780: CALL_OW 325
29784: NOT
29785: AND
29786: IFFALSE 29815
// missile := Replace ( missile , missile + 1 , 3 ) ;
29788: LD_ADDR_VAR 0 14
29792: PUSH
29793: LD_VAR 0 14
29797: PPUSH
29798: LD_VAR 0 14
29802: PUSH
29803: LD_INT 1
29805: PLUS
29806: PPUSH
29807: LD_INT 3
29809: PPUSH
29810: CALL_OW 1
29814: ST_TO_ADDR
// if missile < 2 then
29815: LD_VAR 0 14
29819: PUSH
29820: LD_INT 2
29822: LESS
29823: IFFALSE 29827
// exit ;
29825: GO 30049
// x := GetX ( enemy ) ;
29827: LD_ADDR_VAR 0 4
29831: PUSH
29832: LD_VAR 0 10
29836: PPUSH
29837: CALL_OW 250
29841: ST_TO_ADDR
// y := GetY ( enemy ) ;
29842: LD_ADDR_VAR 0 5
29846: PUSH
29847: LD_VAR 0 10
29851: PPUSH
29852: CALL_OW 251
29856: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29857: LD_ADDR_VAR 0 6
29861: PUSH
29862: LD_VAR 0 4
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PPUSH
29871: LD_INT 1
29873: PPUSH
29874: CALL_OW 12
29878: PLUS
29879: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29880: LD_ADDR_VAR 0 7
29884: PUSH
29885: LD_VAR 0 5
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PPUSH
29894: LD_INT 1
29896: PPUSH
29897: CALL_OW 12
29901: PLUS
29902: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29903: LD_VAR 0 6
29907: PPUSH
29908: LD_VAR 0 7
29912: PPUSH
29913: CALL_OW 488
29917: NOT
29918: IFFALSE 29940
// begin _x := x ;
29920: LD_ADDR_VAR 0 6
29924: PUSH
29925: LD_VAR 0 4
29929: ST_TO_ADDR
// _y := y ;
29930: LD_ADDR_VAR 0 7
29934: PUSH
29935: LD_VAR 0 5
29939: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29940: LD_ADDR_VAR 0 3
29944: PUSH
29945: LD_INT 1
29947: PPUSH
29948: LD_VAR 0 14
29952: PPUSH
29953: CALL_OW 12
29957: ST_TO_ADDR
// case i of 1 :
29958: LD_VAR 0 3
29962: PUSH
29963: LD_INT 1
29965: DOUBLE
29966: EQUAL
29967: IFTRUE 29971
29969: GO 29988
29971: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29972: LD_VAR 0 1
29976: PPUSH
29977: LD_VAR 0 10
29981: PPUSH
29982: CALL_OW 115
29986: GO 30049
29988: LD_INT 2
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30018
29996: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29997: LD_VAR 0 1
30001: PPUSH
30002: LD_VAR 0 6
30006: PPUSH
30007: LD_VAR 0 7
30011: PPUSH
30012: CALL_OW 153
30016: GO 30049
30018: LD_INT 3
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30048
30026: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_VAR 0 6
30036: PPUSH
30037: LD_VAR 0 7
30041: PPUSH
30042: CALL_OW 154
30046: GO 30049
30048: POP
// end ;
30049: LD_VAR 0 2
30053: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30054: LD_INT 0
30056: PPUSH
30057: PPUSH
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
// if not unit or not building then
30062: LD_VAR 0 1
30066: NOT
30067: PUSH
30068: LD_VAR 0 2
30072: NOT
30073: OR
30074: IFFALSE 30078
// exit ;
30076: GO 30236
// x := GetX ( building ) ;
30078: LD_ADDR_VAR 0 5
30082: PUSH
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 250
30092: ST_TO_ADDR
// y := GetY ( building ) ;
30093: LD_ADDR_VAR 0 6
30097: PUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: CALL_OW 251
30107: ST_TO_ADDR
// for i = 0 to 5 do
30108: LD_ADDR_VAR 0 4
30112: PUSH
30113: DOUBLE
30114: LD_INT 0
30116: DEC
30117: ST_TO_ADDR
30118: LD_INT 5
30120: PUSH
30121: FOR_TO
30122: IFFALSE 30234
// begin _x := ShiftX ( x , i , 3 ) ;
30124: LD_ADDR_VAR 0 7
30128: PUSH
30129: LD_VAR 0 5
30133: PPUSH
30134: LD_VAR 0 4
30138: PPUSH
30139: LD_INT 3
30141: PPUSH
30142: CALL_OW 272
30146: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30147: LD_ADDR_VAR 0 8
30151: PUSH
30152: LD_VAR 0 6
30156: PPUSH
30157: LD_VAR 0 4
30161: PPUSH
30162: LD_INT 3
30164: PPUSH
30165: CALL_OW 273
30169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30170: LD_VAR 0 7
30174: PPUSH
30175: LD_VAR 0 8
30179: PPUSH
30180: CALL_OW 488
30184: NOT
30185: IFFALSE 30189
// continue ;
30187: GO 30121
// if HexInfo ( _x , _y ) = 0 then
30189: LD_VAR 0 7
30193: PPUSH
30194: LD_VAR 0 8
30198: PPUSH
30199: CALL_OW 428
30203: PUSH
30204: LD_INT 0
30206: EQUAL
30207: IFFALSE 30232
// begin ComMoveXY ( unit , _x , _y ) ;
30209: LD_VAR 0 1
30213: PPUSH
30214: LD_VAR 0 7
30218: PPUSH
30219: LD_VAR 0 8
30223: PPUSH
30224: CALL_OW 111
// exit ;
30228: POP
30229: POP
30230: GO 30236
// end ; end ;
30232: GO 30121
30234: POP
30235: POP
// end ;
30236: LD_VAR 0 3
30240: RET
// export function ScanBase ( side , base_area ) ; begin
30241: LD_INT 0
30243: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30244: LD_ADDR_VAR 0 3
30248: PUSH
30249: LD_VAR 0 2
30253: PPUSH
30254: LD_INT 81
30256: PUSH
30257: LD_VAR 0 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 70
30270: ST_TO_ADDR
// end ;
30271: LD_VAR 0 3
30275: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
// result := false ;
30282: LD_ADDR_VAR 0 2
30286: PUSH
30287: LD_INT 0
30289: ST_TO_ADDR
// side := GetSide ( unit ) ;
30290: LD_ADDR_VAR 0 3
30294: PUSH
30295: LD_VAR 0 1
30299: PPUSH
30300: CALL_OW 255
30304: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30305: LD_ADDR_VAR 0 4
30309: PUSH
30310: LD_VAR 0 1
30314: PPUSH
30315: CALL_OW 248
30319: ST_TO_ADDR
// case nat of 1 :
30320: LD_VAR 0 4
30324: PUSH
30325: LD_INT 1
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30344
30333: POP
// tech := tech_lassight ; 2 :
30334: LD_ADDR_VAR 0 5
30338: PUSH
30339: LD_INT 12
30341: ST_TO_ADDR
30342: GO 30383
30344: LD_INT 2
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30363
30352: POP
// tech := tech_mortar ; 3 :
30353: LD_ADDR_VAR 0 5
30357: PUSH
30358: LD_INT 41
30360: ST_TO_ADDR
30361: GO 30383
30363: LD_INT 3
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30382
30371: POP
// tech := tech_bazooka ; end ;
30372: LD_ADDR_VAR 0 5
30376: PUSH
30377: LD_INT 44
30379: ST_TO_ADDR
30380: GO 30383
30382: POP
// if Researched ( side , tech ) then
30383: LD_VAR 0 3
30387: PPUSH
30388: LD_VAR 0 5
30392: PPUSH
30393: CALL_OW 325
30397: IFFALSE 30424
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30399: LD_ADDR_VAR 0 2
30403: PUSH
30404: LD_INT 5
30406: PUSH
30407: LD_INT 8
30409: PUSH
30410: LD_INT 9
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: PUSH
30418: LD_VAR 0 4
30422: ARRAY
30423: ST_TO_ADDR
// end ;
30424: LD_VAR 0 2
30428: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30429: LD_INT 0
30431: PPUSH
30432: PPUSH
30433: PPUSH
// if not mines then
30434: LD_VAR 0 2
30438: NOT
30439: IFFALSE 30443
// exit ;
30441: GO 30587
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30443: LD_ADDR_VAR 0 5
30447: PUSH
30448: LD_INT 81
30450: PUSH
30451: LD_VAR 0 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 21
30465: PUSH
30466: LD_INT 3
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 69
30485: ST_TO_ADDR
// for i in mines do
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: LD_VAR 0 2
30495: PUSH
30496: FOR_IN
30497: IFFALSE 30585
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30499: LD_VAR 0 4
30503: PUSH
30504: LD_INT 1
30506: ARRAY
30507: PPUSH
30508: LD_VAR 0 4
30512: PUSH
30513: LD_INT 2
30515: ARRAY
30516: PPUSH
30517: CALL_OW 458
30521: NOT
30522: IFFALSE 30526
// continue ;
30524: GO 30496
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30526: LD_VAR 0 4
30530: PUSH
30531: LD_INT 1
30533: ARRAY
30534: PPUSH
30535: LD_VAR 0 4
30539: PUSH
30540: LD_INT 2
30542: ARRAY
30543: PPUSH
30544: CALL_OW 428
30548: PUSH
30549: LD_VAR 0 5
30553: IN
30554: IFFALSE 30583
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30556: LD_VAR 0 4
30560: PUSH
30561: LD_INT 1
30563: ARRAY
30564: PPUSH
30565: LD_VAR 0 4
30569: PUSH
30570: LD_INT 2
30572: ARRAY
30573: PPUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 456
// end ;
30583: GO 30496
30585: POP
30586: POP
// end ;
30587: LD_VAR 0 3
30591: RET
// export function Count ( array ) ; var i ; begin
30592: LD_INT 0
30594: PPUSH
30595: PPUSH
// result := 0 ;
30596: LD_ADDR_VAR 0 2
30600: PUSH
30601: LD_INT 0
30603: ST_TO_ADDR
// for i in array do
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_VAR 0 1
30613: PUSH
30614: FOR_IN
30615: IFFALSE 30639
// if i then
30617: LD_VAR 0 3
30621: IFFALSE 30637
// result := result + 1 ;
30623: LD_ADDR_VAR 0 2
30627: PUSH
30628: LD_VAR 0 2
30632: PUSH
30633: LD_INT 1
30635: PLUS
30636: ST_TO_ADDR
30637: GO 30614
30639: POP
30640: POP
// end ;
30641: LD_VAR 0 2
30645: RET
// export function IsEmpty ( building ) ; begin
30646: LD_INT 0
30648: PPUSH
// if not building then
30649: LD_VAR 0 1
30653: NOT
30654: IFFALSE 30658
// exit ;
30656: GO 30701
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30658: LD_ADDR_VAR 0 2
30662: PUSH
30663: LD_VAR 0 1
30667: PUSH
30668: LD_INT 22
30670: PUSH
30671: LD_VAR 0 1
30675: PPUSH
30676: CALL_OW 255
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 58
30687: PUSH
30688: EMPTY
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PPUSH
30695: CALL_OW 69
30699: IN
30700: ST_TO_ADDR
// end ;
30701: LD_VAR 0 2
30705: RET
// export function IsNotFull ( building ) ; var places ; begin
30706: LD_INT 0
30708: PPUSH
30709: PPUSH
// if not building then
30710: LD_VAR 0 1
30714: NOT
30715: IFFALSE 30719
// exit ;
30717: GO 30890
// result := false ;
30719: LD_ADDR_VAR 0 2
30723: PUSH
30724: LD_INT 0
30726: ST_TO_ADDR
// places := 0 ;
30727: LD_ADDR_VAR 0 3
30731: PUSH
30732: LD_INT 0
30734: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 266
30744: PUSH
30745: LD_INT 0
30747: DOUBLE
30748: EQUAL
30749: IFTRUE 30807
30751: LD_INT 1
30753: DOUBLE
30754: EQUAL
30755: IFTRUE 30807
30757: LD_INT 6
30759: DOUBLE
30760: EQUAL
30761: IFTRUE 30807
30763: LD_INT 7
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30807
30769: LD_INT 8
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30807
30775: LD_INT 4
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30807
30781: LD_INT 5
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30807
30787: LD_INT 2
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30807
30793: LD_INT 3
30795: DOUBLE
30796: EQUAL
30797: IFTRUE 30807
30799: LD_INT 35
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30818
30807: POP
// places := 6 ; b_bunker , b_breastwork :
30808: LD_ADDR_VAR 0 3
30812: PUSH
30813: LD_INT 6
30815: ST_TO_ADDR
30816: GO 30863
30818: LD_INT 32
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30832
30824: LD_INT 31
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30843
30832: POP
// places := 1 ; b_control_tower :
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 1
30840: ST_TO_ADDR
30841: GO 30863
30843: LD_INT 36
30845: DOUBLE
30846: EQUAL
30847: IFTRUE 30851
30849: GO 30862
30851: POP
// places := 3 ; end ;
30852: LD_ADDR_VAR 0 3
30856: PUSH
30857: LD_INT 3
30859: ST_TO_ADDR
30860: GO 30863
30862: POP
// if places then
30863: LD_VAR 0 3
30867: IFFALSE 30890
// result := UnitsInside ( building ) < places ;
30869: LD_ADDR_VAR 0 2
30873: PUSH
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL_OW 313
30883: PUSH
30884: LD_VAR 0 3
30888: LESS
30889: ST_TO_ADDR
// end ;
30890: LD_VAR 0 2
30894: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30895: LD_INT 0
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
// tmp := [ ] ;
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: EMPTY
30907: ST_TO_ADDR
// list := [ ] ;
30908: LD_ADDR_VAR 0 5
30912: PUSH
30913: EMPTY
30914: ST_TO_ADDR
// for i = 16 to 25 do
30915: LD_ADDR_VAR 0 4
30919: PUSH
30920: DOUBLE
30921: LD_INT 16
30923: DEC
30924: ST_TO_ADDR
30925: LD_INT 25
30927: PUSH
30928: FOR_TO
30929: IFFALSE 31002
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30931: LD_ADDR_VAR 0 3
30935: PUSH
30936: LD_VAR 0 3
30940: PUSH
30941: LD_INT 22
30943: PUSH
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 255
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 91
30960: PUSH
30961: LD_VAR 0 1
30965: PUSH
30966: LD_INT 6
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 30
30976: PUSH
30977: LD_VAR 0 4
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: PPUSH
30994: CALL_OW 69
30998: ADD
30999: ST_TO_ADDR
31000: GO 30928
31002: POP
31003: POP
// for i = 1 to tmp do
31004: LD_ADDR_VAR 0 4
31008: PUSH
31009: DOUBLE
31010: LD_INT 1
31012: DEC
31013: ST_TO_ADDR
31014: LD_VAR 0 3
31018: PUSH
31019: FOR_TO
31020: IFFALSE 31108
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31022: LD_ADDR_VAR 0 5
31026: PUSH
31027: LD_VAR 0 5
31031: PUSH
31032: LD_VAR 0 3
31036: PUSH
31037: LD_VAR 0 4
31041: ARRAY
31042: PPUSH
31043: CALL_OW 266
31047: PUSH
31048: LD_VAR 0 3
31052: PUSH
31053: LD_VAR 0 4
31057: ARRAY
31058: PPUSH
31059: CALL_OW 250
31063: PUSH
31064: LD_VAR 0 3
31068: PUSH
31069: LD_VAR 0 4
31073: ARRAY
31074: PPUSH
31075: CALL_OW 251
31079: PUSH
31080: LD_VAR 0 3
31084: PUSH
31085: LD_VAR 0 4
31089: ARRAY
31090: PPUSH
31091: CALL_OW 254
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: ADD
31105: ST_TO_ADDR
31106: GO 31019
31108: POP
31109: POP
// result := list ;
31110: LD_ADDR_VAR 0 2
31114: PUSH
31115: LD_VAR 0 5
31119: ST_TO_ADDR
// end ;
31120: LD_VAR 0 2
31124: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31125: LD_INT 0
31127: PPUSH
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
31132: PPUSH
31133: PPUSH
// if not factory then
31134: LD_VAR 0 1
31138: NOT
31139: IFFALSE 31143
// exit ;
31141: GO 31736
// if control = control_apeman then
31143: LD_VAR 0 4
31147: PUSH
31148: LD_INT 5
31150: EQUAL
31151: IFFALSE 31260
// begin tmp := UnitsInside ( factory ) ;
31153: LD_ADDR_VAR 0 8
31157: PUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 313
31167: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31168: LD_VAR 0 8
31172: PPUSH
31173: LD_INT 25
31175: PUSH
31176: LD_INT 12
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PPUSH
31183: CALL_OW 72
31187: NOT
31188: IFFALSE 31198
// control := control_manual ;
31190: LD_ADDR_VAR 0 4
31194: PUSH
31195: LD_INT 1
31197: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31198: LD_ADDR_VAR 0 8
31202: PUSH
31203: LD_VAR 0 1
31207: PPUSH
31208: CALL 30895 0 1
31212: ST_TO_ADDR
// if tmp then
31213: LD_VAR 0 8
31217: IFFALSE 31260
// begin for i in tmp do
31219: LD_ADDR_VAR 0 7
31223: PUSH
31224: LD_VAR 0 8
31228: PUSH
31229: FOR_IN
31230: IFFALSE 31258
// if i [ 1 ] = b_ext_radio then
31232: LD_VAR 0 7
31236: PUSH
31237: LD_INT 1
31239: ARRAY
31240: PUSH
31241: LD_INT 22
31243: EQUAL
31244: IFFALSE 31256
// begin control := control_remote ;
31246: LD_ADDR_VAR 0 4
31250: PUSH
31251: LD_INT 2
31253: ST_TO_ADDR
// break ;
31254: GO 31258
// end ;
31256: GO 31229
31258: POP
31259: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31260: LD_VAR 0 1
31264: PPUSH
31265: LD_VAR 0 2
31269: PPUSH
31270: LD_VAR 0 3
31274: PPUSH
31275: LD_VAR 0 4
31279: PPUSH
31280: LD_VAR 0 5
31284: PPUSH
31285: CALL_OW 448
31289: IFFALSE 31324
// begin result := [ chassis , engine , control , weapon ] ;
31291: LD_ADDR_VAR 0 6
31295: PUSH
31296: LD_VAR 0 2
31300: PUSH
31301: LD_VAR 0 3
31305: PUSH
31306: LD_VAR 0 4
31310: PUSH
31311: LD_VAR 0 5
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: ST_TO_ADDR
// exit ;
31322: GO 31736
// end ; _chassis := AvailableChassisList ( factory ) ;
31324: LD_ADDR_VAR 0 9
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 475
31338: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31339: LD_ADDR_VAR 0 11
31343: PUSH
31344: LD_VAR 0 1
31348: PPUSH
31349: CALL_OW 476
31353: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31354: LD_ADDR_VAR 0 12
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL_OW 477
31368: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31369: LD_ADDR_VAR 0 10
31373: PUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL_OW 478
31383: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31384: LD_VAR 0 9
31388: NOT
31389: PUSH
31390: LD_VAR 0 11
31394: NOT
31395: OR
31396: PUSH
31397: LD_VAR 0 12
31401: NOT
31402: OR
31403: PUSH
31404: LD_VAR 0 10
31408: NOT
31409: OR
31410: IFFALSE 31445
// begin result := [ chassis , engine , control , weapon ] ;
31412: LD_ADDR_VAR 0 6
31416: PUSH
31417: LD_VAR 0 2
31421: PUSH
31422: LD_VAR 0 3
31426: PUSH
31427: LD_VAR 0 4
31431: PUSH
31432: LD_VAR 0 5
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: ST_TO_ADDR
// exit ;
31443: GO 31736
// end ; if not chassis in _chassis then
31445: LD_VAR 0 2
31449: PUSH
31450: LD_VAR 0 9
31454: IN
31455: NOT
31456: IFFALSE 31482
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31458: LD_ADDR_VAR 0 2
31462: PUSH
31463: LD_VAR 0 9
31467: PUSH
31468: LD_INT 1
31470: PPUSH
31471: LD_VAR 0 9
31475: PPUSH
31476: CALL_OW 12
31480: ARRAY
31481: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31482: LD_VAR 0 2
31486: PPUSH
31487: LD_VAR 0 3
31491: PPUSH
31492: CALL 31741 0 2
31496: NOT
31497: IFFALSE 31556
// repeat engine := _engine [ 1 ] ;
31499: LD_ADDR_VAR 0 3
31503: PUSH
31504: LD_VAR 0 11
31508: PUSH
31509: LD_INT 1
31511: ARRAY
31512: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31513: LD_ADDR_VAR 0 11
31517: PUSH
31518: LD_VAR 0 11
31522: PPUSH
31523: LD_INT 1
31525: PPUSH
31526: CALL_OW 3
31530: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31531: LD_VAR 0 2
31535: PPUSH
31536: LD_VAR 0 3
31540: PPUSH
31541: CALL 31741 0 2
31545: PUSH
31546: LD_VAR 0 11
31550: PUSH
31551: EMPTY
31552: EQUAL
31553: OR
31554: IFFALSE 31499
// if not control in _control then
31556: LD_VAR 0 4
31560: PUSH
31561: LD_VAR 0 12
31565: IN
31566: NOT
31567: IFFALSE 31593
// control := _control [ rand ( 1 , _control ) ] ;
31569: LD_ADDR_VAR 0 4
31573: PUSH
31574: LD_VAR 0 12
31578: PUSH
31579: LD_INT 1
31581: PPUSH
31582: LD_VAR 0 12
31586: PPUSH
31587: CALL_OW 12
31591: ARRAY
31592: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31593: LD_VAR 0 2
31597: PPUSH
31598: LD_VAR 0 5
31602: PPUSH
31603: CALL 31961 0 2
31607: NOT
31608: IFFALSE 31667
// repeat weapon := _weapon [ 1 ] ;
31610: LD_ADDR_VAR 0 5
31614: PUSH
31615: LD_VAR 0 10
31619: PUSH
31620: LD_INT 1
31622: ARRAY
31623: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31624: LD_ADDR_VAR 0 10
31628: PUSH
31629: LD_VAR 0 10
31633: PPUSH
31634: LD_INT 1
31636: PPUSH
31637: CALL_OW 3
31641: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31642: LD_VAR 0 2
31646: PPUSH
31647: LD_VAR 0 5
31651: PPUSH
31652: CALL 31961 0 2
31656: PUSH
31657: LD_VAR 0 10
31661: PUSH
31662: EMPTY
31663: EQUAL
31664: OR
31665: IFFALSE 31610
// result := [ ] ;
31667: LD_ADDR_VAR 0 6
31671: PUSH
31672: EMPTY
31673: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31674: LD_VAR 0 1
31678: PPUSH
31679: LD_VAR 0 2
31683: PPUSH
31684: LD_VAR 0 3
31688: PPUSH
31689: LD_VAR 0 4
31693: PPUSH
31694: LD_VAR 0 5
31698: PPUSH
31699: CALL_OW 448
31703: IFFALSE 31736
// result := [ chassis , engine , control , weapon ] ;
31705: LD_ADDR_VAR 0 6
31709: PUSH
31710: LD_VAR 0 2
31714: PUSH
31715: LD_VAR 0 3
31719: PUSH
31720: LD_VAR 0 4
31724: PUSH
31725: LD_VAR 0 5
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// end ;
31736: LD_VAR 0 6
31740: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31741: LD_INT 0
31743: PPUSH
// if not chassis or not engine then
31744: LD_VAR 0 1
31748: NOT
31749: PUSH
31750: LD_VAR 0 2
31754: NOT
31755: OR
31756: IFFALSE 31760
// exit ;
31758: GO 31956
// case engine of engine_solar :
31760: LD_VAR 0 2
31764: PUSH
31765: LD_INT 2
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31811
31773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31774: LD_ADDR_VAR 0 3
31778: PUSH
31779: LD_INT 11
31781: PUSH
31782: LD_INT 12
31784: PUSH
31785: LD_INT 13
31787: PUSH
31788: LD_INT 14
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
31809: GO 31940
31811: LD_INT 1
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31881
31819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31820: LD_ADDR_VAR 0 3
31824: PUSH
31825: LD_INT 11
31827: PUSH
31828: LD_INT 12
31830: PUSH
31831: LD_INT 13
31833: PUSH
31834: LD_INT 14
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 23
31857: PUSH
31858: LD_INT 22
31860: PUSH
31861: LD_INT 24
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: ST_TO_ADDR
31879: GO 31940
31881: LD_INT 3
31883: DOUBLE
31884: EQUAL
31885: IFTRUE 31889
31887: GO 31939
31889: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31890: LD_ADDR_VAR 0 3
31894: PUSH
31895: LD_INT 13
31897: PUSH
31898: LD_INT 14
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 3
31906: PUSH
31907: LD_INT 4
31909: PUSH
31910: LD_INT 5
31912: PUSH
31913: LD_INT 21
31915: PUSH
31916: LD_INT 22
31918: PUSH
31919: LD_INT 23
31921: PUSH
31922: LD_INT 24
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
31937: GO 31940
31939: POP
// result := ( chassis in result ) ;
31940: LD_ADDR_VAR 0 3
31944: PUSH
31945: LD_VAR 0 1
31949: PUSH
31950: LD_VAR 0 3
31954: IN
31955: ST_TO_ADDR
// end ;
31956: LD_VAR 0 3
31960: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31961: LD_INT 0
31963: PPUSH
// if not chassis or not weapon then
31964: LD_VAR 0 1
31968: NOT
31969: PUSH
31970: LD_VAR 0 2
31974: NOT
31975: OR
31976: IFFALSE 31980
// exit ;
31978: GO 33040
// case weapon of us_machine_gun :
31980: LD_VAR 0 2
31984: PUSH
31985: LD_INT 2
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32023
31993: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31994: LD_ADDR_VAR 0 3
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: LD_INT 4
32010: PUSH
32011: LD_INT 5
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
32021: GO 33024
32023: LD_INT 3
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 32061
32031: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32032: LD_ADDR_VAR 0 3
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: LD_INT 5
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: ST_TO_ADDR
32059: GO 33024
32061: LD_INT 11
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32099
32069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32070: LD_ADDR_VAR 0 3
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: LD_INT 4
32086: PUSH
32087: LD_INT 5
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
32097: GO 33024
32099: LD_INT 4
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32133
32107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: LD_INT 4
32121: PUSH
32122: LD_INT 5
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: ST_TO_ADDR
32131: GO 33024
32133: LD_INT 5
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32141
32139: GO 32167
32141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 33024
32167: LD_INT 9
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32201
32175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: LD_INT 4
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
32199: GO 33024
32201: LD_INT 7
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32235
32209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: LD_INT 4
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
32233: GO 33024
32235: LD_INT 12
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32269
32243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: LD_INT 4
32257: PUSH
32258: LD_INT 5
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
32267: GO 33024
32269: LD_INT 13
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32303
32277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32278: LD_ADDR_VAR 0 3
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: LD_INT 4
32291: PUSH
32292: LD_INT 5
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
32301: GO 33024
32303: LD_INT 14
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32329
32311: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_INT 4
32319: PUSH
32320: LD_INT 5
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: ST_TO_ADDR
32327: GO 33024
32329: LD_INT 6
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32355
32337: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32338: LD_ADDR_VAR 0 3
32342: PUSH
32343: LD_INT 4
32345: PUSH
32346: LD_INT 5
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: ST_TO_ADDR
32353: GO 33024
32355: LD_INT 10
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32381
32363: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32364: LD_ADDR_VAR 0 3
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 33024
32381: LD_INT 22
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32415
32389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 11
32397: PUSH
32398: LD_INT 12
32400: PUSH
32401: LD_INT 13
32403: PUSH
32404: LD_INT 14
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
32413: GO 33024
32415: LD_INT 23
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32423
32421: GO 32449
32423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: LD_INT 11
32431: PUSH
32432: LD_INT 12
32434: PUSH
32435: LD_INT 13
32437: PUSH
32438: LD_INT 14
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: ST_TO_ADDR
32447: GO 33024
32449: LD_INT 24
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32457
32455: GO 32483
32457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32458: LD_ADDR_VAR 0 3
32462: PUSH
32463: LD_INT 11
32465: PUSH
32466: LD_INT 12
32468: PUSH
32469: LD_INT 13
32471: PUSH
32472: LD_INT 14
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
32481: GO 33024
32483: LD_INT 30
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32517
32491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32492: LD_ADDR_VAR 0 3
32496: PUSH
32497: LD_INT 11
32499: PUSH
32500: LD_INT 12
32502: PUSH
32503: LD_INT 13
32505: PUSH
32506: LD_INT 14
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
32515: GO 33024
32517: LD_INT 25
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32543
32525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_INT 13
32533: PUSH
32534: LD_INT 14
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: ST_TO_ADDR
32541: GO 33024
32543: LD_INT 27
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32551
32549: GO 32569
32551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32552: LD_ADDR_VAR 0 3
32556: PUSH
32557: LD_INT 13
32559: PUSH
32560: LD_INT 14
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: ST_TO_ADDR
32567: GO 33024
32569: LD_INT 92
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32603
32577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: LD_INT 11
32585: PUSH
32586: LD_INT 12
32588: PUSH
32589: LD_INT 13
32591: PUSH
32592: LD_INT 14
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
32601: GO 33024
32603: LD_INT 28
32605: DOUBLE
32606: EQUAL
32607: IFTRUE 32611
32609: GO 32629
32611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32612: LD_ADDR_VAR 0 3
32616: PUSH
32617: LD_INT 13
32619: PUSH
32620: LD_INT 14
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: ST_TO_ADDR
32627: GO 33024
32629: LD_INT 29
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32655
32637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 13
32645: PUSH
32646: LD_INT 14
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 33024
32655: LD_INT 31
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32681
32663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 13
32671: PUSH
32672: LD_INT 14
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: ST_TO_ADDR
32679: GO 33024
32681: LD_INT 26
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32707
32689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_INT 13
32697: PUSH
32698: LD_INT 14
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: ST_TO_ADDR
32705: GO 33024
32707: LD_INT 42
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32715
32713: GO 32741
32715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32716: LD_ADDR_VAR 0 3
32720: PUSH
32721: LD_INT 21
32723: PUSH
32724: LD_INT 22
32726: PUSH
32727: LD_INT 23
32729: PUSH
32730: LD_INT 24
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: ST_TO_ADDR
32739: GO 33024
32741: LD_INT 43
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32749
32747: GO 32775
32749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: LD_INT 21
32757: PUSH
32758: LD_INT 22
32760: PUSH
32761: LD_INT 23
32763: PUSH
32764: LD_INT 24
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: ST_TO_ADDR
32773: GO 33024
32775: LD_INT 44
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32809
32783: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_INT 21
32791: PUSH
32792: LD_INT 22
32794: PUSH
32795: LD_INT 23
32797: PUSH
32798: LD_INT 24
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
32807: GO 33024
32809: LD_INT 45
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32843
32817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_INT 21
32825: PUSH
32826: LD_INT 22
32828: PUSH
32829: LD_INT 23
32831: PUSH
32832: LD_INT 24
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
32841: GO 33024
32843: LD_INT 49
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32877
32851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_INT 21
32859: PUSH
32860: LD_INT 22
32862: PUSH
32863: LD_INT 23
32865: PUSH
32866: LD_INT 24
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
32875: GO 33024
32877: LD_INT 51
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 32911
32885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32886: LD_ADDR_VAR 0 3
32890: PUSH
32891: LD_INT 21
32893: PUSH
32894: LD_INT 22
32896: PUSH
32897: LD_INT 23
32899: PUSH
32900: LD_INT 24
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
32909: GO 33024
32911: LD_INT 52
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 32945
32919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32920: LD_ADDR_VAR 0 3
32924: PUSH
32925: LD_INT 21
32927: PUSH
32928: LD_INT 22
32930: PUSH
32931: LD_INT 23
32933: PUSH
32934: LD_INT 24
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: ST_TO_ADDR
32943: GO 33024
32945: LD_INT 53
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 32971
32953: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32954: LD_ADDR_VAR 0 3
32958: PUSH
32959: LD_INT 23
32961: PUSH
32962: LD_INT 24
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: ST_TO_ADDR
32969: GO 33024
32971: LD_INT 46
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 32997
32979: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32980: LD_ADDR_VAR 0 3
32984: PUSH
32985: LD_INT 23
32987: PUSH
32988: LD_INT 24
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: ST_TO_ADDR
32995: GO 33024
32997: LD_INT 47
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33023
33005: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_INT 23
33013: PUSH
33014: LD_INT 24
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: ST_TO_ADDR
33021: GO 33024
33023: POP
// result := ( chassis in result ) ;
33024: LD_ADDR_VAR 0 3
33028: PUSH
33029: LD_VAR 0 1
33033: PUSH
33034: LD_VAR 0 3
33038: IN
33039: ST_TO_ADDR
// end ;
33040: LD_VAR 0 3
33044: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33045: LD_INT 0
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
// result := array ;
33054: LD_ADDR_VAR 0 5
33058: PUSH
33059: LD_VAR 0 1
33063: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33064: LD_VAR 0 1
33068: NOT
33069: PUSH
33070: LD_VAR 0 2
33074: NOT
33075: OR
33076: PUSH
33077: LD_VAR 0 3
33081: NOT
33082: OR
33083: PUSH
33084: LD_VAR 0 2
33088: PUSH
33089: LD_VAR 0 1
33093: GREATER
33094: OR
33095: PUSH
33096: LD_VAR 0 3
33100: PUSH
33101: LD_VAR 0 1
33105: GREATER
33106: OR
33107: IFFALSE 33111
// exit ;
33109: GO 33407
// if direction then
33111: LD_VAR 0 4
33115: IFFALSE 33179
// begin d := 1 ;
33117: LD_ADDR_VAR 0 9
33121: PUSH
33122: LD_INT 1
33124: ST_TO_ADDR
// if i_from > i_to then
33125: LD_VAR 0 2
33129: PUSH
33130: LD_VAR 0 3
33134: GREATER
33135: IFFALSE 33161
// length := ( array - i_from ) + i_to else
33137: LD_ADDR_VAR 0 11
33141: PUSH
33142: LD_VAR 0 1
33146: PUSH
33147: LD_VAR 0 2
33151: MINUS
33152: PUSH
33153: LD_VAR 0 3
33157: PLUS
33158: ST_TO_ADDR
33159: GO 33177
// length := i_to - i_from ;
33161: LD_ADDR_VAR 0 11
33165: PUSH
33166: LD_VAR 0 3
33170: PUSH
33171: LD_VAR 0 2
33175: MINUS
33176: ST_TO_ADDR
// end else
33177: GO 33240
// begin d := - 1 ;
33179: LD_ADDR_VAR 0 9
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: ST_TO_ADDR
// if i_from > i_to then
33188: LD_VAR 0 2
33192: PUSH
33193: LD_VAR 0 3
33197: GREATER
33198: IFFALSE 33218
// length := i_from - i_to else
33200: LD_ADDR_VAR 0 11
33204: PUSH
33205: LD_VAR 0 2
33209: PUSH
33210: LD_VAR 0 3
33214: MINUS
33215: ST_TO_ADDR
33216: GO 33240
// length := ( array - i_to ) + i_from ;
33218: LD_ADDR_VAR 0 11
33222: PUSH
33223: LD_VAR 0 1
33227: PUSH
33228: LD_VAR 0 3
33232: MINUS
33233: PUSH
33234: LD_VAR 0 2
33238: PLUS
33239: ST_TO_ADDR
// end ; if not length then
33240: LD_VAR 0 11
33244: NOT
33245: IFFALSE 33249
// exit ;
33247: GO 33407
// tmp := array ;
33249: LD_ADDR_VAR 0 10
33253: PUSH
33254: LD_VAR 0 1
33258: ST_TO_ADDR
// for i = 1 to length do
33259: LD_ADDR_VAR 0 6
33263: PUSH
33264: DOUBLE
33265: LD_INT 1
33267: DEC
33268: ST_TO_ADDR
33269: LD_VAR 0 11
33273: PUSH
33274: FOR_TO
33275: IFFALSE 33395
// begin for j = 1 to array do
33277: LD_ADDR_VAR 0 7
33281: PUSH
33282: DOUBLE
33283: LD_INT 1
33285: DEC
33286: ST_TO_ADDR
33287: LD_VAR 0 1
33291: PUSH
33292: FOR_TO
33293: IFFALSE 33381
// begin k := j + d ;
33295: LD_ADDR_VAR 0 8
33299: PUSH
33300: LD_VAR 0 7
33304: PUSH
33305: LD_VAR 0 9
33309: PLUS
33310: ST_TO_ADDR
// if k > array then
33311: LD_VAR 0 8
33315: PUSH
33316: LD_VAR 0 1
33320: GREATER
33321: IFFALSE 33331
// k := 1 ;
33323: LD_ADDR_VAR 0 8
33327: PUSH
33328: LD_INT 1
33330: ST_TO_ADDR
// if not k then
33331: LD_VAR 0 8
33335: NOT
33336: IFFALSE 33348
// k := array ;
33338: LD_ADDR_VAR 0 8
33342: PUSH
33343: LD_VAR 0 1
33347: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33348: LD_ADDR_VAR 0 10
33352: PUSH
33353: LD_VAR 0 10
33357: PPUSH
33358: LD_VAR 0 8
33362: PPUSH
33363: LD_VAR 0 1
33367: PUSH
33368: LD_VAR 0 7
33372: ARRAY
33373: PPUSH
33374: CALL_OW 1
33378: ST_TO_ADDR
// end ;
33379: GO 33292
33381: POP
33382: POP
// array := tmp ;
33383: LD_ADDR_VAR 0 1
33387: PUSH
33388: LD_VAR 0 10
33392: ST_TO_ADDR
// end ;
33393: GO 33274
33395: POP
33396: POP
// result := array ;
33397: LD_ADDR_VAR 0 5
33401: PUSH
33402: LD_VAR 0 1
33406: ST_TO_ADDR
// end ;
33407: LD_VAR 0 5
33411: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33412: LD_INT 0
33414: PPUSH
33415: PPUSH
// result := 0 ;
33416: LD_ADDR_VAR 0 3
33420: PUSH
33421: LD_INT 0
33423: ST_TO_ADDR
// if not array or not value in array then
33424: LD_VAR 0 1
33428: NOT
33429: PUSH
33430: LD_VAR 0 2
33434: PUSH
33435: LD_VAR 0 1
33439: IN
33440: NOT
33441: OR
33442: IFFALSE 33446
// exit ;
33444: GO 33500
// for i = 1 to array do
33446: LD_ADDR_VAR 0 4
33450: PUSH
33451: DOUBLE
33452: LD_INT 1
33454: DEC
33455: ST_TO_ADDR
33456: LD_VAR 0 1
33460: PUSH
33461: FOR_TO
33462: IFFALSE 33498
// if value = array [ i ] then
33464: LD_VAR 0 2
33468: PUSH
33469: LD_VAR 0 1
33473: PUSH
33474: LD_VAR 0 4
33478: ARRAY
33479: EQUAL
33480: IFFALSE 33496
// begin result := i ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_VAR 0 4
33491: ST_TO_ADDR
// exit ;
33492: POP
33493: POP
33494: GO 33500
// end ;
33496: GO 33461
33498: POP
33499: POP
// end ;
33500: LD_VAR 0 3
33504: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33505: LD_INT 0
33507: PPUSH
// vc_chassis := chassis ;
33508: LD_ADDR_OWVAR 37
33512: PUSH
33513: LD_VAR 0 1
33517: ST_TO_ADDR
// vc_engine := engine ;
33518: LD_ADDR_OWVAR 39
33522: PUSH
33523: LD_VAR 0 2
33527: ST_TO_ADDR
// vc_control := control ;
33528: LD_ADDR_OWVAR 38
33532: PUSH
33533: LD_VAR 0 3
33537: ST_TO_ADDR
// vc_weapon := weapon ;
33538: LD_ADDR_OWVAR 40
33542: PUSH
33543: LD_VAR 0 4
33547: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33548: LD_ADDR_OWVAR 41
33552: PUSH
33553: LD_VAR 0 5
33557: ST_TO_ADDR
// end ;
33558: LD_VAR 0 6
33562: RET
// export function WantPlant ( unit ) ; var task ; begin
33563: LD_INT 0
33565: PPUSH
33566: PPUSH
// result := false ;
33567: LD_ADDR_VAR 0 2
33571: PUSH
33572: LD_INT 0
33574: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 437
33589: ST_TO_ADDR
// if task then
33590: LD_VAR 0 3
33594: IFFALSE 33622
// if task [ 1 ] [ 1 ] = p then
33596: LD_VAR 0 3
33600: PUSH
33601: LD_INT 1
33603: ARRAY
33604: PUSH
33605: LD_INT 1
33607: ARRAY
33608: PUSH
33609: LD_STRING p
33611: EQUAL
33612: IFFALSE 33622
// result := true ;
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: LD_INT 1
33621: ST_TO_ADDR
// end ;
33622: LD_VAR 0 2
33626: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
// if pos < 1 then
33633: LD_VAR 0 2
33637: PUSH
33638: LD_INT 1
33640: LESS
33641: IFFALSE 33645
// exit ;
33643: GO 33948
// if pos = 1 then
33645: LD_VAR 0 2
33649: PUSH
33650: LD_INT 1
33652: EQUAL
33653: IFFALSE 33686
// result := Replace ( arr , pos [ 1 ] , value ) else
33655: LD_ADDR_VAR 0 4
33659: PUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: LD_VAR 0 2
33669: PUSH
33670: LD_INT 1
33672: ARRAY
33673: PPUSH
33674: LD_VAR 0 3
33678: PPUSH
33679: CALL_OW 1
33683: ST_TO_ADDR
33684: GO 33948
// begin tmp := arr ;
33686: LD_ADDR_VAR 0 6
33690: PUSH
33691: LD_VAR 0 1
33695: ST_TO_ADDR
// s_arr := [ tmp ] ;
33696: LD_ADDR_VAR 0 7
33700: PUSH
33701: LD_VAR 0 6
33705: PUSH
33706: EMPTY
33707: LIST
33708: ST_TO_ADDR
// for i = 1 to pos - 1 do
33709: LD_ADDR_VAR 0 5
33713: PUSH
33714: DOUBLE
33715: LD_INT 1
33717: DEC
33718: ST_TO_ADDR
33719: LD_VAR 0 2
33723: PUSH
33724: LD_INT 1
33726: MINUS
33727: PUSH
33728: FOR_TO
33729: IFFALSE 33774
// begin tmp := tmp [ pos [ i ] ] ;
33731: LD_ADDR_VAR 0 6
33735: PUSH
33736: LD_VAR 0 6
33740: PUSH
33741: LD_VAR 0 2
33745: PUSH
33746: LD_VAR 0 5
33750: ARRAY
33751: ARRAY
33752: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33753: LD_ADDR_VAR 0 7
33757: PUSH
33758: LD_VAR 0 7
33762: PUSH
33763: LD_VAR 0 6
33767: PUSH
33768: EMPTY
33769: LIST
33770: ADD
33771: ST_TO_ADDR
// end ;
33772: GO 33728
33774: POP
33775: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33776: LD_ADDR_VAR 0 6
33780: PUSH
33781: LD_VAR 0 6
33785: PPUSH
33786: LD_VAR 0 2
33790: PUSH
33791: LD_VAR 0 2
33795: ARRAY
33796: PPUSH
33797: LD_VAR 0 3
33801: PPUSH
33802: CALL_OW 1
33806: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33807: LD_ADDR_VAR 0 7
33811: PUSH
33812: LD_VAR 0 7
33816: PPUSH
33817: LD_VAR 0 7
33821: PPUSH
33822: LD_VAR 0 6
33826: PPUSH
33827: CALL_OW 1
33831: ST_TO_ADDR
// for i = s_arr downto 2 do
33832: LD_ADDR_VAR 0 5
33836: PUSH
33837: DOUBLE
33838: LD_VAR 0 7
33842: INC
33843: ST_TO_ADDR
33844: LD_INT 2
33846: PUSH
33847: FOR_DOWNTO
33848: IFFALSE 33932
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33850: LD_ADDR_VAR 0 6
33854: PUSH
33855: LD_VAR 0 7
33859: PUSH
33860: LD_VAR 0 5
33864: PUSH
33865: LD_INT 1
33867: MINUS
33868: ARRAY
33869: PPUSH
33870: LD_VAR 0 2
33874: PUSH
33875: LD_VAR 0 5
33879: PUSH
33880: LD_INT 1
33882: MINUS
33883: ARRAY
33884: PPUSH
33885: LD_VAR 0 7
33889: PUSH
33890: LD_VAR 0 5
33894: ARRAY
33895: PPUSH
33896: CALL_OW 1
33900: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33901: LD_ADDR_VAR 0 7
33905: PUSH
33906: LD_VAR 0 7
33910: PPUSH
33911: LD_VAR 0 5
33915: PUSH
33916: LD_INT 1
33918: MINUS
33919: PPUSH
33920: LD_VAR 0 6
33924: PPUSH
33925: CALL_OW 1
33929: ST_TO_ADDR
// end ;
33930: GO 33847
33932: POP
33933: POP
// result := s_arr [ 1 ] ;
33934: LD_ADDR_VAR 0 4
33938: PUSH
33939: LD_VAR 0 7
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: ST_TO_ADDR
// end ; end ;
33948: LD_VAR 0 4
33952: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33953: LD_INT 0
33955: PPUSH
33956: PPUSH
// if not list then
33957: LD_VAR 0 1
33961: NOT
33962: IFFALSE 33966
// exit ;
33964: GO 34057
// i := list [ pos1 ] ;
33966: LD_ADDR_VAR 0 5
33970: PUSH
33971: LD_VAR 0 1
33975: PUSH
33976: LD_VAR 0 2
33980: ARRAY
33981: ST_TO_ADDR
// if not i then
33982: LD_VAR 0 5
33986: NOT
33987: IFFALSE 33991
// exit ;
33989: GO 34057
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33991: LD_ADDR_VAR 0 1
33995: PUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: LD_VAR 0 2
34005: PPUSH
34006: LD_VAR 0 1
34010: PUSH
34011: LD_VAR 0 3
34015: ARRAY
34016: PPUSH
34017: CALL_OW 1
34021: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34022: LD_ADDR_VAR 0 1
34026: PUSH
34027: LD_VAR 0 1
34031: PPUSH
34032: LD_VAR 0 3
34036: PPUSH
34037: LD_VAR 0 5
34041: PPUSH
34042: CALL_OW 1
34046: ST_TO_ADDR
// result := list ;
34047: LD_ADDR_VAR 0 4
34051: PUSH
34052: LD_VAR 0 1
34056: ST_TO_ADDR
// end ;
34057: LD_VAR 0 4
34061: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34062: LD_INT 0
34064: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34065: LD_ADDR_VAR 0 5
34069: PUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 250
34079: PPUSH
34080: LD_VAR 0 1
34084: PPUSH
34085: CALL_OW 251
34089: PPUSH
34090: LD_VAR 0 2
34094: PPUSH
34095: LD_VAR 0 3
34099: PPUSH
34100: LD_VAR 0 4
34104: PPUSH
34105: CALL 34115 0 5
34109: ST_TO_ADDR
// end ;
34110: LD_VAR 0 5
34114: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34115: LD_INT 0
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
// if not list then
34121: LD_VAR 0 3
34125: NOT
34126: IFFALSE 34130
// exit ;
34128: GO 34518
// result := [ ] ;
34130: LD_ADDR_VAR 0 6
34134: PUSH
34135: EMPTY
34136: ST_TO_ADDR
// for i in list do
34137: LD_ADDR_VAR 0 7
34141: PUSH
34142: LD_VAR 0 3
34146: PUSH
34147: FOR_IN
34148: IFFALSE 34350
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34150: LD_ADDR_VAR 0 9
34154: PUSH
34155: LD_VAR 0 7
34159: PPUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: LD_VAR 0 2
34169: PPUSH
34170: CALL_OW 297
34174: ST_TO_ADDR
// if not result then
34175: LD_VAR 0 6
34179: NOT
34180: IFFALSE 34206
// result := [ [ i , tmp ] ] else
34182: LD_ADDR_VAR 0 6
34186: PUSH
34187: LD_VAR 0 7
34191: PUSH
34192: LD_VAR 0 9
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: ST_TO_ADDR
34204: GO 34348
// begin if result [ result ] [ 2 ] < tmp then
34206: LD_VAR 0 6
34210: PUSH
34211: LD_VAR 0 6
34215: ARRAY
34216: PUSH
34217: LD_INT 2
34219: ARRAY
34220: PUSH
34221: LD_VAR 0 9
34225: LESS
34226: IFFALSE 34268
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34228: LD_ADDR_VAR 0 6
34232: PUSH
34233: LD_VAR 0 6
34237: PPUSH
34238: LD_VAR 0 6
34242: PUSH
34243: LD_INT 1
34245: PLUS
34246: PPUSH
34247: LD_VAR 0 7
34251: PUSH
34252: LD_VAR 0 9
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PPUSH
34261: CALL_OW 2
34265: ST_TO_ADDR
34266: GO 34348
// for j = 1 to result do
34268: LD_ADDR_VAR 0 8
34272: PUSH
34273: DOUBLE
34274: LD_INT 1
34276: DEC
34277: ST_TO_ADDR
34278: LD_VAR 0 6
34282: PUSH
34283: FOR_TO
34284: IFFALSE 34346
// begin if tmp < result [ j ] [ 2 ] then
34286: LD_VAR 0 9
34290: PUSH
34291: LD_VAR 0 6
34295: PUSH
34296: LD_VAR 0 8
34300: ARRAY
34301: PUSH
34302: LD_INT 2
34304: ARRAY
34305: LESS
34306: IFFALSE 34344
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34308: LD_ADDR_VAR 0 6
34312: PUSH
34313: LD_VAR 0 6
34317: PPUSH
34318: LD_VAR 0 8
34322: PPUSH
34323: LD_VAR 0 7
34327: PUSH
34328: LD_VAR 0 9
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PPUSH
34337: CALL_OW 2
34341: ST_TO_ADDR
// break ;
34342: GO 34346
// end ; end ;
34344: GO 34283
34346: POP
34347: POP
// end ; end ;
34348: GO 34147
34350: POP
34351: POP
// if result and not asc then
34352: LD_VAR 0 6
34356: PUSH
34357: LD_VAR 0 4
34361: NOT
34362: AND
34363: IFFALSE 34438
// begin tmp := result ;
34365: LD_ADDR_VAR 0 9
34369: PUSH
34370: LD_VAR 0 6
34374: ST_TO_ADDR
// for i = tmp downto 1 do
34375: LD_ADDR_VAR 0 7
34379: PUSH
34380: DOUBLE
34381: LD_VAR 0 9
34385: INC
34386: ST_TO_ADDR
34387: LD_INT 1
34389: PUSH
34390: FOR_DOWNTO
34391: IFFALSE 34436
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34393: LD_ADDR_VAR 0 6
34397: PUSH
34398: LD_VAR 0 6
34402: PPUSH
34403: LD_VAR 0 9
34407: PUSH
34408: LD_VAR 0 7
34412: MINUS
34413: PUSH
34414: LD_INT 1
34416: PLUS
34417: PPUSH
34418: LD_VAR 0 9
34422: PUSH
34423: LD_VAR 0 7
34427: ARRAY
34428: PPUSH
34429: CALL_OW 1
34433: ST_TO_ADDR
34434: GO 34390
34436: POP
34437: POP
// end ; tmp := [ ] ;
34438: LD_ADDR_VAR 0 9
34442: PUSH
34443: EMPTY
34444: ST_TO_ADDR
// if mode then
34445: LD_VAR 0 5
34449: IFFALSE 34518
// begin for i = 1 to result do
34451: LD_ADDR_VAR 0 7
34455: PUSH
34456: DOUBLE
34457: LD_INT 1
34459: DEC
34460: ST_TO_ADDR
34461: LD_VAR 0 6
34465: PUSH
34466: FOR_TO
34467: IFFALSE 34506
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_VAR 0 9
34478: PPUSH
34479: LD_VAR 0 7
34483: PPUSH
34484: LD_VAR 0 6
34488: PUSH
34489: LD_VAR 0 7
34493: ARRAY
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: PPUSH
34499: CALL_OW 1
34503: ST_TO_ADDR
34504: GO 34466
34506: POP
34507: POP
// result := tmp ;
34508: LD_ADDR_VAR 0 6
34512: PUSH
34513: LD_VAR 0 9
34517: ST_TO_ADDR
// end ; end ;
34518: LD_VAR 0 6
34522: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34523: LD_INT 0
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34531: LD_ADDR_VAR 0 5
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: ST_TO_ADDR
// if not x or not y then
34553: LD_VAR 0 2
34557: NOT
34558: PUSH
34559: LD_VAR 0 3
34563: NOT
34564: OR
34565: IFFALSE 34569
// exit ;
34567: GO 36219
// if not range then
34569: LD_VAR 0 4
34573: NOT
34574: IFFALSE 34584
// range := 10 ;
34576: LD_ADDR_VAR 0 4
34580: PUSH
34581: LD_INT 10
34583: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34584: LD_ADDR_VAR 0 8
34588: PUSH
34589: LD_INT 81
34591: PUSH
34592: LD_VAR 0 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 92
34603: PUSH
34604: LD_VAR 0 2
34608: PUSH
34609: LD_VAR 0 3
34613: PUSH
34614: LD_VAR 0 4
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 3
34627: PUSH
34628: LD_INT 21
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 69
34651: ST_TO_ADDR
// if not tmp then
34652: LD_VAR 0 8
34656: NOT
34657: IFFALSE 34661
// exit ;
34659: GO 36219
// for i in tmp do
34661: LD_ADDR_VAR 0 6
34665: PUSH
34666: LD_VAR 0 8
34670: PUSH
34671: FOR_IN
34672: IFFALSE 36194
// begin points := [ 0 , 0 , 0 ] ;
34674: LD_ADDR_VAR 0 9
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: ST_TO_ADDR
// bpoints := 1 ;
34693: LD_ADDR_VAR 0 10
34697: PUSH
34698: LD_INT 1
34700: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34701: LD_VAR 0 6
34705: PPUSH
34706: CALL_OW 247
34710: PUSH
34711: LD_INT 1
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 35297
34719: POP
// begin if GetClass ( i ) = 1 then
34720: LD_VAR 0 6
34724: PPUSH
34725: CALL_OW 257
34729: PUSH
34730: LD_INT 1
34732: EQUAL
34733: IFFALSE 34754
// points := [ 10 , 5 , 3 ] ;
34735: LD_ADDR_VAR 0 9
34739: PUSH
34740: LD_INT 10
34742: PUSH
34743: LD_INT 5
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34754: LD_VAR 0 6
34758: PPUSH
34759: CALL_OW 257
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: LD_INT 4
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: IN
34778: IFFALSE 34799
// points := [ 3 , 2 , 1 ] ;
34780: LD_ADDR_VAR 0 9
34784: PUSH
34785: LD_INT 3
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34799: LD_VAR 0 6
34803: PPUSH
34804: CALL_OW 257
34808: PUSH
34809: LD_INT 5
34811: EQUAL
34812: IFFALSE 34833
// points := [ 130 , 5 , 2 ] ;
34814: LD_ADDR_VAR 0 9
34818: PUSH
34819: LD_INT 130
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34833: LD_VAR 0 6
34837: PPUSH
34838: CALL_OW 257
34842: PUSH
34843: LD_INT 8
34845: EQUAL
34846: IFFALSE 34867
// points := [ 35 , 35 , 30 ] ;
34848: LD_ADDR_VAR 0 9
34852: PUSH
34853: LD_INT 35
34855: PUSH
34856: LD_INT 35
34858: PUSH
34859: LD_INT 30
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34867: LD_VAR 0 6
34871: PPUSH
34872: CALL_OW 257
34876: PUSH
34877: LD_INT 9
34879: EQUAL
34880: IFFALSE 34901
// points := [ 20 , 55 , 40 ] ;
34882: LD_ADDR_VAR 0 9
34886: PUSH
34887: LD_INT 20
34889: PUSH
34890: LD_INT 55
34892: PUSH
34893: LD_INT 40
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34901: LD_VAR 0 6
34905: PPUSH
34906: CALL_OW 257
34910: PUSH
34911: LD_INT 12
34913: PUSH
34914: LD_INT 16
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: IN
34921: IFFALSE 34942
// points := [ 5 , 3 , 2 ] ;
34923: LD_ADDR_VAR 0 9
34927: PUSH
34928: LD_INT 5
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34942: LD_VAR 0 6
34946: PPUSH
34947: CALL_OW 257
34951: PUSH
34952: LD_INT 17
34954: EQUAL
34955: IFFALSE 34976
// points := [ 100 , 50 , 75 ] ;
34957: LD_ADDR_VAR 0 9
34961: PUSH
34962: LD_INT 100
34964: PUSH
34965: LD_INT 50
34967: PUSH
34968: LD_INT 75
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34976: LD_VAR 0 6
34980: PPUSH
34981: CALL_OW 257
34985: PUSH
34986: LD_INT 15
34988: EQUAL
34989: IFFALSE 35010
// points := [ 10 , 5 , 3 ] ;
34991: LD_ADDR_VAR 0 9
34995: PUSH
34996: LD_INT 10
34998: PUSH
34999: LD_INT 5
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35010: LD_VAR 0 6
35014: PPUSH
35015: CALL_OW 257
35019: PUSH
35020: LD_INT 14
35022: EQUAL
35023: IFFALSE 35044
// points := [ 10 , 0 , 0 ] ;
35025: LD_ADDR_VAR 0 9
35029: PUSH
35030: LD_INT 10
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35044: LD_VAR 0 6
35048: PPUSH
35049: CALL_OW 257
35053: PUSH
35054: LD_INT 11
35056: EQUAL
35057: IFFALSE 35078
// points := [ 30 , 10 , 5 ] ;
35059: LD_ADDR_VAR 0 9
35063: PUSH
35064: LD_INT 30
35066: PUSH
35067: LD_INT 10
35069: PUSH
35070: LD_INT 5
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35078: LD_VAR 0 1
35082: PPUSH
35083: LD_INT 5
35085: PPUSH
35086: CALL_OW 321
35090: PUSH
35091: LD_INT 2
35093: EQUAL
35094: IFFALSE 35111
// bpoints := bpoints * 1.8 ;
35096: LD_ADDR_VAR 0 10
35100: PUSH
35101: LD_VAR 0 10
35105: PUSH
35106: LD_REAL  1.80000000000000E+0000
35109: MUL
35110: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35111: LD_VAR 0 6
35115: PPUSH
35116: CALL_OW 257
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: IN
35139: PUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: LD_INT 51
35147: PPUSH
35148: CALL_OW 321
35152: PUSH
35153: LD_INT 2
35155: EQUAL
35156: AND
35157: IFFALSE 35174
// bpoints := bpoints * 1.2 ;
35159: LD_ADDR_VAR 0 10
35163: PUSH
35164: LD_VAR 0 10
35168: PUSH
35169: LD_REAL  1.20000000000000E+0000
35172: MUL
35173: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35174: LD_VAR 0 6
35178: PPUSH
35179: CALL_OW 257
35183: PUSH
35184: LD_INT 5
35186: PUSH
35187: LD_INT 7
35189: PUSH
35190: LD_INT 9
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: IN
35198: PUSH
35199: LD_VAR 0 1
35203: PPUSH
35204: LD_INT 52
35206: PPUSH
35207: CALL_OW 321
35211: PUSH
35212: LD_INT 2
35214: EQUAL
35215: AND
35216: IFFALSE 35233
// bpoints := bpoints * 1.5 ;
35218: LD_ADDR_VAR 0 10
35222: PUSH
35223: LD_VAR 0 10
35227: PUSH
35228: LD_REAL  1.50000000000000E+0000
35231: MUL
35232: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35233: LD_VAR 0 1
35237: PPUSH
35238: LD_INT 66
35240: PPUSH
35241: CALL_OW 321
35245: PUSH
35246: LD_INT 2
35248: EQUAL
35249: IFFALSE 35266
// bpoints := bpoints * 1.1 ;
35251: LD_ADDR_VAR 0 10
35255: PUSH
35256: LD_VAR 0 10
35260: PUSH
35261: LD_REAL  1.10000000000000E+0000
35264: MUL
35265: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35266: LD_ADDR_VAR 0 10
35270: PUSH
35271: LD_VAR 0 10
35275: PUSH
35276: LD_VAR 0 6
35280: PPUSH
35281: LD_INT 1
35283: PPUSH
35284: CALL_OW 259
35288: PUSH
35289: LD_REAL  1.15000000000000E+0000
35292: MUL
35293: MUL
35294: ST_TO_ADDR
// end ; unit_vehicle :
35295: GO 36123
35297: LD_INT 2
35299: DOUBLE
35300: EQUAL
35301: IFTRUE 35305
35303: GO 36111
35305: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35306: LD_VAR 0 6
35310: PPUSH
35311: CALL_OW 264
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: LD_INT 42
35321: PUSH
35322: LD_INT 24
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: IN
35330: IFFALSE 35351
// points := [ 25 , 5 , 3 ] ;
35332: LD_ADDR_VAR 0 9
35336: PUSH
35337: LD_INT 25
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35351: LD_VAR 0 6
35355: PPUSH
35356: CALL_OW 264
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: LD_INT 43
35366: PUSH
35367: LD_INT 25
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: IN
35375: IFFALSE 35396
// points := [ 40 , 15 , 5 ] ;
35377: LD_ADDR_VAR 0 9
35381: PUSH
35382: LD_INT 40
35384: PUSH
35385: LD_INT 15
35387: PUSH
35388: LD_INT 5
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35396: LD_VAR 0 6
35400: PPUSH
35401: CALL_OW 264
35405: PUSH
35406: LD_INT 3
35408: PUSH
35409: LD_INT 23
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: IN
35416: IFFALSE 35437
// points := [ 7 , 25 , 8 ] ;
35418: LD_ADDR_VAR 0 9
35422: PUSH
35423: LD_INT 7
35425: PUSH
35426: LD_INT 25
35428: PUSH
35429: LD_INT 8
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35437: LD_VAR 0 6
35441: PPUSH
35442: CALL_OW 264
35446: PUSH
35447: LD_INT 5
35449: PUSH
35450: LD_INT 27
35452: PUSH
35453: LD_INT 44
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: IN
35461: IFFALSE 35482
// points := [ 14 , 50 , 16 ] ;
35463: LD_ADDR_VAR 0 9
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: LD_INT 50
35473: PUSH
35474: LD_INT 16
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35482: LD_VAR 0 6
35486: PPUSH
35487: CALL_OW 264
35491: PUSH
35492: LD_INT 6
35494: PUSH
35495: LD_INT 46
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: IN
35502: IFFALSE 35523
// points := [ 32 , 120 , 70 ] ;
35504: LD_ADDR_VAR 0 9
35508: PUSH
35509: LD_INT 32
35511: PUSH
35512: LD_INT 120
35514: PUSH
35515: LD_INT 70
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35523: LD_VAR 0 6
35527: PPUSH
35528: CALL_OW 264
35532: PUSH
35533: LD_INT 7
35535: PUSH
35536: LD_INT 28
35538: PUSH
35539: LD_INT 45
35541: PUSH
35542: LD_INT 92
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: IN
35551: IFFALSE 35572
// points := [ 35 , 20 , 45 ] ;
35553: LD_ADDR_VAR 0 9
35557: PUSH
35558: LD_INT 35
35560: PUSH
35561: LD_INT 20
35563: PUSH
35564: LD_INT 45
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35572: LD_VAR 0 6
35576: PPUSH
35577: CALL_OW 264
35581: PUSH
35582: LD_INT 47
35584: PUSH
35585: EMPTY
35586: LIST
35587: IN
35588: IFFALSE 35609
// points := [ 67 , 45 , 75 ] ;
35590: LD_ADDR_VAR 0 9
35594: PUSH
35595: LD_INT 67
35597: PUSH
35598: LD_INT 45
35600: PUSH
35601: LD_INT 75
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35609: LD_VAR 0 6
35613: PPUSH
35614: CALL_OW 264
35618: PUSH
35619: LD_INT 26
35621: PUSH
35622: EMPTY
35623: LIST
35624: IN
35625: IFFALSE 35646
// points := [ 120 , 30 , 80 ] ;
35627: LD_ADDR_VAR 0 9
35631: PUSH
35632: LD_INT 120
35634: PUSH
35635: LD_INT 30
35637: PUSH
35638: LD_INT 80
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35646: LD_VAR 0 6
35650: PPUSH
35651: CALL_OW 264
35655: PUSH
35656: LD_INT 22
35658: PUSH
35659: EMPTY
35660: LIST
35661: IN
35662: IFFALSE 35683
// points := [ 40 , 1 , 1 ] ;
35664: LD_ADDR_VAR 0 9
35668: PUSH
35669: LD_INT 40
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35683: LD_VAR 0 6
35687: PPUSH
35688: CALL_OW 264
35692: PUSH
35693: LD_INT 29
35695: PUSH
35696: EMPTY
35697: LIST
35698: IN
35699: IFFALSE 35720
// points := [ 70 , 200 , 400 ] ;
35701: LD_ADDR_VAR 0 9
35705: PUSH
35706: LD_INT 70
35708: PUSH
35709: LD_INT 200
35711: PUSH
35712: LD_INT 400
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35720: LD_VAR 0 6
35724: PPUSH
35725: CALL_OW 264
35729: PUSH
35730: LD_INT 14
35732: PUSH
35733: LD_INT 53
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: IN
35740: IFFALSE 35761
// points := [ 40 , 10 , 20 ] ;
35742: LD_ADDR_VAR 0 9
35746: PUSH
35747: LD_INT 40
35749: PUSH
35750: LD_INT 10
35752: PUSH
35753: LD_INT 20
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35761: LD_VAR 0 6
35765: PPUSH
35766: CALL_OW 264
35770: PUSH
35771: LD_INT 9
35773: PUSH
35774: EMPTY
35775: LIST
35776: IN
35777: IFFALSE 35798
// points := [ 5 , 70 , 20 ] ;
35779: LD_ADDR_VAR 0 9
35783: PUSH
35784: LD_INT 5
35786: PUSH
35787: LD_INT 70
35789: PUSH
35790: LD_INT 20
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35798: LD_VAR 0 6
35802: PPUSH
35803: CALL_OW 264
35807: PUSH
35808: LD_INT 10
35810: PUSH
35811: EMPTY
35812: LIST
35813: IN
35814: IFFALSE 35835
// points := [ 35 , 110 , 70 ] ;
35816: LD_ADDR_VAR 0 9
35820: PUSH
35821: LD_INT 35
35823: PUSH
35824: LD_INT 110
35826: PUSH
35827: LD_INT 70
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35835: LD_VAR 0 6
35839: PPUSH
35840: CALL_OW 265
35844: PUSH
35845: LD_INT 25
35847: EQUAL
35848: IFFALSE 35869
// points := [ 80 , 65 , 100 ] ;
35850: LD_ADDR_VAR 0 9
35854: PUSH
35855: LD_INT 80
35857: PUSH
35858: LD_INT 65
35860: PUSH
35861: LD_INT 100
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35869: LD_VAR 0 6
35873: PPUSH
35874: CALL_OW 263
35878: PUSH
35879: LD_INT 1
35881: EQUAL
35882: IFFALSE 35917
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35884: LD_ADDR_VAR 0 10
35888: PUSH
35889: LD_VAR 0 10
35893: PUSH
35894: LD_VAR 0 6
35898: PPUSH
35899: CALL_OW 311
35903: PPUSH
35904: LD_INT 3
35906: PPUSH
35907: CALL_OW 259
35911: PUSH
35912: LD_INT 4
35914: MUL
35915: MUL
35916: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35917: LD_VAR 0 6
35921: PPUSH
35922: CALL_OW 263
35926: PUSH
35927: LD_INT 2
35929: EQUAL
35930: IFFALSE 35981
// begin j := IsControledBy ( i ) ;
35932: LD_ADDR_VAR 0 7
35936: PUSH
35937: LD_VAR 0 6
35941: PPUSH
35942: CALL_OW 312
35946: ST_TO_ADDR
// if j then
35947: LD_VAR 0 7
35951: IFFALSE 35981
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35953: LD_ADDR_VAR 0 10
35957: PUSH
35958: LD_VAR 0 10
35962: PUSH
35963: LD_VAR 0 7
35967: PPUSH
35968: LD_INT 3
35970: PPUSH
35971: CALL_OW 259
35975: PUSH
35976: LD_INT 3
35978: MUL
35979: MUL
35980: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35981: LD_VAR 0 6
35985: PPUSH
35986: CALL_OW 264
35990: PUSH
35991: LD_INT 5
35993: PUSH
35994: LD_INT 6
35996: PUSH
35997: LD_INT 46
35999: PUSH
36000: LD_INT 44
36002: PUSH
36003: LD_INT 47
36005: PUSH
36006: LD_INT 45
36008: PUSH
36009: LD_INT 28
36011: PUSH
36012: LD_INT 7
36014: PUSH
36015: LD_INT 27
36017: PUSH
36018: LD_INT 29
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: IN
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: LD_INT 52
36041: PPUSH
36042: CALL_OW 321
36046: PUSH
36047: LD_INT 2
36049: EQUAL
36050: AND
36051: IFFALSE 36068
// bpoints := bpoints * 1.2 ;
36053: LD_ADDR_VAR 0 10
36057: PUSH
36058: LD_VAR 0 10
36062: PUSH
36063: LD_REAL  1.20000000000000E+0000
36066: MUL
36067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36068: LD_VAR 0 6
36072: PPUSH
36073: CALL_OW 264
36077: PUSH
36078: LD_INT 6
36080: PUSH
36081: LD_INT 46
36083: PUSH
36084: LD_INT 47
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: IN
36092: IFFALSE 36109
// bpoints := bpoints * 1.2 ;
36094: LD_ADDR_VAR 0 10
36098: PUSH
36099: LD_VAR 0 10
36103: PUSH
36104: LD_REAL  1.20000000000000E+0000
36107: MUL
36108: ST_TO_ADDR
// end ; unit_building :
36109: GO 36123
36111: LD_INT 3
36113: DOUBLE
36114: EQUAL
36115: IFTRUE 36119
36117: GO 36122
36119: POP
// ; end ;
36120: GO 36123
36122: POP
// for j = 1 to 3 do
36123: LD_ADDR_VAR 0 7
36127: PUSH
36128: DOUBLE
36129: LD_INT 1
36131: DEC
36132: ST_TO_ADDR
36133: LD_INT 3
36135: PUSH
36136: FOR_TO
36137: IFFALSE 36190
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36139: LD_ADDR_VAR 0 5
36143: PUSH
36144: LD_VAR 0 5
36148: PPUSH
36149: LD_VAR 0 7
36153: PPUSH
36154: LD_VAR 0 5
36158: PUSH
36159: LD_VAR 0 7
36163: ARRAY
36164: PUSH
36165: LD_VAR 0 9
36169: PUSH
36170: LD_VAR 0 7
36174: ARRAY
36175: PUSH
36176: LD_VAR 0 10
36180: MUL
36181: PLUS
36182: PPUSH
36183: CALL_OW 1
36187: ST_TO_ADDR
36188: GO 36136
36190: POP
36191: POP
// end ;
36192: GO 34671
36194: POP
36195: POP
// result := Replace ( result , 4 , tmp ) ;
36196: LD_ADDR_VAR 0 5
36200: PUSH
36201: LD_VAR 0 5
36205: PPUSH
36206: LD_INT 4
36208: PPUSH
36209: LD_VAR 0 8
36213: PPUSH
36214: CALL_OW 1
36218: ST_TO_ADDR
// end ;
36219: LD_VAR 0 5
36223: RET
// export function DangerAtRange ( unit , range ) ; begin
36224: LD_INT 0
36226: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 255
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 250
36251: PPUSH
36252: LD_VAR 0 1
36256: PPUSH
36257: CALL_OW 251
36261: PPUSH
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL 34523 0 4
36271: ST_TO_ADDR
// end ;
36272: LD_VAR 0 3
36276: RET
// export function DangerInArea ( side , area ) ; begin
36277: LD_INT 0
36279: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: LD_VAR 0 2
36289: PPUSH
36290: LD_INT 81
36292: PUSH
36293: LD_VAR 0 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PPUSH
36302: CALL_OW 70
36306: ST_TO_ADDR
// end ;
36307: LD_VAR 0 3
36311: RET
// export function IsExtension ( b ) ; begin
36312: LD_INT 0
36314: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36315: LD_ADDR_VAR 0 2
36319: PUSH
36320: LD_VAR 0 1
36324: PUSH
36325: LD_INT 23
36327: PUSH
36328: LD_INT 20
36330: PUSH
36331: LD_INT 22
36333: PUSH
36334: LD_INT 17
36336: PUSH
36337: LD_INT 24
36339: PUSH
36340: LD_INT 21
36342: PUSH
36343: LD_INT 19
36345: PUSH
36346: LD_INT 16
36348: PUSH
36349: LD_INT 25
36351: PUSH
36352: LD_INT 18
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: IN
36367: ST_TO_ADDR
// end ;
36368: LD_VAR 0 2
36372: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36373: LD_INT 0
36375: PPUSH
36376: PPUSH
36377: PPUSH
// result := [ ] ;
36378: LD_ADDR_VAR 0 4
36382: PUSH
36383: EMPTY
36384: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36385: LD_ADDR_VAR 0 5
36389: PUSH
36390: LD_VAR 0 2
36394: PPUSH
36395: LD_INT 21
36397: PUSH
36398: LD_INT 3
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PPUSH
36405: CALL_OW 70
36409: ST_TO_ADDR
// if not tmp then
36410: LD_VAR 0 5
36414: NOT
36415: IFFALSE 36419
// exit ;
36417: GO 36483
// if checkLink then
36419: LD_VAR 0 3
36423: IFFALSE 36473
// begin for i in tmp do
36425: LD_ADDR_VAR 0 6
36429: PUSH
36430: LD_VAR 0 5
36434: PUSH
36435: FOR_IN
36436: IFFALSE 36471
// if GetBase ( i ) <> base then
36438: LD_VAR 0 6
36442: PPUSH
36443: CALL_OW 274
36447: PUSH
36448: LD_VAR 0 1
36452: NONEQUAL
36453: IFFALSE 36469
// ComLinkToBase ( base , i ) ;
36455: LD_VAR 0 1
36459: PPUSH
36460: LD_VAR 0 6
36464: PPUSH
36465: CALL_OW 169
36469: GO 36435
36471: POP
36472: POP
// end ; result := tmp ;
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_VAR 0 5
36482: ST_TO_ADDR
// end ;
36483: LD_VAR 0 4
36487: RET
// export function ComComplete ( units , b ) ; var i ; begin
36488: LD_INT 0
36490: PPUSH
36491: PPUSH
// if not units then
36492: LD_VAR 0 1
36496: NOT
36497: IFFALSE 36501
// exit ;
36499: GO 36591
// for i in units do
36501: LD_ADDR_VAR 0 4
36505: PUSH
36506: LD_VAR 0 1
36510: PUSH
36511: FOR_IN
36512: IFFALSE 36589
// if BuildingStatus ( b ) = bs_build then
36514: LD_VAR 0 2
36518: PPUSH
36519: CALL_OW 461
36523: PUSH
36524: LD_INT 1
36526: EQUAL
36527: IFFALSE 36587
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36529: LD_VAR 0 4
36533: PPUSH
36534: LD_STRING h
36536: PUSH
36537: LD_VAR 0 2
36541: PPUSH
36542: CALL_OW 250
36546: PUSH
36547: LD_VAR 0 2
36551: PPUSH
36552: CALL_OW 251
36556: PUSH
36557: LD_VAR 0 2
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: PPUSH
36583: CALL_OW 446
36587: GO 36511
36589: POP
36590: POP
// end ;
36591: LD_VAR 0 3
36595: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36596: LD_INT 0
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36604: LD_VAR 0 1
36608: NOT
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 263
36619: PUSH
36620: LD_INT 2
36622: NONEQUAL
36623: OR
36624: IFFALSE 36628
// exit ;
36626: GO 36944
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36628: LD_ADDR_VAR 0 6
36632: PUSH
36633: LD_INT 22
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 255
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: LD_INT 30
36655: PUSH
36656: LD_INT 36
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 34
36665: PUSH
36666: LD_INT 31
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 69
36686: ST_TO_ADDR
// if not tmp then
36687: LD_VAR 0 6
36691: NOT
36692: IFFALSE 36696
// exit ;
36694: GO 36944
// result := [ ] ;
36696: LD_ADDR_VAR 0 2
36700: PUSH
36701: EMPTY
36702: ST_TO_ADDR
// for i in tmp do
36703: LD_ADDR_VAR 0 3
36707: PUSH
36708: LD_VAR 0 6
36712: PUSH
36713: FOR_IN
36714: IFFALSE 36785
// begin t := UnitsInside ( i ) ;
36716: LD_ADDR_VAR 0 4
36720: PUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: CALL_OW 313
36730: ST_TO_ADDR
// if t then
36731: LD_VAR 0 4
36735: IFFALSE 36783
// for j in t do
36737: LD_ADDR_VAR 0 7
36741: PUSH
36742: LD_VAR 0 4
36746: PUSH
36747: FOR_IN
36748: IFFALSE 36781
// result := Replace ( result , result + 1 , j ) ;
36750: LD_ADDR_VAR 0 2
36754: PUSH
36755: LD_VAR 0 2
36759: PPUSH
36760: LD_VAR 0 2
36764: PUSH
36765: LD_INT 1
36767: PLUS
36768: PPUSH
36769: LD_VAR 0 7
36773: PPUSH
36774: CALL_OW 1
36778: ST_TO_ADDR
36779: GO 36747
36781: POP
36782: POP
// end ;
36783: GO 36713
36785: POP
36786: POP
// if not result then
36787: LD_VAR 0 2
36791: NOT
36792: IFFALSE 36796
// exit ;
36794: GO 36944
// mech := result [ 1 ] ;
36796: LD_ADDR_VAR 0 5
36800: PUSH
36801: LD_VAR 0 2
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: ST_TO_ADDR
// if result > 1 then
36810: LD_VAR 0 2
36814: PUSH
36815: LD_INT 1
36817: GREATER
36818: IFFALSE 36930
// begin for i = 2 to result do
36820: LD_ADDR_VAR 0 3
36824: PUSH
36825: DOUBLE
36826: LD_INT 2
36828: DEC
36829: ST_TO_ADDR
36830: LD_VAR 0 2
36834: PUSH
36835: FOR_TO
36836: IFFALSE 36928
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36838: LD_ADDR_VAR 0 4
36842: PUSH
36843: LD_VAR 0 2
36847: PUSH
36848: LD_VAR 0 3
36852: ARRAY
36853: PPUSH
36854: LD_INT 3
36856: PPUSH
36857: CALL_OW 259
36861: PUSH
36862: LD_VAR 0 2
36866: PUSH
36867: LD_VAR 0 3
36871: ARRAY
36872: PPUSH
36873: CALL_OW 432
36877: MINUS
36878: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36879: LD_VAR 0 4
36883: PUSH
36884: LD_VAR 0 5
36888: PPUSH
36889: LD_INT 3
36891: PPUSH
36892: CALL_OW 259
36896: PUSH
36897: LD_VAR 0 5
36901: PPUSH
36902: CALL_OW 432
36906: MINUS
36907: GREATEREQUAL
36908: IFFALSE 36926
// mech := result [ i ] ;
36910: LD_ADDR_VAR 0 5
36914: PUSH
36915: LD_VAR 0 2
36919: PUSH
36920: LD_VAR 0 3
36924: ARRAY
36925: ST_TO_ADDR
// end ;
36926: GO 36835
36928: POP
36929: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36930: LD_VAR 0 1
36934: PPUSH
36935: LD_VAR 0 5
36939: PPUSH
36940: CALL_OW 135
// end ;
36944: LD_VAR 0 2
36948: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36949: LD_INT 0
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
// result := [ ] ;
36964: LD_ADDR_VAR 0 7
36968: PUSH
36969: EMPTY
36970: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 266
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: IN
36991: NOT
36992: IFFALSE 36996
// exit ;
36994: GO 38630
// if name then
36996: LD_VAR 0 3
37000: IFFALSE 37016
// SetBName ( base_dep , name ) ;
37002: LD_VAR 0 1
37006: PPUSH
37007: LD_VAR 0 3
37011: PPUSH
37012: CALL_OW 500
// base := GetBase ( base_dep ) ;
37016: LD_ADDR_VAR 0 15
37020: PUSH
37021: LD_VAR 0 1
37025: PPUSH
37026: CALL_OW 274
37030: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37031: LD_ADDR_VAR 0 16
37035: PUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 255
37045: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37046: LD_ADDR_VAR 0 17
37050: PUSH
37051: LD_VAR 0 1
37055: PPUSH
37056: CALL_OW 248
37060: ST_TO_ADDR
// if sources then
37061: LD_VAR 0 5
37065: IFFALSE 37112
// for i = 1 to 3 do
37067: LD_ADDR_VAR 0 8
37071: PUSH
37072: DOUBLE
37073: LD_INT 1
37075: DEC
37076: ST_TO_ADDR
37077: LD_INT 3
37079: PUSH
37080: FOR_TO
37081: IFFALSE 37110
// AddResourceType ( base , i , sources [ i ] ) ;
37083: LD_VAR 0 15
37087: PPUSH
37088: LD_VAR 0 8
37092: PPUSH
37093: LD_VAR 0 5
37097: PUSH
37098: LD_VAR 0 8
37102: ARRAY
37103: PPUSH
37104: CALL_OW 276
37108: GO 37080
37110: POP
37111: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37112: LD_ADDR_VAR 0 18
37116: PUSH
37117: LD_VAR 0 15
37121: PPUSH
37122: LD_VAR 0 2
37126: PPUSH
37127: LD_INT 1
37129: PPUSH
37130: CALL 36373 0 3
37134: ST_TO_ADDR
// InitHc ;
37135: CALL_OW 19
// InitUc ;
37139: CALL_OW 18
// uc_side := side ;
37143: LD_ADDR_OWVAR 20
37147: PUSH
37148: LD_VAR 0 16
37152: ST_TO_ADDR
// uc_nation := nation ;
37153: LD_ADDR_OWVAR 21
37157: PUSH
37158: LD_VAR 0 17
37162: ST_TO_ADDR
// if buildings then
37163: LD_VAR 0 18
37167: IFFALSE 38489
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37169: LD_ADDR_VAR 0 19
37173: PUSH
37174: LD_VAR 0 18
37178: PPUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 30
37184: PUSH
37185: LD_INT 29
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 30
37194: PUSH
37195: LD_INT 30
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: PPUSH
37207: CALL_OW 72
37211: ST_TO_ADDR
// if tmp then
37212: LD_VAR 0 19
37216: IFFALSE 37264
// for i in tmp do
37218: LD_ADDR_VAR 0 8
37222: PUSH
37223: LD_VAR 0 19
37227: PUSH
37228: FOR_IN
37229: IFFALSE 37262
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37231: LD_VAR 0 8
37235: PPUSH
37236: CALL_OW 250
37240: PPUSH
37241: LD_VAR 0 8
37245: PPUSH
37246: CALL_OW 251
37250: PPUSH
37251: LD_VAR 0 16
37255: PPUSH
37256: CALL_OW 441
37260: GO 37228
37262: POP
37263: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37264: LD_VAR 0 18
37268: PPUSH
37269: LD_INT 2
37271: PUSH
37272: LD_INT 30
37274: PUSH
37275: LD_INT 32
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 30
37284: PUSH
37285: LD_INT 33
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: PPUSH
37297: CALL_OW 72
37301: IFFALSE 37389
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37303: LD_ADDR_VAR 0 8
37307: PUSH
37308: LD_VAR 0 18
37312: PPUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 30
37318: PUSH
37319: LD_INT 32
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 30
37328: PUSH
37329: LD_INT 33
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: PPUSH
37341: CALL_OW 72
37345: PUSH
37346: FOR_IN
37347: IFFALSE 37387
// begin if not GetBWeapon ( i ) then
37349: LD_VAR 0 8
37353: PPUSH
37354: CALL_OW 269
37358: NOT
37359: IFFALSE 37385
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37361: LD_VAR 0 8
37365: PPUSH
37366: LD_VAR 0 8
37370: PPUSH
37371: LD_VAR 0 2
37375: PPUSH
37376: CALL 38635 0 2
37380: PPUSH
37381: CALL_OW 431
// end ;
37385: GO 37346
37387: POP
37388: POP
// end ; for i = 1 to personel do
37389: LD_ADDR_VAR 0 8
37393: PUSH
37394: DOUBLE
37395: LD_INT 1
37397: DEC
37398: ST_TO_ADDR
37399: LD_VAR 0 6
37403: PUSH
37404: FOR_TO
37405: IFFALSE 38469
// begin if i > 4 then
37407: LD_VAR 0 8
37411: PUSH
37412: LD_INT 4
37414: GREATER
37415: IFFALSE 37419
// break ;
37417: GO 38469
// case i of 1 :
37419: LD_VAR 0 8
37423: PUSH
37424: LD_INT 1
37426: DOUBLE
37427: EQUAL
37428: IFTRUE 37432
37430: GO 37512
37432: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37433: LD_ADDR_VAR 0 12
37437: PUSH
37438: LD_VAR 0 18
37442: PPUSH
37443: LD_INT 22
37445: PUSH
37446: LD_VAR 0 16
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 58
37457: PUSH
37458: EMPTY
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 30
37466: PUSH
37467: LD_INT 32
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 30
37476: PUSH
37477: LD_INT 4
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 30
37486: PUSH
37487: LD_INT 5
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: PPUSH
37505: CALL_OW 72
37509: ST_TO_ADDR
37510: GO 37734
37512: LD_INT 2
37514: DOUBLE
37515: EQUAL
37516: IFTRUE 37520
37518: GO 37582
37520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37521: LD_ADDR_VAR 0 12
37525: PUSH
37526: LD_VAR 0 18
37530: PPUSH
37531: LD_INT 22
37533: PUSH
37534: LD_VAR 0 16
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 30
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 30
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PPUSH
37575: CALL_OW 72
37579: ST_TO_ADDR
37580: GO 37734
37582: LD_INT 3
37584: DOUBLE
37585: EQUAL
37586: IFTRUE 37590
37588: GO 37652
37590: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37591: LD_ADDR_VAR 0 12
37595: PUSH
37596: LD_VAR 0 18
37600: PPUSH
37601: LD_INT 22
37603: PUSH
37604: LD_VAR 0 16
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: LD_INT 30
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 30
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PPUSH
37645: CALL_OW 72
37649: ST_TO_ADDR
37650: GO 37734
37652: LD_INT 4
37654: DOUBLE
37655: EQUAL
37656: IFTRUE 37660
37658: GO 37733
37660: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37661: LD_ADDR_VAR 0 12
37665: PUSH
37666: LD_VAR 0 18
37670: PPUSH
37671: LD_INT 22
37673: PUSH
37674: LD_VAR 0 16
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: LD_INT 30
37688: PUSH
37689: LD_INT 6
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 30
37698: PUSH
37699: LD_INT 7
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 30
37708: PUSH
37709: LD_INT 8
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PPUSH
37726: CALL_OW 72
37730: ST_TO_ADDR
37731: GO 37734
37733: POP
// if i = 1 then
37734: LD_VAR 0 8
37738: PUSH
37739: LD_INT 1
37741: EQUAL
37742: IFFALSE 37853
// begin tmp := [ ] ;
37744: LD_ADDR_VAR 0 19
37748: PUSH
37749: EMPTY
37750: ST_TO_ADDR
// for j in f do
37751: LD_ADDR_VAR 0 9
37755: PUSH
37756: LD_VAR 0 12
37760: PUSH
37761: FOR_IN
37762: IFFALSE 37835
// if GetBType ( j ) = b_bunker then
37764: LD_VAR 0 9
37768: PPUSH
37769: CALL_OW 266
37773: PUSH
37774: LD_INT 32
37776: EQUAL
37777: IFFALSE 37804
// tmp := Insert ( tmp , 1 , j ) else
37779: LD_ADDR_VAR 0 19
37783: PUSH
37784: LD_VAR 0 19
37788: PPUSH
37789: LD_INT 1
37791: PPUSH
37792: LD_VAR 0 9
37796: PPUSH
37797: CALL_OW 2
37801: ST_TO_ADDR
37802: GO 37833
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37804: LD_ADDR_VAR 0 19
37808: PUSH
37809: LD_VAR 0 19
37813: PPUSH
37814: LD_VAR 0 19
37818: PUSH
37819: LD_INT 1
37821: PLUS
37822: PPUSH
37823: LD_VAR 0 9
37827: PPUSH
37828: CALL_OW 2
37832: ST_TO_ADDR
37833: GO 37761
37835: POP
37836: POP
// if tmp then
37837: LD_VAR 0 19
37841: IFFALSE 37853
// f := tmp ;
37843: LD_ADDR_VAR 0 12
37847: PUSH
37848: LD_VAR 0 19
37852: ST_TO_ADDR
// end ; x := personel [ i ] ;
37853: LD_ADDR_VAR 0 13
37857: PUSH
37858: LD_VAR 0 6
37862: PUSH
37863: LD_VAR 0 8
37867: ARRAY
37868: ST_TO_ADDR
// if x = - 1 then
37869: LD_VAR 0 13
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: EQUAL
37878: IFFALSE 38087
// begin for j in f do
37880: LD_ADDR_VAR 0 9
37884: PUSH
37885: LD_VAR 0 12
37889: PUSH
37890: FOR_IN
37891: IFFALSE 38083
// repeat InitHc ;
37893: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37897: LD_VAR 0 9
37901: PPUSH
37902: CALL_OW 266
37906: PUSH
37907: LD_INT 5
37909: EQUAL
37910: IFFALSE 37980
// begin if UnitsInside ( j ) < 3 then
37912: LD_VAR 0 9
37916: PPUSH
37917: CALL_OW 313
37921: PUSH
37922: LD_INT 3
37924: LESS
37925: IFFALSE 37961
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37927: LD_INT 0
37929: PPUSH
37930: LD_INT 5
37932: PUSH
37933: LD_INT 8
37935: PUSH
37936: LD_INT 9
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: PUSH
37944: LD_VAR 0 17
37948: ARRAY
37949: PPUSH
37950: LD_VAR 0 4
37954: PPUSH
37955: CALL_OW 380
37959: GO 37978
// PrepareHuman ( false , i , skill ) ;
37961: LD_INT 0
37963: PPUSH
37964: LD_VAR 0 8
37968: PPUSH
37969: LD_VAR 0 4
37973: PPUSH
37974: CALL_OW 380
// end else
37978: GO 37997
// PrepareHuman ( false , i , skill ) ;
37980: LD_INT 0
37982: PPUSH
37983: LD_VAR 0 8
37987: PPUSH
37988: LD_VAR 0 4
37992: PPUSH
37993: CALL_OW 380
// un := CreateHuman ;
37997: LD_ADDR_VAR 0 14
38001: PUSH
38002: CALL_OW 44
38006: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38007: LD_ADDR_VAR 0 7
38011: PUSH
38012: LD_VAR 0 7
38016: PPUSH
38017: LD_INT 1
38019: PPUSH
38020: LD_VAR 0 14
38024: PPUSH
38025: CALL_OW 2
38029: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38030: LD_VAR 0 14
38034: PPUSH
38035: LD_VAR 0 9
38039: PPUSH
38040: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38044: LD_VAR 0 9
38048: PPUSH
38049: CALL_OW 313
38053: PUSH
38054: LD_INT 6
38056: EQUAL
38057: PUSH
38058: LD_VAR 0 9
38062: PPUSH
38063: CALL_OW 266
38067: PUSH
38068: LD_INT 32
38070: PUSH
38071: LD_INT 31
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: IN
38078: OR
38079: IFFALSE 37893
38081: GO 37890
38083: POP
38084: POP
// end else
38085: GO 38467
// for j = 1 to x do
38087: LD_ADDR_VAR 0 9
38091: PUSH
38092: DOUBLE
38093: LD_INT 1
38095: DEC
38096: ST_TO_ADDR
38097: LD_VAR 0 13
38101: PUSH
38102: FOR_TO
38103: IFFALSE 38465
// begin InitHc ;
38105: CALL_OW 19
// if not f then
38109: LD_VAR 0 12
38113: NOT
38114: IFFALSE 38203
// begin PrepareHuman ( false , i , skill ) ;
38116: LD_INT 0
38118: PPUSH
38119: LD_VAR 0 8
38123: PPUSH
38124: LD_VAR 0 4
38128: PPUSH
38129: CALL_OW 380
// un := CreateHuman ;
38133: LD_ADDR_VAR 0 14
38137: PUSH
38138: CALL_OW 44
38142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38143: LD_ADDR_VAR 0 7
38147: PUSH
38148: LD_VAR 0 7
38152: PPUSH
38153: LD_INT 1
38155: PPUSH
38156: LD_VAR 0 14
38160: PPUSH
38161: CALL_OW 2
38165: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38166: LD_VAR 0 14
38170: PPUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: CALL_OW 250
38180: PPUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: CALL_OW 251
38190: PPUSH
38191: LD_INT 10
38193: PPUSH
38194: LD_INT 0
38196: PPUSH
38197: CALL_OW 50
// continue ;
38201: GO 38102
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38203: LD_VAR 0 12
38207: PUSH
38208: LD_INT 1
38210: ARRAY
38211: PPUSH
38212: CALL_OW 313
38216: PUSH
38217: LD_VAR 0 12
38221: PUSH
38222: LD_INT 1
38224: ARRAY
38225: PPUSH
38226: CALL_OW 266
38230: PUSH
38231: LD_INT 32
38233: PUSH
38234: LD_INT 31
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: IN
38241: AND
38242: PUSH
38243: LD_VAR 0 12
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: PPUSH
38252: CALL_OW 313
38256: PUSH
38257: LD_INT 6
38259: EQUAL
38260: OR
38261: IFFALSE 38281
// f := Delete ( f , 1 ) ;
38263: LD_ADDR_VAR 0 12
38267: PUSH
38268: LD_VAR 0 12
38272: PPUSH
38273: LD_INT 1
38275: PPUSH
38276: CALL_OW 3
38280: ST_TO_ADDR
// if not f then
38281: LD_VAR 0 12
38285: NOT
38286: IFFALSE 38304
// begin x := x + 2 ;
38288: LD_ADDR_VAR 0 13
38292: PUSH
38293: LD_VAR 0 13
38297: PUSH
38298: LD_INT 2
38300: PLUS
38301: ST_TO_ADDR
// continue ;
38302: GO 38102
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38304: LD_VAR 0 12
38308: PUSH
38309: LD_INT 1
38311: ARRAY
38312: PPUSH
38313: CALL_OW 266
38317: PUSH
38318: LD_INT 5
38320: EQUAL
38321: IFFALSE 38395
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38323: LD_VAR 0 12
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: PPUSH
38332: CALL_OW 313
38336: PUSH
38337: LD_INT 3
38339: LESS
38340: IFFALSE 38376
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38342: LD_INT 0
38344: PPUSH
38345: LD_INT 5
38347: PUSH
38348: LD_INT 8
38350: PUSH
38351: LD_INT 9
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: PUSH
38359: LD_VAR 0 17
38363: ARRAY
38364: PPUSH
38365: LD_VAR 0 4
38369: PPUSH
38370: CALL_OW 380
38374: GO 38393
// PrepareHuman ( false , i , skill ) ;
38376: LD_INT 0
38378: PPUSH
38379: LD_VAR 0 8
38383: PPUSH
38384: LD_VAR 0 4
38388: PPUSH
38389: CALL_OW 380
// end else
38393: GO 38412
// PrepareHuman ( false , i , skill ) ;
38395: LD_INT 0
38397: PPUSH
38398: LD_VAR 0 8
38402: PPUSH
38403: LD_VAR 0 4
38407: PPUSH
38408: CALL_OW 380
// un := CreateHuman ;
38412: LD_ADDR_VAR 0 14
38416: PUSH
38417: CALL_OW 44
38421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38422: LD_ADDR_VAR 0 7
38426: PUSH
38427: LD_VAR 0 7
38431: PPUSH
38432: LD_INT 1
38434: PPUSH
38435: LD_VAR 0 14
38439: PPUSH
38440: CALL_OW 2
38444: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38445: LD_VAR 0 14
38449: PPUSH
38450: LD_VAR 0 12
38454: PUSH
38455: LD_INT 1
38457: ARRAY
38458: PPUSH
38459: CALL_OW 52
// end ;
38463: GO 38102
38465: POP
38466: POP
// end ;
38467: GO 37404
38469: POP
38470: POP
// result := result ^ buildings ;
38471: LD_ADDR_VAR 0 7
38475: PUSH
38476: LD_VAR 0 7
38480: PUSH
38481: LD_VAR 0 18
38485: ADD
38486: ST_TO_ADDR
// end else
38487: GO 38630
// begin for i = 1 to personel do
38489: LD_ADDR_VAR 0 8
38493: PUSH
38494: DOUBLE
38495: LD_INT 1
38497: DEC
38498: ST_TO_ADDR
38499: LD_VAR 0 6
38503: PUSH
38504: FOR_TO
38505: IFFALSE 38628
// begin if i > 4 then
38507: LD_VAR 0 8
38511: PUSH
38512: LD_INT 4
38514: GREATER
38515: IFFALSE 38519
// break ;
38517: GO 38628
// x := personel [ i ] ;
38519: LD_ADDR_VAR 0 13
38523: PUSH
38524: LD_VAR 0 6
38528: PUSH
38529: LD_VAR 0 8
38533: ARRAY
38534: ST_TO_ADDR
// if x = - 1 then
38535: LD_VAR 0 13
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: EQUAL
38544: IFFALSE 38548
// continue ;
38546: GO 38504
// PrepareHuman ( false , i , skill ) ;
38548: LD_INT 0
38550: PPUSH
38551: LD_VAR 0 8
38555: PPUSH
38556: LD_VAR 0 4
38560: PPUSH
38561: CALL_OW 380
// un := CreateHuman ;
38565: LD_ADDR_VAR 0 14
38569: PUSH
38570: CALL_OW 44
38574: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38575: LD_VAR 0 14
38579: PPUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: CALL_OW 250
38589: PPUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 251
38599: PPUSH
38600: LD_INT 10
38602: PPUSH
38603: LD_INT 0
38605: PPUSH
38606: CALL_OW 50
// result := result ^ un ;
38610: LD_ADDR_VAR 0 7
38614: PUSH
38615: LD_VAR 0 7
38619: PUSH
38620: LD_VAR 0 14
38624: ADD
38625: ST_TO_ADDR
// end ;
38626: GO 38504
38628: POP
38629: POP
// end ; end ;
38630: LD_VAR 0 7
38634: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38635: LD_INT 0
38637: PPUSH
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
// result := false ;
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_INT 0
38660: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38661: LD_VAR 0 1
38665: NOT
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 266
38676: PUSH
38677: LD_INT 32
38679: PUSH
38680: LD_INT 33
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: IN
38687: NOT
38688: OR
38689: IFFALSE 38693
// exit ;
38691: GO 39802
// nat := GetNation ( tower ) ;
38693: LD_ADDR_VAR 0 12
38697: PUSH
38698: LD_VAR 0 1
38702: PPUSH
38703: CALL_OW 248
38707: ST_TO_ADDR
// side := GetSide ( tower ) ;
38708: LD_ADDR_VAR 0 16
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 255
38722: ST_TO_ADDR
// x := GetX ( tower ) ;
38723: LD_ADDR_VAR 0 10
38727: PUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: CALL_OW 250
38737: ST_TO_ADDR
// y := GetY ( tower ) ;
38738: LD_ADDR_VAR 0 11
38742: PUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: CALL_OW 251
38752: ST_TO_ADDR
// if not x or not y then
38753: LD_VAR 0 10
38757: NOT
38758: PUSH
38759: LD_VAR 0 11
38763: NOT
38764: OR
38765: IFFALSE 38769
// exit ;
38767: GO 39802
// weapon := 0 ;
38769: LD_ADDR_VAR 0 18
38773: PUSH
38774: LD_INT 0
38776: ST_TO_ADDR
// fac_list := [ ] ;
38777: LD_ADDR_VAR 0 17
38781: PUSH
38782: EMPTY
38783: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38784: LD_ADDR_VAR 0 6
38788: PUSH
38789: LD_VAR 0 1
38793: PPUSH
38794: CALL_OW 274
38798: PPUSH
38799: LD_VAR 0 2
38803: PPUSH
38804: LD_INT 0
38806: PPUSH
38807: CALL 36373 0 3
38811: PPUSH
38812: LD_INT 30
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PPUSH
38822: CALL_OW 72
38826: ST_TO_ADDR
// if not factories then
38827: LD_VAR 0 6
38831: NOT
38832: IFFALSE 38836
// exit ;
38834: GO 39802
// for i in factories do
38836: LD_ADDR_VAR 0 8
38840: PUSH
38841: LD_VAR 0 6
38845: PUSH
38846: FOR_IN
38847: IFFALSE 38872
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38849: LD_ADDR_VAR 0 17
38853: PUSH
38854: LD_VAR 0 17
38858: PUSH
38859: LD_VAR 0 8
38863: PPUSH
38864: CALL_OW 478
38868: UNION
38869: ST_TO_ADDR
38870: GO 38846
38872: POP
38873: POP
// if not fac_list then
38874: LD_VAR 0 17
38878: NOT
38879: IFFALSE 38883
// exit ;
38881: GO 39802
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38883: LD_ADDR_VAR 0 5
38887: PUSH
38888: LD_INT 4
38890: PUSH
38891: LD_INT 5
38893: PUSH
38894: LD_INT 9
38896: PUSH
38897: LD_INT 10
38899: PUSH
38900: LD_INT 6
38902: PUSH
38903: LD_INT 7
38905: PUSH
38906: LD_INT 11
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 27
38920: PUSH
38921: LD_INT 28
38923: PUSH
38924: LD_INT 26
38926: PUSH
38927: LD_INT 30
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 43
38938: PUSH
38939: LD_INT 44
38941: PUSH
38942: LD_INT 46
38944: PUSH
38945: LD_INT 45
38947: PUSH
38948: LD_INT 47
38950: PUSH
38951: LD_INT 49
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: LD_VAR 0 12
38971: ARRAY
38972: ST_TO_ADDR
// list := list isect fac_list ;
38973: LD_ADDR_VAR 0 5
38977: PUSH
38978: LD_VAR 0 5
38982: PUSH
38983: LD_VAR 0 17
38987: ISECT
38988: ST_TO_ADDR
// if not list then
38989: LD_VAR 0 5
38993: NOT
38994: IFFALSE 38998
// exit ;
38996: GO 39802
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38998: LD_VAR 0 12
39002: PUSH
39003: LD_INT 3
39005: EQUAL
39006: PUSH
39007: LD_INT 49
39009: PUSH
39010: LD_VAR 0 5
39014: IN
39015: AND
39016: PUSH
39017: LD_INT 31
39019: PPUSH
39020: LD_VAR 0 16
39024: PPUSH
39025: CALL_OW 321
39029: PUSH
39030: LD_INT 2
39032: EQUAL
39033: AND
39034: IFFALSE 39094
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39036: LD_INT 22
39038: PUSH
39039: LD_VAR 0 16
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 35
39050: PUSH
39051: LD_INT 49
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 91
39060: PUSH
39061: LD_VAR 0 1
39065: PUSH
39066: LD_INT 10
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: PPUSH
39079: CALL_OW 69
39083: NOT
39084: IFFALSE 39094
// weapon := ru_time_lapser ;
39086: LD_ADDR_VAR 0 18
39090: PUSH
39091: LD_INT 49
39093: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39094: LD_VAR 0 12
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: IN
39109: PUSH
39110: LD_INT 11
39112: PUSH
39113: LD_VAR 0 5
39117: IN
39118: PUSH
39119: LD_INT 30
39121: PUSH
39122: LD_VAR 0 5
39126: IN
39127: OR
39128: AND
39129: PUSH
39130: LD_INT 6
39132: PPUSH
39133: LD_VAR 0 16
39137: PPUSH
39138: CALL_OW 321
39142: PUSH
39143: LD_INT 2
39145: EQUAL
39146: AND
39147: IFFALSE 39312
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39149: LD_INT 22
39151: PUSH
39152: LD_VAR 0 16
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: LD_INT 35
39166: PUSH
39167: LD_INT 11
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 35
39176: PUSH
39177: LD_INT 30
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 91
39191: PUSH
39192: LD_VAR 0 1
39196: PUSH
39197: LD_INT 18
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: PPUSH
39210: CALL_OW 69
39214: NOT
39215: PUSH
39216: LD_INT 22
39218: PUSH
39219: LD_VAR 0 16
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: LD_INT 32
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 30
39243: PUSH
39244: LD_INT 33
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 91
39258: PUSH
39259: LD_VAR 0 1
39263: PUSH
39264: LD_INT 12
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: PUSH
39277: EMPTY
39278: LIST
39279: PPUSH
39280: CALL_OW 69
39284: PUSH
39285: LD_INT 2
39287: GREATER
39288: AND
39289: IFFALSE 39312
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39291: LD_ADDR_VAR 0 18
39295: PUSH
39296: LD_INT 11
39298: PUSH
39299: LD_INT 30
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 12
39310: ARRAY
39311: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39312: LD_VAR 0 18
39316: NOT
39317: PUSH
39318: LD_INT 40
39320: PPUSH
39321: LD_VAR 0 16
39325: PPUSH
39326: CALL_OW 321
39330: PUSH
39331: LD_INT 2
39333: EQUAL
39334: AND
39335: PUSH
39336: LD_INT 7
39338: PUSH
39339: LD_VAR 0 5
39343: IN
39344: PUSH
39345: LD_INT 28
39347: PUSH
39348: LD_VAR 0 5
39352: IN
39353: OR
39354: PUSH
39355: LD_INT 45
39357: PUSH
39358: LD_VAR 0 5
39362: IN
39363: OR
39364: AND
39365: IFFALSE 39619
// begin hex := GetHexInfo ( x , y ) ;
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: LD_VAR 0 10
39376: PPUSH
39377: LD_VAR 0 11
39381: PPUSH
39382: CALL_OW 546
39386: ST_TO_ADDR
// if hex [ 1 ] then
39387: LD_VAR 0 4
39391: PUSH
39392: LD_INT 1
39394: ARRAY
39395: IFFALSE 39399
// exit ;
39397: GO 39802
// height := hex [ 2 ] ;
39399: LD_ADDR_VAR 0 15
39403: PUSH
39404: LD_VAR 0 4
39408: PUSH
39409: LD_INT 2
39411: ARRAY
39412: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39413: LD_ADDR_VAR 0 14
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 5
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
// for i in tmp do
39436: LD_ADDR_VAR 0 8
39440: PUSH
39441: LD_VAR 0 14
39445: PUSH
39446: FOR_IN
39447: IFFALSE 39617
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39449: LD_ADDR_VAR 0 9
39453: PUSH
39454: LD_VAR 0 10
39458: PPUSH
39459: LD_VAR 0 8
39463: PPUSH
39464: LD_INT 5
39466: PPUSH
39467: CALL_OW 272
39471: PUSH
39472: LD_VAR 0 11
39476: PPUSH
39477: LD_VAR 0 8
39481: PPUSH
39482: LD_INT 5
39484: PPUSH
39485: CALL_OW 273
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39494: LD_VAR 0 9
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: LD_VAR 0 9
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: PPUSH
39512: CALL_OW 488
39516: IFFALSE 39615
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39518: LD_ADDR_VAR 0 4
39522: PUSH
39523: LD_VAR 0 9
39527: PUSH
39528: LD_INT 1
39530: ARRAY
39531: PPUSH
39532: LD_VAR 0 9
39536: PUSH
39537: LD_INT 2
39539: ARRAY
39540: PPUSH
39541: CALL_OW 546
39545: ST_TO_ADDR
// if hex [ 1 ] then
39546: LD_VAR 0 4
39550: PUSH
39551: LD_INT 1
39553: ARRAY
39554: IFFALSE 39558
// continue ;
39556: GO 39446
// h := hex [ 2 ] ;
39558: LD_ADDR_VAR 0 13
39562: PUSH
39563: LD_VAR 0 4
39567: PUSH
39568: LD_INT 2
39570: ARRAY
39571: ST_TO_ADDR
// if h + 7 < height then
39572: LD_VAR 0 13
39576: PUSH
39577: LD_INT 7
39579: PLUS
39580: PUSH
39581: LD_VAR 0 15
39585: LESS
39586: IFFALSE 39615
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39588: LD_ADDR_VAR 0 18
39592: PUSH
39593: LD_INT 7
39595: PUSH
39596: LD_INT 28
39598: PUSH
39599: LD_INT 45
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: PUSH
39607: LD_VAR 0 12
39611: ARRAY
39612: ST_TO_ADDR
// break ;
39613: GO 39617
// end ; end ; end ;
39615: GO 39446
39617: POP
39618: POP
// end ; if not weapon then
39619: LD_VAR 0 18
39623: NOT
39624: IFFALSE 39684
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39626: LD_ADDR_VAR 0 5
39630: PUSH
39631: LD_VAR 0 5
39635: PUSH
39636: LD_INT 11
39638: PUSH
39639: LD_INT 30
39641: PUSH
39642: LD_INT 49
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: DIFF
39650: ST_TO_ADDR
// if not list then
39651: LD_VAR 0 5
39655: NOT
39656: IFFALSE 39660
// exit ;
39658: GO 39802
// weapon := list [ rand ( 1 , list ) ] ;
39660: LD_ADDR_VAR 0 18
39664: PUSH
39665: LD_VAR 0 5
39669: PUSH
39670: LD_INT 1
39672: PPUSH
39673: LD_VAR 0 5
39677: PPUSH
39678: CALL_OW 12
39682: ARRAY
39683: ST_TO_ADDR
// end ; if weapon then
39684: LD_VAR 0 18
39688: IFFALSE 39802
// begin tmp := CostOfWeapon ( weapon ) ;
39690: LD_ADDR_VAR 0 14
39694: PUSH
39695: LD_VAR 0 18
39699: PPUSH
39700: CALL_OW 451
39704: ST_TO_ADDR
// j := GetBase ( tower ) ;
39705: LD_ADDR_VAR 0 9
39709: PUSH
39710: LD_VAR 0 1
39714: PPUSH
39715: CALL_OW 274
39719: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39720: LD_VAR 0 9
39724: PPUSH
39725: LD_INT 1
39727: PPUSH
39728: CALL_OW 275
39732: PUSH
39733: LD_VAR 0 14
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: GREATEREQUAL
39742: PUSH
39743: LD_VAR 0 9
39747: PPUSH
39748: LD_INT 2
39750: PPUSH
39751: CALL_OW 275
39755: PUSH
39756: LD_VAR 0 14
39760: PUSH
39761: LD_INT 2
39763: ARRAY
39764: GREATEREQUAL
39765: AND
39766: PUSH
39767: LD_VAR 0 9
39771: PPUSH
39772: LD_INT 3
39774: PPUSH
39775: CALL_OW 275
39779: PUSH
39780: LD_VAR 0 14
39784: PUSH
39785: LD_INT 3
39787: ARRAY
39788: GREATEREQUAL
39789: AND
39790: IFFALSE 39802
// result := weapon ;
39792: LD_ADDR_VAR 0 3
39796: PUSH
39797: LD_VAR 0 18
39801: ST_TO_ADDR
// end ; end ;
39802: LD_VAR 0 3
39806: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39807: LD_INT 0
39809: PPUSH
39810: PPUSH
// result := true ;
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_INT 1
39818: ST_TO_ADDR
// if array1 = array2 then
39819: LD_VAR 0 1
39823: PUSH
39824: LD_VAR 0 2
39828: EQUAL
39829: IFFALSE 39889
// begin for i = 1 to array1 do
39831: LD_ADDR_VAR 0 4
39835: PUSH
39836: DOUBLE
39837: LD_INT 1
39839: DEC
39840: ST_TO_ADDR
39841: LD_VAR 0 1
39845: PUSH
39846: FOR_TO
39847: IFFALSE 39885
// if array1 [ i ] <> array2 [ i ] then
39849: LD_VAR 0 1
39853: PUSH
39854: LD_VAR 0 4
39858: ARRAY
39859: PUSH
39860: LD_VAR 0 2
39864: PUSH
39865: LD_VAR 0 4
39869: ARRAY
39870: NONEQUAL
39871: IFFALSE 39883
// begin result := false ;
39873: LD_ADDR_VAR 0 3
39877: PUSH
39878: LD_INT 0
39880: ST_TO_ADDR
// break ;
39881: GO 39885
// end ;
39883: GO 39846
39885: POP
39886: POP
// end else
39887: GO 39897
// result := false ;
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 0
39896: ST_TO_ADDR
// end ;
39897: LD_VAR 0 3
39901: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39902: LD_INT 0
39904: PPUSH
39905: PPUSH
// if not array1 or not array2 then
39906: LD_VAR 0 1
39910: NOT
39911: PUSH
39912: LD_VAR 0 2
39916: NOT
39917: OR
39918: IFFALSE 39922
// exit ;
39920: GO 39986
// result := true ;
39922: LD_ADDR_VAR 0 3
39926: PUSH
39927: LD_INT 1
39929: ST_TO_ADDR
// for i = 1 to array1 do
39930: LD_ADDR_VAR 0 4
39934: PUSH
39935: DOUBLE
39936: LD_INT 1
39938: DEC
39939: ST_TO_ADDR
39940: LD_VAR 0 1
39944: PUSH
39945: FOR_TO
39946: IFFALSE 39984
// if array1 [ i ] <> array2 [ i ] then
39948: LD_VAR 0 1
39952: PUSH
39953: LD_VAR 0 4
39957: ARRAY
39958: PUSH
39959: LD_VAR 0 2
39963: PUSH
39964: LD_VAR 0 4
39968: ARRAY
39969: NONEQUAL
39970: IFFALSE 39982
// begin result := false ;
39972: LD_ADDR_VAR 0 3
39976: PUSH
39977: LD_INT 0
39979: ST_TO_ADDR
// break ;
39980: GO 39984
// end ;
39982: GO 39945
39984: POP
39985: POP
// end ;
39986: LD_VAR 0 3
39990: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39991: LD_INT 0
39993: PPUSH
39994: PPUSH
39995: PPUSH
// pom := GetBase ( fac ) ;
39996: LD_ADDR_VAR 0 5
40000: PUSH
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 274
40010: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_VAR 0 2
40020: PUSH
40021: LD_INT 1
40023: ARRAY
40024: PPUSH
40025: LD_VAR 0 2
40029: PUSH
40030: LD_INT 2
40032: ARRAY
40033: PPUSH
40034: LD_VAR 0 2
40038: PUSH
40039: LD_INT 3
40041: ARRAY
40042: PPUSH
40043: LD_VAR 0 2
40047: PUSH
40048: LD_INT 4
40050: ARRAY
40051: PPUSH
40052: CALL_OW 449
40056: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_VAR 0 5
40066: PPUSH
40067: LD_INT 1
40069: PPUSH
40070: CALL_OW 275
40074: PUSH
40075: LD_VAR 0 4
40079: PUSH
40080: LD_INT 1
40082: ARRAY
40083: GREATEREQUAL
40084: PUSH
40085: LD_VAR 0 5
40089: PPUSH
40090: LD_INT 2
40092: PPUSH
40093: CALL_OW 275
40097: PUSH
40098: LD_VAR 0 4
40102: PUSH
40103: LD_INT 2
40105: ARRAY
40106: GREATEREQUAL
40107: AND
40108: PUSH
40109: LD_VAR 0 5
40113: PPUSH
40114: LD_INT 3
40116: PPUSH
40117: CALL_OW 275
40121: PUSH
40122: LD_VAR 0 4
40126: PUSH
40127: LD_INT 3
40129: ARRAY
40130: GREATEREQUAL
40131: AND
40132: ST_TO_ADDR
// end ;
40133: LD_VAR 0 3
40137: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40138: LD_INT 0
40140: PPUSH
40141: PPUSH
40142: PPUSH
40143: PPUSH
// pom := GetBase ( building ) ;
40144: LD_ADDR_VAR 0 3
40148: PUSH
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 274
40158: ST_TO_ADDR
// if not pom then
40159: LD_VAR 0 3
40163: NOT
40164: IFFALSE 40168
// exit ;
40166: GO 40338
// btype := GetBType ( building ) ;
40168: LD_ADDR_VAR 0 5
40172: PUSH
40173: LD_VAR 0 1
40177: PPUSH
40178: CALL_OW 266
40182: ST_TO_ADDR
// if btype = b_armoury then
40183: LD_VAR 0 5
40187: PUSH
40188: LD_INT 4
40190: EQUAL
40191: IFFALSE 40201
// btype := b_barracks ;
40193: LD_ADDR_VAR 0 5
40197: PUSH
40198: LD_INT 5
40200: ST_TO_ADDR
// if btype = b_depot then
40201: LD_VAR 0 5
40205: PUSH
40206: LD_INT 0
40208: EQUAL
40209: IFFALSE 40219
// btype := b_warehouse ;
40211: LD_ADDR_VAR 0 5
40215: PUSH
40216: LD_INT 1
40218: ST_TO_ADDR
// if btype = b_workshop then
40219: LD_VAR 0 5
40223: PUSH
40224: LD_INT 2
40226: EQUAL
40227: IFFALSE 40237
// btype := b_factory ;
40229: LD_ADDR_VAR 0 5
40233: PUSH
40234: LD_INT 3
40236: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40237: LD_ADDR_VAR 0 4
40241: PUSH
40242: LD_VAR 0 5
40246: PPUSH
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 248
40256: PPUSH
40257: CALL_OW 450
40261: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40262: LD_ADDR_VAR 0 2
40266: PUSH
40267: LD_VAR 0 3
40271: PPUSH
40272: LD_INT 1
40274: PPUSH
40275: CALL_OW 275
40279: PUSH
40280: LD_VAR 0 4
40284: PUSH
40285: LD_INT 1
40287: ARRAY
40288: GREATEREQUAL
40289: PUSH
40290: LD_VAR 0 3
40294: PPUSH
40295: LD_INT 2
40297: PPUSH
40298: CALL_OW 275
40302: PUSH
40303: LD_VAR 0 4
40307: PUSH
40308: LD_INT 2
40310: ARRAY
40311: GREATEREQUAL
40312: AND
40313: PUSH
40314: LD_VAR 0 3
40318: PPUSH
40319: LD_INT 3
40321: PPUSH
40322: CALL_OW 275
40326: PUSH
40327: LD_VAR 0 4
40331: PUSH
40332: LD_INT 3
40334: ARRAY
40335: GREATEREQUAL
40336: AND
40337: ST_TO_ADDR
// end ;
40338: LD_VAR 0 2
40342: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
40347: PPUSH
// pom := GetBase ( building ) ;
40348: LD_ADDR_VAR 0 4
40352: PUSH
40353: LD_VAR 0 1
40357: PPUSH
40358: CALL_OW 274
40362: ST_TO_ADDR
// if not pom then
40363: LD_VAR 0 4
40367: NOT
40368: IFFALSE 40372
// exit ;
40370: GO 40473
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40372: LD_ADDR_VAR 0 5
40376: PUSH
40377: LD_VAR 0 2
40381: PPUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 248
40391: PPUSH
40392: CALL_OW 450
40396: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40397: LD_ADDR_VAR 0 3
40401: PUSH
40402: LD_VAR 0 4
40406: PPUSH
40407: LD_INT 1
40409: PPUSH
40410: CALL_OW 275
40414: PUSH
40415: LD_VAR 0 5
40419: PUSH
40420: LD_INT 1
40422: ARRAY
40423: GREATEREQUAL
40424: PUSH
40425: LD_VAR 0 4
40429: PPUSH
40430: LD_INT 2
40432: PPUSH
40433: CALL_OW 275
40437: PUSH
40438: LD_VAR 0 5
40442: PUSH
40443: LD_INT 2
40445: ARRAY
40446: GREATEREQUAL
40447: AND
40448: PUSH
40449: LD_VAR 0 4
40453: PPUSH
40454: LD_INT 3
40456: PPUSH
40457: CALL_OW 275
40461: PUSH
40462: LD_VAR 0 5
40466: PUSH
40467: LD_INT 3
40469: ARRAY
40470: GREATEREQUAL
40471: AND
40472: ST_TO_ADDR
// end ;
40473: LD_VAR 0 3
40477: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40478: LD_INT 0
40480: PPUSH
40481: PPUSH
40482: PPUSH
40483: PPUSH
40484: PPUSH
40485: PPUSH
40486: PPUSH
40487: PPUSH
40488: PPUSH
40489: PPUSH
40490: PPUSH
// result := false ;
40491: LD_ADDR_VAR 0 8
40495: PUSH
40496: LD_INT 0
40498: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40499: LD_VAR 0 5
40503: NOT
40504: PUSH
40505: LD_VAR 0 1
40509: NOT
40510: OR
40511: PUSH
40512: LD_VAR 0 2
40516: NOT
40517: OR
40518: PUSH
40519: LD_VAR 0 3
40523: NOT
40524: OR
40525: IFFALSE 40529
// exit ;
40527: GO 41343
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40529: LD_ADDR_VAR 0 14
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: LD_VAR 0 2
40543: PPUSH
40544: LD_VAR 0 3
40548: PPUSH
40549: LD_VAR 0 4
40553: PPUSH
40554: LD_VAR 0 5
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PPUSH
40563: CALL_OW 248
40567: PPUSH
40568: LD_INT 0
40570: PPUSH
40571: CALL 42576 0 6
40575: ST_TO_ADDR
// if not hexes then
40576: LD_VAR 0 14
40580: NOT
40581: IFFALSE 40585
// exit ;
40583: GO 41343
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40585: LD_ADDR_VAR 0 17
40589: PUSH
40590: LD_VAR 0 5
40594: PPUSH
40595: LD_INT 22
40597: PUSH
40598: LD_VAR 0 13
40602: PPUSH
40603: CALL_OW 255
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 30
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 30
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PPUSH
40644: CALL_OW 72
40648: ST_TO_ADDR
// for i = 1 to hexes do
40649: LD_ADDR_VAR 0 9
40653: PUSH
40654: DOUBLE
40655: LD_INT 1
40657: DEC
40658: ST_TO_ADDR
40659: LD_VAR 0 14
40663: PUSH
40664: FOR_TO
40665: IFFALSE 41341
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40667: LD_ADDR_VAR 0 13
40671: PUSH
40672: LD_VAR 0 14
40676: PUSH
40677: LD_VAR 0 9
40681: ARRAY
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: LD_VAR 0 14
40691: PUSH
40692: LD_VAR 0 9
40696: ARRAY
40697: PUSH
40698: LD_INT 2
40700: ARRAY
40701: PPUSH
40702: CALL_OW 428
40706: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40707: LD_VAR 0 14
40711: PUSH
40712: LD_VAR 0 9
40716: ARRAY
40717: PUSH
40718: LD_INT 1
40720: ARRAY
40721: PPUSH
40722: LD_VAR 0 14
40726: PUSH
40727: LD_VAR 0 9
40731: ARRAY
40732: PUSH
40733: LD_INT 2
40735: ARRAY
40736: PPUSH
40737: CALL_OW 351
40741: PUSH
40742: LD_VAR 0 14
40746: PUSH
40747: LD_VAR 0 9
40751: ARRAY
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: PPUSH
40757: LD_VAR 0 14
40761: PUSH
40762: LD_VAR 0 9
40766: ARRAY
40767: PUSH
40768: LD_INT 2
40770: ARRAY
40771: PPUSH
40772: CALL_OW 488
40776: NOT
40777: OR
40778: PUSH
40779: LD_VAR 0 13
40783: PPUSH
40784: CALL_OW 247
40788: PUSH
40789: LD_INT 3
40791: EQUAL
40792: OR
40793: IFFALSE 40799
// exit ;
40795: POP
40796: POP
40797: GO 41343
// if not tmp then
40799: LD_VAR 0 13
40803: NOT
40804: IFFALSE 40808
// continue ;
40806: GO 40664
// result := true ;
40808: LD_ADDR_VAR 0 8
40812: PUSH
40813: LD_INT 1
40815: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40816: LD_VAR 0 6
40820: PUSH
40821: LD_VAR 0 13
40825: PPUSH
40826: CALL_OW 247
40830: PUSH
40831: LD_INT 2
40833: EQUAL
40834: AND
40835: PUSH
40836: LD_VAR 0 13
40840: PPUSH
40841: CALL_OW 263
40845: PUSH
40846: LD_INT 1
40848: EQUAL
40849: AND
40850: IFFALSE 41014
// begin if IsDrivenBy ( tmp ) then
40852: LD_VAR 0 13
40856: PPUSH
40857: CALL_OW 311
40861: IFFALSE 40865
// continue ;
40863: GO 40664
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40865: LD_VAR 0 6
40869: PPUSH
40870: LD_INT 3
40872: PUSH
40873: LD_INT 60
40875: PUSH
40876: EMPTY
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 3
40885: PUSH
40886: LD_INT 55
40888: PUSH
40889: EMPTY
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PPUSH
40900: CALL_OW 72
40904: IFFALSE 41012
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40906: LD_ADDR_VAR 0 18
40910: PUSH
40911: LD_VAR 0 6
40915: PPUSH
40916: LD_INT 3
40918: PUSH
40919: LD_INT 60
40921: PUSH
40922: EMPTY
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: LD_INT 55
40934: PUSH
40935: EMPTY
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PPUSH
40946: CALL_OW 72
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: ST_TO_ADDR
// if IsInUnit ( driver ) then
40955: LD_VAR 0 18
40959: PPUSH
40960: CALL_OW 310
40964: IFFALSE 40975
// ComExit ( driver ) ;
40966: LD_VAR 0 18
40970: PPUSH
40971: CALL 66337 0 1
// AddComEnterUnit ( driver , tmp ) ;
40975: LD_VAR 0 18
40979: PPUSH
40980: LD_VAR 0 13
40984: PPUSH
40985: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40989: LD_VAR 0 18
40993: PPUSH
40994: LD_VAR 0 7
40998: PPUSH
40999: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41003: LD_VAR 0 18
41007: PPUSH
41008: CALL_OW 181
// end ; continue ;
41012: GO 40664
// end ; if not cleaners or not tmp in cleaners then
41014: LD_VAR 0 6
41018: NOT
41019: PUSH
41020: LD_VAR 0 13
41024: PUSH
41025: LD_VAR 0 6
41029: IN
41030: NOT
41031: OR
41032: IFFALSE 41339
// begin if dep then
41034: LD_VAR 0 17
41038: IFFALSE 41174
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41040: LD_ADDR_VAR 0 16
41044: PUSH
41045: LD_VAR 0 17
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PPUSH
41054: CALL_OW 250
41058: PPUSH
41059: LD_VAR 0 17
41063: PUSH
41064: LD_INT 1
41066: ARRAY
41067: PPUSH
41068: CALL_OW 254
41072: PPUSH
41073: LD_INT 5
41075: PPUSH
41076: CALL_OW 272
41080: PUSH
41081: LD_VAR 0 17
41085: PUSH
41086: LD_INT 1
41088: ARRAY
41089: PPUSH
41090: CALL_OW 251
41094: PPUSH
41095: LD_VAR 0 17
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: PPUSH
41104: CALL_OW 254
41108: PPUSH
41109: LD_INT 5
41111: PPUSH
41112: CALL_OW 273
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41121: LD_VAR 0 16
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: PPUSH
41130: LD_VAR 0 16
41134: PUSH
41135: LD_INT 2
41137: ARRAY
41138: PPUSH
41139: CALL_OW 488
41143: IFFALSE 41174
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41145: LD_VAR 0 13
41149: PPUSH
41150: LD_VAR 0 16
41154: PUSH
41155: LD_INT 1
41157: ARRAY
41158: PPUSH
41159: LD_VAR 0 16
41163: PUSH
41164: LD_INT 2
41166: ARRAY
41167: PPUSH
41168: CALL_OW 111
// continue ;
41172: GO 40664
// end ; end ; r := GetDir ( tmp ) ;
41174: LD_ADDR_VAR 0 15
41178: PUSH
41179: LD_VAR 0 13
41183: PPUSH
41184: CALL_OW 254
41188: ST_TO_ADDR
// if r = 5 then
41189: LD_VAR 0 15
41193: PUSH
41194: LD_INT 5
41196: EQUAL
41197: IFFALSE 41207
// r := 0 ;
41199: LD_ADDR_VAR 0 15
41203: PUSH
41204: LD_INT 0
41206: ST_TO_ADDR
// for j = r to 5 do
41207: LD_ADDR_VAR 0 10
41211: PUSH
41212: DOUBLE
41213: LD_VAR 0 15
41217: DEC
41218: ST_TO_ADDR
41219: LD_INT 5
41221: PUSH
41222: FOR_TO
41223: IFFALSE 41337
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41225: LD_ADDR_VAR 0 11
41229: PUSH
41230: LD_VAR 0 13
41234: PPUSH
41235: CALL_OW 250
41239: PPUSH
41240: LD_VAR 0 10
41244: PPUSH
41245: LD_INT 2
41247: PPUSH
41248: CALL_OW 272
41252: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41253: LD_ADDR_VAR 0 12
41257: PUSH
41258: LD_VAR 0 13
41262: PPUSH
41263: CALL_OW 251
41267: PPUSH
41268: LD_VAR 0 10
41272: PPUSH
41273: LD_INT 2
41275: PPUSH
41276: CALL_OW 273
41280: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41281: LD_VAR 0 11
41285: PPUSH
41286: LD_VAR 0 12
41290: PPUSH
41291: CALL_OW 488
41295: PUSH
41296: LD_VAR 0 11
41300: PPUSH
41301: LD_VAR 0 12
41305: PPUSH
41306: CALL_OW 428
41310: NOT
41311: AND
41312: IFFALSE 41335
// begin ComMoveXY ( tmp , _x , _y ) ;
41314: LD_VAR 0 13
41318: PPUSH
41319: LD_VAR 0 11
41323: PPUSH
41324: LD_VAR 0 12
41328: PPUSH
41329: CALL_OW 111
// break ;
41333: GO 41337
// end ; end ;
41335: GO 41222
41337: POP
41338: POP
// end ; end ;
41339: GO 40664
41341: POP
41342: POP
// end ;
41343: LD_VAR 0 8
41347: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41348: LD_INT 0
41350: PPUSH
// result := true ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_INT 1
41358: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41359: LD_VAR 0 2
41363: PUSH
41364: LD_INT 24
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41378
41370: LD_INT 33
41372: DOUBLE
41373: EQUAL
41374: IFTRUE 41378
41376: GO 41403
41378: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41379: LD_ADDR_VAR 0 3
41383: PUSH
41384: LD_INT 32
41386: PPUSH
41387: LD_VAR 0 1
41391: PPUSH
41392: CALL_OW 321
41396: PUSH
41397: LD_INT 2
41399: EQUAL
41400: ST_TO_ADDR
41401: GO 41719
41403: LD_INT 20
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41436
41411: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_INT 6
41419: PPUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: CALL_OW 321
41429: PUSH
41430: LD_INT 2
41432: EQUAL
41433: ST_TO_ADDR
41434: GO 41719
41436: LD_INT 22
41438: DOUBLE
41439: EQUAL
41440: IFTRUE 41450
41442: LD_INT 36
41444: DOUBLE
41445: EQUAL
41446: IFTRUE 41450
41448: GO 41475
41450: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 15
41458: PPUSH
41459: LD_VAR 0 1
41463: PPUSH
41464: CALL_OW 321
41468: PUSH
41469: LD_INT 2
41471: EQUAL
41472: ST_TO_ADDR
41473: GO 41719
41475: LD_INT 30
41477: DOUBLE
41478: EQUAL
41479: IFTRUE 41483
41481: GO 41508
41483: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41484: LD_ADDR_VAR 0 3
41488: PUSH
41489: LD_INT 20
41491: PPUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 321
41501: PUSH
41502: LD_INT 2
41504: EQUAL
41505: ST_TO_ADDR
41506: GO 41719
41508: LD_INT 28
41510: DOUBLE
41511: EQUAL
41512: IFTRUE 41522
41514: LD_INT 21
41516: DOUBLE
41517: EQUAL
41518: IFTRUE 41522
41520: GO 41547
41522: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_INT 21
41530: PPUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 321
41540: PUSH
41541: LD_INT 2
41543: EQUAL
41544: ST_TO_ADDR
41545: GO 41719
41547: LD_INT 16
41549: DOUBLE
41550: EQUAL
41551: IFTRUE 41555
41553: GO 41580
41555: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41556: LD_ADDR_VAR 0 3
41560: PUSH
41561: LD_INT 84
41563: PPUSH
41564: LD_VAR 0 1
41568: PPUSH
41569: CALL_OW 321
41573: PUSH
41574: LD_INT 2
41576: EQUAL
41577: ST_TO_ADDR
41578: GO 41719
41580: LD_INT 19
41582: DOUBLE
41583: EQUAL
41584: IFTRUE 41594
41586: LD_INT 23
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41619
41594: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_INT 83
41602: PPUSH
41603: LD_VAR 0 1
41607: PPUSH
41608: CALL_OW 321
41612: PUSH
41613: LD_INT 2
41615: EQUAL
41616: ST_TO_ADDR
41617: GO 41719
41619: LD_INT 17
41621: DOUBLE
41622: EQUAL
41623: IFTRUE 41627
41625: GO 41652
41627: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_INT 39
41635: PPUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 321
41645: PUSH
41646: LD_INT 2
41648: EQUAL
41649: ST_TO_ADDR
41650: GO 41719
41652: LD_INT 18
41654: DOUBLE
41655: EQUAL
41656: IFTRUE 41660
41658: GO 41685
41660: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_INT 40
41668: PPUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 321
41678: PUSH
41679: LD_INT 2
41681: EQUAL
41682: ST_TO_ADDR
41683: GO 41719
41685: LD_INT 27
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41693
41691: GO 41718
41693: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 35
41701: PPUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 321
41711: PUSH
41712: LD_INT 2
41714: EQUAL
41715: ST_TO_ADDR
41716: GO 41719
41718: POP
// end ;
41719: LD_VAR 0 3
41723: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41724: LD_INT 0
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// result := false ;
41737: LD_ADDR_VAR 0 6
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41745: LD_VAR 0 1
41749: NOT
41750: PUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: CALL_OW 266
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: IN
41771: NOT
41772: OR
41773: PUSH
41774: LD_VAR 0 2
41778: NOT
41779: OR
41780: PUSH
41781: LD_VAR 0 5
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 3
41797: PUSH
41798: LD_INT 4
41800: PUSH
41801: LD_INT 5
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: IN
41812: NOT
41813: OR
41814: PUSH
41815: LD_VAR 0 3
41819: PPUSH
41820: LD_VAR 0 4
41824: PPUSH
41825: CALL_OW 488
41829: NOT
41830: OR
41831: IFFALSE 41835
// exit ;
41833: GO 42571
// side := GetSide ( depot ) ;
41835: LD_ADDR_VAR 0 9
41839: PUSH
41840: LD_VAR 0 1
41844: PPUSH
41845: CALL_OW 255
41849: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41850: LD_VAR 0 9
41854: PPUSH
41855: LD_VAR 0 2
41859: PPUSH
41860: CALL 41348 0 2
41864: NOT
41865: IFFALSE 41869
// exit ;
41867: GO 42571
// pom := GetBase ( depot ) ;
41869: LD_ADDR_VAR 0 10
41873: PUSH
41874: LD_VAR 0 1
41878: PPUSH
41879: CALL_OW 274
41883: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41884: LD_ADDR_VAR 0 11
41888: PUSH
41889: LD_VAR 0 2
41893: PPUSH
41894: LD_VAR 0 1
41898: PPUSH
41899: CALL_OW 248
41903: PPUSH
41904: CALL_OW 450
41908: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41909: LD_VAR 0 10
41913: PPUSH
41914: LD_INT 1
41916: PPUSH
41917: CALL_OW 275
41921: PUSH
41922: LD_VAR 0 11
41926: PUSH
41927: LD_INT 1
41929: ARRAY
41930: GREATEREQUAL
41931: PUSH
41932: LD_VAR 0 10
41936: PPUSH
41937: LD_INT 2
41939: PPUSH
41940: CALL_OW 275
41944: PUSH
41945: LD_VAR 0 11
41949: PUSH
41950: LD_INT 2
41952: ARRAY
41953: GREATEREQUAL
41954: AND
41955: PUSH
41956: LD_VAR 0 10
41960: PPUSH
41961: LD_INT 3
41963: PPUSH
41964: CALL_OW 275
41968: PUSH
41969: LD_VAR 0 11
41973: PUSH
41974: LD_INT 3
41976: ARRAY
41977: GREATEREQUAL
41978: AND
41979: NOT
41980: IFFALSE 41984
// exit ;
41982: GO 42571
// if GetBType ( depot ) = b_depot then
41984: LD_VAR 0 1
41988: PPUSH
41989: CALL_OW 266
41993: PUSH
41994: LD_INT 0
41996: EQUAL
41997: IFFALSE 42009
// dist := 28 else
41999: LD_ADDR_VAR 0 14
42003: PUSH
42004: LD_INT 28
42006: ST_TO_ADDR
42007: GO 42017
// dist := 36 ;
42009: LD_ADDR_VAR 0 14
42013: PUSH
42014: LD_INT 36
42016: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42017: LD_VAR 0 1
42021: PPUSH
42022: LD_VAR 0 3
42026: PPUSH
42027: LD_VAR 0 4
42031: PPUSH
42032: CALL_OW 297
42036: PUSH
42037: LD_VAR 0 14
42041: GREATER
42042: IFFALSE 42046
// exit ;
42044: GO 42571
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42046: LD_ADDR_VAR 0 12
42050: PUSH
42051: LD_VAR 0 2
42055: PPUSH
42056: LD_VAR 0 3
42060: PPUSH
42061: LD_VAR 0 4
42065: PPUSH
42066: LD_VAR 0 5
42070: PPUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 248
42080: PPUSH
42081: LD_INT 0
42083: PPUSH
42084: CALL 42576 0 6
42088: ST_TO_ADDR
// if not hexes then
42089: LD_VAR 0 12
42093: NOT
42094: IFFALSE 42098
// exit ;
42096: GO 42571
// hex := GetHexInfo ( x , y ) ;
42098: LD_ADDR_VAR 0 15
42102: PUSH
42103: LD_VAR 0 3
42107: PPUSH
42108: LD_VAR 0 4
42112: PPUSH
42113: CALL_OW 546
42117: ST_TO_ADDR
// if hex [ 1 ] then
42118: LD_VAR 0 15
42122: PUSH
42123: LD_INT 1
42125: ARRAY
42126: IFFALSE 42130
// exit ;
42128: GO 42571
// height := hex [ 2 ] ;
42130: LD_ADDR_VAR 0 13
42134: PUSH
42135: LD_VAR 0 15
42139: PUSH
42140: LD_INT 2
42142: ARRAY
42143: ST_TO_ADDR
// for i = 1 to hexes do
42144: LD_ADDR_VAR 0 7
42148: PUSH
42149: DOUBLE
42150: LD_INT 1
42152: DEC
42153: ST_TO_ADDR
42154: LD_VAR 0 12
42158: PUSH
42159: FOR_TO
42160: IFFALSE 42490
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42162: LD_VAR 0 12
42166: PUSH
42167: LD_VAR 0 7
42171: ARRAY
42172: PUSH
42173: LD_INT 1
42175: ARRAY
42176: PPUSH
42177: LD_VAR 0 12
42181: PUSH
42182: LD_VAR 0 7
42186: ARRAY
42187: PUSH
42188: LD_INT 2
42190: ARRAY
42191: PPUSH
42192: CALL_OW 488
42196: NOT
42197: PUSH
42198: LD_VAR 0 12
42202: PUSH
42203: LD_VAR 0 7
42207: ARRAY
42208: PUSH
42209: LD_INT 1
42211: ARRAY
42212: PPUSH
42213: LD_VAR 0 12
42217: PUSH
42218: LD_VAR 0 7
42222: ARRAY
42223: PUSH
42224: LD_INT 2
42226: ARRAY
42227: PPUSH
42228: CALL_OW 428
42232: PUSH
42233: LD_INT 0
42235: GREATER
42236: OR
42237: PUSH
42238: LD_VAR 0 12
42242: PUSH
42243: LD_VAR 0 7
42247: ARRAY
42248: PUSH
42249: LD_INT 1
42251: ARRAY
42252: PPUSH
42253: LD_VAR 0 12
42257: PUSH
42258: LD_VAR 0 7
42262: ARRAY
42263: PUSH
42264: LD_INT 2
42266: ARRAY
42267: PPUSH
42268: CALL_OW 351
42272: OR
42273: IFFALSE 42279
// exit ;
42275: POP
42276: POP
42277: GO 42571
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42279: LD_ADDR_VAR 0 8
42283: PUSH
42284: LD_VAR 0 12
42288: PUSH
42289: LD_VAR 0 7
42293: ARRAY
42294: PUSH
42295: LD_INT 1
42297: ARRAY
42298: PPUSH
42299: LD_VAR 0 12
42303: PUSH
42304: LD_VAR 0 7
42308: ARRAY
42309: PUSH
42310: LD_INT 2
42312: ARRAY
42313: PPUSH
42314: CALL_OW 546
42318: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42319: LD_VAR 0 8
42323: PUSH
42324: LD_INT 1
42326: ARRAY
42327: PUSH
42328: LD_VAR 0 8
42332: PUSH
42333: LD_INT 2
42335: ARRAY
42336: PUSH
42337: LD_VAR 0 13
42341: PUSH
42342: LD_INT 2
42344: PLUS
42345: GREATER
42346: OR
42347: PUSH
42348: LD_VAR 0 8
42352: PUSH
42353: LD_INT 2
42355: ARRAY
42356: PUSH
42357: LD_VAR 0 13
42361: PUSH
42362: LD_INT 2
42364: MINUS
42365: LESS
42366: OR
42367: PUSH
42368: LD_VAR 0 8
42372: PUSH
42373: LD_INT 3
42375: ARRAY
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 8
42382: PUSH
42383: LD_INT 9
42385: PUSH
42386: LD_INT 10
42388: PUSH
42389: LD_INT 11
42391: PUSH
42392: LD_INT 12
42394: PUSH
42395: LD_INT 13
42397: PUSH
42398: LD_INT 16
42400: PUSH
42401: LD_INT 17
42403: PUSH
42404: LD_INT 18
42406: PUSH
42407: LD_INT 19
42409: PUSH
42410: LD_INT 20
42412: PUSH
42413: LD_INT 21
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: IN
42431: NOT
42432: OR
42433: PUSH
42434: LD_VAR 0 8
42438: PUSH
42439: LD_INT 5
42441: ARRAY
42442: NOT
42443: OR
42444: PUSH
42445: LD_VAR 0 8
42449: PUSH
42450: LD_INT 6
42452: ARRAY
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 7
42462: PUSH
42463: LD_INT 9
42465: PUSH
42466: LD_INT 10
42468: PUSH
42469: LD_INT 11
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: IN
42480: NOT
42481: OR
42482: IFFALSE 42488
// exit ;
42484: POP
42485: POP
42486: GO 42571
// end ;
42488: GO 42159
42490: POP
42491: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42492: LD_VAR 0 9
42496: PPUSH
42497: LD_VAR 0 3
42501: PPUSH
42502: LD_VAR 0 4
42506: PPUSH
42507: LD_INT 20
42509: PPUSH
42510: CALL 34523 0 4
42514: PUSH
42515: LD_INT 4
42517: ARRAY
42518: IFFALSE 42522
// exit ;
42520: GO 42571
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42522: LD_VAR 0 2
42526: PUSH
42527: LD_INT 29
42529: PUSH
42530: LD_INT 30
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: IN
42537: PUSH
42538: LD_VAR 0 3
42542: PPUSH
42543: LD_VAR 0 4
42547: PPUSH
42548: LD_VAR 0 9
42552: PPUSH
42553: CALL_OW 440
42557: NOT
42558: AND
42559: IFFALSE 42563
// exit ;
42561: GO 42571
// result := true ;
42563: LD_ADDR_VAR 0 6
42567: PUSH
42568: LD_INT 1
42570: ST_TO_ADDR
// end ;
42571: LD_VAR 0 6
42575: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42576: LD_INT 0
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
// result = [ ] ;
42636: LD_ADDR_VAR 0 7
42640: PUSH
42641: EMPTY
42642: ST_TO_ADDR
// temp_list = [ ] ;
42643: LD_ADDR_VAR 0 9
42647: PUSH
42648: EMPTY
42649: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42650: LD_VAR 0 4
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: LD_INT 4
42669: PUSH
42670: LD_INT 5
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: IN
42681: NOT
42682: PUSH
42683: LD_VAR 0 1
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: IN
42698: PUSH
42699: LD_VAR 0 5
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: IN
42718: NOT
42719: AND
42720: OR
42721: IFFALSE 42725
// exit ;
42723: GO 61116
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42725: LD_VAR 0 1
42729: PUSH
42730: LD_INT 6
42732: PUSH
42733: LD_INT 7
42735: PUSH
42736: LD_INT 8
42738: PUSH
42739: LD_INT 13
42741: PUSH
42742: LD_INT 12
42744: PUSH
42745: LD_INT 15
42747: PUSH
42748: LD_INT 11
42750: PUSH
42751: LD_INT 14
42753: PUSH
42754: LD_INT 10
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: IN
42768: IFFALSE 42778
// btype = b_lab ;
42770: LD_ADDR_VAR 0 1
42774: PUSH
42775: LD_INT 6
42777: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42778: LD_VAR 0 6
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: IN
42797: NOT
42798: PUSH
42799: LD_VAR 0 1
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 6
42818: PUSH
42819: LD_INT 36
42821: PUSH
42822: LD_INT 4
42824: PUSH
42825: LD_INT 5
42827: PUSH
42828: LD_INT 31
42830: PUSH
42831: LD_INT 32
42833: PUSH
42834: LD_INT 33
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: IN
42850: NOT
42851: PUSH
42852: LD_VAR 0 6
42856: PUSH
42857: LD_INT 1
42859: EQUAL
42860: AND
42861: OR
42862: PUSH
42863: LD_VAR 0 1
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: IN
42878: NOT
42879: PUSH
42880: LD_VAR 0 6
42884: PUSH
42885: LD_INT 2
42887: EQUAL
42888: AND
42889: OR
42890: IFFALSE 42900
// mode = 0 ;
42892: LD_ADDR_VAR 0 6
42896: PUSH
42897: LD_INT 0
42899: ST_TO_ADDR
// case mode of 0 :
42900: LD_VAR 0 6
42904: PUSH
42905: LD_INT 0
42907: DOUBLE
42908: EQUAL
42909: IFTRUE 42913
42911: GO 54366
42913: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42914: LD_ADDR_VAR 0 11
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 2
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 3
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43107: LD_ADDR_VAR 0 12
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43303: LD_ADDR_VAR 0 13
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 3
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: LD_INT 3
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43502: LD_ADDR_VAR 0 14
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43698: LD_ADDR_VAR 0 15
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 3
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 3
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43891: LD_ADDR_VAR 0 16
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 3
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44084: LD_ADDR_VAR 0 17
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44314: LD_ADDR_VAR 0 18
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44544: LD_ADDR_VAR 0 19
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44774: LD_ADDR_VAR 0 20
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45004: LD_ADDR_VAR 0 21
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45234: LD_ADDR_VAR 0 22
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45464: LD_ADDR_VAR 0 23
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 3
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 3
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45744: LD_ADDR_VAR 0 24
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46020: LD_ADDR_VAR 0 25
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46294: LD_ADDR_VAR 0 26
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46570: LD_ADDR_VAR 0 27
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46850: LD_ADDR_VAR 0 28
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 3
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47132: LD_ADDR_VAR 0 29
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47411: LD_ADDR_VAR 0 30
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 3
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47689: LD_ADDR_VAR 0 31
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47967: LD_ADDR_VAR 0 32
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48245: LD_ADDR_VAR 0 33
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48524: LD_ADDR_VAR 0 34
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48804: LD_ADDR_VAR 0 35
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48916: LD_ADDR_VAR 0 36
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49028: LD_ADDR_VAR 0 37
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49140: LD_ADDR_VAR 0 38
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49252: LD_ADDR_VAR 0 39
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49364: LD_ADDR_VAR 0 40
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49476: LD_ADDR_VAR 0 41
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 3
49750: NEG
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 3
49785: NEG
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49826: LD_ADDR_VAR 0 42
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 3
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50176: LD_ADDR_VAR 0 43
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50524: LD_ADDR_VAR 0 44
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 3
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50874: LD_ADDR_VAR 0 45
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 3
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: NEG
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51224: LD_ADDR_VAR 0 46
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 3
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51572: LD_ADDR_VAR 0 47
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51723: LD_ADDR_VAR 0 48
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51870: LD_ADDR_VAR 0 49
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52014: LD_ADDR_VAR 0 50
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52158: LD_ADDR_VAR 0 51
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52305: LD_ADDR_VAR 0 52
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52456: LD_ADDR_VAR 0 53
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52686: LD_ADDR_VAR 0 54
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52916: LD_ADDR_VAR 0 55
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53146: LD_ADDR_VAR 0 56
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53376: LD_ADDR_VAR 0 57
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53606: LD_ADDR_VAR 0 58
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53836: LD_ADDR_VAR 0 59
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53924: LD_ADDR_VAR 0 60
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54012: LD_ADDR_VAR 0 61
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54100: LD_ADDR_VAR 0 62
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54188: LD_ADDR_VAR 0 63
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54276: LD_ADDR_VAR 0 64
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// end ; 1 :
54364: GO 60261
54366: LD_INT 1
54368: DOUBLE
54369: EQUAL
54370: IFTRUE 54374
54372: GO 56997
54374: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54375: LD_ADDR_VAR 0 11
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54419: LD_ADDR_VAR 0 12
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54460: LD_ADDR_VAR 0 13
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54500: LD_ADDR_VAR 0 14
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54541: LD_ADDR_VAR 0 15
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54585: LD_ADDR_VAR 0 16
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54631: LD_ADDR_VAR 0 17
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54675: LD_ADDR_VAR 0 18
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54716: LD_ADDR_VAR 0 19
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: LD_INT 3
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54756: LD_ADDR_VAR 0 20
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 3
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54797: LD_ADDR_VAR 0 21
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54841: LD_ADDR_VAR 0 22
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54887: LD_ADDR_VAR 0 23
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54931: LD_ADDR_VAR 0 24
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 4
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54972: LD_ADDR_VAR 0 25
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 4
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: LD_INT 4
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55012: LD_ADDR_VAR 0 26
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 4
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55053: LD_ADDR_VAR 0 27
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 4
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55097: LD_ADDR_VAR 0 28
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: NEG
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55143: LD_ADDR_VAR 0 29
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 5
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 5
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 4
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 6
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 6
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 5
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55298: LD_ADDR_VAR 0 30
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 4
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 5
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 5
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 5
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 6
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 6
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55441: LD_ADDR_VAR 0 31
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 4
55488: PUSH
55489: LD_INT 4
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 4
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 5
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 5
55518: PUSH
55519: LD_INT 5
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 4
55528: PUSH
55529: LD_INT 5
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 6
55538: PUSH
55539: LD_INT 5
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 6
55548: PUSH
55549: LD_INT 6
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 5
55558: PUSH
55559: LD_INT 6
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55580: LD_ADDR_VAR 0 32
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 3
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 4
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 5
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 4
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 6
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 6
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55723: LD_ADDR_VAR 0 33
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 4
55775: NEG
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 4
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 4
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 5
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 5
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 5
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 6
55843: NEG
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 6
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55878: LD_ADDR_VAR 0 34
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: LD_INT 4
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 4
55933: NEG
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 4
55957: NEG
55958: PUSH
55959: LD_INT 5
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: NEG
55982: PUSH
55983: LD_INT 5
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 5
55993: NEG
55994: PUSH
55995: LD_INT 6
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 6
56005: NEG
56006: PUSH
56007: LD_INT 5
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 6
56017: NEG
56018: PUSH
56019: LD_INT 6
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56041: LD_ADDR_VAR 0 41
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56085: LD_ADDR_VAR 0 42
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56126: LD_ADDR_VAR 0 43
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56166: LD_ADDR_VAR 0 44
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 3
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56207: LD_ADDR_VAR 0 45
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56251: LD_ADDR_VAR 0 46
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56297: LD_ADDR_VAR 0 47
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56330: LD_ADDR_VAR 0 48
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56361: LD_ADDR_VAR 0 49
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56390: LD_ADDR_VAR 0 50
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56419: LD_ADDR_VAR 0 51
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56450: LD_ADDR_VAR 0 52
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56483: LD_ADDR_VAR 0 53
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56527: LD_ADDR_VAR 0 54
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56568: LD_ADDR_VAR 0 55
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56608: LD_ADDR_VAR 0 56
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56649: LD_ADDR_VAR 0 57
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56693: LD_ADDR_VAR 0 58
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: LD_INT 3
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56739: LD_ADDR_VAR 0 59
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56783: LD_ADDR_VAR 0 60
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56824: LD_ADDR_VAR 0 61
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56864: LD_ADDR_VAR 0 62
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56905: LD_ADDR_VAR 0 63
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56949: LD_ADDR_VAR 0 64
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// end ; 2 :
56995: GO 60261
56997: LD_INT 2
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57005
57003: GO 60260
57005: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57006: LD_ADDR_VAR 0 29
57010: PUSH
57011: LD_INT 4
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 5
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 4
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 5
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 4
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: LD_INT 4
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 4
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 3
57289: NEG
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 4
57345: NEG
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 4
57356: NEG
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 4
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 4
57391: NEG
57392: PUSH
57393: LD_INT 4
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 4
57403: NEG
57404: PUSH
57405: LD_INT 5
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 4
57439: NEG
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 5
57451: NEG
57452: PUSH
57453: LD_INT 4
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 5
57463: NEG
57464: PUSH
57465: LD_INT 5
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: LD_INT 5
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 5
57487: NEG
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57544: LD_ADDR_VAR 0 30
57548: PUSH
57549: LD_INT 4
57551: PUSH
57552: LD_INT 4
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 5
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: LD_INT 5
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 4
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 5
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 4
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 4
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 4
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 4
57734: NEG
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 4
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 5
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 5
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 5
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 3
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: LD_INT 4
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: LD_INT 4
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 4
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 5
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 4
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 4
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 5
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: LD_INT 5
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58091: LD_ADDR_VAR 0 31
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: LD_INT 4
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: NEG
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 4
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 4
58293: NEG
58294: PUSH
58295: LD_INT 4
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 4
58305: NEG
58306: PUSH
58307: LD_INT 5
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: LD_INT 4
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 3
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 4
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 5
58353: NEG
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 5
58365: NEG
58366: PUSH
58367: LD_INT 5
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: LD_INT 5
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 5
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 3
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 4
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: LD_INT 3
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 5
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 5
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 5
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58641: LD_ADDR_VAR 0 32
58645: PUSH
58646: LD_INT 4
58648: NEG
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 4
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 5
58704: NEG
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 5
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 5
58727: NEG
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: NEG
58763: PUSH
58764: LD_INT 4
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 4
58822: NEG
58823: PUSH
58824: LD_INT 4
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 4
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 4
58846: NEG
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 4
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 5
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 4
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 3
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 4
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 5
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: LD_INT 5
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 4
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 5
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 5
59083: PUSH
59084: LD_INT 5
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: LD_INT 5
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 4
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 5
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 5
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59188: LD_ADDR_VAR 0 33
59192: PUSH
59193: LD_INT 4
59195: NEG
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 4
59207: NEG
59208: PUSH
59209: LD_INT 5
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 3
59219: NEG
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: NEG
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 5
59255: NEG
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 5
59267: NEG
59268: PUSH
59269: LD_INT 5
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: LD_INT 5
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 5
59291: NEG
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 4
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 4
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: LD_INT 4
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 5
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 5
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 4
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: LD_INT 3
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 4
59528: PUSH
59529: LD_INT 4
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: LD_INT 4
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 4
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 5
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 5
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 5
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59726: LD_ADDR_VAR 0 34
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 4
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 5
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 4
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 5
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 4
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 4
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: LD_INT 4
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 5
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 5
59958: PUSH
59959: LD_INT 5
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 4
59968: PUSH
59969: LD_INT 5
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: PUSH
59979: LD_INT 4
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 3
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 5
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 5
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 4
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 4
60111: NEG
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 3
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 5
60167: NEG
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 5
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: NEG
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: NEG
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// end ; end ;
60258: GO 60261
60260: POP
// case btype of b_depot , b_warehouse :
60261: LD_VAR 0 1
60265: PUSH
60266: LD_INT 0
60268: DOUBLE
60269: EQUAL
60270: IFTRUE 60280
60272: LD_INT 1
60274: DOUBLE
60275: EQUAL
60276: IFTRUE 60280
60278: GO 60481
60280: POP
// case nation of nation_american :
60281: LD_VAR 0 5
60285: PUSH
60286: LD_INT 1
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60294
60292: GO 60350
60294: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60295: LD_ADDR_VAR 0 9
60299: PUSH
60300: LD_VAR 0 11
60304: PUSH
60305: LD_VAR 0 12
60309: PUSH
60310: LD_VAR 0 13
60314: PUSH
60315: LD_VAR 0 14
60319: PUSH
60320: LD_VAR 0 15
60324: PUSH
60325: LD_VAR 0 16
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: PUSH
60338: LD_VAR 0 4
60342: PUSH
60343: LD_INT 1
60345: PLUS
60346: ARRAY
60347: ST_TO_ADDR
60348: GO 60479
60350: LD_INT 2
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60358
60356: GO 60414
60358: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60359: LD_ADDR_VAR 0 9
60363: PUSH
60364: LD_VAR 0 17
60368: PUSH
60369: LD_VAR 0 18
60373: PUSH
60374: LD_VAR 0 19
60378: PUSH
60379: LD_VAR 0 20
60383: PUSH
60384: LD_VAR 0 21
60388: PUSH
60389: LD_VAR 0 22
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: PUSH
60402: LD_VAR 0 4
60406: PUSH
60407: LD_INT 1
60409: PLUS
60410: ARRAY
60411: ST_TO_ADDR
60412: GO 60479
60414: LD_INT 3
60416: DOUBLE
60417: EQUAL
60418: IFTRUE 60422
60420: GO 60478
60422: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60423: LD_ADDR_VAR 0 9
60427: PUSH
60428: LD_VAR 0 23
60432: PUSH
60433: LD_VAR 0 24
60437: PUSH
60438: LD_VAR 0 25
60442: PUSH
60443: LD_VAR 0 26
60447: PUSH
60448: LD_VAR 0 27
60452: PUSH
60453: LD_VAR 0 28
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: PUSH
60466: LD_VAR 0 4
60470: PUSH
60471: LD_INT 1
60473: PLUS
60474: ARRAY
60475: ST_TO_ADDR
60476: GO 60479
60478: POP
60479: GO 61034
60481: LD_INT 2
60483: DOUBLE
60484: EQUAL
60485: IFTRUE 60495
60487: LD_INT 3
60489: DOUBLE
60490: EQUAL
60491: IFTRUE 60495
60493: GO 60551
60495: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60496: LD_ADDR_VAR 0 9
60500: PUSH
60501: LD_VAR 0 29
60505: PUSH
60506: LD_VAR 0 30
60510: PUSH
60511: LD_VAR 0 31
60515: PUSH
60516: LD_VAR 0 32
60520: PUSH
60521: LD_VAR 0 33
60525: PUSH
60526: LD_VAR 0 34
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: PUSH
60539: LD_VAR 0 4
60543: PUSH
60544: LD_INT 1
60546: PLUS
60547: ARRAY
60548: ST_TO_ADDR
60549: GO 61034
60551: LD_INT 16
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60613
60557: LD_INT 17
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60613
60563: LD_INT 18
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60613
60569: LD_INT 19
60571: DOUBLE
60572: EQUAL
60573: IFTRUE 60613
60575: LD_INT 22
60577: DOUBLE
60578: EQUAL
60579: IFTRUE 60613
60581: LD_INT 20
60583: DOUBLE
60584: EQUAL
60585: IFTRUE 60613
60587: LD_INT 21
60589: DOUBLE
60590: EQUAL
60591: IFTRUE 60613
60593: LD_INT 23
60595: DOUBLE
60596: EQUAL
60597: IFTRUE 60613
60599: LD_INT 24
60601: DOUBLE
60602: EQUAL
60603: IFTRUE 60613
60605: LD_INT 25
60607: DOUBLE
60608: EQUAL
60609: IFTRUE 60613
60611: GO 60669
60613: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60614: LD_ADDR_VAR 0 9
60618: PUSH
60619: LD_VAR 0 35
60623: PUSH
60624: LD_VAR 0 36
60628: PUSH
60629: LD_VAR 0 37
60633: PUSH
60634: LD_VAR 0 38
60638: PUSH
60639: LD_VAR 0 39
60643: PUSH
60644: LD_VAR 0 40
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: PUSH
60657: LD_VAR 0 4
60661: PUSH
60662: LD_INT 1
60664: PLUS
60665: ARRAY
60666: ST_TO_ADDR
60667: GO 61034
60669: LD_INT 6
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60725
60675: LD_INT 7
60677: DOUBLE
60678: EQUAL
60679: IFTRUE 60725
60681: LD_INT 8
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60725
60687: LD_INT 13
60689: DOUBLE
60690: EQUAL
60691: IFTRUE 60725
60693: LD_INT 12
60695: DOUBLE
60696: EQUAL
60697: IFTRUE 60725
60699: LD_INT 15
60701: DOUBLE
60702: EQUAL
60703: IFTRUE 60725
60705: LD_INT 11
60707: DOUBLE
60708: EQUAL
60709: IFTRUE 60725
60711: LD_INT 14
60713: DOUBLE
60714: EQUAL
60715: IFTRUE 60725
60717: LD_INT 10
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60725
60723: GO 60781
60725: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60726: LD_ADDR_VAR 0 9
60730: PUSH
60731: LD_VAR 0 41
60735: PUSH
60736: LD_VAR 0 42
60740: PUSH
60741: LD_VAR 0 43
60745: PUSH
60746: LD_VAR 0 44
60750: PUSH
60751: LD_VAR 0 45
60755: PUSH
60756: LD_VAR 0 46
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: PUSH
60769: LD_VAR 0 4
60773: PUSH
60774: LD_INT 1
60776: PLUS
60777: ARRAY
60778: ST_TO_ADDR
60779: GO 61034
60781: LD_INT 36
60783: DOUBLE
60784: EQUAL
60785: IFTRUE 60789
60787: GO 60845
60789: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60790: LD_ADDR_VAR 0 9
60794: PUSH
60795: LD_VAR 0 47
60799: PUSH
60800: LD_VAR 0 48
60804: PUSH
60805: LD_VAR 0 49
60809: PUSH
60810: LD_VAR 0 50
60814: PUSH
60815: LD_VAR 0 51
60819: PUSH
60820: LD_VAR 0 52
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: PUSH
60833: LD_VAR 0 4
60837: PUSH
60838: LD_INT 1
60840: PLUS
60841: ARRAY
60842: ST_TO_ADDR
60843: GO 61034
60845: LD_INT 4
60847: DOUBLE
60848: EQUAL
60849: IFTRUE 60871
60851: LD_INT 5
60853: DOUBLE
60854: EQUAL
60855: IFTRUE 60871
60857: LD_INT 34
60859: DOUBLE
60860: EQUAL
60861: IFTRUE 60871
60863: LD_INT 37
60865: DOUBLE
60866: EQUAL
60867: IFTRUE 60871
60869: GO 60927
60871: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60872: LD_ADDR_VAR 0 9
60876: PUSH
60877: LD_VAR 0 53
60881: PUSH
60882: LD_VAR 0 54
60886: PUSH
60887: LD_VAR 0 55
60891: PUSH
60892: LD_VAR 0 56
60896: PUSH
60897: LD_VAR 0 57
60901: PUSH
60902: LD_VAR 0 58
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: PUSH
60915: LD_VAR 0 4
60919: PUSH
60920: LD_INT 1
60922: PLUS
60923: ARRAY
60924: ST_TO_ADDR
60925: GO 61034
60927: LD_INT 31
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60977
60933: LD_INT 32
60935: DOUBLE
60936: EQUAL
60937: IFTRUE 60977
60939: LD_INT 33
60941: DOUBLE
60942: EQUAL
60943: IFTRUE 60977
60945: LD_INT 27
60947: DOUBLE
60948: EQUAL
60949: IFTRUE 60977
60951: LD_INT 26
60953: DOUBLE
60954: EQUAL
60955: IFTRUE 60977
60957: LD_INT 28
60959: DOUBLE
60960: EQUAL
60961: IFTRUE 60977
60963: LD_INT 29
60965: DOUBLE
60966: EQUAL
60967: IFTRUE 60977
60969: LD_INT 30
60971: DOUBLE
60972: EQUAL
60973: IFTRUE 60977
60975: GO 61033
60977: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60978: LD_ADDR_VAR 0 9
60982: PUSH
60983: LD_VAR 0 59
60987: PUSH
60988: LD_VAR 0 60
60992: PUSH
60993: LD_VAR 0 61
60997: PUSH
60998: LD_VAR 0 62
61002: PUSH
61003: LD_VAR 0 63
61007: PUSH
61008: LD_VAR 0 64
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: PUSH
61021: LD_VAR 0 4
61025: PUSH
61026: LD_INT 1
61028: PLUS
61029: ARRAY
61030: ST_TO_ADDR
61031: GO 61034
61033: POP
// temp_list2 = [ ] ;
61034: LD_ADDR_VAR 0 10
61038: PUSH
61039: EMPTY
61040: ST_TO_ADDR
// for i in temp_list do
61041: LD_ADDR_VAR 0 8
61045: PUSH
61046: LD_VAR 0 9
61050: PUSH
61051: FOR_IN
61052: IFFALSE 61104
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61054: LD_ADDR_VAR 0 10
61058: PUSH
61059: LD_VAR 0 10
61063: PUSH
61064: LD_VAR 0 8
61068: PUSH
61069: LD_INT 1
61071: ARRAY
61072: PUSH
61073: LD_VAR 0 2
61077: PLUS
61078: PUSH
61079: LD_VAR 0 8
61083: PUSH
61084: LD_INT 2
61086: ARRAY
61087: PUSH
61088: LD_VAR 0 3
61092: PLUS
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: EMPTY
61099: LIST
61100: ADD
61101: ST_TO_ADDR
61102: GO 61051
61104: POP
61105: POP
// result = temp_list2 ;
61106: LD_ADDR_VAR 0 7
61110: PUSH
61111: LD_VAR 0 10
61115: ST_TO_ADDR
// end ;
61116: LD_VAR 0 7
61120: RET
// export function EnemyInRange ( unit , dist ) ; begin
61121: LD_INT 0
61123: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61124: LD_ADDR_VAR 0 3
61128: PUSH
61129: LD_VAR 0 1
61133: PPUSH
61134: CALL_OW 255
61138: PPUSH
61139: LD_VAR 0 1
61143: PPUSH
61144: CALL_OW 250
61148: PPUSH
61149: LD_VAR 0 1
61153: PPUSH
61154: CALL_OW 251
61158: PPUSH
61159: LD_VAR 0 2
61163: PPUSH
61164: CALL 34523 0 4
61168: PUSH
61169: LD_INT 4
61171: ARRAY
61172: ST_TO_ADDR
// end ;
61173: LD_VAR 0 3
61177: RET
// export function PlayerSeeMe ( unit ) ; begin
61178: LD_INT 0
61180: PPUSH
// result := See ( your_side , unit ) ;
61181: LD_ADDR_VAR 0 2
61185: PUSH
61186: LD_OWVAR 2
61190: PPUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: CALL_OW 292
61200: ST_TO_ADDR
// end ;
61201: LD_VAR 0 2
61205: RET
// export function ReverseDir ( unit ) ; begin
61206: LD_INT 0
61208: PPUSH
// if not unit then
61209: LD_VAR 0 1
61213: NOT
61214: IFFALSE 61218
// exit ;
61216: GO 61241
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61218: LD_ADDR_VAR 0 2
61222: PUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 254
61232: PUSH
61233: LD_INT 3
61235: PLUS
61236: PUSH
61237: LD_INT 6
61239: MOD
61240: ST_TO_ADDR
// end ;
61241: LD_VAR 0 2
61245: RET
// export function ReverseArray ( array ) ; var i ; begin
61246: LD_INT 0
61248: PPUSH
61249: PPUSH
// if not array then
61250: LD_VAR 0 1
61254: NOT
61255: IFFALSE 61259
// exit ;
61257: GO 61314
// result := [ ] ;
61259: LD_ADDR_VAR 0 2
61263: PUSH
61264: EMPTY
61265: ST_TO_ADDR
// for i := array downto 1 do
61266: LD_ADDR_VAR 0 3
61270: PUSH
61271: DOUBLE
61272: LD_VAR 0 1
61276: INC
61277: ST_TO_ADDR
61278: LD_INT 1
61280: PUSH
61281: FOR_DOWNTO
61282: IFFALSE 61312
// result := Join ( result , array [ i ] ) ;
61284: LD_ADDR_VAR 0 2
61288: PUSH
61289: LD_VAR 0 2
61293: PPUSH
61294: LD_VAR 0 1
61298: PUSH
61299: LD_VAR 0 3
61303: ARRAY
61304: PPUSH
61305: CALL 65939 0 2
61309: ST_TO_ADDR
61310: GO 61281
61312: POP
61313: POP
// end ;
61314: LD_VAR 0 2
61318: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61319: LD_INT 0
61321: PPUSH
61322: PPUSH
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
// if not unit or not hexes then
61327: LD_VAR 0 1
61331: NOT
61332: PUSH
61333: LD_VAR 0 2
61337: NOT
61338: OR
61339: IFFALSE 61343
// exit ;
61341: GO 61466
// dist := 9999 ;
61343: LD_ADDR_VAR 0 5
61347: PUSH
61348: LD_INT 9999
61350: ST_TO_ADDR
// for i = 1 to hexes do
61351: LD_ADDR_VAR 0 4
61355: PUSH
61356: DOUBLE
61357: LD_INT 1
61359: DEC
61360: ST_TO_ADDR
61361: LD_VAR 0 2
61365: PUSH
61366: FOR_TO
61367: IFFALSE 61454
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61369: LD_ADDR_VAR 0 6
61373: PUSH
61374: LD_VAR 0 1
61378: PPUSH
61379: LD_VAR 0 2
61383: PUSH
61384: LD_VAR 0 4
61388: ARRAY
61389: PUSH
61390: LD_INT 1
61392: ARRAY
61393: PPUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_VAR 0 4
61403: ARRAY
61404: PUSH
61405: LD_INT 2
61407: ARRAY
61408: PPUSH
61409: CALL_OW 297
61413: ST_TO_ADDR
// if tdist < dist then
61414: LD_VAR 0 6
61418: PUSH
61419: LD_VAR 0 5
61423: LESS
61424: IFFALSE 61452
// begin hex := hexes [ i ] ;
61426: LD_ADDR_VAR 0 8
61430: PUSH
61431: LD_VAR 0 2
61435: PUSH
61436: LD_VAR 0 4
61440: ARRAY
61441: ST_TO_ADDR
// dist := tdist ;
61442: LD_ADDR_VAR 0 5
61446: PUSH
61447: LD_VAR 0 6
61451: ST_TO_ADDR
// end ; end ;
61452: GO 61366
61454: POP
61455: POP
// result := hex ;
61456: LD_ADDR_VAR 0 3
61460: PUSH
61461: LD_VAR 0 8
61465: ST_TO_ADDR
// end ;
61466: LD_VAR 0 3
61470: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61475: LD_VAR 0 1
61479: NOT
61480: PUSH
61481: LD_VAR 0 1
61485: PUSH
61486: LD_INT 21
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 23
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PPUSH
61510: CALL_OW 69
61514: IN
61515: NOT
61516: OR
61517: IFFALSE 61521
// exit ;
61519: GO 61568
// for i = 1 to 3 do
61521: LD_ADDR_VAR 0 3
61525: PUSH
61526: DOUBLE
61527: LD_INT 1
61529: DEC
61530: ST_TO_ADDR
61531: LD_INT 3
61533: PUSH
61534: FOR_TO
61535: IFFALSE 61566
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61537: LD_VAR 0 1
61541: PPUSH
61542: CALL_OW 250
61546: PPUSH
61547: LD_VAR 0 1
61551: PPUSH
61552: CALL_OW 251
61556: PPUSH
61557: LD_INT 1
61559: PPUSH
61560: CALL_OW 453
61564: GO 61534
61566: POP
61567: POP
// end ;
61568: LD_VAR 0 2
61572: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61573: LD_INT 0
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
61579: PPUSH
61580: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61581: LD_VAR 0 1
61585: NOT
61586: PUSH
61587: LD_VAR 0 2
61591: NOT
61592: OR
61593: PUSH
61594: LD_VAR 0 1
61598: PPUSH
61599: CALL_OW 314
61603: OR
61604: IFFALSE 61608
// exit ;
61606: GO 62049
// x := GetX ( enemy_unit ) ;
61608: LD_ADDR_VAR 0 7
61612: PUSH
61613: LD_VAR 0 2
61617: PPUSH
61618: CALL_OW 250
61622: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61623: LD_ADDR_VAR 0 8
61627: PUSH
61628: LD_VAR 0 2
61632: PPUSH
61633: CALL_OW 251
61637: ST_TO_ADDR
// if not x or not y then
61638: LD_VAR 0 7
61642: NOT
61643: PUSH
61644: LD_VAR 0 8
61648: NOT
61649: OR
61650: IFFALSE 61654
// exit ;
61652: GO 62049
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61654: LD_ADDR_VAR 0 6
61658: PUSH
61659: LD_VAR 0 7
61663: PPUSH
61664: LD_INT 0
61666: PPUSH
61667: LD_INT 4
61669: PPUSH
61670: CALL_OW 272
61674: PUSH
61675: LD_VAR 0 8
61679: PPUSH
61680: LD_INT 0
61682: PPUSH
61683: LD_INT 4
61685: PPUSH
61686: CALL_OW 273
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_VAR 0 7
61699: PPUSH
61700: LD_INT 1
61702: PPUSH
61703: LD_INT 4
61705: PPUSH
61706: CALL_OW 272
61710: PUSH
61711: LD_VAR 0 8
61715: PPUSH
61716: LD_INT 1
61718: PPUSH
61719: LD_INT 4
61721: PPUSH
61722: CALL_OW 273
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_VAR 0 7
61735: PPUSH
61736: LD_INT 2
61738: PPUSH
61739: LD_INT 4
61741: PPUSH
61742: CALL_OW 272
61746: PUSH
61747: LD_VAR 0 8
61751: PPUSH
61752: LD_INT 2
61754: PPUSH
61755: LD_INT 4
61757: PPUSH
61758: CALL_OW 273
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_VAR 0 7
61771: PPUSH
61772: LD_INT 3
61774: PPUSH
61775: LD_INT 4
61777: PPUSH
61778: CALL_OW 272
61782: PUSH
61783: LD_VAR 0 8
61787: PPUSH
61788: LD_INT 3
61790: PPUSH
61791: LD_INT 4
61793: PPUSH
61794: CALL_OW 273
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_VAR 0 7
61807: PPUSH
61808: LD_INT 4
61810: PPUSH
61811: LD_INT 4
61813: PPUSH
61814: CALL_OW 272
61818: PUSH
61819: LD_VAR 0 8
61823: PPUSH
61824: LD_INT 4
61826: PPUSH
61827: LD_INT 4
61829: PPUSH
61830: CALL_OW 273
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_VAR 0 7
61843: PPUSH
61844: LD_INT 5
61846: PPUSH
61847: LD_INT 4
61849: PPUSH
61850: CALL_OW 272
61854: PUSH
61855: LD_VAR 0 8
61859: PPUSH
61860: LD_INT 5
61862: PPUSH
61863: LD_INT 4
61865: PPUSH
61866: CALL_OW 273
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: ST_TO_ADDR
// for i = tmp downto 1 do
61883: LD_ADDR_VAR 0 4
61887: PUSH
61888: DOUBLE
61889: LD_VAR 0 6
61893: INC
61894: ST_TO_ADDR
61895: LD_INT 1
61897: PUSH
61898: FOR_DOWNTO
61899: IFFALSE 62000
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61901: LD_VAR 0 6
61905: PUSH
61906: LD_VAR 0 4
61910: ARRAY
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PPUSH
61916: LD_VAR 0 6
61920: PUSH
61921: LD_VAR 0 4
61925: ARRAY
61926: PUSH
61927: LD_INT 2
61929: ARRAY
61930: PPUSH
61931: CALL_OW 488
61935: NOT
61936: PUSH
61937: LD_VAR 0 6
61941: PUSH
61942: LD_VAR 0 4
61946: ARRAY
61947: PUSH
61948: LD_INT 1
61950: ARRAY
61951: PPUSH
61952: LD_VAR 0 6
61956: PUSH
61957: LD_VAR 0 4
61961: ARRAY
61962: PUSH
61963: LD_INT 2
61965: ARRAY
61966: PPUSH
61967: CALL_OW 428
61971: PUSH
61972: LD_INT 0
61974: NONEQUAL
61975: OR
61976: IFFALSE 61998
// tmp := Delete ( tmp , i ) ;
61978: LD_ADDR_VAR 0 6
61982: PUSH
61983: LD_VAR 0 6
61987: PPUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: CALL_OW 3
61997: ST_TO_ADDR
61998: GO 61898
62000: POP
62001: POP
// j := GetClosestHex ( unit , tmp ) ;
62002: LD_ADDR_VAR 0 5
62006: PUSH
62007: LD_VAR 0 1
62011: PPUSH
62012: LD_VAR 0 6
62016: PPUSH
62017: CALL 61319 0 2
62021: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62022: LD_VAR 0 1
62026: PPUSH
62027: LD_VAR 0 5
62031: PUSH
62032: LD_INT 1
62034: ARRAY
62035: PPUSH
62036: LD_VAR 0 5
62040: PUSH
62041: LD_INT 2
62043: ARRAY
62044: PPUSH
62045: CALL_OW 111
// end ;
62049: LD_VAR 0 3
62053: RET
// export function PrepareApemanSoldier ( ) ; begin
62054: LD_INT 0
62056: PPUSH
// uc_nation := 0 ;
62057: LD_ADDR_OWVAR 21
62061: PUSH
62062: LD_INT 0
62064: ST_TO_ADDR
// hc_sex := sex_male ;
62065: LD_ADDR_OWVAR 27
62069: PUSH
62070: LD_INT 1
62072: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62073: LD_ADDR_OWVAR 28
62077: PUSH
62078: LD_INT 15
62080: ST_TO_ADDR
// hc_gallery :=  ;
62081: LD_ADDR_OWVAR 33
62085: PUSH
62086: LD_STRING 
62088: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62089: LD_ADDR_OWVAR 31
62093: PUSH
62094: LD_INT 0
62096: PPUSH
62097: LD_INT 3
62099: PPUSH
62100: CALL_OW 12
62104: PUSH
62105: LD_INT 0
62107: PPUSH
62108: LD_INT 3
62110: PPUSH
62111: CALL_OW 12
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: ST_TO_ADDR
// end ;
62128: LD_VAR 0 1
62132: RET
// export function PrepareApemanEngineer ( ) ; begin
62133: LD_INT 0
62135: PPUSH
// uc_nation := 0 ;
62136: LD_ADDR_OWVAR 21
62140: PUSH
62141: LD_INT 0
62143: ST_TO_ADDR
// hc_sex := sex_male ;
62144: LD_ADDR_OWVAR 27
62148: PUSH
62149: LD_INT 1
62151: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62152: LD_ADDR_OWVAR 28
62156: PUSH
62157: LD_INT 16
62159: ST_TO_ADDR
// hc_gallery :=  ;
62160: LD_ADDR_OWVAR 33
62164: PUSH
62165: LD_STRING 
62167: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62168: LD_ADDR_OWVAR 31
62172: PUSH
62173: LD_INT 0
62175: PPUSH
62176: LD_INT 3
62178: PPUSH
62179: CALL_OW 12
62183: PUSH
62184: LD_INT 0
62186: PPUSH
62187: LD_INT 3
62189: PPUSH
62190: CALL_OW 12
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// end ;
62207: LD_VAR 0 1
62211: RET
// export function PrepareApeman ( agressivity ) ; begin
62212: LD_INT 0
62214: PPUSH
// uc_side := 0 ;
62215: LD_ADDR_OWVAR 20
62219: PUSH
62220: LD_INT 0
62222: ST_TO_ADDR
// uc_nation := 0 ;
62223: LD_ADDR_OWVAR 21
62227: PUSH
62228: LD_INT 0
62230: ST_TO_ADDR
// hc_sex := sex_male ;
62231: LD_ADDR_OWVAR 27
62235: PUSH
62236: LD_INT 1
62238: ST_TO_ADDR
// hc_class := class_apeman ;
62239: LD_ADDR_OWVAR 28
62243: PUSH
62244: LD_INT 12
62246: ST_TO_ADDR
// hc_gallery :=  ;
62247: LD_ADDR_OWVAR 33
62251: PUSH
62252: LD_STRING 
62254: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62255: LD_ADDR_OWVAR 35
62259: PUSH
62260: LD_VAR 0 1
62264: NEG
62265: PPUSH
62266: LD_VAR 0 1
62270: PPUSH
62271: CALL_OW 12
62275: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62276: LD_ADDR_OWVAR 31
62280: PUSH
62281: LD_INT 0
62283: PPUSH
62284: LD_INT 3
62286: PPUSH
62287: CALL_OW 12
62291: PUSH
62292: LD_INT 0
62294: PPUSH
62295: LD_INT 3
62297: PPUSH
62298: CALL_OW 12
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: ST_TO_ADDR
// end ;
62315: LD_VAR 0 2
62319: RET
// export function PrepareTiger ( agressivity ) ; begin
62320: LD_INT 0
62322: PPUSH
// uc_side := 0 ;
62323: LD_ADDR_OWVAR 20
62327: PUSH
62328: LD_INT 0
62330: ST_TO_ADDR
// uc_nation := 0 ;
62331: LD_ADDR_OWVAR 21
62335: PUSH
62336: LD_INT 0
62338: ST_TO_ADDR
// hc_class := class_tiger ;
62339: LD_ADDR_OWVAR 28
62343: PUSH
62344: LD_INT 14
62346: ST_TO_ADDR
// hc_gallery :=  ;
62347: LD_ADDR_OWVAR 33
62351: PUSH
62352: LD_STRING 
62354: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62355: LD_ADDR_OWVAR 35
62359: PUSH
62360: LD_VAR 0 1
62364: NEG
62365: PPUSH
62366: LD_VAR 0 1
62370: PPUSH
62371: CALL_OW 12
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 2
62380: RET
// export function PrepareEnchidna ( ) ; begin
62381: LD_INT 0
62383: PPUSH
// uc_side := 0 ;
62384: LD_ADDR_OWVAR 20
62388: PUSH
62389: LD_INT 0
62391: ST_TO_ADDR
// uc_nation := 0 ;
62392: LD_ADDR_OWVAR 21
62396: PUSH
62397: LD_INT 0
62399: ST_TO_ADDR
// hc_class := class_baggie ;
62400: LD_ADDR_OWVAR 28
62404: PUSH
62405: LD_INT 13
62407: ST_TO_ADDR
// hc_gallery :=  ;
62408: LD_ADDR_OWVAR 33
62412: PUSH
62413: LD_STRING 
62415: ST_TO_ADDR
// end ;
62416: LD_VAR 0 1
62420: RET
// export function PrepareFrog ( ) ; begin
62421: LD_INT 0
62423: PPUSH
// uc_side := 0 ;
62424: LD_ADDR_OWVAR 20
62428: PUSH
62429: LD_INT 0
62431: ST_TO_ADDR
// uc_nation := 0 ;
62432: LD_ADDR_OWVAR 21
62436: PUSH
62437: LD_INT 0
62439: ST_TO_ADDR
// hc_class := class_frog ;
62440: LD_ADDR_OWVAR 28
62444: PUSH
62445: LD_INT 19
62447: ST_TO_ADDR
// hc_gallery :=  ;
62448: LD_ADDR_OWVAR 33
62452: PUSH
62453: LD_STRING 
62455: ST_TO_ADDR
// end ;
62456: LD_VAR 0 1
62460: RET
// export function PrepareFish ( ) ; begin
62461: LD_INT 0
62463: PPUSH
// uc_side := 0 ;
62464: LD_ADDR_OWVAR 20
62468: PUSH
62469: LD_INT 0
62471: ST_TO_ADDR
// uc_nation := 0 ;
62472: LD_ADDR_OWVAR 21
62476: PUSH
62477: LD_INT 0
62479: ST_TO_ADDR
// hc_class := class_fish ;
62480: LD_ADDR_OWVAR 28
62484: PUSH
62485: LD_INT 20
62487: ST_TO_ADDR
// hc_gallery :=  ;
62488: LD_ADDR_OWVAR 33
62492: PUSH
62493: LD_STRING 
62495: ST_TO_ADDR
// end ;
62496: LD_VAR 0 1
62500: RET
// export function PrepareBird ( ) ; begin
62501: LD_INT 0
62503: PPUSH
// uc_side := 0 ;
62504: LD_ADDR_OWVAR 20
62508: PUSH
62509: LD_INT 0
62511: ST_TO_ADDR
// uc_nation := 0 ;
62512: LD_ADDR_OWVAR 21
62516: PUSH
62517: LD_INT 0
62519: ST_TO_ADDR
// hc_class := class_phororhacos ;
62520: LD_ADDR_OWVAR 28
62524: PUSH
62525: LD_INT 18
62527: ST_TO_ADDR
// hc_gallery :=  ;
62528: LD_ADDR_OWVAR 33
62532: PUSH
62533: LD_STRING 
62535: ST_TO_ADDR
// end ;
62536: LD_VAR 0 1
62540: RET
// export function PrepareHorse ( ) ; begin
62541: LD_INT 0
62543: PPUSH
// uc_side := 0 ;
62544: LD_ADDR_OWVAR 20
62548: PUSH
62549: LD_INT 0
62551: ST_TO_ADDR
// uc_nation := 0 ;
62552: LD_ADDR_OWVAR 21
62556: PUSH
62557: LD_INT 0
62559: ST_TO_ADDR
// hc_class := class_horse ;
62560: LD_ADDR_OWVAR 28
62564: PUSH
62565: LD_INT 21
62567: ST_TO_ADDR
// hc_gallery :=  ;
62568: LD_ADDR_OWVAR 33
62572: PUSH
62573: LD_STRING 
62575: ST_TO_ADDR
// end ;
62576: LD_VAR 0 1
62580: RET
// export function PrepareMastodont ( ) ; begin
62581: LD_INT 0
62583: PPUSH
// uc_side := 0 ;
62584: LD_ADDR_OWVAR 20
62588: PUSH
62589: LD_INT 0
62591: ST_TO_ADDR
// uc_nation := 0 ;
62592: LD_ADDR_OWVAR 21
62596: PUSH
62597: LD_INT 0
62599: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62600: LD_ADDR_OWVAR 37
62604: PUSH
62605: LD_INT 31
62607: ST_TO_ADDR
// vc_control := control_rider ;
62608: LD_ADDR_OWVAR 38
62612: PUSH
62613: LD_INT 4
62615: ST_TO_ADDR
// end ;
62616: LD_VAR 0 1
62620: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
// uc_side = 0 ;
62626: LD_ADDR_OWVAR 20
62630: PUSH
62631: LD_INT 0
62633: ST_TO_ADDR
// uc_nation = 0 ;
62634: LD_ADDR_OWVAR 21
62638: PUSH
62639: LD_INT 0
62641: ST_TO_ADDR
// InitHc_All ( ) ;
62642: CALL_OW 584
// InitVc ;
62646: CALL_OW 20
// if mastodonts then
62650: LD_VAR 0 6
62654: IFFALSE 62721
// for i = 1 to mastodonts do
62656: LD_ADDR_VAR 0 11
62660: PUSH
62661: DOUBLE
62662: LD_INT 1
62664: DEC
62665: ST_TO_ADDR
62666: LD_VAR 0 6
62670: PUSH
62671: FOR_TO
62672: IFFALSE 62719
// begin vc_chassis := 31 ;
62674: LD_ADDR_OWVAR 37
62678: PUSH
62679: LD_INT 31
62681: ST_TO_ADDR
// vc_control := control_rider ;
62682: LD_ADDR_OWVAR 38
62686: PUSH
62687: LD_INT 4
62689: ST_TO_ADDR
// animal := CreateVehicle ;
62690: LD_ADDR_VAR 0 12
62694: PUSH
62695: CALL_OW 45
62699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62700: LD_VAR 0 12
62704: PPUSH
62705: LD_VAR 0 8
62709: PPUSH
62710: LD_INT 0
62712: PPUSH
62713: CALL 64856 0 3
// end ;
62717: GO 62671
62719: POP
62720: POP
// if horses then
62721: LD_VAR 0 5
62725: IFFALSE 62792
// for i = 1 to horses do
62727: LD_ADDR_VAR 0 11
62731: PUSH
62732: DOUBLE
62733: LD_INT 1
62735: DEC
62736: ST_TO_ADDR
62737: LD_VAR 0 5
62741: PUSH
62742: FOR_TO
62743: IFFALSE 62790
// begin hc_class := 21 ;
62745: LD_ADDR_OWVAR 28
62749: PUSH
62750: LD_INT 21
62752: ST_TO_ADDR
// hc_gallery :=  ;
62753: LD_ADDR_OWVAR 33
62757: PUSH
62758: LD_STRING 
62760: ST_TO_ADDR
// animal := CreateHuman ;
62761: LD_ADDR_VAR 0 12
62765: PUSH
62766: CALL_OW 44
62770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62771: LD_VAR 0 12
62775: PPUSH
62776: LD_VAR 0 8
62780: PPUSH
62781: LD_INT 0
62783: PPUSH
62784: CALL 64856 0 3
// end ;
62788: GO 62742
62790: POP
62791: POP
// if birds then
62792: LD_VAR 0 1
62796: IFFALSE 62863
// for i = 1 to birds do
62798: LD_ADDR_VAR 0 11
62802: PUSH
62803: DOUBLE
62804: LD_INT 1
62806: DEC
62807: ST_TO_ADDR
62808: LD_VAR 0 1
62812: PUSH
62813: FOR_TO
62814: IFFALSE 62861
// begin hc_class = 18 ;
62816: LD_ADDR_OWVAR 28
62820: PUSH
62821: LD_INT 18
62823: ST_TO_ADDR
// hc_gallery =  ;
62824: LD_ADDR_OWVAR 33
62828: PUSH
62829: LD_STRING 
62831: ST_TO_ADDR
// animal := CreateHuman ;
62832: LD_ADDR_VAR 0 12
62836: PUSH
62837: CALL_OW 44
62841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62842: LD_VAR 0 12
62846: PPUSH
62847: LD_VAR 0 8
62851: PPUSH
62852: LD_INT 0
62854: PPUSH
62855: CALL 64856 0 3
// end ;
62859: GO 62813
62861: POP
62862: POP
// if tigers then
62863: LD_VAR 0 2
62867: IFFALSE 62951
// for i = 1 to tigers do
62869: LD_ADDR_VAR 0 11
62873: PUSH
62874: DOUBLE
62875: LD_INT 1
62877: DEC
62878: ST_TO_ADDR
62879: LD_VAR 0 2
62883: PUSH
62884: FOR_TO
62885: IFFALSE 62949
// begin hc_class = class_tiger ;
62887: LD_ADDR_OWVAR 28
62891: PUSH
62892: LD_INT 14
62894: ST_TO_ADDR
// hc_gallery =  ;
62895: LD_ADDR_OWVAR 33
62899: PUSH
62900: LD_STRING 
62902: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62903: LD_ADDR_OWVAR 35
62907: PUSH
62908: LD_INT 7
62910: NEG
62911: PPUSH
62912: LD_INT 7
62914: PPUSH
62915: CALL_OW 12
62919: ST_TO_ADDR
// animal := CreateHuman ;
62920: LD_ADDR_VAR 0 12
62924: PUSH
62925: CALL_OW 44
62929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62930: LD_VAR 0 12
62934: PPUSH
62935: LD_VAR 0 8
62939: PPUSH
62940: LD_INT 0
62942: PPUSH
62943: CALL 64856 0 3
// end ;
62947: GO 62884
62949: POP
62950: POP
// if apemans then
62951: LD_VAR 0 3
62955: IFFALSE 63078
// for i = 1 to apemans do
62957: LD_ADDR_VAR 0 11
62961: PUSH
62962: DOUBLE
62963: LD_INT 1
62965: DEC
62966: ST_TO_ADDR
62967: LD_VAR 0 3
62971: PUSH
62972: FOR_TO
62973: IFFALSE 63076
// begin hc_class = class_apeman ;
62975: LD_ADDR_OWVAR 28
62979: PUSH
62980: LD_INT 12
62982: ST_TO_ADDR
// hc_gallery =  ;
62983: LD_ADDR_OWVAR 33
62987: PUSH
62988: LD_STRING 
62990: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62991: LD_ADDR_OWVAR 35
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PPUSH
63000: LD_INT 2
63002: PPUSH
63003: CALL_OW 12
63007: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63008: LD_ADDR_OWVAR 31
63012: PUSH
63013: LD_INT 1
63015: PPUSH
63016: LD_INT 3
63018: PPUSH
63019: CALL_OW 12
63023: PUSH
63024: LD_INT 1
63026: PPUSH
63027: LD_INT 3
63029: PPUSH
63030: CALL_OW 12
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// animal := CreateHuman ;
63047: LD_ADDR_VAR 0 12
63051: PUSH
63052: CALL_OW 44
63056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63057: LD_VAR 0 12
63061: PPUSH
63062: LD_VAR 0 8
63066: PPUSH
63067: LD_INT 0
63069: PPUSH
63070: CALL 64856 0 3
// end ;
63074: GO 62972
63076: POP
63077: POP
// if enchidnas then
63078: LD_VAR 0 4
63082: IFFALSE 63149
// for i = 1 to enchidnas do
63084: LD_ADDR_VAR 0 11
63088: PUSH
63089: DOUBLE
63090: LD_INT 1
63092: DEC
63093: ST_TO_ADDR
63094: LD_VAR 0 4
63098: PUSH
63099: FOR_TO
63100: IFFALSE 63147
// begin hc_class = 13 ;
63102: LD_ADDR_OWVAR 28
63106: PUSH
63107: LD_INT 13
63109: ST_TO_ADDR
// hc_gallery =  ;
63110: LD_ADDR_OWVAR 33
63114: PUSH
63115: LD_STRING 
63117: ST_TO_ADDR
// animal := CreateHuman ;
63118: LD_ADDR_VAR 0 12
63122: PUSH
63123: CALL_OW 44
63127: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63128: LD_VAR 0 12
63132: PPUSH
63133: LD_VAR 0 8
63137: PPUSH
63138: LD_INT 0
63140: PPUSH
63141: CALL 64856 0 3
// end ;
63145: GO 63099
63147: POP
63148: POP
// if fishes then
63149: LD_VAR 0 7
63153: IFFALSE 63220
// for i = 1 to fishes do
63155: LD_ADDR_VAR 0 11
63159: PUSH
63160: DOUBLE
63161: LD_INT 1
63163: DEC
63164: ST_TO_ADDR
63165: LD_VAR 0 7
63169: PUSH
63170: FOR_TO
63171: IFFALSE 63218
// begin hc_class = 20 ;
63173: LD_ADDR_OWVAR 28
63177: PUSH
63178: LD_INT 20
63180: ST_TO_ADDR
// hc_gallery =  ;
63181: LD_ADDR_OWVAR 33
63185: PUSH
63186: LD_STRING 
63188: ST_TO_ADDR
// animal := CreateHuman ;
63189: LD_ADDR_VAR 0 12
63193: PUSH
63194: CALL_OW 44
63198: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63199: LD_VAR 0 12
63203: PPUSH
63204: LD_VAR 0 9
63208: PPUSH
63209: LD_INT 0
63211: PPUSH
63212: CALL 64856 0 3
// end ;
63216: GO 63170
63218: POP
63219: POP
// end ;
63220: LD_VAR 0 10
63224: RET
// export function WantHeal ( sci , unit ) ; begin
63225: LD_INT 0
63227: PPUSH
// if GetTaskList ( sci ) > 0 then
63228: LD_VAR 0 1
63232: PPUSH
63233: CALL_OW 437
63237: PUSH
63238: LD_INT 0
63240: GREATER
63241: IFFALSE 63311
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63243: LD_VAR 0 1
63247: PPUSH
63248: CALL_OW 437
63252: PUSH
63253: LD_INT 1
63255: ARRAY
63256: PUSH
63257: LD_INT 1
63259: ARRAY
63260: PUSH
63261: LD_STRING l
63263: EQUAL
63264: PUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 437
63274: PUSH
63275: LD_INT 1
63277: ARRAY
63278: PUSH
63279: LD_INT 4
63281: ARRAY
63282: PUSH
63283: LD_VAR 0 2
63287: EQUAL
63288: AND
63289: IFFALSE 63301
// result := true else
63291: LD_ADDR_VAR 0 3
63295: PUSH
63296: LD_INT 1
63298: ST_TO_ADDR
63299: GO 63309
// result := false ;
63301: LD_ADDR_VAR 0 3
63305: PUSH
63306: LD_INT 0
63308: ST_TO_ADDR
// end else
63309: GO 63319
// result := false ;
63311: LD_ADDR_VAR 0 3
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// end ;
63319: LD_VAR 0 3
63323: RET
// export function HealTarget ( sci ) ; begin
63324: LD_INT 0
63326: PPUSH
// if not sci then
63327: LD_VAR 0 1
63331: NOT
63332: IFFALSE 63336
// exit ;
63334: GO 63401
// result := 0 ;
63336: LD_ADDR_VAR 0 2
63340: PUSH
63341: LD_INT 0
63343: ST_TO_ADDR
// if GetTaskList ( sci ) then
63344: LD_VAR 0 1
63348: PPUSH
63349: CALL_OW 437
63353: IFFALSE 63401
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63355: LD_VAR 0 1
63359: PPUSH
63360: CALL_OW 437
63364: PUSH
63365: LD_INT 1
63367: ARRAY
63368: PUSH
63369: LD_INT 1
63371: ARRAY
63372: PUSH
63373: LD_STRING l
63375: EQUAL
63376: IFFALSE 63401
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63378: LD_ADDR_VAR 0 2
63382: PUSH
63383: LD_VAR 0 1
63387: PPUSH
63388: CALL_OW 437
63392: PUSH
63393: LD_INT 1
63395: ARRAY
63396: PUSH
63397: LD_INT 4
63399: ARRAY
63400: ST_TO_ADDR
// end ;
63401: LD_VAR 0 2
63405: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63406: LD_INT 0
63408: PPUSH
63409: PPUSH
63410: PPUSH
63411: PPUSH
// if not base_units then
63412: LD_VAR 0 1
63416: NOT
63417: IFFALSE 63421
// exit ;
63419: GO 63508
// result := false ;
63421: LD_ADDR_VAR 0 2
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63429: LD_ADDR_VAR 0 5
63433: PUSH
63434: LD_VAR 0 1
63438: PPUSH
63439: LD_INT 21
63441: PUSH
63442: LD_INT 3
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PPUSH
63449: CALL_OW 72
63453: ST_TO_ADDR
// if not tmp then
63454: LD_VAR 0 5
63458: NOT
63459: IFFALSE 63463
// exit ;
63461: GO 63508
// for i in tmp do
63463: LD_ADDR_VAR 0 3
63467: PUSH
63468: LD_VAR 0 5
63472: PUSH
63473: FOR_IN
63474: IFFALSE 63506
// begin result := EnemyInRange ( i , 22 ) ;
63476: LD_ADDR_VAR 0 2
63480: PUSH
63481: LD_VAR 0 3
63485: PPUSH
63486: LD_INT 22
63488: PPUSH
63489: CALL 61121 0 2
63493: ST_TO_ADDR
// if result then
63494: LD_VAR 0 2
63498: IFFALSE 63504
// exit ;
63500: POP
63501: POP
63502: GO 63508
// end ;
63504: GO 63473
63506: POP
63507: POP
// end ;
63508: LD_VAR 0 2
63512: RET
// export function FilterByTag ( units , tag ) ; begin
63513: LD_INT 0
63515: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63516: LD_ADDR_VAR 0 3
63520: PUSH
63521: LD_VAR 0 1
63525: PPUSH
63526: LD_INT 120
63528: PUSH
63529: LD_VAR 0 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PPUSH
63538: CALL_OW 72
63542: ST_TO_ADDR
// end ;
63543: LD_VAR 0 3
63547: RET
// export function IsDriver ( un ) ; begin
63548: LD_INT 0
63550: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63551: LD_ADDR_VAR 0 2
63555: PUSH
63556: LD_VAR 0 1
63560: PUSH
63561: LD_INT 55
63563: PUSH
63564: EMPTY
63565: LIST
63566: PPUSH
63567: CALL_OW 69
63571: IN
63572: ST_TO_ADDR
// end ;
63573: LD_VAR 0 2
63577: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
// list := [ ] ;
63582: LD_ADDR_VAR 0 5
63586: PUSH
63587: EMPTY
63588: ST_TO_ADDR
// case d of 0 :
63589: LD_VAR 0 3
63593: PUSH
63594: LD_INT 0
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63602
63600: GO 63735
63602: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63603: LD_ADDR_VAR 0 5
63607: PUSH
63608: LD_VAR 0 1
63612: PUSH
63613: LD_INT 4
63615: MINUS
63616: PUSH
63617: LD_VAR 0 2
63621: PUSH
63622: LD_INT 4
63624: MINUS
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: LD_INT 3
63641: MINUS
63642: PUSH
63643: LD_VAR 0 2
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: PUSH
63656: LD_VAR 0 1
63660: PUSH
63661: LD_INT 4
63663: PLUS
63664: PUSH
63665: LD_VAR 0 2
63669: PUSH
63670: LD_INT 4
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: PUSH
63678: LD_VAR 0 1
63682: PUSH
63683: LD_INT 3
63685: PLUS
63686: PUSH
63687: LD_VAR 0 2
63691: PUSH
63692: LD_INT 3
63694: PLUS
63695: PUSH
63696: LD_INT 5
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: PUSH
63704: LD_VAR 0 1
63708: PUSH
63709: LD_VAR 0 2
63713: PUSH
63714: LD_INT 4
63716: PLUS
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: ST_TO_ADDR
// end ; 1 :
63733: GO 64433
63735: LD_INT 1
63737: DOUBLE
63738: EQUAL
63739: IFTRUE 63743
63741: GO 63876
63743: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63744: LD_ADDR_VAR 0 5
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: LD_VAR 0 2
63758: PUSH
63759: LD_INT 4
63761: MINUS
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: PUSH
63771: LD_VAR 0 1
63775: PUSH
63776: LD_INT 3
63778: MINUS
63779: PUSH
63780: LD_VAR 0 2
63784: PUSH
63785: LD_INT 3
63787: MINUS
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: PUSH
63797: LD_VAR 0 1
63801: PUSH
63802: LD_INT 4
63804: MINUS
63805: PUSH
63806: LD_VAR 0 2
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: PUSH
63819: LD_VAR 0 1
63823: PUSH
63824: LD_VAR 0 2
63828: PUSH
63829: LD_INT 3
63831: PLUS
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: LIST
63840: PUSH
63841: LD_VAR 0 1
63845: PUSH
63846: LD_INT 4
63848: PLUS
63849: PUSH
63850: LD_VAR 0 2
63854: PUSH
63855: LD_INT 4
63857: PLUS
63858: PUSH
63859: LD_INT 5
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: ST_TO_ADDR
// end ; 2 :
63874: GO 64433
63876: LD_INT 2
63878: DOUBLE
63879: EQUAL
63880: IFTRUE 63884
63882: GO 64013
63884: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63885: LD_ADDR_VAR 0 5
63889: PUSH
63890: LD_VAR 0 1
63894: PUSH
63895: LD_VAR 0 2
63899: PUSH
63900: LD_INT 3
63902: MINUS
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: PUSH
63912: LD_VAR 0 1
63916: PUSH
63917: LD_INT 4
63919: PLUS
63920: PUSH
63921: LD_VAR 0 2
63925: PUSH
63926: LD_INT 4
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: PUSH
63934: LD_VAR 0 1
63938: PUSH
63939: LD_VAR 0 2
63943: PUSH
63944: LD_INT 4
63946: PLUS
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: PUSH
63956: LD_VAR 0 1
63960: PUSH
63961: LD_INT 3
63963: MINUS
63964: PUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: LIST
63977: PUSH
63978: LD_VAR 0 1
63982: PUSH
63983: LD_INT 4
63985: MINUS
63986: PUSH
63987: LD_VAR 0 2
63991: PUSH
63992: LD_INT 4
63994: MINUS
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// end ; 3 :
64011: GO 64433
64013: LD_INT 3
64015: DOUBLE
64016: EQUAL
64017: IFTRUE 64021
64019: GO 64154
64021: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64022: LD_ADDR_VAR 0 5
64026: PUSH
64027: LD_VAR 0 1
64031: PUSH
64032: LD_INT 3
64034: PLUS
64035: PUSH
64036: LD_VAR 0 2
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: PUSH
64049: LD_VAR 0 1
64053: PUSH
64054: LD_INT 4
64056: PLUS
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: LD_INT 4
64065: PLUS
64066: PUSH
64067: LD_INT 5
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: PUSH
64075: LD_VAR 0 1
64079: PUSH
64080: LD_INT 4
64082: MINUS
64083: PUSH
64084: LD_VAR 0 2
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: PUSH
64097: LD_VAR 0 1
64101: PUSH
64102: LD_VAR 0 2
64106: PUSH
64107: LD_INT 4
64109: MINUS
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 1
64123: PUSH
64124: LD_INT 3
64126: MINUS
64127: PUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_INT 3
64135: MINUS
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: ST_TO_ADDR
// end ; 4 :
64152: GO 64433
64154: LD_INT 4
64156: DOUBLE
64157: EQUAL
64158: IFTRUE 64162
64160: GO 64295
64162: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64163: LD_ADDR_VAR 0 5
64167: PUSH
64168: LD_VAR 0 1
64172: PUSH
64173: LD_VAR 0 2
64177: PUSH
64178: LD_INT 4
64180: PLUS
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: PUSH
64190: LD_VAR 0 1
64194: PUSH
64195: LD_INT 3
64197: PLUS
64198: PUSH
64199: LD_VAR 0 2
64203: PUSH
64204: LD_INT 3
64206: PLUS
64207: PUSH
64208: LD_INT 5
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: PUSH
64216: LD_VAR 0 1
64220: PUSH
64221: LD_INT 4
64223: PLUS
64224: PUSH
64225: LD_VAR 0 2
64229: PUSH
64230: LD_INT 4
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: PUSH
64238: LD_VAR 0 1
64242: PUSH
64243: LD_VAR 0 2
64247: PUSH
64248: LD_INT 3
64250: MINUS
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 4
64267: MINUS
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 4
64276: MINUS
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: LIST
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: ST_TO_ADDR
// end ; 5 :
64293: GO 64433
64295: LD_INT 5
64297: DOUBLE
64298: EQUAL
64299: IFTRUE 64303
64301: GO 64432
64303: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64304: LD_ADDR_VAR 0 5
64308: PUSH
64309: LD_VAR 0 1
64313: PUSH
64314: LD_INT 4
64316: MINUS
64317: PUSH
64318: LD_VAR 0 2
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: PUSH
64331: LD_VAR 0 1
64335: PUSH
64336: LD_VAR 0 2
64340: PUSH
64341: LD_INT 4
64343: MINUS
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: PUSH
64353: LD_VAR 0 1
64357: PUSH
64358: LD_INT 4
64360: PLUS
64361: PUSH
64362: LD_VAR 0 2
64366: PUSH
64367: LD_INT 4
64369: PLUS
64370: PUSH
64371: LD_INT 5
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: PUSH
64379: LD_VAR 0 1
64383: PUSH
64384: LD_INT 3
64386: PLUS
64387: PUSH
64388: LD_VAR 0 2
64392: PUSH
64393: LD_INT 4
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: PUSH
64401: LD_VAR 0 1
64405: PUSH
64406: LD_VAR 0 2
64410: PUSH
64411: LD_INT 3
64413: PLUS
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// end ; end ;
64430: GO 64433
64432: POP
// result := list ;
64433: LD_ADDR_VAR 0 4
64437: PUSH
64438: LD_VAR 0 5
64442: ST_TO_ADDR
// end ;
64443: LD_VAR 0 4
64447: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64448: LD_INT 0
64450: PPUSH
64451: PPUSH
64452: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64453: LD_VAR 0 1
64457: NOT
64458: PUSH
64459: LD_VAR 0 2
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: LD_INT 4
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: IN
64482: NOT
64483: OR
64484: IFFALSE 64488
// exit ;
64486: GO 64580
// tmp := [ ] ;
64488: LD_ADDR_VAR 0 5
64492: PUSH
64493: EMPTY
64494: ST_TO_ADDR
// for i in units do
64495: LD_ADDR_VAR 0 4
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: FOR_IN
64506: IFFALSE 64549
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64508: LD_ADDR_VAR 0 5
64512: PUSH
64513: LD_VAR 0 5
64517: PPUSH
64518: LD_VAR 0 5
64522: PUSH
64523: LD_INT 1
64525: PLUS
64526: PPUSH
64527: LD_VAR 0 4
64531: PPUSH
64532: LD_VAR 0 2
64536: PPUSH
64537: CALL_OW 259
64541: PPUSH
64542: CALL_OW 2
64546: ST_TO_ADDR
64547: GO 64505
64549: POP
64550: POP
// if not tmp then
64551: LD_VAR 0 5
64555: NOT
64556: IFFALSE 64560
// exit ;
64558: GO 64580
// result := SortListByListDesc ( units , tmp ) ;
64560: LD_ADDR_VAR 0 3
64564: PUSH
64565: LD_VAR 0 1
64569: PPUSH
64570: LD_VAR 0 5
64574: PPUSH
64575: CALL_OW 77
64579: ST_TO_ADDR
// end ;
64580: LD_VAR 0 3
64584: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64585: LD_INT 0
64587: PPUSH
64588: PPUSH
64589: PPUSH
// result := false ;
64590: LD_ADDR_VAR 0 3
64594: PUSH
64595: LD_INT 0
64597: ST_TO_ADDR
// x := GetX ( building ) ;
64598: LD_ADDR_VAR 0 4
64602: PUSH
64603: LD_VAR 0 2
64607: PPUSH
64608: CALL_OW 250
64612: ST_TO_ADDR
// y := GetY ( building ) ;
64613: LD_ADDR_VAR 0 5
64617: PUSH
64618: LD_VAR 0 2
64622: PPUSH
64623: CALL_OW 251
64627: ST_TO_ADDR
// if not building or not x or not y then
64628: LD_VAR 0 2
64632: NOT
64633: PUSH
64634: LD_VAR 0 4
64638: NOT
64639: OR
64640: PUSH
64641: LD_VAR 0 5
64645: NOT
64646: OR
64647: IFFALSE 64651
// exit ;
64649: GO 64743
// if GetTaskList ( unit ) then
64651: LD_VAR 0 1
64655: PPUSH
64656: CALL_OW 437
64660: IFFALSE 64743
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64662: LD_STRING e
64664: PUSH
64665: LD_VAR 0 1
64669: PPUSH
64670: CALL_OW 437
64674: PUSH
64675: LD_INT 1
64677: ARRAY
64678: PUSH
64679: LD_INT 1
64681: ARRAY
64682: EQUAL
64683: PUSH
64684: LD_VAR 0 4
64688: PUSH
64689: LD_VAR 0 1
64693: PPUSH
64694: CALL_OW 437
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PUSH
64703: LD_INT 2
64705: ARRAY
64706: EQUAL
64707: AND
64708: PUSH
64709: LD_VAR 0 5
64713: PUSH
64714: LD_VAR 0 1
64718: PPUSH
64719: CALL_OW 437
64723: PUSH
64724: LD_INT 1
64726: ARRAY
64727: PUSH
64728: LD_INT 3
64730: ARRAY
64731: EQUAL
64732: AND
64733: IFFALSE 64743
// result := true end ;
64735: LD_ADDR_VAR 0 3
64739: PUSH
64740: LD_INT 1
64742: ST_TO_ADDR
// end ;
64743: LD_VAR 0 3
64747: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64748: LD_INT 0
64750: PPUSH
// result := false ;
64751: LD_ADDR_VAR 0 4
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// if GetTaskList ( unit ) then
64759: LD_VAR 0 1
64763: PPUSH
64764: CALL_OW 437
64768: IFFALSE 64851
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64770: LD_STRING M
64772: PUSH
64773: LD_VAR 0 1
64777: PPUSH
64778: CALL_OW 437
64782: PUSH
64783: LD_INT 1
64785: ARRAY
64786: PUSH
64787: LD_INT 1
64789: ARRAY
64790: EQUAL
64791: PUSH
64792: LD_VAR 0 2
64796: PUSH
64797: LD_VAR 0 1
64801: PPUSH
64802: CALL_OW 437
64806: PUSH
64807: LD_INT 1
64809: ARRAY
64810: PUSH
64811: LD_INT 2
64813: ARRAY
64814: EQUAL
64815: AND
64816: PUSH
64817: LD_VAR 0 3
64821: PUSH
64822: LD_VAR 0 1
64826: PPUSH
64827: CALL_OW 437
64831: PUSH
64832: LD_INT 1
64834: ARRAY
64835: PUSH
64836: LD_INT 3
64838: ARRAY
64839: EQUAL
64840: AND
64841: IFFALSE 64851
// result := true ;
64843: LD_ADDR_VAR 0 4
64847: PUSH
64848: LD_INT 1
64850: ST_TO_ADDR
// end ; end ;
64851: LD_VAR 0 4
64855: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64856: LD_INT 0
64858: PPUSH
64859: PPUSH
64860: PPUSH
64861: PPUSH
// if not unit or not area then
64862: LD_VAR 0 1
64866: NOT
64867: PUSH
64868: LD_VAR 0 2
64872: NOT
64873: OR
64874: IFFALSE 64878
// exit ;
64876: GO 65042
// tmp := AreaToList ( area , i ) ;
64878: LD_ADDR_VAR 0 6
64882: PUSH
64883: LD_VAR 0 2
64887: PPUSH
64888: LD_VAR 0 5
64892: PPUSH
64893: CALL_OW 517
64897: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64898: LD_ADDR_VAR 0 5
64902: PUSH
64903: DOUBLE
64904: LD_INT 1
64906: DEC
64907: ST_TO_ADDR
64908: LD_VAR 0 6
64912: PUSH
64913: LD_INT 1
64915: ARRAY
64916: PUSH
64917: FOR_TO
64918: IFFALSE 65040
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64920: LD_ADDR_VAR 0 7
64924: PUSH
64925: LD_VAR 0 6
64929: PUSH
64930: LD_INT 1
64932: ARRAY
64933: PUSH
64934: LD_VAR 0 5
64938: ARRAY
64939: PUSH
64940: LD_VAR 0 6
64944: PUSH
64945: LD_INT 2
64947: ARRAY
64948: PUSH
64949: LD_VAR 0 5
64953: ARRAY
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64959: LD_VAR 0 7
64963: PUSH
64964: LD_INT 1
64966: ARRAY
64967: PPUSH
64968: LD_VAR 0 7
64972: PUSH
64973: LD_INT 2
64975: ARRAY
64976: PPUSH
64977: CALL_OW 428
64981: PUSH
64982: LD_INT 0
64984: EQUAL
64985: IFFALSE 65038
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64987: LD_VAR 0 1
64991: PPUSH
64992: LD_VAR 0 7
64996: PUSH
64997: LD_INT 1
64999: ARRAY
65000: PPUSH
65001: LD_VAR 0 7
65005: PUSH
65006: LD_INT 2
65008: ARRAY
65009: PPUSH
65010: LD_VAR 0 3
65014: PPUSH
65015: CALL_OW 48
// result := IsPlaced ( unit ) ;
65019: LD_ADDR_VAR 0 4
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 305
65033: ST_TO_ADDR
// exit ;
65034: POP
65035: POP
65036: GO 65042
// end ; end ;
65038: GO 64917
65040: POP
65041: POP
// end ;
65042: LD_VAR 0 4
65046: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65047: LD_INT 0
65049: PPUSH
65050: PPUSH
65051: PPUSH
// if not side or side > 8 then
65052: LD_VAR 0 1
65056: NOT
65057: PUSH
65058: LD_VAR 0 1
65062: PUSH
65063: LD_INT 8
65065: GREATER
65066: OR
65067: IFFALSE 65071
// exit ;
65069: GO 65258
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65071: LD_ADDR_VAR 0 4
65075: PUSH
65076: LD_INT 22
65078: PUSH
65079: LD_VAR 0 1
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 21
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PPUSH
65102: CALL_OW 69
65106: ST_TO_ADDR
// if not tmp then
65107: LD_VAR 0 4
65111: NOT
65112: IFFALSE 65116
// exit ;
65114: GO 65258
// enable_addtolog := true ;
65116: LD_ADDR_OWVAR 81
65120: PUSH
65121: LD_INT 1
65123: ST_TO_ADDR
// AddToLog ( [ ) ;
65124: LD_STRING [
65126: PPUSH
65127: CALL_OW 561
// for i in tmp do
65131: LD_ADDR_VAR 0 3
65135: PUSH
65136: LD_VAR 0 4
65140: PUSH
65141: FOR_IN
65142: IFFALSE 65249
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65144: LD_STRING [
65146: PUSH
65147: LD_VAR 0 3
65151: PPUSH
65152: CALL_OW 266
65156: STR
65157: PUSH
65158: LD_STRING , 
65160: STR
65161: PUSH
65162: LD_VAR 0 3
65166: PPUSH
65167: CALL_OW 250
65171: STR
65172: PUSH
65173: LD_STRING , 
65175: STR
65176: PUSH
65177: LD_VAR 0 3
65181: PPUSH
65182: CALL_OW 251
65186: STR
65187: PUSH
65188: LD_STRING , 
65190: STR
65191: PUSH
65192: LD_VAR 0 3
65196: PPUSH
65197: CALL_OW 254
65201: STR
65202: PUSH
65203: LD_STRING , 
65205: STR
65206: PUSH
65207: LD_VAR 0 3
65211: PPUSH
65212: LD_INT 1
65214: PPUSH
65215: CALL_OW 268
65219: STR
65220: PUSH
65221: LD_STRING , 
65223: STR
65224: PUSH
65225: LD_VAR 0 3
65229: PPUSH
65230: LD_INT 2
65232: PPUSH
65233: CALL_OW 268
65237: STR
65238: PUSH
65239: LD_STRING ],
65241: STR
65242: PPUSH
65243: CALL_OW 561
// end ;
65247: GO 65141
65249: POP
65250: POP
// AddToLog ( ]; ) ;
65251: LD_STRING ];
65253: PPUSH
65254: CALL_OW 561
// end ;
65258: LD_VAR 0 2
65262: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65263: LD_INT 0
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// if not area or not rate or not max then
65270: LD_VAR 0 1
65274: NOT
65275: PUSH
65276: LD_VAR 0 2
65280: NOT
65281: OR
65282: PUSH
65283: LD_VAR 0 4
65287: NOT
65288: OR
65289: IFFALSE 65293
// exit ;
65291: GO 65482
// while 1 do
65293: LD_INT 1
65295: IFFALSE 65482
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65297: LD_ADDR_VAR 0 9
65301: PUSH
65302: LD_VAR 0 1
65306: PPUSH
65307: LD_INT 1
65309: PPUSH
65310: CALL_OW 287
65314: PUSH
65315: LD_INT 10
65317: MUL
65318: ST_TO_ADDR
// r := rate / 10 ;
65319: LD_ADDR_VAR 0 7
65323: PUSH
65324: LD_VAR 0 2
65328: PUSH
65329: LD_INT 10
65331: DIVREAL
65332: ST_TO_ADDR
// time := 1 1$00 ;
65333: LD_ADDR_VAR 0 8
65337: PUSH
65338: LD_INT 2100
65340: ST_TO_ADDR
// if amount < min then
65341: LD_VAR 0 9
65345: PUSH
65346: LD_VAR 0 3
65350: LESS
65351: IFFALSE 65369
// r := r * 2 else
65353: LD_ADDR_VAR 0 7
65357: PUSH
65358: LD_VAR 0 7
65362: PUSH
65363: LD_INT 2
65365: MUL
65366: ST_TO_ADDR
65367: GO 65395
// if amount > max then
65369: LD_VAR 0 9
65373: PUSH
65374: LD_VAR 0 4
65378: GREATER
65379: IFFALSE 65395
// r := r / 2 ;
65381: LD_ADDR_VAR 0 7
65385: PUSH
65386: LD_VAR 0 7
65390: PUSH
65391: LD_INT 2
65393: DIVREAL
65394: ST_TO_ADDR
// time := time / r ;
65395: LD_ADDR_VAR 0 8
65399: PUSH
65400: LD_VAR 0 8
65404: PUSH
65405: LD_VAR 0 7
65409: DIVREAL
65410: ST_TO_ADDR
// if time < 0 then
65411: LD_VAR 0 8
65415: PUSH
65416: LD_INT 0
65418: LESS
65419: IFFALSE 65436
// time := time * - 1 ;
65421: LD_ADDR_VAR 0 8
65425: PUSH
65426: LD_VAR 0 8
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: MUL
65435: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65436: LD_VAR 0 8
65440: PUSH
65441: LD_INT 35
65443: PPUSH
65444: LD_INT 875
65446: PPUSH
65447: CALL_OW 12
65451: PLUS
65452: PPUSH
65453: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65457: LD_INT 1
65459: PPUSH
65460: LD_INT 5
65462: PPUSH
65463: CALL_OW 12
65467: PPUSH
65468: LD_VAR 0 1
65472: PPUSH
65473: LD_INT 1
65475: PPUSH
65476: CALL_OW 55
// end ;
65480: GO 65293
// end ;
65482: LD_VAR 0 5
65486: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65487: LD_INT 0
65489: PPUSH
65490: PPUSH
65491: PPUSH
65492: PPUSH
65493: PPUSH
65494: PPUSH
65495: PPUSH
65496: PPUSH
// if not turrets or not factories then
65497: LD_VAR 0 1
65501: NOT
65502: PUSH
65503: LD_VAR 0 2
65507: NOT
65508: OR
65509: IFFALSE 65513
// exit ;
65511: GO 65820
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65513: LD_ADDR_VAR 0 10
65517: PUSH
65518: LD_INT 5
65520: PUSH
65521: LD_INT 6
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: LD_INT 4
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 5
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 24
65555: PUSH
65556: LD_INT 25
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 23
65565: PUSH
65566: LD_INT 27
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 42
65579: PUSH
65580: LD_INT 43
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 44
65589: PUSH
65590: LD_INT 46
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 45
65599: PUSH
65600: LD_INT 47
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// result := [ ] ;
65617: LD_ADDR_VAR 0 3
65621: PUSH
65622: EMPTY
65623: ST_TO_ADDR
// for i in turrets do
65624: LD_ADDR_VAR 0 4
65628: PUSH
65629: LD_VAR 0 1
65633: PUSH
65634: FOR_IN
65635: IFFALSE 65818
// begin nat := GetNation ( i ) ;
65637: LD_ADDR_VAR 0 7
65641: PUSH
65642: LD_VAR 0 4
65646: PPUSH
65647: CALL_OW 248
65651: ST_TO_ADDR
// weapon := 0 ;
65652: LD_ADDR_VAR 0 8
65656: PUSH
65657: LD_INT 0
65659: ST_TO_ADDR
// if not nat then
65660: LD_VAR 0 7
65664: NOT
65665: IFFALSE 65669
// continue ;
65667: GO 65634
// for j in list [ nat ] do
65669: LD_ADDR_VAR 0 5
65673: PUSH
65674: LD_VAR 0 10
65678: PUSH
65679: LD_VAR 0 7
65683: ARRAY
65684: PUSH
65685: FOR_IN
65686: IFFALSE 65727
// if GetBWeapon ( i ) = j [ 1 ] then
65688: LD_VAR 0 4
65692: PPUSH
65693: CALL_OW 269
65697: PUSH
65698: LD_VAR 0 5
65702: PUSH
65703: LD_INT 1
65705: ARRAY
65706: EQUAL
65707: IFFALSE 65725
// begin weapon := j [ 2 ] ;
65709: LD_ADDR_VAR 0 8
65713: PUSH
65714: LD_VAR 0 5
65718: PUSH
65719: LD_INT 2
65721: ARRAY
65722: ST_TO_ADDR
// break ;
65723: GO 65727
// end ;
65725: GO 65685
65727: POP
65728: POP
// if not weapon then
65729: LD_VAR 0 8
65733: NOT
65734: IFFALSE 65738
// continue ;
65736: GO 65634
// for k in factories do
65738: LD_ADDR_VAR 0 6
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: FOR_IN
65749: IFFALSE 65814
// begin weapons := AvailableWeaponList ( k ) ;
65751: LD_ADDR_VAR 0 9
65755: PUSH
65756: LD_VAR 0 6
65760: PPUSH
65761: CALL_OW 478
65765: ST_TO_ADDR
// if not weapons then
65766: LD_VAR 0 9
65770: NOT
65771: IFFALSE 65775
// continue ;
65773: GO 65748
// if weapon in weapons then
65775: LD_VAR 0 8
65779: PUSH
65780: LD_VAR 0 9
65784: IN
65785: IFFALSE 65812
// begin result := [ i , weapon ] ;
65787: LD_ADDR_VAR 0 3
65791: PUSH
65792: LD_VAR 0 4
65796: PUSH
65797: LD_VAR 0 8
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: ST_TO_ADDR
// exit ;
65806: POP
65807: POP
65808: POP
65809: POP
65810: GO 65820
// end ; end ;
65812: GO 65748
65814: POP
65815: POP
// end ;
65816: GO 65634
65818: POP
65819: POP
// end ;
65820: LD_VAR 0 3
65824: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65825: LD_INT 0
65827: PPUSH
// if not side or side > 8 then
65828: LD_VAR 0 3
65832: NOT
65833: PUSH
65834: LD_VAR 0 3
65838: PUSH
65839: LD_INT 8
65841: GREATER
65842: OR
65843: IFFALSE 65847
// exit ;
65845: GO 65906
// if not range then
65847: LD_VAR 0 4
65851: NOT
65852: IFFALSE 65863
// range := - 12 ;
65854: LD_ADDR_VAR 0 4
65858: PUSH
65859: LD_INT 12
65861: NEG
65862: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65863: LD_VAR 0 1
65867: PPUSH
65868: LD_VAR 0 2
65872: PPUSH
65873: LD_VAR 0 3
65877: PPUSH
65878: LD_VAR 0 4
65882: PPUSH
65883: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65887: LD_VAR 0 1
65891: PPUSH
65892: LD_VAR 0 2
65896: PPUSH
65897: LD_VAR 0 3
65901: PPUSH
65902: CALL_OW 331
// end ;
65906: LD_VAR 0 5
65910: RET
// export function Video ( mode ) ; begin
65911: LD_INT 0
65913: PPUSH
// ingame_video = mode ;
65914: LD_ADDR_OWVAR 52
65918: PUSH
65919: LD_VAR 0 1
65923: ST_TO_ADDR
// interface_hidden = mode ;
65924: LD_ADDR_OWVAR 54
65928: PUSH
65929: LD_VAR 0 1
65933: ST_TO_ADDR
// end ;
65934: LD_VAR 0 2
65938: RET
// export function Join ( array , element ) ; begin
65939: LD_INT 0
65941: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65942: LD_ADDR_VAR 0 3
65946: PUSH
65947: LD_VAR 0 1
65951: PPUSH
65952: LD_VAR 0 1
65956: PUSH
65957: LD_INT 1
65959: PLUS
65960: PPUSH
65961: LD_VAR 0 2
65965: PPUSH
65966: CALL_OW 1
65970: ST_TO_ADDR
// end ;
65971: LD_VAR 0 3
65975: RET
// export function JoinUnion ( array , element ) ; begin
65976: LD_INT 0
65978: PPUSH
// result := array union element ;
65979: LD_ADDR_VAR 0 3
65983: PUSH
65984: LD_VAR 0 1
65988: PUSH
65989: LD_VAR 0 2
65993: UNION
65994: ST_TO_ADDR
// end ;
65995: LD_VAR 0 3
65999: RET
// export function GetBehemoths ( side ) ; begin
66000: LD_INT 0
66002: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66003: LD_ADDR_VAR 0 2
66007: PUSH
66008: LD_INT 22
66010: PUSH
66011: LD_VAR 0 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 31
66022: PUSH
66023: LD_INT 25
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PPUSH
66034: CALL_OW 69
66038: ST_TO_ADDR
// end ;
66039: LD_VAR 0 2
66043: RET
// export function Shuffle ( array ) ; var i , index ; begin
66044: LD_INT 0
66046: PPUSH
66047: PPUSH
66048: PPUSH
// result := [ ] ;
66049: LD_ADDR_VAR 0 2
66053: PUSH
66054: EMPTY
66055: ST_TO_ADDR
// if not array then
66056: LD_VAR 0 1
66060: NOT
66061: IFFALSE 66065
// exit ;
66063: GO 66164
// Randomize ;
66065: CALL_OW 10
// for i = array downto 1 do
66069: LD_ADDR_VAR 0 3
66073: PUSH
66074: DOUBLE
66075: LD_VAR 0 1
66079: INC
66080: ST_TO_ADDR
66081: LD_INT 1
66083: PUSH
66084: FOR_DOWNTO
66085: IFFALSE 66162
// begin index := rand ( 1 , array ) ;
66087: LD_ADDR_VAR 0 4
66091: PUSH
66092: LD_INT 1
66094: PPUSH
66095: LD_VAR 0 1
66099: PPUSH
66100: CALL_OW 12
66104: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66105: LD_ADDR_VAR 0 2
66109: PUSH
66110: LD_VAR 0 2
66114: PPUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_INT 1
66122: PLUS
66123: PPUSH
66124: LD_VAR 0 1
66128: PUSH
66129: LD_VAR 0 4
66133: ARRAY
66134: PPUSH
66135: CALL_OW 2
66139: ST_TO_ADDR
// array := Delete ( array , index ) ;
66140: LD_ADDR_VAR 0 1
66144: PUSH
66145: LD_VAR 0 1
66149: PPUSH
66150: LD_VAR 0 4
66154: PPUSH
66155: CALL_OW 3
66159: ST_TO_ADDR
// end ;
66160: GO 66084
66162: POP
66163: POP
// end ;
66164: LD_VAR 0 2
66168: RET
// export function GetBaseMaterials ( base ) ; begin
66169: LD_INT 0
66171: PPUSH
// result := [ 0 , 0 , 0 ] ;
66172: LD_ADDR_VAR 0 2
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: ST_TO_ADDR
// if not base then
66191: LD_VAR 0 1
66195: NOT
66196: IFFALSE 66200
// exit ;
66198: GO 66249
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66200: LD_ADDR_VAR 0 2
66204: PUSH
66205: LD_VAR 0 1
66209: PPUSH
66210: LD_INT 1
66212: PPUSH
66213: CALL_OW 275
66217: PUSH
66218: LD_VAR 0 1
66222: PPUSH
66223: LD_INT 2
66225: PPUSH
66226: CALL_OW 275
66230: PUSH
66231: LD_VAR 0 1
66235: PPUSH
66236: LD_INT 3
66238: PPUSH
66239: CALL_OW 275
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: ST_TO_ADDR
// end ;
66249: LD_VAR 0 2
66253: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66254: LD_INT 0
66256: PPUSH
66257: PPUSH
// result := array ;
66258: LD_ADDR_VAR 0 3
66262: PUSH
66263: LD_VAR 0 1
66267: ST_TO_ADDR
// if size >= result then
66268: LD_VAR 0 2
66272: PUSH
66273: LD_VAR 0 3
66277: GREATEREQUAL
66278: IFFALSE 66282
// exit ;
66280: GO 66332
// if size then
66282: LD_VAR 0 2
66286: IFFALSE 66332
// for i := array downto size do
66288: LD_ADDR_VAR 0 4
66292: PUSH
66293: DOUBLE
66294: LD_VAR 0 1
66298: INC
66299: ST_TO_ADDR
66300: LD_VAR 0 2
66304: PUSH
66305: FOR_DOWNTO
66306: IFFALSE 66330
// result := Delete ( result , result ) ;
66308: LD_ADDR_VAR 0 3
66312: PUSH
66313: LD_VAR 0 3
66317: PPUSH
66318: LD_VAR 0 3
66322: PPUSH
66323: CALL_OW 3
66327: ST_TO_ADDR
66328: GO 66305
66330: POP
66331: POP
// end ;
66332: LD_VAR 0 3
66336: RET
// export function ComExit ( unit ) ; var tmp ; begin
66337: LD_INT 0
66339: PPUSH
66340: PPUSH
// if not IsInUnit ( unit ) then
66341: LD_VAR 0 1
66345: PPUSH
66346: CALL_OW 310
66350: NOT
66351: IFFALSE 66355
// exit ;
66353: GO 66415
// tmp := IsInUnit ( unit ) ;
66355: LD_ADDR_VAR 0 3
66359: PUSH
66360: LD_VAR 0 1
66364: PPUSH
66365: CALL_OW 310
66369: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66370: LD_VAR 0 3
66374: PPUSH
66375: CALL_OW 247
66379: PUSH
66380: LD_INT 2
66382: EQUAL
66383: IFFALSE 66396
// ComExitVehicle ( unit ) else
66385: LD_VAR 0 1
66389: PPUSH
66390: CALL_OW 121
66394: GO 66405
// ComExitBuilding ( unit ) ;
66396: LD_VAR 0 1
66400: PPUSH
66401: CALL_OW 122
// result := tmp ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_VAR 0 3
66414: ST_TO_ADDR
// end ;
66415: LD_VAR 0 2
66419: RET
// export function ComExitAll ( units ) ; var i ; begin
66420: LD_INT 0
66422: PPUSH
66423: PPUSH
// if not units then
66424: LD_VAR 0 1
66428: NOT
66429: IFFALSE 66433
// exit ;
66431: GO 66459
// for i in units do
66433: LD_ADDR_VAR 0 3
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: FOR_IN
66444: IFFALSE 66457
// ComExit ( i ) ;
66446: LD_VAR 0 3
66450: PPUSH
66451: CALL 66337 0 1
66455: GO 66443
66457: POP
66458: POP
// end ;
66459: LD_VAR 0 2
66463: RET
// export function ResetHc ; begin
66464: LD_INT 0
66466: PPUSH
// InitHc ;
66467: CALL_OW 19
// hc_importance := 0 ;
66471: LD_ADDR_OWVAR 32
66475: PUSH
66476: LD_INT 0
66478: ST_TO_ADDR
// end ;
66479: LD_VAR 0 1
66483: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66484: LD_INT 0
66486: PPUSH
66487: PPUSH
66488: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66489: LD_ADDR_VAR 0 6
66493: PUSH
66494: LD_VAR 0 1
66498: PUSH
66499: LD_VAR 0 3
66503: PLUS
66504: PUSH
66505: LD_INT 2
66507: DIV
66508: ST_TO_ADDR
// if _x < 0 then
66509: LD_VAR 0 6
66513: PUSH
66514: LD_INT 0
66516: LESS
66517: IFFALSE 66534
// _x := _x * - 1 ;
66519: LD_ADDR_VAR 0 6
66523: PUSH
66524: LD_VAR 0 6
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: MUL
66533: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66534: LD_ADDR_VAR 0 7
66538: PUSH
66539: LD_VAR 0 2
66543: PUSH
66544: LD_VAR 0 4
66548: PLUS
66549: PUSH
66550: LD_INT 2
66552: DIV
66553: ST_TO_ADDR
// if _y < 0 then
66554: LD_VAR 0 7
66558: PUSH
66559: LD_INT 0
66561: LESS
66562: IFFALSE 66579
// _y := _y * - 1 ;
66564: LD_ADDR_VAR 0 7
66568: PUSH
66569: LD_VAR 0 7
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: MUL
66578: ST_TO_ADDR
// result := [ _x , _y ] ;
66579: LD_ADDR_VAR 0 5
66583: PUSH
66584: LD_VAR 0 6
66588: PUSH
66589: LD_VAR 0 7
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// end ;
66598: LD_VAR 0 5
66602: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66603: LD_INT 0
66605: PPUSH
66606: PPUSH
66607: PPUSH
66608: PPUSH
// task := GetTaskList ( unit ) ;
66609: LD_ADDR_VAR 0 7
66613: PUSH
66614: LD_VAR 0 1
66618: PPUSH
66619: CALL_OW 437
66623: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66624: LD_VAR 0 7
66628: NOT
66629: PUSH
66630: LD_VAR 0 1
66634: PPUSH
66635: LD_VAR 0 2
66639: PPUSH
66640: CALL_OW 308
66644: NOT
66645: AND
66646: IFFALSE 66650
// exit ;
66648: GO 66768
// if IsInArea ( unit , area ) then
66650: LD_VAR 0 1
66654: PPUSH
66655: LD_VAR 0 2
66659: PPUSH
66660: CALL_OW 308
66664: IFFALSE 66682
// begin ComMoveToArea ( unit , goAway ) ;
66666: LD_VAR 0 1
66670: PPUSH
66671: LD_VAR 0 3
66675: PPUSH
66676: CALL_OW 113
// exit ;
66680: GO 66768
// end ; if task [ 1 ] [ 1 ] <> M then
66682: LD_VAR 0 7
66686: PUSH
66687: LD_INT 1
66689: ARRAY
66690: PUSH
66691: LD_INT 1
66693: ARRAY
66694: PUSH
66695: LD_STRING M
66697: NONEQUAL
66698: IFFALSE 66702
// exit ;
66700: GO 66768
// x := task [ 1 ] [ 2 ] ;
66702: LD_ADDR_VAR 0 5
66706: PUSH
66707: LD_VAR 0 7
66711: PUSH
66712: LD_INT 1
66714: ARRAY
66715: PUSH
66716: LD_INT 2
66718: ARRAY
66719: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66720: LD_ADDR_VAR 0 6
66724: PUSH
66725: LD_VAR 0 7
66729: PUSH
66730: LD_INT 1
66732: ARRAY
66733: PUSH
66734: LD_INT 3
66736: ARRAY
66737: ST_TO_ADDR
// if InArea ( x , y , area ) then
66738: LD_VAR 0 5
66742: PPUSH
66743: LD_VAR 0 6
66747: PPUSH
66748: LD_VAR 0 2
66752: PPUSH
66753: CALL_OW 309
66757: IFFALSE 66768
// ComStop ( unit ) ;
66759: LD_VAR 0 1
66763: PPUSH
66764: CALL_OW 141
// end ;
66768: LD_VAR 0 4
66772: RET
// export function Abs ( value ) ; begin
66773: LD_INT 0
66775: PPUSH
// result := value ;
66776: LD_ADDR_VAR 0 2
66780: PUSH
66781: LD_VAR 0 1
66785: ST_TO_ADDR
// if value < 0 then
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 0
66793: LESS
66794: IFFALSE 66811
// result := value * - 1 ;
66796: LD_ADDR_VAR 0 2
66800: PUSH
66801: LD_VAR 0 1
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: MUL
66810: ST_TO_ADDR
// end ;
66811: LD_VAR 0 2
66815: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
66825: PPUSH
// if not unit or not building then
66826: LD_VAR 0 1
66830: NOT
66831: PUSH
66832: LD_VAR 0 2
66836: NOT
66837: OR
66838: IFFALSE 66842
// exit ;
66840: GO 67068
// x := GetX ( building ) ;
66842: LD_ADDR_VAR 0 4
66846: PUSH
66847: LD_VAR 0 2
66851: PPUSH
66852: CALL_OW 250
66856: ST_TO_ADDR
// y := GetY ( building ) ;
66857: LD_ADDR_VAR 0 6
66861: PUSH
66862: LD_VAR 0 2
66866: PPUSH
66867: CALL_OW 251
66871: ST_TO_ADDR
// d := GetDir ( building ) ;
66872: LD_ADDR_VAR 0 8
66876: PUSH
66877: LD_VAR 0 2
66881: PPUSH
66882: CALL_OW 254
66886: ST_TO_ADDR
// r := 4 ;
66887: LD_ADDR_VAR 0 9
66891: PUSH
66892: LD_INT 4
66894: ST_TO_ADDR
// for i := 1 to 5 do
66895: LD_ADDR_VAR 0 10
66899: PUSH
66900: DOUBLE
66901: LD_INT 1
66903: DEC
66904: ST_TO_ADDR
66905: LD_INT 5
66907: PUSH
66908: FOR_TO
66909: IFFALSE 67066
// begin _x := ShiftX ( x , d , r + i ) ;
66911: LD_ADDR_VAR 0 5
66915: PUSH
66916: LD_VAR 0 4
66920: PPUSH
66921: LD_VAR 0 8
66925: PPUSH
66926: LD_VAR 0 9
66930: PUSH
66931: LD_VAR 0 10
66935: PLUS
66936: PPUSH
66937: CALL_OW 272
66941: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66942: LD_ADDR_VAR 0 7
66946: PUSH
66947: LD_VAR 0 6
66951: PPUSH
66952: LD_VAR 0 8
66956: PPUSH
66957: LD_VAR 0 9
66961: PUSH
66962: LD_VAR 0 10
66966: PLUS
66967: PPUSH
66968: CALL_OW 273
66972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66973: LD_VAR 0 5
66977: PPUSH
66978: LD_VAR 0 7
66982: PPUSH
66983: CALL_OW 488
66987: PUSH
66988: LD_VAR 0 5
66992: PPUSH
66993: LD_VAR 0 7
66997: PPUSH
66998: CALL_OW 428
67002: PPUSH
67003: CALL_OW 247
67007: PUSH
67008: LD_INT 3
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: IN
67018: NOT
67019: AND
67020: IFFALSE 67064
// begin ComMoveXY ( unit , _x , _y ) ;
67022: LD_VAR 0 1
67026: PPUSH
67027: LD_VAR 0 5
67031: PPUSH
67032: LD_VAR 0 7
67036: PPUSH
67037: CALL_OW 111
// result := [ _x , _y ] ;
67041: LD_ADDR_VAR 0 3
67045: PUSH
67046: LD_VAR 0 5
67050: PUSH
67051: LD_VAR 0 7
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: ST_TO_ADDR
// exit ;
67060: POP
67061: POP
67062: GO 67068
// end ; end ;
67064: GO 66908
67066: POP
67067: POP
// end ;
67068: LD_VAR 0 3
67072: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67073: LD_INT 0
67075: PPUSH
67076: PPUSH
67077: PPUSH
// result := 0 ;
67078: LD_ADDR_VAR 0 3
67082: PUSH
67083: LD_INT 0
67085: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 0
67093: LESS
67094: PUSH
67095: LD_VAR 0 1
67099: PUSH
67100: LD_INT 8
67102: GREATER
67103: OR
67104: PUSH
67105: LD_VAR 0 2
67109: PUSH
67110: LD_INT 0
67112: LESS
67113: OR
67114: PUSH
67115: LD_VAR 0 2
67119: PUSH
67120: LD_INT 8
67122: GREATER
67123: OR
67124: IFFALSE 67128
// exit ;
67126: GO 67203
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67128: LD_ADDR_VAR 0 4
67132: PUSH
67133: LD_INT 22
67135: PUSH
67136: LD_VAR 0 2
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PPUSH
67145: CALL_OW 69
67149: PUSH
67150: FOR_IN
67151: IFFALSE 67201
// begin un := UnitShoot ( i ) ;
67153: LD_ADDR_VAR 0 5
67157: PUSH
67158: LD_VAR 0 4
67162: PPUSH
67163: CALL_OW 504
67167: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67168: LD_VAR 0 5
67172: PPUSH
67173: CALL_OW 255
67177: PUSH
67178: LD_VAR 0 1
67182: EQUAL
67183: IFFALSE 67199
// begin result := un ;
67185: LD_ADDR_VAR 0 3
67189: PUSH
67190: LD_VAR 0 5
67194: ST_TO_ADDR
// exit ;
67195: POP
67196: POP
67197: GO 67203
// end ; end ;
67199: GO 67150
67201: POP
67202: POP
// end ;
67203: LD_VAR 0 3
67207: RET
// export function GetCargoBay ( units ) ; begin
67208: LD_INT 0
67210: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67211: LD_ADDR_VAR 0 2
67215: PUSH
67216: LD_VAR 0 1
67220: PPUSH
67221: LD_INT 2
67223: PUSH
67224: LD_INT 34
67226: PUSH
67227: LD_INT 12
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 34
67236: PUSH
67237: LD_INT 51
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 34
67246: PUSH
67247: LD_INT 32
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 34
67256: PUSH
67257: LD_INT 89
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: PPUSH
67271: CALL_OW 72
67275: ST_TO_ADDR
// end ;
67276: LD_VAR 0 2
67280: RET
// export function Negate ( value ) ; begin
67281: LD_INT 0
67283: PPUSH
// result := not value ;
67284: LD_ADDR_VAR 0 2
67288: PUSH
67289: LD_VAR 0 1
67293: NOT
67294: ST_TO_ADDR
// end ;
67295: LD_VAR 0 2
67299: RET
// export function Inc ( value ) ; begin
67300: LD_INT 0
67302: PPUSH
// result := value + 1 ;
67303: LD_ADDR_VAR 0 2
67307: PUSH
67308: LD_VAR 0 1
67312: PUSH
67313: LD_INT 1
67315: PLUS
67316: ST_TO_ADDR
// end ;
67317: LD_VAR 0 2
67321: RET
// export function Dec ( value ) ; begin
67322: LD_INT 0
67324: PPUSH
// result := value - 1 ;
67325: LD_ADDR_VAR 0 2
67329: PUSH
67330: LD_VAR 0 1
67334: PUSH
67335: LD_INT 1
67337: MINUS
67338: ST_TO_ADDR
// end ;
67339: LD_VAR 0 2
67343: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
67348: PPUSH
67349: PPUSH
67350: PPUSH
67351: PPUSH
67352: PPUSH
67353: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67354: LD_VAR 0 1
67358: PPUSH
67359: LD_VAR 0 2
67363: PPUSH
67364: CALL_OW 488
67368: NOT
67369: PUSH
67370: LD_VAR 0 3
67374: PPUSH
67375: LD_VAR 0 4
67379: PPUSH
67380: CALL_OW 488
67384: NOT
67385: OR
67386: IFFALSE 67399
// begin result := - 1 ;
67388: LD_ADDR_VAR 0 5
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: ST_TO_ADDR
// exit ;
67397: GO 67634
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67399: LD_ADDR_VAR 0 12
67403: PUSH
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_VAR 0 2
67413: PPUSH
67414: LD_VAR 0 3
67418: PPUSH
67419: LD_VAR 0 4
67423: PPUSH
67424: CALL 66484 0 4
67428: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67429: LD_ADDR_VAR 0 11
67433: PUSH
67434: LD_VAR 0 1
67438: PPUSH
67439: LD_VAR 0 2
67443: PPUSH
67444: LD_VAR 0 12
67448: PUSH
67449: LD_INT 1
67451: ARRAY
67452: PPUSH
67453: LD_VAR 0 12
67457: PUSH
67458: LD_INT 2
67460: ARRAY
67461: PPUSH
67462: CALL_OW 298
67466: ST_TO_ADDR
// distance := 9999 ;
67467: LD_ADDR_VAR 0 10
67471: PUSH
67472: LD_INT 9999
67474: ST_TO_ADDR
// for i := 0 to 5 do
67475: LD_ADDR_VAR 0 6
67479: PUSH
67480: DOUBLE
67481: LD_INT 0
67483: DEC
67484: ST_TO_ADDR
67485: LD_INT 5
67487: PUSH
67488: FOR_TO
67489: IFFALSE 67632
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67491: LD_ADDR_VAR 0 7
67495: PUSH
67496: LD_VAR 0 1
67500: PPUSH
67501: LD_VAR 0 6
67505: PPUSH
67506: LD_VAR 0 11
67510: PPUSH
67511: CALL_OW 272
67515: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67516: LD_ADDR_VAR 0 8
67520: PUSH
67521: LD_VAR 0 2
67525: PPUSH
67526: LD_VAR 0 6
67530: PPUSH
67531: LD_VAR 0 11
67535: PPUSH
67536: CALL_OW 273
67540: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67541: LD_VAR 0 7
67545: PPUSH
67546: LD_VAR 0 8
67550: PPUSH
67551: CALL_OW 488
67555: NOT
67556: IFFALSE 67560
// continue ;
67558: GO 67488
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67560: LD_ADDR_VAR 0 9
67564: PUSH
67565: LD_VAR 0 12
67569: PUSH
67570: LD_INT 1
67572: ARRAY
67573: PPUSH
67574: LD_VAR 0 12
67578: PUSH
67579: LD_INT 2
67581: ARRAY
67582: PPUSH
67583: LD_VAR 0 7
67587: PPUSH
67588: LD_VAR 0 8
67592: PPUSH
67593: CALL_OW 298
67597: ST_TO_ADDR
// if tmp < distance then
67598: LD_VAR 0 9
67602: PUSH
67603: LD_VAR 0 10
67607: LESS
67608: IFFALSE 67630
// begin result := i ;
67610: LD_ADDR_VAR 0 5
67614: PUSH
67615: LD_VAR 0 6
67619: ST_TO_ADDR
// distance := tmp ;
67620: LD_ADDR_VAR 0 10
67624: PUSH
67625: LD_VAR 0 9
67629: ST_TO_ADDR
// end ; end ;
67630: GO 67488
67632: POP
67633: POP
// end ;
67634: LD_VAR 0 5
67638: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67639: LD_INT 0
67641: PPUSH
67642: PPUSH
// if not driver or not IsInUnit ( driver ) then
67643: LD_VAR 0 1
67647: NOT
67648: PUSH
67649: LD_VAR 0 1
67653: PPUSH
67654: CALL_OW 310
67658: NOT
67659: OR
67660: IFFALSE 67664
// exit ;
67662: GO 67754
// vehicle := IsInUnit ( driver ) ;
67664: LD_ADDR_VAR 0 3
67668: PUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: CALL_OW 310
67678: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67679: LD_VAR 0 1
67683: PPUSH
67684: LD_STRING \
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: PUSH
67714: LD_STRING E
67716: PUSH
67717: LD_INT 0
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: LD_VAR 0 3
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PPUSH
67750: CALL_OW 446
// end ;
67754: LD_VAR 0 2
67758: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67759: LD_INT 0
67761: PPUSH
67762: PPUSH
// if not driver or not IsInUnit ( driver ) then
67763: LD_VAR 0 1
67767: NOT
67768: PUSH
67769: LD_VAR 0 1
67773: PPUSH
67774: CALL_OW 310
67778: NOT
67779: OR
67780: IFFALSE 67784
// exit ;
67782: GO 67874
// vehicle := IsInUnit ( driver ) ;
67784: LD_ADDR_VAR 0 3
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: CALL_OW 310
67798: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67799: LD_VAR 0 1
67803: PPUSH
67804: LD_STRING \
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: PUSH
67834: LD_STRING E
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_VAR 0 3
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PPUSH
67870: CALL_OW 447
// end ;
67874: LD_VAR 0 2
67878: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67879: LD_INT 0
67881: PPUSH
67882: PPUSH
67883: PPUSH
// tmp := [ ] ;
67884: LD_ADDR_VAR 0 5
67888: PUSH
67889: EMPTY
67890: ST_TO_ADDR
// for i in units do
67891: LD_ADDR_VAR 0 4
67895: PUSH
67896: LD_VAR 0 1
67900: PUSH
67901: FOR_IN
67902: IFFALSE 67940
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67904: LD_ADDR_VAR 0 5
67908: PUSH
67909: LD_VAR 0 5
67913: PPUSH
67914: LD_VAR 0 5
67918: PUSH
67919: LD_INT 1
67921: PLUS
67922: PPUSH
67923: LD_VAR 0 4
67927: PPUSH
67928: CALL_OW 256
67932: PPUSH
67933: CALL_OW 2
67937: ST_TO_ADDR
67938: GO 67901
67940: POP
67941: POP
// if not tmp then
67942: LD_VAR 0 5
67946: NOT
67947: IFFALSE 67951
// exit ;
67949: GO 67999
// if asc then
67951: LD_VAR 0 2
67955: IFFALSE 67979
// result := SortListByListAsc ( units , tmp ) else
67957: LD_ADDR_VAR 0 3
67961: PUSH
67962: LD_VAR 0 1
67966: PPUSH
67967: LD_VAR 0 5
67971: PPUSH
67972: CALL_OW 76
67976: ST_TO_ADDR
67977: GO 67999
// result := SortListByListDesc ( units , tmp ) ;
67979: LD_ADDR_VAR 0 3
67983: PUSH
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 5
67993: PPUSH
67994: CALL_OW 77
67998: ST_TO_ADDR
// end ;
67999: LD_VAR 0 3
68003: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68004: LD_INT 0
68006: PPUSH
68007: PPUSH
// task := GetTaskList ( mech ) ;
68008: LD_ADDR_VAR 0 4
68012: PUSH
68013: LD_VAR 0 1
68017: PPUSH
68018: CALL_OW 437
68022: ST_TO_ADDR
// if not task then
68023: LD_VAR 0 4
68027: NOT
68028: IFFALSE 68032
// exit ;
68030: GO 68074
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68032: LD_ADDR_VAR 0 3
68036: PUSH
68037: LD_VAR 0 4
68041: PUSH
68042: LD_INT 1
68044: ARRAY
68045: PUSH
68046: LD_INT 1
68048: ARRAY
68049: PUSH
68050: LD_STRING r
68052: EQUAL
68053: PUSH
68054: LD_VAR 0 4
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: PUSH
68063: LD_INT 4
68065: ARRAY
68066: PUSH
68067: LD_VAR 0 2
68071: EQUAL
68072: AND
68073: ST_TO_ADDR
// end ;
68074: LD_VAR 0 3
68078: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68079: LD_INT 0
68081: PPUSH
// SetDir ( unit , d ) ;
68082: LD_VAR 0 1
68086: PPUSH
68087: LD_VAR 0 4
68091: PPUSH
68092: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68096: LD_VAR 0 1
68100: PPUSH
68101: LD_VAR 0 2
68105: PPUSH
68106: LD_VAR 0 3
68110: PPUSH
68111: LD_VAR 0 5
68115: PPUSH
68116: CALL_OW 48
// end ;
68120: LD_VAR 0 6
68124: RET
// export function ToNaturalNumber ( number ) ; begin
68125: LD_INT 0
68127: PPUSH
// result := number div 1 ;
68128: LD_ADDR_VAR 0 2
68132: PUSH
68133: LD_VAR 0 1
68137: PUSH
68138: LD_INT 1
68140: DIV
68141: ST_TO_ADDR
// if number < 0 then
68142: LD_VAR 0 1
68146: PUSH
68147: LD_INT 0
68149: LESS
68150: IFFALSE 68160
// result := 0 ;
68152: LD_ADDR_VAR 0 2
68156: PUSH
68157: LD_INT 0
68159: ST_TO_ADDR
// end ;
68160: LD_VAR 0 2
68164: RET
// export function SortByClass ( units , class ) ; var un ; begin
68165: LD_INT 0
68167: PPUSH
68168: PPUSH
// if not units or not class then
68169: LD_VAR 0 1
68173: NOT
68174: PUSH
68175: LD_VAR 0 2
68179: NOT
68180: OR
68181: IFFALSE 68185
// exit ;
68183: GO 68280
// result := [ ] ;
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: EMPTY
68191: ST_TO_ADDR
// for un in units do
68192: LD_ADDR_VAR 0 4
68196: PUSH
68197: LD_VAR 0 1
68201: PUSH
68202: FOR_IN
68203: IFFALSE 68278
// if GetClass ( un ) = class then
68205: LD_VAR 0 4
68209: PPUSH
68210: CALL_OW 257
68214: PUSH
68215: LD_VAR 0 2
68219: EQUAL
68220: IFFALSE 68247
// result := Insert ( result , 1 , un ) else
68222: LD_ADDR_VAR 0 3
68226: PUSH
68227: LD_VAR 0 3
68231: PPUSH
68232: LD_INT 1
68234: PPUSH
68235: LD_VAR 0 4
68239: PPUSH
68240: CALL_OW 2
68244: ST_TO_ADDR
68245: GO 68276
// result := Replace ( result , result + 1 , un ) ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_VAR 0 3
68256: PPUSH
68257: LD_VAR 0 3
68261: PUSH
68262: LD_INT 1
68264: PLUS
68265: PPUSH
68266: LD_VAR 0 4
68270: PPUSH
68271: CALL_OW 1
68275: ST_TO_ADDR
68276: GO 68202
68278: POP
68279: POP
// end ;
68280: LD_VAR 0 3
68284: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68285: LD_INT 0
68287: PPUSH
68288: PPUSH
68289: PPUSH
68290: PPUSH
68291: PPUSH
68292: PPUSH
68293: PPUSH
// result := [ ] ;
68294: LD_ADDR_VAR 0 4
68298: PUSH
68299: EMPTY
68300: ST_TO_ADDR
// if x - r < 0 then
68301: LD_VAR 0 1
68305: PUSH
68306: LD_VAR 0 3
68310: MINUS
68311: PUSH
68312: LD_INT 0
68314: LESS
68315: IFFALSE 68327
// min_x := 0 else
68317: LD_ADDR_VAR 0 8
68321: PUSH
68322: LD_INT 0
68324: ST_TO_ADDR
68325: GO 68343
// min_x := x - r ;
68327: LD_ADDR_VAR 0 8
68331: PUSH
68332: LD_VAR 0 1
68336: PUSH
68337: LD_VAR 0 3
68341: MINUS
68342: ST_TO_ADDR
// if y - r < 0 then
68343: LD_VAR 0 2
68347: PUSH
68348: LD_VAR 0 3
68352: MINUS
68353: PUSH
68354: LD_INT 0
68356: LESS
68357: IFFALSE 68369
// min_y := 0 else
68359: LD_ADDR_VAR 0 7
68363: PUSH
68364: LD_INT 0
68366: ST_TO_ADDR
68367: GO 68385
// min_y := y - r ;
68369: LD_ADDR_VAR 0 7
68373: PUSH
68374: LD_VAR 0 2
68378: PUSH
68379: LD_VAR 0 3
68383: MINUS
68384: ST_TO_ADDR
// max_x := x + r ;
68385: LD_ADDR_VAR 0 9
68389: PUSH
68390: LD_VAR 0 1
68394: PUSH
68395: LD_VAR 0 3
68399: PLUS
68400: ST_TO_ADDR
// max_y := y + r ;
68401: LD_ADDR_VAR 0 10
68405: PUSH
68406: LD_VAR 0 2
68410: PUSH
68411: LD_VAR 0 3
68415: PLUS
68416: ST_TO_ADDR
// for _x = min_x to max_x do
68417: LD_ADDR_VAR 0 5
68421: PUSH
68422: DOUBLE
68423: LD_VAR 0 8
68427: DEC
68428: ST_TO_ADDR
68429: LD_VAR 0 9
68433: PUSH
68434: FOR_TO
68435: IFFALSE 68536
// for _y = min_y to max_y do
68437: LD_ADDR_VAR 0 6
68441: PUSH
68442: DOUBLE
68443: LD_VAR 0 7
68447: DEC
68448: ST_TO_ADDR
68449: LD_VAR 0 10
68453: PUSH
68454: FOR_TO
68455: IFFALSE 68532
// begin if not ValidHex ( _x , _y ) then
68457: LD_VAR 0 5
68461: PPUSH
68462: LD_VAR 0 6
68466: PPUSH
68467: CALL_OW 488
68471: NOT
68472: IFFALSE 68476
// continue ;
68474: GO 68454
// if GetResourceTypeXY ( _x , _y ) then
68476: LD_VAR 0 5
68480: PPUSH
68481: LD_VAR 0 6
68485: PPUSH
68486: CALL_OW 283
68490: IFFALSE 68530
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68492: LD_ADDR_VAR 0 4
68496: PUSH
68497: LD_VAR 0 4
68501: PPUSH
68502: LD_VAR 0 4
68506: PUSH
68507: LD_INT 1
68509: PLUS
68510: PPUSH
68511: LD_VAR 0 5
68515: PUSH
68516: LD_VAR 0 6
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PPUSH
68525: CALL_OW 1
68529: ST_TO_ADDR
// end ;
68530: GO 68454
68532: POP
68533: POP
68534: GO 68434
68536: POP
68537: POP
// end ;
68538: LD_VAR 0 4
68542: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68543: LD_INT 0
68545: PPUSH
68546: PPUSH
68547: PPUSH
68548: PPUSH
68549: PPUSH
68550: PPUSH
68551: PPUSH
68552: PPUSH
// if not units then
68553: LD_VAR 0 1
68557: NOT
68558: IFFALSE 68562
// exit ;
68560: GO 69086
// result := UnitFilter ( units , [ f_ok ] ) ;
68562: LD_ADDR_VAR 0 3
68566: PUSH
68567: LD_VAR 0 1
68571: PPUSH
68572: LD_INT 50
68574: PUSH
68575: EMPTY
68576: LIST
68577: PPUSH
68578: CALL_OW 72
68582: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68583: LD_ADDR_VAR 0 8
68587: PUSH
68588: LD_VAR 0 1
68592: PUSH
68593: LD_INT 1
68595: ARRAY
68596: PPUSH
68597: CALL_OW 255
68601: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68602: LD_ADDR_VAR 0 10
68606: PUSH
68607: LD_INT 29
68609: PUSH
68610: LD_INT 91
68612: PUSH
68613: LD_INT 49
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: ST_TO_ADDR
// if not result then
68621: LD_VAR 0 3
68625: NOT
68626: IFFALSE 68630
// exit ;
68628: GO 69086
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68630: LD_ADDR_VAR 0 5
68634: PUSH
68635: LD_INT 81
68637: PUSH
68638: LD_VAR 0 8
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PPUSH
68647: CALL_OW 69
68651: ST_TO_ADDR
// for i in result do
68652: LD_ADDR_VAR 0 4
68656: PUSH
68657: LD_VAR 0 3
68661: PUSH
68662: FOR_IN
68663: IFFALSE 69084
// begin tag := GetTag ( i ) + 1 ;
68665: LD_ADDR_VAR 0 9
68669: PUSH
68670: LD_VAR 0 4
68674: PPUSH
68675: CALL_OW 110
68679: PUSH
68680: LD_INT 1
68682: PLUS
68683: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68684: LD_ADDR_VAR 0 7
68688: PUSH
68689: LD_VAR 0 4
68693: PPUSH
68694: CALL_OW 250
68698: PPUSH
68699: LD_VAR 0 4
68703: PPUSH
68704: CALL_OW 251
68708: PPUSH
68709: LD_INT 6
68711: PPUSH
68712: CALL 68285 0 3
68716: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68717: LD_VAR 0 4
68721: PPUSH
68722: CALL_OW 247
68726: PUSH
68727: LD_INT 2
68729: EQUAL
68730: PUSH
68731: LD_VAR 0 7
68735: AND
68736: PUSH
68737: LD_VAR 0 4
68741: PPUSH
68742: CALL_OW 264
68746: PUSH
68747: LD_VAR 0 10
68751: IN
68752: NOT
68753: AND
68754: IFFALSE 68793
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68756: LD_VAR 0 4
68760: PPUSH
68761: LD_VAR 0 7
68765: PUSH
68766: LD_INT 1
68768: ARRAY
68769: PUSH
68770: LD_INT 1
68772: ARRAY
68773: PPUSH
68774: LD_VAR 0 7
68778: PUSH
68779: LD_INT 1
68781: ARRAY
68782: PUSH
68783: LD_INT 2
68785: ARRAY
68786: PPUSH
68787: CALL_OW 116
68791: GO 69082
// if path > tag then
68793: LD_VAR 0 2
68797: PUSH
68798: LD_VAR 0 9
68802: GREATER
68803: IFFALSE 69011
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68805: LD_ADDR_VAR 0 6
68809: PUSH
68810: LD_VAR 0 5
68814: PPUSH
68815: LD_INT 91
68817: PUSH
68818: LD_VAR 0 4
68822: PUSH
68823: LD_INT 8
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: PPUSH
68831: CALL_OW 72
68835: ST_TO_ADDR
// if nearEnemy then
68836: LD_VAR 0 6
68840: IFFALSE 68909
// begin if GetWeapon ( i ) = ru_time_lapser then
68842: LD_VAR 0 4
68846: PPUSH
68847: CALL_OW 264
68851: PUSH
68852: LD_INT 49
68854: EQUAL
68855: IFFALSE 68883
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68857: LD_VAR 0 4
68861: PPUSH
68862: LD_VAR 0 6
68866: PPUSH
68867: LD_VAR 0 4
68871: PPUSH
68872: CALL_OW 74
68876: PPUSH
68877: CALL_OW 112
68881: GO 68907
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68883: LD_VAR 0 4
68887: PPUSH
68888: LD_VAR 0 6
68892: PPUSH
68893: LD_VAR 0 4
68897: PPUSH
68898: CALL_OW 74
68902: PPUSH
68903: CALL_OW 115
// end else
68907: GO 69009
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68909: LD_VAR 0 4
68913: PPUSH
68914: LD_VAR 0 2
68918: PUSH
68919: LD_VAR 0 9
68923: ARRAY
68924: PUSH
68925: LD_INT 1
68927: ARRAY
68928: PPUSH
68929: LD_VAR 0 2
68933: PUSH
68934: LD_VAR 0 9
68938: ARRAY
68939: PUSH
68940: LD_INT 2
68942: ARRAY
68943: PPUSH
68944: CALL_OW 297
68948: PUSH
68949: LD_INT 6
68951: GREATER
68952: IFFALSE 68995
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68954: LD_VAR 0 4
68958: PPUSH
68959: LD_VAR 0 2
68963: PUSH
68964: LD_VAR 0 9
68968: ARRAY
68969: PUSH
68970: LD_INT 1
68972: ARRAY
68973: PPUSH
68974: LD_VAR 0 2
68978: PUSH
68979: LD_VAR 0 9
68983: ARRAY
68984: PUSH
68985: LD_INT 2
68987: ARRAY
68988: PPUSH
68989: CALL_OW 114
68993: GO 69009
// SetTag ( i , tag ) ;
68995: LD_VAR 0 4
68999: PPUSH
69000: LD_VAR 0 9
69004: PPUSH
69005: CALL_OW 109
// end else
69009: GO 69082
// if enemy then
69011: LD_VAR 0 5
69015: IFFALSE 69082
// begin if GetWeapon ( i ) = ru_time_lapser then
69017: LD_VAR 0 4
69021: PPUSH
69022: CALL_OW 264
69026: PUSH
69027: LD_INT 49
69029: EQUAL
69030: IFFALSE 69058
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69032: LD_VAR 0 4
69036: PPUSH
69037: LD_VAR 0 5
69041: PPUSH
69042: LD_VAR 0 4
69046: PPUSH
69047: CALL_OW 74
69051: PPUSH
69052: CALL_OW 112
69056: GO 69082
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69058: LD_VAR 0 4
69062: PPUSH
69063: LD_VAR 0 5
69067: PPUSH
69068: LD_VAR 0 4
69072: PPUSH
69073: CALL_OW 74
69077: PPUSH
69078: CALL_OW 115
// end ; end ;
69082: GO 68662
69084: POP
69085: POP
// end ;
69086: LD_VAR 0 3
69090: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69091: LD_INT 0
69093: PPUSH
69094: PPUSH
69095: PPUSH
// if not unit or IsInUnit ( unit ) then
69096: LD_VAR 0 1
69100: NOT
69101: PUSH
69102: LD_VAR 0 1
69106: PPUSH
69107: CALL_OW 310
69111: OR
69112: IFFALSE 69116
// exit ;
69114: GO 69207
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69116: LD_ADDR_VAR 0 4
69120: PUSH
69121: LD_VAR 0 1
69125: PPUSH
69126: CALL_OW 250
69130: PPUSH
69131: LD_VAR 0 2
69135: PPUSH
69136: LD_INT 1
69138: PPUSH
69139: CALL_OW 272
69143: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69144: LD_ADDR_VAR 0 5
69148: PUSH
69149: LD_VAR 0 1
69153: PPUSH
69154: CALL_OW 251
69158: PPUSH
69159: LD_VAR 0 2
69163: PPUSH
69164: LD_INT 1
69166: PPUSH
69167: CALL_OW 273
69171: ST_TO_ADDR
// if ValidHex ( x , y ) then
69172: LD_VAR 0 4
69176: PPUSH
69177: LD_VAR 0 5
69181: PPUSH
69182: CALL_OW 488
69186: IFFALSE 69207
// ComTurnXY ( unit , x , y ) ;
69188: LD_VAR 0 1
69192: PPUSH
69193: LD_VAR 0 4
69197: PPUSH
69198: LD_VAR 0 5
69202: PPUSH
69203: CALL_OW 118
// end ;
69207: LD_VAR 0 3
69211: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69212: LD_INT 0
69214: PPUSH
69215: PPUSH
// result := false ;
69216: LD_ADDR_VAR 0 3
69220: PUSH
69221: LD_INT 0
69223: ST_TO_ADDR
// if not units then
69224: LD_VAR 0 2
69228: NOT
69229: IFFALSE 69233
// exit ;
69231: GO 69278
// for i in units do
69233: LD_ADDR_VAR 0 4
69237: PUSH
69238: LD_VAR 0 2
69242: PUSH
69243: FOR_IN
69244: IFFALSE 69276
// if See ( side , i ) then
69246: LD_VAR 0 1
69250: PPUSH
69251: LD_VAR 0 4
69255: PPUSH
69256: CALL_OW 292
69260: IFFALSE 69274
// begin result := true ;
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: LD_INT 1
69269: ST_TO_ADDR
// exit ;
69270: POP
69271: POP
69272: GO 69278
// end ;
69274: GO 69243
69276: POP
69277: POP
// end ;
69278: LD_VAR 0 3
69282: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69283: LD_INT 0
69285: PPUSH
69286: PPUSH
69287: PPUSH
69288: PPUSH
// if not unit or not points then
69289: LD_VAR 0 1
69293: NOT
69294: PUSH
69295: LD_VAR 0 2
69299: NOT
69300: OR
69301: IFFALSE 69305
// exit ;
69303: GO 69395
// dist := 99999 ;
69305: LD_ADDR_VAR 0 5
69309: PUSH
69310: LD_INT 99999
69312: ST_TO_ADDR
// for i in points do
69313: LD_ADDR_VAR 0 4
69317: PUSH
69318: LD_VAR 0 2
69322: PUSH
69323: FOR_IN
69324: IFFALSE 69393
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69326: LD_ADDR_VAR 0 6
69330: PUSH
69331: LD_VAR 0 1
69335: PPUSH
69336: LD_VAR 0 4
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: PPUSH
69345: LD_VAR 0 4
69349: PUSH
69350: LD_INT 2
69352: ARRAY
69353: PPUSH
69354: CALL_OW 297
69358: ST_TO_ADDR
// if tmpDist < dist then
69359: LD_VAR 0 6
69363: PUSH
69364: LD_VAR 0 5
69368: LESS
69369: IFFALSE 69391
// begin result := i ;
69371: LD_ADDR_VAR 0 3
69375: PUSH
69376: LD_VAR 0 4
69380: ST_TO_ADDR
// dist := tmpDist ;
69381: LD_ADDR_VAR 0 5
69385: PUSH
69386: LD_VAR 0 6
69390: ST_TO_ADDR
// end ; end ;
69391: GO 69323
69393: POP
69394: POP
// end ;
69395: LD_VAR 0 3
69399: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69400: LD_INT 0
69402: PPUSH
// uc_side := side ;
69403: LD_ADDR_OWVAR 20
69407: PUSH
69408: LD_VAR 0 1
69412: ST_TO_ADDR
// uc_nation := 3 ;
69413: LD_ADDR_OWVAR 21
69417: PUSH
69418: LD_INT 3
69420: ST_TO_ADDR
// vc_chassis := 25 ;
69421: LD_ADDR_OWVAR 37
69425: PUSH
69426: LD_INT 25
69428: ST_TO_ADDR
// vc_engine := engine_siberite ;
69429: LD_ADDR_OWVAR 39
69433: PUSH
69434: LD_INT 3
69436: ST_TO_ADDR
// vc_control := control_computer ;
69437: LD_ADDR_OWVAR 38
69441: PUSH
69442: LD_INT 3
69444: ST_TO_ADDR
// vc_weapon := 59 ;
69445: LD_ADDR_OWVAR 40
69449: PUSH
69450: LD_INT 59
69452: ST_TO_ADDR
// result := CreateVehicle ;
69453: LD_ADDR_VAR 0 5
69457: PUSH
69458: CALL_OW 45
69462: ST_TO_ADDR
// SetDir ( result , d ) ;
69463: LD_VAR 0 5
69467: PPUSH
69468: LD_VAR 0 4
69472: PPUSH
69473: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69477: LD_VAR 0 5
69481: PPUSH
69482: LD_VAR 0 2
69486: PPUSH
69487: LD_VAR 0 3
69491: PPUSH
69492: LD_INT 0
69494: PPUSH
69495: CALL_OW 48
// end ;
69499: LD_VAR 0 5
69503: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69504: LD_INT 0
69506: PPUSH
69507: PPUSH
69508: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69509: LD_ADDR_VAR 0 2
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69532: LD_VAR 0 1
69536: NOT
69537: PUSH
69538: LD_VAR 0 1
69542: PPUSH
69543: CALL_OW 264
69547: PUSH
69548: LD_INT 12
69550: PUSH
69551: LD_INT 51
69553: PUSH
69554: LD_INT 32
69556: PUSH
69557: LD_INT 89
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: IN
69566: NOT
69567: OR
69568: IFFALSE 69572
// exit ;
69570: GO 69670
// for i := 1 to 3 do
69572: LD_ADDR_VAR 0 3
69576: PUSH
69577: DOUBLE
69578: LD_INT 1
69580: DEC
69581: ST_TO_ADDR
69582: LD_INT 3
69584: PUSH
69585: FOR_TO
69586: IFFALSE 69668
// begin tmp := GetCargo ( cargo , i ) ;
69588: LD_ADDR_VAR 0 4
69592: PUSH
69593: LD_VAR 0 1
69597: PPUSH
69598: LD_VAR 0 3
69602: PPUSH
69603: CALL_OW 289
69607: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69608: LD_ADDR_VAR 0 2
69612: PUSH
69613: LD_VAR 0 2
69617: PPUSH
69618: LD_VAR 0 3
69622: PPUSH
69623: LD_VAR 0 4
69627: PPUSH
69628: CALL_OW 1
69632: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69633: LD_ADDR_VAR 0 2
69637: PUSH
69638: LD_VAR 0 2
69642: PPUSH
69643: LD_INT 4
69645: PPUSH
69646: LD_VAR 0 2
69650: PUSH
69651: LD_INT 4
69653: ARRAY
69654: PUSH
69655: LD_VAR 0 4
69659: PLUS
69660: PPUSH
69661: CALL_OW 1
69665: ST_TO_ADDR
// end ;
69666: GO 69585
69668: POP
69669: POP
// end ;
69670: LD_VAR 0 2
69674: RET
// export function Length ( array ) ; begin
69675: LD_INT 0
69677: PPUSH
// result := array + 0 ;
69678: LD_ADDR_VAR 0 2
69682: PUSH
69683: LD_VAR 0 1
69687: PUSH
69688: LD_INT 0
69690: PLUS
69691: ST_TO_ADDR
// end ;
69692: LD_VAR 0 2
69696: RET
// export function PrepareArray ( array ) ; begin
69697: LD_INT 0
69699: PPUSH
// result := array diff 0 ;
69700: LD_ADDR_VAR 0 2
69704: PUSH
69705: LD_VAR 0 1
69709: PUSH
69710: LD_INT 0
69712: DIFF
69713: ST_TO_ADDR
// if not result [ 1 ] then
69714: LD_VAR 0 2
69718: PUSH
69719: LD_INT 1
69721: ARRAY
69722: NOT
69723: IFFALSE 69743
// result := Delete ( result , 1 ) ;
69725: LD_ADDR_VAR 0 2
69729: PUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: LD_INT 1
69737: PPUSH
69738: CALL_OW 3
69742: ST_TO_ADDR
// end ;
69743: LD_VAR 0 2
69747: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69748: LD_INT 0
69750: PPUSH
69751: PPUSH
69752: PPUSH
69753: PPUSH
// sibRocketRange := 25 ;
69754: LD_ADDR_VAR 0 6
69758: PUSH
69759: LD_INT 25
69761: ST_TO_ADDR
// result := false ;
69762: LD_ADDR_VAR 0 4
69766: PUSH
69767: LD_INT 0
69769: ST_TO_ADDR
// for i := 0 to 5 do
69770: LD_ADDR_VAR 0 5
69774: PUSH
69775: DOUBLE
69776: LD_INT 0
69778: DEC
69779: ST_TO_ADDR
69780: LD_INT 5
69782: PUSH
69783: FOR_TO
69784: IFFALSE 69851
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69786: LD_VAR 0 1
69790: PPUSH
69791: LD_VAR 0 5
69795: PPUSH
69796: LD_VAR 0 6
69800: PPUSH
69801: CALL_OW 272
69805: PPUSH
69806: LD_VAR 0 2
69810: PPUSH
69811: LD_VAR 0 5
69815: PPUSH
69816: LD_VAR 0 6
69820: PPUSH
69821: CALL_OW 273
69825: PPUSH
69826: LD_VAR 0 3
69830: PPUSH
69831: CALL_OW 309
69835: IFFALSE 69849
// begin result := true ;
69837: LD_ADDR_VAR 0 4
69841: PUSH
69842: LD_INT 1
69844: ST_TO_ADDR
// exit ;
69845: POP
69846: POP
69847: GO 69853
// end ;
69849: GO 69783
69851: POP
69852: POP
// end ;
69853: LD_VAR 0 4
69857: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69858: LD_INT 0
69860: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69861: LD_VAR 0 1
69865: PPUSH
69866: LD_VAR 0 2
69870: PPUSH
69871: LD_INT 0
69873: PPUSH
69874: LD_INT 0
69876: PPUSH
69877: LD_INT 1
69879: PPUSH
69880: LD_INT 0
69882: PPUSH
69883: CALL_OW 587
// end ; end_of_file
69887: LD_VAR 0 3
69891: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69892: LD_VAR 0 1
69896: PUSH
69897: LD_INT 200
69899: DOUBLE
69900: GREATEREQUAL
69901: IFFALSE 69909
69903: LD_INT 299
69905: DOUBLE
69906: LESSEQUAL
69907: IFTRUE 69911
69909: GO 69943
69911: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69912: LD_VAR 0 1
69916: PPUSH
69917: LD_VAR 0 2
69921: PPUSH
69922: LD_VAR 0 3
69926: PPUSH
69927: LD_VAR 0 4
69931: PPUSH
69932: LD_VAR 0 5
69936: PPUSH
69937: CALL 24577 0 5
69941: GO 70020
69943: LD_INT 300
69945: DOUBLE
69946: GREATEREQUAL
69947: IFFALSE 69955
69949: LD_INT 399
69951: DOUBLE
69952: LESSEQUAL
69953: IFTRUE 69957
69955: GO 70019
69957: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69958: LD_VAR 0 1
69962: PPUSH
69963: LD_VAR 0 2
69967: PPUSH
69968: LD_VAR 0 3
69972: PPUSH
69973: LD_VAR 0 4
69977: PPUSH
69978: LD_VAR 0 5
69982: PPUSH
69983: LD_VAR 0 6
69987: PPUSH
69988: LD_VAR 0 7
69992: PPUSH
69993: LD_VAR 0 8
69997: PPUSH
69998: LD_VAR 0 9
70002: PPUSH
70003: LD_VAR 0 10
70007: PPUSH
70008: LD_VAR 0 11
70012: PPUSH
70013: CALL 20910 0 11
70017: GO 70020
70019: POP
// end ;
70020: PPOPN 11
70022: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70023: LD_VAR 0 1
70027: PPUSH
70028: LD_VAR 0 2
70032: PPUSH
70033: LD_VAR 0 3
70037: PPUSH
70038: LD_VAR 0 4
70042: PPUSH
70043: LD_VAR 0 5
70047: PPUSH
70048: CALL 24313 0 5
// end ; end_of_file
70052: PPOPN 5
70054: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70055: LD_VAR 0 1
70059: PPUSH
70060: LD_VAR 0 2
70064: PPUSH
70065: LD_VAR 0 3
70069: PPUSH
70070: LD_VAR 0 4
70074: PPUSH
70075: LD_VAR 0 5
70079: PPUSH
70080: LD_VAR 0 6
70084: PPUSH
70085: CALL 8603 0 6
// end ;
70089: PPOPN 6
70091: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70092: LD_INT 0
70094: PPUSH
// begin if not units then
70095: LD_VAR 0 1
70099: NOT
70100: IFFALSE 70104
// exit ;
70102: GO 70104
// end ;
70104: PPOPN 7
70106: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70107: CALL 8574 0 0
// end ;
70111: PPOPN 1
70113: END
