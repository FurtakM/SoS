// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 91 0 0
// InitRestrictions ;
  19: CALL 227 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 308 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 804 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 804 0 2
// InGameOn ;
  74: CALL_OW 8
// CreateNature ;
  78: CALL 537 0 0
// PrepareAmericans ;
  82: CALL 1409 0 0
// Action ;
  86: CALL 2496 0 0
// end ;
  90: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  91: LD_INT 0
  93: PPUSH
// debug := false ;
  94: LD_ADDR_EXP 1
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// mission_prefix := 05_ ;
 102: LD_ADDR_EXP 2
 106: PUSH
 107: LD_STRING 05_
 109: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 110: LD_ADDR_EXP 3
 114: PUSH
 115: LD_STRING 05a_
 117: ST_TO_ADDR
// deltaBuilded := false ;
 118: LD_ADDR_EXP 4
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// denisArrives := false ;
 126: LD_ADDR_EXP 5
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// radar_allowed := false ;
 134: LD_ADDR_EXP 7
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// first_apeman_tamed := false ;
 142: LD_ADDR_EXP 8
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// arab_spotted := false ;
 150: LD_ADDR_EXP 13
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// end_mission := false ;
 158: LD_ADDR_EXP 14
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// apeman_army := false ;
 166: LD_ADDR_EXP 9
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_researched := false ;
 174: LD_ADDR_EXP 10
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// radar_builded := false ;
 182: LD_ADDR_EXP 11
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// apeman_counter := 0 ;
 190: LD_ADDR_EXP 12
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// Delta := 0 ;
 198: LD_ADDR_EXP 6
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// apeKillCounter := 0 ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// traitor := false ;
 214: LD_ADDR_EXP 16
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// end ;
 222: LD_VAR 0 1
 226: RET
// function InitRestrictions ; begin
 227: LD_INT 0
 229: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 230: LD_INT 7
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: LD_INT 1
 238: PPUSH
 239: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 243: LD_INT 8
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 256: LD_INT 10
 258: PPUSH
 259: LD_INT 1
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 269: LD_INT 69
 271: PPUSH
 272: LD_INT 1
 274: PPUSH
 275: LD_STRING GatlingInGamma
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 30
 285: PPUSH
 286: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 290: LD_INT 51
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 1
 298: PPUSH
 299: CALL_OW 322
// end ;
 303: LD_VAR 0 1
 307: RET
// function DebugMode ; begin
 308: LD_INT 0
 310: PPUSH
// FogOff ( 1 ) ;
 311: LD_INT 1
 313: PPUSH
 314: CALL_OW 344
// Difficulty := 2 ;
 318: LD_ADDR_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: ST_TO_ADDR
// end ;
 326: LD_VAR 0 1
 330: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 23
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: LD_INT 7
 362: GREATEREQUAL
 363: IFFALSE 375
 365: GO 367
 367: DISABLE
// SetAchievement ( ACH_TAME ) ;
 368: LD_STRING ACH_TAME
 370: PPUSH
 371: CALL_OW 543
 375: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 35
 388: PUSH
 389: LD_INT 11
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PPUSH
 400: CALL_OW 69
 404: IFFALSE 436
 406: PUSH
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 34
 419: PUSH
 420: LD_INT 11
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PPUSH
 431: CALL_OW 69
 435: AND
 436: IFFALSE 448
 438: GO 440
 440: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 441: LD_STRING ACH_RADAR
 443: PPUSH
 444: CALL_OW 543
 448: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 449: LD_INT 0
 451: PPUSH
// uc_side := side ;
 452: LD_ADDR_OWVAR 20
 456: PUSH
 457: LD_VAR 0 1
 461: ST_TO_ADDR
// uc_nation := nation ;
 462: LD_ADDR_OWVAR 21
 466: PUSH
 467: LD_VAR 0 2
 471: ST_TO_ADDR
// vc_chassis := chassis ;
 472: LD_ADDR_OWVAR 37
 476: PUSH
 477: LD_VAR 0 3
 481: ST_TO_ADDR
// vc_engine := engine ;
 482: LD_ADDR_OWVAR 39
 486: PUSH
 487: LD_VAR 0 4
 491: ST_TO_ADDR
// vc_control := control ;
 492: LD_ADDR_OWVAR 38
 496: PUSH
 497: LD_VAR 0 5
 501: ST_TO_ADDR
// vc_weapon := weapon ;
 502: LD_ADDR_OWVAR 40
 506: PUSH
 507: LD_VAR 0 6
 511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 512: LD_ADDR_OWVAR 41
 516: PUSH
 517: LD_VAR 0 7
 521: ST_TO_ADDR
// result := CreateVehicle ;
 522: LD_ADDR_VAR 0 8
 526: PUSH
 527: CALL_OW 45
 531: ST_TO_ADDR
// end ;
 532: LD_VAR 0 8
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// for i := 1 to 4 do
 541: LD_ADDR_VAR 0 2
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 4
 553: PUSH
 554: FOR_TO
 555: IFFALSE 578
// begin PrepareFrog ( ) ;
 557: CALL 65932 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 561: CALL_OW 44
 565: PPUSH
 566: LD_INT 17
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 554
 578: POP
 579: POP
// for i := 1 to 6 do
 580: LD_ADDR_VAR 0 2
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 6
 592: PUSH
 593: FOR_TO
 594: IFFALSE 617
// begin PrepareBird ( ) ;
 596: CALL 66036 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 49
// end ;
 615: GO 593
 617: POP
 618: POP
// for i := 1 to 11 do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 11
 631: PUSH
 632: FOR_TO
 633: IFFALSE 656
// begin PrepareEnchidna ( ) ;
 635: CALL 65880 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 639: CALL_OW 44
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 49
// end ;
 654: GO 632
 656: POP
 657: POP
// for i := 1 to 3 do
 658: LD_ADDR_VAR 0 2
 662: PUSH
 663: DOUBLE
 664: LD_INT 1
 666: DEC
 667: ST_TO_ADDR
 668: LD_INT 3
 670: PUSH
 671: FOR_TO
 672: IFFALSE 698
// begin PrepareTiger ( 10 ) ;
 674: LD_INT 10
 676: PPUSH
 677: CALL 65807 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 671
 698: POP
 699: POP
// PrepareMastodont ( ) ;
 700: CALL 66140 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 704: CALL_OW 45
 708: PPUSH
 709: LD_INT 18
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: LD_VAR 0 1
 723: RET
// export function SayX ( units , ident ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// result := false ;
 728: LD_ADDR_VAR 0 3
 732: PUSH
 733: LD_INT 0
 735: ST_TO_ADDR
// if not units then
 736: LD_VAR 0 1
 740: NOT
 741: IFFALSE 745
// exit ;
 743: GO 799
// for i in units do
 745: LD_ADDR_VAR 0 4
 749: PUSH
 750: LD_VAR 0 1
 754: PUSH
 755: FOR_IN
 756: IFFALSE 797
// if IsOk ( i ) then
 758: LD_VAR 0 4
 762: PPUSH
 763: CALL_OW 302
 767: IFFALSE 795
// begin Say ( i , ident ) ;
 769: LD_VAR 0 4
 773: PPUSH
 774: LD_VAR 0 2
 778: PPUSH
 779: CALL_OW 88
// result := i ;
 783: LD_ADDR_VAR 0 3
 787: PUSH
 788: LD_VAR 0 4
 792: ST_TO_ADDR
// break ;
 793: GO 797
// end ;
 795: GO 755
 797: POP
 798: POP
// end ;
 799: LD_VAR 0 3
 803: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
// InitUc ;
 808: CALL_OW 18
// InitHc ;
 812: CALL_OW 19
// uc_side := 0 ;
 816: LD_ADDR_OWVAR 20
 820: PUSH
 821: LD_INT 0
 823: ST_TO_ADDR
// uc_nation := 0 ;
 824: LD_ADDR_OWVAR 21
 828: PUSH
 829: LD_INT 0
 831: ST_TO_ADDR
// for i = 1 to amount do
 832: LD_ADDR_VAR 0 4
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 2
 846: PUSH
 847: FOR_TO
 848: IFFALSE 930
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 850: LD_ADDR_OWVAR 29
 854: PUSH
 855: LD_INT 9
 857: PPUSH
 858: LD_INT 12
 860: PPUSH
 861: CALL_OW 12
 865: PUSH
 866: LD_INT 9
 868: PPUSH
 869: LD_INT 12
 871: PPUSH
 872: CALL_OW 12
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 881: LD_ADDR_OWVAR 35
 885: PUSH
 886: LD_INT 5
 888: NEG
 889: PPUSH
 890: LD_INT 5
 892: PPUSH
 893: CALL_OW 12
 897: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 898: LD_INT 0
 900: PPUSH
 901: LD_INT 12
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 911: CALL_OW 44
 915: PPUSH
 916: LD_VAR 0 1
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
// end ;
 928: GO 847
 930: POP
 931: POP
// InitHc ;
 932: CALL_OW 19
// end ;
 936: LD_VAR 0 3
 940: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// if not unit then
 946: LD_VAR 0 1
 950: NOT
 951: IFFALSE 955
// exit ;
 953: GO 1404
// if IsInUnit ( unit ) then
 955: LD_VAR 0 1
 959: PPUSH
 960: CALL_OW 310
 964: IFFALSE 981
// unit := IsDrivenBy ( unit ) ;
 966: LD_ADDR_VAR 0 1
 970: PUSH
 971: LD_VAR 0 1
 975: PPUSH
 976: CALL_OW 311
 980: ST_TO_ADDR
// targets_list := [ ] ;
 981: LD_ADDR_VAR 0 5
 985: PUSH
 986: EMPTY
 987: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 988: LD_ADDR_VAR 0 4
 992: PUSH
 993: LD_VAR 0 2
 997: PPUSH
 998: LD_INT 24
1000: PUSH
1001: LD_INT 250
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 34
1013: PUSH
1014: LD_INT 12
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: PPUSH
1047: CALL_OW 72
1051: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1052: LD_VAR 0 4
1056: PPUSH
1057: LD_VAR 0 1
1061: PPUSH
1062: CALL_OW 74
1066: PPUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 296
1076: PUSH
1077: LD_INT 11
1079: LESS
1080: IFFALSE 1094
1082: PUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 310
1092: NOT
1093: AND
1094: IFFALSE 1122
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1096: LD_VAR 0 1
1100: PPUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 1
1110: PPUSH
1111: CALL_OW 74
1115: PPUSH
1116: CALL_OW 120
// exit ;
1120: GO 1404
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1122: LD_ADDR_VAR 0 5
1126: PUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_INT 21
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 3
1144: PUSH
1145: LD_INT 54
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: PPUSH
1159: CALL_OW 72
1163: PUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_INT 21
1171: PUSH
1172: LD_INT 2
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 72
1183: PUSH
1184: LD_VAR 0 2
1188: PPUSH
1189: LD_INT 21
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 3
1201: PUSH
1202: LD_INT 58
1204: PUSH
1205: EMPTY
1206: LIST
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: PUSH
1221: LD_VAR 0 2
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
// for target in targets_list do
1232: LD_ADDR_VAR 0 4
1236: PUSH
1237: LD_VAR 0 5
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1402
// begin if target then
1245: LD_VAR 0 4
1249: IFFALSE 1400
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1251: LD_VAR 0 1
1255: PPUSH
1256: CALL_OW 110
1260: PUSH
1261: LD_INT 11
1263: EQUAL
1264: IFFALSE 1318
1266: PUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: LD_VAR 0 1
1276: PPUSH
1277: CALL_OW 74
1281: PPUSH
1282: CALL_OW 247
1286: PUSH
1287: LD_INT 3
1289: EQUAL
1290: IFTRUE 1317
1292: PUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: LD_VAR 0 1
1302: PPUSH
1303: CALL_OW 74
1307: PPUSH
1308: CALL_OW 264
1312: PUSH
1313: LD_INT 12
1315: EQUAL
1316: OR
1317: AND
1318: IFFALSE 1364
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1320: LD_VAR 0 1
1324: PPUSH
1325: LD_INT 0
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: LD_VAR 0 4
1335: PPUSH
1336: LD_VAR 0 1
1340: PPUSH
1341: CALL_OW 74
1345: PPUSH
1346: CALL_OW 132
// SetTag ( unit , 0 ) ;
1350: LD_VAR 0 1
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 109
// end else
1362: GO 1400
// if not HasTask ( unit ) then
1364: LD_VAR 0 1
1368: PPUSH
1369: CALL_OW 314
1373: NOT
1374: IFFALSE 1400
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_VAR 0 4
1385: PPUSH
1386: LD_VAR 0 1
1390: PPUSH
1391: CALL_OW 74
1395: PPUSH
1396: CALL_OW 115
// end ;
1400: GO 1242
1402: POP
1403: POP
// end ; end_of_file
1404: LD_VAR 0 3
1408: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , p , xy , veh , tmp ; begin
1409: LD_INT 0
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_nation := 1 ;
1418: LD_ADDR_OWVAR 21
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_side := 4 ;
1426: LD_ADDR_OWVAR 20
1430: PUSH
1431: LD_INT 4
1433: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1434: LD_ADDR_EXP 20
1438: PUSH
1439: LD_STRING Denis
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: LD_STRING 
1447: PPUSH
1448: CALL 31373 0 3
1452: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1453: LD_ADDR_EXP 19
1457: PUSH
1458: LD_STRING Harisson
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: LD_STRING 
1466: PPUSH
1467: CALL 31373 0 3
1471: ST_TO_ADDR
// uc_side := 1 ;
1472: LD_ADDR_OWVAR 20
1476: PUSH
1477: LD_INT 1
1479: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1480: LD_ADDR_EXP 17
1484: PUSH
1485: LD_STRING JMM
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 3
1498: PPUSH
1499: CALL 31373 0 3
1503: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1504: LD_ADDR_EXP 18
1508: PUSH
1509: LD_STRING Gladstone
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: LD_EXP 3
1519: PPUSH
1520: CALL 31373 0 3
1524: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1525: LD_STRING BrownInDelta
1527: PPUSH
1528: LD_EXP 1
1532: PPUSH
1533: CALL_OW 30
1537: IFFALSE 1579
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1539: LD_ADDR_EXP 21
1543: PUSH
1544: LD_STRING Brown
1546: PPUSH
1547: LD_EXP 1
1551: NOT
1552: PPUSH
1553: LD_EXP 3
1557: PPUSH
1558: CALL 31373 0 3
1562: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1563: LD_ADDR_VAR 0 7
1567: PUSH
1568: LD_VAR 0 7
1572: PUSH
1573: LD_EXP 21
1577: ADD
1578: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1579: LD_STRING DonaldsonInDelta
1581: PPUSH
1582: LD_EXP 1
1586: PPUSH
1587: CALL_OW 30
1591: IFFALSE 1633
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1593: LD_ADDR_EXP 22
1597: PUSH
1598: LD_STRING Donaldson
1600: PPUSH
1601: LD_EXP 1
1605: NOT
1606: PPUSH
1607: LD_EXP 3
1611: PPUSH
1612: CALL 31373 0 3
1616: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1617: LD_ADDR_VAR 0 7
1621: PUSH
1622: LD_VAR 0 7
1626: PUSH
1627: LD_EXP 22
1631: ADD
1632: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1633: LD_STRING LisaInDelta
1635: PPUSH
1636: LD_EXP 1
1640: PPUSH
1641: CALL_OW 30
1645: IFFALSE 1687
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1647: LD_ADDR_EXP 23
1651: PUSH
1652: LD_STRING Lisa
1654: PPUSH
1655: LD_EXP 1
1659: NOT
1660: PPUSH
1661: LD_EXP 3
1665: PPUSH
1666: CALL 31373 0 3
1670: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1671: LD_ADDR_VAR 0 7
1675: PUSH
1676: LD_VAR 0 7
1680: PUSH
1681: LD_EXP 23
1685: ADD
1686: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1687: LD_STRING FrankInDelta
1689: PPUSH
1690: LD_EXP 1
1694: PPUSH
1695: CALL_OW 30
1699: IFFALSE 1741
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1701: LD_ADDR_EXP 24
1705: PUSH
1706: LD_STRING Frank
1708: PPUSH
1709: LD_EXP 1
1713: NOT
1714: PPUSH
1715: LD_EXP 3
1719: PPUSH
1720: CALL 31373 0 3
1724: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_VAR 0 7
1734: PUSH
1735: LD_EXP 24
1739: ADD
1740: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1741: LD_STRING BobbyInDelta
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 30
1751: IFFALSE 1793
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1753: LD_ADDR_EXP 25
1757: PUSH
1758: LD_STRING Bobby
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_EXP 3
1771: PPUSH
1772: CALL 31373 0 3
1776: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1777: LD_ADDR_VAR 0 7
1781: PUSH
1782: LD_VAR 0 7
1786: PUSH
1787: LD_EXP 25
1791: ADD
1792: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1793: LD_STRING CyrusInDelta
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 30
1803: IFFALSE 1845
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1805: LD_ADDR_EXP 26
1809: PUSH
1810: LD_STRING Cyrus
1812: PPUSH
1813: LD_EXP 1
1817: NOT
1818: PPUSH
1819: LD_EXP 3
1823: PPUSH
1824: CALL 31373 0 3
1828: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_VAR 0 7
1838: PUSH
1839: LD_EXP 26
1843: ADD
1844: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1845: LD_ADDR_EXP 28
1849: PUSH
1850: LD_STRING othersDelta
1852: PPUSH
1853: CALL_OW 31
1857: ST_TO_ADDR
// if not others and debug then
1858: LD_EXP 28
1862: NOT
1863: IFFALSE 1871
1865: PUSH
1866: LD_EXP 1
1870: AND
1871: IFFALSE 1936
// begin InitHc ;
1873: CALL_OW 19
// for i = 1 to 2 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_INT 1
1885: DEC
1886: ST_TO_ADDR
1887: LD_INT 2
1889: PUSH
1890: FOR_TO
1891: IFFALSE 1934
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_VAR 0 2
1900: PUSH
1901: LD_INT 4
1903: MOD
1904: PUSH
1905: LD_INT 1
1907: PLUS
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL_OW 380
// others := others ^ CreateHuman ;
1916: LD_ADDR_EXP 28
1920: PUSH
1921: LD_EXP 28
1925: PUSH
1926: CALL_OW 44
1930: ADD
1931: ST_TO_ADDR
// end ;
1932: GO 1890
1934: POP
1935: POP
// end ; if others then
1936: LD_EXP 28
1940: IFFALSE 1958
// tmp := tmp ^ others ;
1942: LD_ADDR_VAR 0 7
1946: PUSH
1947: LD_VAR 0 7
1951: PUSH
1952: LD_EXP 28
1956: ADD
1957: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1958: LD_ADDR_VAR 0 3
1962: PUSH
1963: LD_INT 28
1965: PUSH
1966: LD_INT 49
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 33
1975: PUSH
1976: LD_INT 54
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 38
1985: PUSH
1986: LD_INT 56
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1998: LD_ADDR_VAR 0 6
2002: PUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 12
2020: PPUSH
2021: LD_INT 80
2023: PPUSH
2024: CALL 449 0 7
2028: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2029: LD_VAR 0 6
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2041: LD_VAR 0 6
2045: PPUSH
2046: LD_VAR 0 3
2050: PUSH
2051: LD_INT 1
2053: ARRAY
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PPUSH
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PUSH
2068: LD_INT 2
2070: ARRAY
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 100
2089: PPUSH
2090: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2094: LD_EXP 28
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 6
2107: PPUSH
2108: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2112: LD_ADDR_VAR 0 6
2116: PUSH
2117: LD_INT 1
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: LD_INT 2
2134: PPUSH
2135: LD_INT 80
2137: PPUSH
2138: CALL 449 0 7
2142: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2143: LD_VAR 0 6
2147: PPUSH
2148: LD_INT 1
2150: PPUSH
2151: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2155: LD_VAR 0 6
2159: PPUSH
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 2
2167: ARRAY
2168: PUSH
2169: LD_INT 1
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 2
2180: ARRAY
2181: PUSH
2182: LD_INT 2
2184: ARRAY
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2193: LD_EXP 18
2197: PPUSH
2198: LD_VAR 0 6
2202: PPUSH
2203: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2207: LD_ADDR_VAR 0 6
2211: PUSH
2212: LD_INT 1
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 1
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 80
2232: PPUSH
2233: CALL 449 0 7
2237: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2238: LD_VAR 0 6
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2250: LD_VAR 0 6
2254: PPUSH
2255: LD_VAR 0 3
2259: PUSH
2260: LD_INT 3
2262: ARRAY
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PPUSH
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 3
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: PPUSH
2281: LD_INT 0
2283: PPUSH
2284: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2288: LD_EXP 17
2292: PPUSH
2293: LD_VAR 0 6
2297: PPUSH
2298: CALL_OW 52
// tmp := tmp diff 0 ;
2302: LD_ADDR_VAR 0 7
2306: PUSH
2307: LD_VAR 0 7
2311: PUSH
2312: LD_INT 0
2314: DIFF
2315: ST_TO_ADDR
// xy := [ [ 45 , 56 ] , [ 47 , 73 ] , [ 37 , 45 ] , [ 52 , 60 ] , [ 48 , 51 ] ] ;
2316: LD_ADDR_VAR 0 5
2320: PUSH
2321: LD_INT 45
2323: PUSH
2324: LD_INT 56
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 47
2333: PUSH
2334: LD_INT 73
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: LD_INT 37
2343: PUSH
2344: LD_INT 45
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 52
2353: PUSH
2354: LD_INT 60
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 48
2363: PUSH
2364: LD_INT 51
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: ST_TO_ADDR
// p := 1 ;
2378: LD_ADDR_VAR 0 4
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// for i in tmp diff others [ 1 ] do
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: LD_VAR 0 7
2395: PUSH
2396: LD_EXP 28
2400: PUSH
2401: LD_INT 1
2403: ARRAY
2404: DIFF
2405: PUSH
2406: FOR_IN
2407: IFFALSE 2489
// begin repeat wait ( 1 ) ;
2409: LD_INT 1
2411: PPUSH
2412: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 5
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
2431: IFFALSE 2409
// ComMoveXY ( i , xy [ p ] [ 1 ] , xy [ p ] [ 2 ] ) ;
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_VAR 0 5
2442: PUSH
2443: LD_VAR 0 4
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: ARRAY
2463: PUSH
2464: LD_INT 2
2466: ARRAY
2467: PPUSH
2468: CALL_OW 111
// p := Inc ( p ) ;
2472: LD_ADDR_VAR 0 4
2476: PUSH
2477: LD_VAR 0 4
2481: PPUSH
2482: CALL 70902 0 1
2486: ST_TO_ADDR
// end ;
2487: GO 2406
2489: POP
2490: POP
// end ; end_of_file
2491: LD_VAR 0 1
2495: RET
// export function Action ; var m ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
// InGameOn ;
2500: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2504: LD_INT 28
2506: PPUSH
2507: LD_INT 51
2509: PPUSH
2510: CALL_OW 86
// Wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2521: LD_EXP 17
2525: PPUSH
2526: LD_STRING D1d-JMM-1a
2528: PPUSH
2529: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2533: LD_EXP 19
2537: PPUSH
2538: LD_STRING D1d-Har-1
2540: PPUSH
2541: CALL_OW 94
// InGameOff ;
2545: CALL_OW 9
// SaveForQuickRestart ;
2549: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2553: LD_STRING M1
2555: PPUSH
2556: CALL_OW 337
// Wait ( 0 0$2 ) ;
2560: LD_INT 70
2562: PPUSH
2563: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D2-JMM-1
2574: PPUSH
2575: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2579: LD_EXP 18
2583: PPUSH
2584: LD_STRING D2-Glad-1
2586: PPUSH
2587: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D2-JMM-2
2598: PPUSH
2599: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2603: LD_EXP 18
2607: PPUSH
2608: LD_STRING D2-Glad-2
2610: PPUSH
2611: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2615: LD_EXP 17
2619: PPUSH
2620: LD_STRING D2-JMM-3
2622: PPUSH
2623: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2627: LD_INT 1050
2629: PPUSH
2630: LD_INT 2100
2632: PPUSH
2633: CALL_OW 12
2637: PPUSH
2638: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2642: LD_INT 1
2644: PPUSH
2645: LD_INT 570
2647: PPUSH
2648: LD_INT 350
2650: PPUSH
2651: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2655: LD_INT 6300
2657: PPUSH
2658: LD_INT 10500
2660: PPUSH
2661: CALL_OW 12
2665: PPUSH
2666: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2670: LD_INT 0
2672: PPUSH
2673: LD_INT 570
2675: PPUSH
2676: LD_INT 350
2678: PPUSH
2679: CALL_OW 550
// end ;
2683: LD_VAR 0 1
2687: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2688: LD_INT 22
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: LD_INT 57
2703: PUSH
2704: EMPTY
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 30
2713: PUSH
2714: LD_INT 0
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: IFFALSE 2742
2735: PUSH
2736: LD_EXP 4
2740: NOT
2741: AND
2742: IFFALSE 2755
2744: GO 2746
2746: DISABLE
// begin deltaBuilded := true ;
2747: LD_ADDR_EXP 4
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// end ;
2755: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2756: LD_EXP 6
2760: NOT
2761: IFFALSE 2769
2763: PUSH
2764: LD_EXP 4
2768: AND
2769: IFFALSE 2818
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 3
2784: PUSH
2785: LD_INT 57
2787: PUSH
2788: EMPTY
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: PPUSH
2813: CALL_OW 69
2817: AND
2818: IFFALSE 2904
2820: GO 2822
2822: DISABLE
// begin enable ;
2823: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2824: LD_INT 0
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2837: LD_ADDR_EXP 6
2841: PUSH
2842: LD_INT 22
2844: PUSH
2845: LD_INT 1
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 3
2854: PUSH
2855: LD_INT 57
2857: PUSH
2858: EMPTY
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 30
2867: PUSH
2868: LD_INT 0
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: PPUSH
2883: CALL_OW 69
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2892: LD_EXP 6
2896: PPUSH
2897: LD_STRING Delta
2899: PPUSH
2900: CALL_OW 500
// end ;
2904: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2905: LD_INT 1
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: CALL_OW 321
2915: PUSH
2916: LD_INT 2
2918: EQUAL
2919: IFFALSE 2932
2921: PUSH
2922: LD_EXP 18
2926: PPUSH
2927: CALL_OW 302
2931: AND
2932: IFFALSE 2993
2934: GO 2936
2936: DISABLE
// begin DialogueOn ;
2937: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D3-Glad-1
2948: PPUSH
2949: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2953: LD_EXP 17
2957: PPUSH
2958: LD_STRING D3-JMM-1
2960: PPUSH
2961: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2965: LD_EXP 18
2969: PPUSH
2970: LD_STRING D3-Glad-2
2972: PPUSH
2973: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2977: LD_EXP 17
2981: PPUSH
2982: LD_STRING D3-JMM-2
2984: PPUSH
2985: CALL_OW 88
// DialogueOff ;
2989: CALL_OW 7
// end ;
2993: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2994: LD_INT 2
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: CALL_OW 321
3004: PUSH
3005: LD_INT 2
3007: EQUAL
3008: IFFALSE 3074
3010: PUSH
3011: LD_EXP 24
3015: PPUSH
3016: CALL_OW 302
3020: IFTRUE 3050
3022: PUSH
3023: LD_EXP 20
3027: PPUSH
3028: CALL_OW 302
3032: IFFALSE 3049
3034: PUSH
3035: LD_EXP 20
3039: PPUSH
3040: CALL_OW 255
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: AND
3049: OR
3050: IFTRUE 3073
3052: PUSH
3053: LD_EXP 28
3057: PPUSH
3058: LD_INT 26
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 72
3072: OR
3073: AND
3074: IFFALSE 3621
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
// begin InGameOn ;
3085: CALL_OW 8
// DialogueOn ;
3089: CALL_OW 6
// if Frank then
3093: LD_EXP 24
3097: IFFALSE 3111
// Say ( Frank , D8a-Frank-1 ) ;
3099: LD_EXP 24
3103: PPUSH
3104: LD_STRING D8a-Frank-1
3106: PPUSH
3107: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_EXP 28
3120: PPUSH
3121: LD_INT 26
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PPUSH
3136: LD_STRING D8a-Sol1-1
3138: PPUSH
3139: CALL 724 0 2
3143: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
3144: LD_EXP 20
3148: IFFALSE 3165
3150: PUSH
3151: LD_EXP 20
3155: PPUSH
3156: CALL_OW 255
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: AND
3165: IFFALSE 3179
// Say ( Denis , D8a-Den-1 ) ;
3167: LD_EXP 20
3171: PPUSH
3172: LD_STRING D8a-Den-1
3174: PPUSH
3175: CALL_OW 88
// if sol or Denis or Frank then
3179: LD_VAR 0 2
3183: IFTRUE 3191
3185: PUSH
3186: LD_EXP 20
3190: OR
3191: IFTRUE 3199
3193: PUSH
3194: LD_EXP 24
3198: OR
3199: IFFALSE 3260
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3201: LD_EXP 28
3205: PPUSH
3206: LD_INT 25
3208: PUSH
3209: LD_INT 4
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 26
3218: PUSH
3219: LD_INT 1
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 72
3234: PUSH
3235: LD_VAR 0 2
3239: DIFF
3240: PPUSH
3241: LD_STRING D8a-Sci1-1
3243: PPUSH
3244: CALL 724 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3248: LD_EXP 17
3252: PPUSH
3253: LD_STRING D8a-JMM-1
3255: PPUSH
3256: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3260: LD_ADDR_VAR 0 3
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 1
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 25
3277: PUSH
3278: LD_INT 12
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: LD_INT 30
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 30
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: ST_TO_ADDR
// for i in ape do
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_VAR 0 3
3377: PUSH
3378: FOR_IN
3379: IFFALSE 3412
// if i in UnitsInside ( b ) then
3381: LD_VAR 0 1
3385: PUSH
3386: LD_VAR 0 4
3390: PPUSH
3391: CALL_OW 313
3395: IN
3396: IFFALSE 3410
// begin ape := i ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: LD_VAR 0 1
3407: ST_TO_ADDR
// break ;
3408: GO 3412
// end ;
3410: GO 3378
3412: POP
3413: POP
// if not ape then
3414: LD_VAR 0 3
3418: NOT
3419: IFFALSE 3431
// begin DialogueOff ;
3421: CALL_OW 7
// InGameOff ;
3425: CALL_OW 9
// exit ;
3429: GO 3621
// end ; RemoveUnit ( ape ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: CALL_OW 64
// PrepareApeman ( 0 ) ;
3440: LD_INT 0
3442: PPUSH
3443: CALL 65656 0 1
// uc_side := 1 ;
3447: LD_ADDR_OWVAR 20
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// hc_name := Mike  ;
3455: LD_ADDR_OWVAR 26
3459: PUSH
3460: LD_STRING Mike 
3462: ST_TO_ADDR
// hc_gallery := us ;
3463: LD_ADDR_OWVAR 33
3467: PUSH
3468: LD_STRING us
3470: ST_TO_ADDR
// hc_face_number := 30 ;
3471: LD_ADDR_OWVAR 34
3475: PUSH
3476: LD_INT 30
3478: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3479: LD_ADDR_OWVAR 29
3483: PUSH
3484: LD_VAR 0 3
3488: PPUSH
3489: LD_INT 1
3491: PPUSH
3492: CALL_OW 260
3496: PUSH
3497: LD_VAR 0 3
3501: PPUSH
3502: LD_INT 2
3504: PPUSH
3505: CALL_OW 260
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3514: LD_ADDR_OWVAR 31
3518: PUSH
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 259
3531: PUSH
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 2
3539: PPUSH
3540: CALL_OW 259
3544: PUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 3
3552: PPUSH
3553: CALL_OW 259
3557: PUSH
3558: LD_VAR 0 3
3562: PPUSH
3563: LD_INT 4
3565: PPUSH
3566: CALL_OW 259
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: ST_TO_ADDR
// hc_sex := sex_male ;
3577: LD_ADDR_OWVAR 27
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// Mike := CreateHuman ;
3585: LD_ADDR_EXP 27
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3595: LD_EXP 27
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: CALL_OW 52
// InitHc_All ( ) ;
3609: CALL_OW 584
// DialogueOff ;
3613: CALL_OW 7
// InGameOff ;
3617: CALL_OW 9
// end ;
3621: PPOPN 4
3623: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3624: LD_INT 22
3626: PUSH
3627: LD_INT 1
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 16
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: IFFALSE 3711
3654: GO 3656
3656: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3657: LD_STRING M1a
3659: PPUSH
3660: CALL_OW 337
// case Query ( Q2 ) of 1 :
3664: LD_STRING Q2
3666: PPUSH
3667: CALL_OW 97
3671: PUSH
3672: LD_INT 1
3674: DOUBLE
3675: EQUAL
3676: IFTRUE 3680
3678: GO 3691
3680: POP
// end_mission := true ; 2 :
3681: LD_ADDR_EXP 14
3685: PUSH
3686: LD_INT 1
3688: ST_TO_ADDR
3689: GO 3711
3691: LD_INT 2
3693: DOUBLE
3694: EQUAL
3695: IFTRUE 3699
3697: GO 3710
3699: POP
// end_the_mission_allowed := true ; end ;
3700: LD_ADDR_OWVAR 57
3704: PUSH
3705: LD_INT 1
3707: ST_TO_ADDR
3708: GO 3711
3710: POP
// end ;
3711: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3712: LD_INT 22
3714: PUSH
3715: LD_INT 1
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 2
3724: PUSH
3725: LD_INT 30
3727: PUSH
3728: LD_INT 6
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 30
3737: PUSH
3738: LD_INT 7
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: IFFALSE 3808
3760: PUSH
3761: LD_INT 22
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 3
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: AND
3808: IFFALSE 3816
3810: PUSH
3811: LD_EXP 6
3815: AND
3816: IFFALSE 4335
3818: GO 3820
3820: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3821: LD_INT 1050
3823: PPUSH
3824: LD_INT 1750
3826: PPUSH
3827: CALL_OW 12
3831: PPUSH
3832: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3836: LD_EXP 20
3840: PPUSH
3841: LD_INT 6
3843: PUSH
3844: LD_INT 9
3846: PUSH
3847: LD_INT 10
3849: PUSH
3850: LD_INT 16
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: LD_OWVAR 67
3863: ARRAY
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// ComHold ( Denis ) ;
3872: LD_EXP 20
3876: PPUSH
3877: CALL_OW 140
// InGameOn ;
3881: CALL_OW 8
// DialogueOn ;
3885: CALL_OW 6
// if Delta then
3889: LD_EXP 6
3893: IFFALSE 3906
// CenterNowOnUnits ( Delta ) else
3895: LD_EXP 6
3899: PPUSH
3900: CALL_OW 87
3904: GO 3915
// CenterNowOnUnits ( JMM ) ;
3906: LD_EXP 17
3910: PPUSH
3911: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3915: LD_EXP 20
3919: PPUSH
3920: LD_STRING DD-Den-1
3922: PPUSH
3923: CALL 73774 0 2
// Say ( JMM , DD-JMM-1 ) ;
3927: LD_EXP 17
3931: PPUSH
3932: LD_STRING DD-JMM-1
3934: PPUSH
3935: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3939: LD_EXP 20
3943: PPUSH
3944: LD_STRING DD-Den-2
3946: PPUSH
3947: CALL 73774 0 2
// Wait ( 3 ) ;
3951: LD_INT 3
3953: PPUSH
3954: CALL_OW 67
// DialogueOff ;
3958: CALL_OW 7
// InGameOff ;
3962: CALL_OW 9
// if Difficulty = 1 then
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: EQUAL
3974: IFFALSE 4050
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3976: LD_EXP 20
3980: PPUSH
3981: CALL_OW 250
3985: PPUSH
3986: LD_EXP 20
3990: PPUSH
3991: CALL_OW 251
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 12
4001: NEG
4002: PPUSH
4003: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
4007: LD_EXP 20
4011: PPUSH
4012: CALL_OW 87
// wait ( 0 0$5 ) ;
4016: LD_INT 175
4018: PPUSH
4019: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
4023: LD_EXP 20
4027: PPUSH
4028: CALL_OW 250
4032: PPUSH
4033: LD_EXP 20
4037: PPUSH
4038: CALL_OW 251
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
4050: LD_INT 35
4052: PPUSH
4053: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
4057: LD_INT 1
4059: PPUSH
4060: LD_EXP 20
4064: PPUSH
4065: CALL_OW 292
4069: IFTRUE 4082
4071: PUSH
4072: LD_EXP 20
4076: PPUSH
4077: CALL_OW 301
4081: OR
4082: IFFALSE 4050
// if IsDead ( Denis ) then
4084: LD_EXP 20
4088: PPUSH
4089: CALL_OW 301
4093: IFFALSE 4097
// exit ;
4095: GO 4335
// SetSide ( Denis , 1 ) ;
4097: LD_EXP 20
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
4109: LD_EXP 20
4113: PPUSH
4114: LD_STRING DD-Den-2a
4116: PPUSH
4117: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
4121: LD_INT 35
4123: PPUSH
4124: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
4128: LD_EXP 20
4132: PPUSH
4133: CALL_OW 310
4137: PPUSH
4138: CALL_OW 266
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 7
4148: PUSH
4149: LD_INT 8
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: IN
4157: IFTRUE 4170
4159: PUSH
4160: LD_EXP 20
4164: PPUSH
4165: CALL_OW 301
4169: OR
4170: IFFALSE 4121
// if IsDead ( Denis ) then
4172: LD_EXP 20
4176: PPUSH
4177: CALL_OW 301
4181: IFFALSE 4185
// exit ;
4183: GO 4335
// Say ( Denis , DD-Den-2b ) ;
4185: LD_EXP 20
4189: PPUSH
4190: LD_STRING DD-Den-2b
4192: PPUSH
4193: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4197: LD_EXP 20
4201: PPUSH
4202: LD_INT 4
4204: PPUSH
4205: CALL_OW 123
// Wait ( 0 0$02 ) ;
4209: LD_INT 70
4211: PPUSH
4212: CALL_OW 67
// DialogueOn ;
4216: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4220: LD_EXP 20
4224: PPUSH
4225: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4229: LD_EXP 17
4233: PPUSH
4234: LD_STRING D4-JMM-1
4236: PPUSH
4237: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4241: LD_EXP 20
4245: PPUSH
4246: LD_STRING D4-Den-1
4248: PPUSH
4249: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4253: LD_EXP 17
4257: PPUSH
4258: LD_STRING D4-JMM-2
4260: PPUSH
4261: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4265: LD_EXP 20
4269: PPUSH
4270: LD_STRING D4-Den-2
4272: PPUSH
4273: CALL_OW 88
// DialogueOff ;
4277: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4281: LD_STRING M2
4283: PPUSH
4284: CALL_OW 337
// radar_allowed := true ;
4288: LD_ADDR_EXP 7
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4296: LD_INT 6
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4309: LD_INT 15
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4322: LD_INT 20
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 324
// end ;
4335: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4336: LD_EXP 13
4340: IFFALSE 4965
4342: GO 4344
4344: DISABLE
4345: LD_INT 0
4347: PPUSH
4348: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4349: LD_ADDR_VAR 0 1
4353: PUSH
4354: LD_EXP 28
4358: PPUSH
4359: LD_INT 26
4361: PUSH
4362: LD_INT 1
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 72
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL 724 0 2
4381: ST_TO_ADDR
// if not sol then
4382: LD_VAR 0 1
4386: NOT
4387: IFFALSE 4391
// exit ;
4389: GO 4965
// repeat wait ( 0 0$01 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4398: LD_INT 22
4400: PUSH
4401: LD_INT 2
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 21
4410: PUSH
4411: LD_INT 1
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: IFFALSE 4391
// if IsOk ( sol ) then
4432: LD_VAR 0 1
4436: PPUSH
4437: CALL_OW 302
4441: IFFALSE 4461
// begin sol2 := others diff sol ;
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: LD_EXP 28
4452: PUSH
4453: LD_VAR 0 1
4457: DIFF
4458: ST_TO_ADDR
// end else
4459: GO 4463
// exit ;
4461: GO 4965
// if not Lisa and not sol2 then
4463: LD_EXP 23
4467: NOT
4468: IFFALSE 4477
4470: PUSH
4471: LD_VAR 0 2
4475: NOT
4476: AND
4477: IFFALSE 4481
// exit ;
4479: GO 4965
// DialogueOn ;
4481: CALL_OW 6
// if Lisa then
4485: LD_EXP 23
4489: IFFALSE 4505
// Say ( Lisa , D5a-Lisa-1 ) else
4491: LD_EXP 23
4495: PPUSH
4496: LD_STRING D5a-Lisa-1
4498: PPUSH
4499: CALL_OW 88
4503: GO 4580
// if sol2 then
4505: LD_VAR 0 2
4509: IFFALSE 4580
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4511: LD_VAR 0 2
4515: PUSH
4516: LD_INT 1
4518: ARRAY
4519: PPUSH
4520: CALL_OW 258
4524: PUSH
4525: LD_INT 1
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4552
4533: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_STRING D5-Sol2-1
4545: PPUSH
4546: CALL_OW 88
4550: GO 4580
4552: LD_INT 2
4554: DOUBLE
4555: EQUAL
4556: IFTRUE 4560
4558: GO 4579
4560: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4561: LD_VAR 0 2
4565: PUSH
4566: LD_INT 1
4568: ARRAY
4569: PPUSH
4570: LD_STRING D5-FSol2-1
4572: PPUSH
4573: CALL_OW 88
4577: GO 4580
4579: POP
// Say ( sol , D5-Sol1-2 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_STRING D5-Sol1-2
4587: PPUSH
4588: CALL_OW 88
// if Lisa then
4592: LD_EXP 23
4596: IFFALSE 4612
// Say ( Lisa , D5a-Lisa-2 ) else
4598: LD_EXP 23
4602: PPUSH
4603: LD_STRING D5a-Lisa-2
4605: PPUSH
4606: CALL_OW 88
4610: GO 4687
// if sol2 then
4612: LD_VAR 0 2
4616: IFFALSE 4687
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4618: LD_VAR 0 2
4622: PUSH
4623: LD_INT 1
4625: ARRAY
4626: PPUSH
4627: CALL_OW 258
4631: PUSH
4632: LD_INT 1
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4659
4640: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4641: LD_VAR 0 2
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: PPUSH
4650: LD_STRING D5-Sol2-2
4652: PPUSH
4653: CALL_OW 88
4657: GO 4687
4659: LD_INT 2
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4686
4667: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4668: LD_VAR 0 2
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PPUSH
4677: LD_STRING D5-FSol2-2
4679: PPUSH
4680: CALL_OW 88
4684: GO 4687
4686: POP
// Say ( sol , D5a-Sol1-3 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_STRING D5a-Sol1-3
4694: PPUSH
4695: CALL_OW 88
// if Lisa then
4699: LD_EXP 23
4703: IFFALSE 4717
// Say ( Lisa , D5a-Lisa-3 ) ;
4705: LD_EXP 23
4709: PPUSH
4710: LD_STRING D5a-Lisa-3
4712: PPUSH
4713: CALL_OW 88
// if not sol2 then
4717: LD_VAR 0 2
4721: NOT
4722: IFFALSE 4730
// begin DialogueOff ;
4724: CALL_OW 7
// exit ;
4728: GO 4965
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 258
4743: PUSH
4744: LD_INT 1
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4771
4752: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4753: LD_VAR 0 2
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_STRING D5-Sol2-3
4764: PPUSH
4765: CALL_OW 88
4769: GO 4799
4771: LD_INT 2
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4798
4779: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4780: LD_VAR 0 2
4784: PUSH
4785: LD_INT 1
4787: ARRAY
4788: PPUSH
4789: LD_STRING D5-FSol2-3
4791: PPUSH
4792: CALL_OW 88
4796: GO 4799
4798: POP
// Say ( sol , D5-Sol1-4 ) ;
4799: LD_VAR 0 1
4803: PPUSH
4804: LD_STRING D5-Sol1-4
4806: PPUSH
4807: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4811: LD_VAR 0 2
4815: PUSH
4816: LD_INT 1
4818: ARRAY
4819: PPUSH
4820: CALL_OW 258
4824: PUSH
4825: LD_INT 1
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4852
4833: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4834: LD_VAR 0 2
4838: PUSH
4839: LD_INT 1
4841: ARRAY
4842: PPUSH
4843: LD_STRING D5-Sol2-4
4845: PPUSH
4846: CALL_OW 88
4850: GO 4880
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4879
4860: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4861: LD_VAR 0 2
4865: PUSH
4866: LD_INT 1
4868: ARRAY
4869: PPUSH
4870: LD_STRING D5-FSol2-4
4872: PPUSH
4873: CALL_OW 88
4877: GO 4880
4879: POP
// Say ( sol , D5-Sol1-5 ) ;
4880: LD_VAR 0 1
4884: PPUSH
4885: LD_STRING D5-Sol1-5
4887: PPUSH
4888: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4892: LD_VAR 0 2
4896: PUSH
4897: LD_INT 1
4899: ARRAY
4900: PPUSH
4901: CALL_OW 258
4905: PUSH
4906: LD_INT 1
4908: DOUBLE
4909: EQUAL
4910: IFTRUE 4914
4912: GO 4933
4914: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4915: LD_VAR 0 2
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: LD_STRING D5-Sol2-5
4926: PPUSH
4927: CALL_OW 88
4931: GO 4961
4933: LD_INT 2
4935: DOUBLE
4936: EQUAL
4937: IFTRUE 4941
4939: GO 4960
4941: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_STRING D5-FSol2-5
4953: PPUSH
4954: CALL_OW 88
4958: GO 4961
4960: POP
// DialogueOff ;
4961: CALL_OW 7
// end ;
4965: PPOPN 2
4967: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 1
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 16
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 5
4999: GREATEREQUAL
5000: IFFALSE 5020
5002: GO 5004
5004: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
5005: LD_STRING M1b
5007: PPUSH
5008: CALL_OW 337
// apeman_army := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// end ;
5020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
5021: LD_INT 22
5023: PUSH
5024: LD_INT 1
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: LD_INT 30
5033: PUSH
5034: LD_INT 3
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 57
5043: PUSH
5044: EMPTY
5045: LIST
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: IFFALSE 5068
5058: GO 5060
5060: DISABLE
// ChangeMissionObjectives ( M1c ) ;
5061: LD_STRING M1c
5063: PPUSH
5064: CALL_OW 337
5068: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
5069: LD_INT 6
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 321
5079: PUSH
5080: LD_INT 2
5082: EQUAL
5083: IFFALSE 5103
5085: GO 5087
5087: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
5088: LD_STRING M2a
5090: PPUSH
5091: CALL_OW 337
// radar_researched := true ;
5095: LD_ADDR_EXP 10
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// end ;
5103: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
5104: LD_INT 22
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: LD_INT 2
5116: PUSH
5117: LD_INT 34
5119: PUSH
5120: LD_INT 11
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 35
5129: PUSH
5130: LD_INT 11
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: IFFALSE 5170
5152: GO 5154
5154: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
5155: LD_STRING M2b
5157: PPUSH
5158: CALL_OW 337
// radar_builded := true ;
5162: LD_ADDR_EXP 11
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// end ;
5170: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
5171: LD_INT 22
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 12
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PPUSH
5195: CALL_OW 69
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: IFFALSE 5212
5205: PUSH
5206: LD_EXP 8
5210: NOT
5211: AND
5212: IFFALSE 5224
5214: GO 5216
5216: DISABLE
// YouLost ( Apeman ) ;
5217: LD_STRING Apeman
5219: PPUSH
5220: CALL_OW 104
5224: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5225: LD_INT 22
5227: PUSH
5228: LD_INT 1
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 16
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 69
5253: PUSH
5254: LD_INT 7
5256: GREATEREQUAL
5257: IFFALSE 5355
5259: GO 5261
5261: DISABLE
5262: LD_INT 0
5264: PPUSH
5265: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5266: LD_ADDR_VAR 0 2
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 21
5283: PUSH
5284: LD_INT 1
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 25
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: PUSH
5311: LD_EXP 17
5315: ADD
5316: ST_TO_ADDR
// if filter then
5317: LD_VAR 0 2
5321: IFFALSE 5355
// for i in filter do
5323: LD_ADDR_VAR 0 1
5327: PUSH
5328: LD_VAR 0 2
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5353
// AddExperience ( i , 4 , 3500 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 4
5343: PPUSH
5344: LD_INT 3500
5346: PPUSH
5347: CALL_OW 492
5351: GO 5333
5353: POP
5354: POP
// end ;
5355: PPOPN 2
5357: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5358: LD_EXP 14
5362: IFFALSE 6553
5364: GO 5366
5366: DISABLE
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin if apeKillCounter = 0 then
5374: LD_EXP 15
5378: PUSH
5379: LD_INT 0
5381: EQUAL
5382: IFFALSE 5391
// SetAchievement ( ACH_APEKILLER ) ;
5384: LD_STRING ACH_APEKILLER
5386: PPUSH
5387: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5391: LD_INT 22
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: IFFALSE 5443
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5407: LD_ADDR_VAR 0 1
5411: PUSH
5412: LD_INT 22
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 69
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5441
// RemoveUnit ( i ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: CALL_OW 64
5439: GO 5427
5441: POP
5442: POP
// m1 := false ;
5443: LD_ADDR_VAR 0 3
5447: PUSH
5448: LD_INT 0
5450: ST_TO_ADDR
// m2 := false ;
5451: LD_ADDR_VAR 0 4
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// m3 := false ;
5459: LD_ADDR_VAR 0 5
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// if apeman_army then
5467: LD_EXP 9
5471: IFFALSE 5493
// begin AddMedal ( Tame , 1 ) ;
5473: LD_STRING Tame
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 101
// m1 := true ;
5483: LD_ADDR_VAR 0 3
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// end else
5491: GO 5504
// AddMedal ( Tame , - 1 ) ;
5493: LD_STRING Tame
5495: PPUSH
5496: LD_INT 1
5498: NEG
5499: PPUSH
5500: CALL_OW 101
// if radar_researched then
5504: LD_EXP 10
5508: IFFALSE 5540
// begin SaveVariable ( true , radarResInDelta ) ;
5510: LD_INT 1
5512: PPUSH
5513: LD_STRING radarResInDelta
5515: PPUSH
5516: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5520: LD_STRING Radar
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 101
// m2 := true ;
5530: LD_ADDR_VAR 0 4
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// end else
5538: GO 5570
// if radar_allowed then
5540: LD_EXP 7
5544: IFFALSE 5559
// AddMedal ( Radar , - 2 ) else
5546: LD_STRING Radar
5548: PPUSH
5549: LD_INT 2
5551: NEG
5552: PPUSH
5553: CALL_OW 101
5557: GO 5570
// AddMedal ( Radar , - 1 ) ;
5559: LD_STRING Radar
5561: PPUSH
5562: LD_INT 1
5564: NEG
5565: PPUSH
5566: CALL_OW 101
// if radar_builded then
5570: LD_EXP 11
5574: IFFALSE 5596
// begin AddMedal ( BuildRadar , 1 ) ;
5576: LD_STRING BuildRadar
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 101
// m3 := true ;
5586: LD_ADDR_VAR 0 5
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// end else
5594: GO 5607
// AddMedal ( BuildRadar , - 1 ) ;
5596: LD_STRING BuildRadar
5598: PPUSH
5599: LD_INT 1
5601: NEG
5602: PPUSH
5603: CALL_OW 101
// if tick <= 7 7$00 then
5607: LD_OWVAR 1
5611: PUSH
5612: LD_INT 14700
5614: LESSEQUAL
5615: IFFALSE 5624
// SetAchievement ( ACH_ASPEED_5 ) ;
5617: LD_STRING ACH_ASPEED_5
5619: PPUSH
5620: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5624: LD_VAR 0 3
5628: IFFALSE 5636
5630: PUSH
5631: LD_VAR 0 4
5635: AND
5636: IFFALSE 5644
5638: PUSH
5639: LD_VAR 0 5
5643: AND
5644: IFFALSE 5656
5646: PUSH
5647: LD_OWVAR 67
5651: PUSH
5652: LD_INT 3
5654: GREATEREQUAL
5655: AND
5656: IFFALSE 5668
// SetAchievementEX ( ACH_AMER , 5 ) ;
5658: LD_STRING ACH_AMER
5660: PPUSH
5661: LD_INT 5
5663: PPUSH
5664: CALL_OW 564
// GiveMedals ( MAIN ) ;
5668: LD_STRING MAIN
5670: PPUSH
5671: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 21
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: LD_INT 25
5705: PUSH
5706: LD_INT 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 25
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 25
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 25
5735: PUSH
5736: LD_INT 4
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: PPUSH
5755: CALL_OW 69
5759: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5769: LD_EXP 17
5773: PPUSH
5774: LD_EXP 2
5778: PUSH
5779: LD_STRING JMM
5781: STR
5782: PPUSH
5783: CALL_OW 38
// if IsOk ( Gladstone ) then
5787: LD_EXP 18
5791: PPUSH
5792: CALL_OW 302
5796: IFFALSE 5823
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5798: LD_STRING enableBioCharacter(BIO_TIM)
5800: PPUSH
5801: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5805: LD_EXP 18
5809: PPUSH
5810: LD_EXP 2
5814: PUSH
5815: LD_STRING Gladstone
5817: STR
5818: PPUSH
5819: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5823: LD_EXP 20
5827: PPUSH
5828: CALL_OW 302
5832: IFFALSE 5849
5834: PUSH
5835: LD_EXP 20
5839: PPUSH
5840: CALL_OW 255
5844: PUSH
5845: LD_INT 1
5847: EQUAL
5848: AND
5849: IFFALSE 5886
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5851: LD_STRING enableBioCharacter(BIO_DENIS)
5853: PPUSH
5854: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5858: LD_EXP 20
5862: PPUSH
5863: LD_EXP 2
5867: PUSH
5868: LD_STRING Denis
5870: STR
5871: PPUSH
5872: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5876: LD_INT 1
5878: PPUSH
5879: LD_STRING DenisInDelta
5881: PPUSH
5882: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5886: LD_EXP 23
5890: PPUSH
5891: CALL_OW 302
5895: IFFALSE 5915
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5897: LD_EXP 23
5901: PPUSH
5902: LD_EXP 2
5906: PUSH
5907: LD_STRING Lisa
5909: STR
5910: PPUSH
5911: CALL_OW 38
// end ; if IsOk ( Frank ) then
5915: LD_EXP 24
5919: PPUSH
5920: CALL_OW 302
5924: IFFALSE 5944
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5926: LD_EXP 24
5930: PPUSH
5931: LD_EXP 2
5935: PUSH
5936: LD_STRING Frank
5938: STR
5939: PPUSH
5940: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5944: LD_EXP 25
5948: PPUSH
5949: CALL_OW 302
5953: IFFALSE 5973
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5955: LD_EXP 25
5959: PPUSH
5960: LD_EXP 2
5964: PUSH
5965: LD_STRING Bobby
5967: STR
5968: PPUSH
5969: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5973: LD_EXP 26
5977: PPUSH
5978: CALL_OW 302
5982: IFFALSE 6002
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5984: LD_EXP 26
5988: PPUSH
5989: LD_EXP 2
5993: PUSH
5994: LD_STRING Cyrus
5996: STR
5997: PPUSH
5998: CALL_OW 38
// end ; if IsOk ( Brown ) then
6002: LD_EXP 21
6006: PPUSH
6007: CALL_OW 302
6011: IFFALSE 6031
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
6013: LD_EXP 21
6017: PPUSH
6018: LD_EXP 2
6022: PUSH
6023: LD_STRING Brown
6025: STR
6026: PPUSH
6027: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
6031: LD_EXP 22
6035: PPUSH
6036: CALL_OW 302
6040: IFFALSE 6060
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
6042: LD_EXP 22
6046: PPUSH
6047: LD_EXP 2
6051: PUSH
6052: LD_STRING Donaldson
6054: STR
6055: PPUSH
6056: CALL_OW 38
// end ; if IsOk ( Mike ) then
6060: LD_EXP 27
6064: PPUSH
6065: CALL_OW 302
6069: IFFALSE 6089
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
6071: LD_EXP 27
6075: PPUSH
6076: LD_EXP 2
6080: PUSH
6081: LD_STRING Mike
6083: STR
6084: PPUSH
6085: CALL_OW 38
// if others then
6089: LD_EXP 28
6093: IFFALSE 6107
// SaveCharacters ( others , othersInDelta ) ;
6095: LD_EXP 28
6099: PPUSH
6100: LD_STRING othersInDelta
6102: PPUSH
6103: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
6107: LD_INT 22
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 25
6119: PUSH
6120: LD_INT 16
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: IFFALSE 6179
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
6137: LD_INT 22
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 25
6149: PUSH
6150: LD_INT 16
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: PUSH
6166: LD_EXP 27
6170: DIFF
6171: PPUSH
6172: LD_STRING apeInDelta
6174: PPUSH
6175: CALL_OW 38
// tmp := [ ] ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: EMPTY
6185: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
6186: LD_INT 22
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 21
6198: PUSH
6199: LD_INT 2
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: IFFALSE 6325
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6216: LD_ADDR_VAR 0 1
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 21
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PPUSH
6245: CALL_OW 69
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6323
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_VAR 0 2
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 248
6272: PUSH
6273: LD_VAR 0 1
6277: PPUSH
6278: CALL_OW 265
6282: PUSH
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 262
6292: PUSH
6293: LD_VAR 0 1
6297: PPUSH
6298: CALL_OW 263
6302: PUSH
6303: LD_VAR 0 1
6307: PPUSH
6308: CALL_OW 264
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: ADD
6320: ST_TO_ADDR
6321: GO 6250
6323: POP
6324: POP
// if tmp then
6325: LD_VAR 0 2
6329: IFFALSE 6343
// SaveVariable ( tmp , vehiclesInDelta ) ;
6331: LD_VAR 0 2
6335: PPUSH
6336: LD_STRING vehiclesInDelta
6338: PPUSH
6339: CALL_OW 39
// tmp := [ ] ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: EMPTY
6349: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6350: LD_INT 22
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: IFFALSE 6531
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6380: LD_ADDR_VAR 0 1
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL_OW 69
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6529
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 266
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 267
6446: PUSH
6447: LD_VAR 0 1
6451: PPUSH
6452: CALL_OW 250
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 251
6466: PUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: CALL_OW 254
6476: PUSH
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 1
6484: PPUSH
6485: CALL_OW 268
6489: PUSH
6490: LD_VAR 0 1
6494: PPUSH
6495: LD_INT 2
6497: PPUSH
6498: CALL_OW 268
6502: PUSH
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 269
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: ADD
6526: ST_TO_ADDR
6527: GO 6414
6529: POP
6530: POP
// if tmp then
6531: LD_VAR 0 2
6535: IFFALSE 6549
// SaveVariable ( tmp , buildingsInDelta ) ;
6537: LD_VAR 0 2
6541: PPUSH
6542: LD_STRING buildingsInDelta
6544: PPUSH
6545: CALL_OW 39
// YouWin ;
6549: CALL_OW 103
// end ; end_of_file
6553: PPOPN 5
6555: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
// InitHc ;
6562: CALL_OW 19
// InitUc ;
6566: CALL_OW 18
// uc_side := 2 ;
6570: LD_ADDR_OWVAR 20
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// uc_nation := 2 ;
6578: LD_ADDR_OWVAR 21
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// if not amount then
6586: LD_VAR 0 1
6590: NOT
6591: IFFALSE 6595
// exit ;
6593: GO 6718
// for i = 1 to amount do
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 1
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6706
// begin PrepareHuman ( false , 1 , skill ) ;
6613: LD_INT 0
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 380
// un := CreateHuman ;
6628: LD_ADDR_VAR 0 6
6632: PUSH
6633: CALL_OW 44
6637: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6638: LD_ADDR_VAR 0 7
6642: PUSH
6643: LD_VAR 0 7
6647: PPUSH
6648: LD_INT 1
6650: PPUSH
6651: LD_VAR 0 6
6655: PPUSH
6656: CALL_OW 2
6660: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6661: LD_VAR 0 6
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: LD_INT 0
6673: PPUSH
6674: CALL_OW 49
// if i mod 2 = 0 then
6678: LD_VAR 0 5
6682: PUSH
6683: LD_INT 2
6685: MOD
6686: PUSH
6687: LD_INT 0
6689: EQUAL
6690: IFFALSE 6704
// SetTag ( un , 11 ) ;
6692: LD_VAR 0 6
6696: PPUSH
6697: LD_INT 11
6699: PPUSH
6700: CALL_OW 109
// end ;
6704: GO 6610
6706: POP
6707: POP
// result := tmp ;
6708: LD_ADDR_VAR 0 4
6712: PUSH
6713: LD_VAR 0 7
6717: ST_TO_ADDR
// end ;
6718: LD_VAR 0 4
6722: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6723: LD_EXP 6
6727: IFFALSE 7822
6729: GO 6731
6731: DISABLE
6732: LD_INT 0
6734: PPUSH
6735: PPUSH
6736: PPUSH
6737: PPUSH
6738: PPUSH
6739: PPUSH
6740: PPUSH
6741: PPUSH
// begin more_troops := false ;
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_INT 0
6749: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: LD_INT 3
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: LD_INT 5
6763: PUSH
6764: LD_INT 5
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_OWVAR 67
6777: ARRAY
6778: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_INT 10500
6786: PUSH
6787: LD_INT 8400
6789: PUSH
6790: LD_INT 6300
6792: PUSH
6793: LD_INT 5250
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_OWVAR 67
6806: ARRAY
6807: ST_TO_ADDR
// force := [ ] ;
6808: LD_ADDR_VAR 0 8
6812: PUSH
6813: EMPTY
6814: ST_TO_ADDR
// ar_forces := [ ] ;
6815: LD_ADDR_EXP 29
6819: PUSH
6820: EMPTY
6821: ST_TO_ADDR
// ap_killers := [ ] ;
6822: LD_ADDR_EXP 30
6826: PUSH
6827: EMPTY
6828: ST_TO_ADDR
// Wait ( timer ) ;
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6838: LD_EXP 20
6842: IFFALSE 6859
6844: PUSH
6845: LD_EXP 20
6849: PPUSH
6850: CALL_OW 255
6854: PUSH
6855: LD_INT 4
6857: EQUAL
6858: AND
6859: IFFALSE 6868
// Wait ( 0 0$45 ) ;
6861: LD_INT 1575
6863: PPUSH
6864: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6868: LD_INT 22
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 30
6880: PUSH
6881: LD_INT 4
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: IFFALSE 6913
// begin wait ( 1 1$25 ) ;
6898: LD_INT 2975
6900: PPUSH
6901: CALL_OW 67
// more_troops := true ;
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: LD_INT 1
6912: ST_TO_ADDR
// end ; if more_troops then
6913: LD_VAR 0 3
6917: IFFALSE 7113
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6919: LD_ADDR_VAR 0 8
6923: PUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 6
6932: PUSH
6933: LD_INT 7
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: LD_OWVAR 67
6946: ARRAY
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: LD_INT 14
6955: PPUSH
6956: CALL 6556 0 3
6960: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6961: LD_ADDR_VAR 0 7
6965: PUSH
6966: LD_INT 2
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: LD_INT 22
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: LD_INT 1
6980: PPUSH
6981: LD_INT 42
6983: PUSH
6984: LD_INT 42
6986: PUSH
6987: LD_INT 43
6989: PUSH
6990: LD_INT 44
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: LD_OWVAR 67
7003: ARRAY
7004: PPUSH
7005: LD_INT 90
7007: PPUSH
7008: CALL 449 0 7
7012: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7013: LD_VAR 0 7
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
7025: LD_VAR 0 7
7029: PPUSH
7030: LD_INT 13
7032: PPUSH
7033: LD_INT 0
7035: PPUSH
7036: CALL_OW 49
// uc_side := 2 ;
7040: LD_ADDR_OWVAR 20
7044: PUSH
7045: LD_INT 2
7047: ST_TO_ADDR
// uc_nation := 2 ;
7048: LD_ADDR_OWVAR 21
7052: PUSH
7053: LD_INT 2
7055: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7056: LD_INT 0
7058: PPUSH
7059: LD_INT 1
7061: PPUSH
7062: LD_VAR 0 4
7066: PPUSH
7067: CALL_OW 380
// un := CreateHuman ;
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: CALL_OW 44
7080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7081: LD_VAR 0 6
7085: PPUSH
7086: LD_VAR 0 7
7090: PPUSH
7091: CALL_OW 52
// force := force ^ un ;
7095: LD_ADDR_VAR 0 8
7099: PUSH
7100: LD_VAR 0 8
7104: PUSH
7105: LD_VAR 0 6
7109: ADD
7110: ST_TO_ADDR
// end else
7111: GO 7155
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: LD_INT 4
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 6
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_OWVAR 67
7140: ARRAY
7141: PPUSH
7142: LD_VAR 0 4
7146: PPUSH
7147: LD_INT 14
7149: PPUSH
7150: CALL 6556 0 3
7154: ST_TO_ADDR
// end ; if force then
7155: LD_VAR 0 8
7159: IFFALSE 7171
// ar_forces := force ;
7161: LD_ADDR_EXP 29
7165: PUSH
7166: LD_VAR 0 8
7170: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7171: LD_INT 35
7173: PPUSH
7174: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7178: LD_INT 22
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 21
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 69
7206: PUSH
7207: LD_INT 0
7209: EQUAL
7210: IFFALSE 7171
// wait ( timer ) ;
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7221: LD_ADDR_VAR 0 8
7225: PUSH
7226: LD_INT 4
7228: PUSH
7229: LD_INT 5
7231: PUSH
7232: LD_INT 6
7234: PUSH
7235: LD_INT 7
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_OWVAR 67
7248: ARRAY
7249: PPUSH
7250: LD_VAR 0 4
7254: PPUSH
7255: LD_INT 13
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 1
7267: PPUSH
7268: LD_INT 2
7270: PPUSH
7271: CALL_OW 12
7275: ARRAY
7276: PPUSH
7277: CALL 6556 0 3
7281: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7282: LD_OWVAR 67
7286: PUSH
7287: LD_INT 1
7289: GREATER
7290: IFFALSE 7298
7292: PUSH
7293: LD_EXP 6
7297: AND
7298: IFFALSE 7377
// begin uc_side := 2 ;
7300: LD_ADDR_OWVAR 20
7304: PUSH
7305: LD_INT 2
7307: ST_TO_ADDR
// uc_nation := 2 ;
7308: LD_ADDR_OWVAR 21
7312: PUSH
7313: LD_INT 2
7315: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7316: LD_INT 0
7318: PPUSH
7319: LD_INT 2
7321: PPUSH
7322: LD_VAR 0 4
7326: PPUSH
7327: CALL_OW 380
// eng := CreateHuman ;
7331: LD_ADDR_VAR 0 5
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7341: LD_VAR 0 5
7345: PPUSH
7346: LD_INT 13
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 49
// Wait ( 3 ) ;
7356: LD_INT 3
7358: PPUSH
7359: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7363: LD_VAR 0 5
7367: PPUSH
7368: LD_EXP 6
7372: PPUSH
7373: CALL_OW 180
// end ; if force then
7377: LD_VAR 0 8
7381: IFFALSE 7393
// ar_forces := force ;
7383: LD_ADDR_EXP 29
7387: PUSH
7388: LD_VAR 0 8
7392: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7393: LD_INT 35
7395: PPUSH
7396: CALL_OW 67
// if eng then
7400: LD_VAR 0 5
7404: IFFALSE 7462
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7406: LD_EXP 6
7410: PPUSH
7411: CALL_OW 255
7415: PUSH
7416: LD_INT 2
7418: EQUAL
7419: IFFALSE 7432
7421: PUSH
7422: LD_VAR 0 5
7426: PPUSH
7427: CALL_OW 302
7431: AND
7432: IFFALSE 7446
7434: PUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 310
7444: NOT
7445: AND
7446: IFFALSE 7462
// ComEnterUnit ( eng , Delta ) ;
7448: LD_VAR 0 5
7452: PPUSH
7453: LD_EXP 6
7457: PPUSH
7458: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7462: LD_INT 22
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 21
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PPUSH
7486: CALL_OW 69
7490: PUSH
7491: LD_INT 0
7493: EQUAL
7494: IFFALSE 7393
// Wait ( 2 2$00 ) ;
7496: LD_INT 4200
7498: PPUSH
7499: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7503: LD_ADDR_EXP 30
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 2
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: LD_OWVAR 67
7530: ARRAY
7531: PPUSH
7532: LD_VAR 0 4
7536: PPUSH
7537: LD_INT 13
7539: PPUSH
7540: CALL 6556 0 3
7544: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7545: LD_VAR 0 2
7549: PUSH
7550: LD_INT 2
7552: MUL
7553: PPUSH
7554: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7558: LD_ADDR_EXP 29
7562: PUSH
7563: LD_INT 5
7565: PUSH
7566: LD_INT 6
7568: PUSH
7569: LD_INT 7
7571: PUSH
7572: LD_INT 8
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: LD_OWVAR 67
7585: ARRAY
7586: PPUSH
7587: LD_VAR 0 4
7591: PPUSH
7592: LD_INT 13
7594: PPUSH
7595: CALL 6556 0 3
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 4
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: LD_OWVAR 67
7622: ARRAY
7623: PPUSH
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 14
7631: PPUSH
7632: CALL 6556 0 3
7636: ADD
7637: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7638: LD_OWVAR 67
7642: PUSH
7643: LD_INT 4
7645: LESS
7646: IFFALSE 7655
7648: PUSH
7649: LD_EXP 16
7653: NOT
7654: AND
7655: IFFALSE 7659
// exit ;
7657: GO 7822
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7659: LD_ADDR_VAR 0 7
7663: PUSH
7664: LD_INT 2
7666: PPUSH
7667: LD_INT 3
7669: PPUSH
7670: LD_INT 22
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 44
7681: PPUSH
7682: LD_INT 90
7684: PPUSH
7685: CALL 449 0 7
7689: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7690: LD_VAR 0 7
7694: PPUSH
7695: LD_INT 1
7697: PPUSH
7698: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7702: LD_VAR 0 7
7706: PPUSH
7707: LD_INT 28
7709: PPUSH
7710: LD_INT 51
7712: PPUSH
7713: LD_INT 0
7715: PPUSH
7716: CALL_OW 48
// uc_side := 2 ;
7720: LD_ADDR_OWVAR 20
7724: PUSH
7725: LD_INT 2
7727: ST_TO_ADDR
// uc_nation := 2 ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 2
7735: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7736: LD_INT 0
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_VAR 0 4
7746: PPUSH
7747: CALL_OW 380
// un := CreateHuman ;
7751: LD_ADDR_VAR 0 6
7755: PUSH
7756: CALL_OW 44
7760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7761: LD_VAR 0 6
7765: PPUSH
7766: LD_VAR 0 7
7770: PPUSH
7771: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7775: LD_ADDR_EXP 29
7779: PUSH
7780: LD_EXP 29
7784: PPUSH
7785: LD_VAR 0 6
7789: PPUSH
7790: CALL 69529 0 2
7794: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7795: LD_ADDR_EXP 29
7799: PUSH
7800: LD_EXP 29
7804: PUSH
7805: LD_INT 4
7807: PPUSH
7808: LD_VAR 0 4
7812: PPUSH
7813: LD_INT 19
7815: PPUSH
7816: CALL 6556 0 3
7820: UNION
7821: ST_TO_ADDR
// end ;
7822: PPOPN 8
7824: END
// every 0 0$03 trigger ar_forces do var i , target ;
7825: LD_EXP 29
7829: IFFALSE 8027
7831: GO 7833
7833: DISABLE
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
// begin enable ;
7838: ENABLE
// if not ar_forces then
7839: LD_EXP 29
7843: NOT
7844: IFFALSE 7848
// exit ;
7846: GO 8027
// if Delta then
7848: LD_EXP 6
7852: IFFALSE 7866
// target := Delta else
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_EXP 6
7863: ST_TO_ADDR
7864: GO 7876
// target := JMM ;
7866: LD_ADDR_VAR 0 2
7870: PUSH
7871: LD_EXP 17
7875: ST_TO_ADDR
// for i in ar_forces do
7876: LD_ADDR_VAR 0 1
7880: PUSH
7881: LD_EXP 29
7885: PUSH
7886: FOR_IN
7887: IFFALSE 8025
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 55
7896: PUSH
7897: EMPTY
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: IN
7905: IFFALSE 7948
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7907: LD_VAR 0 1
7911: PPUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: PPUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 310
7936: PPUSH
7937: CALL_OW 74
7941: PPUSH
7942: CALL_OW 115
7946: GO 8023
// if GetDistUnits ( i , target ) > 30 then
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 296
7962: PUSH
7963: LD_INT 30
7965: GREATER
7966: IFFALSE 7999
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 2
7977: PPUSH
7978: CALL_OW 250
7982: PPUSH
7983: LD_VAR 0 2
7987: PPUSH
7988: CALL_OW 251
7992: PPUSH
7993: CALL_OW 114
7997: GO 8023
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7999: LD_VAR 0 1
8003: PPUSH
8004: LD_INT 81
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PPUSH
8019: CALL 941 0 2
// end ;
8023: GO 7886
8025: POP
8026: POP
// end ;
8027: PPOPN 2
8029: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
8030: LD_EXP 30
8034: IFFALSE 8194
8036: GO 8038
8038: DISABLE
8039: LD_INT 0
8041: PPUSH
8042: PPUSH
8043: PPUSH
// begin enable ;
8044: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8045: LD_ADDR_VAR 0 1
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 0
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 12
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PPUSH
8074: CALL_OW 69
8078: ST_TO_ADDR
// if not filter then
8079: LD_VAR 0 1
8083: NOT
8084: IFFALSE 8111
// begin ar_forces := ar_forces ^ ap_killers ;
8086: LD_ADDR_EXP 29
8090: PUSH
8091: LD_EXP 29
8095: PUSH
8096: LD_EXP 30
8100: ADD
8101: ST_TO_ADDR
// ap_killers := [ ] ;
8102: LD_ADDR_EXP 30
8106: PUSH
8107: EMPTY
8108: ST_TO_ADDR
// exit ;
8109: GO 8194
// end ; for i in ap_killers do
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_EXP 30
8120: PUSH
8121: FOR_IN
8122: IFFALSE 8192
// begin if not IsOk ( i ) then
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8138
// continue ;
8136: GO 8121
// if not HasTask ( i ) then
8138: LD_VAR 0 2
8142: PPUSH
8143: CALL_OW 314
8147: NOT
8148: IFFALSE 8170
// target := NearestUnitToUnit ( filter , i ) ;
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: CALL_OW 74
8169: ST_TO_ADDR
// if target then
8170: LD_VAR 0 3
8174: IFFALSE 8190
// ComAttackUnit ( i , target ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 115
// end ;
8190: GO 8121
8192: POP
8193: POP
// end ; end_of_file
8194: PPOPN 3
8196: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
8197: LD_EXP 6
8201: IFFALSE 8337
8203: GO 8205
8205: DISABLE
8206: LD_INT 0
8208: PPUSH
8209: PPUSH
8210: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_INT 300
8218: PUSH
8219: LD_INT 250
8221: PUSH
8222: LD_INT 220
8224: PUSH
8225: LD_INT 210
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_OWVAR 67
8238: ARRAY
8239: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8240: LD_INT 1
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL_OW 12
8250: PPUSH
8251: LD_INT 7
8253: PPUSH
8254: LD_INT 1
8256: PPUSH
8257: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8261: LD_INT 3150
8263: PPUSH
8264: LD_INT 4900
8266: PPUSH
8267: CALL_OW 12
8271: PPUSH
8272: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8276: LD_ADDR_VAR 0 3
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: LD_INT 5
8286: PPUSH
8287: CALL_OW 12
8291: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_INT 7
8299: PPUSH
8300: LD_INT 1
8302: PPUSH
8303: CALL_OW 55
// counter := counter - cr * 10 ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_VAR 0 2
8316: PUSH
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 10
8324: MUL
8325: MINUS
8326: ST_TO_ADDR
// until counter <= 0 ;
8327: LD_VAR 0 2
8331: PUSH
8332: LD_INT 0
8334: LESSEQUAL
8335: IFFALSE 8261
// end ;
8337: PPOPN 3
8339: END
// every 0 0$03 trigger not Delta do var i ;
8340: LD_EXP 6
8344: NOT
8345: IFFALSE 8415
8347: GO 8349
8349: DISABLE
8350: LD_INT 0
8352: PPUSH
// begin for i = 1 to 5 - Difficulty do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: DOUBLE
8359: LD_INT 1
8361: DEC
8362: ST_TO_ADDR
8363: LD_INT 5
8365: PUSH
8366: LD_OWVAR 67
8370: MINUS
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8413
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8375: LD_INT 2
8377: PPUSH
8378: LD_INT 5
8380: PPUSH
8381: CALL_OW 12
8385: PPUSH
8386: LD_INT 8
8388: PPUSH
8389: LD_INT 1
8391: PPUSH
8392: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8396: LD_INT 560
8398: PPUSH
8399: LD_INT 1365
8401: PPUSH
8402: CALL_OW 12
8406: PPUSH
8407: CALL_OW 67
// end ;
8411: GO 8372
8413: POP
8414: POP
// end ;
8415: PPOPN 1
8417: END
// every 3 3$00 trigger tick < 15 15$00 do
8418: LD_OWVAR 1
8422: PUSH
8423: LD_INT 31500
8425: LESS
8426: IFFALSE 8486
8428: GO 8430
8430: DISABLE
// begin enable ;
8431: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8432: LD_INT 1
8434: PPUSH
8435: LD_INT 3
8437: PPUSH
8438: CALL_OW 12
8442: PPUSH
8443: LD_INT 1
8445: PPUSH
8446: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8450: LD_INT 1330
8452: PPUSH
8453: LD_INT 2065
8455: PPUSH
8456: CALL_OW 12
8460: PPUSH
8461: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 4
8470: PPUSH
8471: CALL_OW 12
8475: PPUSH
8476: LD_INT 15
8478: PPUSH
8479: LD_INT 1
8481: PPUSH
8482: CALL_OW 55
// end ; end_of_file
8486: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL 25170 0 1
// if un = JMM then
8496: LD_VAR 0 1
8500: PUSH
8501: LD_EXP 17
8505: EQUAL
8506: IFFALSE 8515
// YouLost ( JMM ) ;
8508: LD_STRING JMM
8510: PPUSH
8511: CALL_OW 104
// if un = Delta then
8515: LD_VAR 0 1
8519: PUSH
8520: LD_EXP 6
8524: EQUAL
8525: IFFALSE 8548
// begin Delta := 0 ;
8527: LD_ADDR_EXP 6
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8535: LD_INT 0
8537: PPUSH
8538: LD_INT 1
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 324
// end ; if un in ar_forces then
8548: LD_VAR 0 1
8552: PUSH
8553: LD_EXP 29
8557: IN
8558: IFFALSE 8576
// ar_forces := ar_forces diff un ;
8560: LD_ADDR_EXP 29
8564: PUSH
8565: LD_EXP 29
8569: PUSH
8570: LD_VAR 0 1
8574: DIFF
8575: ST_TO_ADDR
// if un in ap_killers then
8576: LD_VAR 0 1
8580: PUSH
8581: LD_EXP 30
8585: IN
8586: IFFALSE 8604
// ap_killers := ap_killers diff un ;
8588: LD_ADDR_EXP 30
8592: PUSH
8593: LD_EXP 30
8597: PUSH
8598: LD_VAR 0 1
8602: DIFF
8603: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8604: LD_VAR 0 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 16
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 69
8641: IN
8642: IFFALSE 8658
// apeKillCounter := apeKillCounter + 1 ;
8644: LD_ADDR_EXP 15
8648: PUSH
8649: LD_EXP 15
8653: PUSH
8654: LD_INT 1
8656: PLUS
8657: ST_TO_ADDR
// end ;
8658: PPOPN 1
8660: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8661: LD_VAR 0 1
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 23
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: IN
8706: IFFALSE 8718
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: LD_INT 1
8716: EQUAL
8717: AND
8718: IFFALSE 8728
// traitor := true ;
8720: LD_ADDR_EXP 16
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// end ;
8728: PPOPN 3
8730: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_VAR 0 2
8740: PPUSH
8741: CALL 25228 0 2
// end ;
8745: PPOPN 2
8747: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8748: LD_VAR 0 1
8752: PUSH
8753: LD_INT 1
8755: EQUAL
8756: IFFALSE 8768
8758: PUSH
8759: LD_VAR 0 2
8763: PUSH
8764: LD_INT 2
8766: EQUAL
8767: AND
8768: IFFALSE 8777
8770: PUSH
8771: LD_EXP 13
8775: NOT
8776: AND
8777: IFFALSE 8787
// arab_spotted := true ;
8779: LD_ADDR_EXP 13
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// end ;
8787: PPOPN 2
8789: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8790: LD_INT 22
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 50
8802: PUSH
8803: EMPTY
8804: LIST
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: IFFALSE 8836
// begin Query ( QArabOnMap ) ;
8827: LD_STRING QArabOnMap
8829: PPUSH
8830: CALL_OW 97
// exit ;
8834: GO 8852
// end ; end_the_mission_allowed := false ;
8836: LD_ADDR_OWVAR 57
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// end_mission := true ;
8844: LD_ADDR_EXP 14
8848: PUSH
8849: LD_INT 1
8851: ST_TO_ADDR
// end ;
8852: PPOPN 1
8854: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8855: LD_VAR 0 2
8859: PPUSH
8860: CALL_OW 255
8864: PUSH
8865: LD_INT 1
8867: EQUAL
8868: IFFALSE 8884
// apeman_counter := apeman_counter + 1 ;
8870: LD_ADDR_EXP 12
8874: PUSH
8875: LD_EXP 12
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: ST_TO_ADDR
// if not first_apeman_tamed then
8884: LD_EXP 8
8888: NOT
8889: IFFALSE 9088
// begin first_apeman_tamed := true ;
8891: LD_ADDR_EXP 8
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// if sci = Gladstone then
8899: LD_VAR 0 2
8903: PUSH
8904: LD_EXP 18
8908: EQUAL
8909: IFFALSE 8923
// Say ( Gladstone , D7b-Glad-1 ) ;
8911: LD_EXP 18
8915: PPUSH
8916: LD_STRING D7b-Glad-1
8918: PPUSH
8919: CALL_OW 88
// if sci = Denis then
8923: LD_VAR 0 2
8927: PUSH
8928: LD_EXP 20
8932: EQUAL
8933: IFFALSE 8947
// Say ( Denis , D7a-Den-1 ) ;
8935: LD_EXP 20
8939: PPUSH
8940: LD_STRING D7a-Den-1
8942: PPUSH
8943: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8947: LD_VAR 0 2
8951: PUSH
8952: LD_EXP 17
8956: PUSH
8957: LD_EXP 18
8961: PUSH
8962: LD_EXP 20
8966: PUSH
8967: LD_EXP 23
8971: PUSH
8972: LD_EXP 24
8976: PUSH
8977: LD_EXP 25
8981: PUSH
8982: LD_EXP 26
8986: PUSH
8987: LD_EXP 22
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: IN
9002: NOT
9003: IFFALSE 9046
// begin if GetSex ( sci ) = sex_male then
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 258
9014: PUSH
9015: LD_INT 1
9017: EQUAL
9018: IFFALSE 9034
// Say ( sci , D7c-Sci1-1 ) else
9020: LD_VAR 0 2
9024: PPUSH
9025: LD_STRING D7c-Sci1-1
9027: PPUSH
9028: CALL_OW 88
9032: GO 9046
// Say ( sci , D7c-FSci1-1 ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_STRING D7c-FSci1-1
9041: PPUSH
9042: CALL_OW 88
// end ; if sci <> Gladstone then
9046: LD_VAR 0 2
9050: PUSH
9051: LD_EXP 18
9055: NONEQUAL
9056: IFFALSE 9070
// Say ( Gladstone , D7c-Glad-1 ) ;
9058: LD_EXP 18
9062: PPUSH
9063: LD_STRING D7c-Glad-1
9065: PPUSH
9066: CALL_OW 88
// if Lisa then
9070: LD_EXP 23
9074: IFFALSE 9088
// Say ( Lisa , D8-Lisa-1 ) ;
9076: LD_EXP 23
9080: PPUSH
9081: LD_STRING D8-Lisa-1
9083: PPUSH
9084: CALL_OW 88
// end ; end ; end_of_file end_of_file
9088: PPOPN 2
9090: END
// export globalGameSaveCounter ; every 0 0$1 do
9091: GO 9093
9093: DISABLE
// begin enable ;
9094: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9095: LD_STRING updateTimer(
9097: PUSH
9098: LD_OWVAR 1
9102: STR
9103: PUSH
9104: LD_STRING );
9106: STR
9107: PPUSH
9108: CALL_OW 559
// end ;
9112: END
// every 0 0$1 do
9113: GO 9115
9115: DISABLE
// begin globalGameSaveCounter := 0 ;
9116: LD_ADDR_EXP 31
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9124: LD_STRING setGameSaveCounter(0)
9126: PPUSH
9127: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9131: LD_STRING initStreamRollete();
9133: PPUSH
9134: CALL_OW 559
// InitStreamMode ;
9138: CALL 10483 0 0
// DefineStreamItems ( false ) ;
9142: LD_INT 0
9144: PPUSH
9145: CALL 10947 0 1
// end ;
9149: END
// export function SOS_MapStart ( ) ; begin
9150: LD_INT 0
9152: PPUSH
// if streamModeActive then
9153: LD_EXP 32
9157: IFFALSE 9166
// DefineStreamItems ( true ) ;
9159: LD_INT 1
9161: PPUSH
9162: CALL 10947 0 1
// UpdateLuaVariables ( ) ;
9166: CALL 9183 0 0
// UpdateFactoryWaypoints ( ) ;
9170: CALL 24069 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9174: CALL 24321 0 0
// end ;
9178: LD_VAR 0 1
9182: RET
// function UpdateLuaVariables ( ) ; begin
9183: LD_INT 0
9185: PPUSH
// if globalGameSaveCounter then
9186: LD_EXP 31
9190: IFFALSE 9224
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9192: LD_ADDR_EXP 31
9196: PUSH
9197: LD_EXP 31
9201: PPUSH
9202: CALL 70902 0 1
9206: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9207: LD_STRING setGameSaveCounter(
9209: PUSH
9210: LD_EXP 31
9214: STR
9215: PUSH
9216: LD_STRING )
9218: STR
9219: PPUSH
9220: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9224: LD_STRING setGameDifficulty(
9226: PUSH
9227: LD_OWVAR 67
9231: STR
9232: PUSH
9233: LD_STRING )
9235: STR
9236: PPUSH
9237: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9241: LD_STRING displayDifficulty(
9243: PUSH
9244: LD_OWVAR 67
9248: STR
9249: PUSH
9250: LD_STRING )
9252: STR
9253: PPUSH
9254: CALL_OW 559
// end ;
9258: LD_VAR 0 1
9262: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9263: LD_INT 0
9265: PPUSH
// if p2 = stream_mode then
9266: LD_VAR 0 2
9270: PUSH
9271: LD_INT 100
9273: EQUAL
9274: IFFALSE 10277
// begin if not StreamModeActive then
9276: LD_EXP 32
9280: NOT
9281: IFFALSE 9291
// StreamModeActive := true ;
9283: LD_ADDR_EXP 32
9287: PUSH
9288: LD_INT 1
9290: ST_TO_ADDR
// if p3 = 0 then
9291: LD_VAR 0 3
9295: PUSH
9296: LD_INT 0
9298: EQUAL
9299: IFFALSE 9305
// InitStreamMode ;
9301: CALL 10483 0 0
// if p3 = 1 then
9305: LD_VAR 0 3
9309: PUSH
9310: LD_INT 1
9312: EQUAL
9313: IFFALSE 9323
// sRocket := true ;
9315: LD_ADDR_EXP 37
9319: PUSH
9320: LD_INT 1
9322: ST_TO_ADDR
// if p3 = 2 then
9323: LD_VAR 0 3
9327: PUSH
9328: LD_INT 2
9330: EQUAL
9331: IFFALSE 9341
// sSpeed := true ;
9333: LD_ADDR_EXP 36
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// if p3 = 3 then
9341: LD_VAR 0 3
9345: PUSH
9346: LD_INT 3
9348: EQUAL
9349: IFFALSE 9359
// sEngine := true ;
9351: LD_ADDR_EXP 38
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// if p3 = 4 then
9359: LD_VAR 0 3
9363: PUSH
9364: LD_INT 4
9366: EQUAL
9367: IFFALSE 9377
// sSpec := true ;
9369: LD_ADDR_EXP 35
9373: PUSH
9374: LD_INT 1
9376: ST_TO_ADDR
// if p3 = 5 then
9377: LD_VAR 0 3
9381: PUSH
9382: LD_INT 5
9384: EQUAL
9385: IFFALSE 9395
// sLevel := true ;
9387: LD_ADDR_EXP 39
9391: PUSH
9392: LD_INT 1
9394: ST_TO_ADDR
// if p3 = 6 then
9395: LD_VAR 0 3
9399: PUSH
9400: LD_INT 6
9402: EQUAL
9403: IFFALSE 9413
// sArmoury := true ;
9405: LD_ADDR_EXP 40
9409: PUSH
9410: LD_INT 1
9412: ST_TO_ADDR
// if p3 = 7 then
9413: LD_VAR 0 3
9417: PUSH
9418: LD_INT 7
9420: EQUAL
9421: IFFALSE 9431
// sRadar := true ;
9423: LD_ADDR_EXP 41
9427: PUSH
9428: LD_INT 1
9430: ST_TO_ADDR
// if p3 = 8 then
9431: LD_VAR 0 3
9435: PUSH
9436: LD_INT 8
9438: EQUAL
9439: IFFALSE 9449
// sBunker := true ;
9441: LD_ADDR_EXP 42
9445: PUSH
9446: LD_INT 1
9448: ST_TO_ADDR
// if p3 = 9 then
9449: LD_VAR 0 3
9453: PUSH
9454: LD_INT 9
9456: EQUAL
9457: IFFALSE 9467
// sHack := true ;
9459: LD_ADDR_EXP 43
9463: PUSH
9464: LD_INT 1
9466: ST_TO_ADDR
// if p3 = 10 then
9467: LD_VAR 0 3
9471: PUSH
9472: LD_INT 10
9474: EQUAL
9475: IFFALSE 9485
// sFire := true ;
9477: LD_ADDR_EXP 44
9481: PUSH
9482: LD_INT 1
9484: ST_TO_ADDR
// if p3 = 11 then
9485: LD_VAR 0 3
9489: PUSH
9490: LD_INT 11
9492: EQUAL
9493: IFFALSE 9503
// sRefresh := true ;
9495: LD_ADDR_EXP 45
9499: PUSH
9500: LD_INT 1
9502: ST_TO_ADDR
// if p3 = 12 then
9503: LD_VAR 0 3
9507: PUSH
9508: LD_INT 12
9510: EQUAL
9511: IFFALSE 9521
// sExp := true ;
9513: LD_ADDR_EXP 46
9517: PUSH
9518: LD_INT 1
9520: ST_TO_ADDR
// if p3 = 13 then
9521: LD_VAR 0 3
9525: PUSH
9526: LD_INT 13
9528: EQUAL
9529: IFFALSE 9539
// sDepot := true ;
9531: LD_ADDR_EXP 47
9535: PUSH
9536: LD_INT 1
9538: ST_TO_ADDR
// if p3 = 14 then
9539: LD_VAR 0 3
9543: PUSH
9544: LD_INT 14
9546: EQUAL
9547: IFFALSE 9557
// sFlag := true ;
9549: LD_ADDR_EXP 48
9553: PUSH
9554: LD_INT 1
9556: ST_TO_ADDR
// if p3 = 15 then
9557: LD_VAR 0 3
9561: PUSH
9562: LD_INT 15
9564: EQUAL
9565: IFFALSE 9575
// sKamikadze := true ;
9567: LD_ADDR_EXP 56
9571: PUSH
9572: LD_INT 1
9574: ST_TO_ADDR
// if p3 = 16 then
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 16
9582: EQUAL
9583: IFFALSE 9593
// sTroll := true ;
9585: LD_ADDR_EXP 57
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// if p3 = 17 then
9593: LD_VAR 0 3
9597: PUSH
9598: LD_INT 17
9600: EQUAL
9601: IFFALSE 9611
// sSlow := true ;
9603: LD_ADDR_EXP 58
9607: PUSH
9608: LD_INT 1
9610: ST_TO_ADDR
// if p3 = 18 then
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 18
9618: EQUAL
9619: IFFALSE 9629
// sLack := true ;
9621: LD_ADDR_EXP 59
9625: PUSH
9626: LD_INT 1
9628: ST_TO_ADDR
// if p3 = 19 then
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 19
9636: EQUAL
9637: IFFALSE 9647
// sTank := true ;
9639: LD_ADDR_EXP 61
9643: PUSH
9644: LD_INT 1
9646: ST_TO_ADDR
// if p3 = 20 then
9647: LD_VAR 0 3
9651: PUSH
9652: LD_INT 20
9654: EQUAL
9655: IFFALSE 9665
// sRemote := true ;
9657: LD_ADDR_EXP 62
9661: PUSH
9662: LD_INT 1
9664: ST_TO_ADDR
// if p3 = 21 then
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 21
9672: EQUAL
9673: IFFALSE 9683
// sPowell := true ;
9675: LD_ADDR_EXP 63
9679: PUSH
9680: LD_INT 1
9682: ST_TO_ADDR
// if p3 = 22 then
9683: LD_VAR 0 3
9687: PUSH
9688: LD_INT 22
9690: EQUAL
9691: IFFALSE 9701
// sTeleport := true ;
9693: LD_ADDR_EXP 66
9697: PUSH
9698: LD_INT 1
9700: ST_TO_ADDR
// if p3 = 23 then
9701: LD_VAR 0 3
9705: PUSH
9706: LD_INT 23
9708: EQUAL
9709: IFFALSE 9719
// sOilTower := true ;
9711: LD_ADDR_EXP 68
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 24 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 24
9726: EQUAL
9727: IFFALSE 9737
// sShovel := true ;
9729: LD_ADDR_EXP 69
9733: PUSH
9734: LD_INT 1
9736: ST_TO_ADDR
// if p3 = 25 then
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 25
9744: EQUAL
9745: IFFALSE 9755
// sSheik := true ;
9747: LD_ADDR_EXP 70
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if p3 = 26 then
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 26
9762: EQUAL
9763: IFFALSE 9773
// sEarthquake := true ;
9765: LD_ADDR_EXP 72
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// if p3 = 27 then
9773: LD_VAR 0 3
9777: PUSH
9778: LD_INT 27
9780: EQUAL
9781: IFFALSE 9791
// sAI := true ;
9783: LD_ADDR_EXP 73
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// if p3 = 28 then
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 28
9798: EQUAL
9799: IFFALSE 9809
// sCargo := true ;
9801: LD_ADDR_EXP 76
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// if p3 = 29 then
9809: LD_VAR 0 3
9813: PUSH
9814: LD_INT 29
9816: EQUAL
9817: IFFALSE 9827
// sDLaser := true ;
9819: LD_ADDR_EXP 77
9823: PUSH
9824: LD_INT 1
9826: ST_TO_ADDR
// if p3 = 30 then
9827: LD_VAR 0 3
9831: PUSH
9832: LD_INT 30
9834: EQUAL
9835: IFFALSE 9845
// sExchange := true ;
9837: LD_ADDR_EXP 78
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// if p3 = 31 then
9845: LD_VAR 0 3
9849: PUSH
9850: LD_INT 31
9852: EQUAL
9853: IFFALSE 9863
// sFac := true ;
9855: LD_ADDR_EXP 79
9859: PUSH
9860: LD_INT 1
9862: ST_TO_ADDR
// if p3 = 32 then
9863: LD_VAR 0 3
9867: PUSH
9868: LD_INT 32
9870: EQUAL
9871: IFFALSE 9881
// sPower := true ;
9873: LD_ADDR_EXP 80
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// if p3 = 33 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 33
9888: EQUAL
9889: IFFALSE 9899
// sRandom := true ;
9891: LD_ADDR_EXP 81
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// if p3 = 34 then
9899: LD_VAR 0 3
9903: PUSH
9904: LD_INT 34
9906: EQUAL
9907: IFFALSE 9917
// sShield := true ;
9909: LD_ADDR_EXP 82
9913: PUSH
9914: LD_INT 1
9916: ST_TO_ADDR
// if p3 = 35 then
9917: LD_VAR 0 3
9921: PUSH
9922: LD_INT 35
9924: EQUAL
9925: IFFALSE 9935
// sTime := true ;
9927: LD_ADDR_EXP 83
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// if p3 = 36 then
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 36
9942: EQUAL
9943: IFFALSE 9953
// sTools := true ;
9945: LD_ADDR_EXP 84
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
// if p3 = 101 then
9953: LD_VAR 0 3
9957: PUSH
9958: LD_INT 101
9960: EQUAL
9961: IFFALSE 9971
// sSold := true ;
9963: LD_ADDR_EXP 49
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// if p3 = 102 then
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 102
9978: EQUAL
9979: IFFALSE 9989
// sDiff := true ;
9981: LD_ADDR_EXP 50
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// if p3 = 103 then
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 103
9996: EQUAL
9997: IFFALSE 10007
// sFog := true ;
9999: LD_ADDR_EXP 53
10003: PUSH
10004: LD_INT 1
10006: ST_TO_ADDR
// if p3 = 104 then
10007: LD_VAR 0 3
10011: PUSH
10012: LD_INT 104
10014: EQUAL
10015: IFFALSE 10025
// sReset := true ;
10017: LD_ADDR_EXP 54
10021: PUSH
10022: LD_INT 1
10024: ST_TO_ADDR
// if p3 = 105 then
10025: LD_VAR 0 3
10029: PUSH
10030: LD_INT 105
10032: EQUAL
10033: IFFALSE 10043
// sSun := true ;
10035: LD_ADDR_EXP 55
10039: PUSH
10040: LD_INT 1
10042: ST_TO_ADDR
// if p3 = 106 then
10043: LD_VAR 0 3
10047: PUSH
10048: LD_INT 106
10050: EQUAL
10051: IFFALSE 10061
// sTiger := true ;
10053: LD_ADDR_EXP 51
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// if p3 = 107 then
10061: LD_VAR 0 3
10065: PUSH
10066: LD_INT 107
10068: EQUAL
10069: IFFALSE 10079
// sBomb := true ;
10071: LD_ADDR_EXP 52
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// if p3 = 108 then
10079: LD_VAR 0 3
10083: PUSH
10084: LD_INT 108
10086: EQUAL
10087: IFFALSE 10097
// sWound := true ;
10089: LD_ADDR_EXP 60
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// if p3 = 109 then
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 109
10104: EQUAL
10105: IFFALSE 10115
// sBetray := true ;
10107: LD_ADDR_EXP 64
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// if p3 = 110 then
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 110
10122: EQUAL
10123: IFFALSE 10133
// sContamin := true ;
10125: LD_ADDR_EXP 65
10129: PUSH
10130: LD_INT 1
10132: ST_TO_ADDR
// if p3 = 111 then
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 111
10140: EQUAL
10141: IFFALSE 10151
// sOil := true ;
10143: LD_ADDR_EXP 67
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// if p3 = 112 then
10151: LD_VAR 0 3
10155: PUSH
10156: LD_INT 112
10158: EQUAL
10159: IFFALSE 10169
// sStu := true ;
10161: LD_ADDR_EXP 71
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// if p3 = 113 then
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 113
10176: EQUAL
10177: IFFALSE 10187
// sBazooka := true ;
10179: LD_ADDR_EXP 74
10183: PUSH
10184: LD_INT 1
10186: ST_TO_ADDR
// if p3 = 114 then
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 114
10194: EQUAL
10195: IFFALSE 10205
// sMortar := true ;
10197: LD_ADDR_EXP 75
10201: PUSH
10202: LD_INT 1
10204: ST_TO_ADDR
// if p3 = 115 then
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 115
10212: EQUAL
10213: IFFALSE 10223
// sRanger := true ;
10215: LD_ADDR_EXP 85
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// if p3 = 116 then
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 116
10230: EQUAL
10231: IFFALSE 10241
// sComputer := true ;
10233: LD_ADDR_EXP 86
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// if p3 = 117 then
10241: LD_VAR 0 3
10245: PUSH
10246: LD_INT 117
10248: EQUAL
10249: IFFALSE 10259
// s30 := true ;
10251: LD_ADDR_EXP 87
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// if p3 = 118 then
10259: LD_VAR 0 3
10263: PUSH
10264: LD_INT 118
10266: EQUAL
10267: IFFALSE 10277
// s60 := true ;
10269: LD_ADDR_EXP 88
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// end ; if p2 = hack_mode then
10277: LD_VAR 0 2
10281: PUSH
10282: LD_INT 101
10284: EQUAL
10285: IFFALSE 10413
// begin case p3 of 1 :
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 1
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10307
10300: POP
// hHackUnlimitedResources ; 2 :
10301: CALL 22676 0 0
10305: GO 10413
10307: LD_INT 2
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10322
10315: POP
// hHackSetLevel10 ; 3 :
10316: CALL 22809 0 0
10320: GO 10413
10322: LD_INT 3
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10337
10330: POP
// hHackSetLevel10YourUnits ; 4 :
10331: CALL 22894 0 0
10335: GO 10413
10337: LD_INT 4
10339: DOUBLE
10340: EQUAL
10341: IFTRUE 10345
10343: GO 10352
10345: POP
// hHackInvincible ; 5 :
10346: CALL 23342 0 0
10350: GO 10413
10352: LD_INT 5
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10367
10360: POP
// hHackInvisible ; 6 :
10361: CALL 23453 0 0
10365: GO 10413
10367: LD_INT 6
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10382
10375: POP
// hHackChangeYourSide ; 7 :
10376: CALL 23510 0 0
10380: GO 10413
10382: LD_INT 7
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10397
10390: POP
// hHackChangeUnitSide ; 8 :
10391: CALL 23552 0 0
10395: GO 10413
10397: LD_INT 8
10399: DOUBLE
10400: EQUAL
10401: IFTRUE 10405
10403: GO 10412
10405: POP
// hHackFog ; end ;
10406: CALL 23653 0 0
10410: GO 10413
10412: POP
// end ; if p2 = game_save_mode then
10413: LD_VAR 0 2
10417: PUSH
10418: LD_INT 102
10420: EQUAL
10421: IFFALSE 10478
// begin if p3 = 1 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: EQUAL
10431: IFFALSE 10443
// globalGameSaveCounter := p4 ;
10433: LD_ADDR_EXP 31
10437: PUSH
10438: LD_VAR 0 4
10442: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10443: LD_VAR 0 3
10447: PUSH
10448: LD_INT 2
10450: EQUAL
10451: IFFALSE 10459
10453: PUSH
10454: LD_EXP 31
10458: AND
10459: IFFALSE 10478
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10461: LD_STRING setGameSaveCounter(
10463: PUSH
10464: LD_EXP 31
10468: STR
10469: PUSH
10470: LD_STRING )
10472: STR
10473: PPUSH
10474: CALL_OW 559
// end ; end ;
10478: LD_VAR 0 7
10482: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10483: LD_INT 0
10485: PPUSH
// streamModeActive := false ;
10486: LD_ADDR_EXP 32
10490: PUSH
10491: LD_INT 0
10493: ST_TO_ADDR
// normalCounter := 36 ;
10494: LD_ADDR_EXP 33
10498: PUSH
10499: LD_INT 36
10501: ST_TO_ADDR
// hardcoreCounter := 18 ;
10502: LD_ADDR_EXP 34
10506: PUSH
10507: LD_INT 18
10509: ST_TO_ADDR
// sRocket := false ;
10510: LD_ADDR_EXP 37
10514: PUSH
10515: LD_INT 0
10517: ST_TO_ADDR
// sSpeed := false ;
10518: LD_ADDR_EXP 36
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// sEngine := false ;
10526: LD_ADDR_EXP 38
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// sSpec := false ;
10534: LD_ADDR_EXP 35
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// sLevel := false ;
10542: LD_ADDR_EXP 39
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// sArmoury := false ;
10550: LD_ADDR_EXP 40
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// sRadar := false ;
10558: LD_ADDR_EXP 41
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// sBunker := false ;
10566: LD_ADDR_EXP 42
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// sHack := false ;
10574: LD_ADDR_EXP 43
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// sFire := false ;
10582: LD_ADDR_EXP 44
10586: PUSH
10587: LD_INT 0
10589: ST_TO_ADDR
// sRefresh := false ;
10590: LD_ADDR_EXP 45
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// sExp := false ;
10598: LD_ADDR_EXP 46
10602: PUSH
10603: LD_INT 0
10605: ST_TO_ADDR
// sDepot := false ;
10606: LD_ADDR_EXP 47
10610: PUSH
10611: LD_INT 0
10613: ST_TO_ADDR
// sFlag := false ;
10614: LD_ADDR_EXP 48
10618: PUSH
10619: LD_INT 0
10621: ST_TO_ADDR
// sKamikadze := false ;
10622: LD_ADDR_EXP 56
10626: PUSH
10627: LD_INT 0
10629: ST_TO_ADDR
// sTroll := false ;
10630: LD_ADDR_EXP 57
10634: PUSH
10635: LD_INT 0
10637: ST_TO_ADDR
// sSlow := false ;
10638: LD_ADDR_EXP 58
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// sLack := false ;
10646: LD_ADDR_EXP 59
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// sTank := false ;
10654: LD_ADDR_EXP 61
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// sRemote := false ;
10662: LD_ADDR_EXP 62
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// sPowell := false ;
10670: LD_ADDR_EXP 63
10674: PUSH
10675: LD_INT 0
10677: ST_TO_ADDR
// sTeleport := false ;
10678: LD_ADDR_EXP 66
10682: PUSH
10683: LD_INT 0
10685: ST_TO_ADDR
// sOilTower := false ;
10686: LD_ADDR_EXP 68
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// sShovel := false ;
10694: LD_ADDR_EXP 69
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// sSheik := false ;
10702: LD_ADDR_EXP 70
10706: PUSH
10707: LD_INT 0
10709: ST_TO_ADDR
// sEarthquake := false ;
10710: LD_ADDR_EXP 72
10714: PUSH
10715: LD_INT 0
10717: ST_TO_ADDR
// sAI := false ;
10718: LD_ADDR_EXP 73
10722: PUSH
10723: LD_INT 0
10725: ST_TO_ADDR
// sCargo := false ;
10726: LD_ADDR_EXP 76
10730: PUSH
10731: LD_INT 0
10733: ST_TO_ADDR
// sDLaser := false ;
10734: LD_ADDR_EXP 77
10738: PUSH
10739: LD_INT 0
10741: ST_TO_ADDR
// sExchange := false ;
10742: LD_ADDR_EXP 78
10746: PUSH
10747: LD_INT 0
10749: ST_TO_ADDR
// sFac := false ;
10750: LD_ADDR_EXP 79
10754: PUSH
10755: LD_INT 0
10757: ST_TO_ADDR
// sPower := false ;
10758: LD_ADDR_EXP 80
10762: PUSH
10763: LD_INT 0
10765: ST_TO_ADDR
// sRandom := false ;
10766: LD_ADDR_EXP 81
10770: PUSH
10771: LD_INT 0
10773: ST_TO_ADDR
// sShield := false ;
10774: LD_ADDR_EXP 82
10778: PUSH
10779: LD_INT 0
10781: ST_TO_ADDR
// sTime := false ;
10782: LD_ADDR_EXP 83
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
// sTools := false ;
10790: LD_ADDR_EXP 84
10794: PUSH
10795: LD_INT 0
10797: ST_TO_ADDR
// sSold := false ;
10798: LD_ADDR_EXP 49
10802: PUSH
10803: LD_INT 0
10805: ST_TO_ADDR
// sDiff := false ;
10806: LD_ADDR_EXP 50
10810: PUSH
10811: LD_INT 0
10813: ST_TO_ADDR
// sFog := false ;
10814: LD_ADDR_EXP 53
10818: PUSH
10819: LD_INT 0
10821: ST_TO_ADDR
// sReset := false ;
10822: LD_ADDR_EXP 54
10826: PUSH
10827: LD_INT 0
10829: ST_TO_ADDR
// sSun := false ;
10830: LD_ADDR_EXP 55
10834: PUSH
10835: LD_INT 0
10837: ST_TO_ADDR
// sTiger := false ;
10838: LD_ADDR_EXP 51
10842: PUSH
10843: LD_INT 0
10845: ST_TO_ADDR
// sBomb := false ;
10846: LD_ADDR_EXP 52
10850: PUSH
10851: LD_INT 0
10853: ST_TO_ADDR
// sWound := false ;
10854: LD_ADDR_EXP 60
10858: PUSH
10859: LD_INT 0
10861: ST_TO_ADDR
// sBetray := false ;
10862: LD_ADDR_EXP 64
10866: PUSH
10867: LD_INT 0
10869: ST_TO_ADDR
// sContamin := false ;
10870: LD_ADDR_EXP 65
10874: PUSH
10875: LD_INT 0
10877: ST_TO_ADDR
// sOil := false ;
10878: LD_ADDR_EXP 67
10882: PUSH
10883: LD_INT 0
10885: ST_TO_ADDR
// sStu := false ;
10886: LD_ADDR_EXP 71
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// sBazooka := false ;
10894: LD_ADDR_EXP 74
10898: PUSH
10899: LD_INT 0
10901: ST_TO_ADDR
// sMortar := false ;
10902: LD_ADDR_EXP 75
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// sRanger := false ;
10910: LD_ADDR_EXP 85
10914: PUSH
10915: LD_INT 0
10917: ST_TO_ADDR
// sComputer := false ;
10918: LD_ADDR_EXP 86
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// s30 := false ;
10926: LD_ADDR_EXP 87
10930: PUSH
10931: LD_INT 0
10933: ST_TO_ADDR
// s60 := false ;
10934: LD_ADDR_EXP 88
10938: PUSH
10939: LD_INT 0
10941: ST_TO_ADDR
// end ;
10942: LD_VAR 0 1
10946: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
10952: PPUSH
10953: PPUSH
10954: PPUSH
10955: PPUSH
// result := [ ] ;
10956: LD_ADDR_VAR 0 2
10960: PUSH
10961: EMPTY
10962: ST_TO_ADDR
// if campaign_id = 1 then
10963: LD_OWVAR 69
10967: PUSH
10968: LD_INT 1
10970: EQUAL
10971: IFFALSE 14137
// begin case mission_number of 1 :
10973: LD_OWVAR 70
10977: PUSH
10978: LD_INT 1
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 11062
10986: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: LD_INT 2
10994: PUSH
10995: LD_INT 4
10997: PUSH
10998: LD_INT 11
11000: PUSH
11001: LD_INT 12
11003: PUSH
11004: LD_INT 15
11006: PUSH
11007: LD_INT 16
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 26
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 101
11032: PUSH
11033: LD_INT 102
11035: PUSH
11036: LD_INT 106
11038: PUSH
11039: LD_INT 116
11041: PUSH
11042: LD_INT 117
11044: PUSH
11045: LD_INT 118
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: ST_TO_ADDR
11060: GO 14135
11062: LD_INT 2
11064: DOUBLE
11065: EQUAL
11066: IFTRUE 11070
11068: GO 11154
11070: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: LD_INT 2
11078: PUSH
11079: LD_INT 4
11081: PUSH
11082: LD_INT 11
11084: PUSH
11085: LD_INT 12
11087: PUSH
11088: LD_INT 15
11090: PUSH
11091: LD_INT 16
11093: PUSH
11094: LD_INT 22
11096: PUSH
11097: LD_INT 23
11099: PUSH
11100: LD_INT 26
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 101
11116: PUSH
11117: LD_INT 102
11119: PUSH
11120: LD_INT 105
11122: PUSH
11123: LD_INT 106
11125: PUSH
11126: LD_INT 108
11128: PUSH
11129: LD_INT 116
11131: PUSH
11132: LD_INT 117
11134: PUSH
11135: LD_INT 118
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: ST_TO_ADDR
11152: GO 14135
11154: LD_INT 3
11156: DOUBLE
11157: EQUAL
11158: IFTRUE 11162
11160: GO 11250
11162: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11163: LD_ADDR_VAR 0 2
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: LD_INT 4
11173: PUSH
11174: LD_INT 5
11176: PUSH
11177: LD_INT 11
11179: PUSH
11180: LD_INT 12
11182: PUSH
11183: LD_INT 15
11185: PUSH
11186: LD_INT 16
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 26
11194: PUSH
11195: LD_INT 36
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 101
11212: PUSH
11213: LD_INT 102
11215: PUSH
11216: LD_INT 105
11218: PUSH
11219: LD_INT 106
11221: PUSH
11222: LD_INT 108
11224: PUSH
11225: LD_INT 116
11227: PUSH
11228: LD_INT 117
11230: PUSH
11231: LD_INT 118
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: ST_TO_ADDR
11248: GO 14135
11250: LD_INT 4
11252: DOUBLE
11253: EQUAL
11254: IFTRUE 11258
11256: GO 11354
11258: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: LD_INT 4
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 8
11275: PUSH
11276: LD_INT 11
11278: PUSH
11279: LD_INT 12
11281: PUSH
11282: LD_INT 15
11284: PUSH
11285: LD_INT 16
11287: PUSH
11288: LD_INT 22
11290: PUSH
11291: LD_INT 23
11293: PUSH
11294: LD_INT 26
11296: PUSH
11297: LD_INT 36
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 101
11316: PUSH
11317: LD_INT 102
11319: PUSH
11320: LD_INT 105
11322: PUSH
11323: LD_INT 106
11325: PUSH
11326: LD_INT 108
11328: PUSH
11329: LD_INT 116
11331: PUSH
11332: LD_INT 117
11334: PUSH
11335: LD_INT 118
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: ST_TO_ADDR
11352: GO 14135
11354: LD_INT 5
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11474
11362: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11363: LD_ADDR_VAR 0 2
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 5
11376: PUSH
11377: LD_INT 6
11379: PUSH
11380: LD_INT 8
11382: PUSH
11383: LD_INT 11
11385: PUSH
11386: LD_INT 12
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 22
11397: PUSH
11398: LD_INT 23
11400: PUSH
11401: LD_INT 25
11403: PUSH
11404: LD_INT 26
11406: PUSH
11407: LD_INT 36
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 101
11428: PUSH
11429: LD_INT 102
11431: PUSH
11432: LD_INT 105
11434: PUSH
11435: LD_INT 106
11437: PUSH
11438: LD_INT 108
11440: PUSH
11441: LD_INT 109
11443: PUSH
11444: LD_INT 112
11446: PUSH
11447: LD_INT 116
11449: PUSH
11450: LD_INT 117
11452: PUSH
11453: LD_INT 118
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: ST_TO_ADDR
11472: GO 14135
11474: LD_INT 6
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11614
11482: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_INT 2
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: LD_INT 5
11496: PUSH
11497: LD_INT 6
11499: PUSH
11500: LD_INT 8
11502: PUSH
11503: LD_INT 11
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: LD_INT 15
11511: PUSH
11512: LD_INT 16
11514: PUSH
11515: LD_INT 20
11517: PUSH
11518: LD_INT 21
11520: PUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 23
11526: PUSH
11527: LD_INT 25
11529: PUSH
11530: LD_INT 26
11532: PUSH
11533: LD_INT 30
11535: PUSH
11536: LD_INT 31
11538: PUSH
11539: LD_INT 32
11541: PUSH
11542: LD_INT 36
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 101
11568: PUSH
11569: LD_INT 102
11571: PUSH
11572: LD_INT 105
11574: PUSH
11575: LD_INT 106
11577: PUSH
11578: LD_INT 108
11580: PUSH
11581: LD_INT 109
11583: PUSH
11584: LD_INT 112
11586: PUSH
11587: LD_INT 116
11589: PUSH
11590: LD_INT 117
11592: PUSH
11593: LD_INT 118
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: ST_TO_ADDR
11612: GO 14135
11614: LD_INT 7
11616: DOUBLE
11617: EQUAL
11618: IFTRUE 11622
11620: GO 11734
11622: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11623: LD_ADDR_VAR 0 2
11627: PUSH
11628: LD_INT 2
11630: PUSH
11631: LD_INT 4
11633: PUSH
11634: LD_INT 5
11636: PUSH
11637: LD_INT 7
11639: PUSH
11640: LD_INT 11
11642: PUSH
11643: LD_INT 12
11645: PUSH
11646: LD_INT 15
11648: PUSH
11649: LD_INT 16
11651: PUSH
11652: LD_INT 20
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 22
11660: PUSH
11661: LD_INT 23
11663: PUSH
11664: LD_INT 25
11666: PUSH
11667: LD_INT 26
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 101
11688: PUSH
11689: LD_INT 102
11691: PUSH
11692: LD_INT 103
11694: PUSH
11695: LD_INT 105
11697: PUSH
11698: LD_INT 106
11700: PUSH
11701: LD_INT 108
11703: PUSH
11704: LD_INT 112
11706: PUSH
11707: LD_INT 116
11709: PUSH
11710: LD_INT 117
11712: PUSH
11713: LD_INT 118
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: ST_TO_ADDR
11732: GO 14135
11734: LD_INT 8
11736: DOUBLE
11737: EQUAL
11738: IFTRUE 11742
11740: GO 11882
11742: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11743: LD_ADDR_VAR 0 2
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 4
11753: PUSH
11754: LD_INT 5
11756: PUSH
11757: LD_INT 6
11759: PUSH
11760: LD_INT 7
11762: PUSH
11763: LD_INT 8
11765: PUSH
11766: LD_INT 11
11768: PUSH
11769: LD_INT 12
11771: PUSH
11772: LD_INT 15
11774: PUSH
11775: LD_INT 16
11777: PUSH
11778: LD_INT 20
11780: PUSH
11781: LD_INT 21
11783: PUSH
11784: LD_INT 22
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 25
11792: PUSH
11793: LD_INT 26
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: LD_INT 36
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 101
11832: PUSH
11833: LD_INT 102
11835: PUSH
11836: LD_INT 103
11838: PUSH
11839: LD_INT 105
11841: PUSH
11842: LD_INT 106
11844: PUSH
11845: LD_INT 108
11847: PUSH
11848: LD_INT 109
11850: PUSH
11851: LD_INT 112
11853: PUSH
11854: LD_INT 116
11856: PUSH
11857: LD_INT 117
11859: PUSH
11860: LD_INT 118
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: ST_TO_ADDR
11880: GO 14135
11882: LD_INT 9
11884: DOUBLE
11885: EQUAL
11886: IFTRUE 11890
11888: GO 12038
11890: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: LD_INT 4
11901: PUSH
11902: LD_INT 5
11904: PUSH
11905: LD_INT 6
11907: PUSH
11908: LD_INT 7
11910: PUSH
11911: LD_INT 8
11913: PUSH
11914: LD_INT 11
11916: PUSH
11917: LD_INT 12
11919: PUSH
11920: LD_INT 15
11922: PUSH
11923: LD_INT 16
11925: PUSH
11926: LD_INT 20
11928: PUSH
11929: LD_INT 21
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 25
11940: PUSH
11941: LD_INT 26
11943: PUSH
11944: LD_INT 28
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 31
11952: PUSH
11953: LD_INT 32
11955: PUSH
11956: LD_INT 36
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 101
11984: PUSH
11985: LD_INT 102
11987: PUSH
11988: LD_INT 103
11990: PUSH
11991: LD_INT 105
11993: PUSH
11994: LD_INT 106
11996: PUSH
11997: LD_INT 108
11999: PUSH
12000: LD_INT 109
12002: PUSH
12003: LD_INT 112
12005: PUSH
12006: LD_INT 114
12008: PUSH
12009: LD_INT 116
12011: PUSH
12012: LD_INT 117
12014: PUSH
12015: LD_INT 118
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: ST_TO_ADDR
12036: GO 14135
12038: LD_INT 10
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12242
12046: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12047: LD_ADDR_VAR 0 2
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: LD_INT 4
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: LD_INT 6
12063: PUSH
12064: LD_INT 7
12066: PUSH
12067: LD_INT 8
12069: PUSH
12070: LD_INT 9
12072: PUSH
12073: LD_INT 10
12075: PUSH
12076: LD_INT 11
12078: PUSH
12079: LD_INT 12
12081: PUSH
12082: LD_INT 13
12084: PUSH
12085: LD_INT 14
12087: PUSH
12088: LD_INT 15
12090: PUSH
12091: LD_INT 16
12093: PUSH
12094: LD_INT 17
12096: PUSH
12097: LD_INT 18
12099: PUSH
12100: LD_INT 19
12102: PUSH
12103: LD_INT 20
12105: PUSH
12106: LD_INT 21
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: LD_INT 23
12114: PUSH
12115: LD_INT 24
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 26
12123: PUSH
12124: LD_INT 28
12126: PUSH
12127: LD_INT 30
12129: PUSH
12130: LD_INT 31
12132: PUSH
12133: LD_INT 32
12135: PUSH
12136: LD_INT 36
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 101
12172: PUSH
12173: LD_INT 102
12175: PUSH
12176: LD_INT 103
12178: PUSH
12179: LD_INT 104
12181: PUSH
12182: LD_INT 105
12184: PUSH
12185: LD_INT 106
12187: PUSH
12188: LD_INT 107
12190: PUSH
12191: LD_INT 108
12193: PUSH
12194: LD_INT 109
12196: PUSH
12197: LD_INT 110
12199: PUSH
12200: LD_INT 111
12202: PUSH
12203: LD_INT 112
12205: PUSH
12206: LD_INT 114
12208: PUSH
12209: LD_INT 116
12211: PUSH
12212: LD_INT 117
12214: PUSH
12215: LD_INT 118
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: ST_TO_ADDR
12240: GO 14135
12242: LD_INT 11
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12454
12250: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: LD_INT 3
12261: PUSH
12262: LD_INT 4
12264: PUSH
12265: LD_INT 5
12267: PUSH
12268: LD_INT 6
12270: PUSH
12271: LD_INT 7
12273: PUSH
12274: LD_INT 8
12276: PUSH
12277: LD_INT 9
12279: PUSH
12280: LD_INT 10
12282: PUSH
12283: LD_INT 11
12285: PUSH
12286: LD_INT 12
12288: PUSH
12289: LD_INT 13
12291: PUSH
12292: LD_INT 14
12294: PUSH
12295: LD_INT 15
12297: PUSH
12298: LD_INT 16
12300: PUSH
12301: LD_INT 17
12303: PUSH
12304: LD_INT 18
12306: PUSH
12307: LD_INT 19
12309: PUSH
12310: LD_INT 20
12312: PUSH
12313: LD_INT 21
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_INT 23
12321: PUSH
12322: LD_INT 24
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 26
12330: PUSH
12331: LD_INT 28
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 31
12339: PUSH
12340: LD_INT 32
12342: PUSH
12343: LD_INT 34
12345: PUSH
12346: LD_INT 36
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 101
12384: PUSH
12385: LD_INT 102
12387: PUSH
12388: LD_INT 103
12390: PUSH
12391: LD_INT 104
12393: PUSH
12394: LD_INT 105
12396: PUSH
12397: LD_INT 106
12399: PUSH
12400: LD_INT 107
12402: PUSH
12403: LD_INT 108
12405: PUSH
12406: LD_INT 109
12408: PUSH
12409: LD_INT 110
12411: PUSH
12412: LD_INT 111
12414: PUSH
12415: LD_INT 112
12417: PUSH
12418: LD_INT 114
12420: PUSH
12421: LD_INT 116
12423: PUSH
12424: LD_INT 117
12426: PUSH
12427: LD_INT 118
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: ST_TO_ADDR
12452: GO 14135
12454: LD_INT 12
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12682
12462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: LD_INT 3
12476: PUSH
12477: LD_INT 4
12479: PUSH
12480: LD_INT 5
12482: PUSH
12483: LD_INT 6
12485: PUSH
12486: LD_INT 7
12488: PUSH
12489: LD_INT 8
12491: PUSH
12492: LD_INT 9
12494: PUSH
12495: LD_INT 10
12497: PUSH
12498: LD_INT 11
12500: PUSH
12501: LD_INT 12
12503: PUSH
12504: LD_INT 13
12506: PUSH
12507: LD_INT 14
12509: PUSH
12510: LD_INT 15
12512: PUSH
12513: LD_INT 16
12515: PUSH
12516: LD_INT 17
12518: PUSH
12519: LD_INT 18
12521: PUSH
12522: LD_INT 19
12524: PUSH
12525: LD_INT 20
12527: PUSH
12528: LD_INT 21
12530: PUSH
12531: LD_INT 22
12533: PUSH
12534: LD_INT 23
12536: PUSH
12537: LD_INT 24
12539: PUSH
12540: LD_INT 25
12542: PUSH
12543: LD_INT 26
12545: PUSH
12546: LD_INT 27
12548: PUSH
12549: LD_INT 28
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 31
12557: PUSH
12558: LD_INT 32
12560: PUSH
12561: LD_INT 33
12563: PUSH
12564: LD_INT 34
12566: PUSH
12567: LD_INT 36
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 101
12608: PUSH
12609: LD_INT 102
12611: PUSH
12612: LD_INT 103
12614: PUSH
12615: LD_INT 104
12617: PUSH
12618: LD_INT 105
12620: PUSH
12621: LD_INT 106
12623: PUSH
12624: LD_INT 107
12626: PUSH
12627: LD_INT 108
12629: PUSH
12630: LD_INT 109
12632: PUSH
12633: LD_INT 110
12635: PUSH
12636: LD_INT 111
12638: PUSH
12639: LD_INT 112
12641: PUSH
12642: LD_INT 113
12644: PUSH
12645: LD_INT 114
12647: PUSH
12648: LD_INT 116
12650: PUSH
12651: LD_INT 117
12653: PUSH
12654: LD_INT 118
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: ST_TO_ADDR
12680: GO 14135
12682: LD_INT 13
12684: DOUBLE
12685: EQUAL
12686: IFTRUE 12690
12688: GO 12898
12690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12691: LD_ADDR_VAR 0 2
12695: PUSH
12696: LD_INT 1
12698: PUSH
12699: LD_INT 2
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: LD_INT 4
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: LD_INT 9
12716: PUSH
12717: LD_INT 10
12719: PUSH
12720: LD_INT 11
12722: PUSH
12723: LD_INT 12
12725: PUSH
12726: LD_INT 14
12728: PUSH
12729: LD_INT 15
12731: PUSH
12732: LD_INT 16
12734: PUSH
12735: LD_INT 17
12737: PUSH
12738: LD_INT 18
12740: PUSH
12741: LD_INT 19
12743: PUSH
12744: LD_INT 20
12746: PUSH
12747: LD_INT 21
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_INT 23
12755: PUSH
12756: LD_INT 24
12758: PUSH
12759: LD_INT 25
12761: PUSH
12762: LD_INT 26
12764: PUSH
12765: LD_INT 27
12767: PUSH
12768: LD_INT 28
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: LD_INT 31
12776: PUSH
12777: LD_INT 32
12779: PUSH
12780: LD_INT 33
12782: PUSH
12783: LD_INT 34
12785: PUSH
12786: LD_INT 36
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 101
12824: PUSH
12825: LD_INT 102
12827: PUSH
12828: LD_INT 103
12830: PUSH
12831: LD_INT 104
12833: PUSH
12834: LD_INT 105
12836: PUSH
12837: LD_INT 106
12839: PUSH
12840: LD_INT 107
12842: PUSH
12843: LD_INT 108
12845: PUSH
12846: LD_INT 109
12848: PUSH
12849: LD_INT 110
12851: PUSH
12852: LD_INT 111
12854: PUSH
12855: LD_INT 112
12857: PUSH
12858: LD_INT 113
12860: PUSH
12861: LD_INT 114
12863: PUSH
12864: LD_INT 116
12866: PUSH
12867: LD_INT 117
12869: PUSH
12870: LD_INT 118
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: ST_TO_ADDR
12896: GO 14135
12898: LD_INT 14
12900: DOUBLE
12901: EQUAL
12902: IFTRUE 12906
12904: GO 13130
12906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: LD_INT 2
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: LD_INT 4
12923: PUSH
12924: LD_INT 5
12926: PUSH
12927: LD_INT 6
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: LD_INT 8
12935: PUSH
12936: LD_INT 9
12938: PUSH
12939: LD_INT 10
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: LD_INT 12
12947: PUSH
12948: LD_INT 13
12950: PUSH
12951: LD_INT 14
12953: PUSH
12954: LD_INT 15
12956: PUSH
12957: LD_INT 16
12959: PUSH
12960: LD_INT 17
12962: PUSH
12963: LD_INT 18
12965: PUSH
12966: LD_INT 19
12968: PUSH
12969: LD_INT 20
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_INT 23
12980: PUSH
12981: LD_INT 24
12983: PUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 26
12989: PUSH
12990: LD_INT 27
12992: PUSH
12993: LD_INT 28
12995: PUSH
12996: LD_INT 29
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 31
13004: PUSH
13005: LD_INT 32
13007: PUSH
13008: LD_INT 33
13010: PUSH
13011: LD_INT 34
13013: PUSH
13014: LD_INT 36
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 101
13056: PUSH
13057: LD_INT 102
13059: PUSH
13060: LD_INT 103
13062: PUSH
13063: LD_INT 104
13065: PUSH
13066: LD_INT 105
13068: PUSH
13069: LD_INT 106
13071: PUSH
13072: LD_INT 107
13074: PUSH
13075: LD_INT 108
13077: PUSH
13078: LD_INT 109
13080: PUSH
13081: LD_INT 110
13083: PUSH
13084: LD_INT 111
13086: PUSH
13087: LD_INT 112
13089: PUSH
13090: LD_INT 113
13092: PUSH
13093: LD_INT 114
13095: PUSH
13096: LD_INT 116
13098: PUSH
13099: LD_INT 117
13101: PUSH
13102: LD_INT 118
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: ST_TO_ADDR
13128: GO 14135
13130: LD_INT 15
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13362
13138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: LD_INT 4
13155: PUSH
13156: LD_INT 5
13158: PUSH
13159: LD_INT 6
13161: PUSH
13162: LD_INT 7
13164: PUSH
13165: LD_INT 8
13167: PUSH
13168: LD_INT 9
13170: PUSH
13171: LD_INT 10
13173: PUSH
13174: LD_INT 11
13176: PUSH
13177: LD_INT 12
13179: PUSH
13180: LD_INT 13
13182: PUSH
13183: LD_INT 14
13185: PUSH
13186: LD_INT 15
13188: PUSH
13189: LD_INT 16
13191: PUSH
13192: LD_INT 17
13194: PUSH
13195: LD_INT 18
13197: PUSH
13198: LD_INT 19
13200: PUSH
13201: LD_INT 20
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_INT 23
13212: PUSH
13213: LD_INT 24
13215: PUSH
13216: LD_INT 25
13218: PUSH
13219: LD_INT 26
13221: PUSH
13222: LD_INT 27
13224: PUSH
13225: LD_INT 28
13227: PUSH
13228: LD_INT 29
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 31
13236: PUSH
13237: LD_INT 32
13239: PUSH
13240: LD_INT 33
13242: PUSH
13243: LD_INT 34
13245: PUSH
13246: LD_INT 36
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 101
13288: PUSH
13289: LD_INT 102
13291: PUSH
13292: LD_INT 103
13294: PUSH
13295: LD_INT 104
13297: PUSH
13298: LD_INT 105
13300: PUSH
13301: LD_INT 106
13303: PUSH
13304: LD_INT 107
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 109
13312: PUSH
13313: LD_INT 110
13315: PUSH
13316: LD_INT 111
13318: PUSH
13319: LD_INT 112
13321: PUSH
13322: LD_INT 113
13324: PUSH
13325: LD_INT 114
13327: PUSH
13328: LD_INT 116
13330: PUSH
13331: LD_INT 117
13333: PUSH
13334: LD_INT 118
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: ST_TO_ADDR
13360: GO 14135
13362: LD_INT 16
13364: DOUBLE
13365: EQUAL
13366: IFTRUE 13370
13368: GO 13506
13370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: LD_INT 7
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: LD_INT 15
13396: PUSH
13397: LD_INT 16
13399: PUSH
13400: LD_INT 20
13402: PUSH
13403: LD_INT 21
13405: PUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 23
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 26
13417: PUSH
13418: LD_INT 30
13420: PUSH
13421: LD_INT 31
13423: PUSH
13424: LD_INT 32
13426: PUSH
13427: LD_INT 33
13429: PUSH
13430: LD_INT 34
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 101
13456: PUSH
13457: LD_INT 102
13459: PUSH
13460: LD_INT 103
13462: PUSH
13463: LD_INT 106
13465: PUSH
13466: LD_INT 108
13468: PUSH
13469: LD_INT 112
13471: PUSH
13472: LD_INT 113
13474: PUSH
13475: LD_INT 114
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 14135
13506: LD_INT 17
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13738
13514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13515: LD_ADDR_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: LD_INT 2
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: LD_INT 5
13534: PUSH
13535: LD_INT 6
13537: PUSH
13538: LD_INT 7
13540: PUSH
13541: LD_INT 8
13543: PUSH
13544: LD_INT 9
13546: PUSH
13547: LD_INT 10
13549: PUSH
13550: LD_INT 11
13552: PUSH
13553: LD_INT 12
13555: PUSH
13556: LD_INT 13
13558: PUSH
13559: LD_INT 14
13561: PUSH
13562: LD_INT 15
13564: PUSH
13565: LD_INT 16
13567: PUSH
13568: LD_INT 17
13570: PUSH
13571: LD_INT 18
13573: PUSH
13574: LD_INT 19
13576: PUSH
13577: LD_INT 20
13579: PUSH
13580: LD_INT 21
13582: PUSH
13583: LD_INT 22
13585: PUSH
13586: LD_INT 23
13588: PUSH
13589: LD_INT 24
13591: PUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 26
13597: PUSH
13598: LD_INT 27
13600: PUSH
13601: LD_INT 28
13603: PUSH
13604: LD_INT 29
13606: PUSH
13607: LD_INT 30
13609: PUSH
13610: LD_INT 31
13612: PUSH
13613: LD_INT 32
13615: PUSH
13616: LD_INT 33
13618: PUSH
13619: LD_INT 34
13621: PUSH
13622: LD_INT 36
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 103
13670: PUSH
13671: LD_INT 104
13673: PUSH
13674: LD_INT 105
13676: PUSH
13677: LD_INT 106
13679: PUSH
13680: LD_INT 107
13682: PUSH
13683: LD_INT 108
13685: PUSH
13686: LD_INT 109
13688: PUSH
13689: LD_INT 110
13691: PUSH
13692: LD_INT 111
13694: PUSH
13695: LD_INT 112
13697: PUSH
13698: LD_INT 113
13700: PUSH
13701: LD_INT 114
13703: PUSH
13704: LD_INT 116
13706: PUSH
13707: LD_INT 117
13709: PUSH
13710: LD_INT 118
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: ST_TO_ADDR
13736: GO 14135
13738: LD_INT 18
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13894
13746: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 4
13757: PUSH
13758: LD_INT 5
13760: PUSH
13761: LD_INT 7
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_INT 12
13769: PUSH
13770: LD_INT 15
13772: PUSH
13773: LD_INT 16
13775: PUSH
13776: LD_INT 20
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 23
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 26
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 31
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: LD_INT 35
13811: PUSH
13812: LD_INT 36
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 101
13840: PUSH
13841: LD_INT 102
13843: PUSH
13844: LD_INT 103
13846: PUSH
13847: LD_INT 106
13849: PUSH
13850: LD_INT 108
13852: PUSH
13853: LD_INT 112
13855: PUSH
13856: LD_INT 113
13858: PUSH
13859: LD_INT 114
13861: PUSH
13862: LD_INT 115
13864: PUSH
13865: LD_INT 116
13867: PUSH
13868: LD_INT 117
13870: PUSH
13871: LD_INT 118
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 14135
13894: LD_INT 19
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 14134
13902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13903: LD_ADDR_VAR 0 2
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: LD_INT 4
13919: PUSH
13920: LD_INT 5
13922: PUSH
13923: LD_INT 6
13925: PUSH
13926: LD_INT 7
13928: PUSH
13929: LD_INT 8
13931: PUSH
13932: LD_INT 9
13934: PUSH
13935: LD_INT 10
13937: PUSH
13938: LD_INT 11
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 13
13946: PUSH
13947: LD_INT 14
13949: PUSH
13950: LD_INT 15
13952: PUSH
13953: LD_INT 16
13955: PUSH
13956: LD_INT 17
13958: PUSH
13959: LD_INT 18
13961: PUSH
13962: LD_INT 19
13964: PUSH
13965: LD_INT 20
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 23
13976: PUSH
13977: LD_INT 24
13979: PUSH
13980: LD_INT 25
13982: PUSH
13983: LD_INT 26
13985: PUSH
13986: LD_INT 27
13988: PUSH
13989: LD_INT 28
13991: PUSH
13992: LD_INT 29
13994: PUSH
13995: LD_INT 30
13997: PUSH
13998: LD_INT 31
14000: PUSH
14001: LD_INT 32
14003: PUSH
14004: LD_INT 33
14006: PUSH
14007: LD_INT 34
14009: PUSH
14010: LD_INT 35
14012: PUSH
14013: LD_INT 36
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 101
14056: PUSH
14057: LD_INT 102
14059: PUSH
14060: LD_INT 103
14062: PUSH
14063: LD_INT 104
14065: PUSH
14066: LD_INT 105
14068: PUSH
14069: LD_INT 106
14071: PUSH
14072: LD_INT 107
14074: PUSH
14075: LD_INT 108
14077: PUSH
14078: LD_INT 109
14080: PUSH
14081: LD_INT 110
14083: PUSH
14084: LD_INT 111
14086: PUSH
14087: LD_INT 112
14089: PUSH
14090: LD_INT 113
14092: PUSH
14093: LD_INT 114
14095: PUSH
14096: LD_INT 115
14098: PUSH
14099: LD_INT 116
14101: PUSH
14102: LD_INT 117
14104: PUSH
14105: LD_INT 118
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 14135
14134: POP
// end else
14135: GO 14366
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: LD_INT 6
14159: PUSH
14160: LD_INT 7
14162: PUSH
14163: LD_INT 8
14165: PUSH
14166: LD_INT 9
14168: PUSH
14169: LD_INT 10
14171: PUSH
14172: LD_INT 11
14174: PUSH
14175: LD_INT 12
14177: PUSH
14178: LD_INT 13
14180: PUSH
14181: LD_INT 14
14183: PUSH
14184: LD_INT 15
14186: PUSH
14187: LD_INT 16
14189: PUSH
14190: LD_INT 17
14192: PUSH
14193: LD_INT 18
14195: PUSH
14196: LD_INT 19
14198: PUSH
14199: LD_INT 20
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 23
14210: PUSH
14211: LD_INT 24
14213: PUSH
14214: LD_INT 25
14216: PUSH
14217: LD_INT 26
14219: PUSH
14220: LD_INT 27
14222: PUSH
14223: LD_INT 28
14225: PUSH
14226: LD_INT 29
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 31
14234: PUSH
14235: LD_INT 32
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: LD_INT 34
14243: PUSH
14244: LD_INT 35
14246: PUSH
14247: LD_INT 36
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 101
14290: PUSH
14291: LD_INT 102
14293: PUSH
14294: LD_INT 103
14296: PUSH
14297: LD_INT 104
14299: PUSH
14300: LD_INT 105
14302: PUSH
14303: LD_INT 106
14305: PUSH
14306: LD_INT 107
14308: PUSH
14309: LD_INT 108
14311: PUSH
14312: LD_INT 109
14314: PUSH
14315: LD_INT 110
14317: PUSH
14318: LD_INT 111
14320: PUSH
14321: LD_INT 112
14323: PUSH
14324: LD_INT 113
14326: PUSH
14327: LD_INT 114
14329: PUSH
14330: LD_INT 115
14332: PUSH
14333: LD_INT 116
14335: PUSH
14336: LD_INT 117
14338: PUSH
14339: LD_INT 118
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: ST_TO_ADDR
// if result then
14366: LD_VAR 0 2
14370: IFFALSE 15156
// begin normal :=  ;
14372: LD_ADDR_VAR 0 5
14376: PUSH
14377: LD_STRING 
14379: ST_TO_ADDR
// hardcore :=  ;
14380: LD_ADDR_VAR 0 6
14384: PUSH
14385: LD_STRING 
14387: ST_TO_ADDR
// active :=  ;
14388: LD_ADDR_VAR 0 7
14392: PUSH
14393: LD_STRING 
14395: ST_TO_ADDR
// for i = 1 to normalCounter do
14396: LD_ADDR_VAR 0 8
14400: PUSH
14401: DOUBLE
14402: LD_INT 1
14404: DEC
14405: ST_TO_ADDR
14406: LD_EXP 33
14410: PUSH
14411: FOR_TO
14412: IFFALSE 14513
// begin tmp := 0 ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_STRING 0
14421: ST_TO_ADDR
// if result [ 1 ] then
14422: LD_VAR 0 2
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: IFFALSE 14495
// if result [ 1 ] [ 1 ] = i then
14432: LD_VAR 0 2
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: PUSH
14441: LD_INT 1
14443: ARRAY
14444: PUSH
14445: LD_VAR 0 8
14449: EQUAL
14450: IFFALSE 14495
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14452: LD_ADDR_VAR 0 2
14456: PUSH
14457: LD_VAR 0 2
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_VAR 0 2
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 3
14481: PPUSH
14482: CALL_OW 1
14486: ST_TO_ADDR
// tmp := 1 ;
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_STRING 1
14494: ST_TO_ADDR
// end ; normal := normal & tmp ;
14495: LD_ADDR_VAR 0 5
14499: PUSH
14500: LD_VAR 0 5
14504: PUSH
14505: LD_VAR 0 3
14509: STR
14510: ST_TO_ADDR
// end ;
14511: GO 14411
14513: POP
14514: POP
// for i = 1 to hardcoreCounter do
14515: LD_ADDR_VAR 0 8
14519: PUSH
14520: DOUBLE
14521: LD_INT 1
14523: DEC
14524: ST_TO_ADDR
14525: LD_EXP 34
14529: PUSH
14530: FOR_TO
14531: IFFALSE 14636
// begin tmp := 0 ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_STRING 0
14540: ST_TO_ADDR
// if result [ 2 ] then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_INT 2
14548: ARRAY
14549: IFFALSE 14618
// if result [ 2 ] [ 1 ] = 100 + i then
14551: LD_VAR 0 2
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: PUSH
14560: LD_INT 1
14562: ARRAY
14563: PUSH
14564: LD_INT 100
14566: PUSH
14567: LD_VAR 0 8
14571: PLUS
14572: EQUAL
14573: IFFALSE 14618
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_INT 2
14587: PPUSH
14588: LD_VAR 0 2
14592: PUSH
14593: LD_INT 2
14595: ARRAY
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: CALL_OW 3
14604: PPUSH
14605: CALL_OW 1
14609: ST_TO_ADDR
// tmp := 1 ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_STRING 1
14617: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14618: LD_ADDR_VAR 0 6
14622: PUSH
14623: LD_VAR 0 6
14627: PUSH
14628: LD_VAR 0 3
14632: STR
14633: ST_TO_ADDR
// end ;
14634: GO 14530
14636: POP
14637: POP
// if isGameLoad then
14638: LD_VAR 0 1
14642: IFFALSE 15117
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14644: LD_ADDR_VAR 0 4
14648: PUSH
14649: LD_EXP 37
14653: PUSH
14654: LD_EXP 36
14658: PUSH
14659: LD_EXP 38
14663: PUSH
14664: LD_EXP 35
14668: PUSH
14669: LD_EXP 39
14673: PUSH
14674: LD_EXP 40
14678: PUSH
14679: LD_EXP 41
14683: PUSH
14684: LD_EXP 42
14688: PUSH
14689: LD_EXP 43
14693: PUSH
14694: LD_EXP 44
14698: PUSH
14699: LD_EXP 45
14703: PUSH
14704: LD_EXP 46
14708: PUSH
14709: LD_EXP 47
14713: PUSH
14714: LD_EXP 48
14718: PUSH
14719: LD_EXP 56
14723: PUSH
14724: LD_EXP 57
14728: PUSH
14729: LD_EXP 58
14733: PUSH
14734: LD_EXP 59
14738: PUSH
14739: LD_EXP 61
14743: PUSH
14744: LD_EXP 62
14748: PUSH
14749: LD_EXP 63
14753: PUSH
14754: LD_EXP 66
14758: PUSH
14759: LD_EXP 68
14763: PUSH
14764: LD_EXP 69
14768: PUSH
14769: LD_EXP 70
14773: PUSH
14774: LD_EXP 72
14778: PUSH
14779: LD_EXP 73
14783: PUSH
14784: LD_EXP 76
14788: PUSH
14789: LD_EXP 77
14793: PUSH
14794: LD_EXP 78
14798: PUSH
14799: LD_EXP 79
14803: PUSH
14804: LD_EXP 80
14808: PUSH
14809: LD_EXP 81
14813: PUSH
14814: LD_EXP 82
14818: PUSH
14819: LD_EXP 83
14823: PUSH
14824: LD_EXP 84
14828: PUSH
14829: LD_EXP 49
14833: PUSH
14834: LD_EXP 50
14838: PUSH
14839: LD_EXP 53
14843: PUSH
14844: LD_EXP 54
14848: PUSH
14849: LD_EXP 55
14853: PUSH
14854: LD_EXP 51
14858: PUSH
14859: LD_EXP 52
14863: PUSH
14864: LD_EXP 60
14868: PUSH
14869: LD_EXP 64
14873: PUSH
14874: LD_EXP 65
14878: PUSH
14879: LD_EXP 67
14883: PUSH
14884: LD_EXP 71
14888: PUSH
14889: LD_EXP 74
14893: PUSH
14894: LD_EXP 75
14898: PUSH
14899: LD_EXP 85
14903: PUSH
14904: LD_EXP 86
14908: PUSH
14909: LD_EXP 87
14913: PUSH
14914: LD_EXP 88
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: ST_TO_ADDR
// tmp :=  ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_STRING 
14982: ST_TO_ADDR
// for i = 1 to normalCounter do
14983: LD_ADDR_VAR 0 8
14987: PUSH
14988: DOUBLE
14989: LD_INT 1
14991: DEC
14992: ST_TO_ADDR
14993: LD_EXP 33
14997: PUSH
14998: FOR_TO
14999: IFFALSE 15035
// begin if flags [ i ] then
15001: LD_VAR 0 4
15005: PUSH
15006: LD_VAR 0 8
15010: ARRAY
15011: IFFALSE 15033
// tmp := tmp & i & ; ;
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_VAR 0 3
15022: PUSH
15023: LD_VAR 0 8
15027: STR
15028: PUSH
15029: LD_STRING ;
15031: STR
15032: ST_TO_ADDR
// end ;
15033: GO 14998
15035: POP
15036: POP
// for i = 1 to hardcoreCounter do
15037: LD_ADDR_VAR 0 8
15041: PUSH
15042: DOUBLE
15043: LD_INT 1
15045: DEC
15046: ST_TO_ADDR
15047: LD_EXP 34
15051: PUSH
15052: FOR_TO
15053: IFFALSE 15099
// begin if flags [ normalCounter + i ] then
15055: LD_VAR 0 4
15059: PUSH
15060: LD_EXP 33
15064: PUSH
15065: LD_VAR 0 8
15069: PLUS
15070: ARRAY
15071: IFFALSE 15097
// tmp := tmp & ( 100 + i ) & ; ;
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 100
15085: PUSH
15086: LD_VAR 0 8
15090: PLUS
15091: STR
15092: PUSH
15093: LD_STRING ;
15095: STR
15096: ST_TO_ADDR
// end ;
15097: GO 15052
15099: POP
15100: POP
// if tmp then
15101: LD_VAR 0 3
15105: IFFALSE 15117
// active := tmp ;
15107: LD_ADDR_VAR 0 7
15111: PUSH
15112: LD_VAR 0 3
15116: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15117: LD_STRING getStreamItemsFromMission("
15119: PUSH
15120: LD_VAR 0 5
15124: STR
15125: PUSH
15126: LD_STRING ","
15128: STR
15129: PUSH
15130: LD_VAR 0 6
15134: STR
15135: PUSH
15136: LD_STRING ","
15138: STR
15139: PUSH
15140: LD_VAR 0 7
15144: STR
15145: PUSH
15146: LD_STRING ")
15148: STR
15149: PPUSH
15150: CALL_OW 559
// end else
15154: GO 15163
// ToLua ( getStreamItemsFromMission("","","") ) ;
15156: LD_STRING getStreamItemsFromMission("","","")
15158: PPUSH
15159: CALL_OW 559
// end ;
15163: LD_VAR 0 2
15167: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15168: LD_EXP 32
15172: IFFALSE 15180
15174: PUSH
15175: LD_EXP 37
15179: AND
15180: IFFALSE 15304
15182: GO 15184
15184: DISABLE
15185: LD_INT 0
15187: PPUSH
15188: PPUSH
// begin enable ;
15189: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15190: LD_ADDR_VAR 0 2
15194: PUSH
15195: LD_INT 22
15197: PUSH
15198: LD_OWVAR 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: LD_INT 34
15212: PUSH
15213: LD_INT 7
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 34
15222: PUSH
15223: LD_INT 45
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 34
15232: PUSH
15233: LD_INT 28
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 34
15242: PUSH
15243: LD_INT 47
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: ST_TO_ADDR
// if not tmp then
15266: LD_VAR 0 2
15270: NOT
15271: IFFALSE 15275
// exit ;
15273: GO 15304
// for i in tmp do
15275: LD_ADDR_VAR 0 1
15279: PUSH
15280: LD_VAR 0 2
15284: PUSH
15285: FOR_IN
15286: IFFALSE 15302
// begin SetLives ( i , 0 ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_INT 0
15295: PPUSH
15296: CALL_OW 234
// end ;
15300: GO 15285
15302: POP
15303: POP
// end ;
15304: PPOPN 2
15306: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15307: LD_EXP 32
15311: IFFALSE 15319
15313: PUSH
15314: LD_EXP 38
15318: AND
15319: IFFALSE 15403
15321: GO 15323
15323: DISABLE
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// begin enable ;
15328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15329: LD_ADDR_VAR 0 2
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_OWVAR 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 32
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PPUSH
15360: CALL_OW 69
15364: ST_TO_ADDR
// if not tmp then
15365: LD_VAR 0 2
15369: NOT
15370: IFFALSE 15374
// exit ;
15372: GO 15403
// for i in tmp do
15374: LD_ADDR_VAR 0 1
15378: PUSH
15379: LD_VAR 0 2
15383: PUSH
15384: FOR_IN
15385: IFFALSE 15401
// begin SetLives ( i , 0 ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 234
// end ;
15399: GO 15384
15401: POP
15402: POP
// end ;
15403: PPOPN 2
15405: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15406: LD_EXP 32
15410: IFFALSE 15418
15412: PUSH
15413: LD_EXP 35
15417: AND
15418: IFFALSE 15511
15420: GO 15422
15422: DISABLE
15423: LD_INT 0
15425: PPUSH
// begin enable ;
15426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: LD_INT 22
15434: PUSH
15435: LD_OWVAR 2
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 25
15449: PUSH
15450: LD_INT 5
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 25
15459: PUSH
15460: LD_INT 9
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 25
15469: PUSH
15470: LD_INT 8
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15509
// begin SetClass ( i , 1 ) ;
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 336
// end ;
15507: GO 15492
15509: POP
15510: POP
// end ;
15511: PPOPN 1
15513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15514: LD_EXP 32
15518: IFFALSE 15526
15520: PUSH
15521: LD_EXP 36
15525: AND
15526: IFFALSE 15538
15528: PUSH
15529: LD_OWVAR 65
15533: PUSH
15534: LD_INT 7
15536: LESS
15537: AND
15538: IFFALSE 15552
15540: GO 15542
15542: DISABLE
// begin enable ;
15543: ENABLE
// game_speed := 7 ;
15544: LD_ADDR_OWVAR 65
15548: PUSH
15549: LD_INT 7
15551: ST_TO_ADDR
// end ;
15552: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15553: LD_EXP 32
15557: IFFALSE 15565
15559: PUSH
15560: LD_EXP 39
15564: AND
15565: IFFALSE 15767
15567: GO 15569
15569: DISABLE
15570: LD_INT 0
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15575: LD_ADDR_VAR 0 3
15579: PUSH
15580: LD_INT 81
15582: PUSH
15583: LD_OWVAR 2
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if not tmp then
15611: LD_VAR 0 3
15615: NOT
15616: IFFALSE 15620
// exit ;
15618: GO 15767
// if tmp > 5 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 5
15627: GREATER
15628: IFFALSE 15640
// k := 5 else
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 5
15637: ST_TO_ADDR
15638: GO 15650
// k := tmp ;
15640: LD_ADDR_VAR 0 2
15644: PUSH
15645: LD_VAR 0 3
15649: ST_TO_ADDR
// for i := 1 to k do
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: DOUBLE
15656: LD_INT 1
15658: DEC
15659: ST_TO_ADDR
15660: LD_VAR 0 2
15664: PUSH
15665: FOR_TO
15666: IFFALSE 15765
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15668: LD_VAR 0 3
15672: PUSH
15673: LD_VAR 0 1
15677: ARRAY
15678: PPUSH
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 4
15686: MOD
15687: PUSH
15688: LD_INT 1
15690: PLUS
15691: PPUSH
15692: CALL_OW 259
15696: PUSH
15697: LD_INT 10
15699: LESS
15700: IFFALSE 15763
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15702: LD_VAR 0 3
15706: PUSH
15707: LD_VAR 0 1
15711: ARRAY
15712: PPUSH
15713: LD_VAR 0 1
15717: PUSH
15718: LD_INT 4
15720: MOD
15721: PUSH
15722: LD_INT 1
15724: PLUS
15725: PPUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_VAR 0 1
15735: ARRAY
15736: PPUSH
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 4
15744: MOD
15745: PUSH
15746: LD_INT 1
15748: PLUS
15749: PPUSH
15750: CALL_OW 259
15754: PUSH
15755: LD_INT 1
15757: PLUS
15758: PPUSH
15759: CALL_OW 237
15763: GO 15665
15765: POP
15766: POP
// end ;
15767: PPOPN 3
15769: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15770: LD_EXP 32
15774: IFFALSE 15782
15776: PUSH
15777: LD_EXP 40
15781: AND
15782: IFFALSE 15802
15784: GO 15786
15786: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15787: LD_INT 4
15789: PPUSH
15790: LD_OWVAR 2
15794: PPUSH
15795: LD_INT 0
15797: PPUSH
15798: CALL_OW 324
15802: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15803: LD_EXP 32
15807: IFFALSE 15815
15809: PUSH
15810: LD_EXP 69
15814: AND
15815: IFFALSE 15835
15817: GO 15819
15819: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15820: LD_INT 19
15822: PPUSH
15823: LD_OWVAR 2
15827: PPUSH
15828: LD_INT 0
15830: PPUSH
15831: CALL_OW 324
15835: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15836: LD_EXP 32
15840: IFFALSE 15848
15842: PUSH
15843: LD_EXP 41
15847: AND
15848: IFFALSE 15950
15850: GO 15852
15852: DISABLE
15853: LD_INT 0
15855: PPUSH
15856: PPUSH
// begin enable ;
15857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_OWVAR 2
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 34
15880: PUSH
15881: LD_INT 11
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 34
15890: PUSH
15891: LD_INT 30
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: ST_TO_ADDR
// if not tmp then
15912: LD_VAR 0 2
15916: NOT
15917: IFFALSE 15921
// exit ;
15919: GO 15950
// for i in tmp do
15921: LD_ADDR_VAR 0 1
15925: PUSH
15926: LD_VAR 0 2
15930: PUSH
15931: FOR_IN
15932: IFFALSE 15948
// begin SetLives ( i , 0 ) ;
15934: LD_VAR 0 1
15938: PPUSH
15939: LD_INT 0
15941: PPUSH
15942: CALL_OW 234
// end ;
15946: GO 15931
15948: POP
15949: POP
// end ;
15950: PPOPN 2
15952: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15953: LD_EXP 32
15957: IFFALSE 15965
15959: PUSH
15960: LD_EXP 42
15964: AND
15965: IFFALSE 15985
15967: GO 15969
15969: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15970: LD_INT 32
15972: PPUSH
15973: LD_OWVAR 2
15977: PPUSH
15978: LD_INT 0
15980: PPUSH
15981: CALL_OW 324
15985: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15986: LD_EXP 32
15990: IFFALSE 15998
15992: PUSH
15993: LD_EXP 43
15997: AND
15998: IFFALSE 16181
16000: GO 16002
16002: DISABLE
16003: LD_INT 0
16005: PPUSH
16006: PPUSH
16007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16008: LD_ADDR_VAR 0 2
16012: PUSH
16013: LD_INT 22
16015: PUSH
16016: LD_OWVAR 2
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 33
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PPUSH
16039: CALL_OW 69
16043: ST_TO_ADDR
// if not tmp then
16044: LD_VAR 0 2
16048: NOT
16049: IFFALSE 16053
// exit ;
16051: GO 16181
// side := 0 ;
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// for i := 1 to 8 do
16061: LD_ADDR_VAR 0 1
16065: PUSH
16066: DOUBLE
16067: LD_INT 1
16069: DEC
16070: ST_TO_ADDR
16071: LD_INT 8
16073: PUSH
16074: FOR_TO
16075: IFFALSE 16125
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16077: LD_OWVAR 2
16081: PUSH
16082: LD_VAR 0 1
16086: NONEQUAL
16087: IFFALSE 16109
16089: PUSH
16090: LD_OWVAR 2
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 81
16104: PUSH
16105: LD_INT 2
16107: EQUAL
16108: AND
16109: IFFALSE 16123
// begin side := i ;
16111: LD_ADDR_VAR 0 3
16115: PUSH
16116: LD_VAR 0 1
16120: ST_TO_ADDR
// break ;
16121: GO 16125
// end ;
16123: GO 16074
16125: POP
16126: POP
// if not side then
16127: LD_VAR 0 3
16131: NOT
16132: IFFALSE 16136
// exit ;
16134: GO 16181
// for i := 1 to tmp do
16136: LD_ADDR_VAR 0 1
16140: PUSH
16141: DOUBLE
16142: LD_INT 1
16144: DEC
16145: ST_TO_ADDR
16146: LD_VAR 0 2
16150: PUSH
16151: FOR_TO
16152: IFFALSE 16179
// if Prob ( 60 ) then
16154: LD_INT 60
16156: PPUSH
16157: CALL_OW 13
16161: IFFALSE 16177
// SetSide ( i , side ) ;
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: CALL_OW 235
16177: GO 16151
16179: POP
16180: POP
// end ;
16181: PPOPN 3
16183: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16184: LD_EXP 32
16188: IFFALSE 16196
16190: PUSH
16191: LD_EXP 45
16195: AND
16196: IFFALSE 16315
16198: GO 16200
16200: DISABLE
16201: LD_INT 0
16203: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16204: LD_ADDR_VAR 0 1
16208: PUSH
16209: LD_INT 22
16211: PUSH
16212: LD_OWVAR 2
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 21
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 3
16233: PUSH
16234: LD_INT 23
16236: PUSH
16237: LD_INT 0
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: PPUSH
16253: CALL_OW 69
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16313
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 257
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: LD_INT 4
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: IN
16289: IFFALSE 16311
// SetClass ( un , rand ( 1 , 4 ) ) ;
16291: LD_VAR 0 1
16295: PPUSH
16296: LD_INT 1
16298: PPUSH
16299: LD_INT 4
16301: PPUSH
16302: CALL_OW 12
16306: PPUSH
16307: CALL_OW 336
16311: GO 16258
16313: POP
16314: POP
// end ;
16315: PPOPN 1
16317: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16318: LD_EXP 32
16322: IFFALSE 16330
16324: PUSH
16325: LD_EXP 44
16329: AND
16330: IFFALSE 16409
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16338: LD_ADDR_VAR 0 1
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_OWVAR 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 21
16357: PUSH
16358: LD_INT 3
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 1
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16383: LD_VAR 0 1
16387: PUSH
16388: LD_INT 1
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 12
16400: ARRAY
16401: PPUSH
16402: LD_INT 100
16404: PPUSH
16405: CALL_OW 234
// end ;
16409: PPOPN 1
16411: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16412: LD_EXP 32
16416: IFFALSE 16424
16418: PUSH
16419: LD_EXP 46
16423: AND
16424: IFFALSE 16522
16426: GO 16428
16428: DISABLE
16429: LD_INT 0
16431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16432: LD_ADDR_VAR 0 1
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_OWVAR 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 21
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PPUSH
16463: CALL_OW 69
16467: ST_TO_ADDR
// if not tmp then
16468: LD_VAR 0 1
16472: NOT
16473: IFFALSE 16477
// exit ;
16475: GO 16522
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL_OW 12
16494: ARRAY
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: LD_INT 4
16501: PPUSH
16502: CALL_OW 12
16506: PPUSH
16507: LD_INT 3000
16509: PPUSH
16510: LD_INT 9000
16512: PPUSH
16513: CALL_OW 12
16517: PPUSH
16518: CALL_OW 492
// end ;
16522: PPOPN 1
16524: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16525: LD_EXP 32
16529: IFFALSE 16537
16531: PUSH
16532: LD_EXP 47
16536: AND
16537: IFFALSE 16557
16539: GO 16541
16541: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16542: LD_INT 1
16544: PPUSH
16545: LD_OWVAR 2
16549: PPUSH
16550: LD_INT 0
16552: PPUSH
16553: CALL_OW 324
16557: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16558: LD_EXP 32
16562: IFFALSE 16570
16564: PUSH
16565: LD_EXP 48
16569: AND
16570: IFFALSE 16653
16572: GO 16574
16574: DISABLE
16575: LD_INT 0
16577: PPUSH
16578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: LD_INT 22
16586: PUSH
16587: LD_OWVAR 2
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 21
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 69
16614: ST_TO_ADDR
// if not tmp then
16615: LD_VAR 0 2
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 16653
// for i in tmp do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_VAR 0 2
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16651
// SetBLevel ( i , 10 ) ;
16637: LD_VAR 0 1
16641: PPUSH
16642: LD_INT 10
16644: PPUSH
16645: CALL_OW 241
16649: GO 16634
16651: POP
16652: POP
// end ;
16653: PPOPN 2
16655: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16656: LD_EXP 32
16660: IFFALSE 16668
16662: PUSH
16663: LD_EXP 49
16667: AND
16668: IFFALSE 16779
16670: GO 16672
16672: DISABLE
16673: LD_INT 0
16675: PPUSH
16676: PPUSH
16677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16678: LD_ADDR_VAR 0 3
16682: PUSH
16683: LD_INT 22
16685: PUSH
16686: LD_OWVAR 2
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 1
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// if not tmp then
16714: LD_VAR 0 3
16718: NOT
16719: IFFALSE 16723
// exit ;
16721: GO 16779
// un := tmp [ rand ( 1 , tmp ) ] ;
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 12
16745: ARRAY
16746: ST_TO_ADDR
// if Crawls ( un ) then
16747: LD_VAR 0 2
16751: PPUSH
16752: CALL_OW 318
16756: IFFALSE 16767
// ComWalk ( un ) ;
16758: LD_VAR 0 2
16762: PPUSH
16763: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16767: LD_VAR 0 2
16771: PPUSH
16772: LD_INT 5
16774: PPUSH
16775: CALL_OW 336
// end ;
16779: PPOPN 3
16781: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16782: LD_EXP 32
16786: IFFALSE 16794
16788: PUSH
16789: LD_EXP 50
16793: AND
16794: IFFALSE 16806
16796: PUSH
16797: LD_OWVAR 67
16801: PUSH
16802: LD_INT 4
16804: LESS
16805: AND
16806: IFFALSE 16825
16808: GO 16810
16810: DISABLE
// begin Difficulty := Difficulty + 1 ;
16811: LD_ADDR_OWVAR 67
16815: PUSH
16816: LD_OWVAR 67
16820: PUSH
16821: LD_INT 1
16823: PLUS
16824: ST_TO_ADDR
// end ;
16825: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16826: LD_EXP 32
16830: IFFALSE 16838
16832: PUSH
16833: LD_EXP 51
16837: AND
16838: IFFALSE 16941
16840: GO 16842
16842: DISABLE
16843: LD_INT 0
16845: PPUSH
// begin for i := 1 to 5 do
16846: LD_ADDR_VAR 0 1
16850: PUSH
16851: DOUBLE
16852: LD_INT 1
16854: DEC
16855: ST_TO_ADDR
16856: LD_INT 5
16858: PUSH
16859: FOR_TO
16860: IFFALSE 16939
// begin uc_nation := nation_nature ;
16862: LD_ADDR_OWVAR 21
16866: PUSH
16867: LD_INT 0
16869: ST_TO_ADDR
// uc_side := 0 ;
16870: LD_ADDR_OWVAR 20
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16878: LD_ADDR_OWVAR 29
16882: PUSH
16883: LD_INT 12
16885: PUSH
16886: LD_INT 12
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: ST_TO_ADDR
// hc_agressivity := 20 ;
16893: LD_ADDR_OWVAR 35
16897: PUSH
16898: LD_INT 20
16900: ST_TO_ADDR
// hc_class := class_tiger ;
16901: LD_ADDR_OWVAR 28
16905: PUSH
16906: LD_INT 14
16908: ST_TO_ADDR
// hc_gallery :=  ;
16909: LD_ADDR_OWVAR 33
16913: PUSH
16914: LD_STRING 
16916: ST_TO_ADDR
// hc_name :=  ;
16917: LD_ADDR_OWVAR 26
16921: PUSH
16922: LD_STRING 
16924: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16925: CALL_OW 44
16929: PPUSH
16930: LD_INT 0
16932: PPUSH
16933: CALL_OW 51
// end ;
16937: GO 16859
16939: POP
16940: POP
// end ;
16941: PPOPN 1
16943: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16944: LD_EXP 32
16948: IFFALSE 16956
16950: PUSH
16951: LD_EXP 52
16955: AND
16956: IFFALSE 16965
16958: GO 16960
16960: DISABLE
// StreamSibBomb ;
16961: CALL 16966 0 0
16965: END
// export function StreamSibBomb ; var i , x , y ; begin
16966: LD_INT 0
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
// result := false ;
16972: LD_ADDR_VAR 0 1
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// for i := 1 to 16 do
16980: LD_ADDR_VAR 0 2
16984: PUSH
16985: DOUBLE
16986: LD_INT 1
16988: DEC
16989: ST_TO_ADDR
16990: LD_INT 16
16992: PUSH
16993: FOR_TO
16994: IFFALSE 17193
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16996: LD_ADDR_VAR 0 3
17000: PUSH
17001: LD_INT 10
17003: PUSH
17004: LD_INT 20
17006: PUSH
17007: LD_INT 30
17009: PUSH
17010: LD_INT 40
17012: PUSH
17013: LD_INT 50
17015: PUSH
17016: LD_INT 60
17018: PUSH
17019: LD_INT 70
17021: PUSH
17022: LD_INT 80
17024: PUSH
17025: LD_INT 90
17027: PUSH
17028: LD_INT 100
17030: PUSH
17031: LD_INT 110
17033: PUSH
17034: LD_INT 120
17036: PUSH
17037: LD_INT 130
17039: PUSH
17040: LD_INT 140
17042: PUSH
17043: LD_INT 150
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 1
17065: PPUSH
17066: LD_INT 15
17068: PPUSH
17069: CALL_OW 12
17073: ARRAY
17074: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17075: LD_ADDR_VAR 0 4
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 20
17085: PUSH
17086: LD_INT 30
17088: PUSH
17089: LD_INT 40
17091: PUSH
17092: LD_INT 50
17094: PUSH
17095: LD_INT 60
17097: PUSH
17098: LD_INT 70
17100: PUSH
17101: LD_INT 80
17103: PUSH
17104: LD_INT 90
17106: PUSH
17107: LD_INT 100
17109: PUSH
17110: LD_INT 110
17112: PUSH
17113: LD_INT 120
17115: PUSH
17116: LD_INT 130
17118: PUSH
17119: LD_INT 140
17121: PUSH
17122: LD_INT 150
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 1
17144: PPUSH
17145: LD_INT 15
17147: PPUSH
17148: CALL_OW 12
17152: ARRAY
17153: ST_TO_ADDR
// if ValidHex ( x , y ) then
17154: LD_VAR 0 3
17158: PPUSH
17159: LD_VAR 0 4
17163: PPUSH
17164: CALL_OW 488
17168: IFFALSE 17191
// begin result := [ x , y ] ;
17170: LD_ADDR_VAR 0 1
17174: PUSH
17175: LD_VAR 0 3
17179: PUSH
17180: LD_VAR 0 4
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: ST_TO_ADDR
// break ;
17189: GO 17193
// end ; end ;
17191: GO 16993
17193: POP
17194: POP
// if result then
17195: LD_VAR 0 1
17199: IFFALSE 17259
// begin ToLua ( playSibBomb() ) ;
17201: LD_STRING playSibBomb()
17203: PPUSH
17204: CALL_OW 559
// wait ( 0 0$14 ) ;
17208: LD_INT 490
17210: PPUSH
17211: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17215: LD_VAR 0 1
17219: PUSH
17220: LD_INT 1
17222: ARRAY
17223: PPUSH
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 2
17231: ARRAY
17232: PPUSH
17233: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17237: LD_VAR 0 1
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: LD_VAR 0 1
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PPUSH
17255: CALL_OW 429
// end ; end ;
17259: LD_VAR 0 1
17263: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17264: LD_EXP 32
17268: IFFALSE 17276
17270: PUSH
17271: LD_EXP 54
17275: AND
17276: IFFALSE 17288
17278: GO 17280
17280: DISABLE
// YouLost (  ) ;
17281: LD_STRING 
17283: PPUSH
17284: CALL_OW 104
17288: END
// every 0 0$1 trigger StreamModeActive and sFog do
17289: LD_EXP 32
17293: IFFALSE 17301
17295: PUSH
17296: LD_EXP 53
17300: AND
17301: IFFALSE 17315
17303: GO 17305
17305: DISABLE
// FogOff ( your_side ) ;
17306: LD_OWVAR 2
17310: PPUSH
17311: CALL_OW 344
17315: END
// every 0 0$1 trigger StreamModeActive and sSun do
17316: LD_EXP 32
17320: IFFALSE 17328
17322: PUSH
17323: LD_EXP 55
17327: AND
17328: IFFALSE 17356
17330: GO 17332
17332: DISABLE
// begin solar_recharge_percent := 0 ;
17333: LD_ADDR_OWVAR 79
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17341: LD_INT 10500
17343: PPUSH
17344: CALL_OW 67
// solar_recharge_percent := 100 ;
17348: LD_ADDR_OWVAR 79
17352: PUSH
17353: LD_INT 100
17355: ST_TO_ADDR
// end ;
17356: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17357: LD_EXP 32
17361: IFFALSE 17369
17363: PUSH
17364: LD_EXP 56
17368: AND
17369: IFFALSE 17608
17371: GO 17373
17373: DISABLE
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
// begin tmp := [ ] ;
17379: LD_ADDR_VAR 0 3
17383: PUSH
17384: EMPTY
17385: ST_TO_ADDR
// for i := 1 to 6 do
17386: LD_ADDR_VAR 0 1
17390: PUSH
17391: DOUBLE
17392: LD_INT 1
17394: DEC
17395: ST_TO_ADDR
17396: LD_INT 6
17398: PUSH
17399: FOR_TO
17400: IFFALSE 17505
// begin uc_nation := nation_nature ;
17402: LD_ADDR_OWVAR 21
17406: PUSH
17407: LD_INT 0
17409: ST_TO_ADDR
// uc_side := 0 ;
17410: LD_ADDR_OWVAR 20
17414: PUSH
17415: LD_INT 0
17417: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17418: LD_ADDR_OWVAR 29
17422: PUSH
17423: LD_INT 12
17425: PUSH
17426: LD_INT 12
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: ST_TO_ADDR
// hc_agressivity := 20 ;
17433: LD_ADDR_OWVAR 35
17437: PUSH
17438: LD_INT 20
17440: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17441: LD_ADDR_OWVAR 28
17445: PUSH
17446: LD_INT 17
17448: ST_TO_ADDR
// hc_gallery :=  ;
17449: LD_ADDR_OWVAR 33
17453: PUSH
17454: LD_STRING 
17456: ST_TO_ADDR
// hc_name :=  ;
17457: LD_ADDR_OWVAR 26
17461: PUSH
17462: LD_STRING 
17464: ST_TO_ADDR
// un := CreateHuman ;
17465: LD_ADDR_VAR 0 2
17469: PUSH
17470: CALL_OW 44
17474: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17475: LD_VAR 0 2
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 51
// tmp := tmp ^ un ;
17487: LD_ADDR_VAR 0 3
17491: PUSH
17492: LD_VAR 0 3
17496: PUSH
17497: LD_VAR 0 2
17501: ADD
17502: ST_TO_ADDR
// end ;
17503: GO 17399
17505: POP
17506: POP
// repeat wait ( 0 0$1 ) ;
17507: LD_INT 35
17509: PPUSH
17510: CALL_OW 67
// for un in tmp do
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_VAR 0 3
17523: PUSH
17524: FOR_IN
17525: IFFALSE 17599
// begin if IsDead ( un ) then
17527: LD_VAR 0 2
17531: PPUSH
17532: CALL_OW 301
17536: IFFALSE 17556
// begin tmp := tmp diff un ;
17538: LD_ADDR_VAR 0 3
17542: PUSH
17543: LD_VAR 0 3
17547: PUSH
17548: LD_VAR 0 2
17552: DIFF
17553: ST_TO_ADDR
// continue ;
17554: GO 17524
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17556: LD_VAR 0 2
17560: PPUSH
17561: LD_INT 3
17563: PUSH
17564: LD_INT 22
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: CALL_OW 74
17592: PPUSH
17593: CALL_OW 115
// end ;
17597: GO 17524
17599: POP
17600: POP
// until not tmp ;
17601: LD_VAR 0 3
17605: NOT
17606: IFFALSE 17507
// end ;
17608: PPOPN 3
17610: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17611: LD_EXP 32
17615: IFFALSE 17623
17617: PUSH
17618: LD_EXP 57
17622: AND
17623: IFFALSE 17677
17625: GO 17627
17627: DISABLE
// begin ToLua ( displayTroll(); ) ;
17628: LD_STRING displayTroll();
17630: PPUSH
17631: CALL_OW 559
// wait ( 3 3$00 ) ;
17635: LD_INT 6300
17637: PPUSH
17638: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17642: LD_STRING hideTroll();
17644: PPUSH
17645: CALL_OW 559
// wait ( 1 1$00 ) ;
17649: LD_INT 2100
17651: PPUSH
17652: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17656: LD_STRING displayTroll();
17658: PPUSH
17659: CALL_OW 559
// wait ( 1 1$00 ) ;
17663: LD_INT 2100
17665: PPUSH
17666: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17670: LD_STRING hideTroll();
17672: PPUSH
17673: CALL_OW 559
// end ;
17677: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17678: LD_EXP 32
17682: IFFALSE 17690
17684: PUSH
17685: LD_EXP 58
17689: AND
17690: IFFALSE 17753
17692: GO 17694
17694: DISABLE
17695: LD_INT 0
17697: PPUSH
// begin p := 0 ;
17698: LD_ADDR_VAR 0 1
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// repeat game_speed := 1 ;
17706: LD_ADDR_OWVAR 65
17710: PUSH
17711: LD_INT 1
17713: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17714: LD_INT 35
17716: PPUSH
17717: CALL_OW 67
// p := p + 1 ;
17721: LD_ADDR_VAR 0 1
17725: PUSH
17726: LD_VAR 0 1
17730: PUSH
17731: LD_INT 1
17733: PLUS
17734: ST_TO_ADDR
// until p >= 60 ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 60
17742: GREATEREQUAL
17743: IFFALSE 17706
// game_speed := 4 ;
17745: LD_ADDR_OWVAR 65
17749: PUSH
17750: LD_INT 4
17752: ST_TO_ADDR
// end ;
17753: PPOPN 1
17755: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17756: LD_EXP 32
17760: IFFALSE 17768
17762: PUSH
17763: LD_EXP 59
17767: AND
17768: IFFALSE 17914
17770: GO 17772
17772: DISABLE
17773: LD_INT 0
17775: PPUSH
17776: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_INT 22
17784: PUSH
17785: LD_OWVAR 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 30
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PPUSH
17826: CALL_OW 69
17830: ST_TO_ADDR
// if not depot then
17831: LD_VAR 0 1
17835: NOT
17836: IFFALSE 17840
// exit ;
17838: GO 17914
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 1
17852: PPUSH
17853: LD_VAR 0 1
17857: PPUSH
17858: CALL_OW 12
17862: ARRAY
17863: PPUSH
17864: CALL_OW 274
17868: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17869: LD_VAR 0 2
17873: PPUSH
17874: LD_INT 1
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_INT 2
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17899: LD_VAR 0 2
17903: PPUSH
17904: LD_INT 3
17906: PPUSH
17907: LD_INT 0
17909: PPUSH
17910: CALL_OW 277
// end ;
17914: PPOPN 2
17916: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17917: LD_EXP 32
17921: IFFALSE 17929
17923: PUSH
17924: LD_EXP 60
17928: AND
17929: IFFALSE 18026
17931: GO 17933
17933: DISABLE
17934: LD_INT 0
17936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17937: LD_ADDR_VAR 0 1
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_OWVAR 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 21
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: LD_INT 23
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 69
17990: ST_TO_ADDR
// if not tmp then
17991: LD_VAR 0 1
17995: NOT
17996: IFFALSE 18000
// exit ;
17998: GO 18026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18000: LD_VAR 0 1
18004: PUSH
18005: LD_INT 1
18007: PPUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 12
18017: ARRAY
18018: PPUSH
18019: LD_INT 200
18021: PPUSH
18022: CALL_OW 234
// end ;
18026: PPOPN 1
18028: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18029: LD_EXP 32
18033: IFFALSE 18041
18035: PUSH
18036: LD_EXP 61
18040: AND
18041: IFFALSE 18120
18043: GO 18045
18045: DISABLE
18046: LD_INT 0
18048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18049: LD_ADDR_VAR 0 1
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_OWVAR 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not tmp then
18085: LD_VAR 0 1
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: PPUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 12
18111: ARRAY
18112: PPUSH
18113: LD_INT 60
18115: PPUSH
18116: CALL_OW 234
// end ;
18120: PPOPN 1
18122: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18123: LD_EXP 32
18127: IFFALSE 18135
18129: PUSH
18130: LD_EXP 62
18134: AND
18135: IFFALSE 18234
18137: GO 18139
18139: DISABLE
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
// begin enable ;
18144: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18145: LD_ADDR_VAR 0 1
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_OWVAR 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 61
18164: PUSH
18165: EMPTY
18166: LIST
18167: PUSH
18168: LD_INT 33
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: PPUSH
18183: CALL_OW 69
18187: ST_TO_ADDR
// if not tmp then
18188: LD_VAR 0 1
18192: NOT
18193: IFFALSE 18197
// exit ;
18195: GO 18234
// for i in tmp do
18197: LD_ADDR_VAR 0 2
18201: PUSH
18202: LD_VAR 0 1
18206: PUSH
18207: FOR_IN
18208: IFFALSE 18232
// if IsControledBy ( i ) then
18210: LD_VAR 0 2
18214: PPUSH
18215: CALL_OW 312
18219: IFFALSE 18230
// ComUnlink ( i ) ;
18221: LD_VAR 0 2
18225: PPUSH
18226: CALL_OW 136
18230: GO 18207
18232: POP
18233: POP
// end ;
18234: PPOPN 2
18236: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18237: LD_EXP 32
18241: IFFALSE 18249
18243: PUSH
18244: LD_EXP 63
18248: AND
18249: IFFALSE 18389
18251: GO 18253
18253: DISABLE
18254: LD_INT 0
18256: PPUSH
18257: PPUSH
// begin ToLua ( displayPowell(); ) ;
18258: LD_STRING displayPowell();
18260: PPUSH
18261: CALL_OW 559
// uc_side := 0 ;
18265: LD_ADDR_OWVAR 20
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// uc_nation := 2 ;
18273: LD_ADDR_OWVAR 21
18277: PUSH
18278: LD_INT 2
18280: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18281: LD_ADDR_OWVAR 37
18285: PUSH
18286: LD_INT 14
18288: ST_TO_ADDR
// vc_engine := engine_siberite ;
18289: LD_ADDR_OWVAR 39
18293: PUSH
18294: LD_INT 3
18296: ST_TO_ADDR
// vc_control := control_apeman ;
18297: LD_ADDR_OWVAR 38
18301: PUSH
18302: LD_INT 5
18304: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18305: LD_ADDR_OWVAR 40
18309: PUSH
18310: LD_INT 29
18312: ST_TO_ADDR
// un := CreateVehicle ;
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: CALL_OW 45
18322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18323: LD_VAR 0 2
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18335: LD_INT 35
18337: PPUSH
18338: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18342: LD_VAR 0 2
18346: PPUSH
18347: LD_INT 22
18349: PUSH
18350: LD_OWVAR 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PPUSH
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 74
18373: PPUSH
18374: CALL_OW 115
// until IsDead ( un ) ;
18378: LD_VAR 0 2
18382: PPUSH
18383: CALL_OW 301
18387: IFFALSE 18335
// end ;
18389: PPOPN 2
18391: END
// every 0 0$1 trigger StreamModeActive and sStu do
18392: LD_EXP 32
18396: IFFALSE 18404
18398: PUSH
18399: LD_EXP 71
18403: AND
18404: IFFALSE 18420
18406: GO 18408
18408: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18409: LD_STRING displayStucuk();
18411: PPUSH
18412: CALL_OW 559
// ResetFog ;
18416: CALL_OW 335
// end ;
18420: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18421: LD_EXP 32
18425: IFFALSE 18433
18427: PUSH
18428: LD_EXP 64
18432: AND
18433: IFFALSE 18574
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18442: LD_ADDR_VAR 0 2
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_OWVAR 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 21
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: ST_TO_ADDR
// if not tmp then
18478: LD_VAR 0 2
18482: NOT
18483: IFFALSE 18487
// exit ;
18485: GO 18574
// un := tmp [ rand ( 1 , tmp ) ] ;
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_VAR 0 2
18496: PUSH
18497: LD_INT 1
18499: PPUSH
18500: LD_VAR 0 2
18504: PPUSH
18505: CALL_OW 12
18509: ARRAY
18510: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18523: LD_VAR 0 1
18527: PPUSH
18528: LD_OWVAR 3
18532: PUSH
18533: LD_VAR 0 1
18537: DIFF
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
// wait ( 0 0$20 ) ;
18553: LD_INT 700
18555: PPUSH
18556: CALL_OW 67
// SetSide ( un , your_side ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_OWVAR 2
18569: PPUSH
18570: CALL_OW 235
// end ;
18574: PPOPN 2
18576: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18577: LD_EXP 32
18581: IFFALSE 18589
18583: PUSH
18584: LD_EXP 65
18588: AND
18589: IFFALSE 18695
18591: GO 18593
18593: DISABLE
18594: LD_INT 0
18596: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 30
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 30
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PPUSH
18646: CALL_OW 69
18650: ST_TO_ADDR
// if not depot then
18651: LD_VAR 0 1
18655: NOT
18656: IFFALSE 18660
// exit ;
18658: GO 18695
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18660: LD_VAR 0 1
18664: PUSH
18665: LD_INT 1
18667: ARRAY
18668: PPUSH
18669: CALL_OW 250
18673: PPUSH
18674: LD_VAR 0 1
18678: PUSH
18679: LD_INT 1
18681: ARRAY
18682: PPUSH
18683: CALL_OW 251
18687: PPUSH
18688: LD_INT 70
18690: PPUSH
18691: CALL_OW 495
// end ;
18695: PPOPN 1
18697: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18698: LD_EXP 32
18702: IFFALSE 18710
18704: PUSH
18705: LD_EXP 66
18709: AND
18710: IFFALSE 18921
18712: GO 18714
18714: DISABLE
18715: LD_INT 0
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
18721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18722: LD_ADDR_VAR 0 5
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_OWVAR 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PPUSH
18753: CALL_OW 69
18757: ST_TO_ADDR
// if not tmp then
18758: LD_VAR 0 5
18762: NOT
18763: IFFALSE 18767
// exit ;
18765: GO 18921
// for i in tmp do
18767: LD_ADDR_VAR 0 1
18771: PUSH
18772: LD_VAR 0 5
18776: PUSH
18777: FOR_IN
18778: IFFALSE 18919
// begin d := rand ( 0 , 5 ) ;
18780: LD_ADDR_VAR 0 4
18784: PUSH
18785: LD_INT 0
18787: PPUSH
18788: LD_INT 5
18790: PPUSH
18791: CALL_OW 12
18795: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18796: LD_ADDR_VAR 0 2
18800: PUSH
18801: LD_VAR 0 1
18805: PPUSH
18806: CALL_OW 250
18810: PPUSH
18811: LD_VAR 0 4
18815: PPUSH
18816: LD_INT 3
18818: PPUSH
18819: LD_INT 12
18821: PPUSH
18822: CALL_OW 12
18826: PPUSH
18827: CALL_OW 272
18831: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18832: LD_ADDR_VAR 0 3
18836: PUSH
18837: LD_VAR 0 1
18841: PPUSH
18842: CALL_OW 251
18846: PPUSH
18847: LD_VAR 0 4
18851: PPUSH
18852: LD_INT 3
18854: PPUSH
18855: LD_INT 12
18857: PPUSH
18858: CALL_OW 12
18862: PPUSH
18863: CALL_OW 273
18867: ST_TO_ADDR
// if ValidHex ( x , y ) then
18868: LD_VAR 0 2
18872: PPUSH
18873: LD_VAR 0 3
18877: PPUSH
18878: CALL_OW 488
18882: IFFALSE 18917
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18884: LD_VAR 0 1
18888: PPUSH
18889: LD_VAR 0 2
18893: PPUSH
18894: LD_VAR 0 3
18898: PPUSH
18899: LD_INT 3
18901: PPUSH
18902: LD_INT 6
18904: PPUSH
18905: CALL_OW 12
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 483
// end ;
18917: GO 18777
18919: POP
18920: POP
// end ;
18921: PPOPN 5
18923: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18924: LD_EXP 32
18928: IFFALSE 18936
18930: PUSH
18931: LD_EXP 67
18935: AND
18936: IFFALSE 19030
18938: GO 18940
18940: DISABLE
18941: LD_INT 0
18943: PPUSH
18944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_INT 22
18952: PUSH
18953: LD_OWVAR 2
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 32
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if not tmp then
18992: LD_VAR 0 2
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19030
// for i in tmp do
19001: LD_ADDR_VAR 0 1
19005: PUSH
19006: LD_VAR 0 2
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19028
// SetFuel ( i , 0 ) ;
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_INT 0
19021: PPUSH
19022: CALL_OW 240
19026: GO 19011
19028: POP
19029: POP
// end ;
19030: PPOPN 2
19032: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19033: LD_EXP 32
19037: IFFALSE 19045
19039: PUSH
19040: LD_EXP 68
19044: AND
19045: IFFALSE 19111
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19053: LD_ADDR_VAR 0 1
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_OWVAR 2
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 30
19072: PUSH
19073: LD_INT 29
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: ST_TO_ADDR
// if not tmp then
19089: LD_VAR 0 1
19093: NOT
19094: IFFALSE 19098
// exit ;
19096: GO 19111
// DestroyUnit ( tmp [ 1 ] ) ;
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 1
19105: ARRAY
19106: PPUSH
19107: CALL_OW 65
// end ;
19111: PPOPN 1
19113: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19114: LD_EXP 32
19118: IFFALSE 19126
19120: PUSH
19121: LD_EXP 70
19125: AND
19126: IFFALSE 19255
19128: GO 19130
19130: DISABLE
19131: LD_INT 0
19133: PPUSH
// begin uc_side := 0 ;
19134: LD_ADDR_OWVAR 20
19138: PUSH
19139: LD_INT 0
19141: ST_TO_ADDR
// uc_nation := nation_arabian ;
19142: LD_ADDR_OWVAR 21
19146: PUSH
19147: LD_INT 2
19149: ST_TO_ADDR
// hc_gallery :=  ;
19150: LD_ADDR_OWVAR 33
19154: PUSH
19155: LD_STRING 
19157: ST_TO_ADDR
// hc_name :=  ;
19158: LD_ADDR_OWVAR 26
19162: PUSH
19163: LD_STRING 
19165: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19166: LD_INT 1
19168: PPUSH
19169: LD_INT 11
19171: PPUSH
19172: LD_INT 10
19174: PPUSH
19175: CALL_OW 380
// un := CreateHuman ;
19179: LD_ADDR_VAR 0 1
19183: PUSH
19184: CALL_OW 44
19188: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19189: LD_VAR 0 1
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19201: LD_INT 35
19203: PPUSH
19204: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19208: LD_VAR 0 1
19212: PPUSH
19213: LD_INT 22
19215: PUSH
19216: LD_OWVAR 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 74
19239: PPUSH
19240: CALL_OW 115
// until IsDead ( un ) ;
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 301
19253: IFFALSE 19201
// end ;
19255: PPOPN 1
19257: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19258: LD_EXP 32
19262: IFFALSE 19270
19264: PUSH
19265: LD_EXP 72
19269: AND
19270: IFFALSE 19282
19272: GO 19274
19274: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19275: LD_STRING earthquake(getX(game), 0, 32)
19277: PPUSH
19278: CALL_OW 559
19282: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19283: LD_EXP 32
19287: IFFALSE 19295
19289: PUSH
19290: LD_EXP 73
19294: AND
19295: IFFALSE 19386
19297: GO 19299
19299: DISABLE
19300: LD_INT 0
19302: PPUSH
// begin enable ;
19303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_INT 22
19311: PUSH
19312: LD_OWVAR 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 21
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 33
19333: PUSH
19334: LD_INT 3
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 69
19350: ST_TO_ADDR
// if not tmp then
19351: LD_VAR 0 1
19355: NOT
19356: IFFALSE 19360
// exit ;
19358: GO 19386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19360: LD_VAR 0 1
19364: PUSH
19365: LD_INT 1
19367: PPUSH
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 12
19377: ARRAY
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: CALL_OW 234
// end ;
19386: PPOPN 1
19388: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19389: LD_EXP 32
19393: IFFALSE 19401
19395: PUSH
19396: LD_EXP 74
19400: AND
19401: IFFALSE 19542
19403: GO 19405
19405: DISABLE
19406: LD_INT 0
19408: PPUSH
19409: PPUSH
19410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_OWVAR 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 25
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: ST_TO_ADDR
// if not tmp then
19447: LD_VAR 0 3
19451: NOT
19452: IFFALSE 19456
// exit ;
19454: GO 19542
// un := tmp [ rand ( 1 , tmp ) ] ;
19456: LD_ADDR_VAR 0 2
19460: PUSH
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 12
19478: ARRAY
19479: ST_TO_ADDR
// if Crawls ( un ) then
19480: LD_VAR 0 2
19484: PPUSH
19485: CALL_OW 318
19489: IFFALSE 19500
// ComWalk ( un ) ;
19491: LD_VAR 0 2
19495: PPUSH
19496: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19500: LD_VAR 0 2
19504: PPUSH
19505: LD_INT 9
19507: PPUSH
19508: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19512: LD_INT 28
19514: PPUSH
19515: LD_OWVAR 2
19519: PPUSH
19520: LD_INT 2
19522: PPUSH
19523: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19527: LD_INT 29
19529: PPUSH
19530: LD_OWVAR 2
19534: PPUSH
19535: LD_INT 2
19537: PPUSH
19538: CALL_OW 322
// end ;
19542: PPOPN 3
19544: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19545: LD_EXP 32
19549: IFFALSE 19557
19551: PUSH
19552: LD_EXP 75
19556: AND
19557: IFFALSE 19668
19559: GO 19561
19561: DISABLE
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_INT 22
19574: PUSH
19575: LD_OWVAR 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 25
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PPUSH
19598: CALL_OW 69
19602: ST_TO_ADDR
// if not tmp then
19603: LD_VAR 0 3
19607: NOT
19608: IFFALSE 19612
// exit ;
19610: GO 19668
// un := tmp [ rand ( 1 , tmp ) ] ;
19612: LD_ADDR_VAR 0 2
19616: PUSH
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 1
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: CALL_OW 12
19634: ARRAY
19635: ST_TO_ADDR
// if Crawls ( un ) then
19636: LD_VAR 0 2
19640: PPUSH
19641: CALL_OW 318
19645: IFFALSE 19656
// ComWalk ( un ) ;
19647: LD_VAR 0 2
19651: PPUSH
19652: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19656: LD_VAR 0 2
19660: PPUSH
19661: LD_INT 8
19663: PPUSH
19664: CALL_OW 336
// end ;
19668: PPOPN 3
19670: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19671: LD_EXP 32
19675: IFFALSE 19683
19677: PUSH
19678: LD_EXP 76
19682: AND
19683: IFFALSE 19827
19685: GO 19687
19687: DISABLE
19688: LD_INT 0
19690: PPUSH
19691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_INT 22
19699: PUSH
19700: LD_OWVAR 2
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 21
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: LD_INT 34
19724: PUSH
19725: LD_INT 12
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 51
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 34
19744: PUSH
19745: LD_INT 32
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: LIST
19762: PPUSH
19763: CALL_OW 69
19767: ST_TO_ADDR
// if not tmp then
19768: LD_VAR 0 2
19772: NOT
19773: IFFALSE 19777
// exit ;
19775: GO 19827
// for i in tmp do
19777: LD_ADDR_VAR 0 1
19781: PUSH
19782: LD_VAR 0 2
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19825
// if GetCargo ( i , mat_artifact ) = 0 then
19790: LD_VAR 0 1
19794: PPUSH
19795: LD_INT 4
19797: PPUSH
19798: CALL_OW 289
19802: PUSH
19803: LD_INT 0
19805: EQUAL
19806: IFFALSE 19823
// SetCargo ( i , mat_siberit , 100 ) ;
19808: LD_VAR 0 1
19812: PPUSH
19813: LD_INT 3
19815: PPUSH
19816: LD_INT 100
19818: PPUSH
19819: CALL_OW 290
19823: GO 19787
19825: POP
19826: POP
// end ;
19827: PPOPN 2
19829: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19830: LD_EXP 32
19834: IFFALSE 19842
19836: PUSH
19837: LD_EXP 77
19841: AND
19842: IFFALSE 20025
19844: GO 19846
19846: DISABLE
19847: LD_INT 0
19849: PPUSH
19850: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19851: LD_ADDR_VAR 0 2
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_OWVAR 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not tmp then
19873: LD_VAR 0 2
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 20025
// for i := 1 to 2 do
19882: LD_ADDR_VAR 0 1
19886: PUSH
19887: DOUBLE
19888: LD_INT 1
19890: DEC
19891: ST_TO_ADDR
19892: LD_INT 2
19894: PUSH
19895: FOR_TO
19896: IFFALSE 20023
// begin uc_side := your_side ;
19898: LD_ADDR_OWVAR 20
19902: PUSH
19903: LD_OWVAR 2
19907: ST_TO_ADDR
// uc_nation := nation_american ;
19908: LD_ADDR_OWVAR 21
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// vc_chassis := us_morphling ;
19916: LD_ADDR_OWVAR 37
19920: PUSH
19921: LD_INT 5
19923: ST_TO_ADDR
// vc_engine := engine_siberite ;
19924: LD_ADDR_OWVAR 39
19928: PUSH
19929: LD_INT 3
19931: ST_TO_ADDR
// vc_control := control_computer ;
19932: LD_ADDR_OWVAR 38
19936: PUSH
19937: LD_INT 3
19939: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19940: LD_ADDR_OWVAR 40
19944: PUSH
19945: LD_INT 10
19947: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19948: LD_VAR 0 2
19952: PUSH
19953: LD_INT 1
19955: ARRAY
19956: PPUSH
19957: CALL_OW 310
19961: NOT
19962: IFFALSE 20009
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19964: CALL_OW 45
19968: PPUSH
19969: LD_VAR 0 2
19973: PUSH
19974: LD_INT 1
19976: ARRAY
19977: PPUSH
19978: CALL_OW 250
19982: PPUSH
19983: LD_VAR 0 2
19987: PUSH
19988: LD_INT 1
19990: ARRAY
19991: PPUSH
19992: CALL_OW 251
19996: PPUSH
19997: LD_INT 12
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL_OW 50
20007: GO 20021
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20009: CALL_OW 45
20013: PPUSH
20014: LD_INT 1
20016: PPUSH
20017: CALL_OW 51
// end ;
20021: GO 19895
20023: POP
20024: POP
// end ;
20025: PPOPN 2
20027: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20028: LD_EXP 32
20032: IFFALSE 20040
20034: PUSH
20035: LD_EXP 78
20039: AND
20040: IFFALSE 20262
20042: GO 20044
20044: DISABLE
20045: LD_INT 0
20047: PPUSH
20048: PPUSH
20049: PPUSH
20050: PPUSH
20051: PPUSH
20052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20053: LD_ADDR_VAR 0 6
20057: PUSH
20058: LD_INT 22
20060: PUSH
20061: LD_OWVAR 2
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 21
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: LD_INT 23
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: ST_TO_ADDR
// if not tmp then
20107: LD_VAR 0 6
20111: NOT
20112: IFFALSE 20116
// exit ;
20114: GO 20262
// s1 := rand ( 1 , 4 ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_INT 1
20123: PPUSH
20124: LD_INT 4
20126: PPUSH
20127: CALL_OW 12
20131: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20132: LD_ADDR_VAR 0 4
20136: PUSH
20137: LD_VAR 0 6
20141: PUSH
20142: LD_INT 1
20144: ARRAY
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: CALL_OW 259
20155: ST_TO_ADDR
// if s1 = 1 then
20156: LD_VAR 0 2
20160: PUSH
20161: LD_INT 1
20163: EQUAL
20164: IFFALSE 20184
// s2 := rand ( 2 , 4 ) else
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_INT 2
20173: PPUSH
20174: LD_INT 4
20176: PPUSH
20177: CALL_OW 12
20181: ST_TO_ADDR
20182: GO 20192
// s2 := 1 ;
20184: LD_ADDR_VAR 0 3
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20192: LD_ADDR_VAR 0 5
20196: PUSH
20197: LD_VAR 0 6
20201: PUSH
20202: LD_INT 1
20204: ARRAY
20205: PPUSH
20206: LD_VAR 0 3
20210: PPUSH
20211: CALL_OW 259
20215: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20216: LD_VAR 0 6
20220: PUSH
20221: LD_INT 1
20223: ARRAY
20224: PPUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: LD_VAR 0 5
20234: PPUSH
20235: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20239: LD_VAR 0 6
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: PPUSH
20248: LD_VAR 0 3
20252: PPUSH
20253: LD_VAR 0 4
20257: PPUSH
20258: CALL_OW 237
// end ;
20262: PPOPN 6
20264: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20265: LD_EXP 32
20269: IFFALSE 20277
20271: PUSH
20272: LD_EXP 79
20276: AND
20277: IFFALSE 20356
20279: GO 20281
20281: DISABLE
20282: LD_INT 0
20284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20285: LD_ADDR_VAR 0 1
20289: PUSH
20290: LD_INT 22
20292: PUSH
20293: LD_OWVAR 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 30
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 69
20320: ST_TO_ADDR
// if not tmp then
20321: LD_VAR 0 1
20325: NOT
20326: IFFALSE 20330
// exit ;
20328: GO 20356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20330: LD_VAR 0 1
20334: PUSH
20335: LD_INT 1
20337: PPUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 12
20347: ARRAY
20348: PPUSH
20349: LD_INT 1
20351: PPUSH
20352: CALL_OW 234
// end ;
20356: PPOPN 1
20358: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20359: LD_EXP 32
20363: IFFALSE 20371
20365: PUSH
20366: LD_EXP 80
20370: AND
20371: IFFALSE 20483
20373: GO 20375
20375: DISABLE
20376: LD_INT 0
20378: PPUSH
20379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20380: LD_ADDR_VAR 0 2
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_OWVAR 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 30
20402: PUSH
20403: LD_INT 27
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 30
20412: PUSH
20413: LD_INT 26
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 30
20422: PUSH
20423: LD_INT 28
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL_OW 69
20444: ST_TO_ADDR
// if not tmp then
20445: LD_VAR 0 2
20449: NOT
20450: IFFALSE 20454
// exit ;
20452: GO 20483
// for i in tmp do
20454: LD_ADDR_VAR 0 1
20458: PUSH
20459: LD_VAR 0 2
20463: PUSH
20464: FOR_IN
20465: IFFALSE 20481
// SetLives ( i , 1 ) ;
20467: LD_VAR 0 1
20471: PPUSH
20472: LD_INT 1
20474: PPUSH
20475: CALL_OW 234
20479: GO 20464
20481: POP
20482: POP
// end ;
20483: PPOPN 2
20485: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20486: LD_EXP 32
20490: IFFALSE 20498
20492: PUSH
20493: LD_EXP 81
20497: AND
20498: IFFALSE 20785
20500: GO 20502
20502: DISABLE
20503: LD_INT 0
20505: PPUSH
20506: PPUSH
20507: PPUSH
// begin i := rand ( 1 , 7 ) ;
20508: LD_ADDR_VAR 0 1
20512: PUSH
20513: LD_INT 1
20515: PPUSH
20516: LD_INT 7
20518: PPUSH
20519: CALL_OW 12
20523: ST_TO_ADDR
// case i of 1 :
20524: LD_VAR 0 1
20528: PUSH
20529: LD_INT 1
20531: DOUBLE
20532: EQUAL
20533: IFTRUE 20537
20535: GO 20547
20537: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20538: LD_STRING earthquake(getX(game), 0, 32)
20540: PPUSH
20541: CALL_OW 559
20545: GO 20785
20547: LD_INT 2
20549: DOUBLE
20550: EQUAL
20551: IFTRUE 20555
20553: GO 20569
20555: POP
// begin ToLua ( displayStucuk(); ) ;
20556: LD_STRING displayStucuk();
20558: PPUSH
20559: CALL_OW 559
// ResetFog ;
20563: CALL_OW 335
// end ; 3 :
20567: GO 20785
20569: LD_INT 3
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20681
20577: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_OWVAR 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 25
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: ST_TO_ADDR
// if not tmp then
20614: LD_VAR 0 2
20618: NOT
20619: IFFALSE 20623
// exit ;
20621: GO 20785
// un := tmp [ rand ( 1 , tmp ) ] ;
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_VAR 0 2
20632: PUSH
20633: LD_INT 1
20635: PPUSH
20636: LD_VAR 0 2
20640: PPUSH
20641: CALL_OW 12
20645: ARRAY
20646: ST_TO_ADDR
// if Crawls ( un ) then
20647: LD_VAR 0 3
20651: PPUSH
20652: CALL_OW 318
20656: IFFALSE 20667
// ComWalk ( un ) ;
20658: LD_VAR 0 3
20662: PPUSH
20663: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_INT 8
20674: PPUSH
20675: CALL_OW 336
// end ; 4 :
20679: GO 20785
20681: LD_INT 4
20683: DOUBLE
20684: EQUAL
20685: IFTRUE 20689
20687: GO 20763
20689: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_INT 22
20697: PUSH
20698: LD_OWVAR 2
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 30
20709: PUSH
20710: LD_INT 29
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PPUSH
20721: CALL_OW 69
20725: ST_TO_ADDR
// if not tmp then
20726: LD_VAR 0 2
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20785
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20735: LD_VAR 0 2
20739: PUSH
20740: LD_INT 1
20742: ARRAY
20743: PPUSH
20744: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 1
20755: ARRAY
20756: PPUSH
20757: CALL_OW 65
// end ; 5 .. 7 :
20761: GO 20785
20763: LD_INT 5
20765: DOUBLE
20766: GREATEREQUAL
20767: IFFALSE 20775
20769: LD_INT 7
20771: DOUBLE
20772: LESSEQUAL
20773: IFTRUE 20777
20775: GO 20784
20777: POP
// StreamSibBomb ; end ;
20778: CALL 16966 0 0
20782: GO 20785
20784: POP
// end ;
20785: PPOPN 3
20787: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20788: LD_EXP 32
20792: IFFALSE 20800
20794: PUSH
20795: LD_EXP 82
20799: AND
20800: IFFALSE 20956
20802: GO 20804
20804: DISABLE
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
20809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20810: LD_ADDR_VAR 0 2
20814: PUSH
20815: LD_INT 81
20817: PUSH
20818: LD_OWVAR 2
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 21
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PPUSH
20859: CALL_OW 69
20863: ST_TO_ADDR
// if not tmp then
20864: LD_VAR 0 2
20868: NOT
20869: IFFALSE 20873
// exit ;
20871: GO 20956
// p := 0 ;
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20881: LD_INT 35
20883: PPUSH
20884: CALL_OW 67
// p := p + 1 ;
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_VAR 0 3
20897: PUSH
20898: LD_INT 1
20900: PLUS
20901: ST_TO_ADDR
// for i in tmp do
20902: LD_ADDR_VAR 0 1
20906: PUSH
20907: LD_VAR 0 2
20911: PUSH
20912: FOR_IN
20913: IFFALSE 20944
// if GetLives ( i ) < 1000 then
20915: LD_VAR 0 1
20919: PPUSH
20920: CALL_OW 256
20924: PUSH
20925: LD_INT 1000
20927: LESS
20928: IFFALSE 20942
// SetLives ( i , 1000 ) ;
20930: LD_VAR 0 1
20934: PPUSH
20935: LD_INT 1000
20937: PPUSH
20938: CALL_OW 234
20942: GO 20912
20944: POP
20945: POP
// until p > 20 ;
20946: LD_VAR 0 3
20950: PUSH
20951: LD_INT 20
20953: GREATER
20954: IFFALSE 20881
// end ;
20956: PPOPN 3
20958: END
// every 0 0$1 trigger StreamModeActive and sTime do
20959: LD_EXP 32
20963: IFFALSE 20971
20965: PUSH
20966: LD_EXP 83
20970: AND
20971: IFFALSE 21006
20973: GO 20975
20975: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20976: LD_INT 28
20978: PPUSH
20979: LD_OWVAR 2
20983: PPUSH
20984: LD_INT 2
20986: PPUSH
20987: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20991: LD_INT 30
20993: PPUSH
20994: LD_OWVAR 2
20998: PPUSH
20999: LD_INT 2
21001: PPUSH
21002: CALL_OW 322
// end ;
21006: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21007: LD_EXP 32
21011: IFFALSE 21019
21013: PUSH
21014: LD_EXP 84
21018: AND
21019: IFFALSE 21140
21021: GO 21023
21023: DISABLE
21024: LD_INT 0
21026: PPUSH
21027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21028: LD_ADDR_VAR 0 2
21032: PUSH
21033: LD_INT 22
21035: PUSH
21036: LD_OWVAR 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 21
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 3
21057: PUSH
21058: LD_INT 23
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: ST_TO_ADDR
// if not tmp then
21082: LD_VAR 0 2
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21140
// for i in tmp do
21091: LD_ADDR_VAR 0 1
21095: PUSH
21096: LD_VAR 0 2
21100: PUSH
21101: FOR_IN
21102: IFFALSE 21138
// begin if Crawls ( i ) then
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 318
21113: IFFALSE 21124
// ComWalk ( i ) ;
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 138
// SetClass ( i , 2 ) ;
21124: LD_VAR 0 1
21128: PPUSH
21129: LD_INT 2
21131: PPUSH
21132: CALL_OW 336
// end ;
21136: GO 21101
21138: POP
21139: POP
// end ;
21140: PPOPN 2
21142: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21143: LD_EXP 32
21147: IFFALSE 21155
21149: PUSH
21150: LD_EXP 85
21154: AND
21155: IFFALSE 21445
21157: GO 21159
21159: DISABLE
21160: LD_INT 0
21162: PPUSH
21163: PPUSH
21164: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21165: LD_OWVAR 2
21169: PPUSH
21170: LD_INT 9
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: LD_INT 1
21178: PPUSH
21179: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21183: LD_INT 9
21185: PPUSH
21186: LD_OWVAR 2
21190: PPUSH
21191: CALL_OW 343
// uc_side := 9 ;
21195: LD_ADDR_OWVAR 20
21199: PUSH
21200: LD_INT 9
21202: ST_TO_ADDR
// uc_nation := 2 ;
21203: LD_ADDR_OWVAR 21
21207: PUSH
21208: LD_INT 2
21210: ST_TO_ADDR
// hc_name := Dark Warrior ;
21211: LD_ADDR_OWVAR 26
21215: PUSH
21216: LD_STRING Dark Warrior
21218: ST_TO_ADDR
// hc_gallery :=  ;
21219: LD_ADDR_OWVAR 33
21223: PUSH
21224: LD_STRING 
21226: ST_TO_ADDR
// hc_noskilllimit := true ;
21227: LD_ADDR_OWVAR 76
21231: PUSH
21232: LD_INT 1
21234: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21235: LD_ADDR_OWVAR 31
21239: PUSH
21240: LD_INT 30
21242: PUSH
21243: LD_INT 30
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// un := CreateHuman ;
21258: LD_ADDR_VAR 0 3
21262: PUSH
21263: CALL_OW 44
21267: ST_TO_ADDR
// hc_noskilllimit := false ;
21268: LD_ADDR_OWVAR 76
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21276: LD_VAR 0 3
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 51
// ToLua ( playRanger() ) ;
21288: LD_STRING playRanger()
21290: PPUSH
21291: CALL_OW 559
// p := 0 ;
21295: LD_ADDR_VAR 0 2
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21303: LD_INT 35
21305: PPUSH
21306: CALL_OW 67
// p := p + 1 ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_VAR 0 2
21319: PUSH
21320: LD_INT 1
21322: PLUS
21323: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21324: LD_VAR 0 3
21328: PPUSH
21329: CALL_OW 256
21333: PUSH
21334: LD_INT 1000
21336: LESS
21337: IFFALSE 21351
// SetLives ( un , 1000 ) ;
21339: LD_VAR 0 3
21343: PPUSH
21344: LD_INT 1000
21346: PPUSH
21347: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21351: LD_VAR 0 3
21355: PPUSH
21356: LD_INT 81
21358: PUSH
21359: LD_OWVAR 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 91
21370: PUSH
21371: LD_VAR 0 3
21375: PUSH
21376: LD_INT 30
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PPUSH
21388: CALL_OW 69
21392: PPUSH
21393: LD_VAR 0 3
21397: PPUSH
21398: CALL_OW 74
21402: PPUSH
21403: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21407: LD_VAR 0 2
21411: PUSH
21412: LD_INT 80
21414: GREATER
21415: IFTRUE 21428
21417: PUSH
21418: LD_VAR 0 3
21422: PPUSH
21423: CALL_OW 301
21427: OR
21428: IFFALSE 21303
// if un then
21430: LD_VAR 0 3
21434: IFFALSE 21445
// RemoveUnit ( un ) ;
21436: LD_VAR 0 3
21440: PPUSH
21441: CALL_OW 64
// end ;
21445: PPOPN 3
21447: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21448: LD_EXP 86
21452: IFFALSE 21568
21454: GO 21456
21456: DISABLE
21457: LD_INT 0
21459: PPUSH
21460: PPUSH
21461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_INT 81
21469: PUSH
21470: LD_OWVAR 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 21
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: CALL_OW 69
21497: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21498: LD_STRING playComputer()
21500: PPUSH
21501: CALL_OW 559
// if not tmp then
21505: LD_VAR 0 2
21509: NOT
21510: IFFALSE 21514
// exit ;
21512: GO 21568
// for i in tmp do
21514: LD_ADDR_VAR 0 1
21518: PUSH
21519: LD_VAR 0 2
21523: PUSH
21524: FOR_IN
21525: IFFALSE 21566
// for j := 1 to 4 do
21527: LD_ADDR_VAR 0 3
21531: PUSH
21532: DOUBLE
21533: LD_INT 1
21535: DEC
21536: ST_TO_ADDR
21537: LD_INT 4
21539: PUSH
21540: FOR_TO
21541: IFFALSE 21562
// SetSkill ( i , j , 10 ) ;
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_VAR 0 3
21552: PPUSH
21553: LD_INT 10
21555: PPUSH
21556: CALL_OW 237
21560: GO 21540
21562: POP
21563: POP
21564: GO 21524
21566: POP
21567: POP
// end ;
21568: PPOPN 3
21570: END
// every 0 0$1 trigger s30 do var i , tmp ;
21571: LD_EXP 87
21575: IFFALSE 21644
21577: GO 21579
21579: DISABLE
21580: LD_INT 0
21582: PPUSH
21583: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21584: LD_ADDR_VAR 0 2
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_OWVAR 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 69
21605: ST_TO_ADDR
// if not tmp then
21606: LD_VAR 0 2
21610: NOT
21611: IFFALSE 21615
// exit ;
21613: GO 21644
// for i in tmp do
21615: LD_ADDR_VAR 0 1
21619: PUSH
21620: LD_VAR 0 2
21624: PUSH
21625: FOR_IN
21626: IFFALSE 21642
// SetLives ( i , 300 ) ;
21628: LD_VAR 0 1
21632: PPUSH
21633: LD_INT 300
21635: PPUSH
21636: CALL_OW 234
21640: GO 21625
21642: POP
21643: POP
// end ;
21644: PPOPN 2
21646: END
// every 0 0$1 trigger s60 do var i , tmp ;
21647: LD_EXP 88
21651: IFFALSE 21720
21653: GO 21655
21655: DISABLE
21656: LD_INT 0
21658: PPUSH
21659: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21660: LD_ADDR_VAR 0 2
21664: PUSH
21665: LD_INT 22
21667: PUSH
21668: LD_OWVAR 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 2
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21720
// for i in tmp do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: FOR_IN
21702: IFFALSE 21718
// SetLives ( i , 600 ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 600
21711: PPUSH
21712: CALL_OW 234
21716: GO 21701
21718: POP
21719: POP
// end ;
21720: PPOPN 2
21722: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21723: LD_INT 0
21725: PPUSH
// case cmd of 301 :
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 301
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21739
21737: GO 21771
21739: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21740: LD_VAR 0 6
21744: PPUSH
21745: LD_VAR 0 7
21749: PPUSH
21750: LD_VAR 0 8
21754: PPUSH
21755: LD_VAR 0 4
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL 22984 0 5
21769: GO 21892
21771: LD_INT 302
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21816
21779: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21780: LD_VAR 0 6
21784: PPUSH
21785: LD_VAR 0 7
21789: PPUSH
21790: LD_VAR 0 8
21794: PPUSH
21795: LD_VAR 0 9
21799: PPUSH
21800: LD_VAR 0 4
21804: PPUSH
21805: LD_VAR 0 5
21809: PPUSH
21810: CALL 23075 0 6
21814: GO 21892
21816: LD_INT 303
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21861
21824: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21825: LD_VAR 0 6
21829: PPUSH
21830: LD_VAR 0 7
21834: PPUSH
21835: LD_VAR 0 8
21839: PPUSH
21840: LD_VAR 0 9
21844: PPUSH
21845: LD_VAR 0 4
21849: PPUSH
21850: LD_VAR 0 5
21854: PPUSH
21855: CALL 21897 0 6
21859: GO 21892
21861: LD_INT 304
21863: DOUBLE
21864: EQUAL
21865: IFTRUE 21869
21867: GO 21891
21869: POP
// hHackTeleport ( unit , x , y ) ; end ;
21870: LD_VAR 0 2
21874: PPUSH
21875: LD_VAR 0 4
21879: PPUSH
21880: LD_VAR 0 5
21884: PPUSH
21885: CALL 23668 0 3
21889: GO 21892
21891: POP
// end ;
21892: LD_VAR 0 12
21896: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21901: LD_VAR 0 1
21905: PUSH
21906: LD_INT 1
21908: LESS
21909: IFTRUE 21921
21911: PUSH
21912: LD_VAR 0 1
21916: PUSH
21917: LD_INT 3
21919: GREATER
21920: OR
21921: IFTRUE 21939
21923: PUSH
21924: LD_VAR 0 5
21928: PPUSH
21929: LD_VAR 0 6
21933: PPUSH
21934: CALL_OW 428
21938: OR
21939: IFFALSE 21943
// exit ;
21941: GO 22671
// uc_side := your_side ;
21943: LD_ADDR_OWVAR 20
21947: PUSH
21948: LD_OWVAR 2
21952: ST_TO_ADDR
// uc_nation := nation ;
21953: LD_ADDR_OWVAR 21
21957: PUSH
21958: LD_VAR 0 1
21962: ST_TO_ADDR
// bc_level = 1 ;
21963: LD_ADDR_OWVAR 43
21967: PUSH
21968: LD_INT 1
21970: ST_TO_ADDR
// case btype of 1 :
21971: LD_VAR 0 2
21975: PUSH
21976: LD_INT 1
21978: DOUBLE
21979: EQUAL
21980: IFTRUE 21984
21982: GO 21995
21984: POP
// bc_type := b_depot ; 2 :
21985: LD_ADDR_OWVAR 42
21989: PUSH
21990: LD_INT 0
21992: ST_TO_ADDR
21993: GO 22615
21995: LD_INT 2
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22014
22003: POP
// bc_type := b_warehouse ; 3 :
22004: LD_ADDR_OWVAR 42
22008: PUSH
22009: LD_INT 1
22011: ST_TO_ADDR
22012: GO 22615
22014: LD_INT 3
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22033
22022: POP
// bc_type := b_lab ; 4 .. 9 :
22023: LD_ADDR_OWVAR 42
22027: PUSH
22028: LD_INT 6
22030: ST_TO_ADDR
22031: GO 22615
22033: LD_INT 4
22035: DOUBLE
22036: GREATEREQUAL
22037: IFFALSE 22045
22039: LD_INT 9
22041: DOUBLE
22042: LESSEQUAL
22043: IFTRUE 22047
22045: GO 22107
22047: POP
// begin bc_type := b_lab_half ;
22048: LD_ADDR_OWVAR 42
22052: PUSH
22053: LD_INT 7
22055: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22056: LD_ADDR_OWVAR 44
22060: PUSH
22061: LD_INT 10
22063: PUSH
22064: LD_INT 11
22066: PUSH
22067: LD_INT 12
22069: PUSH
22070: LD_INT 15
22072: PUSH
22073: LD_INT 14
22075: PUSH
22076: LD_INT 13
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: PUSH
22087: LD_VAR 0 2
22091: PUSH
22092: LD_INT 3
22094: MINUS
22095: ARRAY
22096: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22097: LD_ADDR_OWVAR 45
22101: PUSH
22102: LD_INT 9
22104: ST_TO_ADDR
// end ; 10 .. 13 :
22105: GO 22615
22107: LD_INT 10
22109: DOUBLE
22110: GREATEREQUAL
22111: IFFALSE 22119
22113: LD_INT 13
22115: DOUBLE
22116: LESSEQUAL
22117: IFTRUE 22121
22119: GO 22198
22121: POP
// begin bc_type := b_lab_full ;
22122: LD_ADDR_OWVAR 42
22126: PUSH
22127: LD_INT 8
22129: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22130: LD_ADDR_OWVAR 44
22134: PUSH
22135: LD_INT 10
22137: PUSH
22138: LD_INT 12
22140: PUSH
22141: LD_INT 14
22143: PUSH
22144: LD_INT 13
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: PUSH
22153: LD_VAR 0 2
22157: PUSH
22158: LD_INT 9
22160: MINUS
22161: ARRAY
22162: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22163: LD_ADDR_OWVAR 45
22167: PUSH
22168: LD_INT 11
22170: PUSH
22171: LD_INT 15
22173: PUSH
22174: LD_INT 12
22176: PUSH
22177: LD_INT 15
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: LD_VAR 0 2
22190: PUSH
22191: LD_INT 9
22193: MINUS
22194: ARRAY
22195: ST_TO_ADDR
// end ; 14 :
22196: GO 22615
22198: LD_INT 14
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22217
22206: POP
// bc_type := b_workshop ; 15 :
22207: LD_ADDR_OWVAR 42
22211: PUSH
22212: LD_INT 2
22214: ST_TO_ADDR
22215: GO 22615
22217: LD_INT 15
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22236
22225: POP
// bc_type := b_factory ; 16 :
22226: LD_ADDR_OWVAR 42
22230: PUSH
22231: LD_INT 3
22233: ST_TO_ADDR
22234: GO 22615
22236: LD_INT 16
22238: DOUBLE
22239: EQUAL
22240: IFTRUE 22244
22242: GO 22255
22244: POP
// bc_type := b_ext_gun ; 17 :
22245: LD_ADDR_OWVAR 42
22249: PUSH
22250: LD_INT 17
22252: ST_TO_ADDR
22253: GO 22615
22255: LD_INT 17
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22291
22263: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22264: LD_ADDR_OWVAR 42
22268: PUSH
22269: LD_INT 19
22271: PUSH
22272: LD_INT 23
22274: PUSH
22275: LD_INT 19
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_VAR 0 1
22287: ARRAY
22288: ST_TO_ADDR
22289: GO 22615
22291: LD_INT 18
22293: DOUBLE
22294: EQUAL
22295: IFTRUE 22299
22297: GO 22310
22299: POP
// bc_type := b_ext_radar ; 19 :
22300: LD_ADDR_OWVAR 42
22304: PUSH
22305: LD_INT 20
22307: ST_TO_ADDR
22308: GO 22615
22310: LD_INT 19
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22329
22318: POP
// bc_type := b_ext_radio ; 20 :
22319: LD_ADDR_OWVAR 42
22323: PUSH
22324: LD_INT 22
22326: ST_TO_ADDR
22327: GO 22615
22329: LD_INT 20
22331: DOUBLE
22332: EQUAL
22333: IFTRUE 22337
22335: GO 22348
22337: POP
// bc_type := b_ext_siberium ; 21 :
22338: LD_ADDR_OWVAR 42
22342: PUSH
22343: LD_INT 21
22345: ST_TO_ADDR
22346: GO 22615
22348: LD_INT 21
22350: DOUBLE
22351: EQUAL
22352: IFTRUE 22356
22354: GO 22367
22356: POP
// bc_type := b_ext_computer ; 22 :
22357: LD_ADDR_OWVAR 42
22361: PUSH
22362: LD_INT 24
22364: ST_TO_ADDR
22365: GO 22615
22367: LD_INT 22
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22375
22373: GO 22386
22375: POP
// bc_type := b_ext_track ; 23 :
22376: LD_ADDR_OWVAR 42
22380: PUSH
22381: LD_INT 16
22383: ST_TO_ADDR
22384: GO 22615
22386: LD_INT 23
22388: DOUBLE
22389: EQUAL
22390: IFTRUE 22394
22392: GO 22405
22394: POP
// bc_type := b_ext_laser ; 24 :
22395: LD_ADDR_OWVAR 42
22399: PUSH
22400: LD_INT 25
22402: ST_TO_ADDR
22403: GO 22615
22405: LD_INT 24
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22424
22413: POP
// bc_type := b_control_tower ; 25 :
22414: LD_ADDR_OWVAR 42
22418: PUSH
22419: LD_INT 36
22421: ST_TO_ADDR
22422: GO 22615
22424: LD_INT 25
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22443
22432: POP
// bc_type := b_breastwork ; 26 :
22433: LD_ADDR_OWVAR 42
22437: PUSH
22438: LD_INT 31
22440: ST_TO_ADDR
22441: GO 22615
22443: LD_INT 26
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22462
22451: POP
// bc_type := b_bunker ; 27 :
22452: LD_ADDR_OWVAR 42
22456: PUSH
22457: LD_INT 32
22459: ST_TO_ADDR
22460: GO 22615
22462: LD_INT 27
22464: DOUBLE
22465: EQUAL
22466: IFTRUE 22470
22468: GO 22481
22470: POP
// bc_type := b_turret ; 28 :
22471: LD_ADDR_OWVAR 42
22475: PUSH
22476: LD_INT 33
22478: ST_TO_ADDR
22479: GO 22615
22481: LD_INT 28
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22500
22489: POP
// bc_type := b_armoury ; 29 :
22490: LD_ADDR_OWVAR 42
22494: PUSH
22495: LD_INT 4
22497: ST_TO_ADDR
22498: GO 22615
22500: LD_INT 29
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22519
22508: POP
// bc_type := b_barracks ; 30 :
22509: LD_ADDR_OWVAR 42
22513: PUSH
22514: LD_INT 5
22516: ST_TO_ADDR
22517: GO 22615
22519: LD_INT 30
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22538
22527: POP
// bc_type := b_solar_power ; 31 :
22528: LD_ADDR_OWVAR 42
22532: PUSH
22533: LD_INT 27
22535: ST_TO_ADDR
22536: GO 22615
22538: LD_INT 31
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22557
22546: POP
// bc_type := b_oil_power ; 32 :
22547: LD_ADDR_OWVAR 42
22551: PUSH
22552: LD_INT 26
22554: ST_TO_ADDR
22555: GO 22615
22557: LD_INT 32
22559: DOUBLE
22560: EQUAL
22561: IFTRUE 22565
22563: GO 22576
22565: POP
// bc_type := b_siberite_power ; 33 :
22566: LD_ADDR_OWVAR 42
22570: PUSH
22571: LD_INT 28
22573: ST_TO_ADDR
22574: GO 22615
22576: LD_INT 33
22578: DOUBLE
22579: EQUAL
22580: IFTRUE 22584
22582: GO 22595
22584: POP
// bc_type := b_oil_mine ; 34 :
22585: LD_ADDR_OWVAR 42
22589: PUSH
22590: LD_INT 29
22592: ST_TO_ADDR
22593: GO 22615
22595: LD_INT 34
22597: DOUBLE
22598: EQUAL
22599: IFTRUE 22603
22601: GO 22614
22603: POP
// bc_type := b_siberite_mine ; end ;
22604: LD_ADDR_OWVAR 42
22608: PUSH
22609: LD_INT 30
22611: ST_TO_ADDR
22612: GO 22615
22614: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22615: LD_ADDR_VAR 0 8
22619: PUSH
22620: LD_VAR 0 5
22624: PPUSH
22625: LD_VAR 0 6
22629: PPUSH
22630: LD_VAR 0 3
22634: PPUSH
22635: CALL_OW 47
22639: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22640: LD_OWVAR 42
22644: PUSH
22645: LD_INT 32
22647: PUSH
22648: LD_INT 33
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: IN
22655: IFFALSE 22671
// PlaceWeaponTurret ( b , weapon ) ;
22657: LD_VAR 0 8
22661: PPUSH
22662: LD_VAR 0 4
22666: PPUSH
22667: CALL_OW 431
// end ;
22671: LD_VAR 0 7
22675: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
22680: PPUSH
22681: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22682: LD_ADDR_VAR 0 4
22686: PUSH
22687: LD_INT 22
22689: PUSH
22690: LD_OWVAR 2
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 30
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 69
22735: ST_TO_ADDR
// if not tmp then
22736: LD_VAR 0 4
22740: NOT
22741: IFFALSE 22745
// exit ;
22743: GO 22804
// for i in tmp do
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_VAR 0 4
22754: PUSH
22755: FOR_IN
22756: IFFALSE 22802
// for j = 1 to 3 do
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: DOUBLE
22764: LD_INT 1
22766: DEC
22767: ST_TO_ADDR
22768: LD_INT 3
22770: PUSH
22771: FOR_TO
22772: IFFALSE 22798
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 274
22783: PPUSH
22784: LD_VAR 0 3
22788: PPUSH
22789: LD_INT 99999
22791: PPUSH
22792: CALL_OW 277
22796: GO 22771
22798: POP
22799: POP
22800: GO 22755
22802: POP
22803: POP
// end ;
22804: LD_VAR 0 1
22808: RET
// export function hHackSetLevel10 ; var i , j ; begin
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
22813: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 21
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PPUSH
22829: CALL_OW 69
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22887
// if IsSelected ( i ) then
22837: LD_VAR 0 2
22841: PPUSH
22842: CALL_OW 306
22846: IFFALSE 22885
// begin for j := 1 to 4 do
22848: LD_ADDR_VAR 0 3
22852: PUSH
22853: DOUBLE
22854: LD_INT 1
22856: DEC
22857: ST_TO_ADDR
22858: LD_INT 4
22860: PUSH
22861: FOR_TO
22862: IFFALSE 22883
// SetSkill ( i , j , 10 ) ;
22864: LD_VAR 0 2
22868: PPUSH
22869: LD_VAR 0 3
22873: PPUSH
22874: LD_INT 10
22876: PPUSH
22877: CALL_OW 237
22881: GO 22861
22883: POP
22884: POP
// end ;
22885: GO 22834
22887: POP
22888: POP
// end ;
22889: LD_VAR 0 1
22893: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
22898: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: PUSH
22935: FOR_IN
22936: IFFALSE 22977
// begin for j := 1 to 4 do
22938: LD_ADDR_VAR 0 3
22942: PUSH
22943: DOUBLE
22944: LD_INT 1
22946: DEC
22947: ST_TO_ADDR
22948: LD_INT 4
22950: PUSH
22951: FOR_TO
22952: IFFALSE 22973
// SetSkill ( i , j , 10 ) ;
22954: LD_VAR 0 2
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: LD_INT 10
22966: PPUSH
22967: CALL_OW 237
22971: GO 22951
22973: POP
22974: POP
// end ;
22975: GO 22935
22977: POP
22978: POP
// end ;
22979: LD_VAR 0 1
22983: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22984: LD_INT 0
22986: PPUSH
// uc_side := your_side ;
22987: LD_ADDR_OWVAR 20
22991: PUSH
22992: LD_OWVAR 2
22996: ST_TO_ADDR
// uc_nation := nation ;
22997: LD_ADDR_OWVAR 21
23001: PUSH
23002: LD_VAR 0 1
23006: ST_TO_ADDR
// InitHc ;
23007: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23011: LD_INT 0
23013: PPUSH
23014: LD_VAR 0 2
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23028: LD_VAR 0 4
23032: PPUSH
23033: LD_VAR 0 5
23037: PPUSH
23038: CALL_OW 428
23042: PUSH
23043: LD_INT 0
23045: EQUAL
23046: IFFALSE 23070
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23048: CALL_OW 44
23052: PPUSH
23053: LD_VAR 0 4
23057: PPUSH
23058: LD_VAR 0 5
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: CALL_OW 48
// end ;
23070: LD_VAR 0 6
23074: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23075: LD_INT 0
23077: PPUSH
23078: PPUSH
// uc_side := your_side ;
23079: LD_ADDR_OWVAR 20
23083: PUSH
23084: LD_OWVAR 2
23088: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23089: LD_VAR 0 1
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: LD_INT 3
23102: PUSH
23103: LD_INT 4
23105: PUSH
23106: LD_INT 5
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: IN
23116: IFFALSE 23128
// uc_nation := nation_american else
23118: LD_ADDR_OWVAR 21
23122: PUSH
23123: LD_INT 1
23125: ST_TO_ADDR
23126: GO 23171
// if chassis in [ 11 , 12 , 13 , 14 ] then
23128: LD_VAR 0 1
23132: PUSH
23133: LD_INT 11
23135: PUSH
23136: LD_INT 12
23138: PUSH
23139: LD_INT 13
23141: PUSH
23142: LD_INT 14
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: IN
23151: IFFALSE 23163
// uc_nation := nation_arabian else
23153: LD_ADDR_OWVAR 21
23157: PUSH
23158: LD_INT 2
23160: ST_TO_ADDR
23161: GO 23171
// uc_nation := nation_russian ;
23163: LD_ADDR_OWVAR 21
23167: PUSH
23168: LD_INT 3
23170: ST_TO_ADDR
// vc_chassis := chassis ;
23171: LD_ADDR_OWVAR 37
23175: PUSH
23176: LD_VAR 0 1
23180: ST_TO_ADDR
// vc_engine := engine ;
23181: LD_ADDR_OWVAR 39
23185: PUSH
23186: LD_VAR 0 2
23190: ST_TO_ADDR
// vc_control := control ;
23191: LD_ADDR_OWVAR 38
23195: PUSH
23196: LD_VAR 0 3
23200: ST_TO_ADDR
// vc_weapon := weapon ;
23201: LD_ADDR_OWVAR 40
23205: PUSH
23206: LD_VAR 0 4
23210: ST_TO_ADDR
// un := CreateVehicle ;
23211: LD_ADDR_VAR 0 8
23215: PUSH
23216: CALL_OW 45
23220: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23221: LD_VAR 0 8
23225: PPUSH
23226: LD_INT 0
23228: PPUSH
23229: LD_INT 5
23231: PPUSH
23232: CALL_OW 12
23236: PPUSH
23237: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23241: LD_VAR 0 8
23245: PPUSH
23246: LD_VAR 0 5
23250: PPUSH
23251: LD_VAR 0 6
23255: PPUSH
23256: LD_INT 1
23258: PPUSH
23259: CALL_OW 48
// end ;
23263: LD_VAR 0 7
23267: RET
// export hInvincible ; every 1 do
23268: GO 23270
23270: DISABLE
// hInvincible := [ ] ;
23271: LD_ADDR_EXP 89
23275: PUSH
23276: EMPTY
23277: ST_TO_ADDR
23278: END
// every 10 do var i ;
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
// begin enable ;
23285: ENABLE
// if not hInvincible then
23286: LD_EXP 89
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23339
// for i in hInvincible do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_EXP 89
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23337
// if GetLives ( i ) < 1000 then
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 256
23317: PUSH
23318: LD_INT 1000
23320: LESS
23321: IFFALSE 23335
// SetLives ( i , 1000 ) ;
23323: LD_VAR 0 1
23327: PPUSH
23328: LD_INT 1000
23330: PPUSH
23331: CALL_OW 234
23335: GO 23305
23337: POP
23338: POP
// end ;
23339: PPOPN 1
23341: END
// export function hHackInvincible ; var i ; begin
23342: LD_INT 0
23344: PPUSH
23345: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23346: LD_ADDR_VAR 0 2
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: LD_INT 21
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: PPUSH
23379: CALL_OW 69
23383: PUSH
23384: FOR_IN
23385: IFFALSE 23446
// if IsSelected ( i ) then
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 306
23396: IFFALSE 23444
// begin if i in hInvincible then
23398: LD_VAR 0 2
23402: PUSH
23403: LD_EXP 89
23407: IN
23408: IFFALSE 23428
// hInvincible := hInvincible diff i else
23410: LD_ADDR_EXP 89
23414: PUSH
23415: LD_EXP 89
23419: PUSH
23420: LD_VAR 0 2
23424: DIFF
23425: ST_TO_ADDR
23426: GO 23444
// hInvincible := hInvincible union i ;
23428: LD_ADDR_EXP 89
23432: PUSH
23433: LD_EXP 89
23437: PUSH
23438: LD_VAR 0 2
23442: UNION
23443: ST_TO_ADDR
// end ;
23444: GO 23384
23446: POP
23447: POP
// end ;
23448: LD_VAR 0 1
23452: RET
// export function hHackInvisible ; var i , j ; begin
23453: LD_INT 0
23455: PPUSH
23456: PPUSH
23457: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: LD_INT 21
23465: PUSH
23466: LD_INT 1
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: PUSH
23478: FOR_IN
23479: IFFALSE 23503
// if IsSelected ( i ) then
23481: LD_VAR 0 2
23485: PPUSH
23486: CALL_OW 306
23490: IFFALSE 23501
// ComForceInvisible ( i ) ;
23492: LD_VAR 0 2
23496: PPUSH
23497: CALL_OW 496
23501: GO 23478
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 1
23509: RET
// export function hHackChangeYourSide ; begin
23510: LD_INT 0
23512: PPUSH
// if your_side = 8 then
23513: LD_OWVAR 2
23517: PUSH
23518: LD_INT 8
23520: EQUAL
23521: IFFALSE 23533
// your_side := 0 else
23523: LD_ADDR_OWVAR 2
23527: PUSH
23528: LD_INT 0
23530: ST_TO_ADDR
23531: GO 23547
// your_side := your_side + 1 ;
23533: LD_ADDR_OWVAR 2
23537: PUSH
23538: LD_OWVAR 2
23542: PUSH
23543: LD_INT 1
23545: PLUS
23546: ST_TO_ADDR
// end ;
23547: LD_VAR 0 1
23551: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23552: LD_INT 0
23554: PPUSH
23555: PPUSH
23556: PPUSH
// for i in all_units do
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: LD_OWVAR 3
23566: PUSH
23567: FOR_IN
23568: IFFALSE 23646
// if IsSelected ( i ) then
23570: LD_VAR 0 2
23574: PPUSH
23575: CALL_OW 306
23579: IFFALSE 23644
// begin j := GetSide ( i ) ;
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_VAR 0 2
23590: PPUSH
23591: CALL_OW 255
23595: ST_TO_ADDR
// if j = 8 then
23596: LD_VAR 0 3
23600: PUSH
23601: LD_INT 8
23603: EQUAL
23604: IFFALSE 23616
// j := 0 else
23606: LD_ADDR_VAR 0 3
23610: PUSH
23611: LD_INT 0
23613: ST_TO_ADDR
23614: GO 23630
// j := j + 1 ;
23616: LD_ADDR_VAR 0 3
23620: PUSH
23621: LD_VAR 0 3
23625: PUSH
23626: LD_INT 1
23628: PLUS
23629: ST_TO_ADDR
// SetSide ( i , j ) ;
23630: LD_VAR 0 2
23634: PPUSH
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 235
// end ;
23644: GO 23567
23646: POP
23647: POP
// end ;
23648: LD_VAR 0 1
23652: RET
// export function hHackFog ; begin
23653: LD_INT 0
23655: PPUSH
// FogOff ( true ) ;
23656: LD_INT 1
23658: PPUSH
23659: CALL_OW 344
// end ;
23663: LD_VAR 0 1
23667: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23668: LD_INT 0
23670: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23671: LD_VAR 0 1
23675: PPUSH
23676: LD_VAR 0 2
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: CALL_OW 483
// CenterOnXY ( x , y ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: CALL_OW 84
// end ;
23710: LD_VAR 0 4
23714: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23715: LD_INT 0
23717: PPUSH
23718: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23719: LD_VAR 0 1
23723: NOT
23724: IFTRUE 23743
23726: PUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 488
23741: NOT
23742: OR
23743: IFTRUE 23778
23745: PUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 266
23755: PUSH
23756: LD_INT 3
23758: NONEQUAL
23759: IFFALSE 23777
23761: PUSH
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 247
23771: PUSH
23772: LD_INT 1
23774: EQUAL
23775: NOT
23776: AND
23777: OR
23778: IFFALSE 23782
// exit ;
23780: GO 24064
// if GetType ( factory ) = unit_human then
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 247
23791: PUSH
23792: LD_INT 1
23794: EQUAL
23795: IFFALSE 23812
// factory := IsInUnit ( factory ) ;
23797: LD_ADDR_VAR 0 1
23801: PUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 310
23811: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 266
23821: PUSH
23822: LD_INT 3
23824: NONEQUAL
23825: IFFALSE 23829
// exit ;
23827: GO 24064
// for i := 1 to Count ( factoryWaypoints ) do
23829: LD_ADDR_VAR 0 5
23833: PUSH
23834: DOUBLE
23835: LD_INT 1
23837: DEC
23838: ST_TO_ADDR
23839: LD_EXP 90
23843: PPUSH
23844: CALL 33597 0 1
23848: PUSH
23849: FOR_TO
23850: IFFALSE 24012
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23852: LD_VAR 0 2
23856: PPUSH
23857: LD_VAR 0 3
23861: PPUSH
23862: CALL_OW 428
23866: PUSH
23867: LD_EXP 90
23871: PUSH
23872: LD_VAR 0 5
23876: ARRAY
23877: PUSH
23878: LD_INT 2
23880: ARRAY
23881: EQUAL
23882: IFFALSE 23914
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23884: LD_ADDR_EXP 90
23888: PUSH
23889: LD_EXP 90
23893: PPUSH
23894: LD_VAR 0 5
23898: PPUSH
23899: CALL_OW 3
23903: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23904: CALL 24069 0 0
// exit ;
23908: POP
23909: POP
23910: GO 24064
// end else
23912: GO 24010
// if factory = factoryWaypoints [ i ] [ 2 ] then
23914: LD_VAR 0 1
23918: PUSH
23919: LD_EXP 90
23923: PUSH
23924: LD_VAR 0 5
23928: ARRAY
23929: PUSH
23930: LD_INT 2
23932: ARRAY
23933: EQUAL
23934: IFFALSE 24010
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23936: LD_ADDR_EXP 90
23940: PUSH
23941: LD_EXP 90
23945: PPUSH
23946: LD_VAR 0 5
23950: PPUSH
23951: CALL_OW 3
23955: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23956: LD_ADDR_EXP 90
23960: PUSH
23961: LD_EXP 90
23965: PPUSH
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 255
23975: PUSH
23976: LD_VAR 0 1
23980: PUSH
23981: LD_VAR 0 2
23985: PUSH
23986: LD_VAR 0 3
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL 69529 0 2
24001: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24002: CALL 24069 0 0
// exit ;
24006: POP
24007: POP
24008: GO 24064
// end ; end ;
24010: GO 23849
24012: POP
24013: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24014: LD_ADDR_EXP 90
24018: PUSH
24019: LD_EXP 90
24023: PPUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 255
24033: PUSH
24034: LD_VAR 0 1
24038: PUSH
24039: LD_VAR 0 2
24043: PUSH
24044: LD_VAR 0 3
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: PPUSH
24055: CALL 69529 0 2
24059: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24060: CALL 24069 0 0
// end ;
24064: LD_VAR 0 4
24068: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24069: LD_INT 0
24071: PPUSH
24072: PPUSH
24073: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24074: LD_STRING resetFactoryWaypoint();
24076: PPUSH
24077: CALL_OW 559
// if factoryWaypoints then
24081: LD_EXP 90
24085: IFFALSE 24206
// begin list := factoryWaypoints ;
24087: LD_ADDR_VAR 0 3
24091: PUSH
24092: LD_EXP 90
24096: ST_TO_ADDR
// for i := 1 to list do
24097: LD_ADDR_VAR 0 2
24101: PUSH
24102: DOUBLE
24103: LD_INT 1
24105: DEC
24106: ST_TO_ADDR
24107: LD_VAR 0 3
24111: PUSH
24112: FOR_TO
24113: IFFALSE 24204
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24115: LD_STRING setFactoryWaypointXY(
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: LD_VAR 0 2
24127: ARRAY
24128: PUSH
24129: LD_INT 1
24131: ARRAY
24132: STR
24133: PUSH
24134: LD_STRING ,
24136: STR
24137: PUSH
24138: LD_VAR 0 3
24142: PUSH
24143: LD_VAR 0 2
24147: ARRAY
24148: PUSH
24149: LD_INT 2
24151: ARRAY
24152: STR
24153: PUSH
24154: LD_STRING ,
24156: STR
24157: PUSH
24158: LD_VAR 0 3
24162: PUSH
24163: LD_VAR 0 2
24167: ARRAY
24168: PUSH
24169: LD_INT 3
24171: ARRAY
24172: STR
24173: PUSH
24174: LD_STRING ,
24176: STR
24177: PUSH
24178: LD_VAR 0 3
24182: PUSH
24183: LD_VAR 0 2
24187: ARRAY
24188: PUSH
24189: LD_INT 4
24191: ARRAY
24192: STR
24193: PUSH
24194: LD_STRING )
24196: STR
24197: PPUSH
24198: CALL_OW 559
24202: GO 24112
24204: POP
24205: POP
// end ; end ;
24206: LD_VAR 0 1
24210: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24211: LD_INT 0
24213: PPUSH
// if HexInfo ( x , y ) = warehouse then
24214: LD_VAR 0 2
24218: PPUSH
24219: LD_VAR 0 3
24223: PPUSH
24224: CALL_OW 428
24228: PUSH
24229: LD_VAR 0 1
24233: EQUAL
24234: IFFALSE 24261
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24236: LD_ADDR_EXP 92
24240: PUSH
24241: LD_EXP 92
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: LD_INT 0
24253: PPUSH
24254: CALL_OW 1
24258: ST_TO_ADDR
24259: GO 24312
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24261: LD_ADDR_EXP 92
24265: PUSH
24266: LD_EXP 92
24270: PPUSH
24271: LD_VAR 0 1
24275: PPUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 255
24285: PUSH
24286: LD_VAR 0 1
24290: PUSH
24291: LD_VAR 0 2
24295: PUSH
24296: LD_VAR 0 3
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 1
24311: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24312: CALL 24321 0 0
// end ;
24316: LD_VAR 0 4
24320: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24321: LD_INT 0
24323: PPUSH
24324: PPUSH
24325: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24326: LD_STRING resetWarehouseGatheringPoints();
24328: PPUSH
24329: CALL_OW 559
// if warehouseGatheringPoints then
24333: LD_EXP 92
24337: IFFALSE 24463
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_EXP 92
24348: PPUSH
24349: CALL 73463 0 1
24353: ST_TO_ADDR
// for i := 1 to list do
24354: LD_ADDR_VAR 0 2
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 3
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24461
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24372: LD_STRING setWarehouseGatheringPointXY(
24374: PUSH
24375: LD_VAR 0 3
24379: PUSH
24380: LD_VAR 0 2
24384: ARRAY
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: STR
24390: PUSH
24391: LD_STRING ,
24393: STR
24394: PUSH
24395: LD_VAR 0 3
24399: PUSH
24400: LD_VAR 0 2
24404: ARRAY
24405: PUSH
24406: LD_INT 2
24408: ARRAY
24409: STR
24410: PUSH
24411: LD_STRING ,
24413: STR
24414: PUSH
24415: LD_VAR 0 3
24419: PUSH
24420: LD_VAR 0 2
24424: ARRAY
24425: PUSH
24426: LD_INT 3
24428: ARRAY
24429: STR
24430: PUSH
24431: LD_STRING ,
24433: STR
24434: PUSH
24435: LD_VAR 0 3
24439: PUSH
24440: LD_VAR 0 2
24444: ARRAY
24445: PUSH
24446: LD_INT 4
24448: ARRAY
24449: STR
24450: PUSH
24451: LD_STRING )
24453: STR
24454: PPUSH
24455: CALL_OW 559
24459: GO 24369
24461: POP
24462: POP
// end ; end ;
24463: LD_VAR 0 1
24467: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24468: LD_EXP 92
24472: IFFALSE 25167
24474: GO 24476
24476: DISABLE
24477: LD_INT 0
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
// begin enable ;
24488: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_EXP 92
24498: PPUSH
24499: CALL 73463 0 1
24503: ST_TO_ADDR
// if not list then
24504: LD_VAR 0 3
24508: NOT
24509: IFFALSE 24513
// exit ;
24511: GO 25167
// for i := 1 to list do
24513: LD_ADDR_VAR 0 1
24517: PUSH
24518: DOUBLE
24519: LD_INT 1
24521: DEC
24522: ST_TO_ADDR
24523: LD_VAR 0 3
24527: PUSH
24528: FOR_TO
24529: IFFALSE 25165
// begin depot := list [ i ] [ 2 ] ;
24531: LD_ADDR_VAR 0 8
24535: PUSH
24536: LD_VAR 0 3
24540: PUSH
24541: LD_VAR 0 1
24545: ARRAY
24546: PUSH
24547: LD_INT 2
24549: ARRAY
24550: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24551: LD_ADDR_VAR 0 5
24555: PUSH
24556: LD_VAR 0 3
24560: PUSH
24561: LD_VAR 0 1
24565: ARRAY
24566: PUSH
24567: LD_INT 1
24569: ARRAY
24570: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24571: LD_VAR 0 8
24575: PPUSH
24576: CALL_OW 301
24580: IFTRUE 24599
24582: PUSH
24583: LD_VAR 0 5
24587: PUSH
24588: LD_VAR 0 8
24592: PPUSH
24593: CALL_OW 255
24597: NONEQUAL
24598: OR
24599: IFFALSE 24628
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24601: LD_ADDR_EXP 92
24605: PUSH
24606: LD_EXP 92
24610: PPUSH
24611: LD_VAR 0 8
24615: PPUSH
24616: LD_INT 0
24618: PPUSH
24619: CALL_OW 1
24623: ST_TO_ADDR
// exit ;
24624: POP
24625: POP
24626: GO 25167
// end ; x := list [ i ] [ 3 ] ;
24628: LD_ADDR_VAR 0 6
24632: PUSH
24633: LD_VAR 0 3
24637: PUSH
24638: LD_VAR 0 1
24642: ARRAY
24643: PUSH
24644: LD_INT 3
24646: ARRAY
24647: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24648: LD_ADDR_VAR 0 7
24652: PUSH
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 1
24662: ARRAY
24663: PUSH
24664: LD_INT 4
24666: ARRAY
24667: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24668: LD_ADDR_VAR 0 9
24672: PUSH
24673: LD_VAR 0 6
24677: PPUSH
24678: LD_VAR 0 7
24682: PPUSH
24683: LD_INT 16
24685: PPUSH
24686: CALL 72037 0 3
24690: ST_TO_ADDR
// if not cratesNearbyPoint then
24691: LD_VAR 0 9
24695: NOT
24696: IFFALSE 24702
// exit ;
24698: POP
24699: POP
24700: GO 25167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_INT 22
24709: PUSH
24710: LD_VAR 0 5
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 3
24721: PUSH
24722: LD_INT 60
24724: PUSH
24725: EMPTY
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 91
24734: PUSH
24735: LD_VAR 0 8
24739: PUSH
24740: LD_INT 6
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 25
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 25
24763: PUSH
24764: LD_INT 16
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: PUSH
24787: LD_VAR 0 8
24791: PPUSH
24792: CALL_OW 313
24796: PPUSH
24797: LD_INT 3
24799: PUSH
24800: LD_INT 60
24802: PUSH
24803: EMPTY
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 25
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 25
24825: PUSH
24826: LD_INT 16
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PPUSH
24842: CALL_OW 72
24846: UNION
24847: ST_TO_ADDR
// if tmp then
24848: LD_VAR 0 4
24852: IFFALSE 24932
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24854: LD_ADDR_VAR 0 4
24858: PUSH
24859: LD_VAR 0 4
24863: PPUSH
24864: LD_INT 3
24866: PPUSH
24867: CALL 69844 0 2
24871: ST_TO_ADDR
// for j in tmp do
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_VAR 0 4
24881: PUSH
24882: FOR_IN
24883: IFFALSE 24926
// begin if IsInUnit ( j ) then
24885: LD_VAR 0 2
24889: PPUSH
24890: CALL_OW 310
24894: IFFALSE 24905
// ComExit ( j ) ;
24896: LD_VAR 0 2
24900: PPUSH
24901: CALL 69927 0 1
// AddComCollect ( j , x , y ) ;
24905: LD_VAR 0 2
24909: PPUSH
24910: LD_VAR 0 6
24914: PPUSH
24915: LD_VAR 0 7
24919: PPUSH
24920: CALL_OW 177
// end ;
24924: GO 24882
24926: POP
24927: POP
// exit ;
24928: POP
24929: POP
24930: GO 25167
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: LD_INT 22
24939: PUSH
24940: LD_VAR 0 5
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 91
24951: PUSH
24952: LD_VAR 0 8
24956: PUSH
24957: LD_INT 8
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 34
24970: PUSH
24971: LD_INT 12
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 34
24980: PUSH
24981: LD_INT 51
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 34
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 34
25000: PUSH
25001: LD_INT 89
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 69
25024: ST_TO_ADDR
// if tmp then
25025: LD_VAR 0 4
25029: IFFALSE 25163
// begin for j in tmp do
25031: LD_ADDR_VAR 0 2
25035: PUSH
25036: LD_VAR 0 4
25040: PUSH
25041: FOR_IN
25042: IFFALSE 25161
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25044: LD_VAR 0 2
25048: PPUSH
25049: CALL_OW 262
25053: PUSH
25054: LD_INT 3
25056: EQUAL
25057: IFTRUE 25074
25059: PUSH
25060: LD_VAR 0 2
25064: PPUSH
25065: CALL_OW 261
25069: PUSH
25070: LD_INT 20
25072: GREATER
25073: OR
25074: IFFALSE 25088
25076: PUSH
25077: LD_VAR 0 2
25081: PPUSH
25082: CALL_OW 314
25086: NOT
25087: AND
25088: IFFALSE 25118
25090: PUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: CALL_OW 263
25100: PUSH
25101: LD_INT 1
25103: NONEQUAL
25104: IFTRUE 25117
25106: PUSH
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 311
25116: OR
25117: AND
25118: IFFALSE 25159
// begin ComCollect ( j , x , y ) ;
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 6
25129: PPUSH
25130: LD_VAR 0 7
25134: PPUSH
25135: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25139: LD_VAR 0 2
25143: PPUSH
25144: LD_VAR 0 8
25148: PPUSH
25149: CALL_OW 172
// exit ;
25153: POP
25154: POP
25155: POP
25156: POP
25157: GO 25167
// end ;
25159: GO 25041
25161: POP
25162: POP
// end ; end ;
25163: GO 24528
25165: POP
25166: POP
// end ; end_of_file
25167: PPOPN 9
25169: END
// export function SOS_UnitDestroyed ( un ) ; begin
25170: LD_INT 0
25172: PPUSH
// ComRadiation ( un ) ;
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL 26259 0 1
// end ;
25182: LD_VAR 0 2
25186: RET
// export function SOS_UnitKamikazed ( un ) ; begin
25187: LD_INT 0
25189: PPUSH
// ComRadiation ( un ) ;
25190: LD_VAR 0 1
25194: PPUSH
25195: CALL 26259 0 1
// end ;
25199: LD_VAR 0 2
25203: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25204: LD_INT 0
25206: PPUSH
// end ;
25207: LD_VAR 0 4
25211: RET
// export function SOS_Command ( cmd ) ; begin
25212: LD_INT 0
25214: PPUSH
// end ;
25215: LD_VAR 0 2
25219: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25220: LD_INT 0
25222: PPUSH
// end ;
25223: LD_VAR 0 6
25227: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
25228: LD_INT 0
25230: PPUSH
25231: PPUSH
25232: PPUSH
25233: PPUSH
// if not vehicle or not factory then
25234: LD_VAR 0 1
25238: NOT
25239: IFTRUE 25248
25241: PUSH
25242: LD_VAR 0 2
25246: NOT
25247: OR
25248: IFFALSE 25252
// exit ;
25250: GO 25834
// if not factoryWaypoints then
25252: LD_EXP 90
25256: NOT
25257: IFFALSE 25261
// exit ;
25259: GO 25834
// for i := 1 to Count ( factoryWaypoints ) do
25261: LD_ADDR_VAR 0 4
25265: PUSH
25266: DOUBLE
25267: LD_INT 1
25269: DEC
25270: ST_TO_ADDR
25271: LD_EXP 90
25275: PPUSH
25276: CALL 33597 0 1
25280: PUSH
25281: FOR_TO
25282: IFFALSE 25832
// if factoryWaypoints [ i ] [ 2 ] = factory then
25284: LD_EXP 90
25288: PUSH
25289: LD_VAR 0 4
25293: ARRAY
25294: PUSH
25295: LD_INT 2
25297: ARRAY
25298: PUSH
25299: LD_VAR 0 2
25303: EQUAL
25304: IFFALSE 25830
// begin if GetControl ( vehicle ) = control_manual then
25306: LD_VAR 0 1
25310: PPUSH
25311: CALL_OW 263
25315: PUSH
25316: LD_INT 1
25318: EQUAL
25319: IFFALSE 25683
// begin driver := IsDrivenBy ( vehicle ) ;
25321: LD_ADDR_VAR 0 5
25325: PUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 311
25335: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
25336: LD_VAR 0 5
25340: PUSH
25341: LD_EXP 91
25345: IN
25346: IFTRUE 25360
25348: PUSH
25349: LD_VAR 0 1
25353: PUSH
25354: LD_EXP 91
25358: IN
25359: OR
25360: IFFALSE 25366
// exit ;
25362: POP
25363: POP
25364: GO 25834
// if not HasTask ( driver ) then
25366: LD_VAR 0 5
25370: PPUSH
25371: CALL_OW 314
25375: NOT
25376: IFFALSE 25681
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25378: LD_ADDR_EXP 91
25382: PUSH
25383: LD_EXP 91
25387: PPUSH
25388: LD_VAR 0 5
25392: PPUSH
25393: CALL 69529 0 2
25397: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25398: LD_ADDR_EXP 91
25402: PUSH
25403: LD_EXP 91
25407: PPUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL 69529 0 2
25417: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25418: LD_ADDR_VAR 0 6
25422: PUSH
25423: LD_EXP 90
25427: PUSH
25428: LD_VAR 0 4
25432: ARRAY
25433: PUSH
25434: LD_INT 3
25436: ARRAY
25437: PPUSH
25438: LD_EXP 90
25442: PUSH
25443: LD_VAR 0 4
25447: ARRAY
25448: PUSH
25449: LD_INT 4
25451: ARRAY
25452: PPUSH
25453: CALL_OW 428
25457: ST_TO_ADDR
// if hex then
25458: LD_VAR 0 6
25462: IFFALSE 25480
// ComMoveUnit ( driver , hex ) else
25464: LD_VAR 0 5
25468: PPUSH
25469: LD_VAR 0 6
25473: PPUSH
25474: CALL_OW 112
25478: GO 25564
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25480: LD_VAR 0 1
25484: PPUSH
25485: LD_EXP 90
25489: PUSH
25490: LD_VAR 0 4
25494: ARRAY
25495: PUSH
25496: LD_INT 3
25498: ARRAY
25499: PPUSH
25500: LD_EXP 90
25504: PUSH
25505: LD_VAR 0 4
25509: ARRAY
25510: PUSH
25511: LD_INT 4
25513: ARRAY
25514: PPUSH
25515: CALL_OW 297
25519: PUSH
25520: LD_INT 0
25522: GREATER
25523: IFFALSE 25564
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25525: LD_VAR 0 5
25529: PPUSH
25530: LD_EXP 90
25534: PUSH
25535: LD_VAR 0 4
25539: ARRAY
25540: PUSH
25541: LD_INT 3
25543: ARRAY
25544: PPUSH
25545: LD_EXP 90
25549: PUSH
25550: LD_VAR 0 4
25554: ARRAY
25555: PUSH
25556: LD_INT 4
25558: ARRAY
25559: PPUSH
25560: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25564: LD_VAR 0 5
25568: PPUSH
25569: CALL_OW 181
// if Multiplayer then
25573: LD_OWVAR 4
25577: IFFALSE 25626
// begin repeat wait ( 10 ) ;
25579: LD_INT 10
25581: PPUSH
25582: CALL_OW 67
// until not IsInUnit ( driver ) ;
25586: LD_VAR 0 5
25590: PPUSH
25591: CALL_OW 310
25595: NOT
25596: IFFALSE 25579
// if not HasTask ( driver ) then
25598: LD_VAR 0 5
25602: PPUSH
25603: CALL_OW 314
25607: NOT
25608: IFFALSE 25624
// ComEnterUnit ( driver , factory ) ;
25610: LD_VAR 0 5
25614: PPUSH
25615: LD_VAR 0 2
25619: PPUSH
25620: CALL_OW 120
// end else
25624: GO 25640
// AddComEnterUnit ( driver , factory ) ;
25626: LD_VAR 0 5
25630: PPUSH
25631: LD_VAR 0 2
25635: PPUSH
25636: CALL_OW 180
// wait ( 0 0$1 ) ;
25640: LD_INT 35
25642: PPUSH
25643: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
25647: LD_ADDR_EXP 91
25651: PUSH
25652: LD_EXP 91
25656: PUSH
25657: LD_VAR 0 5
25661: DIFF
25662: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
25663: LD_ADDR_EXP 91
25667: PUSH
25668: LD_EXP 91
25672: PUSH
25673: LD_VAR 0 1
25677: DIFF
25678: ST_TO_ADDR
// break ;
25679: GO 25832
// end ; end else
25681: GO 25830
// if GetControl ( vehicle ) = control_remote then
25683: LD_VAR 0 1
25687: PPUSH
25688: CALL_OW 263
25692: PUSH
25693: LD_INT 2
25695: EQUAL
25696: IFFALSE 25782
// begin wait ( 0 0$2 ) ;
25698: LD_INT 70
25700: PPUSH
25701: CALL_OW 67
// repeat wait ( 10 ) ;
25705: LD_INT 10
25707: PPUSH
25708: CALL_OW 67
// Connect ( vehicle ) ;
25712: LD_VAR 0 1
25716: PPUSH
25717: CALL 39841 0 1
// until IsControledBy ( vehicle ) ;
25721: LD_VAR 0 1
25725: PPUSH
25726: CALL_OW 312
25730: IFFALSE 25705
// wait ( 10 ) ;
25732: LD_INT 10
25734: PPUSH
25735: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25739: LD_VAR 0 1
25743: PPUSH
25744: LD_EXP 90
25748: PUSH
25749: LD_VAR 0 4
25753: ARRAY
25754: PUSH
25755: LD_INT 3
25757: ARRAY
25758: PPUSH
25759: LD_EXP 90
25763: PUSH
25764: LD_VAR 0 4
25768: ARRAY
25769: PUSH
25770: LD_INT 4
25772: ARRAY
25773: PPUSH
25774: CALL_OW 111
// break ;
25778: GO 25832
// end else
25780: GO 25830
// begin wait ( 0 0$3 ) ;
25782: LD_INT 105
25784: PPUSH
25785: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25789: LD_VAR 0 1
25793: PPUSH
25794: LD_EXP 90
25798: PUSH
25799: LD_VAR 0 4
25803: ARRAY
25804: PUSH
25805: LD_INT 3
25807: ARRAY
25808: PPUSH
25809: LD_EXP 90
25813: PUSH
25814: LD_VAR 0 4
25818: ARRAY
25819: PUSH
25820: LD_INT 4
25822: ARRAY
25823: PPUSH
25824: CALL_OW 111
// break ;
25828: GO 25832
// end ; end ;
25830: GO 25281
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 3
25838: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25839: LD_INT 0
25841: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25842: LD_VAR 0 1
25846: PUSH
25847: LD_INT 250
25849: EQUAL
25850: IFFALSE 25867
25852: PUSH
25853: LD_VAR 0 2
25857: PPUSH
25858: CALL_OW 264
25862: PUSH
25863: LD_INT 81
25865: EQUAL
25866: AND
25867: IFFALSE 25888
// MinerPlaceMine ( unit , x , y ) ;
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_VAR 0 4
25878: PPUSH
25879: LD_VAR 0 5
25883: PPUSH
25884: CALL 29020 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25888: LD_VAR 0 1
25892: PUSH
25893: LD_INT 251
25895: EQUAL
25896: IFFALSE 25913
25898: PUSH
25899: LD_VAR 0 2
25903: PPUSH
25904: CALL_OW 264
25908: PUSH
25909: LD_INT 81
25911: EQUAL
25912: AND
25913: IFFALSE 25934
// MinerDetonateMine ( unit , x , y ) ;
25915: LD_VAR 0 2
25919: PPUSH
25920: LD_VAR 0 4
25924: PPUSH
25925: LD_VAR 0 5
25929: PPUSH
25930: CALL 29299 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25934: LD_VAR 0 1
25938: PUSH
25939: LD_INT 252
25941: EQUAL
25942: IFFALSE 25959
25944: PUSH
25945: LD_VAR 0 2
25949: PPUSH
25950: CALL_OW 264
25954: PUSH
25955: LD_INT 81
25957: EQUAL
25958: AND
25959: IFFALSE 25980
// MinerCreateMinefield ( unit , x , y ) ;
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_VAR 0 4
25970: PPUSH
25971: LD_VAR 0 5
25975: PPUSH
25976: CALL 29718 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25980: LD_VAR 0 1
25984: PUSH
25985: LD_INT 253
25987: EQUAL
25988: IFFALSE 26005
25990: PUSH
25991: LD_VAR 0 2
25995: PPUSH
25996: CALL_OW 257
26000: PUSH
26001: LD_INT 5
26003: EQUAL
26004: AND
26005: IFFALSE 26026
// ComBinocular ( unit , x , y ) ;
26007: LD_VAR 0 2
26011: PPUSH
26012: LD_VAR 0 4
26016: PPUSH
26017: LD_VAR 0 5
26021: PPUSH
26022: CALL 30093 0 3
// if selectedUnit then
26026: LD_VAR 0 3
26030: IFFALSE 26090
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26032: LD_VAR 0 1
26036: PUSH
26037: LD_INT 254
26039: EQUAL
26040: IFFALSE 26057
26042: PUSH
26043: LD_VAR 0 2
26047: PPUSH
26048: CALL_OW 264
26052: PUSH
26053: LD_INT 99
26055: EQUAL
26056: AND
26057: IFFALSE 26074
26059: PUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 263
26069: PUSH
26070: LD_INT 3
26072: EQUAL
26073: AND
26074: IFFALSE 26090
// HackDestroyVehicle ( unit , selectedUnit ) ;
26076: LD_VAR 0 2
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: CALL 28380 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26090: LD_VAR 0 1
26094: PUSH
26095: LD_INT 255
26097: EQUAL
26098: IFFALSE 26122
26100: PUSH
26101: LD_VAR 0 2
26105: PPUSH
26106: CALL_OW 264
26110: PUSH
26111: LD_INT 14
26113: PUSH
26114: LD_INT 53
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: IN
26121: AND
26122: IFFALSE 26140
26124: PUSH
26125: LD_VAR 0 4
26129: PPUSH
26130: LD_VAR 0 5
26134: PPUSH
26135: CALL_OW 488
26139: AND
26140: IFFALSE 26164
// CutTreeXYR ( unit , x , y , 12 ) ;
26142: LD_VAR 0 2
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: LD_VAR 0 5
26156: PPUSH
26157: LD_INT 12
26159: PPUSH
26160: CALL 26355 0 4
// if cmd = 256 then
26164: LD_VAR 0 1
26168: PUSH
26169: LD_INT 256
26171: EQUAL
26172: IFFALSE 26193
// SetFactoryWaypoint ( unit , x , y ) ;
26174: LD_VAR 0 2
26178: PPUSH
26179: LD_VAR 0 4
26183: PPUSH
26184: LD_VAR 0 5
26188: PPUSH
26189: CALL 23715 0 3
// if cmd = 257 then
26193: LD_VAR 0 1
26197: PUSH
26198: LD_INT 257
26200: EQUAL
26201: IFFALSE 26222
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26203: LD_VAR 0 2
26207: PPUSH
26208: LD_VAR 0 4
26212: PPUSH
26213: LD_VAR 0 5
26217: PPUSH
26218: CALL 24211 0 3
// if cmd = 258 then
26222: LD_VAR 0 1
26226: PUSH
26227: LD_INT 258
26229: EQUAL
26230: IFFALSE 26254
// BurnTreeXYR ( unit , x , y , 8 ) ;
26232: LD_VAR 0 2
26236: PPUSH
26237: LD_VAR 0 4
26241: PPUSH
26242: LD_VAR 0 5
26246: PPUSH
26247: LD_INT 8
26249: PPUSH
26250: CALL 26755 0 4
// end ;
26254: LD_VAR 0 6
26258: RET
// export function ComRadiation ( un ) ; var eff ; begin
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 264
26272: PUSH
26273: LD_INT 91
26275: NONEQUAL
26276: IFFALSE 26280
// exit ;
26278: GO 26350
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26280: LD_INT 68
26282: PPUSH
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 255
26292: PPUSH
26293: CALL_OW 321
26297: PUSH
26298: LD_INT 2
26300: EQUAL
26301: IFFALSE 26313
// eff := 50 else
26303: LD_ADDR_VAR 0 3
26307: PUSH
26308: LD_INT 50
26310: ST_TO_ADDR
26311: GO 26321
// eff := 25 ;
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_INT 25
26320: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 250
26330: PPUSH
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 251
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 495
// end ;
26350: LD_VAR 0 2
26354: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26355: LD_INT 0
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26366: LD_VAR 0 1
26370: PPUSH
26371: CALL_OW 302
26375: NOT
26376: IFTRUE 26395
26378: PUSH
26379: LD_VAR 0 2
26383: PPUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: CALL_OW 488
26393: NOT
26394: OR
26395: IFTRUE 26404
26397: PUSH
26398: LD_VAR 0 4
26402: NOT
26403: OR
26404: IFFALSE 26408
// exit ;
26406: GO 26750
// list := [ ] ;
26408: LD_ADDR_VAR 0 13
26412: PUSH
26413: EMPTY
26414: ST_TO_ADDR
// if x - r < 0 then
26415: LD_VAR 0 2
26419: PUSH
26420: LD_VAR 0 4
26424: MINUS
26425: PUSH
26426: LD_INT 0
26428: LESS
26429: IFFALSE 26441
// min_x := 0 else
26431: LD_ADDR_VAR 0 7
26435: PUSH
26436: LD_INT 0
26438: ST_TO_ADDR
26439: GO 26457
// min_x := x - r ;
26441: LD_ADDR_VAR 0 7
26445: PUSH
26446: LD_VAR 0 2
26450: PUSH
26451: LD_VAR 0 4
26455: MINUS
26456: ST_TO_ADDR
// if y - r < 0 then
26457: LD_VAR 0 3
26461: PUSH
26462: LD_VAR 0 4
26466: MINUS
26467: PUSH
26468: LD_INT 0
26470: LESS
26471: IFFALSE 26483
// min_y := 0 else
26473: LD_ADDR_VAR 0 8
26477: PUSH
26478: LD_INT 0
26480: ST_TO_ADDR
26481: GO 26499
// min_y := y - r ;
26483: LD_ADDR_VAR 0 8
26487: PUSH
26488: LD_VAR 0 3
26492: PUSH
26493: LD_VAR 0 4
26497: MINUS
26498: ST_TO_ADDR
// max_x := x + r ;
26499: LD_ADDR_VAR 0 9
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: LD_VAR 0 4
26513: PLUS
26514: ST_TO_ADDR
// max_y := y + r ;
26515: LD_ADDR_VAR 0 10
26519: PUSH
26520: LD_VAR 0 3
26524: PUSH
26525: LD_VAR 0 4
26529: PLUS
26530: ST_TO_ADDR
// for _x = min_x to max_x do
26531: LD_ADDR_VAR 0 11
26535: PUSH
26536: DOUBLE
26537: LD_VAR 0 7
26541: DEC
26542: ST_TO_ADDR
26543: LD_VAR 0 9
26547: PUSH
26548: FOR_TO
26549: IFFALSE 26668
// for _y = min_y to max_y do
26551: LD_ADDR_VAR 0 12
26555: PUSH
26556: DOUBLE
26557: LD_VAR 0 8
26561: DEC
26562: ST_TO_ADDR
26563: LD_VAR 0 10
26567: PUSH
26568: FOR_TO
26569: IFFALSE 26664
// begin if not ValidHex ( _x , _y ) then
26571: LD_VAR 0 11
26575: PPUSH
26576: LD_VAR 0 12
26580: PPUSH
26581: CALL_OW 488
26585: NOT
26586: IFFALSE 26590
// continue ;
26588: GO 26568
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26590: LD_VAR 0 11
26594: PPUSH
26595: LD_VAR 0 12
26599: PPUSH
26600: CALL_OW 351
26604: IFFALSE 26622
26606: PUSH
26607: LD_VAR 0 11
26611: PPUSH
26612: LD_VAR 0 12
26616: PPUSH
26617: CALL_OW 554
26621: AND
26622: IFFALSE 26662
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26624: LD_ADDR_VAR 0 13
26628: PUSH
26629: LD_VAR 0 13
26633: PPUSH
26634: LD_VAR 0 13
26638: PUSH
26639: LD_INT 1
26641: PLUS
26642: PPUSH
26643: LD_VAR 0 11
26647: PUSH
26648: LD_VAR 0 12
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PPUSH
26657: CALL_OW 2
26661: ST_TO_ADDR
// end ;
26662: GO 26568
26664: POP
26665: POP
26666: GO 26548
26668: POP
26669: POP
// if not list then
26670: LD_VAR 0 13
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 26750
// for i in list do
26679: LD_ADDR_VAR 0 6
26683: PUSH
26684: LD_VAR 0 13
26688: PUSH
26689: FOR_IN
26690: IFFALSE 26748
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26692: LD_VAR 0 1
26696: PPUSH
26697: LD_STRING M
26699: PUSH
26700: LD_VAR 0 6
26704: PUSH
26705: LD_INT 1
26707: ARRAY
26708: PUSH
26709: LD_VAR 0 6
26713: PUSH
26714: LD_INT 2
26716: ARRAY
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: PPUSH
26742: CALL_OW 447
26746: GO 26689
26748: POP
26749: POP
// end ;
26750: LD_VAR 0 5
26754: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 302
26776: NOT
26777: IFTRUE 26796
26779: PUSH
26780: LD_VAR 0 2
26784: PPUSH
26785: LD_VAR 0 3
26789: PPUSH
26790: CALL_OW 488
26794: NOT
26795: OR
26796: IFTRUE 26805
26798: PUSH
26799: LD_VAR 0 4
26803: NOT
26804: OR
26805: IFFALSE 26809
// exit ;
26807: GO 27326
// list := [ ] ;
26809: LD_ADDR_VAR 0 13
26813: PUSH
26814: EMPTY
26815: ST_TO_ADDR
// if x - r < 0 then
26816: LD_VAR 0 2
26820: PUSH
26821: LD_VAR 0 4
26825: MINUS
26826: PUSH
26827: LD_INT 0
26829: LESS
26830: IFFALSE 26842
// min_x := 0 else
26832: LD_ADDR_VAR 0 7
26836: PUSH
26837: LD_INT 0
26839: ST_TO_ADDR
26840: GO 26858
// min_x := x - r ;
26842: LD_ADDR_VAR 0 7
26846: PUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_VAR 0 4
26856: MINUS
26857: ST_TO_ADDR
// if y - r < 0 then
26858: LD_VAR 0 3
26862: PUSH
26863: LD_VAR 0 4
26867: MINUS
26868: PUSH
26869: LD_INT 0
26871: LESS
26872: IFFALSE 26884
// min_y := 0 else
26874: LD_ADDR_VAR 0 8
26878: PUSH
26879: LD_INT 0
26881: ST_TO_ADDR
26882: GO 26900
// min_y := y - r ;
26884: LD_ADDR_VAR 0 8
26888: PUSH
26889: LD_VAR 0 3
26893: PUSH
26894: LD_VAR 0 4
26898: MINUS
26899: ST_TO_ADDR
// max_x := x + r ;
26900: LD_ADDR_VAR 0 9
26904: PUSH
26905: LD_VAR 0 2
26909: PUSH
26910: LD_VAR 0 4
26914: PLUS
26915: ST_TO_ADDR
// max_y := y + r ;
26916: LD_ADDR_VAR 0 10
26920: PUSH
26921: LD_VAR 0 3
26925: PUSH
26926: LD_VAR 0 4
26930: PLUS
26931: ST_TO_ADDR
// for _x = min_x to max_x do
26932: LD_ADDR_VAR 0 11
26936: PUSH
26937: DOUBLE
26938: LD_VAR 0 7
26942: DEC
26943: ST_TO_ADDR
26944: LD_VAR 0 9
26948: PUSH
26949: FOR_TO
26950: IFFALSE 27069
// for _y = min_y to max_y do
26952: LD_ADDR_VAR 0 12
26956: PUSH
26957: DOUBLE
26958: LD_VAR 0 8
26962: DEC
26963: ST_TO_ADDR
26964: LD_VAR 0 10
26968: PUSH
26969: FOR_TO
26970: IFFALSE 27065
// begin if not ValidHex ( _x , _y ) then
26972: LD_VAR 0 11
26976: PPUSH
26977: LD_VAR 0 12
26981: PPUSH
26982: CALL_OW 488
26986: NOT
26987: IFFALSE 26991
// continue ;
26989: GO 26969
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26991: LD_VAR 0 11
26995: PPUSH
26996: LD_VAR 0 12
27000: PPUSH
27001: CALL_OW 351
27005: IFFALSE 27023
27007: PUSH
27008: LD_VAR 0 11
27012: PPUSH
27013: LD_VAR 0 12
27017: PPUSH
27018: CALL_OW 554
27022: AND
27023: IFFALSE 27063
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27025: LD_ADDR_VAR 0 13
27029: PUSH
27030: LD_VAR 0 13
27034: PPUSH
27035: LD_VAR 0 13
27039: PUSH
27040: LD_INT 1
27042: PLUS
27043: PPUSH
27044: LD_VAR 0 11
27048: PUSH
27049: LD_VAR 0 12
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 2
27062: ST_TO_ADDR
// end ;
27063: GO 26969
27065: POP
27066: POP
27067: GO 26949
27069: POP
27070: POP
// if not list then
27071: LD_VAR 0 13
27075: NOT
27076: IFFALSE 27080
// exit ;
27078: GO 27326
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27080: LD_ADDR_VAR 0 13
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: LD_VAR 0 13
27094: PPUSH
27095: LD_INT 1
27097: PPUSH
27098: LD_INT 1
27100: PPUSH
27101: CALL 36969 0 4
27105: ST_TO_ADDR
// ComStop ( flame ) ;
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 141
// for i in list do
27115: LD_ADDR_VAR 0 6
27119: PUSH
27120: LD_VAR 0 13
27124: PUSH
27125: FOR_IN
27126: IFFALSE 27157
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27128: LD_VAR 0 1
27132: PPUSH
27133: LD_VAR 0 6
27137: PUSH
27138: LD_INT 1
27140: ARRAY
27141: PPUSH
27142: LD_VAR 0 6
27146: PUSH
27147: LD_INT 2
27149: ARRAY
27150: PPUSH
27151: CALL_OW 176
27155: GO 27125
27157: POP
27158: POP
// repeat wait ( 0 0$1 ) ;
27159: LD_INT 35
27161: PPUSH
27162: CALL_OW 67
// task := GetTaskList ( flame ) ;
27166: LD_ADDR_VAR 0 14
27170: PUSH
27171: LD_VAR 0 1
27175: PPUSH
27176: CALL_OW 437
27180: ST_TO_ADDR
// if not task then
27181: LD_VAR 0 14
27185: NOT
27186: IFFALSE 27190
// exit ;
27188: GO 27326
// if task [ 1 ] [ 1 ] <> | then
27190: LD_VAR 0 14
27194: PUSH
27195: LD_INT 1
27197: ARRAY
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PUSH
27203: LD_STRING |
27205: NONEQUAL
27206: IFFALSE 27210
// exit ;
27208: GO 27326
// _x := task [ 1 ] [ 2 ] ;
27210: LD_ADDR_VAR 0 11
27214: PUSH
27215: LD_VAR 0 14
27219: PUSH
27220: LD_INT 1
27222: ARRAY
27223: PUSH
27224: LD_INT 2
27226: ARRAY
27227: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27228: LD_ADDR_VAR 0 12
27232: PUSH
27233: LD_VAR 0 14
27237: PUSH
27238: LD_INT 1
27240: ARRAY
27241: PUSH
27242: LD_INT 3
27244: ARRAY
27245: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27246: LD_VAR 0 11
27250: PPUSH
27251: LD_VAR 0 12
27255: PPUSH
27256: CALL_OW 351
27260: NOT
27261: IFTRUE 27280
27263: PUSH
27264: LD_VAR 0 11
27268: PPUSH
27269: LD_VAR 0 12
27273: PPUSH
27274: CALL_OW 554
27278: NOT
27279: OR
27280: IFFALSE 27314
// begin task := Delete ( task , 1 ) ;
27282: LD_ADDR_VAR 0 14
27286: PUSH
27287: LD_VAR 0 14
27291: PPUSH
27292: LD_INT 1
27294: PPUSH
27295: CALL_OW 3
27299: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27300: LD_VAR 0 1
27304: PPUSH
27305: LD_VAR 0 14
27309: PPUSH
27310: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL_OW 314
27323: NOT
27324: IFFALSE 27159
// end ;
27326: LD_VAR 0 5
27330: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27331: LD_EXP 94
27335: NOT
27336: IFFALSE 27386
27338: GO 27340
27340: DISABLE
// begin initHack := true ;
27341: LD_ADDR_EXP 94
27345: PUSH
27346: LD_INT 1
27348: ST_TO_ADDR
// hackTanks := [ ] ;
27349: LD_ADDR_EXP 95
27353: PUSH
27354: EMPTY
27355: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27356: LD_ADDR_EXP 96
27360: PUSH
27361: EMPTY
27362: ST_TO_ADDR
// hackLimit := 3 ;
27363: LD_ADDR_EXP 97
27367: PUSH
27368: LD_INT 3
27370: ST_TO_ADDR
// hackDist := 12 ;
27371: LD_ADDR_EXP 98
27375: PUSH
27376: LD_INT 12
27378: ST_TO_ADDR
// hackCounter := [ ] ;
27379: LD_ADDR_EXP 99
27383: PUSH
27384: EMPTY
27385: ST_TO_ADDR
// end ;
27386: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27387: LD_EXP 94
27391: IFFALSE 27409
27393: PUSH
27394: LD_INT 34
27396: PUSH
27397: LD_INT 99
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PPUSH
27404: CALL_OW 69
27408: AND
27409: IFFALSE 27662
27411: GO 27413
27413: DISABLE
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
// begin enable ;
27418: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27419: LD_ADDR_VAR 0 1
27423: PUSH
27424: LD_INT 34
27426: PUSH
27427: LD_INT 99
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PPUSH
27434: CALL_OW 69
27438: PUSH
27439: FOR_IN
27440: IFFALSE 27660
// begin if not i in hackTanks then
27442: LD_VAR 0 1
27446: PUSH
27447: LD_EXP 95
27451: IN
27452: NOT
27453: IFFALSE 27536
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27455: LD_ADDR_EXP 95
27459: PUSH
27460: LD_EXP 95
27464: PPUSH
27465: LD_EXP 95
27469: PUSH
27470: LD_INT 1
27472: PLUS
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 1
27483: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27484: LD_ADDR_EXP 96
27488: PUSH
27489: LD_EXP 96
27493: PPUSH
27494: LD_EXP 96
27498: PUSH
27499: LD_INT 1
27501: PLUS
27502: PPUSH
27503: EMPTY
27504: PPUSH
27505: CALL_OW 1
27509: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27510: LD_ADDR_EXP 99
27514: PUSH
27515: LD_EXP 99
27519: PPUSH
27520: LD_EXP 99
27524: PUSH
27525: LD_INT 1
27527: PLUS
27528: PPUSH
27529: EMPTY
27530: PPUSH
27531: CALL_OW 1
27535: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 302
27545: NOT
27546: IFFALSE 27559
// begin HackUnlinkAll ( i ) ;
27548: LD_VAR 0 1
27552: PPUSH
27553: CALL 27665 0 1
// continue ;
27557: GO 27439
// end ; HackCheckCapturedStatus ( i ) ;
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL 28110 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27568: LD_ADDR_VAR 0 2
27572: PUSH
27573: LD_INT 81
27575: PUSH
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 255
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 33
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 91
27602: PUSH
27603: LD_VAR 0 1
27607: PUSH
27608: LD_EXP 98
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 50
27620: PUSH
27621: EMPTY
27622: LIST
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: PPUSH
27630: CALL_OW 69
27634: ST_TO_ADDR
// if not tmp then
27635: LD_VAR 0 2
27639: NOT
27640: IFFALSE 27644
// continue ;
27642: GO 27439
// HackLink ( i , tmp ) ;
27644: LD_VAR 0 1
27648: PPUSH
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL 27801 0 2
// end ;
27658: GO 27439
27660: POP
27661: POP
// end ;
27662: PPOPN 2
27664: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27665: LD_INT 0
27667: PPUSH
27668: PPUSH
27669: PPUSH
// if not hack in hackTanks then
27670: LD_VAR 0 1
27674: PUSH
27675: LD_EXP 95
27679: IN
27680: NOT
27681: IFFALSE 27685
// exit ;
27683: GO 27796
// index := GetElementIndex ( hackTanks , hack ) ;
27685: LD_ADDR_VAR 0 4
27689: PUSH
27690: LD_EXP 95
27694: PPUSH
27695: LD_VAR 0 1
27699: PPUSH
27700: CALL 36264 0 2
27704: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27705: LD_EXP 96
27709: PUSH
27710: LD_VAR 0 4
27714: ARRAY
27715: IFFALSE 27796
// begin for i in hackTanksCaptured [ index ] do
27717: LD_ADDR_VAR 0 3
27721: PUSH
27722: LD_EXP 96
27726: PUSH
27727: LD_VAR 0 4
27731: ARRAY
27732: PUSH
27733: FOR_IN
27734: IFFALSE 27760
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27736: LD_VAR 0 3
27740: PUSH
27741: LD_INT 1
27743: ARRAY
27744: PPUSH
27745: LD_VAR 0 3
27749: PUSH
27750: LD_INT 2
27752: ARRAY
27753: PPUSH
27754: CALL_OW 235
27758: GO 27733
27760: POP
27761: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27762: LD_ADDR_EXP 96
27766: PUSH
27767: LD_EXP 96
27771: PPUSH
27772: LD_VAR 0 4
27776: PPUSH
27777: EMPTY
27778: PPUSH
27779: CALL_OW 1
27783: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27784: LD_VAR 0 1
27788: PPUSH
27789: LD_INT 0
27791: PPUSH
27792: CALL_OW 505
// end ; end ;
27796: LD_VAR 0 2
27800: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27801: LD_INT 0
27803: PPUSH
27804: PPUSH
27805: PPUSH
// if not hack in hackTanks or not vehicles then
27806: LD_VAR 0 1
27810: PUSH
27811: LD_EXP 95
27815: IN
27816: NOT
27817: IFTRUE 27826
27819: PUSH
27820: LD_VAR 0 2
27824: NOT
27825: OR
27826: IFFALSE 27830
// exit ;
27828: GO 28105
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: LD_VAR 0 2
27844: PPUSH
27845: LD_INT 1
27847: PPUSH
27848: LD_INT 1
27850: PPUSH
27851: CALL 36916 0 4
27855: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27856: LD_ADDR_VAR 0 5
27860: PUSH
27861: LD_EXP 95
27865: PPUSH
27866: LD_VAR 0 1
27870: PPUSH
27871: CALL 36264 0 2
27875: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27876: LD_EXP 96
27880: PUSH
27881: LD_VAR 0 5
27885: ARRAY
27886: PUSH
27887: LD_EXP 97
27891: LESS
27892: IFFALSE 28081
// begin for i := 1 to vehicles do
27894: LD_ADDR_VAR 0 4
27898: PUSH
27899: DOUBLE
27900: LD_INT 1
27902: DEC
27903: ST_TO_ADDR
27904: LD_VAR 0 2
27908: PUSH
27909: FOR_TO
27910: IFFALSE 28079
// begin if hackTanksCaptured [ index ] = hackLimit then
27912: LD_EXP 96
27916: PUSH
27917: LD_VAR 0 5
27921: ARRAY
27922: PUSH
27923: LD_EXP 97
27927: EQUAL
27928: IFFALSE 27932
// break ;
27930: GO 28079
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27932: LD_ADDR_EXP 99
27936: PUSH
27937: LD_EXP 99
27941: PPUSH
27942: LD_VAR 0 5
27946: PPUSH
27947: LD_EXP 99
27951: PUSH
27952: LD_VAR 0 5
27956: ARRAY
27957: PUSH
27958: LD_INT 1
27960: PLUS
27961: PPUSH
27962: CALL_OW 1
27966: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27967: LD_ADDR_EXP 96
27971: PUSH
27972: LD_EXP 96
27976: PPUSH
27977: LD_VAR 0 5
27981: PUSH
27982: LD_EXP 96
27986: PUSH
27987: LD_VAR 0 5
27991: ARRAY
27992: PUSH
27993: LD_INT 1
27995: PLUS
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: LD_VAR 0 2
28005: PUSH
28006: LD_VAR 0 4
28010: ARRAY
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: LD_VAR 0 4
28021: ARRAY
28022: PPUSH
28023: CALL_OW 255
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL 36481 0 3
28036: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28037: LD_VAR 0 2
28041: PUSH
28042: LD_VAR 0 4
28046: ARRAY
28047: PPUSH
28048: LD_VAR 0 1
28052: PPUSH
28053: CALL_OW 255
28057: PPUSH
28058: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28062: LD_VAR 0 2
28066: PUSH
28067: LD_VAR 0 4
28071: ARRAY
28072: PPUSH
28073: CALL_OW 141
// end ;
28077: GO 27909
28079: POP
28080: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_EXP 96
28090: PUSH
28091: LD_VAR 0 5
28095: ARRAY
28096: PUSH
28097: LD_INT 0
28099: PLUS
28100: PPUSH
28101: CALL_OW 505
// end ;
28105: LD_VAR 0 3
28109: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28110: LD_INT 0
28112: PPUSH
28113: PPUSH
28114: PPUSH
28115: PPUSH
// if not hack in hackTanks then
28116: LD_VAR 0 1
28120: PUSH
28121: LD_EXP 95
28125: IN
28126: NOT
28127: IFFALSE 28131
// exit ;
28129: GO 28375
// index := GetElementIndex ( hackTanks , hack ) ;
28131: LD_ADDR_VAR 0 4
28135: PUSH
28136: LD_EXP 95
28140: PPUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL 36264 0 2
28150: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: DOUBLE
28157: LD_EXP 96
28161: PUSH
28162: LD_VAR 0 4
28166: ARRAY
28167: INC
28168: ST_TO_ADDR
28169: LD_INT 1
28171: PUSH
28172: FOR_DOWNTO
28173: IFFALSE 28349
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28175: LD_ADDR_VAR 0 5
28179: PUSH
28180: LD_EXP 96
28184: PUSH
28185: LD_VAR 0 4
28189: ARRAY
28190: PUSH
28191: LD_VAR 0 3
28195: ARRAY
28196: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28197: LD_VAR 0 5
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: CALL_OW 302
28210: NOT
28211: IFTRUE 28239
28213: PUSH
28214: LD_VAR 0 5
28218: PUSH
28219: LD_INT 1
28221: ARRAY
28222: PPUSH
28223: CALL_OW 255
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 255
28237: NONEQUAL
28238: OR
28239: IFFALSE 28347
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28241: LD_VAR 0 5
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: PPUSH
28250: CALL_OW 305
28254: IFFALSE 28282
28256: PUSH
28257: LD_VAR 0 5
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PPUSH
28266: CALL_OW 255
28270: PUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 255
28280: EQUAL
28281: AND
28282: IFFALSE 28306
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28284: LD_VAR 0 5
28288: PUSH
28289: LD_INT 1
28291: ARRAY
28292: PPUSH
28293: LD_VAR 0 5
28297: PUSH
28298: LD_INT 2
28300: ARRAY
28301: PPUSH
28302: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28306: LD_ADDR_EXP 96
28310: PUSH
28311: LD_EXP 96
28315: PPUSH
28316: LD_VAR 0 4
28320: PPUSH
28321: LD_EXP 96
28325: PUSH
28326: LD_VAR 0 4
28330: ARRAY
28331: PPUSH
28332: LD_VAR 0 3
28336: PPUSH
28337: CALL_OW 3
28341: PPUSH
28342: CALL_OW 1
28346: ST_TO_ADDR
// end ; end ;
28347: GO 28172
28349: POP
28350: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28351: LD_VAR 0 1
28355: PPUSH
28356: LD_EXP 96
28360: PUSH
28361: LD_VAR 0 4
28365: ARRAY
28366: PUSH
28367: LD_INT 0
28369: PLUS
28370: PPUSH
28371: CALL_OW 505
// end ;
28375: LD_VAR 0 2
28379: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
// if not hack in hackTanks then
28386: LD_VAR 0 1
28390: PUSH
28391: LD_EXP 95
28395: IN
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28486
// index := GetElementIndex ( hackTanks , hack ) ;
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_EXP 95
28410: PPUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: CALL 36264 0 2
28420: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28421: LD_ADDR_VAR 0 4
28425: PUSH
28426: DOUBLE
28427: LD_INT 1
28429: DEC
28430: ST_TO_ADDR
28431: LD_EXP 96
28435: PUSH
28436: LD_VAR 0 5
28440: ARRAY
28441: PUSH
28442: FOR_TO
28443: IFFALSE 28484
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28445: LD_EXP 96
28449: PUSH
28450: LD_VAR 0 5
28454: ARRAY
28455: PUSH
28456: LD_VAR 0 4
28460: ARRAY
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 2
28470: EQUAL
28471: IFFALSE 28482
// KillUnit ( vehicle ) ;
28473: LD_VAR 0 2
28477: PPUSH
28478: CALL_OW 66
28482: GO 28442
28484: POP
28485: POP
// end ;
28486: LD_VAR 0 3
28490: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28491: LD_EXP 100
28495: NOT
28496: IFFALSE 28531
28498: GO 28500
28500: DISABLE
// begin initMiner := true ;
28501: LD_ADDR_EXP 100
28505: PUSH
28506: LD_INT 1
28508: ST_TO_ADDR
// minersList := [ ] ;
28509: LD_ADDR_EXP 101
28513: PUSH
28514: EMPTY
28515: ST_TO_ADDR
// minerMinesList := [ ] ;
28516: LD_ADDR_EXP 102
28520: PUSH
28521: EMPTY
28522: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28523: LD_ADDR_EXP 103
28527: PUSH
28528: LD_INT 5
28530: ST_TO_ADDR
// end ;
28531: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28532: LD_EXP 100
28536: IFFALSE 28554
28538: PUSH
28539: LD_INT 34
28541: PUSH
28542: LD_INT 81
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: AND
28554: IFFALSE 29017
28556: GO 28558
28558: DISABLE
28559: LD_INT 0
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// begin enable ;
28565: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28566: LD_ADDR_VAR 0 1
28570: PUSH
28571: LD_INT 34
28573: PUSH
28574: LD_INT 81
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PPUSH
28581: CALL_OW 69
28585: PUSH
28586: FOR_IN
28587: IFFALSE 28659
// begin if not i in minersList then
28589: LD_VAR 0 1
28593: PUSH
28594: LD_EXP 101
28598: IN
28599: NOT
28600: IFFALSE 28657
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28602: LD_ADDR_EXP 101
28606: PUSH
28607: LD_EXP 101
28611: PPUSH
28612: LD_EXP 101
28616: PUSH
28617: LD_INT 1
28619: PLUS
28620: PPUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 1
28630: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28631: LD_ADDR_EXP 102
28635: PUSH
28636: LD_EXP 102
28640: PPUSH
28641: LD_EXP 102
28645: PUSH
28646: LD_INT 1
28648: PLUS
28649: PPUSH
28650: EMPTY
28651: PPUSH
28652: CALL_OW 1
28656: ST_TO_ADDR
// end end ;
28657: GO 28586
28659: POP
28660: POP
// for i := minerMinesList downto 1 do
28661: LD_ADDR_VAR 0 1
28665: PUSH
28666: DOUBLE
28667: LD_EXP 102
28671: INC
28672: ST_TO_ADDR
28673: LD_INT 1
28675: PUSH
28676: FOR_DOWNTO
28677: IFFALSE 29015
// begin if IsLive ( minersList [ i ] ) then
28679: LD_EXP 101
28683: PUSH
28684: LD_VAR 0 1
28688: ARRAY
28689: PPUSH
28690: CALL_OW 300
28694: IFFALSE 28722
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28696: LD_EXP 101
28700: PUSH
28701: LD_VAR 0 1
28705: ARRAY
28706: PPUSH
28707: LD_EXP 102
28711: PUSH
28712: LD_VAR 0 1
28716: ARRAY
28717: PPUSH
28718: CALL_OW 505
// if not minerMinesList [ i ] then
28722: LD_EXP 102
28726: PUSH
28727: LD_VAR 0 1
28731: ARRAY
28732: NOT
28733: IFFALSE 28737
// continue ;
28735: GO 28676
// for j := minerMinesList [ i ] downto 1 do
28737: LD_ADDR_VAR 0 2
28741: PUSH
28742: DOUBLE
28743: LD_EXP 102
28747: PUSH
28748: LD_VAR 0 1
28752: ARRAY
28753: INC
28754: ST_TO_ADDR
28755: LD_INT 1
28757: PUSH
28758: FOR_DOWNTO
28759: IFFALSE 29011
// begin side := GetSide ( minersList [ i ] ) ;
28761: LD_ADDR_VAR 0 3
28765: PUSH
28766: LD_EXP 101
28770: PUSH
28771: LD_VAR 0 1
28775: ARRAY
28776: PPUSH
28777: CALL_OW 255
28781: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28782: LD_ADDR_VAR 0 4
28786: PUSH
28787: LD_EXP 102
28791: PUSH
28792: LD_VAR 0 1
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 2
28802: ARRAY
28803: PUSH
28804: LD_INT 1
28806: ARRAY
28807: PPUSH
28808: LD_EXP 102
28812: PUSH
28813: LD_VAR 0 1
28817: ARRAY
28818: PUSH
28819: LD_VAR 0 2
28823: ARRAY
28824: PUSH
28825: LD_INT 2
28827: ARRAY
28828: PPUSH
28829: CALL_OW 428
28833: ST_TO_ADDR
// if not tmp then
28834: LD_VAR 0 4
28838: NOT
28839: IFFALSE 28843
// continue ;
28841: GO 28758
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 81
28850: PUSH
28851: LD_VAR 0 3
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 69
28864: IN
28865: IFFALSE 28915
28867: PUSH
28868: LD_EXP 102
28872: PUSH
28873: LD_VAR 0 1
28877: ARRAY
28878: PUSH
28879: LD_VAR 0 2
28883: ARRAY
28884: PUSH
28885: LD_INT 1
28887: ARRAY
28888: PPUSH
28889: LD_EXP 102
28893: PUSH
28894: LD_VAR 0 1
28898: ARRAY
28899: PUSH
28900: LD_VAR 0 2
28904: ARRAY
28905: PUSH
28906: LD_INT 2
28908: ARRAY
28909: PPUSH
28910: CALL_OW 458
28914: AND
28915: IFFALSE 29009
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28917: LD_EXP 102
28921: PUSH
28922: LD_VAR 0 1
28926: ARRAY
28927: PUSH
28928: LD_VAR 0 2
28932: ARRAY
28933: PUSH
28934: LD_INT 1
28936: ARRAY
28937: PPUSH
28938: LD_EXP 102
28942: PUSH
28943: LD_VAR 0 1
28947: ARRAY
28948: PUSH
28949: LD_VAR 0 2
28953: ARRAY
28954: PUSH
28955: LD_INT 2
28957: ARRAY
28958: PPUSH
28959: LD_VAR 0 3
28963: PPUSH
28964: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28968: LD_ADDR_EXP 102
28972: PUSH
28973: LD_EXP 102
28977: PPUSH
28978: LD_VAR 0 1
28982: PPUSH
28983: LD_EXP 102
28987: PUSH
28988: LD_VAR 0 1
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 2
28998: PPUSH
28999: CALL_OW 3
29003: PPUSH
29004: CALL_OW 1
29008: ST_TO_ADDR
// end ; end ;
29009: GO 28758
29011: POP
29012: POP
// end ;
29013: GO 28676
29015: POP
29016: POP
// end ;
29017: PPOPN 4
29019: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
// result := false ;
29024: LD_ADDR_VAR 0 4
29028: PUSH
29029: LD_INT 0
29031: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 264
29041: PUSH
29042: LD_INT 81
29044: EQUAL
29045: NOT
29046: IFFALSE 29050
// exit ;
29048: GO 29294
// index := GetElementIndex ( minersList , unit ) ;
29050: LD_ADDR_VAR 0 5
29054: PUSH
29055: LD_EXP 101
29059: PPUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL 36264 0 2
29069: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29070: LD_EXP 102
29074: PUSH
29075: LD_VAR 0 5
29079: ARRAY
29080: PUSH
29081: LD_EXP 103
29085: GREATEREQUAL
29086: IFFALSE 29090
// exit ;
29088: GO 29294
// ComMoveXY ( unit , x , y ) ;
29090: LD_VAR 0 1
29094: PPUSH
29095: LD_VAR 0 2
29099: PPUSH
29100: LD_VAR 0 3
29104: PPUSH
29105: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29109: LD_INT 35
29111: PPUSH
29112: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_VAR 0 2
29125: PPUSH
29126: LD_VAR 0 3
29130: PPUSH
29131: CALL 68310 0 3
29135: NOT
29136: IFFALSE 29149
29138: PUSH
29139: LD_VAR 0 1
29143: PPUSH
29144: CALL_OW 314
29148: AND
29149: IFFALSE 29153
// exit ;
29151: GO 29294
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29153: LD_VAR 0 2
29157: PPUSH
29158: LD_VAR 0 3
29162: PPUSH
29163: CALL_OW 428
29167: PUSH
29168: LD_VAR 0 1
29172: EQUAL
29173: IFFALSE 29187
29175: PUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 314
29185: NOT
29186: AND
29187: IFFALSE 29109
// PlaySoundXY ( x , y , PlantMine ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_STRING PlantMine
29201: PPUSH
29202: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29206: LD_VAR 0 2
29210: PPUSH
29211: LD_VAR 0 3
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 255
29225: PPUSH
29226: LD_INT 0
29228: PPUSH
29229: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29233: LD_ADDR_EXP 102
29237: PUSH
29238: LD_EXP 102
29242: PPUSH
29243: LD_VAR 0 5
29247: PUSH
29248: LD_EXP 102
29252: PUSH
29253: LD_VAR 0 5
29257: ARRAY
29258: PUSH
29259: LD_INT 1
29261: PLUS
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PPUSH
29267: LD_VAR 0 2
29271: PUSH
29272: LD_VAR 0 3
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PPUSH
29281: CALL 36481 0 3
29285: ST_TO_ADDR
// result := true ;
29286: LD_ADDR_VAR 0 4
29290: PUSH
29291: LD_INT 1
29293: ST_TO_ADDR
// end ;
29294: LD_VAR 0 4
29298: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29299: LD_INT 0
29301: PPUSH
29302: PPUSH
29303: PPUSH
// if not unit in minersList then
29304: LD_VAR 0 1
29308: PUSH
29309: LD_EXP 101
29313: IN
29314: NOT
29315: IFFALSE 29319
// exit ;
29317: GO 29713
// index := GetElementIndex ( minersList , unit ) ;
29319: LD_ADDR_VAR 0 6
29323: PUSH
29324: LD_EXP 101
29328: PPUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL 36264 0 2
29338: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29339: LD_ADDR_VAR 0 5
29343: PUSH
29344: DOUBLE
29345: LD_EXP 102
29349: PUSH
29350: LD_VAR 0 6
29354: ARRAY
29355: INC
29356: ST_TO_ADDR
29357: LD_INT 1
29359: PUSH
29360: FOR_DOWNTO
29361: IFFALSE 29524
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29363: LD_EXP 102
29367: PUSH
29368: LD_VAR 0 6
29372: ARRAY
29373: PUSH
29374: LD_VAR 0 5
29378: ARRAY
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: PUSH
29384: LD_VAR 0 2
29388: EQUAL
29389: IFFALSE 29419
29391: PUSH
29392: LD_EXP 102
29396: PUSH
29397: LD_VAR 0 6
29401: ARRAY
29402: PUSH
29403: LD_VAR 0 5
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PUSH
29413: LD_VAR 0 3
29417: EQUAL
29418: AND
29419: IFFALSE 29522
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29421: LD_EXP 102
29425: PUSH
29426: LD_VAR 0 6
29430: ARRAY
29431: PUSH
29432: LD_VAR 0 5
29436: ARRAY
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: PPUSH
29442: LD_EXP 102
29446: PUSH
29447: LD_VAR 0 6
29451: ARRAY
29452: PUSH
29453: LD_VAR 0 5
29457: ARRAY
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 255
29472: PPUSH
29473: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29477: LD_ADDR_EXP 102
29481: PUSH
29482: LD_EXP 102
29486: PPUSH
29487: LD_VAR 0 6
29491: PPUSH
29492: LD_EXP 102
29496: PUSH
29497: LD_VAR 0 6
29501: ARRAY
29502: PPUSH
29503: LD_VAR 0 5
29507: PPUSH
29508: CALL_OW 3
29512: PPUSH
29513: CALL_OW 1
29517: ST_TO_ADDR
// exit ;
29518: POP
29519: POP
29520: GO 29713
// end ; end ;
29522: GO 29360
29524: POP
29525: POP
// for i := minerMinesList [ index ] downto 1 do
29526: LD_ADDR_VAR 0 5
29530: PUSH
29531: DOUBLE
29532: LD_EXP 102
29536: PUSH
29537: LD_VAR 0 6
29541: ARRAY
29542: INC
29543: ST_TO_ADDR
29544: LD_INT 1
29546: PUSH
29547: FOR_DOWNTO
29548: IFFALSE 29711
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29550: LD_EXP 102
29554: PUSH
29555: LD_VAR 0 6
29559: ARRAY
29560: PUSH
29561: LD_VAR 0 5
29565: ARRAY
29566: PUSH
29567: LD_INT 1
29569: ARRAY
29570: PPUSH
29571: LD_EXP 102
29575: PUSH
29576: LD_VAR 0 6
29580: ARRAY
29581: PUSH
29582: LD_VAR 0 5
29586: ARRAY
29587: PUSH
29588: LD_INT 2
29590: ARRAY
29591: PPUSH
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 298
29606: PUSH
29607: LD_INT 6
29609: LESS
29610: IFFALSE 29709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29612: LD_EXP 102
29616: PUSH
29617: LD_VAR 0 6
29621: ARRAY
29622: PUSH
29623: LD_VAR 0 5
29627: ARRAY
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: LD_EXP 102
29637: PUSH
29638: LD_VAR 0 6
29642: ARRAY
29643: PUSH
29644: LD_VAR 0 5
29648: ARRAY
29649: PUSH
29650: LD_INT 2
29652: ARRAY
29653: PPUSH
29654: LD_VAR 0 1
29658: PPUSH
29659: CALL_OW 255
29663: PPUSH
29664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29668: LD_ADDR_EXP 102
29672: PUSH
29673: LD_EXP 102
29677: PPUSH
29678: LD_VAR 0 6
29682: PPUSH
29683: LD_EXP 102
29687: PUSH
29688: LD_VAR 0 6
29692: ARRAY
29693: PPUSH
29694: LD_VAR 0 5
29698: PPUSH
29699: CALL_OW 3
29703: PPUSH
29704: CALL_OW 1
29708: ST_TO_ADDR
// end ; end ;
29709: GO 29547
29711: POP
29712: POP
// end ;
29713: LD_VAR 0 4
29717: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29718: LD_INT 0
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 264
29738: PUSH
29739: LD_INT 81
29741: EQUAL
29742: NOT
29743: IFTRUE 29758
29745: PUSH
29746: LD_VAR 0 1
29750: PUSH
29751: LD_EXP 101
29755: IN
29756: NOT
29757: OR
29758: IFFALSE 29762
// exit ;
29760: GO 30088
// index := GetElementIndex ( minersList , unit ) ;
29762: LD_ADDR_VAR 0 6
29766: PUSH
29767: LD_EXP 101
29771: PPUSH
29772: LD_VAR 0 1
29776: PPUSH
29777: CALL 36264 0 2
29781: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29782: LD_ADDR_VAR 0 8
29786: PUSH
29787: LD_EXP 103
29791: PUSH
29792: LD_EXP 102
29796: PUSH
29797: LD_VAR 0 6
29801: ARRAY
29802: MINUS
29803: ST_TO_ADDR
// if not minesFreeAmount then
29804: LD_VAR 0 8
29808: NOT
29809: IFFALSE 29813
// exit ;
29811: GO 30088
// tmp := [ ] ;
29813: LD_ADDR_VAR 0 7
29817: PUSH
29818: EMPTY
29819: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29820: LD_ADDR_VAR 0 5
29824: PUSH
29825: DOUBLE
29826: LD_INT 1
29828: DEC
29829: ST_TO_ADDR
29830: LD_VAR 0 8
29834: PUSH
29835: FOR_TO
29836: IFFALSE 30035
// begin _d := rand ( 0 , 5 ) ;
29838: LD_ADDR_VAR 0 11
29842: PUSH
29843: LD_INT 0
29845: PPUSH
29846: LD_INT 5
29848: PPUSH
29849: CALL_OW 12
29853: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29854: LD_ADDR_VAR 0 12
29858: PUSH
29859: LD_INT 2
29861: PPUSH
29862: LD_INT 6
29864: PPUSH
29865: CALL_OW 12
29869: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29870: LD_ADDR_VAR 0 9
29874: PUSH
29875: LD_VAR 0 2
29879: PPUSH
29880: LD_VAR 0 11
29884: PPUSH
29885: LD_VAR 0 12
29889: PPUSH
29890: CALL_OW 272
29894: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29895: LD_ADDR_VAR 0 10
29899: PUSH
29900: LD_VAR 0 3
29904: PPUSH
29905: LD_VAR 0 11
29909: PPUSH
29910: LD_VAR 0 12
29914: PPUSH
29915: CALL_OW 273
29919: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29920: LD_VAR 0 9
29924: PPUSH
29925: LD_VAR 0 10
29929: PPUSH
29930: CALL_OW 488
29934: IFFALSE 29958
29936: PUSH
29937: LD_VAR 0 9
29941: PUSH
29942: LD_VAR 0 10
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_VAR 0 7
29955: IN
29956: NOT
29957: AND
29958: IFFALSE 29977
29960: PUSH
29961: LD_VAR 0 9
29965: PPUSH
29966: LD_VAR 0 10
29970: PPUSH
29971: CALL_OW 458
29975: NOT
29976: AND
29977: IFFALSE 30019
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29979: LD_ADDR_VAR 0 7
29983: PUSH
29984: LD_VAR 0 7
29988: PPUSH
29989: LD_VAR 0 7
29993: PUSH
29994: LD_INT 1
29996: PLUS
29997: PPUSH
29998: LD_VAR 0 9
30002: PUSH
30003: LD_VAR 0 10
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PPUSH
30012: CALL_OW 1
30016: ST_TO_ADDR
30017: GO 30033
// i := i - 1 ;
30019: LD_ADDR_VAR 0 5
30023: PUSH
30024: LD_VAR 0 5
30028: PUSH
30029: LD_INT 1
30031: MINUS
30032: ST_TO_ADDR
// end ;
30033: GO 29835
30035: POP
30036: POP
// for i in tmp do
30037: LD_ADDR_VAR 0 5
30041: PUSH
30042: LD_VAR 0 7
30046: PUSH
30047: FOR_IN
30048: IFFALSE 30086
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30050: LD_VAR 0 1
30054: PPUSH
30055: LD_VAR 0 5
30059: PUSH
30060: LD_INT 1
30062: ARRAY
30063: PPUSH
30064: LD_VAR 0 5
30068: PUSH
30069: LD_INT 2
30071: ARRAY
30072: PPUSH
30073: CALL 29020 0 3
30077: NOT
30078: IFFALSE 30084
// exit ;
30080: POP
30081: POP
30082: GO 30088
30084: GO 30047
30086: POP
30087: POP
// end ;
30088: LD_VAR 0 4
30092: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
30093: LD_INT 0
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
// if GetClass ( unit ) <> class_sniper then
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 257
30113: PUSH
30114: LD_INT 5
30116: NONEQUAL
30117: IFFALSE 30121
// exit ;
30119: GO 30591
// dist := 8 ;
30121: LD_ADDR_VAR 0 5
30125: PUSH
30126: LD_INT 8
30128: ST_TO_ADDR
// viewRange := 12 ;
30129: LD_ADDR_VAR 0 8
30133: PUSH
30134: LD_INT 12
30136: ST_TO_ADDR
// side := GetSide ( unit ) ;
30137: LD_ADDR_VAR 0 6
30141: PUSH
30142: LD_VAR 0 1
30146: PPUSH
30147: CALL_OW 255
30151: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30152: LD_INT 61
30154: PPUSH
30155: LD_VAR 0 6
30159: PPUSH
30160: CALL_OW 321
30164: PUSH
30165: LD_INT 2
30167: EQUAL
30168: IFFALSE 30178
// viewRange := 16 ;
30170: LD_ADDR_VAR 0 8
30174: PUSH
30175: LD_INT 16
30177: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30178: LD_VAR 0 1
30182: PPUSH
30183: LD_VAR 0 2
30187: PPUSH
30188: LD_VAR 0 3
30192: PPUSH
30193: CALL_OW 297
30197: PUSH
30198: LD_VAR 0 5
30202: GREATER
30203: IFFALSE 30282
// begin ComMoveXY ( unit , x , y ) ;
30205: LD_VAR 0 1
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30224: LD_INT 35
30226: PPUSH
30227: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_VAR 0 2
30240: PPUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: CALL 68310 0 3
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30591
// until GetDistUnitXY ( unit , x , y ) < dist ;
30255: LD_VAR 0 1
30259: PPUSH
30260: LD_VAR 0 2
30264: PPUSH
30265: LD_VAR 0 3
30269: PPUSH
30270: CALL_OW 297
30274: PUSH
30275: LD_VAR 0 5
30279: LESS
30280: IFFALSE 30224
// end ; ComTurnXY ( unit , x , y ) ;
30282: LD_VAR 0 1
30286: PPUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: CALL_OW 118
// repeat if Multiplayer then
30301: LD_OWVAR 4
30305: IFFALSE 30316
// wait ( 35 ) else
30307: LD_INT 35
30309: PPUSH
30310: CALL_OW 67
30314: GO 30323
// wait ( 5 ) ;
30316: LD_INT 5
30318: PPUSH
30319: CALL_OW 67
// _d := GetDir ( unit ) ;
30323: LD_ADDR_VAR 0 11
30327: PUSH
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 254
30337: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
30338: LD_ADDR_VAR 0 7
30342: PUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 250
30352: PPUSH
30353: LD_VAR 0 1
30357: PPUSH
30358: CALL_OW 251
30362: PPUSH
30363: LD_VAR 0 2
30367: PPUSH
30368: LD_VAR 0 3
30372: PPUSH
30373: CALL 70946 0 4
30377: ST_TO_ADDR
// until dir = _d ;
30378: LD_VAR 0 7
30382: PUSH
30383: LD_VAR 0 11
30387: EQUAL
30388: IFFALSE 30301
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
30390: LD_ADDR_VAR 0 9
30394: PUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 250
30404: PPUSH
30405: LD_VAR 0 7
30409: PPUSH
30410: LD_VAR 0 5
30414: PPUSH
30415: CALL_OW 272
30419: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30420: LD_ADDR_VAR 0 10
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 251
30434: PPUSH
30435: LD_VAR 0 7
30439: PPUSH
30440: LD_VAR 0 5
30444: PPUSH
30445: CALL_OW 273
30449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30450: LD_VAR 0 9
30454: PPUSH
30455: LD_VAR 0 10
30459: PPUSH
30460: CALL_OW 488
30464: NOT
30465: IFFALSE 30469
// exit ;
30467: GO 30591
// ComAnimCustom ( unit , 1 ) ;
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_INT 1
30476: PPUSH
30477: CALL_OW 592
// p := 0 ;
30481: LD_ADDR_VAR 0 12
30485: PUSH
30486: LD_INT 0
30488: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30489: LD_VAR 0 9
30493: PPUSH
30494: LD_VAR 0 10
30498: PPUSH
30499: LD_VAR 0 6
30503: PPUSH
30504: LD_VAR 0 8
30508: PPUSH
30509: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30513: LD_INT 35
30515: PPUSH
30516: CALL_OW 67
// p := Inc ( p ) ;
30520: LD_ADDR_VAR 0 12
30524: PUSH
30525: LD_VAR 0 12
30529: PPUSH
30530: CALL 70902 0 1
30534: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30535: LD_VAR 0 12
30539: PUSH
30540: LD_INT 3
30542: EQUAL
30543: IFTRUE 30557
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 302
30555: NOT
30556: OR
30557: IFTRUE 30570
30559: PUSH
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 301
30569: OR
30570: IFFALSE 30513
// RemoveSeeing ( _x , _y , side ) ;
30572: LD_VAR 0 9
30576: PPUSH
30577: LD_VAR 0 10
30581: PPUSH
30582: LD_VAR 0 6
30586: PPUSH
30587: CALL_OW 331
// end ;
30591: LD_VAR 0 4
30595: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
30596: LD_INT 0
30598: PPUSH
30599: PPUSH
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
// if not unit then
30609: LD_VAR 0 1
30613: NOT
30614: IFFALSE 30618
// exit ;
30616: GO 30889
// side := GetSide ( unit ) ;
30618: LD_ADDR_VAR 0 3
30622: PUSH
30623: LD_VAR 0 1
30627: PPUSH
30628: CALL_OW 255
30632: ST_TO_ADDR
// x := GetX ( unit ) ;
30633: LD_ADDR_VAR 0 5
30637: PUSH
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL_OW 250
30647: ST_TO_ADDR
// y := GetY ( unit ) ;
30648: LD_ADDR_VAR 0 6
30652: PUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 251
30662: ST_TO_ADDR
// r := 8 ;
30663: LD_ADDR_VAR 0 4
30667: PUSH
30668: LD_INT 8
30670: ST_TO_ADDR
// if x - r < 0 then
30671: LD_VAR 0 5
30675: PUSH
30676: LD_VAR 0 4
30680: MINUS
30681: PUSH
30682: LD_INT 0
30684: LESS
30685: IFFALSE 30697
// min_x := 0 else
30687: LD_ADDR_VAR 0 7
30691: PUSH
30692: LD_INT 0
30694: ST_TO_ADDR
30695: GO 30713
// min_x := x - r ;
30697: LD_ADDR_VAR 0 7
30701: PUSH
30702: LD_VAR 0 5
30706: PUSH
30707: LD_VAR 0 4
30711: MINUS
30712: ST_TO_ADDR
// if y - r < 0 then
30713: LD_VAR 0 6
30717: PUSH
30718: LD_VAR 0 4
30722: MINUS
30723: PUSH
30724: LD_INT 0
30726: LESS
30727: IFFALSE 30739
// min_y := 0 else
30729: LD_ADDR_VAR 0 8
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
30737: GO 30755
// min_y := y - r ;
30739: LD_ADDR_VAR 0 8
30743: PUSH
30744: LD_VAR 0 6
30748: PUSH
30749: LD_VAR 0 4
30753: MINUS
30754: ST_TO_ADDR
// max_x := x + r ;
30755: LD_ADDR_VAR 0 9
30759: PUSH
30760: LD_VAR 0 5
30764: PUSH
30765: LD_VAR 0 4
30769: PLUS
30770: ST_TO_ADDR
// max_y := y + r ;
30771: LD_ADDR_VAR 0 10
30775: PUSH
30776: LD_VAR 0 6
30780: PUSH
30781: LD_VAR 0 4
30785: PLUS
30786: ST_TO_ADDR
// for _x = min_x to max_x do
30787: LD_ADDR_VAR 0 11
30791: PUSH
30792: DOUBLE
30793: LD_VAR 0 7
30797: DEC
30798: ST_TO_ADDR
30799: LD_VAR 0 9
30803: PUSH
30804: FOR_TO
30805: IFFALSE 30887
// for _y = min_y to max_y do
30807: LD_ADDR_VAR 0 12
30811: PUSH
30812: DOUBLE
30813: LD_VAR 0 8
30817: DEC
30818: ST_TO_ADDR
30819: LD_VAR 0 10
30823: PUSH
30824: FOR_TO
30825: IFFALSE 30883
// begin if not ValidHex ( _x , _y ) then
30827: LD_VAR 0 11
30831: PPUSH
30832: LD_VAR 0 12
30836: PPUSH
30837: CALL_OW 488
30841: NOT
30842: IFFALSE 30846
// continue ;
30844: GO 30824
// if MineAtPos ( _x , _y ) then
30846: LD_VAR 0 11
30850: PPUSH
30851: LD_VAR 0 12
30855: PPUSH
30856: CALL_OW 458
30860: IFFALSE 30881
// ViewMineAtPos ( _x , _y , side ) ;
30862: LD_VAR 0 11
30866: PPUSH
30867: LD_VAR 0 12
30871: PPUSH
30872: LD_VAR 0 3
30876: PPUSH
30877: CALL_OW 457
// end ;
30881: GO 30824
30883: POP
30884: POP
30885: GO 30804
30887: POP
30888: POP
// end ;
30889: LD_VAR 0 2
30893: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
30894: LD_INT 0
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
// if not units then
30902: LD_VAR 0 1
30906: NOT
30907: IFFALSE 30911
// exit ;
30909: GO 31341
// scaners := [ ] ;
30911: LD_ADDR_VAR 0 6
30915: PUSH
30916: EMPTY
30917: ST_TO_ADDR
// for i in units do
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_VAR 0 1
30927: PUSH
30928: FOR_IN
30929: IFFALSE 31086
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
30931: LD_VAR 0 3
30935: PPUSH
30936: CALL_OW 264
30940: PUSH
30941: LD_INT 11
30943: NONEQUAL
30944: IFTRUE 30958
30946: PUSH
30947: LD_VAR 0 3
30951: PPUSH
30952: CALL_OW 302
30956: NOT
30957: OR
30958: IFTRUE 30975
30960: PUSH
30961: LD_VAR 0 3
30965: PPUSH
30966: CALL_OW 110
30970: PUSH
30971: LD_INT 502
30973: EQUAL
30974: OR
30975: IFFALSE 30979
// continue ;
30977: GO 30928
// ComStop ( i ) ;
30979: LD_VAR 0 3
30983: PPUSH
30984: CALL_OW 141
// x := GetX ( i ) ;
30988: LD_ADDR_VAR 0 4
30992: PUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: CALL_OW 250
31002: ST_TO_ADDR
// y := GetY ( i ) ;
31003: LD_ADDR_VAR 0 5
31007: PUSH
31008: LD_VAR 0 3
31012: PPUSH
31013: CALL_OW 251
31017: ST_TO_ADDR
// if GetSide ( i ) = your_side then
31018: LD_VAR 0 3
31022: PPUSH
31023: CALL_OW 255
31027: PUSH
31028: LD_OWVAR 2
31032: EQUAL
31033: IFFALSE 31052
// PlaySoundXY ( x , y , mineDetector ) ;
31035: LD_VAR 0 4
31039: PPUSH
31040: LD_VAR 0 5
31044: PPUSH
31045: LD_STRING mineDetector
31047: PPUSH
31048: CALL_OW 366
// scaners := Join ( scaners , i ) ;
31052: LD_ADDR_VAR 0 6
31056: PUSH
31057: LD_VAR 0 6
31061: PPUSH
31062: LD_VAR 0 3
31066: PPUSH
31067: CALL 69529 0 2
31071: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
31072: LD_VAR 0 3
31076: PPUSH
31077: LD_INT 502
31079: PPUSH
31080: CALL_OW 109
// end ;
31084: GO 30928
31086: POP
31087: POP
// if not scaners then
31088: LD_VAR 0 6
31092: NOT
31093: IFFALSE 31097
// exit ;
31095: GO 31341
// wait ( 3 ) ;
31097: LD_INT 3
31099: PPUSH
31100: CALL_OW 67
// timer := 6 ;
31104: LD_ADDR_VAR 0 7
31108: PUSH
31109: LD_INT 6
31111: ST_TO_ADDR
// repeat for i in scaners do
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_VAR 0 6
31121: PUSH
31122: FOR_IN
31123: IFFALSE 31239
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
31125: LD_VAR 0 3
31129: PPUSH
31130: CALL_OW 302
31134: NOT
31135: IFTRUE 31148
31137: PUSH
31138: LD_VAR 0 3
31142: PPUSH
31143: CALL_OW 314
31147: OR
31148: IFTRUE 31179
31150: PUSH
31151: LD_VAR 0 3
31155: PPUSH
31156: CALL_OW 263
31160: PUSH
31161: LD_INT 1
31163: EQUAL
31164: IFFALSE 31178
31166: PUSH
31167: LD_VAR 0 3
31171: PPUSH
31172: CALL_OW 311
31176: NOT
31177: AND
31178: OR
31179: IFFALSE 31223
// begin SetUnitDisplayNumber ( i , 0 ) ;
31181: LD_VAR 0 3
31185: PPUSH
31186: LD_INT 0
31188: PPUSH
31189: CALL_OW 505
// SetTag ( i , 0 ) ;
31193: LD_VAR 0 3
31197: PPUSH
31198: LD_INT 0
31200: PPUSH
31201: CALL_OW 109
// scaners := scaners diff i ;
31205: LD_ADDR_VAR 0 6
31209: PUSH
31210: LD_VAR 0 6
31214: PUSH
31215: LD_VAR 0 3
31219: DIFF
31220: ST_TO_ADDR
// continue ;
31221: GO 31122
// end ; SetUnitDisplayNumber ( i , timer ) ;
31223: LD_VAR 0 3
31227: PPUSH
31228: LD_VAR 0 7
31232: PPUSH
31233: CALL_OW 505
// end ;
31237: GO 31122
31239: POP
31240: POP
// if not scaners then
31241: LD_VAR 0 6
31245: NOT
31246: IFFALSE 31250
// exit ;
31248: GO 31341
// timer := Dec ( timer ) ;
31250: LD_ADDR_VAR 0 7
31254: PUSH
31255: LD_VAR 0 7
31259: PPUSH
31260: CALL 70924 0 1
31264: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31265: LD_INT 35
31267: PPUSH
31268: CALL_OW 67
// until timer = 0 ;
31272: LD_VAR 0 7
31276: PUSH
31277: LD_INT 0
31279: EQUAL
31280: IFFALSE 31112
// if not scaners then
31282: LD_VAR 0 6
31286: NOT
31287: IFFALSE 31291
// exit ;
31289: GO 31341
// for i in scaners do
31291: LD_ADDR_VAR 0 3
31295: PUSH
31296: LD_VAR 0 6
31300: PUSH
31301: FOR_IN
31302: IFFALSE 31339
// begin SetUnitDisplayNumber ( i , 0 ) ;
31304: LD_VAR 0 3
31308: PPUSH
31309: LD_INT 0
31311: PPUSH
31312: CALL_OW 505
// SetTag ( i , 0 ) ;
31316: LD_VAR 0 3
31320: PPUSH
31321: LD_INT 0
31323: PPUSH
31324: CALL_OW 109
// RevealDetectorMine ( i ) ;
31328: LD_VAR 0 3
31332: PPUSH
31333: CALL 30596 0 1
// end ;
31337: GO 31301
31339: POP
31340: POP
// end ;
31341: LD_VAR 0 2
31345: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
31346: LD_INT 0
31348: PPUSH
// if p1 = mine_detector_mode then
31349: LD_VAR 0 2
31353: PUSH
31354: LD_INT 103
31356: EQUAL
31357: IFFALSE 31368
// DetectMine ( units ) ;
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL 30894 0 1
// end ; end_of_file
31368: LD_VAR 0 7
31372: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31373: LD_INT 0
31375: PPUSH
31376: PPUSH
// if exist_mode then
31377: LD_VAR 0 2
31381: IFFALSE 31427
// begin unit := CreateCharacter ( prefix & ident ) ;
31383: LD_ADDR_VAR 0 5
31387: PUSH
31388: LD_VAR 0 3
31392: PUSH
31393: LD_VAR 0 1
31397: STR
31398: PPUSH
31399: CALL_OW 34
31403: ST_TO_ADDR
// if unit then
31404: LD_VAR 0 5
31408: IFFALSE 31425
// DeleteCharacters ( prefix & ident ) ;
31410: LD_VAR 0 3
31414: PUSH
31415: LD_VAR 0 1
31419: STR
31420: PPUSH
31421: CALL_OW 40
// end else
31425: GO 31442
// unit := NewCharacter ( ident ) ;
31427: LD_ADDR_VAR 0 5
31431: PUSH
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 25
31441: ST_TO_ADDR
// result := unit ;
31442: LD_ADDR_VAR 0 4
31446: PUSH
31447: LD_VAR 0 5
31451: ST_TO_ADDR
// end ;
31452: LD_VAR 0 4
31456: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31457: LD_INT 0
31459: PPUSH
31460: PPUSH
// if exist_mode then
31461: LD_VAR 0 2
31465: IFFALSE 31490
// unit := CreateCharacter ( prefix & ident ) else
31467: LD_ADDR_VAR 0 5
31471: PUSH
31472: LD_VAR 0 3
31476: PUSH
31477: LD_VAR 0 1
31481: STR
31482: PPUSH
31483: CALL_OW 34
31487: ST_TO_ADDR
31488: GO 31505
// unit := NewCharacter ( ident ) ;
31490: LD_ADDR_VAR 0 5
31494: PUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 25
31504: ST_TO_ADDR
// result := unit ;
31505: LD_ADDR_VAR 0 4
31509: PUSH
31510: LD_VAR 0 5
31514: ST_TO_ADDR
// end ;
31515: LD_VAR 0 4
31519: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31520: LD_INT 0
31522: PPUSH
31523: PPUSH
// if not side or not nation then
31524: LD_VAR 0 1
31528: NOT
31529: IFTRUE 31538
31531: PUSH
31532: LD_VAR 0 2
31536: NOT
31537: OR
31538: IFFALSE 31542
// exit ;
31540: GO 32336
// case nation of nation_american :
31542: LD_VAR 0 2
31546: PUSH
31547: LD_INT 1
31549: DOUBLE
31550: EQUAL
31551: IFTRUE 31555
31553: GO 31777
31555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
31556: LD_ADDR_VAR 0 4
31560: PUSH
31561: LD_INT 35
31563: PUSH
31564: LD_INT 45
31566: PUSH
31567: LD_INT 46
31569: PUSH
31570: LD_INT 47
31572: PUSH
31573: LD_INT 82
31575: PUSH
31576: LD_INT 83
31578: PUSH
31579: LD_INT 84
31581: PUSH
31582: LD_INT 85
31584: PUSH
31585: LD_INT 86
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: LD_INT 6
31596: PUSH
31597: LD_INT 15
31599: PUSH
31600: LD_INT 16
31602: PUSH
31603: LD_INT 7
31605: PUSH
31606: LD_INT 12
31608: PUSH
31609: LD_INT 13
31611: PUSH
31612: LD_INT 10
31614: PUSH
31615: LD_INT 14
31617: PUSH
31618: LD_INT 20
31620: PUSH
31621: LD_INT 21
31623: PUSH
31624: LD_INT 22
31626: PUSH
31627: LD_INT 25
31629: PUSH
31630: LD_INT 32
31632: PUSH
31633: LD_INT 27
31635: PUSH
31636: LD_INT 36
31638: PUSH
31639: LD_INT 69
31641: PUSH
31642: LD_INT 39
31644: PUSH
31645: LD_INT 34
31647: PUSH
31648: LD_INT 40
31650: PUSH
31651: LD_INT 48
31653: PUSH
31654: LD_INT 49
31656: PUSH
31657: LD_INT 50
31659: PUSH
31660: LD_INT 51
31662: PUSH
31663: LD_INT 52
31665: PUSH
31666: LD_INT 53
31668: PUSH
31669: LD_INT 54
31671: PUSH
31672: LD_INT 55
31674: PUSH
31675: LD_INT 56
31677: PUSH
31678: LD_INT 57
31680: PUSH
31681: LD_INT 58
31683: PUSH
31684: LD_INT 59
31686: PUSH
31687: LD_INT 60
31689: PUSH
31690: LD_INT 61
31692: PUSH
31693: LD_INT 62
31695: PUSH
31696: LD_INT 80
31698: PUSH
31699: LD_INT 82
31701: PUSH
31702: LD_INT 83
31704: PUSH
31705: LD_INT 84
31707: PUSH
31708: LD_INT 85
31710: PUSH
31711: LD_INT 86
31713: PUSH
31714: LD_INT 90
31716: PUSH
31717: LD_INT 93
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
31775: GO 32258
31777: LD_INT 2
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 32019
31785: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
31786: LD_ADDR_VAR 0 4
31790: PUSH
31791: LD_INT 35
31793: PUSH
31794: LD_INT 45
31796: PUSH
31797: LD_INT 46
31799: PUSH
31800: LD_INT 47
31802: PUSH
31803: LD_INT 82
31805: PUSH
31806: LD_INT 83
31808: PUSH
31809: LD_INT 84
31811: PUSH
31812: LD_INT 85
31814: PUSH
31815: LD_INT 87
31817: PUSH
31818: LD_INT 70
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 11
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 4
31832: PUSH
31833: LD_INT 5
31835: PUSH
31836: LD_INT 6
31838: PUSH
31839: LD_INT 15
31841: PUSH
31842: LD_INT 18
31844: PUSH
31845: LD_INT 7
31847: PUSH
31848: LD_INT 17
31850: PUSH
31851: LD_INT 8
31853: PUSH
31854: LD_INT 20
31856: PUSH
31857: LD_INT 21
31859: PUSH
31860: LD_INT 22
31862: PUSH
31863: LD_INT 72
31865: PUSH
31866: LD_INT 26
31868: PUSH
31869: LD_INT 69
31871: PUSH
31872: LD_INT 39
31874: PUSH
31875: LD_INT 40
31877: PUSH
31878: LD_INT 41
31880: PUSH
31881: LD_INT 42
31883: PUSH
31884: LD_INT 43
31886: PUSH
31887: LD_INT 48
31889: PUSH
31890: LD_INT 49
31892: PUSH
31893: LD_INT 50
31895: PUSH
31896: LD_INT 51
31898: PUSH
31899: LD_INT 52
31901: PUSH
31902: LD_INT 53
31904: PUSH
31905: LD_INT 54
31907: PUSH
31908: LD_INT 55
31910: PUSH
31911: LD_INT 56
31913: PUSH
31914: LD_INT 60
31916: PUSH
31917: LD_INT 61
31919: PUSH
31920: LD_INT 62
31922: PUSH
31923: LD_INT 66
31925: PUSH
31926: LD_INT 67
31928: PUSH
31929: LD_INT 68
31931: PUSH
31932: LD_INT 81
31934: PUSH
31935: LD_INT 82
31937: PUSH
31938: LD_INT 83
31940: PUSH
31941: LD_INT 84
31943: PUSH
31944: LD_INT 85
31946: PUSH
31947: LD_INT 87
31949: PUSH
31950: LD_INT 88
31952: PUSH
31953: LD_INT 92
31955: PUSH
31956: LD_INT 94
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: ST_TO_ADDR
32017: GO 32258
32019: LD_INT 3
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32257
32027: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
32028: LD_ADDR_VAR 0 4
32032: PUSH
32033: LD_INT 46
32035: PUSH
32036: LD_INT 47
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 82
32047: PUSH
32048: LD_INT 83
32050: PUSH
32051: LD_INT 84
32053: PUSH
32054: LD_INT 85
32056: PUSH
32057: LD_INT 86
32059: PUSH
32060: LD_INT 11
32062: PUSH
32063: LD_INT 9
32065: PUSH
32066: LD_INT 20
32068: PUSH
32069: LD_INT 19
32071: PUSH
32072: LD_INT 21
32074: PUSH
32075: LD_INT 24
32077: PUSH
32078: LD_INT 22
32080: PUSH
32081: LD_INT 25
32083: PUSH
32084: LD_INT 28
32086: PUSH
32087: LD_INT 29
32089: PUSH
32090: LD_INT 30
32092: PUSH
32093: LD_INT 31
32095: PUSH
32096: LD_INT 37
32098: PUSH
32099: LD_INT 38
32101: PUSH
32102: LD_INT 32
32104: PUSH
32105: LD_INT 27
32107: PUSH
32108: LD_INT 33
32110: PUSH
32111: LD_INT 69
32113: PUSH
32114: LD_INT 39
32116: PUSH
32117: LD_INT 34
32119: PUSH
32120: LD_INT 40
32122: PUSH
32123: LD_INT 71
32125: PUSH
32126: LD_INT 23
32128: PUSH
32129: LD_INT 44
32131: PUSH
32132: LD_INT 48
32134: PUSH
32135: LD_INT 49
32137: PUSH
32138: LD_INT 50
32140: PUSH
32141: LD_INT 51
32143: PUSH
32144: LD_INT 52
32146: PUSH
32147: LD_INT 53
32149: PUSH
32150: LD_INT 54
32152: PUSH
32153: LD_INT 55
32155: PUSH
32156: LD_INT 56
32158: PUSH
32159: LD_INT 57
32161: PUSH
32162: LD_INT 58
32164: PUSH
32165: LD_INT 59
32167: PUSH
32168: LD_INT 63
32170: PUSH
32171: LD_INT 64
32173: PUSH
32174: LD_INT 65
32176: PUSH
32177: LD_INT 82
32179: PUSH
32180: LD_INT 83
32182: PUSH
32183: LD_INT 84
32185: PUSH
32186: LD_INT 85
32188: PUSH
32189: LD_INT 86
32191: PUSH
32192: LD_INT 89
32194: PUSH
32195: LD_INT 91
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: ST_TO_ADDR
32255: GO 32258
32257: POP
// if state > - 1 and state < 3 then
32258: LD_VAR 0 3
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: GREATER
32267: IFFALSE 32279
32269: PUSH
32270: LD_VAR 0 3
32274: PUSH
32275: LD_INT 3
32277: LESS
32278: AND
32279: IFFALSE 32336
// for i in result do
32281: LD_ADDR_VAR 0 5
32285: PUSH
32286: LD_VAR 0 4
32290: PUSH
32291: FOR_IN
32292: IFFALSE 32334
// if GetTech ( i , side ) <> state then
32294: LD_VAR 0 5
32298: PPUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: CALL_OW 321
32308: PUSH
32309: LD_VAR 0 3
32313: NONEQUAL
32314: IFFALSE 32332
// result := result diff i ;
32316: LD_ADDR_VAR 0 4
32320: PUSH
32321: LD_VAR 0 4
32325: PUSH
32326: LD_VAR 0 5
32330: DIFF
32331: ST_TO_ADDR
32332: GO 32291
32334: POP
32335: POP
// end ;
32336: LD_VAR 0 4
32340: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32341: LD_INT 0
32343: PPUSH
32344: PPUSH
32345: PPUSH
// result := true ;
32346: LD_ADDR_VAR 0 3
32350: PUSH
32351: LD_INT 1
32353: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32354: LD_ADDR_VAR 0 5
32358: PUSH
32359: LD_VAR 0 2
32363: PPUSH
32364: CALL_OW 480
32368: ST_TO_ADDR
// if not tmp then
32369: LD_VAR 0 5
32373: NOT
32374: IFFALSE 32378
// exit ;
32376: GO 32427
// for i in tmp do
32378: LD_ADDR_VAR 0 4
32382: PUSH
32383: LD_VAR 0 5
32387: PUSH
32388: FOR_IN
32389: IFFALSE 32425
// if GetTech ( i , side ) <> state_researched then
32391: LD_VAR 0 4
32395: PPUSH
32396: LD_VAR 0 1
32400: PPUSH
32401: CALL_OW 321
32405: PUSH
32406: LD_INT 2
32408: NONEQUAL
32409: IFFALSE 32423
// begin result := false ;
32411: LD_ADDR_VAR 0 3
32415: PUSH
32416: LD_INT 0
32418: ST_TO_ADDR
// exit ;
32419: POP
32420: POP
32421: GO 32427
// end ;
32423: GO 32388
32425: POP
32426: POP
// end ;
32427: LD_VAR 0 3
32431: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32447: LD_VAR 0 1
32451: NOT
32452: IFTRUE 32469
32454: PUSH
32455: LD_VAR 0 1
32459: PPUSH
32460: CALL_OW 257
32464: PUSH
32465: LD_INT 9
32467: NONEQUAL
32468: OR
32469: IFFALSE 32473
// exit ;
32471: GO 33052
// side := GetSide ( unit ) ;
32473: LD_ADDR_VAR 0 9
32477: PUSH
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 255
32487: ST_TO_ADDR
// tech_space := tech_spacanom ;
32488: LD_ADDR_VAR 0 12
32492: PUSH
32493: LD_INT 29
32495: ST_TO_ADDR
// tech_time := tech_taurad ;
32496: LD_ADDR_VAR 0 13
32500: PUSH
32501: LD_INT 28
32503: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32504: LD_ADDR_VAR 0 11
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 310
32518: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32519: LD_VAR 0 11
32523: PPUSH
32524: CALL_OW 247
32528: PUSH
32529: LD_INT 2
32531: EQUAL
32532: IFFALSE 32536
// exit ;
32534: GO 33052
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32536: LD_ADDR_VAR 0 8
32540: PUSH
32541: LD_INT 81
32543: PUSH
32544: LD_VAR 0 9
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 3
32555: PUSH
32556: LD_INT 21
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PPUSH
32574: CALL_OW 69
32578: ST_TO_ADDR
// if not tmp then
32579: LD_VAR 0 8
32583: NOT
32584: IFFALSE 32588
// exit ;
32586: GO 33052
// if in_unit then
32588: LD_VAR 0 11
32592: IFFALSE 32616
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32594: LD_ADDR_VAR 0 10
32598: PUSH
32599: LD_VAR 0 8
32603: PPUSH
32604: LD_VAR 0 11
32608: PPUSH
32609: CALL_OW 74
32613: ST_TO_ADDR
32614: GO 32636
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32616: LD_ADDR_VAR 0 10
32620: PUSH
32621: LD_VAR 0 8
32625: PPUSH
32626: LD_VAR 0 1
32630: PPUSH
32631: CALL_OW 74
32635: ST_TO_ADDR
// if not enemy then
32636: LD_VAR 0 10
32640: NOT
32641: IFFALSE 32645
// exit ;
32643: GO 33052
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32645: LD_VAR 0 11
32649: IFFALSE 32671
32651: PUSH
32652: LD_VAR 0 11
32656: PPUSH
32657: LD_VAR 0 10
32661: PPUSH
32662: CALL_OW 296
32666: PUSH
32667: LD_INT 13
32669: GREATER
32670: AND
32671: IFTRUE 32693
32673: PUSH
32674: LD_VAR 0 1
32678: PPUSH
32679: LD_VAR 0 10
32683: PPUSH
32684: CALL_OW 296
32688: PUSH
32689: LD_INT 12
32691: GREATER
32692: OR
32693: IFFALSE 32697
// exit ;
32695: GO 33052
// missile := [ 1 ] ;
32697: LD_ADDR_VAR 0 14
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32708: LD_VAR 0 9
32712: PPUSH
32713: LD_VAR 0 12
32717: PPUSH
32718: CALL_OW 325
32722: IFFALSE 32751
// missile := Replace ( missile , missile + 1 , 2 ) ;
32724: LD_ADDR_VAR 0 14
32728: PUSH
32729: LD_VAR 0 14
32733: PPUSH
32734: LD_VAR 0 14
32738: PUSH
32739: LD_INT 1
32741: PLUS
32742: PPUSH
32743: LD_INT 2
32745: PPUSH
32746: CALL_OW 1
32750: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32751: LD_VAR 0 9
32755: PPUSH
32756: LD_VAR 0 13
32760: PPUSH
32761: CALL_OW 325
32765: IFFALSE 32789
32767: PUSH
32768: LD_VAR 0 10
32772: PPUSH
32773: CALL_OW 255
32777: PPUSH
32778: LD_VAR 0 13
32782: PPUSH
32783: CALL_OW 325
32787: NOT
32788: AND
32789: IFFALSE 32818
// missile := Replace ( missile , missile + 1 , 3 ) ;
32791: LD_ADDR_VAR 0 14
32795: PUSH
32796: LD_VAR 0 14
32800: PPUSH
32801: LD_VAR 0 14
32805: PUSH
32806: LD_INT 1
32808: PLUS
32809: PPUSH
32810: LD_INT 3
32812: PPUSH
32813: CALL_OW 1
32817: ST_TO_ADDR
// if missile < 2 then
32818: LD_VAR 0 14
32822: PUSH
32823: LD_INT 2
32825: LESS
32826: IFFALSE 32830
// exit ;
32828: GO 33052
// x := GetX ( enemy ) ;
32830: LD_ADDR_VAR 0 4
32834: PUSH
32835: LD_VAR 0 10
32839: PPUSH
32840: CALL_OW 250
32844: ST_TO_ADDR
// y := GetY ( enemy ) ;
32845: LD_ADDR_VAR 0 5
32849: PUSH
32850: LD_VAR 0 10
32854: PPUSH
32855: CALL_OW 251
32859: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32860: LD_ADDR_VAR 0 6
32864: PUSH
32865: LD_VAR 0 4
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PPUSH
32874: LD_INT 1
32876: PPUSH
32877: CALL_OW 12
32881: PLUS
32882: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32883: LD_ADDR_VAR 0 7
32887: PUSH
32888: LD_VAR 0 5
32892: PUSH
32893: LD_INT 1
32895: NEG
32896: PPUSH
32897: LD_INT 1
32899: PPUSH
32900: CALL_OW 12
32904: PLUS
32905: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32906: LD_VAR 0 6
32910: PPUSH
32911: LD_VAR 0 7
32915: PPUSH
32916: CALL_OW 488
32920: NOT
32921: IFFALSE 32943
// begin _x := x ;
32923: LD_ADDR_VAR 0 6
32927: PUSH
32928: LD_VAR 0 4
32932: ST_TO_ADDR
// _y := y ;
32933: LD_ADDR_VAR 0 7
32937: PUSH
32938: LD_VAR 0 5
32942: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32943: LD_ADDR_VAR 0 3
32947: PUSH
32948: LD_INT 1
32950: PPUSH
32951: LD_VAR 0 14
32955: PPUSH
32956: CALL_OW 12
32960: ST_TO_ADDR
// case i of 1 :
32961: LD_VAR 0 3
32965: PUSH
32966: LD_INT 1
32968: DOUBLE
32969: EQUAL
32970: IFTRUE 32974
32972: GO 32991
32974: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32975: LD_VAR 0 1
32979: PPUSH
32980: LD_VAR 0 10
32984: PPUSH
32985: CALL_OW 115
32989: GO 33052
32991: LD_INT 2
32993: DOUBLE
32994: EQUAL
32995: IFTRUE 32999
32997: GO 33021
32999: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33000: LD_VAR 0 1
33004: PPUSH
33005: LD_VAR 0 6
33009: PPUSH
33010: LD_VAR 0 7
33014: PPUSH
33015: CALL_OW 153
33019: GO 33052
33021: LD_INT 3
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33051
33029: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33030: LD_VAR 0 1
33034: PPUSH
33035: LD_VAR 0 6
33039: PPUSH
33040: LD_VAR 0 7
33044: PPUSH
33045: CALL_OW 154
33049: GO 33052
33051: POP
// end ;
33052: LD_VAR 0 2
33056: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33057: LD_INT 0
33059: PPUSH
33060: PPUSH
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
// if not unit or not building then
33065: LD_VAR 0 1
33069: NOT
33070: IFTRUE 33079
33072: PUSH
33073: LD_VAR 0 2
33077: NOT
33078: OR
33079: IFFALSE 33083
// exit ;
33081: GO 33241
// x := GetX ( building ) ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 250
33097: ST_TO_ADDR
// y := GetY ( building ) ;
33098: LD_ADDR_VAR 0 6
33102: PUSH
33103: LD_VAR 0 2
33107: PPUSH
33108: CALL_OW 251
33112: ST_TO_ADDR
// for i := 0 to 5 do
33113: LD_ADDR_VAR 0 4
33117: PUSH
33118: DOUBLE
33119: LD_INT 0
33121: DEC
33122: ST_TO_ADDR
33123: LD_INT 5
33125: PUSH
33126: FOR_TO
33127: IFFALSE 33239
// begin _x := ShiftX ( x , i , 3 ) ;
33129: LD_ADDR_VAR 0 7
33133: PUSH
33134: LD_VAR 0 5
33138: PPUSH
33139: LD_VAR 0 4
33143: PPUSH
33144: LD_INT 3
33146: PPUSH
33147: CALL_OW 272
33151: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33152: LD_ADDR_VAR 0 8
33156: PUSH
33157: LD_VAR 0 6
33161: PPUSH
33162: LD_VAR 0 4
33166: PPUSH
33167: LD_INT 3
33169: PPUSH
33170: CALL_OW 273
33174: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33175: LD_VAR 0 7
33179: PPUSH
33180: LD_VAR 0 8
33184: PPUSH
33185: CALL_OW 488
33189: NOT
33190: IFFALSE 33194
// continue ;
33192: GO 33126
// if HexInfo ( _x , _y ) = 0 then
33194: LD_VAR 0 7
33198: PPUSH
33199: LD_VAR 0 8
33203: PPUSH
33204: CALL_OW 428
33208: PUSH
33209: LD_INT 0
33211: EQUAL
33212: IFFALSE 33237
// begin ComMoveXY ( unit , _x , _y ) ;
33214: LD_VAR 0 1
33218: PPUSH
33219: LD_VAR 0 7
33223: PPUSH
33224: LD_VAR 0 8
33228: PPUSH
33229: CALL_OW 111
// exit ;
33233: POP
33234: POP
33235: GO 33241
// end ; end ;
33237: GO 33126
33239: POP
33240: POP
// end ;
33241: LD_VAR 0 3
33245: RET
// export function ScanBase ( side , base_area ) ; begin
33246: LD_INT 0
33248: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33249: LD_ADDR_VAR 0 3
33253: PUSH
33254: LD_VAR 0 2
33258: PPUSH
33259: LD_INT 81
33261: PUSH
33262: LD_VAR 0 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PPUSH
33271: CALL_OW 70
33275: ST_TO_ADDR
// end ;
33276: LD_VAR 0 3
33280: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33281: LD_INT 0
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
// result := false ;
33287: LD_ADDR_VAR 0 2
33291: PUSH
33292: LD_INT 0
33294: ST_TO_ADDR
// side := GetSide ( unit ) ;
33295: LD_ADDR_VAR 0 3
33299: PUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 255
33309: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33310: LD_ADDR_VAR 0 4
33314: PUSH
33315: LD_VAR 0 1
33319: PPUSH
33320: CALL_OW 248
33324: ST_TO_ADDR
// case nat of 1 :
33325: LD_VAR 0 4
33329: PUSH
33330: LD_INT 1
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33338
33336: GO 33349
33338: POP
// tech := tech_lassight ; 2 :
33339: LD_ADDR_VAR 0 5
33343: PUSH
33344: LD_INT 12
33346: ST_TO_ADDR
33347: GO 33388
33349: LD_INT 2
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33368
33357: POP
// tech := tech_mortar ; 3 :
33358: LD_ADDR_VAR 0 5
33362: PUSH
33363: LD_INT 41
33365: ST_TO_ADDR
33366: GO 33388
33368: LD_INT 3
33370: DOUBLE
33371: EQUAL
33372: IFTRUE 33376
33374: GO 33387
33376: POP
// tech := tech_bazooka ; end ;
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: LD_INT 44
33384: ST_TO_ADDR
33385: GO 33388
33387: POP
// if Researched ( side , tech ) then
33388: LD_VAR 0 3
33392: PPUSH
33393: LD_VAR 0 5
33397: PPUSH
33398: CALL_OW 325
33402: IFFALSE 33429
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33404: LD_ADDR_VAR 0 2
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: LD_INT 8
33414: PUSH
33415: LD_INT 9
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: PUSH
33423: LD_VAR 0 4
33427: ARRAY
33428: ST_TO_ADDR
// end ;
33429: LD_VAR 0 2
33433: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33434: LD_INT 0
33436: PPUSH
33437: PPUSH
33438: PPUSH
// if not mines then
33439: LD_VAR 0 2
33443: NOT
33444: IFFALSE 33448
// exit ;
33446: GO 33592
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33448: LD_ADDR_VAR 0 5
33452: PUSH
33453: LD_INT 81
33455: PUSH
33456: LD_VAR 0 1
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 3
33467: PUSH
33468: LD_INT 21
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PPUSH
33486: CALL_OW 69
33490: ST_TO_ADDR
// for i in mines do
33491: LD_ADDR_VAR 0 4
33495: PUSH
33496: LD_VAR 0 2
33500: PUSH
33501: FOR_IN
33502: IFFALSE 33590
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33504: LD_VAR 0 4
33508: PUSH
33509: LD_INT 1
33511: ARRAY
33512: PPUSH
33513: LD_VAR 0 4
33517: PUSH
33518: LD_INT 2
33520: ARRAY
33521: PPUSH
33522: CALL_OW 458
33526: NOT
33527: IFFALSE 33531
// continue ;
33529: GO 33501
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33531: LD_VAR 0 4
33535: PUSH
33536: LD_INT 1
33538: ARRAY
33539: PPUSH
33540: LD_VAR 0 4
33544: PUSH
33545: LD_INT 2
33547: ARRAY
33548: PPUSH
33549: CALL_OW 428
33553: PUSH
33554: LD_VAR 0 5
33558: IN
33559: IFFALSE 33588
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33561: LD_VAR 0 4
33565: PUSH
33566: LD_INT 1
33568: ARRAY
33569: PPUSH
33570: LD_VAR 0 4
33574: PUSH
33575: LD_INT 2
33577: ARRAY
33578: PPUSH
33579: LD_VAR 0 1
33583: PPUSH
33584: CALL_OW 456
// end ;
33588: GO 33501
33590: POP
33591: POP
// end ;
33592: LD_VAR 0 3
33596: RET
// export function Count ( array ) ; begin
33597: LD_INT 0
33599: PPUSH
// result := array + 0 ;
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_VAR 0 1
33609: PUSH
33610: LD_INT 0
33612: PLUS
33613: ST_TO_ADDR
// end ;
33614: LD_VAR 0 2
33618: RET
// export function IsEmpty ( building ) ; begin
33619: LD_INT 0
33621: PPUSH
// if not building then
33622: LD_VAR 0 1
33626: NOT
33627: IFFALSE 33631
// exit ;
33629: GO 33674
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33631: LD_ADDR_VAR 0 2
33635: PUSH
33636: LD_VAR 0 1
33640: PUSH
33641: LD_INT 22
33643: PUSH
33644: LD_VAR 0 1
33648: PPUSH
33649: CALL_OW 255
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 58
33660: PUSH
33661: EMPTY
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: IN
33673: ST_TO_ADDR
// end ;
33674: LD_VAR 0 2
33678: RET
// export function IsNotFull ( building ) ; var places ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
// if not building then
33683: LD_VAR 0 1
33687: NOT
33688: IFFALSE 33692
// exit ;
33690: GO 33720
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33692: LD_ADDR_VAR 0 2
33696: PUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_INT 3
33704: PUSH
33705: LD_INT 62
33707: PUSH
33708: EMPTY
33709: LIST
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PPUSH
33715: CALL_OW 72
33719: ST_TO_ADDR
// end ;
33720: LD_VAR 0 2
33724: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33725: LD_INT 0
33727: PPUSH
33728: PPUSH
33729: PPUSH
33730: PPUSH
// tmp := [ ] ;
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: EMPTY
33737: ST_TO_ADDR
// list := [ ] ;
33738: LD_ADDR_VAR 0 5
33742: PUSH
33743: EMPTY
33744: ST_TO_ADDR
// for i = 16 to 25 do
33745: LD_ADDR_VAR 0 4
33749: PUSH
33750: DOUBLE
33751: LD_INT 16
33753: DEC
33754: ST_TO_ADDR
33755: LD_INT 25
33757: PUSH
33758: FOR_TO
33759: IFFALSE 33832
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33761: LD_ADDR_VAR 0 3
33765: PUSH
33766: LD_VAR 0 3
33770: PUSH
33771: LD_INT 22
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 255
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 91
33790: PUSH
33791: LD_VAR 0 1
33795: PUSH
33796: LD_INT 6
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 30
33806: PUSH
33807: LD_VAR 0 4
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: PPUSH
33824: CALL_OW 69
33828: ADD
33829: ST_TO_ADDR
33830: GO 33758
33832: POP
33833: POP
// for i = 1 to tmp do
33834: LD_ADDR_VAR 0 4
33838: PUSH
33839: DOUBLE
33840: LD_INT 1
33842: DEC
33843: ST_TO_ADDR
33844: LD_VAR 0 3
33848: PUSH
33849: FOR_TO
33850: IFFALSE 33938
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33852: LD_ADDR_VAR 0 5
33856: PUSH
33857: LD_VAR 0 5
33861: PUSH
33862: LD_VAR 0 3
33866: PUSH
33867: LD_VAR 0 4
33871: ARRAY
33872: PPUSH
33873: CALL_OW 266
33877: PUSH
33878: LD_VAR 0 3
33882: PUSH
33883: LD_VAR 0 4
33887: ARRAY
33888: PPUSH
33889: CALL_OW 250
33893: PUSH
33894: LD_VAR 0 3
33898: PUSH
33899: LD_VAR 0 4
33903: ARRAY
33904: PPUSH
33905: CALL_OW 251
33909: PUSH
33910: LD_VAR 0 3
33914: PUSH
33915: LD_VAR 0 4
33919: ARRAY
33920: PPUSH
33921: CALL_OW 254
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: PUSH
33932: EMPTY
33933: LIST
33934: ADD
33935: ST_TO_ADDR
33936: GO 33849
33938: POP
33939: POP
// result := list ;
33940: LD_ADDR_VAR 0 2
33944: PUSH
33945: LD_VAR 0 5
33949: ST_TO_ADDR
// end ;
33950: LD_VAR 0 2
33954: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33955: LD_INT 0
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
// if not factory then
33964: LD_VAR 0 1
33968: NOT
33969: IFFALSE 33973
// exit ;
33971: GO 34576
// if control = control_apeman then
33973: LD_VAR 0 4
33977: PUSH
33978: LD_INT 5
33980: EQUAL
33981: IFFALSE 34090
// begin tmp := UnitsInside ( factory ) ;
33983: LD_ADDR_VAR 0 8
33987: PUSH
33988: LD_VAR 0 1
33992: PPUSH
33993: CALL_OW 313
33997: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33998: LD_VAR 0 8
34002: PPUSH
34003: LD_INT 25
34005: PUSH
34006: LD_INT 12
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PPUSH
34013: CALL_OW 72
34017: NOT
34018: IFFALSE 34028
// control := control_manual ;
34020: LD_ADDR_VAR 0 4
34024: PUSH
34025: LD_INT 1
34027: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34028: LD_ADDR_VAR 0 8
34032: PUSH
34033: LD_VAR 0 1
34037: PPUSH
34038: CALL 33725 0 1
34042: ST_TO_ADDR
// if tmp then
34043: LD_VAR 0 8
34047: IFFALSE 34090
// begin for i in tmp do
34049: LD_ADDR_VAR 0 7
34053: PUSH
34054: LD_VAR 0 8
34058: PUSH
34059: FOR_IN
34060: IFFALSE 34088
// if i [ 1 ] = b_ext_radio then
34062: LD_VAR 0 7
34066: PUSH
34067: LD_INT 1
34069: ARRAY
34070: PUSH
34071: LD_INT 22
34073: EQUAL
34074: IFFALSE 34086
// begin control := control_remote ;
34076: LD_ADDR_VAR 0 4
34080: PUSH
34081: LD_INT 2
34083: ST_TO_ADDR
// break ;
34084: GO 34088
// end ;
34086: GO 34059
34088: POP
34089: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34090: LD_VAR 0 1
34094: PPUSH
34095: LD_VAR 0 2
34099: PPUSH
34100: LD_VAR 0 3
34104: PPUSH
34105: LD_VAR 0 4
34109: PPUSH
34110: LD_VAR 0 5
34114: PPUSH
34115: CALL_OW 448
34119: IFFALSE 34154
// begin result := [ chassis , engine , control , weapon ] ;
34121: LD_ADDR_VAR 0 6
34125: PUSH
34126: LD_VAR 0 2
34130: PUSH
34131: LD_VAR 0 3
34135: PUSH
34136: LD_VAR 0 4
34140: PUSH
34141: LD_VAR 0 5
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// exit ;
34152: GO 34576
// end ; _chassis := AvailableChassisList ( factory ) ;
34154: LD_ADDR_VAR 0 9
34158: PUSH
34159: LD_VAR 0 1
34163: PPUSH
34164: CALL_OW 475
34168: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34169: LD_ADDR_VAR 0 11
34173: PUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: CALL_OW 476
34183: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34184: LD_ADDR_VAR 0 12
34188: PUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: CALL_OW 477
34198: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34199: LD_ADDR_VAR 0 10
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 478
34213: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34214: LD_VAR 0 9
34218: NOT
34219: IFTRUE 34228
34221: PUSH
34222: LD_VAR 0 11
34226: NOT
34227: OR
34228: IFTRUE 34237
34230: PUSH
34231: LD_VAR 0 12
34235: NOT
34236: OR
34237: IFTRUE 34246
34239: PUSH
34240: LD_VAR 0 10
34244: NOT
34245: OR
34246: IFFALSE 34281
// begin result := [ chassis , engine , control , weapon ] ;
34248: LD_ADDR_VAR 0 6
34252: PUSH
34253: LD_VAR 0 2
34257: PUSH
34258: LD_VAR 0 3
34262: PUSH
34263: LD_VAR 0 4
34267: PUSH
34268: LD_VAR 0 5
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// exit ;
34279: GO 34576
// end ; if not chassis in _chassis then
34281: LD_VAR 0 2
34285: PUSH
34286: LD_VAR 0 9
34290: IN
34291: NOT
34292: IFFALSE 34318
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34294: LD_ADDR_VAR 0 2
34298: PUSH
34299: LD_VAR 0 9
34303: PUSH
34304: LD_INT 1
34306: PPUSH
34307: LD_VAR 0 9
34311: PPUSH
34312: CALL_OW 12
34316: ARRAY
34317: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34318: LD_VAR 0 2
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL 34581 0 2
34332: NOT
34333: IFFALSE 34394
// repeat engine := _engine [ 1 ] ;
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_VAR 0 11
34344: PUSH
34345: LD_INT 1
34347: ARRAY
34348: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34349: LD_ADDR_VAR 0 11
34353: PUSH
34354: LD_VAR 0 11
34358: PPUSH
34359: LD_INT 1
34361: PPUSH
34362: CALL_OW 3
34366: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34367: LD_VAR 0 2
34371: PPUSH
34372: LD_VAR 0 3
34376: PPUSH
34377: CALL 34581 0 2
34381: IFTRUE 34392
34383: PUSH
34384: LD_VAR 0 11
34388: PUSH
34389: EMPTY
34390: EQUAL
34391: OR
34392: IFFALSE 34335
// if not control in _control then
34394: LD_VAR 0 4
34398: PUSH
34399: LD_VAR 0 12
34403: IN
34404: NOT
34405: IFFALSE 34431
// control := _control [ rand ( 1 , _control ) ] ;
34407: LD_ADDR_VAR 0 4
34411: PUSH
34412: LD_VAR 0 12
34416: PUSH
34417: LD_INT 1
34419: PPUSH
34420: LD_VAR 0 12
34424: PPUSH
34425: CALL_OW 12
34429: ARRAY
34430: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34431: LD_VAR 0 2
34435: PPUSH
34436: LD_VAR 0 5
34440: PPUSH
34441: CALL 34803 0 2
34445: NOT
34446: IFFALSE 34507
// repeat weapon := _weapon [ 1 ] ;
34448: LD_ADDR_VAR 0 5
34452: PUSH
34453: LD_VAR 0 10
34457: PUSH
34458: LD_INT 1
34460: ARRAY
34461: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34462: LD_ADDR_VAR 0 10
34466: PUSH
34467: LD_VAR 0 10
34471: PPUSH
34472: LD_INT 1
34474: PPUSH
34475: CALL_OW 3
34479: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34480: LD_VAR 0 2
34484: PPUSH
34485: LD_VAR 0 5
34489: PPUSH
34490: CALL 34803 0 2
34494: IFTRUE 34505
34496: PUSH
34497: LD_VAR 0 10
34501: PUSH
34502: EMPTY
34503: EQUAL
34504: OR
34505: IFFALSE 34448
// result := [ ] ;
34507: LD_ADDR_VAR 0 6
34511: PUSH
34512: EMPTY
34513: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34514: LD_VAR 0 1
34518: PPUSH
34519: LD_VAR 0 2
34523: PPUSH
34524: LD_VAR 0 3
34528: PPUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: LD_VAR 0 5
34538: PPUSH
34539: CALL_OW 448
34543: IFFALSE 34576
// result := [ chassis , engine , control , weapon ] ;
34545: LD_ADDR_VAR 0 6
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_VAR 0 3
34559: PUSH
34560: LD_VAR 0 4
34564: PUSH
34565: LD_VAR 0 5
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: ST_TO_ADDR
// end ;
34576: LD_VAR 0 6
34580: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34581: LD_INT 0
34583: PPUSH
// if not chassis or not engine then
34584: LD_VAR 0 1
34588: NOT
34589: IFTRUE 34598
34591: PUSH
34592: LD_VAR 0 2
34596: NOT
34597: OR
34598: IFFALSE 34602
// exit ;
34600: GO 34798
// case engine of engine_solar :
34602: LD_VAR 0 2
34606: PUSH
34607: LD_INT 2
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34653
34615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 11
34623: PUSH
34624: LD_INT 12
34626: PUSH
34627: LD_INT 13
34629: PUSH
34630: LD_INT 14
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: ST_TO_ADDR
34651: GO 34782
34653: LD_INT 1
34655: DOUBLE
34656: EQUAL
34657: IFTRUE 34661
34659: GO 34723
34661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34662: LD_ADDR_VAR 0 3
34666: PUSH
34667: LD_INT 11
34669: PUSH
34670: LD_INT 12
34672: PUSH
34673: LD_INT 13
34675: PUSH
34676: LD_INT 14
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: LD_INT 4
34690: PUSH
34691: LD_INT 5
34693: PUSH
34694: LD_INT 21
34696: PUSH
34697: LD_INT 23
34699: PUSH
34700: LD_INT 22
34702: PUSH
34703: LD_INT 24
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: ST_TO_ADDR
34721: GO 34782
34723: LD_INT 3
34725: DOUBLE
34726: EQUAL
34727: IFTRUE 34731
34729: GO 34781
34731: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34732: LD_ADDR_VAR 0 3
34736: PUSH
34737: LD_INT 13
34739: PUSH
34740: LD_INT 14
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: LD_INT 4
34751: PUSH
34752: LD_INT 5
34754: PUSH
34755: LD_INT 21
34757: PUSH
34758: LD_INT 22
34760: PUSH
34761: LD_INT 23
34763: PUSH
34764: LD_INT 24
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
34779: GO 34782
34781: POP
// result := ( chassis in result ) ;
34782: LD_ADDR_VAR 0 3
34786: PUSH
34787: LD_VAR 0 1
34791: PUSH
34792: LD_VAR 0 3
34796: IN
34797: ST_TO_ADDR
// end ;
34798: LD_VAR 0 3
34802: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34803: LD_INT 0
34805: PPUSH
// if not chassis or not weapon then
34806: LD_VAR 0 1
34810: NOT
34811: IFTRUE 34820
34813: PUSH
34814: LD_VAR 0 2
34818: NOT
34819: OR
34820: IFFALSE 34824
// exit ;
34822: GO 35884
// case weapon of us_machine_gun :
34824: LD_VAR 0 2
34828: PUSH
34829: LD_INT 2
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34867
34837: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 4
34854: PUSH
34855: LD_INT 5
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: ST_TO_ADDR
34865: GO 35868
34867: LD_INT 3
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34875
34873: GO 34905
34875: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34876: LD_ADDR_VAR 0 3
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: LD_INT 5
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: ST_TO_ADDR
34903: GO 35868
34905: LD_INT 11
34907: DOUBLE
34908: EQUAL
34909: IFTRUE 34913
34911: GO 34943
34913: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: LD_INT 4
34930: PUSH
34931: LD_INT 5
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: ST_TO_ADDR
34941: GO 35868
34943: LD_INT 4
34945: DOUBLE
34946: EQUAL
34947: IFTRUE 34951
34949: GO 34977
34951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34952: LD_ADDR_VAR 0 3
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 4
34965: PUSH
34966: LD_INT 5
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: ST_TO_ADDR
34975: GO 35868
34977: LD_INT 5
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 34985
34983: GO 35011
34985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: LD_INT 4
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: ST_TO_ADDR
35009: GO 35868
35011: LD_INT 9
35013: DOUBLE
35014: EQUAL
35015: IFTRUE 35019
35017: GO 35045
35019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 3
35030: PUSH
35031: LD_INT 4
35033: PUSH
35034: LD_INT 5
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: ST_TO_ADDR
35043: GO 35868
35045: LD_INT 7
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35079
35053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 4
35067: PUSH
35068: LD_INT 5
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
35077: GO 35868
35079: LD_INT 12
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35087
35085: GO 35113
35087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: LD_INT 4
35101: PUSH
35102: LD_INT 5
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: ST_TO_ADDR
35111: GO 35868
35113: LD_INT 13
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35147
35121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: LD_INT 3
35132: PUSH
35133: LD_INT 4
35135: PUSH
35136: LD_INT 5
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
35145: GO 35868
35147: LD_INT 14
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35155
35153: GO 35173
35155: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_INT 4
35163: PUSH
35164: LD_INT 5
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: ST_TO_ADDR
35171: GO 35868
35173: LD_INT 6
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35199
35181: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35182: LD_ADDR_VAR 0 3
35186: PUSH
35187: LD_INT 4
35189: PUSH
35190: LD_INT 5
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: ST_TO_ADDR
35197: GO 35868
35199: LD_INT 10
35201: DOUBLE
35202: EQUAL
35203: IFTRUE 35207
35205: GO 35225
35207: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35208: LD_ADDR_VAR 0 3
35212: PUSH
35213: LD_INT 4
35215: PUSH
35216: LD_INT 5
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: ST_TO_ADDR
35223: GO 35868
35225: LD_INT 22
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35259
35233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_INT 11
35241: PUSH
35242: LD_INT 12
35244: PUSH
35245: LD_INT 13
35247: PUSH
35248: LD_INT 14
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: ST_TO_ADDR
35257: GO 35868
35259: LD_INT 23
35261: DOUBLE
35262: EQUAL
35263: IFTRUE 35267
35265: GO 35293
35267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35268: LD_ADDR_VAR 0 3
35272: PUSH
35273: LD_INT 11
35275: PUSH
35276: LD_INT 12
35278: PUSH
35279: LD_INT 13
35281: PUSH
35282: LD_INT 14
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
35291: GO 35868
35293: LD_INT 24
35295: DOUBLE
35296: EQUAL
35297: IFTRUE 35301
35299: GO 35327
35301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35302: LD_ADDR_VAR 0 3
35306: PUSH
35307: LD_INT 11
35309: PUSH
35310: LD_INT 12
35312: PUSH
35313: LD_INT 13
35315: PUSH
35316: LD_INT 14
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
35325: GO 35868
35327: LD_INT 30
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35335
35333: GO 35361
35335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35336: LD_ADDR_VAR 0 3
35340: PUSH
35341: LD_INT 11
35343: PUSH
35344: LD_INT 12
35346: PUSH
35347: LD_INT 13
35349: PUSH
35350: LD_INT 14
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
35359: GO 35868
35361: LD_INT 25
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35369
35367: GO 35387
35369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35370: LD_ADDR_VAR 0 3
35374: PUSH
35375: LD_INT 13
35377: PUSH
35378: LD_INT 14
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: ST_TO_ADDR
35385: GO 35868
35387: LD_INT 27
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 35413
35395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35396: LD_ADDR_VAR 0 3
35400: PUSH
35401: LD_INT 13
35403: PUSH
35404: LD_INT 14
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: ST_TO_ADDR
35411: GO 35868
35413: LD_INT 92
35415: DOUBLE
35416: EQUAL
35417: IFTRUE 35421
35419: GO 35447
35421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35422: LD_ADDR_VAR 0 3
35426: PUSH
35427: LD_INT 11
35429: PUSH
35430: LD_INT 12
35432: PUSH
35433: LD_INT 13
35435: PUSH
35436: LD_INT 14
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: ST_TO_ADDR
35445: GO 35868
35447: LD_INT 28
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35455
35453: GO 35473
35455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: LD_INT 13
35463: PUSH
35464: LD_INT 14
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: ST_TO_ADDR
35471: GO 35868
35473: LD_INT 29
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35481
35479: GO 35499
35481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35482: LD_ADDR_VAR 0 3
35486: PUSH
35487: LD_INT 13
35489: PUSH
35490: LD_INT 14
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: ST_TO_ADDR
35497: GO 35868
35499: LD_INT 31
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 35525
35507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35508: LD_ADDR_VAR 0 3
35512: PUSH
35513: LD_INT 13
35515: PUSH
35516: LD_INT 14
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: ST_TO_ADDR
35523: GO 35868
35525: LD_INT 26
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35533
35531: GO 35551
35533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35534: LD_ADDR_VAR 0 3
35538: PUSH
35539: LD_INT 13
35541: PUSH
35542: LD_INT 14
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: ST_TO_ADDR
35549: GO 35868
35551: LD_INT 42
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35559
35557: GO 35585
35559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35560: LD_ADDR_VAR 0 3
35564: PUSH
35565: LD_INT 21
35567: PUSH
35568: LD_INT 22
35570: PUSH
35571: LD_INT 23
35573: PUSH
35574: LD_INT 24
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
35583: GO 35868
35585: LD_INT 43
35587: DOUBLE
35588: EQUAL
35589: IFTRUE 35593
35591: GO 35619
35593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35594: LD_ADDR_VAR 0 3
35598: PUSH
35599: LD_INT 21
35601: PUSH
35602: LD_INT 22
35604: PUSH
35605: LD_INT 23
35607: PUSH
35608: LD_INT 24
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
35617: GO 35868
35619: LD_INT 44
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35627
35625: GO 35653
35627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: LD_INT 21
35635: PUSH
35636: LD_INT 22
35638: PUSH
35639: LD_INT 23
35641: PUSH
35642: LD_INT 24
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
35651: GO 35868
35653: LD_INT 45
35655: DOUBLE
35656: EQUAL
35657: IFTRUE 35661
35659: GO 35687
35661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35662: LD_ADDR_VAR 0 3
35666: PUSH
35667: LD_INT 21
35669: PUSH
35670: LD_INT 22
35672: PUSH
35673: LD_INT 23
35675: PUSH
35676: LD_INT 24
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
35685: GO 35868
35687: LD_INT 49
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35695
35693: GO 35721
35695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35696: LD_ADDR_VAR 0 3
35700: PUSH
35701: LD_INT 21
35703: PUSH
35704: LD_INT 22
35706: PUSH
35707: LD_INT 23
35709: PUSH
35710: LD_INT 24
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 35868
35721: LD_INT 51
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35755
35729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35730: LD_ADDR_VAR 0 3
35734: PUSH
35735: LD_INT 21
35737: PUSH
35738: LD_INT 22
35740: PUSH
35741: LD_INT 23
35743: PUSH
35744: LD_INT 24
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
35753: GO 35868
35755: LD_INT 52
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 35789
35763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 21
35771: PUSH
35772: LD_INT 22
35774: PUSH
35775: LD_INT 23
35777: PUSH
35778: LD_INT 24
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
35787: GO 35868
35789: LD_INT 53
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35815
35797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_INT 23
35805: PUSH
35806: LD_INT 24
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 35868
35815: LD_INT 46
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35841
35823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 23
35831: PUSH
35832: LD_INT 24
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: ST_TO_ADDR
35839: GO 35868
35841: LD_INT 47
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35849
35847: GO 35867
35849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35850: LD_ADDR_VAR 0 3
35854: PUSH
35855: LD_INT 23
35857: PUSH
35858: LD_INT 24
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: ST_TO_ADDR
35865: GO 35868
35867: POP
// result := ( chassis in result ) ;
35868: LD_ADDR_VAR 0 3
35872: PUSH
35873: LD_VAR 0 1
35877: PUSH
35878: LD_VAR 0 3
35882: IN
35883: ST_TO_ADDR
// end ;
35884: LD_VAR 0 3
35888: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35889: LD_INT 0
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
// result := array ;
35898: LD_ADDR_VAR 0 5
35902: PUSH
35903: LD_VAR 0 1
35907: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35908: LD_VAR 0 1
35912: NOT
35913: IFTRUE 35922
35915: PUSH
35916: LD_VAR 0 2
35920: NOT
35921: OR
35922: IFTRUE 35931
35924: PUSH
35925: LD_VAR 0 3
35929: NOT
35930: OR
35931: IFTRUE 35945
35933: PUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_VAR 0 1
35943: GREATER
35944: OR
35945: IFTRUE 35959
35947: PUSH
35948: LD_VAR 0 3
35952: PUSH
35953: LD_VAR 0 1
35957: GREATER
35958: OR
35959: IFFALSE 35963
// exit ;
35961: GO 36259
// if direction then
35963: LD_VAR 0 4
35967: IFFALSE 36031
// begin d := 1 ;
35969: LD_ADDR_VAR 0 9
35973: PUSH
35974: LD_INT 1
35976: ST_TO_ADDR
// if i_from > i_to then
35977: LD_VAR 0 2
35981: PUSH
35982: LD_VAR 0 3
35986: GREATER
35987: IFFALSE 36013
// length := ( array - i_from ) + i_to else
35989: LD_ADDR_VAR 0 11
35993: PUSH
35994: LD_VAR 0 1
35998: PUSH
35999: LD_VAR 0 2
36003: MINUS
36004: PUSH
36005: LD_VAR 0 3
36009: PLUS
36010: ST_TO_ADDR
36011: GO 36029
// length := i_to - i_from ;
36013: LD_ADDR_VAR 0 11
36017: PUSH
36018: LD_VAR 0 3
36022: PUSH
36023: LD_VAR 0 2
36027: MINUS
36028: ST_TO_ADDR
// end else
36029: GO 36092
// begin d := - 1 ;
36031: LD_ADDR_VAR 0 9
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: ST_TO_ADDR
// if i_from > i_to then
36040: LD_VAR 0 2
36044: PUSH
36045: LD_VAR 0 3
36049: GREATER
36050: IFFALSE 36070
// length := i_from - i_to else
36052: LD_ADDR_VAR 0 11
36056: PUSH
36057: LD_VAR 0 2
36061: PUSH
36062: LD_VAR 0 3
36066: MINUS
36067: ST_TO_ADDR
36068: GO 36092
// length := ( array - i_to ) + i_from ;
36070: LD_ADDR_VAR 0 11
36074: PUSH
36075: LD_VAR 0 1
36079: PUSH
36080: LD_VAR 0 3
36084: MINUS
36085: PUSH
36086: LD_VAR 0 2
36090: PLUS
36091: ST_TO_ADDR
// end ; if not length then
36092: LD_VAR 0 11
36096: NOT
36097: IFFALSE 36101
// exit ;
36099: GO 36259
// tmp := array ;
36101: LD_ADDR_VAR 0 10
36105: PUSH
36106: LD_VAR 0 1
36110: ST_TO_ADDR
// for i = 1 to length do
36111: LD_ADDR_VAR 0 6
36115: PUSH
36116: DOUBLE
36117: LD_INT 1
36119: DEC
36120: ST_TO_ADDR
36121: LD_VAR 0 11
36125: PUSH
36126: FOR_TO
36127: IFFALSE 36247
// begin for j = 1 to array do
36129: LD_ADDR_VAR 0 7
36133: PUSH
36134: DOUBLE
36135: LD_INT 1
36137: DEC
36138: ST_TO_ADDR
36139: LD_VAR 0 1
36143: PUSH
36144: FOR_TO
36145: IFFALSE 36233
// begin k := j + d ;
36147: LD_ADDR_VAR 0 8
36151: PUSH
36152: LD_VAR 0 7
36156: PUSH
36157: LD_VAR 0 9
36161: PLUS
36162: ST_TO_ADDR
// if k > array then
36163: LD_VAR 0 8
36167: PUSH
36168: LD_VAR 0 1
36172: GREATER
36173: IFFALSE 36183
// k := 1 ;
36175: LD_ADDR_VAR 0 8
36179: PUSH
36180: LD_INT 1
36182: ST_TO_ADDR
// if not k then
36183: LD_VAR 0 8
36187: NOT
36188: IFFALSE 36200
// k := array ;
36190: LD_ADDR_VAR 0 8
36194: PUSH
36195: LD_VAR 0 1
36199: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36200: LD_ADDR_VAR 0 10
36204: PUSH
36205: LD_VAR 0 10
36209: PPUSH
36210: LD_VAR 0 8
36214: PPUSH
36215: LD_VAR 0 1
36219: PUSH
36220: LD_VAR 0 7
36224: ARRAY
36225: PPUSH
36226: CALL_OW 1
36230: ST_TO_ADDR
// end ;
36231: GO 36144
36233: POP
36234: POP
// array := tmp ;
36235: LD_ADDR_VAR 0 1
36239: PUSH
36240: LD_VAR 0 10
36244: ST_TO_ADDR
// end ;
36245: GO 36126
36247: POP
36248: POP
// result := array ;
36249: LD_ADDR_VAR 0 5
36253: PUSH
36254: LD_VAR 0 1
36258: ST_TO_ADDR
// end ;
36259: LD_VAR 0 5
36263: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36264: LD_INT 0
36266: PPUSH
36267: PPUSH
// result := 0 ;
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_INT 0
36275: ST_TO_ADDR
// if not array or not value in array then
36276: LD_VAR 0 1
36280: NOT
36281: IFTRUE 36296
36283: PUSH
36284: LD_VAR 0 2
36288: PUSH
36289: LD_VAR 0 1
36293: IN
36294: NOT
36295: OR
36296: IFFALSE 36300
// exit ;
36298: GO 36354
// for i = 1 to array do
36300: LD_ADDR_VAR 0 4
36304: PUSH
36305: DOUBLE
36306: LD_INT 1
36308: DEC
36309: ST_TO_ADDR
36310: LD_VAR 0 1
36314: PUSH
36315: FOR_TO
36316: IFFALSE 36352
// if value = array [ i ] then
36318: LD_VAR 0 2
36322: PUSH
36323: LD_VAR 0 1
36327: PUSH
36328: LD_VAR 0 4
36332: ARRAY
36333: EQUAL
36334: IFFALSE 36350
// begin result := i ;
36336: LD_ADDR_VAR 0 3
36340: PUSH
36341: LD_VAR 0 4
36345: ST_TO_ADDR
// exit ;
36346: POP
36347: POP
36348: GO 36354
// end ;
36350: GO 36315
36352: POP
36353: POP
// end ;
36354: LD_VAR 0 3
36358: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36359: LD_INT 0
36361: PPUSH
// vc_chassis := chassis ;
36362: LD_ADDR_OWVAR 37
36366: PUSH
36367: LD_VAR 0 1
36371: ST_TO_ADDR
// vc_engine := engine ;
36372: LD_ADDR_OWVAR 39
36376: PUSH
36377: LD_VAR 0 2
36381: ST_TO_ADDR
// vc_control := control ;
36382: LD_ADDR_OWVAR 38
36386: PUSH
36387: LD_VAR 0 3
36391: ST_TO_ADDR
// vc_weapon := weapon ;
36392: LD_ADDR_OWVAR 40
36396: PUSH
36397: LD_VAR 0 4
36401: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36402: LD_ADDR_OWVAR 41
36406: PUSH
36407: LD_VAR 0 5
36411: ST_TO_ADDR
// end ;
36412: LD_VAR 0 6
36416: RET
// export function WantPlant ( unit ) ; var task ; begin
36417: LD_INT 0
36419: PPUSH
36420: PPUSH
// result := false ;
36421: LD_ADDR_VAR 0 2
36425: PUSH
36426: LD_INT 0
36428: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36429: LD_ADDR_VAR 0 3
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 437
36443: ST_TO_ADDR
// if task then
36444: LD_VAR 0 3
36448: IFFALSE 36476
// if task [ 1 ] [ 1 ] = p then
36450: LD_VAR 0 3
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: PUSH
36459: LD_INT 1
36461: ARRAY
36462: PUSH
36463: LD_STRING p
36465: EQUAL
36466: IFFALSE 36476
// result := true ;
36468: LD_ADDR_VAR 0 2
36472: PUSH
36473: LD_INT 1
36475: ST_TO_ADDR
// end ;
36476: LD_VAR 0 2
36480: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36481: LD_INT 0
36483: PPUSH
36484: PPUSH
36485: PPUSH
36486: PPUSH
// if pos < 1 then
36487: LD_VAR 0 2
36491: PUSH
36492: LD_INT 1
36494: LESS
36495: IFFALSE 36499
// exit ;
36497: GO 36802
// if pos = 1 then
36499: LD_VAR 0 2
36503: PUSH
36504: LD_INT 1
36506: EQUAL
36507: IFFALSE 36540
// result := Replace ( arr , pos [ 1 ] , value ) else
36509: LD_ADDR_VAR 0 4
36513: PUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 2
36523: PUSH
36524: LD_INT 1
36526: ARRAY
36527: PPUSH
36528: LD_VAR 0 3
36532: PPUSH
36533: CALL_OW 1
36537: ST_TO_ADDR
36538: GO 36802
// begin tmp := arr ;
36540: LD_ADDR_VAR 0 6
36544: PUSH
36545: LD_VAR 0 1
36549: ST_TO_ADDR
// s_arr := [ tmp ] ;
36550: LD_ADDR_VAR 0 7
36554: PUSH
36555: LD_VAR 0 6
36559: PUSH
36560: EMPTY
36561: LIST
36562: ST_TO_ADDR
// for i = 1 to pos - 1 do
36563: LD_ADDR_VAR 0 5
36567: PUSH
36568: DOUBLE
36569: LD_INT 1
36571: DEC
36572: ST_TO_ADDR
36573: LD_VAR 0 2
36577: PUSH
36578: LD_INT 1
36580: MINUS
36581: PUSH
36582: FOR_TO
36583: IFFALSE 36628
// begin tmp := tmp [ pos [ i ] ] ;
36585: LD_ADDR_VAR 0 6
36589: PUSH
36590: LD_VAR 0 6
36594: PUSH
36595: LD_VAR 0 2
36599: PUSH
36600: LD_VAR 0 5
36604: ARRAY
36605: ARRAY
36606: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36607: LD_ADDR_VAR 0 7
36611: PUSH
36612: LD_VAR 0 7
36616: PUSH
36617: LD_VAR 0 6
36621: PUSH
36622: EMPTY
36623: LIST
36624: ADD
36625: ST_TO_ADDR
// end ;
36626: GO 36582
36628: POP
36629: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36630: LD_ADDR_VAR 0 6
36634: PUSH
36635: LD_VAR 0 6
36639: PPUSH
36640: LD_VAR 0 2
36644: PUSH
36645: LD_VAR 0 2
36649: ARRAY
36650: PPUSH
36651: LD_VAR 0 3
36655: PPUSH
36656: CALL_OW 1
36660: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36661: LD_ADDR_VAR 0 7
36665: PUSH
36666: LD_VAR 0 7
36670: PPUSH
36671: LD_VAR 0 7
36675: PPUSH
36676: LD_VAR 0 6
36680: PPUSH
36681: CALL_OW 1
36685: ST_TO_ADDR
// for i = s_arr downto 2 do
36686: LD_ADDR_VAR 0 5
36690: PUSH
36691: DOUBLE
36692: LD_VAR 0 7
36696: INC
36697: ST_TO_ADDR
36698: LD_INT 2
36700: PUSH
36701: FOR_DOWNTO
36702: IFFALSE 36786
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36704: LD_ADDR_VAR 0 6
36708: PUSH
36709: LD_VAR 0 7
36713: PUSH
36714: LD_VAR 0 5
36718: PUSH
36719: LD_INT 1
36721: MINUS
36722: ARRAY
36723: PPUSH
36724: LD_VAR 0 2
36728: PUSH
36729: LD_VAR 0 5
36733: PUSH
36734: LD_INT 1
36736: MINUS
36737: ARRAY
36738: PPUSH
36739: LD_VAR 0 7
36743: PUSH
36744: LD_VAR 0 5
36748: ARRAY
36749: PPUSH
36750: CALL_OW 1
36754: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36755: LD_ADDR_VAR 0 7
36759: PUSH
36760: LD_VAR 0 7
36764: PPUSH
36765: LD_VAR 0 5
36769: PUSH
36770: LD_INT 1
36772: MINUS
36773: PPUSH
36774: LD_VAR 0 6
36778: PPUSH
36779: CALL_OW 1
36783: ST_TO_ADDR
// end ;
36784: GO 36701
36786: POP
36787: POP
// result := s_arr [ 1 ] ;
36788: LD_ADDR_VAR 0 4
36792: PUSH
36793: LD_VAR 0 7
36797: PUSH
36798: LD_INT 1
36800: ARRAY
36801: ST_TO_ADDR
// end ; end ;
36802: LD_VAR 0 4
36806: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36807: LD_INT 0
36809: PPUSH
36810: PPUSH
// if not list then
36811: LD_VAR 0 1
36815: NOT
36816: IFFALSE 36820
// exit ;
36818: GO 36911
// i := list [ pos1 ] ;
36820: LD_ADDR_VAR 0 5
36824: PUSH
36825: LD_VAR 0 1
36829: PUSH
36830: LD_VAR 0 2
36834: ARRAY
36835: ST_TO_ADDR
// if not i then
36836: LD_VAR 0 5
36840: NOT
36841: IFFALSE 36845
// exit ;
36843: GO 36911
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36845: LD_ADDR_VAR 0 1
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_VAR 0 1
36864: PUSH
36865: LD_VAR 0 3
36869: ARRAY
36870: PPUSH
36871: CALL_OW 1
36875: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36876: LD_ADDR_VAR 0 1
36880: PUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: LD_VAR 0 3
36890: PPUSH
36891: LD_VAR 0 5
36895: PPUSH
36896: CALL_OW 1
36900: ST_TO_ADDR
// result := list ;
36901: LD_ADDR_VAR 0 4
36905: PUSH
36906: LD_VAR 0 1
36910: ST_TO_ADDR
// end ;
36911: LD_VAR 0 4
36915: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36916: LD_INT 0
36918: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36919: LD_ADDR_VAR 0 5
36923: PUSH
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 250
36933: PPUSH
36934: LD_VAR 0 1
36938: PPUSH
36939: CALL_OW 251
36943: PPUSH
36944: LD_VAR 0 2
36948: PPUSH
36949: LD_VAR 0 3
36953: PPUSH
36954: LD_VAR 0 4
36958: PPUSH
36959: CALL 37341 0 5
36963: ST_TO_ADDR
// end ;
36964: LD_VAR 0 5
36968: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36969: LD_INT 0
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
// if not list or not unit then
36975: LD_VAR 0 2
36979: NOT
36980: IFTRUE 36989
36982: PUSH
36983: LD_VAR 0 1
36987: NOT
36988: OR
36989: IFFALSE 36993
// exit ;
36991: GO 37336
// result := [ ] ;
36993: LD_ADDR_VAR 0 5
36997: PUSH
36998: EMPTY
36999: ST_TO_ADDR
// for i in list do
37000: LD_ADDR_VAR 0 6
37004: PUSH
37005: LD_VAR 0 2
37009: PUSH
37010: FOR_IN
37011: IFFALSE 37229
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37013: LD_ADDR_VAR 0 8
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_VAR 0 6
37027: PUSH
37028: LD_INT 1
37030: ARRAY
37031: PPUSH
37032: LD_VAR 0 6
37036: PUSH
37037: LD_INT 2
37039: ARRAY
37040: PPUSH
37041: CALL_OW 297
37045: ST_TO_ADDR
// if not Count ( result ) then
37046: LD_VAR 0 5
37050: PPUSH
37051: CALL 33597 0 1
37055: NOT
37056: IFFALSE 37089
// begin result := Join ( result , [ i , tmp ] ) ;
37058: LD_ADDR_VAR 0 5
37062: PUSH
37063: LD_VAR 0 5
37067: PPUSH
37068: LD_VAR 0 6
37072: PUSH
37073: LD_VAR 0 8
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PPUSH
37082: CALL 69529 0 2
37086: ST_TO_ADDR
// continue ;
37087: GO 37010
// end ; if result [ result ] [ 2 ] <= tmp then
37089: LD_VAR 0 5
37093: PUSH
37094: LD_VAR 0 5
37098: ARRAY
37099: PUSH
37100: LD_INT 2
37102: ARRAY
37103: PUSH
37104: LD_VAR 0 8
37108: LESSEQUAL
37109: IFFALSE 37142
// result := Join ( result , [ i , tmp ] ) else
37111: LD_ADDR_VAR 0 5
37115: PUSH
37116: LD_VAR 0 5
37120: PPUSH
37121: LD_VAR 0 6
37125: PUSH
37126: LD_VAR 0 8
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PPUSH
37135: CALL 69529 0 2
37139: ST_TO_ADDR
37140: GO 37227
// begin for j := 1 to Count ( result ) do
37142: LD_ADDR_VAR 0 7
37146: PUSH
37147: DOUBLE
37148: LD_INT 1
37150: DEC
37151: ST_TO_ADDR
37152: LD_VAR 0 5
37156: PPUSH
37157: CALL 33597 0 1
37161: PUSH
37162: FOR_TO
37163: IFFALSE 37225
// begin if tmp < result [ j ] [ 2 ] then
37165: LD_VAR 0 8
37169: PUSH
37170: LD_VAR 0 5
37174: PUSH
37175: LD_VAR 0 7
37179: ARRAY
37180: PUSH
37181: LD_INT 2
37183: ARRAY
37184: LESS
37185: IFFALSE 37223
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37187: LD_ADDR_VAR 0 5
37191: PUSH
37192: LD_VAR 0 5
37196: PPUSH
37197: LD_VAR 0 7
37201: PPUSH
37202: LD_VAR 0 6
37206: PUSH
37207: LD_VAR 0 8
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PPUSH
37216: CALL_OW 2
37220: ST_TO_ADDR
// break ;
37221: GO 37225
// end ; end ;
37223: GO 37162
37225: POP
37226: POP
// end ; end ;
37227: GO 37010
37229: POP
37230: POP
// if result and not asc then
37231: LD_VAR 0 5
37235: IFFALSE 37244
37237: PUSH
37238: LD_VAR 0 3
37242: NOT
37243: AND
37244: IFFALSE 37261
// result := ReverseArray ( result ) ;
37246: LD_ADDR_VAR 0 5
37250: PUSH
37251: LD_VAR 0 5
37255: PPUSH
37256: CALL 64619 0 1
37260: ST_TO_ADDR
// tmp := [ ] ;
37261: LD_ADDR_VAR 0 8
37265: PUSH
37266: EMPTY
37267: ST_TO_ADDR
// if mode then
37268: LD_VAR 0 4
37272: IFFALSE 37336
// begin for i := 1 to result do
37274: LD_ADDR_VAR 0 6
37278: PUSH
37279: DOUBLE
37280: LD_INT 1
37282: DEC
37283: ST_TO_ADDR
37284: LD_VAR 0 5
37288: PUSH
37289: FOR_TO
37290: IFFALSE 37324
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37292: LD_ADDR_VAR 0 8
37296: PUSH
37297: LD_VAR 0 8
37301: PPUSH
37302: LD_VAR 0 5
37306: PUSH
37307: LD_VAR 0 6
37311: ARRAY
37312: PUSH
37313: LD_INT 1
37315: ARRAY
37316: PPUSH
37317: CALL 69529 0 2
37321: ST_TO_ADDR
37322: GO 37289
37324: POP
37325: POP
// result := tmp ;
37326: LD_ADDR_VAR 0 5
37330: PUSH
37331: LD_VAR 0 8
37335: ST_TO_ADDR
// end ; end ;
37336: LD_VAR 0 5
37340: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37341: LD_INT 0
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
// if not list then
37347: LD_VAR 0 3
37351: NOT
37352: IFFALSE 37356
// exit ;
37354: GO 37746
// result := [ ] ;
37356: LD_ADDR_VAR 0 6
37360: PUSH
37361: EMPTY
37362: ST_TO_ADDR
// for i in list do
37363: LD_ADDR_VAR 0 7
37367: PUSH
37368: LD_VAR 0 3
37372: PUSH
37373: FOR_IN
37374: IFFALSE 37576
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37376: LD_ADDR_VAR 0 9
37380: PUSH
37381: LD_VAR 0 7
37385: PPUSH
37386: LD_VAR 0 1
37390: PPUSH
37391: LD_VAR 0 2
37395: PPUSH
37396: CALL_OW 297
37400: ST_TO_ADDR
// if not result then
37401: LD_VAR 0 6
37405: NOT
37406: IFFALSE 37432
// result := [ [ i , tmp ] ] else
37408: LD_ADDR_VAR 0 6
37412: PUSH
37413: LD_VAR 0 7
37417: PUSH
37418: LD_VAR 0 9
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: EMPTY
37428: LIST
37429: ST_TO_ADDR
37430: GO 37574
// begin if result [ result ] [ 2 ] <= tmp then
37432: LD_VAR 0 6
37436: PUSH
37437: LD_VAR 0 6
37441: ARRAY
37442: PUSH
37443: LD_INT 2
37445: ARRAY
37446: PUSH
37447: LD_VAR 0 9
37451: LESSEQUAL
37452: IFFALSE 37494
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37454: LD_ADDR_VAR 0 6
37458: PUSH
37459: LD_VAR 0 6
37463: PPUSH
37464: LD_VAR 0 6
37468: PUSH
37469: LD_INT 1
37471: PLUS
37472: PPUSH
37473: LD_VAR 0 7
37477: PUSH
37478: LD_VAR 0 9
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PPUSH
37487: CALL_OW 2
37491: ST_TO_ADDR
37492: GO 37574
// for j := 1 to result do
37494: LD_ADDR_VAR 0 8
37498: PUSH
37499: DOUBLE
37500: LD_INT 1
37502: DEC
37503: ST_TO_ADDR
37504: LD_VAR 0 6
37508: PUSH
37509: FOR_TO
37510: IFFALSE 37572
// begin if tmp < result [ j ] [ 2 ] then
37512: LD_VAR 0 9
37516: PUSH
37517: LD_VAR 0 6
37521: PUSH
37522: LD_VAR 0 8
37526: ARRAY
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: LESS
37532: IFFALSE 37570
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37534: LD_ADDR_VAR 0 6
37538: PUSH
37539: LD_VAR 0 6
37543: PPUSH
37544: LD_VAR 0 8
37548: PPUSH
37549: LD_VAR 0 7
37553: PUSH
37554: LD_VAR 0 9
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PPUSH
37563: CALL_OW 2
37567: ST_TO_ADDR
// break ;
37568: GO 37572
// end ; end ;
37570: GO 37509
37572: POP
37573: POP
// end ; end ;
37574: GO 37373
37576: POP
37577: POP
// if result and not asc then
37578: LD_VAR 0 6
37582: IFFALSE 37591
37584: PUSH
37585: LD_VAR 0 4
37589: NOT
37590: AND
37591: IFFALSE 37666
// begin tmp := result ;
37593: LD_ADDR_VAR 0 9
37597: PUSH
37598: LD_VAR 0 6
37602: ST_TO_ADDR
// for i = tmp downto 1 do
37603: LD_ADDR_VAR 0 7
37607: PUSH
37608: DOUBLE
37609: LD_VAR 0 9
37613: INC
37614: ST_TO_ADDR
37615: LD_INT 1
37617: PUSH
37618: FOR_DOWNTO
37619: IFFALSE 37664
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37621: LD_ADDR_VAR 0 6
37625: PUSH
37626: LD_VAR 0 6
37630: PPUSH
37631: LD_VAR 0 9
37635: PUSH
37636: LD_VAR 0 7
37640: MINUS
37641: PUSH
37642: LD_INT 1
37644: PLUS
37645: PPUSH
37646: LD_VAR 0 9
37650: PUSH
37651: LD_VAR 0 7
37655: ARRAY
37656: PPUSH
37657: CALL_OW 1
37661: ST_TO_ADDR
37662: GO 37618
37664: POP
37665: POP
// end ; tmp := [ ] ;
37666: LD_ADDR_VAR 0 9
37670: PUSH
37671: EMPTY
37672: ST_TO_ADDR
// if mode then
37673: LD_VAR 0 5
37677: IFFALSE 37746
// begin for i = 1 to result do
37679: LD_ADDR_VAR 0 7
37683: PUSH
37684: DOUBLE
37685: LD_INT 1
37687: DEC
37688: ST_TO_ADDR
37689: LD_VAR 0 6
37693: PUSH
37694: FOR_TO
37695: IFFALSE 37734
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37697: LD_ADDR_VAR 0 9
37701: PUSH
37702: LD_VAR 0 9
37706: PPUSH
37707: LD_VAR 0 7
37711: PPUSH
37712: LD_VAR 0 6
37716: PUSH
37717: LD_VAR 0 7
37721: ARRAY
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: PPUSH
37727: CALL_OW 1
37731: ST_TO_ADDR
37732: GO 37694
37734: POP
37735: POP
// result := tmp ;
37736: LD_ADDR_VAR 0 6
37740: PUSH
37741: LD_VAR 0 9
37745: ST_TO_ADDR
// end ; end ;
37746: LD_VAR 0 6
37750: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37751: LD_INT 0
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37759: LD_ADDR_VAR 0 5
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// if not x or not y then
37781: LD_VAR 0 2
37785: NOT
37786: IFTRUE 37795
37788: PUSH
37789: LD_VAR 0 3
37793: NOT
37794: OR
37795: IFFALSE 37799
// exit ;
37797: GO 39455
// if not range then
37799: LD_VAR 0 4
37803: NOT
37804: IFFALSE 37814
// range := 10 ;
37806: LD_ADDR_VAR 0 4
37810: PUSH
37811: LD_INT 10
37813: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37814: LD_ADDR_VAR 0 8
37818: PUSH
37819: LD_INT 81
37821: PUSH
37822: LD_VAR 0 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 92
37833: PUSH
37834: LD_VAR 0 2
37838: PUSH
37839: LD_VAR 0 3
37843: PUSH
37844: LD_VAR 0 4
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: LD_INT 21
37860: PUSH
37861: LD_INT 3
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: PPUSH
37877: CALL_OW 69
37881: ST_TO_ADDR
// if not tmp then
37882: LD_VAR 0 8
37886: NOT
37887: IFFALSE 37891
// exit ;
37889: GO 39455
// for i in tmp do
37891: LD_ADDR_VAR 0 6
37895: PUSH
37896: LD_VAR 0 8
37900: PUSH
37901: FOR_IN
37902: IFFALSE 39430
// begin points := [ 0 , 0 , 0 ] ;
37904: LD_ADDR_VAR 0 9
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: ST_TO_ADDR
// bpoints := 1 ;
37923: LD_ADDR_VAR 0 10
37927: PUSH
37928: LD_INT 1
37930: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37931: LD_VAR 0 6
37935: PPUSH
37936: CALL_OW 247
37940: PUSH
37941: LD_INT 1
37943: DOUBLE
37944: EQUAL
37945: IFTRUE 37949
37947: GO 38531
37949: POP
// begin if GetClass ( i ) = 1 then
37950: LD_VAR 0 6
37954: PPUSH
37955: CALL_OW 257
37959: PUSH
37960: LD_INT 1
37962: EQUAL
37963: IFFALSE 37984
// points := [ 10 , 5 , 3 ] ;
37965: LD_ADDR_VAR 0 9
37969: PUSH
37970: LD_INT 10
37972: PUSH
37973: LD_INT 5
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37984: LD_VAR 0 6
37988: PPUSH
37989: CALL_OW 257
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 3
37999: PUSH
38000: LD_INT 4
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: IN
38008: IFFALSE 38029
// points := [ 3 , 2 , 1 ] ;
38010: LD_ADDR_VAR 0 9
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38029: LD_VAR 0 6
38033: PPUSH
38034: CALL_OW 257
38038: PUSH
38039: LD_INT 5
38041: EQUAL
38042: IFFALSE 38063
// points := [ 130 , 5 , 2 ] ;
38044: LD_ADDR_VAR 0 9
38048: PUSH
38049: LD_INT 130
38051: PUSH
38052: LD_INT 5
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38063: LD_VAR 0 6
38067: PPUSH
38068: CALL_OW 257
38072: PUSH
38073: LD_INT 8
38075: EQUAL
38076: IFFALSE 38097
// points := [ 35 , 35 , 30 ] ;
38078: LD_ADDR_VAR 0 9
38082: PUSH
38083: LD_INT 35
38085: PUSH
38086: LD_INT 35
38088: PUSH
38089: LD_INT 30
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38097: LD_VAR 0 6
38101: PPUSH
38102: CALL_OW 257
38106: PUSH
38107: LD_INT 9
38109: EQUAL
38110: IFFALSE 38131
// points := [ 20 , 55 , 40 ] ;
38112: LD_ADDR_VAR 0 9
38116: PUSH
38117: LD_INT 20
38119: PUSH
38120: LD_INT 55
38122: PUSH
38123: LD_INT 40
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38131: LD_VAR 0 6
38135: PPUSH
38136: CALL_OW 257
38140: PUSH
38141: LD_INT 12
38143: PUSH
38144: LD_INT 16
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: IN
38151: IFFALSE 38172
// points := [ 5 , 3 , 2 ] ;
38153: LD_ADDR_VAR 0 9
38157: PUSH
38158: LD_INT 5
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38172: LD_VAR 0 6
38176: PPUSH
38177: CALL_OW 257
38181: PUSH
38182: LD_INT 17
38184: EQUAL
38185: IFFALSE 38206
// points := [ 100 , 50 , 75 ] ;
38187: LD_ADDR_VAR 0 9
38191: PUSH
38192: LD_INT 100
38194: PUSH
38195: LD_INT 50
38197: PUSH
38198: LD_INT 75
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38206: LD_VAR 0 6
38210: PPUSH
38211: CALL_OW 257
38215: PUSH
38216: LD_INT 15
38218: EQUAL
38219: IFFALSE 38240
// points := [ 10 , 5 , 3 ] ;
38221: LD_ADDR_VAR 0 9
38225: PUSH
38226: LD_INT 10
38228: PUSH
38229: LD_INT 5
38231: PUSH
38232: LD_INT 3
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38240: LD_VAR 0 6
38244: PPUSH
38245: CALL_OW 257
38249: PUSH
38250: LD_INT 14
38252: EQUAL
38253: IFFALSE 38274
// points := [ 10 , 0 , 0 ] ;
38255: LD_ADDR_VAR 0 9
38259: PUSH
38260: LD_INT 10
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38274: LD_VAR 0 6
38278: PPUSH
38279: CALL_OW 257
38283: PUSH
38284: LD_INT 11
38286: EQUAL
38287: IFFALSE 38308
// points := [ 30 , 10 , 5 ] ;
38289: LD_ADDR_VAR 0 9
38293: PUSH
38294: LD_INT 30
38296: PUSH
38297: LD_INT 10
38299: PUSH
38300: LD_INT 5
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38308: LD_VAR 0 1
38312: PPUSH
38313: LD_INT 5
38315: PPUSH
38316: CALL_OW 321
38320: PUSH
38321: LD_INT 2
38323: EQUAL
38324: IFFALSE 38341
// bpoints := bpoints * 1.8 ;
38326: LD_ADDR_VAR 0 10
38330: PUSH
38331: LD_VAR 0 10
38335: PUSH
38336: LD_REAL  1.80000000000000E+0000
38339: MUL
38340: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 257
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: LD_INT 4
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: IN
38369: IFFALSE 38389
38371: PUSH
38372: LD_VAR 0 1
38376: PPUSH
38377: LD_INT 51
38379: PPUSH
38380: CALL_OW 321
38384: PUSH
38385: LD_INT 2
38387: EQUAL
38388: AND
38389: IFFALSE 38406
// bpoints := bpoints * 1.2 ;
38391: LD_ADDR_VAR 0 10
38395: PUSH
38396: LD_VAR 0 10
38400: PUSH
38401: LD_REAL  1.20000000000000E+0000
38404: MUL
38405: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38406: LD_VAR 0 6
38410: PPUSH
38411: CALL_OW 257
38415: PUSH
38416: LD_INT 5
38418: PUSH
38419: LD_INT 7
38421: PUSH
38422: LD_INT 9
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: IN
38430: IFFALSE 38450
38432: PUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: LD_INT 52
38440: PPUSH
38441: CALL_OW 321
38445: PUSH
38446: LD_INT 2
38448: EQUAL
38449: AND
38450: IFFALSE 38467
// bpoints := bpoints * 1.5 ;
38452: LD_ADDR_VAR 0 10
38456: PUSH
38457: LD_VAR 0 10
38461: PUSH
38462: LD_REAL  1.50000000000000E+0000
38465: MUL
38466: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38467: LD_VAR 0 1
38471: PPUSH
38472: LD_INT 66
38474: PPUSH
38475: CALL_OW 321
38479: PUSH
38480: LD_INT 2
38482: EQUAL
38483: IFFALSE 38500
// bpoints := bpoints * 1.1 ;
38485: LD_ADDR_VAR 0 10
38489: PUSH
38490: LD_VAR 0 10
38494: PUSH
38495: LD_REAL  1.10000000000000E+0000
38498: MUL
38499: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38500: LD_ADDR_VAR 0 10
38504: PUSH
38505: LD_VAR 0 10
38509: PUSH
38510: LD_VAR 0 6
38514: PPUSH
38515: LD_INT 1
38517: PPUSH
38518: CALL_OW 259
38522: PUSH
38523: LD_REAL  1.15000000000000E+0000
38526: MUL
38527: MUL
38528: ST_TO_ADDR
// end ; unit_vehicle :
38529: GO 39359
38531: LD_INT 2
38533: DOUBLE
38534: EQUAL
38535: IFTRUE 38539
38537: GO 39347
38539: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38540: LD_VAR 0 6
38544: PPUSH
38545: CALL_OW 264
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 42
38555: PUSH
38556: LD_INT 24
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: IN
38564: IFFALSE 38585
// points := [ 25 , 5 , 3 ] ;
38566: LD_ADDR_VAR 0 9
38570: PUSH
38571: LD_INT 25
38573: PUSH
38574: LD_INT 5
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38585: LD_VAR 0 6
38589: PPUSH
38590: CALL_OW 264
38594: PUSH
38595: LD_INT 4
38597: PUSH
38598: LD_INT 43
38600: PUSH
38601: LD_INT 25
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: IN
38609: IFFALSE 38630
// points := [ 40 , 15 , 5 ] ;
38611: LD_ADDR_VAR 0 9
38615: PUSH
38616: LD_INT 40
38618: PUSH
38619: LD_INT 15
38621: PUSH
38622: LD_INT 5
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38630: LD_VAR 0 6
38634: PPUSH
38635: CALL_OW 264
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: LD_INT 23
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: IN
38650: IFFALSE 38671
// points := [ 7 , 25 , 8 ] ;
38652: LD_ADDR_VAR 0 9
38656: PUSH
38657: LD_INT 7
38659: PUSH
38660: LD_INT 25
38662: PUSH
38663: LD_INT 8
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 264
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: LD_INT 27
38686: PUSH
38687: LD_INT 44
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: IN
38695: IFFALSE 38716
// points := [ 14 , 50 , 16 ] ;
38697: LD_ADDR_VAR 0 9
38701: PUSH
38702: LD_INT 14
38704: PUSH
38705: LD_INT 50
38707: PUSH
38708: LD_INT 16
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38716: LD_VAR 0 6
38720: PPUSH
38721: CALL_OW 264
38725: PUSH
38726: LD_INT 6
38728: PUSH
38729: LD_INT 46
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: IN
38736: IFFALSE 38757
// points := [ 32 , 120 , 70 ] ;
38738: LD_ADDR_VAR 0 9
38742: PUSH
38743: LD_INT 32
38745: PUSH
38746: LD_INT 120
38748: PUSH
38749: LD_INT 70
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38757: LD_VAR 0 6
38761: PPUSH
38762: CALL_OW 264
38766: PUSH
38767: LD_INT 7
38769: PUSH
38770: LD_INT 28
38772: PUSH
38773: LD_INT 45
38775: PUSH
38776: LD_INT 92
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: IN
38785: IFFALSE 38806
// points := [ 35 , 20 , 45 ] ;
38787: LD_ADDR_VAR 0 9
38791: PUSH
38792: LD_INT 35
38794: PUSH
38795: LD_INT 20
38797: PUSH
38798: LD_INT 45
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38806: LD_VAR 0 6
38810: PPUSH
38811: CALL_OW 264
38815: PUSH
38816: LD_INT 47
38818: PUSH
38819: EMPTY
38820: LIST
38821: IN
38822: IFFALSE 38843
// points := [ 67 , 45 , 75 ] ;
38824: LD_ADDR_VAR 0 9
38828: PUSH
38829: LD_INT 67
38831: PUSH
38832: LD_INT 45
38834: PUSH
38835: LD_INT 75
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38843: LD_VAR 0 6
38847: PPUSH
38848: CALL_OW 264
38852: PUSH
38853: LD_INT 26
38855: PUSH
38856: EMPTY
38857: LIST
38858: IN
38859: IFFALSE 38880
// points := [ 120 , 30 , 80 ] ;
38861: LD_ADDR_VAR 0 9
38865: PUSH
38866: LD_INT 120
38868: PUSH
38869: LD_INT 30
38871: PUSH
38872: LD_INT 80
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38880: LD_VAR 0 6
38884: PPUSH
38885: CALL_OW 264
38889: PUSH
38890: LD_INT 22
38892: PUSH
38893: EMPTY
38894: LIST
38895: IN
38896: IFFALSE 38917
// points := [ 40 , 1 , 1 ] ;
38898: LD_ADDR_VAR 0 9
38902: PUSH
38903: LD_INT 40
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38917: LD_VAR 0 6
38921: PPUSH
38922: CALL_OW 264
38926: PUSH
38927: LD_INT 29
38929: PUSH
38930: EMPTY
38931: LIST
38932: IN
38933: IFFALSE 38954
// points := [ 70 , 200 , 400 ] ;
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: LD_INT 70
38942: PUSH
38943: LD_INT 200
38945: PUSH
38946: LD_INT 400
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38954: LD_VAR 0 6
38958: PPUSH
38959: CALL_OW 264
38963: PUSH
38964: LD_INT 14
38966: PUSH
38967: LD_INT 53
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: IN
38974: IFFALSE 38995
// points := [ 40 , 10 , 20 ] ;
38976: LD_ADDR_VAR 0 9
38980: PUSH
38981: LD_INT 40
38983: PUSH
38984: LD_INT 10
38986: PUSH
38987: LD_INT 20
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38995: LD_VAR 0 6
38999: PPUSH
39000: CALL_OW 264
39004: PUSH
39005: LD_INT 9
39007: PUSH
39008: EMPTY
39009: LIST
39010: IN
39011: IFFALSE 39032
// points := [ 5 , 70 , 20 ] ;
39013: LD_ADDR_VAR 0 9
39017: PUSH
39018: LD_INT 5
39020: PUSH
39021: LD_INT 70
39023: PUSH
39024: LD_INT 20
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39032: LD_VAR 0 6
39036: PPUSH
39037: CALL_OW 264
39041: PUSH
39042: LD_INT 10
39044: PUSH
39045: EMPTY
39046: LIST
39047: IN
39048: IFFALSE 39069
// points := [ 35 , 110 , 70 ] ;
39050: LD_ADDR_VAR 0 9
39054: PUSH
39055: LD_INT 35
39057: PUSH
39058: LD_INT 110
39060: PUSH
39061: LD_INT 70
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39069: LD_VAR 0 6
39073: PPUSH
39074: CALL_OW 265
39078: PUSH
39079: LD_INT 25
39081: EQUAL
39082: IFFALSE 39103
// points := [ 80 , 65 , 100 ] ;
39084: LD_ADDR_VAR 0 9
39088: PUSH
39089: LD_INT 80
39091: PUSH
39092: LD_INT 65
39094: PUSH
39095: LD_INT 100
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 263
39112: PUSH
39113: LD_INT 1
39115: EQUAL
39116: IFFALSE 39151
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39118: LD_ADDR_VAR 0 10
39122: PUSH
39123: LD_VAR 0 10
39127: PUSH
39128: LD_VAR 0 6
39132: PPUSH
39133: CALL_OW 311
39137: PPUSH
39138: LD_INT 3
39140: PPUSH
39141: CALL_OW 259
39145: PUSH
39146: LD_INT 4
39148: MUL
39149: MUL
39150: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39151: LD_VAR 0 6
39155: PPUSH
39156: CALL_OW 263
39160: PUSH
39161: LD_INT 2
39163: EQUAL
39164: IFFALSE 39215
// begin j := IsControledBy ( i ) ;
39166: LD_ADDR_VAR 0 7
39170: PUSH
39171: LD_VAR 0 6
39175: PPUSH
39176: CALL_OW 312
39180: ST_TO_ADDR
// if j then
39181: LD_VAR 0 7
39185: IFFALSE 39215
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39187: LD_ADDR_VAR 0 10
39191: PUSH
39192: LD_VAR 0 10
39196: PUSH
39197: LD_VAR 0 7
39201: PPUSH
39202: LD_INT 3
39204: PPUSH
39205: CALL_OW 259
39209: PUSH
39210: LD_INT 3
39212: MUL
39213: MUL
39214: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39215: LD_VAR 0 6
39219: PPUSH
39220: CALL_OW 264
39224: PUSH
39225: LD_INT 5
39227: PUSH
39228: LD_INT 6
39230: PUSH
39231: LD_INT 46
39233: PUSH
39234: LD_INT 44
39236: PUSH
39237: LD_INT 47
39239: PUSH
39240: LD_INT 45
39242: PUSH
39243: LD_INT 28
39245: PUSH
39246: LD_INT 7
39248: PUSH
39249: LD_INT 27
39251: PUSH
39252: LD_INT 29
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: IN
39267: IFFALSE 39287
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: LD_INT 52
39277: PPUSH
39278: CALL_OW 321
39282: PUSH
39283: LD_INT 2
39285: EQUAL
39286: AND
39287: IFFALSE 39304
// bpoints := bpoints * 1.2 ;
39289: LD_ADDR_VAR 0 10
39293: PUSH
39294: LD_VAR 0 10
39298: PUSH
39299: LD_REAL  1.20000000000000E+0000
39302: MUL
39303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39304: LD_VAR 0 6
39308: PPUSH
39309: CALL_OW 264
39313: PUSH
39314: LD_INT 6
39316: PUSH
39317: LD_INT 46
39319: PUSH
39320: LD_INT 47
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: IN
39328: IFFALSE 39345
// bpoints := bpoints * 1.2 ;
39330: LD_ADDR_VAR 0 10
39334: PUSH
39335: LD_VAR 0 10
39339: PUSH
39340: LD_REAL  1.20000000000000E+0000
39343: MUL
39344: ST_TO_ADDR
// end ; unit_building :
39345: GO 39359
39347: LD_INT 3
39349: DOUBLE
39350: EQUAL
39351: IFTRUE 39355
39353: GO 39358
39355: POP
// ; end ;
39356: GO 39359
39358: POP
// for j = 1 to 3 do
39359: LD_ADDR_VAR 0 7
39363: PUSH
39364: DOUBLE
39365: LD_INT 1
39367: DEC
39368: ST_TO_ADDR
39369: LD_INT 3
39371: PUSH
39372: FOR_TO
39373: IFFALSE 39426
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39375: LD_ADDR_VAR 0 5
39379: PUSH
39380: LD_VAR 0 5
39384: PPUSH
39385: LD_VAR 0 7
39389: PPUSH
39390: LD_VAR 0 5
39394: PUSH
39395: LD_VAR 0 7
39399: ARRAY
39400: PUSH
39401: LD_VAR 0 9
39405: PUSH
39406: LD_VAR 0 7
39410: ARRAY
39411: PUSH
39412: LD_VAR 0 10
39416: MUL
39417: PLUS
39418: PPUSH
39419: CALL_OW 1
39423: ST_TO_ADDR
39424: GO 39372
39426: POP
39427: POP
// end ;
39428: GO 37901
39430: POP
39431: POP
// result := Replace ( result , 4 , tmp ) ;
39432: LD_ADDR_VAR 0 5
39436: PUSH
39437: LD_VAR 0 5
39441: PPUSH
39442: LD_INT 4
39444: PPUSH
39445: LD_VAR 0 8
39449: PPUSH
39450: CALL_OW 1
39454: ST_TO_ADDR
// end ;
39455: LD_VAR 0 5
39459: RET
// export function DangerAtRange ( unit , range ) ; begin
39460: LD_INT 0
39462: PPUSH
// if not unit then
39463: LD_VAR 0 1
39467: NOT
39468: IFFALSE 39472
// exit ;
39470: GO 39517
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39472: LD_ADDR_VAR 0 3
39476: PUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 255
39486: PPUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 250
39496: PPUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 251
39506: PPUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: CALL 37751 0 4
39516: ST_TO_ADDR
// end ;
39517: LD_VAR 0 3
39521: RET
// export function DangerInArea ( side , area ) ; begin
39522: LD_INT 0
39524: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: LD_INT 81
39537: PUSH
39538: LD_VAR 0 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PPUSH
39547: CALL_OW 70
39551: ST_TO_ADDR
// end ;
39552: LD_VAR 0 3
39556: RET
// export function IsExtension ( b ) ; begin
39557: LD_INT 0
39559: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39560: LD_ADDR_VAR 0 2
39564: PUSH
39565: LD_VAR 0 1
39569: PUSH
39570: LD_INT 23
39572: PUSH
39573: LD_INT 20
39575: PUSH
39576: LD_INT 22
39578: PUSH
39579: LD_INT 17
39581: PUSH
39582: LD_INT 24
39584: PUSH
39585: LD_INT 21
39587: PUSH
39588: LD_INT 19
39590: PUSH
39591: LD_INT 16
39593: PUSH
39594: LD_INT 25
39596: PUSH
39597: LD_INT 18
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: IN
39612: ST_TO_ADDR
// end ;
39613: LD_VAR 0 2
39617: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39618: LD_INT 0
39620: PPUSH
39621: PPUSH
39622: PPUSH
// result := [ ] ;
39623: LD_ADDR_VAR 0 4
39627: PUSH
39628: EMPTY
39629: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39630: LD_ADDR_VAR 0 5
39634: PUSH
39635: LD_VAR 0 2
39639: PPUSH
39640: LD_INT 21
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PPUSH
39650: CALL_OW 70
39654: ST_TO_ADDR
// if not tmp then
39655: LD_VAR 0 5
39659: NOT
39660: IFFALSE 39664
// exit ;
39662: GO 39728
// if checkLink then
39664: LD_VAR 0 3
39668: IFFALSE 39718
// begin for i in tmp do
39670: LD_ADDR_VAR 0 6
39674: PUSH
39675: LD_VAR 0 5
39679: PUSH
39680: FOR_IN
39681: IFFALSE 39716
// if GetBase ( i ) <> base then
39683: LD_VAR 0 6
39687: PPUSH
39688: CALL_OW 274
39692: PUSH
39693: LD_VAR 0 1
39697: NONEQUAL
39698: IFFALSE 39714
// ComLinkToBase ( base , i ) ;
39700: LD_VAR 0 1
39704: PPUSH
39705: LD_VAR 0 6
39709: PPUSH
39710: CALL_OW 169
39714: GO 39680
39716: POP
39717: POP
// end ; result := tmp ;
39718: LD_ADDR_VAR 0 4
39722: PUSH
39723: LD_VAR 0 5
39727: ST_TO_ADDR
// end ;
39728: LD_VAR 0 4
39732: RET
// export function ComComplete ( units , b ) ; var i ; begin
39733: LD_INT 0
39735: PPUSH
39736: PPUSH
// if not units then
39737: LD_VAR 0 1
39741: NOT
39742: IFFALSE 39746
// exit ;
39744: GO 39836
// for i in units do
39746: LD_ADDR_VAR 0 4
39750: PUSH
39751: LD_VAR 0 1
39755: PUSH
39756: FOR_IN
39757: IFFALSE 39834
// if BuildingStatus ( b ) = bs_build then
39759: LD_VAR 0 2
39763: PPUSH
39764: CALL_OW 461
39768: PUSH
39769: LD_INT 1
39771: EQUAL
39772: IFFALSE 39832
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39774: LD_VAR 0 4
39778: PPUSH
39779: LD_STRING h
39781: PUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: CALL_OW 250
39791: PUSH
39792: LD_VAR 0 2
39796: PPUSH
39797: CALL_OW 251
39801: PUSH
39802: LD_VAR 0 2
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: PPUSH
39828: CALL_OW 446
39832: GO 39756
39834: POP
39835: POP
// end ;
39836: LD_VAR 0 3
39840: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39841: LD_INT 0
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39849: LD_VAR 0 1
39853: NOT
39854: IFTRUE 39871
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: CALL_OW 263
39866: PUSH
39867: LD_INT 2
39869: NONEQUAL
39870: OR
39871: IFFALSE 39875
// exit ;
39873: GO 40191
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39875: LD_ADDR_VAR 0 6
39879: PUSH
39880: LD_INT 22
39882: PUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: CALL_OW 255
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 30
39902: PUSH
39903: LD_INT 36
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 34
39912: PUSH
39913: LD_INT 31
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PPUSH
39929: CALL_OW 69
39933: ST_TO_ADDR
// if not tmp then
39934: LD_VAR 0 6
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40191
// result := [ ] ;
39943: LD_ADDR_VAR 0 2
39947: PUSH
39948: EMPTY
39949: ST_TO_ADDR
// for i in tmp do
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_VAR 0 6
39959: PUSH
39960: FOR_IN
39961: IFFALSE 40032
// begin t := UnitsInside ( i ) ;
39963: LD_ADDR_VAR 0 4
39967: PUSH
39968: LD_VAR 0 3
39972: PPUSH
39973: CALL_OW 313
39977: ST_TO_ADDR
// if t then
39978: LD_VAR 0 4
39982: IFFALSE 40030
// for j in t do
39984: LD_ADDR_VAR 0 7
39988: PUSH
39989: LD_VAR 0 4
39993: PUSH
39994: FOR_IN
39995: IFFALSE 40028
// result := Replace ( result , result + 1 , j ) ;
39997: LD_ADDR_VAR 0 2
40001: PUSH
40002: LD_VAR 0 2
40006: PPUSH
40007: LD_VAR 0 2
40011: PUSH
40012: LD_INT 1
40014: PLUS
40015: PPUSH
40016: LD_VAR 0 7
40020: PPUSH
40021: CALL_OW 1
40025: ST_TO_ADDR
40026: GO 39994
40028: POP
40029: POP
// end ;
40030: GO 39960
40032: POP
40033: POP
// if not result then
40034: LD_VAR 0 2
40038: NOT
40039: IFFALSE 40043
// exit ;
40041: GO 40191
// mech := result [ 1 ] ;
40043: LD_ADDR_VAR 0 5
40047: PUSH
40048: LD_VAR 0 2
40052: PUSH
40053: LD_INT 1
40055: ARRAY
40056: ST_TO_ADDR
// if result > 1 then
40057: LD_VAR 0 2
40061: PUSH
40062: LD_INT 1
40064: GREATER
40065: IFFALSE 40177
// begin for i = 2 to result do
40067: LD_ADDR_VAR 0 3
40071: PUSH
40072: DOUBLE
40073: LD_INT 2
40075: DEC
40076: ST_TO_ADDR
40077: LD_VAR 0 2
40081: PUSH
40082: FOR_TO
40083: IFFALSE 40175
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40085: LD_ADDR_VAR 0 4
40089: PUSH
40090: LD_VAR 0 2
40094: PUSH
40095: LD_VAR 0 3
40099: ARRAY
40100: PPUSH
40101: LD_INT 3
40103: PPUSH
40104: CALL_OW 259
40108: PUSH
40109: LD_VAR 0 2
40113: PUSH
40114: LD_VAR 0 3
40118: ARRAY
40119: PPUSH
40120: CALL_OW 432
40124: MINUS
40125: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40126: LD_VAR 0 4
40130: PUSH
40131: LD_VAR 0 5
40135: PPUSH
40136: LD_INT 3
40138: PPUSH
40139: CALL_OW 259
40143: PUSH
40144: LD_VAR 0 5
40148: PPUSH
40149: CALL_OW 432
40153: MINUS
40154: GREATEREQUAL
40155: IFFALSE 40173
// mech := result [ i ] ;
40157: LD_ADDR_VAR 0 5
40161: PUSH
40162: LD_VAR 0 2
40166: PUSH
40167: LD_VAR 0 3
40171: ARRAY
40172: ST_TO_ADDR
// end ;
40173: GO 40082
40175: POP
40176: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40177: LD_VAR 0 1
40181: PPUSH
40182: LD_VAR 0 5
40186: PPUSH
40187: CALL_OW 135
// end ;
40191: LD_VAR 0 2
40195: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40196: LD_INT 0
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
// result := [ ] ;
40211: LD_ADDR_VAR 0 7
40215: PUSH
40216: EMPTY
40217: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40218: LD_VAR 0 1
40222: PPUSH
40223: CALL_OW 266
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: IN
40238: NOT
40239: IFFALSE 40243
// exit ;
40241: GO 41883
// if name then
40243: LD_VAR 0 3
40247: IFFALSE 40263
// SetBName ( base_dep , name ) ;
40249: LD_VAR 0 1
40253: PPUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: CALL_OW 500
// base := GetBase ( base_dep ) ;
40263: LD_ADDR_VAR 0 15
40267: PUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 274
40277: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40278: LD_ADDR_VAR 0 16
40282: PUSH
40283: LD_VAR 0 1
40287: PPUSH
40288: CALL_OW 255
40292: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40293: LD_ADDR_VAR 0 17
40297: PUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 248
40307: ST_TO_ADDR
// if sources then
40308: LD_VAR 0 5
40312: IFFALSE 40359
// for i = 1 to 3 do
40314: LD_ADDR_VAR 0 8
40318: PUSH
40319: DOUBLE
40320: LD_INT 1
40322: DEC
40323: ST_TO_ADDR
40324: LD_INT 3
40326: PUSH
40327: FOR_TO
40328: IFFALSE 40357
// AddResourceType ( base , i , sources [ i ] ) ;
40330: LD_VAR 0 15
40334: PPUSH
40335: LD_VAR 0 8
40339: PPUSH
40340: LD_VAR 0 5
40344: PUSH
40345: LD_VAR 0 8
40349: ARRAY
40350: PPUSH
40351: CALL_OW 276
40355: GO 40327
40357: POP
40358: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40359: LD_ADDR_VAR 0 18
40363: PUSH
40364: LD_VAR 0 15
40368: PPUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_INT 1
40376: PPUSH
40377: CALL 39618 0 3
40381: ST_TO_ADDR
// InitHc ;
40382: CALL_OW 19
// InitUc ;
40386: CALL_OW 18
// uc_side := side ;
40390: LD_ADDR_OWVAR 20
40394: PUSH
40395: LD_VAR 0 16
40399: ST_TO_ADDR
// uc_nation := nation ;
40400: LD_ADDR_OWVAR 21
40404: PUSH
40405: LD_VAR 0 17
40409: ST_TO_ADDR
// if buildings then
40410: LD_VAR 0 18
40414: IFFALSE 41742
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40416: LD_ADDR_VAR 0 19
40420: PUSH
40421: LD_VAR 0 18
40425: PPUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 30
40431: PUSH
40432: LD_INT 29
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 30
40441: PUSH
40442: LD_INT 30
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: PPUSH
40454: CALL_OW 72
40458: ST_TO_ADDR
// if tmp then
40459: LD_VAR 0 19
40463: IFFALSE 40511
// for i in tmp do
40465: LD_ADDR_VAR 0 8
40469: PUSH
40470: LD_VAR 0 19
40474: PUSH
40475: FOR_IN
40476: IFFALSE 40509
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40478: LD_VAR 0 8
40482: PPUSH
40483: CALL_OW 250
40487: PPUSH
40488: LD_VAR 0 8
40492: PPUSH
40493: CALL_OW 251
40497: PPUSH
40498: LD_VAR 0 16
40502: PPUSH
40503: CALL_OW 441
40507: GO 40475
40509: POP
40510: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40511: LD_VAR 0 18
40515: PPUSH
40516: LD_INT 2
40518: PUSH
40519: LD_INT 30
40521: PUSH
40522: LD_INT 32
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 30
40531: PUSH
40532: LD_INT 33
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: PPUSH
40544: CALL_OW 72
40548: IFFALSE 40636
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40550: LD_ADDR_VAR 0 8
40554: PUSH
40555: LD_VAR 0 18
40559: PPUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 30
40565: PUSH
40566: LD_INT 32
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 30
40575: PUSH
40576: LD_INT 33
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: PPUSH
40588: CALL_OW 72
40592: PUSH
40593: FOR_IN
40594: IFFALSE 40634
// begin if not GetBWeapon ( i ) then
40596: LD_VAR 0 8
40600: PPUSH
40601: CALL_OW 269
40605: NOT
40606: IFFALSE 40632
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40608: LD_VAR 0 8
40612: PPUSH
40613: LD_VAR 0 8
40617: PPUSH
40618: LD_VAR 0 2
40622: PPUSH
40623: CALL 41888 0 2
40627: PPUSH
40628: CALL_OW 431
// end ;
40632: GO 40593
40634: POP
40635: POP
// end ; for i = 1 to personel do
40636: LD_ADDR_VAR 0 8
40640: PUSH
40641: DOUBLE
40642: LD_INT 1
40644: DEC
40645: ST_TO_ADDR
40646: LD_VAR 0 6
40650: PUSH
40651: FOR_TO
40652: IFFALSE 41722
// begin if i > 4 then
40654: LD_VAR 0 8
40658: PUSH
40659: LD_INT 4
40661: GREATER
40662: IFFALSE 40666
// break ;
40664: GO 41722
// case i of 1 :
40666: LD_VAR 0 8
40670: PUSH
40671: LD_INT 1
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40759
40679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40680: LD_ADDR_VAR 0 12
40684: PUSH
40685: LD_VAR 0 18
40689: PPUSH
40690: LD_INT 22
40692: PUSH
40693: LD_VAR 0 16
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 58
40704: PUSH
40705: EMPTY
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 30
40713: PUSH
40714: LD_INT 32
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 30
40723: PUSH
40724: LD_INT 4
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 30
40733: PUSH
40734: LD_INT 5
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: PPUSH
40752: CALL_OW 72
40756: ST_TO_ADDR
40757: GO 40981
40759: LD_INT 2
40761: DOUBLE
40762: EQUAL
40763: IFTRUE 40767
40765: GO 40829
40767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40768: LD_ADDR_VAR 0 12
40772: PUSH
40773: LD_VAR 0 18
40777: PPUSH
40778: LD_INT 22
40780: PUSH
40781: LD_VAR 0 16
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: LD_INT 30
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 30
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PPUSH
40822: CALL_OW 72
40826: ST_TO_ADDR
40827: GO 40981
40829: LD_INT 3
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 40899
40837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40838: LD_ADDR_VAR 0 12
40842: PUSH
40843: LD_VAR 0 18
40847: PPUSH
40848: LD_INT 22
40850: PUSH
40851: LD_VAR 0 16
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: LD_INT 30
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 30
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PPUSH
40892: CALL_OW 72
40896: ST_TO_ADDR
40897: GO 40981
40899: LD_INT 4
40901: DOUBLE
40902: EQUAL
40903: IFTRUE 40907
40905: GO 40980
40907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40908: LD_ADDR_VAR 0 12
40912: PUSH
40913: LD_VAR 0 18
40917: PPUSH
40918: LD_INT 22
40920: PUSH
40921: LD_VAR 0 16
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 30
40935: PUSH
40936: LD_INT 6
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 30
40945: PUSH
40946: LD_INT 7
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 30
40955: PUSH
40956: LD_INT 8
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PPUSH
40973: CALL_OW 72
40977: ST_TO_ADDR
40978: GO 40981
40980: POP
// if i = 1 then
40981: LD_VAR 0 8
40985: PUSH
40986: LD_INT 1
40988: EQUAL
40989: IFFALSE 41100
// begin tmp := [ ] ;
40991: LD_ADDR_VAR 0 19
40995: PUSH
40996: EMPTY
40997: ST_TO_ADDR
// for j in f do
40998: LD_ADDR_VAR 0 9
41002: PUSH
41003: LD_VAR 0 12
41007: PUSH
41008: FOR_IN
41009: IFFALSE 41082
// if GetBType ( j ) = b_bunker then
41011: LD_VAR 0 9
41015: PPUSH
41016: CALL_OW 266
41020: PUSH
41021: LD_INT 32
41023: EQUAL
41024: IFFALSE 41051
// tmp := Insert ( tmp , 1 , j ) else
41026: LD_ADDR_VAR 0 19
41030: PUSH
41031: LD_VAR 0 19
41035: PPUSH
41036: LD_INT 1
41038: PPUSH
41039: LD_VAR 0 9
41043: PPUSH
41044: CALL_OW 2
41048: ST_TO_ADDR
41049: GO 41080
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41051: LD_ADDR_VAR 0 19
41055: PUSH
41056: LD_VAR 0 19
41060: PPUSH
41061: LD_VAR 0 19
41065: PUSH
41066: LD_INT 1
41068: PLUS
41069: PPUSH
41070: LD_VAR 0 9
41074: PPUSH
41075: CALL_OW 2
41079: ST_TO_ADDR
41080: GO 41008
41082: POP
41083: POP
// if tmp then
41084: LD_VAR 0 19
41088: IFFALSE 41100
// f := tmp ;
41090: LD_ADDR_VAR 0 12
41094: PUSH
41095: LD_VAR 0 19
41099: ST_TO_ADDR
// end ; x := personel [ i ] ;
41100: LD_ADDR_VAR 0 13
41104: PUSH
41105: LD_VAR 0 6
41109: PUSH
41110: LD_VAR 0 8
41114: ARRAY
41115: ST_TO_ADDR
// if x = - 1 then
41116: LD_VAR 0 13
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: EQUAL
41125: IFFALSE 41336
// begin for j in f do
41127: LD_ADDR_VAR 0 9
41131: PUSH
41132: LD_VAR 0 12
41136: PUSH
41137: FOR_IN
41138: IFFALSE 41332
// repeat InitHc ;
41140: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41144: LD_VAR 0 9
41148: PPUSH
41149: CALL_OW 266
41153: PUSH
41154: LD_INT 5
41156: EQUAL
41157: IFFALSE 41227
// begin if UnitsInside ( j ) < 3 then
41159: LD_VAR 0 9
41163: PPUSH
41164: CALL_OW 313
41168: PUSH
41169: LD_INT 3
41171: LESS
41172: IFFALSE 41208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41174: LD_INT 0
41176: PPUSH
41177: LD_INT 5
41179: PUSH
41180: LD_INT 8
41182: PUSH
41183: LD_INT 9
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: PUSH
41191: LD_VAR 0 17
41195: ARRAY
41196: PPUSH
41197: LD_VAR 0 4
41201: PPUSH
41202: CALL_OW 380
41206: GO 41225
// PrepareHuman ( false , i , skill ) ;
41208: LD_INT 0
41210: PPUSH
41211: LD_VAR 0 8
41215: PPUSH
41216: LD_VAR 0 4
41220: PPUSH
41221: CALL_OW 380
// end else
41225: GO 41244
// PrepareHuman ( false , i , skill ) ;
41227: LD_INT 0
41229: PPUSH
41230: LD_VAR 0 8
41234: PPUSH
41235: LD_VAR 0 4
41239: PPUSH
41240: CALL_OW 380
// un := CreateHuman ;
41244: LD_ADDR_VAR 0 14
41248: PUSH
41249: CALL_OW 44
41253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41254: LD_ADDR_VAR 0 7
41258: PUSH
41259: LD_VAR 0 7
41263: PPUSH
41264: LD_INT 1
41266: PPUSH
41267: LD_VAR 0 14
41271: PPUSH
41272: CALL_OW 2
41276: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41277: LD_VAR 0 14
41281: PPUSH
41282: LD_VAR 0 9
41286: PPUSH
41287: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41291: LD_VAR 0 9
41295: PPUSH
41296: CALL_OW 313
41300: PUSH
41301: LD_INT 6
41303: EQUAL
41304: IFTRUE 41328
41306: PUSH
41307: LD_VAR 0 9
41311: PPUSH
41312: CALL_OW 266
41316: PUSH
41317: LD_INT 32
41319: PUSH
41320: LD_INT 31
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: IN
41327: OR
41328: IFFALSE 41140
41330: GO 41137
41332: POP
41333: POP
// end else
41334: GO 41720
// for j = 1 to x do
41336: LD_ADDR_VAR 0 9
41340: PUSH
41341: DOUBLE
41342: LD_INT 1
41344: DEC
41345: ST_TO_ADDR
41346: LD_VAR 0 13
41350: PUSH
41351: FOR_TO
41352: IFFALSE 41718
// begin InitHc ;
41354: CALL_OW 19
// if not f then
41358: LD_VAR 0 12
41362: NOT
41363: IFFALSE 41452
// begin PrepareHuman ( false , i , skill ) ;
41365: LD_INT 0
41367: PPUSH
41368: LD_VAR 0 8
41372: PPUSH
41373: LD_VAR 0 4
41377: PPUSH
41378: CALL_OW 380
// un := CreateHuman ;
41382: LD_ADDR_VAR 0 14
41386: PUSH
41387: CALL_OW 44
41391: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41392: LD_ADDR_VAR 0 7
41396: PUSH
41397: LD_VAR 0 7
41401: PPUSH
41402: LD_INT 1
41404: PPUSH
41405: LD_VAR 0 14
41409: PPUSH
41410: CALL_OW 2
41414: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41415: LD_VAR 0 14
41419: PPUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: CALL_OW 250
41429: PPUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 251
41439: PPUSH
41440: LD_INT 10
41442: PPUSH
41443: LD_INT 0
41445: PPUSH
41446: CALL_OW 50
// continue ;
41450: GO 41351
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41452: LD_VAR 0 12
41456: PUSH
41457: LD_INT 1
41459: ARRAY
41460: PPUSH
41461: CALL_OW 313
41465: IFFALSE 41493
41467: PUSH
41468: LD_VAR 0 12
41472: PUSH
41473: LD_INT 1
41475: ARRAY
41476: PPUSH
41477: CALL_OW 266
41481: PUSH
41482: LD_INT 32
41484: PUSH
41485: LD_INT 31
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: IN
41492: AND
41493: IFTRUE 41514
41495: PUSH
41496: LD_VAR 0 12
41500: PUSH
41501: LD_INT 1
41503: ARRAY
41504: PPUSH
41505: CALL_OW 313
41509: PUSH
41510: LD_INT 6
41512: EQUAL
41513: OR
41514: IFFALSE 41534
// f := Delete ( f , 1 ) ;
41516: LD_ADDR_VAR 0 12
41520: PUSH
41521: LD_VAR 0 12
41525: PPUSH
41526: LD_INT 1
41528: PPUSH
41529: CALL_OW 3
41533: ST_TO_ADDR
// if not f then
41534: LD_VAR 0 12
41538: NOT
41539: IFFALSE 41557
// begin x := x + 2 ;
41541: LD_ADDR_VAR 0 13
41545: PUSH
41546: LD_VAR 0 13
41550: PUSH
41551: LD_INT 2
41553: PLUS
41554: ST_TO_ADDR
// continue ;
41555: GO 41351
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41557: LD_VAR 0 12
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: PPUSH
41566: CALL_OW 266
41570: PUSH
41571: LD_INT 5
41573: EQUAL
41574: IFFALSE 41648
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41576: LD_VAR 0 12
41580: PUSH
41581: LD_INT 1
41583: ARRAY
41584: PPUSH
41585: CALL_OW 313
41589: PUSH
41590: LD_INT 3
41592: LESS
41593: IFFALSE 41629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41595: LD_INT 0
41597: PPUSH
41598: LD_INT 5
41600: PUSH
41601: LD_INT 8
41603: PUSH
41604: LD_INT 9
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: PUSH
41612: LD_VAR 0 17
41616: ARRAY
41617: PPUSH
41618: LD_VAR 0 4
41622: PPUSH
41623: CALL_OW 380
41627: GO 41646
// PrepareHuman ( false , i , skill ) ;
41629: LD_INT 0
41631: PPUSH
41632: LD_VAR 0 8
41636: PPUSH
41637: LD_VAR 0 4
41641: PPUSH
41642: CALL_OW 380
// end else
41646: GO 41665
// PrepareHuman ( false , i , skill ) ;
41648: LD_INT 0
41650: PPUSH
41651: LD_VAR 0 8
41655: PPUSH
41656: LD_VAR 0 4
41660: PPUSH
41661: CALL_OW 380
// un := CreateHuman ;
41665: LD_ADDR_VAR 0 14
41669: PUSH
41670: CALL_OW 44
41674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41675: LD_ADDR_VAR 0 7
41679: PUSH
41680: LD_VAR 0 7
41684: PPUSH
41685: LD_INT 1
41687: PPUSH
41688: LD_VAR 0 14
41692: PPUSH
41693: CALL_OW 2
41697: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41698: LD_VAR 0 14
41702: PPUSH
41703: LD_VAR 0 12
41707: PUSH
41708: LD_INT 1
41710: ARRAY
41711: PPUSH
41712: CALL_OW 52
// end ;
41716: GO 41351
41718: POP
41719: POP
// end ;
41720: GO 40651
41722: POP
41723: POP
// result := result ^ buildings ;
41724: LD_ADDR_VAR 0 7
41728: PUSH
41729: LD_VAR 0 7
41733: PUSH
41734: LD_VAR 0 18
41738: ADD
41739: ST_TO_ADDR
// end else
41740: GO 41883
// begin for i = 1 to personel do
41742: LD_ADDR_VAR 0 8
41746: PUSH
41747: DOUBLE
41748: LD_INT 1
41750: DEC
41751: ST_TO_ADDR
41752: LD_VAR 0 6
41756: PUSH
41757: FOR_TO
41758: IFFALSE 41881
// begin if i > 4 then
41760: LD_VAR 0 8
41764: PUSH
41765: LD_INT 4
41767: GREATER
41768: IFFALSE 41772
// break ;
41770: GO 41881
// x := personel [ i ] ;
41772: LD_ADDR_VAR 0 13
41776: PUSH
41777: LD_VAR 0 6
41781: PUSH
41782: LD_VAR 0 8
41786: ARRAY
41787: ST_TO_ADDR
// if x = - 1 then
41788: LD_VAR 0 13
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: EQUAL
41797: IFFALSE 41801
// continue ;
41799: GO 41757
// PrepareHuman ( false , i , skill ) ;
41801: LD_INT 0
41803: PPUSH
41804: LD_VAR 0 8
41808: PPUSH
41809: LD_VAR 0 4
41813: PPUSH
41814: CALL_OW 380
// un := CreateHuman ;
41818: LD_ADDR_VAR 0 14
41822: PUSH
41823: CALL_OW 44
41827: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41828: LD_VAR 0 14
41832: PPUSH
41833: LD_VAR 0 1
41837: PPUSH
41838: CALL_OW 250
41842: PPUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 251
41852: PPUSH
41853: LD_INT 10
41855: PPUSH
41856: LD_INT 0
41858: PPUSH
41859: CALL_OW 50
// result := result ^ un ;
41863: LD_ADDR_VAR 0 7
41867: PUSH
41868: LD_VAR 0 7
41872: PUSH
41873: LD_VAR 0 14
41877: ADD
41878: ST_TO_ADDR
// end ;
41879: GO 41757
41881: POP
41882: POP
// end ; end ;
41883: LD_VAR 0 7
41887: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41888: LD_INT 0
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
// result := false ;
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: LD_INT 0
41913: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41914: LD_VAR 0 1
41918: NOT
41919: IFTRUE 41944
41921: PUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 266
41931: PUSH
41932: LD_INT 32
41934: PUSH
41935: LD_INT 33
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: IN
41942: NOT
41943: OR
41944: IFFALSE 41948
// exit ;
41946: GO 43083
// nat := GetNation ( tower ) ;
41948: LD_ADDR_VAR 0 12
41952: PUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 248
41962: ST_TO_ADDR
// side := GetSide ( tower ) ;
41963: LD_ADDR_VAR 0 16
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 255
41977: ST_TO_ADDR
// x := GetX ( tower ) ;
41978: LD_ADDR_VAR 0 10
41982: PUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 250
41992: ST_TO_ADDR
// y := GetY ( tower ) ;
41993: LD_ADDR_VAR 0 11
41997: PUSH
41998: LD_VAR 0 1
42002: PPUSH
42003: CALL_OW 251
42007: ST_TO_ADDR
// if not x or not y then
42008: LD_VAR 0 10
42012: NOT
42013: IFTRUE 42022
42015: PUSH
42016: LD_VAR 0 11
42020: NOT
42021: OR
42022: IFFALSE 42026
// exit ;
42024: GO 43083
// weapon := 0 ;
42026: LD_ADDR_VAR 0 18
42030: PUSH
42031: LD_INT 0
42033: ST_TO_ADDR
// fac_list := [ ] ;
42034: LD_ADDR_VAR 0 17
42038: PUSH
42039: EMPTY
42040: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42041: LD_ADDR_VAR 0 6
42045: PUSH
42046: LD_VAR 0 1
42050: PPUSH
42051: CALL_OW 274
42055: PPUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: LD_INT 0
42063: PPUSH
42064: CALL 39618 0 3
42068: PPUSH
42069: LD_INT 30
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PPUSH
42079: CALL_OW 72
42083: ST_TO_ADDR
// if not factories then
42084: LD_VAR 0 6
42088: NOT
42089: IFFALSE 42093
// exit ;
42091: GO 43083
// for i in factories do
42093: LD_ADDR_VAR 0 8
42097: PUSH
42098: LD_VAR 0 6
42102: PUSH
42103: FOR_IN
42104: IFFALSE 42129
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42106: LD_ADDR_VAR 0 17
42110: PUSH
42111: LD_VAR 0 17
42115: PUSH
42116: LD_VAR 0 8
42120: PPUSH
42121: CALL_OW 478
42125: UNION
42126: ST_TO_ADDR
42127: GO 42103
42129: POP
42130: POP
// if not fac_list then
42131: LD_VAR 0 17
42135: NOT
42136: IFFALSE 42140
// exit ;
42138: GO 43083
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42140: LD_ADDR_VAR 0 5
42144: PUSH
42145: LD_INT 4
42147: PUSH
42148: LD_INT 5
42150: PUSH
42151: LD_INT 9
42153: PUSH
42154: LD_INT 10
42156: PUSH
42157: LD_INT 6
42159: PUSH
42160: LD_INT 7
42162: PUSH
42163: LD_INT 11
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 27
42177: PUSH
42178: LD_INT 28
42180: PUSH
42181: LD_INT 26
42183: PUSH
42184: LD_INT 30
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 43
42195: PUSH
42196: LD_INT 44
42198: PUSH
42199: LD_INT 46
42201: PUSH
42202: LD_INT 45
42204: PUSH
42205: LD_INT 47
42207: PUSH
42208: LD_INT 49
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: PUSH
42224: LD_VAR 0 12
42228: ARRAY
42229: ST_TO_ADDR
// list := list isect fac_list ;
42230: LD_ADDR_VAR 0 5
42234: PUSH
42235: LD_VAR 0 5
42239: PUSH
42240: LD_VAR 0 17
42244: ISECT
42245: ST_TO_ADDR
// if not list then
42246: LD_VAR 0 5
42250: NOT
42251: IFFALSE 42255
// exit ;
42253: GO 43083
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42255: LD_VAR 0 12
42259: PUSH
42260: LD_INT 3
42262: EQUAL
42263: IFFALSE 42275
42265: PUSH
42266: LD_INT 49
42268: PUSH
42269: LD_VAR 0 5
42273: IN
42274: AND
42275: IFFALSE 42295
42277: PUSH
42278: LD_INT 31
42280: PPUSH
42281: LD_VAR 0 16
42285: PPUSH
42286: CALL_OW 321
42290: PUSH
42291: LD_INT 2
42293: EQUAL
42294: AND
42295: IFFALSE 42355
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42297: LD_INT 22
42299: PUSH
42300: LD_VAR 0 16
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 35
42311: PUSH
42312: LD_INT 49
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 91
42321: PUSH
42322: LD_VAR 0 1
42326: PUSH
42327: LD_INT 10
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: PPUSH
42340: CALL_OW 69
42344: NOT
42345: IFFALSE 42355
// weapon := ru_time_lapser ;
42347: LD_ADDR_VAR 0 18
42351: PUSH
42352: LD_INT 49
42354: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42355: LD_VAR 0 12
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: IN
42370: IFFALSE 42394
42372: PUSH
42373: LD_INT 11
42375: PUSH
42376: LD_VAR 0 5
42380: IN
42381: IFTRUE 42393
42383: PUSH
42384: LD_INT 30
42386: PUSH
42387: LD_VAR 0 5
42391: IN
42392: OR
42393: AND
42394: IFFALSE 42414
42396: PUSH
42397: LD_INT 6
42399: PPUSH
42400: LD_VAR 0 16
42404: PPUSH
42405: CALL_OW 321
42409: PUSH
42410: LD_INT 2
42412: EQUAL
42413: AND
42414: IFFALSE 42581
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42416: LD_INT 22
42418: PUSH
42419: LD_VAR 0 16
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 35
42433: PUSH
42434: LD_INT 11
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 35
42443: PUSH
42444: LD_INT 30
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 91
42458: PUSH
42459: LD_VAR 0 1
42463: PUSH
42464: LD_INT 18
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: PPUSH
42477: CALL_OW 69
42481: NOT
42482: IFFALSE 42558
42484: PUSH
42485: LD_INT 22
42487: PUSH
42488: LD_VAR 0 16
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 30
42502: PUSH
42503: LD_INT 32
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 30
42512: PUSH
42513: LD_INT 33
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 91
42527: PUSH
42528: LD_VAR 0 1
42532: PUSH
42533: LD_INT 12
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: PPUSH
42549: CALL_OW 69
42553: PUSH
42554: LD_INT 2
42556: GREATER
42557: AND
42558: IFFALSE 42581
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42560: LD_ADDR_VAR 0 18
42564: PUSH
42565: LD_INT 11
42567: PUSH
42568: LD_INT 30
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_VAR 0 12
42579: ARRAY
42580: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42581: LD_VAR 0 18
42585: NOT
42586: IFFALSE 42606
42588: PUSH
42589: LD_INT 40
42591: PPUSH
42592: LD_VAR 0 16
42596: PPUSH
42597: CALL_OW 321
42601: PUSH
42602: LD_INT 2
42604: EQUAL
42605: AND
42606: IFFALSE 42642
42608: PUSH
42609: LD_INT 7
42611: PUSH
42612: LD_VAR 0 5
42616: IN
42617: IFTRUE 42629
42619: PUSH
42620: LD_INT 28
42622: PUSH
42623: LD_VAR 0 5
42627: IN
42628: OR
42629: IFTRUE 42641
42631: PUSH
42632: LD_INT 45
42634: PUSH
42635: LD_VAR 0 5
42639: IN
42640: OR
42641: AND
42642: IFFALSE 42896
// begin hex := GetHexInfo ( x , y ) ;
42644: LD_ADDR_VAR 0 4
42648: PUSH
42649: LD_VAR 0 10
42653: PPUSH
42654: LD_VAR 0 11
42658: PPUSH
42659: CALL_OW 546
42663: ST_TO_ADDR
// if hex [ 1 ] then
42664: LD_VAR 0 4
42668: PUSH
42669: LD_INT 1
42671: ARRAY
42672: IFFALSE 42676
// exit ;
42674: GO 43083
// height := hex [ 2 ] ;
42676: LD_ADDR_VAR 0 15
42680: PUSH
42681: LD_VAR 0 4
42685: PUSH
42686: LD_INT 2
42688: ARRAY
42689: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42690: LD_ADDR_VAR 0 14
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// for i in tmp do
42713: LD_ADDR_VAR 0 8
42717: PUSH
42718: LD_VAR 0 14
42722: PUSH
42723: FOR_IN
42724: IFFALSE 42894
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42726: LD_ADDR_VAR 0 9
42730: PUSH
42731: LD_VAR 0 10
42735: PPUSH
42736: LD_VAR 0 8
42740: PPUSH
42741: LD_INT 5
42743: PPUSH
42744: CALL_OW 272
42748: PUSH
42749: LD_VAR 0 11
42753: PPUSH
42754: LD_VAR 0 8
42758: PPUSH
42759: LD_INT 5
42761: PPUSH
42762: CALL_OW 273
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42771: LD_VAR 0 9
42775: PUSH
42776: LD_INT 1
42778: ARRAY
42779: PPUSH
42780: LD_VAR 0 9
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: CALL_OW 488
42793: IFFALSE 42892
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42795: LD_ADDR_VAR 0 4
42799: PUSH
42800: LD_VAR 0 9
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: LD_VAR 0 9
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: PPUSH
42818: CALL_OW 546
42822: ST_TO_ADDR
// if hex [ 1 ] then
42823: LD_VAR 0 4
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: IFFALSE 42835
// continue ;
42833: GO 42723
// h := hex [ 2 ] ;
42835: LD_ADDR_VAR 0 13
42839: PUSH
42840: LD_VAR 0 4
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: ST_TO_ADDR
// if h + 7 < height then
42849: LD_VAR 0 13
42853: PUSH
42854: LD_INT 7
42856: PLUS
42857: PUSH
42858: LD_VAR 0 15
42862: LESS
42863: IFFALSE 42892
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42865: LD_ADDR_VAR 0 18
42869: PUSH
42870: LD_INT 7
42872: PUSH
42873: LD_INT 28
42875: PUSH
42876: LD_INT 45
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: PUSH
42884: LD_VAR 0 12
42888: ARRAY
42889: ST_TO_ADDR
// break ;
42890: GO 42894
// end ; end ; end ;
42892: GO 42723
42894: POP
42895: POP
// end ; if not weapon then
42896: LD_VAR 0 18
42900: NOT
42901: IFFALSE 42961
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42903: LD_ADDR_VAR 0 5
42907: PUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_INT 11
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 49
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: DIFF
42927: ST_TO_ADDR
// if not list then
42928: LD_VAR 0 5
42932: NOT
42933: IFFALSE 42937
// exit ;
42935: GO 43083
// weapon := list [ rand ( 1 , list ) ] ;
42937: LD_ADDR_VAR 0 18
42941: PUSH
42942: LD_VAR 0 5
42946: PUSH
42947: LD_INT 1
42949: PPUSH
42950: LD_VAR 0 5
42954: PPUSH
42955: CALL_OW 12
42959: ARRAY
42960: ST_TO_ADDR
// end ; if weapon then
42961: LD_VAR 0 18
42965: IFFALSE 43083
// begin tmp := CostOfWeapon ( weapon ) ;
42967: LD_ADDR_VAR 0 14
42971: PUSH
42972: LD_VAR 0 18
42976: PPUSH
42977: CALL_OW 451
42981: ST_TO_ADDR
// j := GetBase ( tower ) ;
42982: LD_ADDR_VAR 0 9
42986: PUSH
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 274
42996: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42997: LD_VAR 0 9
43001: PPUSH
43002: LD_INT 1
43004: PPUSH
43005: CALL_OW 275
43009: PUSH
43010: LD_VAR 0 14
43014: PUSH
43015: LD_INT 1
43017: ARRAY
43018: GREATEREQUAL
43019: IFFALSE 43045
43021: PUSH
43022: LD_VAR 0 9
43026: PPUSH
43027: LD_INT 2
43029: PPUSH
43030: CALL_OW 275
43034: PUSH
43035: LD_VAR 0 14
43039: PUSH
43040: LD_INT 2
43042: ARRAY
43043: GREATEREQUAL
43044: AND
43045: IFFALSE 43071
43047: PUSH
43048: LD_VAR 0 9
43052: PPUSH
43053: LD_INT 3
43055: PPUSH
43056: CALL_OW 275
43060: PUSH
43061: LD_VAR 0 14
43065: PUSH
43066: LD_INT 3
43068: ARRAY
43069: GREATEREQUAL
43070: AND
43071: IFFALSE 43083
// result := weapon ;
43073: LD_ADDR_VAR 0 3
43077: PUSH
43078: LD_VAR 0 18
43082: ST_TO_ADDR
// end ; end ;
43083: LD_VAR 0 3
43087: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43088: LD_INT 0
43090: PPUSH
43091: PPUSH
// result := true ;
43092: LD_ADDR_VAR 0 3
43096: PUSH
43097: LD_INT 1
43099: ST_TO_ADDR
// if array1 = array2 then
43100: LD_VAR 0 1
43104: PUSH
43105: LD_VAR 0 2
43109: EQUAL
43110: IFFALSE 43170
// begin for i = 1 to array1 do
43112: LD_ADDR_VAR 0 4
43116: PUSH
43117: DOUBLE
43118: LD_INT 1
43120: DEC
43121: ST_TO_ADDR
43122: LD_VAR 0 1
43126: PUSH
43127: FOR_TO
43128: IFFALSE 43166
// if array1 [ i ] <> array2 [ i ] then
43130: LD_VAR 0 1
43134: PUSH
43135: LD_VAR 0 4
43139: ARRAY
43140: PUSH
43141: LD_VAR 0 2
43145: PUSH
43146: LD_VAR 0 4
43150: ARRAY
43151: NONEQUAL
43152: IFFALSE 43164
// begin result := false ;
43154: LD_ADDR_VAR 0 3
43158: PUSH
43159: LD_INT 0
43161: ST_TO_ADDR
// break ;
43162: GO 43166
// end ;
43164: GO 43127
43166: POP
43167: POP
// end else
43168: GO 43178
// result := false ;
43170: LD_ADDR_VAR 0 3
43174: PUSH
43175: LD_INT 0
43177: ST_TO_ADDR
// end ;
43178: LD_VAR 0 3
43182: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43183: LD_INT 0
43185: PPUSH
43186: PPUSH
// if not array1 or not array2 then
43187: LD_VAR 0 1
43191: NOT
43192: IFTRUE 43201
43194: PUSH
43195: LD_VAR 0 2
43199: NOT
43200: OR
43201: IFFALSE 43205
// exit ;
43203: GO 43269
// result := true ;
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_INT 1
43212: ST_TO_ADDR
// for i = 1 to array1 do
43213: LD_ADDR_VAR 0 4
43217: PUSH
43218: DOUBLE
43219: LD_INT 1
43221: DEC
43222: ST_TO_ADDR
43223: LD_VAR 0 1
43227: PUSH
43228: FOR_TO
43229: IFFALSE 43267
// if array1 [ i ] <> array2 [ i ] then
43231: LD_VAR 0 1
43235: PUSH
43236: LD_VAR 0 4
43240: ARRAY
43241: PUSH
43242: LD_VAR 0 2
43246: PUSH
43247: LD_VAR 0 4
43251: ARRAY
43252: NONEQUAL
43253: IFFALSE 43265
// begin result := false ;
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_INT 0
43262: ST_TO_ADDR
// break ;
43263: GO 43267
// end ;
43265: GO 43228
43267: POP
43268: POP
// end ;
43269: LD_VAR 0 3
43273: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43274: LD_INT 0
43276: PPUSH
43277: PPUSH
43278: PPUSH
// pom := GetBase ( fac ) ;
43279: LD_ADDR_VAR 0 5
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: CALL_OW 274
43293: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43294: LD_ADDR_VAR 0 4
43298: PUSH
43299: LD_VAR 0 2
43303: PUSH
43304: LD_INT 1
43306: ARRAY
43307: PPUSH
43308: LD_VAR 0 2
43312: PUSH
43313: LD_INT 2
43315: ARRAY
43316: PPUSH
43317: LD_VAR 0 2
43321: PUSH
43322: LD_INT 3
43324: ARRAY
43325: PPUSH
43326: LD_VAR 0 2
43330: PUSH
43331: LD_INT 4
43333: ARRAY
43334: PPUSH
43335: CALL_OW 449
43339: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43340: LD_ADDR_VAR 0 3
43344: PUSH
43345: LD_VAR 0 5
43349: PPUSH
43350: LD_INT 1
43352: PPUSH
43353: CALL_OW 275
43357: PUSH
43358: LD_VAR 0 4
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: GREATEREQUAL
43367: IFFALSE 43393
43369: PUSH
43370: LD_VAR 0 5
43374: PPUSH
43375: LD_INT 2
43377: PPUSH
43378: CALL_OW 275
43382: PUSH
43383: LD_VAR 0 4
43387: PUSH
43388: LD_INT 2
43390: ARRAY
43391: GREATEREQUAL
43392: AND
43393: IFFALSE 43419
43395: PUSH
43396: LD_VAR 0 5
43400: PPUSH
43401: LD_INT 3
43403: PPUSH
43404: CALL_OW 275
43408: PUSH
43409: LD_VAR 0 4
43413: PUSH
43414: LD_INT 3
43416: ARRAY
43417: GREATEREQUAL
43418: AND
43419: ST_TO_ADDR
// end ;
43420: LD_VAR 0 3
43424: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43425: LD_INT 0
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
// pom := GetBase ( building ) ;
43431: LD_ADDR_VAR 0 3
43435: PUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 274
43445: ST_TO_ADDR
// if not pom then
43446: LD_VAR 0 3
43450: NOT
43451: IFFALSE 43455
// exit ;
43453: GO 43629
// btype := GetBType ( building ) ;
43455: LD_ADDR_VAR 0 5
43459: PUSH
43460: LD_VAR 0 1
43464: PPUSH
43465: CALL_OW 266
43469: ST_TO_ADDR
// if btype = b_armoury then
43470: LD_VAR 0 5
43474: PUSH
43475: LD_INT 4
43477: EQUAL
43478: IFFALSE 43488
// btype := b_barracks ;
43480: LD_ADDR_VAR 0 5
43484: PUSH
43485: LD_INT 5
43487: ST_TO_ADDR
// if btype = b_depot then
43488: LD_VAR 0 5
43492: PUSH
43493: LD_INT 0
43495: EQUAL
43496: IFFALSE 43506
// btype := b_warehouse ;
43498: LD_ADDR_VAR 0 5
43502: PUSH
43503: LD_INT 1
43505: ST_TO_ADDR
// if btype = b_workshop then
43506: LD_VAR 0 5
43510: PUSH
43511: LD_INT 2
43513: EQUAL
43514: IFFALSE 43524
// btype := b_factory ;
43516: LD_ADDR_VAR 0 5
43520: PUSH
43521: LD_INT 3
43523: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43524: LD_ADDR_VAR 0 4
43528: PUSH
43529: LD_VAR 0 5
43533: PPUSH
43534: LD_VAR 0 1
43538: PPUSH
43539: CALL_OW 248
43543: PPUSH
43544: CALL_OW 450
43548: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43549: LD_ADDR_VAR 0 2
43553: PUSH
43554: LD_VAR 0 3
43558: PPUSH
43559: LD_INT 1
43561: PPUSH
43562: CALL_OW 275
43566: PUSH
43567: LD_VAR 0 4
43571: PUSH
43572: LD_INT 1
43574: ARRAY
43575: GREATEREQUAL
43576: IFFALSE 43602
43578: PUSH
43579: LD_VAR 0 3
43583: PPUSH
43584: LD_INT 2
43586: PPUSH
43587: CALL_OW 275
43591: PUSH
43592: LD_VAR 0 4
43596: PUSH
43597: LD_INT 2
43599: ARRAY
43600: GREATEREQUAL
43601: AND
43602: IFFALSE 43628
43604: PUSH
43605: LD_VAR 0 3
43609: PPUSH
43610: LD_INT 3
43612: PPUSH
43613: CALL_OW 275
43617: PUSH
43618: LD_VAR 0 4
43622: PUSH
43623: LD_INT 3
43625: ARRAY
43626: GREATEREQUAL
43627: AND
43628: ST_TO_ADDR
// end ;
43629: LD_VAR 0 2
43633: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43634: LD_INT 0
43636: PPUSH
43637: PPUSH
43638: PPUSH
// pom := GetBase ( building ) ;
43639: LD_ADDR_VAR 0 4
43643: PUSH
43644: LD_VAR 0 1
43648: PPUSH
43649: CALL_OW 274
43653: ST_TO_ADDR
// if not pom then
43654: LD_VAR 0 4
43658: NOT
43659: IFFALSE 43663
// exit ;
43661: GO 43768
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43663: LD_ADDR_VAR 0 5
43667: PUSH
43668: LD_VAR 0 2
43672: PPUSH
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 248
43682: PPUSH
43683: CALL_OW 450
43687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_VAR 0 4
43697: PPUSH
43698: LD_INT 1
43700: PPUSH
43701: CALL_OW 275
43705: PUSH
43706: LD_VAR 0 5
43710: PUSH
43711: LD_INT 1
43713: ARRAY
43714: GREATEREQUAL
43715: IFFALSE 43741
43717: PUSH
43718: LD_VAR 0 4
43722: PPUSH
43723: LD_INT 2
43725: PPUSH
43726: CALL_OW 275
43730: PUSH
43731: LD_VAR 0 5
43735: PUSH
43736: LD_INT 2
43738: ARRAY
43739: GREATEREQUAL
43740: AND
43741: IFFALSE 43767
43743: PUSH
43744: LD_VAR 0 4
43748: PPUSH
43749: LD_INT 3
43751: PPUSH
43752: CALL_OW 275
43756: PUSH
43757: LD_VAR 0 5
43761: PUSH
43762: LD_INT 3
43764: ARRAY
43765: GREATEREQUAL
43766: AND
43767: ST_TO_ADDR
// end ;
43768: LD_VAR 0 3
43772: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43773: LD_INT 0
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
// result := false ;
43786: LD_ADDR_VAR 0 8
43790: PUSH
43791: LD_INT 0
43793: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43794: LD_VAR 0 5
43798: NOT
43799: IFTRUE 43808
43801: PUSH
43802: LD_VAR 0 1
43806: NOT
43807: OR
43808: IFTRUE 43817
43810: PUSH
43811: LD_VAR 0 2
43815: NOT
43816: OR
43817: IFTRUE 43826
43819: PUSH
43820: LD_VAR 0 3
43824: NOT
43825: OR
43826: IFFALSE 43830
// exit ;
43828: GO 44656
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43830: LD_ADDR_VAR 0 14
43834: PUSH
43835: LD_VAR 0 1
43839: PPUSH
43840: LD_VAR 0 2
43844: PPUSH
43845: LD_VAR 0 3
43849: PPUSH
43850: LD_VAR 0 4
43854: PPUSH
43855: LD_VAR 0 5
43859: PUSH
43860: LD_INT 1
43862: ARRAY
43863: PPUSH
43864: CALL_OW 248
43868: PPUSH
43869: LD_INT 0
43871: PPUSH
43872: CALL 45937 0 6
43876: ST_TO_ADDR
// if not hexes then
43877: LD_VAR 0 14
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 44656
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43886: LD_ADDR_VAR 0 17
43890: PUSH
43891: LD_VAR 0 5
43895: PPUSH
43896: LD_INT 22
43898: PUSH
43899: LD_VAR 0 13
43903: PPUSH
43904: CALL_OW 255
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 30
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 30
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PPUSH
43945: CALL_OW 72
43949: ST_TO_ADDR
// for i = 1 to hexes do
43950: LD_ADDR_VAR 0 9
43954: PUSH
43955: DOUBLE
43956: LD_INT 1
43958: DEC
43959: ST_TO_ADDR
43960: LD_VAR 0 14
43964: PUSH
43965: FOR_TO
43966: IFFALSE 44654
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43968: LD_ADDR_VAR 0 13
43972: PUSH
43973: LD_VAR 0 14
43977: PUSH
43978: LD_VAR 0 9
43982: ARRAY
43983: PUSH
43984: LD_INT 1
43986: ARRAY
43987: PPUSH
43988: LD_VAR 0 14
43992: PUSH
43993: LD_VAR 0 9
43997: ARRAY
43998: PUSH
43999: LD_INT 2
44001: ARRAY
44002: PPUSH
44003: CALL_OW 428
44007: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44008: LD_VAR 0 14
44012: PUSH
44013: LD_VAR 0 9
44017: ARRAY
44018: PUSH
44019: LD_INT 1
44021: ARRAY
44022: PPUSH
44023: LD_VAR 0 14
44027: PUSH
44028: LD_VAR 0 9
44032: ARRAY
44033: PUSH
44034: LD_INT 2
44036: ARRAY
44037: PPUSH
44038: CALL_OW 351
44042: IFTRUE 44081
44044: PUSH
44045: LD_VAR 0 14
44049: PUSH
44050: LD_VAR 0 9
44054: ARRAY
44055: PUSH
44056: LD_INT 1
44058: ARRAY
44059: PPUSH
44060: LD_VAR 0 14
44064: PUSH
44065: LD_VAR 0 9
44069: ARRAY
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: PPUSH
44075: CALL_OW 488
44079: NOT
44080: OR
44081: IFTRUE 44098
44083: PUSH
44084: LD_VAR 0 13
44088: PPUSH
44089: CALL_OW 247
44093: PUSH
44094: LD_INT 3
44096: EQUAL
44097: OR
44098: IFFALSE 44104
// exit ;
44100: POP
44101: POP
44102: GO 44656
// if not tmp then
44104: LD_VAR 0 13
44108: NOT
44109: IFFALSE 44113
// continue ;
44111: GO 43965
// result := true ;
44113: LD_ADDR_VAR 0 8
44117: PUSH
44118: LD_INT 1
44120: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44121: LD_VAR 0 6
44125: IFFALSE 44142
44127: PUSH
44128: LD_VAR 0 13
44132: PPUSH
44133: CALL_OW 247
44137: PUSH
44138: LD_INT 2
44140: EQUAL
44141: AND
44142: IFFALSE 44159
44144: PUSH
44145: LD_VAR 0 13
44149: PPUSH
44150: CALL_OW 263
44154: PUSH
44155: LD_INT 1
44157: EQUAL
44158: AND
44159: IFFALSE 44323
// begin if IsDrivenBy ( tmp ) then
44161: LD_VAR 0 13
44165: PPUSH
44166: CALL_OW 311
44170: IFFALSE 44174
// continue ;
44172: GO 43965
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44174: LD_VAR 0 6
44178: PPUSH
44179: LD_INT 3
44181: PUSH
44182: LD_INT 60
44184: PUSH
44185: EMPTY
44186: LIST
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: LD_INT 55
44197: PUSH
44198: EMPTY
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PPUSH
44209: CALL_OW 72
44213: IFFALSE 44321
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44215: LD_ADDR_VAR 0 18
44219: PUSH
44220: LD_VAR 0 6
44224: PPUSH
44225: LD_INT 3
44227: PUSH
44228: LD_INT 60
44230: PUSH
44231: EMPTY
44232: LIST
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: LD_INT 55
44243: PUSH
44244: EMPTY
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PPUSH
44255: CALL_OW 72
44259: PUSH
44260: LD_INT 1
44262: ARRAY
44263: ST_TO_ADDR
// if IsInUnit ( driver ) then
44264: LD_VAR 0 18
44268: PPUSH
44269: CALL_OW 310
44273: IFFALSE 44284
// ComExit ( driver ) ;
44275: LD_VAR 0 18
44279: PPUSH
44280: CALL 69927 0 1
// AddComEnterUnit ( driver , tmp ) ;
44284: LD_VAR 0 18
44288: PPUSH
44289: LD_VAR 0 13
44293: PPUSH
44294: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44298: LD_VAR 0 18
44302: PPUSH
44303: LD_VAR 0 7
44307: PPUSH
44308: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44312: LD_VAR 0 18
44316: PPUSH
44317: CALL_OW 181
// end ; continue ;
44321: GO 43965
// end ; if not cleaners or not tmp in cleaners then
44323: LD_VAR 0 6
44327: NOT
44328: IFTRUE 44343
44330: PUSH
44331: LD_VAR 0 13
44335: PUSH
44336: LD_VAR 0 6
44340: IN
44341: NOT
44342: OR
44343: IFFALSE 44652
// begin if dep then
44345: LD_VAR 0 17
44349: IFFALSE 44485
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44351: LD_ADDR_VAR 0 16
44355: PUSH
44356: LD_VAR 0 17
44360: PUSH
44361: LD_INT 1
44363: ARRAY
44364: PPUSH
44365: CALL_OW 250
44369: PPUSH
44370: LD_VAR 0 17
44374: PUSH
44375: LD_INT 1
44377: ARRAY
44378: PPUSH
44379: CALL_OW 254
44383: PPUSH
44384: LD_INT 5
44386: PPUSH
44387: CALL_OW 272
44391: PUSH
44392: LD_VAR 0 17
44396: PUSH
44397: LD_INT 1
44399: ARRAY
44400: PPUSH
44401: CALL_OW 251
44405: PPUSH
44406: LD_VAR 0 17
44410: PUSH
44411: LD_INT 1
44413: ARRAY
44414: PPUSH
44415: CALL_OW 254
44419: PPUSH
44420: LD_INT 5
44422: PPUSH
44423: CALL_OW 273
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44432: LD_VAR 0 16
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: PPUSH
44441: LD_VAR 0 16
44445: PUSH
44446: LD_INT 2
44448: ARRAY
44449: PPUSH
44450: CALL_OW 488
44454: IFFALSE 44485
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44456: LD_VAR 0 13
44460: PPUSH
44461: LD_VAR 0 16
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: PPUSH
44470: LD_VAR 0 16
44474: PUSH
44475: LD_INT 2
44477: ARRAY
44478: PPUSH
44479: CALL_OW 111
// continue ;
44483: GO 43965
// end ; end ; r := GetDir ( tmp ) ;
44485: LD_ADDR_VAR 0 15
44489: PUSH
44490: LD_VAR 0 13
44494: PPUSH
44495: CALL_OW 254
44499: ST_TO_ADDR
// if r = 5 then
44500: LD_VAR 0 15
44504: PUSH
44505: LD_INT 5
44507: EQUAL
44508: IFFALSE 44518
// r := 0 ;
44510: LD_ADDR_VAR 0 15
44514: PUSH
44515: LD_INT 0
44517: ST_TO_ADDR
// for j = r to 5 do
44518: LD_ADDR_VAR 0 10
44522: PUSH
44523: DOUBLE
44524: LD_VAR 0 15
44528: DEC
44529: ST_TO_ADDR
44530: LD_INT 5
44532: PUSH
44533: FOR_TO
44534: IFFALSE 44650
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44536: LD_ADDR_VAR 0 11
44540: PUSH
44541: LD_VAR 0 13
44545: PPUSH
44546: CALL_OW 250
44550: PPUSH
44551: LD_VAR 0 10
44555: PPUSH
44556: LD_INT 2
44558: PPUSH
44559: CALL_OW 272
44563: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44564: LD_ADDR_VAR 0 12
44568: PUSH
44569: LD_VAR 0 13
44573: PPUSH
44574: CALL_OW 251
44578: PPUSH
44579: LD_VAR 0 10
44583: PPUSH
44584: LD_INT 2
44586: PPUSH
44587: CALL_OW 273
44591: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44592: LD_VAR 0 11
44596: PPUSH
44597: LD_VAR 0 12
44601: PPUSH
44602: CALL_OW 488
44606: IFFALSE 44625
44608: PUSH
44609: LD_VAR 0 11
44613: PPUSH
44614: LD_VAR 0 12
44618: PPUSH
44619: CALL_OW 428
44623: NOT
44624: AND
44625: IFFALSE 44648
// begin ComMoveXY ( tmp , _x , _y ) ;
44627: LD_VAR 0 13
44631: PPUSH
44632: LD_VAR 0 11
44636: PPUSH
44637: LD_VAR 0 12
44641: PPUSH
44642: CALL_OW 111
// break ;
44646: GO 44650
// end ; end ;
44648: GO 44533
44650: POP
44651: POP
// end ; end ;
44652: GO 43965
44654: POP
44655: POP
// end ;
44656: LD_VAR 0 8
44660: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44661: LD_INT 0
44663: PPUSH
// result := true ;
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_INT 1
44671: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44672: LD_VAR 0 2
44676: PUSH
44677: LD_INT 24
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44691
44683: LD_INT 33
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44716
44691: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_INT 32
44699: PPUSH
44700: LD_VAR 0 1
44704: PPUSH
44705: CALL_OW 321
44709: PUSH
44710: LD_INT 2
44712: EQUAL
44713: ST_TO_ADDR
44714: GO 45032
44716: LD_INT 20
44718: DOUBLE
44719: EQUAL
44720: IFTRUE 44724
44722: GO 44749
44724: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44725: LD_ADDR_VAR 0 3
44729: PUSH
44730: LD_INT 6
44732: PPUSH
44733: LD_VAR 0 1
44737: PPUSH
44738: CALL_OW 321
44742: PUSH
44743: LD_INT 2
44745: EQUAL
44746: ST_TO_ADDR
44747: GO 45032
44749: LD_INT 22
44751: DOUBLE
44752: EQUAL
44753: IFTRUE 44763
44755: LD_INT 36
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44763
44761: GO 44788
44763: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44764: LD_ADDR_VAR 0 3
44768: PUSH
44769: LD_INT 15
44771: PPUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 321
44781: PUSH
44782: LD_INT 2
44784: EQUAL
44785: ST_TO_ADDR
44786: GO 45032
44788: LD_INT 30
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44796
44794: GO 44821
44796: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_INT 20
44804: PPUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 321
44814: PUSH
44815: LD_INT 2
44817: EQUAL
44818: ST_TO_ADDR
44819: GO 45032
44821: LD_INT 28
44823: DOUBLE
44824: EQUAL
44825: IFTRUE 44835
44827: LD_INT 21
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44835
44833: GO 44860
44835: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44836: LD_ADDR_VAR 0 3
44840: PUSH
44841: LD_INT 21
44843: PPUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: CALL_OW 321
44853: PUSH
44854: LD_INT 2
44856: EQUAL
44857: ST_TO_ADDR
44858: GO 45032
44860: LD_INT 16
44862: DOUBLE
44863: EQUAL
44864: IFTRUE 44868
44866: GO 44893
44868: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44869: LD_ADDR_VAR 0 3
44873: PUSH
44874: LD_INT 84
44876: PPUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 321
44886: PUSH
44887: LD_INT 2
44889: EQUAL
44890: ST_TO_ADDR
44891: GO 45032
44893: LD_INT 19
44895: DOUBLE
44896: EQUAL
44897: IFTRUE 44907
44899: LD_INT 23
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 44932
44907: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: LD_INT 83
44915: PPUSH
44916: LD_VAR 0 1
44920: PPUSH
44921: CALL_OW 321
44925: PUSH
44926: LD_INT 2
44928: EQUAL
44929: ST_TO_ADDR
44930: GO 45032
44932: LD_INT 17
44934: DOUBLE
44935: EQUAL
44936: IFTRUE 44940
44938: GO 44965
44940: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_INT 39
44948: PPUSH
44949: LD_VAR 0 1
44953: PPUSH
44954: CALL_OW 321
44958: PUSH
44959: LD_INT 2
44961: EQUAL
44962: ST_TO_ADDR
44963: GO 45032
44965: LD_INT 18
44967: DOUBLE
44968: EQUAL
44969: IFTRUE 44973
44971: GO 44998
44973: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: LD_INT 40
44981: PPUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 321
44991: PUSH
44992: LD_INT 2
44994: EQUAL
44995: ST_TO_ADDR
44996: GO 45032
44998: LD_INT 27
45000: DOUBLE
45001: EQUAL
45002: IFTRUE 45006
45004: GO 45031
45006: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_INT 35
45014: PPUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 321
45024: PUSH
45025: LD_INT 2
45027: EQUAL
45028: ST_TO_ADDR
45029: GO 45032
45031: POP
// end ;
45032: LD_VAR 0 3
45036: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45037: LD_INT 0
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
// result := false ;
45050: LD_ADDR_VAR 0 6
45054: PUSH
45055: LD_INT 0
45057: ST_TO_ADDR
// if btype = b_depot then
45058: LD_VAR 0 2
45062: PUSH
45063: LD_INT 0
45065: EQUAL
45066: IFFALSE 45078
// begin result := true ;
45068: LD_ADDR_VAR 0 6
45072: PUSH
45073: LD_INT 1
45075: ST_TO_ADDR
// exit ;
45076: GO 45932
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45078: LD_VAR 0 1
45082: NOT
45083: IFTRUE 45108
45085: PUSH
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 266
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: IN
45106: NOT
45107: OR
45108: IFTRUE 45117
45110: PUSH
45111: LD_VAR 0 2
45115: NOT
45116: OR
45117: IFTRUE 45153
45119: PUSH
45120: LD_VAR 0 5
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: LD_INT 4
45139: PUSH
45140: LD_INT 5
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: IN
45151: NOT
45152: OR
45153: IFTRUE 45172
45155: PUSH
45156: LD_VAR 0 3
45160: PPUSH
45161: LD_VAR 0 4
45165: PPUSH
45166: CALL_OW 488
45170: NOT
45171: OR
45172: IFFALSE 45176
// exit ;
45174: GO 45932
// side := GetSide ( depot ) ;
45176: LD_ADDR_VAR 0 9
45180: PUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 255
45190: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45191: LD_VAR 0 9
45195: PPUSH
45196: LD_VAR 0 2
45200: PPUSH
45201: CALL 44661 0 2
45205: NOT
45206: IFFALSE 45210
// exit ;
45208: GO 45932
// pom := GetBase ( depot ) ;
45210: LD_ADDR_VAR 0 10
45214: PUSH
45215: LD_VAR 0 1
45219: PPUSH
45220: CALL_OW 274
45224: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45225: LD_ADDR_VAR 0 11
45229: PUSH
45230: LD_VAR 0 2
45234: PPUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 248
45244: PPUSH
45245: CALL_OW 450
45249: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45250: LD_VAR 0 10
45254: PPUSH
45255: LD_INT 1
45257: PPUSH
45258: CALL_OW 275
45262: PUSH
45263: LD_VAR 0 11
45267: PUSH
45268: LD_INT 1
45270: ARRAY
45271: GREATEREQUAL
45272: IFFALSE 45298
45274: PUSH
45275: LD_VAR 0 10
45279: PPUSH
45280: LD_INT 2
45282: PPUSH
45283: CALL_OW 275
45287: PUSH
45288: LD_VAR 0 11
45292: PUSH
45293: LD_INT 2
45295: ARRAY
45296: GREATEREQUAL
45297: AND
45298: IFFALSE 45324
45300: PUSH
45301: LD_VAR 0 10
45305: PPUSH
45306: LD_INT 3
45308: PPUSH
45309: CALL_OW 275
45313: PUSH
45314: LD_VAR 0 11
45318: PUSH
45319: LD_INT 3
45321: ARRAY
45322: GREATEREQUAL
45323: AND
45324: NOT
45325: IFFALSE 45329
// exit ;
45327: GO 45932
// if GetBType ( depot ) = b_depot then
45329: LD_VAR 0 1
45333: PPUSH
45334: CALL_OW 266
45338: PUSH
45339: LD_INT 0
45341: EQUAL
45342: IFFALSE 45354
// dist := 28 else
45344: LD_ADDR_VAR 0 14
45348: PUSH
45349: LD_INT 28
45351: ST_TO_ADDR
45352: GO 45362
// dist := 36 ;
45354: LD_ADDR_VAR 0 14
45358: PUSH
45359: LD_INT 36
45361: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45362: LD_VAR 0 1
45366: PPUSH
45367: LD_VAR 0 3
45371: PPUSH
45372: LD_VAR 0 4
45376: PPUSH
45377: CALL_OW 297
45381: PUSH
45382: LD_VAR 0 14
45386: GREATER
45387: IFFALSE 45391
// exit ;
45389: GO 45932
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45391: LD_ADDR_VAR 0 12
45395: PUSH
45396: LD_VAR 0 2
45400: PPUSH
45401: LD_VAR 0 3
45405: PPUSH
45406: LD_VAR 0 4
45410: PPUSH
45411: LD_VAR 0 5
45415: PPUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL_OW 248
45425: PPUSH
45426: LD_INT 0
45428: PPUSH
45429: CALL 45937 0 6
45433: ST_TO_ADDR
// if not hexes then
45434: LD_VAR 0 12
45438: NOT
45439: IFFALSE 45443
// exit ;
45441: GO 45932
// hex := GetHexInfo ( x , y ) ;
45443: LD_ADDR_VAR 0 15
45447: PUSH
45448: LD_VAR 0 3
45452: PPUSH
45453: LD_VAR 0 4
45457: PPUSH
45458: CALL_OW 546
45462: ST_TO_ADDR
// if hex [ 1 ] then
45463: LD_VAR 0 15
45467: PUSH
45468: LD_INT 1
45470: ARRAY
45471: IFFALSE 45475
// exit ;
45473: GO 45932
// height := hex [ 2 ] ;
45475: LD_ADDR_VAR 0 13
45479: PUSH
45480: LD_VAR 0 15
45484: PUSH
45485: LD_INT 2
45487: ARRAY
45488: ST_TO_ADDR
// for i = 1 to hexes do
45489: LD_ADDR_VAR 0 7
45493: PUSH
45494: DOUBLE
45495: LD_INT 1
45497: DEC
45498: ST_TO_ADDR
45499: LD_VAR 0 12
45503: PUSH
45504: FOR_TO
45505: IFFALSE 45849
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45507: LD_VAR 0 12
45511: PUSH
45512: LD_VAR 0 7
45516: ARRAY
45517: PUSH
45518: LD_INT 1
45520: ARRAY
45521: PPUSH
45522: LD_VAR 0 12
45526: PUSH
45527: LD_VAR 0 7
45531: ARRAY
45532: PUSH
45533: LD_INT 2
45535: ARRAY
45536: PPUSH
45537: CALL_OW 488
45541: NOT
45542: IFTRUE 45584
45544: PUSH
45545: LD_VAR 0 12
45549: PUSH
45550: LD_VAR 0 7
45554: ARRAY
45555: PUSH
45556: LD_INT 1
45558: ARRAY
45559: PPUSH
45560: LD_VAR 0 12
45564: PUSH
45565: LD_VAR 0 7
45569: ARRAY
45570: PUSH
45571: LD_INT 2
45573: ARRAY
45574: PPUSH
45575: CALL_OW 428
45579: PUSH
45580: LD_INT 0
45582: GREATER
45583: OR
45584: IFTRUE 45622
45586: PUSH
45587: LD_VAR 0 12
45591: PUSH
45592: LD_VAR 0 7
45596: ARRAY
45597: PUSH
45598: LD_INT 1
45600: ARRAY
45601: PPUSH
45602: LD_VAR 0 12
45606: PUSH
45607: LD_VAR 0 7
45611: ARRAY
45612: PUSH
45613: LD_INT 2
45615: ARRAY
45616: PPUSH
45617: CALL_OW 351
45621: OR
45622: IFFALSE 45628
// exit ;
45624: POP
45625: POP
45626: GO 45932
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45628: LD_ADDR_VAR 0 8
45632: PUSH
45633: LD_VAR 0 12
45637: PUSH
45638: LD_VAR 0 7
45642: ARRAY
45643: PUSH
45644: LD_INT 1
45646: ARRAY
45647: PPUSH
45648: LD_VAR 0 12
45652: PUSH
45653: LD_VAR 0 7
45657: ARRAY
45658: PUSH
45659: LD_INT 2
45661: ARRAY
45662: PPUSH
45663: CALL_OW 546
45667: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45668: LD_VAR 0 8
45672: PUSH
45673: LD_INT 1
45675: ARRAY
45676: IFTRUE 45698
45678: PUSH
45679: LD_VAR 0 8
45683: PUSH
45684: LD_INT 2
45686: ARRAY
45687: PUSH
45688: LD_VAR 0 13
45692: PUSH
45693: LD_INT 2
45695: PLUS
45696: GREATER
45697: OR
45698: IFTRUE 45720
45700: PUSH
45701: LD_VAR 0 8
45705: PUSH
45706: LD_INT 2
45708: ARRAY
45709: PUSH
45710: LD_VAR 0 13
45714: PUSH
45715: LD_INT 2
45717: MINUS
45718: LESS
45719: OR
45720: IFTRUE 45788
45722: PUSH
45723: LD_VAR 0 8
45727: PUSH
45728: LD_INT 3
45730: ARRAY
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 8
45737: PUSH
45738: LD_INT 9
45740: PUSH
45741: LD_INT 10
45743: PUSH
45744: LD_INT 11
45746: PUSH
45747: LD_INT 12
45749: PUSH
45750: LD_INT 13
45752: PUSH
45753: LD_INT 16
45755: PUSH
45756: LD_INT 17
45758: PUSH
45759: LD_INT 18
45761: PUSH
45762: LD_INT 19
45764: PUSH
45765: LD_INT 20
45767: PUSH
45768: LD_INT 21
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: IN
45786: NOT
45787: OR
45788: IFTRUE 45801
45790: PUSH
45791: LD_VAR 0 8
45795: PUSH
45796: LD_INT 5
45798: ARRAY
45799: NOT
45800: OR
45801: IFTRUE 45841
45803: PUSH
45804: LD_VAR 0 8
45808: PUSH
45809: LD_INT 6
45811: ARRAY
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 7
45821: PUSH
45822: LD_INT 9
45824: PUSH
45825: LD_INT 10
45827: PUSH
45828: LD_INT 11
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: IN
45839: NOT
45840: OR
45841: IFFALSE 45847
// exit ;
45843: POP
45844: POP
45845: GO 45932
// end ;
45847: GO 45504
45849: POP
45850: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45851: LD_VAR 0 9
45855: PPUSH
45856: LD_VAR 0 3
45860: PPUSH
45861: LD_VAR 0 4
45865: PPUSH
45866: LD_INT 20
45868: PPUSH
45869: CALL 37751 0 4
45873: PUSH
45874: LD_INT 4
45876: ARRAY
45877: IFFALSE 45881
// exit ;
45879: GO 45932
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45881: LD_VAR 0 2
45885: PUSH
45886: LD_INT 29
45888: PUSH
45889: LD_INT 30
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: IN
45896: IFFALSE 45920
45898: PUSH
45899: LD_VAR 0 3
45903: PPUSH
45904: LD_VAR 0 4
45908: PPUSH
45909: LD_VAR 0 9
45913: PPUSH
45914: CALL_OW 440
45918: NOT
45919: AND
45920: IFFALSE 45924
// exit ;
45922: GO 45932
// result := true ;
45924: LD_ADDR_VAR 0 6
45928: PUSH
45929: LD_INT 1
45931: ST_TO_ADDR
// end ;
45932: LD_VAR 0 6
45936: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45937: LD_INT 0
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
45951: PPUSH
45952: PPUSH
45953: PPUSH
45954: PPUSH
45955: PPUSH
45956: PPUSH
45957: PPUSH
45958: PPUSH
45959: PPUSH
45960: PPUSH
45961: PPUSH
45962: PPUSH
45963: PPUSH
45964: PPUSH
45965: PPUSH
45966: PPUSH
45967: PPUSH
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
45972: PPUSH
45973: PPUSH
45974: PPUSH
45975: PPUSH
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
// result = [ ] ;
45997: LD_ADDR_VAR 0 7
46001: PUSH
46002: EMPTY
46003: ST_TO_ADDR
// temp_list = [ ] ;
46004: LD_ADDR_VAR 0 9
46008: PUSH
46009: EMPTY
46010: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46011: LD_VAR 0 4
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: LD_INT 4
46030: PUSH
46031: LD_INT 5
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: IN
46042: NOT
46043: IFTRUE 46086
46045: PUSH
46046: LD_VAR 0 1
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: IN
46061: IFFALSE 46085
46063: PUSH
46064: LD_VAR 0 5
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: IN
46083: NOT
46084: AND
46085: OR
46086: IFFALSE 46090
// exit ;
46088: GO 64489
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46090: LD_VAR 0 1
46094: PUSH
46095: LD_INT 6
46097: PUSH
46098: LD_INT 7
46100: PUSH
46101: LD_INT 8
46103: PUSH
46104: LD_INT 13
46106: PUSH
46107: LD_INT 12
46109: PUSH
46110: LD_INT 15
46112: PUSH
46113: LD_INT 11
46115: PUSH
46116: LD_INT 14
46118: PUSH
46119: LD_INT 10
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: IN
46133: IFFALSE 46143
// btype = b_lab ;
46135: LD_ADDR_VAR 0 1
46139: PUSH
46140: LD_INT 6
46142: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46143: LD_VAR 0 6
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: IN
46162: NOT
46163: IFTRUE 46231
46165: PUSH
46166: LD_VAR 0 1
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 3
46182: PUSH
46183: LD_INT 6
46185: PUSH
46186: LD_INT 36
46188: PUSH
46189: LD_INT 4
46191: PUSH
46192: LD_INT 5
46194: PUSH
46195: LD_INT 31
46197: PUSH
46198: LD_INT 32
46200: PUSH
46201: LD_INT 33
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: IN
46217: NOT
46218: IFFALSE 46230
46220: PUSH
46221: LD_VAR 0 6
46225: PUSH
46226: LD_INT 1
46228: EQUAL
46229: AND
46230: OR
46231: IFTRUE 46263
46233: PUSH
46234: LD_VAR 0 1
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: IN
46249: NOT
46250: IFFALSE 46262
46252: PUSH
46253: LD_VAR 0 6
46257: PUSH
46258: LD_INT 2
46260: EQUAL
46261: AND
46262: OR
46263: IFFALSE 46273
// mode = 0 ;
46265: LD_ADDR_VAR 0 6
46269: PUSH
46270: LD_INT 0
46272: ST_TO_ADDR
// case mode of 0 :
46273: LD_VAR 0 6
46277: PUSH
46278: LD_INT 0
46280: DOUBLE
46281: EQUAL
46282: IFTRUE 46286
46284: GO 57739
46286: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46287: LD_ADDR_VAR 0 11
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46480: LD_ADDR_VAR 0 12
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46676: LD_ADDR_VAR 0 13
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 3
46847: NEG
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46875: LD_ADDR_VAR 0 14
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47071: LD_ADDR_VAR 0 15
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47264: LD_ADDR_VAR 0 16
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47457: LD_ADDR_VAR 0 17
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47687: LD_ADDR_VAR 0 18
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47917: LD_ADDR_VAR 0 19
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48147: LD_ADDR_VAR 0 20
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48377: LD_ADDR_VAR 0 21
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48607: LD_ADDR_VAR 0 22
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48837: LD_ADDR_VAR 0 23
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49117: LD_ADDR_VAR 0 24
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49393: LD_ADDR_VAR 0 25
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49667: LD_ADDR_VAR 0 26
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49943: LD_ADDR_VAR 0 27
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50223: LD_ADDR_VAR 0 28
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50505: LD_ADDR_VAR 0 29
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50784: LD_ADDR_VAR 0 30
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51062: LD_ADDR_VAR 0 31
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 3
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51340: LD_ADDR_VAR 0 32
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51618: LD_ADDR_VAR 0 33
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51897: LD_ADDR_VAR 0 34
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52177: LD_ADDR_VAR 0 35
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52289: LD_ADDR_VAR 0 36
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52401: LD_ADDR_VAR 0 37
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52513: LD_ADDR_VAR 0 38
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52625: LD_ADDR_VAR 0 39
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52737: LD_ADDR_VAR 0 40
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52849: LD_ADDR_VAR 0 41
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53199: LD_ADDR_VAR 0 42
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: NEG
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53549: LD_ADDR_VAR 0 43
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53897: LD_ADDR_VAR 0 44
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54247: LD_ADDR_VAR 0 45
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 3
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 3
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: LD_INT 3
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54597: LD_ADDR_VAR 0 46
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54945: LD_ADDR_VAR 0 47
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55096: LD_ADDR_VAR 0 48
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55243: LD_ADDR_VAR 0 49
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55387: LD_ADDR_VAR 0 50
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55531: LD_ADDR_VAR 0 51
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55678: LD_ADDR_VAR 0 52
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55829: LD_ADDR_VAR 0 53
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56059: LD_ADDR_VAR 0 54
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56289: LD_ADDR_VAR 0 55
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56519: LD_ADDR_VAR 0 56
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56749: LD_ADDR_VAR 0 57
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56979: LD_ADDR_VAR 0 58
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57209: LD_ADDR_VAR 0 59
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57297: LD_ADDR_VAR 0 60
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57385: LD_ADDR_VAR 0 61
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57473: LD_ADDR_VAR 0 62
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57561: LD_ADDR_VAR 0 63
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57649: LD_ADDR_VAR 0 64
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: ST_TO_ADDR
// end ; 1 :
57737: GO 63634
57739: LD_INT 1
57741: DOUBLE
57742: EQUAL
57743: IFTRUE 57747
57745: GO 60370
57747: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57748: LD_ADDR_VAR 0 11
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57792: LD_ADDR_VAR 0 12
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57833: LD_ADDR_VAR 0 13
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57873: LD_ADDR_VAR 0 14
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 3
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57914: LD_ADDR_VAR 0 15
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57958: LD_ADDR_VAR 0 16
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58004: LD_ADDR_VAR 0 17
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58048: LD_ADDR_VAR 0 18
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58089: LD_ADDR_VAR 0 19
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58129: LD_ADDR_VAR 0 20
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58170: LD_ADDR_VAR 0 21
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58214: LD_ADDR_VAR 0 22
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58260: LD_ADDR_VAR 0 23
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 4
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58304: LD_ADDR_VAR 0 24
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58345: LD_ADDR_VAR 0 25
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 4
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 4
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58385: LD_ADDR_VAR 0 26
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 4
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58426: LD_ADDR_VAR 0 27
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58470: LD_ADDR_VAR 0 28
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 4
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58516: LD_ADDR_VAR 0 29
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 4
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 5
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 5
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 4
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 6
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 6
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 5
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58671: LD_ADDR_VAR 0 30
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 5
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 5
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 6
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 6
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58814: LD_ADDR_VAR 0 31
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: LD_INT 4
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: PUSH
58892: LD_INT 5
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 4
58901: PUSH
58902: LD_INT 5
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 6
58911: PUSH
58912: LD_INT 5
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 6
58921: PUSH
58922: LD_INT 6
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 5
58931: PUSH
58932: LD_INT 6
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58953: LD_ADDR_VAR 0 32
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 4
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 5
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 5
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 6
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 6
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59096: LD_ADDR_VAR 0 33
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 4
59148: NEG
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 4
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 5
59182: NEG
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 5
59193: NEG
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 5
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 6
59216: NEG
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 6
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59251: LD_ADDR_VAR 0 34
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 4
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 4
59318: NEG
59319: PUSH
59320: LD_INT 4
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 4
59330: NEG
59331: PUSH
59332: LD_INT 5
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 5
59342: NEG
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 5
59354: NEG
59355: PUSH
59356: LD_INT 5
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 5
59366: NEG
59367: PUSH
59368: LD_INT 6
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 6
59378: NEG
59379: PUSH
59380: LD_INT 5
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 6
59390: NEG
59391: PUSH
59392: LD_INT 6
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59414: LD_ADDR_VAR 0 41
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59458: LD_ADDR_VAR 0 42
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59499: LD_ADDR_VAR 0 43
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59539: LD_ADDR_VAR 0 44
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59580: LD_ADDR_VAR 0 45
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59624: LD_ADDR_VAR 0 46
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: LD_INT 2
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59670: LD_ADDR_VAR 0 47
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59703: LD_ADDR_VAR 0 48
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59734: LD_ADDR_VAR 0 49
59738: PUSH
59739: LD_INT 3
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59763: LD_ADDR_VAR 0 50
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59792: LD_ADDR_VAR 0 51
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59823: LD_ADDR_VAR 0 52
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: NEG
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59856: LD_ADDR_VAR 0 53
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59900: LD_ADDR_VAR 0 54
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59941: LD_ADDR_VAR 0 55
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59981: LD_ADDR_VAR 0 56
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: LIST
60021: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60022: LD_ADDR_VAR 0 57
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60066: LD_ADDR_VAR 0 58
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60112: LD_ADDR_VAR 0 59
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60156: LD_ADDR_VAR 0 60
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60197: LD_ADDR_VAR 0 61
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60237: LD_ADDR_VAR 0 62
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60278: LD_ADDR_VAR 0 63
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60322: LD_ADDR_VAR 0 64
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// end ; 2 :
60368: GO 63634
60370: LD_INT 2
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60378
60376: GO 63633
60378: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60379: LD_ADDR_VAR 0 29
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 5
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 5
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 5
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 3
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: PUSH
60500: LD_INT 3
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 4
60509: PUSH
60510: LD_INT 4
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 4
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: LD_INT 4
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 4
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 4
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 5
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 5
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: LD_INT 5
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: NEG
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 4
60741: NEG
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: NEG
60765: PUSH
60766: LD_INT 4
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: LD_INT 5
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 4
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: NEG
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 4
60812: NEG
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 5
60824: NEG
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 5
60836: NEG
60837: PUSH
60838: LD_INT 5
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: LD_INT 5
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 5
60860: NEG
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60917: LD_ADDR_VAR 0 30
60921: PUSH
60922: LD_INT 4
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 4
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 5
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 5
60954: PUSH
60955: LD_INT 5
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: LD_INT 5
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 3
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 5
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: LD_INT 5
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 4
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 4
61107: NEG
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 4
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 4
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 5
61163: NEG
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 5
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 5
61186: NEG
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: LD_INT 4
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: NEG
61270: PUSH
61271: LD_INT 3
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 4
61281: NEG
61282: PUSH
61283: LD_INT 4
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 4
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 4
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 5
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 4
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 3
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 3
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 4
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: LD_INT 5
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 5
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61464: LD_ADDR_VAR 0 31
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 4
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 4
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 5
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 5
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 5
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: LD_INT 3
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: NEG
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 3
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 4
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 4
61643: NEG
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 2
61655: NEG
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: NEG
61667: PUSH
61668: LD_INT 4
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: LD_INT 5
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: LD_INT 4
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 3
61702: NEG
61703: PUSH
61704: LD_INT 3
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 4
61714: NEG
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 5
61726: NEG
61727: PUSH
61728: LD_INT 4
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 5
61738: NEG
61739: PUSH
61740: LD_INT 5
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: LD_INT 5
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 5
61762: NEG
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 4
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 4
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 4
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 4
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 4
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 5
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 5
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 5
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62014: LD_ADDR_VAR 0 32
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 4
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: NEG
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 4
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 5
62077: NEG
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 5
62088: NEG
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 5
62100: NEG
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: NEG
62124: PUSH
62125: LD_INT 3
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: LD_INT 4
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: LD_INT 3
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 4
62183: NEG
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 4
62195: NEG
62196: PUSH
62197: LD_INT 4
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 4
62219: NEG
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 4
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 5
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 3
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: LD_INT 5
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 5
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 3
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 4
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 4
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 4
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 4
62426: PUSH
62427: LD_INT 4
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 4
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 5
62446: PUSH
62447: LD_INT 4
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 5
62456: PUSH
62457: LD_INT 5
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 4
62466: PUSH
62467: LD_INT 5
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 5
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: LD_INT 5
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62561: LD_ADDR_VAR 0 33
62565: PUSH
62566: LD_INT 4
62568: NEG
62569: PUSH
62570: LD_INT 4
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 4
62580: NEG
62581: PUSH
62582: LD_INT 5
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 4
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: NEG
62617: PUSH
62618: LD_INT 3
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 5
62628: NEG
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 5
62640: NEG
62641: PUSH
62642: LD_INT 5
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 3
62652: NEG
62653: PUSH
62654: LD_INT 5
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 5
62664: NEG
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 4
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: LD_INT 4
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 4
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 5
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 5
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 4
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 5
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: LD_INT 3
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: LD_INT 2
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 4
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 4
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 4
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 4
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 3
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 4
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: LD_INT 5
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 5
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: LD_INT 4
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: LD_INT 5
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 3
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63099: LD_ADDR_VAR 0 34
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 4
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 5
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 4
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 4
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 5
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: LD_INT 3
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: LD_INT 5
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 4
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 4
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 3
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 4
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: LD_INT 4
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 4
63311: PUSH
63312: LD_INT 3
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 5
63321: PUSH
63322: LD_INT 4
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 5
63331: PUSH
63332: LD_INT 5
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 4
63341: PUSH
63342: LD_INT 5
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: LD_INT 4
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: LD_INT 3
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 5
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 3
63381: PUSH
63382: LD_INT 5
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 3
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 3
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: LD_INT 4
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 4
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: LD_INT 3
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 4
63484: NEG
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 4
63495: NEG
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: NEG
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: NEG
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 4
63529: NEG
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 5
63540: NEG
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 5
63551: NEG
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 5
63563: NEG
63564: PUSH
63565: LD_INT 2
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: ST_TO_ADDR
// end ; end ;
63631: GO 63634
63633: POP
// case btype of b_depot , b_warehouse :
63634: LD_VAR 0 1
63638: PUSH
63639: LD_INT 0
63641: DOUBLE
63642: EQUAL
63643: IFTRUE 63653
63645: LD_INT 1
63647: DOUBLE
63648: EQUAL
63649: IFTRUE 63653
63651: GO 63854
63653: POP
// case nation of nation_american :
63654: LD_VAR 0 5
63658: PUSH
63659: LD_INT 1
63661: DOUBLE
63662: EQUAL
63663: IFTRUE 63667
63665: GO 63723
63667: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63668: LD_ADDR_VAR 0 9
63672: PUSH
63673: LD_VAR 0 11
63677: PUSH
63678: LD_VAR 0 12
63682: PUSH
63683: LD_VAR 0 13
63687: PUSH
63688: LD_VAR 0 14
63692: PUSH
63693: LD_VAR 0 15
63697: PUSH
63698: LD_VAR 0 16
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: PUSH
63711: LD_VAR 0 4
63715: PUSH
63716: LD_INT 1
63718: PLUS
63719: ARRAY
63720: ST_TO_ADDR
63721: GO 63852
63723: LD_INT 2
63725: DOUBLE
63726: EQUAL
63727: IFTRUE 63731
63729: GO 63787
63731: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63732: LD_ADDR_VAR 0 9
63736: PUSH
63737: LD_VAR 0 17
63741: PUSH
63742: LD_VAR 0 18
63746: PUSH
63747: LD_VAR 0 19
63751: PUSH
63752: LD_VAR 0 20
63756: PUSH
63757: LD_VAR 0 21
63761: PUSH
63762: LD_VAR 0 22
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: LD_VAR 0 4
63779: PUSH
63780: LD_INT 1
63782: PLUS
63783: ARRAY
63784: ST_TO_ADDR
63785: GO 63852
63787: LD_INT 3
63789: DOUBLE
63790: EQUAL
63791: IFTRUE 63795
63793: GO 63851
63795: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63796: LD_ADDR_VAR 0 9
63800: PUSH
63801: LD_VAR 0 23
63805: PUSH
63806: LD_VAR 0 24
63810: PUSH
63811: LD_VAR 0 25
63815: PUSH
63816: LD_VAR 0 26
63820: PUSH
63821: LD_VAR 0 27
63825: PUSH
63826: LD_VAR 0 28
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: PUSH
63839: LD_VAR 0 4
63843: PUSH
63844: LD_INT 1
63846: PLUS
63847: ARRAY
63848: ST_TO_ADDR
63849: GO 63852
63851: POP
63852: GO 64407
63854: LD_INT 2
63856: DOUBLE
63857: EQUAL
63858: IFTRUE 63868
63860: LD_INT 3
63862: DOUBLE
63863: EQUAL
63864: IFTRUE 63868
63866: GO 63924
63868: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63869: LD_ADDR_VAR 0 9
63873: PUSH
63874: LD_VAR 0 29
63878: PUSH
63879: LD_VAR 0 30
63883: PUSH
63884: LD_VAR 0 31
63888: PUSH
63889: LD_VAR 0 32
63893: PUSH
63894: LD_VAR 0 33
63898: PUSH
63899: LD_VAR 0 34
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: PUSH
63912: LD_VAR 0 4
63916: PUSH
63917: LD_INT 1
63919: PLUS
63920: ARRAY
63921: ST_TO_ADDR
63922: GO 64407
63924: LD_INT 16
63926: DOUBLE
63927: EQUAL
63928: IFTRUE 63986
63930: LD_INT 17
63932: DOUBLE
63933: EQUAL
63934: IFTRUE 63986
63936: LD_INT 18
63938: DOUBLE
63939: EQUAL
63940: IFTRUE 63986
63942: LD_INT 19
63944: DOUBLE
63945: EQUAL
63946: IFTRUE 63986
63948: LD_INT 22
63950: DOUBLE
63951: EQUAL
63952: IFTRUE 63986
63954: LD_INT 20
63956: DOUBLE
63957: EQUAL
63958: IFTRUE 63986
63960: LD_INT 21
63962: DOUBLE
63963: EQUAL
63964: IFTRUE 63986
63966: LD_INT 23
63968: DOUBLE
63969: EQUAL
63970: IFTRUE 63986
63972: LD_INT 24
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 63986
63978: LD_INT 25
63980: DOUBLE
63981: EQUAL
63982: IFTRUE 63986
63984: GO 64042
63986: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63987: LD_ADDR_VAR 0 9
63991: PUSH
63992: LD_VAR 0 35
63996: PUSH
63997: LD_VAR 0 36
64001: PUSH
64002: LD_VAR 0 37
64006: PUSH
64007: LD_VAR 0 38
64011: PUSH
64012: LD_VAR 0 39
64016: PUSH
64017: LD_VAR 0 40
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: PUSH
64030: LD_VAR 0 4
64034: PUSH
64035: LD_INT 1
64037: PLUS
64038: ARRAY
64039: ST_TO_ADDR
64040: GO 64407
64042: LD_INT 6
64044: DOUBLE
64045: EQUAL
64046: IFTRUE 64098
64048: LD_INT 7
64050: DOUBLE
64051: EQUAL
64052: IFTRUE 64098
64054: LD_INT 8
64056: DOUBLE
64057: EQUAL
64058: IFTRUE 64098
64060: LD_INT 13
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64098
64066: LD_INT 12
64068: DOUBLE
64069: EQUAL
64070: IFTRUE 64098
64072: LD_INT 15
64074: DOUBLE
64075: EQUAL
64076: IFTRUE 64098
64078: LD_INT 11
64080: DOUBLE
64081: EQUAL
64082: IFTRUE 64098
64084: LD_INT 14
64086: DOUBLE
64087: EQUAL
64088: IFTRUE 64098
64090: LD_INT 10
64092: DOUBLE
64093: EQUAL
64094: IFTRUE 64098
64096: GO 64154
64098: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64099: LD_ADDR_VAR 0 9
64103: PUSH
64104: LD_VAR 0 41
64108: PUSH
64109: LD_VAR 0 42
64113: PUSH
64114: LD_VAR 0 43
64118: PUSH
64119: LD_VAR 0 44
64123: PUSH
64124: LD_VAR 0 45
64128: PUSH
64129: LD_VAR 0 46
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: PUSH
64142: LD_VAR 0 4
64146: PUSH
64147: LD_INT 1
64149: PLUS
64150: ARRAY
64151: ST_TO_ADDR
64152: GO 64407
64154: LD_INT 36
64156: DOUBLE
64157: EQUAL
64158: IFTRUE 64162
64160: GO 64218
64162: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64163: LD_ADDR_VAR 0 9
64167: PUSH
64168: LD_VAR 0 47
64172: PUSH
64173: LD_VAR 0 48
64177: PUSH
64178: LD_VAR 0 49
64182: PUSH
64183: LD_VAR 0 50
64187: PUSH
64188: LD_VAR 0 51
64192: PUSH
64193: LD_VAR 0 52
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: PUSH
64206: LD_VAR 0 4
64210: PUSH
64211: LD_INT 1
64213: PLUS
64214: ARRAY
64215: ST_TO_ADDR
64216: GO 64407
64218: LD_INT 4
64220: DOUBLE
64221: EQUAL
64222: IFTRUE 64244
64224: LD_INT 5
64226: DOUBLE
64227: EQUAL
64228: IFTRUE 64244
64230: LD_INT 34
64232: DOUBLE
64233: EQUAL
64234: IFTRUE 64244
64236: LD_INT 37
64238: DOUBLE
64239: EQUAL
64240: IFTRUE 64244
64242: GO 64300
64244: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64245: LD_ADDR_VAR 0 9
64249: PUSH
64250: LD_VAR 0 53
64254: PUSH
64255: LD_VAR 0 54
64259: PUSH
64260: LD_VAR 0 55
64264: PUSH
64265: LD_VAR 0 56
64269: PUSH
64270: LD_VAR 0 57
64274: PUSH
64275: LD_VAR 0 58
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: PUSH
64288: LD_VAR 0 4
64292: PUSH
64293: LD_INT 1
64295: PLUS
64296: ARRAY
64297: ST_TO_ADDR
64298: GO 64407
64300: LD_INT 31
64302: DOUBLE
64303: EQUAL
64304: IFTRUE 64350
64306: LD_INT 32
64308: DOUBLE
64309: EQUAL
64310: IFTRUE 64350
64312: LD_INT 33
64314: DOUBLE
64315: EQUAL
64316: IFTRUE 64350
64318: LD_INT 27
64320: DOUBLE
64321: EQUAL
64322: IFTRUE 64350
64324: LD_INT 26
64326: DOUBLE
64327: EQUAL
64328: IFTRUE 64350
64330: LD_INT 28
64332: DOUBLE
64333: EQUAL
64334: IFTRUE 64350
64336: LD_INT 29
64338: DOUBLE
64339: EQUAL
64340: IFTRUE 64350
64342: LD_INT 30
64344: DOUBLE
64345: EQUAL
64346: IFTRUE 64350
64348: GO 64406
64350: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64351: LD_ADDR_VAR 0 9
64355: PUSH
64356: LD_VAR 0 59
64360: PUSH
64361: LD_VAR 0 60
64365: PUSH
64366: LD_VAR 0 61
64370: PUSH
64371: LD_VAR 0 62
64375: PUSH
64376: LD_VAR 0 63
64380: PUSH
64381: LD_VAR 0 64
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: PUSH
64394: LD_VAR 0 4
64398: PUSH
64399: LD_INT 1
64401: PLUS
64402: ARRAY
64403: ST_TO_ADDR
64404: GO 64407
64406: POP
// temp_list2 = [ ] ;
64407: LD_ADDR_VAR 0 10
64411: PUSH
64412: EMPTY
64413: ST_TO_ADDR
// for i in temp_list do
64414: LD_ADDR_VAR 0 8
64418: PUSH
64419: LD_VAR 0 9
64423: PUSH
64424: FOR_IN
64425: IFFALSE 64477
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64427: LD_ADDR_VAR 0 10
64431: PUSH
64432: LD_VAR 0 10
64436: PUSH
64437: LD_VAR 0 8
64441: PUSH
64442: LD_INT 1
64444: ARRAY
64445: PUSH
64446: LD_VAR 0 2
64450: PLUS
64451: PUSH
64452: LD_VAR 0 8
64456: PUSH
64457: LD_INT 2
64459: ARRAY
64460: PUSH
64461: LD_VAR 0 3
64465: PLUS
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: EMPTY
64472: LIST
64473: ADD
64474: ST_TO_ADDR
64475: GO 64424
64477: POP
64478: POP
// result = temp_list2 ;
64479: LD_ADDR_VAR 0 7
64483: PUSH
64484: LD_VAR 0 10
64488: ST_TO_ADDR
// end ;
64489: LD_VAR 0 7
64493: RET
// export function EnemyInRange ( unit , dist ) ; begin
64494: LD_INT 0
64496: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64497: LD_ADDR_VAR 0 3
64501: PUSH
64502: LD_VAR 0 1
64506: PPUSH
64507: CALL_OW 255
64511: PPUSH
64512: LD_VAR 0 1
64516: PPUSH
64517: CALL_OW 250
64521: PPUSH
64522: LD_VAR 0 1
64526: PPUSH
64527: CALL_OW 251
64531: PPUSH
64532: LD_VAR 0 2
64536: PPUSH
64537: CALL 37751 0 4
64541: PUSH
64542: LD_INT 4
64544: ARRAY
64545: ST_TO_ADDR
// end ;
64546: LD_VAR 0 3
64550: RET
// export function PlayerSeeMe ( unit ) ; begin
64551: LD_INT 0
64553: PPUSH
// result := See ( your_side , unit ) ;
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: LD_OWVAR 2
64563: PPUSH
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 292
64573: ST_TO_ADDR
// end ;
64574: LD_VAR 0 2
64578: RET
// export function ReverseDir ( unit ) ; begin
64579: LD_INT 0
64581: PPUSH
// if not unit then
64582: LD_VAR 0 1
64586: NOT
64587: IFFALSE 64591
// exit ;
64589: GO 64614
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64591: LD_ADDR_VAR 0 2
64595: PUSH
64596: LD_VAR 0 1
64600: PPUSH
64601: CALL_OW 254
64605: PUSH
64606: LD_INT 3
64608: PLUS
64609: PUSH
64610: LD_INT 6
64612: MOD
64613: ST_TO_ADDR
// end ;
64614: LD_VAR 0 2
64618: RET
// export function ReverseArray ( array ) ; var i ; begin
64619: LD_INT 0
64621: PPUSH
64622: PPUSH
// if not array then
64623: LD_VAR 0 1
64627: NOT
64628: IFFALSE 64632
// exit ;
64630: GO 64687
// result := [ ] ;
64632: LD_ADDR_VAR 0 2
64636: PUSH
64637: EMPTY
64638: ST_TO_ADDR
// for i := array downto 1 do
64639: LD_ADDR_VAR 0 3
64643: PUSH
64644: DOUBLE
64645: LD_VAR 0 1
64649: INC
64650: ST_TO_ADDR
64651: LD_INT 1
64653: PUSH
64654: FOR_DOWNTO
64655: IFFALSE 64685
// result := Join ( result , array [ i ] ) ;
64657: LD_ADDR_VAR 0 2
64661: PUSH
64662: LD_VAR 0 2
64666: PPUSH
64667: LD_VAR 0 1
64671: PUSH
64672: LD_VAR 0 3
64676: ARRAY
64677: PPUSH
64678: CALL 69529 0 2
64682: ST_TO_ADDR
64683: GO 64654
64685: POP
64686: POP
// end ;
64687: LD_VAR 0 2
64691: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64692: LD_INT 0
64694: PPUSH
64695: PPUSH
64696: PPUSH
64697: PPUSH
64698: PPUSH
64699: PPUSH
// if not unit or not hexes then
64700: LD_VAR 0 1
64704: NOT
64705: IFTRUE 64714
64707: PUSH
64708: LD_VAR 0 2
64712: NOT
64713: OR
64714: IFFALSE 64718
// exit ;
64716: GO 64841
// dist := 9999 ;
64718: LD_ADDR_VAR 0 5
64722: PUSH
64723: LD_INT 9999
64725: ST_TO_ADDR
// for i = 1 to hexes do
64726: LD_ADDR_VAR 0 4
64730: PUSH
64731: DOUBLE
64732: LD_INT 1
64734: DEC
64735: ST_TO_ADDR
64736: LD_VAR 0 2
64740: PUSH
64741: FOR_TO
64742: IFFALSE 64829
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64744: LD_ADDR_VAR 0 6
64748: PUSH
64749: LD_VAR 0 1
64753: PPUSH
64754: LD_VAR 0 2
64758: PUSH
64759: LD_VAR 0 4
64763: ARRAY
64764: PUSH
64765: LD_INT 1
64767: ARRAY
64768: PPUSH
64769: LD_VAR 0 2
64773: PUSH
64774: LD_VAR 0 4
64778: ARRAY
64779: PUSH
64780: LD_INT 2
64782: ARRAY
64783: PPUSH
64784: CALL_OW 297
64788: ST_TO_ADDR
// if tdist < dist then
64789: LD_VAR 0 6
64793: PUSH
64794: LD_VAR 0 5
64798: LESS
64799: IFFALSE 64827
// begin hex := hexes [ i ] ;
64801: LD_ADDR_VAR 0 8
64805: PUSH
64806: LD_VAR 0 2
64810: PUSH
64811: LD_VAR 0 4
64815: ARRAY
64816: ST_TO_ADDR
// dist := tdist ;
64817: LD_ADDR_VAR 0 5
64821: PUSH
64822: LD_VAR 0 6
64826: ST_TO_ADDR
// end ; end ;
64827: GO 64741
64829: POP
64830: POP
// result := hex ;
64831: LD_ADDR_VAR 0 3
64835: PUSH
64836: LD_VAR 0 8
64840: ST_TO_ADDR
// end ;
64841: LD_VAR 0 3
64845: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64846: LD_INT 0
64848: PPUSH
64849: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64850: LD_VAR 0 1
64854: NOT
64855: IFTRUE 64894
64857: PUSH
64858: LD_VAR 0 1
64862: PUSH
64863: LD_INT 21
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 23
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PPUSH
64887: CALL_OW 69
64891: IN
64892: NOT
64893: OR
64894: IFFALSE 64898
// exit ;
64896: GO 64945
// for i = 1 to 3 do
64898: LD_ADDR_VAR 0 3
64902: PUSH
64903: DOUBLE
64904: LD_INT 1
64906: DEC
64907: ST_TO_ADDR
64908: LD_INT 3
64910: PUSH
64911: FOR_TO
64912: IFFALSE 64943
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64914: LD_VAR 0 1
64918: PPUSH
64919: CALL_OW 250
64923: PPUSH
64924: LD_VAR 0 1
64928: PPUSH
64929: CALL_OW 251
64933: PPUSH
64934: LD_INT 1
64936: PPUSH
64937: CALL_OW 453
64941: GO 64911
64943: POP
64944: POP
// end ;
64945: LD_VAR 0 2
64949: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64950: LD_INT 0
64952: PPUSH
64953: PPUSH
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
// if not unit or not enemy_unit then
64958: LD_VAR 0 1
64962: NOT
64963: IFTRUE 64972
64965: PUSH
64966: LD_VAR 0 2
64970: NOT
64971: OR
64972: IFFALSE 64976
// exit ;
64974: GO 65447
// if GetLives ( i ) < 250 then
64976: LD_VAR 0 4
64980: PPUSH
64981: CALL_OW 256
64985: PUSH
64986: LD_INT 250
64988: LESS
64989: IFFALSE 65002
// begin ComAutodestruct ( i ) ;
64991: LD_VAR 0 4
64995: PPUSH
64996: CALL 64846 0 1
// exit ;
65000: GO 65447
// end ; x := GetX ( enemy_unit ) ;
65002: LD_ADDR_VAR 0 7
65006: PUSH
65007: LD_VAR 0 2
65011: PPUSH
65012: CALL_OW 250
65016: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65017: LD_ADDR_VAR 0 8
65021: PUSH
65022: LD_VAR 0 2
65026: PPUSH
65027: CALL_OW 251
65031: ST_TO_ADDR
// if not x or not y then
65032: LD_VAR 0 7
65036: NOT
65037: IFTRUE 65046
65039: PUSH
65040: LD_VAR 0 8
65044: NOT
65045: OR
65046: IFFALSE 65050
// exit ;
65048: GO 65447
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65050: LD_ADDR_VAR 0 6
65054: PUSH
65055: LD_VAR 0 7
65059: PPUSH
65060: LD_INT 0
65062: PPUSH
65063: LD_INT 4
65065: PPUSH
65066: CALL_OW 272
65070: PUSH
65071: LD_VAR 0 8
65075: PPUSH
65076: LD_INT 0
65078: PPUSH
65079: LD_INT 4
65081: PPUSH
65082: CALL_OW 273
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_VAR 0 7
65095: PPUSH
65096: LD_INT 1
65098: PPUSH
65099: LD_INT 4
65101: PPUSH
65102: CALL_OW 272
65106: PUSH
65107: LD_VAR 0 8
65111: PPUSH
65112: LD_INT 1
65114: PPUSH
65115: LD_INT 4
65117: PPUSH
65118: CALL_OW 273
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_VAR 0 7
65131: PPUSH
65132: LD_INT 2
65134: PPUSH
65135: LD_INT 4
65137: PPUSH
65138: CALL_OW 272
65142: PUSH
65143: LD_VAR 0 8
65147: PPUSH
65148: LD_INT 2
65150: PPUSH
65151: LD_INT 4
65153: PPUSH
65154: CALL_OW 273
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_VAR 0 7
65167: PPUSH
65168: LD_INT 3
65170: PPUSH
65171: LD_INT 4
65173: PPUSH
65174: CALL_OW 272
65178: PUSH
65179: LD_VAR 0 8
65183: PPUSH
65184: LD_INT 3
65186: PPUSH
65187: LD_INT 4
65189: PPUSH
65190: CALL_OW 273
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_VAR 0 7
65203: PPUSH
65204: LD_INT 4
65206: PPUSH
65207: LD_INT 4
65209: PPUSH
65210: CALL_OW 272
65214: PUSH
65215: LD_VAR 0 8
65219: PPUSH
65220: LD_INT 4
65222: PPUSH
65223: LD_INT 4
65225: PPUSH
65226: CALL_OW 273
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_VAR 0 7
65239: PPUSH
65240: LD_INT 5
65242: PPUSH
65243: LD_INT 4
65245: PPUSH
65246: CALL_OW 272
65250: PUSH
65251: LD_VAR 0 8
65255: PPUSH
65256: LD_INT 5
65258: PPUSH
65259: LD_INT 4
65261: PPUSH
65262: CALL_OW 273
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: ST_TO_ADDR
// for i = tmp downto 1 do
65279: LD_ADDR_VAR 0 4
65283: PUSH
65284: DOUBLE
65285: LD_VAR 0 6
65289: INC
65290: ST_TO_ADDR
65291: LD_INT 1
65293: PUSH
65294: FOR_DOWNTO
65295: IFFALSE 65398
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65297: LD_VAR 0 6
65301: PUSH
65302: LD_VAR 0 4
65306: ARRAY
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: PPUSH
65312: LD_VAR 0 6
65316: PUSH
65317: LD_VAR 0 4
65321: ARRAY
65322: PUSH
65323: LD_INT 2
65325: ARRAY
65326: PPUSH
65327: CALL_OW 488
65331: NOT
65332: IFTRUE 65374
65334: PUSH
65335: LD_VAR 0 6
65339: PUSH
65340: LD_VAR 0 4
65344: ARRAY
65345: PUSH
65346: LD_INT 1
65348: ARRAY
65349: PPUSH
65350: LD_VAR 0 6
65354: PUSH
65355: LD_VAR 0 4
65359: ARRAY
65360: PUSH
65361: LD_INT 2
65363: ARRAY
65364: PPUSH
65365: CALL_OW 428
65369: PUSH
65370: LD_INT 0
65372: NONEQUAL
65373: OR
65374: IFFALSE 65396
// tmp := Delete ( tmp , i ) ;
65376: LD_ADDR_VAR 0 6
65380: PUSH
65381: LD_VAR 0 6
65385: PPUSH
65386: LD_VAR 0 4
65390: PPUSH
65391: CALL_OW 3
65395: ST_TO_ADDR
65396: GO 65294
65398: POP
65399: POP
// j := GetClosestHex ( unit , tmp ) ;
65400: LD_ADDR_VAR 0 5
65404: PUSH
65405: LD_VAR 0 1
65409: PPUSH
65410: LD_VAR 0 6
65414: PPUSH
65415: CALL 64692 0 2
65419: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65420: LD_VAR 0 1
65424: PPUSH
65425: LD_VAR 0 5
65429: PUSH
65430: LD_INT 1
65432: ARRAY
65433: PPUSH
65434: LD_VAR 0 5
65438: PUSH
65439: LD_INT 2
65441: ARRAY
65442: PPUSH
65443: CALL_OW 111
// end ;
65447: LD_VAR 0 3
65451: RET
// export function PrepareApemanSoldier ( ) ; begin
65452: LD_INT 0
65454: PPUSH
// uc_nation := 0 ;
65455: LD_ADDR_OWVAR 21
65459: PUSH
65460: LD_INT 0
65462: ST_TO_ADDR
// hc_sex := sex_male ;
65463: LD_ADDR_OWVAR 27
65467: PUSH
65468: LD_INT 1
65470: ST_TO_ADDR
// hc_name :=  ;
65471: LD_ADDR_OWVAR 26
65475: PUSH
65476: LD_STRING 
65478: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65479: LD_ADDR_OWVAR 28
65483: PUSH
65484: LD_INT 15
65486: ST_TO_ADDR
// hc_gallery :=  ;
65487: LD_ADDR_OWVAR 33
65491: PUSH
65492: LD_STRING 
65494: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65495: LD_ADDR_OWVAR 31
65499: PUSH
65500: LD_INT 0
65502: PPUSH
65503: LD_INT 3
65505: PPUSH
65506: CALL_OW 12
65510: PUSH
65511: LD_INT 0
65513: PPUSH
65514: LD_INT 3
65516: PPUSH
65517: CALL_OW 12
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65534: LD_ADDR_OWVAR 29
65538: PUSH
65539: LD_INT 12
65541: PUSH
65542: LD_INT 12
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// end ;
65549: LD_VAR 0 1
65553: RET
// export function PrepareApemanEngineer ( ) ; begin
65554: LD_INT 0
65556: PPUSH
// uc_nation := 0 ;
65557: LD_ADDR_OWVAR 21
65561: PUSH
65562: LD_INT 0
65564: ST_TO_ADDR
// hc_sex := sex_male ;
65565: LD_ADDR_OWVAR 27
65569: PUSH
65570: LD_INT 1
65572: ST_TO_ADDR
// hc_name :=  ;
65573: LD_ADDR_OWVAR 26
65577: PUSH
65578: LD_STRING 
65580: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65581: LD_ADDR_OWVAR 28
65585: PUSH
65586: LD_INT 16
65588: ST_TO_ADDR
// hc_gallery :=  ;
65589: LD_ADDR_OWVAR 33
65593: PUSH
65594: LD_STRING 
65596: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65597: LD_ADDR_OWVAR 31
65601: PUSH
65602: LD_INT 0
65604: PPUSH
65605: LD_INT 3
65607: PPUSH
65608: CALL_OW 12
65612: PUSH
65613: LD_INT 0
65615: PPUSH
65616: LD_INT 3
65618: PPUSH
65619: CALL_OW 12
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65636: LD_ADDR_OWVAR 29
65640: PUSH
65641: LD_INT 12
65643: PUSH
65644: LD_INT 12
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: ST_TO_ADDR
// end ;
65651: LD_VAR 0 1
65655: RET
// export function PrepareApeman ( agressivity ) ; begin
65656: LD_INT 0
65658: PPUSH
// uc_side := 0 ;
65659: LD_ADDR_OWVAR 20
65663: PUSH
65664: LD_INT 0
65666: ST_TO_ADDR
// uc_nation := 0 ;
65667: LD_ADDR_OWVAR 21
65671: PUSH
65672: LD_INT 0
65674: ST_TO_ADDR
// hc_sex := sex_male ;
65675: LD_ADDR_OWVAR 27
65679: PUSH
65680: LD_INT 1
65682: ST_TO_ADDR
// hc_class := class_apeman ;
65683: LD_ADDR_OWVAR 28
65687: PUSH
65688: LD_INT 12
65690: ST_TO_ADDR
// hc_gallery :=  ;
65691: LD_ADDR_OWVAR 33
65695: PUSH
65696: LD_STRING 
65698: ST_TO_ADDR
// hc_name :=  ;
65699: LD_ADDR_OWVAR 26
65703: PUSH
65704: LD_STRING 
65706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65707: LD_ADDR_OWVAR 29
65711: PUSH
65712: LD_INT 12
65714: PUSH
65715: LD_INT 12
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// if agressivity = 0 then
65722: LD_VAR 0 1
65726: PUSH
65727: LD_INT 0
65729: EQUAL
65730: IFFALSE 65742
// hc_agressivity := 0 else
65732: LD_ADDR_OWVAR 35
65736: PUSH
65737: LD_INT 0
65739: ST_TO_ADDR
65740: GO 65763
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65742: LD_ADDR_OWVAR 35
65746: PUSH
65747: LD_VAR 0 1
65751: NEG
65752: PPUSH
65753: LD_VAR 0 1
65757: PPUSH
65758: CALL_OW 12
65762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65763: LD_ADDR_OWVAR 31
65767: PUSH
65768: LD_INT 0
65770: PPUSH
65771: LD_INT 3
65773: PPUSH
65774: CALL_OW 12
65778: PUSH
65779: LD_INT 0
65781: PPUSH
65782: LD_INT 3
65784: PPUSH
65785: CALL_OW 12
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: ST_TO_ADDR
// end ;
65802: LD_VAR 0 2
65806: RET
// export function PrepareTiger ( agressivity ) ; begin
65807: LD_INT 0
65809: PPUSH
// uc_side := 0 ;
65810: LD_ADDR_OWVAR 20
65814: PUSH
65815: LD_INT 0
65817: ST_TO_ADDR
// uc_nation := 0 ;
65818: LD_ADDR_OWVAR 21
65822: PUSH
65823: LD_INT 0
65825: ST_TO_ADDR
// InitHc ;
65826: CALL_OW 19
// hc_class := class_tiger ;
65830: LD_ADDR_OWVAR 28
65834: PUSH
65835: LD_INT 14
65837: ST_TO_ADDR
// hc_gallery :=  ;
65838: LD_ADDR_OWVAR 33
65842: PUSH
65843: LD_STRING 
65845: ST_TO_ADDR
// hc_name :=  ;
65846: LD_ADDR_OWVAR 26
65850: PUSH
65851: LD_STRING 
65853: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65854: LD_ADDR_OWVAR 35
65858: PUSH
65859: LD_VAR 0 1
65863: NEG
65864: PPUSH
65865: LD_VAR 0 1
65869: PPUSH
65870: CALL_OW 12
65874: ST_TO_ADDR
// end ;
65875: LD_VAR 0 2
65879: RET
// export function PrepareEnchidna ( ) ; begin
65880: LD_INT 0
65882: PPUSH
// uc_side := 0 ;
65883: LD_ADDR_OWVAR 20
65887: PUSH
65888: LD_INT 0
65890: ST_TO_ADDR
// uc_nation := 0 ;
65891: LD_ADDR_OWVAR 21
65895: PUSH
65896: LD_INT 0
65898: ST_TO_ADDR
// InitHc ;
65899: CALL_OW 19
// hc_class := class_baggie ;
65903: LD_ADDR_OWVAR 28
65907: PUSH
65908: LD_INT 13
65910: ST_TO_ADDR
// hc_gallery :=  ;
65911: LD_ADDR_OWVAR 33
65915: PUSH
65916: LD_STRING 
65918: ST_TO_ADDR
// hc_name :=  ;
65919: LD_ADDR_OWVAR 26
65923: PUSH
65924: LD_STRING 
65926: ST_TO_ADDR
// end ;
65927: LD_VAR 0 1
65931: RET
// export function PrepareFrog ( ) ; begin
65932: LD_INT 0
65934: PPUSH
// uc_side := 0 ;
65935: LD_ADDR_OWVAR 20
65939: PUSH
65940: LD_INT 0
65942: ST_TO_ADDR
// uc_nation := 0 ;
65943: LD_ADDR_OWVAR 21
65947: PUSH
65948: LD_INT 0
65950: ST_TO_ADDR
// InitHc ;
65951: CALL_OW 19
// hc_class := class_frog ;
65955: LD_ADDR_OWVAR 28
65959: PUSH
65960: LD_INT 19
65962: ST_TO_ADDR
// hc_gallery :=  ;
65963: LD_ADDR_OWVAR 33
65967: PUSH
65968: LD_STRING 
65970: ST_TO_ADDR
// hc_name :=  ;
65971: LD_ADDR_OWVAR 26
65975: PUSH
65976: LD_STRING 
65978: ST_TO_ADDR
// end ;
65979: LD_VAR 0 1
65983: RET
// export function PrepareFish ( ) ; begin
65984: LD_INT 0
65986: PPUSH
// uc_side := 0 ;
65987: LD_ADDR_OWVAR 20
65991: PUSH
65992: LD_INT 0
65994: ST_TO_ADDR
// uc_nation := 0 ;
65995: LD_ADDR_OWVAR 21
65999: PUSH
66000: LD_INT 0
66002: ST_TO_ADDR
// InitHc ;
66003: CALL_OW 19
// hc_class := class_fish ;
66007: LD_ADDR_OWVAR 28
66011: PUSH
66012: LD_INT 20
66014: ST_TO_ADDR
// hc_gallery :=  ;
66015: LD_ADDR_OWVAR 33
66019: PUSH
66020: LD_STRING 
66022: ST_TO_ADDR
// hc_name :=  ;
66023: LD_ADDR_OWVAR 26
66027: PUSH
66028: LD_STRING 
66030: ST_TO_ADDR
// end ;
66031: LD_VAR 0 1
66035: RET
// export function PrepareBird ( ) ; begin
66036: LD_INT 0
66038: PPUSH
// uc_side := 0 ;
66039: LD_ADDR_OWVAR 20
66043: PUSH
66044: LD_INT 0
66046: ST_TO_ADDR
// uc_nation := 0 ;
66047: LD_ADDR_OWVAR 21
66051: PUSH
66052: LD_INT 0
66054: ST_TO_ADDR
// InitHc ;
66055: CALL_OW 19
// hc_class := class_phororhacos ;
66059: LD_ADDR_OWVAR 28
66063: PUSH
66064: LD_INT 18
66066: ST_TO_ADDR
// hc_gallery :=  ;
66067: LD_ADDR_OWVAR 33
66071: PUSH
66072: LD_STRING 
66074: ST_TO_ADDR
// hc_name :=  ;
66075: LD_ADDR_OWVAR 26
66079: PUSH
66080: LD_STRING 
66082: ST_TO_ADDR
// end ;
66083: LD_VAR 0 1
66087: RET
// export function PrepareHorse ( ) ; begin
66088: LD_INT 0
66090: PPUSH
// uc_side := 0 ;
66091: LD_ADDR_OWVAR 20
66095: PUSH
66096: LD_INT 0
66098: ST_TO_ADDR
// uc_nation := 0 ;
66099: LD_ADDR_OWVAR 21
66103: PUSH
66104: LD_INT 0
66106: ST_TO_ADDR
// InitHc ;
66107: CALL_OW 19
// hc_class := class_horse ;
66111: LD_ADDR_OWVAR 28
66115: PUSH
66116: LD_INT 21
66118: ST_TO_ADDR
// hc_gallery :=  ;
66119: LD_ADDR_OWVAR 33
66123: PUSH
66124: LD_STRING 
66126: ST_TO_ADDR
// hc_name :=  ;
66127: LD_ADDR_OWVAR 26
66131: PUSH
66132: LD_STRING 
66134: ST_TO_ADDR
// end ;
66135: LD_VAR 0 1
66139: RET
// export function PrepareMastodont ( ) ; begin
66140: LD_INT 0
66142: PPUSH
// uc_side := 0 ;
66143: LD_ADDR_OWVAR 20
66147: PUSH
66148: LD_INT 0
66150: ST_TO_ADDR
// uc_nation := 0 ;
66151: LD_ADDR_OWVAR 21
66155: PUSH
66156: LD_INT 0
66158: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66159: LD_ADDR_OWVAR 37
66163: PUSH
66164: LD_INT 31
66166: ST_TO_ADDR
// vc_control := control_rider ;
66167: LD_ADDR_OWVAR 38
66171: PUSH
66172: LD_INT 4
66174: ST_TO_ADDR
// end ;
66175: LD_VAR 0 1
66179: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66180: LD_INT 0
66182: PPUSH
66183: PPUSH
66184: PPUSH
// uc_side = 0 ;
66185: LD_ADDR_OWVAR 20
66189: PUSH
66190: LD_INT 0
66192: ST_TO_ADDR
// uc_nation = 0 ;
66193: LD_ADDR_OWVAR 21
66197: PUSH
66198: LD_INT 0
66200: ST_TO_ADDR
// InitHc_All ( ) ;
66201: CALL_OW 584
// InitVc ;
66205: CALL_OW 20
// if mastodonts then
66209: LD_VAR 0 6
66213: IFFALSE 66280
// for i = 1 to mastodonts do
66215: LD_ADDR_VAR 0 11
66219: PUSH
66220: DOUBLE
66221: LD_INT 1
66223: DEC
66224: ST_TO_ADDR
66225: LD_VAR 0 6
66229: PUSH
66230: FOR_TO
66231: IFFALSE 66278
// begin vc_chassis := 31 ;
66233: LD_ADDR_OWVAR 37
66237: PUSH
66238: LD_INT 31
66240: ST_TO_ADDR
// vc_control := control_rider ;
66241: LD_ADDR_OWVAR 38
66245: PUSH
66246: LD_INT 4
66248: ST_TO_ADDR
// animal := CreateVehicle ;
66249: LD_ADDR_VAR 0 12
66253: PUSH
66254: CALL_OW 45
66258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66259: LD_VAR 0 12
66263: PPUSH
66264: LD_VAR 0 8
66268: PPUSH
66269: LD_INT 0
66271: PPUSH
66272: CALL 68422 0 3
// end ;
66276: GO 66230
66278: POP
66279: POP
// if horses then
66280: LD_VAR 0 5
66284: IFFALSE 66351
// for i = 1 to horses do
66286: LD_ADDR_VAR 0 11
66290: PUSH
66291: DOUBLE
66292: LD_INT 1
66294: DEC
66295: ST_TO_ADDR
66296: LD_VAR 0 5
66300: PUSH
66301: FOR_TO
66302: IFFALSE 66349
// begin hc_class := 21 ;
66304: LD_ADDR_OWVAR 28
66308: PUSH
66309: LD_INT 21
66311: ST_TO_ADDR
// hc_gallery :=  ;
66312: LD_ADDR_OWVAR 33
66316: PUSH
66317: LD_STRING 
66319: ST_TO_ADDR
// animal := CreateHuman ;
66320: LD_ADDR_VAR 0 12
66324: PUSH
66325: CALL_OW 44
66329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66330: LD_VAR 0 12
66334: PPUSH
66335: LD_VAR 0 8
66339: PPUSH
66340: LD_INT 0
66342: PPUSH
66343: CALL 68422 0 3
// end ;
66347: GO 66301
66349: POP
66350: POP
// if birds then
66351: LD_VAR 0 1
66355: IFFALSE 66422
// for i = 1 to birds do
66357: LD_ADDR_VAR 0 11
66361: PUSH
66362: DOUBLE
66363: LD_INT 1
66365: DEC
66366: ST_TO_ADDR
66367: LD_VAR 0 1
66371: PUSH
66372: FOR_TO
66373: IFFALSE 66420
// begin hc_class := 18 ;
66375: LD_ADDR_OWVAR 28
66379: PUSH
66380: LD_INT 18
66382: ST_TO_ADDR
// hc_gallery =  ;
66383: LD_ADDR_OWVAR 33
66387: PUSH
66388: LD_STRING 
66390: ST_TO_ADDR
// animal := CreateHuman ;
66391: LD_ADDR_VAR 0 12
66395: PUSH
66396: CALL_OW 44
66400: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66401: LD_VAR 0 12
66405: PPUSH
66406: LD_VAR 0 8
66410: PPUSH
66411: LD_INT 0
66413: PPUSH
66414: CALL 68422 0 3
// end ;
66418: GO 66372
66420: POP
66421: POP
// if tigers then
66422: LD_VAR 0 2
66426: IFFALSE 66510
// for i = 1 to tigers do
66428: LD_ADDR_VAR 0 11
66432: PUSH
66433: DOUBLE
66434: LD_INT 1
66436: DEC
66437: ST_TO_ADDR
66438: LD_VAR 0 2
66442: PUSH
66443: FOR_TO
66444: IFFALSE 66508
// begin hc_class = class_tiger ;
66446: LD_ADDR_OWVAR 28
66450: PUSH
66451: LD_INT 14
66453: ST_TO_ADDR
// hc_gallery =  ;
66454: LD_ADDR_OWVAR 33
66458: PUSH
66459: LD_STRING 
66461: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66462: LD_ADDR_OWVAR 35
66466: PUSH
66467: LD_INT 7
66469: NEG
66470: PPUSH
66471: LD_INT 7
66473: PPUSH
66474: CALL_OW 12
66478: ST_TO_ADDR
// animal := CreateHuman ;
66479: LD_ADDR_VAR 0 12
66483: PUSH
66484: CALL_OW 44
66488: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66489: LD_VAR 0 12
66493: PPUSH
66494: LD_VAR 0 8
66498: PPUSH
66499: LD_INT 0
66501: PPUSH
66502: CALL 68422 0 3
// end ;
66506: GO 66443
66508: POP
66509: POP
// if apemans then
66510: LD_VAR 0 3
66514: IFFALSE 66637
// for i = 1 to apemans do
66516: LD_ADDR_VAR 0 11
66520: PUSH
66521: DOUBLE
66522: LD_INT 1
66524: DEC
66525: ST_TO_ADDR
66526: LD_VAR 0 3
66530: PUSH
66531: FOR_TO
66532: IFFALSE 66635
// begin hc_class = class_apeman ;
66534: LD_ADDR_OWVAR 28
66538: PUSH
66539: LD_INT 12
66541: ST_TO_ADDR
// hc_gallery =  ;
66542: LD_ADDR_OWVAR 33
66546: PUSH
66547: LD_STRING 
66549: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66550: LD_ADDR_OWVAR 35
66554: PUSH
66555: LD_INT 2
66557: NEG
66558: PPUSH
66559: LD_INT 2
66561: PPUSH
66562: CALL_OW 12
66566: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66567: LD_ADDR_OWVAR 31
66571: PUSH
66572: LD_INT 1
66574: PPUSH
66575: LD_INT 3
66577: PPUSH
66578: CALL_OW 12
66582: PUSH
66583: LD_INT 1
66585: PPUSH
66586: LD_INT 3
66588: PPUSH
66589: CALL_OW 12
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: ST_TO_ADDR
// animal := CreateHuman ;
66606: LD_ADDR_VAR 0 12
66610: PUSH
66611: CALL_OW 44
66615: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66616: LD_VAR 0 12
66620: PPUSH
66621: LD_VAR 0 8
66625: PPUSH
66626: LD_INT 0
66628: PPUSH
66629: CALL 68422 0 3
// end ;
66633: GO 66531
66635: POP
66636: POP
// if enchidnas then
66637: LD_VAR 0 4
66641: IFFALSE 66708
// for i = 1 to enchidnas do
66643: LD_ADDR_VAR 0 11
66647: PUSH
66648: DOUBLE
66649: LD_INT 1
66651: DEC
66652: ST_TO_ADDR
66653: LD_VAR 0 4
66657: PUSH
66658: FOR_TO
66659: IFFALSE 66706
// begin hc_class = 13 ;
66661: LD_ADDR_OWVAR 28
66665: PUSH
66666: LD_INT 13
66668: ST_TO_ADDR
// hc_gallery =  ;
66669: LD_ADDR_OWVAR 33
66673: PUSH
66674: LD_STRING 
66676: ST_TO_ADDR
// animal := CreateHuman ;
66677: LD_ADDR_VAR 0 12
66681: PUSH
66682: CALL_OW 44
66686: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66687: LD_VAR 0 12
66691: PPUSH
66692: LD_VAR 0 8
66696: PPUSH
66697: LD_INT 0
66699: PPUSH
66700: CALL 68422 0 3
// end ;
66704: GO 66658
66706: POP
66707: POP
// if fishes then
66708: LD_VAR 0 7
66712: IFFALSE 66779
// for i = 1 to fishes do
66714: LD_ADDR_VAR 0 11
66718: PUSH
66719: DOUBLE
66720: LD_INT 1
66722: DEC
66723: ST_TO_ADDR
66724: LD_VAR 0 7
66728: PUSH
66729: FOR_TO
66730: IFFALSE 66777
// begin hc_class = 20 ;
66732: LD_ADDR_OWVAR 28
66736: PUSH
66737: LD_INT 20
66739: ST_TO_ADDR
// hc_gallery =  ;
66740: LD_ADDR_OWVAR 33
66744: PUSH
66745: LD_STRING 
66747: ST_TO_ADDR
// animal := CreateHuman ;
66748: LD_ADDR_VAR 0 12
66752: PUSH
66753: CALL_OW 44
66757: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66758: LD_VAR 0 12
66762: PPUSH
66763: LD_VAR 0 9
66767: PPUSH
66768: LD_INT 0
66770: PPUSH
66771: CALL 68422 0 3
// end ;
66775: GO 66729
66777: POP
66778: POP
// end ;
66779: LD_VAR 0 10
66783: RET
// export function WantHeal ( sci , unit ) ; begin
66784: LD_INT 0
66786: PPUSH
// if GetTaskList ( sci ) > 0 then
66787: LD_VAR 0 1
66791: PPUSH
66792: CALL_OW 437
66796: PUSH
66797: LD_INT 0
66799: GREATER
66800: IFFALSE 66872
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66802: LD_VAR 0 1
66806: PPUSH
66807: CALL_OW 437
66811: PUSH
66812: LD_INT 1
66814: ARRAY
66815: PUSH
66816: LD_INT 1
66818: ARRAY
66819: PUSH
66820: LD_STRING l
66822: EQUAL
66823: IFFALSE 66850
66825: PUSH
66826: LD_VAR 0 1
66830: PPUSH
66831: CALL_OW 437
66835: PUSH
66836: LD_INT 1
66838: ARRAY
66839: PUSH
66840: LD_INT 4
66842: ARRAY
66843: PUSH
66844: LD_VAR 0 2
66848: EQUAL
66849: AND
66850: IFFALSE 66862
// result := true else
66852: LD_ADDR_VAR 0 3
66856: PUSH
66857: LD_INT 1
66859: ST_TO_ADDR
66860: GO 66870
// result := false ;
66862: LD_ADDR_VAR 0 3
66866: PUSH
66867: LD_INT 0
66869: ST_TO_ADDR
// end else
66870: GO 66880
// result := false ;
66872: LD_ADDR_VAR 0 3
66876: PUSH
66877: LD_INT 0
66879: ST_TO_ADDR
// end ;
66880: LD_VAR 0 3
66884: RET
// export function HealTarget ( sci ) ; begin
66885: LD_INT 0
66887: PPUSH
// if not sci then
66888: LD_VAR 0 1
66892: NOT
66893: IFFALSE 66897
// exit ;
66895: GO 66962
// result := 0 ;
66897: LD_ADDR_VAR 0 2
66901: PUSH
66902: LD_INT 0
66904: ST_TO_ADDR
// if GetTaskList ( sci ) then
66905: LD_VAR 0 1
66909: PPUSH
66910: CALL_OW 437
66914: IFFALSE 66962
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66916: LD_VAR 0 1
66920: PPUSH
66921: CALL_OW 437
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PUSH
66934: LD_STRING l
66936: EQUAL
66937: IFFALSE 66962
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66939: LD_ADDR_VAR 0 2
66943: PUSH
66944: LD_VAR 0 1
66948: PPUSH
66949: CALL_OW 437
66953: PUSH
66954: LD_INT 1
66956: ARRAY
66957: PUSH
66958: LD_INT 4
66960: ARRAY
66961: ST_TO_ADDR
// end ;
66962: LD_VAR 0 2
66966: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66967: LD_INT 0
66969: PPUSH
66970: PPUSH
66971: PPUSH
66972: PPUSH
// if not base_units then
66973: LD_VAR 0 1
66977: NOT
66978: IFFALSE 66982
// exit ;
66980: GO 67069
// result := false ;
66982: LD_ADDR_VAR 0 2
66986: PUSH
66987: LD_INT 0
66989: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66990: LD_ADDR_VAR 0 5
66994: PUSH
66995: LD_VAR 0 1
66999: PPUSH
67000: LD_INT 21
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PPUSH
67010: CALL_OW 72
67014: ST_TO_ADDR
// if not tmp then
67015: LD_VAR 0 5
67019: NOT
67020: IFFALSE 67024
// exit ;
67022: GO 67069
// for i in tmp do
67024: LD_ADDR_VAR 0 3
67028: PUSH
67029: LD_VAR 0 5
67033: PUSH
67034: FOR_IN
67035: IFFALSE 67067
// begin result := EnemyInRange ( i , 22 ) ;
67037: LD_ADDR_VAR 0 2
67041: PUSH
67042: LD_VAR 0 3
67046: PPUSH
67047: LD_INT 22
67049: PPUSH
67050: CALL 64494 0 2
67054: ST_TO_ADDR
// if result then
67055: LD_VAR 0 2
67059: IFFALSE 67065
// exit ;
67061: POP
67062: POP
67063: GO 67069
// end ;
67065: GO 67034
67067: POP
67068: POP
// end ;
67069: LD_VAR 0 2
67073: RET
// export function FilterByTag ( units , tag ) ; begin
67074: LD_INT 0
67076: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 1
67086: PPUSH
67087: LD_INT 120
67089: PUSH
67090: LD_VAR 0 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PPUSH
67099: CALL_OW 72
67103: ST_TO_ADDR
// end ;
67104: LD_VAR 0 3
67108: RET
// export function IsDriver ( un ) ; begin
67109: LD_INT 0
67111: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67112: LD_ADDR_VAR 0 2
67116: PUSH
67117: LD_VAR 0 1
67121: PUSH
67122: LD_INT 55
67124: PUSH
67125: EMPTY
67126: LIST
67127: PPUSH
67128: CALL_OW 69
67132: IN
67133: ST_TO_ADDR
// end ;
67134: LD_VAR 0 2
67138: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67139: LD_INT 0
67141: PPUSH
67142: PPUSH
// list := [ ] ;
67143: LD_ADDR_VAR 0 5
67147: PUSH
67148: EMPTY
67149: ST_TO_ADDR
// case d of 0 :
67150: LD_VAR 0 3
67154: PUSH
67155: LD_INT 0
67157: DOUBLE
67158: EQUAL
67159: IFTRUE 67163
67161: GO 67296
67163: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67164: LD_ADDR_VAR 0 5
67168: PUSH
67169: LD_VAR 0 1
67173: PUSH
67174: LD_INT 4
67176: MINUS
67177: PUSH
67178: LD_VAR 0 2
67182: PUSH
67183: LD_INT 4
67185: MINUS
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_INT 3
67202: MINUS
67203: PUSH
67204: LD_VAR 0 2
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: LIST
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_INT 4
67224: PLUS
67225: PUSH
67226: LD_VAR 0 2
67230: PUSH
67231: LD_INT 4
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: PUSH
67239: LD_VAR 0 1
67243: PUSH
67244: LD_INT 3
67246: PLUS
67247: PUSH
67248: LD_VAR 0 2
67252: PUSH
67253: LD_INT 3
67255: PLUS
67256: PUSH
67257: LD_INT 5
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: PUSH
67265: LD_VAR 0 1
67269: PUSH
67270: LD_VAR 0 2
67274: PUSH
67275: LD_INT 4
67277: PLUS
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// end ; 1 :
67294: GO 67994
67296: LD_INT 1
67298: DOUBLE
67299: EQUAL
67300: IFTRUE 67304
67302: GO 67437
67304: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67305: LD_ADDR_VAR 0 5
67309: PUSH
67310: LD_VAR 0 1
67314: PUSH
67315: LD_VAR 0 2
67319: PUSH
67320: LD_INT 4
67322: MINUS
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: PUSH
67332: LD_VAR 0 1
67336: PUSH
67337: LD_INT 3
67339: MINUS
67340: PUSH
67341: LD_VAR 0 2
67345: PUSH
67346: LD_INT 3
67348: MINUS
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: PUSH
67358: LD_VAR 0 1
67362: PUSH
67363: LD_INT 4
67365: MINUS
67366: PUSH
67367: LD_VAR 0 2
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: PUSH
67380: LD_VAR 0 1
67384: PUSH
67385: LD_VAR 0 2
67389: PUSH
67390: LD_INT 3
67392: PLUS
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: LIST
67401: PUSH
67402: LD_VAR 0 1
67406: PUSH
67407: LD_INT 4
67409: PLUS
67410: PUSH
67411: LD_VAR 0 2
67415: PUSH
67416: LD_INT 4
67418: PLUS
67419: PUSH
67420: LD_INT 5
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: LIST
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// end ; 2 :
67435: GO 67994
67437: LD_INT 2
67439: DOUBLE
67440: EQUAL
67441: IFTRUE 67445
67443: GO 67574
67445: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67446: LD_ADDR_VAR 0 5
67450: PUSH
67451: LD_VAR 0 1
67455: PUSH
67456: LD_VAR 0 2
67460: PUSH
67461: LD_INT 3
67463: MINUS
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: PUSH
67473: LD_VAR 0 1
67477: PUSH
67478: LD_INT 4
67480: PLUS
67481: PUSH
67482: LD_VAR 0 2
67486: PUSH
67487: LD_INT 4
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: PUSH
67495: LD_VAR 0 1
67499: PUSH
67500: LD_VAR 0 2
67504: PUSH
67505: LD_INT 4
67507: PLUS
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_INT 3
67524: MINUS
67525: PUSH
67526: LD_VAR 0 2
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: PUSH
67539: LD_VAR 0 1
67543: PUSH
67544: LD_INT 4
67546: MINUS
67547: PUSH
67548: LD_VAR 0 2
67552: PUSH
67553: LD_INT 4
67555: MINUS
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: ST_TO_ADDR
// end ; 3 :
67572: GO 67994
67574: LD_INT 3
67576: DOUBLE
67577: EQUAL
67578: IFTRUE 67582
67580: GO 67715
67582: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67583: LD_ADDR_VAR 0 5
67587: PUSH
67588: LD_VAR 0 1
67592: PUSH
67593: LD_INT 3
67595: PLUS
67596: PUSH
67597: LD_VAR 0 2
67601: PUSH
67602: LD_INT 4
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: PUSH
67610: LD_VAR 0 1
67614: PUSH
67615: LD_INT 4
67617: PLUS
67618: PUSH
67619: LD_VAR 0 2
67623: PUSH
67624: LD_INT 4
67626: PLUS
67627: PUSH
67628: LD_INT 5
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: LIST
67635: PUSH
67636: LD_VAR 0 1
67640: PUSH
67641: LD_INT 4
67643: MINUS
67644: PUSH
67645: LD_VAR 0 2
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: PUSH
67658: LD_VAR 0 1
67662: PUSH
67663: LD_VAR 0 2
67667: PUSH
67668: LD_INT 4
67670: MINUS
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: LIST
67679: PUSH
67680: LD_VAR 0 1
67684: PUSH
67685: LD_INT 3
67687: MINUS
67688: PUSH
67689: LD_VAR 0 2
67693: PUSH
67694: LD_INT 3
67696: MINUS
67697: PUSH
67698: LD_INT 2
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: ST_TO_ADDR
// end ; 4 :
67713: GO 67994
67715: LD_INT 4
67717: DOUBLE
67718: EQUAL
67719: IFTRUE 67723
67721: GO 67856
67723: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67724: LD_ADDR_VAR 0 5
67728: PUSH
67729: LD_VAR 0 1
67733: PUSH
67734: LD_VAR 0 2
67738: PUSH
67739: LD_INT 4
67741: PLUS
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: PUSH
67751: LD_VAR 0 1
67755: PUSH
67756: LD_INT 3
67758: PLUS
67759: PUSH
67760: LD_VAR 0 2
67764: PUSH
67765: LD_INT 3
67767: PLUS
67768: PUSH
67769: LD_INT 5
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: LIST
67776: PUSH
67777: LD_VAR 0 1
67781: PUSH
67782: LD_INT 4
67784: PLUS
67785: PUSH
67786: LD_VAR 0 2
67790: PUSH
67791: LD_INT 4
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: PUSH
67799: LD_VAR 0 1
67803: PUSH
67804: LD_VAR 0 2
67808: PUSH
67809: LD_INT 3
67811: MINUS
67812: PUSH
67813: LD_INT 3
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: PUSH
67821: LD_VAR 0 1
67825: PUSH
67826: LD_INT 4
67828: MINUS
67829: PUSH
67830: LD_VAR 0 2
67834: PUSH
67835: LD_INT 4
67837: MINUS
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: LIST
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: ST_TO_ADDR
// end ; 5 :
67854: GO 67994
67856: LD_INT 5
67858: DOUBLE
67859: EQUAL
67860: IFTRUE 67864
67862: GO 67993
67864: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67865: LD_ADDR_VAR 0 5
67869: PUSH
67870: LD_VAR 0 1
67874: PUSH
67875: LD_INT 4
67877: MINUS
67878: PUSH
67879: LD_VAR 0 2
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: LIST
67891: PUSH
67892: LD_VAR 0 1
67896: PUSH
67897: LD_VAR 0 2
67901: PUSH
67902: LD_INT 4
67904: MINUS
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: PUSH
67914: LD_VAR 0 1
67918: PUSH
67919: LD_INT 4
67921: PLUS
67922: PUSH
67923: LD_VAR 0 2
67927: PUSH
67928: LD_INT 4
67930: PLUS
67931: PUSH
67932: LD_INT 5
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: PUSH
67940: LD_VAR 0 1
67944: PUSH
67945: LD_INT 3
67947: PLUS
67948: PUSH
67949: LD_VAR 0 2
67953: PUSH
67954: LD_INT 4
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: PUSH
67962: LD_VAR 0 1
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 3
67974: PLUS
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// end ; end ;
67991: GO 67994
67993: POP
// result := list ;
67994: LD_ADDR_VAR 0 4
67998: PUSH
67999: LD_VAR 0 5
68003: ST_TO_ADDR
// end ;
68004: LD_VAR 0 4
68008: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68009: LD_INT 0
68011: PPUSH
68012: PPUSH
68013: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68014: LD_VAR 0 1
68018: NOT
68019: IFTRUE 68047
68021: PUSH
68022: LD_VAR 0 2
68026: PUSH
68027: LD_INT 1
68029: PUSH
68030: LD_INT 2
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: LD_INT 4
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: IN
68045: NOT
68046: OR
68047: IFFALSE 68051
// exit ;
68049: GO 68134
// tmp := [ ] ;
68051: LD_ADDR_VAR 0 5
68055: PUSH
68056: EMPTY
68057: ST_TO_ADDR
// for i in units do
68058: LD_ADDR_VAR 0 4
68062: PUSH
68063: LD_VAR 0 1
68067: PUSH
68068: FOR_IN
68069: IFFALSE 68103
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68071: LD_ADDR_VAR 0 5
68075: PUSH
68076: LD_VAR 0 5
68080: PPUSH
68081: LD_VAR 0 4
68085: PPUSH
68086: LD_VAR 0 2
68090: PPUSH
68091: CALL_OW 259
68095: PPUSH
68096: CALL 69529 0 2
68100: ST_TO_ADDR
68101: GO 68068
68103: POP
68104: POP
// if not tmp then
68105: LD_VAR 0 5
68109: NOT
68110: IFFALSE 68114
// exit ;
68112: GO 68134
// result := SortListByListDesc ( units , tmp ) ;
68114: LD_ADDR_VAR 0 3
68118: PUSH
68119: LD_VAR 0 1
68123: PPUSH
68124: LD_VAR 0 5
68128: PPUSH
68129: CALL_OW 77
68133: ST_TO_ADDR
// end ;
68134: LD_VAR 0 3
68138: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68139: LD_INT 0
68141: PPUSH
68142: PPUSH
68143: PPUSH
// result := false ;
68144: LD_ADDR_VAR 0 3
68148: PUSH
68149: LD_INT 0
68151: ST_TO_ADDR
// if not building then
68152: LD_VAR 0 2
68156: NOT
68157: IFFALSE 68161
// exit ;
68159: GO 68305
// x := GetX ( building ) ;
68161: LD_ADDR_VAR 0 4
68165: PUSH
68166: LD_VAR 0 2
68170: PPUSH
68171: CALL_OW 250
68175: ST_TO_ADDR
// y := GetY ( building ) ;
68176: LD_ADDR_VAR 0 5
68180: PUSH
68181: LD_VAR 0 2
68185: PPUSH
68186: CALL_OW 251
68190: ST_TO_ADDR
// if not x or not y then
68191: LD_VAR 0 4
68195: NOT
68196: IFTRUE 68205
68198: PUSH
68199: LD_VAR 0 5
68203: NOT
68204: OR
68205: IFFALSE 68209
// exit ;
68207: GO 68305
// if GetTaskList ( unit ) then
68209: LD_VAR 0 1
68213: PPUSH
68214: CALL_OW 437
68218: IFFALSE 68305
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68220: LD_STRING e
68222: PUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 437
68232: PUSH
68233: LD_INT 1
68235: ARRAY
68236: PUSH
68237: LD_INT 1
68239: ARRAY
68240: EQUAL
68241: IFFALSE 68268
68243: PUSH
68244: LD_VAR 0 4
68248: PUSH
68249: LD_VAR 0 1
68253: PPUSH
68254: CALL_OW 437
68258: PUSH
68259: LD_INT 1
68261: ARRAY
68262: PUSH
68263: LD_INT 2
68265: ARRAY
68266: EQUAL
68267: AND
68268: IFFALSE 68295
68270: PUSH
68271: LD_VAR 0 5
68275: PUSH
68276: LD_VAR 0 1
68280: PPUSH
68281: CALL_OW 437
68285: PUSH
68286: LD_INT 1
68288: ARRAY
68289: PUSH
68290: LD_INT 3
68292: ARRAY
68293: EQUAL
68294: AND
68295: IFFALSE 68305
// result := true end ;
68297: LD_ADDR_VAR 0 3
68301: PUSH
68302: LD_INT 1
68304: ST_TO_ADDR
// end ;
68305: LD_VAR 0 3
68309: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68310: LD_INT 0
68312: PPUSH
// result := false ;
68313: LD_ADDR_VAR 0 4
68317: PUSH
68318: LD_INT 0
68320: ST_TO_ADDR
// if GetTaskList ( unit ) then
68321: LD_VAR 0 1
68325: PPUSH
68326: CALL_OW 437
68330: IFFALSE 68417
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68332: LD_STRING M
68334: PUSH
68335: LD_VAR 0 1
68339: PPUSH
68340: CALL_OW 437
68344: PUSH
68345: LD_INT 1
68347: ARRAY
68348: PUSH
68349: LD_INT 1
68351: ARRAY
68352: EQUAL
68353: IFFALSE 68380
68355: PUSH
68356: LD_VAR 0 2
68360: PUSH
68361: LD_VAR 0 1
68365: PPUSH
68366: CALL_OW 437
68370: PUSH
68371: LD_INT 1
68373: ARRAY
68374: PUSH
68375: LD_INT 2
68377: ARRAY
68378: EQUAL
68379: AND
68380: IFFALSE 68407
68382: PUSH
68383: LD_VAR 0 3
68387: PUSH
68388: LD_VAR 0 1
68392: PPUSH
68393: CALL_OW 437
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PUSH
68402: LD_INT 3
68404: ARRAY
68405: EQUAL
68406: AND
68407: IFFALSE 68417
// result := true ;
68409: LD_ADDR_VAR 0 4
68413: PUSH
68414: LD_INT 1
68416: ST_TO_ADDR
// end ; end ;
68417: LD_VAR 0 4
68421: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68422: LD_INT 0
68424: PPUSH
68425: PPUSH
68426: PPUSH
68427: PPUSH
// if not unit or not area then
68428: LD_VAR 0 1
68432: NOT
68433: IFTRUE 68442
68435: PUSH
68436: LD_VAR 0 2
68440: NOT
68441: OR
68442: IFFALSE 68446
// exit ;
68444: GO 68622
// tmp := AreaToList ( area , i ) ;
68446: LD_ADDR_VAR 0 6
68450: PUSH
68451: LD_VAR 0 2
68455: PPUSH
68456: LD_VAR 0 5
68460: PPUSH
68461: CALL_OW 517
68465: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68466: LD_ADDR_VAR 0 5
68470: PUSH
68471: DOUBLE
68472: LD_INT 1
68474: DEC
68475: ST_TO_ADDR
68476: LD_VAR 0 6
68480: PUSH
68481: LD_INT 1
68483: ARRAY
68484: PUSH
68485: FOR_TO
68486: IFFALSE 68620
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68488: LD_ADDR_VAR 0 7
68492: PUSH
68493: LD_VAR 0 6
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PUSH
68502: LD_VAR 0 5
68506: ARRAY
68507: PUSH
68508: LD_VAR 0 6
68512: PUSH
68513: LD_INT 2
68515: ARRAY
68516: PUSH
68517: LD_VAR 0 5
68521: ARRAY
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68527: LD_INT 92
68529: PUSH
68530: LD_VAR 0 7
68534: PUSH
68535: LD_INT 1
68537: ARRAY
68538: PUSH
68539: LD_VAR 0 7
68543: PUSH
68544: LD_INT 2
68546: ARRAY
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: PPUSH
68557: CALL_OW 69
68561: PUSH
68562: LD_INT 0
68564: EQUAL
68565: IFFALSE 68618
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68567: LD_VAR 0 1
68571: PPUSH
68572: LD_VAR 0 7
68576: PUSH
68577: LD_INT 1
68579: ARRAY
68580: PPUSH
68581: LD_VAR 0 7
68585: PUSH
68586: LD_INT 2
68588: ARRAY
68589: PPUSH
68590: LD_VAR 0 3
68594: PPUSH
68595: CALL_OW 48
// result := IsPlaced ( unit ) ;
68599: LD_ADDR_VAR 0 4
68603: PUSH
68604: LD_VAR 0 1
68608: PPUSH
68609: CALL_OW 305
68613: ST_TO_ADDR
// exit ;
68614: POP
68615: POP
68616: GO 68622
// end ; end ;
68618: GO 68485
68620: POP
68621: POP
// end ;
68622: LD_VAR 0 4
68626: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68627: LD_INT 0
68629: PPUSH
68630: PPUSH
68631: PPUSH
// if not side or side > 8 then
68632: LD_VAR 0 1
68636: NOT
68637: IFTRUE 68649
68639: PUSH
68640: LD_VAR 0 1
68644: PUSH
68645: LD_INT 8
68647: GREATER
68648: OR
68649: IFFALSE 68653
// exit ;
68651: GO 68840
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68653: LD_ADDR_VAR 0 4
68657: PUSH
68658: LD_INT 22
68660: PUSH
68661: LD_VAR 0 1
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 21
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PPUSH
68684: CALL_OW 69
68688: ST_TO_ADDR
// if not tmp then
68689: LD_VAR 0 4
68693: NOT
68694: IFFALSE 68698
// exit ;
68696: GO 68840
// enable_addtolog := true ;
68698: LD_ADDR_OWVAR 81
68702: PUSH
68703: LD_INT 1
68705: ST_TO_ADDR
// AddToLog ( [ ) ;
68706: LD_STRING [
68708: PPUSH
68709: CALL_OW 561
// for i in tmp do
68713: LD_ADDR_VAR 0 3
68717: PUSH
68718: LD_VAR 0 4
68722: PUSH
68723: FOR_IN
68724: IFFALSE 68831
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68726: LD_STRING [
68728: PUSH
68729: LD_VAR 0 3
68733: PPUSH
68734: CALL_OW 266
68738: STR
68739: PUSH
68740: LD_STRING , 
68742: STR
68743: PUSH
68744: LD_VAR 0 3
68748: PPUSH
68749: CALL_OW 250
68753: STR
68754: PUSH
68755: LD_STRING , 
68757: STR
68758: PUSH
68759: LD_VAR 0 3
68763: PPUSH
68764: CALL_OW 251
68768: STR
68769: PUSH
68770: LD_STRING , 
68772: STR
68773: PUSH
68774: LD_VAR 0 3
68778: PPUSH
68779: CALL_OW 254
68783: STR
68784: PUSH
68785: LD_STRING , 
68787: STR
68788: PUSH
68789: LD_VAR 0 3
68793: PPUSH
68794: LD_INT 1
68796: PPUSH
68797: CALL_OW 268
68801: STR
68802: PUSH
68803: LD_STRING , 
68805: STR
68806: PUSH
68807: LD_VAR 0 3
68811: PPUSH
68812: LD_INT 2
68814: PPUSH
68815: CALL_OW 268
68819: STR
68820: PUSH
68821: LD_STRING ],
68823: STR
68824: PPUSH
68825: CALL_OW 561
// end ;
68829: GO 68723
68831: POP
68832: POP
// AddToLog ( ]; ) ;
68833: LD_STRING ];
68835: PPUSH
68836: CALL_OW 561
// end ;
68840: LD_VAR 0 2
68844: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68845: LD_INT 0
68847: PPUSH
68848: PPUSH
68849: PPUSH
68850: PPUSH
68851: PPUSH
// if not area or not rate or not max then
68852: LD_VAR 0 1
68856: NOT
68857: IFTRUE 68866
68859: PUSH
68860: LD_VAR 0 2
68864: NOT
68865: OR
68866: IFTRUE 68875
68868: PUSH
68869: LD_VAR 0 4
68873: NOT
68874: OR
68875: IFFALSE 68879
// exit ;
68877: GO 69068
// while 1 do
68879: LD_INT 1
68881: IFFALSE 69068
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68883: LD_ADDR_VAR 0 9
68887: PUSH
68888: LD_VAR 0 1
68892: PPUSH
68893: LD_INT 1
68895: PPUSH
68896: CALL_OW 287
68900: PUSH
68901: LD_INT 10
68903: MUL
68904: ST_TO_ADDR
// r := rate / 10 ;
68905: LD_ADDR_VAR 0 7
68909: PUSH
68910: LD_VAR 0 2
68914: PUSH
68915: LD_INT 10
68917: DIVREAL
68918: ST_TO_ADDR
// time := 1 1$00 ;
68919: LD_ADDR_VAR 0 8
68923: PUSH
68924: LD_INT 2100
68926: ST_TO_ADDR
// if amount < min then
68927: LD_VAR 0 9
68931: PUSH
68932: LD_VAR 0 3
68936: LESS
68937: IFFALSE 68955
// r := r * 2 else
68939: LD_ADDR_VAR 0 7
68943: PUSH
68944: LD_VAR 0 7
68948: PUSH
68949: LD_INT 2
68951: MUL
68952: ST_TO_ADDR
68953: GO 68981
// if amount > max then
68955: LD_VAR 0 9
68959: PUSH
68960: LD_VAR 0 4
68964: GREATER
68965: IFFALSE 68981
// r := r / 2 ;
68967: LD_ADDR_VAR 0 7
68971: PUSH
68972: LD_VAR 0 7
68976: PUSH
68977: LD_INT 2
68979: DIVREAL
68980: ST_TO_ADDR
// time := time / r ;
68981: LD_ADDR_VAR 0 8
68985: PUSH
68986: LD_VAR 0 8
68990: PUSH
68991: LD_VAR 0 7
68995: DIVREAL
68996: ST_TO_ADDR
// if time < 0 then
68997: LD_VAR 0 8
69001: PUSH
69002: LD_INT 0
69004: LESS
69005: IFFALSE 69022
// time := time * - 1 ;
69007: LD_ADDR_VAR 0 8
69011: PUSH
69012: LD_VAR 0 8
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: MUL
69021: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69022: LD_VAR 0 8
69026: PUSH
69027: LD_INT 35
69029: PPUSH
69030: LD_INT 875
69032: PPUSH
69033: CALL_OW 12
69037: PLUS
69038: PPUSH
69039: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69043: LD_INT 1
69045: PPUSH
69046: LD_INT 5
69048: PPUSH
69049: CALL_OW 12
69053: PPUSH
69054: LD_VAR 0 1
69058: PPUSH
69059: LD_INT 1
69061: PPUSH
69062: CALL_OW 55
// end ;
69066: GO 68879
// end ;
69068: LD_VAR 0 5
69072: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69073: LD_INT 0
69075: PPUSH
69076: PPUSH
69077: PPUSH
69078: PPUSH
69079: PPUSH
69080: PPUSH
69081: PPUSH
69082: PPUSH
// if not turrets or not factories then
69083: LD_VAR 0 1
69087: NOT
69088: IFTRUE 69097
69090: PUSH
69091: LD_VAR 0 2
69095: NOT
69096: OR
69097: IFFALSE 69101
// exit ;
69099: GO 69408
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69101: LD_ADDR_VAR 0 10
69105: PUSH
69106: LD_INT 5
69108: PUSH
69109: LD_INT 6
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: LD_INT 4
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: LD_INT 5
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 24
69143: PUSH
69144: LD_INT 25
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 23
69153: PUSH
69154: LD_INT 27
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 42
69167: PUSH
69168: LD_INT 43
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 44
69177: PUSH
69178: LD_INT 46
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 45
69187: PUSH
69188: LD_INT 47
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: LIST
69204: ST_TO_ADDR
// result := [ ] ;
69205: LD_ADDR_VAR 0 3
69209: PUSH
69210: EMPTY
69211: ST_TO_ADDR
// for i in turrets do
69212: LD_ADDR_VAR 0 4
69216: PUSH
69217: LD_VAR 0 1
69221: PUSH
69222: FOR_IN
69223: IFFALSE 69406
// begin nat := GetNation ( i ) ;
69225: LD_ADDR_VAR 0 7
69229: PUSH
69230: LD_VAR 0 4
69234: PPUSH
69235: CALL_OW 248
69239: ST_TO_ADDR
// weapon := 0 ;
69240: LD_ADDR_VAR 0 8
69244: PUSH
69245: LD_INT 0
69247: ST_TO_ADDR
// if not nat then
69248: LD_VAR 0 7
69252: NOT
69253: IFFALSE 69257
// continue ;
69255: GO 69222
// for j in list [ nat ] do
69257: LD_ADDR_VAR 0 5
69261: PUSH
69262: LD_VAR 0 10
69266: PUSH
69267: LD_VAR 0 7
69271: ARRAY
69272: PUSH
69273: FOR_IN
69274: IFFALSE 69315
// if GetBWeapon ( i ) = j [ 1 ] then
69276: LD_VAR 0 4
69280: PPUSH
69281: CALL_OW 269
69285: PUSH
69286: LD_VAR 0 5
69290: PUSH
69291: LD_INT 1
69293: ARRAY
69294: EQUAL
69295: IFFALSE 69313
// begin weapon := j [ 2 ] ;
69297: LD_ADDR_VAR 0 8
69301: PUSH
69302: LD_VAR 0 5
69306: PUSH
69307: LD_INT 2
69309: ARRAY
69310: ST_TO_ADDR
// break ;
69311: GO 69315
// end ;
69313: GO 69273
69315: POP
69316: POP
// if not weapon then
69317: LD_VAR 0 8
69321: NOT
69322: IFFALSE 69326
// continue ;
69324: GO 69222
// for k in factories do
69326: LD_ADDR_VAR 0 6
69330: PUSH
69331: LD_VAR 0 2
69335: PUSH
69336: FOR_IN
69337: IFFALSE 69402
// begin weapons := AvailableWeaponList ( k ) ;
69339: LD_ADDR_VAR 0 9
69343: PUSH
69344: LD_VAR 0 6
69348: PPUSH
69349: CALL_OW 478
69353: ST_TO_ADDR
// if not weapons then
69354: LD_VAR 0 9
69358: NOT
69359: IFFALSE 69363
// continue ;
69361: GO 69336
// if weapon in weapons then
69363: LD_VAR 0 8
69367: PUSH
69368: LD_VAR 0 9
69372: IN
69373: IFFALSE 69400
// begin result := [ i , weapon ] ;
69375: LD_ADDR_VAR 0 3
69379: PUSH
69380: LD_VAR 0 4
69384: PUSH
69385: LD_VAR 0 8
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: ST_TO_ADDR
// exit ;
69394: POP
69395: POP
69396: POP
69397: POP
69398: GO 69408
// end ; end ;
69400: GO 69336
69402: POP
69403: POP
// end ;
69404: GO 69222
69406: POP
69407: POP
// end ;
69408: LD_VAR 0 3
69412: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69413: LD_INT 0
69415: PPUSH
// if not side or side > 8 then
69416: LD_VAR 0 3
69420: NOT
69421: IFTRUE 69433
69423: PUSH
69424: LD_VAR 0 3
69428: PUSH
69429: LD_INT 8
69431: GREATER
69432: OR
69433: IFFALSE 69437
// exit ;
69435: GO 69496
// if not range then
69437: LD_VAR 0 4
69441: NOT
69442: IFFALSE 69453
// range := - 12 ;
69444: LD_ADDR_VAR 0 4
69448: PUSH
69449: LD_INT 12
69451: NEG
69452: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69453: LD_VAR 0 1
69457: PPUSH
69458: LD_VAR 0 2
69462: PPUSH
69463: LD_VAR 0 3
69467: PPUSH
69468: LD_VAR 0 4
69472: PPUSH
69473: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69477: LD_VAR 0 1
69481: PPUSH
69482: LD_VAR 0 2
69486: PPUSH
69487: LD_VAR 0 3
69491: PPUSH
69492: CALL_OW 331
// end ;
69496: LD_VAR 0 5
69500: RET
// export function Video ( mode ) ; begin
69501: LD_INT 0
69503: PPUSH
// ingame_video = mode ;
69504: LD_ADDR_OWVAR 52
69508: PUSH
69509: LD_VAR 0 1
69513: ST_TO_ADDR
// interface_hidden = mode ;
69514: LD_ADDR_OWVAR 54
69518: PUSH
69519: LD_VAR 0 1
69523: ST_TO_ADDR
// end ;
69524: LD_VAR 0 2
69528: RET
// export function Join ( array , element ) ; begin
69529: LD_INT 0
69531: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69532: LD_ADDR_VAR 0 3
69536: PUSH
69537: LD_VAR 0 1
69541: PPUSH
69542: LD_VAR 0 1
69546: PUSH
69547: LD_INT 1
69549: PLUS
69550: PPUSH
69551: LD_VAR 0 2
69555: PPUSH
69556: CALL_OW 1
69560: ST_TO_ADDR
// end ;
69561: LD_VAR 0 3
69565: RET
// export function JoinUnion ( array , element ) ; begin
69566: LD_INT 0
69568: PPUSH
// result := array union element ;
69569: LD_ADDR_VAR 0 3
69573: PUSH
69574: LD_VAR 0 1
69578: PUSH
69579: LD_VAR 0 2
69583: UNION
69584: ST_TO_ADDR
// end ;
69585: LD_VAR 0 3
69589: RET
// export function GetBehemoths ( side ) ; begin
69590: LD_INT 0
69592: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69593: LD_ADDR_VAR 0 2
69597: PUSH
69598: LD_INT 22
69600: PUSH
69601: LD_VAR 0 1
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 31
69612: PUSH
69613: LD_INT 25
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PPUSH
69624: CALL_OW 69
69628: ST_TO_ADDR
// end ;
69629: LD_VAR 0 2
69633: RET
// export function Shuffle ( array ) ; var i , index ; begin
69634: LD_INT 0
69636: PPUSH
69637: PPUSH
69638: PPUSH
// result := [ ] ;
69639: LD_ADDR_VAR 0 2
69643: PUSH
69644: EMPTY
69645: ST_TO_ADDR
// if not array then
69646: LD_VAR 0 1
69650: NOT
69651: IFFALSE 69655
// exit ;
69653: GO 69754
// Randomize ;
69655: CALL_OW 10
// for i = array downto 1 do
69659: LD_ADDR_VAR 0 3
69663: PUSH
69664: DOUBLE
69665: LD_VAR 0 1
69669: INC
69670: ST_TO_ADDR
69671: LD_INT 1
69673: PUSH
69674: FOR_DOWNTO
69675: IFFALSE 69752
// begin index := rand ( 1 , array ) ;
69677: LD_ADDR_VAR 0 4
69681: PUSH
69682: LD_INT 1
69684: PPUSH
69685: LD_VAR 0 1
69689: PPUSH
69690: CALL_OW 12
69694: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69695: LD_ADDR_VAR 0 2
69699: PUSH
69700: LD_VAR 0 2
69704: PPUSH
69705: LD_VAR 0 2
69709: PUSH
69710: LD_INT 1
69712: PLUS
69713: PPUSH
69714: LD_VAR 0 1
69718: PUSH
69719: LD_VAR 0 4
69723: ARRAY
69724: PPUSH
69725: CALL_OW 2
69729: ST_TO_ADDR
// array := Delete ( array , index ) ;
69730: LD_ADDR_VAR 0 1
69734: PUSH
69735: LD_VAR 0 1
69739: PPUSH
69740: LD_VAR 0 4
69744: PPUSH
69745: CALL_OW 3
69749: ST_TO_ADDR
// end ;
69750: GO 69674
69752: POP
69753: POP
// end ;
69754: LD_VAR 0 2
69758: RET
// export function GetBaseMaterials ( base ) ; begin
69759: LD_INT 0
69761: PPUSH
// result := [ 0 , 0 , 0 ] ;
69762: LD_ADDR_VAR 0 2
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: ST_TO_ADDR
// if not base then
69781: LD_VAR 0 1
69785: NOT
69786: IFFALSE 69790
// exit ;
69788: GO 69839
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69790: LD_ADDR_VAR 0 2
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: LD_INT 1
69802: PPUSH
69803: CALL_OW 275
69807: PUSH
69808: LD_VAR 0 1
69812: PPUSH
69813: LD_INT 2
69815: PPUSH
69816: CALL_OW 275
69820: PUSH
69821: LD_VAR 0 1
69825: PPUSH
69826: LD_INT 3
69828: PPUSH
69829: CALL_OW 275
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: ST_TO_ADDR
// end ;
69839: LD_VAR 0 2
69843: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69844: LD_INT 0
69846: PPUSH
69847: PPUSH
// result := array ;
69848: LD_ADDR_VAR 0 3
69852: PUSH
69853: LD_VAR 0 1
69857: ST_TO_ADDR
// if size >= result then
69858: LD_VAR 0 2
69862: PUSH
69863: LD_VAR 0 3
69867: GREATEREQUAL
69868: IFFALSE 69872
// exit ;
69870: GO 69922
// if size then
69872: LD_VAR 0 2
69876: IFFALSE 69922
// for i := array downto size do
69878: LD_ADDR_VAR 0 4
69882: PUSH
69883: DOUBLE
69884: LD_VAR 0 1
69888: INC
69889: ST_TO_ADDR
69890: LD_VAR 0 2
69894: PUSH
69895: FOR_DOWNTO
69896: IFFALSE 69920
// result := Delete ( result , result ) ;
69898: LD_ADDR_VAR 0 3
69902: PUSH
69903: LD_VAR 0 3
69907: PPUSH
69908: LD_VAR 0 3
69912: PPUSH
69913: CALL_OW 3
69917: ST_TO_ADDR
69918: GO 69895
69920: POP
69921: POP
// end ;
69922: LD_VAR 0 3
69926: RET
// export function ComExit ( unit ) ; var tmp ; begin
69927: LD_INT 0
69929: PPUSH
69930: PPUSH
// if not IsInUnit ( unit ) then
69931: LD_VAR 0 1
69935: PPUSH
69936: CALL_OW 310
69940: NOT
69941: IFFALSE 69945
// exit ;
69943: GO 70005
// tmp := IsInUnit ( unit ) ;
69945: LD_ADDR_VAR 0 3
69949: PUSH
69950: LD_VAR 0 1
69954: PPUSH
69955: CALL_OW 310
69959: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69960: LD_VAR 0 3
69964: PPUSH
69965: CALL_OW 247
69969: PUSH
69970: LD_INT 2
69972: EQUAL
69973: IFFALSE 69986
// ComExitVehicle ( unit ) else
69975: LD_VAR 0 1
69979: PPUSH
69980: CALL_OW 121
69984: GO 69995
// ComExitBuilding ( unit ) ;
69986: LD_VAR 0 1
69990: PPUSH
69991: CALL_OW 122
// result := tmp ;
69995: LD_ADDR_VAR 0 2
69999: PUSH
70000: LD_VAR 0 3
70004: ST_TO_ADDR
// end ;
70005: LD_VAR 0 2
70009: RET
// export function ComExitAll ( units ) ; var i ; begin
70010: LD_INT 0
70012: PPUSH
70013: PPUSH
// if not units then
70014: LD_VAR 0 1
70018: NOT
70019: IFFALSE 70023
// exit ;
70021: GO 70049
// for i in units do
70023: LD_ADDR_VAR 0 3
70027: PUSH
70028: LD_VAR 0 1
70032: PUSH
70033: FOR_IN
70034: IFFALSE 70047
// ComExit ( i ) ;
70036: LD_VAR 0 3
70040: PPUSH
70041: CALL 69927 0 1
70045: GO 70033
70047: POP
70048: POP
// end ;
70049: LD_VAR 0 2
70053: RET
// export function ResetHc ; begin
70054: LD_INT 0
70056: PPUSH
// InitHc ;
70057: CALL_OW 19
// hc_importance := 0 ;
70061: LD_ADDR_OWVAR 32
70065: PUSH
70066: LD_INT 0
70068: ST_TO_ADDR
// end ;
70069: LD_VAR 0 1
70073: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70074: LD_INT 0
70076: PPUSH
70077: PPUSH
70078: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70079: LD_ADDR_VAR 0 6
70083: PUSH
70084: LD_VAR 0 1
70088: PUSH
70089: LD_VAR 0 3
70093: PLUS
70094: PUSH
70095: LD_INT 2
70097: DIV
70098: ST_TO_ADDR
// if _x < 0 then
70099: LD_VAR 0 6
70103: PUSH
70104: LD_INT 0
70106: LESS
70107: IFFALSE 70124
// _x := _x * - 1 ;
70109: LD_ADDR_VAR 0 6
70113: PUSH
70114: LD_VAR 0 6
70118: PUSH
70119: LD_INT 1
70121: NEG
70122: MUL
70123: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70124: LD_ADDR_VAR 0 7
70128: PUSH
70129: LD_VAR 0 2
70133: PUSH
70134: LD_VAR 0 4
70138: PLUS
70139: PUSH
70140: LD_INT 2
70142: DIV
70143: ST_TO_ADDR
// if _y < 0 then
70144: LD_VAR 0 7
70148: PUSH
70149: LD_INT 0
70151: LESS
70152: IFFALSE 70169
// _y := _y * - 1 ;
70154: LD_ADDR_VAR 0 7
70158: PUSH
70159: LD_VAR 0 7
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: MUL
70168: ST_TO_ADDR
// result := [ _x , _y ] ;
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: LD_VAR 0 6
70178: PUSH
70179: LD_VAR 0 7
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: ST_TO_ADDR
// end ;
70188: LD_VAR 0 5
70192: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70193: LD_INT 0
70195: PPUSH
70196: PPUSH
70197: PPUSH
70198: PPUSH
// task := GetTaskList ( unit ) ;
70199: LD_ADDR_VAR 0 7
70203: PUSH
70204: LD_VAR 0 1
70208: PPUSH
70209: CALL_OW 437
70213: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70214: LD_VAR 0 7
70218: NOT
70219: IFFALSE 70238
70221: PUSH
70222: LD_VAR 0 1
70226: PPUSH
70227: LD_VAR 0 2
70231: PPUSH
70232: CALL_OW 308
70236: NOT
70237: AND
70238: IFFALSE 70242
// exit ;
70240: GO 70360
// if IsInArea ( unit , area ) then
70242: LD_VAR 0 1
70246: PPUSH
70247: LD_VAR 0 2
70251: PPUSH
70252: CALL_OW 308
70256: IFFALSE 70274
// begin ComMoveToArea ( unit , goAway ) ;
70258: LD_VAR 0 1
70262: PPUSH
70263: LD_VAR 0 3
70267: PPUSH
70268: CALL_OW 113
// exit ;
70272: GO 70360
// end ; if task [ 1 ] [ 1 ] <> M then
70274: LD_VAR 0 7
70278: PUSH
70279: LD_INT 1
70281: ARRAY
70282: PUSH
70283: LD_INT 1
70285: ARRAY
70286: PUSH
70287: LD_STRING M
70289: NONEQUAL
70290: IFFALSE 70294
// exit ;
70292: GO 70360
// x := task [ 1 ] [ 2 ] ;
70294: LD_ADDR_VAR 0 5
70298: PUSH
70299: LD_VAR 0 7
70303: PUSH
70304: LD_INT 1
70306: ARRAY
70307: PUSH
70308: LD_INT 2
70310: ARRAY
70311: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70312: LD_ADDR_VAR 0 6
70316: PUSH
70317: LD_VAR 0 7
70321: PUSH
70322: LD_INT 1
70324: ARRAY
70325: PUSH
70326: LD_INT 3
70328: ARRAY
70329: ST_TO_ADDR
// if InArea ( x , y , area ) then
70330: LD_VAR 0 5
70334: PPUSH
70335: LD_VAR 0 6
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: CALL_OW 309
70349: IFFALSE 70360
// ComStop ( unit ) ;
70351: LD_VAR 0 1
70355: PPUSH
70356: CALL_OW 141
// end ;
70360: LD_VAR 0 4
70364: RET
// export function Abs ( value ) ; begin
70365: LD_INT 0
70367: PPUSH
// result := value ;
70368: LD_ADDR_VAR 0 2
70372: PUSH
70373: LD_VAR 0 1
70377: ST_TO_ADDR
// if value < 0 then
70378: LD_VAR 0 1
70382: PUSH
70383: LD_INT 0
70385: LESS
70386: IFFALSE 70403
// result := value * - 1 ;
70388: LD_ADDR_VAR 0 2
70392: PUSH
70393: LD_VAR 0 1
70397: PUSH
70398: LD_INT 1
70400: NEG
70401: MUL
70402: ST_TO_ADDR
// end ;
70403: LD_VAR 0 2
70407: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70408: LD_INT 0
70410: PPUSH
70411: PPUSH
70412: PPUSH
70413: PPUSH
70414: PPUSH
70415: PPUSH
70416: PPUSH
70417: PPUSH
// if not unit or not building then
70418: LD_VAR 0 1
70422: NOT
70423: IFTRUE 70432
70425: PUSH
70426: LD_VAR 0 2
70430: NOT
70431: OR
70432: IFFALSE 70436
// exit ;
70434: GO 70664
// x := GetX ( building ) ;
70436: LD_ADDR_VAR 0 4
70440: PUSH
70441: LD_VAR 0 2
70445: PPUSH
70446: CALL_OW 250
70450: ST_TO_ADDR
// y := GetY ( building ) ;
70451: LD_ADDR_VAR 0 6
70455: PUSH
70456: LD_VAR 0 2
70460: PPUSH
70461: CALL_OW 251
70465: ST_TO_ADDR
// d := GetDir ( building ) ;
70466: LD_ADDR_VAR 0 8
70470: PUSH
70471: LD_VAR 0 2
70475: PPUSH
70476: CALL_OW 254
70480: ST_TO_ADDR
// r := 4 ;
70481: LD_ADDR_VAR 0 9
70485: PUSH
70486: LD_INT 4
70488: ST_TO_ADDR
// for i := 1 to 5 do
70489: LD_ADDR_VAR 0 10
70493: PUSH
70494: DOUBLE
70495: LD_INT 1
70497: DEC
70498: ST_TO_ADDR
70499: LD_INT 5
70501: PUSH
70502: FOR_TO
70503: IFFALSE 70662
// begin _x := ShiftX ( x , d , r + i ) ;
70505: LD_ADDR_VAR 0 5
70509: PUSH
70510: LD_VAR 0 4
70514: PPUSH
70515: LD_VAR 0 8
70519: PPUSH
70520: LD_VAR 0 9
70524: PUSH
70525: LD_VAR 0 10
70529: PLUS
70530: PPUSH
70531: CALL_OW 272
70535: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70536: LD_ADDR_VAR 0 7
70540: PUSH
70541: LD_VAR 0 6
70545: PPUSH
70546: LD_VAR 0 8
70550: PPUSH
70551: LD_VAR 0 9
70555: PUSH
70556: LD_VAR 0 10
70560: PLUS
70561: PPUSH
70562: CALL_OW 273
70566: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70567: LD_VAR 0 5
70571: PPUSH
70572: LD_VAR 0 7
70576: PPUSH
70577: CALL_OW 488
70581: IFFALSE 70616
70583: PUSH
70584: LD_VAR 0 5
70588: PPUSH
70589: LD_VAR 0 7
70593: PPUSH
70594: CALL_OW 428
70598: PPUSH
70599: CALL_OW 247
70603: PUSH
70604: LD_INT 3
70606: PUSH
70607: LD_INT 2
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: IN
70614: NOT
70615: AND
70616: IFFALSE 70660
// begin ComMoveXY ( unit , _x , _y ) ;
70618: LD_VAR 0 1
70622: PPUSH
70623: LD_VAR 0 5
70627: PPUSH
70628: LD_VAR 0 7
70632: PPUSH
70633: CALL_OW 111
// result := [ _x , _y ] ;
70637: LD_ADDR_VAR 0 3
70641: PUSH
70642: LD_VAR 0 5
70646: PUSH
70647: LD_VAR 0 7
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: ST_TO_ADDR
// exit ;
70656: POP
70657: POP
70658: GO 70664
// end ; end ;
70660: GO 70502
70662: POP
70663: POP
// end ;
70664: LD_VAR 0 3
70668: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70669: LD_INT 0
70671: PPUSH
70672: PPUSH
70673: PPUSH
// result := 0 ;
70674: LD_ADDR_VAR 0 3
70678: PUSH
70679: LD_INT 0
70681: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70682: LD_VAR 0 1
70686: PUSH
70687: LD_INT 0
70689: LESS
70690: IFTRUE 70702
70692: PUSH
70693: LD_VAR 0 1
70697: PUSH
70698: LD_INT 8
70700: GREATER
70701: OR
70702: IFTRUE 70714
70704: PUSH
70705: LD_VAR 0 2
70709: PUSH
70710: LD_INT 0
70712: LESS
70713: OR
70714: IFTRUE 70726
70716: PUSH
70717: LD_VAR 0 2
70721: PUSH
70722: LD_INT 8
70724: GREATER
70725: OR
70726: IFFALSE 70730
// exit ;
70728: GO 70805
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70730: LD_ADDR_VAR 0 4
70734: PUSH
70735: LD_INT 22
70737: PUSH
70738: LD_VAR 0 2
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PPUSH
70747: CALL_OW 69
70751: PUSH
70752: FOR_IN
70753: IFFALSE 70803
// begin un := UnitShoot ( i ) ;
70755: LD_ADDR_VAR 0 5
70759: PUSH
70760: LD_VAR 0 4
70764: PPUSH
70765: CALL_OW 504
70769: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70770: LD_VAR 0 5
70774: PPUSH
70775: CALL_OW 255
70779: PUSH
70780: LD_VAR 0 1
70784: EQUAL
70785: IFFALSE 70801
// begin result := un ;
70787: LD_ADDR_VAR 0 3
70791: PUSH
70792: LD_VAR 0 5
70796: ST_TO_ADDR
// exit ;
70797: POP
70798: POP
70799: GO 70805
// end ; end ;
70801: GO 70752
70803: POP
70804: POP
// end ;
70805: LD_VAR 0 3
70809: RET
// export function GetCargoBay ( units ) ; begin
70810: LD_INT 0
70812: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70813: LD_ADDR_VAR 0 2
70817: PUSH
70818: LD_VAR 0 1
70822: PPUSH
70823: LD_INT 2
70825: PUSH
70826: LD_INT 34
70828: PUSH
70829: LD_INT 12
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 34
70838: PUSH
70839: LD_INT 51
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 34
70848: PUSH
70849: LD_INT 32
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 34
70858: PUSH
70859: LD_INT 89
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: PPUSH
70873: CALL_OW 72
70877: ST_TO_ADDR
// end ;
70878: LD_VAR 0 2
70882: RET
// export function Negate ( value ) ; begin
70883: LD_INT 0
70885: PPUSH
// result := not value ;
70886: LD_ADDR_VAR 0 2
70890: PUSH
70891: LD_VAR 0 1
70895: NOT
70896: ST_TO_ADDR
// end ;
70897: LD_VAR 0 2
70901: RET
// export function Inc ( value ) ; begin
70902: LD_INT 0
70904: PPUSH
// result := value + 1 ;
70905: LD_ADDR_VAR 0 2
70909: PUSH
70910: LD_VAR 0 1
70914: PUSH
70915: LD_INT 1
70917: PLUS
70918: ST_TO_ADDR
// end ;
70919: LD_VAR 0 2
70923: RET
// export function Dec ( value ) ; begin
70924: LD_INT 0
70926: PPUSH
// result := value - 1 ;
70927: LD_ADDR_VAR 0 2
70931: PUSH
70932: LD_VAR 0 1
70936: PUSH
70937: LD_INT 1
70939: MINUS
70940: ST_TO_ADDR
// end ;
70941: LD_VAR 0 2
70945: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70946: LD_INT 0
70948: PPUSH
70949: PPUSH
70950: PPUSH
70951: PPUSH
70952: PPUSH
70953: PPUSH
70954: PPUSH
70955: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70956: LD_VAR 0 1
70960: PPUSH
70961: LD_VAR 0 2
70965: PPUSH
70966: CALL_OW 488
70970: NOT
70971: IFTRUE 70990
70973: PUSH
70974: LD_VAR 0 3
70978: PPUSH
70979: LD_VAR 0 4
70983: PPUSH
70984: CALL_OW 488
70988: NOT
70989: OR
70990: IFFALSE 71003
// begin result := - 1 ;
70992: LD_ADDR_VAR 0 5
70996: PUSH
70997: LD_INT 1
70999: NEG
71000: ST_TO_ADDR
// exit ;
71001: GO 71238
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71003: LD_ADDR_VAR 0 12
71007: PUSH
71008: LD_VAR 0 1
71012: PPUSH
71013: LD_VAR 0 2
71017: PPUSH
71018: LD_VAR 0 3
71022: PPUSH
71023: LD_VAR 0 4
71027: PPUSH
71028: CALL 70074 0 4
71032: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71033: LD_ADDR_VAR 0 11
71037: PUSH
71038: LD_VAR 0 1
71042: PPUSH
71043: LD_VAR 0 2
71047: PPUSH
71048: LD_VAR 0 12
71052: PUSH
71053: LD_INT 1
71055: ARRAY
71056: PPUSH
71057: LD_VAR 0 12
71061: PUSH
71062: LD_INT 2
71064: ARRAY
71065: PPUSH
71066: CALL_OW 298
71070: ST_TO_ADDR
// distance := 9999 ;
71071: LD_ADDR_VAR 0 10
71075: PUSH
71076: LD_INT 9999
71078: ST_TO_ADDR
// for i := 0 to 5 do
71079: LD_ADDR_VAR 0 6
71083: PUSH
71084: DOUBLE
71085: LD_INT 0
71087: DEC
71088: ST_TO_ADDR
71089: LD_INT 5
71091: PUSH
71092: FOR_TO
71093: IFFALSE 71236
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71095: LD_ADDR_VAR 0 7
71099: PUSH
71100: LD_VAR 0 1
71104: PPUSH
71105: LD_VAR 0 6
71109: PPUSH
71110: LD_VAR 0 11
71114: PPUSH
71115: CALL_OW 272
71119: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71120: LD_ADDR_VAR 0 8
71124: PUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: LD_VAR 0 6
71134: PPUSH
71135: LD_VAR 0 11
71139: PPUSH
71140: CALL_OW 273
71144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71145: LD_VAR 0 7
71149: PPUSH
71150: LD_VAR 0 8
71154: PPUSH
71155: CALL_OW 488
71159: NOT
71160: IFFALSE 71164
// continue ;
71162: GO 71092
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71164: LD_ADDR_VAR 0 9
71168: PUSH
71169: LD_VAR 0 12
71173: PUSH
71174: LD_INT 1
71176: ARRAY
71177: PPUSH
71178: LD_VAR 0 12
71182: PUSH
71183: LD_INT 2
71185: ARRAY
71186: PPUSH
71187: LD_VAR 0 7
71191: PPUSH
71192: LD_VAR 0 8
71196: PPUSH
71197: CALL_OW 298
71201: ST_TO_ADDR
// if tmp < distance then
71202: LD_VAR 0 9
71206: PUSH
71207: LD_VAR 0 10
71211: LESS
71212: IFFALSE 71234
// begin result := i ;
71214: LD_ADDR_VAR 0 5
71218: PUSH
71219: LD_VAR 0 6
71223: ST_TO_ADDR
// distance := tmp ;
71224: LD_ADDR_VAR 0 10
71228: PUSH
71229: LD_VAR 0 9
71233: ST_TO_ADDR
// end ; end ;
71234: GO 71092
71236: POP
71237: POP
// end ;
71238: LD_VAR 0 5
71242: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71243: LD_INT 0
71245: PPUSH
71246: PPUSH
// if not driver or not IsInUnit ( driver ) then
71247: LD_VAR 0 1
71251: NOT
71252: IFTRUE 71266
71254: PUSH
71255: LD_VAR 0 1
71259: PPUSH
71260: CALL_OW 310
71264: NOT
71265: OR
71266: IFFALSE 71270
// exit ;
71268: GO 71360
// vehicle := IsInUnit ( driver ) ;
71270: LD_ADDR_VAR 0 3
71274: PUSH
71275: LD_VAR 0 1
71279: PPUSH
71280: CALL_OW 310
71284: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71285: LD_VAR 0 1
71289: PPUSH
71290: LD_STRING \
71292: PUSH
71293: LD_INT 0
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 0
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: PUSH
71320: LD_STRING E
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: LD_INT 0
71328: PUSH
71329: LD_VAR 0 3
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PPUSH
71356: CALL_OW 446
// end ;
71360: LD_VAR 0 2
71364: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71365: LD_INT 0
71367: PPUSH
71368: PPUSH
// if not driver or not IsInUnit ( driver ) then
71369: LD_VAR 0 1
71373: NOT
71374: IFTRUE 71388
71376: PUSH
71377: LD_VAR 0 1
71381: PPUSH
71382: CALL_OW 310
71386: NOT
71387: OR
71388: IFFALSE 71392
// exit ;
71390: GO 71482
// vehicle := IsInUnit ( driver ) ;
71392: LD_ADDR_VAR 0 3
71396: PUSH
71397: LD_VAR 0 1
71401: PPUSH
71402: CALL_OW 310
71406: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71407: LD_VAR 0 1
71411: PPUSH
71412: LD_STRING \
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: LD_INT 0
71426: PUSH
71427: LD_INT 0
71429: PUSH
71430: LD_INT 0
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: PUSH
71442: LD_STRING E
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: LD_VAR 0 3
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PPUSH
71478: CALL_OW 447
// end ;
71482: LD_VAR 0 2
71486: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71487: LD_INT 0
71489: PPUSH
71490: PPUSH
71491: PPUSH
// tmp := [ ] ;
71492: LD_ADDR_VAR 0 5
71496: PUSH
71497: EMPTY
71498: ST_TO_ADDR
// for i in units do
71499: LD_ADDR_VAR 0 4
71503: PUSH
71504: LD_VAR 0 1
71508: PUSH
71509: FOR_IN
71510: IFFALSE 71548
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71512: LD_ADDR_VAR 0 5
71516: PUSH
71517: LD_VAR 0 5
71521: PPUSH
71522: LD_VAR 0 5
71526: PUSH
71527: LD_INT 1
71529: PLUS
71530: PPUSH
71531: LD_VAR 0 4
71535: PPUSH
71536: CALL_OW 256
71540: PPUSH
71541: CALL_OW 2
71545: ST_TO_ADDR
71546: GO 71509
71548: POP
71549: POP
// if not tmp then
71550: LD_VAR 0 5
71554: NOT
71555: IFFALSE 71559
// exit ;
71557: GO 71607
// if asc then
71559: LD_VAR 0 2
71563: IFFALSE 71587
// result := SortListByListAsc ( units , tmp ) else
71565: LD_ADDR_VAR 0 3
71569: PUSH
71570: LD_VAR 0 1
71574: PPUSH
71575: LD_VAR 0 5
71579: PPUSH
71580: CALL_OW 76
71584: ST_TO_ADDR
71585: GO 71607
// result := SortListByListDesc ( units , tmp ) ;
71587: LD_ADDR_VAR 0 3
71591: PUSH
71592: LD_VAR 0 1
71596: PPUSH
71597: LD_VAR 0 5
71601: PPUSH
71602: CALL_OW 77
71606: ST_TO_ADDR
// end ;
71607: LD_VAR 0 3
71611: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71612: LD_INT 0
71614: PPUSH
71615: PPUSH
// task := GetTaskList ( mech ) ;
71616: LD_ADDR_VAR 0 4
71620: PUSH
71621: LD_VAR 0 1
71625: PPUSH
71626: CALL_OW 437
71630: ST_TO_ADDR
// if not task then
71631: LD_VAR 0 4
71635: NOT
71636: IFFALSE 71640
// exit ;
71638: GO 71684
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71640: LD_ADDR_VAR 0 3
71644: PUSH
71645: LD_VAR 0 4
71649: PUSH
71650: LD_INT 1
71652: ARRAY
71653: PUSH
71654: LD_INT 1
71656: ARRAY
71657: PUSH
71658: LD_STRING r
71660: EQUAL
71661: IFFALSE 71683
71663: PUSH
71664: LD_VAR 0 4
71668: PUSH
71669: LD_INT 1
71671: ARRAY
71672: PUSH
71673: LD_INT 4
71675: ARRAY
71676: PUSH
71677: LD_VAR 0 2
71681: EQUAL
71682: AND
71683: ST_TO_ADDR
// end ;
71684: LD_VAR 0 3
71688: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71689: LD_INT 0
71691: PPUSH
// SetDir ( unit , d ) ;
71692: LD_VAR 0 1
71696: PPUSH
71697: LD_VAR 0 4
71701: PPUSH
71702: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
71706: LD_ADDR_VAR 0 6
71710: PUSH
71711: LD_VAR 0 1
71715: PPUSH
71716: LD_VAR 0 2
71720: PPUSH
71721: LD_VAR 0 3
71725: PPUSH
71726: LD_VAR 0 5
71730: PPUSH
71731: CALL_OW 48
71735: ST_TO_ADDR
// end ;
71736: LD_VAR 0 6
71740: RET
// export function ToNaturalNumber ( number ) ; begin
71741: LD_INT 0
71743: PPUSH
// result := number div 1 ;
71744: LD_ADDR_VAR 0 2
71748: PUSH
71749: LD_VAR 0 1
71753: PUSH
71754: LD_INT 1
71756: DIV
71757: ST_TO_ADDR
// if number < 0 then
71758: LD_VAR 0 1
71762: PUSH
71763: LD_INT 0
71765: LESS
71766: IFFALSE 71776
// result := 0 ;
71768: LD_ADDR_VAR 0 2
71772: PUSH
71773: LD_INT 0
71775: ST_TO_ADDR
// end ;
71776: LD_VAR 0 2
71780: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
71781: LD_INT 0
71783: PPUSH
71784: PPUSH
71785: PPUSH
// if not buildings then
71786: LD_VAR 0 1
71790: NOT
71791: IFFALSE 71795
// exit ;
71793: GO 71910
// tmp := [ ] ;
71795: LD_ADDR_VAR 0 5
71799: PUSH
71800: EMPTY
71801: ST_TO_ADDR
// for b in buildings do
71802: LD_ADDR_VAR 0 4
71806: PUSH
71807: LD_VAR 0 1
71811: PUSH
71812: FOR_IN
71813: IFFALSE 71851
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
71815: LD_ADDR_VAR 0 5
71819: PUSH
71820: LD_VAR 0 5
71824: PPUSH
71825: LD_VAR 0 5
71829: PUSH
71830: LD_INT 1
71832: PLUS
71833: PPUSH
71834: LD_VAR 0 4
71838: PPUSH
71839: CALL_OW 266
71843: PPUSH
71844: CALL_OW 1
71848: ST_TO_ADDR
71849: GO 71812
71851: POP
71852: POP
// if not tmp then
71853: LD_VAR 0 5
71857: NOT
71858: IFFALSE 71862
// exit ;
71860: GO 71910
// if asc then
71862: LD_VAR 0 2
71866: IFFALSE 71890
// result := SortListByListAsc ( buildings , tmp ) else
71868: LD_ADDR_VAR 0 3
71872: PUSH
71873: LD_VAR 0 1
71877: PPUSH
71878: LD_VAR 0 5
71882: PPUSH
71883: CALL_OW 76
71887: ST_TO_ADDR
71888: GO 71910
// result := SortListByListDesc ( buildings , tmp ) ;
71890: LD_ADDR_VAR 0 3
71894: PUSH
71895: LD_VAR 0 1
71899: PPUSH
71900: LD_VAR 0 5
71904: PPUSH
71905: CALL_OW 77
71909: ST_TO_ADDR
// end ;
71910: LD_VAR 0 3
71914: RET
// export function SortByClass ( units , class ) ; var un ; begin
71915: LD_INT 0
71917: PPUSH
71918: PPUSH
// if not units or not class then
71919: LD_VAR 0 1
71923: NOT
71924: IFTRUE 71933
71926: PUSH
71927: LD_VAR 0 2
71931: NOT
71932: OR
71933: IFFALSE 71937
// exit ;
71935: GO 72032
// result := [ ] ;
71937: LD_ADDR_VAR 0 3
71941: PUSH
71942: EMPTY
71943: ST_TO_ADDR
// for un in units do
71944: LD_ADDR_VAR 0 4
71948: PUSH
71949: LD_VAR 0 1
71953: PUSH
71954: FOR_IN
71955: IFFALSE 72030
// if GetClass ( un ) = class then
71957: LD_VAR 0 4
71961: PPUSH
71962: CALL_OW 257
71966: PUSH
71967: LD_VAR 0 2
71971: EQUAL
71972: IFFALSE 71999
// result := Insert ( result , 1 , un ) else
71974: LD_ADDR_VAR 0 3
71978: PUSH
71979: LD_VAR 0 3
71983: PPUSH
71984: LD_INT 1
71986: PPUSH
71987: LD_VAR 0 4
71991: PPUSH
71992: CALL_OW 2
71996: ST_TO_ADDR
71997: GO 72028
// result := Replace ( result , result + 1 , un ) ;
71999: LD_ADDR_VAR 0 3
72003: PUSH
72004: LD_VAR 0 3
72008: PPUSH
72009: LD_VAR 0 3
72013: PUSH
72014: LD_INT 1
72016: PLUS
72017: PPUSH
72018: LD_VAR 0 4
72022: PPUSH
72023: CALL_OW 1
72027: ST_TO_ADDR
72028: GO 71954
72030: POP
72031: POP
// end ;
72032: LD_VAR 0 3
72036: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72037: LD_INT 0
72039: PPUSH
72040: PPUSH
72041: PPUSH
72042: PPUSH
72043: PPUSH
72044: PPUSH
72045: PPUSH
// result := [ ] ;
72046: LD_ADDR_VAR 0 4
72050: PUSH
72051: EMPTY
72052: ST_TO_ADDR
// if x - r < 0 then
72053: LD_VAR 0 1
72057: PUSH
72058: LD_VAR 0 3
72062: MINUS
72063: PUSH
72064: LD_INT 0
72066: LESS
72067: IFFALSE 72079
// min_x := 0 else
72069: LD_ADDR_VAR 0 8
72073: PUSH
72074: LD_INT 0
72076: ST_TO_ADDR
72077: GO 72095
// min_x := x - r ;
72079: LD_ADDR_VAR 0 8
72083: PUSH
72084: LD_VAR 0 1
72088: PUSH
72089: LD_VAR 0 3
72093: MINUS
72094: ST_TO_ADDR
// if y - r < 0 then
72095: LD_VAR 0 2
72099: PUSH
72100: LD_VAR 0 3
72104: MINUS
72105: PUSH
72106: LD_INT 0
72108: LESS
72109: IFFALSE 72121
// min_y := 0 else
72111: LD_ADDR_VAR 0 7
72115: PUSH
72116: LD_INT 0
72118: ST_TO_ADDR
72119: GO 72137
// min_y := y - r ;
72121: LD_ADDR_VAR 0 7
72125: PUSH
72126: LD_VAR 0 2
72130: PUSH
72131: LD_VAR 0 3
72135: MINUS
72136: ST_TO_ADDR
// max_x := x + r ;
72137: LD_ADDR_VAR 0 9
72141: PUSH
72142: LD_VAR 0 1
72146: PUSH
72147: LD_VAR 0 3
72151: PLUS
72152: ST_TO_ADDR
// max_y := y + r ;
72153: LD_ADDR_VAR 0 10
72157: PUSH
72158: LD_VAR 0 2
72162: PUSH
72163: LD_VAR 0 3
72167: PLUS
72168: ST_TO_ADDR
// for _x = min_x to max_x do
72169: LD_ADDR_VAR 0 5
72173: PUSH
72174: DOUBLE
72175: LD_VAR 0 8
72179: DEC
72180: ST_TO_ADDR
72181: LD_VAR 0 9
72185: PUSH
72186: FOR_TO
72187: IFFALSE 72288
// for _y = min_y to max_y do
72189: LD_ADDR_VAR 0 6
72193: PUSH
72194: DOUBLE
72195: LD_VAR 0 7
72199: DEC
72200: ST_TO_ADDR
72201: LD_VAR 0 10
72205: PUSH
72206: FOR_TO
72207: IFFALSE 72284
// begin if not ValidHex ( _x , _y ) then
72209: LD_VAR 0 5
72213: PPUSH
72214: LD_VAR 0 6
72218: PPUSH
72219: CALL_OW 488
72223: NOT
72224: IFFALSE 72228
// continue ;
72226: GO 72206
// if GetResourceTypeXY ( _x , _y ) then
72228: LD_VAR 0 5
72232: PPUSH
72233: LD_VAR 0 6
72237: PPUSH
72238: CALL_OW 283
72242: IFFALSE 72282
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72244: LD_ADDR_VAR 0 4
72248: PUSH
72249: LD_VAR 0 4
72253: PPUSH
72254: LD_VAR 0 4
72258: PUSH
72259: LD_INT 1
72261: PLUS
72262: PPUSH
72263: LD_VAR 0 5
72267: PUSH
72268: LD_VAR 0 6
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PPUSH
72277: CALL_OW 1
72281: ST_TO_ADDR
// end ;
72282: GO 72206
72284: POP
72285: POP
72286: GO 72186
72288: POP
72289: POP
// end ;
72290: LD_VAR 0 4
72294: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72295: LD_INT 0
72297: PPUSH
72298: PPUSH
72299: PPUSH
72300: PPUSH
72301: PPUSH
72302: PPUSH
72303: PPUSH
72304: PPUSH
// if not units then
72305: LD_VAR 0 1
72309: NOT
72310: IFFALSE 72314
// exit ;
72312: GO 72846
// result := UnitFilter ( units , [ f_ok ] ) ;
72314: LD_ADDR_VAR 0 3
72318: PUSH
72319: LD_VAR 0 1
72323: PPUSH
72324: LD_INT 50
72326: PUSH
72327: EMPTY
72328: LIST
72329: PPUSH
72330: CALL_OW 72
72334: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72335: LD_ADDR_VAR 0 8
72339: PUSH
72340: LD_VAR 0 1
72344: PUSH
72345: LD_INT 1
72347: ARRAY
72348: PPUSH
72349: CALL_OW 255
72353: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72354: LD_ADDR_VAR 0 10
72358: PUSH
72359: LD_INT 29
72361: PUSH
72362: LD_INT 91
72364: PUSH
72365: LD_INT 49
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: ST_TO_ADDR
// if not result then
72373: LD_VAR 0 3
72377: NOT
72378: IFFALSE 72382
// exit ;
72380: GO 72846
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72382: LD_ADDR_VAR 0 5
72386: PUSH
72387: LD_INT 81
72389: PUSH
72390: LD_VAR 0 8
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PPUSH
72399: CALL_OW 69
72403: ST_TO_ADDR
// for i in result do
72404: LD_ADDR_VAR 0 4
72408: PUSH
72409: LD_VAR 0 3
72413: PUSH
72414: FOR_IN
72415: IFFALSE 72844
// begin tag := GetTag ( i ) + 1 ;
72417: LD_ADDR_VAR 0 9
72421: PUSH
72422: LD_VAR 0 4
72426: PPUSH
72427: CALL_OW 110
72431: PUSH
72432: LD_INT 1
72434: PLUS
72435: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72436: LD_ADDR_VAR 0 7
72440: PUSH
72441: LD_VAR 0 4
72445: PPUSH
72446: CALL_OW 250
72450: PPUSH
72451: LD_VAR 0 4
72455: PPUSH
72456: CALL_OW 251
72460: PPUSH
72461: LD_INT 4
72463: PPUSH
72464: CALL 72037 0 3
72468: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72469: LD_VAR 0 4
72473: PPUSH
72474: CALL_OW 247
72478: PUSH
72479: LD_INT 2
72481: EQUAL
72482: IFFALSE 72494
72484: PUSH
72485: LD_VAR 0 7
72489: PUSH
72490: LD_INT 2
72492: GREATER
72493: AND
72494: IFFALSE 72514
72496: PUSH
72497: LD_VAR 0 4
72501: PPUSH
72502: CALL_OW 264
72506: PUSH
72507: LD_VAR 0 10
72511: IN
72512: NOT
72513: AND
72514: IFFALSE 72553
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72516: LD_VAR 0 4
72520: PPUSH
72521: LD_VAR 0 7
72525: PUSH
72526: LD_INT 1
72528: ARRAY
72529: PUSH
72530: LD_INT 1
72532: ARRAY
72533: PPUSH
72534: LD_VAR 0 7
72538: PUSH
72539: LD_INT 1
72541: ARRAY
72542: PUSH
72543: LD_INT 2
72545: ARRAY
72546: PPUSH
72547: CALL_OW 116
72551: GO 72842
// if path > tag then
72553: LD_VAR 0 2
72557: PUSH
72558: LD_VAR 0 9
72562: GREATER
72563: IFFALSE 72771
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72565: LD_ADDR_VAR 0 6
72569: PUSH
72570: LD_VAR 0 5
72574: PPUSH
72575: LD_INT 91
72577: PUSH
72578: LD_VAR 0 4
72582: PUSH
72583: LD_INT 8
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: PPUSH
72591: CALL_OW 72
72595: ST_TO_ADDR
// if nearEnemy then
72596: LD_VAR 0 6
72600: IFFALSE 72669
// begin if GetWeapon ( i ) = ru_time_lapser then
72602: LD_VAR 0 4
72606: PPUSH
72607: CALL_OW 264
72611: PUSH
72612: LD_INT 49
72614: EQUAL
72615: IFFALSE 72643
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72617: LD_VAR 0 4
72621: PPUSH
72622: LD_VAR 0 6
72626: PPUSH
72627: LD_VAR 0 4
72631: PPUSH
72632: CALL_OW 74
72636: PPUSH
72637: CALL_OW 112
72641: GO 72667
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72643: LD_VAR 0 4
72647: PPUSH
72648: LD_VAR 0 6
72652: PPUSH
72653: LD_VAR 0 4
72657: PPUSH
72658: CALL_OW 74
72662: PPUSH
72663: CALL 73927 0 2
// end else
72667: GO 72769
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72669: LD_VAR 0 4
72673: PPUSH
72674: LD_VAR 0 2
72678: PUSH
72679: LD_VAR 0 9
72683: ARRAY
72684: PUSH
72685: LD_INT 1
72687: ARRAY
72688: PPUSH
72689: LD_VAR 0 2
72693: PUSH
72694: LD_VAR 0 9
72698: ARRAY
72699: PUSH
72700: LD_INT 2
72702: ARRAY
72703: PPUSH
72704: CALL_OW 297
72708: PUSH
72709: LD_INT 6
72711: GREATER
72712: IFFALSE 72755
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72714: LD_VAR 0 4
72718: PPUSH
72719: LD_VAR 0 2
72723: PUSH
72724: LD_VAR 0 9
72728: ARRAY
72729: PUSH
72730: LD_INT 1
72732: ARRAY
72733: PPUSH
72734: LD_VAR 0 2
72738: PUSH
72739: LD_VAR 0 9
72743: ARRAY
72744: PUSH
72745: LD_INT 2
72747: ARRAY
72748: PPUSH
72749: CALL_OW 114
72753: GO 72769
// SetTag ( i , tag ) ;
72755: LD_VAR 0 4
72759: PPUSH
72760: LD_VAR 0 9
72764: PPUSH
72765: CALL_OW 109
// end else
72769: GO 72842
// if enemy then
72771: LD_VAR 0 5
72775: IFFALSE 72842
// begin if GetWeapon ( i ) = ru_time_lapser then
72777: LD_VAR 0 4
72781: PPUSH
72782: CALL_OW 264
72786: PUSH
72787: LD_INT 49
72789: EQUAL
72790: IFFALSE 72818
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72792: LD_VAR 0 4
72796: PPUSH
72797: LD_VAR 0 5
72801: PPUSH
72802: LD_VAR 0 4
72806: PPUSH
72807: CALL_OW 74
72811: PPUSH
72812: CALL_OW 112
72816: GO 72842
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72818: LD_VAR 0 4
72822: PPUSH
72823: LD_VAR 0 5
72827: PPUSH
72828: LD_VAR 0 4
72832: PPUSH
72833: CALL_OW 74
72837: PPUSH
72838: CALL 73927 0 2
// end ; end ;
72842: GO 72414
72844: POP
72845: POP
// end ;
72846: LD_VAR 0 3
72850: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72851: LD_INT 0
72853: PPUSH
72854: PPUSH
72855: PPUSH
// if not unit or IsInUnit ( unit ) then
72856: LD_VAR 0 1
72860: NOT
72861: IFTRUE 72874
72863: PUSH
72864: LD_VAR 0 1
72868: PPUSH
72869: CALL_OW 310
72873: OR
72874: IFFALSE 72878
// exit ;
72876: GO 72969
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72878: LD_ADDR_VAR 0 4
72882: PUSH
72883: LD_VAR 0 1
72887: PPUSH
72888: CALL_OW 250
72892: PPUSH
72893: LD_VAR 0 2
72897: PPUSH
72898: LD_INT 1
72900: PPUSH
72901: CALL_OW 272
72905: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72906: LD_ADDR_VAR 0 5
72910: PUSH
72911: LD_VAR 0 1
72915: PPUSH
72916: CALL_OW 251
72920: PPUSH
72921: LD_VAR 0 2
72925: PPUSH
72926: LD_INT 1
72928: PPUSH
72929: CALL_OW 273
72933: ST_TO_ADDR
// if ValidHex ( x , y ) then
72934: LD_VAR 0 4
72938: PPUSH
72939: LD_VAR 0 5
72943: PPUSH
72944: CALL_OW 488
72948: IFFALSE 72969
// ComTurnXY ( unit , x , y ) ;
72950: LD_VAR 0 1
72954: PPUSH
72955: LD_VAR 0 4
72959: PPUSH
72960: LD_VAR 0 5
72964: PPUSH
72965: CALL_OW 118
// end ;
72969: LD_VAR 0 3
72973: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72974: LD_INT 0
72976: PPUSH
72977: PPUSH
// result := false ;
72978: LD_ADDR_VAR 0 3
72982: PUSH
72983: LD_INT 0
72985: ST_TO_ADDR
// if not units then
72986: LD_VAR 0 2
72990: NOT
72991: IFFALSE 72995
// exit ;
72993: GO 73040
// for i in units do
72995: LD_ADDR_VAR 0 4
72999: PUSH
73000: LD_VAR 0 2
73004: PUSH
73005: FOR_IN
73006: IFFALSE 73038
// if See ( side , i ) then
73008: LD_VAR 0 1
73012: PPUSH
73013: LD_VAR 0 4
73017: PPUSH
73018: CALL_OW 292
73022: IFFALSE 73036
// begin result := true ;
73024: LD_ADDR_VAR 0 3
73028: PUSH
73029: LD_INT 1
73031: ST_TO_ADDR
// exit ;
73032: POP
73033: POP
73034: GO 73040
// end ;
73036: GO 73005
73038: POP
73039: POP
// end ;
73040: LD_VAR 0 3
73044: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73045: LD_INT 0
73047: PPUSH
73048: PPUSH
73049: PPUSH
73050: PPUSH
// if not unit or not points then
73051: LD_VAR 0 1
73055: NOT
73056: IFTRUE 73065
73058: PUSH
73059: LD_VAR 0 2
73063: NOT
73064: OR
73065: IFFALSE 73069
// exit ;
73067: GO 73159
// dist := 99999 ;
73069: LD_ADDR_VAR 0 5
73073: PUSH
73074: LD_INT 99999
73076: ST_TO_ADDR
// for i in points do
73077: LD_ADDR_VAR 0 4
73081: PUSH
73082: LD_VAR 0 2
73086: PUSH
73087: FOR_IN
73088: IFFALSE 73157
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73090: LD_ADDR_VAR 0 6
73094: PUSH
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_VAR 0 4
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: PPUSH
73109: LD_VAR 0 4
73113: PUSH
73114: LD_INT 2
73116: ARRAY
73117: PPUSH
73118: CALL_OW 297
73122: ST_TO_ADDR
// if tmpDist < dist then
73123: LD_VAR 0 6
73127: PUSH
73128: LD_VAR 0 5
73132: LESS
73133: IFFALSE 73155
// begin result := i ;
73135: LD_ADDR_VAR 0 3
73139: PUSH
73140: LD_VAR 0 4
73144: ST_TO_ADDR
// dist := tmpDist ;
73145: LD_ADDR_VAR 0 5
73149: PUSH
73150: LD_VAR 0 6
73154: ST_TO_ADDR
// end ; end ;
73155: GO 73087
73157: POP
73158: POP
// end ;
73159: LD_VAR 0 3
73163: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73164: LD_INT 0
73166: PPUSH
// uc_side := side ;
73167: LD_ADDR_OWVAR 20
73171: PUSH
73172: LD_VAR 0 1
73176: ST_TO_ADDR
// uc_nation := 3 ;
73177: LD_ADDR_OWVAR 21
73181: PUSH
73182: LD_INT 3
73184: ST_TO_ADDR
// vc_chassis := 25 ;
73185: LD_ADDR_OWVAR 37
73189: PUSH
73190: LD_INT 25
73192: ST_TO_ADDR
// vc_engine := engine_siberite ;
73193: LD_ADDR_OWVAR 39
73197: PUSH
73198: LD_INT 3
73200: ST_TO_ADDR
// vc_control := control_computer ;
73201: LD_ADDR_OWVAR 38
73205: PUSH
73206: LD_INT 3
73208: ST_TO_ADDR
// vc_weapon := 59 ;
73209: LD_ADDR_OWVAR 40
73213: PUSH
73214: LD_INT 59
73216: ST_TO_ADDR
// result := CreateVehicle ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: CALL_OW 45
73226: ST_TO_ADDR
// SetDir ( result , d ) ;
73227: LD_VAR 0 5
73231: PPUSH
73232: LD_VAR 0 4
73236: PPUSH
73237: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73241: LD_VAR 0 5
73245: PPUSH
73246: LD_VAR 0 2
73250: PPUSH
73251: LD_VAR 0 3
73255: PPUSH
73256: LD_INT 0
73258: PPUSH
73259: CALL_OW 48
// end ;
73263: LD_VAR 0 5
73267: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73268: LD_INT 0
73270: PPUSH
73271: PPUSH
73272: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73273: LD_ADDR_VAR 0 2
73277: PUSH
73278: LD_INT 0
73280: PUSH
73281: LD_INT 0
73283: PUSH
73284: LD_INT 0
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73296: LD_VAR 0 1
73300: NOT
73301: IFTRUE 73334
73303: PUSH
73304: LD_VAR 0 1
73308: PPUSH
73309: CALL_OW 264
73313: PUSH
73314: LD_INT 12
73316: PUSH
73317: LD_INT 51
73319: PUSH
73320: LD_INT 32
73322: PUSH
73323: LD_INT 89
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: IN
73332: NOT
73333: OR
73334: IFFALSE 73338
// exit ;
73336: GO 73436
// for i := 1 to 3 do
73338: LD_ADDR_VAR 0 3
73342: PUSH
73343: DOUBLE
73344: LD_INT 1
73346: DEC
73347: ST_TO_ADDR
73348: LD_INT 3
73350: PUSH
73351: FOR_TO
73352: IFFALSE 73434
// begin tmp := GetCargo ( cargo , i ) ;
73354: LD_ADDR_VAR 0 4
73358: PUSH
73359: LD_VAR 0 1
73363: PPUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: CALL_OW 289
73373: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73374: LD_ADDR_VAR 0 2
73378: PUSH
73379: LD_VAR 0 2
73383: PPUSH
73384: LD_VAR 0 3
73388: PPUSH
73389: LD_VAR 0 4
73393: PPUSH
73394: CALL_OW 1
73398: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73399: LD_ADDR_VAR 0 2
73403: PUSH
73404: LD_VAR 0 2
73408: PPUSH
73409: LD_INT 4
73411: PPUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 4
73419: ARRAY
73420: PUSH
73421: LD_VAR 0 4
73425: PLUS
73426: PPUSH
73427: CALL_OW 1
73431: ST_TO_ADDR
// end ;
73432: GO 73351
73434: POP
73435: POP
// end ;
73436: LD_VAR 0 2
73440: RET
// export function Length ( array ) ; begin
73441: LD_INT 0
73443: PPUSH
// result := array + 0 ;
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: LD_VAR 0 1
73453: PUSH
73454: LD_INT 0
73456: PLUS
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 2
73462: RET
// export function PrepareArray ( array ) ; begin
73463: LD_INT 0
73465: PPUSH
// result := array diff 0 ;
73466: LD_ADDR_VAR 0 2
73470: PUSH
73471: LD_VAR 0 1
73475: PUSH
73476: LD_INT 0
73478: DIFF
73479: ST_TO_ADDR
// if not result [ 1 ] then
73480: LD_VAR 0 2
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: NOT
73489: IFFALSE 73509
// result := Delete ( result , 1 ) ;
73491: LD_ADDR_VAR 0 2
73495: PUSH
73496: LD_VAR 0 2
73500: PPUSH
73501: LD_INT 1
73503: PPUSH
73504: CALL_OW 3
73508: ST_TO_ADDR
// end ;
73509: LD_VAR 0 2
73513: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73514: LD_INT 0
73516: PPUSH
73517: PPUSH
73518: PPUSH
73519: PPUSH
// sibRocketRange := 25 ;
73520: LD_ADDR_VAR 0 6
73524: PUSH
73525: LD_INT 25
73527: ST_TO_ADDR
// result := false ;
73528: LD_ADDR_VAR 0 4
73532: PUSH
73533: LD_INT 0
73535: ST_TO_ADDR
// for i := 0 to 5 do
73536: LD_ADDR_VAR 0 5
73540: PUSH
73541: DOUBLE
73542: LD_INT 0
73544: DEC
73545: ST_TO_ADDR
73546: LD_INT 5
73548: PUSH
73549: FOR_TO
73550: IFFALSE 73617
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73552: LD_VAR 0 1
73556: PPUSH
73557: LD_VAR 0 5
73561: PPUSH
73562: LD_VAR 0 6
73566: PPUSH
73567: CALL_OW 272
73571: PPUSH
73572: LD_VAR 0 2
73576: PPUSH
73577: LD_VAR 0 5
73581: PPUSH
73582: LD_VAR 0 6
73586: PPUSH
73587: CALL_OW 273
73591: PPUSH
73592: LD_VAR 0 3
73596: PPUSH
73597: CALL_OW 309
73601: IFFALSE 73615
// begin result := true ;
73603: LD_ADDR_VAR 0 4
73607: PUSH
73608: LD_INT 1
73610: ST_TO_ADDR
// exit ;
73611: POP
73612: POP
73613: GO 73619
// end ;
73615: GO 73549
73617: POP
73618: POP
// end ;
73619: LD_VAR 0 4
73623: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73624: LD_INT 0
73626: PPUSH
73627: PPUSH
73628: PPUSH
// if btype = b_depot then
73629: LD_VAR 0 2
73633: PUSH
73634: LD_INT 0
73636: EQUAL
73637: IFFALSE 73649
// begin result := true ;
73639: LD_ADDR_VAR 0 3
73643: PUSH
73644: LD_INT 1
73646: ST_TO_ADDR
// exit ;
73647: GO 73769
// end ; pom := GetBase ( depot ) ;
73649: LD_ADDR_VAR 0 4
73653: PUSH
73654: LD_VAR 0 1
73658: PPUSH
73659: CALL_OW 274
73663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73664: LD_ADDR_VAR 0 5
73668: PUSH
73669: LD_VAR 0 2
73673: PPUSH
73674: LD_VAR 0 1
73678: PPUSH
73679: CALL_OW 248
73683: PPUSH
73684: CALL_OW 450
73688: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73689: LD_ADDR_VAR 0 3
73693: PUSH
73694: LD_VAR 0 4
73698: PPUSH
73699: LD_INT 1
73701: PPUSH
73702: CALL_OW 275
73706: PUSH
73707: LD_VAR 0 5
73711: PUSH
73712: LD_INT 1
73714: ARRAY
73715: GREATEREQUAL
73716: IFFALSE 73742
73718: PUSH
73719: LD_VAR 0 4
73723: PPUSH
73724: LD_INT 2
73726: PPUSH
73727: CALL_OW 275
73731: PUSH
73732: LD_VAR 0 5
73736: PUSH
73737: LD_INT 2
73739: ARRAY
73740: GREATEREQUAL
73741: AND
73742: IFFALSE 73768
73744: PUSH
73745: LD_VAR 0 4
73749: PPUSH
73750: LD_INT 3
73752: PPUSH
73753: CALL_OW 275
73757: PUSH
73758: LD_VAR 0 5
73762: PUSH
73763: LD_INT 3
73765: ARRAY
73766: GREATEREQUAL
73767: AND
73768: ST_TO_ADDR
// end ;
73769: LD_VAR 0 3
73773: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73774: LD_INT 0
73776: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73777: LD_VAR 0 1
73781: PPUSH
73782: LD_VAR 0 2
73786: PPUSH
73787: LD_INT 0
73789: PPUSH
73790: LD_INT 0
73792: PPUSH
73793: LD_INT 1
73795: PPUSH
73796: LD_INT 0
73798: PPUSH
73799: CALL_OW 587
// end ;
73803: LD_VAR 0 3
73807: RET
// export function CenterOnNow ( unit ) ; begin
73808: LD_INT 0
73810: PPUSH
// result := IsInUnit ( unit ) ;
73811: LD_ADDR_VAR 0 2
73815: PUSH
73816: LD_VAR 0 1
73820: PPUSH
73821: CALL_OW 310
73825: ST_TO_ADDR
// if not result then
73826: LD_VAR 0 2
73830: NOT
73831: IFFALSE 73843
// result := unit ;
73833: LD_ADDR_VAR 0 2
73837: PUSH
73838: LD_VAR 0 1
73842: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73843: LD_VAR 0 1
73847: PPUSH
73848: CALL_OW 87
// end ;
73852: LD_VAR 0 2
73856: RET
// export function ComMoveHex ( unit , hex ) ; begin
73857: LD_INT 0
73859: PPUSH
// if not hex then
73860: LD_VAR 0 2
73864: NOT
73865: IFFALSE 73869
// exit ;
73867: GO 73922
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73869: LD_VAR 0 2
73873: PUSH
73874: LD_INT 1
73876: ARRAY
73877: PPUSH
73878: LD_VAR 0 2
73882: PUSH
73883: LD_INT 2
73885: ARRAY
73886: PPUSH
73887: CALL_OW 428
73891: IFFALSE 73895
// exit ;
73893: GO 73922
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73895: LD_VAR 0 1
73899: PPUSH
73900: LD_VAR 0 2
73904: PUSH
73905: LD_INT 1
73907: ARRAY
73908: PPUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_INT 2
73916: ARRAY
73917: PPUSH
73918: CALL_OW 111
// end ;
73922: LD_VAR 0 3
73926: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73927: LD_INT 0
73929: PPUSH
73930: PPUSH
73931: PPUSH
// if not unit or not enemy then
73932: LD_VAR 0 1
73936: NOT
73937: IFTRUE 73946
73939: PUSH
73940: LD_VAR 0 2
73944: NOT
73945: OR
73946: IFFALSE 73950
// exit ;
73948: GO 74076
// x := GetX ( enemy ) ;
73950: LD_ADDR_VAR 0 4
73954: PUSH
73955: LD_VAR 0 2
73959: PPUSH
73960: CALL_OW 250
73964: ST_TO_ADDR
// y := GetY ( enemy ) ;
73965: LD_ADDR_VAR 0 5
73969: PUSH
73970: LD_VAR 0 2
73974: PPUSH
73975: CALL_OW 251
73979: ST_TO_ADDR
// if ValidHex ( x , y ) then
73980: LD_VAR 0 4
73984: PPUSH
73985: LD_VAR 0 5
73989: PPUSH
73990: CALL_OW 488
73994: IFFALSE 74076
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73996: LD_VAR 0 2
74000: PPUSH
74001: CALL_OW 247
74005: PUSH
74006: LD_INT 3
74008: PUSH
74009: LD_INT 2
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: IN
74016: IFTRUE 74039
74018: PUSH
74019: LD_VAR 0 1
74023: PPUSH
74024: CALL_OW 255
74028: PPUSH
74029: LD_VAR 0 2
74033: PPUSH
74034: CALL_OW 292
74038: OR
74039: IFFALSE 74057
// ComAttackUnit ( unit , enemy ) else
74041: LD_VAR 0 1
74045: PPUSH
74046: LD_VAR 0 2
74050: PPUSH
74051: CALL_OW 115
74055: GO 74076
// ComAgressiveMove ( unit , x , y ) ;
74057: LD_VAR 0 1
74061: PPUSH
74062: LD_VAR 0 4
74066: PPUSH
74067: LD_VAR 0 5
74071: PPUSH
74072: CALL_OW 114
// end ;
74076: LD_VAR 0 3
74080: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74081: LD_INT 0
74083: PPUSH
74084: PPUSH
74085: PPUSH
// list := AreaToList ( area , 0 ) ;
74086: LD_ADDR_VAR 0 5
74090: PUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_INT 0
74098: PPUSH
74099: CALL_OW 517
74103: ST_TO_ADDR
// if not list then
74104: LD_VAR 0 5
74108: NOT
74109: IFFALSE 74113
// exit ;
74111: GO 74243
// if all then
74113: LD_VAR 0 2
74117: IFFALSE 74205
// begin for i := 1 to list [ 1 ] do
74119: LD_ADDR_VAR 0 4
74123: PUSH
74124: DOUBLE
74125: LD_INT 1
74127: DEC
74128: ST_TO_ADDR
74129: LD_VAR 0 5
74133: PUSH
74134: LD_INT 1
74136: ARRAY
74137: PUSH
74138: FOR_TO
74139: IFFALSE 74201
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74141: LD_ADDR_VAR 0 3
74145: PUSH
74146: LD_VAR 0 3
74150: PPUSH
74151: LD_VAR 0 3
74155: PUSH
74156: LD_INT 1
74158: PLUS
74159: PPUSH
74160: LD_VAR 0 5
74164: PUSH
74165: LD_INT 1
74167: ARRAY
74168: PUSH
74169: LD_VAR 0 4
74173: ARRAY
74174: PUSH
74175: LD_VAR 0 5
74179: PUSH
74180: LD_INT 2
74182: ARRAY
74183: PUSH
74184: LD_VAR 0 4
74188: ARRAY
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PPUSH
74194: CALL_OW 1
74198: ST_TO_ADDR
74199: GO 74138
74201: POP
74202: POP
// exit ;
74203: GO 74243
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74205: LD_ADDR_VAR 0 3
74209: PUSH
74210: LD_VAR 0 5
74214: PUSH
74215: LD_INT 1
74217: ARRAY
74218: PUSH
74219: LD_INT 1
74221: ARRAY
74222: PUSH
74223: LD_VAR 0 5
74227: PUSH
74228: LD_INT 2
74230: ARRAY
74231: PUSH
74232: LD_INT 1
74234: ARRAY
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: EMPTY
74241: LIST
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 3
74247: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74248: LD_INT 0
74250: PPUSH
74251: PPUSH
// list := AreaToList ( area , 0 ) ;
74252: LD_ADDR_VAR 0 4
74256: PUSH
74257: LD_VAR 0 1
74261: PPUSH
74262: LD_INT 0
74264: PPUSH
74265: CALL_OW 517
74269: ST_TO_ADDR
// if not list then
74270: LD_VAR 0 4
74274: NOT
74275: IFFALSE 74279
// exit ;
74277: GO 74320
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74279: LD_ADDR_VAR 0 3
74283: PUSH
74284: LD_VAR 0 4
74288: PUSH
74289: LD_INT 1
74291: ARRAY
74292: PUSH
74293: LD_INT 1
74295: ARRAY
74296: PUSH
74297: LD_VAR 0 4
74301: PUSH
74302: LD_INT 2
74304: ARRAY
74305: PUSH
74306: LD_INT 1
74308: ARRAY
74309: PUSH
74310: LD_VAR 0 2
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: LIST
74319: ST_TO_ADDR
// end ;
74320: LD_VAR 0 3
74324: RET
// export function First ( array ) ; begin
74325: LD_INT 0
74327: PPUSH
// if not array then
74328: LD_VAR 0 1
74332: NOT
74333: IFFALSE 74337
// exit ;
74335: GO 74351
// result := array [ 1 ] ;
74337: LD_ADDR_VAR 0 2
74341: PUSH
74342: LD_VAR 0 1
74346: PUSH
74347: LD_INT 1
74349: ARRAY
74350: ST_TO_ADDR
// end ;
74351: LD_VAR 0 2
74355: RET
// export function Last ( array ) ; begin
74356: LD_INT 0
74358: PPUSH
// if not array then
74359: LD_VAR 0 1
74363: NOT
74364: IFFALSE 74368
// exit ;
74366: GO 74384
// result := array [ array ] ;
74368: LD_ADDR_VAR 0 2
74372: PUSH
74373: LD_VAR 0 1
74377: PUSH
74378: LD_VAR 0 1
74382: ARRAY
74383: ST_TO_ADDR
// end ;
74384: LD_VAR 0 2
74388: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74389: LD_INT 0
74391: PPUSH
74392: PPUSH
// result := [ ] ;
74393: LD_ADDR_VAR 0 5
74397: PUSH
74398: EMPTY
74399: ST_TO_ADDR
// if not array then
74400: LD_VAR 0 1
74404: NOT
74405: IFFALSE 74409
// exit ;
74407: GO 74521
// for i := 1 to array do
74409: LD_ADDR_VAR 0 6
74413: PUSH
74414: DOUBLE
74415: LD_INT 1
74417: DEC
74418: ST_TO_ADDR
74419: LD_VAR 0 1
74423: PUSH
74424: FOR_TO
74425: IFFALSE 74519
// if array [ i ] [ index ] = value then
74427: LD_VAR 0 1
74431: PUSH
74432: LD_VAR 0 6
74436: ARRAY
74437: PUSH
74438: LD_VAR 0 2
74442: ARRAY
74443: PUSH
74444: LD_VAR 0 3
74448: EQUAL
74449: IFFALSE 74517
// begin if indexColumn then
74451: LD_VAR 0 4
74455: IFFALSE 74491
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74457: LD_ADDR_VAR 0 5
74461: PUSH
74462: LD_VAR 0 5
74466: PPUSH
74467: LD_VAR 0 1
74471: PUSH
74472: LD_VAR 0 6
74476: ARRAY
74477: PUSH
74478: LD_VAR 0 4
74482: ARRAY
74483: PPUSH
74484: CALL 69529 0 2
74488: ST_TO_ADDR
74489: GO 74517
// result := Join ( result , array [ i ] ) ;
74491: LD_ADDR_VAR 0 5
74495: PUSH
74496: LD_VAR 0 5
74500: PPUSH
74501: LD_VAR 0 1
74505: PUSH
74506: LD_VAR 0 6
74510: ARRAY
74511: PPUSH
74512: CALL 69529 0 2
74516: ST_TO_ADDR
// end ;
74517: GO 74424
74519: POP
74520: POP
// end ;
74521: LD_VAR 0 5
74525: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74526: LD_INT 0
74528: PPUSH
// if not vehicles or not parkingPoint then
74529: LD_VAR 0 1
74533: NOT
74534: IFTRUE 74543
74536: PUSH
74537: LD_VAR 0 2
74541: NOT
74542: OR
74543: IFFALSE 74547
// exit ;
74545: GO 74645
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74547: LD_ADDR_VAR 0 1
74551: PUSH
74552: LD_VAR 0 1
74556: PPUSH
74557: LD_INT 50
74559: PUSH
74560: EMPTY
74561: LIST
74562: PUSH
74563: LD_INT 3
74565: PUSH
74566: LD_INT 92
74568: PUSH
74569: LD_VAR 0 2
74573: PUSH
74574: LD_INT 1
74576: ARRAY
74577: PUSH
74578: LD_VAR 0 2
74582: PUSH
74583: LD_INT 2
74585: ARRAY
74586: PUSH
74587: LD_INT 8
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PPUSH
74604: CALL_OW 72
74608: ST_TO_ADDR
// if not vehicles then
74609: LD_VAR 0 1
74613: NOT
74614: IFFALSE 74618
// exit ;
74616: GO 74645
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74618: LD_VAR 0 1
74622: PPUSH
74623: LD_VAR 0 2
74627: PUSH
74628: LD_INT 1
74630: ARRAY
74631: PPUSH
74632: LD_VAR 0 2
74636: PUSH
74637: LD_INT 2
74639: ARRAY
74640: PPUSH
74641: CALL_OW 111
// end ;
74645: LD_VAR 0 3
74649: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74650: LD_INT 0
74652: PPUSH
74653: PPUSH
74654: PPUSH
// if not side or not area then
74655: LD_VAR 0 1
74659: NOT
74660: IFTRUE 74669
74662: PUSH
74663: LD_VAR 0 2
74667: NOT
74668: OR
74669: IFFALSE 74673
// exit ;
74671: GO 74792
// tmp := AreaToList ( area , 0 ) ;
74673: LD_ADDR_VAR 0 5
74677: PUSH
74678: LD_VAR 0 2
74682: PPUSH
74683: LD_INT 0
74685: PPUSH
74686: CALL_OW 517
74690: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74691: LD_ADDR_VAR 0 4
74695: PUSH
74696: DOUBLE
74697: LD_INT 1
74699: DEC
74700: ST_TO_ADDR
74701: LD_VAR 0 5
74705: PUSH
74706: LD_INT 1
74708: ARRAY
74709: PUSH
74710: FOR_TO
74711: IFFALSE 74790
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74713: LD_VAR 0 5
74717: PUSH
74718: LD_INT 1
74720: ARRAY
74721: PUSH
74722: LD_VAR 0 4
74726: ARRAY
74727: PPUSH
74728: LD_VAR 0 5
74732: PUSH
74733: LD_INT 2
74735: ARRAY
74736: PUSH
74737: LD_VAR 0 4
74741: ARRAY
74742: PPUSH
74743: CALL_OW 351
74747: IFFALSE 74788
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74749: LD_VAR 0 5
74753: PUSH
74754: LD_INT 1
74756: ARRAY
74757: PUSH
74758: LD_VAR 0 4
74762: ARRAY
74763: PPUSH
74764: LD_VAR 0 5
74768: PUSH
74769: LD_INT 2
74771: ARRAY
74772: PUSH
74773: LD_VAR 0 4
74777: ARRAY
74778: PPUSH
74779: LD_VAR 0 1
74783: PPUSH
74784: CALL_OW 244
// end ;
74788: GO 74710
74790: POP
74791: POP
// end ;
74792: LD_VAR 0 3
74796: RET
// export function UniqueArray ( array ) ; var i ; begin
74797: LD_INT 0
74799: PPUSH
74800: PPUSH
// result := [ ] ;
74801: LD_ADDR_VAR 0 2
74805: PUSH
74806: EMPTY
74807: ST_TO_ADDR
// if not array then
74808: LD_VAR 0 1
74812: NOT
74813: IFFALSE 74817
// exit ;
74815: GO 74878
// for i := 1 to array do
74817: LD_ADDR_VAR 0 3
74821: PUSH
74822: DOUBLE
74823: LD_INT 1
74825: DEC
74826: ST_TO_ADDR
74827: LD_VAR 0 1
74831: PUSH
74832: FOR_TO
74833: IFFALSE 74876
// if not array [ i ] in result then
74835: LD_VAR 0 1
74839: PUSH
74840: LD_VAR 0 3
74844: ARRAY
74845: PUSH
74846: LD_VAR 0 2
74850: IN
74851: NOT
74852: IFFALSE 74874
// result := Join ( result , i ) ;
74854: LD_ADDR_VAR 0 2
74858: PUSH
74859: LD_VAR 0 2
74863: PPUSH
74864: LD_VAR 0 3
74868: PPUSH
74869: CALL 69529 0 2
74873: ST_TO_ADDR
74874: GO 74832
74876: POP
74877: POP
// end ; end_of_file
74878: LD_VAR 0 2
74882: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74883: LD_VAR 0 1
74887: PUSH
74888: LD_INT 200
74890: DOUBLE
74891: GREATEREQUAL
74892: IFFALSE 74900
74894: LD_INT 299
74896: DOUBLE
74897: LESSEQUAL
74898: IFTRUE 74902
74900: GO 74934
74902: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74903: LD_VAR 0 1
74907: PPUSH
74908: LD_VAR 0 2
74912: PPUSH
74913: LD_VAR 0 3
74917: PPUSH
74918: LD_VAR 0 4
74922: PPUSH
74923: LD_VAR 0 5
74927: PPUSH
74928: CALL 25839 0 5
74932: GO 75011
74934: LD_INT 300
74936: DOUBLE
74937: GREATEREQUAL
74938: IFFALSE 74946
74940: LD_INT 399
74942: DOUBLE
74943: LESSEQUAL
74944: IFTRUE 74948
74946: GO 75010
74948: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74949: LD_VAR 0 1
74953: PPUSH
74954: LD_VAR 0 2
74958: PPUSH
74959: LD_VAR 0 3
74963: PPUSH
74964: LD_VAR 0 4
74968: PPUSH
74969: LD_VAR 0 5
74973: PPUSH
74974: LD_VAR 0 6
74978: PPUSH
74979: LD_VAR 0 7
74983: PPUSH
74984: LD_VAR 0 8
74988: PPUSH
74989: LD_VAR 0 9
74993: PPUSH
74994: LD_VAR 0 10
74998: PPUSH
74999: LD_VAR 0 11
75003: PPUSH
75004: CALL 21723 0 11
75008: GO 75011
75010: POP
// end ;
75011: PPOPN 11
75013: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75014: LD_VAR 0 1
75018: PPUSH
75019: LD_VAR 0 2
75023: PPUSH
75024: LD_VAR 0 3
75028: PPUSH
75029: LD_VAR 0 4
75033: PPUSH
75034: LD_VAR 0 5
75038: PPUSH
75039: CALL 25220 0 5
// end ; end_of_file
75043: PPOPN 5
75045: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75046: LD_VAR 0 1
75050: PPUSH
75051: LD_VAR 0 2
75055: PPUSH
75056: LD_VAR 0 3
75060: PPUSH
75061: LD_VAR 0 4
75065: PPUSH
75066: LD_VAR 0 5
75070: PPUSH
75071: LD_VAR 0 6
75075: PPUSH
75076: CALL 9263 0 6
// end ;
75080: PPOPN 6
75082: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75083: LD_INT 0
75085: PPUSH
// begin if not units then
75086: LD_VAR 0 1
75090: NOT
75091: IFFALSE 75095
// exit ;
75093: GO 75129
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75095: LD_VAR 0 1
75099: PPUSH
75100: LD_VAR 0 2
75104: PPUSH
75105: LD_VAR 0 3
75109: PPUSH
75110: LD_VAR 0 4
75114: PPUSH
75115: LD_VAR 0 5
75119: PPUSH
75120: LD_VAR 0 6
75124: PPUSH
75125: CALL 31346 0 6
// end ;
75129: PPOPN 7
75131: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75132: CALL 9150 0 0
// end ;
75136: PPOPN 1
75138: END
