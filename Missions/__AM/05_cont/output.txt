// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 28299 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 28299 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 28299 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 28299 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 28299 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 28299 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 28299 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 28299 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 28299 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 28299 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 27
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 27
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 27
1705: PUSH
1706: LD_EXP 27
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 27
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 27
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 27
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 27
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: PUSH
2639: LD_EXP 23
2643: PPUSH
2644: CALL_OW 302
2648: PUSH
2649: LD_EXP 19
2653: PPUSH
2654: CALL_OW 302
2658: PUSH
2659: LD_EXP 19
2663: PPUSH
2664: CALL_OW 255
2668: PUSH
2669: LD_INT 1
2671: EQUAL
2672: AND
2673: OR
2674: PUSH
2675: LD_EXP 27
2679: PPUSH
2680: LD_INT 26
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PPUSH
2690: CALL_OW 72
2694: OR
2695: AND
2696: IFFALSE 3237
2698: GO 2700
2700: DISABLE
2701: LD_INT 0
2703: PPUSH
2704: PPUSH
2705: PPUSH
2706: PPUSH
// begin InGameOn ;
2707: CALL_OW 8
// DialogueOn ;
2711: CALL_OW 6
// if Frank then
2715: LD_EXP 23
2719: IFFALSE 2733
// Say ( Frank , D8a-Frank-1 ) ;
2721: LD_EXP 23
2725: PPUSH
2726: LD_STRING D8a-Frank-1
2728: PPUSH
2729: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2733: LD_ADDR_VAR 0 2
2737: PUSH
2738: LD_EXP 27
2742: PPUSH
2743: LD_INT 26
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PPUSH
2753: CALL_OW 72
2757: PPUSH
2758: LD_STRING D8a-Sol1-1
2760: PPUSH
2761: CALL 519 0 2
2765: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2766: LD_EXP 19
2770: PUSH
2771: LD_EXP 19
2775: PPUSH
2776: CALL_OW 255
2780: PUSH
2781: LD_INT 1
2783: EQUAL
2784: AND
2785: IFFALSE 2799
// Say ( Denis , D8a-Den-1 ) ;
2787: LD_EXP 19
2791: PPUSH
2792: LD_STRING D8a-Den-1
2794: PPUSH
2795: CALL_OW 88
// if sol or Denis or Frank then
2799: LD_VAR 0 2
2803: PUSH
2804: LD_EXP 19
2808: OR
2809: PUSH
2810: LD_EXP 23
2814: OR
2815: IFFALSE 2876
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2817: LD_EXP 27
2821: PPUSH
2822: LD_INT 25
2824: PUSH
2825: LD_INT 4
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 26
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: PUSH
2851: LD_VAR 0 2
2855: DIFF
2856: PPUSH
2857: LD_STRING D8a-Sci1-1
2859: PPUSH
2860: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2864: LD_EXP 16
2868: PPUSH
2869: LD_STRING D8a-JMM-1
2871: PPUSH
2872: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_INT 22
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 25
2893: PUSH
2894: LD_INT 12
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 54
2903: PUSH
2904: EMPTY
2905: LIST
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: LIST
2911: PPUSH
2912: CALL_OW 69
2916: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
2917: LD_ADDR_VAR 0 4
2921: PUSH
2922: LD_INT 22
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 2
2934: PUSH
2935: LD_INT 30
2937: PUSH
2938: LD_INT 6
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 30
2947: PUSH
2948: LD_INT 7
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: LD_INT 30
2957: PUSH
2958: LD_INT 8
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: PPUSH
2975: CALL_OW 69
2979: PUSH
2980: LD_INT 1
2982: ARRAY
2983: ST_TO_ADDR
// for i in ape do
2984: LD_ADDR_VAR 0 1
2988: PUSH
2989: LD_VAR 0 3
2993: PUSH
2994: FOR_IN
2995: IFFALSE 3028
// if ape in UnitsInside ( b ) then
2997: LD_VAR 0 3
3001: PUSH
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 313
3011: IN
3012: IFFALSE 3026
// begin ape := i ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: LD_VAR 0 1
3023: ST_TO_ADDR
// break ;
3024: GO 3028
// end ;
3026: GO 2994
3028: POP
3029: POP
// if not ape then
3030: LD_VAR 0 3
3034: NOT
3035: IFFALSE 3047
// begin DialogueOff ;
3037: CALL_OW 7
// InGameOff ;
3041: CALL_OW 9
// exit ;
3045: GO 3237
// end ; RemoveUnit ( ape ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: CALL_OW 64
// PrepareApeman ( 0 ) ;
3056: LD_INT 0
3058: PPUSH
3059: CALL 62021 0 1
// uc_side := 1 ;
3063: LD_ADDR_OWVAR 20
3067: PUSH
3068: LD_INT 1
3070: ST_TO_ADDR
// hc_name := Mike  ;
3071: LD_ADDR_OWVAR 26
3075: PUSH
3076: LD_STRING Mike 
3078: ST_TO_ADDR
// hc_gallery := us ;
3079: LD_ADDR_OWVAR 33
3083: PUSH
3084: LD_STRING us
3086: ST_TO_ADDR
// hc_face_number := 30 ;
3087: LD_ADDR_OWVAR 34
3091: PUSH
3092: LD_INT 30
3094: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3095: LD_ADDR_OWVAR 29
3099: PUSH
3100: LD_VAR 0 3
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: CALL_OW 260
3112: PUSH
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: CALL_OW 260
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3130: LD_ADDR_OWVAR 31
3134: PUSH
3135: LD_VAR 0 3
3139: PPUSH
3140: LD_INT 1
3142: PPUSH
3143: CALL_OW 259
3147: PUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: LD_INT 2
3155: PPUSH
3156: CALL_OW 259
3160: PUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 3
3168: PPUSH
3169: CALL_OW 259
3173: PUSH
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 4
3181: PPUSH
3182: CALL_OW 259
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: ST_TO_ADDR
// hc_sex := sex_male ;
3193: LD_ADDR_OWVAR 27
3197: PUSH
3198: LD_INT 1
3200: ST_TO_ADDR
// Mike := CreateHuman ;
3201: LD_ADDR_EXP 26
3205: PUSH
3206: CALL_OW 44
3210: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3211: LD_EXP 26
3215: PPUSH
3216: LD_VAR 0 4
3220: PPUSH
3221: CALL_OW 52
// InitHc_All ( ) ;
3225: CALL_OW 584
// DialogueOff ;
3229: CALL_OW 7
// InGameOff ;
3233: CALL_OW 9
// end ;
3237: PPOPN 4
3239: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3240: LD_INT 22
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 25
3252: PUSH
3253: LD_INT 16
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PPUSH
3264: CALL_OW 69
3268: IFFALSE 3327
3270: GO 3272
3272: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3273: LD_STRING M1a
3275: PPUSH
3276: CALL_OW 337
// case Query ( Q2 ) of 1 :
3280: LD_STRING Q2
3282: PPUSH
3283: CALL_OW 97
3287: PUSH
3288: LD_INT 1
3290: DOUBLE
3291: EQUAL
3292: IFTRUE 3296
3294: GO 3307
3296: POP
// end_mission := true ; 2 :
3297: LD_ADDR_EXP 14
3301: PUSH
3302: LD_INT 1
3304: ST_TO_ADDR
3305: GO 3327
3307: LD_INT 2
3309: DOUBLE
3310: EQUAL
3311: IFTRUE 3315
3313: GO 3326
3315: POP
// end_the_mission_allowed := true ; end ;
3316: LD_ADDR_OWVAR 57
3320: PUSH
3321: LD_INT 1
3323: ST_TO_ADDR
3324: GO 3327
3326: POP
// end ;
3327: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3328: LD_INT 22
3330: PUSH
3331: LD_INT 1
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: LD_INT 30
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 30
3353: PUSH
3354: LD_INT 7
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 1
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 2
3387: PUSH
3388: LD_INT 30
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 30
3400: PUSH
3401: LD_INT 3
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: AND
3422: PUSH
3423: LD_EXP 6
3427: AND
3428: IFFALSE 3943
3430: GO 3432
3432: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3433: LD_INT 1050
3435: PPUSH
3436: LD_INT 1750
3438: PPUSH
3439: CALL_OW 12
3443: PPUSH
3444: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3448: LD_EXP 19
3452: PPUSH
3453: LD_INT 6
3455: PUSH
3456: LD_INT 9
3458: PUSH
3459: LD_INT 10
3461: PUSH
3462: LD_INT 16
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: PUSH
3471: LD_OWVAR 67
3475: ARRAY
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 49
// ComHold ( Denis ) ;
3484: LD_EXP 19
3488: PPUSH
3489: CALL_OW 140
// InGameOn ;
3493: CALL_OW 8
// DialogueOn ;
3497: CALL_OW 6
// if Delta then
3501: LD_EXP 6
3505: IFFALSE 3518
// CenterNowOnUnits ( Delta ) else
3507: LD_EXP 6
3511: PPUSH
3512: CALL_OW 87
3516: GO 3527
// CenterNowOnUnits ( JMM ) ;
3518: LD_EXP 16
3522: PPUSH
3523: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3527: LD_EXP 19
3531: PPUSH
3532: LD_STRING DD-Den-1
3534: PPUSH
3535: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3539: LD_EXP 16
3543: PPUSH
3544: LD_STRING DD-JMM-1
3546: PPUSH
3547: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3551: LD_EXP 19
3555: PPUSH
3556: LD_STRING DD-Den-2
3558: PPUSH
3559: CALL_OW 94
// Wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// DialogueOff ;
3570: CALL_OW 7
// InGameOff ;
3574: CALL_OW 9
// if Difficulty = 1 then
3578: LD_OWVAR 67
3582: PUSH
3583: LD_INT 1
3585: EQUAL
3586: IFFALSE 3662
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3588: LD_EXP 19
3592: PPUSH
3593: CALL_OW 250
3597: PPUSH
3598: LD_EXP 19
3602: PPUSH
3603: CALL_OW 251
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: LD_INT 12
3613: NEG
3614: PPUSH
3615: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3619: LD_EXP 19
3623: PPUSH
3624: CALL_OW 87
// wait ( 0 0$5 ) ;
3628: LD_INT 175
3630: PPUSH
3631: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3635: LD_EXP 19
3639: PPUSH
3640: CALL_OW 250
3644: PPUSH
3645: LD_EXP 19
3649: PPUSH
3650: CALL_OW 251
3654: PPUSH
3655: LD_INT 1
3657: PPUSH
3658: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3662: LD_INT 35
3664: PPUSH
3665: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_EXP 19
3676: PPUSH
3677: CALL_OW 292
3681: PUSH
3682: LD_EXP 19
3686: PPUSH
3687: CALL_OW 301
3691: OR
3692: IFFALSE 3662
// if IsDead ( Denis ) then
3694: LD_EXP 19
3698: PPUSH
3699: CALL_OW 301
3703: IFFALSE 3707
// exit ;
3705: GO 3943
// SetSide ( Denis , 1 ) ;
3707: LD_EXP 19
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3719: LD_EXP 19
3723: PPUSH
3724: LD_STRING DD-Den-2a
3726: PPUSH
3727: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3731: LD_INT 35
3733: PPUSH
3734: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3738: LD_EXP 19
3742: PPUSH
3743: CALL_OW 310
3747: PPUSH
3748: CALL_OW 266
3752: PUSH
3753: LD_INT 6
3755: PUSH
3756: LD_INT 7
3758: PUSH
3759: LD_INT 8
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: IN
3767: PUSH
3768: LD_EXP 19
3772: PPUSH
3773: CALL_OW 301
3777: OR
3778: IFFALSE 3731
// if IsDead ( Denis ) then
3780: LD_EXP 19
3784: PPUSH
3785: CALL_OW 301
3789: IFFALSE 3793
// exit ;
3791: GO 3943
// Say ( Denis , DD-Den-2b ) ;
3793: LD_EXP 19
3797: PPUSH
3798: LD_STRING DD-Den-2b
3800: PPUSH
3801: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3805: LD_EXP 19
3809: PPUSH
3810: LD_INT 4
3812: PPUSH
3813: CALL_OW 123
// Wait ( 0 0$02 ) ;
3817: LD_INT 70
3819: PPUSH
3820: CALL_OW 67
// DialogueOn ;
3824: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3828: LD_EXP 19
3832: PPUSH
3833: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3837: LD_EXP 16
3841: PPUSH
3842: LD_STRING D4-JMM-1
3844: PPUSH
3845: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3849: LD_EXP 19
3853: PPUSH
3854: LD_STRING D4-Den-1
3856: PPUSH
3857: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3861: LD_EXP 16
3865: PPUSH
3866: LD_STRING D4-JMM-2
3868: PPUSH
3869: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3873: LD_EXP 19
3877: PPUSH
3878: LD_STRING D4-Den-2
3880: PPUSH
3881: CALL_OW 88
// DialogueOff ;
3885: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3889: LD_STRING M2
3891: PPUSH
3892: CALL_OW 337
// radar_allowed := true ;
3896: LD_ADDR_EXP 7
3900: PUSH
3901: LD_INT 1
3903: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3904: LD_INT 6
3906: PPUSH
3907: LD_INT 1
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3917: LD_INT 15
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 1
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL_OW 324
// end ;
3943: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3944: LD_EXP 13
3948: IFFALSE 4571
3950: GO 3952
3952: DISABLE
3953: LD_INT 0
3955: PPUSH
3956: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3957: LD_ADDR_VAR 0 1
3961: PUSH
3962: LD_EXP 27
3966: PPUSH
3967: LD_INT 26
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 72
3981: PPUSH
3982: LD_STRING D5-Sol1-1
3984: PPUSH
3985: CALL 519 0 2
3989: ST_TO_ADDR
// if not sol then
3990: LD_VAR 0 1
3994: NOT
3995: IFFALSE 3999
// exit ;
3997: GO 4571
// repeat wait ( 0 0$01 ) ;
3999: LD_INT 35
4001: PPUSH
4002: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4006: LD_INT 22
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 21
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: LD_INT 0
4037: EQUAL
4038: IFFALSE 3999
// if IsOk ( sol ) then
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 302
4049: IFFALSE 4069
// begin sol2 := others diff sol ;
4051: LD_ADDR_VAR 0 2
4055: PUSH
4056: LD_EXP 27
4060: PUSH
4061: LD_VAR 0 1
4065: DIFF
4066: ST_TO_ADDR
// end else
4067: GO 4071
// exit ;
4069: GO 4571
// if not Lisa and not sol2 then
4071: LD_EXP 22
4075: NOT
4076: PUSH
4077: LD_VAR 0 2
4081: NOT
4082: AND
4083: IFFALSE 4087
// exit ;
4085: GO 4571
// DialogueOn ;
4087: CALL_OW 6
// if Lisa then
4091: LD_EXP 22
4095: IFFALSE 4111
// Say ( Lisa , D5a-Lisa-1 ) else
4097: LD_EXP 22
4101: PPUSH
4102: LD_STRING D5a-Lisa-1
4104: PPUSH
4105: CALL_OW 88
4109: GO 4186
// if sol2 then
4111: LD_VAR 0 2
4115: IFFALSE 4186
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4117: LD_VAR 0 2
4121: PUSH
4122: LD_INT 1
4124: ARRAY
4125: PPUSH
4126: CALL_OW 258
4130: PUSH
4131: LD_INT 1
4133: DOUBLE
4134: EQUAL
4135: IFTRUE 4139
4137: GO 4158
4139: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4140: LD_VAR 0 2
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: PPUSH
4149: LD_STRING D5-Sol2-1
4151: PPUSH
4152: CALL_OW 88
4156: GO 4186
4158: LD_INT 2
4160: DOUBLE
4161: EQUAL
4162: IFTRUE 4166
4164: GO 4185
4166: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4167: LD_VAR 0 2
4171: PUSH
4172: LD_INT 1
4174: ARRAY
4175: PPUSH
4176: LD_STRING D5-FSol2-1
4178: PPUSH
4179: CALL_OW 88
4183: GO 4186
4185: POP
// Say ( sol , D5-Sol1-2 ) ;
4186: LD_VAR 0 1
4190: PPUSH
4191: LD_STRING D5-Sol1-2
4193: PPUSH
4194: CALL_OW 88
// if Lisa then
4198: LD_EXP 22
4202: IFFALSE 4218
// Say ( Lisa , D5a-Lisa-2 ) else
4204: LD_EXP 22
4208: PPUSH
4209: LD_STRING D5a-Lisa-2
4211: PPUSH
4212: CALL_OW 88
4216: GO 4293
// if sol2 then
4218: LD_VAR 0 2
4222: IFFALSE 4293
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4224: LD_VAR 0 2
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PPUSH
4233: CALL_OW 258
4237: PUSH
4238: LD_INT 1
4240: DOUBLE
4241: EQUAL
4242: IFTRUE 4246
4244: GO 4265
4246: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4247: LD_VAR 0 2
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: PPUSH
4256: LD_STRING D5-Sol2-2
4258: PPUSH
4259: CALL_OW 88
4263: GO 4293
4265: LD_INT 2
4267: DOUBLE
4268: EQUAL
4269: IFTRUE 4273
4271: GO 4292
4273: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4274: LD_VAR 0 2
4278: PUSH
4279: LD_INT 1
4281: ARRAY
4282: PPUSH
4283: LD_STRING D5-FSol2-2
4285: PPUSH
4286: CALL_OW 88
4290: GO 4293
4292: POP
// Say ( sol , D5a-Sol1-3 ) ;
4293: LD_VAR 0 1
4297: PPUSH
4298: LD_STRING D5a-Sol1-3
4300: PPUSH
4301: CALL_OW 88
// if Lisa then
4305: LD_EXP 22
4309: IFFALSE 4323
// Say ( Lisa , D5a-Lisa-3 ) ;
4311: LD_EXP 22
4315: PPUSH
4316: LD_STRING D5a-Lisa-3
4318: PPUSH
4319: CALL_OW 88
// if not sol2 then
4323: LD_VAR 0 2
4327: NOT
4328: IFFALSE 4336
// begin DialogueOff ;
4330: CALL_OW 7
// exit ;
4334: GO 4571
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4336: LD_VAR 0 2
4340: PUSH
4341: LD_INT 1
4343: ARRAY
4344: PPUSH
4345: CALL_OW 258
4349: PUSH
4350: LD_INT 1
4352: DOUBLE
4353: EQUAL
4354: IFTRUE 4358
4356: GO 4377
4358: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4359: LD_VAR 0 2
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: PPUSH
4368: LD_STRING D5-Sol2-3
4370: PPUSH
4371: CALL_OW 88
4375: GO 4405
4377: LD_INT 2
4379: DOUBLE
4380: EQUAL
4381: IFTRUE 4385
4383: GO 4404
4385: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 1
4393: ARRAY
4394: PPUSH
4395: LD_STRING D5-FSol2-3
4397: PPUSH
4398: CALL_OW 88
4402: GO 4405
4404: POP
// Say ( sol , D5-Sol1-4 ) ;
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_STRING D5-Sol1-4
4412: PPUSH
4413: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4417: LD_VAR 0 2
4421: PUSH
4422: LD_INT 1
4424: ARRAY
4425: PPUSH
4426: CALL_OW 258
4430: PUSH
4431: LD_INT 1
4433: DOUBLE
4434: EQUAL
4435: IFTRUE 4439
4437: GO 4458
4439: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4440: LD_VAR 0 2
4444: PUSH
4445: LD_INT 1
4447: ARRAY
4448: PPUSH
4449: LD_STRING D5-Sol2-4
4451: PPUSH
4452: CALL_OW 88
4456: GO 4486
4458: LD_INT 2
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4485
4466: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4467: LD_VAR 0 2
4471: PUSH
4472: LD_INT 1
4474: ARRAY
4475: PPUSH
4476: LD_STRING D5-FSol2-4
4478: PPUSH
4479: CALL_OW 88
4483: GO 4486
4485: POP
// Say ( sol , D5-Sol1-5 ) ;
4486: LD_VAR 0 1
4490: PPUSH
4491: LD_STRING D5-Sol1-5
4493: PPUSH
4494: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4498: LD_VAR 0 2
4502: PUSH
4503: LD_INT 1
4505: ARRAY
4506: PPUSH
4507: CALL_OW 258
4511: PUSH
4512: LD_INT 1
4514: DOUBLE
4515: EQUAL
4516: IFTRUE 4520
4518: GO 4539
4520: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4521: LD_VAR 0 2
4525: PUSH
4526: LD_INT 1
4528: ARRAY
4529: PPUSH
4530: LD_STRING D5-Sol2-5
4532: PPUSH
4533: CALL_OW 88
4537: GO 4567
4539: LD_INT 2
4541: DOUBLE
4542: EQUAL
4543: IFTRUE 4547
4545: GO 4566
4547: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4548: LD_VAR 0 2
4552: PUSH
4553: LD_INT 1
4555: ARRAY
4556: PPUSH
4557: LD_STRING D5-FSol2-5
4559: PPUSH
4560: CALL_OW 88
4564: GO 4567
4566: POP
// DialogueOff ;
4567: CALL_OW 7
// end ;
4571: PPOPN 2
4573: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 25
4586: PUSH
4587: LD_INT 16
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PPUSH
4598: CALL_OW 69
4602: PUSH
4603: LD_INT 5
4605: GREATEREQUAL
4606: IFFALSE 4626
4608: GO 4610
4610: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4611: LD_STRING M1b
4613: PPUSH
4614: CALL_OW 337
// apeman_army := true ;
4618: LD_ADDR_EXP 9
4622: PUSH
4623: LD_INT 1
4625: ST_TO_ADDR
// end ;
4626: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4627: LD_INT 22
4629: PUSH
4630: LD_INT 1
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: LD_INT 30
4639: PUSH
4640: LD_INT 3
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 57
4649: PUSH
4650: EMPTY
4651: LIST
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 69
4662: IFFALSE 4674
4664: GO 4666
4666: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4667: LD_STRING M1c
4669: PPUSH
4670: CALL_OW 337
4674: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4675: LD_INT 6
4677: PPUSH
4678: LD_INT 1
4680: PPUSH
4681: CALL_OW 321
4685: PUSH
4686: LD_INT 2
4688: EQUAL
4689: IFFALSE 4709
4691: GO 4693
4693: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4694: LD_STRING M2a
4696: PPUSH
4697: CALL_OW 337
// radar_researched := true ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// end ;
4709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4710: LD_INT 22
4712: PUSH
4713: LD_INT 1
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 2
4722: PUSH
4723: LD_INT 34
4725: PUSH
4726: LD_INT 11
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 35
4735: PUSH
4736: LD_INT 11
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PPUSH
4752: CALL_OW 69
4756: IFFALSE 4776
4758: GO 4760
4760: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4761: LD_STRING M2b
4763: PPUSH
4764: CALL_OW 337
// radar_builded := true ;
4768: LD_ADDR_EXP 11
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end ;
4776: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4777: LD_INT 22
4779: PUSH
4780: LD_INT 0
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 12
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: PUSH
4806: LD_INT 0
4808: EQUAL
4809: PUSH
4810: LD_EXP 8
4814: NOT
4815: AND
4816: IFFALSE 4828
4818: GO 4820
4820: DISABLE
// YouLost ( Apeman ) ;
4821: LD_STRING Apeman
4823: PPUSH
4824: CALL_OW 104
4828: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4829: LD_INT 22
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 25
4841: PUSH
4842: LD_INT 16
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PUSH
4858: LD_INT 7
4860: GREATEREQUAL
4861: IFFALSE 4959
4863: GO 4865
4865: DISABLE
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: LD_INT 22
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 21
4887: PUSH
4888: LD_INT 1
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 25
4897: PUSH
4898: LD_INT 4
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: PUSH
4915: LD_EXP 16
4919: ADD
4920: ST_TO_ADDR
// if filter then
4921: LD_VAR 0 2
4925: IFFALSE 4959
// for i in filter do
4927: LD_ADDR_VAR 0 1
4931: PUSH
4932: LD_VAR 0 2
4936: PUSH
4937: FOR_IN
4938: IFFALSE 4957
// AddExperience ( i , 4 , 3500 ) ;
4940: LD_VAR 0 1
4944: PPUSH
4945: LD_INT 4
4947: PPUSH
4948: LD_INT 3500
4950: PPUSH
4951: CALL_OW 492
4955: GO 4937
4957: POP
4958: POP
// end ;
4959: PPOPN 2
4961: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4962: LD_EXP 14
4966: IFFALSE 6135
4968: GO 4970
4970: DISABLE
4971: LD_INT 0
4973: PPUSH
4974: PPUSH
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin if apeKillCounter = 0 then
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 0
4985: EQUAL
4986: IFFALSE 4995
// SetAchievement ( ACH_APEKILLER ) ;
4988: LD_STRING ACH_APEKILLER
4990: PPUSH
4991: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4995: LD_INT 22
4997: PUSH
4998: LD_INT 2
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PPUSH
5005: CALL_OW 69
5009: IFFALSE 5047
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 69
5030: PUSH
5031: FOR_IN
5032: IFFALSE 5045
// RemoveUnit ( i ) ;
5034: LD_VAR 0 1
5038: PPUSH
5039: CALL_OW 64
5043: GO 5031
5045: POP
5046: POP
// m1 := false ;
5047: LD_ADDR_VAR 0 3
5051: PUSH
5052: LD_INT 0
5054: ST_TO_ADDR
// m2 := false ;
5055: LD_ADDR_VAR 0 4
5059: PUSH
5060: LD_INT 0
5062: ST_TO_ADDR
// m3 := false ;
5063: LD_ADDR_VAR 0 5
5067: PUSH
5068: LD_INT 0
5070: ST_TO_ADDR
// if apeman_army then
5071: LD_EXP 9
5075: IFFALSE 5097
// begin AddMedal ( Tame , 1 ) ;
5077: LD_STRING Tame
5079: PPUSH
5080: LD_INT 1
5082: PPUSH
5083: CALL_OW 101
// m1 := true ;
5087: LD_ADDR_VAR 0 3
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// end else
5095: GO 5108
// AddMedal ( Tame , - 1 ) ;
5097: LD_STRING Tame
5099: PPUSH
5100: LD_INT 1
5102: NEG
5103: PPUSH
5104: CALL_OW 101
// if radar_researched then
5108: LD_EXP 10
5112: IFFALSE 5144
// begin SaveVariable ( true , radarResInDelta ) ;
5114: LD_INT 1
5116: PPUSH
5117: LD_STRING radarResInDelta
5119: PPUSH
5120: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5124: LD_STRING Radar
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 101
// m2 := true ;
5134: LD_ADDR_VAR 0 4
5138: PUSH
5139: LD_INT 1
5141: ST_TO_ADDR
// end else
5142: GO 5174
// if radar_allowed then
5144: LD_EXP 7
5148: IFFALSE 5163
// AddMedal ( Radar , - 2 ) else
5150: LD_STRING Radar
5152: PPUSH
5153: LD_INT 2
5155: NEG
5156: PPUSH
5157: CALL_OW 101
5161: GO 5174
// AddMedal ( Radar , - 1 ) ;
5163: LD_STRING Radar
5165: PPUSH
5166: LD_INT 1
5168: NEG
5169: PPUSH
5170: CALL_OW 101
// if radar_builded then
5174: LD_EXP 11
5178: IFFALSE 5200
// begin AddMedal ( BuildRadar , 1 ) ;
5180: LD_STRING BuildRadar
5182: PPUSH
5183: LD_INT 1
5185: PPUSH
5186: CALL_OW 101
// m3 := true ;
5190: LD_ADDR_VAR 0 5
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// end else
5198: GO 5211
// AddMedal ( BuildRadar , - 1 ) ;
5200: LD_STRING BuildRadar
5202: PPUSH
5203: LD_INT 1
5205: NEG
5206: PPUSH
5207: CALL_OW 101
// if tick <= 7 7$00 then
5211: LD_OWVAR 1
5215: PUSH
5216: LD_INT 14700
5218: LESSEQUAL
5219: IFFALSE 5228
// SetAchievement ( ACH_ASPEED_5 ) ;
5221: LD_STRING ACH_ASPEED_5
5223: PPUSH
5224: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5228: LD_VAR 0 3
5232: PUSH
5233: LD_VAR 0 4
5237: AND
5238: PUSH
5239: LD_VAR 0 5
5243: AND
5244: PUSH
5245: LD_OWVAR 67
5249: PUSH
5250: LD_INT 3
5252: GREATEREQUAL
5253: AND
5254: IFFALSE 5266
// SetAchievementEX ( ACH_AMER , 5 ) ;
5256: LD_STRING ACH_AMER
5258: PPUSH
5259: LD_INT 5
5261: PPUSH
5262: CALL_OW 564
// GiveMedals ( MAIN ) ;
5266: LD_STRING MAIN
5268: PPUSH
5269: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 21
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 25
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 25
5313: PUSH
5314: LD_INT 2
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 25
5323: PUSH
5324: LD_INT 3
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 25
5333: PUSH
5334: LD_INT 4
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL_OW 69
5357: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5358: LD_VAR 0 2
5362: PPUSH
5363: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5367: LD_EXP 16
5371: PPUSH
5372: LD_EXP 2
5376: PUSH
5377: LD_STRING JMM
5379: STR
5380: PPUSH
5381: CALL_OW 38
// if IsOk ( Gladstone ) then
5385: LD_EXP 17
5389: PPUSH
5390: CALL_OW 302
5394: IFFALSE 5414
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5396: LD_EXP 17
5400: PPUSH
5401: LD_EXP 2
5405: PUSH
5406: LD_STRING Gladstone
5408: STR
5409: PPUSH
5410: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5414: LD_EXP 19
5418: PPUSH
5419: CALL_OW 302
5423: PUSH
5424: LD_EXP 19
5428: PPUSH
5429: CALL_OW 255
5433: PUSH
5434: LD_INT 1
5436: EQUAL
5437: AND
5438: IFFALSE 5468
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5440: LD_EXP 19
5444: PPUSH
5445: LD_EXP 2
5449: PUSH
5450: LD_STRING Denis
5452: STR
5453: PPUSH
5454: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5458: LD_INT 1
5460: PPUSH
5461: LD_STRING DenisInDelta
5463: PPUSH
5464: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5468: LD_EXP 22
5472: PPUSH
5473: CALL_OW 302
5477: IFFALSE 5497
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5479: LD_EXP 22
5483: PPUSH
5484: LD_EXP 2
5488: PUSH
5489: LD_STRING Lisa
5491: STR
5492: PPUSH
5493: CALL_OW 38
// end ; if IsOk ( Frank ) then
5497: LD_EXP 23
5501: PPUSH
5502: CALL_OW 302
5506: IFFALSE 5526
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5508: LD_EXP 23
5512: PPUSH
5513: LD_EXP 2
5517: PUSH
5518: LD_STRING Frank
5520: STR
5521: PPUSH
5522: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5526: LD_EXP 24
5530: PPUSH
5531: CALL_OW 302
5535: IFFALSE 5555
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5537: LD_EXP 24
5541: PPUSH
5542: LD_EXP 2
5546: PUSH
5547: LD_STRING Bobby
5549: STR
5550: PPUSH
5551: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5555: LD_EXP 25
5559: PPUSH
5560: CALL_OW 302
5564: IFFALSE 5584
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5566: LD_EXP 25
5570: PPUSH
5571: LD_EXP 2
5575: PUSH
5576: LD_STRING Cyrus
5578: STR
5579: PPUSH
5580: CALL_OW 38
// end ; if IsOk ( Brown ) then
5584: LD_EXP 20
5588: PPUSH
5589: CALL_OW 302
5593: IFFALSE 5613
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5595: LD_EXP 20
5599: PPUSH
5600: LD_EXP 2
5604: PUSH
5605: LD_STRING Brown
5607: STR
5608: PPUSH
5609: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5613: LD_EXP 21
5617: PPUSH
5618: CALL_OW 302
5622: IFFALSE 5642
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5624: LD_EXP 21
5628: PPUSH
5629: LD_EXP 2
5633: PUSH
5634: LD_STRING Donaldson
5636: STR
5637: PPUSH
5638: CALL_OW 38
// end ; if IsOk ( Mike ) then
5642: LD_EXP 26
5646: PPUSH
5647: CALL_OW 302
5651: IFFALSE 5671
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5653: LD_EXP 26
5657: PPUSH
5658: LD_EXP 2
5662: PUSH
5663: LD_STRING Mike
5665: STR
5666: PPUSH
5667: CALL_OW 38
// if others then
5671: LD_EXP 27
5675: IFFALSE 5689
// SaveCharacters ( others , othersInDelta ) ;
5677: LD_EXP 27
5681: PPUSH
5682: LD_STRING othersInDelta
5684: PPUSH
5685: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5689: LD_INT 22
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 25
5701: PUSH
5702: LD_INT 16
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: IFFALSE 5761
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 25
5731: PUSH
5732: LD_INT 16
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 69
5747: PUSH
5748: LD_EXP 26
5752: DIFF
5753: PPUSH
5754: LD_STRING apeInDelta
5756: PPUSH
5757: CALL_OW 38
// tmp := [ ] ;
5761: LD_ADDR_VAR 0 2
5765: PUSH
5766: EMPTY
5767: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5768: LD_INT 22
5770: PUSH
5771: LD_INT 1
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 21
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: IFFALSE 5907
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: LD_INT 22
5805: PUSH
5806: LD_INT 1
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 2
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PPUSH
5827: CALL_OW 69
5831: PUSH
5832: FOR_IN
5833: IFFALSE 5905
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5835: LD_ADDR_VAR 0 2
5839: PUSH
5840: LD_VAR 0 2
5844: PUSH
5845: LD_VAR 0 1
5849: PPUSH
5850: CALL_OW 248
5854: PUSH
5855: LD_VAR 0 1
5859: PPUSH
5860: CALL_OW 265
5864: PUSH
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 262
5874: PUSH
5875: LD_VAR 0 1
5879: PPUSH
5880: CALL_OW 263
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 264
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: ADD
5902: ST_TO_ADDR
5903: GO 5832
5905: POP
5906: POP
// if tmp then
5907: LD_VAR 0 2
5911: IFFALSE 5925
// SaveVariable ( tmp , vehiclesInDelta ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_STRING vehiclesInDelta
5920: PPUSH
5921: CALL_OW 39
// tmp := [ ] ;
5925: LD_ADDR_VAR 0 2
5929: PUSH
5930: EMPTY
5931: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 21
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: CALL_OW 69
5960: IFFALSE 6113
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5962: LD_ADDR_VAR 0 1
5966: PUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 21
5979: PUSH
5980: LD_INT 3
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PPUSH
5991: CALL_OW 69
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6111
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: LD_VAR 0 1
6013: PPUSH
6014: CALL_OW 266
6018: PUSH
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 267
6028: PUSH
6029: LD_VAR 0 1
6033: PPUSH
6034: CALL_OW 250
6038: PUSH
6039: LD_VAR 0 1
6043: PPUSH
6044: CALL_OW 251
6048: PUSH
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 254
6058: PUSH
6059: LD_VAR 0 1
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: CALL_OW 268
6071: PUSH
6072: LD_VAR 0 1
6076: PPUSH
6077: LD_INT 2
6079: PPUSH
6080: CALL_OW 268
6084: PUSH
6085: LD_VAR 0 1
6089: PPUSH
6090: CALL_OW 269
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: ADD
6108: ST_TO_ADDR
6109: GO 5996
6111: POP
6112: POP
// if tmp then
6113: LD_VAR 0 2
6117: IFFALSE 6131
// SaveVariable ( tmp , buildingsInDelta ) ;
6119: LD_VAR 0 2
6123: PPUSH
6124: LD_STRING buildingsInDelta
6126: PPUSH
6127: CALL_OW 39
// YouWin ;
6131: CALL_OW 103
// end ; end_of_file
6135: PPOPN 5
6137: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6138: LD_INT 0
6140: PPUSH
6141: PPUSH
6142: PPUSH
6143: PPUSH
// InitHc ;
6144: CALL_OW 19
// InitUc ;
6148: CALL_OW 18
// uc_side := 2 ;
6152: LD_ADDR_OWVAR 20
6156: PUSH
6157: LD_INT 2
6159: ST_TO_ADDR
// uc_nation := 2 ;
6160: LD_ADDR_OWVAR 21
6164: PUSH
6165: LD_INT 2
6167: ST_TO_ADDR
// if not amount then
6168: LD_VAR 0 1
6172: NOT
6173: IFFALSE 6177
// exit ;
6175: GO 6300
// for i = 1 to amount do
6177: LD_ADDR_VAR 0 5
6181: PUSH
6182: DOUBLE
6183: LD_INT 1
6185: DEC
6186: ST_TO_ADDR
6187: LD_VAR 0 1
6191: PUSH
6192: FOR_TO
6193: IFFALSE 6288
// begin PrepareHuman ( false , 1 , skill ) ;
6195: LD_INT 0
6197: PPUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_VAR 0 2
6205: PPUSH
6206: CALL_OW 380
// un := CreateHuman ;
6210: LD_ADDR_VAR 0 6
6214: PUSH
6215: CALL_OW 44
6219: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: LD_VAR 0 7
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_VAR 0 6
6237: PPUSH
6238: CALL_OW 2
6242: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6243: LD_VAR 0 6
6247: PPUSH
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 0
6255: PPUSH
6256: CALL_OW 49
// if i mod 2 = 0 then
6260: LD_VAR 0 5
6264: PUSH
6265: LD_INT 2
6267: MOD
6268: PUSH
6269: LD_INT 0
6271: EQUAL
6272: IFFALSE 6286
// SetTag ( un , 11 ) ;
6274: LD_VAR 0 6
6278: PPUSH
6279: LD_INT 11
6281: PPUSH
6282: CALL_OW 109
// end ;
6286: GO 6192
6288: POP
6289: POP
// result := tmp ;
6290: LD_ADDR_VAR 0 4
6294: PUSH
6295: LD_VAR 0 7
6299: ST_TO_ADDR
// end ;
6300: LD_VAR 0 4
6304: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6305: LD_EXP 6
6309: IFFALSE 7212
6311: GO 6313
6313: DISABLE
6314: LD_INT 0
6316: PPUSH
6317: PPUSH
6318: PPUSH
6319: PPUSH
6320: PPUSH
6321: PPUSH
6322: PPUSH
6323: PPUSH
// begin more_troops := false ;
6324: LD_ADDR_VAR 0 3
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6332: LD_ADDR_VAR 0 4
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: LD_INT 4
6342: PUSH
6343: LD_INT 5
6345: PUSH
6346: LD_INT 5
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_OWVAR 67
6359: ARRAY
6360: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 10500
6368: PUSH
6369: LD_INT 8400
6371: PUSH
6372: LD_INT 6300
6374: PUSH
6375: LD_INT 5250
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_OWVAR 67
6388: ARRAY
6389: ST_TO_ADDR
// force := [ ] ;
6390: LD_ADDR_VAR 0 8
6394: PUSH
6395: EMPTY
6396: ST_TO_ADDR
// ar_forces := [ ] ;
6397: LD_ADDR_EXP 28
6401: PUSH
6402: EMPTY
6403: ST_TO_ADDR
// ap_killers := [ ] ;
6404: LD_ADDR_EXP 29
6408: PUSH
6409: EMPTY
6410: ST_TO_ADDR
// Wait ( timer ) ;
6411: LD_VAR 0 2
6415: PPUSH
6416: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6420: LD_EXP 19
6424: PUSH
6425: LD_EXP 19
6429: PPUSH
6430: CALL_OW 255
6434: PUSH
6435: LD_INT 4
6437: EQUAL
6438: AND
6439: IFFALSE 6448
// Wait ( 0 0$45 ) ;
6441: LD_INT 1575
6443: PPUSH
6444: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6448: LD_INT 22
6450: PUSH
6451: LD_INT 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 30
6460: PUSH
6461: LD_INT 4
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PPUSH
6472: CALL_OW 69
6476: IFFALSE 6493
// begin Wait ( 1 1$25 ) ;
6478: LD_INT 2975
6480: PPUSH
6481: CALL_OW 67
// more_troops := true ;
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_INT 1
6492: ST_TO_ADDR
// end ; if more_troops then
6493: LD_VAR 0 3
6497: IFFALSE 6693
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6499: LD_ADDR_VAR 0 8
6503: PUSH
6504: LD_INT 4
6506: PUSH
6507: LD_INT 5
6509: PUSH
6510: LD_INT 6
6512: PUSH
6513: LD_INT 7
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: LD_OWVAR 67
6526: ARRAY
6527: PPUSH
6528: LD_VAR 0 4
6532: PPUSH
6533: LD_INT 14
6535: PPUSH
6536: CALL 6138 0 3
6540: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6541: LD_ADDR_VAR 0 7
6545: PUSH
6546: LD_INT 2
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 22
6554: PPUSH
6555: LD_INT 1
6557: PPUSH
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 42
6563: PUSH
6564: LD_INT 42
6566: PUSH
6567: LD_INT 43
6569: PUSH
6570: LD_INT 44
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_OWVAR 67
6583: ARRAY
6584: PPUSH
6585: LD_INT 90
6587: PPUSH
6588: CALL 431 0 7
6592: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6593: LD_VAR 0 7
6597: PPUSH
6598: LD_INT 4
6600: PPUSH
6601: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6605: LD_VAR 0 7
6609: PPUSH
6610: LD_INT 13
6612: PPUSH
6613: LD_INT 0
6615: PPUSH
6616: CALL_OW 49
// uc_side := 2 ;
6620: LD_ADDR_OWVAR 20
6624: PUSH
6625: LD_INT 2
6627: ST_TO_ADDR
// uc_nation := 2 ;
6628: LD_ADDR_OWVAR 21
6632: PUSH
6633: LD_INT 2
6635: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6636: LD_INT 0
6638: PPUSH
6639: LD_INT 1
6641: PPUSH
6642: LD_VAR 0 4
6646: PPUSH
6647: CALL_OW 380
// un := CreateHuman ;
6651: LD_ADDR_VAR 0 6
6655: PUSH
6656: CALL_OW 44
6660: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6661: LD_VAR 0 6
6665: PPUSH
6666: LD_VAR 0 7
6670: PPUSH
6671: CALL_OW 52
// force := force ^ un ;
6675: LD_ADDR_VAR 0 8
6679: PUSH
6680: LD_VAR 0 8
6684: PUSH
6685: LD_VAR 0 6
6689: ADD
6690: ST_TO_ADDR
// end else
6691: GO 6735
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6693: LD_ADDR_VAR 0 8
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: LD_INT 6
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: PUSH
6716: LD_OWVAR 67
6720: ARRAY
6721: PPUSH
6722: LD_VAR 0 4
6726: PPUSH
6727: LD_INT 14
6729: PPUSH
6730: CALL 6138 0 3
6734: ST_TO_ADDR
// end ; if force then
6735: LD_VAR 0 8
6739: IFFALSE 6751
// ar_forces := force ;
6741: LD_ADDR_EXP 28
6745: PUSH
6746: LD_VAR 0 8
6750: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6751: LD_INT 35
6753: PPUSH
6754: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6758: LD_INT 22
6760: PUSH
6761: LD_INT 2
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 21
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: PUSH
6787: LD_INT 0
6789: EQUAL
6790: IFFALSE 6751
// Wait ( timer ) ;
6792: LD_VAR 0 2
6796: PPUSH
6797: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6801: LD_ADDR_VAR 0 8
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: LD_INT 5
6811: PUSH
6812: LD_INT 6
6814: PUSH
6815: LD_INT 7
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: LD_OWVAR 67
6828: ARRAY
6829: PPUSH
6830: LD_VAR 0 4
6834: PPUSH
6835: LD_INT 13
6837: PUSH
6838: LD_INT 14
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 1
6847: PPUSH
6848: LD_INT 2
6850: PPUSH
6851: CALL_OW 12
6855: ARRAY
6856: PPUSH
6857: CALL 6138 0 3
6861: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6862: LD_OWVAR 67
6866: PUSH
6867: LD_INT 1
6869: GREATER
6870: PUSH
6871: LD_EXP 6
6875: AND
6876: IFFALSE 6955
// begin uc_side := 2 ;
6878: LD_ADDR_OWVAR 20
6882: PUSH
6883: LD_INT 2
6885: ST_TO_ADDR
// uc_nation := 2 ;
6886: LD_ADDR_OWVAR 21
6890: PUSH
6891: LD_INT 2
6893: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 2
6899: PPUSH
6900: LD_VAR 0 4
6904: PPUSH
6905: CALL_OW 380
// eng := CreateHuman ;
6909: LD_ADDR_VAR 0 5
6913: PUSH
6914: CALL_OW 44
6918: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6919: LD_VAR 0 5
6923: PPUSH
6924: LD_INT 13
6926: PPUSH
6927: LD_INT 0
6929: PPUSH
6930: CALL_OW 49
// Wait ( 3 ) ;
6934: LD_INT 3
6936: PPUSH
6937: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6941: LD_VAR 0 5
6945: PPUSH
6946: LD_EXP 6
6950: PPUSH
6951: CALL_OW 180
// end ; if force then
6955: LD_VAR 0 8
6959: IFFALSE 6971
// ar_forces := force ;
6961: LD_ADDR_EXP 28
6965: PUSH
6966: LD_VAR 0 8
6970: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6971: LD_INT 35
6973: PPUSH
6974: CALL_OW 67
// if eng then
6978: LD_VAR 0 5
6982: IFFALSE 7036
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6984: LD_EXP 6
6988: PPUSH
6989: CALL_OW 255
6993: PUSH
6994: LD_INT 2
6996: EQUAL
6997: PUSH
6998: LD_VAR 0 5
7002: PPUSH
7003: CALL_OW 302
7007: AND
7008: PUSH
7009: LD_VAR 0 5
7013: PPUSH
7014: CALL_OW 310
7018: NOT
7019: AND
7020: IFFALSE 7036
// ComEnterUnit ( eng , Delta ) ;
7022: LD_VAR 0 5
7026: PPUSH
7027: LD_EXP 6
7031: PPUSH
7032: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7036: LD_INT 22
7038: PUSH
7039: LD_INT 2
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 69
7064: PUSH
7065: LD_INT 0
7067: EQUAL
7068: IFFALSE 6971
// Wait ( 2 2$00 ) ;
7070: LD_INT 4200
7072: PPUSH
7073: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7077: LD_ADDR_EXP 29
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 2
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: PUSH
7100: LD_OWVAR 67
7104: ARRAY
7105: PPUSH
7106: LD_VAR 0 4
7110: PPUSH
7111: LD_INT 13
7113: PPUSH
7114: CALL 6138 0 3
7118: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7119: LD_VAR 0 2
7123: PUSH
7124: LD_INT 2
7126: MUL
7127: PPUSH
7128: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7132: LD_ADDR_EXP 28
7136: PUSH
7137: LD_INT 5
7139: PUSH
7140: LD_INT 6
7142: PUSH
7143: LD_INT 7
7145: PUSH
7146: LD_INT 8
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: PUSH
7155: LD_OWVAR 67
7159: ARRAY
7160: PPUSH
7161: LD_VAR 0 4
7165: PPUSH
7166: LD_INT 13
7168: PPUSH
7169: CALL 6138 0 3
7173: PUSH
7174: LD_INT 3
7176: PUSH
7177: LD_INT 4
7179: PUSH
7180: LD_INT 4
7182: PUSH
7183: LD_INT 4
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: LD_OWVAR 67
7196: ARRAY
7197: PPUSH
7198: LD_VAR 0 4
7202: PPUSH
7203: LD_INT 14
7205: PPUSH
7206: CALL 6138 0 3
7210: ADD
7211: ST_TO_ADDR
// end ;
7212: PPOPN 8
7214: END
// every 0 0$03 trigger ar_forces do var i , target ;
7215: LD_EXP 28
7219: IFFALSE 7417
7221: GO 7223
7223: DISABLE
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
// begin enable ;
7228: ENABLE
// if not ar_forces then
7229: LD_EXP 28
7233: NOT
7234: IFFALSE 7238
// exit ;
7236: GO 7417
// if Delta then
7238: LD_EXP 6
7242: IFFALSE 7256
// target := Delta else
7244: LD_ADDR_VAR 0 2
7248: PUSH
7249: LD_EXP 6
7253: ST_TO_ADDR
7254: GO 7266
// target := JMM ;
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: LD_EXP 16
7265: ST_TO_ADDR
// for i in ar_forces do
7266: LD_ADDR_VAR 0 1
7270: PUSH
7271: LD_EXP 28
7275: PUSH
7276: FOR_IN
7277: IFFALSE 7415
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 55
7286: PUSH
7287: EMPTY
7288: LIST
7289: PPUSH
7290: CALL_OW 69
7294: IN
7295: IFFALSE 7338
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7297: LD_VAR 0 1
7301: PPUSH
7302: LD_INT 22
7304: PUSH
7305: LD_INT 1
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PPUSH
7312: CALL_OW 69
7316: PPUSH
7317: LD_VAR 0 1
7321: PPUSH
7322: CALL_OW 310
7326: PPUSH
7327: CALL_OW 74
7331: PPUSH
7332: CALL_OW 115
7336: GO 7413
// if GetDistUnits ( i , target ) > 30 then
7338: LD_VAR 0 1
7342: PPUSH
7343: LD_VAR 0 2
7347: PPUSH
7348: CALL_OW 296
7352: PUSH
7353: LD_INT 30
7355: GREATER
7356: IFFALSE 7389
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7358: LD_VAR 0 1
7362: PPUSH
7363: LD_VAR 0 2
7367: PPUSH
7368: CALL_OW 250
7372: PPUSH
7373: LD_VAR 0 2
7377: PPUSH
7378: CALL_OW 251
7382: PPUSH
7383: CALL_OW 114
7387: GO 7413
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7389: LD_VAR 0 1
7393: PPUSH
7394: LD_INT 81
7396: PUSH
7397: LD_INT 2
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 69
7408: PPUSH
7409: CALL 736 0 2
// end ;
7413: GO 7276
7415: POP
7416: POP
// end ;
7417: PPOPN 2
7419: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7420: LD_EXP 29
7424: IFFALSE 7584
7426: GO 7428
7428: DISABLE
7429: LD_INT 0
7431: PPUSH
7432: PPUSH
7433: PPUSH
// begin enable ;
7434: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7435: LD_ADDR_VAR 0 1
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: LD_INT 12
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: ST_TO_ADDR
// if not filter then
7469: LD_VAR 0 1
7473: NOT
7474: IFFALSE 7501
// begin ar_forces := ar_forces ^ ap_killers ;
7476: LD_ADDR_EXP 28
7480: PUSH
7481: LD_EXP 28
7485: PUSH
7486: LD_EXP 29
7490: ADD
7491: ST_TO_ADDR
// ap_killers := [ ] ;
7492: LD_ADDR_EXP 29
7496: PUSH
7497: EMPTY
7498: ST_TO_ADDR
// exit ;
7499: GO 7584
// end ; for i in ap_killers do
7501: LD_ADDR_VAR 0 2
7505: PUSH
7506: LD_EXP 29
7510: PUSH
7511: FOR_IN
7512: IFFALSE 7582
// begin if not IsOk ( i ) then
7514: LD_VAR 0 2
7518: PPUSH
7519: CALL_OW 302
7523: NOT
7524: IFFALSE 7528
// continue ;
7526: GO 7511
// if not HasTask ( i ) then
7528: LD_VAR 0 2
7532: PPUSH
7533: CALL_OW 314
7537: NOT
7538: IFFALSE 7560
// target := NearestUnitToUnit ( filter , i ) ;
7540: LD_ADDR_VAR 0 3
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_VAR 0 2
7554: PPUSH
7555: CALL_OW 74
7559: ST_TO_ADDR
// if target then
7560: LD_VAR 0 3
7564: IFFALSE 7580
// ComAttackUnit ( i , target ) ;
7566: LD_VAR 0 2
7570: PPUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: CALL_OW 115
// end ;
7580: GO 7511
7582: POP
7583: POP
// end ; end_of_file
7584: PPOPN 3
7586: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7587: LD_EXP 6
7591: IFFALSE 7727
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
7600: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: LD_INT 300
7608: PUSH
7609: LD_INT 250
7611: PUSH
7612: LD_INT 220
7614: PUSH
7615: LD_INT 210
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: LD_OWVAR 67
7628: ARRAY
7629: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7630: LD_INT 1
7632: PPUSH
7633: LD_INT 3
7635: PPUSH
7636: CALL_OW 12
7640: PPUSH
7641: LD_INT 7
7643: PPUSH
7644: LD_INT 1
7646: PPUSH
7647: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7651: LD_INT 3150
7653: PPUSH
7654: LD_INT 4900
7656: PPUSH
7657: CALL_OW 12
7661: PPUSH
7662: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7666: LD_ADDR_VAR 0 3
7670: PUSH
7671: LD_INT 1
7673: PPUSH
7674: LD_INT 5
7676: PPUSH
7677: CALL_OW 12
7681: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7682: LD_VAR 0 3
7686: PPUSH
7687: LD_INT 7
7689: PPUSH
7690: LD_INT 1
7692: PPUSH
7693: CALL_OW 55
// counter := counter - cr * 10 ;
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_VAR 0 2
7706: PUSH
7707: LD_VAR 0 3
7711: PUSH
7712: LD_INT 10
7714: MUL
7715: MINUS
7716: ST_TO_ADDR
// until counter <= 0 ;
7717: LD_VAR 0 2
7721: PUSH
7722: LD_INT 0
7724: LESSEQUAL
7725: IFFALSE 7651
// end ;
7727: PPOPN 3
7729: END
// every 0 0$03 trigger not Delta do var i ;
7730: LD_EXP 6
7734: NOT
7735: IFFALSE 7805
7737: GO 7739
7739: DISABLE
7740: LD_INT 0
7742: PPUSH
// begin for i = 1 to 5 - Difficulty do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: DOUBLE
7749: LD_INT 1
7751: DEC
7752: ST_TO_ADDR
7753: LD_INT 5
7755: PUSH
7756: LD_OWVAR 67
7760: MINUS
7761: PUSH
7762: FOR_TO
7763: IFFALSE 7803
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7765: LD_INT 2
7767: PPUSH
7768: LD_INT 5
7770: PPUSH
7771: CALL_OW 12
7775: PPUSH
7776: LD_INT 8
7778: PPUSH
7779: LD_INT 1
7781: PPUSH
7782: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7786: LD_INT 560
7788: PPUSH
7789: LD_INT 1365
7791: PPUSH
7792: CALL_OW 12
7796: PPUSH
7797: CALL_OW 67
// end ;
7801: GO 7762
7803: POP
7804: POP
// end ;
7805: PPOPN 1
7807: END
// every 3 3$00 trigger tick < 15 15$00 do
7808: LD_OWVAR 1
7812: PUSH
7813: LD_INT 31500
7815: LESS
7816: IFFALSE 7876
7818: GO 7820
7820: DISABLE
// begin enable ;
7821: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7822: LD_INT 1
7824: PPUSH
7825: LD_INT 3
7827: PPUSH
7828: CALL_OW 12
7832: PPUSH
7833: LD_INT 1
7835: PPUSH
7836: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7840: LD_INT 1330
7842: PPUSH
7843: LD_INT 2065
7845: PPUSH
7846: CALL_OW 12
7850: PPUSH
7851: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7855: LD_INT 1
7857: PPUSH
7858: LD_INT 4
7860: PPUSH
7861: CALL_OW 12
7865: PPUSH
7866: LD_INT 15
7868: PPUSH
7869: LD_INT 1
7871: PPUSH
7872: CALL_OW 55
// end ; end_of_file
7876: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL 24010 0 1
// if un = JMM then
7886: LD_VAR 0 1
7890: PUSH
7891: LD_EXP 16
7895: EQUAL
7896: IFFALSE 7905
// YouLost ( JMM ) ;
7898: LD_STRING JMM
7900: PPUSH
7901: CALL_OW 104
// if un = Delta then
7905: LD_VAR 0 1
7909: PUSH
7910: LD_EXP 6
7914: EQUAL
7915: IFFALSE 7938
// begin Delta := 0 ;
7917: LD_ADDR_EXP 6
7921: PUSH
7922: LD_INT 0
7924: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7925: LD_INT 0
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: LD_INT 1
7933: PPUSH
7934: CALL_OW 324
// end ; if un in ar_forces then
7938: LD_VAR 0 1
7942: PUSH
7943: LD_EXP 28
7947: IN
7948: IFFALSE 7966
// ar_forces := ar_forces diff un ;
7950: LD_ADDR_EXP 28
7954: PUSH
7955: LD_EXP 28
7959: PUSH
7960: LD_VAR 0 1
7964: DIFF
7965: ST_TO_ADDR
// if un in ap_killers then
7966: LD_VAR 0 1
7970: PUSH
7971: LD_EXP 29
7975: IN
7976: IFFALSE 7994
// ap_killers := ap_killers diff un ;
7978: LD_ADDR_EXP 29
7982: PUSH
7983: LD_EXP 29
7987: PUSH
7988: LD_VAR 0 1
7992: DIFF
7993: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7994: LD_VAR 0 1
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 12
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: LD_INT 25
8014: PUSH
8015: LD_INT 16
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: IN
8032: IFFALSE 8048
// apeKillCounter := apeKillCounter + 1 ;
8034: LD_ADDR_EXP 15
8038: PUSH
8039: LD_EXP 15
8043: PUSH
8044: LD_INT 1
8046: PLUS
8047: ST_TO_ADDR
// end ;
8048: PPOPN 1
8050: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8051: LD_VAR 0 1
8055: PPUSH
8056: LD_VAR 0 2
8060: PPUSH
8061: CALL 24130 0 2
// end ;
8065: PPOPN 2
8067: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8068: LD_VAR 0 1
8072: PUSH
8073: LD_INT 1
8075: EQUAL
8076: PUSH
8077: LD_VAR 0 2
8081: PUSH
8082: LD_INT 2
8084: EQUAL
8085: AND
8086: PUSH
8087: LD_EXP 13
8091: NOT
8092: AND
8093: IFFALSE 8103
// arab_spotted := true ;
8095: LD_ADDR_EXP 13
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// end ;
8103: PPOPN 2
8105: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8106: LD_ADDR_OWVAR 57
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
// end_mission := true ;
8114: LD_ADDR_EXP 14
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// end ;
8122: PPOPN 1
8124: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8125: LD_VAR 0 2
8129: PPUSH
8130: CALL_OW 255
8134: PUSH
8135: LD_INT 1
8137: EQUAL
8138: IFFALSE 8154
// apeman_counter := apeman_counter + 1 ;
8140: LD_ADDR_EXP 12
8144: PUSH
8145: LD_EXP 12
8149: PUSH
8150: LD_INT 1
8152: PLUS
8153: ST_TO_ADDR
// if not first_apeman_tamed then
8154: LD_EXP 8
8158: NOT
8159: IFFALSE 8358
// begin first_apeman_tamed := true ;
8161: LD_ADDR_EXP 8
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if sci = Gladstone then
8169: LD_VAR 0 2
8173: PUSH
8174: LD_EXP 17
8178: EQUAL
8179: IFFALSE 8193
// Say ( Gladstone , D7b-Glad-1 ) ;
8181: LD_EXP 17
8185: PPUSH
8186: LD_STRING D7b-Glad-1
8188: PPUSH
8189: CALL_OW 88
// if sci = Denis then
8193: LD_VAR 0 2
8197: PUSH
8198: LD_EXP 19
8202: EQUAL
8203: IFFALSE 8217
// Say ( Denis , D7a-Den-1 ) ;
8205: LD_EXP 19
8209: PPUSH
8210: LD_STRING D7a-Den-1
8212: PPUSH
8213: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8217: LD_VAR 0 2
8221: PUSH
8222: LD_EXP 16
8226: PUSH
8227: LD_EXP 17
8231: PUSH
8232: LD_EXP 19
8236: PUSH
8237: LD_EXP 22
8241: PUSH
8242: LD_EXP 23
8246: PUSH
8247: LD_EXP 24
8251: PUSH
8252: LD_EXP 25
8256: PUSH
8257: LD_EXP 21
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: IN
8272: NOT
8273: IFFALSE 8316
// begin if GetSex ( sci ) = sex_male then
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 258
8284: PUSH
8285: LD_INT 1
8287: EQUAL
8288: IFFALSE 8304
// Say ( sci , D7c-Sci1-1 ) else
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_STRING D7c-Sci1-1
8297: PPUSH
8298: CALL_OW 88
8302: GO 8316
// Say ( sci , D7c-FSci1-1 ) ;
8304: LD_VAR 0 2
8308: PPUSH
8309: LD_STRING D7c-FSci1-1
8311: PPUSH
8312: CALL_OW 88
// end ; if sci <> Gladstone then
8316: LD_VAR 0 2
8320: PUSH
8321: LD_EXP 17
8325: NONEQUAL
8326: IFFALSE 8340
// Say ( Gladstone , D7c-Glad-1 ) ;
8328: LD_EXP 17
8332: PPUSH
8333: LD_STRING D7c-Glad-1
8335: PPUSH
8336: CALL_OW 88
// if Lisa then
8340: LD_EXP 22
8344: IFFALSE 8358
// Say ( Lisa , D8-Lisa-1 ) ;
8346: LD_EXP 22
8350: PPUSH
8351: LD_STRING D8-Lisa-1
8353: PPUSH
8354: CALL_OW 88
// end ; end ; end_of_file end_of_file
8358: PPOPN 2
8360: END
// every 0 0$1 do
8361: GO 8363
8363: DISABLE
// begin enable ;
8364: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8365: LD_STRING updateTimer(
8367: PUSH
8368: LD_OWVAR 1
8372: STR
8373: PUSH
8374: LD_STRING );
8376: STR
8377: PPUSH
8378: CALL_OW 559
// end ;
8382: END
// export function SOS_MapStart ( ) ; begin
8383: LD_INT 0
8385: PPUSH
// if streamModeActive then
8386: LD_EXP 30
8390: IFFALSE 8399
// DefineStreamItems ( true ) ;
8392: LD_INT 1
8394: PPUSH
8395: CALL 10053 0 1
// UpdateFactoryWaypoints ( ) ;
8399: CALL 22914 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8403: CALL 23171 0 0
// end ;
8407: LD_VAR 0 1
8411: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8412: LD_INT 0
8414: PPUSH
// if p2 = hack_mode then
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 100
8422: EQUAL
8423: IFFALSE 9426
// begin if not StreamModeActive then
8425: LD_EXP 30
8429: NOT
8430: IFFALSE 8440
// StreamModeActive := true ;
8432: LD_ADDR_EXP 30
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 0 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 0
8447: EQUAL
8448: IFFALSE 8454
// InitStreamMode ;
8450: CALL 9589 0 0
// if p3 = 1 then
8454: LD_VAR 0 3
8458: PUSH
8459: LD_INT 1
8461: EQUAL
8462: IFFALSE 8472
// sRocket := true ;
8464: LD_ADDR_EXP 35
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// if p3 = 2 then
8472: LD_VAR 0 3
8476: PUSH
8477: LD_INT 2
8479: EQUAL
8480: IFFALSE 8490
// sSpeed := true ;
8482: LD_ADDR_EXP 34
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// if p3 = 3 then
8490: LD_VAR 0 3
8494: PUSH
8495: LD_INT 3
8497: EQUAL
8498: IFFALSE 8508
// sEngine := true ;
8500: LD_ADDR_EXP 36
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// if p3 = 4 then
8508: LD_VAR 0 3
8512: PUSH
8513: LD_INT 4
8515: EQUAL
8516: IFFALSE 8526
// sSpec := true ;
8518: LD_ADDR_EXP 33
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// if p3 = 5 then
8526: LD_VAR 0 3
8530: PUSH
8531: LD_INT 5
8533: EQUAL
8534: IFFALSE 8544
// sLevel := true ;
8536: LD_ADDR_EXP 37
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// if p3 = 6 then
8544: LD_VAR 0 3
8548: PUSH
8549: LD_INT 6
8551: EQUAL
8552: IFFALSE 8562
// sArmoury := true ;
8554: LD_ADDR_EXP 38
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if p3 = 7 then
8562: LD_VAR 0 3
8566: PUSH
8567: LD_INT 7
8569: EQUAL
8570: IFFALSE 8580
// sRadar := true ;
8572: LD_ADDR_EXP 39
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// if p3 = 8 then
8580: LD_VAR 0 3
8584: PUSH
8585: LD_INT 8
8587: EQUAL
8588: IFFALSE 8598
// sBunker := true ;
8590: LD_ADDR_EXP 40
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// if p3 = 9 then
8598: LD_VAR 0 3
8602: PUSH
8603: LD_INT 9
8605: EQUAL
8606: IFFALSE 8616
// sHack := true ;
8608: LD_ADDR_EXP 41
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// if p3 = 10 then
8616: LD_VAR 0 3
8620: PUSH
8621: LD_INT 10
8623: EQUAL
8624: IFFALSE 8634
// sFire := true ;
8626: LD_ADDR_EXP 42
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// if p3 = 11 then
8634: LD_VAR 0 3
8638: PUSH
8639: LD_INT 11
8641: EQUAL
8642: IFFALSE 8652
// sRefresh := true ;
8644: LD_ADDR_EXP 43
8648: PUSH
8649: LD_INT 1
8651: ST_TO_ADDR
// if p3 = 12 then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_INT 12
8659: EQUAL
8660: IFFALSE 8670
// sExp := true ;
8662: LD_ADDR_EXP 44
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// if p3 = 13 then
8670: LD_VAR 0 3
8674: PUSH
8675: LD_INT 13
8677: EQUAL
8678: IFFALSE 8688
// sDepot := true ;
8680: LD_ADDR_EXP 45
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// if p3 = 14 then
8688: LD_VAR 0 3
8692: PUSH
8693: LD_INT 14
8695: EQUAL
8696: IFFALSE 8706
// sFlag := true ;
8698: LD_ADDR_EXP 46
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// if p3 = 15 then
8706: LD_VAR 0 3
8710: PUSH
8711: LD_INT 15
8713: EQUAL
8714: IFFALSE 8724
// sKamikadze := true ;
8716: LD_ADDR_EXP 54
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
// if p3 = 16 then
8724: LD_VAR 0 3
8728: PUSH
8729: LD_INT 16
8731: EQUAL
8732: IFFALSE 8742
// sTroll := true ;
8734: LD_ADDR_EXP 55
8738: PUSH
8739: LD_INT 1
8741: ST_TO_ADDR
// if p3 = 17 then
8742: LD_VAR 0 3
8746: PUSH
8747: LD_INT 17
8749: EQUAL
8750: IFFALSE 8760
// sSlow := true ;
8752: LD_ADDR_EXP 56
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// if p3 = 18 then
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 18
8767: EQUAL
8768: IFFALSE 8778
// sLack := true ;
8770: LD_ADDR_EXP 57
8774: PUSH
8775: LD_INT 1
8777: ST_TO_ADDR
// if p3 = 19 then
8778: LD_VAR 0 3
8782: PUSH
8783: LD_INT 19
8785: EQUAL
8786: IFFALSE 8796
// sTank := true ;
8788: LD_ADDR_EXP 59
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// if p3 = 20 then
8796: LD_VAR 0 3
8800: PUSH
8801: LD_INT 20
8803: EQUAL
8804: IFFALSE 8814
// sRemote := true ;
8806: LD_ADDR_EXP 60
8810: PUSH
8811: LD_INT 1
8813: ST_TO_ADDR
// if p3 = 21 then
8814: LD_VAR 0 3
8818: PUSH
8819: LD_INT 21
8821: EQUAL
8822: IFFALSE 8832
// sPowell := true ;
8824: LD_ADDR_EXP 61
8828: PUSH
8829: LD_INT 1
8831: ST_TO_ADDR
// if p3 = 22 then
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 22
8839: EQUAL
8840: IFFALSE 8850
// sTeleport := true ;
8842: LD_ADDR_EXP 64
8846: PUSH
8847: LD_INT 1
8849: ST_TO_ADDR
// if p3 = 23 then
8850: LD_VAR 0 3
8854: PUSH
8855: LD_INT 23
8857: EQUAL
8858: IFFALSE 8868
// sOilTower := true ;
8860: LD_ADDR_EXP 66
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// if p3 = 24 then
8868: LD_VAR 0 3
8872: PUSH
8873: LD_INT 24
8875: EQUAL
8876: IFFALSE 8886
// sShovel := true ;
8878: LD_ADDR_EXP 67
8882: PUSH
8883: LD_INT 1
8885: ST_TO_ADDR
// if p3 = 25 then
8886: LD_VAR 0 3
8890: PUSH
8891: LD_INT 25
8893: EQUAL
8894: IFFALSE 8904
// sSheik := true ;
8896: LD_ADDR_EXP 68
8900: PUSH
8901: LD_INT 1
8903: ST_TO_ADDR
// if p3 = 26 then
8904: LD_VAR 0 3
8908: PUSH
8909: LD_INT 26
8911: EQUAL
8912: IFFALSE 8922
// sEarthquake := true ;
8914: LD_ADDR_EXP 70
8918: PUSH
8919: LD_INT 1
8921: ST_TO_ADDR
// if p3 = 27 then
8922: LD_VAR 0 3
8926: PUSH
8927: LD_INT 27
8929: EQUAL
8930: IFFALSE 8940
// sAI := true ;
8932: LD_ADDR_EXP 71
8936: PUSH
8937: LD_INT 1
8939: ST_TO_ADDR
// if p3 = 28 then
8940: LD_VAR 0 3
8944: PUSH
8945: LD_INT 28
8947: EQUAL
8948: IFFALSE 8958
// sCargo := true ;
8950: LD_ADDR_EXP 74
8954: PUSH
8955: LD_INT 1
8957: ST_TO_ADDR
// if p3 = 29 then
8958: LD_VAR 0 3
8962: PUSH
8963: LD_INT 29
8965: EQUAL
8966: IFFALSE 8976
// sDLaser := true ;
8968: LD_ADDR_EXP 75
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// if p3 = 30 then
8976: LD_VAR 0 3
8980: PUSH
8981: LD_INT 30
8983: EQUAL
8984: IFFALSE 8994
// sExchange := true ;
8986: LD_ADDR_EXP 76
8990: PUSH
8991: LD_INT 1
8993: ST_TO_ADDR
// if p3 = 31 then
8994: LD_VAR 0 3
8998: PUSH
8999: LD_INT 31
9001: EQUAL
9002: IFFALSE 9012
// sFac := true ;
9004: LD_ADDR_EXP 77
9008: PUSH
9009: LD_INT 1
9011: ST_TO_ADDR
// if p3 = 32 then
9012: LD_VAR 0 3
9016: PUSH
9017: LD_INT 32
9019: EQUAL
9020: IFFALSE 9030
// sPower := true ;
9022: LD_ADDR_EXP 78
9026: PUSH
9027: LD_INT 1
9029: ST_TO_ADDR
// if p3 = 33 then
9030: LD_VAR 0 3
9034: PUSH
9035: LD_INT 33
9037: EQUAL
9038: IFFALSE 9048
// sRandom := true ;
9040: LD_ADDR_EXP 79
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// if p3 = 34 then
9048: LD_VAR 0 3
9052: PUSH
9053: LD_INT 34
9055: EQUAL
9056: IFFALSE 9066
// sShield := true ;
9058: LD_ADDR_EXP 80
9062: PUSH
9063: LD_INT 1
9065: ST_TO_ADDR
// if p3 = 35 then
9066: LD_VAR 0 3
9070: PUSH
9071: LD_INT 35
9073: EQUAL
9074: IFFALSE 9084
// sTime := true ;
9076: LD_ADDR_EXP 81
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// if p3 = 36 then
9084: LD_VAR 0 3
9088: PUSH
9089: LD_INT 36
9091: EQUAL
9092: IFFALSE 9102
// sTools := true ;
9094: LD_ADDR_EXP 82
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// if p3 = 101 then
9102: LD_VAR 0 3
9106: PUSH
9107: LD_INT 101
9109: EQUAL
9110: IFFALSE 9120
// sSold := true ;
9112: LD_ADDR_EXP 47
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// if p3 = 102 then
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 102
9127: EQUAL
9128: IFFALSE 9138
// sDiff := true ;
9130: LD_ADDR_EXP 48
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// if p3 = 103 then
9138: LD_VAR 0 3
9142: PUSH
9143: LD_INT 103
9145: EQUAL
9146: IFFALSE 9156
// sFog := true ;
9148: LD_ADDR_EXP 51
9152: PUSH
9153: LD_INT 1
9155: ST_TO_ADDR
// if p3 = 104 then
9156: LD_VAR 0 3
9160: PUSH
9161: LD_INT 104
9163: EQUAL
9164: IFFALSE 9174
// sReset := true ;
9166: LD_ADDR_EXP 52
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// if p3 = 105 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 105
9181: EQUAL
9182: IFFALSE 9192
// sSun := true ;
9184: LD_ADDR_EXP 53
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// if p3 = 106 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 106
9199: EQUAL
9200: IFFALSE 9210
// sTiger := true ;
9202: LD_ADDR_EXP 49
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if p3 = 107 then
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 107
9217: EQUAL
9218: IFFALSE 9228
// sBomb := true ;
9220: LD_ADDR_EXP 50
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// if p3 = 108 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 108
9235: EQUAL
9236: IFFALSE 9246
// sWound := true ;
9238: LD_ADDR_EXP 58
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
// if p3 = 109 then
9246: LD_VAR 0 3
9250: PUSH
9251: LD_INT 109
9253: EQUAL
9254: IFFALSE 9264
// sBetray := true ;
9256: LD_ADDR_EXP 62
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// if p3 = 110 then
9264: LD_VAR 0 3
9268: PUSH
9269: LD_INT 110
9271: EQUAL
9272: IFFALSE 9282
// sContamin := true ;
9274: LD_ADDR_EXP 63
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// if p3 = 111 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 111
9289: EQUAL
9290: IFFALSE 9300
// sOil := true ;
9292: LD_ADDR_EXP 65
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// if p3 = 112 then
9300: LD_VAR 0 3
9304: PUSH
9305: LD_INT 112
9307: EQUAL
9308: IFFALSE 9318
// sStu := true ;
9310: LD_ADDR_EXP 69
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// if p3 = 113 then
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 113
9325: EQUAL
9326: IFFALSE 9336
// sBazooka := true ;
9328: LD_ADDR_EXP 72
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// if p3 = 114 then
9336: LD_VAR 0 3
9340: PUSH
9341: LD_INT 114
9343: EQUAL
9344: IFFALSE 9354
// sMortar := true ;
9346: LD_ADDR_EXP 73
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// if p3 = 115 then
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 115
9361: EQUAL
9362: IFFALSE 9372
// sRanger := true ;
9364: LD_ADDR_EXP 83
9368: PUSH
9369: LD_INT 1
9371: ST_TO_ADDR
// if p3 = 116 then
9372: LD_VAR 0 3
9376: PUSH
9377: LD_INT 116
9379: EQUAL
9380: IFFALSE 9390
// sComputer := true ;
9382: LD_ADDR_EXP 84
9386: PUSH
9387: LD_INT 1
9389: ST_TO_ADDR
// if p3 = 117 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 117
9397: EQUAL
9398: IFFALSE 9408
// s30 := true ;
9400: LD_ADDR_EXP 85
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if p3 = 118 then
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 118
9415: EQUAL
9416: IFFALSE 9426
// s60 := true ;
9418: LD_ADDR_EXP 86
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// end ; if p2 = stream_mode then
9426: LD_VAR 0 2
9430: PUSH
9431: LD_INT 101
9433: EQUAL
9434: IFFALSE 9562
// begin case p3 of 1 :
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 1
9443: DOUBLE
9444: EQUAL
9445: IFTRUE 9449
9447: GO 9456
9449: POP
// hHackUnlimitedResources ; 2 :
9450: CALL 21660 0 0
9454: GO 9562
9456: LD_INT 2
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9471
9464: POP
// hHackSetLevel10 ; 3 :
9465: CALL 21793 0 0
9469: GO 9562
9471: LD_INT 3
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9486
9479: POP
// hHackSetLevel10YourUnits ; 4 :
9480: CALL 21878 0 0
9484: GO 9562
9486: LD_INT 4
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9501
9494: POP
// hHackInvincible ; 5 :
9495: CALL 22326 0 0
9499: GO 9562
9501: LD_INT 5
9503: DOUBLE
9504: EQUAL
9505: IFTRUE 9509
9507: GO 9516
9509: POP
// hHackInvisible ; 6 :
9510: CALL 22437 0 0
9514: GO 9562
9516: LD_INT 6
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9531
9524: POP
// hHackChangeYourSide ; 7 :
9525: CALL 22494 0 0
9529: GO 9562
9531: LD_INT 7
9533: DOUBLE
9534: EQUAL
9535: IFTRUE 9539
9537: GO 9546
9539: POP
// hHackChangeUnitSide ; 8 :
9540: CALL 22536 0 0
9544: GO 9562
9546: LD_INT 8
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9561
9554: POP
// hHackFog ; end ;
9555: CALL 22637 0 0
9559: GO 9562
9561: POP
// end ; end ;
9562: LD_VAR 0 7
9566: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9567: GO 9569
9569: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9570: LD_STRING initStreamRollete();
9572: PPUSH
9573: CALL_OW 559
// InitStreamMode ;
9577: CALL 9589 0 0
// DefineStreamItems ( false ) ;
9581: LD_INT 0
9583: PPUSH
9584: CALL 10053 0 1
// end ;
9588: END
// function InitStreamMode ; begin
9589: LD_INT 0
9591: PPUSH
// streamModeActive := false ;
9592: LD_ADDR_EXP 30
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// normalCounter := 36 ;
9600: LD_ADDR_EXP 31
9604: PUSH
9605: LD_INT 36
9607: ST_TO_ADDR
// hardcoreCounter := 18 ;
9608: LD_ADDR_EXP 32
9612: PUSH
9613: LD_INT 18
9615: ST_TO_ADDR
// sRocket := false ;
9616: LD_ADDR_EXP 35
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// sSpeed := false ;
9624: LD_ADDR_EXP 34
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// sEngine := false ;
9632: LD_ADDR_EXP 36
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// sSpec := false ;
9640: LD_ADDR_EXP 33
9644: PUSH
9645: LD_INT 0
9647: ST_TO_ADDR
// sLevel := false ;
9648: LD_ADDR_EXP 37
9652: PUSH
9653: LD_INT 0
9655: ST_TO_ADDR
// sArmoury := false ;
9656: LD_ADDR_EXP 38
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// sRadar := false ;
9664: LD_ADDR_EXP 39
9668: PUSH
9669: LD_INT 0
9671: ST_TO_ADDR
// sBunker := false ;
9672: LD_ADDR_EXP 40
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// sHack := false ;
9680: LD_ADDR_EXP 41
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// sFire := false ;
9688: LD_ADDR_EXP 42
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// sRefresh := false ;
9696: LD_ADDR_EXP 43
9700: PUSH
9701: LD_INT 0
9703: ST_TO_ADDR
// sExp := false ;
9704: LD_ADDR_EXP 44
9708: PUSH
9709: LD_INT 0
9711: ST_TO_ADDR
// sDepot := false ;
9712: LD_ADDR_EXP 45
9716: PUSH
9717: LD_INT 0
9719: ST_TO_ADDR
// sFlag := false ;
9720: LD_ADDR_EXP 46
9724: PUSH
9725: LD_INT 0
9727: ST_TO_ADDR
// sKamikadze := false ;
9728: LD_ADDR_EXP 54
9732: PUSH
9733: LD_INT 0
9735: ST_TO_ADDR
// sTroll := false ;
9736: LD_ADDR_EXP 55
9740: PUSH
9741: LD_INT 0
9743: ST_TO_ADDR
// sSlow := false ;
9744: LD_ADDR_EXP 56
9748: PUSH
9749: LD_INT 0
9751: ST_TO_ADDR
// sLack := false ;
9752: LD_ADDR_EXP 57
9756: PUSH
9757: LD_INT 0
9759: ST_TO_ADDR
// sTank := false ;
9760: LD_ADDR_EXP 59
9764: PUSH
9765: LD_INT 0
9767: ST_TO_ADDR
// sRemote := false ;
9768: LD_ADDR_EXP 60
9772: PUSH
9773: LD_INT 0
9775: ST_TO_ADDR
// sPowell := false ;
9776: LD_ADDR_EXP 61
9780: PUSH
9781: LD_INT 0
9783: ST_TO_ADDR
// sTeleport := false ;
9784: LD_ADDR_EXP 64
9788: PUSH
9789: LD_INT 0
9791: ST_TO_ADDR
// sOilTower := false ;
9792: LD_ADDR_EXP 66
9796: PUSH
9797: LD_INT 0
9799: ST_TO_ADDR
// sShovel := false ;
9800: LD_ADDR_EXP 67
9804: PUSH
9805: LD_INT 0
9807: ST_TO_ADDR
// sSheik := false ;
9808: LD_ADDR_EXP 68
9812: PUSH
9813: LD_INT 0
9815: ST_TO_ADDR
// sEarthquake := false ;
9816: LD_ADDR_EXP 70
9820: PUSH
9821: LD_INT 0
9823: ST_TO_ADDR
// sAI := false ;
9824: LD_ADDR_EXP 71
9828: PUSH
9829: LD_INT 0
9831: ST_TO_ADDR
// sCargo := false ;
9832: LD_ADDR_EXP 74
9836: PUSH
9837: LD_INT 0
9839: ST_TO_ADDR
// sDLaser := false ;
9840: LD_ADDR_EXP 75
9844: PUSH
9845: LD_INT 0
9847: ST_TO_ADDR
// sExchange := false ;
9848: LD_ADDR_EXP 76
9852: PUSH
9853: LD_INT 0
9855: ST_TO_ADDR
// sFac := false ;
9856: LD_ADDR_EXP 77
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// sPower := false ;
9864: LD_ADDR_EXP 78
9868: PUSH
9869: LD_INT 0
9871: ST_TO_ADDR
// sRandom := false ;
9872: LD_ADDR_EXP 79
9876: PUSH
9877: LD_INT 0
9879: ST_TO_ADDR
// sShield := false ;
9880: LD_ADDR_EXP 80
9884: PUSH
9885: LD_INT 0
9887: ST_TO_ADDR
// sTime := false ;
9888: LD_ADDR_EXP 81
9892: PUSH
9893: LD_INT 0
9895: ST_TO_ADDR
// sTools := false ;
9896: LD_ADDR_EXP 82
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// sSold := false ;
9904: LD_ADDR_EXP 47
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// sDiff := false ;
9912: LD_ADDR_EXP 48
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// sFog := false ;
9920: LD_ADDR_EXP 51
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// sReset := false ;
9928: LD_ADDR_EXP 52
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// sSun := false ;
9936: LD_ADDR_EXP 53
9940: PUSH
9941: LD_INT 0
9943: ST_TO_ADDR
// sTiger := false ;
9944: LD_ADDR_EXP 49
9948: PUSH
9949: LD_INT 0
9951: ST_TO_ADDR
// sBomb := false ;
9952: LD_ADDR_EXP 50
9956: PUSH
9957: LD_INT 0
9959: ST_TO_ADDR
// sWound := false ;
9960: LD_ADDR_EXP 58
9964: PUSH
9965: LD_INT 0
9967: ST_TO_ADDR
// sBetray := false ;
9968: LD_ADDR_EXP 62
9972: PUSH
9973: LD_INT 0
9975: ST_TO_ADDR
// sContamin := false ;
9976: LD_ADDR_EXP 63
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// sOil := false ;
9984: LD_ADDR_EXP 65
9988: PUSH
9989: LD_INT 0
9991: ST_TO_ADDR
// sStu := false ;
9992: LD_ADDR_EXP 69
9996: PUSH
9997: LD_INT 0
9999: ST_TO_ADDR
// sBazooka := false ;
10000: LD_ADDR_EXP 72
10004: PUSH
10005: LD_INT 0
10007: ST_TO_ADDR
// sMortar := false ;
10008: LD_ADDR_EXP 73
10012: PUSH
10013: LD_INT 0
10015: ST_TO_ADDR
// sRanger := false ;
10016: LD_ADDR_EXP 83
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// sComputer := false ;
10024: LD_ADDR_EXP 84
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// s30 := false ;
10032: LD_ADDR_EXP 85
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// s60 := false ;
10040: LD_ADDR_EXP 86
10044: PUSH
10045: LD_INT 0
10047: ST_TO_ADDR
// end ;
10048: LD_VAR 0 1
10052: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10053: LD_INT 0
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
10059: PPUSH
10060: PPUSH
10061: PPUSH
// result := [ ] ;
10062: LD_ADDR_VAR 0 2
10066: PUSH
10067: EMPTY
10068: ST_TO_ADDR
// if campaign_id = 1 then
10069: LD_OWVAR 69
10073: PUSH
10074: LD_INT 1
10076: EQUAL
10077: IFFALSE 13243
// begin case mission_number of 1 :
10079: LD_OWVAR 70
10083: PUSH
10084: LD_INT 1
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10168
10092: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10093: LD_ADDR_VAR 0 2
10097: PUSH
10098: LD_INT 2
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: LD_INT 11
10106: PUSH
10107: LD_INT 12
10109: PUSH
10110: LD_INT 15
10112: PUSH
10113: LD_INT 16
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 26
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 101
10138: PUSH
10139: LD_INT 102
10141: PUSH
10142: LD_INT 106
10144: PUSH
10145: LD_INT 116
10147: PUSH
10148: LD_INT 117
10150: PUSH
10151: LD_INT 118
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: ST_TO_ADDR
10166: GO 13241
10168: LD_INT 2
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10260
10176: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10177: LD_ADDR_VAR 0 2
10181: PUSH
10182: LD_INT 2
10184: PUSH
10185: LD_INT 4
10187: PUSH
10188: LD_INT 11
10190: PUSH
10191: LD_INT 12
10193: PUSH
10194: LD_INT 15
10196: PUSH
10197: LD_INT 16
10199: PUSH
10200: LD_INT 22
10202: PUSH
10203: LD_INT 23
10205: PUSH
10206: LD_INT 26
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 101
10222: PUSH
10223: LD_INT 102
10225: PUSH
10226: LD_INT 105
10228: PUSH
10229: LD_INT 106
10231: PUSH
10232: LD_INT 108
10234: PUSH
10235: LD_INT 116
10237: PUSH
10238: LD_INT 117
10240: PUSH
10241: LD_INT 118
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: ST_TO_ADDR
10258: GO 13241
10260: LD_INT 3
10262: DOUBLE
10263: EQUAL
10264: IFTRUE 10268
10266: GO 10356
10268: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10269: LD_ADDR_VAR 0 2
10273: PUSH
10274: LD_INT 2
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 5
10282: PUSH
10283: LD_INT 11
10285: PUSH
10286: LD_INT 12
10288: PUSH
10289: LD_INT 15
10291: PUSH
10292: LD_INT 16
10294: PUSH
10295: LD_INT 22
10297: PUSH
10298: LD_INT 26
10300: PUSH
10301: LD_INT 36
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 101
10318: PUSH
10319: LD_INT 102
10321: PUSH
10322: LD_INT 105
10324: PUSH
10325: LD_INT 106
10327: PUSH
10328: LD_INT 108
10330: PUSH
10331: LD_INT 116
10333: PUSH
10334: LD_INT 117
10336: PUSH
10337: LD_INT 118
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: ST_TO_ADDR
10354: GO 13241
10356: LD_INT 4
10358: DOUBLE
10359: EQUAL
10360: IFTRUE 10364
10362: GO 10460
10364: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10365: LD_ADDR_VAR 0 2
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: LD_INT 4
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 8
10381: PUSH
10382: LD_INT 11
10384: PUSH
10385: LD_INT 12
10387: PUSH
10388: LD_INT 15
10390: PUSH
10391: LD_INT 16
10393: PUSH
10394: LD_INT 22
10396: PUSH
10397: LD_INT 23
10399: PUSH
10400: LD_INT 26
10402: PUSH
10403: LD_INT 36
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 101
10422: PUSH
10423: LD_INT 102
10425: PUSH
10426: LD_INT 105
10428: PUSH
10429: LD_INT 106
10431: PUSH
10432: LD_INT 108
10434: PUSH
10435: LD_INT 116
10437: PUSH
10438: LD_INT 117
10440: PUSH
10441: LD_INT 118
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: ST_TO_ADDR
10458: GO 13241
10460: LD_INT 5
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10580
10468: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10469: LD_ADDR_VAR 0 2
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: LD_INT 4
10479: PUSH
10480: LD_INT 5
10482: PUSH
10483: LD_INT 6
10485: PUSH
10486: LD_INT 8
10488: PUSH
10489: LD_INT 11
10491: PUSH
10492: LD_INT 12
10494: PUSH
10495: LD_INT 15
10497: PUSH
10498: LD_INT 16
10500: PUSH
10501: LD_INT 22
10503: PUSH
10504: LD_INT 23
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 26
10512: PUSH
10513: LD_INT 36
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 101
10534: PUSH
10535: LD_INT 102
10537: PUSH
10538: LD_INT 105
10540: PUSH
10541: LD_INT 106
10543: PUSH
10544: LD_INT 108
10546: PUSH
10547: LD_INT 109
10549: PUSH
10550: LD_INT 112
10552: PUSH
10553: LD_INT 116
10555: PUSH
10556: LD_INT 117
10558: PUSH
10559: LD_INT 118
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: ST_TO_ADDR
10578: GO 13241
10580: LD_INT 6
10582: DOUBLE
10583: EQUAL
10584: IFTRUE 10588
10586: GO 10720
10588: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: LD_INT 4
10599: PUSH
10600: LD_INT 5
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: LD_INT 8
10608: PUSH
10609: LD_INT 11
10611: PUSH
10612: LD_INT 12
10614: PUSH
10615: LD_INT 15
10617: PUSH
10618: LD_INT 16
10620: PUSH
10621: LD_INT 20
10623: PUSH
10624: LD_INT 21
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_INT 23
10632: PUSH
10633: LD_INT 25
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 30
10641: PUSH
10642: LD_INT 31
10644: PUSH
10645: LD_INT 32
10647: PUSH
10648: LD_INT 36
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 101
10674: PUSH
10675: LD_INT 102
10677: PUSH
10678: LD_INT 105
10680: PUSH
10681: LD_INT 106
10683: PUSH
10684: LD_INT 108
10686: PUSH
10687: LD_INT 109
10689: PUSH
10690: LD_INT 112
10692: PUSH
10693: LD_INT 116
10695: PUSH
10696: LD_INT 117
10698: PUSH
10699: LD_INT 118
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: ST_TO_ADDR
10718: GO 13241
10720: LD_INT 7
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10840
10728: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 4
10739: PUSH
10740: LD_INT 5
10742: PUSH
10743: LD_INT 7
10745: PUSH
10746: LD_INT 11
10748: PUSH
10749: LD_INT 12
10751: PUSH
10752: LD_INT 15
10754: PUSH
10755: LD_INT 16
10757: PUSH
10758: LD_INT 20
10760: PUSH
10761: LD_INT 21
10763: PUSH
10764: LD_INT 22
10766: PUSH
10767: LD_INT 23
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 26
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 101
10794: PUSH
10795: LD_INT 102
10797: PUSH
10798: LD_INT 103
10800: PUSH
10801: LD_INT 105
10803: PUSH
10804: LD_INT 106
10806: PUSH
10807: LD_INT 108
10809: PUSH
10810: LD_INT 112
10812: PUSH
10813: LD_INT 116
10815: PUSH
10816: LD_INT 117
10818: PUSH
10819: LD_INT 118
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: ST_TO_ADDR
10838: GO 13241
10840: LD_INT 8
10842: DOUBLE
10843: EQUAL
10844: IFTRUE 10848
10846: GO 10988
10848: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10849: LD_ADDR_VAR 0 2
10853: PUSH
10854: LD_INT 2
10856: PUSH
10857: LD_INT 4
10859: PUSH
10860: LD_INT 5
10862: PUSH
10863: LD_INT 6
10865: PUSH
10866: LD_INT 7
10868: PUSH
10869: LD_INT 8
10871: PUSH
10872: LD_INT 11
10874: PUSH
10875: LD_INT 12
10877: PUSH
10878: LD_INT 15
10880: PUSH
10881: LD_INT 16
10883: PUSH
10884: LD_INT 20
10886: PUSH
10887: LD_INT 21
10889: PUSH
10890: LD_INT 22
10892: PUSH
10893: LD_INT 23
10895: PUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 26
10901: PUSH
10902: LD_INT 30
10904: PUSH
10905: LD_INT 31
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: LD_INT 36
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 101
10938: PUSH
10939: LD_INT 102
10941: PUSH
10942: LD_INT 103
10944: PUSH
10945: LD_INT 105
10947: PUSH
10948: LD_INT 106
10950: PUSH
10951: LD_INT 108
10953: PUSH
10954: LD_INT 109
10956: PUSH
10957: LD_INT 112
10959: PUSH
10960: LD_INT 116
10962: PUSH
10963: LD_INT 117
10965: PUSH
10966: LD_INT 118
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: ST_TO_ADDR
10986: GO 13241
10988: LD_INT 9
10990: DOUBLE
10991: EQUAL
10992: IFTRUE 10996
10994: GO 11144
10996: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10997: LD_ADDR_VAR 0 2
11001: PUSH
11002: LD_INT 2
11004: PUSH
11005: LD_INT 4
11007: PUSH
11008: LD_INT 5
11010: PUSH
11011: LD_INT 6
11013: PUSH
11014: LD_INT 7
11016: PUSH
11017: LD_INT 8
11019: PUSH
11020: LD_INT 11
11022: PUSH
11023: LD_INT 12
11025: PUSH
11026: LD_INT 15
11028: PUSH
11029: LD_INT 16
11031: PUSH
11032: LD_INT 20
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 22
11040: PUSH
11041: LD_INT 23
11043: PUSH
11044: LD_INT 25
11046: PUSH
11047: LD_INT 26
11049: PUSH
11050: LD_INT 28
11052: PUSH
11053: LD_INT 30
11055: PUSH
11056: LD_INT 31
11058: PUSH
11059: LD_INT 32
11061: PUSH
11062: LD_INT 36
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 102
11093: PUSH
11094: LD_INT 103
11096: PUSH
11097: LD_INT 105
11099: PUSH
11100: LD_INT 106
11102: PUSH
11103: LD_INT 108
11105: PUSH
11106: LD_INT 109
11108: PUSH
11109: LD_INT 112
11111: PUSH
11112: LD_INT 114
11114: PUSH
11115: LD_INT 116
11117: PUSH
11118: LD_INT 117
11120: PUSH
11121: LD_INT 118
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: ST_TO_ADDR
11142: GO 13241
11144: LD_INT 10
11146: DOUBLE
11147: EQUAL
11148: IFTRUE 11152
11150: GO 11348
11152: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: LD_INT 2
11160: PUSH
11161: LD_INT 4
11163: PUSH
11164: LD_INT 5
11166: PUSH
11167: LD_INT 6
11169: PUSH
11170: LD_INT 7
11172: PUSH
11173: LD_INT 8
11175: PUSH
11176: LD_INT 9
11178: PUSH
11179: LD_INT 10
11181: PUSH
11182: LD_INT 11
11184: PUSH
11185: LD_INT 12
11187: PUSH
11188: LD_INT 13
11190: PUSH
11191: LD_INT 14
11193: PUSH
11194: LD_INT 15
11196: PUSH
11197: LD_INT 16
11199: PUSH
11200: LD_INT 17
11202: PUSH
11203: LD_INT 18
11205: PUSH
11206: LD_INT 19
11208: PUSH
11209: LD_INT 20
11211: PUSH
11212: LD_INT 21
11214: PUSH
11215: LD_INT 22
11217: PUSH
11218: LD_INT 23
11220: PUSH
11221: LD_INT 24
11223: PUSH
11224: LD_INT 25
11226: PUSH
11227: LD_INT 26
11229: PUSH
11230: LD_INT 28
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: LD_INT 31
11238: PUSH
11239: LD_INT 32
11241: PUSH
11242: LD_INT 36
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 101
11278: PUSH
11279: LD_INT 102
11281: PUSH
11282: LD_INT 103
11284: PUSH
11285: LD_INT 104
11287: PUSH
11288: LD_INT 105
11290: PUSH
11291: LD_INT 106
11293: PUSH
11294: LD_INT 107
11296: PUSH
11297: LD_INT 108
11299: PUSH
11300: LD_INT 109
11302: PUSH
11303: LD_INT 110
11305: PUSH
11306: LD_INT 111
11308: PUSH
11309: LD_INT 112
11311: PUSH
11312: LD_INT 114
11314: PUSH
11315: LD_INT 116
11317: PUSH
11318: LD_INT 117
11320: PUSH
11321: LD_INT 118
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: ST_TO_ADDR
11346: GO 13241
11348: LD_INT 11
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11560
11356: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 3
11367: PUSH
11368: LD_INT 4
11370: PUSH
11371: LD_INT 5
11373: PUSH
11374: LD_INT 6
11376: PUSH
11377: LD_INT 7
11379: PUSH
11380: LD_INT 8
11382: PUSH
11383: LD_INT 9
11385: PUSH
11386: LD_INT 10
11388: PUSH
11389: LD_INT 11
11391: PUSH
11392: LD_INT 12
11394: PUSH
11395: LD_INT 13
11397: PUSH
11398: LD_INT 14
11400: PUSH
11401: LD_INT 15
11403: PUSH
11404: LD_INT 16
11406: PUSH
11407: LD_INT 17
11409: PUSH
11410: LD_INT 18
11412: PUSH
11413: LD_INT 19
11415: PUSH
11416: LD_INT 20
11418: PUSH
11419: LD_INT 21
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_INT 23
11427: PUSH
11428: LD_INT 24
11430: PUSH
11431: LD_INT 25
11433: PUSH
11434: LD_INT 26
11436: PUSH
11437: LD_INT 28
11439: PUSH
11440: LD_INT 30
11442: PUSH
11443: LD_INT 31
11445: PUSH
11446: LD_INT 32
11448: PUSH
11449: LD_INT 34
11451: PUSH
11452: LD_INT 36
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 101
11490: PUSH
11491: LD_INT 102
11493: PUSH
11494: LD_INT 103
11496: PUSH
11497: LD_INT 104
11499: PUSH
11500: LD_INT 105
11502: PUSH
11503: LD_INT 106
11505: PUSH
11506: LD_INT 107
11508: PUSH
11509: LD_INT 108
11511: PUSH
11512: LD_INT 109
11514: PUSH
11515: LD_INT 110
11517: PUSH
11518: LD_INT 111
11520: PUSH
11521: LD_INT 112
11523: PUSH
11524: LD_INT 114
11526: PUSH
11527: LD_INT 116
11529: PUSH
11530: LD_INT 117
11532: PUSH
11533: LD_INT 118
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: ST_TO_ADDR
11558: GO 13241
11560: LD_INT 12
11562: DOUBLE
11563: EQUAL
11564: IFTRUE 11568
11566: GO 11788
11568: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 6
11591: PUSH
11592: LD_INT 7
11594: PUSH
11595: LD_INT 8
11597: PUSH
11598: LD_INT 9
11600: PUSH
11601: LD_INT 10
11603: PUSH
11604: LD_INT 11
11606: PUSH
11607: LD_INT 12
11609: PUSH
11610: LD_INT 13
11612: PUSH
11613: LD_INT 14
11615: PUSH
11616: LD_INT 15
11618: PUSH
11619: LD_INT 16
11621: PUSH
11622: LD_INT 17
11624: PUSH
11625: LD_INT 18
11627: PUSH
11628: LD_INT 19
11630: PUSH
11631: LD_INT 20
11633: PUSH
11634: LD_INT 21
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 23
11642: PUSH
11643: LD_INT 24
11645: PUSH
11646: LD_INT 25
11648: PUSH
11649: LD_INT 26
11651: PUSH
11652: LD_INT 27
11654: PUSH
11655: LD_INT 28
11657: PUSH
11658: LD_INT 30
11660: PUSH
11661: LD_INT 31
11663: PUSH
11664: LD_INT 32
11666: PUSH
11667: LD_INT 33
11669: PUSH
11670: LD_INT 34
11672: PUSH
11673: LD_INT 36
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 101
11714: PUSH
11715: LD_INT 102
11717: PUSH
11718: LD_INT 103
11720: PUSH
11721: LD_INT 104
11723: PUSH
11724: LD_INT 105
11726: PUSH
11727: LD_INT 106
11729: PUSH
11730: LD_INT 107
11732: PUSH
11733: LD_INT 108
11735: PUSH
11736: LD_INT 109
11738: PUSH
11739: LD_INT 110
11741: PUSH
11742: LD_INT 111
11744: PUSH
11745: LD_INT 112
11747: PUSH
11748: LD_INT 113
11750: PUSH
11751: LD_INT 114
11753: PUSH
11754: LD_INT 116
11756: PUSH
11757: LD_INT 117
11759: PUSH
11760: LD_INT 118
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: ST_TO_ADDR
11786: GO 13241
11788: LD_INT 13
11790: DOUBLE
11791: EQUAL
11792: IFTRUE 11796
11794: GO 12004
11796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: LD_INT 1
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 4
11813: PUSH
11814: LD_INT 5
11816: PUSH
11817: LD_INT 8
11819: PUSH
11820: LD_INT 9
11822: PUSH
11823: LD_INT 10
11825: PUSH
11826: LD_INT 11
11828: PUSH
11829: LD_INT 12
11831: PUSH
11832: LD_INT 14
11834: PUSH
11835: LD_INT 15
11837: PUSH
11838: LD_INT 16
11840: PUSH
11841: LD_INT 17
11843: PUSH
11844: LD_INT 18
11846: PUSH
11847: LD_INT 19
11849: PUSH
11850: LD_INT 20
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: LD_INT 24
11864: PUSH
11865: LD_INT 25
11867: PUSH
11868: LD_INT 26
11870: PUSH
11871: LD_INT 27
11873: PUSH
11874: LD_INT 28
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 31
11882: PUSH
11883: LD_INT 32
11885: PUSH
11886: LD_INT 33
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 36
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 101
11930: PUSH
11931: LD_INT 102
11933: PUSH
11934: LD_INT 103
11936: PUSH
11937: LD_INT 104
11939: PUSH
11940: LD_INT 105
11942: PUSH
11943: LD_INT 106
11945: PUSH
11946: LD_INT 107
11948: PUSH
11949: LD_INT 108
11951: PUSH
11952: LD_INT 109
11954: PUSH
11955: LD_INT 110
11957: PUSH
11958: LD_INT 111
11960: PUSH
11961: LD_INT 112
11963: PUSH
11964: LD_INT 113
11966: PUSH
11967: LD_INT 114
11969: PUSH
11970: LD_INT 116
11972: PUSH
11973: LD_INT 117
11975: PUSH
11976: LD_INT 118
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: ST_TO_ADDR
12002: GO 13241
12004: LD_INT 14
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12236
12012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12013: LD_ADDR_VAR 0 2
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: LD_INT 2
12023: PUSH
12024: LD_INT 3
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: LD_INT 5
12032: PUSH
12033: LD_INT 6
12035: PUSH
12036: LD_INT 7
12038: PUSH
12039: LD_INT 8
12041: PUSH
12042: LD_INT 9
12044: PUSH
12045: LD_INT 10
12047: PUSH
12048: LD_INT 11
12050: PUSH
12051: LD_INT 12
12053: PUSH
12054: LD_INT 13
12056: PUSH
12057: LD_INT 14
12059: PUSH
12060: LD_INT 15
12062: PUSH
12063: LD_INT 16
12065: PUSH
12066: LD_INT 17
12068: PUSH
12069: LD_INT 18
12071: PUSH
12072: LD_INT 19
12074: PUSH
12075: LD_INT 20
12077: PUSH
12078: LD_INT 21
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: LD_INT 23
12086: PUSH
12087: LD_INT 24
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 26
12095: PUSH
12096: LD_INT 27
12098: PUSH
12099: LD_INT 28
12101: PUSH
12102: LD_INT 29
12104: PUSH
12105: LD_INT 30
12107: PUSH
12108: LD_INT 31
12110: PUSH
12111: LD_INT 32
12113: PUSH
12114: LD_INT 33
12116: PUSH
12117: LD_INT 34
12119: PUSH
12120: LD_INT 36
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 101
12162: PUSH
12163: LD_INT 102
12165: PUSH
12166: LD_INT 103
12168: PUSH
12169: LD_INT 104
12171: PUSH
12172: LD_INT 105
12174: PUSH
12175: LD_INT 106
12177: PUSH
12178: LD_INT 107
12180: PUSH
12181: LD_INT 108
12183: PUSH
12184: LD_INT 109
12186: PUSH
12187: LD_INT 110
12189: PUSH
12190: LD_INT 111
12192: PUSH
12193: LD_INT 112
12195: PUSH
12196: LD_INT 113
12198: PUSH
12199: LD_INT 114
12201: PUSH
12202: LD_INT 116
12204: PUSH
12205: LD_INT 117
12207: PUSH
12208: LD_INT 118
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: ST_TO_ADDR
12234: GO 13241
12236: LD_INT 15
12238: DOUBLE
12239: EQUAL
12240: IFTRUE 12244
12242: GO 12468
12244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: LD_INT 1
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 4
12261: PUSH
12262: LD_INT 5
12264: PUSH
12265: LD_INT 6
12267: PUSH
12268: LD_INT 7
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: LD_INT 9
12276: PUSH
12277: LD_INT 10
12279: PUSH
12280: LD_INT 11
12282: PUSH
12283: LD_INT 12
12285: PUSH
12286: LD_INT 13
12288: PUSH
12289: LD_INT 14
12291: PUSH
12292: LD_INT 15
12294: PUSH
12295: LD_INT 16
12297: PUSH
12298: LD_INT 17
12300: PUSH
12301: LD_INT 18
12303: PUSH
12304: LD_INT 19
12306: PUSH
12307: LD_INT 20
12309: PUSH
12310: LD_INT 21
12312: PUSH
12313: LD_INT 22
12315: PUSH
12316: LD_INT 23
12318: PUSH
12319: LD_INT 24
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 26
12327: PUSH
12328: LD_INT 27
12330: PUSH
12331: LD_INT 28
12333: PUSH
12334: LD_INT 29
12336: PUSH
12337: LD_INT 30
12339: PUSH
12340: LD_INT 31
12342: PUSH
12343: LD_INT 32
12345: PUSH
12346: LD_INT 33
12348: PUSH
12349: LD_INT 34
12351: PUSH
12352: LD_INT 36
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 101
12394: PUSH
12395: LD_INT 102
12397: PUSH
12398: LD_INT 103
12400: PUSH
12401: LD_INT 104
12403: PUSH
12404: LD_INT 105
12406: PUSH
12407: LD_INT 106
12409: PUSH
12410: LD_INT 107
12412: PUSH
12413: LD_INT 108
12415: PUSH
12416: LD_INT 109
12418: PUSH
12419: LD_INT 110
12421: PUSH
12422: LD_INT 111
12424: PUSH
12425: LD_INT 112
12427: PUSH
12428: LD_INT 113
12430: PUSH
12431: LD_INT 114
12433: PUSH
12434: LD_INT 116
12436: PUSH
12437: LD_INT 117
12439: PUSH
12440: LD_INT 118
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: ST_TO_ADDR
12466: GO 13241
12468: LD_INT 16
12470: DOUBLE
12471: EQUAL
12472: IFTRUE 12476
12474: GO 12612
12476: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12477: LD_ADDR_VAR 0 2
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 4
12487: PUSH
12488: LD_INT 5
12490: PUSH
12491: LD_INT 7
12493: PUSH
12494: LD_INT 11
12496: PUSH
12497: LD_INT 12
12499: PUSH
12500: LD_INT 15
12502: PUSH
12503: LD_INT 16
12505: PUSH
12506: LD_INT 20
12508: PUSH
12509: LD_INT 21
12511: PUSH
12512: LD_INT 22
12514: PUSH
12515: LD_INT 23
12517: PUSH
12518: LD_INT 25
12520: PUSH
12521: LD_INT 26
12523: PUSH
12524: LD_INT 30
12526: PUSH
12527: LD_INT 31
12529: PUSH
12530: LD_INT 32
12532: PUSH
12533: LD_INT 33
12535: PUSH
12536: LD_INT 34
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 106
12571: PUSH
12572: LD_INT 108
12574: PUSH
12575: LD_INT 112
12577: PUSH
12578: LD_INT 113
12580: PUSH
12581: LD_INT 114
12583: PUSH
12584: LD_INT 116
12586: PUSH
12587: LD_INT 117
12589: PUSH
12590: LD_INT 118
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: ST_TO_ADDR
12610: GO 13241
12612: LD_INT 17
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 12844
12620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12621: LD_ADDR_VAR 0 2
12625: PUSH
12626: LD_INT 1
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 3
12634: PUSH
12635: LD_INT 4
12637: PUSH
12638: LD_INT 5
12640: PUSH
12641: LD_INT 6
12643: PUSH
12644: LD_INT 7
12646: PUSH
12647: LD_INT 8
12649: PUSH
12650: LD_INT 9
12652: PUSH
12653: LD_INT 10
12655: PUSH
12656: LD_INT 11
12658: PUSH
12659: LD_INT 12
12661: PUSH
12662: LD_INT 13
12664: PUSH
12665: LD_INT 14
12667: PUSH
12668: LD_INT 15
12670: PUSH
12671: LD_INT 16
12673: PUSH
12674: LD_INT 17
12676: PUSH
12677: LD_INT 18
12679: PUSH
12680: LD_INT 19
12682: PUSH
12683: LD_INT 20
12685: PUSH
12686: LD_INT 21
12688: PUSH
12689: LD_INT 22
12691: PUSH
12692: LD_INT 23
12694: PUSH
12695: LD_INT 24
12697: PUSH
12698: LD_INT 25
12700: PUSH
12701: LD_INT 26
12703: PUSH
12704: LD_INT 27
12706: PUSH
12707: LD_INT 28
12709: PUSH
12710: LD_INT 29
12712: PUSH
12713: LD_INT 30
12715: PUSH
12716: LD_INT 31
12718: PUSH
12719: LD_INT 32
12721: PUSH
12722: LD_INT 33
12724: PUSH
12725: LD_INT 34
12727: PUSH
12728: LD_INT 36
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 101
12770: PUSH
12771: LD_INT 102
12773: PUSH
12774: LD_INT 103
12776: PUSH
12777: LD_INT 104
12779: PUSH
12780: LD_INT 105
12782: PUSH
12783: LD_INT 106
12785: PUSH
12786: LD_INT 107
12788: PUSH
12789: LD_INT 108
12791: PUSH
12792: LD_INT 109
12794: PUSH
12795: LD_INT 110
12797: PUSH
12798: LD_INT 111
12800: PUSH
12801: LD_INT 112
12803: PUSH
12804: LD_INT 113
12806: PUSH
12807: LD_INT 114
12809: PUSH
12810: LD_INT 116
12812: PUSH
12813: LD_INT 117
12815: PUSH
12816: LD_INT 118
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: ST_TO_ADDR
12842: GO 13241
12844: LD_INT 18
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 13000
12852: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12853: LD_ADDR_VAR 0 2
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: LD_INT 4
12863: PUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 7
12869: PUSH
12870: LD_INT 11
12872: PUSH
12873: LD_INT 12
12875: PUSH
12876: LD_INT 15
12878: PUSH
12879: LD_INT 16
12881: PUSH
12882: LD_INT 20
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_INT 23
12893: PUSH
12894: LD_INT 25
12896: PUSH
12897: LD_INT 26
12899: PUSH
12900: LD_INT 30
12902: PUSH
12903: LD_INT 31
12905: PUSH
12906: LD_INT 32
12908: PUSH
12909: LD_INT 33
12911: PUSH
12912: LD_INT 34
12914: PUSH
12915: LD_INT 35
12917: PUSH
12918: LD_INT 36
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 101
12946: PUSH
12947: LD_INT 102
12949: PUSH
12950: LD_INT 103
12952: PUSH
12953: LD_INT 106
12955: PUSH
12956: LD_INT 108
12958: PUSH
12959: LD_INT 112
12961: PUSH
12962: LD_INT 113
12964: PUSH
12965: LD_INT 114
12967: PUSH
12968: LD_INT 115
12970: PUSH
12971: LD_INT 116
12973: PUSH
12974: LD_INT 117
12976: PUSH
12977: LD_INT 118
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: ST_TO_ADDR
12998: GO 13241
13000: LD_INT 19
13002: DOUBLE
13003: EQUAL
13004: IFTRUE 13008
13006: GO 13240
13008: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13009: LD_ADDR_VAR 0 2
13013: PUSH
13014: LD_INT 1
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: LD_INT 3
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: LD_INT 5
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: LD_INT 7
13034: PUSH
13035: LD_INT 8
13037: PUSH
13038: LD_INT 9
13040: PUSH
13041: LD_INT 10
13043: PUSH
13044: LD_INT 11
13046: PUSH
13047: LD_INT 12
13049: PUSH
13050: LD_INT 13
13052: PUSH
13053: LD_INT 14
13055: PUSH
13056: LD_INT 15
13058: PUSH
13059: LD_INT 16
13061: PUSH
13062: LD_INT 17
13064: PUSH
13065: LD_INT 18
13067: PUSH
13068: LD_INT 19
13070: PUSH
13071: LD_INT 20
13073: PUSH
13074: LD_INT 21
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_INT 23
13082: PUSH
13083: LD_INT 24
13085: PUSH
13086: LD_INT 25
13088: PUSH
13089: LD_INT 26
13091: PUSH
13092: LD_INT 27
13094: PUSH
13095: LD_INT 28
13097: PUSH
13098: LD_INT 29
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 31
13106: PUSH
13107: LD_INT 32
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 34
13115: PUSH
13116: LD_INT 35
13118: PUSH
13119: LD_INT 36
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 101
13162: PUSH
13163: LD_INT 102
13165: PUSH
13166: LD_INT 103
13168: PUSH
13169: LD_INT 104
13171: PUSH
13172: LD_INT 105
13174: PUSH
13175: LD_INT 106
13177: PUSH
13178: LD_INT 107
13180: PUSH
13181: LD_INT 108
13183: PUSH
13184: LD_INT 109
13186: PUSH
13187: LD_INT 110
13189: PUSH
13190: LD_INT 111
13192: PUSH
13193: LD_INT 112
13195: PUSH
13196: LD_INT 113
13198: PUSH
13199: LD_INT 114
13201: PUSH
13202: LD_INT 115
13204: PUSH
13205: LD_INT 116
13207: PUSH
13208: LD_INT 117
13210: PUSH
13211: LD_INT 118
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: ST_TO_ADDR
13238: GO 13241
13240: POP
// end else
13241: GO 13472
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13243: LD_ADDR_VAR 0 2
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 4
13259: PUSH
13260: LD_INT 5
13262: PUSH
13263: LD_INT 6
13265: PUSH
13266: LD_INT 7
13268: PUSH
13269: LD_INT 8
13271: PUSH
13272: LD_INT 9
13274: PUSH
13275: LD_INT 10
13277: PUSH
13278: LD_INT 11
13280: PUSH
13281: LD_INT 12
13283: PUSH
13284: LD_INT 13
13286: PUSH
13287: LD_INT 14
13289: PUSH
13290: LD_INT 15
13292: PUSH
13293: LD_INT 16
13295: PUSH
13296: LD_INT 17
13298: PUSH
13299: LD_INT 18
13301: PUSH
13302: LD_INT 19
13304: PUSH
13305: LD_INT 20
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 22
13313: PUSH
13314: LD_INT 23
13316: PUSH
13317: LD_INT 24
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 26
13325: PUSH
13326: LD_INT 27
13328: PUSH
13329: LD_INT 28
13331: PUSH
13332: LD_INT 29
13334: PUSH
13335: LD_INT 30
13337: PUSH
13338: LD_INT 31
13340: PUSH
13341: LD_INT 32
13343: PUSH
13344: LD_INT 33
13346: PUSH
13347: LD_INT 34
13349: PUSH
13350: LD_INT 35
13352: PUSH
13353: LD_INT 36
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 101
13396: PUSH
13397: LD_INT 102
13399: PUSH
13400: LD_INT 103
13402: PUSH
13403: LD_INT 104
13405: PUSH
13406: LD_INT 105
13408: PUSH
13409: LD_INT 106
13411: PUSH
13412: LD_INT 107
13414: PUSH
13415: LD_INT 108
13417: PUSH
13418: LD_INT 109
13420: PUSH
13421: LD_INT 110
13423: PUSH
13424: LD_INT 111
13426: PUSH
13427: LD_INT 112
13429: PUSH
13430: LD_INT 113
13432: PUSH
13433: LD_INT 114
13435: PUSH
13436: LD_INT 115
13438: PUSH
13439: LD_INT 116
13441: PUSH
13442: LD_INT 117
13444: PUSH
13445: LD_INT 118
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: ST_TO_ADDR
// if result then
13472: LD_VAR 0 2
13476: IFFALSE 14262
// begin normal :=  ;
13478: LD_ADDR_VAR 0 5
13482: PUSH
13483: LD_STRING 
13485: ST_TO_ADDR
// hardcore :=  ;
13486: LD_ADDR_VAR 0 6
13490: PUSH
13491: LD_STRING 
13493: ST_TO_ADDR
// active :=  ;
13494: LD_ADDR_VAR 0 7
13498: PUSH
13499: LD_STRING 
13501: ST_TO_ADDR
// for i = 1 to normalCounter do
13502: LD_ADDR_VAR 0 8
13506: PUSH
13507: DOUBLE
13508: LD_INT 1
13510: DEC
13511: ST_TO_ADDR
13512: LD_EXP 31
13516: PUSH
13517: FOR_TO
13518: IFFALSE 13619
// begin tmp := 0 ;
13520: LD_ADDR_VAR 0 3
13524: PUSH
13525: LD_STRING 0
13527: ST_TO_ADDR
// if result [ 1 ] then
13528: LD_VAR 0 2
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: IFFALSE 13601
// if result [ 1 ] [ 1 ] = i then
13538: LD_VAR 0 2
13542: PUSH
13543: LD_INT 1
13545: ARRAY
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PUSH
13551: LD_VAR 0 8
13555: EQUAL
13556: IFFALSE 13601
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13558: LD_ADDR_VAR 0 2
13562: PUSH
13563: LD_VAR 0 2
13567: PPUSH
13568: LD_INT 1
13570: PPUSH
13571: LD_VAR 0 2
13575: PUSH
13576: LD_INT 1
13578: ARRAY
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 3
13587: PPUSH
13588: CALL_OW 1
13592: ST_TO_ADDR
// tmp := 1 ;
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_STRING 1
13600: ST_TO_ADDR
// end ; normal := normal & tmp ;
13601: LD_ADDR_VAR 0 5
13605: PUSH
13606: LD_VAR 0 5
13610: PUSH
13611: LD_VAR 0 3
13615: STR
13616: ST_TO_ADDR
// end ;
13617: GO 13517
13619: POP
13620: POP
// for i = 1 to hardcoreCounter do
13621: LD_ADDR_VAR 0 8
13625: PUSH
13626: DOUBLE
13627: LD_INT 1
13629: DEC
13630: ST_TO_ADDR
13631: LD_EXP 32
13635: PUSH
13636: FOR_TO
13637: IFFALSE 13742
// begin tmp := 0 ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_STRING 0
13646: ST_TO_ADDR
// if result [ 2 ] then
13647: LD_VAR 0 2
13651: PUSH
13652: LD_INT 2
13654: ARRAY
13655: IFFALSE 13724
// if result [ 2 ] [ 1 ] = 100 + i then
13657: LD_VAR 0 2
13661: PUSH
13662: LD_INT 2
13664: ARRAY
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PUSH
13670: LD_INT 100
13672: PUSH
13673: LD_VAR 0 8
13677: PLUS
13678: EQUAL
13679: IFFALSE 13724
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13681: LD_ADDR_VAR 0 2
13685: PUSH
13686: LD_VAR 0 2
13690: PPUSH
13691: LD_INT 2
13693: PPUSH
13694: LD_VAR 0 2
13698: PUSH
13699: LD_INT 2
13701: ARRAY
13702: PPUSH
13703: LD_INT 1
13705: PPUSH
13706: CALL_OW 3
13710: PPUSH
13711: CALL_OW 1
13715: ST_TO_ADDR
// tmp := 1 ;
13716: LD_ADDR_VAR 0 3
13720: PUSH
13721: LD_STRING 1
13723: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13724: LD_ADDR_VAR 0 6
13728: PUSH
13729: LD_VAR 0 6
13733: PUSH
13734: LD_VAR 0 3
13738: STR
13739: ST_TO_ADDR
// end ;
13740: GO 13636
13742: POP
13743: POP
// if isGameLoad then
13744: LD_VAR 0 1
13748: IFFALSE 14223
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13750: LD_ADDR_VAR 0 4
13754: PUSH
13755: LD_EXP 35
13759: PUSH
13760: LD_EXP 34
13764: PUSH
13765: LD_EXP 36
13769: PUSH
13770: LD_EXP 33
13774: PUSH
13775: LD_EXP 37
13779: PUSH
13780: LD_EXP 38
13784: PUSH
13785: LD_EXP 39
13789: PUSH
13790: LD_EXP 40
13794: PUSH
13795: LD_EXP 41
13799: PUSH
13800: LD_EXP 42
13804: PUSH
13805: LD_EXP 43
13809: PUSH
13810: LD_EXP 44
13814: PUSH
13815: LD_EXP 45
13819: PUSH
13820: LD_EXP 46
13824: PUSH
13825: LD_EXP 54
13829: PUSH
13830: LD_EXP 55
13834: PUSH
13835: LD_EXP 56
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_EXP 59
13849: PUSH
13850: LD_EXP 60
13854: PUSH
13855: LD_EXP 61
13859: PUSH
13860: LD_EXP 64
13864: PUSH
13865: LD_EXP 66
13869: PUSH
13870: LD_EXP 67
13874: PUSH
13875: LD_EXP 68
13879: PUSH
13880: LD_EXP 70
13884: PUSH
13885: LD_EXP 71
13889: PUSH
13890: LD_EXP 74
13894: PUSH
13895: LD_EXP 75
13899: PUSH
13900: LD_EXP 76
13904: PUSH
13905: LD_EXP 77
13909: PUSH
13910: LD_EXP 78
13914: PUSH
13915: LD_EXP 79
13919: PUSH
13920: LD_EXP 80
13924: PUSH
13925: LD_EXP 81
13929: PUSH
13930: LD_EXP 82
13934: PUSH
13935: LD_EXP 47
13939: PUSH
13940: LD_EXP 48
13944: PUSH
13945: LD_EXP 51
13949: PUSH
13950: LD_EXP 52
13954: PUSH
13955: LD_EXP 53
13959: PUSH
13960: LD_EXP 49
13964: PUSH
13965: LD_EXP 50
13969: PUSH
13970: LD_EXP 58
13974: PUSH
13975: LD_EXP 62
13979: PUSH
13980: LD_EXP 63
13984: PUSH
13985: LD_EXP 65
13989: PUSH
13990: LD_EXP 69
13994: PUSH
13995: LD_EXP 72
13999: PUSH
14000: LD_EXP 73
14004: PUSH
14005: LD_EXP 83
14009: PUSH
14010: LD_EXP 84
14014: PUSH
14015: LD_EXP 85
14019: PUSH
14020: LD_EXP 86
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: ST_TO_ADDR
// tmp :=  ;
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_STRING 
14088: ST_TO_ADDR
// for i = 1 to normalCounter do
14089: LD_ADDR_VAR 0 8
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_EXP 31
14103: PUSH
14104: FOR_TO
14105: IFFALSE 14141
// begin if flags [ i ] then
14107: LD_VAR 0 4
14111: PUSH
14112: LD_VAR 0 8
14116: ARRAY
14117: IFFALSE 14139
// tmp := tmp & i & ; ;
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_VAR 0 3
14128: PUSH
14129: LD_VAR 0 8
14133: STR
14134: PUSH
14135: LD_STRING ;
14137: STR
14138: ST_TO_ADDR
// end ;
14139: GO 14104
14141: POP
14142: POP
// for i = 1 to hardcoreCounter do
14143: LD_ADDR_VAR 0 8
14147: PUSH
14148: DOUBLE
14149: LD_INT 1
14151: DEC
14152: ST_TO_ADDR
14153: LD_EXP 32
14157: PUSH
14158: FOR_TO
14159: IFFALSE 14205
// begin if flags [ normalCounter + i ] then
14161: LD_VAR 0 4
14165: PUSH
14166: LD_EXP 31
14170: PUSH
14171: LD_VAR 0 8
14175: PLUS
14176: ARRAY
14177: IFFALSE 14203
// tmp := tmp & ( 100 + i ) & ; ;
14179: LD_ADDR_VAR 0 3
14183: PUSH
14184: LD_VAR 0 3
14188: PUSH
14189: LD_INT 100
14191: PUSH
14192: LD_VAR 0 8
14196: PLUS
14197: STR
14198: PUSH
14199: LD_STRING ;
14201: STR
14202: ST_TO_ADDR
// end ;
14203: GO 14158
14205: POP
14206: POP
// if tmp then
14207: LD_VAR 0 3
14211: IFFALSE 14223
// active := tmp ;
14213: LD_ADDR_VAR 0 7
14217: PUSH
14218: LD_VAR 0 3
14222: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14223: LD_STRING getStreamItemsFromMission("
14225: PUSH
14226: LD_VAR 0 5
14230: STR
14231: PUSH
14232: LD_STRING ","
14234: STR
14235: PUSH
14236: LD_VAR 0 6
14240: STR
14241: PUSH
14242: LD_STRING ","
14244: STR
14245: PUSH
14246: LD_VAR 0 7
14250: STR
14251: PUSH
14252: LD_STRING ")
14254: STR
14255: PPUSH
14256: CALL_OW 559
// end else
14260: GO 14269
// ToLua ( getStreamItemsFromMission("","","") ) ;
14262: LD_STRING getStreamItemsFromMission("","","")
14264: PPUSH
14265: CALL_OW 559
// end ;
14269: LD_VAR 0 2
14273: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14274: LD_EXP 30
14278: PUSH
14279: LD_EXP 35
14283: AND
14284: IFFALSE 14408
14286: GO 14288
14288: DISABLE
14289: LD_INT 0
14291: PPUSH
14292: PPUSH
// begin enable ;
14293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14294: LD_ADDR_VAR 0 2
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: LD_INT 34
14316: PUSH
14317: LD_INT 7
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 34
14326: PUSH
14327: LD_INT 45
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 34
14336: PUSH
14337: LD_INT 28
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 34
14346: PUSH
14347: LD_INT 47
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// if not tmp then
14370: LD_VAR 0 2
14374: NOT
14375: IFFALSE 14379
// exit ;
14377: GO 14408
// for i in tmp do
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_VAR 0 2
14388: PUSH
14389: FOR_IN
14390: IFFALSE 14406
// begin SetLives ( i , 0 ) ;
14392: LD_VAR 0 1
14396: PPUSH
14397: LD_INT 0
14399: PPUSH
14400: CALL_OW 234
// end ;
14404: GO 14389
14406: POP
14407: POP
// end ;
14408: PPOPN 2
14410: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14411: LD_EXP 30
14415: PUSH
14416: LD_EXP 36
14420: AND
14421: IFFALSE 14505
14423: GO 14425
14425: DISABLE
14426: LD_INT 0
14428: PPUSH
14429: PPUSH
// begin enable ;
14430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_INT 22
14438: PUSH
14439: LD_OWVAR 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 32
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PPUSH
14462: CALL_OW 69
14466: ST_TO_ADDR
// if not tmp then
14467: LD_VAR 0 2
14471: NOT
14472: IFFALSE 14476
// exit ;
14474: GO 14505
// for i in tmp do
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_VAR 0 2
14485: PUSH
14486: FOR_IN
14487: IFFALSE 14503
// begin SetLives ( i , 0 ) ;
14489: LD_VAR 0 1
14493: PPUSH
14494: LD_INT 0
14496: PPUSH
14497: CALL_OW 234
// end ;
14501: GO 14486
14503: POP
14504: POP
// end ;
14505: PPOPN 2
14507: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14508: LD_EXP 30
14512: PUSH
14513: LD_EXP 33
14517: AND
14518: IFFALSE 14611
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
// begin enable ;
14526: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14527: LD_ADDR_VAR 0 1
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_OWVAR 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: LD_INT 25
14549: PUSH
14550: LD_INT 5
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 25
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 25
14569: PUSH
14570: LD_INT 8
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: CALL_OW 69
14591: PUSH
14592: FOR_IN
14593: IFFALSE 14609
// begin SetClass ( i , 1 ) ;
14595: LD_VAR 0 1
14599: PPUSH
14600: LD_INT 1
14602: PPUSH
14603: CALL_OW 336
// end ;
14607: GO 14592
14609: POP
14610: POP
// end ;
14611: PPOPN 1
14613: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14614: LD_EXP 30
14618: PUSH
14619: LD_EXP 34
14623: AND
14624: PUSH
14625: LD_OWVAR 65
14629: PUSH
14630: LD_INT 7
14632: LESS
14633: AND
14634: IFFALSE 14648
14636: GO 14638
14638: DISABLE
// begin enable ;
14639: ENABLE
// game_speed := 7 ;
14640: LD_ADDR_OWVAR 65
14644: PUSH
14645: LD_INT 7
14647: ST_TO_ADDR
// end ;
14648: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14649: LD_EXP 30
14653: PUSH
14654: LD_EXP 37
14658: AND
14659: IFFALSE 14861
14661: GO 14663
14663: DISABLE
14664: LD_INT 0
14666: PPUSH
14667: PPUSH
14668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14669: LD_ADDR_VAR 0 3
14673: PUSH
14674: LD_INT 81
14676: PUSH
14677: LD_OWVAR 2
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 21
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PPUSH
14700: CALL_OW 69
14704: ST_TO_ADDR
// if not tmp then
14705: LD_VAR 0 3
14709: NOT
14710: IFFALSE 14714
// exit ;
14712: GO 14861
// if tmp > 5 then
14714: LD_VAR 0 3
14718: PUSH
14719: LD_INT 5
14721: GREATER
14722: IFFALSE 14734
// k := 5 else
14724: LD_ADDR_VAR 0 2
14728: PUSH
14729: LD_INT 5
14731: ST_TO_ADDR
14732: GO 14744
// k := tmp ;
14734: LD_ADDR_VAR 0 2
14738: PUSH
14739: LD_VAR 0 3
14743: ST_TO_ADDR
// for i := 1 to k do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: DOUBLE
14750: LD_INT 1
14752: DEC
14753: ST_TO_ADDR
14754: LD_VAR 0 2
14758: PUSH
14759: FOR_TO
14760: IFFALSE 14859
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14762: LD_VAR 0 3
14766: PUSH
14767: LD_VAR 0 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 4
14780: MOD
14781: PUSH
14782: LD_INT 1
14784: PLUS
14785: PPUSH
14786: CALL_OW 259
14790: PUSH
14791: LD_INT 10
14793: LESS
14794: IFFALSE 14857
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14796: LD_VAR 0 3
14800: PUSH
14801: LD_VAR 0 1
14805: ARRAY
14806: PPUSH
14807: LD_VAR 0 1
14811: PUSH
14812: LD_INT 4
14814: MOD
14815: PUSH
14816: LD_INT 1
14818: PLUS
14819: PPUSH
14820: LD_VAR 0 3
14824: PUSH
14825: LD_VAR 0 1
14829: ARRAY
14830: PPUSH
14831: LD_VAR 0 1
14835: PUSH
14836: LD_INT 4
14838: MOD
14839: PUSH
14840: LD_INT 1
14842: PLUS
14843: PPUSH
14844: CALL_OW 259
14848: PUSH
14849: LD_INT 1
14851: PLUS
14852: PPUSH
14853: CALL_OW 237
14857: GO 14759
14859: POP
14860: POP
// end ;
14861: PPOPN 3
14863: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14864: LD_EXP 30
14868: PUSH
14869: LD_EXP 38
14873: AND
14874: IFFALSE 14894
14876: GO 14878
14878: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14879: LD_INT 4
14881: PPUSH
14882: LD_OWVAR 2
14886: PPUSH
14887: LD_INT 0
14889: PPUSH
14890: CALL_OW 324
14894: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14895: LD_EXP 30
14899: PUSH
14900: LD_EXP 67
14904: AND
14905: IFFALSE 14925
14907: GO 14909
14909: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14910: LD_INT 19
14912: PPUSH
14913: LD_OWVAR 2
14917: PPUSH
14918: LD_INT 0
14920: PPUSH
14921: CALL_OW 324
14925: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14926: LD_EXP 30
14930: PUSH
14931: LD_EXP 39
14935: AND
14936: IFFALSE 15038
14938: GO 14940
14940: DISABLE
14941: LD_INT 0
14943: PPUSH
14944: PPUSH
// begin enable ;
14945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14946: LD_ADDR_VAR 0 2
14950: PUSH
14951: LD_INT 22
14953: PUSH
14954: LD_OWVAR 2
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: LD_INT 34
14968: PUSH
14969: LD_INT 11
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 34
14978: PUSH
14979: LD_INT 30
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: ST_TO_ADDR
// if not tmp then
15000: LD_VAR 0 2
15004: NOT
15005: IFFALSE 15009
// exit ;
15007: GO 15038
// for i in tmp do
15009: LD_ADDR_VAR 0 1
15013: PUSH
15014: LD_VAR 0 2
15018: PUSH
15019: FOR_IN
15020: IFFALSE 15036
// begin SetLives ( i , 0 ) ;
15022: LD_VAR 0 1
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 234
// end ;
15034: GO 15019
15036: POP
15037: POP
// end ;
15038: PPOPN 2
15040: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15041: LD_EXP 30
15045: PUSH
15046: LD_EXP 40
15050: AND
15051: IFFALSE 15071
15053: GO 15055
15055: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15056: LD_INT 32
15058: PPUSH
15059: LD_OWVAR 2
15063: PPUSH
15064: LD_INT 0
15066: PPUSH
15067: CALL_OW 324
15071: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15072: LD_EXP 30
15076: PUSH
15077: LD_EXP 41
15081: AND
15082: IFFALSE 15263
15084: GO 15086
15086: DISABLE
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
15091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15092: LD_ADDR_VAR 0 2
15096: PUSH
15097: LD_INT 22
15099: PUSH
15100: LD_OWVAR 2
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 33
15111: PUSH
15112: LD_INT 3
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PPUSH
15123: CALL_OW 69
15127: ST_TO_ADDR
// if not tmp then
15128: LD_VAR 0 2
15132: NOT
15133: IFFALSE 15137
// exit ;
15135: GO 15263
// side := 0 ;
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// for i := 1 to 8 do
15145: LD_ADDR_VAR 0 1
15149: PUSH
15150: DOUBLE
15151: LD_INT 1
15153: DEC
15154: ST_TO_ADDR
15155: LD_INT 8
15157: PUSH
15158: FOR_TO
15159: IFFALSE 15207
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15161: LD_OWVAR 2
15165: PUSH
15166: LD_VAR 0 1
15170: NONEQUAL
15171: PUSH
15172: LD_OWVAR 2
15176: PPUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 81
15186: PUSH
15187: LD_INT 2
15189: EQUAL
15190: AND
15191: IFFALSE 15205
// begin side := i ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_VAR 0 1
15202: ST_TO_ADDR
// break ;
15203: GO 15207
// end ;
15205: GO 15158
15207: POP
15208: POP
// if not side then
15209: LD_VAR 0 3
15213: NOT
15214: IFFALSE 15218
// exit ;
15216: GO 15263
// for i := 1 to tmp do
15218: LD_ADDR_VAR 0 1
15222: PUSH
15223: DOUBLE
15224: LD_INT 1
15226: DEC
15227: ST_TO_ADDR
15228: LD_VAR 0 2
15232: PUSH
15233: FOR_TO
15234: IFFALSE 15261
// if Prob ( 60 ) then
15236: LD_INT 60
15238: PPUSH
15239: CALL_OW 13
15243: IFFALSE 15259
// SetSide ( i , side ) ;
15245: LD_VAR 0 1
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: CALL_OW 235
15259: GO 15233
15261: POP
15262: POP
// end ;
15263: PPOPN 3
15265: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15266: LD_EXP 30
15270: PUSH
15271: LD_EXP 43
15275: AND
15276: IFFALSE 15395
15278: GO 15280
15280: DISABLE
15281: LD_INT 0
15283: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15284: LD_ADDR_VAR 0 1
15288: PUSH
15289: LD_INT 22
15291: PUSH
15292: LD_OWVAR 2
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 21
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 3
15313: PUSH
15314: LD_INT 23
15316: PUSH
15317: LD_INT 0
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: PPUSH
15333: CALL_OW 69
15337: PUSH
15338: FOR_IN
15339: IFFALSE 15393
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 257
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: LD_INT 2
15356: PUSH
15357: LD_INT 3
15359: PUSH
15360: LD_INT 4
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: IN
15369: IFFALSE 15391
// SetClass ( un , rand ( 1 , 4 ) ) ;
15371: LD_VAR 0 1
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: LD_INT 4
15381: PPUSH
15382: CALL_OW 12
15386: PPUSH
15387: CALL_OW 336
15391: GO 15338
15393: POP
15394: POP
// end ;
15395: PPOPN 1
15397: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15398: LD_EXP 30
15402: PUSH
15403: LD_EXP 42
15407: AND
15408: IFFALSE 15487
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15416: LD_ADDR_VAR 0 1
15420: PUSH
15421: LD_INT 22
15423: PUSH
15424: LD_OWVAR 2
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 21
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: ST_TO_ADDR
// if not tmp then
15452: LD_VAR 0 1
15456: NOT
15457: IFFALSE 15461
// exit ;
15459: GO 15487
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15461: LD_VAR 0 1
15465: PUSH
15466: LD_INT 1
15468: PPUSH
15469: LD_VAR 0 1
15473: PPUSH
15474: CALL_OW 12
15478: ARRAY
15479: PPUSH
15480: LD_INT 100
15482: PPUSH
15483: CALL_OW 234
// end ;
15487: PPOPN 1
15489: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15490: LD_EXP 30
15494: PUSH
15495: LD_EXP 44
15499: AND
15500: IFFALSE 15598
15502: GO 15504
15504: DISABLE
15505: LD_INT 0
15507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15508: LD_ADDR_VAR 0 1
15512: PUSH
15513: LD_INT 22
15515: PUSH
15516: LD_OWVAR 2
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: LD_INT 21
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: ST_TO_ADDR
// if not tmp then
15544: LD_VAR 0 1
15548: NOT
15549: IFFALSE 15553
// exit ;
15551: GO 15598
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15553: LD_VAR 0 1
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 12
15570: ARRAY
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: LD_INT 4
15577: PPUSH
15578: CALL_OW 12
15582: PPUSH
15583: LD_INT 3000
15585: PPUSH
15586: LD_INT 9000
15588: PPUSH
15589: CALL_OW 12
15593: PPUSH
15594: CALL_OW 492
// end ;
15598: PPOPN 1
15600: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15601: LD_EXP 30
15605: PUSH
15606: LD_EXP 45
15610: AND
15611: IFFALSE 15631
15613: GO 15615
15615: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15616: LD_INT 1
15618: PPUSH
15619: LD_OWVAR 2
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 324
15631: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15632: LD_EXP 30
15636: PUSH
15637: LD_EXP 46
15641: AND
15642: IFFALSE 15725
15644: GO 15646
15646: DISABLE
15647: LD_INT 0
15649: PPUSH
15650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15651: LD_ADDR_VAR 0 2
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_OWVAR 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 21
15670: PUSH
15671: LD_INT 3
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PPUSH
15682: CALL_OW 69
15686: ST_TO_ADDR
// if not tmp then
15687: LD_VAR 0 2
15691: NOT
15692: IFFALSE 15696
// exit ;
15694: GO 15725
// for i in tmp do
15696: LD_ADDR_VAR 0 1
15700: PUSH
15701: LD_VAR 0 2
15705: PUSH
15706: FOR_IN
15707: IFFALSE 15723
// SetBLevel ( i , 10 ) ;
15709: LD_VAR 0 1
15713: PPUSH
15714: LD_INT 10
15716: PPUSH
15717: CALL_OW 241
15721: GO 15706
15723: POP
15724: POP
// end ;
15725: PPOPN 2
15727: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15728: LD_EXP 30
15732: PUSH
15733: LD_EXP 47
15737: AND
15738: IFFALSE 15849
15740: GO 15742
15742: DISABLE
15743: LD_INT 0
15745: PPUSH
15746: PPUSH
15747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15748: LD_ADDR_VAR 0 3
15752: PUSH
15753: LD_INT 22
15755: PUSH
15756: LD_OWVAR 2
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 25
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: CALL_OW 69
15783: ST_TO_ADDR
// if not tmp then
15784: LD_VAR 0 3
15788: NOT
15789: IFFALSE 15793
// exit ;
15791: GO 15849
// un := tmp [ rand ( 1 , tmp ) ] ;
15793: LD_ADDR_VAR 0 2
15797: PUSH
15798: LD_VAR 0 3
15802: PUSH
15803: LD_INT 1
15805: PPUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: CALL_OW 12
15815: ARRAY
15816: ST_TO_ADDR
// if Crawls ( un ) then
15817: LD_VAR 0 2
15821: PPUSH
15822: CALL_OW 318
15826: IFFALSE 15837
// ComWalk ( un ) ;
15828: LD_VAR 0 2
15832: PPUSH
15833: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15837: LD_VAR 0 2
15841: PPUSH
15842: LD_INT 5
15844: PPUSH
15845: CALL_OW 336
// end ;
15849: PPOPN 3
15851: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15852: LD_EXP 30
15856: PUSH
15857: LD_EXP 48
15861: AND
15862: PUSH
15863: LD_OWVAR 67
15867: PUSH
15868: LD_INT 4
15870: LESS
15871: AND
15872: IFFALSE 15891
15874: GO 15876
15876: DISABLE
// begin Difficulty := Difficulty + 1 ;
15877: LD_ADDR_OWVAR 67
15881: PUSH
15882: LD_OWVAR 67
15886: PUSH
15887: LD_INT 1
15889: PLUS
15890: ST_TO_ADDR
// end ;
15891: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15892: LD_EXP 30
15896: PUSH
15897: LD_EXP 49
15901: AND
15902: IFFALSE 16005
15904: GO 15906
15906: DISABLE
15907: LD_INT 0
15909: PPUSH
// begin for i := 1 to 5 do
15910: LD_ADDR_VAR 0 1
15914: PUSH
15915: DOUBLE
15916: LD_INT 1
15918: DEC
15919: ST_TO_ADDR
15920: LD_INT 5
15922: PUSH
15923: FOR_TO
15924: IFFALSE 16003
// begin uc_nation := nation_nature ;
15926: LD_ADDR_OWVAR 21
15930: PUSH
15931: LD_INT 0
15933: ST_TO_ADDR
// uc_side := 0 ;
15934: LD_ADDR_OWVAR 20
15938: PUSH
15939: LD_INT 0
15941: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15942: LD_ADDR_OWVAR 29
15946: PUSH
15947: LD_INT 12
15949: PUSH
15950: LD_INT 12
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: ST_TO_ADDR
// hc_agressivity := 20 ;
15957: LD_ADDR_OWVAR 35
15961: PUSH
15962: LD_INT 20
15964: ST_TO_ADDR
// hc_class := class_tiger ;
15965: LD_ADDR_OWVAR 28
15969: PUSH
15970: LD_INT 14
15972: ST_TO_ADDR
// hc_gallery :=  ;
15973: LD_ADDR_OWVAR 33
15977: PUSH
15978: LD_STRING 
15980: ST_TO_ADDR
// hc_name :=  ;
15981: LD_ADDR_OWVAR 26
15985: PUSH
15986: LD_STRING 
15988: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15989: CALL_OW 44
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: CALL_OW 51
// end ;
16001: GO 15923
16003: POP
16004: POP
// end ;
16005: PPOPN 1
16007: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16008: LD_EXP 30
16012: PUSH
16013: LD_EXP 50
16017: AND
16018: IFFALSE 16027
16020: GO 16022
16022: DISABLE
// StreamSibBomb ;
16023: CALL 16028 0 0
16027: END
// export function StreamSibBomb ; var i , x , y ; begin
16028: LD_INT 0
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
// result := false ;
16034: LD_ADDR_VAR 0 1
16038: PUSH
16039: LD_INT 0
16041: ST_TO_ADDR
// for i := 1 to 16 do
16042: LD_ADDR_VAR 0 2
16046: PUSH
16047: DOUBLE
16048: LD_INT 1
16050: DEC
16051: ST_TO_ADDR
16052: LD_INT 16
16054: PUSH
16055: FOR_TO
16056: IFFALSE 16255
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16058: LD_ADDR_VAR 0 3
16062: PUSH
16063: LD_INT 10
16065: PUSH
16066: LD_INT 20
16068: PUSH
16069: LD_INT 30
16071: PUSH
16072: LD_INT 40
16074: PUSH
16075: LD_INT 50
16077: PUSH
16078: LD_INT 60
16080: PUSH
16081: LD_INT 70
16083: PUSH
16084: LD_INT 80
16086: PUSH
16087: LD_INT 90
16089: PUSH
16090: LD_INT 100
16092: PUSH
16093: LD_INT 110
16095: PUSH
16096: LD_INT 120
16098: PUSH
16099: LD_INT 130
16101: PUSH
16102: LD_INT 140
16104: PUSH
16105: LD_INT 150
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 1
16127: PPUSH
16128: LD_INT 15
16130: PPUSH
16131: CALL_OW 12
16135: ARRAY
16136: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16137: LD_ADDR_VAR 0 4
16141: PUSH
16142: LD_INT 10
16144: PUSH
16145: LD_INT 20
16147: PUSH
16148: LD_INT 30
16150: PUSH
16151: LD_INT 40
16153: PUSH
16154: LD_INT 50
16156: PUSH
16157: LD_INT 60
16159: PUSH
16160: LD_INT 70
16162: PUSH
16163: LD_INT 80
16165: PUSH
16166: LD_INT 90
16168: PUSH
16169: LD_INT 100
16171: PUSH
16172: LD_INT 110
16174: PUSH
16175: LD_INT 120
16177: PUSH
16178: LD_INT 130
16180: PUSH
16181: LD_INT 140
16183: PUSH
16184: LD_INT 150
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 1
16206: PPUSH
16207: LD_INT 15
16209: PPUSH
16210: CALL_OW 12
16214: ARRAY
16215: ST_TO_ADDR
// if ValidHex ( x , y ) then
16216: LD_VAR 0 3
16220: PPUSH
16221: LD_VAR 0 4
16225: PPUSH
16226: CALL_OW 488
16230: IFFALSE 16253
// begin result := [ x , y ] ;
16232: LD_ADDR_VAR 0 1
16236: PUSH
16237: LD_VAR 0 3
16241: PUSH
16242: LD_VAR 0 4
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: ST_TO_ADDR
// break ;
16251: GO 16255
// end ; end ;
16253: GO 16055
16255: POP
16256: POP
// if result then
16257: LD_VAR 0 1
16261: IFFALSE 16321
// begin ToLua ( playSibBomb() ) ;
16263: LD_STRING playSibBomb()
16265: PPUSH
16266: CALL_OW 559
// wait ( 0 0$14 ) ;
16270: LD_INT 490
16272: PPUSH
16273: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16277: LD_VAR 0 1
16281: PUSH
16282: LD_INT 1
16284: ARRAY
16285: PPUSH
16286: LD_VAR 0 1
16290: PUSH
16291: LD_INT 2
16293: ARRAY
16294: PPUSH
16295: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16299: LD_VAR 0 1
16303: PUSH
16304: LD_INT 1
16306: ARRAY
16307: PPUSH
16308: LD_VAR 0 1
16312: PUSH
16313: LD_INT 2
16315: ARRAY
16316: PPUSH
16317: CALL_OW 429
// end ; end ;
16321: LD_VAR 0 1
16325: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16326: LD_EXP 30
16330: PUSH
16331: LD_EXP 52
16335: AND
16336: IFFALSE 16348
16338: GO 16340
16340: DISABLE
// YouLost (  ) ;
16341: LD_STRING 
16343: PPUSH
16344: CALL_OW 104
16348: END
// every 0 0$1 trigger StreamModeActive and sFog do
16349: LD_EXP 30
16353: PUSH
16354: LD_EXP 51
16358: AND
16359: IFFALSE 16373
16361: GO 16363
16363: DISABLE
// FogOff ( your_side ) ;
16364: LD_OWVAR 2
16368: PPUSH
16369: CALL_OW 344
16373: END
// every 0 0$1 trigger StreamModeActive and sSun do
16374: LD_EXP 30
16378: PUSH
16379: LD_EXP 53
16383: AND
16384: IFFALSE 16412
16386: GO 16388
16388: DISABLE
// begin solar_recharge_percent := 0 ;
16389: LD_ADDR_OWVAR 79
16393: PUSH
16394: LD_INT 0
16396: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16397: LD_INT 10500
16399: PPUSH
16400: CALL_OW 67
// solar_recharge_percent := 100 ;
16404: LD_ADDR_OWVAR 79
16408: PUSH
16409: LD_INT 100
16411: ST_TO_ADDR
// end ;
16412: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16413: LD_EXP 30
16417: PUSH
16418: LD_EXP 54
16422: AND
16423: IFFALSE 16662
16425: GO 16427
16427: DISABLE
16428: LD_INT 0
16430: PPUSH
16431: PPUSH
16432: PPUSH
// begin tmp := [ ] ;
16433: LD_ADDR_VAR 0 3
16437: PUSH
16438: EMPTY
16439: ST_TO_ADDR
// for i := 1 to 6 do
16440: LD_ADDR_VAR 0 1
16444: PUSH
16445: DOUBLE
16446: LD_INT 1
16448: DEC
16449: ST_TO_ADDR
16450: LD_INT 6
16452: PUSH
16453: FOR_TO
16454: IFFALSE 16559
// begin uc_nation := nation_nature ;
16456: LD_ADDR_OWVAR 21
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// uc_side := 0 ;
16464: LD_ADDR_OWVAR 20
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16472: LD_ADDR_OWVAR 29
16476: PUSH
16477: LD_INT 12
16479: PUSH
16480: LD_INT 12
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: ST_TO_ADDR
// hc_agressivity := 20 ;
16487: LD_ADDR_OWVAR 35
16491: PUSH
16492: LD_INT 20
16494: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16495: LD_ADDR_OWVAR 28
16499: PUSH
16500: LD_INT 17
16502: ST_TO_ADDR
// hc_gallery :=  ;
16503: LD_ADDR_OWVAR 33
16507: PUSH
16508: LD_STRING 
16510: ST_TO_ADDR
// hc_name :=  ;
16511: LD_ADDR_OWVAR 26
16515: PUSH
16516: LD_STRING 
16518: ST_TO_ADDR
// un := CreateHuman ;
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: CALL_OW 44
16528: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16529: LD_VAR 0 2
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: CALL_OW 51
// tmp := tmp ^ un ;
16541: LD_ADDR_VAR 0 3
16545: PUSH
16546: LD_VAR 0 3
16550: PUSH
16551: LD_VAR 0 2
16555: ADD
16556: ST_TO_ADDR
// end ;
16557: GO 16453
16559: POP
16560: POP
// repeat wait ( 0 0$1 ) ;
16561: LD_INT 35
16563: PPUSH
16564: CALL_OW 67
// for un in tmp do
16568: LD_ADDR_VAR 0 2
16572: PUSH
16573: LD_VAR 0 3
16577: PUSH
16578: FOR_IN
16579: IFFALSE 16653
// begin if IsDead ( un ) then
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 301
16590: IFFALSE 16610
// begin tmp := tmp diff un ;
16592: LD_ADDR_VAR 0 3
16596: PUSH
16597: LD_VAR 0 3
16601: PUSH
16602: LD_VAR 0 2
16606: DIFF
16607: ST_TO_ADDR
// continue ;
16608: GO 16578
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16610: LD_VAR 0 2
16614: PPUSH
16615: LD_INT 3
16617: PUSH
16618: LD_INT 22
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PPUSH
16632: CALL_OW 69
16636: PPUSH
16637: LD_VAR 0 2
16641: PPUSH
16642: CALL_OW 74
16646: PPUSH
16647: CALL_OW 115
// end ;
16651: GO 16578
16653: POP
16654: POP
// until not tmp ;
16655: LD_VAR 0 3
16659: NOT
16660: IFFALSE 16561
// end ;
16662: PPOPN 3
16664: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16665: LD_EXP 30
16669: PUSH
16670: LD_EXP 55
16674: AND
16675: IFFALSE 16729
16677: GO 16679
16679: DISABLE
// begin ToLua ( displayTroll(); ) ;
16680: LD_STRING displayTroll();
16682: PPUSH
16683: CALL_OW 559
// wait ( 3 3$00 ) ;
16687: LD_INT 6300
16689: PPUSH
16690: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16694: LD_STRING hideTroll();
16696: PPUSH
16697: CALL_OW 559
// wait ( 1 1$00 ) ;
16701: LD_INT 2100
16703: PPUSH
16704: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16708: LD_STRING displayTroll();
16710: PPUSH
16711: CALL_OW 559
// wait ( 1 1$00 ) ;
16715: LD_INT 2100
16717: PPUSH
16718: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16722: LD_STRING hideTroll();
16724: PPUSH
16725: CALL_OW 559
// end ;
16729: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16730: LD_EXP 30
16734: PUSH
16735: LD_EXP 56
16739: AND
16740: IFFALSE 16803
16742: GO 16744
16744: DISABLE
16745: LD_INT 0
16747: PPUSH
// begin p := 0 ;
16748: LD_ADDR_VAR 0 1
16752: PUSH
16753: LD_INT 0
16755: ST_TO_ADDR
// repeat game_speed := 1 ;
16756: LD_ADDR_OWVAR 65
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16764: LD_INT 35
16766: PPUSH
16767: CALL_OW 67
// p := p + 1 ;
16771: LD_ADDR_VAR 0 1
16775: PUSH
16776: LD_VAR 0 1
16780: PUSH
16781: LD_INT 1
16783: PLUS
16784: ST_TO_ADDR
// until p >= 60 ;
16785: LD_VAR 0 1
16789: PUSH
16790: LD_INT 60
16792: GREATEREQUAL
16793: IFFALSE 16756
// game_speed := 4 ;
16795: LD_ADDR_OWVAR 65
16799: PUSH
16800: LD_INT 4
16802: ST_TO_ADDR
// end ;
16803: PPOPN 1
16805: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16806: LD_EXP 30
16810: PUSH
16811: LD_EXP 57
16815: AND
16816: IFFALSE 16962
16818: GO 16820
16820: DISABLE
16821: LD_INT 0
16823: PPUSH
16824: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16825: LD_ADDR_VAR 0 1
16829: PUSH
16830: LD_INT 22
16832: PUSH
16833: LD_OWVAR 2
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: LD_INT 30
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 30
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PPUSH
16874: CALL_OW 69
16878: ST_TO_ADDR
// if not depot then
16879: LD_VAR 0 1
16883: NOT
16884: IFFALSE 16888
// exit ;
16886: GO 16962
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16888: LD_ADDR_VAR 0 2
16892: PUSH
16893: LD_VAR 0 1
16897: PUSH
16898: LD_INT 1
16900: PPUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 12
16910: ARRAY
16911: PPUSH
16912: CALL_OW 274
16916: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16917: LD_VAR 0 2
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: LD_INT 0
16927: PPUSH
16928: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16932: LD_VAR 0 2
16936: PPUSH
16937: LD_INT 2
16939: PPUSH
16940: LD_INT 0
16942: PPUSH
16943: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16947: LD_VAR 0 2
16951: PPUSH
16952: LD_INT 3
16954: PPUSH
16955: LD_INT 0
16957: PPUSH
16958: CALL_OW 277
// end ;
16962: PPOPN 2
16964: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16965: LD_EXP 30
16969: PUSH
16970: LD_EXP 58
16974: AND
16975: IFFALSE 17072
16977: GO 16979
16979: DISABLE
16980: LD_INT 0
16982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16983: LD_ADDR_VAR 0 1
16987: PUSH
16988: LD_INT 22
16990: PUSH
16991: LD_OWVAR 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 21
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 3
17012: PUSH
17013: LD_INT 23
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// if not tmp then
17037: LD_VAR 0 1
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17072
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17046: LD_VAR 0 1
17050: PUSH
17051: LD_INT 1
17053: PPUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 12
17063: ARRAY
17064: PPUSH
17065: LD_INT 200
17067: PPUSH
17068: CALL_OW 234
// end ;
17072: PPOPN 1
17074: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17075: LD_EXP 30
17079: PUSH
17080: LD_EXP 59
17084: AND
17085: IFFALSE 17164
17087: GO 17089
17089: DISABLE
17090: LD_INT 0
17092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17093: LD_ADDR_VAR 0 1
17097: PUSH
17098: LD_INT 22
17100: PUSH
17101: LD_OWVAR 2
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 21
17112: PUSH
17113: LD_INT 2
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: ST_TO_ADDR
// if not tmp then
17129: LD_VAR 0 1
17133: NOT
17134: IFFALSE 17138
// exit ;
17136: GO 17164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17138: LD_VAR 0 1
17142: PUSH
17143: LD_INT 1
17145: PPUSH
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL_OW 12
17155: ARRAY
17156: PPUSH
17157: LD_INT 60
17159: PPUSH
17160: CALL_OW 234
// end ;
17164: PPOPN 1
17166: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17167: LD_EXP 30
17171: PUSH
17172: LD_EXP 60
17176: AND
17177: IFFALSE 17276
17179: GO 17181
17181: DISABLE
17182: LD_INT 0
17184: PPUSH
17185: PPUSH
// begin enable ;
17186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 61
17206: PUSH
17207: EMPTY
17208: LIST
17209: PUSH
17210: LD_INT 33
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 1
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17276
// for i in tmp do
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_VAR 0 1
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17274
// if IsControledBy ( i ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 312
17261: IFFALSE 17272
// ComUnlink ( i ) ;
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 136
17272: GO 17249
17274: POP
17275: POP
// end ;
17276: PPOPN 2
17278: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17279: LD_EXP 30
17283: PUSH
17284: LD_EXP 61
17288: AND
17289: IFFALSE 17429
17291: GO 17293
17293: DISABLE
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
// begin ToLua ( displayPowell(); ) ;
17298: LD_STRING displayPowell();
17300: PPUSH
17301: CALL_OW 559
// uc_side := 0 ;
17305: LD_ADDR_OWVAR 20
17309: PUSH
17310: LD_INT 0
17312: ST_TO_ADDR
// uc_nation := 2 ;
17313: LD_ADDR_OWVAR 21
17317: PUSH
17318: LD_INT 2
17320: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17321: LD_ADDR_OWVAR 37
17325: PUSH
17326: LD_INT 14
17328: ST_TO_ADDR
// vc_engine := engine_siberite ;
17329: LD_ADDR_OWVAR 39
17333: PUSH
17334: LD_INT 3
17336: ST_TO_ADDR
// vc_control := control_apeman ;
17337: LD_ADDR_OWVAR 38
17341: PUSH
17342: LD_INT 5
17344: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17345: LD_ADDR_OWVAR 40
17349: PUSH
17350: LD_INT 29
17352: ST_TO_ADDR
// un := CreateVehicle ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: CALL_OW 45
17362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17375: LD_INT 35
17377: PPUSH
17378: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17382: LD_VAR 0 2
17386: PPUSH
17387: LD_INT 22
17389: PUSH
17390: LD_OWVAR 2
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: PPUSH
17404: LD_VAR 0 2
17408: PPUSH
17409: CALL_OW 74
17413: PPUSH
17414: CALL_OW 115
// until IsDead ( un ) ;
17418: LD_VAR 0 2
17422: PPUSH
17423: CALL_OW 301
17427: IFFALSE 17375
// end ;
17429: PPOPN 2
17431: END
// every 0 0$1 trigger StreamModeActive and sStu do
17432: LD_EXP 30
17436: PUSH
17437: LD_EXP 69
17441: AND
17442: IFFALSE 17458
17444: GO 17446
17446: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17447: LD_STRING displayStucuk();
17449: PPUSH
17450: CALL_OW 559
// ResetFog ;
17454: CALL_OW 335
// end ;
17458: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17459: LD_EXP 30
17463: PUSH
17464: LD_EXP 62
17468: AND
17469: IFFALSE 17610
17471: GO 17473
17473: DISABLE
17474: LD_INT 0
17476: PPUSH
17477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: LD_INT 22
17485: PUSH
17486: LD_OWVAR 2
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 21
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PPUSH
17509: CALL_OW 69
17513: ST_TO_ADDR
// if not tmp then
17514: LD_VAR 0 2
17518: NOT
17519: IFFALSE 17523
// exit ;
17521: GO 17610
// un := tmp [ rand ( 1 , tmp ) ] ;
17523: LD_ADDR_VAR 0 1
17527: PUSH
17528: LD_VAR 0 2
17532: PUSH
17533: LD_INT 1
17535: PPUSH
17536: LD_VAR 0 2
17540: PPUSH
17541: CALL_OW 12
17545: ARRAY
17546: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 0
17554: PPUSH
17555: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17559: LD_VAR 0 1
17563: PPUSH
17564: LD_OWVAR 3
17568: PUSH
17569: LD_VAR 0 1
17573: DIFF
17574: PPUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 74
17584: PPUSH
17585: CALL_OW 115
// wait ( 0 0$20 ) ;
17589: LD_INT 700
17591: PPUSH
17592: CALL_OW 67
// SetSide ( un , your_side ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_OWVAR 2
17605: PPUSH
17606: CALL_OW 235
// end ;
17610: PPOPN 2
17612: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17613: LD_EXP 30
17617: PUSH
17618: LD_EXP 63
17622: AND
17623: IFFALSE 17729
17625: GO 17627
17627: DISABLE
17628: LD_INT 0
17630: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17631: LD_ADDR_VAR 0 1
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: LD_OWVAR 2
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 2
17650: PUSH
17651: LD_INT 30
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 30
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 69
17684: ST_TO_ADDR
// if not depot then
17685: LD_VAR 0 1
17689: NOT
17690: IFFALSE 17694
// exit ;
17692: GO 17729
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17694: LD_VAR 0 1
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: CALL_OW 250
17707: PPUSH
17708: LD_VAR 0 1
17712: PUSH
17713: LD_INT 1
17715: ARRAY
17716: PPUSH
17717: CALL_OW 251
17721: PPUSH
17722: LD_INT 70
17724: PPUSH
17725: CALL_OW 495
// end ;
17729: PPOPN 1
17731: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17732: LD_EXP 30
17736: PUSH
17737: LD_EXP 64
17741: AND
17742: IFFALSE 17953
17744: GO 17746
17746: DISABLE
17747: LD_INT 0
17749: PPUSH
17750: PPUSH
17751: PPUSH
17752: PPUSH
17753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17754: LD_ADDR_VAR 0 5
17758: PUSH
17759: LD_INT 22
17761: PUSH
17762: LD_OWVAR 2
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 21
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: ST_TO_ADDR
// if not tmp then
17790: LD_VAR 0 5
17794: NOT
17795: IFFALSE 17799
// exit ;
17797: GO 17953
// for i in tmp do
17799: LD_ADDR_VAR 0 1
17803: PUSH
17804: LD_VAR 0 5
17808: PUSH
17809: FOR_IN
17810: IFFALSE 17951
// begin d := rand ( 0 , 5 ) ;
17812: LD_ADDR_VAR 0 4
17816: PUSH
17817: LD_INT 0
17819: PPUSH
17820: LD_INT 5
17822: PPUSH
17823: CALL_OW 12
17827: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17828: LD_ADDR_VAR 0 2
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 250
17842: PPUSH
17843: LD_VAR 0 4
17847: PPUSH
17848: LD_INT 3
17850: PPUSH
17851: LD_INT 12
17853: PPUSH
17854: CALL_OW 12
17858: PPUSH
17859: CALL_OW 272
17863: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17864: LD_ADDR_VAR 0 3
17868: PUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 251
17878: PPUSH
17879: LD_VAR 0 4
17883: PPUSH
17884: LD_INT 3
17886: PPUSH
17887: LD_INT 12
17889: PPUSH
17890: CALL_OW 12
17894: PPUSH
17895: CALL_OW 273
17899: ST_TO_ADDR
// if ValidHex ( x , y ) then
17900: LD_VAR 0 2
17904: PPUSH
17905: LD_VAR 0 3
17909: PPUSH
17910: CALL_OW 488
17914: IFFALSE 17949
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17916: LD_VAR 0 1
17920: PPUSH
17921: LD_VAR 0 2
17925: PPUSH
17926: LD_VAR 0 3
17930: PPUSH
17931: LD_INT 3
17933: PPUSH
17934: LD_INT 6
17936: PPUSH
17937: CALL_OW 12
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 483
// end ;
17949: GO 17809
17951: POP
17952: POP
// end ;
17953: PPOPN 5
17955: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17956: LD_EXP 30
17960: PUSH
17961: LD_EXP 65
17965: AND
17966: IFFALSE 18060
17968: GO 17970
17970: DISABLE
17971: LD_INT 0
17973: PPUSH
17974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17975: LD_ADDR_VAR 0 2
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_OWVAR 2
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 32
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PPUSH
18017: CALL_OW 69
18021: ST_TO_ADDR
// if not tmp then
18022: LD_VAR 0 2
18026: NOT
18027: IFFALSE 18031
// exit ;
18029: GO 18060
// for i in tmp do
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_VAR 0 2
18040: PUSH
18041: FOR_IN
18042: IFFALSE 18058
// SetFuel ( i , 0 ) ;
18044: LD_VAR 0 1
18048: PPUSH
18049: LD_INT 0
18051: PPUSH
18052: CALL_OW 240
18056: GO 18041
18058: POP
18059: POP
// end ;
18060: PPOPN 2
18062: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18063: LD_EXP 30
18067: PUSH
18068: LD_EXP 66
18072: AND
18073: IFFALSE 18139
18075: GO 18077
18077: DISABLE
18078: LD_INT 0
18080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18081: LD_ADDR_VAR 0 1
18085: PUSH
18086: LD_INT 22
18088: PUSH
18089: LD_OWVAR 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 29
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PPUSH
18112: CALL_OW 69
18116: ST_TO_ADDR
// if not tmp then
18117: LD_VAR 0 1
18121: NOT
18122: IFFALSE 18126
// exit ;
18124: GO 18139
// DestroyUnit ( tmp [ 1 ] ) ;
18126: LD_VAR 0 1
18130: PUSH
18131: LD_INT 1
18133: ARRAY
18134: PPUSH
18135: CALL_OW 65
// end ;
18139: PPOPN 1
18141: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18142: LD_EXP 30
18146: PUSH
18147: LD_EXP 68
18151: AND
18152: IFFALSE 18281
18154: GO 18156
18156: DISABLE
18157: LD_INT 0
18159: PPUSH
// begin uc_side := 0 ;
18160: LD_ADDR_OWVAR 20
18164: PUSH
18165: LD_INT 0
18167: ST_TO_ADDR
// uc_nation := nation_arabian ;
18168: LD_ADDR_OWVAR 21
18172: PUSH
18173: LD_INT 2
18175: ST_TO_ADDR
// hc_gallery :=  ;
18176: LD_ADDR_OWVAR 33
18180: PUSH
18181: LD_STRING 
18183: ST_TO_ADDR
// hc_name :=  ;
18184: LD_ADDR_OWVAR 26
18188: PUSH
18189: LD_STRING 
18191: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18192: LD_INT 1
18194: PPUSH
18195: LD_INT 11
18197: PPUSH
18198: LD_INT 10
18200: PPUSH
18201: CALL_OW 380
// un := CreateHuman ;
18205: LD_ADDR_VAR 0 1
18209: PUSH
18210: CALL_OW 44
18214: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18227: LD_INT 35
18229: PPUSH
18230: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18234: LD_VAR 0 1
18238: PPUSH
18239: LD_INT 22
18241: PUSH
18242: LD_OWVAR 2
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PPUSH
18251: CALL_OW 69
18255: PPUSH
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 74
18265: PPUSH
18266: CALL_OW 115
// until IsDead ( un ) ;
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 301
18279: IFFALSE 18227
// end ;
18281: PPOPN 1
18283: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18284: LD_EXP 30
18288: PUSH
18289: LD_EXP 70
18293: AND
18294: IFFALSE 18306
18296: GO 18298
18298: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18299: LD_STRING earthquake(getX(game), 0, 32)
18301: PPUSH
18302: CALL_OW 559
18306: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18307: LD_EXP 30
18311: PUSH
18312: LD_EXP 71
18316: AND
18317: IFFALSE 18408
18319: GO 18321
18321: DISABLE
18322: LD_INT 0
18324: PPUSH
// begin enable ;
18325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_INT 22
18333: PUSH
18334: LD_OWVAR 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 21
18345: PUSH
18346: LD_INT 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 33
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: ST_TO_ADDR
// if not tmp then
18373: LD_VAR 0 1
18377: NOT
18378: IFFALSE 18382
// exit ;
18380: GO 18408
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18382: LD_VAR 0 1
18386: PUSH
18387: LD_INT 1
18389: PPUSH
18390: LD_VAR 0 1
18394: PPUSH
18395: CALL_OW 12
18399: ARRAY
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 234
// end ;
18408: PPOPN 1
18410: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18411: LD_EXP 30
18415: PUSH
18416: LD_EXP 72
18420: AND
18421: IFFALSE 18562
18423: GO 18425
18425: DISABLE
18426: LD_INT 0
18428: PPUSH
18429: PPUSH
18430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18431: LD_ADDR_VAR 0 3
18435: PUSH
18436: LD_INT 22
18438: PUSH
18439: LD_OWVAR 2
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 25
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PPUSH
18462: CALL_OW 69
18466: ST_TO_ADDR
// if not tmp then
18467: LD_VAR 0 3
18471: NOT
18472: IFFALSE 18476
// exit ;
18474: GO 18562
// un := tmp [ rand ( 1 , tmp ) ] ;
18476: LD_ADDR_VAR 0 2
18480: PUSH
18481: LD_VAR 0 3
18485: PUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: CALL_OW 12
18498: ARRAY
18499: ST_TO_ADDR
// if Crawls ( un ) then
18500: LD_VAR 0 2
18504: PPUSH
18505: CALL_OW 318
18509: IFFALSE 18520
// ComWalk ( un ) ;
18511: LD_VAR 0 2
18515: PPUSH
18516: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18520: LD_VAR 0 2
18524: PPUSH
18525: LD_INT 9
18527: PPUSH
18528: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18532: LD_INT 28
18534: PPUSH
18535: LD_OWVAR 2
18539: PPUSH
18540: LD_INT 2
18542: PPUSH
18543: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18547: LD_INT 29
18549: PPUSH
18550: LD_OWVAR 2
18554: PPUSH
18555: LD_INT 2
18557: PPUSH
18558: CALL_OW 322
// end ;
18562: PPOPN 3
18564: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18565: LD_EXP 30
18569: PUSH
18570: LD_EXP 73
18574: AND
18575: IFFALSE 18686
18577: GO 18579
18579: DISABLE
18580: LD_INT 0
18582: PPUSH
18583: PPUSH
18584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_OWVAR 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PPUSH
18616: CALL_OW 69
18620: ST_TO_ADDR
// if not tmp then
18621: LD_VAR 0 3
18625: NOT
18626: IFFALSE 18630
// exit ;
18628: GO 18686
// un := tmp [ rand ( 1 , tmp ) ] ;
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_VAR 0 3
18639: PUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_VAR 0 3
18647: PPUSH
18648: CALL_OW 12
18652: ARRAY
18653: ST_TO_ADDR
// if Crawls ( un ) then
18654: LD_VAR 0 2
18658: PPUSH
18659: CALL_OW 318
18663: IFFALSE 18674
// ComWalk ( un ) ;
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18674: LD_VAR 0 2
18678: PPUSH
18679: LD_INT 8
18681: PPUSH
18682: CALL_OW 336
// end ;
18686: PPOPN 3
18688: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18689: LD_EXP 30
18693: PUSH
18694: LD_EXP 74
18698: AND
18699: IFFALSE 18843
18701: GO 18703
18703: DISABLE
18704: LD_INT 0
18706: PPUSH
18707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18708: LD_ADDR_VAR 0 2
18712: PUSH
18713: LD_INT 22
18715: PUSH
18716: LD_OWVAR 2
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 21
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: LD_INT 34
18740: PUSH
18741: LD_INT 12
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 34
18750: PUSH
18751: LD_INT 51
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 34
18760: PUSH
18761: LD_INT 32
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: PPUSH
18779: CALL_OW 69
18783: ST_TO_ADDR
// if not tmp then
18784: LD_VAR 0 2
18788: NOT
18789: IFFALSE 18793
// exit ;
18791: GO 18843
// for i in tmp do
18793: LD_ADDR_VAR 0 1
18797: PUSH
18798: LD_VAR 0 2
18802: PUSH
18803: FOR_IN
18804: IFFALSE 18841
// if GetCargo ( i , mat_artifact ) = 0 then
18806: LD_VAR 0 1
18810: PPUSH
18811: LD_INT 4
18813: PPUSH
18814: CALL_OW 289
18818: PUSH
18819: LD_INT 0
18821: EQUAL
18822: IFFALSE 18839
// SetCargo ( i , mat_siberit , 100 ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_INT 3
18831: PPUSH
18832: LD_INT 100
18834: PPUSH
18835: CALL_OW 290
18839: GO 18803
18841: POP
18842: POP
// end ;
18843: PPOPN 2
18845: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18846: LD_EXP 30
18850: PUSH
18851: LD_EXP 75
18855: AND
18856: IFFALSE 19039
18858: GO 18860
18860: DISABLE
18861: LD_INT 0
18863: PPUSH
18864: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18865: LD_ADDR_VAR 0 2
18869: PUSH
18870: LD_INT 22
18872: PUSH
18873: LD_OWVAR 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: ST_TO_ADDR
// if not tmp then
18887: LD_VAR 0 2
18891: NOT
18892: IFFALSE 18896
// exit ;
18894: GO 19039
// for i := 1 to 2 do
18896: LD_ADDR_VAR 0 1
18900: PUSH
18901: DOUBLE
18902: LD_INT 1
18904: DEC
18905: ST_TO_ADDR
18906: LD_INT 2
18908: PUSH
18909: FOR_TO
18910: IFFALSE 19037
// begin uc_side := your_side ;
18912: LD_ADDR_OWVAR 20
18916: PUSH
18917: LD_OWVAR 2
18921: ST_TO_ADDR
// uc_nation := nation_american ;
18922: LD_ADDR_OWVAR 21
18926: PUSH
18927: LD_INT 1
18929: ST_TO_ADDR
// vc_chassis := us_morphling ;
18930: LD_ADDR_OWVAR 37
18934: PUSH
18935: LD_INT 5
18937: ST_TO_ADDR
// vc_engine := engine_siberite ;
18938: LD_ADDR_OWVAR 39
18942: PUSH
18943: LD_INT 3
18945: ST_TO_ADDR
// vc_control := control_computer ;
18946: LD_ADDR_OWVAR 38
18950: PUSH
18951: LD_INT 3
18953: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18954: LD_ADDR_OWVAR 40
18958: PUSH
18959: LD_INT 10
18961: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18962: LD_VAR 0 2
18966: PUSH
18967: LD_INT 1
18969: ARRAY
18970: PPUSH
18971: CALL_OW 310
18975: NOT
18976: IFFALSE 19023
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18978: CALL_OW 45
18982: PPUSH
18983: LD_VAR 0 2
18987: PUSH
18988: LD_INT 1
18990: ARRAY
18991: PPUSH
18992: CALL_OW 250
18996: PPUSH
18997: LD_VAR 0 2
19001: PUSH
19002: LD_INT 1
19004: ARRAY
19005: PPUSH
19006: CALL_OW 251
19010: PPUSH
19011: LD_INT 12
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 50
19021: GO 19035
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19023: CALL_OW 45
19027: PPUSH
19028: LD_INT 1
19030: PPUSH
19031: CALL_OW 51
// end ;
19035: GO 18909
19037: POP
19038: POP
// end ;
19039: PPOPN 2
19041: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19042: LD_EXP 30
19046: PUSH
19047: LD_EXP 76
19051: AND
19052: IFFALSE 19274
19054: GO 19056
19056: DISABLE
19057: LD_INT 0
19059: PPUSH
19060: PPUSH
19061: PPUSH
19062: PPUSH
19063: PPUSH
19064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19065: LD_ADDR_VAR 0 6
19069: PUSH
19070: LD_INT 22
19072: PUSH
19073: LD_OWVAR 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 21
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: LD_INT 23
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: PPUSH
19114: CALL_OW 69
19118: ST_TO_ADDR
// if not tmp then
19119: LD_VAR 0 6
19123: NOT
19124: IFFALSE 19128
// exit ;
19126: GO 19274
// s1 := rand ( 1 , 4 ) ;
19128: LD_ADDR_VAR 0 2
19132: PUSH
19133: LD_INT 1
19135: PPUSH
19136: LD_INT 4
19138: PPUSH
19139: CALL_OW 12
19143: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19144: LD_ADDR_VAR 0 4
19148: PUSH
19149: LD_VAR 0 6
19153: PUSH
19154: LD_INT 1
19156: ARRAY
19157: PPUSH
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 259
19167: ST_TO_ADDR
// if s1 = 1 then
19168: LD_VAR 0 2
19172: PUSH
19173: LD_INT 1
19175: EQUAL
19176: IFFALSE 19196
// s2 := rand ( 2 , 4 ) else
19178: LD_ADDR_VAR 0 3
19182: PUSH
19183: LD_INT 2
19185: PPUSH
19186: LD_INT 4
19188: PPUSH
19189: CALL_OW 12
19193: ST_TO_ADDR
19194: GO 19204
// s2 := 1 ;
19196: LD_ADDR_VAR 0 3
19200: PUSH
19201: LD_INT 1
19203: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19204: LD_ADDR_VAR 0 5
19208: PUSH
19209: LD_VAR 0 6
19213: PUSH
19214: LD_INT 1
19216: ARRAY
19217: PPUSH
19218: LD_VAR 0 3
19222: PPUSH
19223: CALL_OW 259
19227: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19228: LD_VAR 0 6
19232: PUSH
19233: LD_INT 1
19235: ARRAY
19236: PPUSH
19237: LD_VAR 0 2
19241: PPUSH
19242: LD_VAR 0 5
19246: PPUSH
19247: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19251: LD_VAR 0 6
19255: PUSH
19256: LD_INT 1
19258: ARRAY
19259: PPUSH
19260: LD_VAR 0 3
19264: PPUSH
19265: LD_VAR 0 4
19269: PPUSH
19270: CALL_OW 237
// end ;
19274: PPOPN 6
19276: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19277: LD_EXP 30
19281: PUSH
19282: LD_EXP 77
19286: AND
19287: IFFALSE 19366
19289: GO 19291
19291: DISABLE
19292: LD_INT 0
19294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19295: LD_ADDR_VAR 0 1
19299: PUSH
19300: LD_INT 22
19302: PUSH
19303: LD_OWVAR 2
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 30
19314: PUSH
19315: LD_INT 3
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PPUSH
19326: CALL_OW 69
19330: ST_TO_ADDR
// if not tmp then
19331: LD_VAR 0 1
19335: NOT
19336: IFFALSE 19340
// exit ;
19338: GO 19366
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19340: LD_VAR 0 1
19344: PUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_VAR 0 1
19352: PPUSH
19353: CALL_OW 12
19357: ARRAY
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 234
// end ;
19366: PPOPN 1
19368: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19369: LD_EXP 30
19373: PUSH
19374: LD_EXP 78
19378: AND
19379: IFFALSE 19491
19381: GO 19383
19383: DISABLE
19384: LD_INT 0
19386: PPUSH
19387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: LD_INT 22
19395: PUSH
19396: LD_OWVAR 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 30
19410: PUSH
19411: LD_INT 27
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 30
19420: PUSH
19421: LD_INT 26
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 30
19430: PUSH
19431: LD_INT 28
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// if not tmp then
19453: LD_VAR 0 2
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 19491
// for i in tmp do
19462: LD_ADDR_VAR 0 1
19466: PUSH
19467: LD_VAR 0 2
19471: PUSH
19472: FOR_IN
19473: IFFALSE 19489
// SetLives ( i , 1 ) ;
19475: LD_VAR 0 1
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: CALL_OW 234
19487: GO 19472
19489: POP
19490: POP
// end ;
19491: PPOPN 2
19493: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19494: LD_EXP 30
19498: PUSH
19499: LD_EXP 79
19503: AND
19504: IFFALSE 19791
19506: GO 19508
19508: DISABLE
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
// begin i := rand ( 1 , 7 ) ;
19514: LD_ADDR_VAR 0 1
19518: PUSH
19519: LD_INT 1
19521: PPUSH
19522: LD_INT 7
19524: PPUSH
19525: CALL_OW 12
19529: ST_TO_ADDR
// case i of 1 :
19530: LD_VAR 0 1
19534: PUSH
19535: LD_INT 1
19537: DOUBLE
19538: EQUAL
19539: IFTRUE 19543
19541: GO 19553
19543: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19544: LD_STRING earthquake(getX(game), 0, 32)
19546: PPUSH
19547: CALL_OW 559
19551: GO 19791
19553: LD_INT 2
19555: DOUBLE
19556: EQUAL
19557: IFTRUE 19561
19559: GO 19575
19561: POP
// begin ToLua ( displayStucuk(); ) ;
19562: LD_STRING displayStucuk();
19564: PPUSH
19565: CALL_OW 559
// ResetFog ;
19569: CALL_OW 335
// end ; 3 :
19573: GO 19791
19575: LD_INT 3
19577: DOUBLE
19578: EQUAL
19579: IFTRUE 19583
19581: GO 19687
19583: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: LD_INT 22
19591: PUSH
19592: LD_OWVAR 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 25
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PPUSH
19615: CALL_OW 69
19619: ST_TO_ADDR
// if not tmp then
19620: LD_VAR 0 2
19624: NOT
19625: IFFALSE 19629
// exit ;
19627: GO 19791
// un := tmp [ rand ( 1 , tmp ) ] ;
19629: LD_ADDR_VAR 0 3
19633: PUSH
19634: LD_VAR 0 2
19638: PUSH
19639: LD_INT 1
19641: PPUSH
19642: LD_VAR 0 2
19646: PPUSH
19647: CALL_OW 12
19651: ARRAY
19652: ST_TO_ADDR
// if Crawls ( un ) then
19653: LD_VAR 0 3
19657: PPUSH
19658: CALL_OW 318
19662: IFFALSE 19673
// ComWalk ( un ) ;
19664: LD_VAR 0 3
19668: PPUSH
19669: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19673: LD_VAR 0 3
19677: PPUSH
19678: LD_INT 8
19680: PPUSH
19681: CALL_OW 336
// end ; 4 :
19685: GO 19791
19687: LD_INT 4
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19769
19695: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19696: LD_ADDR_VAR 0 2
19700: PUSH
19701: LD_INT 22
19703: PUSH
19704: LD_OWVAR 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 30
19715: PUSH
19716: LD_INT 29
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PPUSH
19727: CALL_OW 69
19731: ST_TO_ADDR
// if not tmp then
19732: LD_VAR 0 2
19736: NOT
19737: IFFALSE 19741
// exit ;
19739: GO 19791
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19741: LD_VAR 0 2
19745: PUSH
19746: LD_INT 1
19748: ARRAY
19749: PPUSH
19750: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19754: LD_VAR 0 2
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: CALL_OW 65
// end ; 5 .. 7 :
19767: GO 19791
19769: LD_INT 5
19771: DOUBLE
19772: GREATEREQUAL
19773: IFFALSE 19781
19775: LD_INT 7
19777: DOUBLE
19778: LESSEQUAL
19779: IFTRUE 19783
19781: GO 19790
19783: POP
// StreamSibBomb ; end ;
19784: CALL 16028 0 0
19788: GO 19791
19790: POP
// end ;
19791: PPOPN 3
19793: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19794: LD_EXP 30
19798: PUSH
19799: LD_EXP 80
19803: AND
19804: IFFALSE 19960
19806: GO 19808
19808: DISABLE
19809: LD_INT 0
19811: PPUSH
19812: PPUSH
19813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19814: LD_ADDR_VAR 0 2
19818: PUSH
19819: LD_INT 81
19821: PUSH
19822: LD_OWVAR 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 21
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 21
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: ST_TO_ADDR
// if not tmp then
19868: LD_VAR 0 2
19872: NOT
19873: IFFALSE 19877
// exit ;
19875: GO 19960
// p := 0 ;
19877: LD_ADDR_VAR 0 3
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19885: LD_INT 35
19887: PPUSH
19888: CALL_OW 67
// p := p + 1 ;
19892: LD_ADDR_VAR 0 3
19896: PUSH
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 1
19904: PLUS
19905: ST_TO_ADDR
// for i in tmp do
19906: LD_ADDR_VAR 0 1
19910: PUSH
19911: LD_VAR 0 2
19915: PUSH
19916: FOR_IN
19917: IFFALSE 19948
// if GetLives ( i ) < 1000 then
19919: LD_VAR 0 1
19923: PPUSH
19924: CALL_OW 256
19928: PUSH
19929: LD_INT 1000
19931: LESS
19932: IFFALSE 19946
// SetLives ( i , 1000 ) ;
19934: LD_VAR 0 1
19938: PPUSH
19939: LD_INT 1000
19941: PPUSH
19942: CALL_OW 234
19946: GO 19916
19948: POP
19949: POP
// until p > 20 ;
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 20
19957: GREATER
19958: IFFALSE 19885
// end ;
19960: PPOPN 3
19962: END
// every 0 0$1 trigger StreamModeActive and sTime do
19963: LD_EXP 30
19967: PUSH
19968: LD_EXP 81
19972: AND
19973: IFFALSE 20008
19975: GO 19977
19977: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19978: LD_INT 28
19980: PPUSH
19981: LD_OWVAR 2
19985: PPUSH
19986: LD_INT 2
19988: PPUSH
19989: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19993: LD_INT 30
19995: PPUSH
19996: LD_OWVAR 2
20000: PPUSH
20001: LD_INT 2
20003: PPUSH
20004: CALL_OW 322
// end ;
20008: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20009: LD_EXP 30
20013: PUSH
20014: LD_EXP 82
20018: AND
20019: IFFALSE 20140
20021: GO 20023
20023: DISABLE
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20028: LD_ADDR_VAR 0 2
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_OWVAR 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 21
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 3
20057: PUSH
20058: LD_INT 23
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: ST_TO_ADDR
// if not tmp then
20082: LD_VAR 0 2
20086: NOT
20087: IFFALSE 20091
// exit ;
20089: GO 20140
// for i in tmp do
20091: LD_ADDR_VAR 0 1
20095: PUSH
20096: LD_VAR 0 2
20100: PUSH
20101: FOR_IN
20102: IFFALSE 20138
// begin if Crawls ( i ) then
20104: LD_VAR 0 1
20108: PPUSH
20109: CALL_OW 318
20113: IFFALSE 20124
// ComWalk ( i ) ;
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 138
// SetClass ( i , 2 ) ;
20124: LD_VAR 0 1
20128: PPUSH
20129: LD_INT 2
20131: PPUSH
20132: CALL_OW 336
// end ;
20136: GO 20101
20138: POP
20139: POP
// end ;
20140: PPOPN 2
20142: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20143: LD_EXP 30
20147: PUSH
20148: LD_EXP 83
20152: AND
20153: IFFALSE 20441
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20163: LD_OWVAR 2
20167: PPUSH
20168: LD_INT 9
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: LD_INT 1
20176: PPUSH
20177: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20181: LD_INT 9
20183: PPUSH
20184: LD_OWVAR 2
20188: PPUSH
20189: CALL_OW 343
// uc_side := 9 ;
20193: LD_ADDR_OWVAR 20
20197: PUSH
20198: LD_INT 9
20200: ST_TO_ADDR
// uc_nation := 2 ;
20201: LD_ADDR_OWVAR 21
20205: PUSH
20206: LD_INT 2
20208: ST_TO_ADDR
// hc_name := Dark Warrior ;
20209: LD_ADDR_OWVAR 26
20213: PUSH
20214: LD_STRING Dark Warrior
20216: ST_TO_ADDR
// hc_gallery :=  ;
20217: LD_ADDR_OWVAR 33
20221: PUSH
20222: LD_STRING 
20224: ST_TO_ADDR
// hc_noskilllimit := true ;
20225: LD_ADDR_OWVAR 76
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20233: LD_ADDR_OWVAR 31
20237: PUSH
20238: LD_INT 30
20240: PUSH
20241: LD_INT 30
20243: PUSH
20244: LD_INT 30
20246: PUSH
20247: LD_INT 30
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// un := CreateHuman ;
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: CALL_OW 44
20265: ST_TO_ADDR
// hc_noskilllimit := false ;
20266: LD_ADDR_OWVAR 76
20270: PUSH
20271: LD_INT 0
20273: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20274: LD_VAR 0 3
20278: PPUSH
20279: LD_INT 1
20281: PPUSH
20282: CALL_OW 51
// ToLua ( playRanger() ) ;
20286: LD_STRING playRanger()
20288: PPUSH
20289: CALL_OW 559
// p := 0 ;
20293: LD_ADDR_VAR 0 2
20297: PUSH
20298: LD_INT 0
20300: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20301: LD_INT 35
20303: PPUSH
20304: CALL_OW 67
// p := p + 1 ;
20308: LD_ADDR_VAR 0 2
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: PLUS
20321: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20322: LD_VAR 0 3
20326: PPUSH
20327: CALL_OW 256
20331: PUSH
20332: LD_INT 1000
20334: LESS
20335: IFFALSE 20349
// SetLives ( un , 1000 ) ;
20337: LD_VAR 0 3
20341: PPUSH
20342: LD_INT 1000
20344: PPUSH
20345: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20349: LD_VAR 0 3
20353: PPUSH
20354: LD_INT 81
20356: PUSH
20357: LD_OWVAR 2
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 91
20368: PUSH
20369: LD_VAR 0 3
20373: PUSH
20374: LD_INT 30
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PPUSH
20386: CALL_OW 69
20390: PPUSH
20391: LD_VAR 0 3
20395: PPUSH
20396: CALL_OW 74
20400: PPUSH
20401: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20405: LD_VAR 0 2
20409: PUSH
20410: LD_INT 80
20412: GREATER
20413: PUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 301
20423: OR
20424: IFFALSE 20301
// if un then
20426: LD_VAR 0 3
20430: IFFALSE 20441
// RemoveUnit ( un ) ;
20432: LD_VAR 0 3
20436: PPUSH
20437: CALL_OW 64
// end ;
20441: PPOPN 3
20443: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20444: LD_EXP 84
20448: IFFALSE 20564
20450: GO 20452
20452: DISABLE
20453: LD_INT 0
20455: PPUSH
20456: PPUSH
20457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20458: LD_ADDR_VAR 0 2
20462: PUSH
20463: LD_INT 81
20465: PUSH
20466: LD_OWVAR 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 21
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PPUSH
20489: CALL_OW 69
20493: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20494: LD_STRING playComputer()
20496: PPUSH
20497: CALL_OW 559
// if not tmp then
20501: LD_VAR 0 2
20505: NOT
20506: IFFALSE 20510
// exit ;
20508: GO 20564
// for i in tmp do
20510: LD_ADDR_VAR 0 1
20514: PUSH
20515: LD_VAR 0 2
20519: PUSH
20520: FOR_IN
20521: IFFALSE 20562
// for j := 1 to 4 do
20523: LD_ADDR_VAR 0 3
20527: PUSH
20528: DOUBLE
20529: LD_INT 1
20531: DEC
20532: ST_TO_ADDR
20533: LD_INT 4
20535: PUSH
20536: FOR_TO
20537: IFFALSE 20558
// SetSkill ( i , j , 10 ) ;
20539: LD_VAR 0 1
20543: PPUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 10
20551: PPUSH
20552: CALL_OW 237
20556: GO 20536
20558: POP
20559: POP
20560: GO 20520
20562: POP
20563: POP
// end ;
20564: PPOPN 3
20566: END
// every 0 0$1 trigger s30 do var i , tmp ;
20567: LD_EXP 85
20571: IFFALSE 20640
20573: GO 20575
20575: DISABLE
20576: LD_INT 0
20578: PPUSH
20579: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20580: LD_ADDR_VAR 0 2
20584: PUSH
20585: LD_INT 22
20587: PUSH
20588: LD_OWVAR 2
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PPUSH
20597: CALL_OW 69
20601: ST_TO_ADDR
// if not tmp then
20602: LD_VAR 0 2
20606: NOT
20607: IFFALSE 20611
// exit ;
20609: GO 20640
// for i in tmp do
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_VAR 0 2
20620: PUSH
20621: FOR_IN
20622: IFFALSE 20638
// SetLives ( i , 300 ) ;
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_INT 300
20631: PPUSH
20632: CALL_OW 234
20636: GO 20621
20638: POP
20639: POP
// end ;
20640: PPOPN 2
20642: END
// every 0 0$1 trigger s60 do var i , tmp ;
20643: LD_EXP 86
20647: IFFALSE 20716
20649: GO 20651
20651: DISABLE
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20656: LD_ADDR_VAR 0 2
20660: PUSH
20661: LD_INT 22
20663: PUSH
20664: LD_OWVAR 2
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL_OW 69
20677: ST_TO_ADDR
// if not tmp then
20678: LD_VAR 0 2
20682: NOT
20683: IFFALSE 20687
// exit ;
20685: GO 20716
// for i in tmp do
20687: LD_ADDR_VAR 0 1
20691: PUSH
20692: LD_VAR 0 2
20696: PUSH
20697: FOR_IN
20698: IFFALSE 20714
// SetLives ( i , 600 ) ;
20700: LD_VAR 0 1
20704: PPUSH
20705: LD_INT 600
20707: PPUSH
20708: CALL_OW 234
20712: GO 20697
20714: POP
20715: POP
// end ;
20716: PPOPN 2
20718: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20719: LD_INT 0
20721: PPUSH
// case cmd of 301 :
20722: LD_VAR 0 1
20726: PUSH
20727: LD_INT 301
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20767
20735: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20736: LD_VAR 0 6
20740: PPUSH
20741: LD_VAR 0 7
20745: PPUSH
20746: LD_VAR 0 8
20750: PPUSH
20751: LD_VAR 0 4
20755: PPUSH
20756: LD_VAR 0 5
20760: PPUSH
20761: CALL 21968 0 5
20765: GO 20888
20767: LD_INT 302
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20812
20775: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20776: LD_VAR 0 6
20780: PPUSH
20781: LD_VAR 0 7
20785: PPUSH
20786: LD_VAR 0 8
20790: PPUSH
20791: LD_VAR 0 9
20795: PPUSH
20796: LD_VAR 0 4
20800: PPUSH
20801: LD_VAR 0 5
20805: PPUSH
20806: CALL 22059 0 6
20810: GO 20888
20812: LD_INT 303
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20857
20820: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20821: LD_VAR 0 6
20825: PPUSH
20826: LD_VAR 0 7
20830: PPUSH
20831: LD_VAR 0 8
20835: PPUSH
20836: LD_VAR 0 9
20840: PPUSH
20841: LD_VAR 0 4
20845: PPUSH
20846: LD_VAR 0 5
20850: PPUSH
20851: CALL 20893 0 6
20855: GO 20888
20857: LD_INT 304
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 20887
20865: POP
// hHackTeleport ( unit , x , y ) ; end ;
20866: LD_VAR 0 2
20870: PPUSH
20871: LD_VAR 0 4
20875: PPUSH
20876: LD_VAR 0 5
20880: PPUSH
20881: CALL 22652 0 3
20885: GO 20888
20887: POP
// end ;
20888: LD_VAR 0 12
20892: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20893: LD_INT 0
20895: PPUSH
20896: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20897: LD_VAR 0 1
20901: PUSH
20902: LD_INT 1
20904: LESS
20905: PUSH
20906: LD_VAR 0 1
20910: PUSH
20911: LD_INT 3
20913: GREATER
20914: OR
20915: PUSH
20916: LD_VAR 0 5
20920: PPUSH
20921: LD_VAR 0 6
20925: PPUSH
20926: CALL_OW 428
20930: OR
20931: IFFALSE 20935
// exit ;
20933: GO 21655
// uc_side := your_side ;
20935: LD_ADDR_OWVAR 20
20939: PUSH
20940: LD_OWVAR 2
20944: ST_TO_ADDR
// uc_nation := nation ;
20945: LD_ADDR_OWVAR 21
20949: PUSH
20950: LD_VAR 0 1
20954: ST_TO_ADDR
// bc_level = 1 ;
20955: LD_ADDR_OWVAR 43
20959: PUSH
20960: LD_INT 1
20962: ST_TO_ADDR
// case btype of 1 :
20963: LD_VAR 0 2
20967: PUSH
20968: LD_INT 1
20970: DOUBLE
20971: EQUAL
20972: IFTRUE 20976
20974: GO 20987
20976: POP
// bc_type := b_depot ; 2 :
20977: LD_ADDR_OWVAR 42
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
20985: GO 21599
20987: LD_INT 2
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21006
20995: POP
// bc_type := b_warehouse ; 3 :
20996: LD_ADDR_OWVAR 42
21000: PUSH
21001: LD_INT 1
21003: ST_TO_ADDR
21004: GO 21599
21006: LD_INT 3
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21025
21014: POP
// bc_type := b_lab ; 4 .. 9 :
21015: LD_ADDR_OWVAR 42
21019: PUSH
21020: LD_INT 6
21022: ST_TO_ADDR
21023: GO 21599
21025: LD_INT 4
21027: DOUBLE
21028: GREATEREQUAL
21029: IFFALSE 21037
21031: LD_INT 9
21033: DOUBLE
21034: LESSEQUAL
21035: IFTRUE 21039
21037: GO 21091
21039: POP
// begin bc_type := b_lab_half ;
21040: LD_ADDR_OWVAR 42
21044: PUSH
21045: LD_INT 7
21047: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21048: LD_ADDR_OWVAR 44
21052: PUSH
21053: LD_INT 10
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 15
21064: PUSH
21065: LD_INT 14
21067: PUSH
21068: LD_INT 13
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: PUSH
21079: LD_VAR 0 2
21083: PUSH
21084: LD_INT 3
21086: MINUS
21087: ARRAY
21088: ST_TO_ADDR
// end ; 10 .. 13 :
21089: GO 21599
21091: LD_INT 10
21093: DOUBLE
21094: GREATEREQUAL
21095: IFFALSE 21103
21097: LD_INT 13
21099: DOUBLE
21100: LESSEQUAL
21101: IFTRUE 21105
21103: GO 21182
21105: POP
// begin bc_type := b_lab_full ;
21106: LD_ADDR_OWVAR 42
21110: PUSH
21111: LD_INT 8
21113: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21114: LD_ADDR_OWVAR 44
21118: PUSH
21119: LD_INT 10
21121: PUSH
21122: LD_INT 12
21124: PUSH
21125: LD_INT 14
21127: PUSH
21128: LD_INT 13
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: PUSH
21137: LD_VAR 0 2
21141: PUSH
21142: LD_INT 9
21144: MINUS
21145: ARRAY
21146: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21147: LD_ADDR_OWVAR 45
21151: PUSH
21152: LD_INT 11
21154: PUSH
21155: LD_INT 15
21157: PUSH
21158: LD_INT 12
21160: PUSH
21161: LD_INT 15
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: PUSH
21170: LD_VAR 0 2
21174: PUSH
21175: LD_INT 9
21177: MINUS
21178: ARRAY
21179: ST_TO_ADDR
// end ; 14 :
21180: GO 21599
21182: LD_INT 14
21184: DOUBLE
21185: EQUAL
21186: IFTRUE 21190
21188: GO 21201
21190: POP
// bc_type := b_workshop ; 15 :
21191: LD_ADDR_OWVAR 42
21195: PUSH
21196: LD_INT 2
21198: ST_TO_ADDR
21199: GO 21599
21201: LD_INT 15
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21220
21209: POP
// bc_type := b_factory ; 16 :
21210: LD_ADDR_OWVAR 42
21214: PUSH
21215: LD_INT 3
21217: ST_TO_ADDR
21218: GO 21599
21220: LD_INT 16
21222: DOUBLE
21223: EQUAL
21224: IFTRUE 21228
21226: GO 21239
21228: POP
// bc_type := b_ext_gun ; 17 :
21229: LD_ADDR_OWVAR 42
21233: PUSH
21234: LD_INT 17
21236: ST_TO_ADDR
21237: GO 21599
21239: LD_INT 17
21241: DOUBLE
21242: EQUAL
21243: IFTRUE 21247
21245: GO 21275
21247: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21248: LD_ADDR_OWVAR 42
21252: PUSH
21253: LD_INT 19
21255: PUSH
21256: LD_INT 23
21258: PUSH
21259: LD_INT 19
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: PUSH
21267: LD_VAR 0 1
21271: ARRAY
21272: ST_TO_ADDR
21273: GO 21599
21275: LD_INT 18
21277: DOUBLE
21278: EQUAL
21279: IFTRUE 21283
21281: GO 21294
21283: POP
// bc_type := b_ext_radar ; 19 :
21284: LD_ADDR_OWVAR 42
21288: PUSH
21289: LD_INT 20
21291: ST_TO_ADDR
21292: GO 21599
21294: LD_INT 19
21296: DOUBLE
21297: EQUAL
21298: IFTRUE 21302
21300: GO 21313
21302: POP
// bc_type := b_ext_radio ; 20 :
21303: LD_ADDR_OWVAR 42
21307: PUSH
21308: LD_INT 22
21310: ST_TO_ADDR
21311: GO 21599
21313: LD_INT 20
21315: DOUBLE
21316: EQUAL
21317: IFTRUE 21321
21319: GO 21332
21321: POP
// bc_type := b_ext_siberium ; 21 :
21322: LD_ADDR_OWVAR 42
21326: PUSH
21327: LD_INT 21
21329: ST_TO_ADDR
21330: GO 21599
21332: LD_INT 21
21334: DOUBLE
21335: EQUAL
21336: IFTRUE 21340
21338: GO 21351
21340: POP
// bc_type := b_ext_computer ; 22 :
21341: LD_ADDR_OWVAR 42
21345: PUSH
21346: LD_INT 24
21348: ST_TO_ADDR
21349: GO 21599
21351: LD_INT 22
21353: DOUBLE
21354: EQUAL
21355: IFTRUE 21359
21357: GO 21370
21359: POP
// bc_type := b_ext_track ; 23 :
21360: LD_ADDR_OWVAR 42
21364: PUSH
21365: LD_INT 16
21367: ST_TO_ADDR
21368: GO 21599
21370: LD_INT 23
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21389
21378: POP
// bc_type := b_ext_laser ; 24 :
21379: LD_ADDR_OWVAR 42
21383: PUSH
21384: LD_INT 25
21386: ST_TO_ADDR
21387: GO 21599
21389: LD_INT 24
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21408
21397: POP
// bc_type := b_control_tower ; 25 :
21398: LD_ADDR_OWVAR 42
21402: PUSH
21403: LD_INT 36
21405: ST_TO_ADDR
21406: GO 21599
21408: LD_INT 25
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21427
21416: POP
// bc_type := b_breastwork ; 26 :
21417: LD_ADDR_OWVAR 42
21421: PUSH
21422: LD_INT 31
21424: ST_TO_ADDR
21425: GO 21599
21427: LD_INT 26
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21446
21435: POP
// bc_type := b_bunker ; 27 :
21436: LD_ADDR_OWVAR 42
21440: PUSH
21441: LD_INT 32
21443: ST_TO_ADDR
21444: GO 21599
21446: LD_INT 27
21448: DOUBLE
21449: EQUAL
21450: IFTRUE 21454
21452: GO 21465
21454: POP
// bc_type := b_turret ; 28 :
21455: LD_ADDR_OWVAR 42
21459: PUSH
21460: LD_INT 33
21462: ST_TO_ADDR
21463: GO 21599
21465: LD_INT 28
21467: DOUBLE
21468: EQUAL
21469: IFTRUE 21473
21471: GO 21484
21473: POP
// bc_type := b_armoury ; 29 :
21474: LD_ADDR_OWVAR 42
21478: PUSH
21479: LD_INT 4
21481: ST_TO_ADDR
21482: GO 21599
21484: LD_INT 29
21486: DOUBLE
21487: EQUAL
21488: IFTRUE 21492
21490: GO 21503
21492: POP
// bc_type := b_barracks ; 30 :
21493: LD_ADDR_OWVAR 42
21497: PUSH
21498: LD_INT 5
21500: ST_TO_ADDR
21501: GO 21599
21503: LD_INT 30
21505: DOUBLE
21506: EQUAL
21507: IFTRUE 21511
21509: GO 21522
21511: POP
// bc_type := b_solar_power ; 31 :
21512: LD_ADDR_OWVAR 42
21516: PUSH
21517: LD_INT 27
21519: ST_TO_ADDR
21520: GO 21599
21522: LD_INT 31
21524: DOUBLE
21525: EQUAL
21526: IFTRUE 21530
21528: GO 21541
21530: POP
// bc_type := b_oil_power ; 32 :
21531: LD_ADDR_OWVAR 42
21535: PUSH
21536: LD_INT 26
21538: ST_TO_ADDR
21539: GO 21599
21541: LD_INT 32
21543: DOUBLE
21544: EQUAL
21545: IFTRUE 21549
21547: GO 21560
21549: POP
// bc_type := b_siberite_power ; 33 :
21550: LD_ADDR_OWVAR 42
21554: PUSH
21555: LD_INT 28
21557: ST_TO_ADDR
21558: GO 21599
21560: LD_INT 33
21562: DOUBLE
21563: EQUAL
21564: IFTRUE 21568
21566: GO 21579
21568: POP
// bc_type := b_oil_mine ; 34 :
21569: LD_ADDR_OWVAR 42
21573: PUSH
21574: LD_INT 29
21576: ST_TO_ADDR
21577: GO 21599
21579: LD_INT 34
21581: DOUBLE
21582: EQUAL
21583: IFTRUE 21587
21585: GO 21598
21587: POP
// bc_type := b_siberite_mine ; end ;
21588: LD_ADDR_OWVAR 42
21592: PUSH
21593: LD_INT 30
21595: ST_TO_ADDR
21596: GO 21599
21598: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21599: LD_ADDR_VAR 0 8
21603: PUSH
21604: LD_VAR 0 5
21608: PPUSH
21609: LD_VAR 0 6
21613: PPUSH
21614: LD_VAR 0 3
21618: PPUSH
21619: CALL_OW 47
21623: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21624: LD_OWVAR 42
21628: PUSH
21629: LD_INT 32
21631: PUSH
21632: LD_INT 33
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: IN
21639: IFFALSE 21655
// PlaceWeaponTurret ( b , weapon ) ;
21641: LD_VAR 0 8
21645: PPUSH
21646: LD_VAR 0 4
21650: PPUSH
21651: CALL_OW 431
// end ;
21655: LD_VAR 0 7
21659: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
21664: PPUSH
21665: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21666: LD_ADDR_VAR 0 4
21670: PUSH
21671: LD_INT 22
21673: PUSH
21674: LD_OWVAR 2
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: LD_INT 30
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 30
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PPUSH
21715: CALL_OW 69
21719: ST_TO_ADDR
// if not tmp then
21720: LD_VAR 0 4
21724: NOT
21725: IFFALSE 21729
// exit ;
21727: GO 21788
// for i in tmp do
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_VAR 0 4
21738: PUSH
21739: FOR_IN
21740: IFFALSE 21786
// for j = 1 to 3 do
21742: LD_ADDR_VAR 0 3
21746: PUSH
21747: DOUBLE
21748: LD_INT 1
21750: DEC
21751: ST_TO_ADDR
21752: LD_INT 3
21754: PUSH
21755: FOR_TO
21756: IFFALSE 21782
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21758: LD_VAR 0 2
21762: PPUSH
21763: CALL_OW 274
21767: PPUSH
21768: LD_VAR 0 3
21772: PPUSH
21773: LD_INT 99999
21775: PPUSH
21776: CALL_OW 277
21780: GO 21755
21782: POP
21783: POP
21784: GO 21739
21786: POP
21787: POP
// end ;
21788: LD_VAR 0 1
21792: RET
// export function hHackSetLevel10 ; var i , j ; begin
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
21797: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_INT 21
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PPUSH
21813: CALL_OW 69
21817: PUSH
21818: FOR_IN
21819: IFFALSE 21871
// if IsSelected ( i ) then
21821: LD_VAR 0 2
21825: PPUSH
21826: CALL_OW 306
21830: IFFALSE 21869
// begin for j := 1 to 4 do
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: DOUBLE
21838: LD_INT 1
21840: DEC
21841: ST_TO_ADDR
21842: LD_INT 4
21844: PUSH
21845: FOR_TO
21846: IFFALSE 21867
// SetSkill ( i , j , 10 ) ;
21848: LD_VAR 0 2
21852: PPUSH
21853: LD_VAR 0 3
21857: PPUSH
21858: LD_INT 10
21860: PPUSH
21861: CALL_OW 237
21865: GO 21845
21867: POP
21868: POP
// end ;
21869: GO 21818
21871: POP
21872: POP
// end ;
21873: LD_VAR 0 1
21877: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21878: LD_INT 0
21880: PPUSH
21881: PPUSH
21882: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: LD_INT 22
21890: PUSH
21891: LD_OWVAR 2
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 21
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 69
21918: PUSH
21919: FOR_IN
21920: IFFALSE 21961
// begin for j := 1 to 4 do
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: DOUBLE
21928: LD_INT 1
21930: DEC
21931: ST_TO_ADDR
21932: LD_INT 4
21934: PUSH
21935: FOR_TO
21936: IFFALSE 21957
// SetSkill ( i , j , 10 ) ;
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: LD_INT 10
21950: PPUSH
21951: CALL_OW 237
21955: GO 21935
21957: POP
21958: POP
// end ;
21959: GO 21919
21961: POP
21962: POP
// end ;
21963: LD_VAR 0 1
21967: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21968: LD_INT 0
21970: PPUSH
// uc_side := your_side ;
21971: LD_ADDR_OWVAR 20
21975: PUSH
21976: LD_OWVAR 2
21980: ST_TO_ADDR
// uc_nation := nation ;
21981: LD_ADDR_OWVAR 21
21985: PUSH
21986: LD_VAR 0 1
21990: ST_TO_ADDR
// InitHc ;
21991: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21995: LD_INT 0
21997: PPUSH
21998: LD_VAR 0 2
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22012: LD_VAR 0 4
22016: PPUSH
22017: LD_VAR 0 5
22021: PPUSH
22022: CALL_OW 428
22026: PUSH
22027: LD_INT 0
22029: EQUAL
22030: IFFALSE 22054
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22032: CALL_OW 44
22036: PPUSH
22037: LD_VAR 0 4
22041: PPUSH
22042: LD_VAR 0 5
22046: PPUSH
22047: LD_INT 1
22049: PPUSH
22050: CALL_OW 48
// end ;
22054: LD_VAR 0 6
22058: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22059: LD_INT 0
22061: PPUSH
22062: PPUSH
// uc_side := your_side ;
22063: LD_ADDR_OWVAR 20
22067: PUSH
22068: LD_OWVAR 2
22072: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22073: LD_VAR 0 1
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: IN
22100: IFFALSE 22112
// uc_nation := nation_american else
22102: LD_ADDR_OWVAR 21
22106: PUSH
22107: LD_INT 1
22109: ST_TO_ADDR
22110: GO 22155
// if chassis in [ 11 , 12 , 13 , 14 ] then
22112: LD_VAR 0 1
22116: PUSH
22117: LD_INT 11
22119: PUSH
22120: LD_INT 12
22122: PUSH
22123: LD_INT 13
22125: PUSH
22126: LD_INT 14
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: IN
22135: IFFALSE 22147
// uc_nation := nation_arabian else
22137: LD_ADDR_OWVAR 21
22141: PUSH
22142: LD_INT 2
22144: ST_TO_ADDR
22145: GO 22155
// uc_nation := nation_russian ;
22147: LD_ADDR_OWVAR 21
22151: PUSH
22152: LD_INT 3
22154: ST_TO_ADDR
// vc_chassis := chassis ;
22155: LD_ADDR_OWVAR 37
22159: PUSH
22160: LD_VAR 0 1
22164: ST_TO_ADDR
// vc_engine := engine ;
22165: LD_ADDR_OWVAR 39
22169: PUSH
22170: LD_VAR 0 2
22174: ST_TO_ADDR
// vc_control := control ;
22175: LD_ADDR_OWVAR 38
22179: PUSH
22180: LD_VAR 0 3
22184: ST_TO_ADDR
// vc_weapon := weapon ;
22185: LD_ADDR_OWVAR 40
22189: PUSH
22190: LD_VAR 0 4
22194: ST_TO_ADDR
// un := CreateVehicle ;
22195: LD_ADDR_VAR 0 8
22199: PUSH
22200: CALL_OW 45
22204: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22205: LD_VAR 0 8
22209: PPUSH
22210: LD_INT 0
22212: PPUSH
22213: LD_INT 5
22215: PPUSH
22216: CALL_OW 12
22220: PPUSH
22221: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22225: LD_VAR 0 8
22229: PPUSH
22230: LD_VAR 0 5
22234: PPUSH
22235: LD_VAR 0 6
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL_OW 48
// end ;
22247: LD_VAR 0 7
22251: RET
// export hInvincible ; every 1 do
22252: GO 22254
22254: DISABLE
// hInvincible := [ ] ;
22255: LD_ADDR_EXP 87
22259: PUSH
22260: EMPTY
22261: ST_TO_ADDR
22262: END
// every 10 do var i ;
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
// begin enable ;
22269: ENABLE
// if not hInvincible then
22270: LD_EXP 87
22274: NOT
22275: IFFALSE 22279
// exit ;
22277: GO 22323
// for i in hInvincible do
22279: LD_ADDR_VAR 0 1
22283: PUSH
22284: LD_EXP 87
22288: PUSH
22289: FOR_IN
22290: IFFALSE 22321
// if GetLives ( i ) < 1000 then
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 256
22301: PUSH
22302: LD_INT 1000
22304: LESS
22305: IFFALSE 22319
// SetLives ( i , 1000 ) ;
22307: LD_VAR 0 1
22311: PPUSH
22312: LD_INT 1000
22314: PPUSH
22315: CALL_OW 234
22319: GO 22289
22321: POP
22322: POP
// end ;
22323: PPOPN 1
22325: END
// export function hHackInvincible ; var i ; begin
22326: LD_INT 0
22328: PPUSH
22329: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22330: LD_ADDR_VAR 0 2
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: LD_INT 21
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 21
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: PUSH
22368: FOR_IN
22369: IFFALSE 22430
// if IsSelected ( i ) then
22371: LD_VAR 0 2
22375: PPUSH
22376: CALL_OW 306
22380: IFFALSE 22428
// begin if i in hInvincible then
22382: LD_VAR 0 2
22386: PUSH
22387: LD_EXP 87
22391: IN
22392: IFFALSE 22412
// hInvincible := hInvincible diff i else
22394: LD_ADDR_EXP 87
22398: PUSH
22399: LD_EXP 87
22403: PUSH
22404: LD_VAR 0 2
22408: DIFF
22409: ST_TO_ADDR
22410: GO 22428
// hInvincible := hInvincible union i ;
22412: LD_ADDR_EXP 87
22416: PUSH
22417: LD_EXP 87
22421: PUSH
22422: LD_VAR 0 2
22426: UNION
22427: ST_TO_ADDR
// end ;
22428: GO 22368
22430: POP
22431: POP
// end ;
22432: LD_VAR 0 1
22436: RET
// export function hHackInvisible ; var i , j ; begin
22437: LD_INT 0
22439: PPUSH
22440: PPUSH
22441: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_INT 21
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PPUSH
22457: CALL_OW 69
22461: PUSH
22462: FOR_IN
22463: IFFALSE 22487
// if IsSelected ( i ) then
22465: LD_VAR 0 2
22469: PPUSH
22470: CALL_OW 306
22474: IFFALSE 22485
// ComForceInvisible ( i ) ;
22476: LD_VAR 0 2
22480: PPUSH
22481: CALL_OW 496
22485: GO 22462
22487: POP
22488: POP
// end ;
22489: LD_VAR 0 1
22493: RET
// export function hHackChangeYourSide ; begin
22494: LD_INT 0
22496: PPUSH
// if your_side = 8 then
22497: LD_OWVAR 2
22501: PUSH
22502: LD_INT 8
22504: EQUAL
22505: IFFALSE 22517
// your_side := 0 else
22507: LD_ADDR_OWVAR 2
22511: PUSH
22512: LD_INT 0
22514: ST_TO_ADDR
22515: GO 22531
// your_side := your_side + 1 ;
22517: LD_ADDR_OWVAR 2
22521: PUSH
22522: LD_OWVAR 2
22526: PUSH
22527: LD_INT 1
22529: PLUS
22530: ST_TO_ADDR
// end ;
22531: LD_VAR 0 1
22535: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
22540: PPUSH
// for i in all_units do
22541: LD_ADDR_VAR 0 2
22545: PUSH
22546: LD_OWVAR 3
22550: PUSH
22551: FOR_IN
22552: IFFALSE 22630
// if IsSelected ( i ) then
22554: LD_VAR 0 2
22558: PPUSH
22559: CALL_OW 306
22563: IFFALSE 22628
// begin j := GetSide ( i ) ;
22565: LD_ADDR_VAR 0 3
22569: PUSH
22570: LD_VAR 0 2
22574: PPUSH
22575: CALL_OW 255
22579: ST_TO_ADDR
// if j = 8 then
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 8
22587: EQUAL
22588: IFFALSE 22600
// j := 0 else
22590: LD_ADDR_VAR 0 3
22594: PUSH
22595: LD_INT 0
22597: ST_TO_ADDR
22598: GO 22614
// j := j + 1 ;
22600: LD_ADDR_VAR 0 3
22604: PUSH
22605: LD_VAR 0 3
22609: PUSH
22610: LD_INT 1
22612: PLUS
22613: ST_TO_ADDR
// SetSide ( i , j ) ;
22614: LD_VAR 0 2
22618: PPUSH
22619: LD_VAR 0 3
22623: PPUSH
22624: CALL_OW 235
// end ;
22628: GO 22551
22630: POP
22631: POP
// end ;
22632: LD_VAR 0 1
22636: RET
// export function hHackFog ; begin
22637: LD_INT 0
22639: PPUSH
// FogOff ( true ) ;
22640: LD_INT 1
22642: PPUSH
22643: CALL_OW 344
// end ;
22647: LD_VAR 0 1
22651: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22652: LD_INT 0
22654: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22655: LD_VAR 0 1
22659: PPUSH
22660: LD_VAR 0 2
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 483
// CenterOnXY ( x , y ) ;
22680: LD_VAR 0 2
22684: PPUSH
22685: LD_VAR 0 3
22689: PPUSH
22690: CALL_OW 84
// end ;
22694: LD_VAR 0 4
22698: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22699: LD_INT 0
22701: PPUSH
22702: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22703: LD_VAR 0 1
22707: NOT
22708: PUSH
22709: LD_VAR 0 2
22713: PPUSH
22714: LD_VAR 0 3
22718: PPUSH
22719: CALL_OW 488
22723: NOT
22724: OR
22725: PUSH
22726: LD_VAR 0 1
22730: PPUSH
22731: CALL_OW 266
22735: PUSH
22736: LD_INT 3
22738: NONEQUAL
22739: PUSH
22740: LD_VAR 0 1
22744: PPUSH
22745: CALL_OW 247
22749: PUSH
22750: LD_INT 1
22752: EQUAL
22753: NOT
22754: AND
22755: OR
22756: IFFALSE 22760
// exit ;
22758: GO 22909
// if GetType ( factory ) = unit_human then
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL_OW 247
22769: PUSH
22770: LD_INT 1
22772: EQUAL
22773: IFFALSE 22790
// factory := IsInUnit ( factory ) ;
22775: LD_ADDR_VAR 0 1
22779: PUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 310
22789: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_INT 3
22802: NONEQUAL
22803: IFFALSE 22807
// exit ;
22805: GO 22909
// if HexInfo ( x , y ) = factory then
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 3
22816: PPUSH
22817: CALL_OW 428
22821: PUSH
22822: LD_VAR 0 1
22826: EQUAL
22827: IFFALSE 22854
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22829: LD_ADDR_EXP 88
22833: PUSH
22834: LD_EXP 88
22838: PPUSH
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 0
22846: PPUSH
22847: CALL_OW 1
22851: ST_TO_ADDR
22852: GO 22905
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22854: LD_ADDR_EXP 88
22858: PUSH
22859: LD_EXP 88
22863: PPUSH
22864: LD_VAR 0 1
22868: PPUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 255
22878: PUSH
22879: LD_VAR 0 1
22883: PUSH
22884: LD_VAR 0 2
22888: PUSH
22889: LD_VAR 0 3
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: PPUSH
22900: CALL_OW 1
22904: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22905: CALL 22914 0 0
// end ;
22909: LD_VAR 0 4
22913: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22914: LD_INT 0
22916: PPUSH
22917: PPUSH
22918: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22919: LD_STRING resetFactoryWaypoint();
22921: PPUSH
22922: CALL_OW 559
// if factoryWaypoints then
22926: LD_EXP 88
22930: IFFALSE 23056
// begin list := PrepareArray ( factoryWaypoints ) ;
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: LD_EXP 88
22941: PPUSH
22942: CALL 69506 0 1
22946: ST_TO_ADDR
// for i := 1 to list do
22947: LD_ADDR_VAR 0 2
22951: PUSH
22952: DOUBLE
22953: LD_INT 1
22955: DEC
22956: ST_TO_ADDR
22957: LD_VAR 0 3
22961: PUSH
22962: FOR_TO
22963: IFFALSE 23054
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22965: LD_STRING setFactoryWaypointXY(
22967: PUSH
22968: LD_VAR 0 3
22972: PUSH
22973: LD_VAR 0 2
22977: ARRAY
22978: PUSH
22979: LD_INT 1
22981: ARRAY
22982: STR
22983: PUSH
22984: LD_STRING ,
22986: STR
22987: PUSH
22988: LD_VAR 0 3
22992: PUSH
22993: LD_VAR 0 2
22997: ARRAY
22998: PUSH
22999: LD_INT 2
23001: ARRAY
23002: STR
23003: PUSH
23004: LD_STRING ,
23006: STR
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: LD_VAR 0 2
23017: ARRAY
23018: PUSH
23019: LD_INT 3
23021: ARRAY
23022: STR
23023: PUSH
23024: LD_STRING ,
23026: STR
23027: PUSH
23028: LD_VAR 0 3
23032: PUSH
23033: LD_VAR 0 2
23037: ARRAY
23038: PUSH
23039: LD_INT 4
23041: ARRAY
23042: STR
23043: PUSH
23044: LD_STRING )
23046: STR
23047: PPUSH
23048: CALL_OW 559
23052: GO 22962
23054: POP
23055: POP
// end ; end ;
23056: LD_VAR 0 1
23060: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23061: LD_INT 0
23063: PPUSH
// if HexInfo ( x , y ) = warehouse then
23064: LD_VAR 0 2
23068: PPUSH
23069: LD_VAR 0 3
23073: PPUSH
23074: CALL_OW 428
23078: PUSH
23079: LD_VAR 0 1
23083: EQUAL
23084: IFFALSE 23111
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23086: LD_ADDR_EXP 89
23090: PUSH
23091: LD_EXP 89
23095: PPUSH
23096: LD_VAR 0 1
23100: PPUSH
23101: LD_INT 0
23103: PPUSH
23104: CALL_OW 1
23108: ST_TO_ADDR
23109: GO 23162
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23111: LD_ADDR_EXP 89
23115: PUSH
23116: LD_EXP 89
23120: PPUSH
23121: LD_VAR 0 1
23125: PPUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 255
23135: PUSH
23136: LD_VAR 0 1
23140: PUSH
23141: LD_VAR 0 2
23145: PUSH
23146: LD_VAR 0 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: PPUSH
23157: CALL_OW 1
23161: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23162: CALL 23171 0 0
// end ;
23166: LD_VAR 0 4
23170: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23171: LD_INT 0
23173: PPUSH
23174: PPUSH
23175: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23176: LD_STRING resetWarehouseGatheringPoints();
23178: PPUSH
23179: CALL_OW 559
// if warehouseGatheringPoints then
23183: LD_EXP 89
23187: IFFALSE 23313
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_EXP 89
23198: PPUSH
23199: CALL 69506 0 1
23203: ST_TO_ADDR
// for i := 1 to list do
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: DOUBLE
23210: LD_INT 1
23212: DEC
23213: ST_TO_ADDR
23214: LD_VAR 0 3
23218: PUSH
23219: FOR_TO
23220: IFFALSE 23311
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23222: LD_STRING setWarehouseGatheringPointXY(
23224: PUSH
23225: LD_VAR 0 3
23229: PUSH
23230: LD_VAR 0 2
23234: ARRAY
23235: PUSH
23236: LD_INT 1
23238: ARRAY
23239: STR
23240: PUSH
23241: LD_STRING ,
23243: STR
23244: PUSH
23245: LD_VAR 0 3
23249: PUSH
23250: LD_VAR 0 2
23254: ARRAY
23255: PUSH
23256: LD_INT 2
23258: ARRAY
23259: STR
23260: PUSH
23261: LD_STRING ,
23263: STR
23264: PUSH
23265: LD_VAR 0 3
23269: PUSH
23270: LD_VAR 0 2
23274: ARRAY
23275: PUSH
23276: LD_INT 3
23278: ARRAY
23279: STR
23280: PUSH
23281: LD_STRING ,
23283: STR
23284: PUSH
23285: LD_VAR 0 3
23289: PUSH
23290: LD_VAR 0 2
23294: ARRAY
23295: PUSH
23296: LD_INT 4
23298: ARRAY
23299: STR
23300: PUSH
23301: LD_STRING )
23303: STR
23304: PPUSH
23305: CALL_OW 559
23309: GO 23219
23311: POP
23312: POP
// end ; end ;
23313: LD_VAR 0 1
23317: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23318: LD_EXP 89
23322: IFFALSE 24007
23324: GO 23326
23326: DISABLE
23327: LD_INT 0
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
// begin enable ;
23338: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23339: LD_ADDR_VAR 0 3
23343: PUSH
23344: LD_EXP 89
23348: PPUSH
23349: CALL 69506 0 1
23353: ST_TO_ADDR
// if not list then
23354: LD_VAR 0 3
23358: NOT
23359: IFFALSE 23363
// exit ;
23361: GO 24007
// for i := 1 to list do
23363: LD_ADDR_VAR 0 1
23367: PUSH
23368: DOUBLE
23369: LD_INT 1
23371: DEC
23372: ST_TO_ADDR
23373: LD_VAR 0 3
23377: PUSH
23378: FOR_TO
23379: IFFALSE 24005
// begin depot := list [ i ] [ 2 ] ;
23381: LD_ADDR_VAR 0 8
23385: PUSH
23386: LD_VAR 0 3
23390: PUSH
23391: LD_VAR 0 1
23395: ARRAY
23396: PUSH
23397: LD_INT 2
23399: ARRAY
23400: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23401: LD_ADDR_VAR 0 5
23405: PUSH
23406: LD_VAR 0 3
23410: PUSH
23411: LD_VAR 0 1
23415: ARRAY
23416: PUSH
23417: LD_INT 1
23419: ARRAY
23420: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23421: LD_VAR 0 8
23425: PPUSH
23426: CALL_OW 301
23430: PUSH
23431: LD_VAR 0 5
23435: PUSH
23436: LD_VAR 0 8
23440: PPUSH
23441: CALL_OW 255
23445: NONEQUAL
23446: OR
23447: IFFALSE 23476
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23449: LD_ADDR_EXP 89
23453: PUSH
23454: LD_EXP 89
23458: PPUSH
23459: LD_VAR 0 8
23463: PPUSH
23464: LD_INT 0
23466: PPUSH
23467: CALL_OW 1
23471: ST_TO_ADDR
// exit ;
23472: POP
23473: POP
23474: GO 24007
// end ; x := list [ i ] [ 3 ] ;
23476: LD_ADDR_VAR 0 6
23480: PUSH
23481: LD_VAR 0 3
23485: PUSH
23486: LD_VAR 0 1
23490: ARRAY
23491: PUSH
23492: LD_INT 3
23494: ARRAY
23495: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23496: LD_ADDR_VAR 0 7
23500: PUSH
23501: LD_VAR 0 3
23505: PUSH
23506: LD_VAR 0 1
23510: ARRAY
23511: PUSH
23512: LD_INT 4
23514: ARRAY
23515: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23516: LD_ADDR_VAR 0 9
23520: PUSH
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: LD_INT 16
23533: PPUSH
23534: CALL 68094 0 3
23538: ST_TO_ADDR
// if not cratesNearbyPoint then
23539: LD_VAR 0 9
23543: NOT
23544: IFFALSE 23550
// exit ;
23546: POP
23547: POP
23548: GO 24007
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23550: LD_ADDR_VAR 0 4
23554: PUSH
23555: LD_INT 22
23557: PUSH
23558: LD_VAR 0 5
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 3
23569: PUSH
23570: LD_INT 60
23572: PUSH
23573: EMPTY
23574: LIST
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 91
23582: PUSH
23583: LD_VAR 0 8
23587: PUSH
23588: LD_INT 6
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: LD_INT 25
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 25
23611: PUSH
23612: LD_INT 16
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PPUSH
23630: CALL_OW 69
23634: PUSH
23635: LD_VAR 0 8
23639: PPUSH
23640: CALL_OW 313
23644: PPUSH
23645: LD_INT 3
23647: PUSH
23648: LD_INT 60
23650: PUSH
23651: EMPTY
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: LD_INT 25
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 25
23673: PUSH
23674: LD_INT 16
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 72
23694: UNION
23695: ST_TO_ADDR
// if tmp then
23696: LD_VAR 0 4
23700: IFFALSE 23780
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23702: LD_ADDR_VAR 0 4
23706: PUSH
23707: LD_VAR 0 4
23711: PPUSH
23712: LD_INT 3
23714: PPUSH
23715: CALL 66063 0 2
23719: ST_TO_ADDR
// for j in tmp do
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_VAR 0 4
23729: PUSH
23730: FOR_IN
23731: IFFALSE 23774
// begin if IsInUnit ( j ) then
23733: LD_VAR 0 2
23737: PPUSH
23738: CALL_OW 310
23742: IFFALSE 23753
// ComExit ( j ) ;
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL 66146 0 1
// AddComCollect ( j , x , y ) ;
23753: LD_VAR 0 2
23757: PPUSH
23758: LD_VAR 0 6
23762: PPUSH
23763: LD_VAR 0 7
23767: PPUSH
23768: CALL_OW 177
// end ;
23772: GO 23730
23774: POP
23775: POP
// exit ;
23776: POP
23777: POP
23778: GO 24007
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23780: LD_ADDR_VAR 0 4
23784: PUSH
23785: LD_INT 22
23787: PUSH
23788: LD_VAR 0 5
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 91
23799: PUSH
23800: LD_VAR 0 8
23804: PUSH
23805: LD_INT 8
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 34
23818: PUSH
23819: LD_INT 12
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 34
23828: PUSH
23829: LD_INT 51
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 34
23838: PUSH
23839: LD_INT 32
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 34
23848: PUSH
23849: LD_INT 89
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: PPUSH
23868: CALL_OW 69
23872: ST_TO_ADDR
// if tmp then
23873: LD_VAR 0 4
23877: IFFALSE 24003
// begin for j in tmp do
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_VAR 0 4
23888: PUSH
23889: FOR_IN
23890: IFFALSE 24001
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23892: LD_VAR 0 2
23896: PPUSH
23897: CALL_OW 262
23901: PUSH
23902: LD_INT 3
23904: EQUAL
23905: PUSH
23906: LD_VAR 0 2
23910: PPUSH
23911: CALL_OW 261
23915: PUSH
23916: LD_INT 20
23918: GREATER
23919: OR
23920: PUSH
23921: LD_VAR 0 2
23925: PPUSH
23926: CALL_OW 314
23930: NOT
23931: AND
23932: PUSH
23933: LD_VAR 0 2
23937: PPUSH
23938: CALL_OW 263
23942: PUSH
23943: LD_INT 1
23945: NONEQUAL
23946: PUSH
23947: LD_VAR 0 2
23951: PPUSH
23952: CALL_OW 311
23956: OR
23957: AND
23958: IFFALSE 23999
// begin ComCollect ( j , x , y ) ;
23960: LD_VAR 0 2
23964: PPUSH
23965: LD_VAR 0 6
23969: PPUSH
23970: LD_VAR 0 7
23974: PPUSH
23975: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23979: LD_VAR 0 2
23983: PPUSH
23984: LD_VAR 0 8
23988: PPUSH
23989: CALL_OW 172
// exit ;
23993: POP
23994: POP
23995: POP
23996: POP
23997: GO 24007
// end ;
23999: GO 23889
24001: POP
24002: POP
// end ; end ;
24003: GO 23378
24005: POP
24006: POP
// end ; end_of_file
24007: PPOPN 9
24009: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24010: LD_INT 0
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 264
24025: PUSH
24026: LD_INT 91
24028: EQUAL
24029: IFFALSE 24101
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24031: LD_INT 68
24033: PPUSH
24034: LD_VAR 0 1
24038: PPUSH
24039: CALL_OW 255
24043: PPUSH
24044: CALL_OW 321
24048: PUSH
24049: LD_INT 2
24051: EQUAL
24052: IFFALSE 24064
// eff := 70 else
24054: LD_ADDR_VAR 0 4
24058: PUSH
24059: LD_INT 70
24061: ST_TO_ADDR
24062: GO 24072
// eff := 30 ;
24064: LD_ADDR_VAR 0 4
24068: PUSH
24069: LD_INT 30
24071: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24072: LD_VAR 0 1
24076: PPUSH
24077: CALL_OW 250
24081: PPUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 251
24091: PPUSH
24092: LD_VAR 0 4
24096: PPUSH
24097: CALL_OW 495
// end ; end ;
24101: LD_VAR 0 2
24105: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24106: LD_INT 0
24108: PPUSH
// end ;
24109: LD_VAR 0 4
24113: RET
// export function SOS_Command ( cmd ) ; begin
24114: LD_INT 0
24116: PPUSH
// end ;
24117: LD_VAR 0 2
24121: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24122: LD_INT 0
24124: PPUSH
// end ;
24125: LD_VAR 0 6
24129: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24130: LD_INT 0
24132: PPUSH
24133: PPUSH
// if not vehicle or not factory then
24134: LD_VAR 0 1
24138: NOT
24139: PUSH
24140: LD_VAR 0 2
24144: NOT
24145: OR
24146: IFFALSE 24150
// exit ;
24148: GO 24381
// if factoryWaypoints >= factory then
24150: LD_EXP 88
24154: PUSH
24155: LD_VAR 0 2
24159: GREATEREQUAL
24160: IFFALSE 24381
// if factoryWaypoints [ factory ] then
24162: LD_EXP 88
24166: PUSH
24167: LD_VAR 0 2
24171: ARRAY
24172: IFFALSE 24381
// begin if GetControl ( vehicle ) = control_manual then
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 263
24183: PUSH
24184: LD_INT 1
24186: EQUAL
24187: IFFALSE 24268
// begin driver := IsDrivenBy ( vehicle ) ;
24189: LD_ADDR_VAR 0 4
24193: PUSH
24194: LD_VAR 0 1
24198: PPUSH
24199: CALL_OW 311
24203: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24204: LD_VAR 0 4
24208: PPUSH
24209: LD_EXP 88
24213: PUSH
24214: LD_VAR 0 2
24218: ARRAY
24219: PUSH
24220: LD_INT 3
24222: ARRAY
24223: PPUSH
24224: LD_EXP 88
24228: PUSH
24229: LD_VAR 0 2
24233: ARRAY
24234: PUSH
24235: LD_INT 4
24237: ARRAY
24238: PPUSH
24239: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24243: LD_VAR 0 4
24247: PPUSH
24248: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24252: LD_VAR 0 4
24256: PPUSH
24257: LD_VAR 0 2
24261: PPUSH
24262: CALL_OW 180
// end else
24266: GO 24381
// if GetControl ( vehicle ) = control_remote then
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 263
24277: PUSH
24278: LD_INT 2
24280: EQUAL
24281: IFFALSE 24342
// begin wait ( 0 0$2 ) ;
24283: LD_INT 70
24285: PPUSH
24286: CALL_OW 67
// if Connect ( vehicle ) then
24290: LD_VAR 0 1
24294: PPUSH
24295: CALL 36405 0 1
24299: IFFALSE 24340
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_EXP 88
24310: PUSH
24311: LD_VAR 0 2
24315: ARRAY
24316: PUSH
24317: LD_INT 3
24319: ARRAY
24320: PPUSH
24321: LD_EXP 88
24325: PUSH
24326: LD_VAR 0 2
24330: ARRAY
24331: PUSH
24332: LD_INT 4
24334: ARRAY
24335: PPUSH
24336: CALL_OW 171
// end else
24340: GO 24381
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_EXP 88
24351: PUSH
24352: LD_VAR 0 2
24356: ARRAY
24357: PUSH
24358: LD_INT 3
24360: ARRAY
24361: PPUSH
24362: LD_EXP 88
24366: PUSH
24367: LD_VAR 0 2
24371: ARRAY
24372: PUSH
24373: LD_INT 4
24375: ARRAY
24376: PPUSH
24377: CALL_OW 171
// end ; end ;
24381: LD_VAR 0 3
24385: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24386: LD_INT 0
24388: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24389: LD_VAR 0 1
24393: PUSH
24394: LD_INT 250
24396: EQUAL
24397: PUSH
24398: LD_VAR 0 2
24402: PPUSH
24403: CALL_OW 264
24407: PUSH
24408: LD_INT 81
24410: EQUAL
24411: AND
24412: IFFALSE 24433
// MinerPlaceMine ( unit , x , y ) ;
24414: LD_VAR 0 2
24418: PPUSH
24419: LD_VAR 0 4
24423: PPUSH
24424: LD_VAR 0 5
24428: PPUSH
24429: CALL 26818 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24433: LD_VAR 0 1
24437: PUSH
24438: LD_INT 251
24440: EQUAL
24441: PUSH
24442: LD_VAR 0 2
24446: PPUSH
24447: CALL_OW 264
24451: PUSH
24452: LD_INT 81
24454: EQUAL
24455: AND
24456: IFFALSE 24477
// MinerDetonateMine ( unit , x , y ) ;
24458: LD_VAR 0 2
24462: PPUSH
24463: LD_VAR 0 4
24467: PPUSH
24468: LD_VAR 0 5
24472: PPUSH
24473: CALL 27093 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24477: LD_VAR 0 1
24481: PUSH
24482: LD_INT 252
24484: EQUAL
24485: PUSH
24486: LD_VAR 0 2
24490: PPUSH
24491: CALL_OW 264
24495: PUSH
24496: LD_INT 81
24498: EQUAL
24499: AND
24500: IFFALSE 24521
// MinerCreateMinefield ( unit , x , y ) ;
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_VAR 0 4
24511: PPUSH
24512: LD_VAR 0 5
24516: PPUSH
24517: CALL 27510 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24521: LD_VAR 0 1
24525: PUSH
24526: LD_INT 253
24528: EQUAL
24529: PUSH
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL_OW 257
24539: PUSH
24540: LD_INT 5
24542: EQUAL
24543: AND
24544: IFFALSE 24565
// ComBinocular ( unit , x , y ) ;
24546: LD_VAR 0 2
24550: PPUSH
24551: LD_VAR 0 4
24555: PPUSH
24556: LD_VAR 0 5
24560: PPUSH
24561: CALL 27879 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24565: LD_VAR 0 1
24569: PUSH
24570: LD_INT 254
24572: EQUAL
24573: PUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: CALL_OW 264
24583: PUSH
24584: LD_INT 99
24586: EQUAL
24587: AND
24588: PUSH
24589: LD_VAR 0 3
24593: PPUSH
24594: CALL_OW 263
24598: PUSH
24599: LD_INT 3
24601: EQUAL
24602: AND
24603: IFFALSE 24619
// HackDestroyVehicle ( unit , selectedUnit ) ;
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: CALL 26182 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24619: LD_VAR 0 1
24623: PUSH
24624: LD_INT 255
24626: EQUAL
24627: PUSH
24628: LD_VAR 0 2
24632: PPUSH
24633: CALL_OW 264
24637: PUSH
24638: LD_INT 14
24640: PUSH
24641: LD_INT 53
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: IN
24648: AND
24649: PUSH
24650: LD_VAR 0 4
24654: PPUSH
24655: LD_VAR 0 5
24659: PPUSH
24660: CALL_OW 488
24664: AND
24665: IFFALSE 24689
// CutTreeXYR ( unit , x , y , 12 ) ;
24667: LD_VAR 0 2
24671: PPUSH
24672: LD_VAR 0 4
24676: PPUSH
24677: LD_VAR 0 5
24681: PPUSH
24682: LD_INT 12
24684: PPUSH
24685: CALL 24752 0 4
// if cmd = 256 then
24689: LD_VAR 0 1
24693: PUSH
24694: LD_INT 256
24696: EQUAL
24697: IFFALSE 24718
// SetFactoryWaypoint ( unit , x , y ) ;
24699: LD_VAR 0 2
24703: PPUSH
24704: LD_VAR 0 4
24708: PPUSH
24709: LD_VAR 0 5
24713: PPUSH
24714: CALL 22699 0 3
// if cmd = 257 then
24718: LD_VAR 0 1
24722: PUSH
24723: LD_INT 257
24725: EQUAL
24726: IFFALSE 24747
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24728: LD_VAR 0 2
24732: PPUSH
24733: LD_VAR 0 4
24737: PPUSH
24738: LD_VAR 0 5
24742: PPUSH
24743: CALL 23061 0 3
// end ;
24747: LD_VAR 0 6
24751: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24752: LD_INT 0
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
24762: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24763: LD_VAR 0 1
24767: NOT
24768: PUSH
24769: LD_VAR 0 2
24773: PPUSH
24774: LD_VAR 0 3
24778: PPUSH
24779: CALL_OW 488
24783: NOT
24784: OR
24785: PUSH
24786: LD_VAR 0 4
24790: NOT
24791: OR
24792: IFFALSE 24796
// exit ;
24794: GO 25136
// list := [ ] ;
24796: LD_ADDR_VAR 0 13
24800: PUSH
24801: EMPTY
24802: ST_TO_ADDR
// if x - r < 0 then
24803: LD_VAR 0 2
24807: PUSH
24808: LD_VAR 0 4
24812: MINUS
24813: PUSH
24814: LD_INT 0
24816: LESS
24817: IFFALSE 24829
// min_x := 0 else
24819: LD_ADDR_VAR 0 7
24823: PUSH
24824: LD_INT 0
24826: ST_TO_ADDR
24827: GO 24845
// min_x := x - r ;
24829: LD_ADDR_VAR 0 7
24833: PUSH
24834: LD_VAR 0 2
24838: PUSH
24839: LD_VAR 0 4
24843: MINUS
24844: ST_TO_ADDR
// if y - r < 0 then
24845: LD_VAR 0 3
24849: PUSH
24850: LD_VAR 0 4
24854: MINUS
24855: PUSH
24856: LD_INT 0
24858: LESS
24859: IFFALSE 24871
// min_y := 0 else
24861: LD_ADDR_VAR 0 8
24865: PUSH
24866: LD_INT 0
24868: ST_TO_ADDR
24869: GO 24887
// min_y := y - r ;
24871: LD_ADDR_VAR 0 8
24875: PUSH
24876: LD_VAR 0 3
24880: PUSH
24881: LD_VAR 0 4
24885: MINUS
24886: ST_TO_ADDR
// max_x := x + r ;
24887: LD_ADDR_VAR 0 9
24891: PUSH
24892: LD_VAR 0 2
24896: PUSH
24897: LD_VAR 0 4
24901: PLUS
24902: ST_TO_ADDR
// max_y := y + r ;
24903: LD_ADDR_VAR 0 10
24907: PUSH
24908: LD_VAR 0 3
24912: PUSH
24913: LD_VAR 0 4
24917: PLUS
24918: ST_TO_ADDR
// for _x = min_x to max_x do
24919: LD_ADDR_VAR 0 11
24923: PUSH
24924: DOUBLE
24925: LD_VAR 0 7
24929: DEC
24930: ST_TO_ADDR
24931: LD_VAR 0 9
24935: PUSH
24936: FOR_TO
24937: IFFALSE 25054
// for _y = min_y to max_y do
24939: LD_ADDR_VAR 0 12
24943: PUSH
24944: DOUBLE
24945: LD_VAR 0 8
24949: DEC
24950: ST_TO_ADDR
24951: LD_VAR 0 10
24955: PUSH
24956: FOR_TO
24957: IFFALSE 25050
// begin if not ValidHex ( _x , _y ) then
24959: LD_VAR 0 11
24963: PPUSH
24964: LD_VAR 0 12
24968: PPUSH
24969: CALL_OW 488
24973: NOT
24974: IFFALSE 24978
// continue ;
24976: GO 24956
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24978: LD_VAR 0 11
24982: PPUSH
24983: LD_VAR 0 12
24987: PPUSH
24988: CALL_OW 351
24992: PUSH
24993: LD_VAR 0 11
24997: PPUSH
24998: LD_VAR 0 12
25002: PPUSH
25003: CALL_OW 554
25007: AND
25008: IFFALSE 25048
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25010: LD_ADDR_VAR 0 13
25014: PUSH
25015: LD_VAR 0 13
25019: PPUSH
25020: LD_VAR 0 13
25024: PUSH
25025: LD_INT 1
25027: PLUS
25028: PPUSH
25029: LD_VAR 0 11
25033: PUSH
25034: LD_VAR 0 12
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 2
25047: ST_TO_ADDR
// end ;
25048: GO 24956
25050: POP
25051: POP
25052: GO 24936
25054: POP
25055: POP
// if not list then
25056: LD_VAR 0 13
25060: NOT
25061: IFFALSE 25065
// exit ;
25063: GO 25136
// for i in list do
25065: LD_ADDR_VAR 0 6
25069: PUSH
25070: LD_VAR 0 13
25074: PUSH
25075: FOR_IN
25076: IFFALSE 25134
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25078: LD_VAR 0 1
25082: PPUSH
25083: LD_STRING M
25085: PUSH
25086: LD_VAR 0 6
25090: PUSH
25091: LD_INT 1
25093: ARRAY
25094: PUSH
25095: LD_VAR 0 6
25099: PUSH
25100: LD_INT 2
25102: ARRAY
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: PPUSH
25128: CALL_OW 447
25132: GO 25075
25134: POP
25135: POP
// end ;
25136: LD_VAR 0 5
25140: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25141: LD_EXP 91
25145: NOT
25146: IFFALSE 25196
25148: GO 25150
25150: DISABLE
// begin initHack := true ;
25151: LD_ADDR_EXP 91
25155: PUSH
25156: LD_INT 1
25158: ST_TO_ADDR
// hackTanks := [ ] ;
25159: LD_ADDR_EXP 92
25163: PUSH
25164: EMPTY
25165: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25166: LD_ADDR_EXP 93
25170: PUSH
25171: EMPTY
25172: ST_TO_ADDR
// hackLimit := 3 ;
25173: LD_ADDR_EXP 94
25177: PUSH
25178: LD_INT 3
25180: ST_TO_ADDR
// hackDist := 12 ;
25181: LD_ADDR_EXP 95
25185: PUSH
25186: LD_INT 12
25188: ST_TO_ADDR
// hackCounter := [ ] ;
25189: LD_ADDR_EXP 96
25193: PUSH
25194: EMPTY
25195: ST_TO_ADDR
// end ;
25196: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25197: LD_EXP 91
25201: PUSH
25202: LD_INT 34
25204: PUSH
25205: LD_INT 99
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PPUSH
25212: CALL_OW 69
25216: AND
25217: IFFALSE 25470
25219: GO 25221
25221: DISABLE
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
// begin enable ;
25226: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25227: LD_ADDR_VAR 0 1
25231: PUSH
25232: LD_INT 34
25234: PUSH
25235: LD_INT 99
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: PUSH
25247: FOR_IN
25248: IFFALSE 25468
// begin if not i in hackTanks then
25250: LD_VAR 0 1
25254: PUSH
25255: LD_EXP 92
25259: IN
25260: NOT
25261: IFFALSE 25344
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25263: LD_ADDR_EXP 92
25267: PUSH
25268: LD_EXP 92
25272: PPUSH
25273: LD_EXP 92
25277: PUSH
25278: LD_INT 1
25280: PLUS
25281: PPUSH
25282: LD_VAR 0 1
25286: PPUSH
25287: CALL_OW 1
25291: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25292: LD_ADDR_EXP 93
25296: PUSH
25297: LD_EXP 93
25301: PPUSH
25302: LD_EXP 93
25306: PUSH
25307: LD_INT 1
25309: PLUS
25310: PPUSH
25311: EMPTY
25312: PPUSH
25313: CALL_OW 1
25317: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25318: LD_ADDR_EXP 96
25322: PUSH
25323: LD_EXP 96
25327: PPUSH
25328: LD_EXP 96
25332: PUSH
25333: LD_INT 1
25335: PLUS
25336: PPUSH
25337: EMPTY
25338: PPUSH
25339: CALL_OW 1
25343: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25344: LD_VAR 0 1
25348: PPUSH
25349: CALL_OW 302
25353: NOT
25354: IFFALSE 25367
// begin HackUnlinkAll ( i ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: CALL 25473 0 1
// continue ;
25365: GO 25247
// end ; HackCheckCapturedStatus ( i ) ;
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL 25916 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25376: LD_ADDR_VAR 0 2
25380: PUSH
25381: LD_INT 81
25383: PUSH
25384: LD_VAR 0 1
25388: PPUSH
25389: CALL_OW 255
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 33
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 91
25410: PUSH
25411: LD_VAR 0 1
25415: PUSH
25416: LD_EXP 95
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 50
25428: PUSH
25429: EMPTY
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: PPUSH
25438: CALL_OW 69
25442: ST_TO_ADDR
// if not tmp then
25443: LD_VAR 0 2
25447: NOT
25448: IFFALSE 25452
// continue ;
25450: GO 25247
// HackLink ( i , tmp ) ;
25452: LD_VAR 0 1
25456: PPUSH
25457: LD_VAR 0 2
25461: PPUSH
25462: CALL 25609 0 2
// end ;
25466: GO 25247
25468: POP
25469: POP
// end ;
25470: PPOPN 2
25472: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25473: LD_INT 0
25475: PPUSH
25476: PPUSH
25477: PPUSH
// if not hack in hackTanks then
25478: LD_VAR 0 1
25482: PUSH
25483: LD_EXP 92
25487: IN
25488: NOT
25489: IFFALSE 25493
// exit ;
25491: GO 25604
// index := GetElementIndex ( hackTanks , hack ) ;
25493: LD_ADDR_VAR 0 4
25497: PUSH
25498: LD_EXP 92
25502: PPUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL 33221 0 2
25512: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25513: LD_EXP 93
25517: PUSH
25518: LD_VAR 0 4
25522: ARRAY
25523: IFFALSE 25604
// begin for i in hackTanksCaptured [ index ] do
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_EXP 93
25534: PUSH
25535: LD_VAR 0 4
25539: ARRAY
25540: PUSH
25541: FOR_IN
25542: IFFALSE 25568
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25544: LD_VAR 0 3
25548: PUSH
25549: LD_INT 1
25551: ARRAY
25552: PPUSH
25553: LD_VAR 0 3
25557: PUSH
25558: LD_INT 2
25560: ARRAY
25561: PPUSH
25562: CALL_OW 235
25566: GO 25541
25568: POP
25569: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25570: LD_ADDR_EXP 93
25574: PUSH
25575: LD_EXP 93
25579: PPUSH
25580: LD_VAR 0 4
25584: PPUSH
25585: EMPTY
25586: PPUSH
25587: CALL_OW 1
25591: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25592: LD_VAR 0 1
25596: PPUSH
25597: LD_INT 0
25599: PPUSH
25600: CALL_OW 505
// end ; end ;
25604: LD_VAR 0 2
25608: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25609: LD_INT 0
25611: PPUSH
25612: PPUSH
25613: PPUSH
// if not hack in hackTanks or not vehicles then
25614: LD_VAR 0 1
25618: PUSH
25619: LD_EXP 92
25623: IN
25624: NOT
25625: PUSH
25626: LD_VAR 0 2
25630: NOT
25631: OR
25632: IFFALSE 25636
// exit ;
25634: GO 25911
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25636: LD_ADDR_VAR 0 2
25640: PUSH
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_VAR 0 2
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: LD_INT 1
25656: PPUSH
25657: CALL 33871 0 4
25661: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25662: LD_ADDR_VAR 0 5
25666: PUSH
25667: LD_EXP 92
25671: PPUSH
25672: LD_VAR 0 1
25676: PPUSH
25677: CALL 33221 0 2
25681: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25682: LD_EXP 93
25686: PUSH
25687: LD_VAR 0 5
25691: ARRAY
25692: PUSH
25693: LD_EXP 94
25697: LESS
25698: IFFALSE 25887
// begin for i := 1 to vehicles do
25700: LD_ADDR_VAR 0 4
25704: PUSH
25705: DOUBLE
25706: LD_INT 1
25708: DEC
25709: ST_TO_ADDR
25710: LD_VAR 0 2
25714: PUSH
25715: FOR_TO
25716: IFFALSE 25885
// begin if hackTanksCaptured [ index ] = hackLimit then
25718: LD_EXP 93
25722: PUSH
25723: LD_VAR 0 5
25727: ARRAY
25728: PUSH
25729: LD_EXP 94
25733: EQUAL
25734: IFFALSE 25738
// break ;
25736: GO 25885
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25738: LD_ADDR_EXP 96
25742: PUSH
25743: LD_EXP 96
25747: PPUSH
25748: LD_VAR 0 5
25752: PPUSH
25753: LD_EXP 96
25757: PUSH
25758: LD_VAR 0 5
25762: ARRAY
25763: PUSH
25764: LD_INT 1
25766: PLUS
25767: PPUSH
25768: CALL_OW 1
25772: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25773: LD_ADDR_EXP 93
25777: PUSH
25778: LD_EXP 93
25782: PPUSH
25783: LD_VAR 0 5
25787: PUSH
25788: LD_EXP 93
25792: PUSH
25793: LD_VAR 0 5
25797: ARRAY
25798: PUSH
25799: LD_INT 1
25801: PLUS
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: LD_VAR 0 2
25811: PUSH
25812: LD_VAR 0 4
25816: ARRAY
25817: PUSH
25818: LD_VAR 0 2
25822: PUSH
25823: LD_VAR 0 4
25827: ARRAY
25828: PPUSH
25829: CALL_OW 255
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PPUSH
25838: CALL 33436 0 3
25842: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25843: LD_VAR 0 2
25847: PUSH
25848: LD_VAR 0 4
25852: ARRAY
25853: PPUSH
25854: LD_VAR 0 1
25858: PPUSH
25859: CALL_OW 255
25863: PPUSH
25864: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25868: LD_VAR 0 2
25872: PUSH
25873: LD_VAR 0 4
25877: ARRAY
25878: PPUSH
25879: CALL_OW 141
// end ;
25883: GO 25715
25885: POP
25886: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25887: LD_VAR 0 1
25891: PPUSH
25892: LD_EXP 93
25896: PUSH
25897: LD_VAR 0 5
25901: ARRAY
25902: PUSH
25903: LD_INT 0
25905: PLUS
25906: PPUSH
25907: CALL_OW 505
// end ;
25911: LD_VAR 0 3
25915: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
// if not hack in hackTanks then
25922: LD_VAR 0 1
25926: PUSH
25927: LD_EXP 92
25931: IN
25932: NOT
25933: IFFALSE 25937
// exit ;
25935: GO 26177
// index := GetElementIndex ( hackTanks , hack ) ;
25937: LD_ADDR_VAR 0 4
25941: PUSH
25942: LD_EXP 92
25946: PPUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL 33221 0 2
25956: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25957: LD_ADDR_VAR 0 3
25961: PUSH
25962: DOUBLE
25963: LD_EXP 93
25967: PUSH
25968: LD_VAR 0 4
25972: ARRAY
25973: INC
25974: ST_TO_ADDR
25975: LD_INT 1
25977: PUSH
25978: FOR_DOWNTO
25979: IFFALSE 26151
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25981: LD_ADDR_VAR 0 5
25985: PUSH
25986: LD_EXP 93
25990: PUSH
25991: LD_VAR 0 4
25995: ARRAY
25996: PUSH
25997: LD_VAR 0 3
26001: ARRAY
26002: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26003: LD_VAR 0 5
26007: PUSH
26008: LD_INT 1
26010: ARRAY
26011: PPUSH
26012: CALL_OW 302
26016: NOT
26017: PUSH
26018: LD_VAR 0 5
26022: PUSH
26023: LD_INT 1
26025: ARRAY
26026: PPUSH
26027: CALL_OW 255
26031: PUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL_OW 255
26041: NONEQUAL
26042: OR
26043: IFFALSE 26149
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26045: LD_VAR 0 5
26049: PUSH
26050: LD_INT 1
26052: ARRAY
26053: PPUSH
26054: CALL_OW 305
26058: PUSH
26059: LD_VAR 0 5
26063: PUSH
26064: LD_INT 1
26066: ARRAY
26067: PPUSH
26068: CALL_OW 255
26072: PUSH
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL_OW 255
26082: EQUAL
26083: AND
26084: IFFALSE 26108
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26086: LD_VAR 0 5
26090: PUSH
26091: LD_INT 1
26093: ARRAY
26094: PPUSH
26095: LD_VAR 0 5
26099: PUSH
26100: LD_INT 2
26102: ARRAY
26103: PPUSH
26104: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26108: LD_ADDR_EXP 93
26112: PUSH
26113: LD_EXP 93
26117: PPUSH
26118: LD_VAR 0 4
26122: PPUSH
26123: LD_EXP 93
26127: PUSH
26128: LD_VAR 0 4
26132: ARRAY
26133: PPUSH
26134: LD_VAR 0 3
26138: PPUSH
26139: CALL_OW 3
26143: PPUSH
26144: CALL_OW 1
26148: ST_TO_ADDR
// end ; end ;
26149: GO 25978
26151: POP
26152: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26153: LD_VAR 0 1
26157: PPUSH
26158: LD_EXP 93
26162: PUSH
26163: LD_VAR 0 4
26167: ARRAY
26168: PUSH
26169: LD_INT 0
26171: PLUS
26172: PPUSH
26173: CALL_OW 505
// end ;
26177: LD_VAR 0 2
26181: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26182: LD_INT 0
26184: PPUSH
26185: PPUSH
26186: PPUSH
26187: PPUSH
// if not hack in hackTanks then
26188: LD_VAR 0 1
26192: PUSH
26193: LD_EXP 92
26197: IN
26198: NOT
26199: IFFALSE 26203
// exit ;
26201: GO 26288
// index := GetElementIndex ( hackTanks , hack ) ;
26203: LD_ADDR_VAR 0 5
26207: PUSH
26208: LD_EXP 92
26212: PPUSH
26213: LD_VAR 0 1
26217: PPUSH
26218: CALL 33221 0 2
26222: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26223: LD_ADDR_VAR 0 4
26227: PUSH
26228: DOUBLE
26229: LD_INT 1
26231: DEC
26232: ST_TO_ADDR
26233: LD_EXP 93
26237: PUSH
26238: LD_VAR 0 5
26242: ARRAY
26243: PUSH
26244: FOR_TO
26245: IFFALSE 26286
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26247: LD_EXP 93
26251: PUSH
26252: LD_VAR 0 5
26256: ARRAY
26257: PUSH
26258: LD_VAR 0 4
26262: ARRAY
26263: PUSH
26264: LD_INT 1
26266: ARRAY
26267: PUSH
26268: LD_VAR 0 2
26272: EQUAL
26273: IFFALSE 26284
// KillUnit ( vehicle ) ;
26275: LD_VAR 0 2
26279: PPUSH
26280: CALL_OW 66
26284: GO 26244
26286: POP
26287: POP
// end ;
26288: LD_VAR 0 3
26292: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26293: LD_EXP 97
26297: NOT
26298: IFFALSE 26333
26300: GO 26302
26302: DISABLE
// begin initMiner := true ;
26303: LD_ADDR_EXP 97
26307: PUSH
26308: LD_INT 1
26310: ST_TO_ADDR
// minersList := [ ] ;
26311: LD_ADDR_EXP 98
26315: PUSH
26316: EMPTY
26317: ST_TO_ADDR
// minerMinesList := [ ] ;
26318: LD_ADDR_EXP 99
26322: PUSH
26323: EMPTY
26324: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26325: LD_ADDR_EXP 100
26329: PUSH
26330: LD_INT 5
26332: ST_TO_ADDR
// end ;
26333: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26334: LD_EXP 97
26338: PUSH
26339: LD_INT 34
26341: PUSH
26342: LD_INT 81
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 69
26353: AND
26354: IFFALSE 26815
26356: GO 26358
26358: DISABLE
26359: LD_INT 0
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
// begin enable ;
26365: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26366: LD_ADDR_VAR 0 1
26370: PUSH
26371: LD_INT 34
26373: PUSH
26374: LD_INT 81
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26459
// begin if not i in minersList then
26389: LD_VAR 0 1
26393: PUSH
26394: LD_EXP 98
26398: IN
26399: NOT
26400: IFFALSE 26457
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26402: LD_ADDR_EXP 98
26406: PUSH
26407: LD_EXP 98
26411: PPUSH
26412: LD_EXP 98
26416: PUSH
26417: LD_INT 1
26419: PLUS
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 1
26430: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26431: LD_ADDR_EXP 99
26435: PUSH
26436: LD_EXP 99
26440: PPUSH
26441: LD_EXP 99
26445: PUSH
26446: LD_INT 1
26448: PLUS
26449: PPUSH
26450: EMPTY
26451: PPUSH
26452: CALL_OW 1
26456: ST_TO_ADDR
// end end ;
26457: GO 26386
26459: POP
26460: POP
// for i := minerMinesList downto 1 do
26461: LD_ADDR_VAR 0 1
26465: PUSH
26466: DOUBLE
26467: LD_EXP 99
26471: INC
26472: ST_TO_ADDR
26473: LD_INT 1
26475: PUSH
26476: FOR_DOWNTO
26477: IFFALSE 26813
// begin if IsLive ( minersList [ i ] ) then
26479: LD_EXP 98
26483: PUSH
26484: LD_VAR 0 1
26488: ARRAY
26489: PPUSH
26490: CALL_OW 300
26494: IFFALSE 26522
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26496: LD_EXP 98
26500: PUSH
26501: LD_VAR 0 1
26505: ARRAY
26506: PPUSH
26507: LD_EXP 99
26511: PUSH
26512: LD_VAR 0 1
26516: ARRAY
26517: PPUSH
26518: CALL_OW 505
// if not minerMinesList [ i ] then
26522: LD_EXP 99
26526: PUSH
26527: LD_VAR 0 1
26531: ARRAY
26532: NOT
26533: IFFALSE 26537
// continue ;
26535: GO 26476
// for j := minerMinesList [ i ] downto 1 do
26537: LD_ADDR_VAR 0 2
26541: PUSH
26542: DOUBLE
26543: LD_EXP 99
26547: PUSH
26548: LD_VAR 0 1
26552: ARRAY
26553: INC
26554: ST_TO_ADDR
26555: LD_INT 1
26557: PUSH
26558: FOR_DOWNTO
26559: IFFALSE 26809
// begin side := GetSide ( minersList [ i ] ) ;
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_EXP 98
26570: PUSH
26571: LD_VAR 0 1
26575: ARRAY
26576: PPUSH
26577: CALL_OW 255
26581: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26582: LD_ADDR_VAR 0 4
26586: PUSH
26587: LD_EXP 99
26591: PUSH
26592: LD_VAR 0 1
26596: ARRAY
26597: PUSH
26598: LD_VAR 0 2
26602: ARRAY
26603: PUSH
26604: LD_INT 1
26606: ARRAY
26607: PPUSH
26608: LD_EXP 99
26612: PUSH
26613: LD_VAR 0 1
26617: ARRAY
26618: PUSH
26619: LD_VAR 0 2
26623: ARRAY
26624: PUSH
26625: LD_INT 2
26627: ARRAY
26628: PPUSH
26629: CALL_OW 428
26633: ST_TO_ADDR
// if not tmp then
26634: LD_VAR 0 4
26638: NOT
26639: IFFALSE 26643
// continue ;
26641: GO 26558
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26643: LD_VAR 0 4
26647: PUSH
26648: LD_INT 81
26650: PUSH
26651: LD_VAR 0 3
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PPUSH
26660: CALL_OW 69
26664: IN
26665: PUSH
26666: LD_EXP 99
26670: PUSH
26671: LD_VAR 0 1
26675: ARRAY
26676: PUSH
26677: LD_VAR 0 2
26681: ARRAY
26682: PUSH
26683: LD_INT 1
26685: ARRAY
26686: PPUSH
26687: LD_EXP 99
26691: PUSH
26692: LD_VAR 0 1
26696: ARRAY
26697: PUSH
26698: LD_VAR 0 2
26702: ARRAY
26703: PUSH
26704: LD_INT 2
26706: ARRAY
26707: PPUSH
26708: CALL_OW 458
26712: AND
26713: IFFALSE 26807
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26715: LD_EXP 99
26719: PUSH
26720: LD_VAR 0 1
26724: ARRAY
26725: PUSH
26726: LD_VAR 0 2
26730: ARRAY
26731: PUSH
26732: LD_INT 1
26734: ARRAY
26735: PPUSH
26736: LD_EXP 99
26740: PUSH
26741: LD_VAR 0 1
26745: ARRAY
26746: PUSH
26747: LD_VAR 0 2
26751: ARRAY
26752: PUSH
26753: LD_INT 2
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 3
26761: PPUSH
26762: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26766: LD_ADDR_EXP 99
26770: PUSH
26771: LD_EXP 99
26775: PPUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: LD_EXP 99
26785: PUSH
26786: LD_VAR 0 1
26790: ARRAY
26791: PPUSH
26792: LD_VAR 0 2
26796: PPUSH
26797: CALL_OW 3
26801: PPUSH
26802: CALL_OW 1
26806: ST_TO_ADDR
// end ; end ;
26807: GO 26558
26809: POP
26810: POP
// end ;
26811: GO 26476
26813: POP
26814: POP
// end ;
26815: PPOPN 4
26817: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26818: LD_INT 0
26820: PPUSH
26821: PPUSH
// result := false ;
26822: LD_ADDR_VAR 0 4
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 264
26839: PUSH
26840: LD_INT 81
26842: EQUAL
26843: NOT
26844: IFFALSE 26848
// exit ;
26846: GO 27088
// index := GetElementIndex ( minersList , unit ) ;
26848: LD_ADDR_VAR 0 5
26852: PUSH
26853: LD_EXP 98
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL 33221 0 2
26867: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26868: LD_EXP 99
26872: PUSH
26873: LD_VAR 0 5
26877: ARRAY
26878: PUSH
26879: LD_EXP 100
26883: GREATEREQUAL
26884: IFFALSE 26888
// exit ;
26886: GO 27088
// ComMoveXY ( unit , x , y ) ;
26888: LD_VAR 0 1
26892: PPUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: LD_VAR 0 3
26902: PPUSH
26903: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26907: LD_INT 35
26909: PPUSH
26910: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26914: LD_VAR 0 1
26918: PPUSH
26919: LD_VAR 0 2
26923: PPUSH
26924: LD_VAR 0 3
26928: PPUSH
26929: CALL 64557 0 3
26933: NOT
26934: PUSH
26935: LD_VAR 0 1
26939: PPUSH
26940: CALL_OW 314
26944: AND
26945: IFFALSE 26949
// exit ;
26947: GO 27088
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_VAR 0 3
26958: PPUSH
26959: CALL_OW 428
26963: PUSH
26964: LD_VAR 0 1
26968: EQUAL
26969: PUSH
26970: LD_VAR 0 1
26974: PPUSH
26975: CALL_OW 314
26979: NOT
26980: AND
26981: IFFALSE 26907
// PlaySoundXY ( x , y , PlantMine ) ;
26983: LD_VAR 0 2
26987: PPUSH
26988: LD_VAR 0 3
26992: PPUSH
26993: LD_STRING PlantMine
26995: PPUSH
26996: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27000: LD_VAR 0 2
27004: PPUSH
27005: LD_VAR 0 3
27009: PPUSH
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL_OW 255
27019: PPUSH
27020: LD_INT 0
27022: PPUSH
27023: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27027: LD_ADDR_EXP 99
27031: PUSH
27032: LD_EXP 99
27036: PPUSH
27037: LD_VAR 0 5
27041: PUSH
27042: LD_EXP 99
27046: PUSH
27047: LD_VAR 0 5
27051: ARRAY
27052: PUSH
27053: LD_INT 1
27055: PLUS
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PPUSH
27061: LD_VAR 0 2
27065: PUSH
27066: LD_VAR 0 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL 33436 0 3
27079: ST_TO_ADDR
// result := true ;
27080: LD_ADDR_VAR 0 4
27084: PUSH
27085: LD_INT 1
27087: ST_TO_ADDR
// end ;
27088: LD_VAR 0 4
27092: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
27097: PPUSH
// if not unit in minersList then
27098: LD_VAR 0 1
27102: PUSH
27103: LD_EXP 98
27107: IN
27108: NOT
27109: IFFALSE 27113
// exit ;
27111: GO 27505
// index := GetElementIndex ( minersList , unit ) ;
27113: LD_ADDR_VAR 0 6
27117: PUSH
27118: LD_EXP 98
27122: PPUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL 33221 0 2
27132: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27133: LD_ADDR_VAR 0 5
27137: PUSH
27138: DOUBLE
27139: LD_EXP 99
27143: PUSH
27144: LD_VAR 0 6
27148: ARRAY
27149: INC
27150: ST_TO_ADDR
27151: LD_INT 1
27153: PUSH
27154: FOR_DOWNTO
27155: IFFALSE 27316
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27157: LD_EXP 99
27161: PUSH
27162: LD_VAR 0 6
27166: ARRAY
27167: PUSH
27168: LD_VAR 0 5
27172: ARRAY
27173: PUSH
27174: LD_INT 1
27176: ARRAY
27177: PUSH
27178: LD_VAR 0 2
27182: EQUAL
27183: PUSH
27184: LD_EXP 99
27188: PUSH
27189: LD_VAR 0 6
27193: ARRAY
27194: PUSH
27195: LD_VAR 0 5
27199: ARRAY
27200: PUSH
27201: LD_INT 2
27203: ARRAY
27204: PUSH
27205: LD_VAR 0 3
27209: EQUAL
27210: AND
27211: IFFALSE 27314
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27213: LD_EXP 99
27217: PUSH
27218: LD_VAR 0 6
27222: ARRAY
27223: PUSH
27224: LD_VAR 0 5
27228: ARRAY
27229: PUSH
27230: LD_INT 1
27232: ARRAY
27233: PPUSH
27234: LD_EXP 99
27238: PUSH
27239: LD_VAR 0 6
27243: ARRAY
27244: PUSH
27245: LD_VAR 0 5
27249: ARRAY
27250: PUSH
27251: LD_INT 2
27253: ARRAY
27254: PPUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 255
27264: PPUSH
27265: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27269: LD_ADDR_EXP 99
27273: PUSH
27274: LD_EXP 99
27278: PPUSH
27279: LD_VAR 0 6
27283: PPUSH
27284: LD_EXP 99
27288: PUSH
27289: LD_VAR 0 6
27293: ARRAY
27294: PPUSH
27295: LD_VAR 0 5
27299: PPUSH
27300: CALL_OW 3
27304: PPUSH
27305: CALL_OW 1
27309: ST_TO_ADDR
// exit ;
27310: POP
27311: POP
27312: GO 27505
// end ; end ;
27314: GO 27154
27316: POP
27317: POP
// for i := minerMinesList [ index ] downto 1 do
27318: LD_ADDR_VAR 0 5
27322: PUSH
27323: DOUBLE
27324: LD_EXP 99
27328: PUSH
27329: LD_VAR 0 6
27333: ARRAY
27334: INC
27335: ST_TO_ADDR
27336: LD_INT 1
27338: PUSH
27339: FOR_DOWNTO
27340: IFFALSE 27503
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27342: LD_EXP 99
27346: PUSH
27347: LD_VAR 0 6
27351: ARRAY
27352: PUSH
27353: LD_VAR 0 5
27357: ARRAY
27358: PUSH
27359: LD_INT 1
27361: ARRAY
27362: PPUSH
27363: LD_EXP 99
27367: PUSH
27368: LD_VAR 0 6
27372: ARRAY
27373: PUSH
27374: LD_VAR 0 5
27378: ARRAY
27379: PUSH
27380: LD_INT 2
27382: ARRAY
27383: PPUSH
27384: LD_VAR 0 2
27388: PPUSH
27389: LD_VAR 0 3
27393: PPUSH
27394: CALL_OW 298
27398: PUSH
27399: LD_INT 6
27401: LESS
27402: IFFALSE 27501
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27404: LD_EXP 99
27408: PUSH
27409: LD_VAR 0 6
27413: ARRAY
27414: PUSH
27415: LD_VAR 0 5
27419: ARRAY
27420: PUSH
27421: LD_INT 1
27423: ARRAY
27424: PPUSH
27425: LD_EXP 99
27429: PUSH
27430: LD_VAR 0 6
27434: ARRAY
27435: PUSH
27436: LD_VAR 0 5
27440: ARRAY
27441: PUSH
27442: LD_INT 2
27444: ARRAY
27445: PPUSH
27446: LD_VAR 0 1
27450: PPUSH
27451: CALL_OW 255
27455: PPUSH
27456: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27460: LD_ADDR_EXP 99
27464: PUSH
27465: LD_EXP 99
27469: PPUSH
27470: LD_VAR 0 6
27474: PPUSH
27475: LD_EXP 99
27479: PUSH
27480: LD_VAR 0 6
27484: ARRAY
27485: PPUSH
27486: LD_VAR 0 5
27490: PPUSH
27491: CALL_OW 3
27495: PPUSH
27496: CALL_OW 1
27500: ST_TO_ADDR
// end ; end ;
27501: GO 27339
27503: POP
27504: POP
// end ;
27505: LD_VAR 0 4
27509: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 264
27530: PUSH
27531: LD_INT 81
27533: EQUAL
27534: NOT
27535: PUSH
27536: LD_VAR 0 1
27540: PUSH
27541: LD_EXP 98
27545: IN
27546: NOT
27547: OR
27548: IFFALSE 27552
// exit ;
27550: GO 27874
// index := GetElementIndex ( minersList , unit ) ;
27552: LD_ADDR_VAR 0 6
27556: PUSH
27557: LD_EXP 98
27561: PPUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL 33221 0 2
27571: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27572: LD_ADDR_VAR 0 8
27576: PUSH
27577: LD_EXP 100
27581: PUSH
27582: LD_EXP 99
27586: PUSH
27587: LD_VAR 0 6
27591: ARRAY
27592: MINUS
27593: ST_TO_ADDR
// if not minesFreeAmount then
27594: LD_VAR 0 8
27598: NOT
27599: IFFALSE 27603
// exit ;
27601: GO 27874
// tmp := [ ] ;
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: EMPTY
27609: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27610: LD_ADDR_VAR 0 5
27614: PUSH
27615: DOUBLE
27616: LD_INT 1
27618: DEC
27619: ST_TO_ADDR
27620: LD_VAR 0 8
27624: PUSH
27625: FOR_TO
27626: IFFALSE 27821
// begin _d := rand ( 0 , 5 ) ;
27628: LD_ADDR_VAR 0 11
27632: PUSH
27633: LD_INT 0
27635: PPUSH
27636: LD_INT 5
27638: PPUSH
27639: CALL_OW 12
27643: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27644: LD_ADDR_VAR 0 12
27648: PUSH
27649: LD_INT 2
27651: PPUSH
27652: LD_INT 6
27654: PPUSH
27655: CALL_OW 12
27659: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27660: LD_ADDR_VAR 0 9
27664: PUSH
27665: LD_VAR 0 2
27669: PPUSH
27670: LD_VAR 0 11
27674: PPUSH
27675: LD_VAR 0 12
27679: PPUSH
27680: CALL_OW 272
27684: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27685: LD_ADDR_VAR 0 10
27689: PUSH
27690: LD_VAR 0 3
27694: PPUSH
27695: LD_VAR 0 11
27699: PPUSH
27700: LD_VAR 0 12
27704: PPUSH
27705: CALL_OW 273
27709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27710: LD_VAR 0 9
27714: PPUSH
27715: LD_VAR 0 10
27719: PPUSH
27720: CALL_OW 488
27724: PUSH
27725: LD_VAR 0 9
27729: PUSH
27730: LD_VAR 0 10
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_VAR 0 7
27743: IN
27744: NOT
27745: AND
27746: PUSH
27747: LD_VAR 0 9
27751: PPUSH
27752: LD_VAR 0 10
27756: PPUSH
27757: CALL_OW 458
27761: NOT
27762: AND
27763: IFFALSE 27805
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27765: LD_ADDR_VAR 0 7
27769: PUSH
27770: LD_VAR 0 7
27774: PPUSH
27775: LD_VAR 0 7
27779: PUSH
27780: LD_INT 1
27782: PLUS
27783: PPUSH
27784: LD_VAR 0 9
27788: PUSH
27789: LD_VAR 0 10
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PPUSH
27798: CALL_OW 1
27802: ST_TO_ADDR
27803: GO 27819
// i := i - 1 ;
27805: LD_ADDR_VAR 0 5
27809: PUSH
27810: LD_VAR 0 5
27814: PUSH
27815: LD_INT 1
27817: MINUS
27818: ST_TO_ADDR
// end ;
27819: GO 27625
27821: POP
27822: POP
// for i in tmp do
27823: LD_ADDR_VAR 0 5
27827: PUSH
27828: LD_VAR 0 7
27832: PUSH
27833: FOR_IN
27834: IFFALSE 27872
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27836: LD_VAR 0 1
27840: PPUSH
27841: LD_VAR 0 5
27845: PUSH
27846: LD_INT 1
27848: ARRAY
27849: PPUSH
27850: LD_VAR 0 5
27854: PUSH
27855: LD_INT 2
27857: ARRAY
27858: PPUSH
27859: CALL 26818 0 3
27863: NOT
27864: IFFALSE 27870
// exit ;
27866: POP
27867: POP
27868: GO 27874
27870: GO 27833
27872: POP
27873: POP
// end ;
27874: LD_VAR 0 4
27878: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27879: LD_INT 0
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
27886: PPUSH
27887: PPUSH
// if not GetClass ( unit ) = class_sniper then
27888: LD_VAR 0 1
27892: PPUSH
27893: CALL_OW 257
27897: PUSH
27898: LD_INT 5
27900: EQUAL
27901: NOT
27902: IFFALSE 27906
// exit ;
27904: GO 28294
// dist := 8 ;
27906: LD_ADDR_VAR 0 5
27910: PUSH
27911: LD_INT 8
27913: ST_TO_ADDR
// viewRange := 12 ;
27914: LD_ADDR_VAR 0 7
27918: PUSH
27919: LD_INT 12
27921: ST_TO_ADDR
// side := GetSide ( unit ) ;
27922: LD_ADDR_VAR 0 6
27926: PUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 255
27936: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27937: LD_INT 61
27939: PPUSH
27940: LD_VAR 0 6
27944: PPUSH
27945: CALL_OW 321
27949: PUSH
27950: LD_INT 2
27952: EQUAL
27953: IFFALSE 27963
// viewRange := 16 ;
27955: LD_ADDR_VAR 0 7
27959: PUSH
27960: LD_INT 16
27962: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27963: LD_VAR 0 1
27967: PPUSH
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: CALL_OW 297
27982: PUSH
27983: LD_VAR 0 5
27987: GREATER
27988: IFFALSE 28067
// begin ComMoveXY ( unit , x , y ) ;
27990: LD_VAR 0 1
27994: PPUSH
27995: LD_VAR 0 2
27999: PPUSH
28000: LD_VAR 0 3
28004: PPUSH
28005: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28009: LD_INT 35
28011: PPUSH
28012: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28016: LD_VAR 0 1
28020: PPUSH
28021: LD_VAR 0 2
28025: PPUSH
28026: LD_VAR 0 3
28030: PPUSH
28031: CALL 64557 0 3
28035: NOT
28036: IFFALSE 28040
// exit ;
28038: GO 28294
// until GetDistUnitXY ( unit , x , y ) < dist ;
28040: LD_VAR 0 1
28044: PPUSH
28045: LD_VAR 0 2
28049: PPUSH
28050: LD_VAR 0 3
28054: PPUSH
28055: CALL_OW 297
28059: PUSH
28060: LD_VAR 0 5
28064: LESS
28065: IFFALSE 28009
// end ; ComTurnXY ( unit , x , y ) ;
28067: LD_VAR 0 1
28071: PPUSH
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_VAR 0 3
28081: PPUSH
28082: CALL_OW 118
// wait ( 5 ) ;
28086: LD_INT 5
28088: PPUSH
28089: CALL_OW 67
// _d := GetDir ( unit ) ;
28093: LD_ADDR_VAR 0 10
28097: PUSH
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL_OW 254
28107: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28108: LD_ADDR_VAR 0 8
28112: PUSH
28113: LD_VAR 0 1
28117: PPUSH
28118: CALL_OW 250
28122: PPUSH
28123: LD_VAR 0 10
28127: PPUSH
28128: LD_VAR 0 5
28132: PPUSH
28133: CALL_OW 272
28137: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28138: LD_ADDR_VAR 0 9
28142: PUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 251
28152: PPUSH
28153: LD_VAR 0 10
28157: PPUSH
28158: LD_VAR 0 5
28162: PPUSH
28163: CALL_OW 273
28167: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28168: LD_VAR 0 8
28172: PPUSH
28173: LD_VAR 0 9
28177: PPUSH
28178: CALL_OW 488
28182: NOT
28183: IFFALSE 28187
// exit ;
28185: GO 28294
// ComAnimCustom ( unit , 1 ) ;
28187: LD_VAR 0 1
28191: PPUSH
28192: LD_INT 1
28194: PPUSH
28195: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28199: LD_VAR 0 8
28203: PPUSH
28204: LD_VAR 0 9
28208: PPUSH
28209: LD_VAR 0 6
28213: PPUSH
28214: LD_VAR 0 7
28218: PPUSH
28219: CALL_OW 330
// repeat wait ( 1 ) ;
28223: LD_INT 1
28225: PPUSH
28226: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28230: LD_VAR 0 1
28234: PPUSH
28235: CALL_OW 316
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL_OW 314
28249: OR
28250: PUSH
28251: LD_VAR 0 1
28255: PPUSH
28256: CALL_OW 302
28260: NOT
28261: OR
28262: PUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: CALL_OW 301
28272: OR
28273: IFFALSE 28223
// RemoveSeeing ( _x , _y , side ) ;
28275: LD_VAR 0 8
28279: PPUSH
28280: LD_VAR 0 9
28284: PPUSH
28285: LD_VAR 0 6
28289: PPUSH
28290: CALL_OW 331
// end ; end_of_file
28294: LD_VAR 0 4
28298: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28299: LD_INT 0
28301: PPUSH
28302: PPUSH
// if exist_mode then
28303: LD_VAR 0 2
28307: IFFALSE 28332
// unit := CreateCharacter ( prefix & ident ) else
28309: LD_ADDR_VAR 0 5
28313: PUSH
28314: LD_VAR 0 3
28318: PUSH
28319: LD_VAR 0 1
28323: STR
28324: PPUSH
28325: CALL_OW 34
28329: ST_TO_ADDR
28330: GO 28347
// unit := NewCharacter ( ident ) ;
28332: LD_ADDR_VAR 0 5
28336: PUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 25
28346: ST_TO_ADDR
// result := unit ;
28347: LD_ADDR_VAR 0 4
28351: PUSH
28352: LD_VAR 0 5
28356: ST_TO_ADDR
// end ;
28357: LD_VAR 0 4
28361: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// if not side or not nation then
28366: LD_VAR 0 1
28370: NOT
28371: PUSH
28372: LD_VAR 0 2
28376: NOT
28377: OR
28378: IFFALSE 28382
// exit ;
28380: GO 29150
// case nation of nation_american :
28382: LD_VAR 0 2
28386: PUSH
28387: LD_INT 1
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28609
28395: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28396: LD_ADDR_VAR 0 4
28400: PUSH
28401: LD_INT 35
28403: PUSH
28404: LD_INT 45
28406: PUSH
28407: LD_INT 46
28409: PUSH
28410: LD_INT 47
28412: PUSH
28413: LD_INT 82
28415: PUSH
28416: LD_INT 83
28418: PUSH
28419: LD_INT 84
28421: PUSH
28422: LD_INT 85
28424: PUSH
28425: LD_INT 86
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 6
28436: PUSH
28437: LD_INT 15
28439: PUSH
28440: LD_INT 16
28442: PUSH
28443: LD_INT 7
28445: PUSH
28446: LD_INT 12
28448: PUSH
28449: LD_INT 13
28451: PUSH
28452: LD_INT 10
28454: PUSH
28455: LD_INT 14
28457: PUSH
28458: LD_INT 20
28460: PUSH
28461: LD_INT 21
28463: PUSH
28464: LD_INT 22
28466: PUSH
28467: LD_INT 25
28469: PUSH
28470: LD_INT 32
28472: PUSH
28473: LD_INT 27
28475: PUSH
28476: LD_INT 36
28478: PUSH
28479: LD_INT 69
28481: PUSH
28482: LD_INT 39
28484: PUSH
28485: LD_INT 34
28487: PUSH
28488: LD_INT 40
28490: PUSH
28491: LD_INT 48
28493: PUSH
28494: LD_INT 49
28496: PUSH
28497: LD_INT 50
28499: PUSH
28500: LD_INT 51
28502: PUSH
28503: LD_INT 52
28505: PUSH
28506: LD_INT 53
28508: PUSH
28509: LD_INT 54
28511: PUSH
28512: LD_INT 55
28514: PUSH
28515: LD_INT 56
28517: PUSH
28518: LD_INT 57
28520: PUSH
28521: LD_INT 58
28523: PUSH
28524: LD_INT 59
28526: PUSH
28527: LD_INT 60
28529: PUSH
28530: LD_INT 61
28532: PUSH
28533: LD_INT 62
28535: PUSH
28536: LD_INT 80
28538: PUSH
28539: LD_INT 82
28541: PUSH
28542: LD_INT 83
28544: PUSH
28545: LD_INT 84
28547: PUSH
28548: LD_INT 85
28550: PUSH
28551: LD_INT 86
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
28607: GO 29074
28609: LD_INT 2
28611: DOUBLE
28612: EQUAL
28613: IFTRUE 28617
28615: GO 28843
28617: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28618: LD_ADDR_VAR 0 4
28622: PUSH
28623: LD_INT 35
28625: PUSH
28626: LD_INT 45
28628: PUSH
28629: LD_INT 46
28631: PUSH
28632: LD_INT 47
28634: PUSH
28635: LD_INT 82
28637: PUSH
28638: LD_INT 83
28640: PUSH
28641: LD_INT 84
28643: PUSH
28644: LD_INT 85
28646: PUSH
28647: LD_INT 87
28649: PUSH
28650: LD_INT 70
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 11
28658: PUSH
28659: LD_INT 3
28661: PUSH
28662: LD_INT 4
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: LD_INT 6
28670: PUSH
28671: LD_INT 15
28673: PUSH
28674: LD_INT 18
28676: PUSH
28677: LD_INT 7
28679: PUSH
28680: LD_INT 17
28682: PUSH
28683: LD_INT 8
28685: PUSH
28686: LD_INT 20
28688: PUSH
28689: LD_INT 21
28691: PUSH
28692: LD_INT 22
28694: PUSH
28695: LD_INT 72
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 69
28703: PUSH
28704: LD_INT 39
28706: PUSH
28707: LD_INT 40
28709: PUSH
28710: LD_INT 41
28712: PUSH
28713: LD_INT 42
28715: PUSH
28716: LD_INT 43
28718: PUSH
28719: LD_INT 48
28721: PUSH
28722: LD_INT 49
28724: PUSH
28725: LD_INT 50
28727: PUSH
28728: LD_INT 51
28730: PUSH
28731: LD_INT 52
28733: PUSH
28734: LD_INT 53
28736: PUSH
28737: LD_INT 54
28739: PUSH
28740: LD_INT 55
28742: PUSH
28743: LD_INT 56
28745: PUSH
28746: LD_INT 60
28748: PUSH
28749: LD_INT 61
28751: PUSH
28752: LD_INT 62
28754: PUSH
28755: LD_INT 66
28757: PUSH
28758: LD_INT 67
28760: PUSH
28761: LD_INT 68
28763: PUSH
28764: LD_INT 81
28766: PUSH
28767: LD_INT 82
28769: PUSH
28770: LD_INT 83
28772: PUSH
28773: LD_INT 84
28775: PUSH
28776: LD_INT 85
28778: PUSH
28779: LD_INT 87
28781: PUSH
28782: LD_INT 88
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: ST_TO_ADDR
28841: GO 29074
28843: LD_INT 3
28845: DOUBLE
28846: EQUAL
28847: IFTRUE 28851
28849: GO 29073
28851: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28852: LD_ADDR_VAR 0 4
28856: PUSH
28857: LD_INT 46
28859: PUSH
28860: LD_INT 47
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: LD_INT 82
28871: PUSH
28872: LD_INT 83
28874: PUSH
28875: LD_INT 84
28877: PUSH
28878: LD_INT 85
28880: PUSH
28881: LD_INT 86
28883: PUSH
28884: LD_INT 11
28886: PUSH
28887: LD_INT 9
28889: PUSH
28890: LD_INT 20
28892: PUSH
28893: LD_INT 19
28895: PUSH
28896: LD_INT 21
28898: PUSH
28899: LD_INT 24
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_INT 25
28907: PUSH
28908: LD_INT 28
28910: PUSH
28911: LD_INT 29
28913: PUSH
28914: LD_INT 30
28916: PUSH
28917: LD_INT 31
28919: PUSH
28920: LD_INT 37
28922: PUSH
28923: LD_INT 38
28925: PUSH
28926: LD_INT 32
28928: PUSH
28929: LD_INT 27
28931: PUSH
28932: LD_INT 33
28934: PUSH
28935: LD_INT 69
28937: PUSH
28938: LD_INT 39
28940: PUSH
28941: LD_INT 34
28943: PUSH
28944: LD_INT 40
28946: PUSH
28947: LD_INT 71
28949: PUSH
28950: LD_INT 23
28952: PUSH
28953: LD_INT 44
28955: PUSH
28956: LD_INT 48
28958: PUSH
28959: LD_INT 49
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: LD_INT 51
28967: PUSH
28968: LD_INT 52
28970: PUSH
28971: LD_INT 53
28973: PUSH
28974: LD_INT 54
28976: PUSH
28977: LD_INT 55
28979: PUSH
28980: LD_INT 56
28982: PUSH
28983: LD_INT 57
28985: PUSH
28986: LD_INT 58
28988: PUSH
28989: LD_INT 59
28991: PUSH
28992: LD_INT 63
28994: PUSH
28995: LD_INT 64
28997: PUSH
28998: LD_INT 65
29000: PUSH
29001: LD_INT 82
29003: PUSH
29004: LD_INT 83
29006: PUSH
29007: LD_INT 84
29009: PUSH
29010: LD_INT 85
29012: PUSH
29013: LD_INT 86
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: ST_TO_ADDR
29071: GO 29074
29073: POP
// if state > - 1 and state < 3 then
29074: LD_VAR 0 3
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: GREATER
29083: PUSH
29084: LD_VAR 0 3
29088: PUSH
29089: LD_INT 3
29091: LESS
29092: AND
29093: IFFALSE 29150
// for i in result do
29095: LD_ADDR_VAR 0 5
29099: PUSH
29100: LD_VAR 0 4
29104: PUSH
29105: FOR_IN
29106: IFFALSE 29148
// if GetTech ( i , side ) <> state then
29108: LD_VAR 0 5
29112: PPUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: CALL_OW 321
29122: PUSH
29123: LD_VAR 0 3
29127: NONEQUAL
29128: IFFALSE 29146
// result := result diff i ;
29130: LD_ADDR_VAR 0 4
29134: PUSH
29135: LD_VAR 0 4
29139: PUSH
29140: LD_VAR 0 5
29144: DIFF
29145: ST_TO_ADDR
29146: GO 29105
29148: POP
29149: POP
// end ;
29150: LD_VAR 0 4
29154: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29155: LD_INT 0
29157: PPUSH
29158: PPUSH
29159: PPUSH
// result := true ;
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: LD_INT 1
29167: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29168: LD_ADDR_VAR 0 5
29172: PUSH
29173: LD_VAR 0 2
29177: PPUSH
29178: CALL_OW 480
29182: ST_TO_ADDR
// if not tmp then
29183: LD_VAR 0 5
29187: NOT
29188: IFFALSE 29192
// exit ;
29190: GO 29241
// for i in tmp do
29192: LD_ADDR_VAR 0 4
29196: PUSH
29197: LD_VAR 0 5
29201: PUSH
29202: FOR_IN
29203: IFFALSE 29239
// if GetTech ( i , side ) <> state_researched then
29205: LD_VAR 0 4
29209: PPUSH
29210: LD_VAR 0 1
29214: PPUSH
29215: CALL_OW 321
29219: PUSH
29220: LD_INT 2
29222: NONEQUAL
29223: IFFALSE 29237
// begin result := false ;
29225: LD_ADDR_VAR 0 3
29229: PUSH
29230: LD_INT 0
29232: ST_TO_ADDR
// exit ;
29233: POP
29234: POP
29235: GO 29241
// end ;
29237: GO 29202
29239: POP
29240: POP
// end ;
29241: LD_VAR 0 3
29245: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29261: LD_VAR 0 1
29265: NOT
29266: PUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: CALL_OW 257
29276: PUSH
29277: LD_INT 9
29279: NONEQUAL
29280: OR
29281: IFFALSE 29285
// exit ;
29283: GO 29858
// side := GetSide ( unit ) ;
29285: LD_ADDR_VAR 0 9
29289: PUSH
29290: LD_VAR 0 1
29294: PPUSH
29295: CALL_OW 255
29299: ST_TO_ADDR
// tech_space := tech_spacanom ;
29300: LD_ADDR_VAR 0 12
29304: PUSH
29305: LD_INT 29
29307: ST_TO_ADDR
// tech_time := tech_taurad ;
29308: LD_ADDR_VAR 0 13
29312: PUSH
29313: LD_INT 28
29315: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29316: LD_ADDR_VAR 0 11
29320: PUSH
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 310
29330: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29331: LD_VAR 0 11
29335: PPUSH
29336: CALL_OW 247
29340: PUSH
29341: LD_INT 2
29343: EQUAL
29344: IFFALSE 29348
// exit ;
29346: GO 29858
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29348: LD_ADDR_VAR 0 8
29352: PUSH
29353: LD_INT 81
29355: PUSH
29356: LD_VAR 0 9
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 21
29370: PUSH
29371: LD_INT 3
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PPUSH
29386: CALL_OW 69
29390: ST_TO_ADDR
// if not tmp then
29391: LD_VAR 0 8
29395: NOT
29396: IFFALSE 29400
// exit ;
29398: GO 29858
// if in_unit then
29400: LD_VAR 0 11
29404: IFFALSE 29428
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29406: LD_ADDR_VAR 0 10
29410: PUSH
29411: LD_VAR 0 8
29415: PPUSH
29416: LD_VAR 0 11
29420: PPUSH
29421: CALL_OW 74
29425: ST_TO_ADDR
29426: GO 29448
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29428: LD_ADDR_VAR 0 10
29432: PUSH
29433: LD_VAR 0 8
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 74
29447: ST_TO_ADDR
// if not enemy then
29448: LD_VAR 0 10
29452: NOT
29453: IFFALSE 29457
// exit ;
29455: GO 29858
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29457: LD_VAR 0 11
29461: PUSH
29462: LD_VAR 0 11
29466: PPUSH
29467: LD_VAR 0 10
29471: PPUSH
29472: CALL_OW 296
29476: PUSH
29477: LD_INT 13
29479: GREATER
29480: AND
29481: PUSH
29482: LD_VAR 0 1
29486: PPUSH
29487: LD_VAR 0 10
29491: PPUSH
29492: CALL_OW 296
29496: PUSH
29497: LD_INT 12
29499: GREATER
29500: OR
29501: IFFALSE 29505
// exit ;
29503: GO 29858
// missile := [ 1 ] ;
29505: LD_ADDR_VAR 0 14
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29516: LD_VAR 0 9
29520: PPUSH
29521: LD_VAR 0 12
29525: PPUSH
29526: CALL_OW 325
29530: IFFALSE 29559
// missile := Replace ( missile , missile + 1 , 2 ) ;
29532: LD_ADDR_VAR 0 14
29536: PUSH
29537: LD_VAR 0 14
29541: PPUSH
29542: LD_VAR 0 14
29546: PUSH
29547: LD_INT 1
29549: PLUS
29550: PPUSH
29551: LD_INT 2
29553: PPUSH
29554: CALL_OW 1
29558: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29559: LD_VAR 0 9
29563: PPUSH
29564: LD_VAR 0 13
29568: PPUSH
29569: CALL_OW 325
29573: PUSH
29574: LD_VAR 0 10
29578: PPUSH
29579: CALL_OW 255
29583: PPUSH
29584: LD_VAR 0 13
29588: PPUSH
29589: CALL_OW 325
29593: NOT
29594: AND
29595: IFFALSE 29624
// missile := Replace ( missile , missile + 1 , 3 ) ;
29597: LD_ADDR_VAR 0 14
29601: PUSH
29602: LD_VAR 0 14
29606: PPUSH
29607: LD_VAR 0 14
29611: PUSH
29612: LD_INT 1
29614: PLUS
29615: PPUSH
29616: LD_INT 3
29618: PPUSH
29619: CALL_OW 1
29623: ST_TO_ADDR
// if missile < 2 then
29624: LD_VAR 0 14
29628: PUSH
29629: LD_INT 2
29631: LESS
29632: IFFALSE 29636
// exit ;
29634: GO 29858
// x := GetX ( enemy ) ;
29636: LD_ADDR_VAR 0 4
29640: PUSH
29641: LD_VAR 0 10
29645: PPUSH
29646: CALL_OW 250
29650: ST_TO_ADDR
// y := GetY ( enemy ) ;
29651: LD_ADDR_VAR 0 5
29655: PUSH
29656: LD_VAR 0 10
29660: PPUSH
29661: CALL_OW 251
29665: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29666: LD_ADDR_VAR 0 6
29670: PUSH
29671: LD_VAR 0 4
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PPUSH
29680: LD_INT 1
29682: PPUSH
29683: CALL_OW 12
29687: PLUS
29688: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29689: LD_ADDR_VAR 0 7
29693: PUSH
29694: LD_VAR 0 5
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PPUSH
29703: LD_INT 1
29705: PPUSH
29706: CALL_OW 12
29710: PLUS
29711: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29712: LD_VAR 0 6
29716: PPUSH
29717: LD_VAR 0 7
29721: PPUSH
29722: CALL_OW 488
29726: NOT
29727: IFFALSE 29749
// begin _x := x ;
29729: LD_ADDR_VAR 0 6
29733: PUSH
29734: LD_VAR 0 4
29738: ST_TO_ADDR
// _y := y ;
29739: LD_ADDR_VAR 0 7
29743: PUSH
29744: LD_VAR 0 5
29748: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29749: LD_ADDR_VAR 0 3
29753: PUSH
29754: LD_INT 1
29756: PPUSH
29757: LD_VAR 0 14
29761: PPUSH
29762: CALL_OW 12
29766: ST_TO_ADDR
// case i of 1 :
29767: LD_VAR 0 3
29771: PUSH
29772: LD_INT 1
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29797
29780: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29781: LD_VAR 0 1
29785: PPUSH
29786: LD_VAR 0 10
29790: PPUSH
29791: CALL_OW 115
29795: GO 29858
29797: LD_INT 2
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29827
29805: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_VAR 0 6
29815: PPUSH
29816: LD_VAR 0 7
29820: PPUSH
29821: CALL_OW 153
29825: GO 29858
29827: LD_INT 3
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29857
29835: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29836: LD_VAR 0 1
29840: PPUSH
29841: LD_VAR 0 6
29845: PPUSH
29846: LD_VAR 0 7
29850: PPUSH
29851: CALL_OW 154
29855: GO 29858
29857: POP
// end ;
29858: LD_VAR 0 2
29862: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29863: LD_INT 0
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
// if not unit or not building then
29871: LD_VAR 0 1
29875: NOT
29876: PUSH
29877: LD_VAR 0 2
29881: NOT
29882: OR
29883: IFFALSE 29887
// exit ;
29885: GO 30045
// x := GetX ( building ) ;
29887: LD_ADDR_VAR 0 5
29891: PUSH
29892: LD_VAR 0 2
29896: PPUSH
29897: CALL_OW 250
29901: ST_TO_ADDR
// y := GetY ( building ) ;
29902: LD_ADDR_VAR 0 6
29906: PUSH
29907: LD_VAR 0 2
29911: PPUSH
29912: CALL_OW 251
29916: ST_TO_ADDR
// for i = 0 to 5 do
29917: LD_ADDR_VAR 0 4
29921: PUSH
29922: DOUBLE
29923: LD_INT 0
29925: DEC
29926: ST_TO_ADDR
29927: LD_INT 5
29929: PUSH
29930: FOR_TO
29931: IFFALSE 30043
// begin _x := ShiftX ( x , i , 3 ) ;
29933: LD_ADDR_VAR 0 7
29937: PUSH
29938: LD_VAR 0 5
29942: PPUSH
29943: LD_VAR 0 4
29947: PPUSH
29948: LD_INT 3
29950: PPUSH
29951: CALL_OW 272
29955: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29956: LD_ADDR_VAR 0 8
29960: PUSH
29961: LD_VAR 0 6
29965: PPUSH
29966: LD_VAR 0 4
29970: PPUSH
29971: LD_INT 3
29973: PPUSH
29974: CALL_OW 273
29978: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29979: LD_VAR 0 7
29983: PPUSH
29984: LD_VAR 0 8
29988: PPUSH
29989: CALL_OW 488
29993: NOT
29994: IFFALSE 29998
// continue ;
29996: GO 29930
// if HexInfo ( _x , _y ) = 0 then
29998: LD_VAR 0 7
30002: PPUSH
30003: LD_VAR 0 8
30007: PPUSH
30008: CALL_OW 428
30012: PUSH
30013: LD_INT 0
30015: EQUAL
30016: IFFALSE 30041
// begin ComMoveXY ( unit , _x , _y ) ;
30018: LD_VAR 0 1
30022: PPUSH
30023: LD_VAR 0 7
30027: PPUSH
30028: LD_VAR 0 8
30032: PPUSH
30033: CALL_OW 111
// exit ;
30037: POP
30038: POP
30039: GO 30045
// end ; end ;
30041: GO 29930
30043: POP
30044: POP
// end ;
30045: LD_VAR 0 3
30049: RET
// export function ScanBase ( side , base_area ) ; begin
30050: LD_INT 0
30052: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: LD_VAR 0 2
30062: PPUSH
30063: LD_INT 81
30065: PUSH
30066: LD_VAR 0 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PPUSH
30075: CALL_OW 70
30079: ST_TO_ADDR
// end ;
30080: LD_VAR 0 3
30084: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30085: LD_INT 0
30087: PPUSH
30088: PPUSH
30089: PPUSH
30090: PPUSH
// result := false ;
30091: LD_ADDR_VAR 0 2
30095: PUSH
30096: LD_INT 0
30098: ST_TO_ADDR
// side := GetSide ( unit ) ;
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 255
30113: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30114: LD_ADDR_VAR 0 4
30118: PUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 248
30128: ST_TO_ADDR
// case nat of 1 :
30129: LD_VAR 0 4
30133: PUSH
30134: LD_INT 1
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30153
30142: POP
// tech := tech_lassight ; 2 :
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: LD_INT 12
30150: ST_TO_ADDR
30151: GO 30192
30153: LD_INT 2
30155: DOUBLE
30156: EQUAL
30157: IFTRUE 30161
30159: GO 30172
30161: POP
// tech := tech_mortar ; 3 :
30162: LD_ADDR_VAR 0 5
30166: PUSH
30167: LD_INT 41
30169: ST_TO_ADDR
30170: GO 30192
30172: LD_INT 3
30174: DOUBLE
30175: EQUAL
30176: IFTRUE 30180
30178: GO 30191
30180: POP
// tech := tech_bazooka ; end ;
30181: LD_ADDR_VAR 0 5
30185: PUSH
30186: LD_INT 44
30188: ST_TO_ADDR
30189: GO 30192
30191: POP
// if Researched ( side , tech ) then
30192: LD_VAR 0 3
30196: PPUSH
30197: LD_VAR 0 5
30201: PPUSH
30202: CALL_OW 325
30206: IFFALSE 30233
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30208: LD_ADDR_VAR 0 2
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: LD_INT 8
30218: PUSH
30219: LD_INT 9
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: PUSH
30227: LD_VAR 0 4
30231: ARRAY
30232: ST_TO_ADDR
// end ;
30233: LD_VAR 0 2
30237: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30238: LD_INT 0
30240: PPUSH
30241: PPUSH
30242: PPUSH
// if not mines then
30243: LD_VAR 0 2
30247: NOT
30248: IFFALSE 30252
// exit ;
30250: GO 30396
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30252: LD_ADDR_VAR 0 5
30256: PUSH
30257: LD_INT 81
30259: PUSH
30260: LD_VAR 0 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: LD_INT 21
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PPUSH
30290: CALL_OW 69
30294: ST_TO_ADDR
// for i in mines do
30295: LD_ADDR_VAR 0 4
30299: PUSH
30300: LD_VAR 0 2
30304: PUSH
30305: FOR_IN
30306: IFFALSE 30394
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30308: LD_VAR 0 4
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: PPUSH
30317: LD_VAR 0 4
30321: PUSH
30322: LD_INT 2
30324: ARRAY
30325: PPUSH
30326: CALL_OW 458
30330: NOT
30331: IFFALSE 30335
// continue ;
30333: GO 30305
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30335: LD_VAR 0 4
30339: PUSH
30340: LD_INT 1
30342: ARRAY
30343: PPUSH
30344: LD_VAR 0 4
30348: PUSH
30349: LD_INT 2
30351: ARRAY
30352: PPUSH
30353: CALL_OW 428
30357: PUSH
30358: LD_VAR 0 5
30362: IN
30363: IFFALSE 30392
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30365: LD_VAR 0 4
30369: PUSH
30370: LD_INT 1
30372: ARRAY
30373: PPUSH
30374: LD_VAR 0 4
30378: PUSH
30379: LD_INT 2
30381: ARRAY
30382: PPUSH
30383: LD_VAR 0 1
30387: PPUSH
30388: CALL_OW 456
// end ;
30392: GO 30305
30394: POP
30395: POP
// end ;
30396: LD_VAR 0 3
30400: RET
// export function Count ( array ) ; var i ; begin
30401: LD_INT 0
30403: PPUSH
30404: PPUSH
// result := 0 ;
30405: LD_ADDR_VAR 0 2
30409: PUSH
30410: LD_INT 0
30412: ST_TO_ADDR
// for i in array do
30413: LD_ADDR_VAR 0 3
30417: PUSH
30418: LD_VAR 0 1
30422: PUSH
30423: FOR_IN
30424: IFFALSE 30448
// if i then
30426: LD_VAR 0 3
30430: IFFALSE 30446
// result := result + 1 ;
30432: LD_ADDR_VAR 0 2
30436: PUSH
30437: LD_VAR 0 2
30441: PUSH
30442: LD_INT 1
30444: PLUS
30445: ST_TO_ADDR
30446: GO 30423
30448: POP
30449: POP
// end ;
30450: LD_VAR 0 2
30454: RET
// export function IsEmpty ( building ) ; begin
30455: LD_INT 0
30457: PPUSH
// if not building then
30458: LD_VAR 0 1
30462: NOT
30463: IFFALSE 30467
// exit ;
30465: GO 30510
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30467: LD_ADDR_VAR 0 2
30471: PUSH
30472: LD_VAR 0 1
30476: PUSH
30477: LD_INT 22
30479: PUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 255
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 58
30496: PUSH
30497: EMPTY
30498: LIST
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PPUSH
30504: CALL_OW 69
30508: IN
30509: ST_TO_ADDR
// end ;
30510: LD_VAR 0 2
30514: RET
// export function IsNotFull ( building ) ; var places ; begin
30515: LD_INT 0
30517: PPUSH
30518: PPUSH
// if not building then
30519: LD_VAR 0 1
30523: NOT
30524: IFFALSE 30528
// exit ;
30526: GO 30699
// result := false ;
30528: LD_ADDR_VAR 0 2
30532: PUSH
30533: LD_INT 0
30535: ST_TO_ADDR
// places := 0 ;
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: LD_INT 0
30543: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 266
30553: PUSH
30554: LD_INT 0
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30616
30560: LD_INT 1
30562: DOUBLE
30563: EQUAL
30564: IFTRUE 30616
30566: LD_INT 6
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30616
30572: LD_INT 7
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30616
30578: LD_INT 8
30580: DOUBLE
30581: EQUAL
30582: IFTRUE 30616
30584: LD_INT 4
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30616
30590: LD_INT 5
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30616
30596: LD_INT 2
30598: DOUBLE
30599: EQUAL
30600: IFTRUE 30616
30602: LD_INT 3
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30616
30608: LD_INT 35
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30627
30616: POP
// places := 6 ; b_bunker , b_breastwork :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 6
30624: ST_TO_ADDR
30625: GO 30672
30627: LD_INT 32
30629: DOUBLE
30630: EQUAL
30631: IFTRUE 30641
30633: LD_INT 31
30635: DOUBLE
30636: EQUAL
30637: IFTRUE 30641
30639: GO 30652
30641: POP
// places := 1 ; b_control_tower :
30642: LD_ADDR_VAR 0 3
30646: PUSH
30647: LD_INT 1
30649: ST_TO_ADDR
30650: GO 30672
30652: LD_INT 36
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30671
30660: POP
// places := 3 ; end ;
30661: LD_ADDR_VAR 0 3
30665: PUSH
30666: LD_INT 3
30668: ST_TO_ADDR
30669: GO 30672
30671: POP
// if places then
30672: LD_VAR 0 3
30676: IFFALSE 30699
// result := UnitsInside ( building ) < places ;
30678: LD_ADDR_VAR 0 2
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 313
30692: PUSH
30693: LD_VAR 0 3
30697: LESS
30698: ST_TO_ADDR
// end ;
30699: LD_VAR 0 2
30703: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30704: LD_INT 0
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
// tmp := [ ] ;
30710: LD_ADDR_VAR 0 3
30714: PUSH
30715: EMPTY
30716: ST_TO_ADDR
// list := [ ] ;
30717: LD_ADDR_VAR 0 5
30721: PUSH
30722: EMPTY
30723: ST_TO_ADDR
// for i = 16 to 25 do
30724: LD_ADDR_VAR 0 4
30728: PUSH
30729: DOUBLE
30730: LD_INT 16
30732: DEC
30733: ST_TO_ADDR
30734: LD_INT 25
30736: PUSH
30737: FOR_TO
30738: IFFALSE 30811
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30740: LD_ADDR_VAR 0 3
30744: PUSH
30745: LD_VAR 0 3
30749: PUSH
30750: LD_INT 22
30752: PUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 255
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 91
30769: PUSH
30770: LD_VAR 0 1
30774: PUSH
30775: LD_INT 6
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 30
30785: PUSH
30786: LD_VAR 0 4
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: PPUSH
30803: CALL_OW 69
30807: ADD
30808: ST_TO_ADDR
30809: GO 30737
30811: POP
30812: POP
// for i = 1 to tmp do
30813: LD_ADDR_VAR 0 4
30817: PUSH
30818: DOUBLE
30819: LD_INT 1
30821: DEC
30822: ST_TO_ADDR
30823: LD_VAR 0 3
30827: PUSH
30828: FOR_TO
30829: IFFALSE 30917
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30831: LD_ADDR_VAR 0 5
30835: PUSH
30836: LD_VAR 0 5
30840: PUSH
30841: LD_VAR 0 3
30845: PUSH
30846: LD_VAR 0 4
30850: ARRAY
30851: PPUSH
30852: CALL_OW 266
30856: PUSH
30857: LD_VAR 0 3
30861: PUSH
30862: LD_VAR 0 4
30866: ARRAY
30867: PPUSH
30868: CALL_OW 250
30872: PUSH
30873: LD_VAR 0 3
30877: PUSH
30878: LD_VAR 0 4
30882: ARRAY
30883: PPUSH
30884: CALL_OW 251
30888: PUSH
30889: LD_VAR 0 3
30893: PUSH
30894: LD_VAR 0 4
30898: ARRAY
30899: PPUSH
30900: CALL_OW 254
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: ADD
30914: ST_TO_ADDR
30915: GO 30828
30917: POP
30918: POP
// result := list ;
30919: LD_ADDR_VAR 0 2
30923: PUSH
30924: LD_VAR 0 5
30928: ST_TO_ADDR
// end ;
30929: LD_VAR 0 2
30933: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
30940: PPUSH
30941: PPUSH
30942: PPUSH
// if not factory then
30943: LD_VAR 0 1
30947: NOT
30948: IFFALSE 30952
// exit ;
30950: GO 31545
// if control = control_apeman then
30952: LD_VAR 0 4
30956: PUSH
30957: LD_INT 5
30959: EQUAL
30960: IFFALSE 31069
// begin tmp := UnitsInside ( factory ) ;
30962: LD_ADDR_VAR 0 8
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 313
30976: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30977: LD_VAR 0 8
30981: PPUSH
30982: LD_INT 25
30984: PUSH
30985: LD_INT 12
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PPUSH
30992: CALL_OW 72
30996: NOT
30997: IFFALSE 31007
// control := control_manual ;
30999: LD_ADDR_VAR 0 4
31003: PUSH
31004: LD_INT 1
31006: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31007: LD_ADDR_VAR 0 8
31011: PUSH
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL 30704 0 1
31021: ST_TO_ADDR
// if tmp then
31022: LD_VAR 0 8
31026: IFFALSE 31069
// begin for i in tmp do
31028: LD_ADDR_VAR 0 7
31032: PUSH
31033: LD_VAR 0 8
31037: PUSH
31038: FOR_IN
31039: IFFALSE 31067
// if i [ 1 ] = b_ext_radio then
31041: LD_VAR 0 7
31045: PUSH
31046: LD_INT 1
31048: ARRAY
31049: PUSH
31050: LD_INT 22
31052: EQUAL
31053: IFFALSE 31065
// begin control := control_remote ;
31055: LD_ADDR_VAR 0 4
31059: PUSH
31060: LD_INT 2
31062: ST_TO_ADDR
// break ;
31063: GO 31067
// end ;
31065: GO 31038
31067: POP
31068: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31069: LD_VAR 0 1
31073: PPUSH
31074: LD_VAR 0 2
31078: PPUSH
31079: LD_VAR 0 3
31083: PPUSH
31084: LD_VAR 0 4
31088: PPUSH
31089: LD_VAR 0 5
31093: PPUSH
31094: CALL_OW 448
31098: IFFALSE 31133
// begin result := [ chassis , engine , control , weapon ] ;
31100: LD_ADDR_VAR 0 6
31104: PUSH
31105: LD_VAR 0 2
31109: PUSH
31110: LD_VAR 0 3
31114: PUSH
31115: LD_VAR 0 4
31119: PUSH
31120: LD_VAR 0 5
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: ST_TO_ADDR
// exit ;
31131: GO 31545
// end ; _chassis := AvailableChassisList ( factory ) ;
31133: LD_ADDR_VAR 0 9
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 475
31147: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31148: LD_ADDR_VAR 0 11
31152: PUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: CALL_OW 476
31162: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31163: LD_ADDR_VAR 0 12
31167: PUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 477
31177: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31178: LD_ADDR_VAR 0 10
31182: PUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 478
31192: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31193: LD_VAR 0 9
31197: NOT
31198: PUSH
31199: LD_VAR 0 11
31203: NOT
31204: OR
31205: PUSH
31206: LD_VAR 0 12
31210: NOT
31211: OR
31212: PUSH
31213: LD_VAR 0 10
31217: NOT
31218: OR
31219: IFFALSE 31254
// begin result := [ chassis , engine , control , weapon ] ;
31221: LD_ADDR_VAR 0 6
31225: PUSH
31226: LD_VAR 0 2
31230: PUSH
31231: LD_VAR 0 3
31235: PUSH
31236: LD_VAR 0 4
31240: PUSH
31241: LD_VAR 0 5
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// exit ;
31252: GO 31545
// end ; if not chassis in _chassis then
31254: LD_VAR 0 2
31258: PUSH
31259: LD_VAR 0 9
31263: IN
31264: NOT
31265: IFFALSE 31291
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31267: LD_ADDR_VAR 0 2
31271: PUSH
31272: LD_VAR 0 9
31276: PUSH
31277: LD_INT 1
31279: PPUSH
31280: LD_VAR 0 9
31284: PPUSH
31285: CALL_OW 12
31289: ARRAY
31290: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31291: LD_VAR 0 2
31295: PPUSH
31296: LD_VAR 0 3
31300: PPUSH
31301: CALL 31550 0 2
31305: NOT
31306: IFFALSE 31365
// repeat engine := _engine [ 1 ] ;
31308: LD_ADDR_VAR 0 3
31312: PUSH
31313: LD_VAR 0 11
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31322: LD_ADDR_VAR 0 11
31326: PUSH
31327: LD_VAR 0 11
31331: PPUSH
31332: LD_INT 1
31334: PPUSH
31335: CALL_OW 3
31339: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31340: LD_VAR 0 2
31344: PPUSH
31345: LD_VAR 0 3
31349: PPUSH
31350: CALL 31550 0 2
31354: PUSH
31355: LD_VAR 0 11
31359: PUSH
31360: EMPTY
31361: EQUAL
31362: OR
31363: IFFALSE 31308
// if not control in _control then
31365: LD_VAR 0 4
31369: PUSH
31370: LD_VAR 0 12
31374: IN
31375: NOT
31376: IFFALSE 31402
// control := _control [ rand ( 1 , _control ) ] ;
31378: LD_ADDR_VAR 0 4
31382: PUSH
31383: LD_VAR 0 12
31387: PUSH
31388: LD_INT 1
31390: PPUSH
31391: LD_VAR 0 12
31395: PPUSH
31396: CALL_OW 12
31400: ARRAY
31401: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31402: LD_VAR 0 2
31406: PPUSH
31407: LD_VAR 0 5
31411: PPUSH
31412: CALL 31770 0 2
31416: NOT
31417: IFFALSE 31476
// repeat weapon := _weapon [ 1 ] ;
31419: LD_ADDR_VAR 0 5
31423: PUSH
31424: LD_VAR 0 10
31428: PUSH
31429: LD_INT 1
31431: ARRAY
31432: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31433: LD_ADDR_VAR 0 10
31437: PUSH
31438: LD_VAR 0 10
31442: PPUSH
31443: LD_INT 1
31445: PPUSH
31446: CALL_OW 3
31450: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31451: LD_VAR 0 2
31455: PPUSH
31456: LD_VAR 0 5
31460: PPUSH
31461: CALL 31770 0 2
31465: PUSH
31466: LD_VAR 0 10
31470: PUSH
31471: EMPTY
31472: EQUAL
31473: OR
31474: IFFALSE 31419
// result := [ ] ;
31476: LD_ADDR_VAR 0 6
31480: PUSH
31481: EMPTY
31482: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31483: LD_VAR 0 1
31487: PPUSH
31488: LD_VAR 0 2
31492: PPUSH
31493: LD_VAR 0 3
31497: PPUSH
31498: LD_VAR 0 4
31502: PPUSH
31503: LD_VAR 0 5
31507: PPUSH
31508: CALL_OW 448
31512: IFFALSE 31545
// result := [ chassis , engine , control , weapon ] ;
31514: LD_ADDR_VAR 0 6
31518: PUSH
31519: LD_VAR 0 2
31523: PUSH
31524: LD_VAR 0 3
31528: PUSH
31529: LD_VAR 0 4
31533: PUSH
31534: LD_VAR 0 5
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: ST_TO_ADDR
// end ;
31545: LD_VAR 0 6
31549: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31550: LD_INT 0
31552: PPUSH
// if not chassis or not engine then
31553: LD_VAR 0 1
31557: NOT
31558: PUSH
31559: LD_VAR 0 2
31563: NOT
31564: OR
31565: IFFALSE 31569
// exit ;
31567: GO 31765
// case engine of engine_solar :
31569: LD_VAR 0 2
31573: PUSH
31574: LD_INT 2
31576: DOUBLE
31577: EQUAL
31578: IFTRUE 31582
31580: GO 31620
31582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31583: LD_ADDR_VAR 0 3
31587: PUSH
31588: LD_INT 11
31590: PUSH
31591: LD_INT 12
31593: PUSH
31594: LD_INT 13
31596: PUSH
31597: LD_INT 14
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
31618: GO 31749
31620: LD_INT 1
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31690
31628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: LD_INT 11
31636: PUSH
31637: LD_INT 12
31639: PUSH
31640: LD_INT 13
31642: PUSH
31643: LD_INT 14
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: LD_INT 5
31660: PUSH
31661: LD_INT 21
31663: PUSH
31664: LD_INT 23
31666: PUSH
31667: LD_INT 22
31669: PUSH
31670: LD_INT 24
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: ST_TO_ADDR
31688: GO 31749
31690: LD_INT 3
31692: DOUBLE
31693: EQUAL
31694: IFTRUE 31698
31696: GO 31748
31698: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_INT 13
31706: PUSH
31707: LD_INT 14
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 5
31721: PUSH
31722: LD_INT 21
31724: PUSH
31725: LD_INT 22
31727: PUSH
31728: LD_INT 23
31730: PUSH
31731: LD_INT 24
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
31746: GO 31749
31748: POP
// result := ( chassis in result ) ;
31749: LD_ADDR_VAR 0 3
31753: PUSH
31754: LD_VAR 0 1
31758: PUSH
31759: LD_VAR 0 3
31763: IN
31764: ST_TO_ADDR
// end ;
31765: LD_VAR 0 3
31769: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31770: LD_INT 0
31772: PPUSH
// if not chassis or not weapon then
31773: LD_VAR 0 1
31777: NOT
31778: PUSH
31779: LD_VAR 0 2
31783: NOT
31784: OR
31785: IFFALSE 31789
// exit ;
31787: GO 32849
// case weapon of us_machine_gun :
31789: LD_VAR 0 2
31793: PUSH
31794: LD_INT 2
31796: DOUBLE
31797: EQUAL
31798: IFTRUE 31802
31800: GO 31832
31802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31803: LD_ADDR_VAR 0 3
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: LD_INT 4
31819: PUSH
31820: LD_INT 5
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
31830: GO 32833
31832: LD_INT 3
31834: DOUBLE
31835: EQUAL
31836: IFTRUE 31840
31838: GO 31870
31840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: LD_INT 4
31857: PUSH
31858: LD_INT 5
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32833
31870: LD_INT 11
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31908
31878: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 3
31892: PUSH
31893: LD_INT 4
31895: PUSH
31896: LD_INT 5
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: ST_TO_ADDR
31906: GO 32833
31908: LD_INT 4
31910: DOUBLE
31911: EQUAL
31912: IFTRUE 31916
31914: GO 31942
31916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31917: LD_ADDR_VAR 0 3
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 4
31930: PUSH
31931: LD_INT 5
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: ST_TO_ADDR
31940: GO 32833
31942: LD_INT 5
31944: DOUBLE
31945: EQUAL
31946: IFTRUE 31950
31948: GO 31976
31950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31951: LD_ADDR_VAR 0 3
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: LD_INT 5
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
31974: GO 32833
31976: LD_INT 9
31978: DOUBLE
31979: EQUAL
31980: IFTRUE 31984
31982: GO 32010
31984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31985: LD_ADDR_VAR 0 3
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: LD_INT 4
31998: PUSH
31999: LD_INT 5
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
32008: GO 32833
32010: LD_INT 7
32012: DOUBLE
32013: EQUAL
32014: IFTRUE 32018
32016: GO 32044
32018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: LD_INT 4
32032: PUSH
32033: LD_INT 5
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: ST_TO_ADDR
32042: GO 32833
32044: LD_INT 12
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32078
32052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32053: LD_ADDR_VAR 0 3
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: LD_INT 5
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
32076: GO 32833
32078: LD_INT 13
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32112
32086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32087: LD_ADDR_VAR 0 3
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: LD_INT 4
32100: PUSH
32101: LD_INT 5
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
32110: GO 32833
32112: LD_INT 14
32114: DOUBLE
32115: EQUAL
32116: IFTRUE 32120
32118: GO 32138
32120: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32121: LD_ADDR_VAR 0 3
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: ST_TO_ADDR
32136: GO 32833
32138: LD_INT 6
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32146
32144: GO 32164
32146: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32147: LD_ADDR_VAR 0 3
32151: PUSH
32152: LD_INT 4
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: ST_TO_ADDR
32162: GO 32833
32164: LD_INT 10
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32172
32170: GO 32190
32172: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32173: LD_ADDR_VAR 0 3
32177: PUSH
32178: LD_INT 4
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: ST_TO_ADDR
32188: GO 32833
32190: LD_INT 22
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32224
32198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32199: LD_ADDR_VAR 0 3
32203: PUSH
32204: LD_INT 11
32206: PUSH
32207: LD_INT 12
32209: PUSH
32210: LD_INT 13
32212: PUSH
32213: LD_INT 14
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
32222: GO 32833
32224: LD_INT 23
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32258
32232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32233: LD_ADDR_VAR 0 3
32237: PUSH
32238: LD_INT 11
32240: PUSH
32241: LD_INT 12
32243: PUSH
32244: LD_INT 13
32246: PUSH
32247: LD_INT 14
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
32256: GO 32833
32258: LD_INT 24
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32292
32266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32267: LD_ADDR_VAR 0 3
32271: PUSH
32272: LD_INT 11
32274: PUSH
32275: LD_INT 12
32277: PUSH
32278: LD_INT 13
32280: PUSH
32281: LD_INT 14
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
32290: GO 32833
32292: LD_INT 30
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32326
32300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 11
32308: PUSH
32309: LD_INT 12
32311: PUSH
32312: LD_INT 13
32314: PUSH
32315: LD_INT 14
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
32324: GO 32833
32326: LD_INT 25
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32352
32334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_INT 13
32342: PUSH
32343: LD_INT 14
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: ST_TO_ADDR
32350: GO 32833
32352: LD_INT 27
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32378
32360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32361: LD_ADDR_VAR 0 3
32365: PUSH
32366: LD_INT 13
32368: PUSH
32369: LD_INT 14
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: ST_TO_ADDR
32376: GO 32833
32378: LD_INT 92
32380: DOUBLE
32381: EQUAL
32382: IFTRUE 32386
32384: GO 32412
32386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32387: LD_ADDR_VAR 0 3
32391: PUSH
32392: LD_INT 11
32394: PUSH
32395: LD_INT 12
32397: PUSH
32398: LD_INT 13
32400: PUSH
32401: LD_INT 14
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: ST_TO_ADDR
32410: GO 32833
32412: LD_INT 28
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32438
32420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_INT 13
32428: PUSH
32429: LD_INT 14
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: ST_TO_ADDR
32436: GO 32833
32438: LD_INT 29
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32446
32444: GO 32464
32446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_INT 13
32454: PUSH
32455: LD_INT 14
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: ST_TO_ADDR
32462: GO 32833
32464: LD_INT 31
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32490
32472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32473: LD_ADDR_VAR 0 3
32477: PUSH
32478: LD_INT 13
32480: PUSH
32481: LD_INT 14
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: ST_TO_ADDR
32488: GO 32833
32490: LD_INT 26
32492: DOUBLE
32493: EQUAL
32494: IFTRUE 32498
32496: GO 32516
32498: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32499: LD_ADDR_VAR 0 3
32503: PUSH
32504: LD_INT 13
32506: PUSH
32507: LD_INT 14
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: ST_TO_ADDR
32514: GO 32833
32516: LD_INT 42
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32550
32524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32525: LD_ADDR_VAR 0 3
32529: PUSH
32530: LD_INT 21
32532: PUSH
32533: LD_INT 22
32535: PUSH
32536: LD_INT 23
32538: PUSH
32539: LD_INT 24
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: ST_TO_ADDR
32548: GO 32833
32550: LD_INT 43
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 32584
32558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32559: LD_ADDR_VAR 0 3
32563: PUSH
32564: LD_INT 21
32566: PUSH
32567: LD_INT 22
32569: PUSH
32570: LD_INT 23
32572: PUSH
32573: LD_INT 24
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: ST_TO_ADDR
32582: GO 32833
32584: LD_INT 44
32586: DOUBLE
32587: EQUAL
32588: IFTRUE 32592
32590: GO 32618
32592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32593: LD_ADDR_VAR 0 3
32597: PUSH
32598: LD_INT 21
32600: PUSH
32601: LD_INT 22
32603: PUSH
32604: LD_INT 23
32606: PUSH
32607: LD_INT 24
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
32616: GO 32833
32618: LD_INT 45
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32652
32626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: LD_INT 21
32634: PUSH
32635: LD_INT 22
32637: PUSH
32638: LD_INT 23
32640: PUSH
32641: LD_INT 24
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
32650: GO 32833
32652: LD_INT 49
32654: DOUBLE
32655: EQUAL
32656: IFTRUE 32660
32658: GO 32686
32660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32661: LD_ADDR_VAR 0 3
32665: PUSH
32666: LD_INT 21
32668: PUSH
32669: LD_INT 22
32671: PUSH
32672: LD_INT 23
32674: PUSH
32675: LD_INT 24
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
32684: GO 32833
32686: LD_INT 51
32688: DOUBLE
32689: EQUAL
32690: IFTRUE 32694
32692: GO 32720
32694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_INT 21
32702: PUSH
32703: LD_INT 22
32705: PUSH
32706: LD_INT 23
32708: PUSH
32709: LD_INT 24
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: ST_TO_ADDR
32718: GO 32833
32720: LD_INT 52
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32754
32728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32729: LD_ADDR_VAR 0 3
32733: PUSH
32734: LD_INT 21
32736: PUSH
32737: LD_INT 22
32739: PUSH
32740: LD_INT 23
32742: PUSH
32743: LD_INT 24
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: ST_TO_ADDR
32752: GO 32833
32754: LD_INT 53
32756: DOUBLE
32757: EQUAL
32758: IFTRUE 32762
32760: GO 32780
32762: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32763: LD_ADDR_VAR 0 3
32767: PUSH
32768: LD_INT 23
32770: PUSH
32771: LD_INT 24
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: ST_TO_ADDR
32778: GO 32833
32780: LD_INT 46
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32806
32788: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32789: LD_ADDR_VAR 0 3
32793: PUSH
32794: LD_INT 23
32796: PUSH
32797: LD_INT 24
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: ST_TO_ADDR
32804: GO 32833
32806: LD_INT 47
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32832
32814: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32815: LD_ADDR_VAR 0 3
32819: PUSH
32820: LD_INT 23
32822: PUSH
32823: LD_INT 24
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: ST_TO_ADDR
32830: GO 32833
32832: POP
// result := ( chassis in result ) ;
32833: LD_ADDR_VAR 0 3
32837: PUSH
32838: LD_VAR 0 1
32842: PUSH
32843: LD_VAR 0 3
32847: IN
32848: ST_TO_ADDR
// end ;
32849: LD_VAR 0 3
32853: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32854: LD_INT 0
32856: PPUSH
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
// result := array ;
32863: LD_ADDR_VAR 0 5
32867: PUSH
32868: LD_VAR 0 1
32872: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32873: LD_VAR 0 1
32877: NOT
32878: PUSH
32879: LD_VAR 0 2
32883: NOT
32884: OR
32885: PUSH
32886: LD_VAR 0 3
32890: NOT
32891: OR
32892: PUSH
32893: LD_VAR 0 2
32897: PUSH
32898: LD_VAR 0 1
32902: GREATER
32903: OR
32904: PUSH
32905: LD_VAR 0 3
32909: PUSH
32910: LD_VAR 0 1
32914: GREATER
32915: OR
32916: IFFALSE 32920
// exit ;
32918: GO 33216
// if direction then
32920: LD_VAR 0 4
32924: IFFALSE 32988
// begin d := 1 ;
32926: LD_ADDR_VAR 0 9
32930: PUSH
32931: LD_INT 1
32933: ST_TO_ADDR
// if i_from > i_to then
32934: LD_VAR 0 2
32938: PUSH
32939: LD_VAR 0 3
32943: GREATER
32944: IFFALSE 32970
// length := ( array - i_from ) + i_to else
32946: LD_ADDR_VAR 0 11
32950: PUSH
32951: LD_VAR 0 1
32955: PUSH
32956: LD_VAR 0 2
32960: MINUS
32961: PUSH
32962: LD_VAR 0 3
32966: PLUS
32967: ST_TO_ADDR
32968: GO 32986
// length := i_to - i_from ;
32970: LD_ADDR_VAR 0 11
32974: PUSH
32975: LD_VAR 0 3
32979: PUSH
32980: LD_VAR 0 2
32984: MINUS
32985: ST_TO_ADDR
// end else
32986: GO 33049
// begin d := - 1 ;
32988: LD_ADDR_VAR 0 9
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: ST_TO_ADDR
// if i_from > i_to then
32997: LD_VAR 0 2
33001: PUSH
33002: LD_VAR 0 3
33006: GREATER
33007: IFFALSE 33027
// length := i_from - i_to else
33009: LD_ADDR_VAR 0 11
33013: PUSH
33014: LD_VAR 0 2
33018: PUSH
33019: LD_VAR 0 3
33023: MINUS
33024: ST_TO_ADDR
33025: GO 33049
// length := ( array - i_to ) + i_from ;
33027: LD_ADDR_VAR 0 11
33031: PUSH
33032: LD_VAR 0 1
33036: PUSH
33037: LD_VAR 0 3
33041: MINUS
33042: PUSH
33043: LD_VAR 0 2
33047: PLUS
33048: ST_TO_ADDR
// end ; if not length then
33049: LD_VAR 0 11
33053: NOT
33054: IFFALSE 33058
// exit ;
33056: GO 33216
// tmp := array ;
33058: LD_ADDR_VAR 0 10
33062: PUSH
33063: LD_VAR 0 1
33067: ST_TO_ADDR
// for i = 1 to length do
33068: LD_ADDR_VAR 0 6
33072: PUSH
33073: DOUBLE
33074: LD_INT 1
33076: DEC
33077: ST_TO_ADDR
33078: LD_VAR 0 11
33082: PUSH
33083: FOR_TO
33084: IFFALSE 33204
// begin for j = 1 to array do
33086: LD_ADDR_VAR 0 7
33090: PUSH
33091: DOUBLE
33092: LD_INT 1
33094: DEC
33095: ST_TO_ADDR
33096: LD_VAR 0 1
33100: PUSH
33101: FOR_TO
33102: IFFALSE 33190
// begin k := j + d ;
33104: LD_ADDR_VAR 0 8
33108: PUSH
33109: LD_VAR 0 7
33113: PUSH
33114: LD_VAR 0 9
33118: PLUS
33119: ST_TO_ADDR
// if k > array then
33120: LD_VAR 0 8
33124: PUSH
33125: LD_VAR 0 1
33129: GREATER
33130: IFFALSE 33140
// k := 1 ;
33132: LD_ADDR_VAR 0 8
33136: PUSH
33137: LD_INT 1
33139: ST_TO_ADDR
// if not k then
33140: LD_VAR 0 8
33144: NOT
33145: IFFALSE 33157
// k := array ;
33147: LD_ADDR_VAR 0 8
33151: PUSH
33152: LD_VAR 0 1
33156: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33157: LD_ADDR_VAR 0 10
33161: PUSH
33162: LD_VAR 0 10
33166: PPUSH
33167: LD_VAR 0 8
33171: PPUSH
33172: LD_VAR 0 1
33176: PUSH
33177: LD_VAR 0 7
33181: ARRAY
33182: PPUSH
33183: CALL_OW 1
33187: ST_TO_ADDR
// end ;
33188: GO 33101
33190: POP
33191: POP
// array := tmp ;
33192: LD_ADDR_VAR 0 1
33196: PUSH
33197: LD_VAR 0 10
33201: ST_TO_ADDR
// end ;
33202: GO 33083
33204: POP
33205: POP
// result := array ;
33206: LD_ADDR_VAR 0 5
33210: PUSH
33211: LD_VAR 0 1
33215: ST_TO_ADDR
// end ;
33216: LD_VAR 0 5
33220: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33221: LD_INT 0
33223: PPUSH
33224: PPUSH
// result := 0 ;
33225: LD_ADDR_VAR 0 3
33229: PUSH
33230: LD_INT 0
33232: ST_TO_ADDR
// if not array or not value in array then
33233: LD_VAR 0 1
33237: NOT
33238: PUSH
33239: LD_VAR 0 2
33243: PUSH
33244: LD_VAR 0 1
33248: IN
33249: NOT
33250: OR
33251: IFFALSE 33255
// exit ;
33253: GO 33309
// for i = 1 to array do
33255: LD_ADDR_VAR 0 4
33259: PUSH
33260: DOUBLE
33261: LD_INT 1
33263: DEC
33264: ST_TO_ADDR
33265: LD_VAR 0 1
33269: PUSH
33270: FOR_TO
33271: IFFALSE 33307
// if value = array [ i ] then
33273: LD_VAR 0 2
33277: PUSH
33278: LD_VAR 0 1
33282: PUSH
33283: LD_VAR 0 4
33287: ARRAY
33288: EQUAL
33289: IFFALSE 33305
// begin result := i ;
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_VAR 0 4
33300: ST_TO_ADDR
// exit ;
33301: POP
33302: POP
33303: GO 33309
// end ;
33305: GO 33270
33307: POP
33308: POP
// end ;
33309: LD_VAR 0 3
33313: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33314: LD_INT 0
33316: PPUSH
// vc_chassis := chassis ;
33317: LD_ADDR_OWVAR 37
33321: PUSH
33322: LD_VAR 0 1
33326: ST_TO_ADDR
// vc_engine := engine ;
33327: LD_ADDR_OWVAR 39
33331: PUSH
33332: LD_VAR 0 2
33336: ST_TO_ADDR
// vc_control := control ;
33337: LD_ADDR_OWVAR 38
33341: PUSH
33342: LD_VAR 0 3
33346: ST_TO_ADDR
// vc_weapon := weapon ;
33347: LD_ADDR_OWVAR 40
33351: PUSH
33352: LD_VAR 0 4
33356: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33357: LD_ADDR_OWVAR 41
33361: PUSH
33362: LD_VAR 0 5
33366: ST_TO_ADDR
// end ;
33367: LD_VAR 0 6
33371: RET
// export function WantPlant ( unit ) ; var task ; begin
33372: LD_INT 0
33374: PPUSH
33375: PPUSH
// result := false ;
33376: LD_ADDR_VAR 0 2
33380: PUSH
33381: LD_INT 0
33383: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_VAR 0 1
33393: PPUSH
33394: CALL_OW 437
33398: ST_TO_ADDR
// if task then
33399: LD_VAR 0 3
33403: IFFALSE 33431
// if task [ 1 ] [ 1 ] = p then
33405: LD_VAR 0 3
33409: PUSH
33410: LD_INT 1
33412: ARRAY
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: PUSH
33418: LD_STRING p
33420: EQUAL
33421: IFFALSE 33431
// result := true ;
33423: LD_ADDR_VAR 0 2
33427: PUSH
33428: LD_INT 1
33430: ST_TO_ADDR
// end ;
33431: LD_VAR 0 2
33435: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33436: LD_INT 0
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
// if pos < 1 then
33442: LD_VAR 0 2
33446: PUSH
33447: LD_INT 1
33449: LESS
33450: IFFALSE 33454
// exit ;
33452: GO 33757
// if pos = 1 then
33454: LD_VAR 0 2
33458: PUSH
33459: LD_INT 1
33461: EQUAL
33462: IFFALSE 33495
// result := Replace ( arr , pos [ 1 ] , value ) else
33464: LD_ADDR_VAR 0 4
33468: PUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: LD_VAR 0 2
33478: PUSH
33479: LD_INT 1
33481: ARRAY
33482: PPUSH
33483: LD_VAR 0 3
33487: PPUSH
33488: CALL_OW 1
33492: ST_TO_ADDR
33493: GO 33757
// begin tmp := arr ;
33495: LD_ADDR_VAR 0 6
33499: PUSH
33500: LD_VAR 0 1
33504: ST_TO_ADDR
// s_arr := [ tmp ] ;
33505: LD_ADDR_VAR 0 7
33509: PUSH
33510: LD_VAR 0 6
33514: PUSH
33515: EMPTY
33516: LIST
33517: ST_TO_ADDR
// for i = 1 to pos - 1 do
33518: LD_ADDR_VAR 0 5
33522: PUSH
33523: DOUBLE
33524: LD_INT 1
33526: DEC
33527: ST_TO_ADDR
33528: LD_VAR 0 2
33532: PUSH
33533: LD_INT 1
33535: MINUS
33536: PUSH
33537: FOR_TO
33538: IFFALSE 33583
// begin tmp := tmp [ pos [ i ] ] ;
33540: LD_ADDR_VAR 0 6
33544: PUSH
33545: LD_VAR 0 6
33549: PUSH
33550: LD_VAR 0 2
33554: PUSH
33555: LD_VAR 0 5
33559: ARRAY
33560: ARRAY
33561: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33562: LD_ADDR_VAR 0 7
33566: PUSH
33567: LD_VAR 0 7
33571: PUSH
33572: LD_VAR 0 6
33576: PUSH
33577: EMPTY
33578: LIST
33579: ADD
33580: ST_TO_ADDR
// end ;
33581: GO 33537
33583: POP
33584: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33585: LD_ADDR_VAR 0 6
33589: PUSH
33590: LD_VAR 0 6
33594: PPUSH
33595: LD_VAR 0 2
33599: PUSH
33600: LD_VAR 0 2
33604: ARRAY
33605: PPUSH
33606: LD_VAR 0 3
33610: PPUSH
33611: CALL_OW 1
33615: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33616: LD_ADDR_VAR 0 7
33620: PUSH
33621: LD_VAR 0 7
33625: PPUSH
33626: LD_VAR 0 7
33630: PPUSH
33631: LD_VAR 0 6
33635: PPUSH
33636: CALL_OW 1
33640: ST_TO_ADDR
// for i = s_arr downto 2 do
33641: LD_ADDR_VAR 0 5
33645: PUSH
33646: DOUBLE
33647: LD_VAR 0 7
33651: INC
33652: ST_TO_ADDR
33653: LD_INT 2
33655: PUSH
33656: FOR_DOWNTO
33657: IFFALSE 33741
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33659: LD_ADDR_VAR 0 6
33663: PUSH
33664: LD_VAR 0 7
33668: PUSH
33669: LD_VAR 0 5
33673: PUSH
33674: LD_INT 1
33676: MINUS
33677: ARRAY
33678: PPUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_VAR 0 5
33688: PUSH
33689: LD_INT 1
33691: MINUS
33692: ARRAY
33693: PPUSH
33694: LD_VAR 0 7
33698: PUSH
33699: LD_VAR 0 5
33703: ARRAY
33704: PPUSH
33705: CALL_OW 1
33709: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33710: LD_ADDR_VAR 0 7
33714: PUSH
33715: LD_VAR 0 7
33719: PPUSH
33720: LD_VAR 0 5
33724: PUSH
33725: LD_INT 1
33727: MINUS
33728: PPUSH
33729: LD_VAR 0 6
33733: PPUSH
33734: CALL_OW 1
33738: ST_TO_ADDR
// end ;
33739: GO 33656
33741: POP
33742: POP
// result := s_arr [ 1 ] ;
33743: LD_ADDR_VAR 0 4
33747: PUSH
33748: LD_VAR 0 7
33752: PUSH
33753: LD_INT 1
33755: ARRAY
33756: ST_TO_ADDR
// end ; end ;
33757: LD_VAR 0 4
33761: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33762: LD_INT 0
33764: PPUSH
33765: PPUSH
// if not list then
33766: LD_VAR 0 1
33770: NOT
33771: IFFALSE 33775
// exit ;
33773: GO 33866
// i := list [ pos1 ] ;
33775: LD_ADDR_VAR 0 5
33779: PUSH
33780: LD_VAR 0 1
33784: PUSH
33785: LD_VAR 0 2
33789: ARRAY
33790: ST_TO_ADDR
// if not i then
33791: LD_VAR 0 5
33795: NOT
33796: IFFALSE 33800
// exit ;
33798: GO 33866
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33800: LD_ADDR_VAR 0 1
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: LD_VAR 0 2
33814: PPUSH
33815: LD_VAR 0 1
33819: PUSH
33820: LD_VAR 0 3
33824: ARRAY
33825: PPUSH
33826: CALL_OW 1
33830: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_VAR 0 1
33840: PPUSH
33841: LD_VAR 0 3
33845: PPUSH
33846: LD_VAR 0 5
33850: PPUSH
33851: CALL_OW 1
33855: ST_TO_ADDR
// result := list ;
33856: LD_ADDR_VAR 0 4
33860: PUSH
33861: LD_VAR 0 1
33865: ST_TO_ADDR
// end ;
33866: LD_VAR 0 4
33870: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33871: LD_INT 0
33873: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33874: LD_ADDR_VAR 0 5
33878: PUSH
33879: LD_VAR 0 1
33883: PPUSH
33884: CALL_OW 250
33888: PPUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 251
33898: PPUSH
33899: LD_VAR 0 2
33903: PPUSH
33904: LD_VAR 0 3
33908: PPUSH
33909: LD_VAR 0 4
33913: PPUSH
33914: CALL 33924 0 5
33918: ST_TO_ADDR
// end ;
33919: LD_VAR 0 5
33923: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33924: LD_INT 0
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
// if not list then
33930: LD_VAR 0 3
33934: NOT
33935: IFFALSE 33939
// exit ;
33937: GO 34327
// result := [ ] ;
33939: LD_ADDR_VAR 0 6
33943: PUSH
33944: EMPTY
33945: ST_TO_ADDR
// for i in list do
33946: LD_ADDR_VAR 0 7
33950: PUSH
33951: LD_VAR 0 3
33955: PUSH
33956: FOR_IN
33957: IFFALSE 34159
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33959: LD_ADDR_VAR 0 9
33963: PUSH
33964: LD_VAR 0 7
33968: PPUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: LD_VAR 0 2
33978: PPUSH
33979: CALL_OW 297
33983: ST_TO_ADDR
// if not result then
33984: LD_VAR 0 6
33988: NOT
33989: IFFALSE 34015
// result := [ [ i , tmp ] ] else
33991: LD_ADDR_VAR 0 6
33995: PUSH
33996: LD_VAR 0 7
34000: PUSH
34001: LD_VAR 0 9
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: EMPTY
34011: LIST
34012: ST_TO_ADDR
34013: GO 34157
// begin if result [ result ] [ 2 ] < tmp then
34015: LD_VAR 0 6
34019: PUSH
34020: LD_VAR 0 6
34024: ARRAY
34025: PUSH
34026: LD_INT 2
34028: ARRAY
34029: PUSH
34030: LD_VAR 0 9
34034: LESS
34035: IFFALSE 34077
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34037: LD_ADDR_VAR 0 6
34041: PUSH
34042: LD_VAR 0 6
34046: PPUSH
34047: LD_VAR 0 6
34051: PUSH
34052: LD_INT 1
34054: PLUS
34055: PPUSH
34056: LD_VAR 0 7
34060: PUSH
34061: LD_VAR 0 9
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PPUSH
34070: CALL_OW 2
34074: ST_TO_ADDR
34075: GO 34157
// for j = 1 to result do
34077: LD_ADDR_VAR 0 8
34081: PUSH
34082: DOUBLE
34083: LD_INT 1
34085: DEC
34086: ST_TO_ADDR
34087: LD_VAR 0 6
34091: PUSH
34092: FOR_TO
34093: IFFALSE 34155
// begin if tmp < result [ j ] [ 2 ] then
34095: LD_VAR 0 9
34099: PUSH
34100: LD_VAR 0 6
34104: PUSH
34105: LD_VAR 0 8
34109: ARRAY
34110: PUSH
34111: LD_INT 2
34113: ARRAY
34114: LESS
34115: IFFALSE 34153
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34117: LD_ADDR_VAR 0 6
34121: PUSH
34122: LD_VAR 0 6
34126: PPUSH
34127: LD_VAR 0 8
34131: PPUSH
34132: LD_VAR 0 7
34136: PUSH
34137: LD_VAR 0 9
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PPUSH
34146: CALL_OW 2
34150: ST_TO_ADDR
// break ;
34151: GO 34155
// end ; end ;
34153: GO 34092
34155: POP
34156: POP
// end ; end ;
34157: GO 33956
34159: POP
34160: POP
// if result and not asc then
34161: LD_VAR 0 6
34165: PUSH
34166: LD_VAR 0 4
34170: NOT
34171: AND
34172: IFFALSE 34247
// begin tmp := result ;
34174: LD_ADDR_VAR 0 9
34178: PUSH
34179: LD_VAR 0 6
34183: ST_TO_ADDR
// for i = tmp downto 1 do
34184: LD_ADDR_VAR 0 7
34188: PUSH
34189: DOUBLE
34190: LD_VAR 0 9
34194: INC
34195: ST_TO_ADDR
34196: LD_INT 1
34198: PUSH
34199: FOR_DOWNTO
34200: IFFALSE 34245
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34202: LD_ADDR_VAR 0 6
34206: PUSH
34207: LD_VAR 0 6
34211: PPUSH
34212: LD_VAR 0 9
34216: PUSH
34217: LD_VAR 0 7
34221: MINUS
34222: PUSH
34223: LD_INT 1
34225: PLUS
34226: PPUSH
34227: LD_VAR 0 9
34231: PUSH
34232: LD_VAR 0 7
34236: ARRAY
34237: PPUSH
34238: CALL_OW 1
34242: ST_TO_ADDR
34243: GO 34199
34245: POP
34246: POP
// end ; tmp := [ ] ;
34247: LD_ADDR_VAR 0 9
34251: PUSH
34252: EMPTY
34253: ST_TO_ADDR
// if mode then
34254: LD_VAR 0 5
34258: IFFALSE 34327
// begin for i = 1 to result do
34260: LD_ADDR_VAR 0 7
34264: PUSH
34265: DOUBLE
34266: LD_INT 1
34268: DEC
34269: ST_TO_ADDR
34270: LD_VAR 0 6
34274: PUSH
34275: FOR_TO
34276: IFFALSE 34315
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34278: LD_ADDR_VAR 0 9
34282: PUSH
34283: LD_VAR 0 9
34287: PPUSH
34288: LD_VAR 0 7
34292: PPUSH
34293: LD_VAR 0 6
34297: PUSH
34298: LD_VAR 0 7
34302: ARRAY
34303: PUSH
34304: LD_INT 1
34306: ARRAY
34307: PPUSH
34308: CALL_OW 1
34312: ST_TO_ADDR
34313: GO 34275
34315: POP
34316: POP
// result := tmp ;
34317: LD_ADDR_VAR 0 6
34321: PUSH
34322: LD_VAR 0 9
34326: ST_TO_ADDR
// end ; end ;
34327: LD_VAR 0 6
34331: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34332: LD_INT 0
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34340: LD_ADDR_VAR 0 5
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: EMPTY
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: ST_TO_ADDR
// if not x or not y then
34362: LD_VAR 0 2
34366: NOT
34367: PUSH
34368: LD_VAR 0 3
34372: NOT
34373: OR
34374: IFFALSE 34378
// exit ;
34376: GO 36028
// if not range then
34378: LD_VAR 0 4
34382: NOT
34383: IFFALSE 34393
// range := 10 ;
34385: LD_ADDR_VAR 0 4
34389: PUSH
34390: LD_INT 10
34392: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34393: LD_ADDR_VAR 0 8
34397: PUSH
34398: LD_INT 81
34400: PUSH
34401: LD_VAR 0 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 92
34412: PUSH
34413: LD_VAR 0 2
34417: PUSH
34418: LD_VAR 0 3
34422: PUSH
34423: LD_VAR 0 4
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 21
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: PPUSH
34456: CALL_OW 69
34460: ST_TO_ADDR
// if not tmp then
34461: LD_VAR 0 8
34465: NOT
34466: IFFALSE 34470
// exit ;
34468: GO 36028
// for i in tmp do
34470: LD_ADDR_VAR 0 6
34474: PUSH
34475: LD_VAR 0 8
34479: PUSH
34480: FOR_IN
34481: IFFALSE 36003
// begin points := [ 0 , 0 , 0 ] ;
34483: LD_ADDR_VAR 0 9
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: ST_TO_ADDR
// bpoints := 1 ;
34502: LD_ADDR_VAR 0 10
34506: PUSH
34507: LD_INT 1
34509: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34510: LD_VAR 0 6
34514: PPUSH
34515: CALL_OW 247
34519: PUSH
34520: LD_INT 1
34522: DOUBLE
34523: EQUAL
34524: IFTRUE 34528
34526: GO 35106
34528: POP
// begin if GetClass ( i ) = 1 then
34529: LD_VAR 0 6
34533: PPUSH
34534: CALL_OW 257
34538: PUSH
34539: LD_INT 1
34541: EQUAL
34542: IFFALSE 34563
// points := [ 10 , 5 , 3 ] ;
34544: LD_ADDR_VAR 0 9
34548: PUSH
34549: LD_INT 10
34551: PUSH
34552: LD_INT 5
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34563: LD_VAR 0 6
34567: PPUSH
34568: CALL_OW 257
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: LD_INT 4
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: LIST
34586: IN
34587: IFFALSE 34608
// points := [ 3 , 2 , 1 ] ;
34589: LD_ADDR_VAR 0 9
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: LIST
34607: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34608: LD_VAR 0 6
34612: PPUSH
34613: CALL_OW 257
34617: PUSH
34618: LD_INT 5
34620: EQUAL
34621: IFFALSE 34642
// points := [ 130 , 5 , 2 ] ;
34623: LD_ADDR_VAR 0 9
34627: PUSH
34628: LD_INT 130
34630: PUSH
34631: LD_INT 5
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34642: LD_VAR 0 6
34646: PPUSH
34647: CALL_OW 257
34651: PUSH
34652: LD_INT 8
34654: EQUAL
34655: IFFALSE 34676
// points := [ 35 , 35 , 30 ] ;
34657: LD_ADDR_VAR 0 9
34661: PUSH
34662: LD_INT 35
34664: PUSH
34665: LD_INT 35
34667: PUSH
34668: LD_INT 30
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34676: LD_VAR 0 6
34680: PPUSH
34681: CALL_OW 257
34685: PUSH
34686: LD_INT 9
34688: EQUAL
34689: IFFALSE 34710
// points := [ 20 , 55 , 40 ] ;
34691: LD_ADDR_VAR 0 9
34695: PUSH
34696: LD_INT 20
34698: PUSH
34699: LD_INT 55
34701: PUSH
34702: LD_INT 40
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34710: LD_VAR 0 6
34714: PPUSH
34715: CALL_OW 257
34719: PUSH
34720: LD_INT 12
34722: PUSH
34723: LD_INT 16
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: IN
34730: IFFALSE 34751
// points := [ 5 , 3 , 2 ] ;
34732: LD_ADDR_VAR 0 9
34736: PUSH
34737: LD_INT 5
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34751: LD_VAR 0 6
34755: PPUSH
34756: CALL_OW 257
34760: PUSH
34761: LD_INT 17
34763: EQUAL
34764: IFFALSE 34785
// points := [ 100 , 50 , 75 ] ;
34766: LD_ADDR_VAR 0 9
34770: PUSH
34771: LD_INT 100
34773: PUSH
34774: LD_INT 50
34776: PUSH
34777: LD_INT 75
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34785: LD_VAR 0 6
34789: PPUSH
34790: CALL_OW 257
34794: PUSH
34795: LD_INT 15
34797: EQUAL
34798: IFFALSE 34819
// points := [ 10 , 5 , 3 ] ;
34800: LD_ADDR_VAR 0 9
34804: PUSH
34805: LD_INT 10
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: LD_INT 3
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34819: LD_VAR 0 6
34823: PPUSH
34824: CALL_OW 257
34828: PUSH
34829: LD_INT 14
34831: EQUAL
34832: IFFALSE 34853
// points := [ 10 , 0 , 0 ] ;
34834: LD_ADDR_VAR 0 9
34838: PUSH
34839: LD_INT 10
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34853: LD_VAR 0 6
34857: PPUSH
34858: CALL_OW 257
34862: PUSH
34863: LD_INT 11
34865: EQUAL
34866: IFFALSE 34887
// points := [ 30 , 10 , 5 ] ;
34868: LD_ADDR_VAR 0 9
34872: PUSH
34873: LD_INT 30
34875: PUSH
34876: LD_INT 10
34878: PUSH
34879: LD_INT 5
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34887: LD_VAR 0 1
34891: PPUSH
34892: LD_INT 5
34894: PPUSH
34895: CALL_OW 321
34899: PUSH
34900: LD_INT 2
34902: EQUAL
34903: IFFALSE 34920
// bpoints := bpoints * 1.8 ;
34905: LD_ADDR_VAR 0 10
34909: PUSH
34910: LD_VAR 0 10
34914: PUSH
34915: LD_REAL  1.80000000000000E+0000
34918: MUL
34919: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34920: LD_VAR 0 6
34924: PPUSH
34925: CALL_OW 257
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 4
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: IN
34948: PUSH
34949: LD_VAR 0 1
34953: PPUSH
34954: LD_INT 51
34956: PPUSH
34957: CALL_OW 321
34961: PUSH
34962: LD_INT 2
34964: EQUAL
34965: AND
34966: IFFALSE 34983
// bpoints := bpoints * 1.2 ;
34968: LD_ADDR_VAR 0 10
34972: PUSH
34973: LD_VAR 0 10
34977: PUSH
34978: LD_REAL  1.20000000000000E+0000
34981: MUL
34982: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34983: LD_VAR 0 6
34987: PPUSH
34988: CALL_OW 257
34992: PUSH
34993: LD_INT 5
34995: PUSH
34996: LD_INT 7
34998: PUSH
34999: LD_INT 9
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: LIST
35006: IN
35007: PUSH
35008: LD_VAR 0 1
35012: PPUSH
35013: LD_INT 52
35015: PPUSH
35016: CALL_OW 321
35020: PUSH
35021: LD_INT 2
35023: EQUAL
35024: AND
35025: IFFALSE 35042
// bpoints := bpoints * 1.5 ;
35027: LD_ADDR_VAR 0 10
35031: PUSH
35032: LD_VAR 0 10
35036: PUSH
35037: LD_REAL  1.50000000000000E+0000
35040: MUL
35041: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35042: LD_VAR 0 1
35046: PPUSH
35047: LD_INT 66
35049: PPUSH
35050: CALL_OW 321
35054: PUSH
35055: LD_INT 2
35057: EQUAL
35058: IFFALSE 35075
// bpoints := bpoints * 1.1 ;
35060: LD_ADDR_VAR 0 10
35064: PUSH
35065: LD_VAR 0 10
35069: PUSH
35070: LD_REAL  1.10000000000000E+0000
35073: MUL
35074: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35075: LD_ADDR_VAR 0 10
35079: PUSH
35080: LD_VAR 0 10
35084: PUSH
35085: LD_VAR 0 6
35089: PPUSH
35090: LD_INT 1
35092: PPUSH
35093: CALL_OW 259
35097: PUSH
35098: LD_REAL  1.15000000000000E+0000
35101: MUL
35102: MUL
35103: ST_TO_ADDR
// end ; unit_vehicle :
35104: GO 35932
35106: LD_INT 2
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35114
35112: GO 35920
35114: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35115: LD_VAR 0 6
35119: PPUSH
35120: CALL_OW 264
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: LD_INT 42
35130: PUSH
35131: LD_INT 24
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: IN
35139: IFFALSE 35160
// points := [ 25 , 5 , 3 ] ;
35141: LD_ADDR_VAR 0 9
35145: PUSH
35146: LD_INT 25
35148: PUSH
35149: LD_INT 5
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35160: LD_VAR 0 6
35164: PPUSH
35165: CALL_OW 264
35169: PUSH
35170: LD_INT 4
35172: PUSH
35173: LD_INT 43
35175: PUSH
35176: LD_INT 25
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: IN
35184: IFFALSE 35205
// points := [ 40 , 15 , 5 ] ;
35186: LD_ADDR_VAR 0 9
35190: PUSH
35191: LD_INT 40
35193: PUSH
35194: LD_INT 15
35196: PUSH
35197: LD_INT 5
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL_OW 264
35214: PUSH
35215: LD_INT 3
35217: PUSH
35218: LD_INT 23
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: IN
35225: IFFALSE 35246
// points := [ 7 , 25 , 8 ] ;
35227: LD_ADDR_VAR 0 9
35231: PUSH
35232: LD_INT 7
35234: PUSH
35235: LD_INT 25
35237: PUSH
35238: LD_INT 8
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35246: LD_VAR 0 6
35250: PPUSH
35251: CALL_OW 264
35255: PUSH
35256: LD_INT 5
35258: PUSH
35259: LD_INT 27
35261: PUSH
35262: LD_INT 44
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: IN
35270: IFFALSE 35291
// points := [ 14 , 50 , 16 ] ;
35272: LD_ADDR_VAR 0 9
35276: PUSH
35277: LD_INT 14
35279: PUSH
35280: LD_INT 50
35282: PUSH
35283: LD_INT 16
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35291: LD_VAR 0 6
35295: PPUSH
35296: CALL_OW 264
35300: PUSH
35301: LD_INT 6
35303: PUSH
35304: LD_INT 46
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: IN
35311: IFFALSE 35332
// points := [ 32 , 120 , 70 ] ;
35313: LD_ADDR_VAR 0 9
35317: PUSH
35318: LD_INT 32
35320: PUSH
35321: LD_INT 120
35323: PUSH
35324: LD_INT 70
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35332: LD_VAR 0 6
35336: PPUSH
35337: CALL_OW 264
35341: PUSH
35342: LD_INT 7
35344: PUSH
35345: LD_INT 28
35347: PUSH
35348: LD_INT 45
35350: PUSH
35351: LD_INT 92
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: IN
35360: IFFALSE 35381
// points := [ 35 , 20 , 45 ] ;
35362: LD_ADDR_VAR 0 9
35366: PUSH
35367: LD_INT 35
35369: PUSH
35370: LD_INT 20
35372: PUSH
35373: LD_INT 45
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35381: LD_VAR 0 6
35385: PPUSH
35386: CALL_OW 264
35390: PUSH
35391: LD_INT 47
35393: PUSH
35394: EMPTY
35395: LIST
35396: IN
35397: IFFALSE 35418
// points := [ 67 , 45 , 75 ] ;
35399: LD_ADDR_VAR 0 9
35403: PUSH
35404: LD_INT 67
35406: PUSH
35407: LD_INT 45
35409: PUSH
35410: LD_INT 75
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35418: LD_VAR 0 6
35422: PPUSH
35423: CALL_OW 264
35427: PUSH
35428: LD_INT 26
35430: PUSH
35431: EMPTY
35432: LIST
35433: IN
35434: IFFALSE 35455
// points := [ 120 , 30 , 80 ] ;
35436: LD_ADDR_VAR 0 9
35440: PUSH
35441: LD_INT 120
35443: PUSH
35444: LD_INT 30
35446: PUSH
35447: LD_INT 80
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35455: LD_VAR 0 6
35459: PPUSH
35460: CALL_OW 264
35464: PUSH
35465: LD_INT 22
35467: PUSH
35468: EMPTY
35469: LIST
35470: IN
35471: IFFALSE 35492
// points := [ 40 , 1 , 1 ] ;
35473: LD_ADDR_VAR 0 9
35477: PUSH
35478: LD_INT 40
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35492: LD_VAR 0 6
35496: PPUSH
35497: CALL_OW 264
35501: PUSH
35502: LD_INT 29
35504: PUSH
35505: EMPTY
35506: LIST
35507: IN
35508: IFFALSE 35529
// points := [ 70 , 200 , 400 ] ;
35510: LD_ADDR_VAR 0 9
35514: PUSH
35515: LD_INT 70
35517: PUSH
35518: LD_INT 200
35520: PUSH
35521: LD_INT 400
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35529: LD_VAR 0 6
35533: PPUSH
35534: CALL_OW 264
35538: PUSH
35539: LD_INT 14
35541: PUSH
35542: LD_INT 53
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: IN
35549: IFFALSE 35570
// points := [ 40 , 10 , 20 ] ;
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_INT 40
35558: PUSH
35559: LD_INT 10
35561: PUSH
35562: LD_INT 20
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35570: LD_VAR 0 6
35574: PPUSH
35575: CALL_OW 264
35579: PUSH
35580: LD_INT 9
35582: PUSH
35583: EMPTY
35584: LIST
35585: IN
35586: IFFALSE 35607
// points := [ 5 , 70 , 20 ] ;
35588: LD_ADDR_VAR 0 9
35592: PUSH
35593: LD_INT 5
35595: PUSH
35596: LD_INT 70
35598: PUSH
35599: LD_INT 20
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35607: LD_VAR 0 6
35611: PPUSH
35612: CALL_OW 264
35616: PUSH
35617: LD_INT 10
35619: PUSH
35620: EMPTY
35621: LIST
35622: IN
35623: IFFALSE 35644
// points := [ 35 , 110 , 70 ] ;
35625: LD_ADDR_VAR 0 9
35629: PUSH
35630: LD_INT 35
35632: PUSH
35633: LD_INT 110
35635: PUSH
35636: LD_INT 70
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35644: LD_VAR 0 6
35648: PPUSH
35649: CALL_OW 265
35653: PUSH
35654: LD_INT 25
35656: EQUAL
35657: IFFALSE 35678
// points := [ 80 , 65 , 100 ] ;
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: LD_INT 80
35666: PUSH
35667: LD_INT 65
35669: PUSH
35670: LD_INT 100
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35678: LD_VAR 0 6
35682: PPUSH
35683: CALL_OW 263
35687: PUSH
35688: LD_INT 1
35690: EQUAL
35691: IFFALSE 35726
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35693: LD_ADDR_VAR 0 10
35697: PUSH
35698: LD_VAR 0 10
35702: PUSH
35703: LD_VAR 0 6
35707: PPUSH
35708: CALL_OW 311
35712: PPUSH
35713: LD_INT 3
35715: PPUSH
35716: CALL_OW 259
35720: PUSH
35721: LD_INT 4
35723: MUL
35724: MUL
35725: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35726: LD_VAR 0 6
35730: PPUSH
35731: CALL_OW 263
35735: PUSH
35736: LD_INT 2
35738: EQUAL
35739: IFFALSE 35790
// begin j := IsControledBy ( i ) ;
35741: LD_ADDR_VAR 0 7
35745: PUSH
35746: LD_VAR 0 6
35750: PPUSH
35751: CALL_OW 312
35755: ST_TO_ADDR
// if j then
35756: LD_VAR 0 7
35760: IFFALSE 35790
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35762: LD_ADDR_VAR 0 10
35766: PUSH
35767: LD_VAR 0 10
35771: PUSH
35772: LD_VAR 0 7
35776: PPUSH
35777: LD_INT 3
35779: PPUSH
35780: CALL_OW 259
35784: PUSH
35785: LD_INT 3
35787: MUL
35788: MUL
35789: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35790: LD_VAR 0 6
35794: PPUSH
35795: CALL_OW 264
35799: PUSH
35800: LD_INT 5
35802: PUSH
35803: LD_INT 6
35805: PUSH
35806: LD_INT 46
35808: PUSH
35809: LD_INT 44
35811: PUSH
35812: LD_INT 47
35814: PUSH
35815: LD_INT 45
35817: PUSH
35818: LD_INT 28
35820: PUSH
35821: LD_INT 7
35823: PUSH
35824: LD_INT 27
35826: PUSH
35827: LD_INT 29
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: IN
35842: PUSH
35843: LD_VAR 0 1
35847: PPUSH
35848: LD_INT 52
35850: PPUSH
35851: CALL_OW 321
35855: PUSH
35856: LD_INT 2
35858: EQUAL
35859: AND
35860: IFFALSE 35877
// bpoints := bpoints * 1.2 ;
35862: LD_ADDR_VAR 0 10
35866: PUSH
35867: LD_VAR 0 10
35871: PUSH
35872: LD_REAL  1.20000000000000E+0000
35875: MUL
35876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35877: LD_VAR 0 6
35881: PPUSH
35882: CALL_OW 264
35886: PUSH
35887: LD_INT 6
35889: PUSH
35890: LD_INT 46
35892: PUSH
35893: LD_INT 47
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: IN
35901: IFFALSE 35918
// bpoints := bpoints * 1.2 ;
35903: LD_ADDR_VAR 0 10
35907: PUSH
35908: LD_VAR 0 10
35912: PUSH
35913: LD_REAL  1.20000000000000E+0000
35916: MUL
35917: ST_TO_ADDR
// end ; unit_building :
35918: GO 35932
35920: LD_INT 3
35922: DOUBLE
35923: EQUAL
35924: IFTRUE 35928
35926: GO 35931
35928: POP
// ; end ;
35929: GO 35932
35931: POP
// for j = 1 to 3 do
35932: LD_ADDR_VAR 0 7
35936: PUSH
35937: DOUBLE
35938: LD_INT 1
35940: DEC
35941: ST_TO_ADDR
35942: LD_INT 3
35944: PUSH
35945: FOR_TO
35946: IFFALSE 35999
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35948: LD_ADDR_VAR 0 5
35952: PUSH
35953: LD_VAR 0 5
35957: PPUSH
35958: LD_VAR 0 7
35962: PPUSH
35963: LD_VAR 0 5
35967: PUSH
35968: LD_VAR 0 7
35972: ARRAY
35973: PUSH
35974: LD_VAR 0 9
35978: PUSH
35979: LD_VAR 0 7
35983: ARRAY
35984: PUSH
35985: LD_VAR 0 10
35989: MUL
35990: PLUS
35991: PPUSH
35992: CALL_OW 1
35996: ST_TO_ADDR
35997: GO 35945
35999: POP
36000: POP
// end ;
36001: GO 34480
36003: POP
36004: POP
// result := Replace ( result , 4 , tmp ) ;
36005: LD_ADDR_VAR 0 5
36009: PUSH
36010: LD_VAR 0 5
36014: PPUSH
36015: LD_INT 4
36017: PPUSH
36018: LD_VAR 0 8
36022: PPUSH
36023: CALL_OW 1
36027: ST_TO_ADDR
// end ;
36028: LD_VAR 0 5
36032: RET
// export function DangerAtRange ( unit , range ) ; begin
36033: LD_INT 0
36035: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL_OW 255
36050: PPUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 250
36060: PPUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 251
36070: PPUSH
36071: LD_VAR 0 2
36075: PPUSH
36076: CALL 34332 0 4
36080: ST_TO_ADDR
// end ;
36081: LD_VAR 0 3
36085: RET
// export function DangerInArea ( side , area ) ; begin
36086: LD_INT 0
36088: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_VAR 0 2
36098: PPUSH
36099: LD_INT 81
36101: PUSH
36102: LD_VAR 0 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PPUSH
36111: CALL_OW 70
36115: ST_TO_ADDR
// end ;
36116: LD_VAR 0 3
36120: RET
// export function IsExtension ( b ) ; begin
36121: LD_INT 0
36123: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36124: LD_ADDR_VAR 0 2
36128: PUSH
36129: LD_VAR 0 1
36133: PUSH
36134: LD_INT 23
36136: PUSH
36137: LD_INT 20
36139: PUSH
36140: LD_INT 22
36142: PUSH
36143: LD_INT 17
36145: PUSH
36146: LD_INT 24
36148: PUSH
36149: LD_INT 21
36151: PUSH
36152: LD_INT 19
36154: PUSH
36155: LD_INT 16
36157: PUSH
36158: LD_INT 25
36160: PUSH
36161: LD_INT 18
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: IN
36176: ST_TO_ADDR
// end ;
36177: LD_VAR 0 2
36181: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36182: LD_INT 0
36184: PPUSH
36185: PPUSH
36186: PPUSH
// result := [ ] ;
36187: LD_ADDR_VAR 0 4
36191: PUSH
36192: EMPTY
36193: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36194: LD_ADDR_VAR 0 5
36198: PUSH
36199: LD_VAR 0 2
36203: PPUSH
36204: LD_INT 21
36206: PUSH
36207: LD_INT 3
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PPUSH
36214: CALL_OW 70
36218: ST_TO_ADDR
// if not tmp then
36219: LD_VAR 0 5
36223: NOT
36224: IFFALSE 36228
// exit ;
36226: GO 36292
// if checkLink then
36228: LD_VAR 0 3
36232: IFFALSE 36282
// begin for i in tmp do
36234: LD_ADDR_VAR 0 6
36238: PUSH
36239: LD_VAR 0 5
36243: PUSH
36244: FOR_IN
36245: IFFALSE 36280
// if GetBase ( i ) <> base then
36247: LD_VAR 0 6
36251: PPUSH
36252: CALL_OW 274
36256: PUSH
36257: LD_VAR 0 1
36261: NONEQUAL
36262: IFFALSE 36278
// ComLinkToBase ( base , i ) ;
36264: LD_VAR 0 1
36268: PPUSH
36269: LD_VAR 0 6
36273: PPUSH
36274: CALL_OW 169
36278: GO 36244
36280: POP
36281: POP
// end ; result := tmp ;
36282: LD_ADDR_VAR 0 4
36286: PUSH
36287: LD_VAR 0 5
36291: ST_TO_ADDR
// end ;
36292: LD_VAR 0 4
36296: RET
// export function ComComplete ( units , b ) ; var i ; begin
36297: LD_INT 0
36299: PPUSH
36300: PPUSH
// if not units then
36301: LD_VAR 0 1
36305: NOT
36306: IFFALSE 36310
// exit ;
36308: GO 36400
// for i in units do
36310: LD_ADDR_VAR 0 4
36314: PUSH
36315: LD_VAR 0 1
36319: PUSH
36320: FOR_IN
36321: IFFALSE 36398
// if BuildingStatus ( b ) = bs_build then
36323: LD_VAR 0 2
36327: PPUSH
36328: CALL_OW 461
36332: PUSH
36333: LD_INT 1
36335: EQUAL
36336: IFFALSE 36396
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36338: LD_VAR 0 4
36342: PPUSH
36343: LD_STRING h
36345: PUSH
36346: LD_VAR 0 2
36350: PPUSH
36351: CALL_OW 250
36355: PUSH
36356: LD_VAR 0 2
36360: PPUSH
36361: CALL_OW 251
36365: PUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: PPUSH
36392: CALL_OW 446
36396: GO 36320
36398: POP
36399: POP
// end ;
36400: LD_VAR 0 3
36404: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36413: LD_VAR 0 1
36417: NOT
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: CALL_OW 263
36428: PUSH
36429: LD_INT 2
36431: NONEQUAL
36432: OR
36433: IFFALSE 36437
// exit ;
36435: GO 36753
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36437: LD_ADDR_VAR 0 6
36441: PUSH
36442: LD_INT 22
36444: PUSH
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 255
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: LD_INT 30
36464: PUSH
36465: LD_INT 36
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 34
36474: PUSH
36475: LD_INT 31
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PPUSH
36491: CALL_OW 69
36495: ST_TO_ADDR
// if not tmp then
36496: LD_VAR 0 6
36500: NOT
36501: IFFALSE 36505
// exit ;
36503: GO 36753
// result := [ ] ;
36505: LD_ADDR_VAR 0 2
36509: PUSH
36510: EMPTY
36511: ST_TO_ADDR
// for i in tmp do
36512: LD_ADDR_VAR 0 3
36516: PUSH
36517: LD_VAR 0 6
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36594
// begin t := UnitsInside ( i ) ;
36525: LD_ADDR_VAR 0 4
36529: PUSH
36530: LD_VAR 0 3
36534: PPUSH
36535: CALL_OW 313
36539: ST_TO_ADDR
// if t then
36540: LD_VAR 0 4
36544: IFFALSE 36592
// for j in t do
36546: LD_ADDR_VAR 0 7
36550: PUSH
36551: LD_VAR 0 4
36555: PUSH
36556: FOR_IN
36557: IFFALSE 36590
// result := Replace ( result , result + 1 , j ) ;
36559: LD_ADDR_VAR 0 2
36563: PUSH
36564: LD_VAR 0 2
36568: PPUSH
36569: LD_VAR 0 2
36573: PUSH
36574: LD_INT 1
36576: PLUS
36577: PPUSH
36578: LD_VAR 0 7
36582: PPUSH
36583: CALL_OW 1
36587: ST_TO_ADDR
36588: GO 36556
36590: POP
36591: POP
// end ;
36592: GO 36522
36594: POP
36595: POP
// if not result then
36596: LD_VAR 0 2
36600: NOT
36601: IFFALSE 36605
// exit ;
36603: GO 36753
// mech := result [ 1 ] ;
36605: LD_ADDR_VAR 0 5
36609: PUSH
36610: LD_VAR 0 2
36614: PUSH
36615: LD_INT 1
36617: ARRAY
36618: ST_TO_ADDR
// if result > 1 then
36619: LD_VAR 0 2
36623: PUSH
36624: LD_INT 1
36626: GREATER
36627: IFFALSE 36739
// begin for i = 2 to result do
36629: LD_ADDR_VAR 0 3
36633: PUSH
36634: DOUBLE
36635: LD_INT 2
36637: DEC
36638: ST_TO_ADDR
36639: LD_VAR 0 2
36643: PUSH
36644: FOR_TO
36645: IFFALSE 36737
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36647: LD_ADDR_VAR 0 4
36651: PUSH
36652: LD_VAR 0 2
36656: PUSH
36657: LD_VAR 0 3
36661: ARRAY
36662: PPUSH
36663: LD_INT 3
36665: PPUSH
36666: CALL_OW 259
36670: PUSH
36671: LD_VAR 0 2
36675: PUSH
36676: LD_VAR 0 3
36680: ARRAY
36681: PPUSH
36682: CALL_OW 432
36686: MINUS
36687: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36688: LD_VAR 0 4
36692: PUSH
36693: LD_VAR 0 5
36697: PPUSH
36698: LD_INT 3
36700: PPUSH
36701: CALL_OW 259
36705: PUSH
36706: LD_VAR 0 5
36710: PPUSH
36711: CALL_OW 432
36715: MINUS
36716: GREATEREQUAL
36717: IFFALSE 36735
// mech := result [ i ] ;
36719: LD_ADDR_VAR 0 5
36723: PUSH
36724: LD_VAR 0 2
36728: PUSH
36729: LD_VAR 0 3
36733: ARRAY
36734: ST_TO_ADDR
// end ;
36735: GO 36644
36737: POP
36738: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36739: LD_VAR 0 1
36743: PPUSH
36744: LD_VAR 0 5
36748: PPUSH
36749: CALL_OW 135
// end ;
36753: LD_VAR 0 2
36757: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36758: LD_INT 0
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
36772: PPUSH
// result := [ ] ;
36773: LD_ADDR_VAR 0 7
36777: PUSH
36778: EMPTY
36779: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 266
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: IN
36800: NOT
36801: IFFALSE 36805
// exit ;
36803: GO 38439
// if name then
36805: LD_VAR 0 3
36809: IFFALSE 36825
// SetBName ( base_dep , name ) ;
36811: LD_VAR 0 1
36815: PPUSH
36816: LD_VAR 0 3
36820: PPUSH
36821: CALL_OW 500
// base := GetBase ( base_dep ) ;
36825: LD_ADDR_VAR 0 15
36829: PUSH
36830: LD_VAR 0 1
36834: PPUSH
36835: CALL_OW 274
36839: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36840: LD_ADDR_VAR 0 16
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 255
36854: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36855: LD_ADDR_VAR 0 17
36859: PUSH
36860: LD_VAR 0 1
36864: PPUSH
36865: CALL_OW 248
36869: ST_TO_ADDR
// if sources then
36870: LD_VAR 0 5
36874: IFFALSE 36921
// for i = 1 to 3 do
36876: LD_ADDR_VAR 0 8
36880: PUSH
36881: DOUBLE
36882: LD_INT 1
36884: DEC
36885: ST_TO_ADDR
36886: LD_INT 3
36888: PUSH
36889: FOR_TO
36890: IFFALSE 36919
// AddResourceType ( base , i , sources [ i ] ) ;
36892: LD_VAR 0 15
36896: PPUSH
36897: LD_VAR 0 8
36901: PPUSH
36902: LD_VAR 0 5
36906: PUSH
36907: LD_VAR 0 8
36911: ARRAY
36912: PPUSH
36913: CALL_OW 276
36917: GO 36889
36919: POP
36920: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36921: LD_ADDR_VAR 0 18
36925: PUSH
36926: LD_VAR 0 15
36930: PPUSH
36931: LD_VAR 0 2
36935: PPUSH
36936: LD_INT 1
36938: PPUSH
36939: CALL 36182 0 3
36943: ST_TO_ADDR
// InitHc ;
36944: CALL_OW 19
// InitUc ;
36948: CALL_OW 18
// uc_side := side ;
36952: LD_ADDR_OWVAR 20
36956: PUSH
36957: LD_VAR 0 16
36961: ST_TO_ADDR
// uc_nation := nation ;
36962: LD_ADDR_OWVAR 21
36966: PUSH
36967: LD_VAR 0 17
36971: ST_TO_ADDR
// if buildings then
36972: LD_VAR 0 18
36976: IFFALSE 38298
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36978: LD_ADDR_VAR 0 19
36982: PUSH
36983: LD_VAR 0 18
36987: PPUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 30
36993: PUSH
36994: LD_INT 29
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 30
37003: PUSH
37004: LD_INT 30
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: PPUSH
37016: CALL_OW 72
37020: ST_TO_ADDR
// if tmp then
37021: LD_VAR 0 19
37025: IFFALSE 37073
// for i in tmp do
37027: LD_ADDR_VAR 0 8
37031: PUSH
37032: LD_VAR 0 19
37036: PUSH
37037: FOR_IN
37038: IFFALSE 37071
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37040: LD_VAR 0 8
37044: PPUSH
37045: CALL_OW 250
37049: PPUSH
37050: LD_VAR 0 8
37054: PPUSH
37055: CALL_OW 251
37059: PPUSH
37060: LD_VAR 0 16
37064: PPUSH
37065: CALL_OW 441
37069: GO 37037
37071: POP
37072: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37073: LD_VAR 0 18
37077: PPUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 30
37083: PUSH
37084: LD_INT 32
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 30
37093: PUSH
37094: LD_INT 33
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: PPUSH
37106: CALL_OW 72
37110: IFFALSE 37198
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37112: LD_ADDR_VAR 0 8
37116: PUSH
37117: LD_VAR 0 18
37121: PPUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 30
37127: PUSH
37128: LD_INT 32
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 30
37137: PUSH
37138: LD_INT 33
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: PPUSH
37150: CALL_OW 72
37154: PUSH
37155: FOR_IN
37156: IFFALSE 37196
// begin if not GetBWeapon ( i ) then
37158: LD_VAR 0 8
37162: PPUSH
37163: CALL_OW 269
37167: NOT
37168: IFFALSE 37194
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37170: LD_VAR 0 8
37174: PPUSH
37175: LD_VAR 0 8
37179: PPUSH
37180: LD_VAR 0 2
37184: PPUSH
37185: CALL 38444 0 2
37189: PPUSH
37190: CALL_OW 431
// end ;
37194: GO 37155
37196: POP
37197: POP
// end ; for i = 1 to personel do
37198: LD_ADDR_VAR 0 8
37202: PUSH
37203: DOUBLE
37204: LD_INT 1
37206: DEC
37207: ST_TO_ADDR
37208: LD_VAR 0 6
37212: PUSH
37213: FOR_TO
37214: IFFALSE 38278
// begin if i > 4 then
37216: LD_VAR 0 8
37220: PUSH
37221: LD_INT 4
37223: GREATER
37224: IFFALSE 37228
// break ;
37226: GO 38278
// case i of 1 :
37228: LD_VAR 0 8
37232: PUSH
37233: LD_INT 1
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37241
37239: GO 37321
37241: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37242: LD_ADDR_VAR 0 12
37246: PUSH
37247: LD_VAR 0 18
37251: PPUSH
37252: LD_INT 22
37254: PUSH
37255: LD_VAR 0 16
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 58
37266: PUSH
37267: EMPTY
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 30
37275: PUSH
37276: LD_INT 32
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 4
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 30
37295: PUSH
37296: LD_INT 5
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: PPUSH
37314: CALL_OW 72
37318: ST_TO_ADDR
37319: GO 37543
37321: LD_INT 2
37323: DOUBLE
37324: EQUAL
37325: IFTRUE 37329
37327: GO 37391
37329: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37330: LD_ADDR_VAR 0 12
37334: PUSH
37335: LD_VAR 0 18
37339: PPUSH
37340: LD_INT 22
37342: PUSH
37343: LD_VAR 0 16
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 30
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 30
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PPUSH
37384: CALL_OW 72
37388: ST_TO_ADDR
37389: GO 37543
37391: LD_INT 3
37393: DOUBLE
37394: EQUAL
37395: IFTRUE 37399
37397: GO 37461
37399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37400: LD_ADDR_VAR 0 12
37404: PUSH
37405: LD_VAR 0 18
37409: PPUSH
37410: LD_INT 22
37412: PUSH
37413: LD_VAR 0 16
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 30
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 30
37437: PUSH
37438: LD_INT 3
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PPUSH
37454: CALL_OW 72
37458: ST_TO_ADDR
37459: GO 37543
37461: LD_INT 4
37463: DOUBLE
37464: EQUAL
37465: IFTRUE 37469
37467: GO 37542
37469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37470: LD_ADDR_VAR 0 12
37474: PUSH
37475: LD_VAR 0 18
37479: PPUSH
37480: LD_INT 22
37482: PUSH
37483: LD_VAR 0 16
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 30
37497: PUSH
37498: LD_INT 6
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 30
37507: PUSH
37508: LD_INT 7
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 30
37517: PUSH
37518: LD_INT 8
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PPUSH
37535: CALL_OW 72
37539: ST_TO_ADDR
37540: GO 37543
37542: POP
// if i = 1 then
37543: LD_VAR 0 8
37547: PUSH
37548: LD_INT 1
37550: EQUAL
37551: IFFALSE 37662
// begin tmp := [ ] ;
37553: LD_ADDR_VAR 0 19
37557: PUSH
37558: EMPTY
37559: ST_TO_ADDR
// for j in f do
37560: LD_ADDR_VAR 0 9
37564: PUSH
37565: LD_VAR 0 12
37569: PUSH
37570: FOR_IN
37571: IFFALSE 37644
// if GetBType ( j ) = b_bunker then
37573: LD_VAR 0 9
37577: PPUSH
37578: CALL_OW 266
37582: PUSH
37583: LD_INT 32
37585: EQUAL
37586: IFFALSE 37613
// tmp := Insert ( tmp , 1 , j ) else
37588: LD_ADDR_VAR 0 19
37592: PUSH
37593: LD_VAR 0 19
37597: PPUSH
37598: LD_INT 1
37600: PPUSH
37601: LD_VAR 0 9
37605: PPUSH
37606: CALL_OW 2
37610: ST_TO_ADDR
37611: GO 37642
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37613: LD_ADDR_VAR 0 19
37617: PUSH
37618: LD_VAR 0 19
37622: PPUSH
37623: LD_VAR 0 19
37627: PUSH
37628: LD_INT 1
37630: PLUS
37631: PPUSH
37632: LD_VAR 0 9
37636: PPUSH
37637: CALL_OW 2
37641: ST_TO_ADDR
37642: GO 37570
37644: POP
37645: POP
// if tmp then
37646: LD_VAR 0 19
37650: IFFALSE 37662
// f := tmp ;
37652: LD_ADDR_VAR 0 12
37656: PUSH
37657: LD_VAR 0 19
37661: ST_TO_ADDR
// end ; x := personel [ i ] ;
37662: LD_ADDR_VAR 0 13
37666: PUSH
37667: LD_VAR 0 6
37671: PUSH
37672: LD_VAR 0 8
37676: ARRAY
37677: ST_TO_ADDR
// if x = - 1 then
37678: LD_VAR 0 13
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: EQUAL
37687: IFFALSE 37896
// begin for j in f do
37689: LD_ADDR_VAR 0 9
37693: PUSH
37694: LD_VAR 0 12
37698: PUSH
37699: FOR_IN
37700: IFFALSE 37892
// repeat InitHc ;
37702: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37706: LD_VAR 0 9
37710: PPUSH
37711: CALL_OW 266
37715: PUSH
37716: LD_INT 5
37718: EQUAL
37719: IFFALSE 37789
// begin if UnitsInside ( j ) < 3 then
37721: LD_VAR 0 9
37725: PPUSH
37726: CALL_OW 313
37730: PUSH
37731: LD_INT 3
37733: LESS
37734: IFFALSE 37770
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37736: LD_INT 0
37738: PPUSH
37739: LD_INT 5
37741: PUSH
37742: LD_INT 8
37744: PUSH
37745: LD_INT 9
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: PUSH
37753: LD_VAR 0 17
37757: ARRAY
37758: PPUSH
37759: LD_VAR 0 4
37763: PPUSH
37764: CALL_OW 380
37768: GO 37787
// PrepareHuman ( false , i , skill ) ;
37770: LD_INT 0
37772: PPUSH
37773: LD_VAR 0 8
37777: PPUSH
37778: LD_VAR 0 4
37782: PPUSH
37783: CALL_OW 380
// end else
37787: GO 37806
// PrepareHuman ( false , i , skill ) ;
37789: LD_INT 0
37791: PPUSH
37792: LD_VAR 0 8
37796: PPUSH
37797: LD_VAR 0 4
37801: PPUSH
37802: CALL_OW 380
// un := CreateHuman ;
37806: LD_ADDR_VAR 0 14
37810: PUSH
37811: CALL_OW 44
37815: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37816: LD_ADDR_VAR 0 7
37820: PUSH
37821: LD_VAR 0 7
37825: PPUSH
37826: LD_INT 1
37828: PPUSH
37829: LD_VAR 0 14
37833: PPUSH
37834: CALL_OW 2
37838: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37839: LD_VAR 0 14
37843: PPUSH
37844: LD_VAR 0 9
37848: PPUSH
37849: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37853: LD_VAR 0 9
37857: PPUSH
37858: CALL_OW 313
37862: PUSH
37863: LD_INT 6
37865: EQUAL
37866: PUSH
37867: LD_VAR 0 9
37871: PPUSH
37872: CALL_OW 266
37876: PUSH
37877: LD_INT 32
37879: PUSH
37880: LD_INT 31
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: IN
37887: OR
37888: IFFALSE 37702
37890: GO 37699
37892: POP
37893: POP
// end else
37894: GO 38276
// for j = 1 to x do
37896: LD_ADDR_VAR 0 9
37900: PUSH
37901: DOUBLE
37902: LD_INT 1
37904: DEC
37905: ST_TO_ADDR
37906: LD_VAR 0 13
37910: PUSH
37911: FOR_TO
37912: IFFALSE 38274
// begin InitHc ;
37914: CALL_OW 19
// if not f then
37918: LD_VAR 0 12
37922: NOT
37923: IFFALSE 38012
// begin PrepareHuman ( false , i , skill ) ;
37925: LD_INT 0
37927: PPUSH
37928: LD_VAR 0 8
37932: PPUSH
37933: LD_VAR 0 4
37937: PPUSH
37938: CALL_OW 380
// un := CreateHuman ;
37942: LD_ADDR_VAR 0 14
37946: PUSH
37947: CALL_OW 44
37951: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37952: LD_ADDR_VAR 0 7
37956: PUSH
37957: LD_VAR 0 7
37961: PPUSH
37962: LD_INT 1
37964: PPUSH
37965: LD_VAR 0 14
37969: PPUSH
37970: CALL_OW 2
37974: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37975: LD_VAR 0 14
37979: PPUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 250
37989: PPUSH
37990: LD_VAR 0 1
37994: PPUSH
37995: CALL_OW 251
37999: PPUSH
38000: LD_INT 10
38002: PPUSH
38003: LD_INT 0
38005: PPUSH
38006: CALL_OW 50
// continue ;
38010: GO 37911
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38012: LD_VAR 0 12
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PPUSH
38021: CALL_OW 313
38025: PUSH
38026: LD_VAR 0 12
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: PPUSH
38035: CALL_OW 266
38039: PUSH
38040: LD_INT 32
38042: PUSH
38043: LD_INT 31
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: IN
38050: AND
38051: PUSH
38052: LD_VAR 0 12
38056: PUSH
38057: LD_INT 1
38059: ARRAY
38060: PPUSH
38061: CALL_OW 313
38065: PUSH
38066: LD_INT 6
38068: EQUAL
38069: OR
38070: IFFALSE 38090
// f := Delete ( f , 1 ) ;
38072: LD_ADDR_VAR 0 12
38076: PUSH
38077: LD_VAR 0 12
38081: PPUSH
38082: LD_INT 1
38084: PPUSH
38085: CALL_OW 3
38089: ST_TO_ADDR
// if not f then
38090: LD_VAR 0 12
38094: NOT
38095: IFFALSE 38113
// begin x := x + 2 ;
38097: LD_ADDR_VAR 0 13
38101: PUSH
38102: LD_VAR 0 13
38106: PUSH
38107: LD_INT 2
38109: PLUS
38110: ST_TO_ADDR
// continue ;
38111: GO 37911
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38113: LD_VAR 0 12
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: PPUSH
38122: CALL_OW 266
38126: PUSH
38127: LD_INT 5
38129: EQUAL
38130: IFFALSE 38204
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38132: LD_VAR 0 12
38136: PUSH
38137: LD_INT 1
38139: ARRAY
38140: PPUSH
38141: CALL_OW 313
38145: PUSH
38146: LD_INT 3
38148: LESS
38149: IFFALSE 38185
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38151: LD_INT 0
38153: PPUSH
38154: LD_INT 5
38156: PUSH
38157: LD_INT 8
38159: PUSH
38160: LD_INT 9
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: PUSH
38168: LD_VAR 0 17
38172: ARRAY
38173: PPUSH
38174: LD_VAR 0 4
38178: PPUSH
38179: CALL_OW 380
38183: GO 38202
// PrepareHuman ( false , i , skill ) ;
38185: LD_INT 0
38187: PPUSH
38188: LD_VAR 0 8
38192: PPUSH
38193: LD_VAR 0 4
38197: PPUSH
38198: CALL_OW 380
// end else
38202: GO 38221
// PrepareHuman ( false , i , skill ) ;
38204: LD_INT 0
38206: PPUSH
38207: LD_VAR 0 8
38211: PPUSH
38212: LD_VAR 0 4
38216: PPUSH
38217: CALL_OW 380
// un := CreateHuman ;
38221: LD_ADDR_VAR 0 14
38225: PUSH
38226: CALL_OW 44
38230: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38231: LD_ADDR_VAR 0 7
38235: PUSH
38236: LD_VAR 0 7
38240: PPUSH
38241: LD_INT 1
38243: PPUSH
38244: LD_VAR 0 14
38248: PPUSH
38249: CALL_OW 2
38253: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38254: LD_VAR 0 14
38258: PPUSH
38259: LD_VAR 0 12
38263: PUSH
38264: LD_INT 1
38266: ARRAY
38267: PPUSH
38268: CALL_OW 52
// end ;
38272: GO 37911
38274: POP
38275: POP
// end ;
38276: GO 37213
38278: POP
38279: POP
// result := result ^ buildings ;
38280: LD_ADDR_VAR 0 7
38284: PUSH
38285: LD_VAR 0 7
38289: PUSH
38290: LD_VAR 0 18
38294: ADD
38295: ST_TO_ADDR
// end else
38296: GO 38439
// begin for i = 1 to personel do
38298: LD_ADDR_VAR 0 8
38302: PUSH
38303: DOUBLE
38304: LD_INT 1
38306: DEC
38307: ST_TO_ADDR
38308: LD_VAR 0 6
38312: PUSH
38313: FOR_TO
38314: IFFALSE 38437
// begin if i > 4 then
38316: LD_VAR 0 8
38320: PUSH
38321: LD_INT 4
38323: GREATER
38324: IFFALSE 38328
// break ;
38326: GO 38437
// x := personel [ i ] ;
38328: LD_ADDR_VAR 0 13
38332: PUSH
38333: LD_VAR 0 6
38337: PUSH
38338: LD_VAR 0 8
38342: ARRAY
38343: ST_TO_ADDR
// if x = - 1 then
38344: LD_VAR 0 13
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: EQUAL
38353: IFFALSE 38357
// continue ;
38355: GO 38313
// PrepareHuman ( false , i , skill ) ;
38357: LD_INT 0
38359: PPUSH
38360: LD_VAR 0 8
38364: PPUSH
38365: LD_VAR 0 4
38369: PPUSH
38370: CALL_OW 380
// un := CreateHuman ;
38374: LD_ADDR_VAR 0 14
38378: PUSH
38379: CALL_OW 44
38383: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38384: LD_VAR 0 14
38388: PPUSH
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 250
38398: PPUSH
38399: LD_VAR 0 1
38403: PPUSH
38404: CALL_OW 251
38408: PPUSH
38409: LD_INT 10
38411: PPUSH
38412: LD_INT 0
38414: PPUSH
38415: CALL_OW 50
// result := result ^ un ;
38419: LD_ADDR_VAR 0 7
38423: PUSH
38424: LD_VAR 0 7
38428: PUSH
38429: LD_VAR 0 14
38433: ADD
38434: ST_TO_ADDR
// end ;
38435: GO 38313
38437: POP
38438: POP
// end ; end ;
38439: LD_VAR 0 7
38443: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38444: LD_INT 0
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
// result := false ;
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: LD_INT 0
38469: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38470: LD_VAR 0 1
38474: NOT
38475: PUSH
38476: LD_VAR 0 1
38480: PPUSH
38481: CALL_OW 266
38485: PUSH
38486: LD_INT 32
38488: PUSH
38489: LD_INT 33
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: IN
38496: NOT
38497: OR
38498: IFFALSE 38502
// exit ;
38500: GO 39611
// nat := GetNation ( tower ) ;
38502: LD_ADDR_VAR 0 12
38506: PUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 248
38516: ST_TO_ADDR
// side := GetSide ( tower ) ;
38517: LD_ADDR_VAR 0 16
38521: PUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL_OW 255
38531: ST_TO_ADDR
// x := GetX ( tower ) ;
38532: LD_ADDR_VAR 0 10
38536: PUSH
38537: LD_VAR 0 1
38541: PPUSH
38542: CALL_OW 250
38546: ST_TO_ADDR
// y := GetY ( tower ) ;
38547: LD_ADDR_VAR 0 11
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 251
38561: ST_TO_ADDR
// if not x or not y then
38562: LD_VAR 0 10
38566: NOT
38567: PUSH
38568: LD_VAR 0 11
38572: NOT
38573: OR
38574: IFFALSE 38578
// exit ;
38576: GO 39611
// weapon := 0 ;
38578: LD_ADDR_VAR 0 18
38582: PUSH
38583: LD_INT 0
38585: ST_TO_ADDR
// fac_list := [ ] ;
38586: LD_ADDR_VAR 0 17
38590: PUSH
38591: EMPTY
38592: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38593: LD_ADDR_VAR 0 6
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 274
38607: PPUSH
38608: LD_VAR 0 2
38612: PPUSH
38613: LD_INT 0
38615: PPUSH
38616: CALL 36182 0 3
38620: PPUSH
38621: LD_INT 30
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PPUSH
38631: CALL_OW 72
38635: ST_TO_ADDR
// if not factories then
38636: LD_VAR 0 6
38640: NOT
38641: IFFALSE 38645
// exit ;
38643: GO 39611
// for i in factories do
38645: LD_ADDR_VAR 0 8
38649: PUSH
38650: LD_VAR 0 6
38654: PUSH
38655: FOR_IN
38656: IFFALSE 38681
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38658: LD_ADDR_VAR 0 17
38662: PUSH
38663: LD_VAR 0 17
38667: PUSH
38668: LD_VAR 0 8
38672: PPUSH
38673: CALL_OW 478
38677: UNION
38678: ST_TO_ADDR
38679: GO 38655
38681: POP
38682: POP
// if not fac_list then
38683: LD_VAR 0 17
38687: NOT
38688: IFFALSE 38692
// exit ;
38690: GO 39611
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38692: LD_ADDR_VAR 0 5
38696: PUSH
38697: LD_INT 4
38699: PUSH
38700: LD_INT 5
38702: PUSH
38703: LD_INT 9
38705: PUSH
38706: LD_INT 10
38708: PUSH
38709: LD_INT 6
38711: PUSH
38712: LD_INT 7
38714: PUSH
38715: LD_INT 11
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 27
38729: PUSH
38730: LD_INT 28
38732: PUSH
38733: LD_INT 26
38735: PUSH
38736: LD_INT 30
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 43
38747: PUSH
38748: LD_INT 44
38750: PUSH
38751: LD_INT 46
38753: PUSH
38754: LD_INT 45
38756: PUSH
38757: LD_INT 47
38759: PUSH
38760: LD_INT 49
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: LIST
38775: PUSH
38776: LD_VAR 0 12
38780: ARRAY
38781: ST_TO_ADDR
// list := list isect fac_list ;
38782: LD_ADDR_VAR 0 5
38786: PUSH
38787: LD_VAR 0 5
38791: PUSH
38792: LD_VAR 0 17
38796: ISECT
38797: ST_TO_ADDR
// if not list then
38798: LD_VAR 0 5
38802: NOT
38803: IFFALSE 38807
// exit ;
38805: GO 39611
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38807: LD_VAR 0 12
38811: PUSH
38812: LD_INT 3
38814: EQUAL
38815: PUSH
38816: LD_INT 49
38818: PUSH
38819: LD_VAR 0 5
38823: IN
38824: AND
38825: PUSH
38826: LD_INT 31
38828: PPUSH
38829: LD_VAR 0 16
38833: PPUSH
38834: CALL_OW 321
38838: PUSH
38839: LD_INT 2
38841: EQUAL
38842: AND
38843: IFFALSE 38903
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38845: LD_INT 22
38847: PUSH
38848: LD_VAR 0 16
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 35
38859: PUSH
38860: LD_INT 49
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 91
38869: PUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_INT 10
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: PPUSH
38888: CALL_OW 69
38892: NOT
38893: IFFALSE 38903
// weapon := ru_time_lapser ;
38895: LD_ADDR_VAR 0 18
38899: PUSH
38900: LD_INT 49
38902: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38903: LD_VAR 0 12
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: IN
38918: PUSH
38919: LD_INT 11
38921: PUSH
38922: LD_VAR 0 5
38926: IN
38927: PUSH
38928: LD_INT 30
38930: PUSH
38931: LD_VAR 0 5
38935: IN
38936: OR
38937: AND
38938: PUSH
38939: LD_INT 6
38941: PPUSH
38942: LD_VAR 0 16
38946: PPUSH
38947: CALL_OW 321
38951: PUSH
38952: LD_INT 2
38954: EQUAL
38955: AND
38956: IFFALSE 39121
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38958: LD_INT 22
38960: PUSH
38961: LD_VAR 0 16
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 35
38975: PUSH
38976: LD_INT 11
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 35
38985: PUSH
38986: LD_INT 30
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 91
39000: PUSH
39001: LD_VAR 0 1
39005: PUSH
39006: LD_INT 18
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL_OW 69
39023: NOT
39024: PUSH
39025: LD_INT 22
39027: PUSH
39028: LD_VAR 0 16
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 30
39042: PUSH
39043: LD_INT 32
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 30
39052: PUSH
39053: LD_INT 33
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 91
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 12
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: PPUSH
39089: CALL_OW 69
39093: PUSH
39094: LD_INT 2
39096: GREATER
39097: AND
39098: IFFALSE 39121
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39100: LD_ADDR_VAR 0 18
39104: PUSH
39105: LD_INT 11
39107: PUSH
39108: LD_INT 30
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_VAR 0 12
39119: ARRAY
39120: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39121: LD_VAR 0 18
39125: NOT
39126: PUSH
39127: LD_INT 40
39129: PPUSH
39130: LD_VAR 0 16
39134: PPUSH
39135: CALL_OW 321
39139: PUSH
39140: LD_INT 2
39142: EQUAL
39143: AND
39144: PUSH
39145: LD_INT 7
39147: PUSH
39148: LD_VAR 0 5
39152: IN
39153: PUSH
39154: LD_INT 28
39156: PUSH
39157: LD_VAR 0 5
39161: IN
39162: OR
39163: PUSH
39164: LD_INT 45
39166: PUSH
39167: LD_VAR 0 5
39171: IN
39172: OR
39173: AND
39174: IFFALSE 39428
// begin hex := GetHexInfo ( x , y ) ;
39176: LD_ADDR_VAR 0 4
39180: PUSH
39181: LD_VAR 0 10
39185: PPUSH
39186: LD_VAR 0 11
39190: PPUSH
39191: CALL_OW 546
39195: ST_TO_ADDR
// if hex [ 1 ] then
39196: LD_VAR 0 4
39200: PUSH
39201: LD_INT 1
39203: ARRAY
39204: IFFALSE 39208
// exit ;
39206: GO 39611
// height := hex [ 2 ] ;
39208: LD_ADDR_VAR 0 15
39212: PUSH
39213: LD_VAR 0 4
39217: PUSH
39218: LD_INT 2
39220: ARRAY
39221: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39222: LD_ADDR_VAR 0 14
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: LD_INT 5
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// for i in tmp do
39245: LD_ADDR_VAR 0 8
39249: PUSH
39250: LD_VAR 0 14
39254: PUSH
39255: FOR_IN
39256: IFFALSE 39426
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39258: LD_ADDR_VAR 0 9
39262: PUSH
39263: LD_VAR 0 10
39267: PPUSH
39268: LD_VAR 0 8
39272: PPUSH
39273: LD_INT 5
39275: PPUSH
39276: CALL_OW 272
39280: PUSH
39281: LD_VAR 0 11
39285: PPUSH
39286: LD_VAR 0 8
39290: PPUSH
39291: LD_INT 5
39293: PPUSH
39294: CALL_OW 273
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39303: LD_VAR 0 9
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PPUSH
39312: LD_VAR 0 9
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: PPUSH
39321: CALL_OW 488
39325: IFFALSE 39424
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39327: LD_ADDR_VAR 0 4
39331: PUSH
39332: LD_VAR 0 9
39336: PUSH
39337: LD_INT 1
39339: ARRAY
39340: PPUSH
39341: LD_VAR 0 9
39345: PUSH
39346: LD_INT 2
39348: ARRAY
39349: PPUSH
39350: CALL_OW 546
39354: ST_TO_ADDR
// if hex [ 1 ] then
39355: LD_VAR 0 4
39359: PUSH
39360: LD_INT 1
39362: ARRAY
39363: IFFALSE 39367
// continue ;
39365: GO 39255
// h := hex [ 2 ] ;
39367: LD_ADDR_VAR 0 13
39371: PUSH
39372: LD_VAR 0 4
39376: PUSH
39377: LD_INT 2
39379: ARRAY
39380: ST_TO_ADDR
// if h + 7 < height then
39381: LD_VAR 0 13
39385: PUSH
39386: LD_INT 7
39388: PLUS
39389: PUSH
39390: LD_VAR 0 15
39394: LESS
39395: IFFALSE 39424
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39397: LD_ADDR_VAR 0 18
39401: PUSH
39402: LD_INT 7
39404: PUSH
39405: LD_INT 28
39407: PUSH
39408: LD_INT 45
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: PUSH
39416: LD_VAR 0 12
39420: ARRAY
39421: ST_TO_ADDR
// break ;
39422: GO 39426
// end ; end ; end ;
39424: GO 39255
39426: POP
39427: POP
// end ; if not weapon then
39428: LD_VAR 0 18
39432: NOT
39433: IFFALSE 39493
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39435: LD_ADDR_VAR 0 5
39439: PUSH
39440: LD_VAR 0 5
39444: PUSH
39445: LD_INT 11
39447: PUSH
39448: LD_INT 30
39450: PUSH
39451: LD_INT 49
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: DIFF
39459: ST_TO_ADDR
// if not list then
39460: LD_VAR 0 5
39464: NOT
39465: IFFALSE 39469
// exit ;
39467: GO 39611
// weapon := list [ rand ( 1 , list ) ] ;
39469: LD_ADDR_VAR 0 18
39473: PUSH
39474: LD_VAR 0 5
39478: PUSH
39479: LD_INT 1
39481: PPUSH
39482: LD_VAR 0 5
39486: PPUSH
39487: CALL_OW 12
39491: ARRAY
39492: ST_TO_ADDR
// end ; if weapon then
39493: LD_VAR 0 18
39497: IFFALSE 39611
// begin tmp := CostOfWeapon ( weapon ) ;
39499: LD_ADDR_VAR 0 14
39503: PUSH
39504: LD_VAR 0 18
39508: PPUSH
39509: CALL_OW 451
39513: ST_TO_ADDR
// j := GetBase ( tower ) ;
39514: LD_ADDR_VAR 0 9
39518: PUSH
39519: LD_VAR 0 1
39523: PPUSH
39524: CALL_OW 274
39528: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39529: LD_VAR 0 9
39533: PPUSH
39534: LD_INT 1
39536: PPUSH
39537: CALL_OW 275
39541: PUSH
39542: LD_VAR 0 14
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: GREATEREQUAL
39551: PUSH
39552: LD_VAR 0 9
39556: PPUSH
39557: LD_INT 2
39559: PPUSH
39560: CALL_OW 275
39564: PUSH
39565: LD_VAR 0 14
39569: PUSH
39570: LD_INT 2
39572: ARRAY
39573: GREATEREQUAL
39574: AND
39575: PUSH
39576: LD_VAR 0 9
39580: PPUSH
39581: LD_INT 3
39583: PPUSH
39584: CALL_OW 275
39588: PUSH
39589: LD_VAR 0 14
39593: PUSH
39594: LD_INT 3
39596: ARRAY
39597: GREATEREQUAL
39598: AND
39599: IFFALSE 39611
// result := weapon ;
39601: LD_ADDR_VAR 0 3
39605: PUSH
39606: LD_VAR 0 18
39610: ST_TO_ADDR
// end ; end ;
39611: LD_VAR 0 3
39615: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
// result := true ;
39620: LD_ADDR_VAR 0 3
39624: PUSH
39625: LD_INT 1
39627: ST_TO_ADDR
// if array1 = array2 then
39628: LD_VAR 0 1
39632: PUSH
39633: LD_VAR 0 2
39637: EQUAL
39638: IFFALSE 39698
// begin for i = 1 to array1 do
39640: LD_ADDR_VAR 0 4
39644: PUSH
39645: DOUBLE
39646: LD_INT 1
39648: DEC
39649: ST_TO_ADDR
39650: LD_VAR 0 1
39654: PUSH
39655: FOR_TO
39656: IFFALSE 39694
// if array1 [ i ] <> array2 [ i ] then
39658: LD_VAR 0 1
39662: PUSH
39663: LD_VAR 0 4
39667: ARRAY
39668: PUSH
39669: LD_VAR 0 2
39673: PUSH
39674: LD_VAR 0 4
39678: ARRAY
39679: NONEQUAL
39680: IFFALSE 39692
// begin result := false ;
39682: LD_ADDR_VAR 0 3
39686: PUSH
39687: LD_INT 0
39689: ST_TO_ADDR
// break ;
39690: GO 39694
// end ;
39692: GO 39655
39694: POP
39695: POP
// end else
39696: GO 39706
// result := false ;
39698: LD_ADDR_VAR 0 3
39702: PUSH
39703: LD_INT 0
39705: ST_TO_ADDR
// end ;
39706: LD_VAR 0 3
39710: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39711: LD_INT 0
39713: PPUSH
39714: PPUSH
// if not array1 or not array2 then
39715: LD_VAR 0 1
39719: NOT
39720: PUSH
39721: LD_VAR 0 2
39725: NOT
39726: OR
39727: IFFALSE 39731
// exit ;
39729: GO 39795
// result := true ;
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_INT 1
39738: ST_TO_ADDR
// for i = 1 to array1 do
39739: LD_ADDR_VAR 0 4
39743: PUSH
39744: DOUBLE
39745: LD_INT 1
39747: DEC
39748: ST_TO_ADDR
39749: LD_VAR 0 1
39753: PUSH
39754: FOR_TO
39755: IFFALSE 39793
// if array1 [ i ] <> array2 [ i ] then
39757: LD_VAR 0 1
39761: PUSH
39762: LD_VAR 0 4
39766: ARRAY
39767: PUSH
39768: LD_VAR 0 2
39772: PUSH
39773: LD_VAR 0 4
39777: ARRAY
39778: NONEQUAL
39779: IFFALSE 39791
// begin result := false ;
39781: LD_ADDR_VAR 0 3
39785: PUSH
39786: LD_INT 0
39788: ST_TO_ADDR
// break ;
39789: GO 39793
// end ;
39791: GO 39754
39793: POP
39794: POP
// end ;
39795: LD_VAR 0 3
39799: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39800: LD_INT 0
39802: PPUSH
39803: PPUSH
39804: PPUSH
// pom := GetBase ( fac ) ;
39805: LD_ADDR_VAR 0 5
39809: PUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 274
39819: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: LD_VAR 0 2
39829: PUSH
39830: LD_INT 1
39832: ARRAY
39833: PPUSH
39834: LD_VAR 0 2
39838: PUSH
39839: LD_INT 2
39841: ARRAY
39842: PPUSH
39843: LD_VAR 0 2
39847: PUSH
39848: LD_INT 3
39850: ARRAY
39851: PPUSH
39852: LD_VAR 0 2
39856: PUSH
39857: LD_INT 4
39859: ARRAY
39860: PPUSH
39861: CALL_OW 449
39865: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39866: LD_ADDR_VAR 0 3
39870: PUSH
39871: LD_VAR 0 5
39875: PPUSH
39876: LD_INT 1
39878: PPUSH
39879: CALL_OW 275
39883: PUSH
39884: LD_VAR 0 4
39888: PUSH
39889: LD_INT 1
39891: ARRAY
39892: GREATEREQUAL
39893: PUSH
39894: LD_VAR 0 5
39898: PPUSH
39899: LD_INT 2
39901: PPUSH
39902: CALL_OW 275
39906: PUSH
39907: LD_VAR 0 4
39911: PUSH
39912: LD_INT 2
39914: ARRAY
39915: GREATEREQUAL
39916: AND
39917: PUSH
39918: LD_VAR 0 5
39922: PPUSH
39923: LD_INT 3
39925: PPUSH
39926: CALL_OW 275
39930: PUSH
39931: LD_VAR 0 4
39935: PUSH
39936: LD_INT 3
39938: ARRAY
39939: GREATEREQUAL
39940: AND
39941: ST_TO_ADDR
// end ;
39942: LD_VAR 0 3
39946: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39947: LD_INT 0
39949: PPUSH
39950: PPUSH
39951: PPUSH
39952: PPUSH
// pom := GetBase ( building ) ;
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_VAR 0 1
39962: PPUSH
39963: CALL_OW 274
39967: ST_TO_ADDR
// if not pom then
39968: LD_VAR 0 3
39972: NOT
39973: IFFALSE 39977
// exit ;
39975: GO 40147
// btype := GetBType ( building ) ;
39977: LD_ADDR_VAR 0 5
39981: PUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL_OW 266
39991: ST_TO_ADDR
// if btype = b_armoury then
39992: LD_VAR 0 5
39996: PUSH
39997: LD_INT 4
39999: EQUAL
40000: IFFALSE 40010
// btype := b_barracks ;
40002: LD_ADDR_VAR 0 5
40006: PUSH
40007: LD_INT 5
40009: ST_TO_ADDR
// if btype = b_depot then
40010: LD_VAR 0 5
40014: PUSH
40015: LD_INT 0
40017: EQUAL
40018: IFFALSE 40028
// btype := b_warehouse ;
40020: LD_ADDR_VAR 0 5
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// if btype = b_workshop then
40028: LD_VAR 0 5
40032: PUSH
40033: LD_INT 2
40035: EQUAL
40036: IFFALSE 40046
// btype := b_factory ;
40038: LD_ADDR_VAR 0 5
40042: PUSH
40043: LD_INT 3
40045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40046: LD_ADDR_VAR 0 4
40050: PUSH
40051: LD_VAR 0 5
40055: PPUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: CALL_OW 248
40065: PPUSH
40066: CALL_OW 450
40070: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40071: LD_ADDR_VAR 0 2
40075: PUSH
40076: LD_VAR 0 3
40080: PPUSH
40081: LD_INT 1
40083: PPUSH
40084: CALL_OW 275
40088: PUSH
40089: LD_VAR 0 4
40093: PUSH
40094: LD_INT 1
40096: ARRAY
40097: GREATEREQUAL
40098: PUSH
40099: LD_VAR 0 3
40103: PPUSH
40104: LD_INT 2
40106: PPUSH
40107: CALL_OW 275
40111: PUSH
40112: LD_VAR 0 4
40116: PUSH
40117: LD_INT 2
40119: ARRAY
40120: GREATEREQUAL
40121: AND
40122: PUSH
40123: LD_VAR 0 3
40127: PPUSH
40128: LD_INT 3
40130: PPUSH
40131: CALL_OW 275
40135: PUSH
40136: LD_VAR 0 4
40140: PUSH
40141: LD_INT 3
40143: ARRAY
40144: GREATEREQUAL
40145: AND
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 2
40151: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
// pom := GetBase ( building ) ;
40157: LD_ADDR_VAR 0 4
40161: PUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 274
40171: ST_TO_ADDR
// if not pom then
40172: LD_VAR 0 4
40176: NOT
40177: IFFALSE 40181
// exit ;
40179: GO 40282
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40181: LD_ADDR_VAR 0 5
40185: PUSH
40186: LD_VAR 0 2
40190: PPUSH
40191: LD_VAR 0 1
40195: PPUSH
40196: CALL_OW 248
40200: PPUSH
40201: CALL_OW 450
40205: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_VAR 0 4
40215: PPUSH
40216: LD_INT 1
40218: PPUSH
40219: CALL_OW 275
40223: PUSH
40224: LD_VAR 0 5
40228: PUSH
40229: LD_INT 1
40231: ARRAY
40232: GREATEREQUAL
40233: PUSH
40234: LD_VAR 0 4
40238: PPUSH
40239: LD_INT 2
40241: PPUSH
40242: CALL_OW 275
40246: PUSH
40247: LD_VAR 0 5
40251: PUSH
40252: LD_INT 2
40254: ARRAY
40255: GREATEREQUAL
40256: AND
40257: PUSH
40258: LD_VAR 0 4
40262: PPUSH
40263: LD_INT 3
40265: PPUSH
40266: CALL_OW 275
40270: PUSH
40271: LD_VAR 0 5
40275: PUSH
40276: LD_INT 3
40278: ARRAY
40279: GREATEREQUAL
40280: AND
40281: ST_TO_ADDR
// end ;
40282: LD_VAR 0 3
40286: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40287: LD_INT 0
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
// result := false ;
40300: LD_ADDR_VAR 0 8
40304: PUSH
40305: LD_INT 0
40307: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40308: LD_VAR 0 5
40312: NOT
40313: PUSH
40314: LD_VAR 0 1
40318: NOT
40319: OR
40320: PUSH
40321: LD_VAR 0 2
40325: NOT
40326: OR
40327: PUSH
40328: LD_VAR 0 3
40332: NOT
40333: OR
40334: IFFALSE 40338
// exit ;
40336: GO 41152
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40338: LD_ADDR_VAR 0 14
40342: PUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: LD_VAR 0 2
40352: PPUSH
40353: LD_VAR 0 3
40357: PPUSH
40358: LD_VAR 0 4
40362: PPUSH
40363: LD_VAR 0 5
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PPUSH
40372: CALL_OW 248
40376: PPUSH
40377: LD_INT 0
40379: PPUSH
40380: CALL 42385 0 6
40384: ST_TO_ADDR
// if not hexes then
40385: LD_VAR 0 14
40389: NOT
40390: IFFALSE 40394
// exit ;
40392: GO 41152
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40394: LD_ADDR_VAR 0 17
40398: PUSH
40399: LD_VAR 0 5
40403: PPUSH
40404: LD_INT 22
40406: PUSH
40407: LD_VAR 0 13
40411: PPUSH
40412: CALL_OW 255
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 30
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 30
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PPUSH
40453: CALL_OW 72
40457: ST_TO_ADDR
// for i = 1 to hexes do
40458: LD_ADDR_VAR 0 9
40462: PUSH
40463: DOUBLE
40464: LD_INT 1
40466: DEC
40467: ST_TO_ADDR
40468: LD_VAR 0 14
40472: PUSH
40473: FOR_TO
40474: IFFALSE 41150
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40476: LD_ADDR_VAR 0 13
40480: PUSH
40481: LD_VAR 0 14
40485: PUSH
40486: LD_VAR 0 9
40490: ARRAY
40491: PUSH
40492: LD_INT 1
40494: ARRAY
40495: PPUSH
40496: LD_VAR 0 14
40500: PUSH
40501: LD_VAR 0 9
40505: ARRAY
40506: PUSH
40507: LD_INT 2
40509: ARRAY
40510: PPUSH
40511: CALL_OW 428
40515: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40516: LD_VAR 0 14
40520: PUSH
40521: LD_VAR 0 9
40525: ARRAY
40526: PUSH
40527: LD_INT 1
40529: ARRAY
40530: PPUSH
40531: LD_VAR 0 14
40535: PUSH
40536: LD_VAR 0 9
40540: ARRAY
40541: PUSH
40542: LD_INT 2
40544: ARRAY
40545: PPUSH
40546: CALL_OW 351
40550: PUSH
40551: LD_VAR 0 14
40555: PUSH
40556: LD_VAR 0 9
40560: ARRAY
40561: PUSH
40562: LD_INT 1
40564: ARRAY
40565: PPUSH
40566: LD_VAR 0 14
40570: PUSH
40571: LD_VAR 0 9
40575: ARRAY
40576: PUSH
40577: LD_INT 2
40579: ARRAY
40580: PPUSH
40581: CALL_OW 488
40585: NOT
40586: OR
40587: PUSH
40588: LD_VAR 0 13
40592: PPUSH
40593: CALL_OW 247
40597: PUSH
40598: LD_INT 3
40600: EQUAL
40601: OR
40602: IFFALSE 40608
// exit ;
40604: POP
40605: POP
40606: GO 41152
// if not tmp then
40608: LD_VAR 0 13
40612: NOT
40613: IFFALSE 40617
// continue ;
40615: GO 40473
// result := true ;
40617: LD_ADDR_VAR 0 8
40621: PUSH
40622: LD_INT 1
40624: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40625: LD_VAR 0 6
40629: PUSH
40630: LD_VAR 0 13
40634: PPUSH
40635: CALL_OW 247
40639: PUSH
40640: LD_INT 2
40642: EQUAL
40643: AND
40644: PUSH
40645: LD_VAR 0 13
40649: PPUSH
40650: CALL_OW 263
40654: PUSH
40655: LD_INT 1
40657: EQUAL
40658: AND
40659: IFFALSE 40823
// begin if IsDrivenBy ( tmp ) then
40661: LD_VAR 0 13
40665: PPUSH
40666: CALL_OW 311
40670: IFFALSE 40674
// continue ;
40672: GO 40473
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40674: LD_VAR 0 6
40678: PPUSH
40679: LD_INT 3
40681: PUSH
40682: LD_INT 60
40684: PUSH
40685: EMPTY
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: LD_INT 55
40697: PUSH
40698: EMPTY
40699: LIST
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PPUSH
40709: CALL_OW 72
40713: IFFALSE 40821
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40715: LD_ADDR_VAR 0 18
40719: PUSH
40720: LD_VAR 0 6
40724: PPUSH
40725: LD_INT 3
40727: PUSH
40728: LD_INT 60
40730: PUSH
40731: EMPTY
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 3
40740: PUSH
40741: LD_INT 55
40743: PUSH
40744: EMPTY
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PPUSH
40755: CALL_OW 72
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: ST_TO_ADDR
// if IsInUnit ( driver ) then
40764: LD_VAR 0 18
40768: PPUSH
40769: CALL_OW 310
40773: IFFALSE 40784
// ComExit ( driver ) ;
40775: LD_VAR 0 18
40779: PPUSH
40780: CALL 66146 0 1
// AddComEnterUnit ( driver , tmp ) ;
40784: LD_VAR 0 18
40788: PPUSH
40789: LD_VAR 0 13
40793: PPUSH
40794: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40798: LD_VAR 0 18
40802: PPUSH
40803: LD_VAR 0 7
40807: PPUSH
40808: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40812: LD_VAR 0 18
40816: PPUSH
40817: CALL_OW 181
// end ; continue ;
40821: GO 40473
// end ; if not cleaners or not tmp in cleaners then
40823: LD_VAR 0 6
40827: NOT
40828: PUSH
40829: LD_VAR 0 13
40833: PUSH
40834: LD_VAR 0 6
40838: IN
40839: NOT
40840: OR
40841: IFFALSE 41148
// begin if dep then
40843: LD_VAR 0 17
40847: IFFALSE 40983
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40849: LD_ADDR_VAR 0 16
40853: PUSH
40854: LD_VAR 0 17
40858: PUSH
40859: LD_INT 1
40861: ARRAY
40862: PPUSH
40863: CALL_OW 250
40867: PPUSH
40868: LD_VAR 0 17
40872: PUSH
40873: LD_INT 1
40875: ARRAY
40876: PPUSH
40877: CALL_OW 254
40881: PPUSH
40882: LD_INT 5
40884: PPUSH
40885: CALL_OW 272
40889: PUSH
40890: LD_VAR 0 17
40894: PUSH
40895: LD_INT 1
40897: ARRAY
40898: PPUSH
40899: CALL_OW 251
40903: PPUSH
40904: LD_VAR 0 17
40908: PUSH
40909: LD_INT 1
40911: ARRAY
40912: PPUSH
40913: CALL_OW 254
40917: PPUSH
40918: LD_INT 5
40920: PPUSH
40921: CALL_OW 273
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40930: LD_VAR 0 16
40934: PUSH
40935: LD_INT 1
40937: ARRAY
40938: PPUSH
40939: LD_VAR 0 16
40943: PUSH
40944: LD_INT 2
40946: ARRAY
40947: PPUSH
40948: CALL_OW 488
40952: IFFALSE 40983
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40954: LD_VAR 0 13
40958: PPUSH
40959: LD_VAR 0 16
40963: PUSH
40964: LD_INT 1
40966: ARRAY
40967: PPUSH
40968: LD_VAR 0 16
40972: PUSH
40973: LD_INT 2
40975: ARRAY
40976: PPUSH
40977: CALL_OW 111
// continue ;
40981: GO 40473
// end ; end ; r := GetDir ( tmp ) ;
40983: LD_ADDR_VAR 0 15
40987: PUSH
40988: LD_VAR 0 13
40992: PPUSH
40993: CALL_OW 254
40997: ST_TO_ADDR
// if r = 5 then
40998: LD_VAR 0 15
41002: PUSH
41003: LD_INT 5
41005: EQUAL
41006: IFFALSE 41016
// r := 0 ;
41008: LD_ADDR_VAR 0 15
41012: PUSH
41013: LD_INT 0
41015: ST_TO_ADDR
// for j = r to 5 do
41016: LD_ADDR_VAR 0 10
41020: PUSH
41021: DOUBLE
41022: LD_VAR 0 15
41026: DEC
41027: ST_TO_ADDR
41028: LD_INT 5
41030: PUSH
41031: FOR_TO
41032: IFFALSE 41146
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41034: LD_ADDR_VAR 0 11
41038: PUSH
41039: LD_VAR 0 13
41043: PPUSH
41044: CALL_OW 250
41048: PPUSH
41049: LD_VAR 0 10
41053: PPUSH
41054: LD_INT 2
41056: PPUSH
41057: CALL_OW 272
41061: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41062: LD_ADDR_VAR 0 12
41066: PUSH
41067: LD_VAR 0 13
41071: PPUSH
41072: CALL_OW 251
41076: PPUSH
41077: LD_VAR 0 10
41081: PPUSH
41082: LD_INT 2
41084: PPUSH
41085: CALL_OW 273
41089: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41090: LD_VAR 0 11
41094: PPUSH
41095: LD_VAR 0 12
41099: PPUSH
41100: CALL_OW 488
41104: PUSH
41105: LD_VAR 0 11
41109: PPUSH
41110: LD_VAR 0 12
41114: PPUSH
41115: CALL_OW 428
41119: NOT
41120: AND
41121: IFFALSE 41144
// begin ComMoveXY ( tmp , _x , _y ) ;
41123: LD_VAR 0 13
41127: PPUSH
41128: LD_VAR 0 11
41132: PPUSH
41133: LD_VAR 0 12
41137: PPUSH
41138: CALL_OW 111
// break ;
41142: GO 41146
// end ; end ;
41144: GO 41031
41146: POP
41147: POP
// end ; end ;
41148: GO 40473
41150: POP
41151: POP
// end ;
41152: LD_VAR 0 8
41156: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41157: LD_INT 0
41159: PPUSH
// result := true ;
41160: LD_ADDR_VAR 0 3
41164: PUSH
41165: LD_INT 1
41167: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41168: LD_VAR 0 2
41172: PUSH
41173: LD_INT 24
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41187
41179: LD_INT 33
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41187
41185: GO 41212
41187: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41188: LD_ADDR_VAR 0 3
41192: PUSH
41193: LD_INT 32
41195: PPUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 321
41205: PUSH
41206: LD_INT 2
41208: EQUAL
41209: ST_TO_ADDR
41210: GO 41528
41212: LD_INT 20
41214: DOUBLE
41215: EQUAL
41216: IFTRUE 41220
41218: GO 41245
41220: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_INT 6
41228: PPUSH
41229: LD_VAR 0 1
41233: PPUSH
41234: CALL_OW 321
41238: PUSH
41239: LD_INT 2
41241: EQUAL
41242: ST_TO_ADDR
41243: GO 41528
41245: LD_INT 22
41247: DOUBLE
41248: EQUAL
41249: IFTRUE 41259
41251: LD_INT 36
41253: DOUBLE
41254: EQUAL
41255: IFTRUE 41259
41257: GO 41284
41259: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41260: LD_ADDR_VAR 0 3
41264: PUSH
41265: LD_INT 15
41267: PPUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 321
41277: PUSH
41278: LD_INT 2
41280: EQUAL
41281: ST_TO_ADDR
41282: GO 41528
41284: LD_INT 30
41286: DOUBLE
41287: EQUAL
41288: IFTRUE 41292
41290: GO 41317
41292: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41293: LD_ADDR_VAR 0 3
41297: PUSH
41298: LD_INT 20
41300: PPUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 321
41310: PUSH
41311: LD_INT 2
41313: EQUAL
41314: ST_TO_ADDR
41315: GO 41528
41317: LD_INT 28
41319: DOUBLE
41320: EQUAL
41321: IFTRUE 41331
41323: LD_INT 21
41325: DOUBLE
41326: EQUAL
41327: IFTRUE 41331
41329: GO 41356
41331: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_INT 21
41339: PPUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 321
41349: PUSH
41350: LD_INT 2
41352: EQUAL
41353: ST_TO_ADDR
41354: GO 41528
41356: LD_INT 16
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41389
41364: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: LD_INT 84
41372: PPUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 321
41382: PUSH
41383: LD_INT 2
41385: EQUAL
41386: ST_TO_ADDR
41387: GO 41528
41389: LD_INT 19
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41403
41395: LD_INT 23
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41428
41403: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 83
41411: PPUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 321
41421: PUSH
41422: LD_INT 2
41424: EQUAL
41425: ST_TO_ADDR
41426: GO 41528
41428: LD_INT 17
41430: DOUBLE
41431: EQUAL
41432: IFTRUE 41436
41434: GO 41461
41436: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41437: LD_ADDR_VAR 0 3
41441: PUSH
41442: LD_INT 39
41444: PPUSH
41445: LD_VAR 0 1
41449: PPUSH
41450: CALL_OW 321
41454: PUSH
41455: LD_INT 2
41457: EQUAL
41458: ST_TO_ADDR
41459: GO 41528
41461: LD_INT 18
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41469
41467: GO 41494
41469: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_INT 40
41477: PPUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 321
41487: PUSH
41488: LD_INT 2
41490: EQUAL
41491: ST_TO_ADDR
41492: GO 41528
41494: LD_INT 27
41496: DOUBLE
41497: EQUAL
41498: IFTRUE 41502
41500: GO 41527
41502: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_INT 35
41510: PPUSH
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 321
41520: PUSH
41521: LD_INT 2
41523: EQUAL
41524: ST_TO_ADDR
41525: GO 41528
41527: POP
// end ;
41528: LD_VAR 0 3
41532: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41533: LD_INT 0
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
// result := false ;
41546: LD_ADDR_VAR 0 6
41550: PUSH
41551: LD_INT 0
41553: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41554: LD_VAR 0 1
41558: NOT
41559: PUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 266
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: IN
41580: NOT
41581: OR
41582: PUSH
41583: LD_VAR 0 2
41587: NOT
41588: OR
41589: PUSH
41590: LD_VAR 0 5
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 4
41609: PUSH
41610: LD_INT 5
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: IN
41621: NOT
41622: OR
41623: PUSH
41624: LD_VAR 0 3
41628: PPUSH
41629: LD_VAR 0 4
41633: PPUSH
41634: CALL_OW 488
41638: NOT
41639: OR
41640: IFFALSE 41644
// exit ;
41642: GO 42380
// side := GetSide ( depot ) ;
41644: LD_ADDR_VAR 0 9
41648: PUSH
41649: LD_VAR 0 1
41653: PPUSH
41654: CALL_OW 255
41658: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41659: LD_VAR 0 9
41663: PPUSH
41664: LD_VAR 0 2
41668: PPUSH
41669: CALL 41157 0 2
41673: NOT
41674: IFFALSE 41678
// exit ;
41676: GO 42380
// pom := GetBase ( depot ) ;
41678: LD_ADDR_VAR 0 10
41682: PUSH
41683: LD_VAR 0 1
41687: PPUSH
41688: CALL_OW 274
41692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41693: LD_ADDR_VAR 0 11
41697: PUSH
41698: LD_VAR 0 2
41702: PPUSH
41703: LD_VAR 0 1
41707: PPUSH
41708: CALL_OW 248
41712: PPUSH
41713: CALL_OW 450
41717: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41718: LD_VAR 0 10
41722: PPUSH
41723: LD_INT 1
41725: PPUSH
41726: CALL_OW 275
41730: PUSH
41731: LD_VAR 0 11
41735: PUSH
41736: LD_INT 1
41738: ARRAY
41739: GREATEREQUAL
41740: PUSH
41741: LD_VAR 0 10
41745: PPUSH
41746: LD_INT 2
41748: PPUSH
41749: CALL_OW 275
41753: PUSH
41754: LD_VAR 0 11
41758: PUSH
41759: LD_INT 2
41761: ARRAY
41762: GREATEREQUAL
41763: AND
41764: PUSH
41765: LD_VAR 0 10
41769: PPUSH
41770: LD_INT 3
41772: PPUSH
41773: CALL_OW 275
41777: PUSH
41778: LD_VAR 0 11
41782: PUSH
41783: LD_INT 3
41785: ARRAY
41786: GREATEREQUAL
41787: AND
41788: NOT
41789: IFFALSE 41793
// exit ;
41791: GO 42380
// if GetBType ( depot ) = b_depot then
41793: LD_VAR 0 1
41797: PPUSH
41798: CALL_OW 266
41802: PUSH
41803: LD_INT 0
41805: EQUAL
41806: IFFALSE 41818
// dist := 28 else
41808: LD_ADDR_VAR 0 14
41812: PUSH
41813: LD_INT 28
41815: ST_TO_ADDR
41816: GO 41826
// dist := 36 ;
41818: LD_ADDR_VAR 0 14
41822: PUSH
41823: LD_INT 36
41825: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41826: LD_VAR 0 1
41830: PPUSH
41831: LD_VAR 0 3
41835: PPUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: CALL_OW 297
41845: PUSH
41846: LD_VAR 0 14
41850: GREATER
41851: IFFALSE 41855
// exit ;
41853: GO 42380
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41855: LD_ADDR_VAR 0 12
41859: PUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: LD_VAR 0 4
41874: PPUSH
41875: LD_VAR 0 5
41879: PPUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 248
41889: PPUSH
41890: LD_INT 0
41892: PPUSH
41893: CALL 42385 0 6
41897: ST_TO_ADDR
// if not hexes then
41898: LD_VAR 0 12
41902: NOT
41903: IFFALSE 41907
// exit ;
41905: GO 42380
// hex := GetHexInfo ( x , y ) ;
41907: LD_ADDR_VAR 0 15
41911: PUSH
41912: LD_VAR 0 3
41916: PPUSH
41917: LD_VAR 0 4
41921: PPUSH
41922: CALL_OW 546
41926: ST_TO_ADDR
// if hex [ 1 ] then
41927: LD_VAR 0 15
41931: PUSH
41932: LD_INT 1
41934: ARRAY
41935: IFFALSE 41939
// exit ;
41937: GO 42380
// height := hex [ 2 ] ;
41939: LD_ADDR_VAR 0 13
41943: PUSH
41944: LD_VAR 0 15
41948: PUSH
41949: LD_INT 2
41951: ARRAY
41952: ST_TO_ADDR
// for i = 1 to hexes do
41953: LD_ADDR_VAR 0 7
41957: PUSH
41958: DOUBLE
41959: LD_INT 1
41961: DEC
41962: ST_TO_ADDR
41963: LD_VAR 0 12
41967: PUSH
41968: FOR_TO
41969: IFFALSE 42299
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41971: LD_VAR 0 12
41975: PUSH
41976: LD_VAR 0 7
41980: ARRAY
41981: PUSH
41982: LD_INT 1
41984: ARRAY
41985: PPUSH
41986: LD_VAR 0 12
41990: PUSH
41991: LD_VAR 0 7
41995: ARRAY
41996: PUSH
41997: LD_INT 2
41999: ARRAY
42000: PPUSH
42001: CALL_OW 488
42005: NOT
42006: PUSH
42007: LD_VAR 0 12
42011: PUSH
42012: LD_VAR 0 7
42016: ARRAY
42017: PUSH
42018: LD_INT 1
42020: ARRAY
42021: PPUSH
42022: LD_VAR 0 12
42026: PUSH
42027: LD_VAR 0 7
42031: ARRAY
42032: PUSH
42033: LD_INT 2
42035: ARRAY
42036: PPUSH
42037: CALL_OW 428
42041: PUSH
42042: LD_INT 0
42044: GREATER
42045: OR
42046: PUSH
42047: LD_VAR 0 12
42051: PUSH
42052: LD_VAR 0 7
42056: ARRAY
42057: PUSH
42058: LD_INT 1
42060: ARRAY
42061: PPUSH
42062: LD_VAR 0 12
42066: PUSH
42067: LD_VAR 0 7
42071: ARRAY
42072: PUSH
42073: LD_INT 2
42075: ARRAY
42076: PPUSH
42077: CALL_OW 351
42081: OR
42082: IFFALSE 42088
// exit ;
42084: POP
42085: POP
42086: GO 42380
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42088: LD_ADDR_VAR 0 8
42092: PUSH
42093: LD_VAR 0 12
42097: PUSH
42098: LD_VAR 0 7
42102: ARRAY
42103: PUSH
42104: LD_INT 1
42106: ARRAY
42107: PPUSH
42108: LD_VAR 0 12
42112: PUSH
42113: LD_VAR 0 7
42117: ARRAY
42118: PUSH
42119: LD_INT 2
42121: ARRAY
42122: PPUSH
42123: CALL_OW 546
42127: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42128: LD_VAR 0 8
42132: PUSH
42133: LD_INT 1
42135: ARRAY
42136: PUSH
42137: LD_VAR 0 8
42141: PUSH
42142: LD_INT 2
42144: ARRAY
42145: PUSH
42146: LD_VAR 0 13
42150: PUSH
42151: LD_INT 2
42153: PLUS
42154: GREATER
42155: OR
42156: PUSH
42157: LD_VAR 0 8
42161: PUSH
42162: LD_INT 2
42164: ARRAY
42165: PUSH
42166: LD_VAR 0 13
42170: PUSH
42171: LD_INT 2
42173: MINUS
42174: LESS
42175: OR
42176: PUSH
42177: LD_VAR 0 8
42181: PUSH
42182: LD_INT 3
42184: ARRAY
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 8
42191: PUSH
42192: LD_INT 9
42194: PUSH
42195: LD_INT 10
42197: PUSH
42198: LD_INT 11
42200: PUSH
42201: LD_INT 12
42203: PUSH
42204: LD_INT 13
42206: PUSH
42207: LD_INT 16
42209: PUSH
42210: LD_INT 17
42212: PUSH
42213: LD_INT 18
42215: PUSH
42216: LD_INT 19
42218: PUSH
42219: LD_INT 20
42221: PUSH
42222: LD_INT 21
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: IN
42240: NOT
42241: OR
42242: PUSH
42243: LD_VAR 0 8
42247: PUSH
42248: LD_INT 5
42250: ARRAY
42251: NOT
42252: OR
42253: PUSH
42254: LD_VAR 0 8
42258: PUSH
42259: LD_INT 6
42261: ARRAY
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: LD_INT 7
42271: PUSH
42272: LD_INT 9
42274: PUSH
42275: LD_INT 10
42277: PUSH
42278: LD_INT 11
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: IN
42289: NOT
42290: OR
42291: IFFALSE 42297
// exit ;
42293: POP
42294: POP
42295: GO 42380
// end ;
42297: GO 41968
42299: POP
42300: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42301: LD_VAR 0 9
42305: PPUSH
42306: LD_VAR 0 3
42310: PPUSH
42311: LD_VAR 0 4
42315: PPUSH
42316: LD_INT 20
42318: PPUSH
42319: CALL 34332 0 4
42323: PUSH
42324: LD_INT 4
42326: ARRAY
42327: IFFALSE 42331
// exit ;
42329: GO 42380
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42331: LD_VAR 0 2
42335: PUSH
42336: LD_INT 29
42338: PUSH
42339: LD_INT 30
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: IN
42346: PUSH
42347: LD_VAR 0 3
42351: PPUSH
42352: LD_VAR 0 4
42356: PPUSH
42357: LD_VAR 0 9
42361: PPUSH
42362: CALL_OW 440
42366: NOT
42367: AND
42368: IFFALSE 42372
// exit ;
42370: GO 42380
// result := true ;
42372: LD_ADDR_VAR 0 6
42376: PUSH
42377: LD_INT 1
42379: ST_TO_ADDR
// end ;
42380: LD_VAR 0 6
42384: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42385: LD_INT 0
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
42423: PPUSH
42424: PPUSH
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
// result = [ ] ;
42445: LD_ADDR_VAR 0 7
42449: PUSH
42450: EMPTY
42451: ST_TO_ADDR
// temp_list = [ ] ;
42452: LD_ADDR_VAR 0 9
42456: PUSH
42457: EMPTY
42458: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42459: LD_VAR 0 4
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: LD_INT 5
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: IN
42490: NOT
42491: PUSH
42492: LD_VAR 0 1
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: IN
42507: PUSH
42508: LD_VAR 0 5
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 3
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: IN
42527: NOT
42528: AND
42529: OR
42530: IFFALSE 42534
// exit ;
42532: GO 60925
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42534: LD_VAR 0 1
42538: PUSH
42539: LD_INT 6
42541: PUSH
42542: LD_INT 7
42544: PUSH
42545: LD_INT 8
42547: PUSH
42548: LD_INT 13
42550: PUSH
42551: LD_INT 12
42553: PUSH
42554: LD_INT 15
42556: PUSH
42557: LD_INT 11
42559: PUSH
42560: LD_INT 14
42562: PUSH
42563: LD_INT 10
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: IN
42577: IFFALSE 42587
// btype = b_lab ;
42579: LD_ADDR_VAR 0 1
42583: PUSH
42584: LD_INT 6
42586: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42587: LD_VAR 0 6
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: IN
42606: NOT
42607: PUSH
42608: LD_VAR 0 1
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: LD_INT 6
42627: PUSH
42628: LD_INT 36
42630: PUSH
42631: LD_INT 4
42633: PUSH
42634: LD_INT 5
42636: PUSH
42637: LD_INT 31
42639: PUSH
42640: LD_INT 32
42642: PUSH
42643: LD_INT 33
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: IN
42659: NOT
42660: PUSH
42661: LD_VAR 0 6
42665: PUSH
42666: LD_INT 1
42668: EQUAL
42669: AND
42670: OR
42671: PUSH
42672: LD_VAR 0 1
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: IN
42687: NOT
42688: PUSH
42689: LD_VAR 0 6
42693: PUSH
42694: LD_INT 2
42696: EQUAL
42697: AND
42698: OR
42699: IFFALSE 42709
// mode = 0 ;
42701: LD_ADDR_VAR 0 6
42705: PUSH
42706: LD_INT 0
42708: ST_TO_ADDR
// case mode of 0 :
42709: LD_VAR 0 6
42713: PUSH
42714: LD_INT 0
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 54175
42722: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42723: LD_ADDR_VAR 0 11
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42916: LD_ADDR_VAR 0 12
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43112: LD_ADDR_VAR 0 13
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 3
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: NEG
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: NEG
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43311: LD_ADDR_VAR 0 14
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 3
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43507: LD_ADDR_VAR 0 15
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 3
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43700: LD_ADDR_VAR 0 16
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43893: LD_ADDR_VAR 0 17
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44123: LD_ADDR_VAR 0 18
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44353: LD_ADDR_VAR 0 19
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44583: LD_ADDR_VAR 0 20
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44813: LD_ADDR_VAR 0 21
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45043: LD_ADDR_VAR 0 22
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45273: LD_ADDR_VAR 0 23
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 3
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45553: LD_ADDR_VAR 0 24
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45829: LD_ADDR_VAR 0 25
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46103: LD_ADDR_VAR 0 26
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 3
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46379: LD_ADDR_VAR 0 27
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 3
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46659: LD_ADDR_VAR 0 28
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46941: LD_ADDR_VAR 0 29
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47220: LD_ADDR_VAR 0 30
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: LD_INT 3
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47498: LD_ADDR_VAR 0 31
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47776: LD_ADDR_VAR 0 32
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48054: LD_ADDR_VAR 0 33
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48333: LD_ADDR_VAR 0 34
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48613: LD_ADDR_VAR 0 35
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48725: LD_ADDR_VAR 0 36
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48837: LD_ADDR_VAR 0 37
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48949: LD_ADDR_VAR 0 38
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49061: LD_ADDR_VAR 0 39
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49173: LD_ADDR_VAR 0 40
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49285: LD_ADDR_VAR 0 41
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: NEG
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49635: LD_ADDR_VAR 0 42
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49985: LD_ADDR_VAR 0 43
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 3
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50333: LD_ADDR_VAR 0 44
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 3
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50683: LD_ADDR_VAR 0 45
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 3
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 3
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 3
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51033: LD_ADDR_VAR 0 46
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51381: LD_ADDR_VAR 0 47
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51532: LD_ADDR_VAR 0 48
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51679: LD_ADDR_VAR 0 49
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51823: LD_ADDR_VAR 0 50
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51967: LD_ADDR_VAR 0 51
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52114: LD_ADDR_VAR 0 52
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52265: LD_ADDR_VAR 0 53
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52495: LD_ADDR_VAR 0 54
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52725: LD_ADDR_VAR 0 55
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52955: LD_ADDR_VAR 0 56
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53185: LD_ADDR_VAR 0 57
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53415: LD_ADDR_VAR 0 58
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53645: LD_ADDR_VAR 0 59
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53733: LD_ADDR_VAR 0 60
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53821: LD_ADDR_VAR 0 61
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53909: LD_ADDR_VAR 0 62
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53997: LD_ADDR_VAR 0 63
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54085: LD_ADDR_VAR 0 64
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// end ; 1 :
54173: GO 60070
54175: LD_INT 1
54177: DOUBLE
54178: EQUAL
54179: IFTRUE 54183
54181: GO 56806
54183: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54184: LD_ADDR_VAR 0 11
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54228: LD_ADDR_VAR 0 12
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54269: LD_ADDR_VAR 0 13
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54309: LD_ADDR_VAR 0 14
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54350: LD_ADDR_VAR 0 15
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 3
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54394: LD_ADDR_VAR 0 16
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54440: LD_ADDR_VAR 0 17
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54484: LD_ADDR_VAR 0 18
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54525: LD_ADDR_VAR 0 19
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54565: LD_ADDR_VAR 0 20
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54606: LD_ADDR_VAR 0 21
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 3
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54650: LD_ADDR_VAR 0 22
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54696: LD_ADDR_VAR 0 23
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 4
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54740: LD_ADDR_VAR 0 24
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54781: LD_ADDR_VAR 0 25
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 4
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54821: LD_ADDR_VAR 0 26
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 3
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54862: LD_ADDR_VAR 0 27
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 4
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54906: LD_ADDR_VAR 0 28
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: LD_INT 3
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: LD_INT 4
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54952: LD_ADDR_VAR 0 29
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 4
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 5
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 6
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 6
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 5
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55107: LD_ADDR_VAR 0 30
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 4
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 4
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 5
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 5
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 6
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 6
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55250: LD_ADDR_VAR 0 31
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: LD_INT 3
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 4
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: LD_INT 4
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 5
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 5
55327: PUSH
55328: LD_INT 5
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 4
55337: PUSH
55338: LD_INT 5
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 6
55347: PUSH
55348: LD_INT 5
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 6
55357: PUSH
55358: LD_INT 6
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 5
55367: PUSH
55368: LD_INT 6
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55389: LD_ADDR_VAR 0 32
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 4
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 5
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 6
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 6
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 5
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55532: LD_ADDR_VAR 0 33
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 4
55584: NEG
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 4
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 4
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: NEG
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 5
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 5
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 6
55652: NEG
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 6
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55687: LD_ADDR_VAR 0 34
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: NEG
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: LD_INT 4
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 4
55742: NEG
55743: PUSH
55744: LD_INT 3
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: LD_INT 4
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 4
55766: NEG
55767: PUSH
55768: LD_INT 5
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 5
55778: NEG
55779: PUSH
55780: LD_INT 4
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 5
55790: NEG
55791: PUSH
55792: LD_INT 5
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 5
55802: NEG
55803: PUSH
55804: LD_INT 6
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 6
55814: NEG
55815: PUSH
55816: LD_INT 5
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 6
55826: NEG
55827: PUSH
55828: LD_INT 6
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55850: LD_ADDR_VAR 0 41
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55894: LD_ADDR_VAR 0 42
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55935: LD_ADDR_VAR 0 43
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55975: LD_ADDR_VAR 0 44
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56016: LD_ADDR_VAR 0 45
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56060: LD_ADDR_VAR 0 46
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56106: LD_ADDR_VAR 0 47
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56139: LD_ADDR_VAR 0 48
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56170: LD_ADDR_VAR 0 49
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56199: LD_ADDR_VAR 0 50
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56228: LD_ADDR_VAR 0 51
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56259: LD_ADDR_VAR 0 52
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56292: LD_ADDR_VAR 0 53
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56336: LD_ADDR_VAR 0 54
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56377: LD_ADDR_VAR 0 55
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56417: LD_ADDR_VAR 0 56
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56458: LD_ADDR_VAR 0 57
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56502: LD_ADDR_VAR 0 58
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: LD_INT 3
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: LIST
56547: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56548: LD_ADDR_VAR 0 59
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56592: LD_ADDR_VAR 0 60
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56633: LD_ADDR_VAR 0 61
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56673: LD_ADDR_VAR 0 62
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: LIST
56713: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56714: LD_ADDR_VAR 0 63
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56758: LD_ADDR_VAR 0 64
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// end ; 2 :
56804: GO 60070
56806: LD_INT 2
56808: DOUBLE
56809: EQUAL
56810: IFTRUE 56814
56812: GO 60069
56814: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56815: LD_ADDR_VAR 0 29
56819: PUSH
56820: LD_INT 4
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 4
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 5
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 4
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 5
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: PUSH
56946: LD_INT 4
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 4
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 4
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: LD_INT 4
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 4
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 5
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 5
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 4
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 5
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: NEG
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 4
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 4
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 4
57200: NEG
57201: PUSH
57202: LD_INT 4
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: LD_INT 5
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 4
57248: NEG
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 5
57260: NEG
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 5
57272: NEG
57273: PUSH
57274: LD_INT 5
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: NEG
57285: PUSH
57286: LD_INT 5
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57353: LD_ADDR_VAR 0 30
57357: PUSH
57358: LD_INT 4
57360: PUSH
57361: LD_INT 4
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 4
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: PUSH
57381: LD_INT 4
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: PUSH
57391: LD_INT 5
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: LD_INT 5
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 4
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 5
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: LD_INT 5
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 4
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 4
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 4
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 4
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 4
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 5
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 5
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 5
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: NEG
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 4
57705: NEG
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: LD_INT 4
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 4
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: NEG
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 4
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 5
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 4
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 4
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 5
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 5
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57900: LD_ADDR_VAR 0 31
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 4
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 5
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: LD_INT 5
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 4
58056: NEG
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 4
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: LD_INT 4
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 4
58114: NEG
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: LD_INT 4
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 4
58150: NEG
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 5
58162: NEG
58163: PUSH
58164: LD_INT 4
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 5
58174: NEG
58175: PUSH
58176: LD_INT 5
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 5
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 5
58198: NEG
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 4
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 3
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 4
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 4
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 5
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 5
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 5
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58450: LD_ADDR_VAR 0 32
58454: PUSH
58455: LD_INT 4
58457: NEG
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 4
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 4
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 5
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 5
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: LD_INT 4
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: NEG
58632: PUSH
58633: LD_INT 4
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: LD_INT 4
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 4
58655: NEG
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 4
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 5
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 4
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 4
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 5
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: LD_INT 5
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 5
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 5
58892: PUSH
58893: LD_INT 5
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: LD_INT 5
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: LD_INT 4
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 5
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 5
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58997: LD_ADDR_VAR 0 33
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 4
59016: NEG
59017: PUSH
59018: LD_INT 5
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: NEG
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 4
59052: NEG
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: LD_INT 4
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 5
59076: NEG
59077: PUSH
59078: LD_INT 5
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: LD_INT 5
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 5
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 3
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 4
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 4
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 4
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: PUSH
59338: LD_INT 4
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: LD_INT 4
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 3
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 4
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 4
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 4
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 5
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 5
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 4
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: LD_INT 5
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59535: LD_ADDR_VAR 0 34
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 4
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 4
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 5
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: LD_INT 5
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 3
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 4
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 5
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: PUSH
59768: LD_INT 5
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 3
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: LD_INT 5
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 4
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 3
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 4
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 4
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 5
59976: NEG
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 5
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 5
59999: NEG
60000: PUSH
60001: LD_INT 2
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// end ; end ;
60067: GO 60070
60069: POP
// case btype of b_depot , b_warehouse :
60070: LD_VAR 0 1
60074: PUSH
60075: LD_INT 0
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60089
60081: LD_INT 1
60083: DOUBLE
60084: EQUAL
60085: IFTRUE 60089
60087: GO 60290
60089: POP
// case nation of nation_american :
60090: LD_VAR 0 5
60094: PUSH
60095: LD_INT 1
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60103
60101: GO 60159
60103: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60104: LD_ADDR_VAR 0 9
60108: PUSH
60109: LD_VAR 0 11
60113: PUSH
60114: LD_VAR 0 12
60118: PUSH
60119: LD_VAR 0 13
60123: PUSH
60124: LD_VAR 0 14
60128: PUSH
60129: LD_VAR 0 15
60133: PUSH
60134: LD_VAR 0 16
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: PUSH
60147: LD_VAR 0 4
60151: PUSH
60152: LD_INT 1
60154: PLUS
60155: ARRAY
60156: ST_TO_ADDR
60157: GO 60288
60159: LD_INT 2
60161: DOUBLE
60162: EQUAL
60163: IFTRUE 60167
60165: GO 60223
60167: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60168: LD_ADDR_VAR 0 9
60172: PUSH
60173: LD_VAR 0 17
60177: PUSH
60178: LD_VAR 0 18
60182: PUSH
60183: LD_VAR 0 19
60187: PUSH
60188: LD_VAR 0 20
60192: PUSH
60193: LD_VAR 0 21
60197: PUSH
60198: LD_VAR 0 22
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: PUSH
60211: LD_VAR 0 4
60215: PUSH
60216: LD_INT 1
60218: PLUS
60219: ARRAY
60220: ST_TO_ADDR
60221: GO 60288
60223: LD_INT 3
60225: DOUBLE
60226: EQUAL
60227: IFTRUE 60231
60229: GO 60287
60231: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60232: LD_ADDR_VAR 0 9
60236: PUSH
60237: LD_VAR 0 23
60241: PUSH
60242: LD_VAR 0 24
60246: PUSH
60247: LD_VAR 0 25
60251: PUSH
60252: LD_VAR 0 26
60256: PUSH
60257: LD_VAR 0 27
60261: PUSH
60262: LD_VAR 0 28
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: PUSH
60275: LD_VAR 0 4
60279: PUSH
60280: LD_INT 1
60282: PLUS
60283: ARRAY
60284: ST_TO_ADDR
60285: GO 60288
60287: POP
60288: GO 60843
60290: LD_INT 2
60292: DOUBLE
60293: EQUAL
60294: IFTRUE 60304
60296: LD_INT 3
60298: DOUBLE
60299: EQUAL
60300: IFTRUE 60304
60302: GO 60360
60304: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60305: LD_ADDR_VAR 0 9
60309: PUSH
60310: LD_VAR 0 29
60314: PUSH
60315: LD_VAR 0 30
60319: PUSH
60320: LD_VAR 0 31
60324: PUSH
60325: LD_VAR 0 32
60329: PUSH
60330: LD_VAR 0 33
60334: PUSH
60335: LD_VAR 0 34
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: PUSH
60348: LD_VAR 0 4
60352: PUSH
60353: LD_INT 1
60355: PLUS
60356: ARRAY
60357: ST_TO_ADDR
60358: GO 60843
60360: LD_INT 16
60362: DOUBLE
60363: EQUAL
60364: IFTRUE 60422
60366: LD_INT 17
60368: DOUBLE
60369: EQUAL
60370: IFTRUE 60422
60372: LD_INT 18
60374: DOUBLE
60375: EQUAL
60376: IFTRUE 60422
60378: LD_INT 19
60380: DOUBLE
60381: EQUAL
60382: IFTRUE 60422
60384: LD_INT 22
60386: DOUBLE
60387: EQUAL
60388: IFTRUE 60422
60390: LD_INT 20
60392: DOUBLE
60393: EQUAL
60394: IFTRUE 60422
60396: LD_INT 21
60398: DOUBLE
60399: EQUAL
60400: IFTRUE 60422
60402: LD_INT 23
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60422
60408: LD_INT 24
60410: DOUBLE
60411: EQUAL
60412: IFTRUE 60422
60414: LD_INT 25
60416: DOUBLE
60417: EQUAL
60418: IFTRUE 60422
60420: GO 60478
60422: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60423: LD_ADDR_VAR 0 9
60427: PUSH
60428: LD_VAR 0 35
60432: PUSH
60433: LD_VAR 0 36
60437: PUSH
60438: LD_VAR 0 37
60442: PUSH
60443: LD_VAR 0 38
60447: PUSH
60448: LD_VAR 0 39
60452: PUSH
60453: LD_VAR 0 40
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: PUSH
60466: LD_VAR 0 4
60470: PUSH
60471: LD_INT 1
60473: PLUS
60474: ARRAY
60475: ST_TO_ADDR
60476: GO 60843
60478: LD_INT 6
60480: DOUBLE
60481: EQUAL
60482: IFTRUE 60534
60484: LD_INT 7
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60534
60490: LD_INT 8
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60534
60496: LD_INT 13
60498: DOUBLE
60499: EQUAL
60500: IFTRUE 60534
60502: LD_INT 12
60504: DOUBLE
60505: EQUAL
60506: IFTRUE 60534
60508: LD_INT 15
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60534
60514: LD_INT 11
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60534
60520: LD_INT 14
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60534
60526: LD_INT 10
60528: DOUBLE
60529: EQUAL
60530: IFTRUE 60534
60532: GO 60590
60534: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60535: LD_ADDR_VAR 0 9
60539: PUSH
60540: LD_VAR 0 41
60544: PUSH
60545: LD_VAR 0 42
60549: PUSH
60550: LD_VAR 0 43
60554: PUSH
60555: LD_VAR 0 44
60559: PUSH
60560: LD_VAR 0 45
60564: PUSH
60565: LD_VAR 0 46
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: PUSH
60578: LD_VAR 0 4
60582: PUSH
60583: LD_INT 1
60585: PLUS
60586: ARRAY
60587: ST_TO_ADDR
60588: GO 60843
60590: LD_INT 36
60592: DOUBLE
60593: EQUAL
60594: IFTRUE 60598
60596: GO 60654
60598: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60599: LD_ADDR_VAR 0 9
60603: PUSH
60604: LD_VAR 0 47
60608: PUSH
60609: LD_VAR 0 48
60613: PUSH
60614: LD_VAR 0 49
60618: PUSH
60619: LD_VAR 0 50
60623: PUSH
60624: LD_VAR 0 51
60628: PUSH
60629: LD_VAR 0 52
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: PUSH
60642: LD_VAR 0 4
60646: PUSH
60647: LD_INT 1
60649: PLUS
60650: ARRAY
60651: ST_TO_ADDR
60652: GO 60843
60654: LD_INT 4
60656: DOUBLE
60657: EQUAL
60658: IFTRUE 60680
60660: LD_INT 5
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60680
60666: LD_INT 34
60668: DOUBLE
60669: EQUAL
60670: IFTRUE 60680
60672: LD_INT 37
60674: DOUBLE
60675: EQUAL
60676: IFTRUE 60680
60678: GO 60736
60680: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60681: LD_ADDR_VAR 0 9
60685: PUSH
60686: LD_VAR 0 53
60690: PUSH
60691: LD_VAR 0 54
60695: PUSH
60696: LD_VAR 0 55
60700: PUSH
60701: LD_VAR 0 56
60705: PUSH
60706: LD_VAR 0 57
60710: PUSH
60711: LD_VAR 0 58
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: PUSH
60724: LD_VAR 0 4
60728: PUSH
60729: LD_INT 1
60731: PLUS
60732: ARRAY
60733: ST_TO_ADDR
60734: GO 60843
60736: LD_INT 31
60738: DOUBLE
60739: EQUAL
60740: IFTRUE 60786
60742: LD_INT 32
60744: DOUBLE
60745: EQUAL
60746: IFTRUE 60786
60748: LD_INT 33
60750: DOUBLE
60751: EQUAL
60752: IFTRUE 60786
60754: LD_INT 27
60756: DOUBLE
60757: EQUAL
60758: IFTRUE 60786
60760: LD_INT 26
60762: DOUBLE
60763: EQUAL
60764: IFTRUE 60786
60766: LD_INT 28
60768: DOUBLE
60769: EQUAL
60770: IFTRUE 60786
60772: LD_INT 29
60774: DOUBLE
60775: EQUAL
60776: IFTRUE 60786
60778: LD_INT 30
60780: DOUBLE
60781: EQUAL
60782: IFTRUE 60786
60784: GO 60842
60786: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60787: LD_ADDR_VAR 0 9
60791: PUSH
60792: LD_VAR 0 59
60796: PUSH
60797: LD_VAR 0 60
60801: PUSH
60802: LD_VAR 0 61
60806: PUSH
60807: LD_VAR 0 62
60811: PUSH
60812: LD_VAR 0 63
60816: PUSH
60817: LD_VAR 0 64
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: PUSH
60830: LD_VAR 0 4
60834: PUSH
60835: LD_INT 1
60837: PLUS
60838: ARRAY
60839: ST_TO_ADDR
60840: GO 60843
60842: POP
// temp_list2 = [ ] ;
60843: LD_ADDR_VAR 0 10
60847: PUSH
60848: EMPTY
60849: ST_TO_ADDR
// for i in temp_list do
60850: LD_ADDR_VAR 0 8
60854: PUSH
60855: LD_VAR 0 9
60859: PUSH
60860: FOR_IN
60861: IFFALSE 60913
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60863: LD_ADDR_VAR 0 10
60867: PUSH
60868: LD_VAR 0 10
60872: PUSH
60873: LD_VAR 0 8
60877: PUSH
60878: LD_INT 1
60880: ARRAY
60881: PUSH
60882: LD_VAR 0 2
60886: PLUS
60887: PUSH
60888: LD_VAR 0 8
60892: PUSH
60893: LD_INT 2
60895: ARRAY
60896: PUSH
60897: LD_VAR 0 3
60901: PLUS
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: EMPTY
60908: LIST
60909: ADD
60910: ST_TO_ADDR
60911: GO 60860
60913: POP
60914: POP
// result = temp_list2 ;
60915: LD_ADDR_VAR 0 7
60919: PUSH
60920: LD_VAR 0 10
60924: ST_TO_ADDR
// end ;
60925: LD_VAR 0 7
60929: RET
// export function EnemyInRange ( unit , dist ) ; begin
60930: LD_INT 0
60932: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60933: LD_ADDR_VAR 0 3
60937: PUSH
60938: LD_VAR 0 1
60942: PPUSH
60943: CALL_OW 255
60947: PPUSH
60948: LD_VAR 0 1
60952: PPUSH
60953: CALL_OW 250
60957: PPUSH
60958: LD_VAR 0 1
60962: PPUSH
60963: CALL_OW 251
60967: PPUSH
60968: LD_VAR 0 2
60972: PPUSH
60973: CALL 34332 0 4
60977: PUSH
60978: LD_INT 4
60980: ARRAY
60981: ST_TO_ADDR
// end ;
60982: LD_VAR 0 3
60986: RET
// export function PlayerSeeMe ( unit ) ; begin
60987: LD_INT 0
60989: PPUSH
// result := See ( your_side , unit ) ;
60990: LD_ADDR_VAR 0 2
60994: PUSH
60995: LD_OWVAR 2
60999: PPUSH
61000: LD_VAR 0 1
61004: PPUSH
61005: CALL_OW 292
61009: ST_TO_ADDR
// end ;
61010: LD_VAR 0 2
61014: RET
// export function ReverseDir ( unit ) ; begin
61015: LD_INT 0
61017: PPUSH
// if not unit then
61018: LD_VAR 0 1
61022: NOT
61023: IFFALSE 61027
// exit ;
61025: GO 61050
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61027: LD_ADDR_VAR 0 2
61031: PUSH
61032: LD_VAR 0 1
61036: PPUSH
61037: CALL_OW 254
61041: PUSH
61042: LD_INT 3
61044: PLUS
61045: PUSH
61046: LD_INT 6
61048: MOD
61049: ST_TO_ADDR
// end ;
61050: LD_VAR 0 2
61054: RET
// export function ReverseArray ( array ) ; var i ; begin
61055: LD_INT 0
61057: PPUSH
61058: PPUSH
// if not array then
61059: LD_VAR 0 1
61063: NOT
61064: IFFALSE 61068
// exit ;
61066: GO 61123
// result := [ ] ;
61068: LD_ADDR_VAR 0 2
61072: PUSH
61073: EMPTY
61074: ST_TO_ADDR
// for i := array downto 1 do
61075: LD_ADDR_VAR 0 3
61079: PUSH
61080: DOUBLE
61081: LD_VAR 0 1
61085: INC
61086: ST_TO_ADDR
61087: LD_INT 1
61089: PUSH
61090: FOR_DOWNTO
61091: IFFALSE 61121
// result := Join ( result , array [ i ] ) ;
61093: LD_ADDR_VAR 0 2
61097: PUSH
61098: LD_VAR 0 2
61102: PPUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_VAR 0 3
61112: ARRAY
61113: PPUSH
61114: CALL 65748 0 2
61118: ST_TO_ADDR
61119: GO 61090
61121: POP
61122: POP
// end ;
61123: LD_VAR 0 2
61127: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61128: LD_INT 0
61130: PPUSH
61131: PPUSH
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
// if not unit or not hexes then
61136: LD_VAR 0 1
61140: NOT
61141: PUSH
61142: LD_VAR 0 2
61146: NOT
61147: OR
61148: IFFALSE 61152
// exit ;
61150: GO 61275
// dist := 9999 ;
61152: LD_ADDR_VAR 0 5
61156: PUSH
61157: LD_INT 9999
61159: ST_TO_ADDR
// for i = 1 to hexes do
61160: LD_ADDR_VAR 0 4
61164: PUSH
61165: DOUBLE
61166: LD_INT 1
61168: DEC
61169: ST_TO_ADDR
61170: LD_VAR 0 2
61174: PUSH
61175: FOR_TO
61176: IFFALSE 61263
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61178: LD_ADDR_VAR 0 6
61182: PUSH
61183: LD_VAR 0 1
61187: PPUSH
61188: LD_VAR 0 2
61192: PUSH
61193: LD_VAR 0 4
61197: ARRAY
61198: PUSH
61199: LD_INT 1
61201: ARRAY
61202: PPUSH
61203: LD_VAR 0 2
61207: PUSH
61208: LD_VAR 0 4
61212: ARRAY
61213: PUSH
61214: LD_INT 2
61216: ARRAY
61217: PPUSH
61218: CALL_OW 297
61222: ST_TO_ADDR
// if tdist < dist then
61223: LD_VAR 0 6
61227: PUSH
61228: LD_VAR 0 5
61232: LESS
61233: IFFALSE 61261
// begin hex := hexes [ i ] ;
61235: LD_ADDR_VAR 0 8
61239: PUSH
61240: LD_VAR 0 2
61244: PUSH
61245: LD_VAR 0 4
61249: ARRAY
61250: ST_TO_ADDR
// dist := tdist ;
61251: LD_ADDR_VAR 0 5
61255: PUSH
61256: LD_VAR 0 6
61260: ST_TO_ADDR
// end ; end ;
61261: GO 61175
61263: POP
61264: POP
// result := hex ;
61265: LD_ADDR_VAR 0 3
61269: PUSH
61270: LD_VAR 0 8
61274: ST_TO_ADDR
// end ;
61275: LD_VAR 0 3
61279: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61280: LD_INT 0
61282: PPUSH
61283: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61284: LD_VAR 0 1
61288: NOT
61289: PUSH
61290: LD_VAR 0 1
61294: PUSH
61295: LD_INT 21
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 23
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PPUSH
61319: CALL_OW 69
61323: IN
61324: NOT
61325: OR
61326: IFFALSE 61330
// exit ;
61328: GO 61377
// for i = 1 to 3 do
61330: LD_ADDR_VAR 0 3
61334: PUSH
61335: DOUBLE
61336: LD_INT 1
61338: DEC
61339: ST_TO_ADDR
61340: LD_INT 3
61342: PUSH
61343: FOR_TO
61344: IFFALSE 61375
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 250
61355: PPUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 251
61365: PPUSH
61366: LD_INT 1
61368: PPUSH
61369: CALL_OW 453
61373: GO 61343
61375: POP
61376: POP
// end ;
61377: LD_VAR 0 2
61381: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61382: LD_INT 0
61384: PPUSH
61385: PPUSH
61386: PPUSH
61387: PPUSH
61388: PPUSH
61389: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61390: LD_VAR 0 1
61394: NOT
61395: PUSH
61396: LD_VAR 0 2
61400: NOT
61401: OR
61402: PUSH
61403: LD_VAR 0 1
61407: PPUSH
61408: CALL_OW 314
61412: OR
61413: IFFALSE 61417
// exit ;
61415: GO 61858
// x := GetX ( enemy_unit ) ;
61417: LD_ADDR_VAR 0 7
61421: PUSH
61422: LD_VAR 0 2
61426: PPUSH
61427: CALL_OW 250
61431: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61432: LD_ADDR_VAR 0 8
61436: PUSH
61437: LD_VAR 0 2
61441: PPUSH
61442: CALL_OW 251
61446: ST_TO_ADDR
// if not x or not y then
61447: LD_VAR 0 7
61451: NOT
61452: PUSH
61453: LD_VAR 0 8
61457: NOT
61458: OR
61459: IFFALSE 61463
// exit ;
61461: GO 61858
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61463: LD_ADDR_VAR 0 6
61467: PUSH
61468: LD_VAR 0 7
61472: PPUSH
61473: LD_INT 0
61475: PPUSH
61476: LD_INT 4
61478: PPUSH
61479: CALL_OW 272
61483: PUSH
61484: LD_VAR 0 8
61488: PPUSH
61489: LD_INT 0
61491: PPUSH
61492: LD_INT 4
61494: PPUSH
61495: CALL_OW 273
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_VAR 0 7
61508: PPUSH
61509: LD_INT 1
61511: PPUSH
61512: LD_INT 4
61514: PPUSH
61515: CALL_OW 272
61519: PUSH
61520: LD_VAR 0 8
61524: PPUSH
61525: LD_INT 1
61527: PPUSH
61528: LD_INT 4
61530: PPUSH
61531: CALL_OW 273
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_VAR 0 7
61544: PPUSH
61545: LD_INT 2
61547: PPUSH
61548: LD_INT 4
61550: PPUSH
61551: CALL_OW 272
61555: PUSH
61556: LD_VAR 0 8
61560: PPUSH
61561: LD_INT 2
61563: PPUSH
61564: LD_INT 4
61566: PPUSH
61567: CALL_OW 273
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_VAR 0 7
61580: PPUSH
61581: LD_INT 3
61583: PPUSH
61584: LD_INT 4
61586: PPUSH
61587: CALL_OW 272
61591: PUSH
61592: LD_VAR 0 8
61596: PPUSH
61597: LD_INT 3
61599: PPUSH
61600: LD_INT 4
61602: PPUSH
61603: CALL_OW 273
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_VAR 0 7
61616: PPUSH
61617: LD_INT 4
61619: PPUSH
61620: LD_INT 4
61622: PPUSH
61623: CALL_OW 272
61627: PUSH
61628: LD_VAR 0 8
61632: PPUSH
61633: LD_INT 4
61635: PPUSH
61636: LD_INT 4
61638: PPUSH
61639: CALL_OW 273
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_VAR 0 7
61652: PPUSH
61653: LD_INT 5
61655: PPUSH
61656: LD_INT 4
61658: PPUSH
61659: CALL_OW 272
61663: PUSH
61664: LD_VAR 0 8
61668: PPUSH
61669: LD_INT 5
61671: PPUSH
61672: LD_INT 4
61674: PPUSH
61675: CALL_OW 273
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// for i = tmp downto 1 do
61692: LD_ADDR_VAR 0 4
61696: PUSH
61697: DOUBLE
61698: LD_VAR 0 6
61702: INC
61703: ST_TO_ADDR
61704: LD_INT 1
61706: PUSH
61707: FOR_DOWNTO
61708: IFFALSE 61809
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61710: LD_VAR 0 6
61714: PUSH
61715: LD_VAR 0 4
61719: ARRAY
61720: PUSH
61721: LD_INT 1
61723: ARRAY
61724: PPUSH
61725: LD_VAR 0 6
61729: PUSH
61730: LD_VAR 0 4
61734: ARRAY
61735: PUSH
61736: LD_INT 2
61738: ARRAY
61739: PPUSH
61740: CALL_OW 488
61744: NOT
61745: PUSH
61746: LD_VAR 0 6
61750: PUSH
61751: LD_VAR 0 4
61755: ARRAY
61756: PUSH
61757: LD_INT 1
61759: ARRAY
61760: PPUSH
61761: LD_VAR 0 6
61765: PUSH
61766: LD_VAR 0 4
61770: ARRAY
61771: PUSH
61772: LD_INT 2
61774: ARRAY
61775: PPUSH
61776: CALL_OW 428
61780: PUSH
61781: LD_INT 0
61783: NONEQUAL
61784: OR
61785: IFFALSE 61807
// tmp := Delete ( tmp , i ) ;
61787: LD_ADDR_VAR 0 6
61791: PUSH
61792: LD_VAR 0 6
61796: PPUSH
61797: LD_VAR 0 4
61801: PPUSH
61802: CALL_OW 3
61806: ST_TO_ADDR
61807: GO 61707
61809: POP
61810: POP
// j := GetClosestHex ( unit , tmp ) ;
61811: LD_ADDR_VAR 0 5
61815: PUSH
61816: LD_VAR 0 1
61820: PPUSH
61821: LD_VAR 0 6
61825: PPUSH
61826: CALL 61128 0 2
61830: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61831: LD_VAR 0 1
61835: PPUSH
61836: LD_VAR 0 5
61840: PUSH
61841: LD_INT 1
61843: ARRAY
61844: PPUSH
61845: LD_VAR 0 5
61849: PUSH
61850: LD_INT 2
61852: ARRAY
61853: PPUSH
61854: CALL_OW 111
// end ;
61858: LD_VAR 0 3
61862: RET
// export function PrepareApemanSoldier ( ) ; begin
61863: LD_INT 0
61865: PPUSH
// uc_nation := 0 ;
61866: LD_ADDR_OWVAR 21
61870: PUSH
61871: LD_INT 0
61873: ST_TO_ADDR
// hc_sex := sex_male ;
61874: LD_ADDR_OWVAR 27
61878: PUSH
61879: LD_INT 1
61881: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61882: LD_ADDR_OWVAR 28
61886: PUSH
61887: LD_INT 15
61889: ST_TO_ADDR
// hc_gallery :=  ;
61890: LD_ADDR_OWVAR 33
61894: PUSH
61895: LD_STRING 
61897: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61898: LD_ADDR_OWVAR 31
61902: PUSH
61903: LD_INT 0
61905: PPUSH
61906: LD_INT 3
61908: PPUSH
61909: CALL_OW 12
61913: PUSH
61914: LD_INT 0
61916: PPUSH
61917: LD_INT 3
61919: PPUSH
61920: CALL_OW 12
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: ST_TO_ADDR
// end ;
61937: LD_VAR 0 1
61941: RET
// export function PrepareApemanEngineer ( ) ; begin
61942: LD_INT 0
61944: PPUSH
// uc_nation := 0 ;
61945: LD_ADDR_OWVAR 21
61949: PUSH
61950: LD_INT 0
61952: ST_TO_ADDR
// hc_sex := sex_male ;
61953: LD_ADDR_OWVAR 27
61957: PUSH
61958: LD_INT 1
61960: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61961: LD_ADDR_OWVAR 28
61965: PUSH
61966: LD_INT 16
61968: ST_TO_ADDR
// hc_gallery :=  ;
61969: LD_ADDR_OWVAR 33
61973: PUSH
61974: LD_STRING 
61976: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61977: LD_ADDR_OWVAR 31
61981: PUSH
61982: LD_INT 0
61984: PPUSH
61985: LD_INT 3
61987: PPUSH
61988: CALL_OW 12
61992: PUSH
61993: LD_INT 0
61995: PPUSH
61996: LD_INT 3
61998: PPUSH
61999: CALL_OW 12
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// end ;
62016: LD_VAR 0 1
62020: RET
// export function PrepareApeman ( agressivity ) ; begin
62021: LD_INT 0
62023: PPUSH
// uc_side := 0 ;
62024: LD_ADDR_OWVAR 20
62028: PUSH
62029: LD_INT 0
62031: ST_TO_ADDR
// uc_nation := 0 ;
62032: LD_ADDR_OWVAR 21
62036: PUSH
62037: LD_INT 0
62039: ST_TO_ADDR
// hc_sex := sex_male ;
62040: LD_ADDR_OWVAR 27
62044: PUSH
62045: LD_INT 1
62047: ST_TO_ADDR
// hc_class := class_apeman ;
62048: LD_ADDR_OWVAR 28
62052: PUSH
62053: LD_INT 12
62055: ST_TO_ADDR
// hc_gallery :=  ;
62056: LD_ADDR_OWVAR 33
62060: PUSH
62061: LD_STRING 
62063: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62064: LD_ADDR_OWVAR 35
62068: PUSH
62069: LD_VAR 0 1
62073: NEG
62074: PPUSH
62075: LD_VAR 0 1
62079: PPUSH
62080: CALL_OW 12
62084: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62085: LD_ADDR_OWVAR 31
62089: PUSH
62090: LD_INT 0
62092: PPUSH
62093: LD_INT 3
62095: PPUSH
62096: CALL_OW 12
62100: PUSH
62101: LD_INT 0
62103: PPUSH
62104: LD_INT 3
62106: PPUSH
62107: CALL_OW 12
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: ST_TO_ADDR
// end ;
62124: LD_VAR 0 2
62128: RET
// export function PrepareTiger ( agressivity ) ; begin
62129: LD_INT 0
62131: PPUSH
// uc_side := 0 ;
62132: LD_ADDR_OWVAR 20
62136: PUSH
62137: LD_INT 0
62139: ST_TO_ADDR
// uc_nation := 0 ;
62140: LD_ADDR_OWVAR 21
62144: PUSH
62145: LD_INT 0
62147: ST_TO_ADDR
// hc_class := class_tiger ;
62148: LD_ADDR_OWVAR 28
62152: PUSH
62153: LD_INT 14
62155: ST_TO_ADDR
// hc_gallery :=  ;
62156: LD_ADDR_OWVAR 33
62160: PUSH
62161: LD_STRING 
62163: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62164: LD_ADDR_OWVAR 35
62168: PUSH
62169: LD_VAR 0 1
62173: NEG
62174: PPUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 12
62184: ST_TO_ADDR
// end ;
62185: LD_VAR 0 2
62189: RET
// export function PrepareEnchidna ( ) ; begin
62190: LD_INT 0
62192: PPUSH
// uc_side := 0 ;
62193: LD_ADDR_OWVAR 20
62197: PUSH
62198: LD_INT 0
62200: ST_TO_ADDR
// uc_nation := 0 ;
62201: LD_ADDR_OWVAR 21
62205: PUSH
62206: LD_INT 0
62208: ST_TO_ADDR
// hc_class := class_baggie ;
62209: LD_ADDR_OWVAR 28
62213: PUSH
62214: LD_INT 13
62216: ST_TO_ADDR
// hc_gallery :=  ;
62217: LD_ADDR_OWVAR 33
62221: PUSH
62222: LD_STRING 
62224: ST_TO_ADDR
// end ;
62225: LD_VAR 0 1
62229: RET
// export function PrepareFrog ( ) ; begin
62230: LD_INT 0
62232: PPUSH
// uc_side := 0 ;
62233: LD_ADDR_OWVAR 20
62237: PUSH
62238: LD_INT 0
62240: ST_TO_ADDR
// uc_nation := 0 ;
62241: LD_ADDR_OWVAR 21
62245: PUSH
62246: LD_INT 0
62248: ST_TO_ADDR
// hc_class := class_frog ;
62249: LD_ADDR_OWVAR 28
62253: PUSH
62254: LD_INT 19
62256: ST_TO_ADDR
// hc_gallery :=  ;
62257: LD_ADDR_OWVAR 33
62261: PUSH
62262: LD_STRING 
62264: ST_TO_ADDR
// end ;
62265: LD_VAR 0 1
62269: RET
// export function PrepareFish ( ) ; begin
62270: LD_INT 0
62272: PPUSH
// uc_side := 0 ;
62273: LD_ADDR_OWVAR 20
62277: PUSH
62278: LD_INT 0
62280: ST_TO_ADDR
// uc_nation := 0 ;
62281: LD_ADDR_OWVAR 21
62285: PUSH
62286: LD_INT 0
62288: ST_TO_ADDR
// hc_class := class_fish ;
62289: LD_ADDR_OWVAR 28
62293: PUSH
62294: LD_INT 20
62296: ST_TO_ADDR
// hc_gallery :=  ;
62297: LD_ADDR_OWVAR 33
62301: PUSH
62302: LD_STRING 
62304: ST_TO_ADDR
// end ;
62305: LD_VAR 0 1
62309: RET
// export function PrepareBird ( ) ; begin
62310: LD_INT 0
62312: PPUSH
// uc_side := 0 ;
62313: LD_ADDR_OWVAR 20
62317: PUSH
62318: LD_INT 0
62320: ST_TO_ADDR
// uc_nation := 0 ;
62321: LD_ADDR_OWVAR 21
62325: PUSH
62326: LD_INT 0
62328: ST_TO_ADDR
// hc_class := class_phororhacos ;
62329: LD_ADDR_OWVAR 28
62333: PUSH
62334: LD_INT 18
62336: ST_TO_ADDR
// hc_gallery :=  ;
62337: LD_ADDR_OWVAR 33
62341: PUSH
62342: LD_STRING 
62344: ST_TO_ADDR
// end ;
62345: LD_VAR 0 1
62349: RET
// export function PrepareHorse ( ) ; begin
62350: LD_INT 0
62352: PPUSH
// uc_side := 0 ;
62353: LD_ADDR_OWVAR 20
62357: PUSH
62358: LD_INT 0
62360: ST_TO_ADDR
// uc_nation := 0 ;
62361: LD_ADDR_OWVAR 21
62365: PUSH
62366: LD_INT 0
62368: ST_TO_ADDR
// hc_class := class_horse ;
62369: LD_ADDR_OWVAR 28
62373: PUSH
62374: LD_INT 21
62376: ST_TO_ADDR
// hc_gallery :=  ;
62377: LD_ADDR_OWVAR 33
62381: PUSH
62382: LD_STRING 
62384: ST_TO_ADDR
// end ;
62385: LD_VAR 0 1
62389: RET
// export function PrepareMastodont ( ) ; begin
62390: LD_INT 0
62392: PPUSH
// uc_side := 0 ;
62393: LD_ADDR_OWVAR 20
62397: PUSH
62398: LD_INT 0
62400: ST_TO_ADDR
// uc_nation := 0 ;
62401: LD_ADDR_OWVAR 21
62405: PUSH
62406: LD_INT 0
62408: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62409: LD_ADDR_OWVAR 37
62413: PUSH
62414: LD_INT 31
62416: ST_TO_ADDR
// vc_control := control_rider ;
62417: LD_ADDR_OWVAR 38
62421: PUSH
62422: LD_INT 4
62424: ST_TO_ADDR
// end ;
62425: LD_VAR 0 1
62429: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62430: LD_INT 0
62432: PPUSH
62433: PPUSH
62434: PPUSH
// uc_side = 0 ;
62435: LD_ADDR_OWVAR 20
62439: PUSH
62440: LD_INT 0
62442: ST_TO_ADDR
// uc_nation = 0 ;
62443: LD_ADDR_OWVAR 21
62447: PUSH
62448: LD_INT 0
62450: ST_TO_ADDR
// InitHc_All ( ) ;
62451: CALL_OW 584
// InitVc ;
62455: CALL_OW 20
// if mastodonts then
62459: LD_VAR 0 6
62463: IFFALSE 62530
// for i = 1 to mastodonts do
62465: LD_ADDR_VAR 0 11
62469: PUSH
62470: DOUBLE
62471: LD_INT 1
62473: DEC
62474: ST_TO_ADDR
62475: LD_VAR 0 6
62479: PUSH
62480: FOR_TO
62481: IFFALSE 62528
// begin vc_chassis := 31 ;
62483: LD_ADDR_OWVAR 37
62487: PUSH
62488: LD_INT 31
62490: ST_TO_ADDR
// vc_control := control_rider ;
62491: LD_ADDR_OWVAR 38
62495: PUSH
62496: LD_INT 4
62498: ST_TO_ADDR
// animal := CreateVehicle ;
62499: LD_ADDR_VAR 0 12
62503: PUSH
62504: CALL_OW 45
62508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62509: LD_VAR 0 12
62513: PPUSH
62514: LD_VAR 0 8
62518: PPUSH
62519: LD_INT 0
62521: PPUSH
62522: CALL 64665 0 3
// end ;
62526: GO 62480
62528: POP
62529: POP
// if horses then
62530: LD_VAR 0 5
62534: IFFALSE 62601
// for i = 1 to horses do
62536: LD_ADDR_VAR 0 11
62540: PUSH
62541: DOUBLE
62542: LD_INT 1
62544: DEC
62545: ST_TO_ADDR
62546: LD_VAR 0 5
62550: PUSH
62551: FOR_TO
62552: IFFALSE 62599
// begin hc_class := 21 ;
62554: LD_ADDR_OWVAR 28
62558: PUSH
62559: LD_INT 21
62561: ST_TO_ADDR
// hc_gallery :=  ;
62562: LD_ADDR_OWVAR 33
62566: PUSH
62567: LD_STRING 
62569: ST_TO_ADDR
// animal := CreateHuman ;
62570: LD_ADDR_VAR 0 12
62574: PUSH
62575: CALL_OW 44
62579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62580: LD_VAR 0 12
62584: PPUSH
62585: LD_VAR 0 8
62589: PPUSH
62590: LD_INT 0
62592: PPUSH
62593: CALL 64665 0 3
// end ;
62597: GO 62551
62599: POP
62600: POP
// if birds then
62601: LD_VAR 0 1
62605: IFFALSE 62672
// for i = 1 to birds do
62607: LD_ADDR_VAR 0 11
62611: PUSH
62612: DOUBLE
62613: LD_INT 1
62615: DEC
62616: ST_TO_ADDR
62617: LD_VAR 0 1
62621: PUSH
62622: FOR_TO
62623: IFFALSE 62670
// begin hc_class = 18 ;
62625: LD_ADDR_OWVAR 28
62629: PUSH
62630: LD_INT 18
62632: ST_TO_ADDR
// hc_gallery =  ;
62633: LD_ADDR_OWVAR 33
62637: PUSH
62638: LD_STRING 
62640: ST_TO_ADDR
// animal := CreateHuman ;
62641: LD_ADDR_VAR 0 12
62645: PUSH
62646: CALL_OW 44
62650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62651: LD_VAR 0 12
62655: PPUSH
62656: LD_VAR 0 8
62660: PPUSH
62661: LD_INT 0
62663: PPUSH
62664: CALL 64665 0 3
// end ;
62668: GO 62622
62670: POP
62671: POP
// if tigers then
62672: LD_VAR 0 2
62676: IFFALSE 62760
// for i = 1 to tigers do
62678: LD_ADDR_VAR 0 11
62682: PUSH
62683: DOUBLE
62684: LD_INT 1
62686: DEC
62687: ST_TO_ADDR
62688: LD_VAR 0 2
62692: PUSH
62693: FOR_TO
62694: IFFALSE 62758
// begin hc_class = class_tiger ;
62696: LD_ADDR_OWVAR 28
62700: PUSH
62701: LD_INT 14
62703: ST_TO_ADDR
// hc_gallery =  ;
62704: LD_ADDR_OWVAR 33
62708: PUSH
62709: LD_STRING 
62711: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62712: LD_ADDR_OWVAR 35
62716: PUSH
62717: LD_INT 7
62719: NEG
62720: PPUSH
62721: LD_INT 7
62723: PPUSH
62724: CALL_OW 12
62728: ST_TO_ADDR
// animal := CreateHuman ;
62729: LD_ADDR_VAR 0 12
62733: PUSH
62734: CALL_OW 44
62738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62739: LD_VAR 0 12
62743: PPUSH
62744: LD_VAR 0 8
62748: PPUSH
62749: LD_INT 0
62751: PPUSH
62752: CALL 64665 0 3
// end ;
62756: GO 62693
62758: POP
62759: POP
// if apemans then
62760: LD_VAR 0 3
62764: IFFALSE 62887
// for i = 1 to apemans do
62766: LD_ADDR_VAR 0 11
62770: PUSH
62771: DOUBLE
62772: LD_INT 1
62774: DEC
62775: ST_TO_ADDR
62776: LD_VAR 0 3
62780: PUSH
62781: FOR_TO
62782: IFFALSE 62885
// begin hc_class = class_apeman ;
62784: LD_ADDR_OWVAR 28
62788: PUSH
62789: LD_INT 12
62791: ST_TO_ADDR
// hc_gallery =  ;
62792: LD_ADDR_OWVAR 33
62796: PUSH
62797: LD_STRING 
62799: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62800: LD_ADDR_OWVAR 35
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PPUSH
62809: LD_INT 2
62811: PPUSH
62812: CALL_OW 12
62816: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62817: LD_ADDR_OWVAR 31
62821: PUSH
62822: LD_INT 1
62824: PPUSH
62825: LD_INT 3
62827: PPUSH
62828: CALL_OW 12
62832: PUSH
62833: LD_INT 1
62835: PPUSH
62836: LD_INT 3
62838: PPUSH
62839: CALL_OW 12
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// animal := CreateHuman ;
62856: LD_ADDR_VAR 0 12
62860: PUSH
62861: CALL_OW 44
62865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62866: LD_VAR 0 12
62870: PPUSH
62871: LD_VAR 0 8
62875: PPUSH
62876: LD_INT 0
62878: PPUSH
62879: CALL 64665 0 3
// end ;
62883: GO 62781
62885: POP
62886: POP
// if enchidnas then
62887: LD_VAR 0 4
62891: IFFALSE 62958
// for i = 1 to enchidnas do
62893: LD_ADDR_VAR 0 11
62897: PUSH
62898: DOUBLE
62899: LD_INT 1
62901: DEC
62902: ST_TO_ADDR
62903: LD_VAR 0 4
62907: PUSH
62908: FOR_TO
62909: IFFALSE 62956
// begin hc_class = 13 ;
62911: LD_ADDR_OWVAR 28
62915: PUSH
62916: LD_INT 13
62918: ST_TO_ADDR
// hc_gallery =  ;
62919: LD_ADDR_OWVAR 33
62923: PUSH
62924: LD_STRING 
62926: ST_TO_ADDR
// animal := CreateHuman ;
62927: LD_ADDR_VAR 0 12
62931: PUSH
62932: CALL_OW 44
62936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62937: LD_VAR 0 12
62941: PPUSH
62942: LD_VAR 0 8
62946: PPUSH
62947: LD_INT 0
62949: PPUSH
62950: CALL 64665 0 3
// end ;
62954: GO 62908
62956: POP
62957: POP
// if fishes then
62958: LD_VAR 0 7
62962: IFFALSE 63029
// for i = 1 to fishes do
62964: LD_ADDR_VAR 0 11
62968: PUSH
62969: DOUBLE
62970: LD_INT 1
62972: DEC
62973: ST_TO_ADDR
62974: LD_VAR 0 7
62978: PUSH
62979: FOR_TO
62980: IFFALSE 63027
// begin hc_class = 20 ;
62982: LD_ADDR_OWVAR 28
62986: PUSH
62987: LD_INT 20
62989: ST_TO_ADDR
// hc_gallery =  ;
62990: LD_ADDR_OWVAR 33
62994: PUSH
62995: LD_STRING 
62997: ST_TO_ADDR
// animal := CreateHuman ;
62998: LD_ADDR_VAR 0 12
63002: PUSH
63003: CALL_OW 44
63007: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63008: LD_VAR 0 12
63012: PPUSH
63013: LD_VAR 0 9
63017: PPUSH
63018: LD_INT 0
63020: PPUSH
63021: CALL 64665 0 3
// end ;
63025: GO 62979
63027: POP
63028: POP
// end ;
63029: LD_VAR 0 10
63033: RET
// export function WantHeal ( sci , unit ) ; begin
63034: LD_INT 0
63036: PPUSH
// if GetTaskList ( sci ) > 0 then
63037: LD_VAR 0 1
63041: PPUSH
63042: CALL_OW 437
63046: PUSH
63047: LD_INT 0
63049: GREATER
63050: IFFALSE 63120
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63052: LD_VAR 0 1
63056: PPUSH
63057: CALL_OW 437
63061: PUSH
63062: LD_INT 1
63064: ARRAY
63065: PUSH
63066: LD_INT 1
63068: ARRAY
63069: PUSH
63070: LD_STRING l
63072: EQUAL
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: CALL_OW 437
63083: PUSH
63084: LD_INT 1
63086: ARRAY
63087: PUSH
63088: LD_INT 4
63090: ARRAY
63091: PUSH
63092: LD_VAR 0 2
63096: EQUAL
63097: AND
63098: IFFALSE 63110
// result := true else
63100: LD_ADDR_VAR 0 3
63104: PUSH
63105: LD_INT 1
63107: ST_TO_ADDR
63108: GO 63118
// result := false ;
63110: LD_ADDR_VAR 0 3
63114: PUSH
63115: LD_INT 0
63117: ST_TO_ADDR
// end else
63118: GO 63128
// result := false ;
63120: LD_ADDR_VAR 0 3
63124: PUSH
63125: LD_INT 0
63127: ST_TO_ADDR
// end ;
63128: LD_VAR 0 3
63132: RET
// export function HealTarget ( sci ) ; begin
63133: LD_INT 0
63135: PPUSH
// if not sci then
63136: LD_VAR 0 1
63140: NOT
63141: IFFALSE 63145
// exit ;
63143: GO 63210
// result := 0 ;
63145: LD_ADDR_VAR 0 2
63149: PUSH
63150: LD_INT 0
63152: ST_TO_ADDR
// if GetTaskList ( sci ) then
63153: LD_VAR 0 1
63157: PPUSH
63158: CALL_OW 437
63162: IFFALSE 63210
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63164: LD_VAR 0 1
63168: PPUSH
63169: CALL_OW 437
63173: PUSH
63174: LD_INT 1
63176: ARRAY
63177: PUSH
63178: LD_INT 1
63180: ARRAY
63181: PUSH
63182: LD_STRING l
63184: EQUAL
63185: IFFALSE 63210
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63187: LD_ADDR_VAR 0 2
63191: PUSH
63192: LD_VAR 0 1
63196: PPUSH
63197: CALL_OW 437
63201: PUSH
63202: LD_INT 1
63204: ARRAY
63205: PUSH
63206: LD_INT 4
63208: ARRAY
63209: ST_TO_ADDR
// end ;
63210: LD_VAR 0 2
63214: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63215: LD_INT 0
63217: PPUSH
63218: PPUSH
63219: PPUSH
63220: PPUSH
// if not base_units then
63221: LD_VAR 0 1
63225: NOT
63226: IFFALSE 63230
// exit ;
63228: GO 63317
// result := false ;
63230: LD_ADDR_VAR 0 2
63234: PUSH
63235: LD_INT 0
63237: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63238: LD_ADDR_VAR 0 5
63242: PUSH
63243: LD_VAR 0 1
63247: PPUSH
63248: LD_INT 21
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PPUSH
63258: CALL_OW 72
63262: ST_TO_ADDR
// if not tmp then
63263: LD_VAR 0 5
63267: NOT
63268: IFFALSE 63272
// exit ;
63270: GO 63317
// for i in tmp do
63272: LD_ADDR_VAR 0 3
63276: PUSH
63277: LD_VAR 0 5
63281: PUSH
63282: FOR_IN
63283: IFFALSE 63315
// begin result := EnemyInRange ( i , 22 ) ;
63285: LD_ADDR_VAR 0 2
63289: PUSH
63290: LD_VAR 0 3
63294: PPUSH
63295: LD_INT 22
63297: PPUSH
63298: CALL 60930 0 2
63302: ST_TO_ADDR
// if result then
63303: LD_VAR 0 2
63307: IFFALSE 63313
// exit ;
63309: POP
63310: POP
63311: GO 63317
// end ;
63313: GO 63282
63315: POP
63316: POP
// end ;
63317: LD_VAR 0 2
63321: RET
// export function FilterByTag ( units , tag ) ; begin
63322: LD_INT 0
63324: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63325: LD_ADDR_VAR 0 3
63329: PUSH
63330: LD_VAR 0 1
63334: PPUSH
63335: LD_INT 120
63337: PUSH
63338: LD_VAR 0 2
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PPUSH
63347: CALL_OW 72
63351: ST_TO_ADDR
// end ;
63352: LD_VAR 0 3
63356: RET
// export function IsDriver ( un ) ; begin
63357: LD_INT 0
63359: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63360: LD_ADDR_VAR 0 2
63364: PUSH
63365: LD_VAR 0 1
63369: PUSH
63370: LD_INT 55
63372: PUSH
63373: EMPTY
63374: LIST
63375: PPUSH
63376: CALL_OW 69
63380: IN
63381: ST_TO_ADDR
// end ;
63382: LD_VAR 0 2
63386: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63387: LD_INT 0
63389: PPUSH
63390: PPUSH
// list := [ ] ;
63391: LD_ADDR_VAR 0 5
63395: PUSH
63396: EMPTY
63397: ST_TO_ADDR
// case d of 0 :
63398: LD_VAR 0 3
63402: PUSH
63403: LD_INT 0
63405: DOUBLE
63406: EQUAL
63407: IFTRUE 63411
63409: GO 63544
63411: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63412: LD_ADDR_VAR 0 5
63416: PUSH
63417: LD_VAR 0 1
63421: PUSH
63422: LD_INT 4
63424: MINUS
63425: PUSH
63426: LD_VAR 0 2
63430: PUSH
63431: LD_INT 4
63433: MINUS
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: LD_INT 3
63450: MINUS
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: PUSH
63465: LD_VAR 0 1
63469: PUSH
63470: LD_INT 4
63472: PLUS
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 4
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: LD_INT 3
63494: PLUS
63495: PUSH
63496: LD_VAR 0 2
63500: PUSH
63501: LD_INT 3
63503: PLUS
63504: PUSH
63505: LD_INT 5
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: PUSH
63513: LD_VAR 0 1
63517: PUSH
63518: LD_VAR 0 2
63522: PUSH
63523: LD_INT 4
63525: PLUS
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// end ; 1 :
63542: GO 64242
63544: LD_INT 1
63546: DOUBLE
63547: EQUAL
63548: IFTRUE 63552
63550: GO 63685
63552: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63553: LD_ADDR_VAR 0 5
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_VAR 0 2
63567: PUSH
63568: LD_INT 4
63570: MINUS
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 1
63584: PUSH
63585: LD_INT 3
63587: MINUS
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 3
63596: MINUS
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 1
63610: PUSH
63611: LD_INT 4
63613: MINUS
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: LD_VAR 0 1
63632: PUSH
63633: LD_VAR 0 2
63637: PUSH
63638: LD_INT 3
63640: PLUS
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: PUSH
63650: LD_VAR 0 1
63654: PUSH
63655: LD_INT 4
63657: PLUS
63658: PUSH
63659: LD_VAR 0 2
63663: PUSH
63664: LD_INT 4
63666: PLUS
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: LIST
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// end ; 2 :
63683: GO 64242
63685: LD_INT 2
63687: DOUBLE
63688: EQUAL
63689: IFTRUE 63693
63691: GO 63822
63693: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63694: LD_ADDR_VAR 0 5
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_VAR 0 2
63708: PUSH
63709: LD_INT 3
63711: MINUS
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: LIST
63720: PUSH
63721: LD_VAR 0 1
63725: PUSH
63726: LD_INT 4
63728: PLUS
63729: PUSH
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 4
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: PUSH
63743: LD_VAR 0 1
63747: PUSH
63748: LD_VAR 0 2
63752: PUSH
63753: LD_INT 4
63755: PLUS
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: LIST
63764: PUSH
63765: LD_VAR 0 1
63769: PUSH
63770: LD_INT 3
63772: MINUS
63773: PUSH
63774: LD_VAR 0 2
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: PUSH
63787: LD_VAR 0 1
63791: PUSH
63792: LD_INT 4
63794: MINUS
63795: PUSH
63796: LD_VAR 0 2
63800: PUSH
63801: LD_INT 4
63803: MINUS
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: ST_TO_ADDR
// end ; 3 :
63820: GO 64242
63822: LD_INT 3
63824: DOUBLE
63825: EQUAL
63826: IFTRUE 63830
63828: GO 63963
63830: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63831: LD_ADDR_VAR 0 5
63835: PUSH
63836: LD_VAR 0 1
63840: PUSH
63841: LD_INT 3
63843: PLUS
63844: PUSH
63845: LD_VAR 0 2
63849: PUSH
63850: LD_INT 4
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: PUSH
63858: LD_VAR 0 1
63862: PUSH
63863: LD_INT 4
63865: PLUS
63866: PUSH
63867: LD_VAR 0 2
63871: PUSH
63872: LD_INT 4
63874: PLUS
63875: PUSH
63876: LD_INT 5
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: PUSH
63884: LD_VAR 0 1
63888: PUSH
63889: LD_INT 4
63891: MINUS
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: LIST
63905: PUSH
63906: LD_VAR 0 1
63910: PUSH
63911: LD_VAR 0 2
63915: PUSH
63916: LD_INT 4
63918: MINUS
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: LIST
63927: PUSH
63928: LD_VAR 0 1
63932: PUSH
63933: LD_INT 3
63935: MINUS
63936: PUSH
63937: LD_VAR 0 2
63941: PUSH
63942: LD_INT 3
63944: MINUS
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// end ; 4 :
63961: GO 64242
63963: LD_INT 4
63965: DOUBLE
63966: EQUAL
63967: IFTRUE 63971
63969: GO 64104
63971: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63972: LD_ADDR_VAR 0 5
63976: PUSH
63977: LD_VAR 0 1
63981: PUSH
63982: LD_VAR 0 2
63986: PUSH
63987: LD_INT 4
63989: PLUS
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: PUSH
63999: LD_VAR 0 1
64003: PUSH
64004: LD_INT 3
64006: PLUS
64007: PUSH
64008: LD_VAR 0 2
64012: PUSH
64013: LD_INT 3
64015: PLUS
64016: PUSH
64017: LD_INT 5
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: PUSH
64025: LD_VAR 0 1
64029: PUSH
64030: LD_INT 4
64032: PLUS
64033: PUSH
64034: LD_VAR 0 2
64038: PUSH
64039: LD_INT 4
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 1
64051: PUSH
64052: LD_VAR 0 2
64056: PUSH
64057: LD_INT 3
64059: MINUS
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: PUSH
64069: LD_VAR 0 1
64073: PUSH
64074: LD_INT 4
64076: MINUS
64077: PUSH
64078: LD_VAR 0 2
64082: PUSH
64083: LD_INT 4
64085: MINUS
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// end ; 5 :
64102: GO 64242
64104: LD_INT 5
64106: DOUBLE
64107: EQUAL
64108: IFTRUE 64112
64110: GO 64241
64112: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64113: LD_ADDR_VAR 0 5
64117: PUSH
64118: LD_VAR 0 1
64122: PUSH
64123: LD_INT 4
64125: MINUS
64126: PUSH
64127: LD_VAR 0 2
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: PUSH
64140: LD_VAR 0 1
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: LD_INT 4
64152: MINUS
64153: PUSH
64154: LD_INT 3
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: LIST
64161: PUSH
64162: LD_VAR 0 1
64166: PUSH
64167: LD_INT 4
64169: PLUS
64170: PUSH
64171: LD_VAR 0 2
64175: PUSH
64176: LD_INT 4
64178: PLUS
64179: PUSH
64180: LD_INT 5
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: LIST
64187: PUSH
64188: LD_VAR 0 1
64192: PUSH
64193: LD_INT 3
64195: PLUS
64196: PUSH
64197: LD_VAR 0 2
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: PUSH
64210: LD_VAR 0 1
64214: PUSH
64215: LD_VAR 0 2
64219: PUSH
64220: LD_INT 3
64222: PLUS
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: ST_TO_ADDR
// end ; end ;
64239: GO 64242
64241: POP
// result := list ;
64242: LD_ADDR_VAR 0 4
64246: PUSH
64247: LD_VAR 0 5
64251: ST_TO_ADDR
// end ;
64252: LD_VAR 0 4
64256: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64257: LD_INT 0
64259: PPUSH
64260: PPUSH
64261: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64262: LD_VAR 0 1
64266: NOT
64267: PUSH
64268: LD_VAR 0 2
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 4
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: IN
64291: NOT
64292: OR
64293: IFFALSE 64297
// exit ;
64295: GO 64389
// tmp := [ ] ;
64297: LD_ADDR_VAR 0 5
64301: PUSH
64302: EMPTY
64303: ST_TO_ADDR
// for i in units do
64304: LD_ADDR_VAR 0 4
64308: PUSH
64309: LD_VAR 0 1
64313: PUSH
64314: FOR_IN
64315: IFFALSE 64358
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64317: LD_ADDR_VAR 0 5
64321: PUSH
64322: LD_VAR 0 5
64326: PPUSH
64327: LD_VAR 0 5
64331: PUSH
64332: LD_INT 1
64334: PLUS
64335: PPUSH
64336: LD_VAR 0 4
64340: PPUSH
64341: LD_VAR 0 2
64345: PPUSH
64346: CALL_OW 259
64350: PPUSH
64351: CALL_OW 2
64355: ST_TO_ADDR
64356: GO 64314
64358: POP
64359: POP
// if not tmp then
64360: LD_VAR 0 5
64364: NOT
64365: IFFALSE 64369
// exit ;
64367: GO 64389
// result := SortListByListDesc ( units , tmp ) ;
64369: LD_ADDR_VAR 0 3
64373: PUSH
64374: LD_VAR 0 1
64378: PPUSH
64379: LD_VAR 0 5
64383: PPUSH
64384: CALL_OW 77
64388: ST_TO_ADDR
// end ;
64389: LD_VAR 0 3
64393: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64394: LD_INT 0
64396: PPUSH
64397: PPUSH
64398: PPUSH
// result := false ;
64399: LD_ADDR_VAR 0 3
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
// x := GetX ( building ) ;
64407: LD_ADDR_VAR 0 4
64411: PUSH
64412: LD_VAR 0 2
64416: PPUSH
64417: CALL_OW 250
64421: ST_TO_ADDR
// y := GetY ( building ) ;
64422: LD_ADDR_VAR 0 5
64426: PUSH
64427: LD_VAR 0 2
64431: PPUSH
64432: CALL_OW 251
64436: ST_TO_ADDR
// if not building or not x or not y then
64437: LD_VAR 0 2
64441: NOT
64442: PUSH
64443: LD_VAR 0 4
64447: NOT
64448: OR
64449: PUSH
64450: LD_VAR 0 5
64454: NOT
64455: OR
64456: IFFALSE 64460
// exit ;
64458: GO 64552
// if GetTaskList ( unit ) then
64460: LD_VAR 0 1
64464: PPUSH
64465: CALL_OW 437
64469: IFFALSE 64552
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64471: LD_STRING e
64473: PUSH
64474: LD_VAR 0 1
64478: PPUSH
64479: CALL_OW 437
64483: PUSH
64484: LD_INT 1
64486: ARRAY
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: EQUAL
64492: PUSH
64493: LD_VAR 0 4
64497: PUSH
64498: LD_VAR 0 1
64502: PPUSH
64503: CALL_OW 437
64507: PUSH
64508: LD_INT 1
64510: ARRAY
64511: PUSH
64512: LD_INT 2
64514: ARRAY
64515: EQUAL
64516: AND
64517: PUSH
64518: LD_VAR 0 5
64522: PUSH
64523: LD_VAR 0 1
64527: PPUSH
64528: CALL_OW 437
64532: PUSH
64533: LD_INT 1
64535: ARRAY
64536: PUSH
64537: LD_INT 3
64539: ARRAY
64540: EQUAL
64541: AND
64542: IFFALSE 64552
// result := true end ;
64544: LD_ADDR_VAR 0 3
64548: PUSH
64549: LD_INT 1
64551: ST_TO_ADDR
// end ;
64552: LD_VAR 0 3
64556: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64557: LD_INT 0
64559: PPUSH
// result := false ;
64560: LD_ADDR_VAR 0 4
64564: PUSH
64565: LD_INT 0
64567: ST_TO_ADDR
// if GetTaskList ( unit ) then
64568: LD_VAR 0 1
64572: PPUSH
64573: CALL_OW 437
64577: IFFALSE 64660
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64579: LD_STRING M
64581: PUSH
64582: LD_VAR 0 1
64586: PPUSH
64587: CALL_OW 437
64591: PUSH
64592: LD_INT 1
64594: ARRAY
64595: PUSH
64596: LD_INT 1
64598: ARRAY
64599: EQUAL
64600: PUSH
64601: LD_VAR 0 2
64605: PUSH
64606: LD_VAR 0 1
64610: PPUSH
64611: CALL_OW 437
64615: PUSH
64616: LD_INT 1
64618: ARRAY
64619: PUSH
64620: LD_INT 2
64622: ARRAY
64623: EQUAL
64624: AND
64625: PUSH
64626: LD_VAR 0 3
64630: PUSH
64631: LD_VAR 0 1
64635: PPUSH
64636: CALL_OW 437
64640: PUSH
64641: LD_INT 1
64643: ARRAY
64644: PUSH
64645: LD_INT 3
64647: ARRAY
64648: EQUAL
64649: AND
64650: IFFALSE 64660
// result := true ;
64652: LD_ADDR_VAR 0 4
64656: PUSH
64657: LD_INT 1
64659: ST_TO_ADDR
// end ; end ;
64660: LD_VAR 0 4
64664: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64665: LD_INT 0
64667: PPUSH
64668: PPUSH
64669: PPUSH
64670: PPUSH
// if not unit or not area then
64671: LD_VAR 0 1
64675: NOT
64676: PUSH
64677: LD_VAR 0 2
64681: NOT
64682: OR
64683: IFFALSE 64687
// exit ;
64685: GO 64851
// tmp := AreaToList ( area , i ) ;
64687: LD_ADDR_VAR 0 6
64691: PUSH
64692: LD_VAR 0 2
64696: PPUSH
64697: LD_VAR 0 5
64701: PPUSH
64702: CALL_OW 517
64706: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64707: LD_ADDR_VAR 0 5
64711: PUSH
64712: DOUBLE
64713: LD_INT 1
64715: DEC
64716: ST_TO_ADDR
64717: LD_VAR 0 6
64721: PUSH
64722: LD_INT 1
64724: ARRAY
64725: PUSH
64726: FOR_TO
64727: IFFALSE 64849
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64729: LD_ADDR_VAR 0 7
64733: PUSH
64734: LD_VAR 0 6
64738: PUSH
64739: LD_INT 1
64741: ARRAY
64742: PUSH
64743: LD_VAR 0 5
64747: ARRAY
64748: PUSH
64749: LD_VAR 0 6
64753: PUSH
64754: LD_INT 2
64756: ARRAY
64757: PUSH
64758: LD_VAR 0 5
64762: ARRAY
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64768: LD_VAR 0 7
64772: PUSH
64773: LD_INT 1
64775: ARRAY
64776: PPUSH
64777: LD_VAR 0 7
64781: PUSH
64782: LD_INT 2
64784: ARRAY
64785: PPUSH
64786: CALL_OW 428
64790: PUSH
64791: LD_INT 0
64793: EQUAL
64794: IFFALSE 64847
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64796: LD_VAR 0 1
64800: PPUSH
64801: LD_VAR 0 7
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: PPUSH
64810: LD_VAR 0 7
64814: PUSH
64815: LD_INT 2
64817: ARRAY
64818: PPUSH
64819: LD_VAR 0 3
64823: PPUSH
64824: CALL_OW 48
// result := IsPlaced ( unit ) ;
64828: LD_ADDR_VAR 0 4
64832: PUSH
64833: LD_VAR 0 1
64837: PPUSH
64838: CALL_OW 305
64842: ST_TO_ADDR
// exit ;
64843: POP
64844: POP
64845: GO 64851
// end ; end ;
64847: GO 64726
64849: POP
64850: POP
// end ;
64851: LD_VAR 0 4
64855: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64856: LD_INT 0
64858: PPUSH
64859: PPUSH
64860: PPUSH
// if not side or side > 8 then
64861: LD_VAR 0 1
64865: NOT
64866: PUSH
64867: LD_VAR 0 1
64871: PUSH
64872: LD_INT 8
64874: GREATER
64875: OR
64876: IFFALSE 64880
// exit ;
64878: GO 65067
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64880: LD_ADDR_VAR 0 4
64884: PUSH
64885: LD_INT 22
64887: PUSH
64888: LD_VAR 0 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 21
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PPUSH
64911: CALL_OW 69
64915: ST_TO_ADDR
// if not tmp then
64916: LD_VAR 0 4
64920: NOT
64921: IFFALSE 64925
// exit ;
64923: GO 65067
// enable_addtolog := true ;
64925: LD_ADDR_OWVAR 81
64929: PUSH
64930: LD_INT 1
64932: ST_TO_ADDR
// AddToLog ( [ ) ;
64933: LD_STRING [
64935: PPUSH
64936: CALL_OW 561
// for i in tmp do
64940: LD_ADDR_VAR 0 3
64944: PUSH
64945: LD_VAR 0 4
64949: PUSH
64950: FOR_IN
64951: IFFALSE 65058
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64953: LD_STRING [
64955: PUSH
64956: LD_VAR 0 3
64960: PPUSH
64961: CALL_OW 266
64965: STR
64966: PUSH
64967: LD_STRING , 
64969: STR
64970: PUSH
64971: LD_VAR 0 3
64975: PPUSH
64976: CALL_OW 250
64980: STR
64981: PUSH
64982: LD_STRING , 
64984: STR
64985: PUSH
64986: LD_VAR 0 3
64990: PPUSH
64991: CALL_OW 251
64995: STR
64996: PUSH
64997: LD_STRING , 
64999: STR
65000: PUSH
65001: LD_VAR 0 3
65005: PPUSH
65006: CALL_OW 254
65010: STR
65011: PUSH
65012: LD_STRING , 
65014: STR
65015: PUSH
65016: LD_VAR 0 3
65020: PPUSH
65021: LD_INT 1
65023: PPUSH
65024: CALL_OW 268
65028: STR
65029: PUSH
65030: LD_STRING , 
65032: STR
65033: PUSH
65034: LD_VAR 0 3
65038: PPUSH
65039: LD_INT 2
65041: PPUSH
65042: CALL_OW 268
65046: STR
65047: PUSH
65048: LD_STRING ],
65050: STR
65051: PPUSH
65052: CALL_OW 561
// end ;
65056: GO 64950
65058: POP
65059: POP
// AddToLog ( ]; ) ;
65060: LD_STRING ];
65062: PPUSH
65063: CALL_OW 561
// end ;
65067: LD_VAR 0 2
65071: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65072: LD_INT 0
65074: PPUSH
65075: PPUSH
65076: PPUSH
65077: PPUSH
65078: PPUSH
// if not area or not rate or not max then
65079: LD_VAR 0 1
65083: NOT
65084: PUSH
65085: LD_VAR 0 2
65089: NOT
65090: OR
65091: PUSH
65092: LD_VAR 0 4
65096: NOT
65097: OR
65098: IFFALSE 65102
// exit ;
65100: GO 65291
// while 1 do
65102: LD_INT 1
65104: IFFALSE 65291
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65106: LD_ADDR_VAR 0 9
65110: PUSH
65111: LD_VAR 0 1
65115: PPUSH
65116: LD_INT 1
65118: PPUSH
65119: CALL_OW 287
65123: PUSH
65124: LD_INT 10
65126: MUL
65127: ST_TO_ADDR
// r := rate / 10 ;
65128: LD_ADDR_VAR 0 7
65132: PUSH
65133: LD_VAR 0 2
65137: PUSH
65138: LD_INT 10
65140: DIVREAL
65141: ST_TO_ADDR
// time := 1 1$00 ;
65142: LD_ADDR_VAR 0 8
65146: PUSH
65147: LD_INT 2100
65149: ST_TO_ADDR
// if amount < min then
65150: LD_VAR 0 9
65154: PUSH
65155: LD_VAR 0 3
65159: LESS
65160: IFFALSE 65178
// r := r * 2 else
65162: LD_ADDR_VAR 0 7
65166: PUSH
65167: LD_VAR 0 7
65171: PUSH
65172: LD_INT 2
65174: MUL
65175: ST_TO_ADDR
65176: GO 65204
// if amount > max then
65178: LD_VAR 0 9
65182: PUSH
65183: LD_VAR 0 4
65187: GREATER
65188: IFFALSE 65204
// r := r / 2 ;
65190: LD_ADDR_VAR 0 7
65194: PUSH
65195: LD_VAR 0 7
65199: PUSH
65200: LD_INT 2
65202: DIVREAL
65203: ST_TO_ADDR
// time := time / r ;
65204: LD_ADDR_VAR 0 8
65208: PUSH
65209: LD_VAR 0 8
65213: PUSH
65214: LD_VAR 0 7
65218: DIVREAL
65219: ST_TO_ADDR
// if time < 0 then
65220: LD_VAR 0 8
65224: PUSH
65225: LD_INT 0
65227: LESS
65228: IFFALSE 65245
// time := time * - 1 ;
65230: LD_ADDR_VAR 0 8
65234: PUSH
65235: LD_VAR 0 8
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: MUL
65244: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65245: LD_VAR 0 8
65249: PUSH
65250: LD_INT 35
65252: PPUSH
65253: LD_INT 875
65255: PPUSH
65256: CALL_OW 12
65260: PLUS
65261: PPUSH
65262: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65266: LD_INT 1
65268: PPUSH
65269: LD_INT 5
65271: PPUSH
65272: CALL_OW 12
65276: PPUSH
65277: LD_VAR 0 1
65281: PPUSH
65282: LD_INT 1
65284: PPUSH
65285: CALL_OW 55
// end ;
65289: GO 65102
// end ;
65291: LD_VAR 0 5
65295: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65296: LD_INT 0
65298: PPUSH
65299: PPUSH
65300: PPUSH
65301: PPUSH
65302: PPUSH
65303: PPUSH
65304: PPUSH
65305: PPUSH
// if not turrets or not factories then
65306: LD_VAR 0 1
65310: NOT
65311: PUSH
65312: LD_VAR 0 2
65316: NOT
65317: OR
65318: IFFALSE 65322
// exit ;
65320: GO 65629
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65322: LD_ADDR_VAR 0 10
65326: PUSH
65327: LD_INT 5
65329: PUSH
65330: LD_INT 6
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: LD_INT 5
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 24
65364: PUSH
65365: LD_INT 25
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 23
65374: PUSH
65375: LD_INT 27
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 42
65388: PUSH
65389: LD_INT 43
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 44
65398: PUSH
65399: LD_INT 46
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 45
65408: PUSH
65409: LD_INT 47
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: LIST
65425: ST_TO_ADDR
// result := [ ] ;
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: EMPTY
65432: ST_TO_ADDR
// for i in turrets do
65433: LD_ADDR_VAR 0 4
65437: PUSH
65438: LD_VAR 0 1
65442: PUSH
65443: FOR_IN
65444: IFFALSE 65627
// begin nat := GetNation ( i ) ;
65446: LD_ADDR_VAR 0 7
65450: PUSH
65451: LD_VAR 0 4
65455: PPUSH
65456: CALL_OW 248
65460: ST_TO_ADDR
// weapon := 0 ;
65461: LD_ADDR_VAR 0 8
65465: PUSH
65466: LD_INT 0
65468: ST_TO_ADDR
// if not nat then
65469: LD_VAR 0 7
65473: NOT
65474: IFFALSE 65478
// continue ;
65476: GO 65443
// for j in list [ nat ] do
65478: LD_ADDR_VAR 0 5
65482: PUSH
65483: LD_VAR 0 10
65487: PUSH
65488: LD_VAR 0 7
65492: ARRAY
65493: PUSH
65494: FOR_IN
65495: IFFALSE 65536
// if GetBWeapon ( i ) = j [ 1 ] then
65497: LD_VAR 0 4
65501: PPUSH
65502: CALL_OW 269
65506: PUSH
65507: LD_VAR 0 5
65511: PUSH
65512: LD_INT 1
65514: ARRAY
65515: EQUAL
65516: IFFALSE 65534
// begin weapon := j [ 2 ] ;
65518: LD_ADDR_VAR 0 8
65522: PUSH
65523: LD_VAR 0 5
65527: PUSH
65528: LD_INT 2
65530: ARRAY
65531: ST_TO_ADDR
// break ;
65532: GO 65536
// end ;
65534: GO 65494
65536: POP
65537: POP
// if not weapon then
65538: LD_VAR 0 8
65542: NOT
65543: IFFALSE 65547
// continue ;
65545: GO 65443
// for k in factories do
65547: LD_ADDR_VAR 0 6
65551: PUSH
65552: LD_VAR 0 2
65556: PUSH
65557: FOR_IN
65558: IFFALSE 65623
// begin weapons := AvailableWeaponList ( k ) ;
65560: LD_ADDR_VAR 0 9
65564: PUSH
65565: LD_VAR 0 6
65569: PPUSH
65570: CALL_OW 478
65574: ST_TO_ADDR
// if not weapons then
65575: LD_VAR 0 9
65579: NOT
65580: IFFALSE 65584
// continue ;
65582: GO 65557
// if weapon in weapons then
65584: LD_VAR 0 8
65588: PUSH
65589: LD_VAR 0 9
65593: IN
65594: IFFALSE 65621
// begin result := [ i , weapon ] ;
65596: LD_ADDR_VAR 0 3
65600: PUSH
65601: LD_VAR 0 4
65605: PUSH
65606: LD_VAR 0 8
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// exit ;
65615: POP
65616: POP
65617: POP
65618: POP
65619: GO 65629
// end ; end ;
65621: GO 65557
65623: POP
65624: POP
// end ;
65625: GO 65443
65627: POP
65628: POP
// end ;
65629: LD_VAR 0 3
65633: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65634: LD_INT 0
65636: PPUSH
// if not side or side > 8 then
65637: LD_VAR 0 3
65641: NOT
65642: PUSH
65643: LD_VAR 0 3
65647: PUSH
65648: LD_INT 8
65650: GREATER
65651: OR
65652: IFFALSE 65656
// exit ;
65654: GO 65715
// if not range then
65656: LD_VAR 0 4
65660: NOT
65661: IFFALSE 65672
// range := - 12 ;
65663: LD_ADDR_VAR 0 4
65667: PUSH
65668: LD_INT 12
65670: NEG
65671: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65672: LD_VAR 0 1
65676: PPUSH
65677: LD_VAR 0 2
65681: PPUSH
65682: LD_VAR 0 3
65686: PPUSH
65687: LD_VAR 0 4
65691: PPUSH
65692: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65696: LD_VAR 0 1
65700: PPUSH
65701: LD_VAR 0 2
65705: PPUSH
65706: LD_VAR 0 3
65710: PPUSH
65711: CALL_OW 331
// end ;
65715: LD_VAR 0 5
65719: RET
// export function Video ( mode ) ; begin
65720: LD_INT 0
65722: PPUSH
// ingame_video = mode ;
65723: LD_ADDR_OWVAR 52
65727: PUSH
65728: LD_VAR 0 1
65732: ST_TO_ADDR
// interface_hidden = mode ;
65733: LD_ADDR_OWVAR 54
65737: PUSH
65738: LD_VAR 0 1
65742: ST_TO_ADDR
// end ;
65743: LD_VAR 0 2
65747: RET
// export function Join ( array , element ) ; begin
65748: LD_INT 0
65750: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65751: LD_ADDR_VAR 0 3
65755: PUSH
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 1
65765: PUSH
65766: LD_INT 1
65768: PLUS
65769: PPUSH
65770: LD_VAR 0 2
65774: PPUSH
65775: CALL_OW 1
65779: ST_TO_ADDR
// end ;
65780: LD_VAR 0 3
65784: RET
// export function JoinUnion ( array , element ) ; begin
65785: LD_INT 0
65787: PPUSH
// result := array union element ;
65788: LD_ADDR_VAR 0 3
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_VAR 0 2
65802: UNION
65803: ST_TO_ADDR
// end ;
65804: LD_VAR 0 3
65808: RET
// export function GetBehemoths ( side ) ; begin
65809: LD_INT 0
65811: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_INT 22
65819: PUSH
65820: LD_VAR 0 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 31
65831: PUSH
65832: LD_INT 25
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PPUSH
65843: CALL_OW 69
65847: ST_TO_ADDR
// end ;
65848: LD_VAR 0 2
65852: RET
// export function Shuffle ( array ) ; var i , index ; begin
65853: LD_INT 0
65855: PPUSH
65856: PPUSH
65857: PPUSH
// result := [ ] ;
65858: LD_ADDR_VAR 0 2
65862: PUSH
65863: EMPTY
65864: ST_TO_ADDR
// if not array then
65865: LD_VAR 0 1
65869: NOT
65870: IFFALSE 65874
// exit ;
65872: GO 65973
// Randomize ;
65874: CALL_OW 10
// for i = array downto 1 do
65878: LD_ADDR_VAR 0 3
65882: PUSH
65883: DOUBLE
65884: LD_VAR 0 1
65888: INC
65889: ST_TO_ADDR
65890: LD_INT 1
65892: PUSH
65893: FOR_DOWNTO
65894: IFFALSE 65971
// begin index := rand ( 1 , array ) ;
65896: LD_ADDR_VAR 0 4
65900: PUSH
65901: LD_INT 1
65903: PPUSH
65904: LD_VAR 0 1
65908: PPUSH
65909: CALL_OW 12
65913: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65914: LD_ADDR_VAR 0 2
65918: PUSH
65919: LD_VAR 0 2
65923: PPUSH
65924: LD_VAR 0 2
65928: PUSH
65929: LD_INT 1
65931: PLUS
65932: PPUSH
65933: LD_VAR 0 1
65937: PUSH
65938: LD_VAR 0 4
65942: ARRAY
65943: PPUSH
65944: CALL_OW 2
65948: ST_TO_ADDR
// array := Delete ( array , index ) ;
65949: LD_ADDR_VAR 0 1
65953: PUSH
65954: LD_VAR 0 1
65958: PPUSH
65959: LD_VAR 0 4
65963: PPUSH
65964: CALL_OW 3
65968: ST_TO_ADDR
// end ;
65969: GO 65893
65971: POP
65972: POP
// end ;
65973: LD_VAR 0 2
65977: RET
// export function GetBaseMaterials ( base ) ; begin
65978: LD_INT 0
65980: PPUSH
// result := [ 0 , 0 , 0 ] ;
65981: LD_ADDR_VAR 0 2
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: ST_TO_ADDR
// if not base then
66000: LD_VAR 0 1
66004: NOT
66005: IFFALSE 66009
// exit ;
66007: GO 66058
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66009: LD_ADDR_VAR 0 2
66013: PUSH
66014: LD_VAR 0 1
66018: PPUSH
66019: LD_INT 1
66021: PPUSH
66022: CALL_OW 275
66026: PUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: LD_INT 2
66034: PPUSH
66035: CALL_OW 275
66039: PUSH
66040: LD_VAR 0 1
66044: PPUSH
66045: LD_INT 3
66047: PPUSH
66048: CALL_OW 275
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: ST_TO_ADDR
// end ;
66058: LD_VAR 0 2
66062: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
// result := array ;
66067: LD_ADDR_VAR 0 3
66071: PUSH
66072: LD_VAR 0 1
66076: ST_TO_ADDR
// if size >= result then
66077: LD_VAR 0 2
66081: PUSH
66082: LD_VAR 0 3
66086: GREATEREQUAL
66087: IFFALSE 66091
// exit ;
66089: GO 66141
// if size then
66091: LD_VAR 0 2
66095: IFFALSE 66141
// for i := array downto size do
66097: LD_ADDR_VAR 0 4
66101: PUSH
66102: DOUBLE
66103: LD_VAR 0 1
66107: INC
66108: ST_TO_ADDR
66109: LD_VAR 0 2
66113: PUSH
66114: FOR_DOWNTO
66115: IFFALSE 66139
// result := Delete ( result , result ) ;
66117: LD_ADDR_VAR 0 3
66121: PUSH
66122: LD_VAR 0 3
66126: PPUSH
66127: LD_VAR 0 3
66131: PPUSH
66132: CALL_OW 3
66136: ST_TO_ADDR
66137: GO 66114
66139: POP
66140: POP
// end ;
66141: LD_VAR 0 3
66145: RET
// export function ComExit ( unit ) ; var tmp ; begin
66146: LD_INT 0
66148: PPUSH
66149: PPUSH
// if not IsInUnit ( unit ) then
66150: LD_VAR 0 1
66154: PPUSH
66155: CALL_OW 310
66159: NOT
66160: IFFALSE 66164
// exit ;
66162: GO 66224
// tmp := IsInUnit ( unit ) ;
66164: LD_ADDR_VAR 0 3
66168: PUSH
66169: LD_VAR 0 1
66173: PPUSH
66174: CALL_OW 310
66178: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66179: LD_VAR 0 3
66183: PPUSH
66184: CALL_OW 247
66188: PUSH
66189: LD_INT 2
66191: EQUAL
66192: IFFALSE 66205
// ComExitVehicle ( unit ) else
66194: LD_VAR 0 1
66198: PPUSH
66199: CALL_OW 121
66203: GO 66214
// ComExitBuilding ( unit ) ;
66205: LD_VAR 0 1
66209: PPUSH
66210: CALL_OW 122
// result := tmp ;
66214: LD_ADDR_VAR 0 2
66218: PUSH
66219: LD_VAR 0 3
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 2
66228: RET
// export function ComExitAll ( units ) ; var i ; begin
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
// if not units then
66233: LD_VAR 0 1
66237: NOT
66238: IFFALSE 66242
// exit ;
66240: GO 66268
// for i in units do
66242: LD_ADDR_VAR 0 3
66246: PUSH
66247: LD_VAR 0 1
66251: PUSH
66252: FOR_IN
66253: IFFALSE 66266
// ComExit ( i ) ;
66255: LD_VAR 0 3
66259: PPUSH
66260: CALL 66146 0 1
66264: GO 66252
66266: POP
66267: POP
// end ;
66268: LD_VAR 0 2
66272: RET
// export function ResetHc ; begin
66273: LD_INT 0
66275: PPUSH
// InitHc ;
66276: CALL_OW 19
// hc_importance := 0 ;
66280: LD_ADDR_OWVAR 32
66284: PUSH
66285: LD_INT 0
66287: ST_TO_ADDR
// end ;
66288: LD_VAR 0 1
66292: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66293: LD_INT 0
66295: PPUSH
66296: PPUSH
66297: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66298: LD_ADDR_VAR 0 6
66302: PUSH
66303: LD_VAR 0 1
66307: PUSH
66308: LD_VAR 0 3
66312: PLUS
66313: PUSH
66314: LD_INT 2
66316: DIV
66317: ST_TO_ADDR
// if _x < 0 then
66318: LD_VAR 0 6
66322: PUSH
66323: LD_INT 0
66325: LESS
66326: IFFALSE 66343
// _x := _x * - 1 ;
66328: LD_ADDR_VAR 0 6
66332: PUSH
66333: LD_VAR 0 6
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: MUL
66342: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66343: LD_ADDR_VAR 0 7
66347: PUSH
66348: LD_VAR 0 2
66352: PUSH
66353: LD_VAR 0 4
66357: PLUS
66358: PUSH
66359: LD_INT 2
66361: DIV
66362: ST_TO_ADDR
// if _y < 0 then
66363: LD_VAR 0 7
66367: PUSH
66368: LD_INT 0
66370: LESS
66371: IFFALSE 66388
// _y := _y * - 1 ;
66373: LD_ADDR_VAR 0 7
66377: PUSH
66378: LD_VAR 0 7
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: MUL
66387: ST_TO_ADDR
// result := [ _x , _y ] ;
66388: LD_ADDR_VAR 0 5
66392: PUSH
66393: LD_VAR 0 6
66397: PUSH
66398: LD_VAR 0 7
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// end ;
66407: LD_VAR 0 5
66411: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66412: LD_INT 0
66414: PPUSH
66415: PPUSH
66416: PPUSH
66417: PPUSH
// task := GetTaskList ( unit ) ;
66418: LD_ADDR_VAR 0 7
66422: PUSH
66423: LD_VAR 0 1
66427: PPUSH
66428: CALL_OW 437
66432: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66433: LD_VAR 0 7
66437: NOT
66438: PUSH
66439: LD_VAR 0 1
66443: PPUSH
66444: LD_VAR 0 2
66448: PPUSH
66449: CALL_OW 308
66453: NOT
66454: AND
66455: IFFALSE 66459
// exit ;
66457: GO 66577
// if IsInArea ( unit , area ) then
66459: LD_VAR 0 1
66463: PPUSH
66464: LD_VAR 0 2
66468: PPUSH
66469: CALL_OW 308
66473: IFFALSE 66491
// begin ComMoveToArea ( unit , goAway ) ;
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 3
66484: PPUSH
66485: CALL_OW 113
// exit ;
66489: GO 66577
// end ; if task [ 1 ] [ 1 ] <> M then
66491: LD_VAR 0 7
66495: PUSH
66496: LD_INT 1
66498: ARRAY
66499: PUSH
66500: LD_INT 1
66502: ARRAY
66503: PUSH
66504: LD_STRING M
66506: NONEQUAL
66507: IFFALSE 66511
// exit ;
66509: GO 66577
// x := task [ 1 ] [ 2 ] ;
66511: LD_ADDR_VAR 0 5
66515: PUSH
66516: LD_VAR 0 7
66520: PUSH
66521: LD_INT 1
66523: ARRAY
66524: PUSH
66525: LD_INT 2
66527: ARRAY
66528: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66529: LD_ADDR_VAR 0 6
66533: PUSH
66534: LD_VAR 0 7
66538: PUSH
66539: LD_INT 1
66541: ARRAY
66542: PUSH
66543: LD_INT 3
66545: ARRAY
66546: ST_TO_ADDR
// if InArea ( x , y , area ) then
66547: LD_VAR 0 5
66551: PPUSH
66552: LD_VAR 0 6
66556: PPUSH
66557: LD_VAR 0 2
66561: PPUSH
66562: CALL_OW 309
66566: IFFALSE 66577
// ComStop ( unit ) ;
66568: LD_VAR 0 1
66572: PPUSH
66573: CALL_OW 141
// end ;
66577: LD_VAR 0 4
66581: RET
// export function Abs ( value ) ; begin
66582: LD_INT 0
66584: PPUSH
// result := value ;
66585: LD_ADDR_VAR 0 2
66589: PUSH
66590: LD_VAR 0 1
66594: ST_TO_ADDR
// if value < 0 then
66595: LD_VAR 0 1
66599: PUSH
66600: LD_INT 0
66602: LESS
66603: IFFALSE 66620
// result := value * - 1 ;
66605: LD_ADDR_VAR 0 2
66609: PUSH
66610: LD_VAR 0 1
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: MUL
66619: ST_TO_ADDR
// end ;
66620: LD_VAR 0 2
66624: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66625: LD_INT 0
66627: PPUSH
66628: PPUSH
66629: PPUSH
66630: PPUSH
66631: PPUSH
66632: PPUSH
66633: PPUSH
66634: PPUSH
// if not unit or not building then
66635: LD_VAR 0 1
66639: NOT
66640: PUSH
66641: LD_VAR 0 2
66645: NOT
66646: OR
66647: IFFALSE 66651
// exit ;
66649: GO 66877
// x := GetX ( building ) ;
66651: LD_ADDR_VAR 0 4
66655: PUSH
66656: LD_VAR 0 2
66660: PPUSH
66661: CALL_OW 250
66665: ST_TO_ADDR
// y := GetY ( building ) ;
66666: LD_ADDR_VAR 0 6
66670: PUSH
66671: LD_VAR 0 2
66675: PPUSH
66676: CALL_OW 251
66680: ST_TO_ADDR
// d := GetDir ( building ) ;
66681: LD_ADDR_VAR 0 8
66685: PUSH
66686: LD_VAR 0 2
66690: PPUSH
66691: CALL_OW 254
66695: ST_TO_ADDR
// r := 4 ;
66696: LD_ADDR_VAR 0 9
66700: PUSH
66701: LD_INT 4
66703: ST_TO_ADDR
// for i := 1 to 5 do
66704: LD_ADDR_VAR 0 10
66708: PUSH
66709: DOUBLE
66710: LD_INT 1
66712: DEC
66713: ST_TO_ADDR
66714: LD_INT 5
66716: PUSH
66717: FOR_TO
66718: IFFALSE 66875
// begin _x := ShiftX ( x , d , r + i ) ;
66720: LD_ADDR_VAR 0 5
66724: PUSH
66725: LD_VAR 0 4
66729: PPUSH
66730: LD_VAR 0 8
66734: PPUSH
66735: LD_VAR 0 9
66739: PUSH
66740: LD_VAR 0 10
66744: PLUS
66745: PPUSH
66746: CALL_OW 272
66750: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66751: LD_ADDR_VAR 0 7
66755: PUSH
66756: LD_VAR 0 6
66760: PPUSH
66761: LD_VAR 0 8
66765: PPUSH
66766: LD_VAR 0 9
66770: PUSH
66771: LD_VAR 0 10
66775: PLUS
66776: PPUSH
66777: CALL_OW 273
66781: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66782: LD_VAR 0 5
66786: PPUSH
66787: LD_VAR 0 7
66791: PPUSH
66792: CALL_OW 488
66796: PUSH
66797: LD_VAR 0 5
66801: PPUSH
66802: LD_VAR 0 7
66806: PPUSH
66807: CALL_OW 428
66811: PPUSH
66812: CALL_OW 247
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: IN
66827: NOT
66828: AND
66829: IFFALSE 66873
// begin ComMoveXY ( unit , _x , _y ) ;
66831: LD_VAR 0 1
66835: PPUSH
66836: LD_VAR 0 5
66840: PPUSH
66841: LD_VAR 0 7
66845: PPUSH
66846: CALL_OW 111
// result := [ _x , _y ] ;
66850: LD_ADDR_VAR 0 3
66854: PUSH
66855: LD_VAR 0 5
66859: PUSH
66860: LD_VAR 0 7
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: ST_TO_ADDR
// exit ;
66869: POP
66870: POP
66871: GO 66877
// end ; end ;
66873: GO 66717
66875: POP
66876: POP
// end ;
66877: LD_VAR 0 3
66881: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66882: LD_INT 0
66884: PPUSH
66885: PPUSH
66886: PPUSH
// result := 0 ;
66887: LD_ADDR_VAR 0 3
66891: PUSH
66892: LD_INT 0
66894: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66895: LD_VAR 0 1
66899: PUSH
66900: LD_INT 0
66902: LESS
66903: PUSH
66904: LD_VAR 0 1
66908: PUSH
66909: LD_INT 8
66911: GREATER
66912: OR
66913: PUSH
66914: LD_VAR 0 2
66918: PUSH
66919: LD_INT 0
66921: LESS
66922: OR
66923: PUSH
66924: LD_VAR 0 2
66928: PUSH
66929: LD_INT 8
66931: GREATER
66932: OR
66933: IFFALSE 66937
// exit ;
66935: GO 67012
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66937: LD_ADDR_VAR 0 4
66941: PUSH
66942: LD_INT 22
66944: PUSH
66945: LD_VAR 0 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PPUSH
66954: CALL_OW 69
66958: PUSH
66959: FOR_IN
66960: IFFALSE 67010
// begin un := UnitShoot ( i ) ;
66962: LD_ADDR_VAR 0 5
66966: PUSH
66967: LD_VAR 0 4
66971: PPUSH
66972: CALL_OW 504
66976: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66977: LD_VAR 0 5
66981: PPUSH
66982: CALL_OW 255
66986: PUSH
66987: LD_VAR 0 1
66991: EQUAL
66992: IFFALSE 67008
// begin result := un ;
66994: LD_ADDR_VAR 0 3
66998: PUSH
66999: LD_VAR 0 5
67003: ST_TO_ADDR
// exit ;
67004: POP
67005: POP
67006: GO 67012
// end ; end ;
67008: GO 66959
67010: POP
67011: POP
// end ;
67012: LD_VAR 0 3
67016: RET
// export function GetCargoBay ( units ) ; begin
67017: LD_INT 0
67019: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67020: LD_ADDR_VAR 0 2
67024: PUSH
67025: LD_VAR 0 1
67029: PPUSH
67030: LD_INT 2
67032: PUSH
67033: LD_INT 34
67035: PUSH
67036: LD_INT 12
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 34
67045: PUSH
67046: LD_INT 51
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 34
67055: PUSH
67056: LD_INT 32
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 34
67065: PUSH
67066: LD_INT 89
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: PPUSH
67080: CALL_OW 72
67084: ST_TO_ADDR
// end ;
67085: LD_VAR 0 2
67089: RET
// export function Negate ( value ) ; begin
67090: LD_INT 0
67092: PPUSH
// result := not value ;
67093: LD_ADDR_VAR 0 2
67097: PUSH
67098: LD_VAR 0 1
67102: NOT
67103: ST_TO_ADDR
// end ;
67104: LD_VAR 0 2
67108: RET
// export function Inc ( value ) ; begin
67109: LD_INT 0
67111: PPUSH
// result := value + 1 ;
67112: LD_ADDR_VAR 0 2
67116: PUSH
67117: LD_VAR 0 1
67121: PUSH
67122: LD_INT 1
67124: PLUS
67125: ST_TO_ADDR
// end ;
67126: LD_VAR 0 2
67130: RET
// export function Dec ( value ) ; begin
67131: LD_INT 0
67133: PPUSH
// result := value - 1 ;
67134: LD_ADDR_VAR 0 2
67138: PUSH
67139: LD_VAR 0 1
67143: PUSH
67144: LD_INT 1
67146: MINUS
67147: ST_TO_ADDR
// end ;
67148: LD_VAR 0 2
67152: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67153: LD_INT 0
67155: PPUSH
67156: PPUSH
67157: PPUSH
67158: PPUSH
67159: PPUSH
67160: PPUSH
67161: PPUSH
67162: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67163: LD_VAR 0 1
67167: PPUSH
67168: LD_VAR 0 2
67172: PPUSH
67173: CALL_OW 488
67177: NOT
67178: PUSH
67179: LD_VAR 0 3
67183: PPUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: CALL_OW 488
67193: NOT
67194: OR
67195: IFFALSE 67208
// begin result := - 1 ;
67197: LD_ADDR_VAR 0 5
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: ST_TO_ADDR
// exit ;
67206: GO 67443
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67208: LD_ADDR_VAR 0 12
67212: PUSH
67213: LD_VAR 0 1
67217: PPUSH
67218: LD_VAR 0 2
67222: PPUSH
67223: LD_VAR 0 3
67227: PPUSH
67228: LD_VAR 0 4
67232: PPUSH
67233: CALL 66293 0 4
67237: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67238: LD_ADDR_VAR 0 11
67242: PUSH
67243: LD_VAR 0 1
67247: PPUSH
67248: LD_VAR 0 2
67252: PPUSH
67253: LD_VAR 0 12
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PPUSH
67262: LD_VAR 0 12
67266: PUSH
67267: LD_INT 2
67269: ARRAY
67270: PPUSH
67271: CALL_OW 298
67275: ST_TO_ADDR
// distance := 9999 ;
67276: LD_ADDR_VAR 0 10
67280: PUSH
67281: LD_INT 9999
67283: ST_TO_ADDR
// for i := 0 to 5 do
67284: LD_ADDR_VAR 0 6
67288: PUSH
67289: DOUBLE
67290: LD_INT 0
67292: DEC
67293: ST_TO_ADDR
67294: LD_INT 5
67296: PUSH
67297: FOR_TO
67298: IFFALSE 67441
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67300: LD_ADDR_VAR 0 7
67304: PUSH
67305: LD_VAR 0 1
67309: PPUSH
67310: LD_VAR 0 6
67314: PPUSH
67315: LD_VAR 0 11
67319: PPUSH
67320: CALL_OW 272
67324: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67325: LD_ADDR_VAR 0 8
67329: PUSH
67330: LD_VAR 0 2
67334: PPUSH
67335: LD_VAR 0 6
67339: PPUSH
67340: LD_VAR 0 11
67344: PPUSH
67345: CALL_OW 273
67349: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67350: LD_VAR 0 7
67354: PPUSH
67355: LD_VAR 0 8
67359: PPUSH
67360: CALL_OW 488
67364: NOT
67365: IFFALSE 67369
// continue ;
67367: GO 67297
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67369: LD_ADDR_VAR 0 9
67373: PUSH
67374: LD_VAR 0 12
67378: PUSH
67379: LD_INT 1
67381: ARRAY
67382: PPUSH
67383: LD_VAR 0 12
67387: PUSH
67388: LD_INT 2
67390: ARRAY
67391: PPUSH
67392: LD_VAR 0 7
67396: PPUSH
67397: LD_VAR 0 8
67401: PPUSH
67402: CALL_OW 298
67406: ST_TO_ADDR
// if tmp < distance then
67407: LD_VAR 0 9
67411: PUSH
67412: LD_VAR 0 10
67416: LESS
67417: IFFALSE 67439
// begin result := i ;
67419: LD_ADDR_VAR 0 5
67423: PUSH
67424: LD_VAR 0 6
67428: ST_TO_ADDR
// distance := tmp ;
67429: LD_ADDR_VAR 0 10
67433: PUSH
67434: LD_VAR 0 9
67438: ST_TO_ADDR
// end ; end ;
67439: GO 67297
67441: POP
67442: POP
// end ;
67443: LD_VAR 0 5
67447: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67448: LD_INT 0
67450: PPUSH
67451: PPUSH
// if not driver or not IsInUnit ( driver ) then
67452: LD_VAR 0 1
67456: NOT
67457: PUSH
67458: LD_VAR 0 1
67462: PPUSH
67463: CALL_OW 310
67467: NOT
67468: OR
67469: IFFALSE 67473
// exit ;
67471: GO 67563
// vehicle := IsInUnit ( driver ) ;
67473: LD_ADDR_VAR 0 3
67477: PUSH
67478: LD_VAR 0 1
67482: PPUSH
67483: CALL_OW 310
67487: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67488: LD_VAR 0 1
67492: PPUSH
67493: LD_STRING \
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: PUSH
67523: LD_STRING E
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: LD_VAR 0 3
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PPUSH
67559: CALL_OW 446
// end ;
67563: LD_VAR 0 2
67567: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67568: LD_INT 0
67570: PPUSH
67571: PPUSH
// if not driver or not IsInUnit ( driver ) then
67572: LD_VAR 0 1
67576: NOT
67577: PUSH
67578: LD_VAR 0 1
67582: PPUSH
67583: CALL_OW 310
67587: NOT
67588: OR
67589: IFFALSE 67593
// exit ;
67591: GO 67683
// vehicle := IsInUnit ( driver ) ;
67593: LD_ADDR_VAR 0 3
67597: PUSH
67598: LD_VAR 0 1
67602: PPUSH
67603: CALL_OW 310
67607: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67608: LD_VAR 0 1
67612: PPUSH
67613: LD_STRING \
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: PUSH
67643: LD_STRING E
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_VAR 0 3
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PPUSH
67679: CALL_OW 447
// end ;
67683: LD_VAR 0 2
67687: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67688: LD_INT 0
67690: PPUSH
67691: PPUSH
67692: PPUSH
// tmp := [ ] ;
67693: LD_ADDR_VAR 0 5
67697: PUSH
67698: EMPTY
67699: ST_TO_ADDR
// for i in units do
67700: LD_ADDR_VAR 0 4
67704: PUSH
67705: LD_VAR 0 1
67709: PUSH
67710: FOR_IN
67711: IFFALSE 67749
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67713: LD_ADDR_VAR 0 5
67717: PUSH
67718: LD_VAR 0 5
67722: PPUSH
67723: LD_VAR 0 5
67727: PUSH
67728: LD_INT 1
67730: PLUS
67731: PPUSH
67732: LD_VAR 0 4
67736: PPUSH
67737: CALL_OW 256
67741: PPUSH
67742: CALL_OW 2
67746: ST_TO_ADDR
67747: GO 67710
67749: POP
67750: POP
// if not tmp then
67751: LD_VAR 0 5
67755: NOT
67756: IFFALSE 67760
// exit ;
67758: GO 67808
// if asc then
67760: LD_VAR 0 2
67764: IFFALSE 67788
// result := SortListByListAsc ( units , tmp ) else
67766: LD_ADDR_VAR 0 3
67770: PUSH
67771: LD_VAR 0 1
67775: PPUSH
67776: LD_VAR 0 5
67780: PPUSH
67781: CALL_OW 76
67785: ST_TO_ADDR
67786: GO 67808
// result := SortListByListDesc ( units , tmp ) ;
67788: LD_ADDR_VAR 0 3
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: LD_VAR 0 5
67802: PPUSH
67803: CALL_OW 77
67807: ST_TO_ADDR
// end ;
67808: LD_VAR 0 3
67812: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67813: LD_INT 0
67815: PPUSH
67816: PPUSH
// task := GetTaskList ( mech ) ;
67817: LD_ADDR_VAR 0 4
67821: PUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 437
67831: ST_TO_ADDR
// if not task then
67832: LD_VAR 0 4
67836: NOT
67837: IFFALSE 67841
// exit ;
67839: GO 67883
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_VAR 0 4
67850: PUSH
67851: LD_INT 1
67853: ARRAY
67854: PUSH
67855: LD_INT 1
67857: ARRAY
67858: PUSH
67859: LD_STRING r
67861: EQUAL
67862: PUSH
67863: LD_VAR 0 4
67867: PUSH
67868: LD_INT 1
67870: ARRAY
67871: PUSH
67872: LD_INT 4
67874: ARRAY
67875: PUSH
67876: LD_VAR 0 2
67880: EQUAL
67881: AND
67882: ST_TO_ADDR
// end ;
67883: LD_VAR 0 3
67887: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67888: LD_INT 0
67890: PPUSH
// SetDir ( unit , d ) ;
67891: LD_VAR 0 1
67895: PPUSH
67896: LD_VAR 0 4
67900: PPUSH
67901: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_VAR 0 2
67914: PPUSH
67915: LD_VAR 0 3
67919: PPUSH
67920: LD_VAR 0 5
67924: PPUSH
67925: CALL_OW 48
// end ;
67929: LD_VAR 0 6
67933: RET
// export function ToNaturalNumber ( number ) ; begin
67934: LD_INT 0
67936: PPUSH
// result := number div 1 ;
67937: LD_ADDR_VAR 0 2
67941: PUSH
67942: LD_VAR 0 1
67946: PUSH
67947: LD_INT 1
67949: DIV
67950: ST_TO_ADDR
// if number < 0 then
67951: LD_VAR 0 1
67955: PUSH
67956: LD_INT 0
67958: LESS
67959: IFFALSE 67969
// result := 0 ;
67961: LD_ADDR_VAR 0 2
67965: PUSH
67966: LD_INT 0
67968: ST_TO_ADDR
// end ;
67969: LD_VAR 0 2
67973: RET
// export function SortByClass ( units , class ) ; var un ; begin
67974: LD_INT 0
67976: PPUSH
67977: PPUSH
// if not units or not class then
67978: LD_VAR 0 1
67982: NOT
67983: PUSH
67984: LD_VAR 0 2
67988: NOT
67989: OR
67990: IFFALSE 67994
// exit ;
67992: GO 68089
// result := [ ] ;
67994: LD_ADDR_VAR 0 3
67998: PUSH
67999: EMPTY
68000: ST_TO_ADDR
// for un in units do
68001: LD_ADDR_VAR 0 4
68005: PUSH
68006: LD_VAR 0 1
68010: PUSH
68011: FOR_IN
68012: IFFALSE 68087
// if GetClass ( un ) = class then
68014: LD_VAR 0 4
68018: PPUSH
68019: CALL_OW 257
68023: PUSH
68024: LD_VAR 0 2
68028: EQUAL
68029: IFFALSE 68056
// result := Insert ( result , 1 , un ) else
68031: LD_ADDR_VAR 0 3
68035: PUSH
68036: LD_VAR 0 3
68040: PPUSH
68041: LD_INT 1
68043: PPUSH
68044: LD_VAR 0 4
68048: PPUSH
68049: CALL_OW 2
68053: ST_TO_ADDR
68054: GO 68085
// result := Replace ( result , result + 1 , un ) ;
68056: LD_ADDR_VAR 0 3
68060: PUSH
68061: LD_VAR 0 3
68065: PPUSH
68066: LD_VAR 0 3
68070: PUSH
68071: LD_INT 1
68073: PLUS
68074: PPUSH
68075: LD_VAR 0 4
68079: PPUSH
68080: CALL_OW 1
68084: ST_TO_ADDR
68085: GO 68011
68087: POP
68088: POP
// end ;
68089: LD_VAR 0 3
68093: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68094: LD_INT 0
68096: PPUSH
68097: PPUSH
68098: PPUSH
68099: PPUSH
68100: PPUSH
68101: PPUSH
68102: PPUSH
// result := [ ] ;
68103: LD_ADDR_VAR 0 4
68107: PUSH
68108: EMPTY
68109: ST_TO_ADDR
// if x - r < 0 then
68110: LD_VAR 0 1
68114: PUSH
68115: LD_VAR 0 3
68119: MINUS
68120: PUSH
68121: LD_INT 0
68123: LESS
68124: IFFALSE 68136
// min_x := 0 else
68126: LD_ADDR_VAR 0 8
68130: PUSH
68131: LD_INT 0
68133: ST_TO_ADDR
68134: GO 68152
// min_x := x - r ;
68136: LD_ADDR_VAR 0 8
68140: PUSH
68141: LD_VAR 0 1
68145: PUSH
68146: LD_VAR 0 3
68150: MINUS
68151: ST_TO_ADDR
// if y - r < 0 then
68152: LD_VAR 0 2
68156: PUSH
68157: LD_VAR 0 3
68161: MINUS
68162: PUSH
68163: LD_INT 0
68165: LESS
68166: IFFALSE 68178
// min_y := 0 else
68168: LD_ADDR_VAR 0 7
68172: PUSH
68173: LD_INT 0
68175: ST_TO_ADDR
68176: GO 68194
// min_y := y - r ;
68178: LD_ADDR_VAR 0 7
68182: PUSH
68183: LD_VAR 0 2
68187: PUSH
68188: LD_VAR 0 3
68192: MINUS
68193: ST_TO_ADDR
// max_x := x + r ;
68194: LD_ADDR_VAR 0 9
68198: PUSH
68199: LD_VAR 0 1
68203: PUSH
68204: LD_VAR 0 3
68208: PLUS
68209: ST_TO_ADDR
// max_y := y + r ;
68210: LD_ADDR_VAR 0 10
68214: PUSH
68215: LD_VAR 0 2
68219: PUSH
68220: LD_VAR 0 3
68224: PLUS
68225: ST_TO_ADDR
// for _x = min_x to max_x do
68226: LD_ADDR_VAR 0 5
68230: PUSH
68231: DOUBLE
68232: LD_VAR 0 8
68236: DEC
68237: ST_TO_ADDR
68238: LD_VAR 0 9
68242: PUSH
68243: FOR_TO
68244: IFFALSE 68345
// for _y = min_y to max_y do
68246: LD_ADDR_VAR 0 6
68250: PUSH
68251: DOUBLE
68252: LD_VAR 0 7
68256: DEC
68257: ST_TO_ADDR
68258: LD_VAR 0 10
68262: PUSH
68263: FOR_TO
68264: IFFALSE 68341
// begin if not ValidHex ( _x , _y ) then
68266: LD_VAR 0 5
68270: PPUSH
68271: LD_VAR 0 6
68275: PPUSH
68276: CALL_OW 488
68280: NOT
68281: IFFALSE 68285
// continue ;
68283: GO 68263
// if GetResourceTypeXY ( _x , _y ) then
68285: LD_VAR 0 5
68289: PPUSH
68290: LD_VAR 0 6
68294: PPUSH
68295: CALL_OW 283
68299: IFFALSE 68339
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68301: LD_ADDR_VAR 0 4
68305: PUSH
68306: LD_VAR 0 4
68310: PPUSH
68311: LD_VAR 0 4
68315: PUSH
68316: LD_INT 1
68318: PLUS
68319: PPUSH
68320: LD_VAR 0 5
68324: PUSH
68325: LD_VAR 0 6
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PPUSH
68334: CALL_OW 1
68338: ST_TO_ADDR
// end ;
68339: GO 68263
68341: POP
68342: POP
68343: GO 68243
68345: POP
68346: POP
// end ;
68347: LD_VAR 0 4
68351: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68352: LD_INT 0
68354: PPUSH
68355: PPUSH
68356: PPUSH
68357: PPUSH
68358: PPUSH
68359: PPUSH
68360: PPUSH
68361: PPUSH
// if not units then
68362: LD_VAR 0 1
68366: NOT
68367: IFFALSE 68371
// exit ;
68369: GO 68895
// result := UnitFilter ( units , [ f_ok ] ) ;
68371: LD_ADDR_VAR 0 3
68375: PUSH
68376: LD_VAR 0 1
68380: PPUSH
68381: LD_INT 50
68383: PUSH
68384: EMPTY
68385: LIST
68386: PPUSH
68387: CALL_OW 72
68391: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68392: LD_ADDR_VAR 0 8
68396: PUSH
68397: LD_VAR 0 1
68401: PUSH
68402: LD_INT 1
68404: ARRAY
68405: PPUSH
68406: CALL_OW 255
68410: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68411: LD_ADDR_VAR 0 10
68415: PUSH
68416: LD_INT 29
68418: PUSH
68419: LD_INT 91
68421: PUSH
68422: LD_INT 49
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: LIST
68429: ST_TO_ADDR
// if not result then
68430: LD_VAR 0 3
68434: NOT
68435: IFFALSE 68439
// exit ;
68437: GO 68895
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68439: LD_ADDR_VAR 0 5
68443: PUSH
68444: LD_INT 81
68446: PUSH
68447: LD_VAR 0 8
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PPUSH
68456: CALL_OW 69
68460: ST_TO_ADDR
// for i in result do
68461: LD_ADDR_VAR 0 4
68465: PUSH
68466: LD_VAR 0 3
68470: PUSH
68471: FOR_IN
68472: IFFALSE 68893
// begin tag := GetTag ( i ) + 1 ;
68474: LD_ADDR_VAR 0 9
68478: PUSH
68479: LD_VAR 0 4
68483: PPUSH
68484: CALL_OW 110
68488: PUSH
68489: LD_INT 1
68491: PLUS
68492: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68493: LD_ADDR_VAR 0 7
68497: PUSH
68498: LD_VAR 0 4
68502: PPUSH
68503: CALL_OW 250
68507: PPUSH
68508: LD_VAR 0 4
68512: PPUSH
68513: CALL_OW 251
68517: PPUSH
68518: LD_INT 6
68520: PPUSH
68521: CALL 68094 0 3
68525: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68526: LD_VAR 0 4
68530: PPUSH
68531: CALL_OW 247
68535: PUSH
68536: LD_INT 2
68538: EQUAL
68539: PUSH
68540: LD_VAR 0 7
68544: AND
68545: PUSH
68546: LD_VAR 0 4
68550: PPUSH
68551: CALL_OW 264
68555: PUSH
68556: LD_VAR 0 10
68560: IN
68561: NOT
68562: AND
68563: IFFALSE 68602
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68565: LD_VAR 0 4
68569: PPUSH
68570: LD_VAR 0 7
68574: PUSH
68575: LD_INT 1
68577: ARRAY
68578: PUSH
68579: LD_INT 1
68581: ARRAY
68582: PPUSH
68583: LD_VAR 0 7
68587: PUSH
68588: LD_INT 1
68590: ARRAY
68591: PUSH
68592: LD_INT 2
68594: ARRAY
68595: PPUSH
68596: CALL_OW 116
68600: GO 68891
// if path > tag then
68602: LD_VAR 0 2
68606: PUSH
68607: LD_VAR 0 9
68611: GREATER
68612: IFFALSE 68820
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68614: LD_ADDR_VAR 0 6
68618: PUSH
68619: LD_VAR 0 5
68623: PPUSH
68624: LD_INT 91
68626: PUSH
68627: LD_VAR 0 4
68631: PUSH
68632: LD_INT 8
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: PPUSH
68640: CALL_OW 72
68644: ST_TO_ADDR
// if nearEnemy then
68645: LD_VAR 0 6
68649: IFFALSE 68718
// begin if GetWeapon ( i ) = ru_time_lapser then
68651: LD_VAR 0 4
68655: PPUSH
68656: CALL_OW 264
68660: PUSH
68661: LD_INT 49
68663: EQUAL
68664: IFFALSE 68692
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68666: LD_VAR 0 4
68670: PPUSH
68671: LD_VAR 0 6
68675: PPUSH
68676: LD_VAR 0 4
68680: PPUSH
68681: CALL_OW 74
68685: PPUSH
68686: CALL_OW 112
68690: GO 68716
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68692: LD_VAR 0 4
68696: PPUSH
68697: LD_VAR 0 6
68701: PPUSH
68702: LD_VAR 0 4
68706: PPUSH
68707: CALL_OW 74
68711: PPUSH
68712: CALL_OW 115
// end else
68716: GO 68818
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68718: LD_VAR 0 4
68722: PPUSH
68723: LD_VAR 0 2
68727: PUSH
68728: LD_VAR 0 9
68732: ARRAY
68733: PUSH
68734: LD_INT 1
68736: ARRAY
68737: PPUSH
68738: LD_VAR 0 2
68742: PUSH
68743: LD_VAR 0 9
68747: ARRAY
68748: PUSH
68749: LD_INT 2
68751: ARRAY
68752: PPUSH
68753: CALL_OW 297
68757: PUSH
68758: LD_INT 6
68760: GREATER
68761: IFFALSE 68804
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68763: LD_VAR 0 4
68767: PPUSH
68768: LD_VAR 0 2
68772: PUSH
68773: LD_VAR 0 9
68777: ARRAY
68778: PUSH
68779: LD_INT 1
68781: ARRAY
68782: PPUSH
68783: LD_VAR 0 2
68787: PUSH
68788: LD_VAR 0 9
68792: ARRAY
68793: PUSH
68794: LD_INT 2
68796: ARRAY
68797: PPUSH
68798: CALL_OW 114
68802: GO 68818
// SetTag ( i , tag ) ;
68804: LD_VAR 0 4
68808: PPUSH
68809: LD_VAR 0 9
68813: PPUSH
68814: CALL_OW 109
// end else
68818: GO 68891
// if enemy then
68820: LD_VAR 0 5
68824: IFFALSE 68891
// begin if GetWeapon ( i ) = ru_time_lapser then
68826: LD_VAR 0 4
68830: PPUSH
68831: CALL_OW 264
68835: PUSH
68836: LD_INT 49
68838: EQUAL
68839: IFFALSE 68867
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68841: LD_VAR 0 4
68845: PPUSH
68846: LD_VAR 0 5
68850: PPUSH
68851: LD_VAR 0 4
68855: PPUSH
68856: CALL_OW 74
68860: PPUSH
68861: CALL_OW 112
68865: GO 68891
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68867: LD_VAR 0 4
68871: PPUSH
68872: LD_VAR 0 5
68876: PPUSH
68877: LD_VAR 0 4
68881: PPUSH
68882: CALL_OW 74
68886: PPUSH
68887: CALL_OW 115
// end ; end ;
68891: GO 68471
68893: POP
68894: POP
// end ;
68895: LD_VAR 0 3
68899: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68900: LD_INT 0
68902: PPUSH
68903: PPUSH
68904: PPUSH
// if not unit or IsInUnit ( unit ) then
68905: LD_VAR 0 1
68909: NOT
68910: PUSH
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 310
68920: OR
68921: IFFALSE 68925
// exit ;
68923: GO 69016
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68925: LD_ADDR_VAR 0 4
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 250
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: LD_INT 1
68947: PPUSH
68948: CALL_OW 272
68952: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68953: LD_ADDR_VAR 0 5
68957: PUSH
68958: LD_VAR 0 1
68962: PPUSH
68963: CALL_OW 251
68967: PPUSH
68968: LD_VAR 0 2
68972: PPUSH
68973: LD_INT 1
68975: PPUSH
68976: CALL_OW 273
68980: ST_TO_ADDR
// if ValidHex ( x , y ) then
68981: LD_VAR 0 4
68985: PPUSH
68986: LD_VAR 0 5
68990: PPUSH
68991: CALL_OW 488
68995: IFFALSE 69016
// ComTurnXY ( unit , x , y ) ;
68997: LD_VAR 0 1
69001: PPUSH
69002: LD_VAR 0 4
69006: PPUSH
69007: LD_VAR 0 5
69011: PPUSH
69012: CALL_OW 118
// end ;
69016: LD_VAR 0 3
69020: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69021: LD_INT 0
69023: PPUSH
69024: PPUSH
// result := false ;
69025: LD_ADDR_VAR 0 3
69029: PUSH
69030: LD_INT 0
69032: ST_TO_ADDR
// if not units then
69033: LD_VAR 0 2
69037: NOT
69038: IFFALSE 69042
// exit ;
69040: GO 69087
// for i in units do
69042: LD_ADDR_VAR 0 4
69046: PUSH
69047: LD_VAR 0 2
69051: PUSH
69052: FOR_IN
69053: IFFALSE 69085
// if See ( side , i ) then
69055: LD_VAR 0 1
69059: PPUSH
69060: LD_VAR 0 4
69064: PPUSH
69065: CALL_OW 292
69069: IFFALSE 69083
// begin result := true ;
69071: LD_ADDR_VAR 0 3
69075: PUSH
69076: LD_INT 1
69078: ST_TO_ADDR
// exit ;
69079: POP
69080: POP
69081: GO 69087
// end ;
69083: GO 69052
69085: POP
69086: POP
// end ;
69087: LD_VAR 0 3
69091: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69092: LD_INT 0
69094: PPUSH
69095: PPUSH
69096: PPUSH
69097: PPUSH
// if not unit or not points then
69098: LD_VAR 0 1
69102: NOT
69103: PUSH
69104: LD_VAR 0 2
69108: NOT
69109: OR
69110: IFFALSE 69114
// exit ;
69112: GO 69204
// dist := 99999 ;
69114: LD_ADDR_VAR 0 5
69118: PUSH
69119: LD_INT 99999
69121: ST_TO_ADDR
// for i in points do
69122: LD_ADDR_VAR 0 4
69126: PUSH
69127: LD_VAR 0 2
69131: PUSH
69132: FOR_IN
69133: IFFALSE 69202
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69135: LD_ADDR_VAR 0 6
69139: PUSH
69140: LD_VAR 0 1
69144: PPUSH
69145: LD_VAR 0 4
69149: PUSH
69150: LD_INT 1
69152: ARRAY
69153: PPUSH
69154: LD_VAR 0 4
69158: PUSH
69159: LD_INT 2
69161: ARRAY
69162: PPUSH
69163: CALL_OW 297
69167: ST_TO_ADDR
// if tmpDist < dist then
69168: LD_VAR 0 6
69172: PUSH
69173: LD_VAR 0 5
69177: LESS
69178: IFFALSE 69200
// begin result := i ;
69180: LD_ADDR_VAR 0 3
69184: PUSH
69185: LD_VAR 0 4
69189: ST_TO_ADDR
// dist := tmpDist ;
69190: LD_ADDR_VAR 0 5
69194: PUSH
69195: LD_VAR 0 6
69199: ST_TO_ADDR
// end ; end ;
69200: GO 69132
69202: POP
69203: POP
// end ;
69204: LD_VAR 0 3
69208: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69209: LD_INT 0
69211: PPUSH
// uc_side := side ;
69212: LD_ADDR_OWVAR 20
69216: PUSH
69217: LD_VAR 0 1
69221: ST_TO_ADDR
// uc_nation := 3 ;
69222: LD_ADDR_OWVAR 21
69226: PUSH
69227: LD_INT 3
69229: ST_TO_ADDR
// vc_chassis := 25 ;
69230: LD_ADDR_OWVAR 37
69234: PUSH
69235: LD_INT 25
69237: ST_TO_ADDR
// vc_engine := engine_siberite ;
69238: LD_ADDR_OWVAR 39
69242: PUSH
69243: LD_INT 3
69245: ST_TO_ADDR
// vc_control := control_computer ;
69246: LD_ADDR_OWVAR 38
69250: PUSH
69251: LD_INT 3
69253: ST_TO_ADDR
// vc_weapon := 59 ;
69254: LD_ADDR_OWVAR 40
69258: PUSH
69259: LD_INT 59
69261: ST_TO_ADDR
// result := CreateVehicle ;
69262: LD_ADDR_VAR 0 5
69266: PUSH
69267: CALL_OW 45
69271: ST_TO_ADDR
// SetDir ( result , d ) ;
69272: LD_VAR 0 5
69276: PPUSH
69277: LD_VAR 0 4
69281: PPUSH
69282: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69286: LD_VAR 0 5
69290: PPUSH
69291: LD_VAR 0 2
69295: PPUSH
69296: LD_VAR 0 3
69300: PPUSH
69301: LD_INT 0
69303: PPUSH
69304: CALL_OW 48
// end ;
69308: LD_VAR 0 5
69312: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69313: LD_INT 0
69315: PPUSH
69316: PPUSH
69317: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69318: LD_ADDR_VAR 0 2
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69341: LD_VAR 0 1
69345: NOT
69346: PUSH
69347: LD_VAR 0 1
69351: PPUSH
69352: CALL_OW 264
69356: PUSH
69357: LD_INT 12
69359: PUSH
69360: LD_INT 51
69362: PUSH
69363: LD_INT 32
69365: PUSH
69366: LD_INT 89
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: IN
69375: NOT
69376: OR
69377: IFFALSE 69381
// exit ;
69379: GO 69479
// for i := 1 to 3 do
69381: LD_ADDR_VAR 0 3
69385: PUSH
69386: DOUBLE
69387: LD_INT 1
69389: DEC
69390: ST_TO_ADDR
69391: LD_INT 3
69393: PUSH
69394: FOR_TO
69395: IFFALSE 69477
// begin tmp := GetCargo ( cargo , i ) ;
69397: LD_ADDR_VAR 0 4
69401: PUSH
69402: LD_VAR 0 1
69406: PPUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: CALL_OW 289
69416: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69417: LD_ADDR_VAR 0 2
69421: PUSH
69422: LD_VAR 0 2
69426: PPUSH
69427: LD_VAR 0 3
69431: PPUSH
69432: LD_VAR 0 4
69436: PPUSH
69437: CALL_OW 1
69441: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69442: LD_ADDR_VAR 0 2
69446: PUSH
69447: LD_VAR 0 2
69451: PPUSH
69452: LD_INT 4
69454: PPUSH
69455: LD_VAR 0 2
69459: PUSH
69460: LD_INT 4
69462: ARRAY
69463: PUSH
69464: LD_VAR 0 4
69468: PLUS
69469: PPUSH
69470: CALL_OW 1
69474: ST_TO_ADDR
// end ;
69475: GO 69394
69477: POP
69478: POP
// end ;
69479: LD_VAR 0 2
69483: RET
// export function Length ( array ) ; begin
69484: LD_INT 0
69486: PPUSH
// result := array + 0 ;
69487: LD_ADDR_VAR 0 2
69491: PUSH
69492: LD_VAR 0 1
69496: PUSH
69497: LD_INT 0
69499: PLUS
69500: ST_TO_ADDR
// end ;
69501: LD_VAR 0 2
69505: RET
// export function PrepareArray ( array ) ; begin
69506: LD_INT 0
69508: PPUSH
// result := array diff 0 ;
69509: LD_ADDR_VAR 0 2
69513: PUSH
69514: LD_VAR 0 1
69518: PUSH
69519: LD_INT 0
69521: DIFF
69522: ST_TO_ADDR
// if not result [ 1 ] then
69523: LD_VAR 0 2
69527: PUSH
69528: LD_INT 1
69530: ARRAY
69531: NOT
69532: IFFALSE 69552
// result := Delete ( result , 1 ) ;
69534: LD_ADDR_VAR 0 2
69538: PUSH
69539: LD_VAR 0 2
69543: PPUSH
69544: LD_INT 1
69546: PPUSH
69547: CALL_OW 3
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 2
69556: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
69562: PPUSH
// sibRocketRange := 25 ;
69563: LD_ADDR_VAR 0 6
69567: PUSH
69568: LD_INT 25
69570: ST_TO_ADDR
// result := false ;
69571: LD_ADDR_VAR 0 4
69575: PUSH
69576: LD_INT 0
69578: ST_TO_ADDR
// for i := 0 to 5 do
69579: LD_ADDR_VAR 0 5
69583: PUSH
69584: DOUBLE
69585: LD_INT 0
69587: DEC
69588: ST_TO_ADDR
69589: LD_INT 5
69591: PUSH
69592: FOR_TO
69593: IFFALSE 69660
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69595: LD_VAR 0 1
69599: PPUSH
69600: LD_VAR 0 5
69604: PPUSH
69605: LD_VAR 0 6
69609: PPUSH
69610: CALL_OW 272
69614: PPUSH
69615: LD_VAR 0 2
69619: PPUSH
69620: LD_VAR 0 5
69624: PPUSH
69625: LD_VAR 0 6
69629: PPUSH
69630: CALL_OW 273
69634: PPUSH
69635: LD_VAR 0 3
69639: PPUSH
69640: CALL_OW 309
69644: IFFALSE 69658
// begin result := true ;
69646: LD_ADDR_VAR 0 4
69650: PUSH
69651: LD_INT 1
69653: ST_TO_ADDR
// exit ;
69654: POP
69655: POP
69656: GO 69662
// end ;
69658: GO 69592
69660: POP
69661: POP
// end ;
69662: LD_VAR 0 4
69666: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69667: LD_INT 0
69669: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69670: LD_VAR 0 1
69674: PPUSH
69675: LD_VAR 0 2
69679: PPUSH
69680: LD_INT 0
69682: PPUSH
69683: LD_INT 0
69685: PPUSH
69686: LD_INT 1
69688: PPUSH
69689: LD_INT 0
69691: PPUSH
69692: CALL_OW 587
// end ; end_of_file
69696: LD_VAR 0 3
69700: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69701: LD_VAR 0 1
69705: PUSH
69706: LD_INT 200
69708: DOUBLE
69709: GREATEREQUAL
69710: IFFALSE 69718
69712: LD_INT 299
69714: DOUBLE
69715: LESSEQUAL
69716: IFTRUE 69720
69718: GO 69752
69720: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69721: LD_VAR 0 1
69725: PPUSH
69726: LD_VAR 0 2
69730: PPUSH
69731: LD_VAR 0 3
69735: PPUSH
69736: LD_VAR 0 4
69740: PPUSH
69741: LD_VAR 0 5
69745: PPUSH
69746: CALL 24386 0 5
69750: GO 69829
69752: LD_INT 300
69754: DOUBLE
69755: GREATEREQUAL
69756: IFFALSE 69764
69758: LD_INT 399
69760: DOUBLE
69761: LESSEQUAL
69762: IFTRUE 69766
69764: GO 69828
69766: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69767: LD_VAR 0 1
69771: PPUSH
69772: LD_VAR 0 2
69776: PPUSH
69777: LD_VAR 0 3
69781: PPUSH
69782: LD_VAR 0 4
69786: PPUSH
69787: LD_VAR 0 5
69791: PPUSH
69792: LD_VAR 0 6
69796: PPUSH
69797: LD_VAR 0 7
69801: PPUSH
69802: LD_VAR 0 8
69806: PPUSH
69807: LD_VAR 0 9
69811: PPUSH
69812: LD_VAR 0 10
69816: PPUSH
69817: LD_VAR 0 11
69821: PPUSH
69822: CALL 20719 0 11
69826: GO 69829
69828: POP
// end ;
69829: PPOPN 11
69831: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69832: LD_VAR 0 1
69836: PPUSH
69837: LD_VAR 0 2
69841: PPUSH
69842: LD_VAR 0 3
69846: PPUSH
69847: LD_VAR 0 4
69851: PPUSH
69852: LD_VAR 0 5
69856: PPUSH
69857: CALL 24122 0 5
// end ; end_of_file
69861: PPOPN 5
69863: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69864: LD_VAR 0 1
69868: PPUSH
69869: LD_VAR 0 2
69873: PPUSH
69874: LD_VAR 0 3
69878: PPUSH
69879: LD_VAR 0 4
69883: PPUSH
69884: LD_VAR 0 5
69888: PPUSH
69889: LD_VAR 0 6
69893: PPUSH
69894: CALL 8412 0 6
// end ;
69898: PPOPN 6
69900: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69901: LD_INT 0
69903: PPUSH
// begin if not units then
69904: LD_VAR 0 1
69908: NOT
69909: IFFALSE 69913
// exit ;
69911: GO 69913
// end ;
69913: PPOPN 7
69915: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69916: CALL 8383 0 0
// end ;
69920: PPOPN 1
69922: END
