// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 62596 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 62676 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 62556 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 62495 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 62756 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 28665 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 28665 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 28665 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 28665 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 28665 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 28665 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 28665 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 28665 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 28665 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 28665 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if ape in UnitsInside ( b ) then
3188: LD_VAR 0 3
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 62387 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL 70033 0 2
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL 70033 0 2
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6326
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5605
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5587: LD_EXP 17
5591: PPUSH
5592: LD_EXP 2
5596: PUSH
5597: LD_STRING Gladstone
5599: STR
5600: PPUSH
5601: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5605: LD_EXP 19
5609: PPUSH
5610: CALL_OW 302
5614: PUSH
5615: LD_EXP 19
5619: PPUSH
5620: CALL_OW 255
5624: PUSH
5625: LD_INT 1
5627: EQUAL
5628: AND
5629: IFFALSE 5659
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5631: LD_EXP 19
5635: PPUSH
5636: LD_EXP 2
5640: PUSH
5641: LD_STRING Denis
5643: STR
5644: PPUSH
5645: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5649: LD_INT 1
5651: PPUSH
5652: LD_STRING DenisInDelta
5654: PPUSH
5655: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5659: LD_EXP 22
5663: PPUSH
5664: CALL_OW 302
5668: IFFALSE 5688
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5670: LD_EXP 22
5674: PPUSH
5675: LD_EXP 2
5679: PUSH
5680: LD_STRING Lisa
5682: STR
5683: PPUSH
5684: CALL_OW 38
// end ; if IsOk ( Frank ) then
5688: LD_EXP 23
5692: PPUSH
5693: CALL_OW 302
5697: IFFALSE 5717
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5699: LD_EXP 23
5703: PPUSH
5704: LD_EXP 2
5708: PUSH
5709: LD_STRING Frank
5711: STR
5712: PPUSH
5713: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5717: LD_EXP 24
5721: PPUSH
5722: CALL_OW 302
5726: IFFALSE 5746
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5728: LD_EXP 24
5732: PPUSH
5733: LD_EXP 2
5737: PUSH
5738: LD_STRING Bobby
5740: STR
5741: PPUSH
5742: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5746: LD_EXP 25
5750: PPUSH
5751: CALL_OW 302
5755: IFFALSE 5775
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5757: LD_EXP 25
5761: PPUSH
5762: LD_EXP 2
5766: PUSH
5767: LD_STRING Cyrus
5769: STR
5770: PPUSH
5771: CALL_OW 38
// end ; if IsOk ( Brown ) then
5775: LD_EXP 20
5779: PPUSH
5780: CALL_OW 302
5784: IFFALSE 5804
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5786: LD_EXP 20
5790: PPUSH
5791: LD_EXP 2
5795: PUSH
5796: LD_STRING Brown
5798: STR
5799: PPUSH
5800: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5804: LD_EXP 21
5808: PPUSH
5809: CALL_OW 302
5813: IFFALSE 5833
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5815: LD_EXP 21
5819: PPUSH
5820: LD_EXP 2
5824: PUSH
5825: LD_STRING Donaldson
5827: STR
5828: PPUSH
5829: CALL_OW 38
// end ; if IsOk ( Mike ) then
5833: LD_EXP 26
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5862
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5844: LD_EXP 26
5848: PPUSH
5849: LD_EXP 2
5853: PUSH
5854: LD_STRING Mike
5856: STR
5857: PPUSH
5858: CALL_OW 38
// if others then
5862: LD_EXP 27
5866: IFFALSE 5880
// SaveCharacters ( others , othersInDelta ) ;
5868: LD_EXP 27
5872: PPUSH
5873: LD_STRING othersInDelta
5875: PPUSH
5876: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5880: LD_INT 22
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: IFFALSE 5952
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 16
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 69
5938: PUSH
5939: LD_EXP 26
5943: DIFF
5944: PPUSH
5945: LD_STRING apeInDelta
5947: PPUSH
5948: CALL_OW 38
// tmp := [ ] ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: EMPTY
5958: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5959: LD_INT 22
5961: PUSH
5962: LD_INT 1
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 21
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: IFFALSE 6098
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5989: LD_ADDR_VAR 0 1
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: PUSH
6023: FOR_IN
6024: IFFALSE 6096
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 248
6045: PUSH
6046: LD_VAR 0 1
6050: PPUSH
6051: CALL_OW 265
6055: PUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 262
6065: PUSH
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL_OW 263
6075: PUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: CALL_OW 264
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ADD
6093: ST_TO_ADDR
6094: GO 6023
6096: POP
6097: POP
// if tmp then
6098: LD_VAR 0 2
6102: IFFALSE 6116
// SaveVariable ( tmp , vehiclesInDelta ) ;
6104: LD_VAR 0 2
6108: PPUSH
6109: LD_STRING vehiclesInDelta
6111: PPUSH
6112: CALL_OW 39
// tmp := [ ] ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: EMPTY
6122: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 21
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PPUSH
6147: CALL_OW 69
6151: IFFALSE 6304
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6153: LD_ADDR_VAR 0 1
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 21
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 69
6186: PUSH
6187: FOR_IN
6188: IFFALSE 6302
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_VAR 0 2
6199: PUSH
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 266
6209: PUSH
6210: LD_VAR 0 1
6214: PPUSH
6215: CALL_OW 267
6219: PUSH
6220: LD_VAR 0 1
6224: PPUSH
6225: CALL_OW 250
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 251
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 254
6249: PUSH
6250: LD_VAR 0 1
6254: PPUSH
6255: LD_INT 1
6257: PPUSH
6258: CALL_OW 268
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: CALL_OW 268
6275: PUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: CALL_OW 269
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: ADD
6299: ST_TO_ADDR
6300: GO 6187
6302: POP
6303: POP
// if tmp then
6304: LD_VAR 0 2
6308: IFFALSE 6322
// SaveVariable ( tmp , buildingsInDelta ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_STRING buildingsInDelta
6317: PPUSH
6318: CALL_OW 39
// YouWin ;
6322: CALL_OW 103
// end ; end_of_file
6326: PPOPN 5
6328: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
6333: PPUSH
6334: PPUSH
// InitHc ;
6335: CALL_OW 19
// InitUc ;
6339: CALL_OW 18
// uc_side := 2 ;
6343: LD_ADDR_OWVAR 20
6347: PUSH
6348: LD_INT 2
6350: ST_TO_ADDR
// uc_nation := 2 ;
6351: LD_ADDR_OWVAR 21
6355: PUSH
6356: LD_INT 2
6358: ST_TO_ADDR
// if not amount then
6359: LD_VAR 0 1
6363: NOT
6364: IFFALSE 6368
// exit ;
6366: GO 6491
// for i = 1 to amount do
6368: LD_ADDR_VAR 0 5
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6479
// begin PrepareHuman ( false , 1 , skill ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 380
// un := CreateHuman ;
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: CALL_OW 44
6410: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6411: LD_ADDR_VAR 0 7
6415: PUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: LD_INT 1
6423: PPUSH
6424: LD_VAR 0 6
6428: PPUSH
6429: CALL_OW 2
6433: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6434: LD_VAR 0 6
6438: PPUSH
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// if i mod 2 = 0 then
6451: LD_VAR 0 5
6455: PUSH
6456: LD_INT 2
6458: MOD
6459: PUSH
6460: LD_INT 0
6462: EQUAL
6463: IFFALSE 6477
// SetTag ( un , 11 ) ;
6465: LD_VAR 0 6
6469: PPUSH
6470: LD_INT 11
6472: PPUSH
6473: CALL_OW 109
// end ;
6477: GO 6383
6479: POP
6480: POP
// result := tmp ;
6481: LD_ADDR_VAR 0 4
6485: PUSH
6486: LD_VAR 0 7
6490: ST_TO_ADDR
// end ;
6491: LD_VAR 0 4
6495: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6496: LD_EXP 6
6500: IFFALSE 7578
6502: GO 6504
6504: DISABLE
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
// begin more_troops := false ;
6515: LD_ADDR_VAR 0 3
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 10500
6559: PUSH
6560: LD_INT 8400
6562: PUSH
6563: LD_INT 6300
6565: PUSH
6566: LD_INT 5250
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_OWVAR 67
6579: ARRAY
6580: ST_TO_ADDR
// force := [ ] ;
6581: LD_ADDR_VAR 0 8
6585: PUSH
6586: EMPTY
6587: ST_TO_ADDR
// ar_forces := [ ] ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: EMPTY
6594: ST_TO_ADDR
// ap_killers := [ ] ;
6595: LD_ADDR_EXP 29
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// Wait ( timer ) ;
6602: LD_VAR 0 2
6606: PPUSH
6607: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6611: LD_EXP 19
6615: PUSH
6616: LD_EXP 19
6620: PPUSH
6621: CALL_OW 255
6625: PUSH
6626: LD_INT 4
6628: EQUAL
6629: AND
6630: IFFALSE 6639
// Wait ( 0 0$45 ) ;
6632: LD_INT 1575
6634: PPUSH
6635: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: IFFALSE 6684
// begin wait ( 1 1$25 ) ;
6669: LD_INT 2975
6671: PPUSH
6672: CALL_OW 67
// more_troops := true ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// end ; if more_troops then
6684: LD_VAR 0 3
6688: IFFALSE 6884
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6690: LD_ADDR_VAR 0 8
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: LD_INT 5
6700: PUSH
6701: LD_INT 6
6703: PUSH
6704: LD_INT 7
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_OWVAR 67
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PPUSH
6724: LD_INT 14
6726: PPUSH
6727: CALL 6329 0 3
6731: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6732: LD_ADDR_VAR 0 7
6736: PUSH
6737: LD_INT 2
6739: PPUSH
6740: LD_INT 3
6742: PPUSH
6743: LD_INT 22
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 42
6754: PUSH
6755: LD_INT 42
6757: PUSH
6758: LD_INT 43
6760: PUSH
6761: LD_INT 44
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: PUSH
6770: LD_OWVAR 67
6774: ARRAY
6775: PPUSH
6776: LD_INT 90
6778: PPUSH
6779: CALL 435 0 7
6783: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 4
6791: PPUSH
6792: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6796: LD_VAR 0 7
6800: PPUSH
6801: LD_INT 13
6803: PPUSH
6804: LD_INT 0
6806: PPUSH
6807: CALL_OW 49
// uc_side := 2 ;
6811: LD_ADDR_OWVAR 20
6815: PUSH
6816: LD_INT 2
6818: ST_TO_ADDR
// uc_nation := 2 ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 2
6826: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6827: LD_INT 0
6829: PPUSH
6830: LD_INT 1
6832: PPUSH
6833: LD_VAR 0 4
6837: PPUSH
6838: CALL_OW 380
// un := CreateHuman ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: CALL_OW 44
6851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6852: LD_VAR 0 6
6856: PPUSH
6857: LD_VAR 0 7
6861: PPUSH
6862: CALL_OW 52
// force := force ^ un ;
6866: LD_ADDR_VAR 0 8
6870: PUSH
6871: LD_VAR 0 8
6875: PUSH
6876: LD_VAR 0 6
6880: ADD
6881: ST_TO_ADDR
// end else
6882: GO 6926
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6884: LD_ADDR_VAR 0 8
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_OWVAR 67
6911: ARRAY
6912: PPUSH
6913: LD_VAR 0 4
6917: PPUSH
6918: LD_INT 14
6920: PPUSH
6921: CALL 6329 0 3
6925: ST_TO_ADDR
// end ; if force then
6926: LD_VAR 0 8
6930: IFFALSE 6942
// ar_forces := force ;
6932: LD_ADDR_EXP 28
6936: PUSH
6937: LD_VAR 0 8
6941: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6949: LD_INT 22
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 21
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PUSH
6978: LD_INT 0
6980: EQUAL
6981: IFFALSE 6942
// wait ( timer ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6992: LD_ADDR_VAR 0 8
6996: PUSH
6997: LD_INT 4
6999: PUSH
7000: LD_INT 5
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: LD_INT 7
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_OWVAR 67
7019: ARRAY
7020: PPUSH
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_INT 13
7028: PUSH
7029: LD_INT 14
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: CALL_OW 12
7046: ARRAY
7047: PPUSH
7048: CALL 6329 0 3
7052: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: PUSH
7062: LD_EXP 6
7066: AND
7067: IFFALSE 7146
// begin uc_side := 2 ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_INT 2
7076: ST_TO_ADDR
// uc_nation := 2 ;
7077: LD_ADDR_OWVAR 21
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7085: LD_INT 0
7087: PPUSH
7088: LD_INT 2
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: CALL_OW 380
// eng := CreateHuman ;
7100: LD_ADDR_VAR 0 5
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7110: LD_VAR 0 5
7114: PPUSH
7115: LD_INT 13
7117: PPUSH
7118: LD_INT 0
7120: PPUSH
7121: CALL_OW 49
// Wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_EXP 6
7141: PPUSH
7142: CALL_OW 180
// end ; if force then
7146: LD_VAR 0 8
7150: IFFALSE 7162
// ar_forces := force ;
7152: LD_ADDR_EXP 28
7156: PUSH
7157: LD_VAR 0 8
7161: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// if eng then
7169: LD_VAR 0 5
7173: IFFALSE 7227
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7175: LD_EXP 6
7179: PPUSH
7180: CALL_OW 255
7184: PUSH
7185: LD_INT 2
7187: EQUAL
7188: PUSH
7189: LD_VAR 0 5
7193: PPUSH
7194: CALL_OW 302
7198: AND
7199: PUSH
7200: LD_VAR 0 5
7204: PPUSH
7205: CALL_OW 310
7209: NOT
7210: AND
7211: IFFALSE 7227
// ComEnterUnit ( eng , Delta ) ;
7213: LD_VAR 0 5
7217: PPUSH
7218: LD_EXP 6
7222: PPUSH
7223: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 69
7255: PUSH
7256: LD_INT 0
7258: EQUAL
7259: IFFALSE 7162
// Wait ( 2 2$00 ) ;
7261: LD_INT 4200
7263: PPUSH
7264: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7268: LD_ADDR_EXP 29
7272: PUSH
7273: LD_INT 1
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_OWVAR 67
7295: ARRAY
7296: PPUSH
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_INT 13
7304: PPUSH
7305: CALL 6329 0 3
7309: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 2
7317: MUL
7318: PPUSH
7319: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7323: LD_ADDR_EXP 28
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: LD_INT 6
7333: PUSH
7334: LD_INT 7
7336: PUSH
7337: LD_INT 8
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 4
7356: PPUSH
7357: LD_INT 13
7359: PPUSH
7360: CALL 6329 0 3
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: LD_INT 4
7373: PUSH
7374: LD_INT 4
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_OWVAR 67
7387: ARRAY
7388: PPUSH
7389: LD_VAR 0 4
7393: PPUSH
7394: LD_INT 14
7396: PPUSH
7397: CALL 6329 0 3
7401: ADD
7402: ST_TO_ADDR
// if Difficulty < 4 then
7403: LD_OWVAR 67
7407: PUSH
7408: LD_INT 4
7410: LESS
7411: IFFALSE 7415
// exit ;
7413: GO 7578
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7415: LD_ADDR_VAR 0 7
7419: PUSH
7420: LD_INT 2
7422: PPUSH
7423: LD_INT 3
7425: PPUSH
7426: LD_INT 22
7428: PPUSH
7429: LD_INT 1
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_INT 44
7437: PPUSH
7438: LD_INT 90
7440: PPUSH
7441: CALL 435 0 7
7445: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7446: LD_VAR 0 7
7450: PPUSH
7451: LD_INT 1
7453: PPUSH
7454: CALL_OW 233
// PlaceUnitXY ( veh , 27 , 51 , false ) ;
7458: LD_VAR 0 7
7462: PPUSH
7463: LD_INT 27
7465: PPUSH
7466: LD_INT 51
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 48
// uc_side := 2 ;
7476: LD_ADDR_OWVAR 20
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// uc_nation := 2 ;
7484: LD_ADDR_OWVAR 21
7488: PUSH
7489: LD_INT 2
7491: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7492: LD_INT 0
7494: PPUSH
7495: LD_INT 1
7497: PPUSH
7498: LD_VAR 0 4
7502: PPUSH
7503: CALL_OW 380
// un := CreateHuman ;
7507: LD_ADDR_VAR 0 6
7511: PUSH
7512: CALL_OW 44
7516: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7517: LD_VAR 0 6
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7531: LD_ADDR_EXP 28
7535: PUSH
7536: LD_EXP 28
7540: PPUSH
7541: LD_VAR 0 6
7545: PPUSH
7546: CALL 66114 0 2
7550: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7551: LD_ADDR_EXP 28
7555: PUSH
7556: LD_EXP 28
7560: PUSH
7561: LD_INT 4
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_INT 19
7571: PPUSH
7572: CALL 6329 0 3
7576: UNION
7577: ST_TO_ADDR
// end ;
7578: PPOPN 8
7580: END
// every 0 0$03 trigger ar_forces do var i , target ;
7581: LD_EXP 28
7585: IFFALSE 7783
7587: GO 7589
7589: DISABLE
7590: LD_INT 0
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// if not ar_forces then
7595: LD_EXP 28
7599: NOT
7600: IFFALSE 7604
// exit ;
7602: GO 7783
// if Delta then
7604: LD_EXP 6
7608: IFFALSE 7622
// target := Delta else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_EXP 6
7619: ST_TO_ADDR
7620: GO 7632
// target := JMM ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_EXP 16
7631: ST_TO_ADDR
// for i in ar_forces do
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_EXP 28
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7781
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7645: LD_VAR 0 1
7649: PUSH
7650: LD_INT 55
7652: PUSH
7653: EMPTY
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: IN
7661: IFFALSE 7704
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7663: LD_VAR 0 1
7667: PPUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: PPUSH
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 310
7692: PPUSH
7693: CALL_OW 74
7697: PPUSH
7698: CALL_OW 115
7702: GO 7779
// if GetDistUnits ( i , target ) > 30 then
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: CALL_OW 296
7718: PUSH
7719: LD_INT 30
7721: GREATER
7722: IFFALSE 7755
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7724: LD_VAR 0 1
7728: PPUSH
7729: LD_VAR 0 2
7733: PPUSH
7734: CALL_OW 250
7738: PPUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: CALL_OW 251
7748: PPUSH
7749: CALL_OW 114
7753: GO 7779
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7755: LD_VAR 0 1
7759: PPUSH
7760: LD_INT 81
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: CALL 927 0 2
// end ;
7779: GO 7642
7781: POP
7782: POP
// end ;
7783: PPOPN 2
7785: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7786: LD_EXP 29
7790: IFFALSE 7950
7792: GO 7794
7794: DISABLE
7795: LD_INT 0
7797: PPUSH
7798: PPUSH
7799: PPUSH
// begin enable ;
7800: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7801: LD_ADDR_VAR 0 1
7805: PUSH
7806: LD_INT 22
7808: PUSH
7809: LD_INT 0
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 12
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// if not filter then
7835: LD_VAR 0 1
7839: NOT
7840: IFFALSE 7867
// begin ar_forces := ar_forces ^ ap_killers ;
7842: LD_ADDR_EXP 28
7846: PUSH
7847: LD_EXP 28
7851: PUSH
7852: LD_EXP 29
7856: ADD
7857: ST_TO_ADDR
// ap_killers := [ ] ;
7858: LD_ADDR_EXP 29
7862: PUSH
7863: EMPTY
7864: ST_TO_ADDR
// exit ;
7865: GO 7950
// end ; for i in ap_killers do
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_EXP 29
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7948
// begin if not IsOk ( i ) then
7880: LD_VAR 0 2
7884: PPUSH
7885: CALL_OW 302
7889: NOT
7890: IFFALSE 7894
// continue ;
7892: GO 7877
// if not HasTask ( i ) then
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL_OW 314
7903: NOT
7904: IFFALSE 7926
// target := NearestUnitToUnit ( filter , i ) ;
7906: LD_ADDR_VAR 0 3
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_VAR 0 2
7920: PPUSH
7921: CALL_OW 74
7925: ST_TO_ADDR
// if target then
7926: LD_VAR 0 3
7930: IFFALSE 7946
// ComAttackUnit ( i , target ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: LD_VAR 0 3
7941: PPUSH
7942: CALL_OW 115
// end ;
7946: GO 7877
7948: POP
7949: POP
// end ; end_of_file
7950: PPOPN 3
7952: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7953: LD_EXP 6
7957: IFFALSE 8093
7959: GO 7961
7961: DISABLE
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7967: LD_ADDR_VAR 0 2
7971: PUSH
7972: LD_INT 300
7974: PUSH
7975: LD_INT 250
7977: PUSH
7978: LD_INT 220
7980: PUSH
7981: LD_INT 210
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: PUSH
7990: LD_OWVAR 67
7994: ARRAY
7995: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7996: LD_INT 1
7998: PPUSH
7999: LD_INT 3
8001: PPUSH
8002: CALL_OW 12
8006: PPUSH
8007: LD_INT 7
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8017: LD_INT 3150
8019: PPUSH
8020: LD_INT 4900
8022: PPUSH
8023: CALL_OW 12
8027: PPUSH
8028: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 5
8042: PPUSH
8043: CALL_OW 12
8047: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8048: LD_VAR 0 3
8052: PPUSH
8053: LD_INT 7
8055: PPUSH
8056: LD_INT 1
8058: PPUSH
8059: CALL_OW 55
// counter := counter - cr * 10 ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_VAR 0 2
8072: PUSH
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 10
8080: MUL
8081: MINUS
8082: ST_TO_ADDR
// until counter <= 0 ;
8083: LD_VAR 0 2
8087: PUSH
8088: LD_INT 0
8090: LESSEQUAL
8091: IFFALSE 8017
// end ;
8093: PPOPN 3
8095: END
// every 0 0$03 trigger not Delta do var i ;
8096: LD_EXP 6
8100: NOT
8101: IFFALSE 8171
8103: GO 8105
8105: DISABLE
8106: LD_INT 0
8108: PPUSH
// begin for i = 1 to 5 - Difficulty do
8109: LD_ADDR_VAR 0 1
8113: PUSH
8114: DOUBLE
8115: LD_INT 1
8117: DEC
8118: ST_TO_ADDR
8119: LD_INT 5
8121: PUSH
8122: LD_OWVAR 67
8126: MINUS
8127: PUSH
8128: FOR_TO
8129: IFFALSE 8169
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8131: LD_INT 2
8133: PPUSH
8134: LD_INT 5
8136: PPUSH
8137: CALL_OW 12
8141: PPUSH
8142: LD_INT 8
8144: PPUSH
8145: LD_INT 1
8147: PPUSH
8148: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8152: LD_INT 560
8154: PPUSH
8155: LD_INT 1365
8157: PPUSH
8158: CALL_OW 12
8162: PPUSH
8163: CALL_OW 67
// end ;
8167: GO 8128
8169: POP
8170: POP
// end ;
8171: PPOPN 1
8173: END
// every 3 3$00 trigger tick < 15 15$00 do
8174: LD_OWVAR 1
8178: PUSH
8179: LD_INT 31500
8181: LESS
8182: IFFALSE 8242
8184: GO 8186
8186: DISABLE
// begin enable ;
8187: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: PPUSH
8199: LD_INT 1
8201: PPUSH
8202: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8206: LD_INT 1330
8208: PPUSH
8209: LD_INT 2065
8211: PPUSH
8212: CALL_OW 12
8216: PPUSH
8217: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8221: LD_INT 1
8223: PPUSH
8224: LD_INT 4
8226: PPUSH
8227: CALL_OW 12
8231: PPUSH
8232: LD_INT 15
8234: PPUSH
8235: LD_INT 1
8237: PPUSH
8238: CALL_OW 55
// end ; end_of_file
8242: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL 24376 0 1
// if un = JMM then
8252: LD_VAR 0 1
8256: PUSH
8257: LD_EXP 16
8261: EQUAL
8262: IFFALSE 8271
// YouLost ( JMM ) ;
8264: LD_STRING JMM
8266: PPUSH
8267: CALL_OW 104
// if un = Delta then
8271: LD_VAR 0 1
8275: PUSH
8276: LD_EXP 6
8280: EQUAL
8281: IFFALSE 8304
// begin Delta := 0 ;
8283: LD_ADDR_EXP 6
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8291: LD_INT 0
8293: PPUSH
8294: LD_INT 1
8296: PPUSH
8297: LD_INT 1
8299: PPUSH
8300: CALL_OW 324
// end ; if un in ar_forces then
8304: LD_VAR 0 1
8308: PUSH
8309: LD_EXP 28
8313: IN
8314: IFFALSE 8332
// ar_forces := ar_forces diff un ;
8316: LD_ADDR_EXP 28
8320: PUSH
8321: LD_EXP 28
8325: PUSH
8326: LD_VAR 0 1
8330: DIFF
8331: ST_TO_ADDR
// if un in ap_killers then
8332: LD_VAR 0 1
8336: PUSH
8337: LD_EXP 29
8341: IN
8342: IFFALSE 8360
// ap_killers := ap_killers diff un ;
8344: LD_ADDR_EXP 29
8348: PUSH
8349: LD_EXP 29
8353: PUSH
8354: LD_VAR 0 1
8358: DIFF
8359: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8360: LD_VAR 0 1
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 16
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: PPUSH
8393: CALL_OW 69
8397: IN
8398: IFFALSE 8414
// apeKillCounter := apeKillCounter + 1 ;
8400: LD_ADDR_EXP 15
8404: PUSH
8405: LD_EXP 15
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: ST_TO_ADDR
// end ;
8414: PPOPN 1
8416: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_VAR 0 2
8426: PPUSH
8427: CALL 24496 0 2
// end ;
8431: PPOPN 2
8433: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8434: LD_VAR 0 1
8438: PUSH
8439: LD_INT 1
8441: EQUAL
8442: PUSH
8443: LD_VAR 0 2
8447: PUSH
8448: LD_INT 2
8450: EQUAL
8451: AND
8452: PUSH
8453: LD_EXP 13
8457: NOT
8458: AND
8459: IFFALSE 8469
// arab_spotted := true ;
8461: LD_ADDR_EXP 13
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ;
8469: PPOPN 2
8471: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8472: LD_ADDR_OWVAR 57
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// end_mission := true ;
8480: LD_ADDR_EXP 14
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// end ;
8488: PPOPN 1
8490: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8491: LD_VAR 0 2
8495: PPUSH
8496: CALL_OW 255
8500: PUSH
8501: LD_INT 1
8503: EQUAL
8504: IFFALSE 8520
// apeman_counter := apeman_counter + 1 ;
8506: LD_ADDR_EXP 12
8510: PUSH
8511: LD_EXP 12
8515: PUSH
8516: LD_INT 1
8518: PLUS
8519: ST_TO_ADDR
// if not first_apeman_tamed then
8520: LD_EXP 8
8524: NOT
8525: IFFALSE 8724
// begin first_apeman_tamed := true ;
8527: LD_ADDR_EXP 8
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// if sci = Gladstone then
8535: LD_VAR 0 2
8539: PUSH
8540: LD_EXP 17
8544: EQUAL
8545: IFFALSE 8559
// Say ( Gladstone , D7b-Glad-1 ) ;
8547: LD_EXP 17
8551: PPUSH
8552: LD_STRING D7b-Glad-1
8554: PPUSH
8555: CALL_OW 88
// if sci = Denis then
8559: LD_VAR 0 2
8563: PUSH
8564: LD_EXP 19
8568: EQUAL
8569: IFFALSE 8583
// Say ( Denis , D7a-Den-1 ) ;
8571: LD_EXP 19
8575: PPUSH
8576: LD_STRING D7a-Den-1
8578: PPUSH
8579: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_EXP 16
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_EXP 19
8602: PUSH
8603: LD_EXP 22
8607: PUSH
8608: LD_EXP 23
8612: PUSH
8613: LD_EXP 24
8617: PUSH
8618: LD_EXP 25
8622: PUSH
8623: LD_EXP 21
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: IN
8638: NOT
8639: IFFALSE 8682
// begin if GetSex ( sci ) = sex_male then
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 258
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 8670
// Say ( sci , D7c-Sci1-1 ) else
8656: LD_VAR 0 2
8660: PPUSH
8661: LD_STRING D7c-Sci1-1
8663: PPUSH
8664: CALL_OW 88
8668: GO 8682
// Say ( sci , D7c-FSci1-1 ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_STRING D7c-FSci1-1
8677: PPUSH
8678: CALL_OW 88
// end ; if sci <> Gladstone then
8682: LD_VAR 0 2
8686: PUSH
8687: LD_EXP 17
8691: NONEQUAL
8692: IFFALSE 8706
// Say ( Gladstone , D7c-Glad-1 ) ;
8694: LD_EXP 17
8698: PPUSH
8699: LD_STRING D7c-Glad-1
8701: PPUSH
8702: CALL_OW 88
// if Lisa then
8706: LD_EXP 22
8710: IFFALSE 8724
// Say ( Lisa , D8-Lisa-1 ) ;
8712: LD_EXP 22
8716: PPUSH
8717: LD_STRING D8-Lisa-1
8719: PPUSH
8720: CALL_OW 88
// end ; end ; end_of_file end_of_file
8724: PPOPN 2
8726: END
// every 0 0$1 do
8727: GO 8729
8729: DISABLE
// begin enable ;
8730: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8731: LD_STRING updateTimer(
8733: PUSH
8734: LD_OWVAR 1
8738: STR
8739: PUSH
8740: LD_STRING );
8742: STR
8743: PPUSH
8744: CALL_OW 559
// end ;
8748: END
// export function SOS_MapStart ( ) ; begin
8749: LD_INT 0
8751: PPUSH
// if streamModeActive then
8752: LD_EXP 30
8756: IFFALSE 8765
// DefineStreamItems ( true ) ;
8758: LD_INT 1
8760: PPUSH
8761: CALL 10419 0 1
// UpdateFactoryWaypoints ( ) ;
8765: CALL 23280 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8769: CALL 23537 0 0
// end ;
8773: LD_VAR 0 1
8777: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8778: LD_INT 0
8780: PPUSH
// if p2 = hack_mode then
8781: LD_VAR 0 2
8785: PUSH
8786: LD_INT 100
8788: EQUAL
8789: IFFALSE 9792
// begin if not StreamModeActive then
8791: LD_EXP 30
8795: NOT
8796: IFFALSE 8806
// StreamModeActive := true ;
8798: LD_ADDR_EXP 30
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 0 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: IFFALSE 8820
// InitStreamMode ;
8816: CALL 9955 0 0
// if p3 = 1 then
8820: LD_VAR 0 3
8824: PUSH
8825: LD_INT 1
8827: EQUAL
8828: IFFALSE 8838
// sRocket := true ;
8830: LD_ADDR_EXP 35
8834: PUSH
8835: LD_INT 1
8837: ST_TO_ADDR
// if p3 = 2 then
8838: LD_VAR 0 3
8842: PUSH
8843: LD_INT 2
8845: EQUAL
8846: IFFALSE 8856
// sSpeed := true ;
8848: LD_ADDR_EXP 34
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// if p3 = 3 then
8856: LD_VAR 0 3
8860: PUSH
8861: LD_INT 3
8863: EQUAL
8864: IFFALSE 8874
// sEngine := true ;
8866: LD_ADDR_EXP 36
8870: PUSH
8871: LD_INT 1
8873: ST_TO_ADDR
// if p3 = 4 then
8874: LD_VAR 0 3
8878: PUSH
8879: LD_INT 4
8881: EQUAL
8882: IFFALSE 8892
// sSpec := true ;
8884: LD_ADDR_EXP 33
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// if p3 = 5 then
8892: LD_VAR 0 3
8896: PUSH
8897: LD_INT 5
8899: EQUAL
8900: IFFALSE 8910
// sLevel := true ;
8902: LD_ADDR_EXP 37
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
// if p3 = 6 then
8910: LD_VAR 0 3
8914: PUSH
8915: LD_INT 6
8917: EQUAL
8918: IFFALSE 8928
// sArmoury := true ;
8920: LD_ADDR_EXP 38
8924: PUSH
8925: LD_INT 1
8927: ST_TO_ADDR
// if p3 = 7 then
8928: LD_VAR 0 3
8932: PUSH
8933: LD_INT 7
8935: EQUAL
8936: IFFALSE 8946
// sRadar := true ;
8938: LD_ADDR_EXP 39
8942: PUSH
8943: LD_INT 1
8945: ST_TO_ADDR
// if p3 = 8 then
8946: LD_VAR 0 3
8950: PUSH
8951: LD_INT 8
8953: EQUAL
8954: IFFALSE 8964
// sBunker := true ;
8956: LD_ADDR_EXP 40
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// if p3 = 9 then
8964: LD_VAR 0 3
8968: PUSH
8969: LD_INT 9
8971: EQUAL
8972: IFFALSE 8982
// sHack := true ;
8974: LD_ADDR_EXP 41
8978: PUSH
8979: LD_INT 1
8981: ST_TO_ADDR
// if p3 = 10 then
8982: LD_VAR 0 3
8986: PUSH
8987: LD_INT 10
8989: EQUAL
8990: IFFALSE 9000
// sFire := true ;
8992: LD_ADDR_EXP 42
8996: PUSH
8997: LD_INT 1
8999: ST_TO_ADDR
// if p3 = 11 then
9000: LD_VAR 0 3
9004: PUSH
9005: LD_INT 11
9007: EQUAL
9008: IFFALSE 9018
// sRefresh := true ;
9010: LD_ADDR_EXP 43
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
// if p3 = 12 then
9018: LD_VAR 0 3
9022: PUSH
9023: LD_INT 12
9025: EQUAL
9026: IFFALSE 9036
// sExp := true ;
9028: LD_ADDR_EXP 44
9032: PUSH
9033: LD_INT 1
9035: ST_TO_ADDR
// if p3 = 13 then
9036: LD_VAR 0 3
9040: PUSH
9041: LD_INT 13
9043: EQUAL
9044: IFFALSE 9054
// sDepot := true ;
9046: LD_ADDR_EXP 45
9050: PUSH
9051: LD_INT 1
9053: ST_TO_ADDR
// if p3 = 14 then
9054: LD_VAR 0 3
9058: PUSH
9059: LD_INT 14
9061: EQUAL
9062: IFFALSE 9072
// sFlag := true ;
9064: LD_ADDR_EXP 46
9068: PUSH
9069: LD_INT 1
9071: ST_TO_ADDR
// if p3 = 15 then
9072: LD_VAR 0 3
9076: PUSH
9077: LD_INT 15
9079: EQUAL
9080: IFFALSE 9090
// sKamikadze := true ;
9082: LD_ADDR_EXP 54
9086: PUSH
9087: LD_INT 1
9089: ST_TO_ADDR
// if p3 = 16 then
9090: LD_VAR 0 3
9094: PUSH
9095: LD_INT 16
9097: EQUAL
9098: IFFALSE 9108
// sTroll := true ;
9100: LD_ADDR_EXP 55
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// if p3 = 17 then
9108: LD_VAR 0 3
9112: PUSH
9113: LD_INT 17
9115: EQUAL
9116: IFFALSE 9126
// sSlow := true ;
9118: LD_ADDR_EXP 56
9122: PUSH
9123: LD_INT 1
9125: ST_TO_ADDR
// if p3 = 18 then
9126: LD_VAR 0 3
9130: PUSH
9131: LD_INT 18
9133: EQUAL
9134: IFFALSE 9144
// sLack := true ;
9136: LD_ADDR_EXP 57
9140: PUSH
9141: LD_INT 1
9143: ST_TO_ADDR
// if p3 = 19 then
9144: LD_VAR 0 3
9148: PUSH
9149: LD_INT 19
9151: EQUAL
9152: IFFALSE 9162
// sTank := true ;
9154: LD_ADDR_EXP 59
9158: PUSH
9159: LD_INT 1
9161: ST_TO_ADDR
// if p3 = 20 then
9162: LD_VAR 0 3
9166: PUSH
9167: LD_INT 20
9169: EQUAL
9170: IFFALSE 9180
// sRemote := true ;
9172: LD_ADDR_EXP 60
9176: PUSH
9177: LD_INT 1
9179: ST_TO_ADDR
// if p3 = 21 then
9180: LD_VAR 0 3
9184: PUSH
9185: LD_INT 21
9187: EQUAL
9188: IFFALSE 9198
// sPowell := true ;
9190: LD_ADDR_EXP 61
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
// if p3 = 22 then
9198: LD_VAR 0 3
9202: PUSH
9203: LD_INT 22
9205: EQUAL
9206: IFFALSE 9216
// sTeleport := true ;
9208: LD_ADDR_EXP 64
9212: PUSH
9213: LD_INT 1
9215: ST_TO_ADDR
// if p3 = 23 then
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 23
9223: EQUAL
9224: IFFALSE 9234
// sOilTower := true ;
9226: LD_ADDR_EXP 66
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// if p3 = 24 then
9234: LD_VAR 0 3
9238: PUSH
9239: LD_INT 24
9241: EQUAL
9242: IFFALSE 9252
// sShovel := true ;
9244: LD_ADDR_EXP 67
9248: PUSH
9249: LD_INT 1
9251: ST_TO_ADDR
// if p3 = 25 then
9252: LD_VAR 0 3
9256: PUSH
9257: LD_INT 25
9259: EQUAL
9260: IFFALSE 9270
// sSheik := true ;
9262: LD_ADDR_EXP 68
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// if p3 = 26 then
9270: LD_VAR 0 3
9274: PUSH
9275: LD_INT 26
9277: EQUAL
9278: IFFALSE 9288
// sEarthquake := true ;
9280: LD_ADDR_EXP 70
9284: PUSH
9285: LD_INT 1
9287: ST_TO_ADDR
// if p3 = 27 then
9288: LD_VAR 0 3
9292: PUSH
9293: LD_INT 27
9295: EQUAL
9296: IFFALSE 9306
// sAI := true ;
9298: LD_ADDR_EXP 71
9302: PUSH
9303: LD_INT 1
9305: ST_TO_ADDR
// if p3 = 28 then
9306: LD_VAR 0 3
9310: PUSH
9311: LD_INT 28
9313: EQUAL
9314: IFFALSE 9324
// sCargo := true ;
9316: LD_ADDR_EXP 74
9320: PUSH
9321: LD_INT 1
9323: ST_TO_ADDR
// if p3 = 29 then
9324: LD_VAR 0 3
9328: PUSH
9329: LD_INT 29
9331: EQUAL
9332: IFFALSE 9342
// sDLaser := true ;
9334: LD_ADDR_EXP 75
9338: PUSH
9339: LD_INT 1
9341: ST_TO_ADDR
// if p3 = 30 then
9342: LD_VAR 0 3
9346: PUSH
9347: LD_INT 30
9349: EQUAL
9350: IFFALSE 9360
// sExchange := true ;
9352: LD_ADDR_EXP 76
9356: PUSH
9357: LD_INT 1
9359: ST_TO_ADDR
// if p3 = 31 then
9360: LD_VAR 0 3
9364: PUSH
9365: LD_INT 31
9367: EQUAL
9368: IFFALSE 9378
// sFac := true ;
9370: LD_ADDR_EXP 77
9374: PUSH
9375: LD_INT 1
9377: ST_TO_ADDR
// if p3 = 32 then
9378: LD_VAR 0 3
9382: PUSH
9383: LD_INT 32
9385: EQUAL
9386: IFFALSE 9396
// sPower := true ;
9388: LD_ADDR_EXP 78
9392: PUSH
9393: LD_INT 1
9395: ST_TO_ADDR
// if p3 = 33 then
9396: LD_VAR 0 3
9400: PUSH
9401: LD_INT 33
9403: EQUAL
9404: IFFALSE 9414
// sRandom := true ;
9406: LD_ADDR_EXP 79
9410: PUSH
9411: LD_INT 1
9413: ST_TO_ADDR
// if p3 = 34 then
9414: LD_VAR 0 3
9418: PUSH
9419: LD_INT 34
9421: EQUAL
9422: IFFALSE 9432
// sShield := true ;
9424: LD_ADDR_EXP 80
9428: PUSH
9429: LD_INT 1
9431: ST_TO_ADDR
// if p3 = 35 then
9432: LD_VAR 0 3
9436: PUSH
9437: LD_INT 35
9439: EQUAL
9440: IFFALSE 9450
// sTime := true ;
9442: LD_ADDR_EXP 81
9446: PUSH
9447: LD_INT 1
9449: ST_TO_ADDR
// if p3 = 36 then
9450: LD_VAR 0 3
9454: PUSH
9455: LD_INT 36
9457: EQUAL
9458: IFFALSE 9468
// sTools := true ;
9460: LD_ADDR_EXP 82
9464: PUSH
9465: LD_INT 1
9467: ST_TO_ADDR
// if p3 = 101 then
9468: LD_VAR 0 3
9472: PUSH
9473: LD_INT 101
9475: EQUAL
9476: IFFALSE 9486
// sSold := true ;
9478: LD_ADDR_EXP 47
9482: PUSH
9483: LD_INT 1
9485: ST_TO_ADDR
// if p3 = 102 then
9486: LD_VAR 0 3
9490: PUSH
9491: LD_INT 102
9493: EQUAL
9494: IFFALSE 9504
// sDiff := true ;
9496: LD_ADDR_EXP 48
9500: PUSH
9501: LD_INT 1
9503: ST_TO_ADDR
// if p3 = 103 then
9504: LD_VAR 0 3
9508: PUSH
9509: LD_INT 103
9511: EQUAL
9512: IFFALSE 9522
// sFog := true ;
9514: LD_ADDR_EXP 51
9518: PUSH
9519: LD_INT 1
9521: ST_TO_ADDR
// if p3 = 104 then
9522: LD_VAR 0 3
9526: PUSH
9527: LD_INT 104
9529: EQUAL
9530: IFFALSE 9540
// sReset := true ;
9532: LD_ADDR_EXP 52
9536: PUSH
9537: LD_INT 1
9539: ST_TO_ADDR
// if p3 = 105 then
9540: LD_VAR 0 3
9544: PUSH
9545: LD_INT 105
9547: EQUAL
9548: IFFALSE 9558
// sSun := true ;
9550: LD_ADDR_EXP 53
9554: PUSH
9555: LD_INT 1
9557: ST_TO_ADDR
// if p3 = 106 then
9558: LD_VAR 0 3
9562: PUSH
9563: LD_INT 106
9565: EQUAL
9566: IFFALSE 9576
// sTiger := true ;
9568: LD_ADDR_EXP 49
9572: PUSH
9573: LD_INT 1
9575: ST_TO_ADDR
// if p3 = 107 then
9576: LD_VAR 0 3
9580: PUSH
9581: LD_INT 107
9583: EQUAL
9584: IFFALSE 9594
// sBomb := true ;
9586: LD_ADDR_EXP 50
9590: PUSH
9591: LD_INT 1
9593: ST_TO_ADDR
// if p3 = 108 then
9594: LD_VAR 0 3
9598: PUSH
9599: LD_INT 108
9601: EQUAL
9602: IFFALSE 9612
// sWound := true ;
9604: LD_ADDR_EXP 58
9608: PUSH
9609: LD_INT 1
9611: ST_TO_ADDR
// if p3 = 109 then
9612: LD_VAR 0 3
9616: PUSH
9617: LD_INT 109
9619: EQUAL
9620: IFFALSE 9630
// sBetray := true ;
9622: LD_ADDR_EXP 62
9626: PUSH
9627: LD_INT 1
9629: ST_TO_ADDR
// if p3 = 110 then
9630: LD_VAR 0 3
9634: PUSH
9635: LD_INT 110
9637: EQUAL
9638: IFFALSE 9648
// sContamin := true ;
9640: LD_ADDR_EXP 63
9644: PUSH
9645: LD_INT 1
9647: ST_TO_ADDR
// if p3 = 111 then
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 111
9655: EQUAL
9656: IFFALSE 9666
// sOil := true ;
9658: LD_ADDR_EXP 65
9662: PUSH
9663: LD_INT 1
9665: ST_TO_ADDR
// if p3 = 112 then
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 112
9673: EQUAL
9674: IFFALSE 9684
// sStu := true ;
9676: LD_ADDR_EXP 69
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
// if p3 = 113 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 113
9691: EQUAL
9692: IFFALSE 9702
// sBazooka := true ;
9694: LD_ADDR_EXP 72
9698: PUSH
9699: LD_INT 1
9701: ST_TO_ADDR
// if p3 = 114 then
9702: LD_VAR 0 3
9706: PUSH
9707: LD_INT 114
9709: EQUAL
9710: IFFALSE 9720
// sMortar := true ;
9712: LD_ADDR_EXP 73
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// if p3 = 115 then
9720: LD_VAR 0 3
9724: PUSH
9725: LD_INT 115
9727: EQUAL
9728: IFFALSE 9738
// sRanger := true ;
9730: LD_ADDR_EXP 83
9734: PUSH
9735: LD_INT 1
9737: ST_TO_ADDR
// if p3 = 116 then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 116
9745: EQUAL
9746: IFFALSE 9756
// sComputer := true ;
9748: LD_ADDR_EXP 84
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if p3 = 117 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 117
9763: EQUAL
9764: IFFALSE 9774
// s30 := true ;
9766: LD_ADDR_EXP 85
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// if p3 = 118 then
9774: LD_VAR 0 3
9778: PUSH
9779: LD_INT 118
9781: EQUAL
9782: IFFALSE 9792
// s60 := true ;
9784: LD_ADDR_EXP 86
9788: PUSH
9789: LD_INT 1
9791: ST_TO_ADDR
// end ; if p2 = stream_mode then
9792: LD_VAR 0 2
9796: PUSH
9797: LD_INT 101
9799: EQUAL
9800: IFFALSE 9928
// begin case p3 of 1 :
9802: LD_VAR 0 3
9806: PUSH
9807: LD_INT 1
9809: DOUBLE
9810: EQUAL
9811: IFTRUE 9815
9813: GO 9822
9815: POP
// hHackUnlimitedResources ; 2 :
9816: CALL 22026 0 0
9820: GO 9928
9822: LD_INT 2
9824: DOUBLE
9825: EQUAL
9826: IFTRUE 9830
9828: GO 9837
9830: POP
// hHackSetLevel10 ; 3 :
9831: CALL 22159 0 0
9835: GO 9928
9837: LD_INT 3
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9852
9845: POP
// hHackSetLevel10YourUnits ; 4 :
9846: CALL 22244 0 0
9850: GO 9928
9852: LD_INT 4
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9867
9860: POP
// hHackInvincible ; 5 :
9861: CALL 22692 0 0
9865: GO 9928
9867: LD_INT 5
9869: DOUBLE
9870: EQUAL
9871: IFTRUE 9875
9873: GO 9882
9875: POP
// hHackInvisible ; 6 :
9876: CALL 22803 0 0
9880: GO 9928
9882: LD_INT 6
9884: DOUBLE
9885: EQUAL
9886: IFTRUE 9890
9888: GO 9897
9890: POP
// hHackChangeYourSide ; 7 :
9891: CALL 22860 0 0
9895: GO 9928
9897: LD_INT 7
9899: DOUBLE
9900: EQUAL
9901: IFTRUE 9905
9903: GO 9912
9905: POP
// hHackChangeUnitSide ; 8 :
9906: CALL 22902 0 0
9910: GO 9928
9912: LD_INT 8
9914: DOUBLE
9915: EQUAL
9916: IFTRUE 9920
9918: GO 9927
9920: POP
// hHackFog ; end ;
9921: CALL 23003 0 0
9925: GO 9928
9927: POP
// end ; end ;
9928: LD_VAR 0 7
9932: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9933: GO 9935
9935: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9936: LD_STRING initStreamRollete();
9938: PPUSH
9939: CALL_OW 559
// InitStreamMode ;
9943: CALL 9955 0 0
// DefineStreamItems ( false ) ;
9947: LD_INT 0
9949: PPUSH
9950: CALL 10419 0 1
// end ;
9954: END
// function InitStreamMode ; begin
9955: LD_INT 0
9957: PPUSH
// streamModeActive := false ;
9958: LD_ADDR_EXP 30
9962: PUSH
9963: LD_INT 0
9965: ST_TO_ADDR
// normalCounter := 36 ;
9966: LD_ADDR_EXP 31
9970: PUSH
9971: LD_INT 36
9973: ST_TO_ADDR
// hardcoreCounter := 18 ;
9974: LD_ADDR_EXP 32
9978: PUSH
9979: LD_INT 18
9981: ST_TO_ADDR
// sRocket := false ;
9982: LD_ADDR_EXP 35
9986: PUSH
9987: LD_INT 0
9989: ST_TO_ADDR
// sSpeed := false ;
9990: LD_ADDR_EXP 34
9994: PUSH
9995: LD_INT 0
9997: ST_TO_ADDR
// sEngine := false ;
9998: LD_ADDR_EXP 36
10002: PUSH
10003: LD_INT 0
10005: ST_TO_ADDR
// sSpec := false ;
10006: LD_ADDR_EXP 33
10010: PUSH
10011: LD_INT 0
10013: ST_TO_ADDR
// sLevel := false ;
10014: LD_ADDR_EXP 37
10018: PUSH
10019: LD_INT 0
10021: ST_TO_ADDR
// sArmoury := false ;
10022: LD_ADDR_EXP 38
10026: PUSH
10027: LD_INT 0
10029: ST_TO_ADDR
// sRadar := false ;
10030: LD_ADDR_EXP 39
10034: PUSH
10035: LD_INT 0
10037: ST_TO_ADDR
// sBunker := false ;
10038: LD_ADDR_EXP 40
10042: PUSH
10043: LD_INT 0
10045: ST_TO_ADDR
// sHack := false ;
10046: LD_ADDR_EXP 41
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// sFire := false ;
10054: LD_ADDR_EXP 42
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// sRefresh := false ;
10062: LD_ADDR_EXP 43
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// sExp := false ;
10070: LD_ADDR_EXP 44
10074: PUSH
10075: LD_INT 0
10077: ST_TO_ADDR
// sDepot := false ;
10078: LD_ADDR_EXP 45
10082: PUSH
10083: LD_INT 0
10085: ST_TO_ADDR
// sFlag := false ;
10086: LD_ADDR_EXP 46
10090: PUSH
10091: LD_INT 0
10093: ST_TO_ADDR
// sKamikadze := false ;
10094: LD_ADDR_EXP 54
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// sTroll := false ;
10102: LD_ADDR_EXP 55
10106: PUSH
10107: LD_INT 0
10109: ST_TO_ADDR
// sSlow := false ;
10110: LD_ADDR_EXP 56
10114: PUSH
10115: LD_INT 0
10117: ST_TO_ADDR
// sLack := false ;
10118: LD_ADDR_EXP 57
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// sTank := false ;
10126: LD_ADDR_EXP 59
10130: PUSH
10131: LD_INT 0
10133: ST_TO_ADDR
// sRemote := false ;
10134: LD_ADDR_EXP 60
10138: PUSH
10139: LD_INT 0
10141: ST_TO_ADDR
// sPowell := false ;
10142: LD_ADDR_EXP 61
10146: PUSH
10147: LD_INT 0
10149: ST_TO_ADDR
// sTeleport := false ;
10150: LD_ADDR_EXP 64
10154: PUSH
10155: LD_INT 0
10157: ST_TO_ADDR
// sOilTower := false ;
10158: LD_ADDR_EXP 66
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// sShovel := false ;
10166: LD_ADDR_EXP 67
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// sSheik := false ;
10174: LD_ADDR_EXP 68
10178: PUSH
10179: LD_INT 0
10181: ST_TO_ADDR
// sEarthquake := false ;
10182: LD_ADDR_EXP 70
10186: PUSH
10187: LD_INT 0
10189: ST_TO_ADDR
// sAI := false ;
10190: LD_ADDR_EXP 71
10194: PUSH
10195: LD_INT 0
10197: ST_TO_ADDR
// sCargo := false ;
10198: LD_ADDR_EXP 74
10202: PUSH
10203: LD_INT 0
10205: ST_TO_ADDR
// sDLaser := false ;
10206: LD_ADDR_EXP 75
10210: PUSH
10211: LD_INT 0
10213: ST_TO_ADDR
// sExchange := false ;
10214: LD_ADDR_EXP 76
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// sFac := false ;
10222: LD_ADDR_EXP 77
10226: PUSH
10227: LD_INT 0
10229: ST_TO_ADDR
// sPower := false ;
10230: LD_ADDR_EXP 78
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// sRandom := false ;
10238: LD_ADDR_EXP 79
10242: PUSH
10243: LD_INT 0
10245: ST_TO_ADDR
// sShield := false ;
10246: LD_ADDR_EXP 80
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// sTime := false ;
10254: LD_ADDR_EXP 81
10258: PUSH
10259: LD_INT 0
10261: ST_TO_ADDR
// sTools := false ;
10262: LD_ADDR_EXP 82
10266: PUSH
10267: LD_INT 0
10269: ST_TO_ADDR
// sSold := false ;
10270: LD_ADDR_EXP 47
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// sDiff := false ;
10278: LD_ADDR_EXP 48
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// sFog := false ;
10286: LD_ADDR_EXP 51
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// sReset := false ;
10294: LD_ADDR_EXP 52
10298: PUSH
10299: LD_INT 0
10301: ST_TO_ADDR
// sSun := false ;
10302: LD_ADDR_EXP 53
10306: PUSH
10307: LD_INT 0
10309: ST_TO_ADDR
// sTiger := false ;
10310: LD_ADDR_EXP 49
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// sBomb := false ;
10318: LD_ADDR_EXP 50
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// sWound := false ;
10326: LD_ADDR_EXP 58
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// sBetray := false ;
10334: LD_ADDR_EXP 62
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// sContamin := false ;
10342: LD_ADDR_EXP 63
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// sOil := false ;
10350: LD_ADDR_EXP 65
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
// sStu := false ;
10358: LD_ADDR_EXP 69
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// sBazooka := false ;
10366: LD_ADDR_EXP 72
10370: PUSH
10371: LD_INT 0
10373: ST_TO_ADDR
// sMortar := false ;
10374: LD_ADDR_EXP 73
10378: PUSH
10379: LD_INT 0
10381: ST_TO_ADDR
// sRanger := false ;
10382: LD_ADDR_EXP 83
10386: PUSH
10387: LD_INT 0
10389: ST_TO_ADDR
// sComputer := false ;
10390: LD_ADDR_EXP 84
10394: PUSH
10395: LD_INT 0
10397: ST_TO_ADDR
// s30 := false ;
10398: LD_ADDR_EXP 85
10402: PUSH
10403: LD_INT 0
10405: ST_TO_ADDR
// s60 := false ;
10406: LD_ADDR_EXP 86
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// end ;
10414: LD_VAR 0 1
10418: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10419: LD_INT 0
10421: PPUSH
10422: PPUSH
10423: PPUSH
10424: PPUSH
10425: PPUSH
10426: PPUSH
10427: PPUSH
// result := [ ] ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: EMPTY
10434: ST_TO_ADDR
// if campaign_id = 1 then
10435: LD_OWVAR 69
10439: PUSH
10440: LD_INT 1
10442: EQUAL
10443: IFFALSE 13609
// begin case mission_number of 1 :
10445: LD_OWVAR 70
10449: PUSH
10450: LD_INT 1
10452: DOUBLE
10453: EQUAL
10454: IFTRUE 10458
10456: GO 10534
10458: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_INT 2
10466: PUSH
10467: LD_INT 4
10469: PUSH
10470: LD_INT 11
10472: PUSH
10473: LD_INT 12
10475: PUSH
10476: LD_INT 15
10478: PUSH
10479: LD_INT 16
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_INT 23
10487: PUSH
10488: LD_INT 26
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 101
10504: PUSH
10505: LD_INT 102
10507: PUSH
10508: LD_INT 106
10510: PUSH
10511: LD_INT 116
10513: PUSH
10514: LD_INT 117
10516: PUSH
10517: LD_INT 118
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: ST_TO_ADDR
10532: GO 13607
10534: LD_INT 2
10536: DOUBLE
10537: EQUAL
10538: IFTRUE 10542
10540: GO 10626
10542: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 4
10553: PUSH
10554: LD_INT 11
10556: PUSH
10557: LD_INT 12
10559: PUSH
10560: LD_INT 15
10562: PUSH
10563: LD_INT 16
10565: PUSH
10566: LD_INT 22
10568: PUSH
10569: LD_INT 23
10571: PUSH
10572: LD_INT 26
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 101
10588: PUSH
10589: LD_INT 102
10591: PUSH
10592: LD_INT 105
10594: PUSH
10595: LD_INT 106
10597: PUSH
10598: LD_INT 108
10600: PUSH
10601: LD_INT 116
10603: PUSH
10604: LD_INT 117
10606: PUSH
10607: LD_INT 118
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: ST_TO_ADDR
10624: GO 13607
10626: LD_INT 3
10628: DOUBLE
10629: EQUAL
10630: IFTRUE 10634
10632: GO 10722
10634: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10635: LD_ADDR_VAR 0 2
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: LD_INT 11
10651: PUSH
10652: LD_INT 12
10654: PUSH
10655: LD_INT 15
10657: PUSH
10658: LD_INT 16
10660: PUSH
10661: LD_INT 22
10663: PUSH
10664: LD_INT 26
10666: PUSH
10667: LD_INT 36
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 101
10684: PUSH
10685: LD_INT 102
10687: PUSH
10688: LD_INT 105
10690: PUSH
10691: LD_INT 106
10693: PUSH
10694: LD_INT 108
10696: PUSH
10697: LD_INT 116
10699: PUSH
10700: LD_INT 117
10702: PUSH
10703: LD_INT 118
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: ST_TO_ADDR
10720: GO 13607
10722: LD_INT 4
10724: DOUBLE
10725: EQUAL
10726: IFTRUE 10730
10728: GO 10826
10730: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 4
10741: PUSH
10742: LD_INT 5
10744: PUSH
10745: LD_INT 8
10747: PUSH
10748: LD_INT 11
10750: PUSH
10751: LD_INT 12
10753: PUSH
10754: LD_INT 15
10756: PUSH
10757: LD_INT 16
10759: PUSH
10760: LD_INT 22
10762: PUSH
10763: LD_INT 23
10765: PUSH
10766: LD_INT 26
10768: PUSH
10769: LD_INT 36
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 101
10788: PUSH
10789: LD_INT 102
10791: PUSH
10792: LD_INT 105
10794: PUSH
10795: LD_INT 106
10797: PUSH
10798: LD_INT 108
10800: PUSH
10801: LD_INT 116
10803: PUSH
10804: LD_INT 117
10806: PUSH
10807: LD_INT 118
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: ST_TO_ADDR
10824: GO 13607
10826: LD_INT 5
10828: DOUBLE
10829: EQUAL
10830: IFTRUE 10834
10832: GO 10946
10834: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 4
10845: PUSH
10846: LD_INT 5
10848: PUSH
10849: LD_INT 6
10851: PUSH
10852: LD_INT 8
10854: PUSH
10855: LD_INT 11
10857: PUSH
10858: LD_INT 12
10860: PUSH
10861: LD_INT 15
10863: PUSH
10864: LD_INT 16
10866: PUSH
10867: LD_INT 22
10869: PUSH
10870: LD_INT 23
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 26
10878: PUSH
10879: LD_INT 36
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 101
10900: PUSH
10901: LD_INT 102
10903: PUSH
10904: LD_INT 105
10906: PUSH
10907: LD_INT 106
10909: PUSH
10910: LD_INT 108
10912: PUSH
10913: LD_INT 109
10915: PUSH
10916: LD_INT 112
10918: PUSH
10919: LD_INT 116
10921: PUSH
10922: LD_INT 117
10924: PUSH
10925: LD_INT 118
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: ST_TO_ADDR
10944: GO 13607
10946: LD_INT 6
10948: DOUBLE
10949: EQUAL
10950: IFTRUE 10954
10952: GO 11086
10954: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10955: LD_ADDR_VAR 0 2
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: LD_INT 4
10965: PUSH
10966: LD_INT 5
10968: PUSH
10969: LD_INT 6
10971: PUSH
10972: LD_INT 8
10974: PUSH
10975: LD_INT 11
10977: PUSH
10978: LD_INT 12
10980: PUSH
10981: LD_INT 15
10983: PUSH
10984: LD_INT 16
10986: PUSH
10987: LD_INT 20
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 22
10995: PUSH
10996: LD_INT 23
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 26
11004: PUSH
11005: LD_INT 30
11007: PUSH
11008: LD_INT 31
11010: PUSH
11011: LD_INT 32
11013: PUSH
11014: LD_INT 36
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 101
11040: PUSH
11041: LD_INT 102
11043: PUSH
11044: LD_INT 105
11046: PUSH
11047: LD_INT 106
11049: PUSH
11050: LD_INT 108
11052: PUSH
11053: LD_INT 109
11055: PUSH
11056: LD_INT 112
11058: PUSH
11059: LD_INT 116
11061: PUSH
11062: LD_INT 117
11064: PUSH
11065: LD_INT 118
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: ST_TO_ADDR
11084: GO 13607
11086: LD_INT 7
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11206
11094: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11095: LD_ADDR_VAR 0 2
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: LD_INT 4
11105: PUSH
11106: LD_INT 5
11108: PUSH
11109: LD_INT 7
11111: PUSH
11112: LD_INT 11
11114: PUSH
11115: LD_INT 12
11117: PUSH
11118: LD_INT 15
11120: PUSH
11121: LD_INT 16
11123: PUSH
11124: LD_INT 20
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_INT 23
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 26
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 101
11160: PUSH
11161: LD_INT 102
11163: PUSH
11164: LD_INT 103
11166: PUSH
11167: LD_INT 105
11169: PUSH
11170: LD_INT 106
11172: PUSH
11173: LD_INT 108
11175: PUSH
11176: LD_INT 112
11178: PUSH
11179: LD_INT 116
11181: PUSH
11182: LD_INT 117
11184: PUSH
11185: LD_INT 118
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: ST_TO_ADDR
11204: GO 13607
11206: LD_INT 8
11208: DOUBLE
11209: EQUAL
11210: IFTRUE 11214
11212: GO 11354
11214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11215: LD_ADDR_VAR 0 2
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: LD_INT 4
11225: PUSH
11226: LD_INT 5
11228: PUSH
11229: LD_INT 6
11231: PUSH
11232: LD_INT 7
11234: PUSH
11235: LD_INT 8
11237: PUSH
11238: LD_INT 11
11240: PUSH
11241: LD_INT 12
11243: PUSH
11244: LD_INT 15
11246: PUSH
11247: LD_INT 16
11249: PUSH
11250: LD_INT 20
11252: PUSH
11253: LD_INT 21
11255: PUSH
11256: LD_INT 22
11258: PUSH
11259: LD_INT 23
11261: PUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 26
11267: PUSH
11268: LD_INT 30
11270: PUSH
11271: LD_INT 31
11273: PUSH
11274: LD_INT 32
11276: PUSH
11277: LD_INT 36
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 101
11304: PUSH
11305: LD_INT 102
11307: PUSH
11308: LD_INT 103
11310: PUSH
11311: LD_INT 105
11313: PUSH
11314: LD_INT 106
11316: PUSH
11317: LD_INT 108
11319: PUSH
11320: LD_INT 109
11322: PUSH
11323: LD_INT 112
11325: PUSH
11326: LD_INT 116
11328: PUSH
11329: LD_INT 117
11331: PUSH
11332: LD_INT 118
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: ST_TO_ADDR
11352: GO 13607
11354: LD_INT 9
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11510
11362: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11363: LD_ADDR_VAR 0 2
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 5
11376: PUSH
11377: LD_INT 6
11379: PUSH
11380: LD_INT 7
11382: PUSH
11383: LD_INT 8
11385: PUSH
11386: LD_INT 11
11388: PUSH
11389: LD_INT 12
11391: PUSH
11392: LD_INT 15
11394: PUSH
11395: LD_INT 16
11397: PUSH
11398: LD_INT 20
11400: PUSH
11401: LD_INT 21
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_INT 23
11409: PUSH
11410: LD_INT 25
11412: PUSH
11413: LD_INT 26
11415: PUSH
11416: LD_INT 28
11418: PUSH
11419: LD_INT 30
11421: PUSH
11422: LD_INT 31
11424: PUSH
11425: LD_INT 32
11427: PUSH
11428: LD_INT 36
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 101
11456: PUSH
11457: LD_INT 102
11459: PUSH
11460: LD_INT 103
11462: PUSH
11463: LD_INT 105
11465: PUSH
11466: LD_INT 106
11468: PUSH
11469: LD_INT 108
11471: PUSH
11472: LD_INT 109
11474: PUSH
11475: LD_INT 112
11477: PUSH
11478: LD_INT 114
11480: PUSH
11481: LD_INT 116
11483: PUSH
11484: LD_INT 117
11486: PUSH
11487: LD_INT 118
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: ST_TO_ADDR
11508: GO 13607
11510: LD_INT 10
11512: DOUBLE
11513: EQUAL
11514: IFTRUE 11518
11516: GO 11714
11518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: LD_INT 4
11529: PUSH
11530: LD_INT 5
11532: PUSH
11533: LD_INT 6
11535: PUSH
11536: LD_INT 7
11538: PUSH
11539: LD_INT 8
11541: PUSH
11542: LD_INT 9
11544: PUSH
11545: LD_INT 10
11547: PUSH
11548: LD_INT 11
11550: PUSH
11551: LD_INT 12
11553: PUSH
11554: LD_INT 13
11556: PUSH
11557: LD_INT 14
11559: PUSH
11560: LD_INT 15
11562: PUSH
11563: LD_INT 16
11565: PUSH
11566: LD_INT 17
11568: PUSH
11569: LD_INT 18
11571: PUSH
11572: LD_INT 19
11574: PUSH
11575: LD_INT 20
11577: PUSH
11578: LD_INT 21
11580: PUSH
11581: LD_INT 22
11583: PUSH
11584: LD_INT 23
11586: PUSH
11587: LD_INT 24
11589: PUSH
11590: LD_INT 25
11592: PUSH
11593: LD_INT 26
11595: PUSH
11596: LD_INT 28
11598: PUSH
11599: LD_INT 30
11601: PUSH
11602: LD_INT 31
11604: PUSH
11605: LD_INT 32
11607: PUSH
11608: LD_INT 36
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 101
11644: PUSH
11645: LD_INT 102
11647: PUSH
11648: LD_INT 103
11650: PUSH
11651: LD_INT 104
11653: PUSH
11654: LD_INT 105
11656: PUSH
11657: LD_INT 106
11659: PUSH
11660: LD_INT 107
11662: PUSH
11663: LD_INT 108
11665: PUSH
11666: LD_INT 109
11668: PUSH
11669: LD_INT 110
11671: PUSH
11672: LD_INT 111
11674: PUSH
11675: LD_INT 112
11677: PUSH
11678: LD_INT 114
11680: PUSH
11681: LD_INT 116
11683: PUSH
11684: LD_INT 117
11686: PUSH
11687: LD_INT 118
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: ST_TO_ADDR
11712: GO 13607
11714: LD_INT 11
11716: DOUBLE
11717: EQUAL
11718: IFTRUE 11722
11720: GO 11926
11722: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: LD_INT 3
11733: PUSH
11734: LD_INT 4
11736: PUSH
11737: LD_INT 5
11739: PUSH
11740: LD_INT 6
11742: PUSH
11743: LD_INT 7
11745: PUSH
11746: LD_INT 8
11748: PUSH
11749: LD_INT 9
11751: PUSH
11752: LD_INT 10
11754: PUSH
11755: LD_INT 11
11757: PUSH
11758: LD_INT 12
11760: PUSH
11761: LD_INT 13
11763: PUSH
11764: LD_INT 14
11766: PUSH
11767: LD_INT 15
11769: PUSH
11770: LD_INT 16
11772: PUSH
11773: LD_INT 17
11775: PUSH
11776: LD_INT 18
11778: PUSH
11779: LD_INT 19
11781: PUSH
11782: LD_INT 20
11784: PUSH
11785: LD_INT 21
11787: PUSH
11788: LD_INT 22
11790: PUSH
11791: LD_INT 23
11793: PUSH
11794: LD_INT 24
11796: PUSH
11797: LD_INT 25
11799: PUSH
11800: LD_INT 26
11802: PUSH
11803: LD_INT 28
11805: PUSH
11806: LD_INT 30
11808: PUSH
11809: LD_INT 31
11811: PUSH
11812: LD_INT 32
11814: PUSH
11815: LD_INT 34
11817: PUSH
11818: LD_INT 36
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 101
11856: PUSH
11857: LD_INT 102
11859: PUSH
11860: LD_INT 103
11862: PUSH
11863: LD_INT 104
11865: PUSH
11866: LD_INT 105
11868: PUSH
11869: LD_INT 106
11871: PUSH
11872: LD_INT 107
11874: PUSH
11875: LD_INT 108
11877: PUSH
11878: LD_INT 109
11880: PUSH
11881: LD_INT 110
11883: PUSH
11884: LD_INT 111
11886: PUSH
11887: LD_INT 112
11889: PUSH
11890: LD_INT 114
11892: PUSH
11893: LD_INT 116
11895: PUSH
11896: LD_INT 117
11898: PUSH
11899: LD_INT 118
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: ST_TO_ADDR
11924: GO 13607
11926: LD_INT 12
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11934
11932: GO 12154
11934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11935: LD_ADDR_VAR 0 2
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: LD_INT 4
11951: PUSH
11952: LD_INT 5
11954: PUSH
11955: LD_INT 6
11957: PUSH
11958: LD_INT 7
11960: PUSH
11961: LD_INT 8
11963: PUSH
11964: LD_INT 9
11966: PUSH
11967: LD_INT 10
11969: PUSH
11970: LD_INT 11
11972: PUSH
11973: LD_INT 12
11975: PUSH
11976: LD_INT 13
11978: PUSH
11979: LD_INT 14
11981: PUSH
11982: LD_INT 15
11984: PUSH
11985: LD_INT 16
11987: PUSH
11988: LD_INT 17
11990: PUSH
11991: LD_INT 18
11993: PUSH
11994: LD_INT 19
11996: PUSH
11997: LD_INT 20
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 22
12005: PUSH
12006: LD_INT 23
12008: PUSH
12009: LD_INT 24
12011: PUSH
12012: LD_INT 25
12014: PUSH
12015: LD_INT 26
12017: PUSH
12018: LD_INT 27
12020: PUSH
12021: LD_INT 28
12023: PUSH
12024: LD_INT 30
12026: PUSH
12027: LD_INT 31
12029: PUSH
12030: LD_INT 32
12032: PUSH
12033: LD_INT 33
12035: PUSH
12036: LD_INT 34
12038: PUSH
12039: LD_INT 36
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 101
12080: PUSH
12081: LD_INT 102
12083: PUSH
12084: LD_INT 103
12086: PUSH
12087: LD_INT 104
12089: PUSH
12090: LD_INT 105
12092: PUSH
12093: LD_INT 106
12095: PUSH
12096: LD_INT 107
12098: PUSH
12099: LD_INT 108
12101: PUSH
12102: LD_INT 109
12104: PUSH
12105: LD_INT 110
12107: PUSH
12108: LD_INT 111
12110: PUSH
12111: LD_INT 112
12113: PUSH
12114: LD_INT 113
12116: PUSH
12117: LD_INT 114
12119: PUSH
12120: LD_INT 116
12122: PUSH
12123: LD_INT 117
12125: PUSH
12126: LD_INT 118
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: ST_TO_ADDR
12152: GO 13607
12154: LD_INT 13
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12370
12162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12163: LD_ADDR_VAR 0 2
12167: PUSH
12168: LD_INT 1
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: LD_INT 3
12176: PUSH
12177: LD_INT 4
12179: PUSH
12180: LD_INT 5
12182: PUSH
12183: LD_INT 8
12185: PUSH
12186: LD_INT 9
12188: PUSH
12189: LD_INT 10
12191: PUSH
12192: LD_INT 11
12194: PUSH
12195: LD_INT 12
12197: PUSH
12198: LD_INT 14
12200: PUSH
12201: LD_INT 15
12203: PUSH
12204: LD_INT 16
12206: PUSH
12207: LD_INT 17
12209: PUSH
12210: LD_INT 18
12212: PUSH
12213: LD_INT 19
12215: PUSH
12216: LD_INT 20
12218: PUSH
12219: LD_INT 21
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 23
12227: PUSH
12228: LD_INT 24
12230: PUSH
12231: LD_INT 25
12233: PUSH
12234: LD_INT 26
12236: PUSH
12237: LD_INT 27
12239: PUSH
12240: LD_INT 28
12242: PUSH
12243: LD_INT 30
12245: PUSH
12246: LD_INT 31
12248: PUSH
12249: LD_INT 32
12251: PUSH
12252: LD_INT 33
12254: PUSH
12255: LD_INT 34
12257: PUSH
12258: LD_INT 36
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 101
12296: PUSH
12297: LD_INT 102
12299: PUSH
12300: LD_INT 103
12302: PUSH
12303: LD_INT 104
12305: PUSH
12306: LD_INT 105
12308: PUSH
12309: LD_INT 106
12311: PUSH
12312: LD_INT 107
12314: PUSH
12315: LD_INT 108
12317: PUSH
12318: LD_INT 109
12320: PUSH
12321: LD_INT 110
12323: PUSH
12324: LD_INT 111
12326: PUSH
12327: LD_INT 112
12329: PUSH
12330: LD_INT 113
12332: PUSH
12333: LD_INT 114
12335: PUSH
12336: LD_INT 116
12338: PUSH
12339: LD_INT 117
12341: PUSH
12342: LD_INT 118
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: ST_TO_ADDR
12368: GO 13607
12370: LD_INT 14
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12602
12378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 1
12386: PUSH
12387: LD_INT 2
12389: PUSH
12390: LD_INT 3
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: LD_INT 6
12401: PUSH
12402: LD_INT 7
12404: PUSH
12405: LD_INT 8
12407: PUSH
12408: LD_INT 9
12410: PUSH
12411: LD_INT 10
12413: PUSH
12414: LD_INT 11
12416: PUSH
12417: LD_INT 12
12419: PUSH
12420: LD_INT 13
12422: PUSH
12423: LD_INT 14
12425: PUSH
12426: LD_INT 15
12428: PUSH
12429: LD_INT 16
12431: PUSH
12432: LD_INT 17
12434: PUSH
12435: LD_INT 18
12437: PUSH
12438: LD_INT 19
12440: PUSH
12441: LD_INT 20
12443: PUSH
12444: LD_INT 21
12446: PUSH
12447: LD_INT 22
12449: PUSH
12450: LD_INT 23
12452: PUSH
12453: LD_INT 24
12455: PUSH
12456: LD_INT 25
12458: PUSH
12459: LD_INT 26
12461: PUSH
12462: LD_INT 27
12464: PUSH
12465: LD_INT 28
12467: PUSH
12468: LD_INT 29
12470: PUSH
12471: LD_INT 30
12473: PUSH
12474: LD_INT 31
12476: PUSH
12477: LD_INT 32
12479: PUSH
12480: LD_INT 33
12482: PUSH
12483: LD_INT 34
12485: PUSH
12486: LD_INT 36
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 101
12528: PUSH
12529: LD_INT 102
12531: PUSH
12532: LD_INT 103
12534: PUSH
12535: LD_INT 104
12537: PUSH
12538: LD_INT 105
12540: PUSH
12541: LD_INT 106
12543: PUSH
12544: LD_INT 107
12546: PUSH
12547: LD_INT 108
12549: PUSH
12550: LD_INT 109
12552: PUSH
12553: LD_INT 110
12555: PUSH
12556: LD_INT 111
12558: PUSH
12559: LD_INT 112
12561: PUSH
12562: LD_INT 113
12564: PUSH
12565: LD_INT 114
12567: PUSH
12568: LD_INT 116
12570: PUSH
12571: LD_INT 117
12573: PUSH
12574: LD_INT 118
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
12600: GO 13607
12602: LD_INT 15
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12834
12610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12611: LD_ADDR_VAR 0 2
12615: PUSH
12616: LD_INT 1
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: LD_INT 3
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: LD_INT 6
12633: PUSH
12634: LD_INT 7
12636: PUSH
12637: LD_INT 8
12639: PUSH
12640: LD_INT 9
12642: PUSH
12643: LD_INT 10
12645: PUSH
12646: LD_INT 11
12648: PUSH
12649: LD_INT 12
12651: PUSH
12652: LD_INT 13
12654: PUSH
12655: LD_INT 14
12657: PUSH
12658: LD_INT 15
12660: PUSH
12661: LD_INT 16
12663: PUSH
12664: LD_INT 17
12666: PUSH
12667: LD_INT 18
12669: PUSH
12670: LD_INT 19
12672: PUSH
12673: LD_INT 20
12675: PUSH
12676: LD_INT 21
12678: PUSH
12679: LD_INT 22
12681: PUSH
12682: LD_INT 23
12684: PUSH
12685: LD_INT 24
12687: PUSH
12688: LD_INT 25
12690: PUSH
12691: LD_INT 26
12693: PUSH
12694: LD_INT 27
12696: PUSH
12697: LD_INT 28
12699: PUSH
12700: LD_INT 29
12702: PUSH
12703: LD_INT 30
12705: PUSH
12706: LD_INT 31
12708: PUSH
12709: LD_INT 32
12711: PUSH
12712: LD_INT 33
12714: PUSH
12715: LD_INT 34
12717: PUSH
12718: LD_INT 36
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 101
12760: PUSH
12761: LD_INT 102
12763: PUSH
12764: LD_INT 103
12766: PUSH
12767: LD_INT 104
12769: PUSH
12770: LD_INT 105
12772: PUSH
12773: LD_INT 106
12775: PUSH
12776: LD_INT 107
12778: PUSH
12779: LD_INT 108
12781: PUSH
12782: LD_INT 109
12784: PUSH
12785: LD_INT 110
12787: PUSH
12788: LD_INT 111
12790: PUSH
12791: LD_INT 112
12793: PUSH
12794: LD_INT 113
12796: PUSH
12797: LD_INT 114
12799: PUSH
12800: LD_INT 116
12802: PUSH
12803: LD_INT 117
12805: PUSH
12806: LD_INT 118
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: ST_TO_ADDR
12832: GO 13607
12834: LD_INT 16
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12978
12842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12843: LD_ADDR_VAR 0 2
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: LD_INT 4
12853: PUSH
12854: LD_INT 5
12856: PUSH
12857: LD_INT 7
12859: PUSH
12860: LD_INT 11
12862: PUSH
12863: LD_INT 12
12865: PUSH
12866: LD_INT 15
12868: PUSH
12869: LD_INT 16
12871: PUSH
12872: LD_INT 20
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 22
12880: PUSH
12881: LD_INT 23
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 26
12889: PUSH
12890: LD_INT 30
12892: PUSH
12893: LD_INT 31
12895: PUSH
12896: LD_INT 32
12898: PUSH
12899: LD_INT 33
12901: PUSH
12902: LD_INT 34
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 101
12928: PUSH
12929: LD_INT 102
12931: PUSH
12932: LD_INT 103
12934: PUSH
12935: LD_INT 106
12937: PUSH
12938: LD_INT 108
12940: PUSH
12941: LD_INT 112
12943: PUSH
12944: LD_INT 113
12946: PUSH
12947: LD_INT 114
12949: PUSH
12950: LD_INT 116
12952: PUSH
12953: LD_INT 117
12955: PUSH
12956: LD_INT 118
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: ST_TO_ADDR
12976: GO 13607
12978: LD_INT 17
12980: DOUBLE
12981: EQUAL
12982: IFTRUE 12986
12984: GO 13210
12986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12987: LD_ADDR_VAR 0 2
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: LD_INT 3
13000: PUSH
13001: LD_INT 4
13003: PUSH
13004: LD_INT 5
13006: PUSH
13007: LD_INT 6
13009: PUSH
13010: LD_INT 7
13012: PUSH
13013: LD_INT 8
13015: PUSH
13016: LD_INT 9
13018: PUSH
13019: LD_INT 10
13021: PUSH
13022: LD_INT 11
13024: PUSH
13025: LD_INT 12
13027: PUSH
13028: LD_INT 13
13030: PUSH
13031: LD_INT 14
13033: PUSH
13034: LD_INT 15
13036: PUSH
13037: LD_INT 16
13039: PUSH
13040: LD_INT 17
13042: PUSH
13043: LD_INT 18
13045: PUSH
13046: LD_INT 19
13048: PUSH
13049: LD_INT 20
13051: PUSH
13052: LD_INT 21
13054: PUSH
13055: LD_INT 22
13057: PUSH
13058: LD_INT 23
13060: PUSH
13061: LD_INT 24
13063: PUSH
13064: LD_INT 25
13066: PUSH
13067: LD_INT 26
13069: PUSH
13070: LD_INT 27
13072: PUSH
13073: LD_INT 28
13075: PUSH
13076: LD_INT 29
13078: PUSH
13079: LD_INT 30
13081: PUSH
13082: LD_INT 31
13084: PUSH
13085: LD_INT 32
13087: PUSH
13088: LD_INT 33
13090: PUSH
13091: LD_INT 34
13093: PUSH
13094: LD_INT 36
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 101
13136: PUSH
13137: LD_INT 102
13139: PUSH
13140: LD_INT 103
13142: PUSH
13143: LD_INT 104
13145: PUSH
13146: LD_INT 105
13148: PUSH
13149: LD_INT 106
13151: PUSH
13152: LD_INT 107
13154: PUSH
13155: LD_INT 108
13157: PUSH
13158: LD_INT 109
13160: PUSH
13161: LD_INT 110
13163: PUSH
13164: LD_INT 111
13166: PUSH
13167: LD_INT 112
13169: PUSH
13170: LD_INT 113
13172: PUSH
13173: LD_INT 114
13175: PUSH
13176: LD_INT 116
13178: PUSH
13179: LD_INT 117
13181: PUSH
13182: LD_INT 118
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: ST_TO_ADDR
13208: GO 13607
13210: LD_INT 18
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13366
13218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13219: LD_ADDR_VAR 0 2
13223: PUSH
13224: LD_INT 2
13226: PUSH
13227: LD_INT 4
13229: PUSH
13230: LD_INT 5
13232: PUSH
13233: LD_INT 7
13235: PUSH
13236: LD_INT 11
13238: PUSH
13239: LD_INT 12
13241: PUSH
13242: LD_INT 15
13244: PUSH
13245: LD_INT 16
13247: PUSH
13248: LD_INT 20
13250: PUSH
13251: LD_INT 21
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_INT 23
13259: PUSH
13260: LD_INT 25
13262: PUSH
13263: LD_INT 26
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 31
13271: PUSH
13272: LD_INT 32
13274: PUSH
13275: LD_INT 33
13277: PUSH
13278: LD_INT 34
13280: PUSH
13281: LD_INT 35
13283: PUSH
13284: LD_INT 36
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 101
13312: PUSH
13313: LD_INT 102
13315: PUSH
13316: LD_INT 103
13318: PUSH
13319: LD_INT 106
13321: PUSH
13322: LD_INT 108
13324: PUSH
13325: LD_INT 112
13327: PUSH
13328: LD_INT 113
13330: PUSH
13331: LD_INT 114
13333: PUSH
13334: LD_INT 115
13336: PUSH
13337: LD_INT 116
13339: PUSH
13340: LD_INT 117
13342: PUSH
13343: LD_INT 118
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: ST_TO_ADDR
13364: GO 13607
13366: LD_INT 19
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13606
13374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 3
13388: PUSH
13389: LD_INT 4
13391: PUSH
13392: LD_INT 5
13394: PUSH
13395: LD_INT 6
13397: PUSH
13398: LD_INT 7
13400: PUSH
13401: LD_INT 8
13403: PUSH
13404: LD_INT 9
13406: PUSH
13407: LD_INT 10
13409: PUSH
13410: LD_INT 11
13412: PUSH
13413: LD_INT 12
13415: PUSH
13416: LD_INT 13
13418: PUSH
13419: LD_INT 14
13421: PUSH
13422: LD_INT 15
13424: PUSH
13425: LD_INT 16
13427: PUSH
13428: LD_INT 17
13430: PUSH
13431: LD_INT 18
13433: PUSH
13434: LD_INT 19
13436: PUSH
13437: LD_INT 20
13439: PUSH
13440: LD_INT 21
13442: PUSH
13443: LD_INT 22
13445: PUSH
13446: LD_INT 23
13448: PUSH
13449: LD_INT 24
13451: PUSH
13452: LD_INT 25
13454: PUSH
13455: LD_INT 26
13457: PUSH
13458: LD_INT 27
13460: PUSH
13461: LD_INT 28
13463: PUSH
13464: LD_INT 29
13466: PUSH
13467: LD_INT 30
13469: PUSH
13470: LD_INT 31
13472: PUSH
13473: LD_INT 32
13475: PUSH
13476: LD_INT 33
13478: PUSH
13479: LD_INT 34
13481: PUSH
13482: LD_INT 35
13484: PUSH
13485: LD_INT 36
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 101
13528: PUSH
13529: LD_INT 102
13531: PUSH
13532: LD_INT 103
13534: PUSH
13535: LD_INT 104
13537: PUSH
13538: LD_INT 105
13540: PUSH
13541: LD_INT 106
13543: PUSH
13544: LD_INT 107
13546: PUSH
13547: LD_INT 108
13549: PUSH
13550: LD_INT 109
13552: PUSH
13553: LD_INT 110
13555: PUSH
13556: LD_INT 111
13558: PUSH
13559: LD_INT 112
13561: PUSH
13562: LD_INT 113
13564: PUSH
13565: LD_INT 114
13567: PUSH
13568: LD_INT 115
13570: PUSH
13571: LD_INT 116
13573: PUSH
13574: LD_INT 117
13576: PUSH
13577: LD_INT 118
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: ST_TO_ADDR
13604: GO 13607
13606: POP
// end else
13607: GO 13838
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: LD_INT 3
13622: PUSH
13623: LD_INT 4
13625: PUSH
13626: LD_INT 5
13628: PUSH
13629: LD_INT 6
13631: PUSH
13632: LD_INT 7
13634: PUSH
13635: LD_INT 8
13637: PUSH
13638: LD_INT 9
13640: PUSH
13641: LD_INT 10
13643: PUSH
13644: LD_INT 11
13646: PUSH
13647: LD_INT 12
13649: PUSH
13650: LD_INT 13
13652: PUSH
13653: LD_INT 14
13655: PUSH
13656: LD_INT 15
13658: PUSH
13659: LD_INT 16
13661: PUSH
13662: LD_INT 17
13664: PUSH
13665: LD_INT 18
13667: PUSH
13668: LD_INT 19
13670: PUSH
13671: LD_INT 20
13673: PUSH
13674: LD_INT 21
13676: PUSH
13677: LD_INT 22
13679: PUSH
13680: LD_INT 23
13682: PUSH
13683: LD_INT 24
13685: PUSH
13686: LD_INT 25
13688: PUSH
13689: LD_INT 26
13691: PUSH
13692: LD_INT 27
13694: PUSH
13695: LD_INT 28
13697: PUSH
13698: LD_INT 29
13700: PUSH
13701: LD_INT 30
13703: PUSH
13704: LD_INT 31
13706: PUSH
13707: LD_INT 32
13709: PUSH
13710: LD_INT 33
13712: PUSH
13713: LD_INT 34
13715: PUSH
13716: LD_INT 35
13718: PUSH
13719: LD_INT 36
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 101
13762: PUSH
13763: LD_INT 102
13765: PUSH
13766: LD_INT 103
13768: PUSH
13769: LD_INT 104
13771: PUSH
13772: LD_INT 105
13774: PUSH
13775: LD_INT 106
13777: PUSH
13778: LD_INT 107
13780: PUSH
13781: LD_INT 108
13783: PUSH
13784: LD_INT 109
13786: PUSH
13787: LD_INT 110
13789: PUSH
13790: LD_INT 111
13792: PUSH
13793: LD_INT 112
13795: PUSH
13796: LD_INT 113
13798: PUSH
13799: LD_INT 114
13801: PUSH
13802: LD_INT 115
13804: PUSH
13805: LD_INT 116
13807: PUSH
13808: LD_INT 117
13810: PUSH
13811: LD_INT 118
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: ST_TO_ADDR
// if result then
13838: LD_VAR 0 2
13842: IFFALSE 14628
// begin normal :=  ;
13844: LD_ADDR_VAR 0 5
13848: PUSH
13849: LD_STRING 
13851: ST_TO_ADDR
// hardcore :=  ;
13852: LD_ADDR_VAR 0 6
13856: PUSH
13857: LD_STRING 
13859: ST_TO_ADDR
// active :=  ;
13860: LD_ADDR_VAR 0 7
13864: PUSH
13865: LD_STRING 
13867: ST_TO_ADDR
// for i = 1 to normalCounter do
13868: LD_ADDR_VAR 0 8
13872: PUSH
13873: DOUBLE
13874: LD_INT 1
13876: DEC
13877: ST_TO_ADDR
13878: LD_EXP 31
13882: PUSH
13883: FOR_TO
13884: IFFALSE 13985
// begin tmp := 0 ;
13886: LD_ADDR_VAR 0 3
13890: PUSH
13891: LD_STRING 0
13893: ST_TO_ADDR
// if result [ 1 ] then
13894: LD_VAR 0 2
13898: PUSH
13899: LD_INT 1
13901: ARRAY
13902: IFFALSE 13967
// if result [ 1 ] [ 1 ] = i then
13904: LD_VAR 0 2
13908: PUSH
13909: LD_INT 1
13911: ARRAY
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PUSH
13917: LD_VAR 0 8
13921: EQUAL
13922: IFFALSE 13967
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13924: LD_ADDR_VAR 0 2
13928: PUSH
13929: LD_VAR 0 2
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: LD_VAR 0 2
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 3
13953: PPUSH
13954: CALL_OW 1
13958: ST_TO_ADDR
// tmp := 1 ;
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_STRING 1
13966: ST_TO_ADDR
// end ; normal := normal & tmp ;
13967: LD_ADDR_VAR 0 5
13971: PUSH
13972: LD_VAR 0 5
13976: PUSH
13977: LD_VAR 0 3
13981: STR
13982: ST_TO_ADDR
// end ;
13983: GO 13883
13985: POP
13986: POP
// for i = 1 to hardcoreCounter do
13987: LD_ADDR_VAR 0 8
13991: PUSH
13992: DOUBLE
13993: LD_INT 1
13995: DEC
13996: ST_TO_ADDR
13997: LD_EXP 32
14001: PUSH
14002: FOR_TO
14003: IFFALSE 14108
// begin tmp := 0 ;
14005: LD_ADDR_VAR 0 3
14009: PUSH
14010: LD_STRING 0
14012: ST_TO_ADDR
// if result [ 2 ] then
14013: LD_VAR 0 2
14017: PUSH
14018: LD_INT 2
14020: ARRAY
14021: IFFALSE 14090
// if result [ 2 ] [ 1 ] = 100 + i then
14023: LD_VAR 0 2
14027: PUSH
14028: LD_INT 2
14030: ARRAY
14031: PUSH
14032: LD_INT 1
14034: ARRAY
14035: PUSH
14036: LD_INT 100
14038: PUSH
14039: LD_VAR 0 8
14043: PLUS
14044: EQUAL
14045: IFFALSE 14090
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14047: LD_ADDR_VAR 0 2
14051: PUSH
14052: LD_VAR 0 2
14056: PPUSH
14057: LD_INT 2
14059: PPUSH
14060: LD_VAR 0 2
14064: PUSH
14065: LD_INT 2
14067: ARRAY
14068: PPUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 3
14076: PPUSH
14077: CALL_OW 1
14081: ST_TO_ADDR
// tmp := 1 ;
14082: LD_ADDR_VAR 0 3
14086: PUSH
14087: LD_STRING 1
14089: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14090: LD_ADDR_VAR 0 6
14094: PUSH
14095: LD_VAR 0 6
14099: PUSH
14100: LD_VAR 0 3
14104: STR
14105: ST_TO_ADDR
// end ;
14106: GO 14002
14108: POP
14109: POP
// if isGameLoad then
14110: LD_VAR 0 1
14114: IFFALSE 14589
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14116: LD_ADDR_VAR 0 4
14120: PUSH
14121: LD_EXP 35
14125: PUSH
14126: LD_EXP 34
14130: PUSH
14131: LD_EXP 36
14135: PUSH
14136: LD_EXP 33
14140: PUSH
14141: LD_EXP 37
14145: PUSH
14146: LD_EXP 38
14150: PUSH
14151: LD_EXP 39
14155: PUSH
14156: LD_EXP 40
14160: PUSH
14161: LD_EXP 41
14165: PUSH
14166: LD_EXP 42
14170: PUSH
14171: LD_EXP 43
14175: PUSH
14176: LD_EXP 44
14180: PUSH
14181: LD_EXP 45
14185: PUSH
14186: LD_EXP 46
14190: PUSH
14191: LD_EXP 54
14195: PUSH
14196: LD_EXP 55
14200: PUSH
14201: LD_EXP 56
14205: PUSH
14206: LD_EXP 57
14210: PUSH
14211: LD_EXP 59
14215: PUSH
14216: LD_EXP 60
14220: PUSH
14221: LD_EXP 61
14225: PUSH
14226: LD_EXP 64
14230: PUSH
14231: LD_EXP 66
14235: PUSH
14236: LD_EXP 67
14240: PUSH
14241: LD_EXP 68
14245: PUSH
14246: LD_EXP 70
14250: PUSH
14251: LD_EXP 71
14255: PUSH
14256: LD_EXP 74
14260: PUSH
14261: LD_EXP 75
14265: PUSH
14266: LD_EXP 76
14270: PUSH
14271: LD_EXP 77
14275: PUSH
14276: LD_EXP 78
14280: PUSH
14281: LD_EXP 79
14285: PUSH
14286: LD_EXP 80
14290: PUSH
14291: LD_EXP 81
14295: PUSH
14296: LD_EXP 82
14300: PUSH
14301: LD_EXP 47
14305: PUSH
14306: LD_EXP 48
14310: PUSH
14311: LD_EXP 51
14315: PUSH
14316: LD_EXP 52
14320: PUSH
14321: LD_EXP 53
14325: PUSH
14326: LD_EXP 49
14330: PUSH
14331: LD_EXP 50
14335: PUSH
14336: LD_EXP 58
14340: PUSH
14341: LD_EXP 62
14345: PUSH
14346: LD_EXP 63
14350: PUSH
14351: LD_EXP 65
14355: PUSH
14356: LD_EXP 69
14360: PUSH
14361: LD_EXP 72
14365: PUSH
14366: LD_EXP 73
14370: PUSH
14371: LD_EXP 83
14375: PUSH
14376: LD_EXP 84
14380: PUSH
14381: LD_EXP 85
14385: PUSH
14386: LD_EXP 86
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: ST_TO_ADDR
// tmp :=  ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_STRING 
14454: ST_TO_ADDR
// for i = 1 to normalCounter do
14455: LD_ADDR_VAR 0 8
14459: PUSH
14460: DOUBLE
14461: LD_INT 1
14463: DEC
14464: ST_TO_ADDR
14465: LD_EXP 31
14469: PUSH
14470: FOR_TO
14471: IFFALSE 14507
// begin if flags [ i ] then
14473: LD_VAR 0 4
14477: PUSH
14478: LD_VAR 0 8
14482: ARRAY
14483: IFFALSE 14505
// tmp := tmp & i & ; ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_VAR 0 3
14494: PUSH
14495: LD_VAR 0 8
14499: STR
14500: PUSH
14501: LD_STRING ;
14503: STR
14504: ST_TO_ADDR
// end ;
14505: GO 14470
14507: POP
14508: POP
// for i = 1 to hardcoreCounter do
14509: LD_ADDR_VAR 0 8
14513: PUSH
14514: DOUBLE
14515: LD_INT 1
14517: DEC
14518: ST_TO_ADDR
14519: LD_EXP 32
14523: PUSH
14524: FOR_TO
14525: IFFALSE 14571
// begin if flags [ normalCounter + i ] then
14527: LD_VAR 0 4
14531: PUSH
14532: LD_EXP 31
14536: PUSH
14537: LD_VAR 0 8
14541: PLUS
14542: ARRAY
14543: IFFALSE 14569
// tmp := tmp & ( 100 + i ) & ; ;
14545: LD_ADDR_VAR 0 3
14549: PUSH
14550: LD_VAR 0 3
14554: PUSH
14555: LD_INT 100
14557: PUSH
14558: LD_VAR 0 8
14562: PLUS
14563: STR
14564: PUSH
14565: LD_STRING ;
14567: STR
14568: ST_TO_ADDR
// end ;
14569: GO 14524
14571: POP
14572: POP
// if tmp then
14573: LD_VAR 0 3
14577: IFFALSE 14589
// active := tmp ;
14579: LD_ADDR_VAR 0 7
14583: PUSH
14584: LD_VAR 0 3
14588: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14589: LD_STRING getStreamItemsFromMission("
14591: PUSH
14592: LD_VAR 0 5
14596: STR
14597: PUSH
14598: LD_STRING ","
14600: STR
14601: PUSH
14602: LD_VAR 0 6
14606: STR
14607: PUSH
14608: LD_STRING ","
14610: STR
14611: PUSH
14612: LD_VAR 0 7
14616: STR
14617: PUSH
14618: LD_STRING ")
14620: STR
14621: PPUSH
14622: CALL_OW 559
// end else
14626: GO 14635
// ToLua ( getStreamItemsFromMission("","","") ) ;
14628: LD_STRING getStreamItemsFromMission("","","")
14630: PPUSH
14631: CALL_OW 559
// end ;
14635: LD_VAR 0 2
14639: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14640: LD_EXP 30
14644: PUSH
14645: LD_EXP 35
14649: AND
14650: IFFALSE 14774
14652: GO 14654
14654: DISABLE
14655: LD_INT 0
14657: PPUSH
14658: PPUSH
// begin enable ;
14659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_OWVAR 2
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 7
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 34
14692: PUSH
14693: LD_INT 45
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 34
14702: PUSH
14703: LD_INT 28
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 34
14712: PUSH
14713: LD_INT 47
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 69
14735: ST_TO_ADDR
// if not tmp then
14736: LD_VAR 0 2
14740: NOT
14741: IFFALSE 14745
// exit ;
14743: GO 14774
// for i in tmp do
14745: LD_ADDR_VAR 0 1
14749: PUSH
14750: LD_VAR 0 2
14754: PUSH
14755: FOR_IN
14756: IFFALSE 14772
// begin SetLives ( i , 0 ) ;
14758: LD_VAR 0 1
14762: PPUSH
14763: LD_INT 0
14765: PPUSH
14766: CALL_OW 234
// end ;
14770: GO 14755
14772: POP
14773: POP
// end ;
14774: PPOPN 2
14776: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14777: LD_EXP 30
14781: PUSH
14782: LD_EXP 36
14786: AND
14787: IFFALSE 14871
14789: GO 14791
14791: DISABLE
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
// begin enable ;
14796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14797: LD_ADDR_VAR 0 2
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_OWVAR 2
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 32
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 69
14832: ST_TO_ADDR
// if not tmp then
14833: LD_VAR 0 2
14837: NOT
14838: IFFALSE 14842
// exit ;
14840: GO 14871
// for i in tmp do
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_VAR 0 2
14851: PUSH
14852: FOR_IN
14853: IFFALSE 14869
// begin SetLives ( i , 0 ) ;
14855: LD_VAR 0 1
14859: PPUSH
14860: LD_INT 0
14862: PPUSH
14863: CALL_OW 234
// end ;
14867: GO 14852
14869: POP
14870: POP
// end ;
14871: PPOPN 2
14873: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14874: LD_EXP 30
14878: PUSH
14879: LD_EXP 33
14883: AND
14884: IFFALSE 14977
14886: GO 14888
14888: DISABLE
14889: LD_INT 0
14891: PPUSH
// begin enable ;
14892: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_INT 22
14900: PUSH
14901: LD_OWVAR 2
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 2
14912: PUSH
14913: LD_INT 25
14915: PUSH
14916: LD_INT 5
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 25
14925: PUSH
14926: LD_INT 9
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 25
14935: PUSH
14936: LD_INT 8
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 69
14957: PUSH
14958: FOR_IN
14959: IFFALSE 14975
// begin SetClass ( i , 1 ) ;
14961: LD_VAR 0 1
14965: PPUSH
14966: LD_INT 1
14968: PPUSH
14969: CALL_OW 336
// end ;
14973: GO 14958
14975: POP
14976: POP
// end ;
14977: PPOPN 1
14979: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14980: LD_EXP 30
14984: PUSH
14985: LD_EXP 34
14989: AND
14990: PUSH
14991: LD_OWVAR 65
14995: PUSH
14996: LD_INT 7
14998: LESS
14999: AND
15000: IFFALSE 15014
15002: GO 15004
15004: DISABLE
// begin enable ;
15005: ENABLE
// game_speed := 7 ;
15006: LD_ADDR_OWVAR 65
15010: PUSH
15011: LD_INT 7
15013: ST_TO_ADDR
// end ;
15014: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15015: LD_EXP 30
15019: PUSH
15020: LD_EXP 37
15024: AND
15025: IFFALSE 15227
15027: GO 15029
15029: DISABLE
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
15034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_INT 81
15042: PUSH
15043: LD_OWVAR 2
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 21
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PPUSH
15066: CALL_OW 69
15070: ST_TO_ADDR
// if not tmp then
15071: LD_VAR 0 3
15075: NOT
15076: IFFALSE 15080
// exit ;
15078: GO 15227
// if tmp > 5 then
15080: LD_VAR 0 3
15084: PUSH
15085: LD_INT 5
15087: GREATER
15088: IFFALSE 15100
// k := 5 else
15090: LD_ADDR_VAR 0 2
15094: PUSH
15095: LD_INT 5
15097: ST_TO_ADDR
15098: GO 15110
// k := tmp ;
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: LD_VAR 0 3
15109: ST_TO_ADDR
// for i := 1 to k do
15110: LD_ADDR_VAR 0 1
15114: PUSH
15115: DOUBLE
15116: LD_INT 1
15118: DEC
15119: ST_TO_ADDR
15120: LD_VAR 0 2
15124: PUSH
15125: FOR_TO
15126: IFFALSE 15225
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15128: LD_VAR 0 3
15132: PUSH
15133: LD_VAR 0 1
15137: ARRAY
15138: PPUSH
15139: LD_VAR 0 1
15143: PUSH
15144: LD_INT 4
15146: MOD
15147: PUSH
15148: LD_INT 1
15150: PLUS
15151: PPUSH
15152: CALL_OW 259
15156: PUSH
15157: LD_INT 10
15159: LESS
15160: IFFALSE 15223
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 1
15177: PUSH
15178: LD_INT 4
15180: MOD
15181: PUSH
15182: LD_INT 1
15184: PLUS
15185: PPUSH
15186: LD_VAR 0 3
15190: PUSH
15191: LD_VAR 0 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 4
15204: MOD
15205: PUSH
15206: LD_INT 1
15208: PLUS
15209: PPUSH
15210: CALL_OW 259
15214: PUSH
15215: LD_INT 1
15217: PLUS
15218: PPUSH
15219: CALL_OW 237
15223: GO 15125
15225: POP
15226: POP
// end ;
15227: PPOPN 3
15229: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15230: LD_EXP 30
15234: PUSH
15235: LD_EXP 38
15239: AND
15240: IFFALSE 15260
15242: GO 15244
15244: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15245: LD_INT 4
15247: PPUSH
15248: LD_OWVAR 2
15252: PPUSH
15253: LD_INT 0
15255: PPUSH
15256: CALL_OW 324
15260: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15261: LD_EXP 30
15265: PUSH
15266: LD_EXP 67
15270: AND
15271: IFFALSE 15291
15273: GO 15275
15275: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15276: LD_INT 19
15278: PPUSH
15279: LD_OWVAR 2
15283: PPUSH
15284: LD_INT 0
15286: PPUSH
15287: CALL_OW 324
15291: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15292: LD_EXP 30
15296: PUSH
15297: LD_EXP 39
15301: AND
15302: IFFALSE 15404
15304: GO 15306
15306: DISABLE
15307: LD_INT 0
15309: PPUSH
15310: PPUSH
// begin enable ;
15311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15312: LD_ADDR_VAR 0 2
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_OWVAR 2
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 2
15331: PUSH
15332: LD_INT 34
15334: PUSH
15335: LD_INT 11
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 34
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: ST_TO_ADDR
// if not tmp then
15366: LD_VAR 0 2
15370: NOT
15371: IFFALSE 15375
// exit ;
15373: GO 15404
// for i in tmp do
15375: LD_ADDR_VAR 0 1
15379: PUSH
15380: LD_VAR 0 2
15384: PUSH
15385: FOR_IN
15386: IFFALSE 15402
// begin SetLives ( i , 0 ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 0
15395: PPUSH
15396: CALL_OW 234
// end ;
15400: GO 15385
15402: POP
15403: POP
// end ;
15404: PPOPN 2
15406: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15407: LD_EXP 30
15411: PUSH
15412: LD_EXP 40
15416: AND
15417: IFFALSE 15437
15419: GO 15421
15421: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15422: LD_INT 32
15424: PPUSH
15425: LD_OWVAR 2
15429: PPUSH
15430: LD_INT 0
15432: PPUSH
15433: CALL_OW 324
15437: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15438: LD_EXP 30
15442: PUSH
15443: LD_EXP 41
15447: AND
15448: IFFALSE 15629
15450: GO 15452
15452: DISABLE
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
15457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_OWVAR 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 33
15477: PUSH
15478: LD_INT 3
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: ST_TO_ADDR
// if not tmp then
15494: LD_VAR 0 2
15498: NOT
15499: IFFALSE 15503
// exit ;
15501: GO 15629
// side := 0 ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 0
15510: ST_TO_ADDR
// for i := 1 to 8 do
15511: LD_ADDR_VAR 0 1
15515: PUSH
15516: DOUBLE
15517: LD_INT 1
15519: DEC
15520: ST_TO_ADDR
15521: LD_INT 8
15523: PUSH
15524: FOR_TO
15525: IFFALSE 15573
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15527: LD_OWVAR 2
15531: PUSH
15532: LD_VAR 0 1
15536: NONEQUAL
15537: PUSH
15538: LD_OWVAR 2
15542: PPUSH
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 81
15552: PUSH
15553: LD_INT 2
15555: EQUAL
15556: AND
15557: IFFALSE 15571
// begin side := i ;
15559: LD_ADDR_VAR 0 3
15563: PUSH
15564: LD_VAR 0 1
15568: ST_TO_ADDR
// break ;
15569: GO 15573
// end ;
15571: GO 15524
15573: POP
15574: POP
// if not side then
15575: LD_VAR 0 3
15579: NOT
15580: IFFALSE 15584
// exit ;
15582: GO 15629
// for i := 1 to tmp do
15584: LD_ADDR_VAR 0 1
15588: PUSH
15589: DOUBLE
15590: LD_INT 1
15592: DEC
15593: ST_TO_ADDR
15594: LD_VAR 0 2
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15627
// if Prob ( 60 ) then
15602: LD_INT 60
15604: PPUSH
15605: CALL_OW 13
15609: IFFALSE 15625
// SetSide ( i , side ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: CALL_OW 235
15625: GO 15599
15627: POP
15628: POP
// end ;
15629: PPOPN 3
15631: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15632: LD_EXP 30
15636: PUSH
15637: LD_EXP 43
15641: AND
15642: IFFALSE 15761
15644: GO 15646
15646: DISABLE
15647: LD_INT 0
15649: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_INT 22
15657: PUSH
15658: LD_OWVAR 2
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: LD_INT 23
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 69
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15759
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 257
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: LD_INT 3
15725: PUSH
15726: LD_INT 4
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: IN
15735: IFFALSE 15757
// SetClass ( un , rand ( 1 , 4 ) ) ;
15737: LD_VAR 0 1
15741: PPUSH
15742: LD_INT 1
15744: PPUSH
15745: LD_INT 4
15747: PPUSH
15748: CALL_OW 12
15752: PPUSH
15753: CALL_OW 336
15757: GO 15704
15759: POP
15760: POP
// end ;
15761: PPOPN 1
15763: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15764: LD_EXP 30
15768: PUSH
15769: LD_EXP 42
15773: AND
15774: IFFALSE 15853
15776: GO 15778
15778: DISABLE
15779: LD_INT 0
15781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15782: LD_ADDR_VAR 0 1
15786: PUSH
15787: LD_INT 22
15789: PUSH
15790: LD_OWVAR 2
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 21
15801: PUSH
15802: LD_INT 3
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: ST_TO_ADDR
// if not tmp then
15818: LD_VAR 0 1
15822: NOT
15823: IFFALSE 15827
// exit ;
15825: GO 15853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15827: LD_VAR 0 1
15831: PUSH
15832: LD_INT 1
15834: PPUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 12
15844: ARRAY
15845: PPUSH
15846: LD_INT 100
15848: PPUSH
15849: CALL_OW 234
// end ;
15853: PPOPN 1
15855: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15856: LD_EXP 30
15860: PUSH
15861: LD_EXP 44
15865: AND
15866: IFFALSE 15964
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_INT 22
15881: PUSH
15882: LD_OWVAR 2
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 21
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 69
15909: ST_TO_ADDR
// if not tmp then
15910: LD_VAR 0 1
15914: NOT
15915: IFFALSE 15919
// exit ;
15917: GO 15964
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15919: LD_VAR 0 1
15923: PUSH
15924: LD_INT 1
15926: PPUSH
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 12
15936: ARRAY
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: LD_INT 4
15943: PPUSH
15944: CALL_OW 12
15948: PPUSH
15949: LD_INT 3000
15951: PPUSH
15952: LD_INT 9000
15954: PPUSH
15955: CALL_OW 12
15959: PPUSH
15960: CALL_OW 492
// end ;
15964: PPOPN 1
15966: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15967: LD_EXP 30
15971: PUSH
15972: LD_EXP 45
15976: AND
15977: IFFALSE 15997
15979: GO 15981
15981: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15982: LD_INT 1
15984: PPUSH
15985: LD_OWVAR 2
15989: PPUSH
15990: LD_INT 0
15992: PPUSH
15993: CALL_OW 324
15997: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15998: LD_EXP 30
16002: PUSH
16003: LD_EXP 46
16007: AND
16008: IFFALSE 16091
16010: GO 16012
16012: DISABLE
16013: LD_INT 0
16015: PPUSH
16016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16017: LD_ADDR_VAR 0 2
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_OWVAR 2
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 21
16036: PUSH
16037: LD_INT 3
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PPUSH
16048: CALL_OW 69
16052: ST_TO_ADDR
// if not tmp then
16053: LD_VAR 0 2
16057: NOT
16058: IFFALSE 16062
// exit ;
16060: GO 16091
// for i in tmp do
16062: LD_ADDR_VAR 0 1
16066: PUSH
16067: LD_VAR 0 2
16071: PUSH
16072: FOR_IN
16073: IFFALSE 16089
// SetBLevel ( i , 10 ) ;
16075: LD_VAR 0 1
16079: PPUSH
16080: LD_INT 10
16082: PPUSH
16083: CALL_OW 241
16087: GO 16072
16089: POP
16090: POP
// end ;
16091: PPOPN 2
16093: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16094: LD_EXP 30
16098: PUSH
16099: LD_EXP 47
16103: AND
16104: IFFALSE 16215
16106: GO 16108
16108: DISABLE
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16114: LD_ADDR_VAR 0 3
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_OWVAR 2
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 25
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PPUSH
16145: CALL_OW 69
16149: ST_TO_ADDR
// if not tmp then
16150: LD_VAR 0 3
16154: NOT
16155: IFFALSE 16159
// exit ;
16157: GO 16215
// un := tmp [ rand ( 1 , tmp ) ] ;
16159: LD_ADDR_VAR 0 2
16163: PUSH
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 1
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: CALL_OW 12
16181: ARRAY
16182: ST_TO_ADDR
// if Crawls ( un ) then
16183: LD_VAR 0 2
16187: PPUSH
16188: CALL_OW 318
16192: IFFALSE 16203
// ComWalk ( un ) ;
16194: LD_VAR 0 2
16198: PPUSH
16199: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16203: LD_VAR 0 2
16207: PPUSH
16208: LD_INT 5
16210: PPUSH
16211: CALL_OW 336
// end ;
16215: PPOPN 3
16217: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16218: LD_EXP 30
16222: PUSH
16223: LD_EXP 48
16227: AND
16228: PUSH
16229: LD_OWVAR 67
16233: PUSH
16234: LD_INT 4
16236: LESS
16237: AND
16238: IFFALSE 16257
16240: GO 16242
16242: DISABLE
// begin Difficulty := Difficulty + 1 ;
16243: LD_ADDR_OWVAR 67
16247: PUSH
16248: LD_OWVAR 67
16252: PUSH
16253: LD_INT 1
16255: PLUS
16256: ST_TO_ADDR
// end ;
16257: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16258: LD_EXP 30
16262: PUSH
16263: LD_EXP 49
16267: AND
16268: IFFALSE 16371
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
// begin for i := 1 to 5 do
16276: LD_ADDR_VAR 0 1
16280: PUSH
16281: DOUBLE
16282: LD_INT 1
16284: DEC
16285: ST_TO_ADDR
16286: LD_INT 5
16288: PUSH
16289: FOR_TO
16290: IFFALSE 16369
// begin uc_nation := nation_nature ;
16292: LD_ADDR_OWVAR 21
16296: PUSH
16297: LD_INT 0
16299: ST_TO_ADDR
// uc_side := 0 ;
16300: LD_ADDR_OWVAR 20
16304: PUSH
16305: LD_INT 0
16307: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16308: LD_ADDR_OWVAR 29
16312: PUSH
16313: LD_INT 12
16315: PUSH
16316: LD_INT 12
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: ST_TO_ADDR
// hc_agressivity := 20 ;
16323: LD_ADDR_OWVAR 35
16327: PUSH
16328: LD_INT 20
16330: ST_TO_ADDR
// hc_class := class_tiger ;
16331: LD_ADDR_OWVAR 28
16335: PUSH
16336: LD_INT 14
16338: ST_TO_ADDR
// hc_gallery :=  ;
16339: LD_ADDR_OWVAR 33
16343: PUSH
16344: LD_STRING 
16346: ST_TO_ADDR
// hc_name :=  ;
16347: LD_ADDR_OWVAR 26
16351: PUSH
16352: LD_STRING 
16354: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16355: CALL_OW 44
16359: PPUSH
16360: LD_INT 0
16362: PPUSH
16363: CALL_OW 51
// end ;
16367: GO 16289
16369: POP
16370: POP
// end ;
16371: PPOPN 1
16373: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16374: LD_EXP 30
16378: PUSH
16379: LD_EXP 50
16383: AND
16384: IFFALSE 16393
16386: GO 16388
16388: DISABLE
// StreamSibBomb ;
16389: CALL 16394 0 0
16393: END
// export function StreamSibBomb ; var i , x , y ; begin
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
16398: PPUSH
16399: PPUSH
// result := false ;
16400: LD_ADDR_VAR 0 1
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// for i := 1 to 16 do
16408: LD_ADDR_VAR 0 2
16412: PUSH
16413: DOUBLE
16414: LD_INT 1
16416: DEC
16417: ST_TO_ADDR
16418: LD_INT 16
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16621
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 10
16431: PUSH
16432: LD_INT 20
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 40
16440: PUSH
16441: LD_INT 50
16443: PUSH
16444: LD_INT 60
16446: PUSH
16447: LD_INT 70
16449: PUSH
16450: LD_INT 80
16452: PUSH
16453: LD_INT 90
16455: PUSH
16456: LD_INT 100
16458: PUSH
16459: LD_INT 110
16461: PUSH
16462: LD_INT 120
16464: PUSH
16465: LD_INT 130
16467: PUSH
16468: LD_INT 140
16470: PUSH
16471: LD_INT 150
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 1
16493: PPUSH
16494: LD_INT 15
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16503: LD_ADDR_VAR 0 4
16507: PUSH
16508: LD_INT 10
16510: PUSH
16511: LD_INT 20
16513: PUSH
16514: LD_INT 30
16516: PUSH
16517: LD_INT 40
16519: PUSH
16520: LD_INT 50
16522: PUSH
16523: LD_INT 60
16525: PUSH
16526: LD_INT 70
16528: PUSH
16529: LD_INT 80
16531: PUSH
16532: LD_INT 90
16534: PUSH
16535: LD_INT 100
16537: PUSH
16538: LD_INT 110
16540: PUSH
16541: LD_INT 120
16543: PUSH
16544: LD_INT 130
16546: PUSH
16547: LD_INT 140
16549: PUSH
16550: LD_INT 150
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_INT 15
16575: PPUSH
16576: CALL_OW 12
16580: ARRAY
16581: ST_TO_ADDR
// if ValidHex ( x , y ) then
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_VAR 0 4
16591: PPUSH
16592: CALL_OW 488
16596: IFFALSE 16619
// begin result := [ x , y ] ;
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: LD_VAR 0 3
16607: PUSH
16608: LD_VAR 0 4
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: ST_TO_ADDR
// break ;
16617: GO 16621
// end ; end ;
16619: GO 16421
16621: POP
16622: POP
// if result then
16623: LD_VAR 0 1
16627: IFFALSE 16687
// begin ToLua ( playSibBomb() ) ;
16629: LD_STRING playSibBomb()
16631: PPUSH
16632: CALL_OW 559
// wait ( 0 0$14 ) ;
16636: LD_INT 490
16638: PPUSH
16639: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16643: LD_VAR 0 1
16647: PUSH
16648: LD_INT 1
16650: ARRAY
16651: PPUSH
16652: LD_VAR 0 1
16656: PUSH
16657: LD_INT 2
16659: ARRAY
16660: PPUSH
16661: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 1
16672: ARRAY
16673: PPUSH
16674: LD_VAR 0 1
16678: PUSH
16679: LD_INT 2
16681: ARRAY
16682: PPUSH
16683: CALL_OW 429
// end ; end ;
16687: LD_VAR 0 1
16691: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16692: LD_EXP 30
16696: PUSH
16697: LD_EXP 52
16701: AND
16702: IFFALSE 16714
16704: GO 16706
16706: DISABLE
// YouLost (  ) ;
16707: LD_STRING 
16709: PPUSH
16710: CALL_OW 104
16714: END
// every 0 0$1 trigger StreamModeActive and sFog do
16715: LD_EXP 30
16719: PUSH
16720: LD_EXP 51
16724: AND
16725: IFFALSE 16739
16727: GO 16729
16729: DISABLE
// FogOff ( your_side ) ;
16730: LD_OWVAR 2
16734: PPUSH
16735: CALL_OW 344
16739: END
// every 0 0$1 trigger StreamModeActive and sSun do
16740: LD_EXP 30
16744: PUSH
16745: LD_EXP 53
16749: AND
16750: IFFALSE 16778
16752: GO 16754
16754: DISABLE
// begin solar_recharge_percent := 0 ;
16755: LD_ADDR_OWVAR 79
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16763: LD_INT 10500
16765: PPUSH
16766: CALL_OW 67
// solar_recharge_percent := 100 ;
16770: LD_ADDR_OWVAR 79
16774: PUSH
16775: LD_INT 100
16777: ST_TO_ADDR
// end ;
16778: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16779: LD_EXP 30
16783: PUSH
16784: LD_EXP 54
16788: AND
16789: IFFALSE 17028
16791: GO 16793
16793: DISABLE
16794: LD_INT 0
16796: PPUSH
16797: PPUSH
16798: PPUSH
// begin tmp := [ ] ;
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: EMPTY
16805: ST_TO_ADDR
// for i := 1 to 6 do
16806: LD_ADDR_VAR 0 1
16810: PUSH
16811: DOUBLE
16812: LD_INT 1
16814: DEC
16815: ST_TO_ADDR
16816: LD_INT 6
16818: PUSH
16819: FOR_TO
16820: IFFALSE 16925
// begin uc_nation := nation_nature ;
16822: LD_ADDR_OWVAR 21
16826: PUSH
16827: LD_INT 0
16829: ST_TO_ADDR
// uc_side := 0 ;
16830: LD_ADDR_OWVAR 20
16834: PUSH
16835: LD_INT 0
16837: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16838: LD_ADDR_OWVAR 29
16842: PUSH
16843: LD_INT 12
16845: PUSH
16846: LD_INT 12
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: ST_TO_ADDR
// hc_agressivity := 20 ;
16853: LD_ADDR_OWVAR 35
16857: PUSH
16858: LD_INT 20
16860: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16861: LD_ADDR_OWVAR 28
16865: PUSH
16866: LD_INT 17
16868: ST_TO_ADDR
// hc_gallery :=  ;
16869: LD_ADDR_OWVAR 33
16873: PUSH
16874: LD_STRING 
16876: ST_TO_ADDR
// hc_name :=  ;
16877: LD_ADDR_OWVAR 26
16881: PUSH
16882: LD_STRING 
16884: ST_TO_ADDR
// un := CreateHuman ;
16885: LD_ADDR_VAR 0 2
16889: PUSH
16890: CALL_OW 44
16894: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16895: LD_VAR 0 2
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 51
// tmp := tmp ^ un ;
16907: LD_ADDR_VAR 0 3
16911: PUSH
16912: LD_VAR 0 3
16916: PUSH
16917: LD_VAR 0 2
16921: ADD
16922: ST_TO_ADDR
// end ;
16923: GO 16819
16925: POP
16926: POP
// repeat wait ( 0 0$1 ) ;
16927: LD_INT 35
16929: PPUSH
16930: CALL_OW 67
// for un in tmp do
16934: LD_ADDR_VAR 0 2
16938: PUSH
16939: LD_VAR 0 3
16943: PUSH
16944: FOR_IN
16945: IFFALSE 17019
// begin if IsDead ( un ) then
16947: LD_VAR 0 2
16951: PPUSH
16952: CALL_OW 301
16956: IFFALSE 16976
// begin tmp := tmp diff un ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 2
16972: DIFF
16973: ST_TO_ADDR
// continue ;
16974: GO 16944
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16976: LD_VAR 0 2
16980: PPUSH
16981: LD_INT 3
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 0
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PPUSH
16998: CALL_OW 69
17002: PPUSH
17003: LD_VAR 0 2
17007: PPUSH
17008: CALL_OW 74
17012: PPUSH
17013: CALL_OW 115
// end ;
17017: GO 16944
17019: POP
17020: POP
// until not tmp ;
17021: LD_VAR 0 3
17025: NOT
17026: IFFALSE 16927
// end ;
17028: PPOPN 3
17030: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17031: LD_EXP 30
17035: PUSH
17036: LD_EXP 55
17040: AND
17041: IFFALSE 17095
17043: GO 17045
17045: DISABLE
// begin ToLua ( displayTroll(); ) ;
17046: LD_STRING displayTroll();
17048: PPUSH
17049: CALL_OW 559
// wait ( 3 3$00 ) ;
17053: LD_INT 6300
17055: PPUSH
17056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17060: LD_STRING hideTroll();
17062: PPUSH
17063: CALL_OW 559
// wait ( 1 1$00 ) ;
17067: LD_INT 2100
17069: PPUSH
17070: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17074: LD_STRING displayTroll();
17076: PPUSH
17077: CALL_OW 559
// wait ( 1 1$00 ) ;
17081: LD_INT 2100
17083: PPUSH
17084: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17088: LD_STRING hideTroll();
17090: PPUSH
17091: CALL_OW 559
// end ;
17095: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17096: LD_EXP 30
17100: PUSH
17101: LD_EXP 56
17105: AND
17106: IFFALSE 17169
17108: GO 17110
17110: DISABLE
17111: LD_INT 0
17113: PPUSH
// begin p := 0 ;
17114: LD_ADDR_VAR 0 1
17118: PUSH
17119: LD_INT 0
17121: ST_TO_ADDR
// repeat game_speed := 1 ;
17122: LD_ADDR_OWVAR 65
17126: PUSH
17127: LD_INT 1
17129: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17130: LD_INT 35
17132: PPUSH
17133: CALL_OW 67
// p := p + 1 ;
17137: LD_ADDR_VAR 0 1
17141: PUSH
17142: LD_VAR 0 1
17146: PUSH
17147: LD_INT 1
17149: PLUS
17150: ST_TO_ADDR
// until p >= 60 ;
17151: LD_VAR 0 1
17155: PUSH
17156: LD_INT 60
17158: GREATEREQUAL
17159: IFFALSE 17122
// game_speed := 4 ;
17161: LD_ADDR_OWVAR 65
17165: PUSH
17166: LD_INT 4
17168: ST_TO_ADDR
// end ;
17169: PPOPN 1
17171: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17172: LD_EXP 30
17176: PUSH
17177: LD_EXP 57
17181: AND
17182: IFFALSE 17328
17184: GO 17186
17186: DISABLE
17187: LD_INT 0
17189: PPUSH
17190: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_OWVAR 2
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 0
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 30
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not depot then
17245: LD_VAR 0 1
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17328
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_VAR 0 1
17263: PUSH
17264: LD_INT 1
17266: PPUSH
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 12
17276: ARRAY
17277: PPUSH
17278: CALL_OW 274
17282: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17298: LD_VAR 0 2
17302: PPUSH
17303: LD_INT 2
17305: PPUSH
17306: LD_INT 0
17308: PPUSH
17309: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17313: LD_VAR 0 2
17317: PPUSH
17318: LD_INT 3
17320: PPUSH
17321: LD_INT 0
17323: PPUSH
17324: CALL_OW 277
// end ;
17328: PPOPN 2
17330: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17331: LD_EXP 30
17335: PUSH
17336: LD_EXP 58
17340: AND
17341: IFFALSE 17438
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17349: LD_ADDR_VAR 0 1
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_OWVAR 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 21
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: LD_INT 23
17381: PUSH
17382: LD_INT 0
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: PPUSH
17398: CALL_OW 69
17402: ST_TO_ADDR
// if not tmp then
17403: LD_VAR 0 1
17407: NOT
17408: IFFALSE 17412
// exit ;
17410: GO 17438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17412: LD_VAR 0 1
17416: PUSH
17417: LD_INT 1
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 12
17429: ARRAY
17430: PPUSH
17431: LD_INT 200
17433: PPUSH
17434: CALL_OW 234
// end ;
17438: PPOPN 1
17440: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17441: LD_EXP 30
17445: PUSH
17446: LD_EXP 59
17450: AND
17451: IFFALSE 17530
17453: GO 17455
17455: DISABLE
17456: LD_INT 0
17458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17459: LD_ADDR_VAR 0 1
17463: PUSH
17464: LD_INT 22
17466: PUSH
17467: LD_OWVAR 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: ST_TO_ADDR
// if not tmp then
17495: LD_VAR 0 1
17499: NOT
17500: IFFALSE 17504
// exit ;
17502: GO 17530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PPUSH
17512: LD_VAR 0 1
17516: PPUSH
17517: CALL_OW 12
17521: ARRAY
17522: PPUSH
17523: LD_INT 60
17525: PPUSH
17526: CALL_OW 234
// end ;
17530: PPOPN 1
17532: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17533: LD_EXP 30
17537: PUSH
17538: LD_EXP 60
17542: AND
17543: IFFALSE 17642
17545: GO 17547
17547: DISABLE
17548: LD_INT 0
17550: PPUSH
17551: PPUSH
// begin enable ;
17552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17553: LD_ADDR_VAR 0 1
17557: PUSH
17558: LD_INT 22
17560: PUSH
17561: LD_OWVAR 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 61
17572: PUSH
17573: EMPTY
17574: LIST
17575: PUSH
17576: LD_INT 33
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 1
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17642
// for i in tmp do
17605: LD_ADDR_VAR 0 2
17609: PUSH
17610: LD_VAR 0 1
17614: PUSH
17615: FOR_IN
17616: IFFALSE 17640
// if IsControledBy ( i ) then
17618: LD_VAR 0 2
17622: PPUSH
17623: CALL_OW 312
17627: IFFALSE 17638
// ComUnlink ( i ) ;
17629: LD_VAR 0 2
17633: PPUSH
17634: CALL_OW 136
17638: GO 17615
17640: POP
17641: POP
// end ;
17642: PPOPN 2
17644: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17645: LD_EXP 30
17649: PUSH
17650: LD_EXP 61
17654: AND
17655: IFFALSE 17795
17657: GO 17659
17659: DISABLE
17660: LD_INT 0
17662: PPUSH
17663: PPUSH
// begin ToLua ( displayPowell(); ) ;
17664: LD_STRING displayPowell();
17666: PPUSH
17667: CALL_OW 559
// uc_side := 0 ;
17671: LD_ADDR_OWVAR 20
17675: PUSH
17676: LD_INT 0
17678: ST_TO_ADDR
// uc_nation := 2 ;
17679: LD_ADDR_OWVAR 21
17683: PUSH
17684: LD_INT 2
17686: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17687: LD_ADDR_OWVAR 37
17691: PUSH
17692: LD_INT 14
17694: ST_TO_ADDR
// vc_engine := engine_siberite ;
17695: LD_ADDR_OWVAR 39
17699: PUSH
17700: LD_INT 3
17702: ST_TO_ADDR
// vc_control := control_apeman ;
17703: LD_ADDR_OWVAR 38
17707: PUSH
17708: LD_INT 5
17710: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17711: LD_ADDR_OWVAR 40
17715: PUSH
17716: LD_INT 29
17718: ST_TO_ADDR
// un := CreateVehicle ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: CALL_OW 45
17728: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17729: LD_VAR 0 2
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17741: LD_INT 35
17743: PPUSH
17744: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17748: LD_VAR 0 2
17752: PPUSH
17753: LD_INT 22
17755: PUSH
17756: LD_OWVAR 2
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL_OW 69
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 74
17779: PPUSH
17780: CALL_OW 115
// until IsDead ( un ) ;
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL_OW 301
17793: IFFALSE 17741
// end ;
17795: PPOPN 2
17797: END
// every 0 0$1 trigger StreamModeActive and sStu do
17798: LD_EXP 30
17802: PUSH
17803: LD_EXP 69
17807: AND
17808: IFFALSE 17824
17810: GO 17812
17812: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17813: LD_STRING displayStucuk();
17815: PPUSH
17816: CALL_OW 559
// ResetFog ;
17820: CALL_OW 335
// end ;
17824: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17825: LD_EXP 30
17829: PUSH
17830: LD_EXP 62
17834: AND
17835: IFFALSE 17976
17837: GO 17839
17839: DISABLE
17840: LD_INT 0
17842: PPUSH
17843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17844: LD_ADDR_VAR 0 2
17848: PUSH
17849: LD_INT 22
17851: PUSH
17852: LD_OWVAR 2
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 21
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PPUSH
17875: CALL_OW 69
17879: ST_TO_ADDR
// if not tmp then
17880: LD_VAR 0 2
17884: NOT
17885: IFFALSE 17889
// exit ;
17887: GO 17976
// un := tmp [ rand ( 1 , tmp ) ] ;
17889: LD_ADDR_VAR 0 1
17893: PUSH
17894: LD_VAR 0 2
17898: PUSH
17899: LD_INT 1
17901: PPUSH
17902: LD_VAR 0 2
17906: PPUSH
17907: CALL_OW 12
17911: ARRAY
17912: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17913: LD_VAR 0 1
17917: PPUSH
17918: LD_INT 0
17920: PPUSH
17921: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_OWVAR 3
17934: PUSH
17935: LD_VAR 0 1
17939: DIFF
17940: PPUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 74
17950: PPUSH
17951: CALL_OW 115
// wait ( 0 0$20 ) ;
17955: LD_INT 700
17957: PPUSH
17958: CALL_OW 67
// SetSide ( un , your_side ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_OWVAR 2
17971: PPUSH
17972: CALL_OW 235
// end ;
17976: PPOPN 2
17978: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17979: LD_EXP 30
17983: PUSH
17984: LD_EXP 63
17988: AND
17989: IFFALSE 18095
17991: GO 17993
17993: DISABLE
17994: LD_INT 0
17996: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17997: LD_ADDR_VAR 0 1
18001: PUSH
18002: LD_INT 22
18004: PUSH
18005: LD_OWVAR 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 30
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 30
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PPUSH
18046: CALL_OW 69
18050: ST_TO_ADDR
// if not depot then
18051: LD_VAR 0 1
18055: NOT
18056: IFFALSE 18060
// exit ;
18058: GO 18095
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18060: LD_VAR 0 1
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PPUSH
18069: CALL_OW 250
18073: PPUSH
18074: LD_VAR 0 1
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: CALL_OW 251
18087: PPUSH
18088: LD_INT 70
18090: PPUSH
18091: CALL_OW 495
// end ;
18095: PPOPN 1
18097: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18098: LD_EXP 30
18102: PUSH
18103: LD_EXP 64
18107: AND
18108: IFFALSE 18319
18110: GO 18112
18112: DISABLE
18113: LD_INT 0
18115: PPUSH
18116: PPUSH
18117: PPUSH
18118: PPUSH
18119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18120: LD_ADDR_VAR 0 5
18124: PUSH
18125: LD_INT 22
18127: PUSH
18128: LD_OWVAR 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 21
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: ST_TO_ADDR
// if not tmp then
18156: LD_VAR 0 5
18160: NOT
18161: IFFALSE 18165
// exit ;
18163: GO 18319
// for i in tmp do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_VAR 0 5
18174: PUSH
18175: FOR_IN
18176: IFFALSE 18317
// begin d := rand ( 0 , 5 ) ;
18178: LD_ADDR_VAR 0 4
18182: PUSH
18183: LD_INT 0
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18194: LD_ADDR_VAR 0 2
18198: PUSH
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 250
18208: PPUSH
18209: LD_VAR 0 4
18213: PPUSH
18214: LD_INT 3
18216: PPUSH
18217: LD_INT 12
18219: PPUSH
18220: CALL_OW 12
18224: PPUSH
18225: CALL_OW 272
18229: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18230: LD_ADDR_VAR 0 3
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 251
18244: PPUSH
18245: LD_VAR 0 4
18249: PPUSH
18250: LD_INT 3
18252: PPUSH
18253: LD_INT 12
18255: PPUSH
18256: CALL_OW 12
18260: PPUSH
18261: CALL_OW 273
18265: ST_TO_ADDR
// if ValidHex ( x , y ) then
18266: LD_VAR 0 2
18270: PPUSH
18271: LD_VAR 0 3
18275: PPUSH
18276: CALL_OW 488
18280: IFFALSE 18315
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18282: LD_VAR 0 1
18286: PPUSH
18287: LD_VAR 0 2
18291: PPUSH
18292: LD_VAR 0 3
18296: PPUSH
18297: LD_INT 3
18299: PPUSH
18300: LD_INT 6
18302: PPUSH
18303: CALL_OW 12
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 483
// end ;
18315: GO 18175
18317: POP
18318: POP
// end ;
18319: PPOPN 5
18321: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18322: LD_EXP 30
18326: PUSH
18327: LD_EXP 65
18331: AND
18332: IFFALSE 18426
18334: GO 18336
18336: DISABLE
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18341: LD_ADDR_VAR 0 2
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_OWVAR 2
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 32
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 21
18370: PUSH
18371: LD_INT 2
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 69
18387: ST_TO_ADDR
// if not tmp then
18388: LD_VAR 0 2
18392: NOT
18393: IFFALSE 18397
// exit ;
18395: GO 18426
// for i in tmp do
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_VAR 0 2
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18424
// SetFuel ( i , 0 ) ;
18410: LD_VAR 0 1
18414: PPUSH
18415: LD_INT 0
18417: PPUSH
18418: CALL_OW 240
18422: GO 18407
18424: POP
18425: POP
// end ;
18426: PPOPN 2
18428: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18429: LD_EXP 30
18433: PUSH
18434: LD_EXP 66
18438: AND
18439: IFFALSE 18505
18441: GO 18443
18443: DISABLE
18444: LD_INT 0
18446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18447: LD_ADDR_VAR 0 1
18451: PUSH
18452: LD_INT 22
18454: PUSH
18455: LD_OWVAR 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 30
18466: PUSH
18467: LD_INT 29
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: ST_TO_ADDR
// if not tmp then
18483: LD_VAR 0 1
18487: NOT
18488: IFFALSE 18492
// exit ;
18490: GO 18505
// DestroyUnit ( tmp [ 1 ] ) ;
18492: LD_VAR 0 1
18496: PUSH
18497: LD_INT 1
18499: ARRAY
18500: PPUSH
18501: CALL_OW 65
// end ;
18505: PPOPN 1
18507: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18508: LD_EXP 30
18512: PUSH
18513: LD_EXP 68
18517: AND
18518: IFFALSE 18647
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
// begin uc_side := 0 ;
18526: LD_ADDR_OWVAR 20
18530: PUSH
18531: LD_INT 0
18533: ST_TO_ADDR
// uc_nation := nation_arabian ;
18534: LD_ADDR_OWVAR 21
18538: PUSH
18539: LD_INT 2
18541: ST_TO_ADDR
// hc_gallery :=  ;
18542: LD_ADDR_OWVAR 33
18546: PUSH
18547: LD_STRING 
18549: ST_TO_ADDR
// hc_name :=  ;
18550: LD_ADDR_OWVAR 26
18554: PUSH
18555: LD_STRING 
18557: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18558: LD_INT 1
18560: PPUSH
18561: LD_INT 11
18563: PPUSH
18564: LD_INT 10
18566: PPUSH
18567: CALL_OW 380
// un := CreateHuman ;
18571: LD_ADDR_VAR 0 1
18575: PUSH
18576: CALL_OW 44
18580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18581: LD_VAR 0 1
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18593: LD_INT 35
18595: PPUSH
18596: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18600: LD_VAR 0 1
18604: PPUSH
18605: LD_INT 22
18607: PUSH
18608: LD_OWVAR 2
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PPUSH
18617: CALL_OW 69
18621: PPUSH
18622: LD_VAR 0 1
18626: PPUSH
18627: CALL_OW 74
18631: PPUSH
18632: CALL_OW 115
// until IsDead ( un ) ;
18636: LD_VAR 0 1
18640: PPUSH
18641: CALL_OW 301
18645: IFFALSE 18593
// end ;
18647: PPOPN 1
18649: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18650: LD_EXP 30
18654: PUSH
18655: LD_EXP 70
18659: AND
18660: IFFALSE 18672
18662: GO 18664
18664: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18665: LD_STRING earthquake(getX(game), 0, 32)
18667: PPUSH
18668: CALL_OW 559
18672: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18673: LD_EXP 30
18677: PUSH
18678: LD_EXP 71
18682: AND
18683: IFFALSE 18774
18685: GO 18687
18687: DISABLE
18688: LD_INT 0
18690: PPUSH
// begin enable ;
18691: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18692: LD_ADDR_VAR 0 1
18696: PUSH
18697: LD_INT 22
18699: PUSH
18700: LD_OWVAR 2
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 21
18711: PUSH
18712: LD_INT 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 33
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: PPUSH
18734: CALL_OW 69
18738: ST_TO_ADDR
// if not tmp then
18739: LD_VAR 0 1
18743: NOT
18744: IFFALSE 18748
// exit ;
18746: GO 18774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18748: LD_VAR 0 1
18752: PUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_VAR 0 1
18760: PPUSH
18761: CALL_OW 12
18765: ARRAY
18766: PPUSH
18767: LD_INT 1
18769: PPUSH
18770: CALL_OW 234
// end ;
18774: PPOPN 1
18776: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18777: LD_EXP 30
18781: PUSH
18782: LD_EXP 72
18786: AND
18787: IFFALSE 18928
18789: GO 18791
18791: DISABLE
18792: LD_INT 0
18794: PPUSH
18795: PPUSH
18796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18797: LD_ADDR_VAR 0 3
18801: PUSH
18802: LD_INT 22
18804: PUSH
18805: LD_OWVAR 2
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 25
18816: PUSH
18817: LD_INT 1
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PPUSH
18828: CALL_OW 69
18832: ST_TO_ADDR
// if not tmp then
18833: LD_VAR 0 3
18837: NOT
18838: IFFALSE 18842
// exit ;
18840: GO 18928
// un := tmp [ rand ( 1 , tmp ) ] ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 1
18854: PPUSH
18855: LD_VAR 0 3
18859: PPUSH
18860: CALL_OW 12
18864: ARRAY
18865: ST_TO_ADDR
// if Crawls ( un ) then
18866: LD_VAR 0 2
18870: PPUSH
18871: CALL_OW 318
18875: IFFALSE 18886
// ComWalk ( un ) ;
18877: LD_VAR 0 2
18881: PPUSH
18882: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18886: LD_VAR 0 2
18890: PPUSH
18891: LD_INT 9
18893: PPUSH
18894: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18898: LD_INT 28
18900: PPUSH
18901: LD_OWVAR 2
18905: PPUSH
18906: LD_INT 2
18908: PPUSH
18909: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18913: LD_INT 29
18915: PPUSH
18916: LD_OWVAR 2
18920: PPUSH
18921: LD_INT 2
18923: PPUSH
18924: CALL_OW 322
// end ;
18928: PPOPN 3
18930: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18931: LD_EXP 30
18935: PUSH
18936: LD_EXP 73
18940: AND
18941: IFFALSE 19052
18943: GO 18945
18945: DISABLE
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
18950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if not tmp then
18987: LD_VAR 0 3
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19052
// un := tmp [ rand ( 1 , tmp ) ] ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: CALL_OW 12
19018: ARRAY
19019: ST_TO_ADDR
// if Crawls ( un ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 318
19029: IFFALSE 19040
// ComWalk ( un ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 8
19047: PPUSH
19048: CALL_OW 336
// end ;
19052: PPOPN 3
19054: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19055: LD_EXP 30
19059: PUSH
19060: LD_EXP 74
19064: AND
19065: IFFALSE 19209
19067: GO 19069
19069: DISABLE
19070: LD_INT 0
19072: PPUSH
19073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19074: LD_ADDR_VAR 0 2
19078: PUSH
19079: LD_INT 22
19081: PUSH
19082: LD_OWVAR 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 21
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 34
19106: PUSH
19107: LD_INT 12
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 34
19116: PUSH
19117: LD_INT 51
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 34
19126: PUSH
19127: LD_INT 32
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: PPUSH
19145: CALL_OW 69
19149: ST_TO_ADDR
// if not tmp then
19150: LD_VAR 0 2
19154: NOT
19155: IFFALSE 19159
// exit ;
19157: GO 19209
// for i in tmp do
19159: LD_ADDR_VAR 0 1
19163: PUSH
19164: LD_VAR 0 2
19168: PUSH
19169: FOR_IN
19170: IFFALSE 19207
// if GetCargo ( i , mat_artifact ) = 0 then
19172: LD_VAR 0 1
19176: PPUSH
19177: LD_INT 4
19179: PPUSH
19180: CALL_OW 289
19184: PUSH
19185: LD_INT 0
19187: EQUAL
19188: IFFALSE 19205
// SetCargo ( i , mat_siberit , 100 ) ;
19190: LD_VAR 0 1
19194: PPUSH
19195: LD_INT 3
19197: PPUSH
19198: LD_INT 100
19200: PPUSH
19201: CALL_OW 290
19205: GO 19169
19207: POP
19208: POP
// end ;
19209: PPOPN 2
19211: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19212: LD_EXP 30
19216: PUSH
19217: LD_EXP 75
19221: AND
19222: IFFALSE 19405
19224: GO 19226
19226: DISABLE
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19231: LD_ADDR_VAR 0 2
19235: PUSH
19236: LD_INT 22
19238: PUSH
19239: LD_OWVAR 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 69
19252: ST_TO_ADDR
// if not tmp then
19253: LD_VAR 0 2
19257: NOT
19258: IFFALSE 19262
// exit ;
19260: GO 19405
// for i := 1 to 2 do
19262: LD_ADDR_VAR 0 1
19266: PUSH
19267: DOUBLE
19268: LD_INT 1
19270: DEC
19271: ST_TO_ADDR
19272: LD_INT 2
19274: PUSH
19275: FOR_TO
19276: IFFALSE 19403
// begin uc_side := your_side ;
19278: LD_ADDR_OWVAR 20
19282: PUSH
19283: LD_OWVAR 2
19287: ST_TO_ADDR
// uc_nation := nation_american ;
19288: LD_ADDR_OWVAR 21
19292: PUSH
19293: LD_INT 1
19295: ST_TO_ADDR
// vc_chassis := us_morphling ;
19296: LD_ADDR_OWVAR 37
19300: PUSH
19301: LD_INT 5
19303: ST_TO_ADDR
// vc_engine := engine_siberite ;
19304: LD_ADDR_OWVAR 39
19308: PUSH
19309: LD_INT 3
19311: ST_TO_ADDR
// vc_control := control_computer ;
19312: LD_ADDR_OWVAR 38
19316: PUSH
19317: LD_INT 3
19319: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19320: LD_ADDR_OWVAR 40
19324: PUSH
19325: LD_INT 10
19327: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19328: LD_VAR 0 2
19332: PUSH
19333: LD_INT 1
19335: ARRAY
19336: PPUSH
19337: CALL_OW 310
19341: NOT
19342: IFFALSE 19389
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19344: CALL_OW 45
19348: PPUSH
19349: LD_VAR 0 2
19353: PUSH
19354: LD_INT 1
19356: ARRAY
19357: PPUSH
19358: CALL_OW 250
19362: PPUSH
19363: LD_VAR 0 2
19367: PUSH
19368: LD_INT 1
19370: ARRAY
19371: PPUSH
19372: CALL_OW 251
19376: PPUSH
19377: LD_INT 12
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL_OW 50
19387: GO 19401
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19389: CALL_OW 45
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: CALL_OW 51
// end ;
19401: GO 19275
19403: POP
19404: POP
// end ;
19405: PPOPN 2
19407: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19408: LD_EXP 30
19412: PUSH
19413: LD_EXP 76
19417: AND
19418: IFFALSE 19640
19420: GO 19422
19422: DISABLE
19423: LD_INT 0
19425: PPUSH
19426: PPUSH
19427: PPUSH
19428: PPUSH
19429: PPUSH
19430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19431: LD_ADDR_VAR 0 6
19435: PUSH
19436: LD_INT 22
19438: PUSH
19439: LD_OWVAR 2
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 21
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: LD_INT 23
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 69
19484: ST_TO_ADDR
// if not tmp then
19485: LD_VAR 0 6
19489: NOT
19490: IFFALSE 19494
// exit ;
19492: GO 19640
// s1 := rand ( 1 , 4 ) ;
19494: LD_ADDR_VAR 0 2
19498: PUSH
19499: LD_INT 1
19501: PPUSH
19502: LD_INT 4
19504: PPUSH
19505: CALL_OW 12
19509: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19510: LD_ADDR_VAR 0 4
19514: PUSH
19515: LD_VAR 0 6
19519: PUSH
19520: LD_INT 1
19522: ARRAY
19523: PPUSH
19524: LD_VAR 0 2
19528: PPUSH
19529: CALL_OW 259
19533: ST_TO_ADDR
// if s1 = 1 then
19534: LD_VAR 0 2
19538: PUSH
19539: LD_INT 1
19541: EQUAL
19542: IFFALSE 19562
// s2 := rand ( 2 , 4 ) else
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_INT 2
19551: PPUSH
19552: LD_INT 4
19554: PPUSH
19555: CALL_OW 12
19559: ST_TO_ADDR
19560: GO 19570
// s2 := 1 ;
19562: LD_ADDR_VAR 0 3
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19570: LD_ADDR_VAR 0 5
19574: PUSH
19575: LD_VAR 0 6
19579: PUSH
19580: LD_INT 1
19582: ARRAY
19583: PPUSH
19584: LD_VAR 0 3
19588: PPUSH
19589: CALL_OW 259
19593: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19594: LD_VAR 0 6
19598: PUSH
19599: LD_INT 1
19601: ARRAY
19602: PPUSH
19603: LD_VAR 0 2
19607: PPUSH
19608: LD_VAR 0 5
19612: PPUSH
19613: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19617: LD_VAR 0 6
19621: PUSH
19622: LD_INT 1
19624: ARRAY
19625: PPUSH
19626: LD_VAR 0 3
19630: PPUSH
19631: LD_VAR 0 4
19635: PPUSH
19636: CALL_OW 237
// end ;
19640: PPOPN 6
19642: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19643: LD_EXP 30
19647: PUSH
19648: LD_EXP 77
19652: AND
19653: IFFALSE 19732
19655: GO 19657
19657: DISABLE
19658: LD_INT 0
19660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19661: LD_ADDR_VAR 0 1
19665: PUSH
19666: LD_INT 22
19668: PUSH
19669: LD_OWVAR 2
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 30
19680: PUSH
19681: LD_INT 3
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 69
19696: ST_TO_ADDR
// if not tmp then
19697: LD_VAR 0 1
19701: NOT
19702: IFFALSE 19706
// exit ;
19704: GO 19732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 1
19713: PPUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 12
19723: ARRAY
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL_OW 234
// end ;
19732: PPOPN 1
19734: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19735: LD_EXP 30
19739: PUSH
19740: LD_EXP 78
19744: AND
19745: IFFALSE 19857
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: LD_INT 30
19776: PUSH
19777: LD_INT 27
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 30
19786: PUSH
19787: LD_INT 26
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 30
19796: PUSH
19797: LD_INT 28
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PPUSH
19814: CALL_OW 69
19818: ST_TO_ADDR
// if not tmp then
19819: LD_VAR 0 2
19823: NOT
19824: IFFALSE 19828
// exit ;
19826: GO 19857
// for i in tmp do
19828: LD_ADDR_VAR 0 1
19832: PUSH
19833: LD_VAR 0 2
19837: PUSH
19838: FOR_IN
19839: IFFALSE 19855
// SetLives ( i , 1 ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_INT 1
19848: PPUSH
19849: CALL_OW 234
19853: GO 19838
19855: POP
19856: POP
// end ;
19857: PPOPN 2
19859: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19860: LD_EXP 30
19864: PUSH
19865: LD_EXP 79
19869: AND
19870: IFFALSE 20157
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
19878: PPUSH
19879: PPUSH
// begin i := rand ( 1 , 7 ) ;
19880: LD_ADDR_VAR 0 1
19884: PUSH
19885: LD_INT 1
19887: PPUSH
19888: LD_INT 7
19890: PPUSH
19891: CALL_OW 12
19895: ST_TO_ADDR
// case i of 1 :
19896: LD_VAR 0 1
19900: PUSH
19901: LD_INT 1
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 19919
19909: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19910: LD_STRING earthquake(getX(game), 0, 32)
19912: PPUSH
19913: CALL_OW 559
19917: GO 20157
19919: LD_INT 2
19921: DOUBLE
19922: EQUAL
19923: IFTRUE 19927
19925: GO 19941
19927: POP
// begin ToLua ( displayStucuk(); ) ;
19928: LD_STRING displayStucuk();
19930: PPUSH
19931: CALL_OW 559
// ResetFog ;
19935: CALL_OW 335
// end ; 3 :
19939: GO 20157
19941: LD_INT 3
19943: DOUBLE
19944: EQUAL
19945: IFTRUE 19949
19947: GO 20053
19949: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19950: LD_ADDR_VAR 0 2
19954: PUSH
19955: LD_INT 22
19957: PUSH
19958: LD_OWVAR 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 25
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PPUSH
19981: CALL_OW 69
19985: ST_TO_ADDR
// if not tmp then
19986: LD_VAR 0 2
19990: NOT
19991: IFFALSE 19995
// exit ;
19993: GO 20157
// un := tmp [ rand ( 1 , tmp ) ] ;
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_VAR 0 2
20004: PUSH
20005: LD_INT 1
20007: PPUSH
20008: LD_VAR 0 2
20012: PPUSH
20013: CALL_OW 12
20017: ARRAY
20018: ST_TO_ADDR
// if Crawls ( un ) then
20019: LD_VAR 0 3
20023: PPUSH
20024: CALL_OW 318
20028: IFFALSE 20039
// ComWalk ( un ) ;
20030: LD_VAR 0 3
20034: PPUSH
20035: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20039: LD_VAR 0 3
20043: PPUSH
20044: LD_INT 8
20046: PPUSH
20047: CALL_OW 336
// end ; 4 :
20051: GO 20157
20053: LD_INT 4
20055: DOUBLE
20056: EQUAL
20057: IFTRUE 20061
20059: GO 20135
20061: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20062: LD_ADDR_VAR 0 2
20066: PUSH
20067: LD_INT 22
20069: PUSH
20070: LD_OWVAR 2
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 29
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PPUSH
20093: CALL_OW 69
20097: ST_TO_ADDR
// if not tmp then
20098: LD_VAR 0 2
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20157
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20107: LD_VAR 0 2
20111: PUSH
20112: LD_INT 1
20114: ARRAY
20115: PPUSH
20116: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20120: LD_VAR 0 2
20124: PUSH
20125: LD_INT 1
20127: ARRAY
20128: PPUSH
20129: CALL_OW 65
// end ; 5 .. 7 :
20133: GO 20157
20135: LD_INT 5
20137: DOUBLE
20138: GREATEREQUAL
20139: IFFALSE 20147
20141: LD_INT 7
20143: DOUBLE
20144: LESSEQUAL
20145: IFTRUE 20149
20147: GO 20156
20149: POP
// StreamSibBomb ; end ;
20150: CALL 16394 0 0
20154: GO 20157
20156: POP
// end ;
20157: PPOPN 3
20159: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20160: LD_EXP 30
20164: PUSH
20165: LD_EXP 80
20169: AND
20170: IFFALSE 20326
20172: GO 20174
20174: DISABLE
20175: LD_INT 0
20177: PPUSH
20178: PPUSH
20179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_INT 81
20187: PUSH
20188: LD_OWVAR 2
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 21
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 21
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 69
20233: ST_TO_ADDR
// if not tmp then
20234: LD_VAR 0 2
20238: NOT
20239: IFFALSE 20243
// exit ;
20241: GO 20326
// p := 0 ;
20243: LD_ADDR_VAR 0 3
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20251: LD_INT 35
20253: PPUSH
20254: CALL_OW 67
// p := p + 1 ;
20258: LD_ADDR_VAR 0 3
20262: PUSH
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 1
20270: PLUS
20271: ST_TO_ADDR
// for i in tmp do
20272: LD_ADDR_VAR 0 1
20276: PUSH
20277: LD_VAR 0 2
20281: PUSH
20282: FOR_IN
20283: IFFALSE 20314
// if GetLives ( i ) < 1000 then
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 256
20294: PUSH
20295: LD_INT 1000
20297: LESS
20298: IFFALSE 20312
// SetLives ( i , 1000 ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 1000
20307: PPUSH
20308: CALL_OW 234
20312: GO 20282
20314: POP
20315: POP
// until p > 20 ;
20316: LD_VAR 0 3
20320: PUSH
20321: LD_INT 20
20323: GREATER
20324: IFFALSE 20251
// end ;
20326: PPOPN 3
20328: END
// every 0 0$1 trigger StreamModeActive and sTime do
20329: LD_EXP 30
20333: PUSH
20334: LD_EXP 81
20338: AND
20339: IFFALSE 20374
20341: GO 20343
20343: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20344: LD_INT 28
20346: PPUSH
20347: LD_OWVAR 2
20351: PPUSH
20352: LD_INT 2
20354: PPUSH
20355: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20359: LD_INT 30
20361: PPUSH
20362: LD_OWVAR 2
20366: PPUSH
20367: LD_INT 2
20369: PPUSH
20370: CALL_OW 322
// end ;
20374: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20375: LD_EXP 30
20379: PUSH
20380: LD_EXP 82
20384: AND
20385: IFFALSE 20506
20387: GO 20389
20389: DISABLE
20390: LD_INT 0
20392: PPUSH
20393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20394: LD_ADDR_VAR 0 2
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_OWVAR 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 3
20423: PUSH
20424: LD_INT 23
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: PPUSH
20443: CALL_OW 69
20447: ST_TO_ADDR
// if not tmp then
20448: LD_VAR 0 2
20452: NOT
20453: IFFALSE 20457
// exit ;
20455: GO 20506
// for i in tmp do
20457: LD_ADDR_VAR 0 1
20461: PUSH
20462: LD_VAR 0 2
20466: PUSH
20467: FOR_IN
20468: IFFALSE 20504
// begin if Crawls ( i ) then
20470: LD_VAR 0 1
20474: PPUSH
20475: CALL_OW 318
20479: IFFALSE 20490
// ComWalk ( i ) ;
20481: LD_VAR 0 1
20485: PPUSH
20486: CALL_OW 138
// SetClass ( i , 2 ) ;
20490: LD_VAR 0 1
20494: PPUSH
20495: LD_INT 2
20497: PPUSH
20498: CALL_OW 336
// end ;
20502: GO 20467
20504: POP
20505: POP
// end ;
20506: PPOPN 2
20508: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20509: LD_EXP 30
20513: PUSH
20514: LD_EXP 83
20518: AND
20519: IFFALSE 20807
20521: GO 20523
20523: DISABLE
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20529: LD_OWVAR 2
20533: PPUSH
20534: LD_INT 9
20536: PPUSH
20537: LD_INT 1
20539: PPUSH
20540: LD_INT 1
20542: PPUSH
20543: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20547: LD_INT 9
20549: PPUSH
20550: LD_OWVAR 2
20554: PPUSH
20555: CALL_OW 343
// uc_side := 9 ;
20559: LD_ADDR_OWVAR 20
20563: PUSH
20564: LD_INT 9
20566: ST_TO_ADDR
// uc_nation := 2 ;
20567: LD_ADDR_OWVAR 21
20571: PUSH
20572: LD_INT 2
20574: ST_TO_ADDR
// hc_name := Dark Warrior ;
20575: LD_ADDR_OWVAR 26
20579: PUSH
20580: LD_STRING Dark Warrior
20582: ST_TO_ADDR
// hc_gallery :=  ;
20583: LD_ADDR_OWVAR 33
20587: PUSH
20588: LD_STRING 
20590: ST_TO_ADDR
// hc_noskilllimit := true ;
20591: LD_ADDR_OWVAR 76
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20599: LD_ADDR_OWVAR 31
20603: PUSH
20604: LD_INT 30
20606: PUSH
20607: LD_INT 30
20609: PUSH
20610: LD_INT 30
20612: PUSH
20613: LD_INT 30
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: ST_TO_ADDR
// un := CreateHuman ;
20622: LD_ADDR_VAR 0 3
20626: PUSH
20627: CALL_OW 44
20631: ST_TO_ADDR
// hc_noskilllimit := false ;
20632: LD_ADDR_OWVAR 76
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20640: LD_VAR 0 3
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 51
// ToLua ( playRanger() ) ;
20652: LD_STRING playRanger()
20654: PPUSH
20655: CALL_OW 559
// p := 0 ;
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_INT 0
20666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20667: LD_INT 35
20669: PPUSH
20670: CALL_OW 67
// p := p + 1 ;
20674: LD_ADDR_VAR 0 2
20678: PUSH
20679: LD_VAR 0 2
20683: PUSH
20684: LD_INT 1
20686: PLUS
20687: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20688: LD_VAR 0 3
20692: PPUSH
20693: CALL_OW 256
20697: PUSH
20698: LD_INT 1000
20700: LESS
20701: IFFALSE 20715
// SetLives ( un , 1000 ) ;
20703: LD_VAR 0 3
20707: PPUSH
20708: LD_INT 1000
20710: PPUSH
20711: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20715: LD_VAR 0 3
20719: PPUSH
20720: LD_INT 81
20722: PUSH
20723: LD_OWVAR 2
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 91
20734: PUSH
20735: LD_VAR 0 3
20739: PUSH
20740: LD_INT 30
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PPUSH
20752: CALL_OW 69
20756: PPUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: CALL_OW 74
20766: PPUSH
20767: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20771: LD_VAR 0 2
20775: PUSH
20776: LD_INT 80
20778: GREATER
20779: PUSH
20780: LD_VAR 0 3
20784: PPUSH
20785: CALL_OW 301
20789: OR
20790: IFFALSE 20667
// if un then
20792: LD_VAR 0 3
20796: IFFALSE 20807
// RemoveUnit ( un ) ;
20798: LD_VAR 0 3
20802: PPUSH
20803: CALL_OW 64
// end ;
20807: PPOPN 3
20809: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20810: LD_EXP 84
20814: IFFALSE 20930
20816: GO 20818
20818: DISABLE
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
20823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20824: LD_ADDR_VAR 0 2
20828: PUSH
20829: LD_INT 81
20831: PUSH
20832: LD_OWVAR 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 21
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20860: LD_STRING playComputer()
20862: PPUSH
20863: CALL_OW 559
// if not tmp then
20867: LD_VAR 0 2
20871: NOT
20872: IFFALSE 20876
// exit ;
20874: GO 20930
// for i in tmp do
20876: LD_ADDR_VAR 0 1
20880: PUSH
20881: LD_VAR 0 2
20885: PUSH
20886: FOR_IN
20887: IFFALSE 20928
// for j := 1 to 4 do
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: DOUBLE
20895: LD_INT 1
20897: DEC
20898: ST_TO_ADDR
20899: LD_INT 4
20901: PUSH
20902: FOR_TO
20903: IFFALSE 20924
// SetSkill ( i , j , 10 ) ;
20905: LD_VAR 0 1
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 10
20917: PPUSH
20918: CALL_OW 237
20922: GO 20902
20924: POP
20925: POP
20926: GO 20886
20928: POP
20929: POP
// end ;
20930: PPOPN 3
20932: END
// every 0 0$1 trigger s30 do var i , tmp ;
20933: LD_EXP 85
20937: IFFALSE 21006
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
20945: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20946: LD_ADDR_VAR 0 2
20950: PUSH
20951: LD_INT 22
20953: PUSH
20954: LD_OWVAR 2
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 69
20967: ST_TO_ADDR
// if not tmp then
20968: LD_VAR 0 2
20972: NOT
20973: IFFALSE 20977
// exit ;
20975: GO 21006
// for i in tmp do
20977: LD_ADDR_VAR 0 1
20981: PUSH
20982: LD_VAR 0 2
20986: PUSH
20987: FOR_IN
20988: IFFALSE 21004
// SetLives ( i , 300 ) ;
20990: LD_VAR 0 1
20994: PPUSH
20995: LD_INT 300
20997: PPUSH
20998: CALL_OW 234
21002: GO 20987
21004: POP
21005: POP
// end ;
21006: PPOPN 2
21008: END
// every 0 0$1 trigger s60 do var i , tmp ;
21009: LD_EXP 86
21013: IFFALSE 21082
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
21021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21022: LD_ADDR_VAR 0 2
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_OWVAR 2
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PPUSH
21039: CALL_OW 69
21043: ST_TO_ADDR
// if not tmp then
21044: LD_VAR 0 2
21048: NOT
21049: IFFALSE 21053
// exit ;
21051: GO 21082
// for i in tmp do
21053: LD_ADDR_VAR 0 1
21057: PUSH
21058: LD_VAR 0 2
21062: PUSH
21063: FOR_IN
21064: IFFALSE 21080
// SetLives ( i , 600 ) ;
21066: LD_VAR 0 1
21070: PPUSH
21071: LD_INT 600
21073: PPUSH
21074: CALL_OW 234
21078: GO 21063
21080: POP
21081: POP
// end ;
21082: PPOPN 2
21084: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21085: LD_INT 0
21087: PPUSH
// case cmd of 301 :
21088: LD_VAR 0 1
21092: PUSH
21093: LD_INT 301
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21133
21101: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21102: LD_VAR 0 6
21106: PPUSH
21107: LD_VAR 0 7
21111: PPUSH
21112: LD_VAR 0 8
21116: PPUSH
21117: LD_VAR 0 4
21121: PPUSH
21122: LD_VAR 0 5
21126: PPUSH
21127: CALL 22334 0 5
21131: GO 21254
21133: LD_INT 302
21135: DOUBLE
21136: EQUAL
21137: IFTRUE 21141
21139: GO 21178
21141: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21142: LD_VAR 0 6
21146: PPUSH
21147: LD_VAR 0 7
21151: PPUSH
21152: LD_VAR 0 8
21156: PPUSH
21157: LD_VAR 0 9
21161: PPUSH
21162: LD_VAR 0 4
21166: PPUSH
21167: LD_VAR 0 5
21171: PPUSH
21172: CALL 22425 0 6
21176: GO 21254
21178: LD_INT 303
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21223
21186: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21187: LD_VAR 0 6
21191: PPUSH
21192: LD_VAR 0 7
21196: PPUSH
21197: LD_VAR 0 8
21201: PPUSH
21202: LD_VAR 0 9
21206: PPUSH
21207: LD_VAR 0 4
21211: PPUSH
21212: LD_VAR 0 5
21216: PPUSH
21217: CALL 21259 0 6
21221: GO 21254
21223: LD_INT 304
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21253
21231: POP
// hHackTeleport ( unit , x , y ) ; end ;
21232: LD_VAR 0 2
21236: PPUSH
21237: LD_VAR 0 4
21241: PPUSH
21242: LD_VAR 0 5
21246: PPUSH
21247: CALL 23018 0 3
21251: GO 21254
21253: POP
// end ;
21254: LD_VAR 0 12
21258: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21259: LD_INT 0
21261: PPUSH
21262: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21263: LD_VAR 0 1
21267: PUSH
21268: LD_INT 1
21270: LESS
21271: PUSH
21272: LD_VAR 0 1
21276: PUSH
21277: LD_INT 3
21279: GREATER
21280: OR
21281: PUSH
21282: LD_VAR 0 5
21286: PPUSH
21287: LD_VAR 0 6
21291: PPUSH
21292: CALL_OW 428
21296: OR
21297: IFFALSE 21301
// exit ;
21299: GO 22021
// uc_side := your_side ;
21301: LD_ADDR_OWVAR 20
21305: PUSH
21306: LD_OWVAR 2
21310: ST_TO_ADDR
// uc_nation := nation ;
21311: LD_ADDR_OWVAR 21
21315: PUSH
21316: LD_VAR 0 1
21320: ST_TO_ADDR
// bc_level = 1 ;
21321: LD_ADDR_OWVAR 43
21325: PUSH
21326: LD_INT 1
21328: ST_TO_ADDR
// case btype of 1 :
21329: LD_VAR 0 2
21333: PUSH
21334: LD_INT 1
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21353
21342: POP
// bc_type := b_depot ; 2 :
21343: LD_ADDR_OWVAR 42
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
21351: GO 21965
21353: LD_INT 2
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21372
21361: POP
// bc_type := b_warehouse ; 3 :
21362: LD_ADDR_OWVAR 42
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
21370: GO 21965
21372: LD_INT 3
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21391
21380: POP
// bc_type := b_lab ; 4 .. 9 :
21381: LD_ADDR_OWVAR 42
21385: PUSH
21386: LD_INT 6
21388: ST_TO_ADDR
21389: GO 21965
21391: LD_INT 4
21393: DOUBLE
21394: GREATEREQUAL
21395: IFFALSE 21403
21397: LD_INT 9
21399: DOUBLE
21400: LESSEQUAL
21401: IFTRUE 21405
21403: GO 21457
21405: POP
// begin bc_type := b_lab_half ;
21406: LD_ADDR_OWVAR 42
21410: PUSH
21411: LD_INT 7
21413: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21414: LD_ADDR_OWVAR 44
21418: PUSH
21419: LD_INT 10
21421: PUSH
21422: LD_INT 11
21424: PUSH
21425: LD_INT 12
21427: PUSH
21428: LD_INT 15
21430: PUSH
21431: LD_INT 14
21433: PUSH
21434: LD_INT 13
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: PUSH
21445: LD_VAR 0 2
21449: PUSH
21450: LD_INT 3
21452: MINUS
21453: ARRAY
21454: ST_TO_ADDR
// end ; 10 .. 13 :
21455: GO 21965
21457: LD_INT 10
21459: DOUBLE
21460: GREATEREQUAL
21461: IFFALSE 21469
21463: LD_INT 13
21465: DOUBLE
21466: LESSEQUAL
21467: IFTRUE 21471
21469: GO 21548
21471: POP
// begin bc_type := b_lab_full ;
21472: LD_ADDR_OWVAR 42
21476: PUSH
21477: LD_INT 8
21479: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21480: LD_ADDR_OWVAR 44
21484: PUSH
21485: LD_INT 10
21487: PUSH
21488: LD_INT 12
21490: PUSH
21491: LD_INT 14
21493: PUSH
21494: LD_INT 13
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: PUSH
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 9
21510: MINUS
21511: ARRAY
21512: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21513: LD_ADDR_OWVAR 45
21517: PUSH
21518: LD_INT 11
21520: PUSH
21521: LD_INT 15
21523: PUSH
21524: LD_INT 12
21526: PUSH
21527: LD_INT 15
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: LD_VAR 0 2
21540: PUSH
21541: LD_INT 9
21543: MINUS
21544: ARRAY
21545: ST_TO_ADDR
// end ; 14 :
21546: GO 21965
21548: LD_INT 14
21550: DOUBLE
21551: EQUAL
21552: IFTRUE 21556
21554: GO 21567
21556: POP
// bc_type := b_workshop ; 15 :
21557: LD_ADDR_OWVAR 42
21561: PUSH
21562: LD_INT 2
21564: ST_TO_ADDR
21565: GO 21965
21567: LD_INT 15
21569: DOUBLE
21570: EQUAL
21571: IFTRUE 21575
21573: GO 21586
21575: POP
// bc_type := b_factory ; 16 :
21576: LD_ADDR_OWVAR 42
21580: PUSH
21581: LD_INT 3
21583: ST_TO_ADDR
21584: GO 21965
21586: LD_INT 16
21588: DOUBLE
21589: EQUAL
21590: IFTRUE 21594
21592: GO 21605
21594: POP
// bc_type := b_ext_gun ; 17 :
21595: LD_ADDR_OWVAR 42
21599: PUSH
21600: LD_INT 17
21602: ST_TO_ADDR
21603: GO 21965
21605: LD_INT 17
21607: DOUBLE
21608: EQUAL
21609: IFTRUE 21613
21611: GO 21641
21613: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21614: LD_ADDR_OWVAR 42
21618: PUSH
21619: LD_INT 19
21621: PUSH
21622: LD_INT 23
21624: PUSH
21625: LD_INT 19
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: LD_VAR 0 1
21637: ARRAY
21638: ST_TO_ADDR
21639: GO 21965
21641: LD_INT 18
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21660
21649: POP
// bc_type := b_ext_radar ; 19 :
21650: LD_ADDR_OWVAR 42
21654: PUSH
21655: LD_INT 20
21657: ST_TO_ADDR
21658: GO 21965
21660: LD_INT 19
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21679
21668: POP
// bc_type := b_ext_radio ; 20 :
21669: LD_ADDR_OWVAR 42
21673: PUSH
21674: LD_INT 22
21676: ST_TO_ADDR
21677: GO 21965
21679: LD_INT 20
21681: DOUBLE
21682: EQUAL
21683: IFTRUE 21687
21685: GO 21698
21687: POP
// bc_type := b_ext_siberium ; 21 :
21688: LD_ADDR_OWVAR 42
21692: PUSH
21693: LD_INT 21
21695: ST_TO_ADDR
21696: GO 21965
21698: LD_INT 21
21700: DOUBLE
21701: EQUAL
21702: IFTRUE 21706
21704: GO 21717
21706: POP
// bc_type := b_ext_computer ; 22 :
21707: LD_ADDR_OWVAR 42
21711: PUSH
21712: LD_INT 24
21714: ST_TO_ADDR
21715: GO 21965
21717: LD_INT 22
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21736
21725: POP
// bc_type := b_ext_track ; 23 :
21726: LD_ADDR_OWVAR 42
21730: PUSH
21731: LD_INT 16
21733: ST_TO_ADDR
21734: GO 21965
21736: LD_INT 23
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21755
21744: POP
// bc_type := b_ext_laser ; 24 :
21745: LD_ADDR_OWVAR 42
21749: PUSH
21750: LD_INT 25
21752: ST_TO_ADDR
21753: GO 21965
21755: LD_INT 24
21757: DOUBLE
21758: EQUAL
21759: IFTRUE 21763
21761: GO 21774
21763: POP
// bc_type := b_control_tower ; 25 :
21764: LD_ADDR_OWVAR 42
21768: PUSH
21769: LD_INT 36
21771: ST_TO_ADDR
21772: GO 21965
21774: LD_INT 25
21776: DOUBLE
21777: EQUAL
21778: IFTRUE 21782
21780: GO 21793
21782: POP
// bc_type := b_breastwork ; 26 :
21783: LD_ADDR_OWVAR 42
21787: PUSH
21788: LD_INT 31
21790: ST_TO_ADDR
21791: GO 21965
21793: LD_INT 26
21795: DOUBLE
21796: EQUAL
21797: IFTRUE 21801
21799: GO 21812
21801: POP
// bc_type := b_bunker ; 27 :
21802: LD_ADDR_OWVAR 42
21806: PUSH
21807: LD_INT 32
21809: ST_TO_ADDR
21810: GO 21965
21812: LD_INT 27
21814: DOUBLE
21815: EQUAL
21816: IFTRUE 21820
21818: GO 21831
21820: POP
// bc_type := b_turret ; 28 :
21821: LD_ADDR_OWVAR 42
21825: PUSH
21826: LD_INT 33
21828: ST_TO_ADDR
21829: GO 21965
21831: LD_INT 28
21833: DOUBLE
21834: EQUAL
21835: IFTRUE 21839
21837: GO 21850
21839: POP
// bc_type := b_armoury ; 29 :
21840: LD_ADDR_OWVAR 42
21844: PUSH
21845: LD_INT 4
21847: ST_TO_ADDR
21848: GO 21965
21850: LD_INT 29
21852: DOUBLE
21853: EQUAL
21854: IFTRUE 21858
21856: GO 21869
21858: POP
// bc_type := b_barracks ; 30 :
21859: LD_ADDR_OWVAR 42
21863: PUSH
21864: LD_INT 5
21866: ST_TO_ADDR
21867: GO 21965
21869: LD_INT 30
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 21888
21877: POP
// bc_type := b_solar_power ; 31 :
21878: LD_ADDR_OWVAR 42
21882: PUSH
21883: LD_INT 27
21885: ST_TO_ADDR
21886: GO 21965
21888: LD_INT 31
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 21907
21896: POP
// bc_type := b_oil_power ; 32 :
21897: LD_ADDR_OWVAR 42
21901: PUSH
21902: LD_INT 26
21904: ST_TO_ADDR
21905: GO 21965
21907: LD_INT 32
21909: DOUBLE
21910: EQUAL
21911: IFTRUE 21915
21913: GO 21926
21915: POP
// bc_type := b_siberite_power ; 33 :
21916: LD_ADDR_OWVAR 42
21920: PUSH
21921: LD_INT 28
21923: ST_TO_ADDR
21924: GO 21965
21926: LD_INT 33
21928: DOUBLE
21929: EQUAL
21930: IFTRUE 21934
21932: GO 21945
21934: POP
// bc_type := b_oil_mine ; 34 :
21935: LD_ADDR_OWVAR 42
21939: PUSH
21940: LD_INT 29
21942: ST_TO_ADDR
21943: GO 21965
21945: LD_INT 34
21947: DOUBLE
21948: EQUAL
21949: IFTRUE 21953
21951: GO 21964
21953: POP
// bc_type := b_siberite_mine ; end ;
21954: LD_ADDR_OWVAR 42
21958: PUSH
21959: LD_INT 30
21961: ST_TO_ADDR
21962: GO 21965
21964: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21965: LD_ADDR_VAR 0 8
21969: PUSH
21970: LD_VAR 0 5
21974: PPUSH
21975: LD_VAR 0 6
21979: PPUSH
21980: LD_VAR 0 3
21984: PPUSH
21985: CALL_OW 47
21989: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21990: LD_OWVAR 42
21994: PUSH
21995: LD_INT 32
21997: PUSH
21998: LD_INT 33
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: IN
22005: IFFALSE 22021
// PlaceWeaponTurret ( b , weapon ) ;
22007: LD_VAR 0 8
22011: PPUSH
22012: LD_VAR 0 4
22016: PPUSH
22017: CALL_OW 431
// end ;
22021: LD_VAR 0 7
22025: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22026: LD_INT 0
22028: PPUSH
22029: PPUSH
22030: PPUSH
22031: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22032: LD_ADDR_VAR 0 4
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_OWVAR 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 30
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PPUSH
22081: CALL_OW 69
22085: ST_TO_ADDR
// if not tmp then
22086: LD_VAR 0 4
22090: NOT
22091: IFFALSE 22095
// exit ;
22093: GO 22154
// for i in tmp do
22095: LD_ADDR_VAR 0 2
22099: PUSH
22100: LD_VAR 0 4
22104: PUSH
22105: FOR_IN
22106: IFFALSE 22152
// for j = 1 to 3 do
22108: LD_ADDR_VAR 0 3
22112: PUSH
22113: DOUBLE
22114: LD_INT 1
22116: DEC
22117: ST_TO_ADDR
22118: LD_INT 3
22120: PUSH
22121: FOR_TO
22122: IFFALSE 22148
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: CALL_OW 274
22133: PPUSH
22134: LD_VAR 0 3
22138: PPUSH
22139: LD_INT 99999
22141: PPUSH
22142: CALL_OW 277
22146: GO 22121
22148: POP
22149: POP
22150: GO 22105
22152: POP
22153: POP
// end ;
22154: LD_VAR 0 1
22158: RET
// export function hHackSetLevel10 ; var i , j ; begin
22159: LD_INT 0
22161: PPUSH
22162: PPUSH
22163: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22164: LD_ADDR_VAR 0 2
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PPUSH
22179: CALL_OW 69
22183: PUSH
22184: FOR_IN
22185: IFFALSE 22237
// if IsSelected ( i ) then
22187: LD_VAR 0 2
22191: PPUSH
22192: CALL_OW 306
22196: IFFALSE 22235
// begin for j := 1 to 4 do
22198: LD_ADDR_VAR 0 3
22202: PUSH
22203: DOUBLE
22204: LD_INT 1
22206: DEC
22207: ST_TO_ADDR
22208: LD_INT 4
22210: PUSH
22211: FOR_TO
22212: IFFALSE 22233
// SetSkill ( i , j , 10 ) ;
22214: LD_VAR 0 2
22218: PPUSH
22219: LD_VAR 0 3
22223: PPUSH
22224: LD_INT 10
22226: PPUSH
22227: CALL_OW 237
22231: GO 22211
22233: POP
22234: POP
// end ;
22235: GO 22184
22237: POP
22238: POP
// end ;
22239: LD_VAR 0 1
22243: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22244: LD_INT 0
22246: PPUSH
22247: PPUSH
22248: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22249: LD_ADDR_VAR 0 2
22253: PUSH
22254: LD_INT 22
22256: PUSH
22257: LD_OWVAR 2
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 21
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PPUSH
22280: CALL_OW 69
22284: PUSH
22285: FOR_IN
22286: IFFALSE 22327
// begin for j := 1 to 4 do
22288: LD_ADDR_VAR 0 3
22292: PUSH
22293: DOUBLE
22294: LD_INT 1
22296: DEC
22297: ST_TO_ADDR
22298: LD_INT 4
22300: PUSH
22301: FOR_TO
22302: IFFALSE 22323
// SetSkill ( i , j , 10 ) ;
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: LD_INT 10
22316: PPUSH
22317: CALL_OW 237
22321: GO 22301
22323: POP
22324: POP
// end ;
22325: GO 22285
22327: POP
22328: POP
// end ;
22329: LD_VAR 0 1
22333: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22334: LD_INT 0
22336: PPUSH
// uc_side := your_side ;
22337: LD_ADDR_OWVAR 20
22341: PUSH
22342: LD_OWVAR 2
22346: ST_TO_ADDR
// uc_nation := nation ;
22347: LD_ADDR_OWVAR 21
22351: PUSH
22352: LD_VAR 0 1
22356: ST_TO_ADDR
// InitHc ;
22357: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22361: LD_INT 0
22363: PPUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22378: LD_VAR 0 4
22382: PPUSH
22383: LD_VAR 0 5
22387: PPUSH
22388: CALL_OW 428
22392: PUSH
22393: LD_INT 0
22395: EQUAL
22396: IFFALSE 22420
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22398: CALL_OW 44
22402: PPUSH
22403: LD_VAR 0 4
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: LD_INT 1
22415: PPUSH
22416: CALL_OW 48
// end ;
22420: LD_VAR 0 6
22424: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22425: LD_INT 0
22427: PPUSH
22428: PPUSH
// uc_side := your_side ;
22429: LD_ADDR_OWVAR 20
22433: PUSH
22434: LD_OWVAR 2
22438: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22439: LD_VAR 0 1
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: LD_INT 3
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: IN
22466: IFFALSE 22478
// uc_nation := nation_american else
22468: LD_ADDR_OWVAR 21
22472: PUSH
22473: LD_INT 1
22475: ST_TO_ADDR
22476: GO 22521
// if chassis in [ 11 , 12 , 13 , 14 ] then
22478: LD_VAR 0 1
22482: PUSH
22483: LD_INT 11
22485: PUSH
22486: LD_INT 12
22488: PUSH
22489: LD_INT 13
22491: PUSH
22492: LD_INT 14
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: IN
22501: IFFALSE 22513
// uc_nation := nation_arabian else
22503: LD_ADDR_OWVAR 21
22507: PUSH
22508: LD_INT 2
22510: ST_TO_ADDR
22511: GO 22521
// uc_nation := nation_russian ;
22513: LD_ADDR_OWVAR 21
22517: PUSH
22518: LD_INT 3
22520: ST_TO_ADDR
// vc_chassis := chassis ;
22521: LD_ADDR_OWVAR 37
22525: PUSH
22526: LD_VAR 0 1
22530: ST_TO_ADDR
// vc_engine := engine ;
22531: LD_ADDR_OWVAR 39
22535: PUSH
22536: LD_VAR 0 2
22540: ST_TO_ADDR
// vc_control := control ;
22541: LD_ADDR_OWVAR 38
22545: PUSH
22546: LD_VAR 0 3
22550: ST_TO_ADDR
// vc_weapon := weapon ;
22551: LD_ADDR_OWVAR 40
22555: PUSH
22556: LD_VAR 0 4
22560: ST_TO_ADDR
// un := CreateVehicle ;
22561: LD_ADDR_VAR 0 8
22565: PUSH
22566: CALL_OW 45
22570: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22571: LD_VAR 0 8
22575: PPUSH
22576: LD_INT 0
22578: PPUSH
22579: LD_INT 5
22581: PPUSH
22582: CALL_OW 12
22586: PPUSH
22587: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22591: LD_VAR 0 8
22595: PPUSH
22596: LD_VAR 0 5
22600: PPUSH
22601: LD_VAR 0 6
22605: PPUSH
22606: LD_INT 1
22608: PPUSH
22609: CALL_OW 48
// end ;
22613: LD_VAR 0 7
22617: RET
// export hInvincible ; every 1 do
22618: GO 22620
22620: DISABLE
// hInvincible := [ ] ;
22621: LD_ADDR_EXP 87
22625: PUSH
22626: EMPTY
22627: ST_TO_ADDR
22628: END
// every 10 do var i ;
22629: GO 22631
22631: DISABLE
22632: LD_INT 0
22634: PPUSH
// begin enable ;
22635: ENABLE
// if not hInvincible then
22636: LD_EXP 87
22640: NOT
22641: IFFALSE 22645
// exit ;
22643: GO 22689
// for i in hInvincible do
22645: LD_ADDR_VAR 0 1
22649: PUSH
22650: LD_EXP 87
22654: PUSH
22655: FOR_IN
22656: IFFALSE 22687
// if GetLives ( i ) < 1000 then
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 256
22667: PUSH
22668: LD_INT 1000
22670: LESS
22671: IFFALSE 22685
// SetLives ( i , 1000 ) ;
22673: LD_VAR 0 1
22677: PPUSH
22678: LD_INT 1000
22680: PPUSH
22681: CALL_OW 234
22685: GO 22655
22687: POP
22688: POP
// end ;
22689: PPOPN 1
22691: END
// export function hHackInvincible ; var i ; begin
22692: LD_INT 0
22694: PPUSH
22695: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: LD_INT 21
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 21
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: PPUSH
22729: CALL_OW 69
22733: PUSH
22734: FOR_IN
22735: IFFALSE 22796
// if IsSelected ( i ) then
22737: LD_VAR 0 2
22741: PPUSH
22742: CALL_OW 306
22746: IFFALSE 22794
// begin if i in hInvincible then
22748: LD_VAR 0 2
22752: PUSH
22753: LD_EXP 87
22757: IN
22758: IFFALSE 22778
// hInvincible := hInvincible diff i else
22760: LD_ADDR_EXP 87
22764: PUSH
22765: LD_EXP 87
22769: PUSH
22770: LD_VAR 0 2
22774: DIFF
22775: ST_TO_ADDR
22776: GO 22794
// hInvincible := hInvincible union i ;
22778: LD_ADDR_EXP 87
22782: PUSH
22783: LD_EXP 87
22787: PUSH
22788: LD_VAR 0 2
22792: UNION
22793: ST_TO_ADDR
// end ;
22794: GO 22734
22796: POP
22797: POP
// end ;
22798: LD_VAR 0 1
22802: RET
// export function hHackInvisible ; var i , j ; begin
22803: LD_INT 0
22805: PPUSH
22806: PPUSH
22807: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22808: LD_ADDR_VAR 0 2
22812: PUSH
22813: LD_INT 21
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PPUSH
22823: CALL_OW 69
22827: PUSH
22828: FOR_IN
22829: IFFALSE 22853
// if IsSelected ( i ) then
22831: LD_VAR 0 2
22835: PPUSH
22836: CALL_OW 306
22840: IFFALSE 22851
// ComForceInvisible ( i ) ;
22842: LD_VAR 0 2
22846: PPUSH
22847: CALL_OW 496
22851: GO 22828
22853: POP
22854: POP
// end ;
22855: LD_VAR 0 1
22859: RET
// export function hHackChangeYourSide ; begin
22860: LD_INT 0
22862: PPUSH
// if your_side = 8 then
22863: LD_OWVAR 2
22867: PUSH
22868: LD_INT 8
22870: EQUAL
22871: IFFALSE 22883
// your_side := 0 else
22873: LD_ADDR_OWVAR 2
22877: PUSH
22878: LD_INT 0
22880: ST_TO_ADDR
22881: GO 22897
// your_side := your_side + 1 ;
22883: LD_ADDR_OWVAR 2
22887: PUSH
22888: LD_OWVAR 2
22892: PUSH
22893: LD_INT 1
22895: PLUS
22896: ST_TO_ADDR
// end ;
22897: LD_VAR 0 1
22901: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22902: LD_INT 0
22904: PPUSH
22905: PPUSH
22906: PPUSH
// for i in all_units do
22907: LD_ADDR_VAR 0 2
22911: PUSH
22912: LD_OWVAR 3
22916: PUSH
22917: FOR_IN
22918: IFFALSE 22996
// if IsSelected ( i ) then
22920: LD_VAR 0 2
22924: PPUSH
22925: CALL_OW 306
22929: IFFALSE 22994
// begin j := GetSide ( i ) ;
22931: LD_ADDR_VAR 0 3
22935: PUSH
22936: LD_VAR 0 2
22940: PPUSH
22941: CALL_OW 255
22945: ST_TO_ADDR
// if j = 8 then
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 8
22953: EQUAL
22954: IFFALSE 22966
// j := 0 else
22956: LD_ADDR_VAR 0 3
22960: PUSH
22961: LD_INT 0
22963: ST_TO_ADDR
22964: GO 22980
// j := j + 1 ;
22966: LD_ADDR_VAR 0 3
22970: PUSH
22971: LD_VAR 0 3
22975: PUSH
22976: LD_INT 1
22978: PLUS
22979: ST_TO_ADDR
// SetSide ( i , j ) ;
22980: LD_VAR 0 2
22984: PPUSH
22985: LD_VAR 0 3
22989: PPUSH
22990: CALL_OW 235
// end ;
22994: GO 22917
22996: POP
22997: POP
// end ;
22998: LD_VAR 0 1
23002: RET
// export function hHackFog ; begin
23003: LD_INT 0
23005: PPUSH
// FogOff ( true ) ;
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 344
// end ;
23013: LD_VAR 0 1
23017: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23018: LD_INT 0
23020: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_VAR 0 2
23030: PPUSH
23031: LD_VAR 0 3
23035: PPUSH
23036: LD_INT 1
23038: PPUSH
23039: LD_INT 1
23041: PPUSH
23042: CALL_OW 483
// CenterOnXY ( x , y ) ;
23046: LD_VAR 0 2
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: CALL_OW 84
// end ;
23060: LD_VAR 0 4
23064: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23065: LD_INT 0
23067: PPUSH
23068: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23069: LD_VAR 0 1
23073: NOT
23074: PUSH
23075: LD_VAR 0 2
23079: PPUSH
23080: LD_VAR 0 3
23084: PPUSH
23085: CALL_OW 488
23089: NOT
23090: OR
23091: PUSH
23092: LD_VAR 0 1
23096: PPUSH
23097: CALL_OW 266
23101: PUSH
23102: LD_INT 3
23104: NONEQUAL
23105: PUSH
23106: LD_VAR 0 1
23110: PPUSH
23111: CALL_OW 247
23115: PUSH
23116: LD_INT 1
23118: EQUAL
23119: NOT
23120: AND
23121: OR
23122: IFFALSE 23126
// exit ;
23124: GO 23275
// if GetType ( factory ) = unit_human then
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 247
23135: PUSH
23136: LD_INT 1
23138: EQUAL
23139: IFFALSE 23156
// factory := IsInUnit ( factory ) ;
23141: LD_ADDR_VAR 0 1
23145: PUSH
23146: LD_VAR 0 1
23150: PPUSH
23151: CALL_OW 310
23155: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23156: LD_VAR 0 1
23160: PPUSH
23161: CALL_OW 266
23165: PUSH
23166: LD_INT 3
23168: NONEQUAL
23169: IFFALSE 23173
// exit ;
23171: GO 23275
// if HexInfo ( x , y ) = factory then
23173: LD_VAR 0 2
23177: PPUSH
23178: LD_VAR 0 3
23182: PPUSH
23183: CALL_OW 428
23187: PUSH
23188: LD_VAR 0 1
23192: EQUAL
23193: IFFALSE 23220
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23195: LD_ADDR_EXP 88
23199: PUSH
23200: LD_EXP 88
23204: PPUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: LD_INT 0
23212: PPUSH
23213: CALL_OW 1
23217: ST_TO_ADDR
23218: GO 23271
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23220: LD_ADDR_EXP 88
23224: PUSH
23225: LD_EXP 88
23229: PPUSH
23230: LD_VAR 0 1
23234: PPUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 255
23244: PUSH
23245: LD_VAR 0 1
23249: PUSH
23250: LD_VAR 0 2
23254: PUSH
23255: LD_VAR 0 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: PPUSH
23266: CALL_OW 1
23270: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23271: CALL 23280 0 0
// end ;
23275: LD_VAR 0 4
23279: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23280: LD_INT 0
23282: PPUSH
23283: PPUSH
23284: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23285: LD_STRING resetFactoryWaypoint();
23287: PPUSH
23288: CALL_OW 559
// if factoryWaypoints then
23292: LD_EXP 88
23296: IFFALSE 23422
// begin list := PrepareArray ( factoryWaypoints ) ;
23298: LD_ADDR_VAR 0 3
23302: PUSH
23303: LD_EXP 88
23307: PPUSH
23308: CALL 69872 0 1
23312: ST_TO_ADDR
// for i := 1 to list do
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: DOUBLE
23319: LD_INT 1
23321: DEC
23322: ST_TO_ADDR
23323: LD_VAR 0 3
23327: PUSH
23328: FOR_TO
23329: IFFALSE 23420
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23331: LD_STRING setFactoryWaypointXY(
23333: PUSH
23334: LD_VAR 0 3
23338: PUSH
23339: LD_VAR 0 2
23343: ARRAY
23344: PUSH
23345: LD_INT 1
23347: ARRAY
23348: STR
23349: PUSH
23350: LD_STRING ,
23352: STR
23353: PUSH
23354: LD_VAR 0 3
23358: PUSH
23359: LD_VAR 0 2
23363: ARRAY
23364: PUSH
23365: LD_INT 2
23367: ARRAY
23368: STR
23369: PUSH
23370: LD_STRING ,
23372: STR
23373: PUSH
23374: LD_VAR 0 3
23378: PUSH
23379: LD_VAR 0 2
23383: ARRAY
23384: PUSH
23385: LD_INT 3
23387: ARRAY
23388: STR
23389: PUSH
23390: LD_STRING ,
23392: STR
23393: PUSH
23394: LD_VAR 0 3
23398: PUSH
23399: LD_VAR 0 2
23403: ARRAY
23404: PUSH
23405: LD_INT 4
23407: ARRAY
23408: STR
23409: PUSH
23410: LD_STRING )
23412: STR
23413: PPUSH
23414: CALL_OW 559
23418: GO 23328
23420: POP
23421: POP
// end ; end ;
23422: LD_VAR 0 1
23426: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23427: LD_INT 0
23429: PPUSH
// if HexInfo ( x , y ) = warehouse then
23430: LD_VAR 0 2
23434: PPUSH
23435: LD_VAR 0 3
23439: PPUSH
23440: CALL_OW 428
23444: PUSH
23445: LD_VAR 0 1
23449: EQUAL
23450: IFFALSE 23477
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23452: LD_ADDR_EXP 89
23456: PUSH
23457: LD_EXP 89
23461: PPUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: LD_INT 0
23469: PPUSH
23470: CALL_OW 1
23474: ST_TO_ADDR
23475: GO 23528
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23477: LD_ADDR_EXP 89
23481: PUSH
23482: LD_EXP 89
23486: PPUSH
23487: LD_VAR 0 1
23491: PPUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL_OW 255
23501: PUSH
23502: LD_VAR 0 1
23506: PUSH
23507: LD_VAR 0 2
23511: PUSH
23512: LD_VAR 0 3
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: PPUSH
23523: CALL_OW 1
23527: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23528: CALL 23537 0 0
// end ;
23532: LD_VAR 0 4
23536: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23537: LD_INT 0
23539: PPUSH
23540: PPUSH
23541: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23542: LD_STRING resetWarehouseGatheringPoints();
23544: PPUSH
23545: CALL_OW 559
// if warehouseGatheringPoints then
23549: LD_EXP 89
23553: IFFALSE 23679
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: LD_EXP 89
23564: PPUSH
23565: CALL 69872 0 1
23569: ST_TO_ADDR
// for i := 1 to list do
23570: LD_ADDR_VAR 0 2
23574: PUSH
23575: DOUBLE
23576: LD_INT 1
23578: DEC
23579: ST_TO_ADDR
23580: LD_VAR 0 3
23584: PUSH
23585: FOR_TO
23586: IFFALSE 23677
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23588: LD_STRING setWarehouseGatheringPointXY(
23590: PUSH
23591: LD_VAR 0 3
23595: PUSH
23596: LD_VAR 0 2
23600: ARRAY
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: STR
23606: PUSH
23607: LD_STRING ,
23609: STR
23610: PUSH
23611: LD_VAR 0 3
23615: PUSH
23616: LD_VAR 0 2
23620: ARRAY
23621: PUSH
23622: LD_INT 2
23624: ARRAY
23625: STR
23626: PUSH
23627: LD_STRING ,
23629: STR
23630: PUSH
23631: LD_VAR 0 3
23635: PUSH
23636: LD_VAR 0 2
23640: ARRAY
23641: PUSH
23642: LD_INT 3
23644: ARRAY
23645: STR
23646: PUSH
23647: LD_STRING ,
23649: STR
23650: PUSH
23651: LD_VAR 0 3
23655: PUSH
23656: LD_VAR 0 2
23660: ARRAY
23661: PUSH
23662: LD_INT 4
23664: ARRAY
23665: STR
23666: PUSH
23667: LD_STRING )
23669: STR
23670: PPUSH
23671: CALL_OW 559
23675: GO 23585
23677: POP
23678: POP
// end ; end ;
23679: LD_VAR 0 1
23683: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23684: LD_EXP 89
23688: IFFALSE 24373
23690: GO 23692
23692: DISABLE
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
// begin enable ;
23704: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_EXP 89
23714: PPUSH
23715: CALL 69872 0 1
23719: ST_TO_ADDR
// if not list then
23720: LD_VAR 0 3
23724: NOT
23725: IFFALSE 23729
// exit ;
23727: GO 24373
// for i := 1 to list do
23729: LD_ADDR_VAR 0 1
23733: PUSH
23734: DOUBLE
23735: LD_INT 1
23737: DEC
23738: ST_TO_ADDR
23739: LD_VAR 0 3
23743: PUSH
23744: FOR_TO
23745: IFFALSE 24371
// begin depot := list [ i ] [ 2 ] ;
23747: LD_ADDR_VAR 0 8
23751: PUSH
23752: LD_VAR 0 3
23756: PUSH
23757: LD_VAR 0 1
23761: ARRAY
23762: PUSH
23763: LD_INT 2
23765: ARRAY
23766: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23767: LD_ADDR_VAR 0 5
23771: PUSH
23772: LD_VAR 0 3
23776: PUSH
23777: LD_VAR 0 1
23781: ARRAY
23782: PUSH
23783: LD_INT 1
23785: ARRAY
23786: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23787: LD_VAR 0 8
23791: PPUSH
23792: CALL_OW 301
23796: PUSH
23797: LD_VAR 0 5
23801: PUSH
23802: LD_VAR 0 8
23806: PPUSH
23807: CALL_OW 255
23811: NONEQUAL
23812: OR
23813: IFFALSE 23842
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23815: LD_ADDR_EXP 89
23819: PUSH
23820: LD_EXP 89
23824: PPUSH
23825: LD_VAR 0 8
23829: PPUSH
23830: LD_INT 0
23832: PPUSH
23833: CALL_OW 1
23837: ST_TO_ADDR
// exit ;
23838: POP
23839: POP
23840: GO 24373
// end ; x := list [ i ] [ 3 ] ;
23842: LD_ADDR_VAR 0 6
23846: PUSH
23847: LD_VAR 0 3
23851: PUSH
23852: LD_VAR 0 1
23856: ARRAY
23857: PUSH
23858: LD_INT 3
23860: ARRAY
23861: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23862: LD_ADDR_VAR 0 7
23866: PUSH
23867: LD_VAR 0 3
23871: PUSH
23872: LD_VAR 0 1
23876: ARRAY
23877: PUSH
23878: LD_INT 4
23880: ARRAY
23881: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23882: LD_ADDR_VAR 0 9
23886: PUSH
23887: LD_VAR 0 6
23891: PPUSH
23892: LD_VAR 0 7
23896: PPUSH
23897: LD_INT 16
23899: PPUSH
23900: CALL 68460 0 3
23904: ST_TO_ADDR
// if not cratesNearbyPoint then
23905: LD_VAR 0 9
23909: NOT
23910: IFFALSE 23916
// exit ;
23912: POP
23913: POP
23914: GO 24373
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23916: LD_ADDR_VAR 0 4
23920: PUSH
23921: LD_INT 22
23923: PUSH
23924: LD_VAR 0 5
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 3
23935: PUSH
23936: LD_INT 60
23938: PUSH
23939: EMPTY
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 91
23948: PUSH
23949: LD_VAR 0 8
23953: PUSH
23954: LD_INT 6
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: LD_INT 25
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 25
23977: PUSH
23978: LD_INT 16
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: PPUSH
23996: CALL_OW 69
24000: PUSH
24001: LD_VAR 0 8
24005: PPUSH
24006: CALL_OW 313
24010: PPUSH
24011: LD_INT 3
24013: PUSH
24014: LD_INT 60
24016: PUSH
24017: EMPTY
24018: LIST
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 25
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 25
24039: PUSH
24040: LD_INT 16
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 72
24060: UNION
24061: ST_TO_ADDR
// if tmp then
24062: LD_VAR 0 4
24066: IFFALSE 24146
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24068: LD_ADDR_VAR 0 4
24072: PUSH
24073: LD_VAR 0 4
24077: PPUSH
24078: LD_INT 3
24080: PPUSH
24081: CALL 66429 0 2
24085: ST_TO_ADDR
// for j in tmp do
24086: LD_ADDR_VAR 0 2
24090: PUSH
24091: LD_VAR 0 4
24095: PUSH
24096: FOR_IN
24097: IFFALSE 24140
// begin if IsInUnit ( j ) then
24099: LD_VAR 0 2
24103: PPUSH
24104: CALL_OW 310
24108: IFFALSE 24119
// ComExit ( j ) ;
24110: LD_VAR 0 2
24114: PPUSH
24115: CALL 66512 0 1
// AddComCollect ( j , x , y ) ;
24119: LD_VAR 0 2
24123: PPUSH
24124: LD_VAR 0 6
24128: PPUSH
24129: LD_VAR 0 7
24133: PPUSH
24134: CALL_OW 177
// end ;
24138: GO 24096
24140: POP
24141: POP
// exit ;
24142: POP
24143: POP
24144: GO 24373
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24146: LD_ADDR_VAR 0 4
24150: PUSH
24151: LD_INT 22
24153: PUSH
24154: LD_VAR 0 5
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 91
24165: PUSH
24166: LD_VAR 0 8
24170: PUSH
24171: LD_INT 8
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: PUSH
24182: LD_INT 34
24184: PUSH
24185: LD_INT 12
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 34
24194: PUSH
24195: LD_INT 51
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 34
24204: PUSH
24205: LD_INT 32
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 34
24214: PUSH
24215: LD_INT 89
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: PPUSH
24234: CALL_OW 69
24238: ST_TO_ADDR
// if tmp then
24239: LD_VAR 0 4
24243: IFFALSE 24369
// begin for j in tmp do
24245: LD_ADDR_VAR 0 2
24249: PUSH
24250: LD_VAR 0 4
24254: PUSH
24255: FOR_IN
24256: IFFALSE 24367
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24258: LD_VAR 0 2
24262: PPUSH
24263: CALL_OW 262
24267: PUSH
24268: LD_INT 3
24270: EQUAL
24271: PUSH
24272: LD_VAR 0 2
24276: PPUSH
24277: CALL_OW 261
24281: PUSH
24282: LD_INT 20
24284: GREATER
24285: OR
24286: PUSH
24287: LD_VAR 0 2
24291: PPUSH
24292: CALL_OW 314
24296: NOT
24297: AND
24298: PUSH
24299: LD_VAR 0 2
24303: PPUSH
24304: CALL_OW 263
24308: PUSH
24309: LD_INT 1
24311: NONEQUAL
24312: PUSH
24313: LD_VAR 0 2
24317: PPUSH
24318: CALL_OW 311
24322: OR
24323: AND
24324: IFFALSE 24365
// begin ComCollect ( j , x , y ) ;
24326: LD_VAR 0 2
24330: PPUSH
24331: LD_VAR 0 6
24335: PPUSH
24336: LD_VAR 0 7
24340: PPUSH
24341: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24345: LD_VAR 0 2
24349: PPUSH
24350: LD_VAR 0 8
24354: PPUSH
24355: CALL_OW 172
// exit ;
24359: POP
24360: POP
24361: POP
24362: POP
24363: GO 24373
// end ;
24365: GO 24255
24367: POP
24368: POP
// end ; end ;
24369: GO 23744
24371: POP
24372: POP
// end ; end_of_file
24373: PPOPN 9
24375: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24376: LD_INT 0
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24382: LD_VAR 0 1
24386: PPUSH
24387: CALL_OW 264
24391: PUSH
24392: LD_INT 91
24394: EQUAL
24395: IFFALSE 24467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24397: LD_INT 68
24399: PPUSH
24400: LD_VAR 0 1
24404: PPUSH
24405: CALL_OW 255
24409: PPUSH
24410: CALL_OW 321
24414: PUSH
24415: LD_INT 2
24417: EQUAL
24418: IFFALSE 24430
// eff := 70 else
24420: LD_ADDR_VAR 0 4
24424: PUSH
24425: LD_INT 70
24427: ST_TO_ADDR
24428: GO 24438
// eff := 30 ;
24430: LD_ADDR_VAR 0 4
24434: PUSH
24435: LD_INT 30
24437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24438: LD_VAR 0 1
24442: PPUSH
24443: CALL_OW 250
24447: PPUSH
24448: LD_VAR 0 1
24452: PPUSH
24453: CALL_OW 251
24457: PPUSH
24458: LD_VAR 0 4
24462: PPUSH
24463: CALL_OW 495
// end ; end ;
24467: LD_VAR 0 2
24471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24472: LD_INT 0
24474: PPUSH
// end ;
24475: LD_VAR 0 4
24479: RET
// export function SOS_Command ( cmd ) ; begin
24480: LD_INT 0
24482: PPUSH
// end ;
24483: LD_VAR 0 2
24487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24488: LD_INT 0
24490: PPUSH
// end ;
24491: LD_VAR 0 6
24495: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
// if not vehicle or not factory then
24500: LD_VAR 0 1
24504: NOT
24505: PUSH
24506: LD_VAR 0 2
24510: NOT
24511: OR
24512: IFFALSE 24516
// exit ;
24514: GO 24747
// if factoryWaypoints >= factory then
24516: LD_EXP 88
24520: PUSH
24521: LD_VAR 0 2
24525: GREATEREQUAL
24526: IFFALSE 24747
// if factoryWaypoints [ factory ] then
24528: LD_EXP 88
24532: PUSH
24533: LD_VAR 0 2
24537: ARRAY
24538: IFFALSE 24747
// begin if GetControl ( vehicle ) = control_manual then
24540: LD_VAR 0 1
24544: PPUSH
24545: CALL_OW 263
24549: PUSH
24550: LD_INT 1
24552: EQUAL
24553: IFFALSE 24634
// begin driver := IsDrivenBy ( vehicle ) ;
24555: LD_ADDR_VAR 0 4
24559: PUSH
24560: LD_VAR 0 1
24564: PPUSH
24565: CALL_OW 311
24569: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24570: LD_VAR 0 4
24574: PPUSH
24575: LD_EXP 88
24579: PUSH
24580: LD_VAR 0 2
24584: ARRAY
24585: PUSH
24586: LD_INT 3
24588: ARRAY
24589: PPUSH
24590: LD_EXP 88
24594: PUSH
24595: LD_VAR 0 2
24599: ARRAY
24600: PUSH
24601: LD_INT 4
24603: ARRAY
24604: PPUSH
24605: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24609: LD_VAR 0 4
24613: PPUSH
24614: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24618: LD_VAR 0 4
24622: PPUSH
24623: LD_VAR 0 2
24627: PPUSH
24628: CALL_OW 180
// end else
24632: GO 24747
// if GetControl ( vehicle ) = control_remote then
24634: LD_VAR 0 1
24638: PPUSH
24639: CALL_OW 263
24643: PUSH
24644: LD_INT 2
24646: EQUAL
24647: IFFALSE 24708
// begin wait ( 0 0$2 ) ;
24649: LD_INT 70
24651: PPUSH
24652: CALL_OW 67
// if Connect ( vehicle ) then
24656: LD_VAR 0 1
24660: PPUSH
24661: CALL 36771 0 1
24665: IFFALSE 24706
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24667: LD_VAR 0 1
24671: PPUSH
24672: LD_EXP 88
24676: PUSH
24677: LD_VAR 0 2
24681: ARRAY
24682: PUSH
24683: LD_INT 3
24685: ARRAY
24686: PPUSH
24687: LD_EXP 88
24691: PUSH
24692: LD_VAR 0 2
24696: ARRAY
24697: PUSH
24698: LD_INT 4
24700: ARRAY
24701: PPUSH
24702: CALL_OW 171
// end else
24706: GO 24747
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_EXP 88
24717: PUSH
24718: LD_VAR 0 2
24722: ARRAY
24723: PUSH
24724: LD_INT 3
24726: ARRAY
24727: PPUSH
24728: LD_EXP 88
24732: PUSH
24733: LD_VAR 0 2
24737: ARRAY
24738: PUSH
24739: LD_INT 4
24741: ARRAY
24742: PPUSH
24743: CALL_OW 171
// end ; end ;
24747: LD_VAR 0 3
24751: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24752: LD_INT 0
24754: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24755: LD_VAR 0 1
24759: PUSH
24760: LD_INT 250
24762: EQUAL
24763: PUSH
24764: LD_VAR 0 2
24768: PPUSH
24769: CALL_OW 264
24773: PUSH
24774: LD_INT 81
24776: EQUAL
24777: AND
24778: IFFALSE 24799
// MinerPlaceMine ( unit , x , y ) ;
24780: LD_VAR 0 2
24784: PPUSH
24785: LD_VAR 0 4
24789: PPUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: CALL 27184 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 251
24806: EQUAL
24807: PUSH
24808: LD_VAR 0 2
24812: PPUSH
24813: CALL_OW 264
24817: PUSH
24818: LD_INT 81
24820: EQUAL
24821: AND
24822: IFFALSE 24843
// MinerDetonateMine ( unit , x , y ) ;
24824: LD_VAR 0 2
24828: PPUSH
24829: LD_VAR 0 4
24833: PPUSH
24834: LD_VAR 0 5
24838: PPUSH
24839: CALL 27459 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24843: LD_VAR 0 1
24847: PUSH
24848: LD_INT 252
24850: EQUAL
24851: PUSH
24852: LD_VAR 0 2
24856: PPUSH
24857: CALL_OW 264
24861: PUSH
24862: LD_INT 81
24864: EQUAL
24865: AND
24866: IFFALSE 24887
// MinerCreateMinefield ( unit , x , y ) ;
24868: LD_VAR 0 2
24872: PPUSH
24873: LD_VAR 0 4
24877: PPUSH
24878: LD_VAR 0 5
24882: PPUSH
24883: CALL 27876 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24887: LD_VAR 0 1
24891: PUSH
24892: LD_INT 253
24894: EQUAL
24895: PUSH
24896: LD_VAR 0 2
24900: PPUSH
24901: CALL_OW 257
24905: PUSH
24906: LD_INT 5
24908: EQUAL
24909: AND
24910: IFFALSE 24931
// ComBinocular ( unit , x , y ) ;
24912: LD_VAR 0 2
24916: PPUSH
24917: LD_VAR 0 4
24921: PPUSH
24922: LD_VAR 0 5
24926: PPUSH
24927: CALL 28245 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24931: LD_VAR 0 1
24935: PUSH
24936: LD_INT 254
24938: EQUAL
24939: PUSH
24940: LD_VAR 0 2
24944: PPUSH
24945: CALL_OW 264
24949: PUSH
24950: LD_INT 99
24952: EQUAL
24953: AND
24954: PUSH
24955: LD_VAR 0 3
24959: PPUSH
24960: CALL_OW 263
24964: PUSH
24965: LD_INT 3
24967: EQUAL
24968: AND
24969: IFFALSE 24985
// HackDestroyVehicle ( unit , selectedUnit ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_VAR 0 3
24980: PPUSH
24981: CALL 26548 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24985: LD_VAR 0 1
24989: PUSH
24990: LD_INT 255
24992: EQUAL
24993: PUSH
24994: LD_VAR 0 2
24998: PPUSH
24999: CALL_OW 264
25003: PUSH
25004: LD_INT 14
25006: PUSH
25007: LD_INT 53
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: IN
25014: AND
25015: PUSH
25016: LD_VAR 0 4
25020: PPUSH
25021: LD_VAR 0 5
25025: PPUSH
25026: CALL_OW 488
25030: AND
25031: IFFALSE 25055
// CutTreeXYR ( unit , x , y , 12 ) ;
25033: LD_VAR 0 2
25037: PPUSH
25038: LD_VAR 0 4
25042: PPUSH
25043: LD_VAR 0 5
25047: PPUSH
25048: LD_INT 12
25050: PPUSH
25051: CALL 25118 0 4
// if cmd = 256 then
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 256
25062: EQUAL
25063: IFFALSE 25084
// SetFactoryWaypoint ( unit , x , y ) ;
25065: LD_VAR 0 2
25069: PPUSH
25070: LD_VAR 0 4
25074: PPUSH
25075: LD_VAR 0 5
25079: PPUSH
25080: CALL 23065 0 3
// if cmd = 257 then
25084: LD_VAR 0 1
25088: PUSH
25089: LD_INT 257
25091: EQUAL
25092: IFFALSE 25113
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25094: LD_VAR 0 2
25098: PPUSH
25099: LD_VAR 0 4
25103: PPUSH
25104: LD_VAR 0 5
25108: PPUSH
25109: CALL 23427 0 3
// end ;
25113: LD_VAR 0 6
25117: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25118: LD_INT 0
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
25124: PPUSH
25125: PPUSH
25126: PPUSH
25127: PPUSH
25128: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25129: LD_VAR 0 1
25133: NOT
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: CALL_OW 488
25149: NOT
25150: OR
25151: PUSH
25152: LD_VAR 0 4
25156: NOT
25157: OR
25158: IFFALSE 25162
// exit ;
25160: GO 25502
// list := [ ] ;
25162: LD_ADDR_VAR 0 13
25166: PUSH
25167: EMPTY
25168: ST_TO_ADDR
// if x - r < 0 then
25169: LD_VAR 0 2
25173: PUSH
25174: LD_VAR 0 4
25178: MINUS
25179: PUSH
25180: LD_INT 0
25182: LESS
25183: IFFALSE 25195
// min_x := 0 else
25185: LD_ADDR_VAR 0 7
25189: PUSH
25190: LD_INT 0
25192: ST_TO_ADDR
25193: GO 25211
// min_x := x - r ;
25195: LD_ADDR_VAR 0 7
25199: PUSH
25200: LD_VAR 0 2
25204: PUSH
25205: LD_VAR 0 4
25209: MINUS
25210: ST_TO_ADDR
// if y - r < 0 then
25211: LD_VAR 0 3
25215: PUSH
25216: LD_VAR 0 4
25220: MINUS
25221: PUSH
25222: LD_INT 0
25224: LESS
25225: IFFALSE 25237
// min_y := 0 else
25227: LD_ADDR_VAR 0 8
25231: PUSH
25232: LD_INT 0
25234: ST_TO_ADDR
25235: GO 25253
// min_y := y - r ;
25237: LD_ADDR_VAR 0 8
25241: PUSH
25242: LD_VAR 0 3
25246: PUSH
25247: LD_VAR 0 4
25251: MINUS
25252: ST_TO_ADDR
// max_x := x + r ;
25253: LD_ADDR_VAR 0 9
25257: PUSH
25258: LD_VAR 0 2
25262: PUSH
25263: LD_VAR 0 4
25267: PLUS
25268: ST_TO_ADDR
// max_y := y + r ;
25269: LD_ADDR_VAR 0 10
25273: PUSH
25274: LD_VAR 0 3
25278: PUSH
25279: LD_VAR 0 4
25283: PLUS
25284: ST_TO_ADDR
// for _x = min_x to max_x do
25285: LD_ADDR_VAR 0 11
25289: PUSH
25290: DOUBLE
25291: LD_VAR 0 7
25295: DEC
25296: ST_TO_ADDR
25297: LD_VAR 0 9
25301: PUSH
25302: FOR_TO
25303: IFFALSE 25420
// for _y = min_y to max_y do
25305: LD_ADDR_VAR 0 12
25309: PUSH
25310: DOUBLE
25311: LD_VAR 0 8
25315: DEC
25316: ST_TO_ADDR
25317: LD_VAR 0 10
25321: PUSH
25322: FOR_TO
25323: IFFALSE 25416
// begin if not ValidHex ( _x , _y ) then
25325: LD_VAR 0 11
25329: PPUSH
25330: LD_VAR 0 12
25334: PPUSH
25335: CALL_OW 488
25339: NOT
25340: IFFALSE 25344
// continue ;
25342: GO 25322
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25344: LD_VAR 0 11
25348: PPUSH
25349: LD_VAR 0 12
25353: PPUSH
25354: CALL_OW 351
25358: PUSH
25359: LD_VAR 0 11
25363: PPUSH
25364: LD_VAR 0 12
25368: PPUSH
25369: CALL_OW 554
25373: AND
25374: IFFALSE 25414
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25376: LD_ADDR_VAR 0 13
25380: PUSH
25381: LD_VAR 0 13
25385: PPUSH
25386: LD_VAR 0 13
25390: PUSH
25391: LD_INT 1
25393: PLUS
25394: PPUSH
25395: LD_VAR 0 11
25399: PUSH
25400: LD_VAR 0 12
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 2
25413: ST_TO_ADDR
// end ;
25414: GO 25322
25416: POP
25417: POP
25418: GO 25302
25420: POP
25421: POP
// if not list then
25422: LD_VAR 0 13
25426: NOT
25427: IFFALSE 25431
// exit ;
25429: GO 25502
// for i in list do
25431: LD_ADDR_VAR 0 6
25435: PUSH
25436: LD_VAR 0 13
25440: PUSH
25441: FOR_IN
25442: IFFALSE 25500
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25444: LD_VAR 0 1
25448: PPUSH
25449: LD_STRING M
25451: PUSH
25452: LD_VAR 0 6
25456: PUSH
25457: LD_INT 1
25459: ARRAY
25460: PUSH
25461: LD_VAR 0 6
25465: PUSH
25466: LD_INT 2
25468: ARRAY
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: PPUSH
25494: CALL_OW 447
25498: GO 25441
25500: POP
25501: POP
// end ;
25502: LD_VAR 0 5
25506: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25507: LD_EXP 91
25511: NOT
25512: IFFALSE 25562
25514: GO 25516
25516: DISABLE
// begin initHack := true ;
25517: LD_ADDR_EXP 91
25521: PUSH
25522: LD_INT 1
25524: ST_TO_ADDR
// hackTanks := [ ] ;
25525: LD_ADDR_EXP 92
25529: PUSH
25530: EMPTY
25531: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25532: LD_ADDR_EXP 93
25536: PUSH
25537: EMPTY
25538: ST_TO_ADDR
// hackLimit := 3 ;
25539: LD_ADDR_EXP 94
25543: PUSH
25544: LD_INT 3
25546: ST_TO_ADDR
// hackDist := 12 ;
25547: LD_ADDR_EXP 95
25551: PUSH
25552: LD_INT 12
25554: ST_TO_ADDR
// hackCounter := [ ] ;
25555: LD_ADDR_EXP 96
25559: PUSH
25560: EMPTY
25561: ST_TO_ADDR
// end ;
25562: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25563: LD_EXP 91
25567: PUSH
25568: LD_INT 34
25570: PUSH
25571: LD_INT 99
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PPUSH
25578: CALL_OW 69
25582: AND
25583: IFFALSE 25836
25585: GO 25587
25587: DISABLE
25588: LD_INT 0
25590: PPUSH
25591: PPUSH
// begin enable ;
25592: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25593: LD_ADDR_VAR 0 1
25597: PUSH
25598: LD_INT 34
25600: PUSH
25601: LD_INT 99
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PPUSH
25608: CALL_OW 69
25612: PUSH
25613: FOR_IN
25614: IFFALSE 25834
// begin if not i in hackTanks then
25616: LD_VAR 0 1
25620: PUSH
25621: LD_EXP 92
25625: IN
25626: NOT
25627: IFFALSE 25710
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25629: LD_ADDR_EXP 92
25633: PUSH
25634: LD_EXP 92
25638: PPUSH
25639: LD_EXP 92
25643: PUSH
25644: LD_INT 1
25646: PLUS
25647: PPUSH
25648: LD_VAR 0 1
25652: PPUSH
25653: CALL_OW 1
25657: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25658: LD_ADDR_EXP 93
25662: PUSH
25663: LD_EXP 93
25667: PPUSH
25668: LD_EXP 93
25672: PUSH
25673: LD_INT 1
25675: PLUS
25676: PPUSH
25677: EMPTY
25678: PPUSH
25679: CALL_OW 1
25683: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25684: LD_ADDR_EXP 96
25688: PUSH
25689: LD_EXP 96
25693: PPUSH
25694: LD_EXP 96
25698: PUSH
25699: LD_INT 1
25701: PLUS
25702: PPUSH
25703: EMPTY
25704: PPUSH
25705: CALL_OW 1
25709: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25710: LD_VAR 0 1
25714: PPUSH
25715: CALL_OW 302
25719: NOT
25720: IFFALSE 25733
// begin HackUnlinkAll ( i ) ;
25722: LD_VAR 0 1
25726: PPUSH
25727: CALL 25839 0 1
// continue ;
25731: GO 25613
// end ; HackCheckCapturedStatus ( i ) ;
25733: LD_VAR 0 1
25737: PPUSH
25738: CALL 26282 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25742: LD_ADDR_VAR 0 2
25746: PUSH
25747: LD_INT 81
25749: PUSH
25750: LD_VAR 0 1
25754: PPUSH
25755: CALL_OW 255
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 33
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 91
25776: PUSH
25777: LD_VAR 0 1
25781: PUSH
25782: LD_EXP 95
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 50
25794: PUSH
25795: EMPTY
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: PPUSH
25804: CALL_OW 69
25808: ST_TO_ADDR
// if not tmp then
25809: LD_VAR 0 2
25813: NOT
25814: IFFALSE 25818
// continue ;
25816: GO 25613
// HackLink ( i , tmp ) ;
25818: LD_VAR 0 1
25822: PPUSH
25823: LD_VAR 0 2
25827: PPUSH
25828: CALL 25975 0 2
// end ;
25832: GO 25613
25834: POP
25835: POP
// end ;
25836: PPOPN 2
25838: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25839: LD_INT 0
25841: PPUSH
25842: PPUSH
25843: PPUSH
// if not hack in hackTanks then
25844: LD_VAR 0 1
25848: PUSH
25849: LD_EXP 92
25853: IN
25854: NOT
25855: IFFALSE 25859
// exit ;
25857: GO 25970
// index := GetElementIndex ( hackTanks , hack ) ;
25859: LD_ADDR_VAR 0 4
25863: PUSH
25864: LD_EXP 92
25868: PPUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL 33587 0 2
25878: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25879: LD_EXP 93
25883: PUSH
25884: LD_VAR 0 4
25888: ARRAY
25889: IFFALSE 25970
// begin for i in hackTanksCaptured [ index ] do
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_EXP 93
25900: PUSH
25901: LD_VAR 0 4
25905: ARRAY
25906: PUSH
25907: FOR_IN
25908: IFFALSE 25934
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25910: LD_VAR 0 3
25914: PUSH
25915: LD_INT 1
25917: ARRAY
25918: PPUSH
25919: LD_VAR 0 3
25923: PUSH
25924: LD_INT 2
25926: ARRAY
25927: PPUSH
25928: CALL_OW 235
25932: GO 25907
25934: POP
25935: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25936: LD_ADDR_EXP 93
25940: PUSH
25941: LD_EXP 93
25945: PPUSH
25946: LD_VAR 0 4
25950: PPUSH
25951: EMPTY
25952: PPUSH
25953: CALL_OW 1
25957: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25958: LD_VAR 0 1
25962: PPUSH
25963: LD_INT 0
25965: PPUSH
25966: CALL_OW 505
// end ; end ;
25970: LD_VAR 0 2
25974: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25975: LD_INT 0
25977: PPUSH
25978: PPUSH
25979: PPUSH
// if not hack in hackTanks or not vehicles then
25980: LD_VAR 0 1
25984: PUSH
25985: LD_EXP 92
25989: IN
25990: NOT
25991: PUSH
25992: LD_VAR 0 2
25996: NOT
25997: OR
25998: IFFALSE 26002
// exit ;
26000: GO 26277
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26002: LD_ADDR_VAR 0 2
26006: PUSH
26007: LD_VAR 0 1
26011: PPUSH
26012: LD_VAR 0 2
26016: PPUSH
26017: LD_INT 1
26019: PPUSH
26020: LD_INT 1
26022: PPUSH
26023: CALL 34237 0 4
26027: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26028: LD_ADDR_VAR 0 5
26032: PUSH
26033: LD_EXP 92
26037: PPUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL 33587 0 2
26047: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26048: LD_EXP 93
26052: PUSH
26053: LD_VAR 0 5
26057: ARRAY
26058: PUSH
26059: LD_EXP 94
26063: LESS
26064: IFFALSE 26253
// begin for i := 1 to vehicles do
26066: LD_ADDR_VAR 0 4
26070: PUSH
26071: DOUBLE
26072: LD_INT 1
26074: DEC
26075: ST_TO_ADDR
26076: LD_VAR 0 2
26080: PUSH
26081: FOR_TO
26082: IFFALSE 26251
// begin if hackTanksCaptured [ index ] = hackLimit then
26084: LD_EXP 93
26088: PUSH
26089: LD_VAR 0 5
26093: ARRAY
26094: PUSH
26095: LD_EXP 94
26099: EQUAL
26100: IFFALSE 26104
// break ;
26102: GO 26251
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26104: LD_ADDR_EXP 96
26108: PUSH
26109: LD_EXP 96
26113: PPUSH
26114: LD_VAR 0 5
26118: PPUSH
26119: LD_EXP 96
26123: PUSH
26124: LD_VAR 0 5
26128: ARRAY
26129: PUSH
26130: LD_INT 1
26132: PLUS
26133: PPUSH
26134: CALL_OW 1
26138: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26139: LD_ADDR_EXP 93
26143: PUSH
26144: LD_EXP 93
26148: PPUSH
26149: LD_VAR 0 5
26153: PUSH
26154: LD_EXP 93
26158: PUSH
26159: LD_VAR 0 5
26163: ARRAY
26164: PUSH
26165: LD_INT 1
26167: PLUS
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PPUSH
26173: LD_VAR 0 2
26177: PUSH
26178: LD_VAR 0 4
26182: ARRAY
26183: PUSH
26184: LD_VAR 0 2
26188: PUSH
26189: LD_VAR 0 4
26193: ARRAY
26194: PPUSH
26195: CALL_OW 255
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL 33802 0 3
26208: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26209: LD_VAR 0 2
26213: PUSH
26214: LD_VAR 0 4
26218: ARRAY
26219: PPUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 255
26229: PPUSH
26230: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26234: LD_VAR 0 2
26238: PUSH
26239: LD_VAR 0 4
26243: ARRAY
26244: PPUSH
26245: CALL_OW 141
// end ;
26249: GO 26081
26251: POP
26252: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26253: LD_VAR 0 1
26257: PPUSH
26258: LD_EXP 93
26262: PUSH
26263: LD_VAR 0 5
26267: ARRAY
26268: PUSH
26269: LD_INT 0
26271: PLUS
26272: PPUSH
26273: CALL_OW 505
// end ;
26277: LD_VAR 0 3
26281: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26282: LD_INT 0
26284: PPUSH
26285: PPUSH
26286: PPUSH
26287: PPUSH
// if not hack in hackTanks then
26288: LD_VAR 0 1
26292: PUSH
26293: LD_EXP 92
26297: IN
26298: NOT
26299: IFFALSE 26303
// exit ;
26301: GO 26543
// index := GetElementIndex ( hackTanks , hack ) ;
26303: LD_ADDR_VAR 0 4
26307: PUSH
26308: LD_EXP 92
26312: PPUSH
26313: LD_VAR 0 1
26317: PPUSH
26318: CALL 33587 0 2
26322: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: DOUBLE
26329: LD_EXP 93
26333: PUSH
26334: LD_VAR 0 4
26338: ARRAY
26339: INC
26340: ST_TO_ADDR
26341: LD_INT 1
26343: PUSH
26344: FOR_DOWNTO
26345: IFFALSE 26517
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26347: LD_ADDR_VAR 0 5
26351: PUSH
26352: LD_EXP 93
26356: PUSH
26357: LD_VAR 0 4
26361: ARRAY
26362: PUSH
26363: LD_VAR 0 3
26367: ARRAY
26368: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26369: LD_VAR 0 5
26373: PUSH
26374: LD_INT 1
26376: ARRAY
26377: PPUSH
26378: CALL_OW 302
26382: NOT
26383: PUSH
26384: LD_VAR 0 5
26388: PUSH
26389: LD_INT 1
26391: ARRAY
26392: PPUSH
26393: CALL_OW 255
26397: PUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 255
26407: NONEQUAL
26408: OR
26409: IFFALSE 26515
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26411: LD_VAR 0 5
26415: PUSH
26416: LD_INT 1
26418: ARRAY
26419: PPUSH
26420: CALL_OW 305
26424: PUSH
26425: LD_VAR 0 5
26429: PUSH
26430: LD_INT 1
26432: ARRAY
26433: PPUSH
26434: CALL_OW 255
26438: PUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 255
26448: EQUAL
26449: AND
26450: IFFALSE 26474
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26452: LD_VAR 0 5
26456: PUSH
26457: LD_INT 1
26459: ARRAY
26460: PPUSH
26461: LD_VAR 0 5
26465: PUSH
26466: LD_INT 2
26468: ARRAY
26469: PPUSH
26470: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26474: LD_ADDR_EXP 93
26478: PUSH
26479: LD_EXP 93
26483: PPUSH
26484: LD_VAR 0 4
26488: PPUSH
26489: LD_EXP 93
26493: PUSH
26494: LD_VAR 0 4
26498: ARRAY
26499: PPUSH
26500: LD_VAR 0 3
26504: PPUSH
26505: CALL_OW 3
26509: PPUSH
26510: CALL_OW 1
26514: ST_TO_ADDR
// end ; end ;
26515: GO 26344
26517: POP
26518: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_EXP 93
26528: PUSH
26529: LD_VAR 0 4
26533: ARRAY
26534: PUSH
26535: LD_INT 0
26537: PLUS
26538: PPUSH
26539: CALL_OW 505
// end ;
26543: LD_VAR 0 2
26547: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
// if not hack in hackTanks then
26554: LD_VAR 0 1
26558: PUSH
26559: LD_EXP 92
26563: IN
26564: NOT
26565: IFFALSE 26569
// exit ;
26567: GO 26654
// index := GetElementIndex ( hackTanks , hack ) ;
26569: LD_ADDR_VAR 0 5
26573: PUSH
26574: LD_EXP 92
26578: PPUSH
26579: LD_VAR 0 1
26583: PPUSH
26584: CALL 33587 0 2
26588: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26589: LD_ADDR_VAR 0 4
26593: PUSH
26594: DOUBLE
26595: LD_INT 1
26597: DEC
26598: ST_TO_ADDR
26599: LD_EXP 93
26603: PUSH
26604: LD_VAR 0 5
26608: ARRAY
26609: PUSH
26610: FOR_TO
26611: IFFALSE 26652
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26613: LD_EXP 93
26617: PUSH
26618: LD_VAR 0 5
26622: ARRAY
26623: PUSH
26624: LD_VAR 0 4
26628: ARRAY
26629: PUSH
26630: LD_INT 1
26632: ARRAY
26633: PUSH
26634: LD_VAR 0 2
26638: EQUAL
26639: IFFALSE 26650
// KillUnit ( vehicle ) ;
26641: LD_VAR 0 2
26645: PPUSH
26646: CALL_OW 66
26650: GO 26610
26652: POP
26653: POP
// end ;
26654: LD_VAR 0 3
26658: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26659: LD_EXP 97
26663: NOT
26664: IFFALSE 26699
26666: GO 26668
26668: DISABLE
// begin initMiner := true ;
26669: LD_ADDR_EXP 97
26673: PUSH
26674: LD_INT 1
26676: ST_TO_ADDR
// minersList := [ ] ;
26677: LD_ADDR_EXP 98
26681: PUSH
26682: EMPTY
26683: ST_TO_ADDR
// minerMinesList := [ ] ;
26684: LD_ADDR_EXP 99
26688: PUSH
26689: EMPTY
26690: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26691: LD_ADDR_EXP 100
26695: PUSH
26696: LD_INT 5
26698: ST_TO_ADDR
// end ;
26699: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26700: LD_EXP 97
26704: PUSH
26705: LD_INT 34
26707: PUSH
26708: LD_INT 81
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PPUSH
26715: CALL_OW 69
26719: AND
26720: IFFALSE 27181
26722: GO 26724
26724: DISABLE
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
// begin enable ;
26731: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: LD_INT 34
26739: PUSH
26740: LD_INT 81
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PPUSH
26747: CALL_OW 69
26751: PUSH
26752: FOR_IN
26753: IFFALSE 26825
// begin if not i in minersList then
26755: LD_VAR 0 1
26759: PUSH
26760: LD_EXP 98
26764: IN
26765: NOT
26766: IFFALSE 26823
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26768: LD_ADDR_EXP 98
26772: PUSH
26773: LD_EXP 98
26777: PPUSH
26778: LD_EXP 98
26782: PUSH
26783: LD_INT 1
26785: PLUS
26786: PPUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 1
26796: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26797: LD_ADDR_EXP 99
26801: PUSH
26802: LD_EXP 99
26806: PPUSH
26807: LD_EXP 99
26811: PUSH
26812: LD_INT 1
26814: PLUS
26815: PPUSH
26816: EMPTY
26817: PPUSH
26818: CALL_OW 1
26822: ST_TO_ADDR
// end end ;
26823: GO 26752
26825: POP
26826: POP
// for i := minerMinesList downto 1 do
26827: LD_ADDR_VAR 0 1
26831: PUSH
26832: DOUBLE
26833: LD_EXP 99
26837: INC
26838: ST_TO_ADDR
26839: LD_INT 1
26841: PUSH
26842: FOR_DOWNTO
26843: IFFALSE 27179
// begin if IsLive ( minersList [ i ] ) then
26845: LD_EXP 98
26849: PUSH
26850: LD_VAR 0 1
26854: ARRAY
26855: PPUSH
26856: CALL_OW 300
26860: IFFALSE 26888
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26862: LD_EXP 98
26866: PUSH
26867: LD_VAR 0 1
26871: ARRAY
26872: PPUSH
26873: LD_EXP 99
26877: PUSH
26878: LD_VAR 0 1
26882: ARRAY
26883: PPUSH
26884: CALL_OW 505
// if not minerMinesList [ i ] then
26888: LD_EXP 99
26892: PUSH
26893: LD_VAR 0 1
26897: ARRAY
26898: NOT
26899: IFFALSE 26903
// continue ;
26901: GO 26842
// for j := minerMinesList [ i ] downto 1 do
26903: LD_ADDR_VAR 0 2
26907: PUSH
26908: DOUBLE
26909: LD_EXP 99
26913: PUSH
26914: LD_VAR 0 1
26918: ARRAY
26919: INC
26920: ST_TO_ADDR
26921: LD_INT 1
26923: PUSH
26924: FOR_DOWNTO
26925: IFFALSE 27175
// begin side := GetSide ( minersList [ i ] ) ;
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_EXP 98
26936: PUSH
26937: LD_VAR 0 1
26941: ARRAY
26942: PPUSH
26943: CALL_OW 255
26947: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26948: LD_ADDR_VAR 0 4
26952: PUSH
26953: LD_EXP 99
26957: PUSH
26958: LD_VAR 0 1
26962: ARRAY
26963: PUSH
26964: LD_VAR 0 2
26968: ARRAY
26969: PUSH
26970: LD_INT 1
26972: ARRAY
26973: PPUSH
26974: LD_EXP 99
26978: PUSH
26979: LD_VAR 0 1
26983: ARRAY
26984: PUSH
26985: LD_VAR 0 2
26989: ARRAY
26990: PUSH
26991: LD_INT 2
26993: ARRAY
26994: PPUSH
26995: CALL_OW 428
26999: ST_TO_ADDR
// if not tmp then
27000: LD_VAR 0 4
27004: NOT
27005: IFFALSE 27009
// continue ;
27007: GO 26924
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27009: LD_VAR 0 4
27013: PUSH
27014: LD_INT 81
27016: PUSH
27017: LD_VAR 0 3
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PPUSH
27026: CALL_OW 69
27030: IN
27031: PUSH
27032: LD_EXP 99
27036: PUSH
27037: LD_VAR 0 1
27041: ARRAY
27042: PUSH
27043: LD_VAR 0 2
27047: ARRAY
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: LD_EXP 99
27057: PUSH
27058: LD_VAR 0 1
27062: ARRAY
27063: PUSH
27064: LD_VAR 0 2
27068: ARRAY
27069: PUSH
27070: LD_INT 2
27072: ARRAY
27073: PPUSH
27074: CALL_OW 458
27078: AND
27079: IFFALSE 27173
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27081: LD_EXP 99
27085: PUSH
27086: LD_VAR 0 1
27090: ARRAY
27091: PUSH
27092: LD_VAR 0 2
27096: ARRAY
27097: PUSH
27098: LD_INT 1
27100: ARRAY
27101: PPUSH
27102: LD_EXP 99
27106: PUSH
27107: LD_VAR 0 1
27111: ARRAY
27112: PUSH
27113: LD_VAR 0 2
27117: ARRAY
27118: PUSH
27119: LD_INT 2
27121: ARRAY
27122: PPUSH
27123: LD_VAR 0 3
27127: PPUSH
27128: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27132: LD_ADDR_EXP 99
27136: PUSH
27137: LD_EXP 99
27141: PPUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: LD_EXP 99
27151: PUSH
27152: LD_VAR 0 1
27156: ARRAY
27157: PPUSH
27158: LD_VAR 0 2
27162: PPUSH
27163: CALL_OW 3
27167: PPUSH
27168: CALL_OW 1
27172: ST_TO_ADDR
// end ; end ;
27173: GO 26924
27175: POP
27176: POP
// end ;
27177: GO 26842
27179: POP
27180: POP
// end ;
27181: PPOPN 4
27183: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27184: LD_INT 0
27186: PPUSH
27187: PPUSH
// result := false ;
27188: LD_ADDR_VAR 0 4
27192: PUSH
27193: LD_INT 0
27195: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27196: LD_VAR 0 1
27200: PPUSH
27201: CALL_OW 264
27205: PUSH
27206: LD_INT 81
27208: EQUAL
27209: NOT
27210: IFFALSE 27214
// exit ;
27212: GO 27454
// index := GetElementIndex ( minersList , unit ) ;
27214: LD_ADDR_VAR 0 5
27218: PUSH
27219: LD_EXP 98
27223: PPUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: CALL 33587 0 2
27233: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27234: LD_EXP 99
27238: PUSH
27239: LD_VAR 0 5
27243: ARRAY
27244: PUSH
27245: LD_EXP 100
27249: GREATEREQUAL
27250: IFFALSE 27254
// exit ;
27252: GO 27454
// ComMoveXY ( unit , x , y ) ;
27254: LD_VAR 0 1
27258: PPUSH
27259: LD_VAR 0 2
27263: PPUSH
27264: LD_VAR 0 3
27268: PPUSH
27269: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27273: LD_INT 35
27275: PPUSH
27276: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_VAR 0 2
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL 64923 0 3
27299: NOT
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 314
27310: AND
27311: IFFALSE 27315
// exit ;
27313: GO 27454
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27315: LD_VAR 0 2
27319: PPUSH
27320: LD_VAR 0 3
27324: PPUSH
27325: CALL_OW 428
27329: PUSH
27330: LD_VAR 0 1
27334: EQUAL
27335: PUSH
27336: LD_VAR 0 1
27340: PPUSH
27341: CALL_OW 314
27345: NOT
27346: AND
27347: IFFALSE 27273
// PlaySoundXY ( x , y , PlantMine ) ;
27349: LD_VAR 0 2
27353: PPUSH
27354: LD_VAR 0 3
27358: PPUSH
27359: LD_STRING PlantMine
27361: PPUSH
27362: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27366: LD_VAR 0 2
27370: PPUSH
27371: LD_VAR 0 3
27375: PPUSH
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL_OW 255
27385: PPUSH
27386: LD_INT 0
27388: PPUSH
27389: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27393: LD_ADDR_EXP 99
27397: PUSH
27398: LD_EXP 99
27402: PPUSH
27403: LD_VAR 0 5
27407: PUSH
27408: LD_EXP 99
27412: PUSH
27413: LD_VAR 0 5
27417: ARRAY
27418: PUSH
27419: LD_INT 1
27421: PLUS
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PPUSH
27427: LD_VAR 0 2
27431: PUSH
27432: LD_VAR 0 3
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PPUSH
27441: CALL 33802 0 3
27445: ST_TO_ADDR
// result := true ;
27446: LD_ADDR_VAR 0 4
27450: PUSH
27451: LD_INT 1
27453: ST_TO_ADDR
// end ;
27454: LD_VAR 0 4
27458: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
27463: PPUSH
// if not unit in minersList then
27464: LD_VAR 0 1
27468: PUSH
27469: LD_EXP 98
27473: IN
27474: NOT
27475: IFFALSE 27479
// exit ;
27477: GO 27871
// index := GetElementIndex ( minersList , unit ) ;
27479: LD_ADDR_VAR 0 6
27483: PUSH
27484: LD_EXP 98
27488: PPUSH
27489: LD_VAR 0 1
27493: PPUSH
27494: CALL 33587 0 2
27498: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27499: LD_ADDR_VAR 0 5
27503: PUSH
27504: DOUBLE
27505: LD_EXP 99
27509: PUSH
27510: LD_VAR 0 6
27514: ARRAY
27515: INC
27516: ST_TO_ADDR
27517: LD_INT 1
27519: PUSH
27520: FOR_DOWNTO
27521: IFFALSE 27682
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27523: LD_EXP 99
27527: PUSH
27528: LD_VAR 0 6
27532: ARRAY
27533: PUSH
27534: LD_VAR 0 5
27538: ARRAY
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PUSH
27544: LD_VAR 0 2
27548: EQUAL
27549: PUSH
27550: LD_EXP 99
27554: PUSH
27555: LD_VAR 0 6
27559: ARRAY
27560: PUSH
27561: LD_VAR 0 5
27565: ARRAY
27566: PUSH
27567: LD_INT 2
27569: ARRAY
27570: PUSH
27571: LD_VAR 0 3
27575: EQUAL
27576: AND
27577: IFFALSE 27680
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27579: LD_EXP 99
27583: PUSH
27584: LD_VAR 0 6
27588: ARRAY
27589: PUSH
27590: LD_VAR 0 5
27594: ARRAY
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PPUSH
27600: LD_EXP 99
27604: PUSH
27605: LD_VAR 0 6
27609: ARRAY
27610: PUSH
27611: LD_VAR 0 5
27615: ARRAY
27616: PUSH
27617: LD_INT 2
27619: ARRAY
27620: PPUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: CALL_OW 255
27630: PPUSH
27631: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27635: LD_ADDR_EXP 99
27639: PUSH
27640: LD_EXP 99
27644: PPUSH
27645: LD_VAR 0 6
27649: PPUSH
27650: LD_EXP 99
27654: PUSH
27655: LD_VAR 0 6
27659: ARRAY
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: CALL_OW 3
27670: PPUSH
27671: CALL_OW 1
27675: ST_TO_ADDR
// exit ;
27676: POP
27677: POP
27678: GO 27871
// end ; end ;
27680: GO 27520
27682: POP
27683: POP
// for i := minerMinesList [ index ] downto 1 do
27684: LD_ADDR_VAR 0 5
27688: PUSH
27689: DOUBLE
27690: LD_EXP 99
27694: PUSH
27695: LD_VAR 0 6
27699: ARRAY
27700: INC
27701: ST_TO_ADDR
27702: LD_INT 1
27704: PUSH
27705: FOR_DOWNTO
27706: IFFALSE 27869
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27708: LD_EXP 99
27712: PUSH
27713: LD_VAR 0 6
27717: ARRAY
27718: PUSH
27719: LD_VAR 0 5
27723: ARRAY
27724: PUSH
27725: LD_INT 1
27727: ARRAY
27728: PPUSH
27729: LD_EXP 99
27733: PUSH
27734: LD_VAR 0 6
27738: ARRAY
27739: PUSH
27740: LD_VAR 0 5
27744: ARRAY
27745: PUSH
27746: LD_INT 2
27748: ARRAY
27749: PPUSH
27750: LD_VAR 0 2
27754: PPUSH
27755: LD_VAR 0 3
27759: PPUSH
27760: CALL_OW 298
27764: PUSH
27765: LD_INT 6
27767: LESS
27768: IFFALSE 27867
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27770: LD_EXP 99
27774: PUSH
27775: LD_VAR 0 6
27779: ARRAY
27780: PUSH
27781: LD_VAR 0 5
27785: ARRAY
27786: PUSH
27787: LD_INT 1
27789: ARRAY
27790: PPUSH
27791: LD_EXP 99
27795: PUSH
27796: LD_VAR 0 6
27800: ARRAY
27801: PUSH
27802: LD_VAR 0 5
27806: ARRAY
27807: PUSH
27808: LD_INT 2
27810: ARRAY
27811: PPUSH
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 255
27821: PPUSH
27822: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27826: LD_ADDR_EXP 99
27830: PUSH
27831: LD_EXP 99
27835: PPUSH
27836: LD_VAR 0 6
27840: PPUSH
27841: LD_EXP 99
27845: PUSH
27846: LD_VAR 0 6
27850: ARRAY
27851: PPUSH
27852: LD_VAR 0 5
27856: PPUSH
27857: CALL_OW 3
27861: PPUSH
27862: CALL_OW 1
27866: ST_TO_ADDR
// end ; end ;
27867: GO 27705
27869: POP
27870: POP
// end ;
27871: LD_VAR 0 4
27875: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27876: LD_INT 0
27878: PPUSH
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
27886: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL_OW 264
27896: PUSH
27897: LD_INT 81
27899: EQUAL
27900: NOT
27901: PUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_EXP 98
27911: IN
27912: NOT
27913: OR
27914: IFFALSE 27918
// exit ;
27916: GO 28240
// index := GetElementIndex ( minersList , unit ) ;
27918: LD_ADDR_VAR 0 6
27922: PUSH
27923: LD_EXP 98
27927: PPUSH
27928: LD_VAR 0 1
27932: PPUSH
27933: CALL 33587 0 2
27937: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27938: LD_ADDR_VAR 0 8
27942: PUSH
27943: LD_EXP 100
27947: PUSH
27948: LD_EXP 99
27952: PUSH
27953: LD_VAR 0 6
27957: ARRAY
27958: MINUS
27959: ST_TO_ADDR
// if not minesFreeAmount then
27960: LD_VAR 0 8
27964: NOT
27965: IFFALSE 27969
// exit ;
27967: GO 28240
// tmp := [ ] ;
27969: LD_ADDR_VAR 0 7
27973: PUSH
27974: EMPTY
27975: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27976: LD_ADDR_VAR 0 5
27980: PUSH
27981: DOUBLE
27982: LD_INT 1
27984: DEC
27985: ST_TO_ADDR
27986: LD_VAR 0 8
27990: PUSH
27991: FOR_TO
27992: IFFALSE 28187
// begin _d := rand ( 0 , 5 ) ;
27994: LD_ADDR_VAR 0 11
27998: PUSH
27999: LD_INT 0
28001: PPUSH
28002: LD_INT 5
28004: PPUSH
28005: CALL_OW 12
28009: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28010: LD_ADDR_VAR 0 12
28014: PUSH
28015: LD_INT 2
28017: PPUSH
28018: LD_INT 6
28020: PPUSH
28021: CALL_OW 12
28025: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28026: LD_ADDR_VAR 0 9
28030: PUSH
28031: LD_VAR 0 2
28035: PPUSH
28036: LD_VAR 0 11
28040: PPUSH
28041: LD_VAR 0 12
28045: PPUSH
28046: CALL_OW 272
28050: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28051: LD_ADDR_VAR 0 10
28055: PUSH
28056: LD_VAR 0 3
28060: PPUSH
28061: LD_VAR 0 11
28065: PPUSH
28066: LD_VAR 0 12
28070: PPUSH
28071: CALL_OW 273
28075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28076: LD_VAR 0 9
28080: PPUSH
28081: LD_VAR 0 10
28085: PPUSH
28086: CALL_OW 488
28090: PUSH
28091: LD_VAR 0 9
28095: PUSH
28096: LD_VAR 0 10
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_VAR 0 7
28109: IN
28110: NOT
28111: AND
28112: PUSH
28113: LD_VAR 0 9
28117: PPUSH
28118: LD_VAR 0 10
28122: PPUSH
28123: CALL_OW 458
28127: NOT
28128: AND
28129: IFFALSE 28171
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28131: LD_ADDR_VAR 0 7
28135: PUSH
28136: LD_VAR 0 7
28140: PPUSH
28141: LD_VAR 0 7
28145: PUSH
28146: LD_INT 1
28148: PLUS
28149: PPUSH
28150: LD_VAR 0 9
28154: PUSH
28155: LD_VAR 0 10
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 1
28168: ST_TO_ADDR
28169: GO 28185
// i := i - 1 ;
28171: LD_ADDR_VAR 0 5
28175: PUSH
28176: LD_VAR 0 5
28180: PUSH
28181: LD_INT 1
28183: MINUS
28184: ST_TO_ADDR
// end ;
28185: GO 27991
28187: POP
28188: POP
// for i in tmp do
28189: LD_ADDR_VAR 0 5
28193: PUSH
28194: LD_VAR 0 7
28198: PUSH
28199: FOR_IN
28200: IFFALSE 28238
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_VAR 0 5
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: PPUSH
28216: LD_VAR 0 5
28220: PUSH
28221: LD_INT 2
28223: ARRAY
28224: PPUSH
28225: CALL 27184 0 3
28229: NOT
28230: IFFALSE 28236
// exit ;
28232: POP
28233: POP
28234: GO 28240
28236: GO 28199
28238: POP
28239: POP
// end ;
28240: LD_VAR 0 4
28244: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
28249: PPUSH
28250: PPUSH
28251: PPUSH
28252: PPUSH
28253: PPUSH
// if not GetClass ( unit ) = class_sniper then
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 257
28263: PUSH
28264: LD_INT 5
28266: EQUAL
28267: NOT
28268: IFFALSE 28272
// exit ;
28270: GO 28660
// dist := 8 ;
28272: LD_ADDR_VAR 0 5
28276: PUSH
28277: LD_INT 8
28279: ST_TO_ADDR
// viewRange := 12 ;
28280: LD_ADDR_VAR 0 7
28284: PUSH
28285: LD_INT 12
28287: ST_TO_ADDR
// side := GetSide ( unit ) ;
28288: LD_ADDR_VAR 0 6
28292: PUSH
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL_OW 255
28302: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28303: LD_INT 61
28305: PPUSH
28306: LD_VAR 0 6
28310: PPUSH
28311: CALL_OW 321
28315: PUSH
28316: LD_INT 2
28318: EQUAL
28319: IFFALSE 28329
// viewRange := 16 ;
28321: LD_ADDR_VAR 0 7
28325: PUSH
28326: LD_INT 16
28328: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28329: LD_VAR 0 1
28333: PPUSH
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_VAR 0 3
28343: PPUSH
28344: CALL_OW 297
28348: PUSH
28349: LD_VAR 0 5
28353: GREATER
28354: IFFALSE 28433
// begin ComMoveXY ( unit , x , y ) ;
28356: LD_VAR 0 1
28360: PPUSH
28361: LD_VAR 0 2
28365: PPUSH
28366: LD_VAR 0 3
28370: PPUSH
28371: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28375: LD_INT 35
28377: PPUSH
28378: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28382: LD_VAR 0 1
28386: PPUSH
28387: LD_VAR 0 2
28391: PPUSH
28392: LD_VAR 0 3
28396: PPUSH
28397: CALL 64923 0 3
28401: NOT
28402: IFFALSE 28406
// exit ;
28404: GO 28660
// until GetDistUnitXY ( unit , x , y ) < dist ;
28406: LD_VAR 0 1
28410: PPUSH
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_VAR 0 3
28420: PPUSH
28421: CALL_OW 297
28425: PUSH
28426: LD_VAR 0 5
28430: LESS
28431: IFFALSE 28375
// end ; ComTurnXY ( unit , x , y ) ;
28433: LD_VAR 0 1
28437: PPUSH
28438: LD_VAR 0 2
28442: PPUSH
28443: LD_VAR 0 3
28447: PPUSH
28448: CALL_OW 118
// wait ( 5 ) ;
28452: LD_INT 5
28454: PPUSH
28455: CALL_OW 67
// _d := GetDir ( unit ) ;
28459: LD_ADDR_VAR 0 10
28463: PUSH
28464: LD_VAR 0 1
28468: PPUSH
28469: CALL_OW 254
28473: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28474: LD_ADDR_VAR 0 8
28478: PUSH
28479: LD_VAR 0 1
28483: PPUSH
28484: CALL_OW 250
28488: PPUSH
28489: LD_VAR 0 10
28493: PPUSH
28494: LD_VAR 0 5
28498: PPUSH
28499: CALL_OW 272
28503: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28504: LD_ADDR_VAR 0 9
28508: PUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 251
28518: PPUSH
28519: LD_VAR 0 10
28523: PPUSH
28524: LD_VAR 0 5
28528: PPUSH
28529: CALL_OW 273
28533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28534: LD_VAR 0 8
28538: PPUSH
28539: LD_VAR 0 9
28543: PPUSH
28544: CALL_OW 488
28548: NOT
28549: IFFALSE 28553
// exit ;
28551: GO 28660
// ComAnimCustom ( unit , 1 ) ;
28553: LD_VAR 0 1
28557: PPUSH
28558: LD_INT 1
28560: PPUSH
28561: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28565: LD_VAR 0 8
28569: PPUSH
28570: LD_VAR 0 9
28574: PPUSH
28575: LD_VAR 0 6
28579: PPUSH
28580: LD_VAR 0 7
28584: PPUSH
28585: CALL_OW 330
// repeat wait ( 1 ) ;
28589: LD_INT 1
28591: PPUSH
28592: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 316
28605: PUSH
28606: LD_VAR 0 1
28610: PPUSH
28611: CALL_OW 314
28615: OR
28616: PUSH
28617: LD_VAR 0 1
28621: PPUSH
28622: CALL_OW 302
28626: NOT
28627: OR
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 301
28638: OR
28639: IFFALSE 28589
// RemoveSeeing ( _x , _y , side ) ;
28641: LD_VAR 0 8
28645: PPUSH
28646: LD_VAR 0 9
28650: PPUSH
28651: LD_VAR 0 6
28655: PPUSH
28656: CALL_OW 331
// end ; end_of_file
28660: LD_VAR 0 4
28664: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
// if exist_mode then
28669: LD_VAR 0 2
28673: IFFALSE 28698
// unit := CreateCharacter ( prefix & ident ) else
28675: LD_ADDR_VAR 0 5
28679: PUSH
28680: LD_VAR 0 3
28684: PUSH
28685: LD_VAR 0 1
28689: STR
28690: PPUSH
28691: CALL_OW 34
28695: ST_TO_ADDR
28696: GO 28713
// unit := NewCharacter ( ident ) ;
28698: LD_ADDR_VAR 0 5
28702: PUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 25
28712: ST_TO_ADDR
// result := unit ;
28713: LD_ADDR_VAR 0 4
28717: PUSH
28718: LD_VAR 0 5
28722: ST_TO_ADDR
// end ;
28723: LD_VAR 0 4
28727: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28728: LD_INT 0
28730: PPUSH
28731: PPUSH
// if not side or not nation then
28732: LD_VAR 0 1
28736: NOT
28737: PUSH
28738: LD_VAR 0 2
28742: NOT
28743: OR
28744: IFFALSE 28748
// exit ;
28746: GO 29516
// case nation of nation_american :
28748: LD_VAR 0 2
28752: PUSH
28753: LD_INT 1
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28975
28761: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28762: LD_ADDR_VAR 0 4
28766: PUSH
28767: LD_INT 35
28769: PUSH
28770: LD_INT 45
28772: PUSH
28773: LD_INT 46
28775: PUSH
28776: LD_INT 47
28778: PUSH
28779: LD_INT 82
28781: PUSH
28782: LD_INT 83
28784: PUSH
28785: LD_INT 84
28787: PUSH
28788: LD_INT 85
28790: PUSH
28791: LD_INT 86
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 6
28802: PUSH
28803: LD_INT 15
28805: PUSH
28806: LD_INT 16
28808: PUSH
28809: LD_INT 7
28811: PUSH
28812: LD_INT 12
28814: PUSH
28815: LD_INT 13
28817: PUSH
28818: LD_INT 10
28820: PUSH
28821: LD_INT 14
28823: PUSH
28824: LD_INT 20
28826: PUSH
28827: LD_INT 21
28829: PUSH
28830: LD_INT 22
28832: PUSH
28833: LD_INT 25
28835: PUSH
28836: LD_INT 32
28838: PUSH
28839: LD_INT 27
28841: PUSH
28842: LD_INT 36
28844: PUSH
28845: LD_INT 69
28847: PUSH
28848: LD_INT 39
28850: PUSH
28851: LD_INT 34
28853: PUSH
28854: LD_INT 40
28856: PUSH
28857: LD_INT 48
28859: PUSH
28860: LD_INT 49
28862: PUSH
28863: LD_INT 50
28865: PUSH
28866: LD_INT 51
28868: PUSH
28869: LD_INT 52
28871: PUSH
28872: LD_INT 53
28874: PUSH
28875: LD_INT 54
28877: PUSH
28878: LD_INT 55
28880: PUSH
28881: LD_INT 56
28883: PUSH
28884: LD_INT 57
28886: PUSH
28887: LD_INT 58
28889: PUSH
28890: LD_INT 59
28892: PUSH
28893: LD_INT 60
28895: PUSH
28896: LD_INT 61
28898: PUSH
28899: LD_INT 62
28901: PUSH
28902: LD_INT 80
28904: PUSH
28905: LD_INT 82
28907: PUSH
28908: LD_INT 83
28910: PUSH
28911: LD_INT 84
28913: PUSH
28914: LD_INT 85
28916: PUSH
28917: LD_INT 86
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: ST_TO_ADDR
28973: GO 29440
28975: LD_INT 2
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29209
28983: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28984: LD_ADDR_VAR 0 4
28988: PUSH
28989: LD_INT 35
28991: PUSH
28992: LD_INT 45
28994: PUSH
28995: LD_INT 46
28997: PUSH
28998: LD_INT 47
29000: PUSH
29001: LD_INT 82
29003: PUSH
29004: LD_INT 83
29006: PUSH
29007: LD_INT 84
29009: PUSH
29010: LD_INT 85
29012: PUSH
29013: LD_INT 87
29015: PUSH
29016: LD_INT 70
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 11
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: LD_INT 4
29030: PUSH
29031: LD_INT 5
29033: PUSH
29034: LD_INT 6
29036: PUSH
29037: LD_INT 15
29039: PUSH
29040: LD_INT 18
29042: PUSH
29043: LD_INT 7
29045: PUSH
29046: LD_INT 17
29048: PUSH
29049: LD_INT 8
29051: PUSH
29052: LD_INT 20
29054: PUSH
29055: LD_INT 21
29057: PUSH
29058: LD_INT 22
29060: PUSH
29061: LD_INT 72
29063: PUSH
29064: LD_INT 26
29066: PUSH
29067: LD_INT 69
29069: PUSH
29070: LD_INT 39
29072: PUSH
29073: LD_INT 40
29075: PUSH
29076: LD_INT 41
29078: PUSH
29079: LD_INT 42
29081: PUSH
29082: LD_INT 43
29084: PUSH
29085: LD_INT 48
29087: PUSH
29088: LD_INT 49
29090: PUSH
29091: LD_INT 50
29093: PUSH
29094: LD_INT 51
29096: PUSH
29097: LD_INT 52
29099: PUSH
29100: LD_INT 53
29102: PUSH
29103: LD_INT 54
29105: PUSH
29106: LD_INT 55
29108: PUSH
29109: LD_INT 56
29111: PUSH
29112: LD_INT 60
29114: PUSH
29115: LD_INT 61
29117: PUSH
29118: LD_INT 62
29120: PUSH
29121: LD_INT 66
29123: PUSH
29124: LD_INT 67
29126: PUSH
29127: LD_INT 68
29129: PUSH
29130: LD_INT 81
29132: PUSH
29133: LD_INT 82
29135: PUSH
29136: LD_INT 83
29138: PUSH
29139: LD_INT 84
29141: PUSH
29142: LD_INT 85
29144: PUSH
29145: LD_INT 87
29147: PUSH
29148: LD_INT 88
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: ST_TO_ADDR
29207: GO 29440
29209: LD_INT 3
29211: DOUBLE
29212: EQUAL
29213: IFTRUE 29217
29215: GO 29439
29217: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29218: LD_ADDR_VAR 0 4
29222: PUSH
29223: LD_INT 46
29225: PUSH
29226: LD_INT 47
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 82
29237: PUSH
29238: LD_INT 83
29240: PUSH
29241: LD_INT 84
29243: PUSH
29244: LD_INT 85
29246: PUSH
29247: LD_INT 86
29249: PUSH
29250: LD_INT 11
29252: PUSH
29253: LD_INT 9
29255: PUSH
29256: LD_INT 20
29258: PUSH
29259: LD_INT 19
29261: PUSH
29262: LD_INT 21
29264: PUSH
29265: LD_INT 24
29267: PUSH
29268: LD_INT 22
29270: PUSH
29271: LD_INT 25
29273: PUSH
29274: LD_INT 28
29276: PUSH
29277: LD_INT 29
29279: PUSH
29280: LD_INT 30
29282: PUSH
29283: LD_INT 31
29285: PUSH
29286: LD_INT 37
29288: PUSH
29289: LD_INT 38
29291: PUSH
29292: LD_INT 32
29294: PUSH
29295: LD_INT 27
29297: PUSH
29298: LD_INT 33
29300: PUSH
29301: LD_INT 69
29303: PUSH
29304: LD_INT 39
29306: PUSH
29307: LD_INT 34
29309: PUSH
29310: LD_INT 40
29312: PUSH
29313: LD_INT 71
29315: PUSH
29316: LD_INT 23
29318: PUSH
29319: LD_INT 44
29321: PUSH
29322: LD_INT 48
29324: PUSH
29325: LD_INT 49
29327: PUSH
29328: LD_INT 50
29330: PUSH
29331: LD_INT 51
29333: PUSH
29334: LD_INT 52
29336: PUSH
29337: LD_INT 53
29339: PUSH
29340: LD_INT 54
29342: PUSH
29343: LD_INT 55
29345: PUSH
29346: LD_INT 56
29348: PUSH
29349: LD_INT 57
29351: PUSH
29352: LD_INT 58
29354: PUSH
29355: LD_INT 59
29357: PUSH
29358: LD_INT 63
29360: PUSH
29361: LD_INT 64
29363: PUSH
29364: LD_INT 65
29366: PUSH
29367: LD_INT 82
29369: PUSH
29370: LD_INT 83
29372: PUSH
29373: LD_INT 84
29375: PUSH
29376: LD_INT 85
29378: PUSH
29379: LD_INT 86
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: ST_TO_ADDR
29437: GO 29440
29439: POP
// if state > - 1 and state < 3 then
29440: LD_VAR 0 3
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: GREATER
29449: PUSH
29450: LD_VAR 0 3
29454: PUSH
29455: LD_INT 3
29457: LESS
29458: AND
29459: IFFALSE 29516
// for i in result do
29461: LD_ADDR_VAR 0 5
29465: PUSH
29466: LD_VAR 0 4
29470: PUSH
29471: FOR_IN
29472: IFFALSE 29514
// if GetTech ( i , side ) <> state then
29474: LD_VAR 0 5
29478: PPUSH
29479: LD_VAR 0 1
29483: PPUSH
29484: CALL_OW 321
29488: PUSH
29489: LD_VAR 0 3
29493: NONEQUAL
29494: IFFALSE 29512
// result := result diff i ;
29496: LD_ADDR_VAR 0 4
29500: PUSH
29501: LD_VAR 0 4
29505: PUSH
29506: LD_VAR 0 5
29510: DIFF
29511: ST_TO_ADDR
29512: GO 29471
29514: POP
29515: POP
// end ;
29516: LD_VAR 0 4
29520: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29521: LD_INT 0
29523: PPUSH
29524: PPUSH
29525: PPUSH
// result := true ;
29526: LD_ADDR_VAR 0 3
29530: PUSH
29531: LD_INT 1
29533: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29534: LD_ADDR_VAR 0 5
29538: PUSH
29539: LD_VAR 0 2
29543: PPUSH
29544: CALL_OW 480
29548: ST_TO_ADDR
// if not tmp then
29549: LD_VAR 0 5
29553: NOT
29554: IFFALSE 29558
// exit ;
29556: GO 29607
// for i in tmp do
29558: LD_ADDR_VAR 0 4
29562: PUSH
29563: LD_VAR 0 5
29567: PUSH
29568: FOR_IN
29569: IFFALSE 29605
// if GetTech ( i , side ) <> state_researched then
29571: LD_VAR 0 4
29575: PPUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 321
29585: PUSH
29586: LD_INT 2
29588: NONEQUAL
29589: IFFALSE 29603
// begin result := false ;
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_INT 0
29598: ST_TO_ADDR
// exit ;
29599: POP
29600: POP
29601: GO 29607
// end ;
29603: GO 29568
29605: POP
29606: POP
// end ;
29607: LD_VAR 0 3
29611: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
29616: PPUSH
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29627: LD_VAR 0 1
29631: NOT
29632: PUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 257
29642: PUSH
29643: LD_INT 9
29645: NONEQUAL
29646: OR
29647: IFFALSE 29651
// exit ;
29649: GO 30224
// side := GetSide ( unit ) ;
29651: LD_ADDR_VAR 0 9
29655: PUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 255
29665: ST_TO_ADDR
// tech_space := tech_spacanom ;
29666: LD_ADDR_VAR 0 12
29670: PUSH
29671: LD_INT 29
29673: ST_TO_ADDR
// tech_time := tech_taurad ;
29674: LD_ADDR_VAR 0 13
29678: PUSH
29679: LD_INT 28
29681: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29682: LD_ADDR_VAR 0 11
29686: PUSH
29687: LD_VAR 0 1
29691: PPUSH
29692: CALL_OW 310
29696: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29697: LD_VAR 0 11
29701: PPUSH
29702: CALL_OW 247
29706: PUSH
29707: LD_INT 2
29709: EQUAL
29710: IFFALSE 29714
// exit ;
29712: GO 30224
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29714: LD_ADDR_VAR 0 8
29718: PUSH
29719: LD_INT 81
29721: PUSH
29722: LD_VAR 0 9
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 3
29733: PUSH
29734: LD_INT 21
29736: PUSH
29737: LD_INT 3
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// if not tmp then
29757: LD_VAR 0 8
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 30224
// if in_unit then
29766: LD_VAR 0 11
29770: IFFALSE 29794
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29772: LD_ADDR_VAR 0 10
29776: PUSH
29777: LD_VAR 0 8
29781: PPUSH
29782: LD_VAR 0 11
29786: PPUSH
29787: CALL_OW 74
29791: ST_TO_ADDR
29792: GO 29814
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29794: LD_ADDR_VAR 0 10
29798: PUSH
29799: LD_VAR 0 8
29803: PPUSH
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 74
29813: ST_TO_ADDR
// if not enemy then
29814: LD_VAR 0 10
29818: NOT
29819: IFFALSE 29823
// exit ;
29821: GO 30224
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29823: LD_VAR 0 11
29827: PUSH
29828: LD_VAR 0 11
29832: PPUSH
29833: LD_VAR 0 10
29837: PPUSH
29838: CALL_OW 296
29842: PUSH
29843: LD_INT 13
29845: GREATER
29846: AND
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: LD_VAR 0 10
29857: PPUSH
29858: CALL_OW 296
29862: PUSH
29863: LD_INT 12
29865: GREATER
29866: OR
29867: IFFALSE 29871
// exit ;
29869: GO 30224
// missile := [ 1 ] ;
29871: LD_ADDR_VAR 0 14
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29882: LD_VAR 0 9
29886: PPUSH
29887: LD_VAR 0 12
29891: PPUSH
29892: CALL_OW 325
29896: IFFALSE 29925
// missile := Replace ( missile , missile + 1 , 2 ) ;
29898: LD_ADDR_VAR 0 14
29902: PUSH
29903: LD_VAR 0 14
29907: PPUSH
29908: LD_VAR 0 14
29912: PUSH
29913: LD_INT 1
29915: PLUS
29916: PPUSH
29917: LD_INT 2
29919: PPUSH
29920: CALL_OW 1
29924: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29925: LD_VAR 0 9
29929: PPUSH
29930: LD_VAR 0 13
29934: PPUSH
29935: CALL_OW 325
29939: PUSH
29940: LD_VAR 0 10
29944: PPUSH
29945: CALL_OW 255
29949: PPUSH
29950: LD_VAR 0 13
29954: PPUSH
29955: CALL_OW 325
29959: NOT
29960: AND
29961: IFFALSE 29990
// missile := Replace ( missile , missile + 1 , 3 ) ;
29963: LD_ADDR_VAR 0 14
29967: PUSH
29968: LD_VAR 0 14
29972: PPUSH
29973: LD_VAR 0 14
29977: PUSH
29978: LD_INT 1
29980: PLUS
29981: PPUSH
29982: LD_INT 3
29984: PPUSH
29985: CALL_OW 1
29989: ST_TO_ADDR
// if missile < 2 then
29990: LD_VAR 0 14
29994: PUSH
29995: LD_INT 2
29997: LESS
29998: IFFALSE 30002
// exit ;
30000: GO 30224
// x := GetX ( enemy ) ;
30002: LD_ADDR_VAR 0 4
30006: PUSH
30007: LD_VAR 0 10
30011: PPUSH
30012: CALL_OW 250
30016: ST_TO_ADDR
// y := GetY ( enemy ) ;
30017: LD_ADDR_VAR 0 5
30021: PUSH
30022: LD_VAR 0 10
30026: PPUSH
30027: CALL_OW 251
30031: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30032: LD_ADDR_VAR 0 6
30036: PUSH
30037: LD_VAR 0 4
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PPUSH
30046: LD_INT 1
30048: PPUSH
30049: CALL_OW 12
30053: PLUS
30054: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30055: LD_ADDR_VAR 0 7
30059: PUSH
30060: LD_VAR 0 5
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PPUSH
30069: LD_INT 1
30071: PPUSH
30072: CALL_OW 12
30076: PLUS
30077: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30078: LD_VAR 0 6
30082: PPUSH
30083: LD_VAR 0 7
30087: PPUSH
30088: CALL_OW 488
30092: NOT
30093: IFFALSE 30115
// begin _x := x ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 4
30104: ST_TO_ADDR
// _y := y ;
30105: LD_ADDR_VAR 0 7
30109: PUSH
30110: LD_VAR 0 5
30114: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30115: LD_ADDR_VAR 0 3
30119: PUSH
30120: LD_INT 1
30122: PPUSH
30123: LD_VAR 0 14
30127: PPUSH
30128: CALL_OW 12
30132: ST_TO_ADDR
// case i of 1 :
30133: LD_VAR 0 3
30137: PUSH
30138: LD_INT 1
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30163
30146: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30147: LD_VAR 0 1
30151: PPUSH
30152: LD_VAR 0 10
30156: PPUSH
30157: CALL_OW 115
30161: GO 30224
30163: LD_INT 2
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30193
30171: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_VAR 0 6
30181: PPUSH
30182: LD_VAR 0 7
30186: PPUSH
30187: CALL_OW 153
30191: GO 30224
30193: LD_INT 3
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30223
30201: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30202: LD_VAR 0 1
30206: PPUSH
30207: LD_VAR 0 6
30211: PPUSH
30212: LD_VAR 0 7
30216: PPUSH
30217: CALL_OW 154
30221: GO 30224
30223: POP
// end ;
30224: LD_VAR 0 2
30228: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30229: LD_INT 0
30231: PPUSH
30232: PPUSH
30233: PPUSH
30234: PPUSH
30235: PPUSH
30236: PPUSH
// if not unit or not building then
30237: LD_VAR 0 1
30241: NOT
30242: PUSH
30243: LD_VAR 0 2
30247: NOT
30248: OR
30249: IFFALSE 30253
// exit ;
30251: GO 30411
// x := GetX ( building ) ;
30253: LD_ADDR_VAR 0 5
30257: PUSH
30258: LD_VAR 0 2
30262: PPUSH
30263: CALL_OW 250
30267: ST_TO_ADDR
// y := GetY ( building ) ;
30268: LD_ADDR_VAR 0 6
30272: PUSH
30273: LD_VAR 0 2
30277: PPUSH
30278: CALL_OW 251
30282: ST_TO_ADDR
// for i = 0 to 5 do
30283: LD_ADDR_VAR 0 4
30287: PUSH
30288: DOUBLE
30289: LD_INT 0
30291: DEC
30292: ST_TO_ADDR
30293: LD_INT 5
30295: PUSH
30296: FOR_TO
30297: IFFALSE 30409
// begin _x := ShiftX ( x , i , 3 ) ;
30299: LD_ADDR_VAR 0 7
30303: PUSH
30304: LD_VAR 0 5
30308: PPUSH
30309: LD_VAR 0 4
30313: PPUSH
30314: LD_INT 3
30316: PPUSH
30317: CALL_OW 272
30321: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30322: LD_ADDR_VAR 0 8
30326: PUSH
30327: LD_VAR 0 6
30331: PPUSH
30332: LD_VAR 0 4
30336: PPUSH
30337: LD_INT 3
30339: PPUSH
30340: CALL_OW 273
30344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30345: LD_VAR 0 7
30349: PPUSH
30350: LD_VAR 0 8
30354: PPUSH
30355: CALL_OW 488
30359: NOT
30360: IFFALSE 30364
// continue ;
30362: GO 30296
// if HexInfo ( _x , _y ) = 0 then
30364: LD_VAR 0 7
30368: PPUSH
30369: LD_VAR 0 8
30373: PPUSH
30374: CALL_OW 428
30378: PUSH
30379: LD_INT 0
30381: EQUAL
30382: IFFALSE 30407
// begin ComMoveXY ( unit , _x , _y ) ;
30384: LD_VAR 0 1
30388: PPUSH
30389: LD_VAR 0 7
30393: PPUSH
30394: LD_VAR 0 8
30398: PPUSH
30399: CALL_OW 111
// exit ;
30403: POP
30404: POP
30405: GO 30411
// end ; end ;
30407: GO 30296
30409: POP
30410: POP
// end ;
30411: LD_VAR 0 3
30415: RET
// export function ScanBase ( side , base_area ) ; begin
30416: LD_INT 0
30418: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30419: LD_ADDR_VAR 0 3
30423: PUSH
30424: LD_VAR 0 2
30428: PPUSH
30429: LD_INT 81
30431: PUSH
30432: LD_VAR 0 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PPUSH
30441: CALL_OW 70
30445: ST_TO_ADDR
// end ;
30446: LD_VAR 0 3
30450: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30451: LD_INT 0
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
// result := false ;
30457: LD_ADDR_VAR 0 2
30461: PUSH
30462: LD_INT 0
30464: ST_TO_ADDR
// side := GetSide ( unit ) ;
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_VAR 0 1
30474: PPUSH
30475: CALL_OW 255
30479: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30480: LD_ADDR_VAR 0 4
30484: PUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 248
30494: ST_TO_ADDR
// case nat of 1 :
30495: LD_VAR 0 4
30499: PUSH
30500: LD_INT 1
30502: DOUBLE
30503: EQUAL
30504: IFTRUE 30508
30506: GO 30519
30508: POP
// tech := tech_lassight ; 2 :
30509: LD_ADDR_VAR 0 5
30513: PUSH
30514: LD_INT 12
30516: ST_TO_ADDR
30517: GO 30558
30519: LD_INT 2
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30538
30527: POP
// tech := tech_mortar ; 3 :
30528: LD_ADDR_VAR 0 5
30532: PUSH
30533: LD_INT 41
30535: ST_TO_ADDR
30536: GO 30558
30538: LD_INT 3
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30557
30546: POP
// tech := tech_bazooka ; end ;
30547: LD_ADDR_VAR 0 5
30551: PUSH
30552: LD_INT 44
30554: ST_TO_ADDR
30555: GO 30558
30557: POP
// if Researched ( side , tech ) then
30558: LD_VAR 0 3
30562: PPUSH
30563: LD_VAR 0 5
30567: PPUSH
30568: CALL_OW 325
30572: IFFALSE 30599
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30574: LD_ADDR_VAR 0 2
30578: PUSH
30579: LD_INT 5
30581: PUSH
30582: LD_INT 8
30584: PUSH
30585: LD_INT 9
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: PUSH
30593: LD_VAR 0 4
30597: ARRAY
30598: ST_TO_ADDR
// end ;
30599: LD_VAR 0 2
30603: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30604: LD_INT 0
30606: PPUSH
30607: PPUSH
30608: PPUSH
// if not mines then
30609: LD_VAR 0 2
30613: NOT
30614: IFFALSE 30618
// exit ;
30616: GO 30762
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30618: LD_ADDR_VAR 0 5
30622: PUSH
30623: LD_INT 81
30625: PUSH
30626: LD_VAR 0 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 3
30637: PUSH
30638: LD_INT 21
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PPUSH
30656: CALL_OW 69
30660: ST_TO_ADDR
// for i in mines do
30661: LD_ADDR_VAR 0 4
30665: PUSH
30666: LD_VAR 0 2
30670: PUSH
30671: FOR_IN
30672: IFFALSE 30760
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30674: LD_VAR 0 4
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: LD_VAR 0 4
30687: PUSH
30688: LD_INT 2
30690: ARRAY
30691: PPUSH
30692: CALL_OW 458
30696: NOT
30697: IFFALSE 30701
// continue ;
30699: GO 30671
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30701: LD_VAR 0 4
30705: PUSH
30706: LD_INT 1
30708: ARRAY
30709: PPUSH
30710: LD_VAR 0 4
30714: PUSH
30715: LD_INT 2
30717: ARRAY
30718: PPUSH
30719: CALL_OW 428
30723: PUSH
30724: LD_VAR 0 5
30728: IN
30729: IFFALSE 30758
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30731: LD_VAR 0 4
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: LD_VAR 0 4
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 1
30753: PPUSH
30754: CALL_OW 456
// end ;
30758: GO 30671
30760: POP
30761: POP
// end ;
30762: LD_VAR 0 3
30766: RET
// export function Count ( array ) ; var i ; begin
30767: LD_INT 0
30769: PPUSH
30770: PPUSH
// result := 0 ;
30771: LD_ADDR_VAR 0 2
30775: PUSH
30776: LD_INT 0
30778: ST_TO_ADDR
// for i in array do
30779: LD_ADDR_VAR 0 3
30783: PUSH
30784: LD_VAR 0 1
30788: PUSH
30789: FOR_IN
30790: IFFALSE 30814
// if i then
30792: LD_VAR 0 3
30796: IFFALSE 30812
// result := result + 1 ;
30798: LD_ADDR_VAR 0 2
30802: PUSH
30803: LD_VAR 0 2
30807: PUSH
30808: LD_INT 1
30810: PLUS
30811: ST_TO_ADDR
30812: GO 30789
30814: POP
30815: POP
// end ;
30816: LD_VAR 0 2
30820: RET
// export function IsEmpty ( building ) ; begin
30821: LD_INT 0
30823: PPUSH
// if not building then
30824: LD_VAR 0 1
30828: NOT
30829: IFFALSE 30833
// exit ;
30831: GO 30876
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30833: LD_ADDR_VAR 0 2
30837: PUSH
30838: LD_VAR 0 1
30842: PUSH
30843: LD_INT 22
30845: PUSH
30846: LD_VAR 0 1
30850: PPUSH
30851: CALL_OW 255
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 58
30862: PUSH
30863: EMPTY
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PPUSH
30870: CALL_OW 69
30874: IN
30875: ST_TO_ADDR
// end ;
30876: LD_VAR 0 2
30880: RET
// export function IsNotFull ( building ) ; var places ; begin
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// if not building then
30885: LD_VAR 0 1
30889: NOT
30890: IFFALSE 30894
// exit ;
30892: GO 31065
// result := false ;
30894: LD_ADDR_VAR 0 2
30898: PUSH
30899: LD_INT 0
30901: ST_TO_ADDR
// places := 0 ;
30902: LD_ADDR_VAR 0 3
30906: PUSH
30907: LD_INT 0
30909: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30910: LD_VAR 0 1
30914: PPUSH
30915: CALL_OW 266
30919: PUSH
30920: LD_INT 0
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30982
30926: LD_INT 1
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30982
30932: LD_INT 6
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30982
30938: LD_INT 7
30940: DOUBLE
30941: EQUAL
30942: IFTRUE 30982
30944: LD_INT 8
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30982
30950: LD_INT 4
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30982
30956: LD_INT 5
30958: DOUBLE
30959: EQUAL
30960: IFTRUE 30982
30962: LD_INT 2
30964: DOUBLE
30965: EQUAL
30966: IFTRUE 30982
30968: LD_INT 3
30970: DOUBLE
30971: EQUAL
30972: IFTRUE 30982
30974: LD_INT 35
30976: DOUBLE
30977: EQUAL
30978: IFTRUE 30982
30980: GO 30993
30982: POP
// places := 6 ; b_bunker , b_breastwork :
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: LD_INT 6
30990: ST_TO_ADDR
30991: GO 31038
30993: LD_INT 32
30995: DOUBLE
30996: EQUAL
30997: IFTRUE 31007
30999: LD_INT 31
31001: DOUBLE
31002: EQUAL
31003: IFTRUE 31007
31005: GO 31018
31007: POP
// places := 1 ; b_control_tower :
31008: LD_ADDR_VAR 0 3
31012: PUSH
31013: LD_INT 1
31015: ST_TO_ADDR
31016: GO 31038
31018: LD_INT 36
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31026
31024: GO 31037
31026: POP
// places := 3 ; end ;
31027: LD_ADDR_VAR 0 3
31031: PUSH
31032: LD_INT 3
31034: ST_TO_ADDR
31035: GO 31038
31037: POP
// if places then
31038: LD_VAR 0 3
31042: IFFALSE 31065
// result := UnitsInside ( building ) < places ;
31044: LD_ADDR_VAR 0 2
31048: PUSH
31049: LD_VAR 0 1
31053: PPUSH
31054: CALL_OW 313
31058: PUSH
31059: LD_VAR 0 3
31063: LESS
31064: ST_TO_ADDR
// end ;
31065: LD_VAR 0 2
31069: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
// tmp := [ ] ;
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: EMPTY
31082: ST_TO_ADDR
// list := [ ] ;
31083: LD_ADDR_VAR 0 5
31087: PUSH
31088: EMPTY
31089: ST_TO_ADDR
// for i = 16 to 25 do
31090: LD_ADDR_VAR 0 4
31094: PUSH
31095: DOUBLE
31096: LD_INT 16
31098: DEC
31099: ST_TO_ADDR
31100: LD_INT 25
31102: PUSH
31103: FOR_TO
31104: IFFALSE 31177
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_VAR 0 3
31115: PUSH
31116: LD_INT 22
31118: PUSH
31119: LD_VAR 0 1
31123: PPUSH
31124: CALL_OW 255
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 91
31135: PUSH
31136: LD_VAR 0 1
31140: PUSH
31141: LD_INT 6
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_VAR 0 4
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: PPUSH
31169: CALL_OW 69
31173: ADD
31174: ST_TO_ADDR
31175: GO 31103
31177: POP
31178: POP
// for i = 1 to tmp do
31179: LD_ADDR_VAR 0 4
31183: PUSH
31184: DOUBLE
31185: LD_INT 1
31187: DEC
31188: ST_TO_ADDR
31189: LD_VAR 0 3
31193: PUSH
31194: FOR_TO
31195: IFFALSE 31283
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31197: LD_ADDR_VAR 0 5
31201: PUSH
31202: LD_VAR 0 5
31206: PUSH
31207: LD_VAR 0 3
31211: PUSH
31212: LD_VAR 0 4
31216: ARRAY
31217: PPUSH
31218: CALL_OW 266
31222: PUSH
31223: LD_VAR 0 3
31227: PUSH
31228: LD_VAR 0 4
31232: ARRAY
31233: PPUSH
31234: CALL_OW 250
31238: PUSH
31239: LD_VAR 0 3
31243: PUSH
31244: LD_VAR 0 4
31248: ARRAY
31249: PPUSH
31250: CALL_OW 251
31254: PUSH
31255: LD_VAR 0 3
31259: PUSH
31260: LD_VAR 0 4
31264: ARRAY
31265: PPUSH
31266: CALL_OW 254
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: ADD
31280: ST_TO_ADDR
31281: GO 31194
31283: POP
31284: POP
// result := list ;
31285: LD_ADDR_VAR 0 2
31289: PUSH
31290: LD_VAR 0 5
31294: ST_TO_ADDR
// end ;
31295: LD_VAR 0 2
31299: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31300: LD_INT 0
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
// if not factory then
31309: LD_VAR 0 1
31313: NOT
31314: IFFALSE 31318
// exit ;
31316: GO 31911
// if control = control_apeman then
31318: LD_VAR 0 4
31322: PUSH
31323: LD_INT 5
31325: EQUAL
31326: IFFALSE 31435
// begin tmp := UnitsInside ( factory ) ;
31328: LD_ADDR_VAR 0 8
31332: PUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: CALL_OW 313
31342: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31343: LD_VAR 0 8
31347: PPUSH
31348: LD_INT 25
31350: PUSH
31351: LD_INT 12
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: CALL_OW 72
31362: NOT
31363: IFFALSE 31373
// control := control_manual ;
31365: LD_ADDR_VAR 0 4
31369: PUSH
31370: LD_INT 1
31372: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31373: LD_ADDR_VAR 0 8
31377: PUSH
31378: LD_VAR 0 1
31382: PPUSH
31383: CALL 31070 0 1
31387: ST_TO_ADDR
// if tmp then
31388: LD_VAR 0 8
31392: IFFALSE 31435
// begin for i in tmp do
31394: LD_ADDR_VAR 0 7
31398: PUSH
31399: LD_VAR 0 8
31403: PUSH
31404: FOR_IN
31405: IFFALSE 31433
// if i [ 1 ] = b_ext_radio then
31407: LD_VAR 0 7
31411: PUSH
31412: LD_INT 1
31414: ARRAY
31415: PUSH
31416: LD_INT 22
31418: EQUAL
31419: IFFALSE 31431
// begin control := control_remote ;
31421: LD_ADDR_VAR 0 4
31425: PUSH
31426: LD_INT 2
31428: ST_TO_ADDR
// break ;
31429: GO 31433
// end ;
31431: GO 31404
31433: POP
31434: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31435: LD_VAR 0 1
31439: PPUSH
31440: LD_VAR 0 2
31444: PPUSH
31445: LD_VAR 0 3
31449: PPUSH
31450: LD_VAR 0 4
31454: PPUSH
31455: LD_VAR 0 5
31459: PPUSH
31460: CALL_OW 448
31464: IFFALSE 31499
// begin result := [ chassis , engine , control , weapon ] ;
31466: LD_ADDR_VAR 0 6
31470: PUSH
31471: LD_VAR 0 2
31475: PUSH
31476: LD_VAR 0 3
31480: PUSH
31481: LD_VAR 0 4
31485: PUSH
31486: LD_VAR 0 5
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// exit ;
31497: GO 31911
// end ; _chassis := AvailableChassisList ( factory ) ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 475
31513: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31514: LD_ADDR_VAR 0 11
31518: PUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: CALL_OW 476
31528: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31529: LD_ADDR_VAR 0 12
31533: PUSH
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 477
31543: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31544: LD_ADDR_VAR 0 10
31548: PUSH
31549: LD_VAR 0 1
31553: PPUSH
31554: CALL_OW 478
31558: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31559: LD_VAR 0 9
31563: NOT
31564: PUSH
31565: LD_VAR 0 11
31569: NOT
31570: OR
31571: PUSH
31572: LD_VAR 0 12
31576: NOT
31577: OR
31578: PUSH
31579: LD_VAR 0 10
31583: NOT
31584: OR
31585: IFFALSE 31620
// begin result := [ chassis , engine , control , weapon ] ;
31587: LD_ADDR_VAR 0 6
31591: PUSH
31592: LD_VAR 0 2
31596: PUSH
31597: LD_VAR 0 3
31601: PUSH
31602: LD_VAR 0 4
31606: PUSH
31607: LD_VAR 0 5
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// exit ;
31618: GO 31911
// end ; if not chassis in _chassis then
31620: LD_VAR 0 2
31624: PUSH
31625: LD_VAR 0 9
31629: IN
31630: NOT
31631: IFFALSE 31657
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31633: LD_ADDR_VAR 0 2
31637: PUSH
31638: LD_VAR 0 9
31642: PUSH
31643: LD_INT 1
31645: PPUSH
31646: LD_VAR 0 9
31650: PPUSH
31651: CALL_OW 12
31655: ARRAY
31656: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31657: LD_VAR 0 2
31661: PPUSH
31662: LD_VAR 0 3
31666: PPUSH
31667: CALL 31916 0 2
31671: NOT
31672: IFFALSE 31731
// repeat engine := _engine [ 1 ] ;
31674: LD_ADDR_VAR 0 3
31678: PUSH
31679: LD_VAR 0 11
31683: PUSH
31684: LD_INT 1
31686: ARRAY
31687: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31688: LD_ADDR_VAR 0 11
31692: PUSH
31693: LD_VAR 0 11
31697: PPUSH
31698: LD_INT 1
31700: PPUSH
31701: CALL_OW 3
31705: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31706: LD_VAR 0 2
31710: PPUSH
31711: LD_VAR 0 3
31715: PPUSH
31716: CALL 31916 0 2
31720: PUSH
31721: LD_VAR 0 11
31725: PUSH
31726: EMPTY
31727: EQUAL
31728: OR
31729: IFFALSE 31674
// if not control in _control then
31731: LD_VAR 0 4
31735: PUSH
31736: LD_VAR 0 12
31740: IN
31741: NOT
31742: IFFALSE 31768
// control := _control [ rand ( 1 , _control ) ] ;
31744: LD_ADDR_VAR 0 4
31748: PUSH
31749: LD_VAR 0 12
31753: PUSH
31754: LD_INT 1
31756: PPUSH
31757: LD_VAR 0 12
31761: PPUSH
31762: CALL_OW 12
31766: ARRAY
31767: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31768: LD_VAR 0 2
31772: PPUSH
31773: LD_VAR 0 5
31777: PPUSH
31778: CALL 32136 0 2
31782: NOT
31783: IFFALSE 31842
// repeat weapon := _weapon [ 1 ] ;
31785: LD_ADDR_VAR 0 5
31789: PUSH
31790: LD_VAR 0 10
31794: PUSH
31795: LD_INT 1
31797: ARRAY
31798: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31799: LD_ADDR_VAR 0 10
31803: PUSH
31804: LD_VAR 0 10
31808: PPUSH
31809: LD_INT 1
31811: PPUSH
31812: CALL_OW 3
31816: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31817: LD_VAR 0 2
31821: PPUSH
31822: LD_VAR 0 5
31826: PPUSH
31827: CALL 32136 0 2
31831: PUSH
31832: LD_VAR 0 10
31836: PUSH
31837: EMPTY
31838: EQUAL
31839: OR
31840: IFFALSE 31785
// result := [ ] ;
31842: LD_ADDR_VAR 0 6
31846: PUSH
31847: EMPTY
31848: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31849: LD_VAR 0 1
31853: PPUSH
31854: LD_VAR 0 2
31858: PPUSH
31859: LD_VAR 0 3
31863: PPUSH
31864: LD_VAR 0 4
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL_OW 448
31878: IFFALSE 31911
// result := [ chassis , engine , control , weapon ] ;
31880: LD_ADDR_VAR 0 6
31884: PUSH
31885: LD_VAR 0 2
31889: PUSH
31890: LD_VAR 0 3
31894: PUSH
31895: LD_VAR 0 4
31899: PUSH
31900: LD_VAR 0 5
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: ST_TO_ADDR
// end ;
31911: LD_VAR 0 6
31915: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31916: LD_INT 0
31918: PPUSH
// if not chassis or not engine then
31919: LD_VAR 0 1
31923: NOT
31924: PUSH
31925: LD_VAR 0 2
31929: NOT
31930: OR
31931: IFFALSE 31935
// exit ;
31933: GO 32131
// case engine of engine_solar :
31935: LD_VAR 0 2
31939: PUSH
31940: LD_INT 2
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31986
31948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31949: LD_ADDR_VAR 0 3
31953: PUSH
31954: LD_INT 11
31956: PUSH
31957: LD_INT 12
31959: PUSH
31960: LD_INT 13
31962: PUSH
31963: LD_INT 14
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
31984: GO 32115
31986: LD_INT 1
31988: DOUBLE
31989: EQUAL
31990: IFTRUE 31994
31992: GO 32056
31994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: LD_INT 11
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: LD_INT 13
32008: PUSH
32009: LD_INT 14
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 3
32020: PUSH
32021: LD_INT 4
32023: PUSH
32024: LD_INT 5
32026: PUSH
32027: LD_INT 21
32029: PUSH
32030: LD_INT 23
32032: PUSH
32033: LD_INT 22
32035: PUSH
32036: LD_INT 24
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: ST_TO_ADDR
32054: GO 32115
32056: LD_INT 3
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32064
32062: GO 32114
32064: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: LD_INT 13
32072: PUSH
32073: LD_INT 14
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: LD_INT 4
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: LD_INT 21
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_INT 23
32096: PUSH
32097: LD_INT 24
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: ST_TO_ADDR
32112: GO 32115
32114: POP
// result := ( chassis in result ) ;
32115: LD_ADDR_VAR 0 3
32119: PUSH
32120: LD_VAR 0 1
32124: PUSH
32125: LD_VAR 0 3
32129: IN
32130: ST_TO_ADDR
// end ;
32131: LD_VAR 0 3
32135: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32136: LD_INT 0
32138: PPUSH
// if not chassis or not weapon then
32139: LD_VAR 0 1
32143: NOT
32144: PUSH
32145: LD_VAR 0 2
32149: NOT
32150: OR
32151: IFFALSE 32155
// exit ;
32153: GO 33215
// case weapon of us_machine_gun :
32155: LD_VAR 0 2
32159: PUSH
32160: LD_INT 2
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32198
32168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: LD_INT 5
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
32196: GO 33199
32198: LD_INT 3
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32206
32204: GO 32236
32206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: LD_INT 4
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
32234: GO 33199
32236: LD_INT 11
32238: DOUBLE
32239: EQUAL
32240: IFTRUE 32244
32242: GO 32274
32244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32245: LD_ADDR_VAR 0 3
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: ST_TO_ADDR
32272: GO 33199
32274: LD_INT 4
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32282
32280: GO 32308
32282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32283: LD_ADDR_VAR 0 3
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: LD_INT 4
32296: PUSH
32297: LD_INT 5
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: ST_TO_ADDR
32306: GO 33199
32308: LD_INT 5
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32342
32316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 3
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: LD_INT 5
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
32340: GO 33199
32342: LD_INT 9
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32376
32350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: LD_INT 4
32364: PUSH
32365: LD_INT 5
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 33199
32376: LD_INT 7
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32410
32384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 4
32398: PUSH
32399: LD_INT 5
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
32408: GO 33199
32410: LD_INT 12
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32444
32418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 5
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
32442: GO 33199
32444: LD_INT 13
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32478
32452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: LD_INT 4
32466: PUSH
32467: LD_INT 5
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 33199
32478: LD_INT 14
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32504
32486: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 4
32494: PUSH
32495: LD_INT 5
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: ST_TO_ADDR
32502: GO 33199
32504: LD_INT 6
32506: DOUBLE
32507: EQUAL
32508: IFTRUE 32512
32510: GO 32530
32512: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32513: LD_ADDR_VAR 0 3
32517: PUSH
32518: LD_INT 4
32520: PUSH
32521: LD_INT 5
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: ST_TO_ADDR
32528: GO 33199
32530: LD_INT 10
32532: DOUBLE
32533: EQUAL
32534: IFTRUE 32538
32536: GO 32556
32538: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_INT 4
32546: PUSH
32547: LD_INT 5
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: ST_TO_ADDR
32554: GO 33199
32556: LD_INT 22
32558: DOUBLE
32559: EQUAL
32560: IFTRUE 32564
32562: GO 32590
32564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32565: LD_ADDR_VAR 0 3
32569: PUSH
32570: LD_INT 11
32572: PUSH
32573: LD_INT 12
32575: PUSH
32576: LD_INT 13
32578: PUSH
32579: LD_INT 14
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: ST_TO_ADDR
32588: GO 33199
32590: LD_INT 23
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32624
32598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_INT 11
32606: PUSH
32607: LD_INT 12
32609: PUSH
32610: LD_INT 13
32612: PUSH
32613: LD_INT 14
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
32622: GO 33199
32624: LD_INT 24
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32658
32632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32633: LD_ADDR_VAR 0 3
32637: PUSH
32638: LD_INT 11
32640: PUSH
32641: LD_INT 12
32643: PUSH
32644: LD_INT 13
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 33199
32658: LD_INT 30
32660: DOUBLE
32661: EQUAL
32662: IFTRUE 32666
32664: GO 32692
32666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_INT 11
32674: PUSH
32675: LD_INT 12
32677: PUSH
32678: LD_INT 13
32680: PUSH
32681: LD_INT 14
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
32690: GO 33199
32692: LD_INT 25
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32700
32698: GO 32718
32700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32701: LD_ADDR_VAR 0 3
32705: PUSH
32706: LD_INT 13
32708: PUSH
32709: LD_INT 14
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: ST_TO_ADDR
32716: GO 33199
32718: LD_INT 27
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32744
32726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32727: LD_ADDR_VAR 0 3
32731: PUSH
32732: LD_INT 13
32734: PUSH
32735: LD_INT 14
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: ST_TO_ADDR
32742: GO 33199
32744: LD_INT 92
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32778
32752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32753: LD_ADDR_VAR 0 3
32757: PUSH
32758: LD_INT 11
32760: PUSH
32761: LD_INT 12
32763: PUSH
32764: LD_INT 13
32766: PUSH
32767: LD_INT 14
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: ST_TO_ADDR
32776: GO 33199
32778: LD_INT 28
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32804
32786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_INT 13
32794: PUSH
32795: LD_INT 14
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: ST_TO_ADDR
32802: GO 33199
32804: LD_INT 29
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32830
32812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32813: LD_ADDR_VAR 0 3
32817: PUSH
32818: LD_INT 13
32820: PUSH
32821: LD_INT 14
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: ST_TO_ADDR
32828: GO 33199
32830: LD_INT 31
32832: DOUBLE
32833: EQUAL
32834: IFTRUE 32838
32836: GO 32856
32838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_INT 13
32846: PUSH
32847: LD_INT 14
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: ST_TO_ADDR
32854: GO 33199
32856: LD_INT 26
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32882
32864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_INT 13
32872: PUSH
32873: LD_INT 14
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: ST_TO_ADDR
32880: GO 33199
32882: LD_INT 42
32884: DOUBLE
32885: EQUAL
32886: IFTRUE 32890
32888: GO 32916
32890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_INT 21
32898: PUSH
32899: LD_INT 22
32901: PUSH
32902: LD_INT 23
32904: PUSH
32905: LD_INT 24
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33199
32916: LD_INT 43
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32950
32924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 21
32932: PUSH
32933: LD_INT 22
32935: PUSH
32936: LD_INT 23
32938: PUSH
32939: LD_INT 24
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
32948: GO 33199
32950: LD_INT 44
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32984
32958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 21
32966: PUSH
32967: LD_INT 22
32969: PUSH
32970: LD_INT 23
32972: PUSH
32973: LD_INT 24
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 33199
32984: LD_INT 45
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 21
33000: PUSH
33001: LD_INT 22
33003: PUSH
33004: LD_INT 23
33006: PUSH
33007: LD_INT 24
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33199
33018: LD_INT 49
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33052
33026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 21
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_INT 23
33040: PUSH
33041: LD_INT 24
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
33050: GO 33199
33052: LD_INT 51
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33086
33060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_INT 23
33074: PUSH
33075: LD_INT 24
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
33084: GO 33199
33086: LD_INT 52
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33120
33094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_INT 21
33102: PUSH
33103: LD_INT 22
33105: PUSH
33106: LD_INT 23
33108: PUSH
33109: LD_INT 24
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
33118: GO 33199
33120: LD_INT 53
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33146
33128: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_INT 23
33136: PUSH
33137: LD_INT 24
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: ST_TO_ADDR
33144: GO 33199
33146: LD_INT 46
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33172
33154: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_INT 23
33162: PUSH
33163: LD_INT 24
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: ST_TO_ADDR
33170: GO 33199
33172: LD_INT 47
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33198
33180: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_INT 23
33188: PUSH
33189: LD_INT 24
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33199
33198: POP
// result := ( chassis in result ) ;
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: LD_VAR 0 1
33208: PUSH
33209: LD_VAR 0 3
33213: IN
33214: ST_TO_ADDR
// end ;
33215: LD_VAR 0 3
33219: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
33227: PPUSH
33228: PPUSH
// result := array ;
33229: LD_ADDR_VAR 0 5
33233: PUSH
33234: LD_VAR 0 1
33238: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33239: LD_VAR 0 1
33243: NOT
33244: PUSH
33245: LD_VAR 0 2
33249: NOT
33250: OR
33251: PUSH
33252: LD_VAR 0 3
33256: NOT
33257: OR
33258: PUSH
33259: LD_VAR 0 2
33263: PUSH
33264: LD_VAR 0 1
33268: GREATER
33269: OR
33270: PUSH
33271: LD_VAR 0 3
33275: PUSH
33276: LD_VAR 0 1
33280: GREATER
33281: OR
33282: IFFALSE 33286
// exit ;
33284: GO 33582
// if direction then
33286: LD_VAR 0 4
33290: IFFALSE 33354
// begin d := 1 ;
33292: LD_ADDR_VAR 0 9
33296: PUSH
33297: LD_INT 1
33299: ST_TO_ADDR
// if i_from > i_to then
33300: LD_VAR 0 2
33304: PUSH
33305: LD_VAR 0 3
33309: GREATER
33310: IFFALSE 33336
// length := ( array - i_from ) + i_to else
33312: LD_ADDR_VAR 0 11
33316: PUSH
33317: LD_VAR 0 1
33321: PUSH
33322: LD_VAR 0 2
33326: MINUS
33327: PUSH
33328: LD_VAR 0 3
33332: PLUS
33333: ST_TO_ADDR
33334: GO 33352
// length := i_to - i_from ;
33336: LD_ADDR_VAR 0 11
33340: PUSH
33341: LD_VAR 0 3
33345: PUSH
33346: LD_VAR 0 2
33350: MINUS
33351: ST_TO_ADDR
// end else
33352: GO 33415
// begin d := - 1 ;
33354: LD_ADDR_VAR 0 9
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: ST_TO_ADDR
// if i_from > i_to then
33363: LD_VAR 0 2
33367: PUSH
33368: LD_VAR 0 3
33372: GREATER
33373: IFFALSE 33393
// length := i_from - i_to else
33375: LD_ADDR_VAR 0 11
33379: PUSH
33380: LD_VAR 0 2
33384: PUSH
33385: LD_VAR 0 3
33389: MINUS
33390: ST_TO_ADDR
33391: GO 33415
// length := ( array - i_to ) + i_from ;
33393: LD_ADDR_VAR 0 11
33397: PUSH
33398: LD_VAR 0 1
33402: PUSH
33403: LD_VAR 0 3
33407: MINUS
33408: PUSH
33409: LD_VAR 0 2
33413: PLUS
33414: ST_TO_ADDR
// end ; if not length then
33415: LD_VAR 0 11
33419: NOT
33420: IFFALSE 33424
// exit ;
33422: GO 33582
// tmp := array ;
33424: LD_ADDR_VAR 0 10
33428: PUSH
33429: LD_VAR 0 1
33433: ST_TO_ADDR
// for i = 1 to length do
33434: LD_ADDR_VAR 0 6
33438: PUSH
33439: DOUBLE
33440: LD_INT 1
33442: DEC
33443: ST_TO_ADDR
33444: LD_VAR 0 11
33448: PUSH
33449: FOR_TO
33450: IFFALSE 33570
// begin for j = 1 to array do
33452: LD_ADDR_VAR 0 7
33456: PUSH
33457: DOUBLE
33458: LD_INT 1
33460: DEC
33461: ST_TO_ADDR
33462: LD_VAR 0 1
33466: PUSH
33467: FOR_TO
33468: IFFALSE 33556
// begin k := j + d ;
33470: LD_ADDR_VAR 0 8
33474: PUSH
33475: LD_VAR 0 7
33479: PUSH
33480: LD_VAR 0 9
33484: PLUS
33485: ST_TO_ADDR
// if k > array then
33486: LD_VAR 0 8
33490: PUSH
33491: LD_VAR 0 1
33495: GREATER
33496: IFFALSE 33506
// k := 1 ;
33498: LD_ADDR_VAR 0 8
33502: PUSH
33503: LD_INT 1
33505: ST_TO_ADDR
// if not k then
33506: LD_VAR 0 8
33510: NOT
33511: IFFALSE 33523
// k := array ;
33513: LD_ADDR_VAR 0 8
33517: PUSH
33518: LD_VAR 0 1
33522: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33523: LD_ADDR_VAR 0 10
33527: PUSH
33528: LD_VAR 0 10
33532: PPUSH
33533: LD_VAR 0 8
33537: PPUSH
33538: LD_VAR 0 1
33542: PUSH
33543: LD_VAR 0 7
33547: ARRAY
33548: PPUSH
33549: CALL_OW 1
33553: ST_TO_ADDR
// end ;
33554: GO 33467
33556: POP
33557: POP
// array := tmp ;
33558: LD_ADDR_VAR 0 1
33562: PUSH
33563: LD_VAR 0 10
33567: ST_TO_ADDR
// end ;
33568: GO 33449
33570: POP
33571: POP
// result := array ;
33572: LD_ADDR_VAR 0 5
33576: PUSH
33577: LD_VAR 0 1
33581: ST_TO_ADDR
// end ;
33582: LD_VAR 0 5
33586: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33587: LD_INT 0
33589: PPUSH
33590: PPUSH
// result := 0 ;
33591: LD_ADDR_VAR 0 3
33595: PUSH
33596: LD_INT 0
33598: ST_TO_ADDR
// if not array or not value in array then
33599: LD_VAR 0 1
33603: NOT
33604: PUSH
33605: LD_VAR 0 2
33609: PUSH
33610: LD_VAR 0 1
33614: IN
33615: NOT
33616: OR
33617: IFFALSE 33621
// exit ;
33619: GO 33675
// for i = 1 to array do
33621: LD_ADDR_VAR 0 4
33625: PUSH
33626: DOUBLE
33627: LD_INT 1
33629: DEC
33630: ST_TO_ADDR
33631: LD_VAR 0 1
33635: PUSH
33636: FOR_TO
33637: IFFALSE 33673
// if value = array [ i ] then
33639: LD_VAR 0 2
33643: PUSH
33644: LD_VAR 0 1
33648: PUSH
33649: LD_VAR 0 4
33653: ARRAY
33654: EQUAL
33655: IFFALSE 33671
// begin result := i ;
33657: LD_ADDR_VAR 0 3
33661: PUSH
33662: LD_VAR 0 4
33666: ST_TO_ADDR
// exit ;
33667: POP
33668: POP
33669: GO 33675
// end ;
33671: GO 33636
33673: POP
33674: POP
// end ;
33675: LD_VAR 0 3
33679: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33680: LD_INT 0
33682: PPUSH
// vc_chassis := chassis ;
33683: LD_ADDR_OWVAR 37
33687: PUSH
33688: LD_VAR 0 1
33692: ST_TO_ADDR
// vc_engine := engine ;
33693: LD_ADDR_OWVAR 39
33697: PUSH
33698: LD_VAR 0 2
33702: ST_TO_ADDR
// vc_control := control ;
33703: LD_ADDR_OWVAR 38
33707: PUSH
33708: LD_VAR 0 3
33712: ST_TO_ADDR
// vc_weapon := weapon ;
33713: LD_ADDR_OWVAR 40
33717: PUSH
33718: LD_VAR 0 4
33722: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33723: LD_ADDR_OWVAR 41
33727: PUSH
33728: LD_VAR 0 5
33732: ST_TO_ADDR
// end ;
33733: LD_VAR 0 6
33737: RET
// export function WantPlant ( unit ) ; var task ; begin
33738: LD_INT 0
33740: PPUSH
33741: PPUSH
// result := false ;
33742: LD_ADDR_VAR 0 2
33746: PUSH
33747: LD_INT 0
33749: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 437
33764: ST_TO_ADDR
// if task then
33765: LD_VAR 0 3
33769: IFFALSE 33797
// if task [ 1 ] [ 1 ] = p then
33771: LD_VAR 0 3
33775: PUSH
33776: LD_INT 1
33778: ARRAY
33779: PUSH
33780: LD_INT 1
33782: ARRAY
33783: PUSH
33784: LD_STRING p
33786: EQUAL
33787: IFFALSE 33797
// result := true ;
33789: LD_ADDR_VAR 0 2
33793: PUSH
33794: LD_INT 1
33796: ST_TO_ADDR
// end ;
33797: LD_VAR 0 2
33801: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33802: LD_INT 0
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
// if pos < 1 then
33808: LD_VAR 0 2
33812: PUSH
33813: LD_INT 1
33815: LESS
33816: IFFALSE 33820
// exit ;
33818: GO 34123
// if pos = 1 then
33820: LD_VAR 0 2
33824: PUSH
33825: LD_INT 1
33827: EQUAL
33828: IFFALSE 33861
// result := Replace ( arr , pos [ 1 ] , value ) else
33830: LD_ADDR_VAR 0 4
33834: PUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: LD_VAR 0 2
33844: PUSH
33845: LD_INT 1
33847: ARRAY
33848: PPUSH
33849: LD_VAR 0 3
33853: PPUSH
33854: CALL_OW 1
33858: ST_TO_ADDR
33859: GO 34123
// begin tmp := arr ;
33861: LD_ADDR_VAR 0 6
33865: PUSH
33866: LD_VAR 0 1
33870: ST_TO_ADDR
// s_arr := [ tmp ] ;
33871: LD_ADDR_VAR 0 7
33875: PUSH
33876: LD_VAR 0 6
33880: PUSH
33881: EMPTY
33882: LIST
33883: ST_TO_ADDR
// for i = 1 to pos - 1 do
33884: LD_ADDR_VAR 0 5
33888: PUSH
33889: DOUBLE
33890: LD_INT 1
33892: DEC
33893: ST_TO_ADDR
33894: LD_VAR 0 2
33898: PUSH
33899: LD_INT 1
33901: MINUS
33902: PUSH
33903: FOR_TO
33904: IFFALSE 33949
// begin tmp := tmp [ pos [ i ] ] ;
33906: LD_ADDR_VAR 0 6
33910: PUSH
33911: LD_VAR 0 6
33915: PUSH
33916: LD_VAR 0 2
33920: PUSH
33921: LD_VAR 0 5
33925: ARRAY
33926: ARRAY
33927: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33928: LD_ADDR_VAR 0 7
33932: PUSH
33933: LD_VAR 0 7
33937: PUSH
33938: LD_VAR 0 6
33942: PUSH
33943: EMPTY
33944: LIST
33945: ADD
33946: ST_TO_ADDR
// end ;
33947: GO 33903
33949: POP
33950: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33951: LD_ADDR_VAR 0 6
33955: PUSH
33956: LD_VAR 0 6
33960: PPUSH
33961: LD_VAR 0 2
33965: PUSH
33966: LD_VAR 0 2
33970: ARRAY
33971: PPUSH
33972: LD_VAR 0 3
33976: PPUSH
33977: CALL_OW 1
33981: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33982: LD_ADDR_VAR 0 7
33986: PUSH
33987: LD_VAR 0 7
33991: PPUSH
33992: LD_VAR 0 7
33996: PPUSH
33997: LD_VAR 0 6
34001: PPUSH
34002: CALL_OW 1
34006: ST_TO_ADDR
// for i = s_arr downto 2 do
34007: LD_ADDR_VAR 0 5
34011: PUSH
34012: DOUBLE
34013: LD_VAR 0 7
34017: INC
34018: ST_TO_ADDR
34019: LD_INT 2
34021: PUSH
34022: FOR_DOWNTO
34023: IFFALSE 34107
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34025: LD_ADDR_VAR 0 6
34029: PUSH
34030: LD_VAR 0 7
34034: PUSH
34035: LD_VAR 0 5
34039: PUSH
34040: LD_INT 1
34042: MINUS
34043: ARRAY
34044: PPUSH
34045: LD_VAR 0 2
34049: PUSH
34050: LD_VAR 0 5
34054: PUSH
34055: LD_INT 1
34057: MINUS
34058: ARRAY
34059: PPUSH
34060: LD_VAR 0 7
34064: PUSH
34065: LD_VAR 0 5
34069: ARRAY
34070: PPUSH
34071: CALL_OW 1
34075: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34076: LD_ADDR_VAR 0 7
34080: PUSH
34081: LD_VAR 0 7
34085: PPUSH
34086: LD_VAR 0 5
34090: PUSH
34091: LD_INT 1
34093: MINUS
34094: PPUSH
34095: LD_VAR 0 6
34099: PPUSH
34100: CALL_OW 1
34104: ST_TO_ADDR
// end ;
34105: GO 34022
34107: POP
34108: POP
// result := s_arr [ 1 ] ;
34109: LD_ADDR_VAR 0 4
34113: PUSH
34114: LD_VAR 0 7
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: ST_TO_ADDR
// end ; end ;
34123: LD_VAR 0 4
34127: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34128: LD_INT 0
34130: PPUSH
34131: PPUSH
// if not list then
34132: LD_VAR 0 1
34136: NOT
34137: IFFALSE 34141
// exit ;
34139: GO 34232
// i := list [ pos1 ] ;
34141: LD_ADDR_VAR 0 5
34145: PUSH
34146: LD_VAR 0 1
34150: PUSH
34151: LD_VAR 0 2
34155: ARRAY
34156: ST_TO_ADDR
// if not i then
34157: LD_VAR 0 5
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34232
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34166: LD_ADDR_VAR 0 1
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: LD_VAR 0 2
34180: PPUSH
34181: LD_VAR 0 1
34185: PUSH
34186: LD_VAR 0 3
34190: ARRAY
34191: PPUSH
34192: CALL_OW 1
34196: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34197: LD_ADDR_VAR 0 1
34201: PUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: LD_VAR 0 3
34211: PPUSH
34212: LD_VAR 0 5
34216: PPUSH
34217: CALL_OW 1
34221: ST_TO_ADDR
// result := list ;
34222: LD_ADDR_VAR 0 4
34226: PUSH
34227: LD_VAR 0 1
34231: ST_TO_ADDR
// end ;
34232: LD_VAR 0 4
34236: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34237: LD_INT 0
34239: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34240: LD_ADDR_VAR 0 5
34244: PUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 250
34254: PPUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 251
34264: PPUSH
34265: LD_VAR 0 2
34269: PPUSH
34270: LD_VAR 0 3
34274: PPUSH
34275: LD_VAR 0 4
34279: PPUSH
34280: CALL 34290 0 5
34284: ST_TO_ADDR
// end ;
34285: LD_VAR 0 5
34289: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34290: LD_INT 0
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
// if not list then
34296: LD_VAR 0 3
34300: NOT
34301: IFFALSE 34305
// exit ;
34303: GO 34693
// result := [ ] ;
34305: LD_ADDR_VAR 0 6
34309: PUSH
34310: EMPTY
34311: ST_TO_ADDR
// for i in list do
34312: LD_ADDR_VAR 0 7
34316: PUSH
34317: LD_VAR 0 3
34321: PUSH
34322: FOR_IN
34323: IFFALSE 34525
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34325: LD_ADDR_VAR 0 9
34329: PUSH
34330: LD_VAR 0 7
34334: PPUSH
34335: LD_VAR 0 1
34339: PPUSH
34340: LD_VAR 0 2
34344: PPUSH
34345: CALL_OW 297
34349: ST_TO_ADDR
// if not result then
34350: LD_VAR 0 6
34354: NOT
34355: IFFALSE 34381
// result := [ [ i , tmp ] ] else
34357: LD_ADDR_VAR 0 6
34361: PUSH
34362: LD_VAR 0 7
34366: PUSH
34367: LD_VAR 0 9
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: EMPTY
34377: LIST
34378: ST_TO_ADDR
34379: GO 34523
// begin if result [ result ] [ 2 ] < tmp then
34381: LD_VAR 0 6
34385: PUSH
34386: LD_VAR 0 6
34390: ARRAY
34391: PUSH
34392: LD_INT 2
34394: ARRAY
34395: PUSH
34396: LD_VAR 0 9
34400: LESS
34401: IFFALSE 34443
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34403: LD_ADDR_VAR 0 6
34407: PUSH
34408: LD_VAR 0 6
34412: PPUSH
34413: LD_VAR 0 6
34417: PUSH
34418: LD_INT 1
34420: PLUS
34421: PPUSH
34422: LD_VAR 0 7
34426: PUSH
34427: LD_VAR 0 9
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PPUSH
34436: CALL_OW 2
34440: ST_TO_ADDR
34441: GO 34523
// for j = 1 to result do
34443: LD_ADDR_VAR 0 8
34447: PUSH
34448: DOUBLE
34449: LD_INT 1
34451: DEC
34452: ST_TO_ADDR
34453: LD_VAR 0 6
34457: PUSH
34458: FOR_TO
34459: IFFALSE 34521
// begin if tmp < result [ j ] [ 2 ] then
34461: LD_VAR 0 9
34465: PUSH
34466: LD_VAR 0 6
34470: PUSH
34471: LD_VAR 0 8
34475: ARRAY
34476: PUSH
34477: LD_INT 2
34479: ARRAY
34480: LESS
34481: IFFALSE 34519
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34483: LD_ADDR_VAR 0 6
34487: PUSH
34488: LD_VAR 0 6
34492: PPUSH
34493: LD_VAR 0 8
34497: PPUSH
34498: LD_VAR 0 7
34502: PUSH
34503: LD_VAR 0 9
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PPUSH
34512: CALL_OW 2
34516: ST_TO_ADDR
// break ;
34517: GO 34521
// end ; end ;
34519: GO 34458
34521: POP
34522: POP
// end ; end ;
34523: GO 34322
34525: POP
34526: POP
// if result and not asc then
34527: LD_VAR 0 6
34531: PUSH
34532: LD_VAR 0 4
34536: NOT
34537: AND
34538: IFFALSE 34613
// begin tmp := result ;
34540: LD_ADDR_VAR 0 9
34544: PUSH
34545: LD_VAR 0 6
34549: ST_TO_ADDR
// for i = tmp downto 1 do
34550: LD_ADDR_VAR 0 7
34554: PUSH
34555: DOUBLE
34556: LD_VAR 0 9
34560: INC
34561: ST_TO_ADDR
34562: LD_INT 1
34564: PUSH
34565: FOR_DOWNTO
34566: IFFALSE 34611
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34568: LD_ADDR_VAR 0 6
34572: PUSH
34573: LD_VAR 0 6
34577: PPUSH
34578: LD_VAR 0 9
34582: PUSH
34583: LD_VAR 0 7
34587: MINUS
34588: PUSH
34589: LD_INT 1
34591: PLUS
34592: PPUSH
34593: LD_VAR 0 9
34597: PUSH
34598: LD_VAR 0 7
34602: ARRAY
34603: PPUSH
34604: CALL_OW 1
34608: ST_TO_ADDR
34609: GO 34565
34611: POP
34612: POP
// end ; tmp := [ ] ;
34613: LD_ADDR_VAR 0 9
34617: PUSH
34618: EMPTY
34619: ST_TO_ADDR
// if mode then
34620: LD_VAR 0 5
34624: IFFALSE 34693
// begin for i = 1 to result do
34626: LD_ADDR_VAR 0 7
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_VAR 0 6
34640: PUSH
34641: FOR_TO
34642: IFFALSE 34681
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34644: LD_ADDR_VAR 0 9
34648: PUSH
34649: LD_VAR 0 9
34653: PPUSH
34654: LD_VAR 0 7
34658: PPUSH
34659: LD_VAR 0 6
34663: PUSH
34664: LD_VAR 0 7
34668: ARRAY
34669: PUSH
34670: LD_INT 1
34672: ARRAY
34673: PPUSH
34674: CALL_OW 1
34678: ST_TO_ADDR
34679: GO 34641
34681: POP
34682: POP
// result := tmp ;
34683: LD_ADDR_VAR 0 6
34687: PUSH
34688: LD_VAR 0 9
34692: ST_TO_ADDR
// end ; end ;
34693: LD_VAR 0 6
34697: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34706: LD_ADDR_VAR 0 5
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// if not x or not y then
34728: LD_VAR 0 2
34732: NOT
34733: PUSH
34734: LD_VAR 0 3
34738: NOT
34739: OR
34740: IFFALSE 34744
// exit ;
34742: GO 36394
// if not range then
34744: LD_VAR 0 4
34748: NOT
34749: IFFALSE 34759
// range := 10 ;
34751: LD_ADDR_VAR 0 4
34755: PUSH
34756: LD_INT 10
34758: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34759: LD_ADDR_VAR 0 8
34763: PUSH
34764: LD_INT 81
34766: PUSH
34767: LD_VAR 0 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 92
34778: PUSH
34779: LD_VAR 0 2
34783: PUSH
34784: LD_VAR 0 3
34788: PUSH
34789: LD_VAR 0 4
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 21
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: PPUSH
34822: CALL_OW 69
34826: ST_TO_ADDR
// if not tmp then
34827: LD_VAR 0 8
34831: NOT
34832: IFFALSE 34836
// exit ;
34834: GO 36394
// for i in tmp do
34836: LD_ADDR_VAR 0 6
34840: PUSH
34841: LD_VAR 0 8
34845: PUSH
34846: FOR_IN
34847: IFFALSE 36369
// begin points := [ 0 , 0 , 0 ] ;
34849: LD_ADDR_VAR 0 9
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: ST_TO_ADDR
// bpoints := 1 ;
34868: LD_ADDR_VAR 0 10
34872: PUSH
34873: LD_INT 1
34875: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34876: LD_VAR 0 6
34880: PPUSH
34881: CALL_OW 247
34885: PUSH
34886: LD_INT 1
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 35472
34894: POP
// begin if GetClass ( i ) = 1 then
34895: LD_VAR 0 6
34899: PPUSH
34900: CALL_OW 257
34904: PUSH
34905: LD_INT 1
34907: EQUAL
34908: IFFALSE 34929
// points := [ 10 , 5 , 3 ] ;
34910: LD_ADDR_VAR 0 9
34914: PUSH
34915: LD_INT 10
34917: PUSH
34918: LD_INT 5
34920: PUSH
34921: LD_INT 3
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34929: LD_VAR 0 6
34933: PPUSH
34934: CALL_OW 257
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 3
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: IN
34953: IFFALSE 34974
// points := [ 3 , 2 , 1 ] ;
34955: LD_ADDR_VAR 0 9
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34974: LD_VAR 0 6
34978: PPUSH
34979: CALL_OW 257
34983: PUSH
34984: LD_INT 5
34986: EQUAL
34987: IFFALSE 35008
// points := [ 130 , 5 , 2 ] ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_INT 130
34996: PUSH
34997: LD_INT 5
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35008: LD_VAR 0 6
35012: PPUSH
35013: CALL_OW 257
35017: PUSH
35018: LD_INT 8
35020: EQUAL
35021: IFFALSE 35042
// points := [ 35 , 35 , 30 ] ;
35023: LD_ADDR_VAR 0 9
35027: PUSH
35028: LD_INT 35
35030: PUSH
35031: LD_INT 35
35033: PUSH
35034: LD_INT 30
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35042: LD_VAR 0 6
35046: PPUSH
35047: CALL_OW 257
35051: PUSH
35052: LD_INT 9
35054: EQUAL
35055: IFFALSE 35076
// points := [ 20 , 55 , 40 ] ;
35057: LD_ADDR_VAR 0 9
35061: PUSH
35062: LD_INT 20
35064: PUSH
35065: LD_INT 55
35067: PUSH
35068: LD_INT 40
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35076: LD_VAR 0 6
35080: PPUSH
35081: CALL_OW 257
35085: PUSH
35086: LD_INT 12
35088: PUSH
35089: LD_INT 16
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: IN
35096: IFFALSE 35117
// points := [ 5 , 3 , 2 ] ;
35098: LD_ADDR_VAR 0 9
35102: PUSH
35103: LD_INT 5
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35117: LD_VAR 0 6
35121: PPUSH
35122: CALL_OW 257
35126: PUSH
35127: LD_INT 17
35129: EQUAL
35130: IFFALSE 35151
// points := [ 100 , 50 , 75 ] ;
35132: LD_ADDR_VAR 0 9
35136: PUSH
35137: LD_INT 100
35139: PUSH
35140: LD_INT 50
35142: PUSH
35143: LD_INT 75
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35151: LD_VAR 0 6
35155: PPUSH
35156: CALL_OW 257
35160: PUSH
35161: LD_INT 15
35163: EQUAL
35164: IFFALSE 35185
// points := [ 10 , 5 , 3 ] ;
35166: LD_ADDR_VAR 0 9
35170: PUSH
35171: LD_INT 10
35173: PUSH
35174: LD_INT 5
35176: PUSH
35177: LD_INT 3
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35185: LD_VAR 0 6
35189: PPUSH
35190: CALL_OW 257
35194: PUSH
35195: LD_INT 14
35197: EQUAL
35198: IFFALSE 35219
// points := [ 10 , 0 , 0 ] ;
35200: LD_ADDR_VAR 0 9
35204: PUSH
35205: LD_INT 10
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35219: LD_VAR 0 6
35223: PPUSH
35224: CALL_OW 257
35228: PUSH
35229: LD_INT 11
35231: EQUAL
35232: IFFALSE 35253
// points := [ 30 , 10 , 5 ] ;
35234: LD_ADDR_VAR 0 9
35238: PUSH
35239: LD_INT 30
35241: PUSH
35242: LD_INT 10
35244: PUSH
35245: LD_INT 5
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35253: LD_VAR 0 1
35257: PPUSH
35258: LD_INT 5
35260: PPUSH
35261: CALL_OW 321
35265: PUSH
35266: LD_INT 2
35268: EQUAL
35269: IFFALSE 35286
// bpoints := bpoints * 1.8 ;
35271: LD_ADDR_VAR 0 10
35275: PUSH
35276: LD_VAR 0 10
35280: PUSH
35281: LD_REAL  1.80000000000000E+0000
35284: MUL
35285: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35286: LD_VAR 0 6
35290: PPUSH
35291: CALL_OW 257
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: LD_INT 3
35304: PUSH
35305: LD_INT 4
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: IN
35314: PUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: LD_INT 51
35322: PPUSH
35323: CALL_OW 321
35327: PUSH
35328: LD_INT 2
35330: EQUAL
35331: AND
35332: IFFALSE 35349
// bpoints := bpoints * 1.2 ;
35334: LD_ADDR_VAR 0 10
35338: PUSH
35339: LD_VAR 0 10
35343: PUSH
35344: LD_REAL  1.20000000000000E+0000
35347: MUL
35348: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35349: LD_VAR 0 6
35353: PPUSH
35354: CALL_OW 257
35358: PUSH
35359: LD_INT 5
35361: PUSH
35362: LD_INT 7
35364: PUSH
35365: LD_INT 9
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: IN
35373: PUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: LD_INT 52
35381: PPUSH
35382: CALL_OW 321
35386: PUSH
35387: LD_INT 2
35389: EQUAL
35390: AND
35391: IFFALSE 35408
// bpoints := bpoints * 1.5 ;
35393: LD_ADDR_VAR 0 10
35397: PUSH
35398: LD_VAR 0 10
35402: PUSH
35403: LD_REAL  1.50000000000000E+0000
35406: MUL
35407: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35408: LD_VAR 0 1
35412: PPUSH
35413: LD_INT 66
35415: PPUSH
35416: CALL_OW 321
35420: PUSH
35421: LD_INT 2
35423: EQUAL
35424: IFFALSE 35441
// bpoints := bpoints * 1.1 ;
35426: LD_ADDR_VAR 0 10
35430: PUSH
35431: LD_VAR 0 10
35435: PUSH
35436: LD_REAL  1.10000000000000E+0000
35439: MUL
35440: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35441: LD_ADDR_VAR 0 10
35445: PUSH
35446: LD_VAR 0 10
35450: PUSH
35451: LD_VAR 0 6
35455: PPUSH
35456: LD_INT 1
35458: PPUSH
35459: CALL_OW 259
35463: PUSH
35464: LD_REAL  1.15000000000000E+0000
35467: MUL
35468: MUL
35469: ST_TO_ADDR
// end ; unit_vehicle :
35470: GO 36298
35472: LD_INT 2
35474: DOUBLE
35475: EQUAL
35476: IFTRUE 35480
35478: GO 36286
35480: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35481: LD_VAR 0 6
35485: PPUSH
35486: CALL_OW 264
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 42
35496: PUSH
35497: LD_INT 24
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: IN
35505: IFFALSE 35526
// points := [ 25 , 5 , 3 ] ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_INT 25
35514: PUSH
35515: LD_INT 5
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35526: LD_VAR 0 6
35530: PPUSH
35531: CALL_OW 264
35535: PUSH
35536: LD_INT 4
35538: PUSH
35539: LD_INT 43
35541: PUSH
35542: LD_INT 25
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: IN
35550: IFFALSE 35571
// points := [ 40 , 15 , 5 ] ;
35552: LD_ADDR_VAR 0 9
35556: PUSH
35557: LD_INT 40
35559: PUSH
35560: LD_INT 15
35562: PUSH
35563: LD_INT 5
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35571: LD_VAR 0 6
35575: PPUSH
35576: CALL_OW 264
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: LD_INT 23
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: IN
35591: IFFALSE 35612
// points := [ 7 , 25 , 8 ] ;
35593: LD_ADDR_VAR 0 9
35597: PUSH
35598: LD_INT 7
35600: PUSH
35601: LD_INT 25
35603: PUSH
35604: LD_INT 8
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35612: LD_VAR 0 6
35616: PPUSH
35617: CALL_OW 264
35621: PUSH
35622: LD_INT 5
35624: PUSH
35625: LD_INT 27
35627: PUSH
35628: LD_INT 44
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: IN
35636: IFFALSE 35657
// points := [ 14 , 50 , 16 ] ;
35638: LD_ADDR_VAR 0 9
35642: PUSH
35643: LD_INT 14
35645: PUSH
35646: LD_INT 50
35648: PUSH
35649: LD_INT 16
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35657: LD_VAR 0 6
35661: PPUSH
35662: CALL_OW 264
35666: PUSH
35667: LD_INT 6
35669: PUSH
35670: LD_INT 46
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: IN
35677: IFFALSE 35698
// points := [ 32 , 120 , 70 ] ;
35679: LD_ADDR_VAR 0 9
35683: PUSH
35684: LD_INT 32
35686: PUSH
35687: LD_INT 120
35689: PUSH
35690: LD_INT 70
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35698: LD_VAR 0 6
35702: PPUSH
35703: CALL_OW 264
35707: PUSH
35708: LD_INT 7
35710: PUSH
35711: LD_INT 28
35713: PUSH
35714: LD_INT 45
35716: PUSH
35717: LD_INT 92
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: IN
35726: IFFALSE 35747
// points := [ 35 , 20 , 45 ] ;
35728: LD_ADDR_VAR 0 9
35732: PUSH
35733: LD_INT 35
35735: PUSH
35736: LD_INT 20
35738: PUSH
35739: LD_INT 45
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35747: LD_VAR 0 6
35751: PPUSH
35752: CALL_OW 264
35756: PUSH
35757: LD_INT 47
35759: PUSH
35760: EMPTY
35761: LIST
35762: IN
35763: IFFALSE 35784
// points := [ 67 , 45 , 75 ] ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_INT 67
35772: PUSH
35773: LD_INT 45
35775: PUSH
35776: LD_INT 75
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35784: LD_VAR 0 6
35788: PPUSH
35789: CALL_OW 264
35793: PUSH
35794: LD_INT 26
35796: PUSH
35797: EMPTY
35798: LIST
35799: IN
35800: IFFALSE 35821
// points := [ 120 , 30 , 80 ] ;
35802: LD_ADDR_VAR 0 9
35806: PUSH
35807: LD_INT 120
35809: PUSH
35810: LD_INT 30
35812: PUSH
35813: LD_INT 80
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35821: LD_VAR 0 6
35825: PPUSH
35826: CALL_OW 264
35830: PUSH
35831: LD_INT 22
35833: PUSH
35834: EMPTY
35835: LIST
35836: IN
35837: IFFALSE 35858
// points := [ 40 , 1 , 1 ] ;
35839: LD_ADDR_VAR 0 9
35843: PUSH
35844: LD_INT 40
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35858: LD_VAR 0 6
35862: PPUSH
35863: CALL_OW 264
35867: PUSH
35868: LD_INT 29
35870: PUSH
35871: EMPTY
35872: LIST
35873: IN
35874: IFFALSE 35895
// points := [ 70 , 200 , 400 ] ;
35876: LD_ADDR_VAR 0 9
35880: PUSH
35881: LD_INT 70
35883: PUSH
35884: LD_INT 200
35886: PUSH
35887: LD_INT 400
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35895: LD_VAR 0 6
35899: PPUSH
35900: CALL_OW 264
35904: PUSH
35905: LD_INT 14
35907: PUSH
35908: LD_INT 53
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: IN
35915: IFFALSE 35936
// points := [ 40 , 10 , 20 ] ;
35917: LD_ADDR_VAR 0 9
35921: PUSH
35922: LD_INT 40
35924: PUSH
35925: LD_INT 10
35927: PUSH
35928: LD_INT 20
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35936: LD_VAR 0 6
35940: PPUSH
35941: CALL_OW 264
35945: PUSH
35946: LD_INT 9
35948: PUSH
35949: EMPTY
35950: LIST
35951: IN
35952: IFFALSE 35973
// points := [ 5 , 70 , 20 ] ;
35954: LD_ADDR_VAR 0 9
35958: PUSH
35959: LD_INT 5
35961: PUSH
35962: LD_INT 70
35964: PUSH
35965: LD_INT 20
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL_OW 264
35982: PUSH
35983: LD_INT 10
35985: PUSH
35986: EMPTY
35987: LIST
35988: IN
35989: IFFALSE 36010
// points := [ 35 , 110 , 70 ] ;
35991: LD_ADDR_VAR 0 9
35995: PUSH
35996: LD_INT 35
35998: PUSH
35999: LD_INT 110
36001: PUSH
36002: LD_INT 70
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36010: LD_VAR 0 6
36014: PPUSH
36015: CALL_OW 265
36019: PUSH
36020: LD_INT 25
36022: EQUAL
36023: IFFALSE 36044
// points := [ 80 , 65 , 100 ] ;
36025: LD_ADDR_VAR 0 9
36029: PUSH
36030: LD_INT 80
36032: PUSH
36033: LD_INT 65
36035: PUSH
36036: LD_INT 100
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36044: LD_VAR 0 6
36048: PPUSH
36049: CALL_OW 263
36053: PUSH
36054: LD_INT 1
36056: EQUAL
36057: IFFALSE 36092
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36059: LD_ADDR_VAR 0 10
36063: PUSH
36064: LD_VAR 0 10
36068: PUSH
36069: LD_VAR 0 6
36073: PPUSH
36074: CALL_OW 311
36078: PPUSH
36079: LD_INT 3
36081: PPUSH
36082: CALL_OW 259
36086: PUSH
36087: LD_INT 4
36089: MUL
36090: MUL
36091: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 263
36101: PUSH
36102: LD_INT 2
36104: EQUAL
36105: IFFALSE 36156
// begin j := IsControledBy ( i ) ;
36107: LD_ADDR_VAR 0 7
36111: PUSH
36112: LD_VAR 0 6
36116: PPUSH
36117: CALL_OW 312
36121: ST_TO_ADDR
// if j then
36122: LD_VAR 0 7
36126: IFFALSE 36156
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36128: LD_ADDR_VAR 0 10
36132: PUSH
36133: LD_VAR 0 10
36137: PUSH
36138: LD_VAR 0 7
36142: PPUSH
36143: LD_INT 3
36145: PPUSH
36146: CALL_OW 259
36150: PUSH
36151: LD_INT 3
36153: MUL
36154: MUL
36155: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36156: LD_VAR 0 6
36160: PPUSH
36161: CALL_OW 264
36165: PUSH
36166: LD_INT 5
36168: PUSH
36169: LD_INT 6
36171: PUSH
36172: LD_INT 46
36174: PUSH
36175: LD_INT 44
36177: PUSH
36178: LD_INT 47
36180: PUSH
36181: LD_INT 45
36183: PUSH
36184: LD_INT 28
36186: PUSH
36187: LD_INT 7
36189: PUSH
36190: LD_INT 27
36192: PUSH
36193: LD_INT 29
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: IN
36208: PUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: LD_INT 52
36216: PPUSH
36217: CALL_OW 321
36221: PUSH
36222: LD_INT 2
36224: EQUAL
36225: AND
36226: IFFALSE 36243
// bpoints := bpoints * 1.2 ;
36228: LD_ADDR_VAR 0 10
36232: PUSH
36233: LD_VAR 0 10
36237: PUSH
36238: LD_REAL  1.20000000000000E+0000
36241: MUL
36242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36243: LD_VAR 0 6
36247: PPUSH
36248: CALL_OW 264
36252: PUSH
36253: LD_INT 6
36255: PUSH
36256: LD_INT 46
36258: PUSH
36259: LD_INT 47
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: IN
36267: IFFALSE 36284
// bpoints := bpoints * 1.2 ;
36269: LD_ADDR_VAR 0 10
36273: PUSH
36274: LD_VAR 0 10
36278: PUSH
36279: LD_REAL  1.20000000000000E+0000
36282: MUL
36283: ST_TO_ADDR
// end ; unit_building :
36284: GO 36298
36286: LD_INT 3
36288: DOUBLE
36289: EQUAL
36290: IFTRUE 36294
36292: GO 36297
36294: POP
// ; end ;
36295: GO 36298
36297: POP
// for j = 1 to 3 do
36298: LD_ADDR_VAR 0 7
36302: PUSH
36303: DOUBLE
36304: LD_INT 1
36306: DEC
36307: ST_TO_ADDR
36308: LD_INT 3
36310: PUSH
36311: FOR_TO
36312: IFFALSE 36365
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_VAR 0 5
36323: PPUSH
36324: LD_VAR 0 7
36328: PPUSH
36329: LD_VAR 0 5
36333: PUSH
36334: LD_VAR 0 7
36338: ARRAY
36339: PUSH
36340: LD_VAR 0 9
36344: PUSH
36345: LD_VAR 0 7
36349: ARRAY
36350: PUSH
36351: LD_VAR 0 10
36355: MUL
36356: PLUS
36357: PPUSH
36358: CALL_OW 1
36362: ST_TO_ADDR
36363: GO 36311
36365: POP
36366: POP
// end ;
36367: GO 34846
36369: POP
36370: POP
// result := Replace ( result , 4 , tmp ) ;
36371: LD_ADDR_VAR 0 5
36375: PUSH
36376: LD_VAR 0 5
36380: PPUSH
36381: LD_INT 4
36383: PPUSH
36384: LD_VAR 0 8
36388: PPUSH
36389: CALL_OW 1
36393: ST_TO_ADDR
// end ;
36394: LD_VAR 0 5
36398: RET
// export function DangerAtRange ( unit , range ) ; begin
36399: LD_INT 0
36401: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36402: LD_ADDR_VAR 0 3
36406: PUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 255
36416: PPUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 250
36426: PPUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 251
36436: PPUSH
36437: LD_VAR 0 2
36441: PPUSH
36442: CALL 34698 0 4
36446: ST_TO_ADDR
// end ;
36447: LD_VAR 0 3
36451: RET
// export function DangerInArea ( side , area ) ; begin
36452: LD_INT 0
36454: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36455: LD_ADDR_VAR 0 3
36459: PUSH
36460: LD_VAR 0 2
36464: PPUSH
36465: LD_INT 81
36467: PUSH
36468: LD_VAR 0 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PPUSH
36477: CALL_OW 70
36481: ST_TO_ADDR
// end ;
36482: LD_VAR 0 3
36486: RET
// export function IsExtension ( b ) ; begin
36487: LD_INT 0
36489: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36490: LD_ADDR_VAR 0 2
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 23
36502: PUSH
36503: LD_INT 20
36505: PUSH
36506: LD_INT 22
36508: PUSH
36509: LD_INT 17
36511: PUSH
36512: LD_INT 24
36514: PUSH
36515: LD_INT 21
36517: PUSH
36518: LD_INT 19
36520: PUSH
36521: LD_INT 16
36523: PUSH
36524: LD_INT 25
36526: PUSH
36527: LD_INT 18
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: IN
36542: ST_TO_ADDR
// end ;
36543: LD_VAR 0 2
36547: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36548: LD_INT 0
36550: PPUSH
36551: PPUSH
36552: PPUSH
// result := [ ] ;
36553: LD_ADDR_VAR 0 4
36557: PUSH
36558: EMPTY
36559: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36560: LD_ADDR_VAR 0 5
36564: PUSH
36565: LD_VAR 0 2
36569: PPUSH
36570: LD_INT 21
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PPUSH
36580: CALL_OW 70
36584: ST_TO_ADDR
// if not tmp then
36585: LD_VAR 0 5
36589: NOT
36590: IFFALSE 36594
// exit ;
36592: GO 36658
// if checkLink then
36594: LD_VAR 0 3
36598: IFFALSE 36648
// begin for i in tmp do
36600: LD_ADDR_VAR 0 6
36604: PUSH
36605: LD_VAR 0 5
36609: PUSH
36610: FOR_IN
36611: IFFALSE 36646
// if GetBase ( i ) <> base then
36613: LD_VAR 0 6
36617: PPUSH
36618: CALL_OW 274
36622: PUSH
36623: LD_VAR 0 1
36627: NONEQUAL
36628: IFFALSE 36644
// ComLinkToBase ( base , i ) ;
36630: LD_VAR 0 1
36634: PPUSH
36635: LD_VAR 0 6
36639: PPUSH
36640: CALL_OW 169
36644: GO 36610
36646: POP
36647: POP
// end ; result := tmp ;
36648: LD_ADDR_VAR 0 4
36652: PUSH
36653: LD_VAR 0 5
36657: ST_TO_ADDR
// end ;
36658: LD_VAR 0 4
36662: RET
// export function ComComplete ( units , b ) ; var i ; begin
36663: LD_INT 0
36665: PPUSH
36666: PPUSH
// if not units then
36667: LD_VAR 0 1
36671: NOT
36672: IFFALSE 36676
// exit ;
36674: GO 36766
// for i in units do
36676: LD_ADDR_VAR 0 4
36680: PUSH
36681: LD_VAR 0 1
36685: PUSH
36686: FOR_IN
36687: IFFALSE 36764
// if BuildingStatus ( b ) = bs_build then
36689: LD_VAR 0 2
36693: PPUSH
36694: CALL_OW 461
36698: PUSH
36699: LD_INT 1
36701: EQUAL
36702: IFFALSE 36762
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36704: LD_VAR 0 4
36708: PPUSH
36709: LD_STRING h
36711: PUSH
36712: LD_VAR 0 2
36716: PPUSH
36717: CALL_OW 250
36721: PUSH
36722: LD_VAR 0 2
36726: PPUSH
36727: CALL_OW 251
36731: PUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: PPUSH
36758: CALL_OW 446
36762: GO 36686
36764: POP
36765: POP
// end ;
36766: LD_VAR 0 3
36770: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36771: LD_INT 0
36773: PPUSH
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36779: LD_VAR 0 1
36783: NOT
36784: PUSH
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 263
36794: PUSH
36795: LD_INT 2
36797: NONEQUAL
36798: OR
36799: IFFALSE 36803
// exit ;
36801: GO 37119
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36803: LD_ADDR_VAR 0 6
36807: PUSH
36808: LD_INT 22
36810: PUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 255
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 30
36830: PUSH
36831: LD_INT 36
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 34
36840: PUSH
36841: LD_INT 31
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PPUSH
36857: CALL_OW 69
36861: ST_TO_ADDR
// if not tmp then
36862: LD_VAR 0 6
36866: NOT
36867: IFFALSE 36871
// exit ;
36869: GO 37119
// result := [ ] ;
36871: LD_ADDR_VAR 0 2
36875: PUSH
36876: EMPTY
36877: ST_TO_ADDR
// for i in tmp do
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_VAR 0 6
36887: PUSH
36888: FOR_IN
36889: IFFALSE 36960
// begin t := UnitsInside ( i ) ;
36891: LD_ADDR_VAR 0 4
36895: PUSH
36896: LD_VAR 0 3
36900: PPUSH
36901: CALL_OW 313
36905: ST_TO_ADDR
// if t then
36906: LD_VAR 0 4
36910: IFFALSE 36958
// for j in t do
36912: LD_ADDR_VAR 0 7
36916: PUSH
36917: LD_VAR 0 4
36921: PUSH
36922: FOR_IN
36923: IFFALSE 36956
// result := Replace ( result , result + 1 , j ) ;
36925: LD_ADDR_VAR 0 2
36929: PUSH
36930: LD_VAR 0 2
36934: PPUSH
36935: LD_VAR 0 2
36939: PUSH
36940: LD_INT 1
36942: PLUS
36943: PPUSH
36944: LD_VAR 0 7
36948: PPUSH
36949: CALL_OW 1
36953: ST_TO_ADDR
36954: GO 36922
36956: POP
36957: POP
// end ;
36958: GO 36888
36960: POP
36961: POP
// if not result then
36962: LD_VAR 0 2
36966: NOT
36967: IFFALSE 36971
// exit ;
36969: GO 37119
// mech := result [ 1 ] ;
36971: LD_ADDR_VAR 0 5
36975: PUSH
36976: LD_VAR 0 2
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: ST_TO_ADDR
// if result > 1 then
36985: LD_VAR 0 2
36989: PUSH
36990: LD_INT 1
36992: GREATER
36993: IFFALSE 37105
// begin for i = 2 to result do
36995: LD_ADDR_VAR 0 3
36999: PUSH
37000: DOUBLE
37001: LD_INT 2
37003: DEC
37004: ST_TO_ADDR
37005: LD_VAR 0 2
37009: PUSH
37010: FOR_TO
37011: IFFALSE 37103
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37013: LD_ADDR_VAR 0 4
37017: PUSH
37018: LD_VAR 0 2
37022: PUSH
37023: LD_VAR 0 3
37027: ARRAY
37028: PPUSH
37029: LD_INT 3
37031: PPUSH
37032: CALL_OW 259
37036: PUSH
37037: LD_VAR 0 2
37041: PUSH
37042: LD_VAR 0 3
37046: ARRAY
37047: PPUSH
37048: CALL_OW 432
37052: MINUS
37053: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37054: LD_VAR 0 4
37058: PUSH
37059: LD_VAR 0 5
37063: PPUSH
37064: LD_INT 3
37066: PPUSH
37067: CALL_OW 259
37071: PUSH
37072: LD_VAR 0 5
37076: PPUSH
37077: CALL_OW 432
37081: MINUS
37082: GREATEREQUAL
37083: IFFALSE 37101
// mech := result [ i ] ;
37085: LD_ADDR_VAR 0 5
37089: PUSH
37090: LD_VAR 0 2
37094: PUSH
37095: LD_VAR 0 3
37099: ARRAY
37100: ST_TO_ADDR
// end ;
37101: GO 37010
37103: POP
37104: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37105: LD_VAR 0 1
37109: PPUSH
37110: LD_VAR 0 5
37114: PPUSH
37115: CALL_OW 135
// end ;
37119: LD_VAR 0 2
37123: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37124: LD_INT 0
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
// result := [ ] ;
37139: LD_ADDR_VAR 0 7
37143: PUSH
37144: EMPTY
37145: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 266
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: IN
37166: NOT
37167: IFFALSE 37171
// exit ;
37169: GO 38805
// if name then
37171: LD_VAR 0 3
37175: IFFALSE 37191
// SetBName ( base_dep , name ) ;
37177: LD_VAR 0 1
37181: PPUSH
37182: LD_VAR 0 3
37186: PPUSH
37187: CALL_OW 500
// base := GetBase ( base_dep ) ;
37191: LD_ADDR_VAR 0 15
37195: PUSH
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL_OW 274
37205: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37206: LD_ADDR_VAR 0 16
37210: PUSH
37211: LD_VAR 0 1
37215: PPUSH
37216: CALL_OW 255
37220: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37221: LD_ADDR_VAR 0 17
37225: PUSH
37226: LD_VAR 0 1
37230: PPUSH
37231: CALL_OW 248
37235: ST_TO_ADDR
// if sources then
37236: LD_VAR 0 5
37240: IFFALSE 37287
// for i = 1 to 3 do
37242: LD_ADDR_VAR 0 8
37246: PUSH
37247: DOUBLE
37248: LD_INT 1
37250: DEC
37251: ST_TO_ADDR
37252: LD_INT 3
37254: PUSH
37255: FOR_TO
37256: IFFALSE 37285
// AddResourceType ( base , i , sources [ i ] ) ;
37258: LD_VAR 0 15
37262: PPUSH
37263: LD_VAR 0 8
37267: PPUSH
37268: LD_VAR 0 5
37272: PUSH
37273: LD_VAR 0 8
37277: ARRAY
37278: PPUSH
37279: CALL_OW 276
37283: GO 37255
37285: POP
37286: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37287: LD_ADDR_VAR 0 18
37291: PUSH
37292: LD_VAR 0 15
37296: PPUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: LD_INT 1
37304: PPUSH
37305: CALL 36548 0 3
37309: ST_TO_ADDR
// InitHc ;
37310: CALL_OW 19
// InitUc ;
37314: CALL_OW 18
// uc_side := side ;
37318: LD_ADDR_OWVAR 20
37322: PUSH
37323: LD_VAR 0 16
37327: ST_TO_ADDR
// uc_nation := nation ;
37328: LD_ADDR_OWVAR 21
37332: PUSH
37333: LD_VAR 0 17
37337: ST_TO_ADDR
// if buildings then
37338: LD_VAR 0 18
37342: IFFALSE 38664
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37344: LD_ADDR_VAR 0 19
37348: PUSH
37349: LD_VAR 0 18
37353: PPUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 30
37359: PUSH
37360: LD_INT 29
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 30
37369: PUSH
37370: LD_INT 30
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: PPUSH
37382: CALL_OW 72
37386: ST_TO_ADDR
// if tmp then
37387: LD_VAR 0 19
37391: IFFALSE 37439
// for i in tmp do
37393: LD_ADDR_VAR 0 8
37397: PUSH
37398: LD_VAR 0 19
37402: PUSH
37403: FOR_IN
37404: IFFALSE 37437
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37406: LD_VAR 0 8
37410: PPUSH
37411: CALL_OW 250
37415: PPUSH
37416: LD_VAR 0 8
37420: PPUSH
37421: CALL_OW 251
37425: PPUSH
37426: LD_VAR 0 16
37430: PPUSH
37431: CALL_OW 441
37435: GO 37403
37437: POP
37438: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37439: LD_VAR 0 18
37443: PPUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 30
37449: PUSH
37450: LD_INT 32
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 30
37459: PUSH
37460: LD_INT 33
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: PPUSH
37472: CALL_OW 72
37476: IFFALSE 37564
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37478: LD_ADDR_VAR 0 8
37482: PUSH
37483: LD_VAR 0 18
37487: PPUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 30
37493: PUSH
37494: LD_INT 32
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 30
37503: PUSH
37504: LD_INT 33
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: PPUSH
37516: CALL_OW 72
37520: PUSH
37521: FOR_IN
37522: IFFALSE 37562
// begin if not GetBWeapon ( i ) then
37524: LD_VAR 0 8
37528: PPUSH
37529: CALL_OW 269
37533: NOT
37534: IFFALSE 37560
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37536: LD_VAR 0 8
37540: PPUSH
37541: LD_VAR 0 8
37545: PPUSH
37546: LD_VAR 0 2
37550: PPUSH
37551: CALL 38810 0 2
37555: PPUSH
37556: CALL_OW 431
// end ;
37560: GO 37521
37562: POP
37563: POP
// end ; for i = 1 to personel do
37564: LD_ADDR_VAR 0 8
37568: PUSH
37569: DOUBLE
37570: LD_INT 1
37572: DEC
37573: ST_TO_ADDR
37574: LD_VAR 0 6
37578: PUSH
37579: FOR_TO
37580: IFFALSE 38644
// begin if i > 4 then
37582: LD_VAR 0 8
37586: PUSH
37587: LD_INT 4
37589: GREATER
37590: IFFALSE 37594
// break ;
37592: GO 38644
// case i of 1 :
37594: LD_VAR 0 8
37598: PUSH
37599: LD_INT 1
37601: DOUBLE
37602: EQUAL
37603: IFTRUE 37607
37605: GO 37687
37607: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37608: LD_ADDR_VAR 0 12
37612: PUSH
37613: LD_VAR 0 18
37617: PPUSH
37618: LD_INT 22
37620: PUSH
37621: LD_VAR 0 16
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 58
37632: PUSH
37633: EMPTY
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 30
37641: PUSH
37642: LD_INT 32
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 30
37651: PUSH
37652: LD_INT 4
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 30
37661: PUSH
37662: LD_INT 5
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: PPUSH
37680: CALL_OW 72
37684: ST_TO_ADDR
37685: GO 37909
37687: LD_INT 2
37689: DOUBLE
37690: EQUAL
37691: IFTRUE 37695
37693: GO 37757
37695: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37696: LD_ADDR_VAR 0 12
37700: PUSH
37701: LD_VAR 0 18
37705: PPUSH
37706: LD_INT 22
37708: PUSH
37709: LD_VAR 0 16
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 30
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PPUSH
37750: CALL_OW 72
37754: ST_TO_ADDR
37755: GO 37909
37757: LD_INT 3
37759: DOUBLE
37760: EQUAL
37761: IFTRUE 37765
37763: GO 37827
37765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37766: LD_ADDR_VAR 0 12
37770: PUSH
37771: LD_VAR 0 18
37775: PPUSH
37776: LD_INT 22
37778: PUSH
37779: LD_VAR 0 16
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: LD_INT 30
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 30
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PPUSH
37820: CALL_OW 72
37824: ST_TO_ADDR
37825: GO 37909
37827: LD_INT 4
37829: DOUBLE
37830: EQUAL
37831: IFTRUE 37835
37833: GO 37908
37835: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37836: LD_ADDR_VAR 0 12
37840: PUSH
37841: LD_VAR 0 18
37845: PPUSH
37846: LD_INT 22
37848: PUSH
37849: LD_VAR 0 16
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: LD_INT 30
37863: PUSH
37864: LD_INT 6
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 30
37873: PUSH
37874: LD_INT 7
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 30
37883: PUSH
37884: LD_INT 8
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PPUSH
37901: CALL_OW 72
37905: ST_TO_ADDR
37906: GO 37909
37908: POP
// if i = 1 then
37909: LD_VAR 0 8
37913: PUSH
37914: LD_INT 1
37916: EQUAL
37917: IFFALSE 38028
// begin tmp := [ ] ;
37919: LD_ADDR_VAR 0 19
37923: PUSH
37924: EMPTY
37925: ST_TO_ADDR
// for j in f do
37926: LD_ADDR_VAR 0 9
37930: PUSH
37931: LD_VAR 0 12
37935: PUSH
37936: FOR_IN
37937: IFFALSE 38010
// if GetBType ( j ) = b_bunker then
37939: LD_VAR 0 9
37943: PPUSH
37944: CALL_OW 266
37948: PUSH
37949: LD_INT 32
37951: EQUAL
37952: IFFALSE 37979
// tmp := Insert ( tmp , 1 , j ) else
37954: LD_ADDR_VAR 0 19
37958: PUSH
37959: LD_VAR 0 19
37963: PPUSH
37964: LD_INT 1
37966: PPUSH
37967: LD_VAR 0 9
37971: PPUSH
37972: CALL_OW 2
37976: ST_TO_ADDR
37977: GO 38008
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37979: LD_ADDR_VAR 0 19
37983: PUSH
37984: LD_VAR 0 19
37988: PPUSH
37989: LD_VAR 0 19
37993: PUSH
37994: LD_INT 1
37996: PLUS
37997: PPUSH
37998: LD_VAR 0 9
38002: PPUSH
38003: CALL_OW 2
38007: ST_TO_ADDR
38008: GO 37936
38010: POP
38011: POP
// if tmp then
38012: LD_VAR 0 19
38016: IFFALSE 38028
// f := tmp ;
38018: LD_ADDR_VAR 0 12
38022: PUSH
38023: LD_VAR 0 19
38027: ST_TO_ADDR
// end ; x := personel [ i ] ;
38028: LD_ADDR_VAR 0 13
38032: PUSH
38033: LD_VAR 0 6
38037: PUSH
38038: LD_VAR 0 8
38042: ARRAY
38043: ST_TO_ADDR
// if x = - 1 then
38044: LD_VAR 0 13
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: EQUAL
38053: IFFALSE 38262
// begin for j in f do
38055: LD_ADDR_VAR 0 9
38059: PUSH
38060: LD_VAR 0 12
38064: PUSH
38065: FOR_IN
38066: IFFALSE 38258
// repeat InitHc ;
38068: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38072: LD_VAR 0 9
38076: PPUSH
38077: CALL_OW 266
38081: PUSH
38082: LD_INT 5
38084: EQUAL
38085: IFFALSE 38155
// begin if UnitsInside ( j ) < 3 then
38087: LD_VAR 0 9
38091: PPUSH
38092: CALL_OW 313
38096: PUSH
38097: LD_INT 3
38099: LESS
38100: IFFALSE 38136
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38102: LD_INT 0
38104: PPUSH
38105: LD_INT 5
38107: PUSH
38108: LD_INT 8
38110: PUSH
38111: LD_INT 9
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: PUSH
38119: LD_VAR 0 17
38123: ARRAY
38124: PPUSH
38125: LD_VAR 0 4
38129: PPUSH
38130: CALL_OW 380
38134: GO 38153
// PrepareHuman ( false , i , skill ) ;
38136: LD_INT 0
38138: PPUSH
38139: LD_VAR 0 8
38143: PPUSH
38144: LD_VAR 0 4
38148: PPUSH
38149: CALL_OW 380
// end else
38153: GO 38172
// PrepareHuman ( false , i , skill ) ;
38155: LD_INT 0
38157: PPUSH
38158: LD_VAR 0 8
38162: PPUSH
38163: LD_VAR 0 4
38167: PPUSH
38168: CALL_OW 380
// un := CreateHuman ;
38172: LD_ADDR_VAR 0 14
38176: PUSH
38177: CALL_OW 44
38181: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38182: LD_ADDR_VAR 0 7
38186: PUSH
38187: LD_VAR 0 7
38191: PPUSH
38192: LD_INT 1
38194: PPUSH
38195: LD_VAR 0 14
38199: PPUSH
38200: CALL_OW 2
38204: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38205: LD_VAR 0 14
38209: PPUSH
38210: LD_VAR 0 9
38214: PPUSH
38215: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38219: LD_VAR 0 9
38223: PPUSH
38224: CALL_OW 313
38228: PUSH
38229: LD_INT 6
38231: EQUAL
38232: PUSH
38233: LD_VAR 0 9
38237: PPUSH
38238: CALL_OW 266
38242: PUSH
38243: LD_INT 32
38245: PUSH
38246: LD_INT 31
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: IN
38253: OR
38254: IFFALSE 38068
38256: GO 38065
38258: POP
38259: POP
// end else
38260: GO 38642
// for j = 1 to x do
38262: LD_ADDR_VAR 0 9
38266: PUSH
38267: DOUBLE
38268: LD_INT 1
38270: DEC
38271: ST_TO_ADDR
38272: LD_VAR 0 13
38276: PUSH
38277: FOR_TO
38278: IFFALSE 38640
// begin InitHc ;
38280: CALL_OW 19
// if not f then
38284: LD_VAR 0 12
38288: NOT
38289: IFFALSE 38378
// begin PrepareHuman ( false , i , skill ) ;
38291: LD_INT 0
38293: PPUSH
38294: LD_VAR 0 8
38298: PPUSH
38299: LD_VAR 0 4
38303: PPUSH
38304: CALL_OW 380
// un := CreateHuman ;
38308: LD_ADDR_VAR 0 14
38312: PUSH
38313: CALL_OW 44
38317: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38318: LD_ADDR_VAR 0 7
38322: PUSH
38323: LD_VAR 0 7
38327: PPUSH
38328: LD_INT 1
38330: PPUSH
38331: LD_VAR 0 14
38335: PPUSH
38336: CALL_OW 2
38340: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38341: LD_VAR 0 14
38345: PPUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: CALL_OW 250
38355: PPUSH
38356: LD_VAR 0 1
38360: PPUSH
38361: CALL_OW 251
38365: PPUSH
38366: LD_INT 10
38368: PPUSH
38369: LD_INT 0
38371: PPUSH
38372: CALL_OW 50
// continue ;
38376: GO 38277
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38378: LD_VAR 0 12
38382: PUSH
38383: LD_INT 1
38385: ARRAY
38386: PPUSH
38387: CALL_OW 313
38391: PUSH
38392: LD_VAR 0 12
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: CALL_OW 266
38405: PUSH
38406: LD_INT 32
38408: PUSH
38409: LD_INT 31
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: IN
38416: AND
38417: PUSH
38418: LD_VAR 0 12
38422: PUSH
38423: LD_INT 1
38425: ARRAY
38426: PPUSH
38427: CALL_OW 313
38431: PUSH
38432: LD_INT 6
38434: EQUAL
38435: OR
38436: IFFALSE 38456
// f := Delete ( f , 1 ) ;
38438: LD_ADDR_VAR 0 12
38442: PUSH
38443: LD_VAR 0 12
38447: PPUSH
38448: LD_INT 1
38450: PPUSH
38451: CALL_OW 3
38455: ST_TO_ADDR
// if not f then
38456: LD_VAR 0 12
38460: NOT
38461: IFFALSE 38479
// begin x := x + 2 ;
38463: LD_ADDR_VAR 0 13
38467: PUSH
38468: LD_VAR 0 13
38472: PUSH
38473: LD_INT 2
38475: PLUS
38476: ST_TO_ADDR
// continue ;
38477: GO 38277
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38479: LD_VAR 0 12
38483: PUSH
38484: LD_INT 1
38486: ARRAY
38487: PPUSH
38488: CALL_OW 266
38492: PUSH
38493: LD_INT 5
38495: EQUAL
38496: IFFALSE 38570
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38498: LD_VAR 0 12
38502: PUSH
38503: LD_INT 1
38505: ARRAY
38506: PPUSH
38507: CALL_OW 313
38511: PUSH
38512: LD_INT 3
38514: LESS
38515: IFFALSE 38551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38517: LD_INT 0
38519: PPUSH
38520: LD_INT 5
38522: PUSH
38523: LD_INT 8
38525: PUSH
38526: LD_INT 9
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: PUSH
38534: LD_VAR 0 17
38538: ARRAY
38539: PPUSH
38540: LD_VAR 0 4
38544: PPUSH
38545: CALL_OW 380
38549: GO 38568
// PrepareHuman ( false , i , skill ) ;
38551: LD_INT 0
38553: PPUSH
38554: LD_VAR 0 8
38558: PPUSH
38559: LD_VAR 0 4
38563: PPUSH
38564: CALL_OW 380
// end else
38568: GO 38587
// PrepareHuman ( false , i , skill ) ;
38570: LD_INT 0
38572: PPUSH
38573: LD_VAR 0 8
38577: PPUSH
38578: LD_VAR 0 4
38582: PPUSH
38583: CALL_OW 380
// un := CreateHuman ;
38587: LD_ADDR_VAR 0 14
38591: PUSH
38592: CALL_OW 44
38596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38597: LD_ADDR_VAR 0 7
38601: PUSH
38602: LD_VAR 0 7
38606: PPUSH
38607: LD_INT 1
38609: PPUSH
38610: LD_VAR 0 14
38614: PPUSH
38615: CALL_OW 2
38619: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38620: LD_VAR 0 14
38624: PPUSH
38625: LD_VAR 0 12
38629: PUSH
38630: LD_INT 1
38632: ARRAY
38633: PPUSH
38634: CALL_OW 52
// end ;
38638: GO 38277
38640: POP
38641: POP
// end ;
38642: GO 37579
38644: POP
38645: POP
// result := result ^ buildings ;
38646: LD_ADDR_VAR 0 7
38650: PUSH
38651: LD_VAR 0 7
38655: PUSH
38656: LD_VAR 0 18
38660: ADD
38661: ST_TO_ADDR
// end else
38662: GO 38805
// begin for i = 1 to personel do
38664: LD_ADDR_VAR 0 8
38668: PUSH
38669: DOUBLE
38670: LD_INT 1
38672: DEC
38673: ST_TO_ADDR
38674: LD_VAR 0 6
38678: PUSH
38679: FOR_TO
38680: IFFALSE 38803
// begin if i > 4 then
38682: LD_VAR 0 8
38686: PUSH
38687: LD_INT 4
38689: GREATER
38690: IFFALSE 38694
// break ;
38692: GO 38803
// x := personel [ i ] ;
38694: LD_ADDR_VAR 0 13
38698: PUSH
38699: LD_VAR 0 6
38703: PUSH
38704: LD_VAR 0 8
38708: ARRAY
38709: ST_TO_ADDR
// if x = - 1 then
38710: LD_VAR 0 13
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: EQUAL
38719: IFFALSE 38723
// continue ;
38721: GO 38679
// PrepareHuman ( false , i , skill ) ;
38723: LD_INT 0
38725: PPUSH
38726: LD_VAR 0 8
38730: PPUSH
38731: LD_VAR 0 4
38735: PPUSH
38736: CALL_OW 380
// un := CreateHuman ;
38740: LD_ADDR_VAR 0 14
38744: PUSH
38745: CALL_OW 44
38749: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38750: LD_VAR 0 14
38754: PPUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 250
38764: PPUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 251
38774: PPUSH
38775: LD_INT 10
38777: PPUSH
38778: LD_INT 0
38780: PPUSH
38781: CALL_OW 50
// result := result ^ un ;
38785: LD_ADDR_VAR 0 7
38789: PUSH
38790: LD_VAR 0 7
38794: PUSH
38795: LD_VAR 0 14
38799: ADD
38800: ST_TO_ADDR
// end ;
38801: GO 38679
38803: POP
38804: POP
// end ; end ;
38805: LD_VAR 0 7
38809: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38810: LD_INT 0
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
// result := false ;
38828: LD_ADDR_VAR 0 3
38832: PUSH
38833: LD_INT 0
38835: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38836: LD_VAR 0 1
38840: NOT
38841: PUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 266
38851: PUSH
38852: LD_INT 32
38854: PUSH
38855: LD_INT 33
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: IN
38862: NOT
38863: OR
38864: IFFALSE 38868
// exit ;
38866: GO 39977
// nat := GetNation ( tower ) ;
38868: LD_ADDR_VAR 0 12
38872: PUSH
38873: LD_VAR 0 1
38877: PPUSH
38878: CALL_OW 248
38882: ST_TO_ADDR
// side := GetSide ( tower ) ;
38883: LD_ADDR_VAR 0 16
38887: PUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: CALL_OW 255
38897: ST_TO_ADDR
// x := GetX ( tower ) ;
38898: LD_ADDR_VAR 0 10
38902: PUSH
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 250
38912: ST_TO_ADDR
// y := GetY ( tower ) ;
38913: LD_ADDR_VAR 0 11
38917: PUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 251
38927: ST_TO_ADDR
// if not x or not y then
38928: LD_VAR 0 10
38932: NOT
38933: PUSH
38934: LD_VAR 0 11
38938: NOT
38939: OR
38940: IFFALSE 38944
// exit ;
38942: GO 39977
// weapon := 0 ;
38944: LD_ADDR_VAR 0 18
38948: PUSH
38949: LD_INT 0
38951: ST_TO_ADDR
// fac_list := [ ] ;
38952: LD_ADDR_VAR 0 17
38956: PUSH
38957: EMPTY
38958: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38959: LD_ADDR_VAR 0 6
38963: PUSH
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 274
38973: PPUSH
38974: LD_VAR 0 2
38978: PPUSH
38979: LD_INT 0
38981: PPUSH
38982: CALL 36548 0 3
38986: PPUSH
38987: LD_INT 30
38989: PUSH
38990: LD_INT 3
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PPUSH
38997: CALL_OW 72
39001: ST_TO_ADDR
// if not factories then
39002: LD_VAR 0 6
39006: NOT
39007: IFFALSE 39011
// exit ;
39009: GO 39977
// for i in factories do
39011: LD_ADDR_VAR 0 8
39015: PUSH
39016: LD_VAR 0 6
39020: PUSH
39021: FOR_IN
39022: IFFALSE 39047
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39024: LD_ADDR_VAR 0 17
39028: PUSH
39029: LD_VAR 0 17
39033: PUSH
39034: LD_VAR 0 8
39038: PPUSH
39039: CALL_OW 478
39043: UNION
39044: ST_TO_ADDR
39045: GO 39021
39047: POP
39048: POP
// if not fac_list then
39049: LD_VAR 0 17
39053: NOT
39054: IFFALSE 39058
// exit ;
39056: GO 39977
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: LD_INT 5
39068: PUSH
39069: LD_INT 9
39071: PUSH
39072: LD_INT 10
39074: PUSH
39075: LD_INT 6
39077: PUSH
39078: LD_INT 7
39080: PUSH
39081: LD_INT 11
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 27
39095: PUSH
39096: LD_INT 28
39098: PUSH
39099: LD_INT 26
39101: PUSH
39102: LD_INT 30
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 43
39113: PUSH
39114: LD_INT 44
39116: PUSH
39117: LD_INT 46
39119: PUSH
39120: LD_INT 45
39122: PUSH
39123: LD_INT 47
39125: PUSH
39126: LD_INT 49
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: PUSH
39142: LD_VAR 0 12
39146: ARRAY
39147: ST_TO_ADDR
// list := list isect fac_list ;
39148: LD_ADDR_VAR 0 5
39152: PUSH
39153: LD_VAR 0 5
39157: PUSH
39158: LD_VAR 0 17
39162: ISECT
39163: ST_TO_ADDR
// if not list then
39164: LD_VAR 0 5
39168: NOT
39169: IFFALSE 39173
// exit ;
39171: GO 39977
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39173: LD_VAR 0 12
39177: PUSH
39178: LD_INT 3
39180: EQUAL
39181: PUSH
39182: LD_INT 49
39184: PUSH
39185: LD_VAR 0 5
39189: IN
39190: AND
39191: PUSH
39192: LD_INT 31
39194: PPUSH
39195: LD_VAR 0 16
39199: PPUSH
39200: CALL_OW 321
39204: PUSH
39205: LD_INT 2
39207: EQUAL
39208: AND
39209: IFFALSE 39269
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39211: LD_INT 22
39213: PUSH
39214: LD_VAR 0 16
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 35
39225: PUSH
39226: LD_INT 49
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 91
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: LD_INT 10
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: PPUSH
39254: CALL_OW 69
39258: NOT
39259: IFFALSE 39269
// weapon := ru_time_lapser ;
39261: LD_ADDR_VAR 0 18
39265: PUSH
39266: LD_INT 49
39268: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39269: LD_VAR 0 12
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: IN
39284: PUSH
39285: LD_INT 11
39287: PUSH
39288: LD_VAR 0 5
39292: IN
39293: PUSH
39294: LD_INT 30
39296: PUSH
39297: LD_VAR 0 5
39301: IN
39302: OR
39303: AND
39304: PUSH
39305: LD_INT 6
39307: PPUSH
39308: LD_VAR 0 16
39312: PPUSH
39313: CALL_OW 321
39317: PUSH
39318: LD_INT 2
39320: EQUAL
39321: AND
39322: IFFALSE 39487
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39324: LD_INT 22
39326: PUSH
39327: LD_VAR 0 16
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 35
39341: PUSH
39342: LD_INT 11
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 35
39351: PUSH
39352: LD_INT 30
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 91
39366: PUSH
39367: LD_VAR 0 1
39371: PUSH
39372: LD_INT 18
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: PPUSH
39385: CALL_OW 69
39389: NOT
39390: PUSH
39391: LD_INT 22
39393: PUSH
39394: LD_VAR 0 16
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 30
39408: PUSH
39409: LD_INT 32
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 30
39418: PUSH
39419: LD_INT 33
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 91
39433: PUSH
39434: LD_VAR 0 1
39438: PUSH
39439: LD_INT 12
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: LIST
39451: PUSH
39452: EMPTY
39453: LIST
39454: PPUSH
39455: CALL_OW 69
39459: PUSH
39460: LD_INT 2
39462: GREATER
39463: AND
39464: IFFALSE 39487
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39466: LD_ADDR_VAR 0 18
39470: PUSH
39471: LD_INT 11
39473: PUSH
39474: LD_INT 30
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_VAR 0 12
39485: ARRAY
39486: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39487: LD_VAR 0 18
39491: NOT
39492: PUSH
39493: LD_INT 40
39495: PPUSH
39496: LD_VAR 0 16
39500: PPUSH
39501: CALL_OW 321
39505: PUSH
39506: LD_INT 2
39508: EQUAL
39509: AND
39510: PUSH
39511: LD_INT 7
39513: PUSH
39514: LD_VAR 0 5
39518: IN
39519: PUSH
39520: LD_INT 28
39522: PUSH
39523: LD_VAR 0 5
39527: IN
39528: OR
39529: PUSH
39530: LD_INT 45
39532: PUSH
39533: LD_VAR 0 5
39537: IN
39538: OR
39539: AND
39540: IFFALSE 39794
// begin hex := GetHexInfo ( x , y ) ;
39542: LD_ADDR_VAR 0 4
39546: PUSH
39547: LD_VAR 0 10
39551: PPUSH
39552: LD_VAR 0 11
39556: PPUSH
39557: CALL_OW 546
39561: ST_TO_ADDR
// if hex [ 1 ] then
39562: LD_VAR 0 4
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: IFFALSE 39574
// exit ;
39572: GO 39977
// height := hex [ 2 ] ;
39574: LD_ADDR_VAR 0 15
39578: PUSH
39579: LD_VAR 0 4
39583: PUSH
39584: LD_INT 2
39586: ARRAY
39587: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39588: LD_ADDR_VAR 0 14
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: LD_INT 5
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// for i in tmp do
39611: LD_ADDR_VAR 0 8
39615: PUSH
39616: LD_VAR 0 14
39620: PUSH
39621: FOR_IN
39622: IFFALSE 39792
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39624: LD_ADDR_VAR 0 9
39628: PUSH
39629: LD_VAR 0 10
39633: PPUSH
39634: LD_VAR 0 8
39638: PPUSH
39639: LD_INT 5
39641: PPUSH
39642: CALL_OW 272
39646: PUSH
39647: LD_VAR 0 11
39651: PPUSH
39652: LD_VAR 0 8
39656: PPUSH
39657: LD_INT 5
39659: PPUSH
39660: CALL_OW 273
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39669: LD_VAR 0 9
39673: PUSH
39674: LD_INT 1
39676: ARRAY
39677: PPUSH
39678: LD_VAR 0 9
39682: PUSH
39683: LD_INT 2
39685: ARRAY
39686: PPUSH
39687: CALL_OW 488
39691: IFFALSE 39790
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39693: LD_ADDR_VAR 0 4
39697: PUSH
39698: LD_VAR 0 9
39702: PUSH
39703: LD_INT 1
39705: ARRAY
39706: PPUSH
39707: LD_VAR 0 9
39711: PUSH
39712: LD_INT 2
39714: ARRAY
39715: PPUSH
39716: CALL_OW 546
39720: ST_TO_ADDR
// if hex [ 1 ] then
39721: LD_VAR 0 4
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: IFFALSE 39733
// continue ;
39731: GO 39621
// h := hex [ 2 ] ;
39733: LD_ADDR_VAR 0 13
39737: PUSH
39738: LD_VAR 0 4
39742: PUSH
39743: LD_INT 2
39745: ARRAY
39746: ST_TO_ADDR
// if h + 7 < height then
39747: LD_VAR 0 13
39751: PUSH
39752: LD_INT 7
39754: PLUS
39755: PUSH
39756: LD_VAR 0 15
39760: LESS
39761: IFFALSE 39790
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39763: LD_ADDR_VAR 0 18
39767: PUSH
39768: LD_INT 7
39770: PUSH
39771: LD_INT 28
39773: PUSH
39774: LD_INT 45
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: PUSH
39782: LD_VAR 0 12
39786: ARRAY
39787: ST_TO_ADDR
// break ;
39788: GO 39792
// end ; end ; end ;
39790: GO 39621
39792: POP
39793: POP
// end ; if not weapon then
39794: LD_VAR 0 18
39798: NOT
39799: IFFALSE 39859
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39801: LD_ADDR_VAR 0 5
39805: PUSH
39806: LD_VAR 0 5
39810: PUSH
39811: LD_INT 11
39813: PUSH
39814: LD_INT 30
39816: PUSH
39817: LD_INT 49
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: DIFF
39825: ST_TO_ADDR
// if not list then
39826: LD_VAR 0 5
39830: NOT
39831: IFFALSE 39835
// exit ;
39833: GO 39977
// weapon := list [ rand ( 1 , list ) ] ;
39835: LD_ADDR_VAR 0 18
39839: PUSH
39840: LD_VAR 0 5
39844: PUSH
39845: LD_INT 1
39847: PPUSH
39848: LD_VAR 0 5
39852: PPUSH
39853: CALL_OW 12
39857: ARRAY
39858: ST_TO_ADDR
// end ; if weapon then
39859: LD_VAR 0 18
39863: IFFALSE 39977
// begin tmp := CostOfWeapon ( weapon ) ;
39865: LD_ADDR_VAR 0 14
39869: PUSH
39870: LD_VAR 0 18
39874: PPUSH
39875: CALL_OW 451
39879: ST_TO_ADDR
// j := GetBase ( tower ) ;
39880: LD_ADDR_VAR 0 9
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 274
39894: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39895: LD_VAR 0 9
39899: PPUSH
39900: LD_INT 1
39902: PPUSH
39903: CALL_OW 275
39907: PUSH
39908: LD_VAR 0 14
39912: PUSH
39913: LD_INT 1
39915: ARRAY
39916: GREATEREQUAL
39917: PUSH
39918: LD_VAR 0 9
39922: PPUSH
39923: LD_INT 2
39925: PPUSH
39926: CALL_OW 275
39930: PUSH
39931: LD_VAR 0 14
39935: PUSH
39936: LD_INT 2
39938: ARRAY
39939: GREATEREQUAL
39940: AND
39941: PUSH
39942: LD_VAR 0 9
39946: PPUSH
39947: LD_INT 3
39949: PPUSH
39950: CALL_OW 275
39954: PUSH
39955: LD_VAR 0 14
39959: PUSH
39960: LD_INT 3
39962: ARRAY
39963: GREATEREQUAL
39964: AND
39965: IFFALSE 39977
// result := weapon ;
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_VAR 0 18
39976: ST_TO_ADDR
// end ; end ;
39977: LD_VAR 0 3
39981: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39982: LD_INT 0
39984: PPUSH
39985: PPUSH
// result := true ;
39986: LD_ADDR_VAR 0 3
39990: PUSH
39991: LD_INT 1
39993: ST_TO_ADDR
// if array1 = array2 then
39994: LD_VAR 0 1
39998: PUSH
39999: LD_VAR 0 2
40003: EQUAL
40004: IFFALSE 40064
// begin for i = 1 to array1 do
40006: LD_ADDR_VAR 0 4
40010: PUSH
40011: DOUBLE
40012: LD_INT 1
40014: DEC
40015: ST_TO_ADDR
40016: LD_VAR 0 1
40020: PUSH
40021: FOR_TO
40022: IFFALSE 40060
// if array1 [ i ] <> array2 [ i ] then
40024: LD_VAR 0 1
40028: PUSH
40029: LD_VAR 0 4
40033: ARRAY
40034: PUSH
40035: LD_VAR 0 2
40039: PUSH
40040: LD_VAR 0 4
40044: ARRAY
40045: NONEQUAL
40046: IFFALSE 40058
// begin result := false ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 0
40055: ST_TO_ADDR
// break ;
40056: GO 40060
// end ;
40058: GO 40021
40060: POP
40061: POP
// end else
40062: GO 40072
// result := false ;
40064: LD_ADDR_VAR 0 3
40068: PUSH
40069: LD_INT 0
40071: ST_TO_ADDR
// end ;
40072: LD_VAR 0 3
40076: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40077: LD_INT 0
40079: PPUSH
40080: PPUSH
// if not array1 or not array2 then
40081: LD_VAR 0 1
40085: NOT
40086: PUSH
40087: LD_VAR 0 2
40091: NOT
40092: OR
40093: IFFALSE 40097
// exit ;
40095: GO 40161
// result := true ;
40097: LD_ADDR_VAR 0 3
40101: PUSH
40102: LD_INT 1
40104: ST_TO_ADDR
// for i = 1 to array1 do
40105: LD_ADDR_VAR 0 4
40109: PUSH
40110: DOUBLE
40111: LD_INT 1
40113: DEC
40114: ST_TO_ADDR
40115: LD_VAR 0 1
40119: PUSH
40120: FOR_TO
40121: IFFALSE 40159
// if array1 [ i ] <> array2 [ i ] then
40123: LD_VAR 0 1
40127: PUSH
40128: LD_VAR 0 4
40132: ARRAY
40133: PUSH
40134: LD_VAR 0 2
40138: PUSH
40139: LD_VAR 0 4
40143: ARRAY
40144: NONEQUAL
40145: IFFALSE 40157
// begin result := false ;
40147: LD_ADDR_VAR 0 3
40151: PUSH
40152: LD_INT 0
40154: ST_TO_ADDR
// break ;
40155: GO 40159
// end ;
40157: GO 40120
40159: POP
40160: POP
// end ;
40161: LD_VAR 0 3
40165: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40166: LD_INT 0
40168: PPUSH
40169: PPUSH
40170: PPUSH
// pom := GetBase ( fac ) ;
40171: LD_ADDR_VAR 0 5
40175: PUSH
40176: LD_VAR 0 1
40180: PPUSH
40181: CALL_OW 274
40185: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40186: LD_ADDR_VAR 0 4
40190: PUSH
40191: LD_VAR 0 2
40195: PUSH
40196: LD_INT 1
40198: ARRAY
40199: PPUSH
40200: LD_VAR 0 2
40204: PUSH
40205: LD_INT 2
40207: ARRAY
40208: PPUSH
40209: LD_VAR 0 2
40213: PUSH
40214: LD_INT 3
40216: ARRAY
40217: PPUSH
40218: LD_VAR 0 2
40222: PUSH
40223: LD_INT 4
40225: ARRAY
40226: PPUSH
40227: CALL_OW 449
40231: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40232: LD_ADDR_VAR 0 3
40236: PUSH
40237: LD_VAR 0 5
40241: PPUSH
40242: LD_INT 1
40244: PPUSH
40245: CALL_OW 275
40249: PUSH
40250: LD_VAR 0 4
40254: PUSH
40255: LD_INT 1
40257: ARRAY
40258: GREATEREQUAL
40259: PUSH
40260: LD_VAR 0 5
40264: PPUSH
40265: LD_INT 2
40267: PPUSH
40268: CALL_OW 275
40272: PUSH
40273: LD_VAR 0 4
40277: PUSH
40278: LD_INT 2
40280: ARRAY
40281: GREATEREQUAL
40282: AND
40283: PUSH
40284: LD_VAR 0 5
40288: PPUSH
40289: LD_INT 3
40291: PPUSH
40292: CALL_OW 275
40296: PUSH
40297: LD_VAR 0 4
40301: PUSH
40302: LD_INT 3
40304: ARRAY
40305: GREATEREQUAL
40306: AND
40307: ST_TO_ADDR
// end ;
40308: LD_VAR 0 3
40312: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40313: LD_INT 0
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
// pom := GetBase ( building ) ;
40319: LD_ADDR_VAR 0 3
40323: PUSH
40324: LD_VAR 0 1
40328: PPUSH
40329: CALL_OW 274
40333: ST_TO_ADDR
// if not pom then
40334: LD_VAR 0 3
40338: NOT
40339: IFFALSE 40343
// exit ;
40341: GO 40513
// btype := GetBType ( building ) ;
40343: LD_ADDR_VAR 0 5
40347: PUSH
40348: LD_VAR 0 1
40352: PPUSH
40353: CALL_OW 266
40357: ST_TO_ADDR
// if btype = b_armoury then
40358: LD_VAR 0 5
40362: PUSH
40363: LD_INT 4
40365: EQUAL
40366: IFFALSE 40376
// btype := b_barracks ;
40368: LD_ADDR_VAR 0 5
40372: PUSH
40373: LD_INT 5
40375: ST_TO_ADDR
// if btype = b_depot then
40376: LD_VAR 0 5
40380: PUSH
40381: LD_INT 0
40383: EQUAL
40384: IFFALSE 40394
// btype := b_warehouse ;
40386: LD_ADDR_VAR 0 5
40390: PUSH
40391: LD_INT 1
40393: ST_TO_ADDR
// if btype = b_workshop then
40394: LD_VAR 0 5
40398: PUSH
40399: LD_INT 2
40401: EQUAL
40402: IFFALSE 40412
// btype := b_factory ;
40404: LD_ADDR_VAR 0 5
40408: PUSH
40409: LD_INT 3
40411: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40412: LD_ADDR_VAR 0 4
40416: PUSH
40417: LD_VAR 0 5
40421: PPUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 248
40431: PPUSH
40432: CALL_OW 450
40436: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 3
40446: PPUSH
40447: LD_INT 1
40449: PPUSH
40450: CALL_OW 275
40454: PUSH
40455: LD_VAR 0 4
40459: PUSH
40460: LD_INT 1
40462: ARRAY
40463: GREATEREQUAL
40464: PUSH
40465: LD_VAR 0 3
40469: PPUSH
40470: LD_INT 2
40472: PPUSH
40473: CALL_OW 275
40477: PUSH
40478: LD_VAR 0 4
40482: PUSH
40483: LD_INT 2
40485: ARRAY
40486: GREATEREQUAL
40487: AND
40488: PUSH
40489: LD_VAR 0 3
40493: PPUSH
40494: LD_INT 3
40496: PPUSH
40497: CALL_OW 275
40501: PUSH
40502: LD_VAR 0 4
40506: PUSH
40507: LD_INT 3
40509: ARRAY
40510: GREATEREQUAL
40511: AND
40512: ST_TO_ADDR
// end ;
40513: LD_VAR 0 2
40517: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40518: LD_INT 0
40520: PPUSH
40521: PPUSH
40522: PPUSH
// pom := GetBase ( building ) ;
40523: LD_ADDR_VAR 0 4
40527: PUSH
40528: LD_VAR 0 1
40532: PPUSH
40533: CALL_OW 274
40537: ST_TO_ADDR
// if not pom then
40538: LD_VAR 0 4
40542: NOT
40543: IFFALSE 40547
// exit ;
40545: GO 40648
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40547: LD_ADDR_VAR 0 5
40551: PUSH
40552: LD_VAR 0 2
40556: PPUSH
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 248
40566: PPUSH
40567: CALL_OW 450
40571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_VAR 0 4
40581: PPUSH
40582: LD_INT 1
40584: PPUSH
40585: CALL_OW 275
40589: PUSH
40590: LD_VAR 0 5
40594: PUSH
40595: LD_INT 1
40597: ARRAY
40598: GREATEREQUAL
40599: PUSH
40600: LD_VAR 0 4
40604: PPUSH
40605: LD_INT 2
40607: PPUSH
40608: CALL_OW 275
40612: PUSH
40613: LD_VAR 0 5
40617: PUSH
40618: LD_INT 2
40620: ARRAY
40621: GREATEREQUAL
40622: AND
40623: PUSH
40624: LD_VAR 0 4
40628: PPUSH
40629: LD_INT 3
40631: PPUSH
40632: CALL_OW 275
40636: PUSH
40637: LD_VAR 0 5
40641: PUSH
40642: LD_INT 3
40644: ARRAY
40645: GREATEREQUAL
40646: AND
40647: ST_TO_ADDR
// end ;
40648: LD_VAR 0 3
40652: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40653: LD_INT 0
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
// result := false ;
40666: LD_ADDR_VAR 0 8
40670: PUSH
40671: LD_INT 0
40673: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40674: LD_VAR 0 5
40678: NOT
40679: PUSH
40680: LD_VAR 0 1
40684: NOT
40685: OR
40686: PUSH
40687: LD_VAR 0 2
40691: NOT
40692: OR
40693: PUSH
40694: LD_VAR 0 3
40698: NOT
40699: OR
40700: IFFALSE 40704
// exit ;
40702: GO 41518
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40704: LD_ADDR_VAR 0 14
40708: PUSH
40709: LD_VAR 0 1
40713: PPUSH
40714: LD_VAR 0 2
40718: PPUSH
40719: LD_VAR 0 3
40723: PPUSH
40724: LD_VAR 0 4
40728: PPUSH
40729: LD_VAR 0 5
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PPUSH
40738: CALL_OW 248
40742: PPUSH
40743: LD_INT 0
40745: PPUSH
40746: CALL 42751 0 6
40750: ST_TO_ADDR
// if not hexes then
40751: LD_VAR 0 14
40755: NOT
40756: IFFALSE 40760
// exit ;
40758: GO 41518
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40760: LD_ADDR_VAR 0 17
40764: PUSH
40765: LD_VAR 0 5
40769: PPUSH
40770: LD_INT 22
40772: PUSH
40773: LD_VAR 0 13
40777: PPUSH
40778: CALL_OW 255
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 30
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 30
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: CALL_OW 72
40823: ST_TO_ADDR
// for i = 1 to hexes do
40824: LD_ADDR_VAR 0 9
40828: PUSH
40829: DOUBLE
40830: LD_INT 1
40832: DEC
40833: ST_TO_ADDR
40834: LD_VAR 0 14
40838: PUSH
40839: FOR_TO
40840: IFFALSE 41516
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40842: LD_ADDR_VAR 0 13
40846: PUSH
40847: LD_VAR 0 14
40851: PUSH
40852: LD_VAR 0 9
40856: ARRAY
40857: PUSH
40858: LD_INT 1
40860: ARRAY
40861: PPUSH
40862: LD_VAR 0 14
40866: PUSH
40867: LD_VAR 0 9
40871: ARRAY
40872: PUSH
40873: LD_INT 2
40875: ARRAY
40876: PPUSH
40877: CALL_OW 428
40881: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40882: LD_VAR 0 14
40886: PUSH
40887: LD_VAR 0 9
40891: ARRAY
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: PPUSH
40897: LD_VAR 0 14
40901: PUSH
40902: LD_VAR 0 9
40906: ARRAY
40907: PUSH
40908: LD_INT 2
40910: ARRAY
40911: PPUSH
40912: CALL_OW 351
40916: PUSH
40917: LD_VAR 0 14
40921: PUSH
40922: LD_VAR 0 9
40926: ARRAY
40927: PUSH
40928: LD_INT 1
40930: ARRAY
40931: PPUSH
40932: LD_VAR 0 14
40936: PUSH
40937: LD_VAR 0 9
40941: ARRAY
40942: PUSH
40943: LD_INT 2
40945: ARRAY
40946: PPUSH
40947: CALL_OW 488
40951: NOT
40952: OR
40953: PUSH
40954: LD_VAR 0 13
40958: PPUSH
40959: CALL_OW 247
40963: PUSH
40964: LD_INT 3
40966: EQUAL
40967: OR
40968: IFFALSE 40974
// exit ;
40970: POP
40971: POP
40972: GO 41518
// if not tmp then
40974: LD_VAR 0 13
40978: NOT
40979: IFFALSE 40983
// continue ;
40981: GO 40839
// result := true ;
40983: LD_ADDR_VAR 0 8
40987: PUSH
40988: LD_INT 1
40990: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40991: LD_VAR 0 6
40995: PUSH
40996: LD_VAR 0 13
41000: PPUSH
41001: CALL_OW 247
41005: PUSH
41006: LD_INT 2
41008: EQUAL
41009: AND
41010: PUSH
41011: LD_VAR 0 13
41015: PPUSH
41016: CALL_OW 263
41020: PUSH
41021: LD_INT 1
41023: EQUAL
41024: AND
41025: IFFALSE 41189
// begin if IsDrivenBy ( tmp ) then
41027: LD_VAR 0 13
41031: PPUSH
41032: CALL_OW 311
41036: IFFALSE 41040
// continue ;
41038: GO 40839
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41040: LD_VAR 0 6
41044: PPUSH
41045: LD_INT 3
41047: PUSH
41048: LD_INT 60
41050: PUSH
41051: EMPTY
41052: LIST
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 55
41063: PUSH
41064: EMPTY
41065: LIST
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PPUSH
41075: CALL_OW 72
41079: IFFALSE 41187
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41081: LD_ADDR_VAR 0 18
41085: PUSH
41086: LD_VAR 0 6
41090: PPUSH
41091: LD_INT 3
41093: PUSH
41094: LD_INT 60
41096: PUSH
41097: EMPTY
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: LD_INT 55
41109: PUSH
41110: EMPTY
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PPUSH
41121: CALL_OW 72
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: ST_TO_ADDR
// if IsInUnit ( driver ) then
41130: LD_VAR 0 18
41134: PPUSH
41135: CALL_OW 310
41139: IFFALSE 41150
// ComExit ( driver ) ;
41141: LD_VAR 0 18
41145: PPUSH
41146: CALL 66512 0 1
// AddComEnterUnit ( driver , tmp ) ;
41150: LD_VAR 0 18
41154: PPUSH
41155: LD_VAR 0 13
41159: PPUSH
41160: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41164: LD_VAR 0 18
41168: PPUSH
41169: LD_VAR 0 7
41173: PPUSH
41174: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41178: LD_VAR 0 18
41182: PPUSH
41183: CALL_OW 181
// end ; continue ;
41187: GO 40839
// end ; if not cleaners or not tmp in cleaners then
41189: LD_VAR 0 6
41193: NOT
41194: PUSH
41195: LD_VAR 0 13
41199: PUSH
41200: LD_VAR 0 6
41204: IN
41205: NOT
41206: OR
41207: IFFALSE 41514
// begin if dep then
41209: LD_VAR 0 17
41213: IFFALSE 41349
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41215: LD_ADDR_VAR 0 16
41219: PUSH
41220: LD_VAR 0 17
41224: PUSH
41225: LD_INT 1
41227: ARRAY
41228: PPUSH
41229: CALL_OW 250
41233: PPUSH
41234: LD_VAR 0 17
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: PPUSH
41243: CALL_OW 254
41247: PPUSH
41248: LD_INT 5
41250: PPUSH
41251: CALL_OW 272
41255: PUSH
41256: LD_VAR 0 17
41260: PUSH
41261: LD_INT 1
41263: ARRAY
41264: PPUSH
41265: CALL_OW 251
41269: PPUSH
41270: LD_VAR 0 17
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: PPUSH
41279: CALL_OW 254
41283: PPUSH
41284: LD_INT 5
41286: PPUSH
41287: CALL_OW 273
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41296: LD_VAR 0 16
41300: PUSH
41301: LD_INT 1
41303: ARRAY
41304: PPUSH
41305: LD_VAR 0 16
41309: PUSH
41310: LD_INT 2
41312: ARRAY
41313: PPUSH
41314: CALL_OW 488
41318: IFFALSE 41349
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41320: LD_VAR 0 13
41324: PPUSH
41325: LD_VAR 0 16
41329: PUSH
41330: LD_INT 1
41332: ARRAY
41333: PPUSH
41334: LD_VAR 0 16
41338: PUSH
41339: LD_INT 2
41341: ARRAY
41342: PPUSH
41343: CALL_OW 111
// continue ;
41347: GO 40839
// end ; end ; r := GetDir ( tmp ) ;
41349: LD_ADDR_VAR 0 15
41353: PUSH
41354: LD_VAR 0 13
41358: PPUSH
41359: CALL_OW 254
41363: ST_TO_ADDR
// if r = 5 then
41364: LD_VAR 0 15
41368: PUSH
41369: LD_INT 5
41371: EQUAL
41372: IFFALSE 41382
// r := 0 ;
41374: LD_ADDR_VAR 0 15
41378: PUSH
41379: LD_INT 0
41381: ST_TO_ADDR
// for j = r to 5 do
41382: LD_ADDR_VAR 0 10
41386: PUSH
41387: DOUBLE
41388: LD_VAR 0 15
41392: DEC
41393: ST_TO_ADDR
41394: LD_INT 5
41396: PUSH
41397: FOR_TO
41398: IFFALSE 41512
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41400: LD_ADDR_VAR 0 11
41404: PUSH
41405: LD_VAR 0 13
41409: PPUSH
41410: CALL_OW 250
41414: PPUSH
41415: LD_VAR 0 10
41419: PPUSH
41420: LD_INT 2
41422: PPUSH
41423: CALL_OW 272
41427: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41428: LD_ADDR_VAR 0 12
41432: PUSH
41433: LD_VAR 0 13
41437: PPUSH
41438: CALL_OW 251
41442: PPUSH
41443: LD_VAR 0 10
41447: PPUSH
41448: LD_INT 2
41450: PPUSH
41451: CALL_OW 273
41455: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41456: LD_VAR 0 11
41460: PPUSH
41461: LD_VAR 0 12
41465: PPUSH
41466: CALL_OW 488
41470: PUSH
41471: LD_VAR 0 11
41475: PPUSH
41476: LD_VAR 0 12
41480: PPUSH
41481: CALL_OW 428
41485: NOT
41486: AND
41487: IFFALSE 41510
// begin ComMoveXY ( tmp , _x , _y ) ;
41489: LD_VAR 0 13
41493: PPUSH
41494: LD_VAR 0 11
41498: PPUSH
41499: LD_VAR 0 12
41503: PPUSH
41504: CALL_OW 111
// break ;
41508: GO 41512
// end ; end ;
41510: GO 41397
41512: POP
41513: POP
// end ; end ;
41514: GO 40839
41516: POP
41517: POP
// end ;
41518: LD_VAR 0 8
41522: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41523: LD_INT 0
41525: PPUSH
// result := true ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_INT 1
41533: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41534: LD_VAR 0 2
41538: PUSH
41539: LD_INT 24
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41553
41545: LD_INT 33
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41553
41551: GO 41578
41553: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 32
41561: PPUSH
41562: LD_VAR 0 1
41566: PPUSH
41567: CALL_OW 321
41571: PUSH
41572: LD_INT 2
41574: EQUAL
41575: ST_TO_ADDR
41576: GO 41894
41578: LD_INT 20
41580: DOUBLE
41581: EQUAL
41582: IFTRUE 41586
41584: GO 41611
41586: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41587: LD_ADDR_VAR 0 3
41591: PUSH
41592: LD_INT 6
41594: PPUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 321
41604: PUSH
41605: LD_INT 2
41607: EQUAL
41608: ST_TO_ADDR
41609: GO 41894
41611: LD_INT 22
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41625
41617: LD_INT 36
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41650
41625: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_INT 15
41633: PPUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 321
41643: PUSH
41644: LD_INT 2
41646: EQUAL
41647: ST_TO_ADDR
41648: GO 41894
41650: LD_INT 30
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41683
41658: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41659: LD_ADDR_VAR 0 3
41663: PUSH
41664: LD_INT 20
41666: PPUSH
41667: LD_VAR 0 1
41671: PPUSH
41672: CALL_OW 321
41676: PUSH
41677: LD_INT 2
41679: EQUAL
41680: ST_TO_ADDR
41681: GO 41894
41683: LD_INT 28
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41697
41689: LD_INT 21
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41722
41697: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_INT 21
41705: PPUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 321
41715: PUSH
41716: LD_INT 2
41718: EQUAL
41719: ST_TO_ADDR
41720: GO 41894
41722: LD_INT 16
41724: DOUBLE
41725: EQUAL
41726: IFTRUE 41730
41728: GO 41755
41730: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41731: LD_ADDR_VAR 0 3
41735: PUSH
41736: LD_INT 84
41738: PPUSH
41739: LD_VAR 0 1
41743: PPUSH
41744: CALL_OW 321
41748: PUSH
41749: LD_INT 2
41751: EQUAL
41752: ST_TO_ADDR
41753: GO 41894
41755: LD_INT 19
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41769
41761: LD_INT 23
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41769
41767: GO 41794
41769: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_INT 83
41777: PPUSH
41778: LD_VAR 0 1
41782: PPUSH
41783: CALL_OW 321
41787: PUSH
41788: LD_INT 2
41790: EQUAL
41791: ST_TO_ADDR
41792: GO 41894
41794: LD_INT 17
41796: DOUBLE
41797: EQUAL
41798: IFTRUE 41802
41800: GO 41827
41802: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41803: LD_ADDR_VAR 0 3
41807: PUSH
41808: LD_INT 39
41810: PPUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 321
41820: PUSH
41821: LD_INT 2
41823: EQUAL
41824: ST_TO_ADDR
41825: GO 41894
41827: LD_INT 18
41829: DOUBLE
41830: EQUAL
41831: IFTRUE 41835
41833: GO 41860
41835: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41836: LD_ADDR_VAR 0 3
41840: PUSH
41841: LD_INT 40
41843: PPUSH
41844: LD_VAR 0 1
41848: PPUSH
41849: CALL_OW 321
41853: PUSH
41854: LD_INT 2
41856: EQUAL
41857: ST_TO_ADDR
41858: GO 41894
41860: LD_INT 27
41862: DOUBLE
41863: EQUAL
41864: IFTRUE 41868
41866: GO 41893
41868: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_INT 35
41876: PPUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 321
41886: PUSH
41887: LD_INT 2
41889: EQUAL
41890: ST_TO_ADDR
41891: GO 41894
41893: POP
// end ;
41894: LD_VAR 0 3
41898: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41899: LD_INT 0
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
// result := false ;
41912: LD_ADDR_VAR 0 6
41916: PUSH
41917: LD_INT 0
41919: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41920: LD_VAR 0 1
41924: NOT
41925: PUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 266
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: IN
41946: NOT
41947: OR
41948: PUSH
41949: LD_VAR 0 2
41953: NOT
41954: OR
41955: PUSH
41956: LD_VAR 0 5
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: LD_INT 5
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: IN
41987: NOT
41988: OR
41989: PUSH
41990: LD_VAR 0 3
41994: PPUSH
41995: LD_VAR 0 4
41999: PPUSH
42000: CALL_OW 488
42004: NOT
42005: OR
42006: IFFALSE 42010
// exit ;
42008: GO 42746
// side := GetSide ( depot ) ;
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 255
42024: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42025: LD_VAR 0 9
42029: PPUSH
42030: LD_VAR 0 2
42034: PPUSH
42035: CALL 41523 0 2
42039: NOT
42040: IFFALSE 42044
// exit ;
42042: GO 42746
// pom := GetBase ( depot ) ;
42044: LD_ADDR_VAR 0 10
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: CALL_OW 274
42058: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42059: LD_ADDR_VAR 0 11
42063: PUSH
42064: LD_VAR 0 2
42068: PPUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 248
42078: PPUSH
42079: CALL_OW 450
42083: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42084: LD_VAR 0 10
42088: PPUSH
42089: LD_INT 1
42091: PPUSH
42092: CALL_OW 275
42096: PUSH
42097: LD_VAR 0 11
42101: PUSH
42102: LD_INT 1
42104: ARRAY
42105: GREATEREQUAL
42106: PUSH
42107: LD_VAR 0 10
42111: PPUSH
42112: LD_INT 2
42114: PPUSH
42115: CALL_OW 275
42119: PUSH
42120: LD_VAR 0 11
42124: PUSH
42125: LD_INT 2
42127: ARRAY
42128: GREATEREQUAL
42129: AND
42130: PUSH
42131: LD_VAR 0 10
42135: PPUSH
42136: LD_INT 3
42138: PPUSH
42139: CALL_OW 275
42143: PUSH
42144: LD_VAR 0 11
42148: PUSH
42149: LD_INT 3
42151: ARRAY
42152: GREATEREQUAL
42153: AND
42154: NOT
42155: IFFALSE 42159
// exit ;
42157: GO 42746
// if GetBType ( depot ) = b_depot then
42159: LD_VAR 0 1
42163: PPUSH
42164: CALL_OW 266
42168: PUSH
42169: LD_INT 0
42171: EQUAL
42172: IFFALSE 42184
// dist := 28 else
42174: LD_ADDR_VAR 0 14
42178: PUSH
42179: LD_INT 28
42181: ST_TO_ADDR
42182: GO 42192
// dist := 36 ;
42184: LD_ADDR_VAR 0 14
42188: PUSH
42189: LD_INT 36
42191: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42192: LD_VAR 0 1
42196: PPUSH
42197: LD_VAR 0 3
42201: PPUSH
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL_OW 297
42211: PUSH
42212: LD_VAR 0 14
42216: GREATER
42217: IFFALSE 42221
// exit ;
42219: GO 42746
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42221: LD_ADDR_VAR 0 12
42225: PUSH
42226: LD_VAR 0 2
42230: PPUSH
42231: LD_VAR 0 3
42235: PPUSH
42236: LD_VAR 0 4
42240: PPUSH
42241: LD_VAR 0 5
42245: PPUSH
42246: LD_VAR 0 1
42250: PPUSH
42251: CALL_OW 248
42255: PPUSH
42256: LD_INT 0
42258: PPUSH
42259: CALL 42751 0 6
42263: ST_TO_ADDR
// if not hexes then
42264: LD_VAR 0 12
42268: NOT
42269: IFFALSE 42273
// exit ;
42271: GO 42746
// hex := GetHexInfo ( x , y ) ;
42273: LD_ADDR_VAR 0 15
42277: PUSH
42278: LD_VAR 0 3
42282: PPUSH
42283: LD_VAR 0 4
42287: PPUSH
42288: CALL_OW 546
42292: ST_TO_ADDR
// if hex [ 1 ] then
42293: LD_VAR 0 15
42297: PUSH
42298: LD_INT 1
42300: ARRAY
42301: IFFALSE 42305
// exit ;
42303: GO 42746
// height := hex [ 2 ] ;
42305: LD_ADDR_VAR 0 13
42309: PUSH
42310: LD_VAR 0 15
42314: PUSH
42315: LD_INT 2
42317: ARRAY
42318: ST_TO_ADDR
// for i = 1 to hexes do
42319: LD_ADDR_VAR 0 7
42323: PUSH
42324: DOUBLE
42325: LD_INT 1
42327: DEC
42328: ST_TO_ADDR
42329: LD_VAR 0 12
42333: PUSH
42334: FOR_TO
42335: IFFALSE 42665
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42337: LD_VAR 0 12
42341: PUSH
42342: LD_VAR 0 7
42346: ARRAY
42347: PUSH
42348: LD_INT 1
42350: ARRAY
42351: PPUSH
42352: LD_VAR 0 12
42356: PUSH
42357: LD_VAR 0 7
42361: ARRAY
42362: PUSH
42363: LD_INT 2
42365: ARRAY
42366: PPUSH
42367: CALL_OW 488
42371: NOT
42372: PUSH
42373: LD_VAR 0 12
42377: PUSH
42378: LD_VAR 0 7
42382: ARRAY
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: PPUSH
42388: LD_VAR 0 12
42392: PUSH
42393: LD_VAR 0 7
42397: ARRAY
42398: PUSH
42399: LD_INT 2
42401: ARRAY
42402: PPUSH
42403: CALL_OW 428
42407: PUSH
42408: LD_INT 0
42410: GREATER
42411: OR
42412: PUSH
42413: LD_VAR 0 12
42417: PUSH
42418: LD_VAR 0 7
42422: ARRAY
42423: PUSH
42424: LD_INT 1
42426: ARRAY
42427: PPUSH
42428: LD_VAR 0 12
42432: PUSH
42433: LD_VAR 0 7
42437: ARRAY
42438: PUSH
42439: LD_INT 2
42441: ARRAY
42442: PPUSH
42443: CALL_OW 351
42447: OR
42448: IFFALSE 42454
// exit ;
42450: POP
42451: POP
42452: GO 42746
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42454: LD_ADDR_VAR 0 8
42458: PUSH
42459: LD_VAR 0 12
42463: PUSH
42464: LD_VAR 0 7
42468: ARRAY
42469: PUSH
42470: LD_INT 1
42472: ARRAY
42473: PPUSH
42474: LD_VAR 0 12
42478: PUSH
42479: LD_VAR 0 7
42483: ARRAY
42484: PUSH
42485: LD_INT 2
42487: ARRAY
42488: PPUSH
42489: CALL_OW 546
42493: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42494: LD_VAR 0 8
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: PUSH
42503: LD_VAR 0 8
42507: PUSH
42508: LD_INT 2
42510: ARRAY
42511: PUSH
42512: LD_VAR 0 13
42516: PUSH
42517: LD_INT 2
42519: PLUS
42520: GREATER
42521: OR
42522: PUSH
42523: LD_VAR 0 8
42527: PUSH
42528: LD_INT 2
42530: ARRAY
42531: PUSH
42532: LD_VAR 0 13
42536: PUSH
42537: LD_INT 2
42539: MINUS
42540: LESS
42541: OR
42542: PUSH
42543: LD_VAR 0 8
42547: PUSH
42548: LD_INT 3
42550: ARRAY
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 8
42557: PUSH
42558: LD_INT 9
42560: PUSH
42561: LD_INT 10
42563: PUSH
42564: LD_INT 11
42566: PUSH
42567: LD_INT 12
42569: PUSH
42570: LD_INT 13
42572: PUSH
42573: LD_INT 16
42575: PUSH
42576: LD_INT 17
42578: PUSH
42579: LD_INT 18
42581: PUSH
42582: LD_INT 19
42584: PUSH
42585: LD_INT 20
42587: PUSH
42588: LD_INT 21
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: IN
42606: NOT
42607: OR
42608: PUSH
42609: LD_VAR 0 8
42613: PUSH
42614: LD_INT 5
42616: ARRAY
42617: NOT
42618: OR
42619: PUSH
42620: LD_VAR 0 8
42624: PUSH
42625: LD_INT 6
42627: ARRAY
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 7
42637: PUSH
42638: LD_INT 9
42640: PUSH
42641: LD_INT 10
42643: PUSH
42644: LD_INT 11
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: IN
42655: NOT
42656: OR
42657: IFFALSE 42663
// exit ;
42659: POP
42660: POP
42661: GO 42746
// end ;
42663: GO 42334
42665: POP
42666: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42667: LD_VAR 0 9
42671: PPUSH
42672: LD_VAR 0 3
42676: PPUSH
42677: LD_VAR 0 4
42681: PPUSH
42682: LD_INT 20
42684: PPUSH
42685: CALL 34698 0 4
42689: PUSH
42690: LD_INT 4
42692: ARRAY
42693: IFFALSE 42697
// exit ;
42695: GO 42746
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42697: LD_VAR 0 2
42701: PUSH
42702: LD_INT 29
42704: PUSH
42705: LD_INT 30
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: IN
42712: PUSH
42713: LD_VAR 0 3
42717: PPUSH
42718: LD_VAR 0 4
42722: PPUSH
42723: LD_VAR 0 9
42727: PPUSH
42728: CALL_OW 440
42732: NOT
42733: AND
42734: IFFALSE 42738
// exit ;
42736: GO 42746
// result := true ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_INT 1
42745: ST_TO_ADDR
// end ;
42746: LD_VAR 0 6
42750: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42751: LD_INT 0
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
// result = [ ] ;
42811: LD_ADDR_VAR 0 7
42815: PUSH
42816: EMPTY
42817: ST_TO_ADDR
// temp_list = [ ] ;
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: EMPTY
42824: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42825: LD_VAR 0 4
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 4
42844: PUSH
42845: LD_INT 5
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: IN
42856: NOT
42857: PUSH
42858: LD_VAR 0 1
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: IN
42873: PUSH
42874: LD_VAR 0 5
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: IN
42893: NOT
42894: AND
42895: OR
42896: IFFALSE 42900
// exit ;
42898: GO 61291
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42900: LD_VAR 0 1
42904: PUSH
42905: LD_INT 6
42907: PUSH
42908: LD_INT 7
42910: PUSH
42911: LD_INT 8
42913: PUSH
42914: LD_INT 13
42916: PUSH
42917: LD_INT 12
42919: PUSH
42920: LD_INT 15
42922: PUSH
42923: LD_INT 11
42925: PUSH
42926: LD_INT 14
42928: PUSH
42929: LD_INT 10
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: IN
42943: IFFALSE 42953
// btype = b_lab ;
42945: LD_ADDR_VAR 0 1
42949: PUSH
42950: LD_INT 6
42952: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42953: LD_VAR 0 6
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: IN
42972: NOT
42973: PUSH
42974: LD_VAR 0 1
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: LD_INT 6
42993: PUSH
42994: LD_INT 36
42996: PUSH
42997: LD_INT 4
42999: PUSH
43000: LD_INT 5
43002: PUSH
43003: LD_INT 31
43005: PUSH
43006: LD_INT 32
43008: PUSH
43009: LD_INT 33
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: IN
43025: NOT
43026: PUSH
43027: LD_VAR 0 6
43031: PUSH
43032: LD_INT 1
43034: EQUAL
43035: AND
43036: OR
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: IN
43053: NOT
43054: PUSH
43055: LD_VAR 0 6
43059: PUSH
43060: LD_INT 2
43062: EQUAL
43063: AND
43064: OR
43065: IFFALSE 43075
// mode = 0 ;
43067: LD_ADDR_VAR 0 6
43071: PUSH
43072: LD_INT 0
43074: ST_TO_ADDR
// case mode of 0 :
43075: LD_VAR 0 6
43079: PUSH
43080: LD_INT 0
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 54541
43088: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43089: LD_ADDR_VAR 0 11
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43282: LD_ADDR_VAR 0 12
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43478: LD_ADDR_VAR 0 13
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 3
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: LD_INT 3
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43677: LD_ADDR_VAR 0 14
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 3
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 3
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43873: LD_ADDR_VAR 0 15
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 3
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 3
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44066: LD_ADDR_VAR 0 16
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44259: LD_ADDR_VAR 0 17
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44489: LD_ADDR_VAR 0 18
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44719: LD_ADDR_VAR 0 19
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44949: LD_ADDR_VAR 0 20
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45179: LD_ADDR_VAR 0 21
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45409: LD_ADDR_VAR 0 22
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45639: LD_ADDR_VAR 0 23
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45919: LD_ADDR_VAR 0 24
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 3
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46195: LD_ADDR_VAR 0 25
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46469: LD_ADDR_VAR 0 26
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 3
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46745: LD_ADDR_VAR 0 27
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47025: LD_ADDR_VAR 0 28
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 3
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47307: LD_ADDR_VAR 0 29
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47586: LD_ADDR_VAR 0 30
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47864: LD_ADDR_VAR 0 31
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48142: LD_ADDR_VAR 0 32
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48420: LD_ADDR_VAR 0 33
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48699: LD_ADDR_VAR 0 34
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48979: LD_ADDR_VAR 0 35
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49091: LD_ADDR_VAR 0 36
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49203: LD_ADDR_VAR 0 37
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49315: LD_ADDR_VAR 0 38
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49427: LD_ADDR_VAR 0 39
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49539: LD_ADDR_VAR 0 40
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49651: LD_ADDR_VAR 0 41
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50001: LD_ADDR_VAR 0 42
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50351: LD_ADDR_VAR 0 43
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 3
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50699: LD_ADDR_VAR 0 44
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 3
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51049: LD_ADDR_VAR 0 45
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 3
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51399: LD_ADDR_VAR 0 46
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51747: LD_ADDR_VAR 0 47
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51898: LD_ADDR_VAR 0 48
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52045: LD_ADDR_VAR 0 49
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52189: LD_ADDR_VAR 0 50
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52333: LD_ADDR_VAR 0 51
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52480: LD_ADDR_VAR 0 52
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52631: LD_ADDR_VAR 0 53
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52861: LD_ADDR_VAR 0 54
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53091: LD_ADDR_VAR 0 55
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53321: LD_ADDR_VAR 0 56
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53551: LD_ADDR_VAR 0 57
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53781: LD_ADDR_VAR 0 58
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54011: LD_ADDR_VAR 0 59
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54099: LD_ADDR_VAR 0 60
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54187: LD_ADDR_VAR 0 61
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54275: LD_ADDR_VAR 0 62
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54363: LD_ADDR_VAR 0 63
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54451: LD_ADDR_VAR 0 64
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// end ; 1 :
54539: GO 60436
54541: LD_INT 1
54543: DOUBLE
54544: EQUAL
54545: IFTRUE 54549
54547: GO 57172
54549: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54550: LD_ADDR_VAR 0 11
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54594: LD_ADDR_VAR 0 12
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54635: LD_ADDR_VAR 0 13
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54675: LD_ADDR_VAR 0 14
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54716: LD_ADDR_VAR 0 15
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54760: LD_ADDR_VAR 0 16
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54806: LD_ADDR_VAR 0 17
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 3
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54850: LD_ADDR_VAR 0 18
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54891: LD_ADDR_VAR 0 19
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54931: LD_ADDR_VAR 0 20
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54972: LD_ADDR_VAR 0 21
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55016: LD_ADDR_VAR 0 22
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55062: LD_ADDR_VAR 0 23
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 4
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 3
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55106: LD_ADDR_VAR 0 24
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 3
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55147: LD_ADDR_VAR 0 25
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 4
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55187: LD_ADDR_VAR 0 26
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 4
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55228: LD_ADDR_VAR 0 27
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55272: LD_ADDR_VAR 0 28
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: NEG
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55318: LD_ADDR_VAR 0 29
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 4
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 5
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 5
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 4
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 6
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 6
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 5
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55473: LD_ADDR_VAR 0 30
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 5
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 5
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 5
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 6
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 6
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55616: LD_ADDR_VAR 0 31
55620: PUSH
55621: LD_INT 3
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 4
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 5
55683: PUSH
55684: LD_INT 4
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 5
55693: PUSH
55694: LD_INT 5
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 4
55703: PUSH
55704: LD_INT 5
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 6
55713: PUSH
55714: LD_INT 5
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 6
55723: PUSH
55724: LD_INT 6
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 5
55733: PUSH
55734: LD_INT 6
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55755: LD_ADDR_VAR 0 32
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 4
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 5
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 5
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 6
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 6
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 5
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55898: LD_ADDR_VAR 0 33
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 4
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 5
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 5
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 6
56018: NEG
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 6
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56053: LD_ADDR_VAR 0 34
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: LD_INT 3
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 4
56120: NEG
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: LD_INT 5
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 5
56144: NEG
56145: PUSH
56146: LD_INT 4
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 5
56156: NEG
56157: PUSH
56158: LD_INT 5
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 5
56168: NEG
56169: PUSH
56170: LD_INT 6
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 6
56180: NEG
56181: PUSH
56182: LD_INT 5
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 6
56192: NEG
56193: PUSH
56194: LD_INT 6
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56216: LD_ADDR_VAR 0 41
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56260: LD_ADDR_VAR 0 42
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56301: LD_ADDR_VAR 0 43
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56341: LD_ADDR_VAR 0 44
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56382: LD_ADDR_VAR 0 45
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56426: LD_ADDR_VAR 0 46
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56472: LD_ADDR_VAR 0 47
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56505: LD_ADDR_VAR 0 48
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56536: LD_ADDR_VAR 0 49
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56565: LD_ADDR_VAR 0 50
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56594: LD_ADDR_VAR 0 51
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56625: LD_ADDR_VAR 0 52
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56658: LD_ADDR_VAR 0 53
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56702: LD_ADDR_VAR 0 54
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56743: LD_ADDR_VAR 0 55
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56783: LD_ADDR_VAR 0 56
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56824: LD_ADDR_VAR 0 57
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56868: LD_ADDR_VAR 0 58
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56914: LD_ADDR_VAR 0 59
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56958: LD_ADDR_VAR 0 60
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56999: LD_ADDR_VAR 0 61
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57039: LD_ADDR_VAR 0 62
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57080: LD_ADDR_VAR 0 63
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57124: LD_ADDR_VAR 0 64
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// end ; 2 :
57170: GO 60436
57172: LD_INT 2
57174: DOUBLE
57175: EQUAL
57176: IFTRUE 57180
57178: GO 60435
57180: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57181: LD_ADDR_VAR 0 29
57185: PUSH
57186: LD_INT 4
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 5
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 4
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 4
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 4
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 4
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 5
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 5
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 5
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 4
57531: NEG
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 4
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 4
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 4
57578: NEG
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 5
57626: NEG
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 5
57638: NEG
57639: PUSH
57640: LD_INT 5
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 5
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 5
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57719: LD_ADDR_VAR 0 30
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 5
57746: PUSH
57747: LD_INT 4
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 5
57756: PUSH
57757: LD_INT 5
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: LD_INT 5
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: NEG
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 5
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 5
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: LD_INT 4
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 4
58083: NEG
58084: PUSH
58085: LD_INT 4
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 5
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 4
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 5
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 5
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58266: LD_ADDR_VAR 0 31
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 4
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 5
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 4
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 5
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 4
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 4
58468: NEG
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 4
58480: NEG
58481: PUSH
58482: LD_INT 5
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 5
58540: NEG
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 5
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 5
58564: NEG
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 4
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 4
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 4
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 5
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 5
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58816: LD_ADDR_VAR 0 32
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: NEG
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 5
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 4
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: LD_INT 4
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 4
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 4
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 5
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: LD_INT 5
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 4
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 5
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 5
59258: PUSH
59259: LD_INT 5
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: LD_INT 5
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 5
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59363: LD_ADDR_VAR 0 33
59367: PUSH
59368: LD_INT 4
59370: NEG
59371: PUSH
59372: LD_INT 4
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: LD_INT 5
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: LD_INT 3
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: LD_INT 5
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: LD_INT 5
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 5
59466: NEG
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 4
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 4
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 5
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 5
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 4
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 4
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 5
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 5
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 4
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: LD_INT 5
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59901: LD_ADDR_VAR 0 34
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: LD_INT 5
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 4
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: LD_INT 4
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 5
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 3
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 4
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 4
60286: NEG
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 4
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 3
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 5
60342: NEG
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 5
60365: NEG
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// end ; end ;
60433: GO 60436
60435: POP
// case btype of b_depot , b_warehouse :
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 0
60443: DOUBLE
60444: EQUAL
60445: IFTRUE 60455
60447: LD_INT 1
60449: DOUBLE
60450: EQUAL
60451: IFTRUE 60455
60453: GO 60656
60455: POP
// case nation of nation_american :
60456: LD_VAR 0 5
60460: PUSH
60461: LD_INT 1
60463: DOUBLE
60464: EQUAL
60465: IFTRUE 60469
60467: GO 60525
60469: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60470: LD_ADDR_VAR 0 9
60474: PUSH
60475: LD_VAR 0 11
60479: PUSH
60480: LD_VAR 0 12
60484: PUSH
60485: LD_VAR 0 13
60489: PUSH
60490: LD_VAR 0 14
60494: PUSH
60495: LD_VAR 0 15
60499: PUSH
60500: LD_VAR 0 16
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: PUSH
60513: LD_VAR 0 4
60517: PUSH
60518: LD_INT 1
60520: PLUS
60521: ARRAY
60522: ST_TO_ADDR
60523: GO 60654
60525: LD_INT 2
60527: DOUBLE
60528: EQUAL
60529: IFTRUE 60533
60531: GO 60589
60533: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60534: LD_ADDR_VAR 0 9
60538: PUSH
60539: LD_VAR 0 17
60543: PUSH
60544: LD_VAR 0 18
60548: PUSH
60549: LD_VAR 0 19
60553: PUSH
60554: LD_VAR 0 20
60558: PUSH
60559: LD_VAR 0 21
60563: PUSH
60564: LD_VAR 0 22
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: PUSH
60577: LD_VAR 0 4
60581: PUSH
60582: LD_INT 1
60584: PLUS
60585: ARRAY
60586: ST_TO_ADDR
60587: GO 60654
60589: LD_INT 3
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60597
60595: GO 60653
60597: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60598: LD_ADDR_VAR 0 9
60602: PUSH
60603: LD_VAR 0 23
60607: PUSH
60608: LD_VAR 0 24
60612: PUSH
60613: LD_VAR 0 25
60617: PUSH
60618: LD_VAR 0 26
60622: PUSH
60623: LD_VAR 0 27
60627: PUSH
60628: LD_VAR 0 28
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: PUSH
60641: LD_VAR 0 4
60645: PUSH
60646: LD_INT 1
60648: PLUS
60649: ARRAY
60650: ST_TO_ADDR
60651: GO 60654
60653: POP
60654: GO 61209
60656: LD_INT 2
60658: DOUBLE
60659: EQUAL
60660: IFTRUE 60670
60662: LD_INT 3
60664: DOUBLE
60665: EQUAL
60666: IFTRUE 60670
60668: GO 60726
60670: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60671: LD_ADDR_VAR 0 9
60675: PUSH
60676: LD_VAR 0 29
60680: PUSH
60681: LD_VAR 0 30
60685: PUSH
60686: LD_VAR 0 31
60690: PUSH
60691: LD_VAR 0 32
60695: PUSH
60696: LD_VAR 0 33
60700: PUSH
60701: LD_VAR 0 34
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_VAR 0 4
60718: PUSH
60719: LD_INT 1
60721: PLUS
60722: ARRAY
60723: ST_TO_ADDR
60724: GO 61209
60726: LD_INT 16
60728: DOUBLE
60729: EQUAL
60730: IFTRUE 60788
60732: LD_INT 17
60734: DOUBLE
60735: EQUAL
60736: IFTRUE 60788
60738: LD_INT 18
60740: DOUBLE
60741: EQUAL
60742: IFTRUE 60788
60744: LD_INT 19
60746: DOUBLE
60747: EQUAL
60748: IFTRUE 60788
60750: LD_INT 22
60752: DOUBLE
60753: EQUAL
60754: IFTRUE 60788
60756: LD_INT 20
60758: DOUBLE
60759: EQUAL
60760: IFTRUE 60788
60762: LD_INT 21
60764: DOUBLE
60765: EQUAL
60766: IFTRUE 60788
60768: LD_INT 23
60770: DOUBLE
60771: EQUAL
60772: IFTRUE 60788
60774: LD_INT 24
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60788
60780: LD_INT 25
60782: DOUBLE
60783: EQUAL
60784: IFTRUE 60788
60786: GO 60844
60788: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60789: LD_ADDR_VAR 0 9
60793: PUSH
60794: LD_VAR 0 35
60798: PUSH
60799: LD_VAR 0 36
60803: PUSH
60804: LD_VAR 0 37
60808: PUSH
60809: LD_VAR 0 38
60813: PUSH
60814: LD_VAR 0 39
60818: PUSH
60819: LD_VAR 0 40
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: PUSH
60832: LD_VAR 0 4
60836: PUSH
60837: LD_INT 1
60839: PLUS
60840: ARRAY
60841: ST_TO_ADDR
60842: GO 61209
60844: LD_INT 6
60846: DOUBLE
60847: EQUAL
60848: IFTRUE 60900
60850: LD_INT 7
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60900
60856: LD_INT 8
60858: DOUBLE
60859: EQUAL
60860: IFTRUE 60900
60862: LD_INT 13
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60900
60868: LD_INT 12
60870: DOUBLE
60871: EQUAL
60872: IFTRUE 60900
60874: LD_INT 15
60876: DOUBLE
60877: EQUAL
60878: IFTRUE 60900
60880: LD_INT 11
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60900
60886: LD_INT 14
60888: DOUBLE
60889: EQUAL
60890: IFTRUE 60900
60892: LD_INT 10
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60900
60898: GO 60956
60900: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60901: LD_ADDR_VAR 0 9
60905: PUSH
60906: LD_VAR 0 41
60910: PUSH
60911: LD_VAR 0 42
60915: PUSH
60916: LD_VAR 0 43
60920: PUSH
60921: LD_VAR 0 44
60925: PUSH
60926: LD_VAR 0 45
60930: PUSH
60931: LD_VAR 0 46
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 4
60948: PUSH
60949: LD_INT 1
60951: PLUS
60952: ARRAY
60953: ST_TO_ADDR
60954: GO 61209
60956: LD_INT 36
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 60964
60962: GO 61020
60964: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60965: LD_ADDR_VAR 0 9
60969: PUSH
60970: LD_VAR 0 47
60974: PUSH
60975: LD_VAR 0 48
60979: PUSH
60980: LD_VAR 0 49
60984: PUSH
60985: LD_VAR 0 50
60989: PUSH
60990: LD_VAR 0 51
60994: PUSH
60995: LD_VAR 0 52
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: LD_VAR 0 4
61012: PUSH
61013: LD_INT 1
61015: PLUS
61016: ARRAY
61017: ST_TO_ADDR
61018: GO 61209
61020: LD_INT 4
61022: DOUBLE
61023: EQUAL
61024: IFTRUE 61046
61026: LD_INT 5
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61046
61032: LD_INT 34
61034: DOUBLE
61035: EQUAL
61036: IFTRUE 61046
61038: LD_INT 37
61040: DOUBLE
61041: EQUAL
61042: IFTRUE 61046
61044: GO 61102
61046: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61047: LD_ADDR_VAR 0 9
61051: PUSH
61052: LD_VAR 0 53
61056: PUSH
61057: LD_VAR 0 54
61061: PUSH
61062: LD_VAR 0 55
61066: PUSH
61067: LD_VAR 0 56
61071: PUSH
61072: LD_VAR 0 57
61076: PUSH
61077: LD_VAR 0 58
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: PUSH
61090: LD_VAR 0 4
61094: PUSH
61095: LD_INT 1
61097: PLUS
61098: ARRAY
61099: ST_TO_ADDR
61100: GO 61209
61102: LD_INT 31
61104: DOUBLE
61105: EQUAL
61106: IFTRUE 61152
61108: LD_INT 32
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61152
61114: LD_INT 33
61116: DOUBLE
61117: EQUAL
61118: IFTRUE 61152
61120: LD_INT 27
61122: DOUBLE
61123: EQUAL
61124: IFTRUE 61152
61126: LD_INT 26
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61152
61132: LD_INT 28
61134: DOUBLE
61135: EQUAL
61136: IFTRUE 61152
61138: LD_INT 29
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61152
61144: LD_INT 30
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61152
61150: GO 61208
61152: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61153: LD_ADDR_VAR 0 9
61157: PUSH
61158: LD_VAR 0 59
61162: PUSH
61163: LD_VAR 0 60
61167: PUSH
61168: LD_VAR 0 61
61172: PUSH
61173: LD_VAR 0 62
61177: PUSH
61178: LD_VAR 0 63
61182: PUSH
61183: LD_VAR 0 64
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: PUSH
61196: LD_VAR 0 4
61200: PUSH
61201: LD_INT 1
61203: PLUS
61204: ARRAY
61205: ST_TO_ADDR
61206: GO 61209
61208: POP
// temp_list2 = [ ] ;
61209: LD_ADDR_VAR 0 10
61213: PUSH
61214: EMPTY
61215: ST_TO_ADDR
// for i in temp_list do
61216: LD_ADDR_VAR 0 8
61220: PUSH
61221: LD_VAR 0 9
61225: PUSH
61226: FOR_IN
61227: IFFALSE 61279
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61229: LD_ADDR_VAR 0 10
61233: PUSH
61234: LD_VAR 0 10
61238: PUSH
61239: LD_VAR 0 8
61243: PUSH
61244: LD_INT 1
61246: ARRAY
61247: PUSH
61248: LD_VAR 0 2
61252: PLUS
61253: PUSH
61254: LD_VAR 0 8
61258: PUSH
61259: LD_INT 2
61261: ARRAY
61262: PUSH
61263: LD_VAR 0 3
61267: PLUS
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: ADD
61276: ST_TO_ADDR
61277: GO 61226
61279: POP
61280: POP
// result = temp_list2 ;
61281: LD_ADDR_VAR 0 7
61285: PUSH
61286: LD_VAR 0 10
61290: ST_TO_ADDR
// end ;
61291: LD_VAR 0 7
61295: RET
// export function EnemyInRange ( unit , dist ) ; begin
61296: LD_INT 0
61298: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61299: LD_ADDR_VAR 0 3
61303: PUSH
61304: LD_VAR 0 1
61308: PPUSH
61309: CALL_OW 255
61313: PPUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 250
61323: PPUSH
61324: LD_VAR 0 1
61328: PPUSH
61329: CALL_OW 251
61333: PPUSH
61334: LD_VAR 0 2
61338: PPUSH
61339: CALL 34698 0 4
61343: PUSH
61344: LD_INT 4
61346: ARRAY
61347: ST_TO_ADDR
// end ;
61348: LD_VAR 0 3
61352: RET
// export function PlayerSeeMe ( unit ) ; begin
61353: LD_INT 0
61355: PPUSH
// result := See ( your_side , unit ) ;
61356: LD_ADDR_VAR 0 2
61360: PUSH
61361: LD_OWVAR 2
61365: PPUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 292
61375: ST_TO_ADDR
// end ;
61376: LD_VAR 0 2
61380: RET
// export function ReverseDir ( unit ) ; begin
61381: LD_INT 0
61383: PPUSH
// if not unit then
61384: LD_VAR 0 1
61388: NOT
61389: IFFALSE 61393
// exit ;
61391: GO 61416
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61393: LD_ADDR_VAR 0 2
61397: PUSH
61398: LD_VAR 0 1
61402: PPUSH
61403: CALL_OW 254
61407: PUSH
61408: LD_INT 3
61410: PLUS
61411: PUSH
61412: LD_INT 6
61414: MOD
61415: ST_TO_ADDR
// end ;
61416: LD_VAR 0 2
61420: RET
// export function ReverseArray ( array ) ; var i ; begin
61421: LD_INT 0
61423: PPUSH
61424: PPUSH
// if not array then
61425: LD_VAR 0 1
61429: NOT
61430: IFFALSE 61434
// exit ;
61432: GO 61489
// result := [ ] ;
61434: LD_ADDR_VAR 0 2
61438: PUSH
61439: EMPTY
61440: ST_TO_ADDR
// for i := array downto 1 do
61441: LD_ADDR_VAR 0 3
61445: PUSH
61446: DOUBLE
61447: LD_VAR 0 1
61451: INC
61452: ST_TO_ADDR
61453: LD_INT 1
61455: PUSH
61456: FOR_DOWNTO
61457: IFFALSE 61487
// result := Join ( result , array [ i ] ) ;
61459: LD_ADDR_VAR 0 2
61463: PUSH
61464: LD_VAR 0 2
61468: PPUSH
61469: LD_VAR 0 1
61473: PUSH
61474: LD_VAR 0 3
61478: ARRAY
61479: PPUSH
61480: CALL 66114 0 2
61484: ST_TO_ADDR
61485: GO 61456
61487: POP
61488: POP
// end ;
61489: LD_VAR 0 2
61493: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61494: LD_INT 0
61496: PPUSH
61497: PPUSH
61498: PPUSH
61499: PPUSH
61500: PPUSH
61501: PPUSH
// if not unit or not hexes then
61502: LD_VAR 0 1
61506: NOT
61507: PUSH
61508: LD_VAR 0 2
61512: NOT
61513: OR
61514: IFFALSE 61518
// exit ;
61516: GO 61641
// dist := 9999 ;
61518: LD_ADDR_VAR 0 5
61522: PUSH
61523: LD_INT 9999
61525: ST_TO_ADDR
// for i = 1 to hexes do
61526: LD_ADDR_VAR 0 4
61530: PUSH
61531: DOUBLE
61532: LD_INT 1
61534: DEC
61535: ST_TO_ADDR
61536: LD_VAR 0 2
61540: PUSH
61541: FOR_TO
61542: IFFALSE 61629
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61544: LD_ADDR_VAR 0 6
61548: PUSH
61549: LD_VAR 0 1
61553: PPUSH
61554: LD_VAR 0 2
61558: PUSH
61559: LD_VAR 0 4
61563: ARRAY
61564: PUSH
61565: LD_INT 1
61567: ARRAY
61568: PPUSH
61569: LD_VAR 0 2
61573: PUSH
61574: LD_VAR 0 4
61578: ARRAY
61579: PUSH
61580: LD_INT 2
61582: ARRAY
61583: PPUSH
61584: CALL_OW 297
61588: ST_TO_ADDR
// if tdist < dist then
61589: LD_VAR 0 6
61593: PUSH
61594: LD_VAR 0 5
61598: LESS
61599: IFFALSE 61627
// begin hex := hexes [ i ] ;
61601: LD_ADDR_VAR 0 8
61605: PUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_VAR 0 4
61615: ARRAY
61616: ST_TO_ADDR
// dist := tdist ;
61617: LD_ADDR_VAR 0 5
61621: PUSH
61622: LD_VAR 0 6
61626: ST_TO_ADDR
// end ; end ;
61627: GO 61541
61629: POP
61630: POP
// result := hex ;
61631: LD_ADDR_VAR 0 3
61635: PUSH
61636: LD_VAR 0 8
61640: ST_TO_ADDR
// end ;
61641: LD_VAR 0 3
61645: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61646: LD_INT 0
61648: PPUSH
61649: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61650: LD_VAR 0 1
61654: NOT
61655: PUSH
61656: LD_VAR 0 1
61660: PUSH
61661: LD_INT 21
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 23
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PPUSH
61685: CALL_OW 69
61689: IN
61690: NOT
61691: OR
61692: IFFALSE 61696
// exit ;
61694: GO 61743
// for i = 1 to 3 do
61696: LD_ADDR_VAR 0 3
61700: PUSH
61701: DOUBLE
61702: LD_INT 1
61704: DEC
61705: ST_TO_ADDR
61706: LD_INT 3
61708: PUSH
61709: FOR_TO
61710: IFFALSE 61741
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61712: LD_VAR 0 1
61716: PPUSH
61717: CALL_OW 250
61721: PPUSH
61722: LD_VAR 0 1
61726: PPUSH
61727: CALL_OW 251
61731: PPUSH
61732: LD_INT 1
61734: PPUSH
61735: CALL_OW 453
61739: GO 61709
61741: POP
61742: POP
// end ;
61743: LD_VAR 0 2
61747: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61748: LD_INT 0
61750: PPUSH
61751: PPUSH
61752: PPUSH
61753: PPUSH
61754: PPUSH
61755: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61756: LD_VAR 0 1
61760: NOT
61761: PUSH
61762: LD_VAR 0 2
61766: NOT
61767: OR
61768: PUSH
61769: LD_VAR 0 1
61773: PPUSH
61774: CALL_OW 314
61778: OR
61779: IFFALSE 61783
// exit ;
61781: GO 62224
// x := GetX ( enemy_unit ) ;
61783: LD_ADDR_VAR 0 7
61787: PUSH
61788: LD_VAR 0 2
61792: PPUSH
61793: CALL_OW 250
61797: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61798: LD_ADDR_VAR 0 8
61802: PUSH
61803: LD_VAR 0 2
61807: PPUSH
61808: CALL_OW 251
61812: ST_TO_ADDR
// if not x or not y then
61813: LD_VAR 0 7
61817: NOT
61818: PUSH
61819: LD_VAR 0 8
61823: NOT
61824: OR
61825: IFFALSE 61829
// exit ;
61827: GO 62224
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61829: LD_ADDR_VAR 0 6
61833: PUSH
61834: LD_VAR 0 7
61838: PPUSH
61839: LD_INT 0
61841: PPUSH
61842: LD_INT 4
61844: PPUSH
61845: CALL_OW 272
61849: PUSH
61850: LD_VAR 0 8
61854: PPUSH
61855: LD_INT 0
61857: PPUSH
61858: LD_INT 4
61860: PPUSH
61861: CALL_OW 273
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_VAR 0 7
61874: PPUSH
61875: LD_INT 1
61877: PPUSH
61878: LD_INT 4
61880: PPUSH
61881: CALL_OW 272
61885: PUSH
61886: LD_VAR 0 8
61890: PPUSH
61891: LD_INT 1
61893: PPUSH
61894: LD_INT 4
61896: PPUSH
61897: CALL_OW 273
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_VAR 0 7
61910: PPUSH
61911: LD_INT 2
61913: PPUSH
61914: LD_INT 4
61916: PPUSH
61917: CALL_OW 272
61921: PUSH
61922: LD_VAR 0 8
61926: PPUSH
61927: LD_INT 2
61929: PPUSH
61930: LD_INT 4
61932: PPUSH
61933: CALL_OW 273
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_VAR 0 7
61946: PPUSH
61947: LD_INT 3
61949: PPUSH
61950: LD_INT 4
61952: PPUSH
61953: CALL_OW 272
61957: PUSH
61958: LD_VAR 0 8
61962: PPUSH
61963: LD_INT 3
61965: PPUSH
61966: LD_INT 4
61968: PPUSH
61969: CALL_OW 273
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_VAR 0 7
61982: PPUSH
61983: LD_INT 4
61985: PPUSH
61986: LD_INT 4
61988: PPUSH
61989: CALL_OW 272
61993: PUSH
61994: LD_VAR 0 8
61998: PPUSH
61999: LD_INT 4
62001: PPUSH
62002: LD_INT 4
62004: PPUSH
62005: CALL_OW 273
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_VAR 0 7
62018: PPUSH
62019: LD_INT 5
62021: PPUSH
62022: LD_INT 4
62024: PPUSH
62025: CALL_OW 272
62029: PUSH
62030: LD_VAR 0 8
62034: PPUSH
62035: LD_INT 5
62037: PPUSH
62038: LD_INT 4
62040: PPUSH
62041: CALL_OW 273
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: ST_TO_ADDR
// for i = tmp downto 1 do
62058: LD_ADDR_VAR 0 4
62062: PUSH
62063: DOUBLE
62064: LD_VAR 0 6
62068: INC
62069: ST_TO_ADDR
62070: LD_INT 1
62072: PUSH
62073: FOR_DOWNTO
62074: IFFALSE 62175
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62076: LD_VAR 0 6
62080: PUSH
62081: LD_VAR 0 4
62085: ARRAY
62086: PUSH
62087: LD_INT 1
62089: ARRAY
62090: PPUSH
62091: LD_VAR 0 6
62095: PUSH
62096: LD_VAR 0 4
62100: ARRAY
62101: PUSH
62102: LD_INT 2
62104: ARRAY
62105: PPUSH
62106: CALL_OW 488
62110: NOT
62111: PUSH
62112: LD_VAR 0 6
62116: PUSH
62117: LD_VAR 0 4
62121: ARRAY
62122: PUSH
62123: LD_INT 1
62125: ARRAY
62126: PPUSH
62127: LD_VAR 0 6
62131: PUSH
62132: LD_VAR 0 4
62136: ARRAY
62137: PUSH
62138: LD_INT 2
62140: ARRAY
62141: PPUSH
62142: CALL_OW 428
62146: PUSH
62147: LD_INT 0
62149: NONEQUAL
62150: OR
62151: IFFALSE 62173
// tmp := Delete ( tmp , i ) ;
62153: LD_ADDR_VAR 0 6
62157: PUSH
62158: LD_VAR 0 6
62162: PPUSH
62163: LD_VAR 0 4
62167: PPUSH
62168: CALL_OW 3
62172: ST_TO_ADDR
62173: GO 62073
62175: POP
62176: POP
// j := GetClosestHex ( unit , tmp ) ;
62177: LD_ADDR_VAR 0 5
62181: PUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: LD_VAR 0 6
62191: PPUSH
62192: CALL 61494 0 2
62196: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62197: LD_VAR 0 1
62201: PPUSH
62202: LD_VAR 0 5
62206: PUSH
62207: LD_INT 1
62209: ARRAY
62210: PPUSH
62211: LD_VAR 0 5
62215: PUSH
62216: LD_INT 2
62218: ARRAY
62219: PPUSH
62220: CALL_OW 111
// end ;
62224: LD_VAR 0 3
62228: RET
// export function PrepareApemanSoldier ( ) ; begin
62229: LD_INT 0
62231: PPUSH
// uc_nation := 0 ;
62232: LD_ADDR_OWVAR 21
62236: PUSH
62237: LD_INT 0
62239: ST_TO_ADDR
// hc_sex := sex_male ;
62240: LD_ADDR_OWVAR 27
62244: PUSH
62245: LD_INT 1
62247: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62248: LD_ADDR_OWVAR 28
62252: PUSH
62253: LD_INT 15
62255: ST_TO_ADDR
// hc_gallery :=  ;
62256: LD_ADDR_OWVAR 33
62260: PUSH
62261: LD_STRING 
62263: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62264: LD_ADDR_OWVAR 31
62268: PUSH
62269: LD_INT 0
62271: PPUSH
62272: LD_INT 3
62274: PPUSH
62275: CALL_OW 12
62279: PUSH
62280: LD_INT 0
62282: PPUSH
62283: LD_INT 3
62285: PPUSH
62286: CALL_OW 12
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: ST_TO_ADDR
// end ;
62303: LD_VAR 0 1
62307: RET
// export function PrepareApemanEngineer ( ) ; begin
62308: LD_INT 0
62310: PPUSH
// uc_nation := 0 ;
62311: LD_ADDR_OWVAR 21
62315: PUSH
62316: LD_INT 0
62318: ST_TO_ADDR
// hc_sex := sex_male ;
62319: LD_ADDR_OWVAR 27
62323: PUSH
62324: LD_INT 1
62326: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62327: LD_ADDR_OWVAR 28
62331: PUSH
62332: LD_INT 16
62334: ST_TO_ADDR
// hc_gallery :=  ;
62335: LD_ADDR_OWVAR 33
62339: PUSH
62340: LD_STRING 
62342: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62343: LD_ADDR_OWVAR 31
62347: PUSH
62348: LD_INT 0
62350: PPUSH
62351: LD_INT 3
62353: PPUSH
62354: CALL_OW 12
62358: PUSH
62359: LD_INT 0
62361: PPUSH
62362: LD_INT 3
62364: PPUSH
62365: CALL_OW 12
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// end ;
62382: LD_VAR 0 1
62386: RET
// export function PrepareApeman ( agressivity ) ; begin
62387: LD_INT 0
62389: PPUSH
// uc_side := 0 ;
62390: LD_ADDR_OWVAR 20
62394: PUSH
62395: LD_INT 0
62397: ST_TO_ADDR
// uc_nation := 0 ;
62398: LD_ADDR_OWVAR 21
62402: PUSH
62403: LD_INT 0
62405: ST_TO_ADDR
// hc_sex := sex_male ;
62406: LD_ADDR_OWVAR 27
62410: PUSH
62411: LD_INT 1
62413: ST_TO_ADDR
// hc_class := class_apeman ;
62414: LD_ADDR_OWVAR 28
62418: PUSH
62419: LD_INT 12
62421: ST_TO_ADDR
// hc_gallery :=  ;
62422: LD_ADDR_OWVAR 33
62426: PUSH
62427: LD_STRING 
62429: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62430: LD_ADDR_OWVAR 35
62434: PUSH
62435: LD_VAR 0 1
62439: NEG
62440: PPUSH
62441: LD_VAR 0 1
62445: PPUSH
62446: CALL_OW 12
62450: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62451: LD_ADDR_OWVAR 31
62455: PUSH
62456: LD_INT 0
62458: PPUSH
62459: LD_INT 3
62461: PPUSH
62462: CALL_OW 12
62466: PUSH
62467: LD_INT 0
62469: PPUSH
62470: LD_INT 3
62472: PPUSH
62473: CALL_OW 12
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: ST_TO_ADDR
// end ;
62490: LD_VAR 0 2
62494: RET
// export function PrepareTiger ( agressivity ) ; begin
62495: LD_INT 0
62497: PPUSH
// uc_side := 0 ;
62498: LD_ADDR_OWVAR 20
62502: PUSH
62503: LD_INT 0
62505: ST_TO_ADDR
// uc_nation := 0 ;
62506: LD_ADDR_OWVAR 21
62510: PUSH
62511: LD_INT 0
62513: ST_TO_ADDR
// hc_class := class_tiger ;
62514: LD_ADDR_OWVAR 28
62518: PUSH
62519: LD_INT 14
62521: ST_TO_ADDR
// hc_gallery :=  ;
62522: LD_ADDR_OWVAR 33
62526: PUSH
62527: LD_STRING 
62529: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62530: LD_ADDR_OWVAR 35
62534: PUSH
62535: LD_VAR 0 1
62539: NEG
62540: PPUSH
62541: LD_VAR 0 1
62545: PPUSH
62546: CALL_OW 12
62550: ST_TO_ADDR
// end ;
62551: LD_VAR 0 2
62555: RET
// export function PrepareEnchidna ( ) ; begin
62556: LD_INT 0
62558: PPUSH
// uc_side := 0 ;
62559: LD_ADDR_OWVAR 20
62563: PUSH
62564: LD_INT 0
62566: ST_TO_ADDR
// uc_nation := 0 ;
62567: LD_ADDR_OWVAR 21
62571: PUSH
62572: LD_INT 0
62574: ST_TO_ADDR
// hc_class := class_baggie ;
62575: LD_ADDR_OWVAR 28
62579: PUSH
62580: LD_INT 13
62582: ST_TO_ADDR
// hc_gallery :=  ;
62583: LD_ADDR_OWVAR 33
62587: PUSH
62588: LD_STRING 
62590: ST_TO_ADDR
// end ;
62591: LD_VAR 0 1
62595: RET
// export function PrepareFrog ( ) ; begin
62596: LD_INT 0
62598: PPUSH
// uc_side := 0 ;
62599: LD_ADDR_OWVAR 20
62603: PUSH
62604: LD_INT 0
62606: ST_TO_ADDR
// uc_nation := 0 ;
62607: LD_ADDR_OWVAR 21
62611: PUSH
62612: LD_INT 0
62614: ST_TO_ADDR
// hc_class := class_frog ;
62615: LD_ADDR_OWVAR 28
62619: PUSH
62620: LD_INT 19
62622: ST_TO_ADDR
// hc_gallery :=  ;
62623: LD_ADDR_OWVAR 33
62627: PUSH
62628: LD_STRING 
62630: ST_TO_ADDR
// end ;
62631: LD_VAR 0 1
62635: RET
// export function PrepareFish ( ) ; begin
62636: LD_INT 0
62638: PPUSH
// uc_side := 0 ;
62639: LD_ADDR_OWVAR 20
62643: PUSH
62644: LD_INT 0
62646: ST_TO_ADDR
// uc_nation := 0 ;
62647: LD_ADDR_OWVAR 21
62651: PUSH
62652: LD_INT 0
62654: ST_TO_ADDR
// hc_class := class_fish ;
62655: LD_ADDR_OWVAR 28
62659: PUSH
62660: LD_INT 20
62662: ST_TO_ADDR
// hc_gallery :=  ;
62663: LD_ADDR_OWVAR 33
62667: PUSH
62668: LD_STRING 
62670: ST_TO_ADDR
// end ;
62671: LD_VAR 0 1
62675: RET
// export function PrepareBird ( ) ; begin
62676: LD_INT 0
62678: PPUSH
// uc_side := 0 ;
62679: LD_ADDR_OWVAR 20
62683: PUSH
62684: LD_INT 0
62686: ST_TO_ADDR
// uc_nation := 0 ;
62687: LD_ADDR_OWVAR 21
62691: PUSH
62692: LD_INT 0
62694: ST_TO_ADDR
// hc_class := class_phororhacos ;
62695: LD_ADDR_OWVAR 28
62699: PUSH
62700: LD_INT 18
62702: ST_TO_ADDR
// hc_gallery :=  ;
62703: LD_ADDR_OWVAR 33
62707: PUSH
62708: LD_STRING 
62710: ST_TO_ADDR
// end ;
62711: LD_VAR 0 1
62715: RET
// export function PrepareHorse ( ) ; begin
62716: LD_INT 0
62718: PPUSH
// uc_side := 0 ;
62719: LD_ADDR_OWVAR 20
62723: PUSH
62724: LD_INT 0
62726: ST_TO_ADDR
// uc_nation := 0 ;
62727: LD_ADDR_OWVAR 21
62731: PUSH
62732: LD_INT 0
62734: ST_TO_ADDR
// hc_class := class_horse ;
62735: LD_ADDR_OWVAR 28
62739: PUSH
62740: LD_INT 21
62742: ST_TO_ADDR
// hc_gallery :=  ;
62743: LD_ADDR_OWVAR 33
62747: PUSH
62748: LD_STRING 
62750: ST_TO_ADDR
// end ;
62751: LD_VAR 0 1
62755: RET
// export function PrepareMastodont ( ) ; begin
62756: LD_INT 0
62758: PPUSH
// uc_side := 0 ;
62759: LD_ADDR_OWVAR 20
62763: PUSH
62764: LD_INT 0
62766: ST_TO_ADDR
// uc_nation := 0 ;
62767: LD_ADDR_OWVAR 21
62771: PUSH
62772: LD_INT 0
62774: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62775: LD_ADDR_OWVAR 37
62779: PUSH
62780: LD_INT 31
62782: ST_TO_ADDR
// vc_control := control_rider ;
62783: LD_ADDR_OWVAR 38
62787: PUSH
62788: LD_INT 4
62790: ST_TO_ADDR
// end ;
62791: LD_VAR 0 1
62795: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62796: LD_INT 0
62798: PPUSH
62799: PPUSH
62800: PPUSH
// uc_side = 0 ;
62801: LD_ADDR_OWVAR 20
62805: PUSH
62806: LD_INT 0
62808: ST_TO_ADDR
// uc_nation = 0 ;
62809: LD_ADDR_OWVAR 21
62813: PUSH
62814: LD_INT 0
62816: ST_TO_ADDR
// InitHc_All ( ) ;
62817: CALL_OW 584
// InitVc ;
62821: CALL_OW 20
// if mastodonts then
62825: LD_VAR 0 6
62829: IFFALSE 62896
// for i = 1 to mastodonts do
62831: LD_ADDR_VAR 0 11
62835: PUSH
62836: DOUBLE
62837: LD_INT 1
62839: DEC
62840: ST_TO_ADDR
62841: LD_VAR 0 6
62845: PUSH
62846: FOR_TO
62847: IFFALSE 62894
// begin vc_chassis := 31 ;
62849: LD_ADDR_OWVAR 37
62853: PUSH
62854: LD_INT 31
62856: ST_TO_ADDR
// vc_control := control_rider ;
62857: LD_ADDR_OWVAR 38
62861: PUSH
62862: LD_INT 4
62864: ST_TO_ADDR
// animal := CreateVehicle ;
62865: LD_ADDR_VAR 0 12
62869: PUSH
62870: CALL_OW 45
62874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62875: LD_VAR 0 12
62879: PPUSH
62880: LD_VAR 0 8
62884: PPUSH
62885: LD_INT 0
62887: PPUSH
62888: CALL 65031 0 3
// end ;
62892: GO 62846
62894: POP
62895: POP
// if horses then
62896: LD_VAR 0 5
62900: IFFALSE 62967
// for i = 1 to horses do
62902: LD_ADDR_VAR 0 11
62906: PUSH
62907: DOUBLE
62908: LD_INT 1
62910: DEC
62911: ST_TO_ADDR
62912: LD_VAR 0 5
62916: PUSH
62917: FOR_TO
62918: IFFALSE 62965
// begin hc_class := 21 ;
62920: LD_ADDR_OWVAR 28
62924: PUSH
62925: LD_INT 21
62927: ST_TO_ADDR
// hc_gallery :=  ;
62928: LD_ADDR_OWVAR 33
62932: PUSH
62933: LD_STRING 
62935: ST_TO_ADDR
// animal := CreateHuman ;
62936: LD_ADDR_VAR 0 12
62940: PUSH
62941: CALL_OW 44
62945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62946: LD_VAR 0 12
62950: PPUSH
62951: LD_VAR 0 8
62955: PPUSH
62956: LD_INT 0
62958: PPUSH
62959: CALL 65031 0 3
// end ;
62963: GO 62917
62965: POP
62966: POP
// if birds then
62967: LD_VAR 0 1
62971: IFFALSE 63038
// for i = 1 to birds do
62973: LD_ADDR_VAR 0 11
62977: PUSH
62978: DOUBLE
62979: LD_INT 1
62981: DEC
62982: ST_TO_ADDR
62983: LD_VAR 0 1
62987: PUSH
62988: FOR_TO
62989: IFFALSE 63036
// begin hc_class = 18 ;
62991: LD_ADDR_OWVAR 28
62995: PUSH
62996: LD_INT 18
62998: ST_TO_ADDR
// hc_gallery =  ;
62999: LD_ADDR_OWVAR 33
63003: PUSH
63004: LD_STRING 
63006: ST_TO_ADDR
// animal := CreateHuman ;
63007: LD_ADDR_VAR 0 12
63011: PUSH
63012: CALL_OW 44
63016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63017: LD_VAR 0 12
63021: PPUSH
63022: LD_VAR 0 8
63026: PPUSH
63027: LD_INT 0
63029: PPUSH
63030: CALL 65031 0 3
// end ;
63034: GO 62988
63036: POP
63037: POP
// if tigers then
63038: LD_VAR 0 2
63042: IFFALSE 63126
// for i = 1 to tigers do
63044: LD_ADDR_VAR 0 11
63048: PUSH
63049: DOUBLE
63050: LD_INT 1
63052: DEC
63053: ST_TO_ADDR
63054: LD_VAR 0 2
63058: PUSH
63059: FOR_TO
63060: IFFALSE 63124
// begin hc_class = class_tiger ;
63062: LD_ADDR_OWVAR 28
63066: PUSH
63067: LD_INT 14
63069: ST_TO_ADDR
// hc_gallery =  ;
63070: LD_ADDR_OWVAR 33
63074: PUSH
63075: LD_STRING 
63077: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63078: LD_ADDR_OWVAR 35
63082: PUSH
63083: LD_INT 7
63085: NEG
63086: PPUSH
63087: LD_INT 7
63089: PPUSH
63090: CALL_OW 12
63094: ST_TO_ADDR
// animal := CreateHuman ;
63095: LD_ADDR_VAR 0 12
63099: PUSH
63100: CALL_OW 44
63104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63105: LD_VAR 0 12
63109: PPUSH
63110: LD_VAR 0 8
63114: PPUSH
63115: LD_INT 0
63117: PPUSH
63118: CALL 65031 0 3
// end ;
63122: GO 63059
63124: POP
63125: POP
// if apemans then
63126: LD_VAR 0 3
63130: IFFALSE 63253
// for i = 1 to apemans do
63132: LD_ADDR_VAR 0 11
63136: PUSH
63137: DOUBLE
63138: LD_INT 1
63140: DEC
63141: ST_TO_ADDR
63142: LD_VAR 0 3
63146: PUSH
63147: FOR_TO
63148: IFFALSE 63251
// begin hc_class = class_apeman ;
63150: LD_ADDR_OWVAR 28
63154: PUSH
63155: LD_INT 12
63157: ST_TO_ADDR
// hc_gallery =  ;
63158: LD_ADDR_OWVAR 33
63162: PUSH
63163: LD_STRING 
63165: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63166: LD_ADDR_OWVAR 35
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PPUSH
63175: LD_INT 2
63177: PPUSH
63178: CALL_OW 12
63182: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63183: LD_ADDR_OWVAR 31
63187: PUSH
63188: LD_INT 1
63190: PPUSH
63191: LD_INT 3
63193: PPUSH
63194: CALL_OW 12
63198: PUSH
63199: LD_INT 1
63201: PPUSH
63202: LD_INT 3
63204: PPUSH
63205: CALL_OW 12
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// animal := CreateHuman ;
63222: LD_ADDR_VAR 0 12
63226: PUSH
63227: CALL_OW 44
63231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63232: LD_VAR 0 12
63236: PPUSH
63237: LD_VAR 0 8
63241: PPUSH
63242: LD_INT 0
63244: PPUSH
63245: CALL 65031 0 3
// end ;
63249: GO 63147
63251: POP
63252: POP
// if enchidnas then
63253: LD_VAR 0 4
63257: IFFALSE 63324
// for i = 1 to enchidnas do
63259: LD_ADDR_VAR 0 11
63263: PUSH
63264: DOUBLE
63265: LD_INT 1
63267: DEC
63268: ST_TO_ADDR
63269: LD_VAR 0 4
63273: PUSH
63274: FOR_TO
63275: IFFALSE 63322
// begin hc_class = 13 ;
63277: LD_ADDR_OWVAR 28
63281: PUSH
63282: LD_INT 13
63284: ST_TO_ADDR
// hc_gallery =  ;
63285: LD_ADDR_OWVAR 33
63289: PUSH
63290: LD_STRING 
63292: ST_TO_ADDR
// animal := CreateHuman ;
63293: LD_ADDR_VAR 0 12
63297: PUSH
63298: CALL_OW 44
63302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63303: LD_VAR 0 12
63307: PPUSH
63308: LD_VAR 0 8
63312: PPUSH
63313: LD_INT 0
63315: PPUSH
63316: CALL 65031 0 3
// end ;
63320: GO 63274
63322: POP
63323: POP
// if fishes then
63324: LD_VAR 0 7
63328: IFFALSE 63395
// for i = 1 to fishes do
63330: LD_ADDR_VAR 0 11
63334: PUSH
63335: DOUBLE
63336: LD_INT 1
63338: DEC
63339: ST_TO_ADDR
63340: LD_VAR 0 7
63344: PUSH
63345: FOR_TO
63346: IFFALSE 63393
// begin hc_class = 20 ;
63348: LD_ADDR_OWVAR 28
63352: PUSH
63353: LD_INT 20
63355: ST_TO_ADDR
// hc_gallery =  ;
63356: LD_ADDR_OWVAR 33
63360: PUSH
63361: LD_STRING 
63363: ST_TO_ADDR
// animal := CreateHuman ;
63364: LD_ADDR_VAR 0 12
63368: PUSH
63369: CALL_OW 44
63373: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63374: LD_VAR 0 12
63378: PPUSH
63379: LD_VAR 0 9
63383: PPUSH
63384: LD_INT 0
63386: PPUSH
63387: CALL 65031 0 3
// end ;
63391: GO 63345
63393: POP
63394: POP
// end ;
63395: LD_VAR 0 10
63399: RET
// export function WantHeal ( sci , unit ) ; begin
63400: LD_INT 0
63402: PPUSH
// if GetTaskList ( sci ) > 0 then
63403: LD_VAR 0 1
63407: PPUSH
63408: CALL_OW 437
63412: PUSH
63413: LD_INT 0
63415: GREATER
63416: IFFALSE 63486
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 437
63427: PUSH
63428: LD_INT 1
63430: ARRAY
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: PUSH
63436: LD_STRING l
63438: EQUAL
63439: PUSH
63440: LD_VAR 0 1
63444: PPUSH
63445: CALL_OW 437
63449: PUSH
63450: LD_INT 1
63452: ARRAY
63453: PUSH
63454: LD_INT 4
63456: ARRAY
63457: PUSH
63458: LD_VAR 0 2
63462: EQUAL
63463: AND
63464: IFFALSE 63476
// result := true else
63466: LD_ADDR_VAR 0 3
63470: PUSH
63471: LD_INT 1
63473: ST_TO_ADDR
63474: GO 63484
// result := false ;
63476: LD_ADDR_VAR 0 3
63480: PUSH
63481: LD_INT 0
63483: ST_TO_ADDR
// end else
63484: GO 63494
// result := false ;
63486: LD_ADDR_VAR 0 3
63490: PUSH
63491: LD_INT 0
63493: ST_TO_ADDR
// end ;
63494: LD_VAR 0 3
63498: RET
// export function HealTarget ( sci ) ; begin
63499: LD_INT 0
63501: PPUSH
// if not sci then
63502: LD_VAR 0 1
63506: NOT
63507: IFFALSE 63511
// exit ;
63509: GO 63576
// result := 0 ;
63511: LD_ADDR_VAR 0 2
63515: PUSH
63516: LD_INT 0
63518: ST_TO_ADDR
// if GetTaskList ( sci ) then
63519: LD_VAR 0 1
63523: PPUSH
63524: CALL_OW 437
63528: IFFALSE 63576
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63530: LD_VAR 0 1
63534: PPUSH
63535: CALL_OW 437
63539: PUSH
63540: LD_INT 1
63542: ARRAY
63543: PUSH
63544: LD_INT 1
63546: ARRAY
63547: PUSH
63548: LD_STRING l
63550: EQUAL
63551: IFFALSE 63576
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63553: LD_ADDR_VAR 0 2
63557: PUSH
63558: LD_VAR 0 1
63562: PPUSH
63563: CALL_OW 437
63567: PUSH
63568: LD_INT 1
63570: ARRAY
63571: PUSH
63572: LD_INT 4
63574: ARRAY
63575: ST_TO_ADDR
// end ;
63576: LD_VAR 0 2
63580: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63581: LD_INT 0
63583: PPUSH
63584: PPUSH
63585: PPUSH
63586: PPUSH
// if not base_units then
63587: LD_VAR 0 1
63591: NOT
63592: IFFALSE 63596
// exit ;
63594: GO 63683
// result := false ;
63596: LD_ADDR_VAR 0 2
63600: PUSH
63601: LD_INT 0
63603: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63604: LD_ADDR_VAR 0 5
63608: PUSH
63609: LD_VAR 0 1
63613: PPUSH
63614: LD_INT 21
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PPUSH
63624: CALL_OW 72
63628: ST_TO_ADDR
// if not tmp then
63629: LD_VAR 0 5
63633: NOT
63634: IFFALSE 63638
// exit ;
63636: GO 63683
// for i in tmp do
63638: LD_ADDR_VAR 0 3
63642: PUSH
63643: LD_VAR 0 5
63647: PUSH
63648: FOR_IN
63649: IFFALSE 63681
// begin result := EnemyInRange ( i , 22 ) ;
63651: LD_ADDR_VAR 0 2
63655: PUSH
63656: LD_VAR 0 3
63660: PPUSH
63661: LD_INT 22
63663: PPUSH
63664: CALL 61296 0 2
63668: ST_TO_ADDR
// if result then
63669: LD_VAR 0 2
63673: IFFALSE 63679
// exit ;
63675: POP
63676: POP
63677: GO 63683
// end ;
63679: GO 63648
63681: POP
63682: POP
// end ;
63683: LD_VAR 0 2
63687: RET
// export function FilterByTag ( units , tag ) ; begin
63688: LD_INT 0
63690: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63691: LD_ADDR_VAR 0 3
63695: PUSH
63696: LD_VAR 0 1
63700: PPUSH
63701: LD_INT 120
63703: PUSH
63704: LD_VAR 0 2
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PPUSH
63713: CALL_OW 72
63717: ST_TO_ADDR
// end ;
63718: LD_VAR 0 3
63722: RET
// export function IsDriver ( un ) ; begin
63723: LD_INT 0
63725: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63726: LD_ADDR_VAR 0 2
63730: PUSH
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 55
63738: PUSH
63739: EMPTY
63740: LIST
63741: PPUSH
63742: CALL_OW 69
63746: IN
63747: ST_TO_ADDR
// end ;
63748: LD_VAR 0 2
63752: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63753: LD_INT 0
63755: PPUSH
63756: PPUSH
// list := [ ] ;
63757: LD_ADDR_VAR 0 5
63761: PUSH
63762: EMPTY
63763: ST_TO_ADDR
// case d of 0 :
63764: LD_VAR 0 3
63768: PUSH
63769: LD_INT 0
63771: DOUBLE
63772: EQUAL
63773: IFTRUE 63777
63775: GO 63910
63777: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63778: LD_ADDR_VAR 0 5
63782: PUSH
63783: LD_VAR 0 1
63787: PUSH
63788: LD_INT 4
63790: MINUS
63791: PUSH
63792: LD_VAR 0 2
63796: PUSH
63797: LD_INT 4
63799: MINUS
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: LIST
63808: PUSH
63809: LD_VAR 0 1
63813: PUSH
63814: LD_INT 3
63816: MINUS
63817: PUSH
63818: LD_VAR 0 2
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: LIST
63830: PUSH
63831: LD_VAR 0 1
63835: PUSH
63836: LD_INT 4
63838: PLUS
63839: PUSH
63840: LD_VAR 0 2
63844: PUSH
63845: LD_INT 4
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: LD_VAR 0 1
63857: PUSH
63858: LD_INT 3
63860: PLUS
63861: PUSH
63862: LD_VAR 0 2
63866: PUSH
63867: LD_INT 3
63869: PLUS
63870: PUSH
63871: LD_INT 5
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: PUSH
63879: LD_VAR 0 1
63883: PUSH
63884: LD_VAR 0 2
63888: PUSH
63889: LD_INT 4
63891: PLUS
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: ST_TO_ADDR
// end ; 1 :
63908: GO 64608
63910: LD_INT 1
63912: DOUBLE
63913: EQUAL
63914: IFTRUE 63918
63916: GO 64051
63918: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63919: LD_ADDR_VAR 0 5
63923: PUSH
63924: LD_VAR 0 1
63928: PUSH
63929: LD_VAR 0 2
63933: PUSH
63934: LD_INT 4
63936: MINUS
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: PUSH
63946: LD_VAR 0 1
63950: PUSH
63951: LD_INT 3
63953: MINUS
63954: PUSH
63955: LD_VAR 0 2
63959: PUSH
63960: LD_INT 3
63962: MINUS
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: PUSH
63972: LD_VAR 0 1
63976: PUSH
63977: LD_INT 4
63979: MINUS
63980: PUSH
63981: LD_VAR 0 2
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: PUSH
63994: LD_VAR 0 1
63998: PUSH
63999: LD_VAR 0 2
64003: PUSH
64004: LD_INT 3
64006: PLUS
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: PUSH
64016: LD_VAR 0 1
64020: PUSH
64021: LD_INT 4
64023: PLUS
64024: PUSH
64025: LD_VAR 0 2
64029: PUSH
64030: LD_INT 4
64032: PLUS
64033: PUSH
64034: LD_INT 5
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: ST_TO_ADDR
// end ; 2 :
64049: GO 64608
64051: LD_INT 2
64053: DOUBLE
64054: EQUAL
64055: IFTRUE 64059
64057: GO 64188
64059: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64060: LD_ADDR_VAR 0 5
64064: PUSH
64065: LD_VAR 0 1
64069: PUSH
64070: LD_VAR 0 2
64074: PUSH
64075: LD_INT 3
64077: MINUS
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: PUSH
64087: LD_VAR 0 1
64091: PUSH
64092: LD_INT 4
64094: PLUS
64095: PUSH
64096: LD_VAR 0 2
64100: PUSH
64101: LD_INT 4
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: PUSH
64109: LD_VAR 0 1
64113: PUSH
64114: LD_VAR 0 2
64118: PUSH
64119: LD_INT 4
64121: PLUS
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: PUSH
64131: LD_VAR 0 1
64135: PUSH
64136: LD_INT 3
64138: MINUS
64139: PUSH
64140: LD_VAR 0 2
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: LIST
64152: PUSH
64153: LD_VAR 0 1
64157: PUSH
64158: LD_INT 4
64160: MINUS
64161: PUSH
64162: LD_VAR 0 2
64166: PUSH
64167: LD_INT 4
64169: MINUS
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// end ; 3 :
64186: GO 64608
64188: LD_INT 3
64190: DOUBLE
64191: EQUAL
64192: IFTRUE 64196
64194: GO 64329
64196: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64197: LD_ADDR_VAR 0 5
64201: PUSH
64202: LD_VAR 0 1
64206: PUSH
64207: LD_INT 3
64209: PLUS
64210: PUSH
64211: LD_VAR 0 2
64215: PUSH
64216: LD_INT 4
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: LD_VAR 0 1
64228: PUSH
64229: LD_INT 4
64231: PLUS
64232: PUSH
64233: LD_VAR 0 2
64237: PUSH
64238: LD_INT 4
64240: PLUS
64241: PUSH
64242: LD_INT 5
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: LIST
64249: PUSH
64250: LD_VAR 0 1
64254: PUSH
64255: LD_INT 4
64257: MINUS
64258: PUSH
64259: LD_VAR 0 2
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: PUSH
64272: LD_VAR 0 1
64276: PUSH
64277: LD_VAR 0 2
64281: PUSH
64282: LD_INT 4
64284: MINUS
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: PUSH
64294: LD_VAR 0 1
64298: PUSH
64299: LD_INT 3
64301: MINUS
64302: PUSH
64303: LD_VAR 0 2
64307: PUSH
64308: LD_INT 3
64310: MINUS
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// end ; 4 :
64327: GO 64608
64329: LD_INT 4
64331: DOUBLE
64332: EQUAL
64333: IFTRUE 64337
64335: GO 64470
64337: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64338: LD_ADDR_VAR 0 5
64342: PUSH
64343: LD_VAR 0 1
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 4
64355: PLUS
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_INT 3
64372: PLUS
64373: PUSH
64374: LD_VAR 0 2
64378: PUSH
64379: LD_INT 3
64381: PLUS
64382: PUSH
64383: LD_INT 5
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: PUSH
64391: LD_VAR 0 1
64395: PUSH
64396: LD_INT 4
64398: PLUS
64399: PUSH
64400: LD_VAR 0 2
64404: PUSH
64405: LD_INT 4
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: PUSH
64413: LD_VAR 0 1
64417: PUSH
64418: LD_VAR 0 2
64422: PUSH
64423: LD_INT 3
64425: MINUS
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: PUSH
64435: LD_VAR 0 1
64439: PUSH
64440: LD_INT 4
64442: MINUS
64443: PUSH
64444: LD_VAR 0 2
64448: PUSH
64449: LD_INT 4
64451: MINUS
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: ST_TO_ADDR
// end ; 5 :
64468: GO 64608
64470: LD_INT 5
64472: DOUBLE
64473: EQUAL
64474: IFTRUE 64478
64476: GO 64607
64478: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64479: LD_ADDR_VAR 0 5
64483: PUSH
64484: LD_VAR 0 1
64488: PUSH
64489: LD_INT 4
64491: MINUS
64492: PUSH
64493: LD_VAR 0 2
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_VAR 0 2
64515: PUSH
64516: LD_INT 4
64518: MINUS
64519: PUSH
64520: LD_INT 3
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: PUSH
64528: LD_VAR 0 1
64532: PUSH
64533: LD_INT 4
64535: PLUS
64536: PUSH
64537: LD_VAR 0 2
64541: PUSH
64542: LD_INT 4
64544: PLUS
64545: PUSH
64546: LD_INT 5
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: PUSH
64554: LD_VAR 0 1
64558: PUSH
64559: LD_INT 3
64561: PLUS
64562: PUSH
64563: LD_VAR 0 2
64567: PUSH
64568: LD_INT 4
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: PUSH
64576: LD_VAR 0 1
64580: PUSH
64581: LD_VAR 0 2
64585: PUSH
64586: LD_INT 3
64588: PLUS
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// end ; end ;
64605: GO 64608
64607: POP
// result := list ;
64608: LD_ADDR_VAR 0 4
64612: PUSH
64613: LD_VAR 0 5
64617: ST_TO_ADDR
// end ;
64618: LD_VAR 0 4
64622: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64623: LD_INT 0
64625: PPUSH
64626: PPUSH
64627: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64628: LD_VAR 0 1
64632: NOT
64633: PUSH
64634: LD_VAR 0 2
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 4
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: IN
64657: NOT
64658: OR
64659: IFFALSE 64663
// exit ;
64661: GO 64755
// tmp := [ ] ;
64663: LD_ADDR_VAR 0 5
64667: PUSH
64668: EMPTY
64669: ST_TO_ADDR
// for i in units do
64670: LD_ADDR_VAR 0 4
64674: PUSH
64675: LD_VAR 0 1
64679: PUSH
64680: FOR_IN
64681: IFFALSE 64724
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64683: LD_ADDR_VAR 0 5
64687: PUSH
64688: LD_VAR 0 5
64692: PPUSH
64693: LD_VAR 0 5
64697: PUSH
64698: LD_INT 1
64700: PLUS
64701: PPUSH
64702: LD_VAR 0 4
64706: PPUSH
64707: LD_VAR 0 2
64711: PPUSH
64712: CALL_OW 259
64716: PPUSH
64717: CALL_OW 2
64721: ST_TO_ADDR
64722: GO 64680
64724: POP
64725: POP
// if not tmp then
64726: LD_VAR 0 5
64730: NOT
64731: IFFALSE 64735
// exit ;
64733: GO 64755
// result := SortListByListDesc ( units , tmp ) ;
64735: LD_ADDR_VAR 0 3
64739: PUSH
64740: LD_VAR 0 1
64744: PPUSH
64745: LD_VAR 0 5
64749: PPUSH
64750: CALL_OW 77
64754: ST_TO_ADDR
// end ;
64755: LD_VAR 0 3
64759: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
64764: PPUSH
// result := false ;
64765: LD_ADDR_VAR 0 3
64769: PUSH
64770: LD_INT 0
64772: ST_TO_ADDR
// x := GetX ( building ) ;
64773: LD_ADDR_VAR 0 4
64777: PUSH
64778: LD_VAR 0 2
64782: PPUSH
64783: CALL_OW 250
64787: ST_TO_ADDR
// y := GetY ( building ) ;
64788: LD_ADDR_VAR 0 5
64792: PUSH
64793: LD_VAR 0 2
64797: PPUSH
64798: CALL_OW 251
64802: ST_TO_ADDR
// if not building or not x or not y then
64803: LD_VAR 0 2
64807: NOT
64808: PUSH
64809: LD_VAR 0 4
64813: NOT
64814: OR
64815: PUSH
64816: LD_VAR 0 5
64820: NOT
64821: OR
64822: IFFALSE 64826
// exit ;
64824: GO 64918
// if GetTaskList ( unit ) then
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 437
64835: IFFALSE 64918
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64837: LD_STRING e
64839: PUSH
64840: LD_VAR 0 1
64844: PPUSH
64845: CALL_OW 437
64849: PUSH
64850: LD_INT 1
64852: ARRAY
64853: PUSH
64854: LD_INT 1
64856: ARRAY
64857: EQUAL
64858: PUSH
64859: LD_VAR 0 4
64863: PUSH
64864: LD_VAR 0 1
64868: PPUSH
64869: CALL_OW 437
64873: PUSH
64874: LD_INT 1
64876: ARRAY
64877: PUSH
64878: LD_INT 2
64880: ARRAY
64881: EQUAL
64882: AND
64883: PUSH
64884: LD_VAR 0 5
64888: PUSH
64889: LD_VAR 0 1
64893: PPUSH
64894: CALL_OW 437
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PUSH
64903: LD_INT 3
64905: ARRAY
64906: EQUAL
64907: AND
64908: IFFALSE 64918
// result := true end ;
64910: LD_ADDR_VAR 0 3
64914: PUSH
64915: LD_INT 1
64917: ST_TO_ADDR
// end ;
64918: LD_VAR 0 3
64922: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64923: LD_INT 0
64925: PPUSH
// result := false ;
64926: LD_ADDR_VAR 0 4
64930: PUSH
64931: LD_INT 0
64933: ST_TO_ADDR
// if GetTaskList ( unit ) then
64934: LD_VAR 0 1
64938: PPUSH
64939: CALL_OW 437
64943: IFFALSE 65026
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64945: LD_STRING M
64947: PUSH
64948: LD_VAR 0 1
64952: PPUSH
64953: CALL_OW 437
64957: PUSH
64958: LD_INT 1
64960: ARRAY
64961: PUSH
64962: LD_INT 1
64964: ARRAY
64965: EQUAL
64966: PUSH
64967: LD_VAR 0 2
64971: PUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 437
64981: PUSH
64982: LD_INT 1
64984: ARRAY
64985: PUSH
64986: LD_INT 2
64988: ARRAY
64989: EQUAL
64990: AND
64991: PUSH
64992: LD_VAR 0 3
64996: PUSH
64997: LD_VAR 0 1
65001: PPUSH
65002: CALL_OW 437
65006: PUSH
65007: LD_INT 1
65009: ARRAY
65010: PUSH
65011: LD_INT 3
65013: ARRAY
65014: EQUAL
65015: AND
65016: IFFALSE 65026
// result := true ;
65018: LD_ADDR_VAR 0 4
65022: PUSH
65023: LD_INT 1
65025: ST_TO_ADDR
// end ; end ;
65026: LD_VAR 0 4
65030: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65031: LD_INT 0
65033: PPUSH
65034: PPUSH
65035: PPUSH
65036: PPUSH
// if not unit or not area then
65037: LD_VAR 0 1
65041: NOT
65042: PUSH
65043: LD_VAR 0 2
65047: NOT
65048: OR
65049: IFFALSE 65053
// exit ;
65051: GO 65217
// tmp := AreaToList ( area , i ) ;
65053: LD_ADDR_VAR 0 6
65057: PUSH
65058: LD_VAR 0 2
65062: PPUSH
65063: LD_VAR 0 5
65067: PPUSH
65068: CALL_OW 517
65072: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65073: LD_ADDR_VAR 0 5
65077: PUSH
65078: DOUBLE
65079: LD_INT 1
65081: DEC
65082: ST_TO_ADDR
65083: LD_VAR 0 6
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PUSH
65092: FOR_TO
65093: IFFALSE 65215
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65095: LD_ADDR_VAR 0 7
65099: PUSH
65100: LD_VAR 0 6
65104: PUSH
65105: LD_INT 1
65107: ARRAY
65108: PUSH
65109: LD_VAR 0 5
65113: ARRAY
65114: PUSH
65115: LD_VAR 0 6
65119: PUSH
65120: LD_INT 2
65122: ARRAY
65123: PUSH
65124: LD_VAR 0 5
65128: ARRAY
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65134: LD_VAR 0 7
65138: PUSH
65139: LD_INT 1
65141: ARRAY
65142: PPUSH
65143: LD_VAR 0 7
65147: PUSH
65148: LD_INT 2
65150: ARRAY
65151: PPUSH
65152: CALL_OW 428
65156: PUSH
65157: LD_INT 0
65159: EQUAL
65160: IFFALSE 65213
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65162: LD_VAR 0 1
65166: PPUSH
65167: LD_VAR 0 7
65171: PUSH
65172: LD_INT 1
65174: ARRAY
65175: PPUSH
65176: LD_VAR 0 7
65180: PUSH
65181: LD_INT 2
65183: ARRAY
65184: PPUSH
65185: LD_VAR 0 3
65189: PPUSH
65190: CALL_OW 48
// result := IsPlaced ( unit ) ;
65194: LD_ADDR_VAR 0 4
65198: PUSH
65199: LD_VAR 0 1
65203: PPUSH
65204: CALL_OW 305
65208: ST_TO_ADDR
// exit ;
65209: POP
65210: POP
65211: GO 65217
// end ; end ;
65213: GO 65092
65215: POP
65216: POP
// end ;
65217: LD_VAR 0 4
65221: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65222: LD_INT 0
65224: PPUSH
65225: PPUSH
65226: PPUSH
// if not side or side > 8 then
65227: LD_VAR 0 1
65231: NOT
65232: PUSH
65233: LD_VAR 0 1
65237: PUSH
65238: LD_INT 8
65240: GREATER
65241: OR
65242: IFFALSE 65246
// exit ;
65244: GO 65433
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65246: LD_ADDR_VAR 0 4
65250: PUSH
65251: LD_INT 22
65253: PUSH
65254: LD_VAR 0 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 21
65265: PUSH
65266: LD_INT 3
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PPUSH
65277: CALL_OW 69
65281: ST_TO_ADDR
// if not tmp then
65282: LD_VAR 0 4
65286: NOT
65287: IFFALSE 65291
// exit ;
65289: GO 65433
// enable_addtolog := true ;
65291: LD_ADDR_OWVAR 81
65295: PUSH
65296: LD_INT 1
65298: ST_TO_ADDR
// AddToLog ( [ ) ;
65299: LD_STRING [
65301: PPUSH
65302: CALL_OW 561
// for i in tmp do
65306: LD_ADDR_VAR 0 3
65310: PUSH
65311: LD_VAR 0 4
65315: PUSH
65316: FOR_IN
65317: IFFALSE 65424
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65319: LD_STRING [
65321: PUSH
65322: LD_VAR 0 3
65326: PPUSH
65327: CALL_OW 266
65331: STR
65332: PUSH
65333: LD_STRING , 
65335: STR
65336: PUSH
65337: LD_VAR 0 3
65341: PPUSH
65342: CALL_OW 250
65346: STR
65347: PUSH
65348: LD_STRING , 
65350: STR
65351: PUSH
65352: LD_VAR 0 3
65356: PPUSH
65357: CALL_OW 251
65361: STR
65362: PUSH
65363: LD_STRING , 
65365: STR
65366: PUSH
65367: LD_VAR 0 3
65371: PPUSH
65372: CALL_OW 254
65376: STR
65377: PUSH
65378: LD_STRING , 
65380: STR
65381: PUSH
65382: LD_VAR 0 3
65386: PPUSH
65387: LD_INT 1
65389: PPUSH
65390: CALL_OW 268
65394: STR
65395: PUSH
65396: LD_STRING , 
65398: STR
65399: PUSH
65400: LD_VAR 0 3
65404: PPUSH
65405: LD_INT 2
65407: PPUSH
65408: CALL_OW 268
65412: STR
65413: PUSH
65414: LD_STRING ],
65416: STR
65417: PPUSH
65418: CALL_OW 561
// end ;
65422: GO 65316
65424: POP
65425: POP
// AddToLog ( ]; ) ;
65426: LD_STRING ];
65428: PPUSH
65429: CALL_OW 561
// end ;
65433: LD_VAR 0 2
65437: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65438: LD_INT 0
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
65444: PPUSH
// if not area or not rate or not max then
65445: LD_VAR 0 1
65449: NOT
65450: PUSH
65451: LD_VAR 0 2
65455: NOT
65456: OR
65457: PUSH
65458: LD_VAR 0 4
65462: NOT
65463: OR
65464: IFFALSE 65468
// exit ;
65466: GO 65657
// while 1 do
65468: LD_INT 1
65470: IFFALSE 65657
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65472: LD_ADDR_VAR 0 9
65476: PUSH
65477: LD_VAR 0 1
65481: PPUSH
65482: LD_INT 1
65484: PPUSH
65485: CALL_OW 287
65489: PUSH
65490: LD_INT 10
65492: MUL
65493: ST_TO_ADDR
// r := rate / 10 ;
65494: LD_ADDR_VAR 0 7
65498: PUSH
65499: LD_VAR 0 2
65503: PUSH
65504: LD_INT 10
65506: DIVREAL
65507: ST_TO_ADDR
// time := 1 1$00 ;
65508: LD_ADDR_VAR 0 8
65512: PUSH
65513: LD_INT 2100
65515: ST_TO_ADDR
// if amount < min then
65516: LD_VAR 0 9
65520: PUSH
65521: LD_VAR 0 3
65525: LESS
65526: IFFALSE 65544
// r := r * 2 else
65528: LD_ADDR_VAR 0 7
65532: PUSH
65533: LD_VAR 0 7
65537: PUSH
65538: LD_INT 2
65540: MUL
65541: ST_TO_ADDR
65542: GO 65570
// if amount > max then
65544: LD_VAR 0 9
65548: PUSH
65549: LD_VAR 0 4
65553: GREATER
65554: IFFALSE 65570
// r := r / 2 ;
65556: LD_ADDR_VAR 0 7
65560: PUSH
65561: LD_VAR 0 7
65565: PUSH
65566: LD_INT 2
65568: DIVREAL
65569: ST_TO_ADDR
// time := time / r ;
65570: LD_ADDR_VAR 0 8
65574: PUSH
65575: LD_VAR 0 8
65579: PUSH
65580: LD_VAR 0 7
65584: DIVREAL
65585: ST_TO_ADDR
// if time < 0 then
65586: LD_VAR 0 8
65590: PUSH
65591: LD_INT 0
65593: LESS
65594: IFFALSE 65611
// time := time * - 1 ;
65596: LD_ADDR_VAR 0 8
65600: PUSH
65601: LD_VAR 0 8
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: MUL
65610: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65611: LD_VAR 0 8
65615: PUSH
65616: LD_INT 35
65618: PPUSH
65619: LD_INT 875
65621: PPUSH
65622: CALL_OW 12
65626: PLUS
65627: PPUSH
65628: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65632: LD_INT 1
65634: PPUSH
65635: LD_INT 5
65637: PPUSH
65638: CALL_OW 12
65642: PPUSH
65643: LD_VAR 0 1
65647: PPUSH
65648: LD_INT 1
65650: PPUSH
65651: CALL_OW 55
// end ;
65655: GO 65468
// end ;
65657: LD_VAR 0 5
65661: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65662: LD_INT 0
65664: PPUSH
65665: PPUSH
65666: PPUSH
65667: PPUSH
65668: PPUSH
65669: PPUSH
65670: PPUSH
65671: PPUSH
// if not turrets or not factories then
65672: LD_VAR 0 1
65676: NOT
65677: PUSH
65678: LD_VAR 0 2
65682: NOT
65683: OR
65684: IFFALSE 65688
// exit ;
65686: GO 65995
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65688: LD_ADDR_VAR 0 10
65692: PUSH
65693: LD_INT 5
65695: PUSH
65696: LD_INT 6
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: LD_INT 4
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 3
65715: PUSH
65716: LD_INT 5
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 24
65730: PUSH
65731: LD_INT 25
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 23
65740: PUSH
65741: LD_INT 27
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 42
65754: PUSH
65755: LD_INT 43
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 44
65764: PUSH
65765: LD_INT 46
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 45
65774: PUSH
65775: LD_INT 47
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: ST_TO_ADDR
// result := [ ] ;
65792: LD_ADDR_VAR 0 3
65796: PUSH
65797: EMPTY
65798: ST_TO_ADDR
// for i in turrets do
65799: LD_ADDR_VAR 0 4
65803: PUSH
65804: LD_VAR 0 1
65808: PUSH
65809: FOR_IN
65810: IFFALSE 65993
// begin nat := GetNation ( i ) ;
65812: LD_ADDR_VAR 0 7
65816: PUSH
65817: LD_VAR 0 4
65821: PPUSH
65822: CALL_OW 248
65826: ST_TO_ADDR
// weapon := 0 ;
65827: LD_ADDR_VAR 0 8
65831: PUSH
65832: LD_INT 0
65834: ST_TO_ADDR
// if not nat then
65835: LD_VAR 0 7
65839: NOT
65840: IFFALSE 65844
// continue ;
65842: GO 65809
// for j in list [ nat ] do
65844: LD_ADDR_VAR 0 5
65848: PUSH
65849: LD_VAR 0 10
65853: PUSH
65854: LD_VAR 0 7
65858: ARRAY
65859: PUSH
65860: FOR_IN
65861: IFFALSE 65902
// if GetBWeapon ( i ) = j [ 1 ] then
65863: LD_VAR 0 4
65867: PPUSH
65868: CALL_OW 269
65872: PUSH
65873: LD_VAR 0 5
65877: PUSH
65878: LD_INT 1
65880: ARRAY
65881: EQUAL
65882: IFFALSE 65900
// begin weapon := j [ 2 ] ;
65884: LD_ADDR_VAR 0 8
65888: PUSH
65889: LD_VAR 0 5
65893: PUSH
65894: LD_INT 2
65896: ARRAY
65897: ST_TO_ADDR
// break ;
65898: GO 65902
// end ;
65900: GO 65860
65902: POP
65903: POP
// if not weapon then
65904: LD_VAR 0 8
65908: NOT
65909: IFFALSE 65913
// continue ;
65911: GO 65809
// for k in factories do
65913: LD_ADDR_VAR 0 6
65917: PUSH
65918: LD_VAR 0 2
65922: PUSH
65923: FOR_IN
65924: IFFALSE 65989
// begin weapons := AvailableWeaponList ( k ) ;
65926: LD_ADDR_VAR 0 9
65930: PUSH
65931: LD_VAR 0 6
65935: PPUSH
65936: CALL_OW 478
65940: ST_TO_ADDR
// if not weapons then
65941: LD_VAR 0 9
65945: NOT
65946: IFFALSE 65950
// continue ;
65948: GO 65923
// if weapon in weapons then
65950: LD_VAR 0 8
65954: PUSH
65955: LD_VAR 0 9
65959: IN
65960: IFFALSE 65987
// begin result := [ i , weapon ] ;
65962: LD_ADDR_VAR 0 3
65966: PUSH
65967: LD_VAR 0 4
65971: PUSH
65972: LD_VAR 0 8
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: ST_TO_ADDR
// exit ;
65981: POP
65982: POP
65983: POP
65984: POP
65985: GO 65995
// end ; end ;
65987: GO 65923
65989: POP
65990: POP
// end ;
65991: GO 65809
65993: POP
65994: POP
// end ;
65995: LD_VAR 0 3
65999: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66000: LD_INT 0
66002: PPUSH
// if not side or side > 8 then
66003: LD_VAR 0 3
66007: NOT
66008: PUSH
66009: LD_VAR 0 3
66013: PUSH
66014: LD_INT 8
66016: GREATER
66017: OR
66018: IFFALSE 66022
// exit ;
66020: GO 66081
// if not range then
66022: LD_VAR 0 4
66026: NOT
66027: IFFALSE 66038
// range := - 12 ;
66029: LD_ADDR_VAR 0 4
66033: PUSH
66034: LD_INT 12
66036: NEG
66037: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66038: LD_VAR 0 1
66042: PPUSH
66043: LD_VAR 0 2
66047: PPUSH
66048: LD_VAR 0 3
66052: PPUSH
66053: LD_VAR 0 4
66057: PPUSH
66058: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66062: LD_VAR 0 1
66066: PPUSH
66067: LD_VAR 0 2
66071: PPUSH
66072: LD_VAR 0 3
66076: PPUSH
66077: CALL_OW 331
// end ;
66081: LD_VAR 0 5
66085: RET
// export function Video ( mode ) ; begin
66086: LD_INT 0
66088: PPUSH
// ingame_video = mode ;
66089: LD_ADDR_OWVAR 52
66093: PUSH
66094: LD_VAR 0 1
66098: ST_TO_ADDR
// interface_hidden = mode ;
66099: LD_ADDR_OWVAR 54
66103: PUSH
66104: LD_VAR 0 1
66108: ST_TO_ADDR
// end ;
66109: LD_VAR 0 2
66113: RET
// export function Join ( array , element ) ; begin
66114: LD_INT 0
66116: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66117: LD_ADDR_VAR 0 3
66121: PUSH
66122: LD_VAR 0 1
66126: PPUSH
66127: LD_VAR 0 1
66131: PUSH
66132: LD_INT 1
66134: PLUS
66135: PPUSH
66136: LD_VAR 0 2
66140: PPUSH
66141: CALL_OW 1
66145: ST_TO_ADDR
// end ;
66146: LD_VAR 0 3
66150: RET
// export function JoinUnion ( array , element ) ; begin
66151: LD_INT 0
66153: PPUSH
// result := array union element ;
66154: LD_ADDR_VAR 0 3
66158: PUSH
66159: LD_VAR 0 1
66163: PUSH
66164: LD_VAR 0 2
66168: UNION
66169: ST_TO_ADDR
// end ;
66170: LD_VAR 0 3
66174: RET
// export function GetBehemoths ( side ) ; begin
66175: LD_INT 0
66177: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66178: LD_ADDR_VAR 0 2
66182: PUSH
66183: LD_INT 22
66185: PUSH
66186: LD_VAR 0 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 31
66197: PUSH
66198: LD_INT 25
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PPUSH
66209: CALL_OW 69
66213: ST_TO_ADDR
// end ;
66214: LD_VAR 0 2
66218: RET
// export function Shuffle ( array ) ; var i , index ; begin
66219: LD_INT 0
66221: PPUSH
66222: PPUSH
66223: PPUSH
// result := [ ] ;
66224: LD_ADDR_VAR 0 2
66228: PUSH
66229: EMPTY
66230: ST_TO_ADDR
// if not array then
66231: LD_VAR 0 1
66235: NOT
66236: IFFALSE 66240
// exit ;
66238: GO 66339
// Randomize ;
66240: CALL_OW 10
// for i = array downto 1 do
66244: LD_ADDR_VAR 0 3
66248: PUSH
66249: DOUBLE
66250: LD_VAR 0 1
66254: INC
66255: ST_TO_ADDR
66256: LD_INT 1
66258: PUSH
66259: FOR_DOWNTO
66260: IFFALSE 66337
// begin index := rand ( 1 , array ) ;
66262: LD_ADDR_VAR 0 4
66266: PUSH
66267: LD_INT 1
66269: PPUSH
66270: LD_VAR 0 1
66274: PPUSH
66275: CALL_OW 12
66279: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66280: LD_ADDR_VAR 0 2
66284: PUSH
66285: LD_VAR 0 2
66289: PPUSH
66290: LD_VAR 0 2
66294: PUSH
66295: LD_INT 1
66297: PLUS
66298: PPUSH
66299: LD_VAR 0 1
66303: PUSH
66304: LD_VAR 0 4
66308: ARRAY
66309: PPUSH
66310: CALL_OW 2
66314: ST_TO_ADDR
// array := Delete ( array , index ) ;
66315: LD_ADDR_VAR 0 1
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_VAR 0 4
66329: PPUSH
66330: CALL_OW 3
66334: ST_TO_ADDR
// end ;
66335: GO 66259
66337: POP
66338: POP
// end ;
66339: LD_VAR 0 2
66343: RET
// export function GetBaseMaterials ( base ) ; begin
66344: LD_INT 0
66346: PPUSH
// result := [ 0 , 0 , 0 ] ;
66347: LD_ADDR_VAR 0 2
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: ST_TO_ADDR
// if not base then
66366: LD_VAR 0 1
66370: NOT
66371: IFFALSE 66375
// exit ;
66373: GO 66424
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66375: LD_ADDR_VAR 0 2
66379: PUSH
66380: LD_VAR 0 1
66384: PPUSH
66385: LD_INT 1
66387: PPUSH
66388: CALL_OW 275
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: LD_INT 2
66400: PPUSH
66401: CALL_OW 275
66405: PUSH
66406: LD_VAR 0 1
66410: PPUSH
66411: LD_INT 3
66413: PPUSH
66414: CALL_OW 275
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// end ;
66424: LD_VAR 0 2
66428: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66429: LD_INT 0
66431: PPUSH
66432: PPUSH
// result := array ;
66433: LD_ADDR_VAR 0 3
66437: PUSH
66438: LD_VAR 0 1
66442: ST_TO_ADDR
// if size >= result then
66443: LD_VAR 0 2
66447: PUSH
66448: LD_VAR 0 3
66452: GREATEREQUAL
66453: IFFALSE 66457
// exit ;
66455: GO 66507
// if size then
66457: LD_VAR 0 2
66461: IFFALSE 66507
// for i := array downto size do
66463: LD_ADDR_VAR 0 4
66467: PUSH
66468: DOUBLE
66469: LD_VAR 0 1
66473: INC
66474: ST_TO_ADDR
66475: LD_VAR 0 2
66479: PUSH
66480: FOR_DOWNTO
66481: IFFALSE 66505
// result := Delete ( result , result ) ;
66483: LD_ADDR_VAR 0 3
66487: PUSH
66488: LD_VAR 0 3
66492: PPUSH
66493: LD_VAR 0 3
66497: PPUSH
66498: CALL_OW 3
66502: ST_TO_ADDR
66503: GO 66480
66505: POP
66506: POP
// end ;
66507: LD_VAR 0 3
66511: RET
// export function ComExit ( unit ) ; var tmp ; begin
66512: LD_INT 0
66514: PPUSH
66515: PPUSH
// if not IsInUnit ( unit ) then
66516: LD_VAR 0 1
66520: PPUSH
66521: CALL_OW 310
66525: NOT
66526: IFFALSE 66530
// exit ;
66528: GO 66590
// tmp := IsInUnit ( unit ) ;
66530: LD_ADDR_VAR 0 3
66534: PUSH
66535: LD_VAR 0 1
66539: PPUSH
66540: CALL_OW 310
66544: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66545: LD_VAR 0 3
66549: PPUSH
66550: CALL_OW 247
66554: PUSH
66555: LD_INT 2
66557: EQUAL
66558: IFFALSE 66571
// ComExitVehicle ( unit ) else
66560: LD_VAR 0 1
66564: PPUSH
66565: CALL_OW 121
66569: GO 66580
// ComExitBuilding ( unit ) ;
66571: LD_VAR 0 1
66575: PPUSH
66576: CALL_OW 122
// result := tmp ;
66580: LD_ADDR_VAR 0 2
66584: PUSH
66585: LD_VAR 0 3
66589: ST_TO_ADDR
// end ;
66590: LD_VAR 0 2
66594: RET
// export function ComExitAll ( units ) ; var i ; begin
66595: LD_INT 0
66597: PPUSH
66598: PPUSH
// if not units then
66599: LD_VAR 0 1
66603: NOT
66604: IFFALSE 66608
// exit ;
66606: GO 66634
// for i in units do
66608: LD_ADDR_VAR 0 3
66612: PUSH
66613: LD_VAR 0 1
66617: PUSH
66618: FOR_IN
66619: IFFALSE 66632
// ComExit ( i ) ;
66621: LD_VAR 0 3
66625: PPUSH
66626: CALL 66512 0 1
66630: GO 66618
66632: POP
66633: POP
// end ;
66634: LD_VAR 0 2
66638: RET
// export function ResetHc ; begin
66639: LD_INT 0
66641: PPUSH
// InitHc ;
66642: CALL_OW 19
// hc_importance := 0 ;
66646: LD_ADDR_OWVAR 32
66650: PUSH
66651: LD_INT 0
66653: ST_TO_ADDR
// end ;
66654: LD_VAR 0 1
66658: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66659: LD_INT 0
66661: PPUSH
66662: PPUSH
66663: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66664: LD_ADDR_VAR 0 6
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_VAR 0 3
66678: PLUS
66679: PUSH
66680: LD_INT 2
66682: DIV
66683: ST_TO_ADDR
// if _x < 0 then
66684: LD_VAR 0 6
66688: PUSH
66689: LD_INT 0
66691: LESS
66692: IFFALSE 66709
// _x := _x * - 1 ;
66694: LD_ADDR_VAR 0 6
66698: PUSH
66699: LD_VAR 0 6
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: MUL
66708: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66709: LD_ADDR_VAR 0 7
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: LD_VAR 0 4
66723: PLUS
66724: PUSH
66725: LD_INT 2
66727: DIV
66728: ST_TO_ADDR
// if _y < 0 then
66729: LD_VAR 0 7
66733: PUSH
66734: LD_INT 0
66736: LESS
66737: IFFALSE 66754
// _y := _y * - 1 ;
66739: LD_ADDR_VAR 0 7
66743: PUSH
66744: LD_VAR 0 7
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: MUL
66753: ST_TO_ADDR
// result := [ _x , _y ] ;
66754: LD_ADDR_VAR 0 5
66758: PUSH
66759: LD_VAR 0 6
66763: PUSH
66764: LD_VAR 0 7
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: ST_TO_ADDR
// end ;
66773: LD_VAR 0 5
66777: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
// task := GetTaskList ( unit ) ;
66784: LD_ADDR_VAR 0 7
66788: PUSH
66789: LD_VAR 0 1
66793: PPUSH
66794: CALL_OW 437
66798: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66799: LD_VAR 0 7
66803: NOT
66804: PUSH
66805: LD_VAR 0 1
66809: PPUSH
66810: LD_VAR 0 2
66814: PPUSH
66815: CALL_OW 308
66819: NOT
66820: AND
66821: IFFALSE 66825
// exit ;
66823: GO 66943
// if IsInArea ( unit , area ) then
66825: LD_VAR 0 1
66829: PPUSH
66830: LD_VAR 0 2
66834: PPUSH
66835: CALL_OW 308
66839: IFFALSE 66857
// begin ComMoveToArea ( unit , goAway ) ;
66841: LD_VAR 0 1
66845: PPUSH
66846: LD_VAR 0 3
66850: PPUSH
66851: CALL_OW 113
// exit ;
66855: GO 66943
// end ; if task [ 1 ] [ 1 ] <> M then
66857: LD_VAR 0 7
66861: PUSH
66862: LD_INT 1
66864: ARRAY
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PUSH
66870: LD_STRING M
66872: NONEQUAL
66873: IFFALSE 66877
// exit ;
66875: GO 66943
// x := task [ 1 ] [ 2 ] ;
66877: LD_ADDR_VAR 0 5
66881: PUSH
66882: LD_VAR 0 7
66886: PUSH
66887: LD_INT 1
66889: ARRAY
66890: PUSH
66891: LD_INT 2
66893: ARRAY
66894: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66895: LD_ADDR_VAR 0 6
66899: PUSH
66900: LD_VAR 0 7
66904: PUSH
66905: LD_INT 1
66907: ARRAY
66908: PUSH
66909: LD_INT 3
66911: ARRAY
66912: ST_TO_ADDR
// if InArea ( x , y , area ) then
66913: LD_VAR 0 5
66917: PPUSH
66918: LD_VAR 0 6
66922: PPUSH
66923: LD_VAR 0 2
66927: PPUSH
66928: CALL_OW 309
66932: IFFALSE 66943
// ComStop ( unit ) ;
66934: LD_VAR 0 1
66938: PPUSH
66939: CALL_OW 141
// end ;
66943: LD_VAR 0 4
66947: RET
// export function Abs ( value ) ; begin
66948: LD_INT 0
66950: PPUSH
// result := value ;
66951: LD_ADDR_VAR 0 2
66955: PUSH
66956: LD_VAR 0 1
66960: ST_TO_ADDR
// if value < 0 then
66961: LD_VAR 0 1
66965: PUSH
66966: LD_INT 0
66968: LESS
66969: IFFALSE 66986
// result := value * - 1 ;
66971: LD_ADDR_VAR 0 2
66975: PUSH
66976: LD_VAR 0 1
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: MUL
66985: ST_TO_ADDR
// end ;
66986: LD_VAR 0 2
66990: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66991: LD_INT 0
66993: PPUSH
66994: PPUSH
66995: PPUSH
66996: PPUSH
66997: PPUSH
66998: PPUSH
66999: PPUSH
67000: PPUSH
// if not unit or not building then
67001: LD_VAR 0 1
67005: NOT
67006: PUSH
67007: LD_VAR 0 2
67011: NOT
67012: OR
67013: IFFALSE 67017
// exit ;
67015: GO 67243
// x := GetX ( building ) ;
67017: LD_ADDR_VAR 0 4
67021: PUSH
67022: LD_VAR 0 2
67026: PPUSH
67027: CALL_OW 250
67031: ST_TO_ADDR
// y := GetY ( building ) ;
67032: LD_ADDR_VAR 0 6
67036: PUSH
67037: LD_VAR 0 2
67041: PPUSH
67042: CALL_OW 251
67046: ST_TO_ADDR
// d := GetDir ( building ) ;
67047: LD_ADDR_VAR 0 8
67051: PUSH
67052: LD_VAR 0 2
67056: PPUSH
67057: CALL_OW 254
67061: ST_TO_ADDR
// r := 4 ;
67062: LD_ADDR_VAR 0 9
67066: PUSH
67067: LD_INT 4
67069: ST_TO_ADDR
// for i := 1 to 5 do
67070: LD_ADDR_VAR 0 10
67074: PUSH
67075: DOUBLE
67076: LD_INT 1
67078: DEC
67079: ST_TO_ADDR
67080: LD_INT 5
67082: PUSH
67083: FOR_TO
67084: IFFALSE 67241
// begin _x := ShiftX ( x , d , r + i ) ;
67086: LD_ADDR_VAR 0 5
67090: PUSH
67091: LD_VAR 0 4
67095: PPUSH
67096: LD_VAR 0 8
67100: PPUSH
67101: LD_VAR 0 9
67105: PUSH
67106: LD_VAR 0 10
67110: PLUS
67111: PPUSH
67112: CALL_OW 272
67116: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67117: LD_ADDR_VAR 0 7
67121: PUSH
67122: LD_VAR 0 6
67126: PPUSH
67127: LD_VAR 0 8
67131: PPUSH
67132: LD_VAR 0 9
67136: PUSH
67137: LD_VAR 0 10
67141: PLUS
67142: PPUSH
67143: CALL_OW 273
67147: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67148: LD_VAR 0 5
67152: PPUSH
67153: LD_VAR 0 7
67157: PPUSH
67158: CALL_OW 488
67162: PUSH
67163: LD_VAR 0 5
67167: PPUSH
67168: LD_VAR 0 7
67172: PPUSH
67173: CALL_OW 428
67177: PPUSH
67178: CALL_OW 247
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: IN
67193: NOT
67194: AND
67195: IFFALSE 67239
// begin ComMoveXY ( unit , _x , _y ) ;
67197: LD_VAR 0 1
67201: PPUSH
67202: LD_VAR 0 5
67206: PPUSH
67207: LD_VAR 0 7
67211: PPUSH
67212: CALL_OW 111
// result := [ _x , _y ] ;
67216: LD_ADDR_VAR 0 3
67220: PUSH
67221: LD_VAR 0 5
67225: PUSH
67226: LD_VAR 0 7
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// exit ;
67235: POP
67236: POP
67237: GO 67243
// end ; end ;
67239: GO 67083
67241: POP
67242: POP
// end ;
67243: LD_VAR 0 3
67247: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67248: LD_INT 0
67250: PPUSH
67251: PPUSH
67252: PPUSH
// result := 0 ;
67253: LD_ADDR_VAR 0 3
67257: PUSH
67258: LD_INT 0
67260: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67261: LD_VAR 0 1
67265: PUSH
67266: LD_INT 0
67268: LESS
67269: PUSH
67270: LD_VAR 0 1
67274: PUSH
67275: LD_INT 8
67277: GREATER
67278: OR
67279: PUSH
67280: LD_VAR 0 2
67284: PUSH
67285: LD_INT 0
67287: LESS
67288: OR
67289: PUSH
67290: LD_VAR 0 2
67294: PUSH
67295: LD_INT 8
67297: GREATER
67298: OR
67299: IFFALSE 67303
// exit ;
67301: GO 67378
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67303: LD_ADDR_VAR 0 4
67307: PUSH
67308: LD_INT 22
67310: PUSH
67311: LD_VAR 0 2
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PPUSH
67320: CALL_OW 69
67324: PUSH
67325: FOR_IN
67326: IFFALSE 67376
// begin un := UnitShoot ( i ) ;
67328: LD_ADDR_VAR 0 5
67332: PUSH
67333: LD_VAR 0 4
67337: PPUSH
67338: CALL_OW 504
67342: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67343: LD_VAR 0 5
67347: PPUSH
67348: CALL_OW 255
67352: PUSH
67353: LD_VAR 0 1
67357: EQUAL
67358: IFFALSE 67374
// begin result := un ;
67360: LD_ADDR_VAR 0 3
67364: PUSH
67365: LD_VAR 0 5
67369: ST_TO_ADDR
// exit ;
67370: POP
67371: POP
67372: GO 67378
// end ; end ;
67374: GO 67325
67376: POP
67377: POP
// end ;
67378: LD_VAR 0 3
67382: RET
// export function GetCargoBay ( units ) ; begin
67383: LD_INT 0
67385: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67386: LD_ADDR_VAR 0 2
67390: PUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: LD_INT 2
67398: PUSH
67399: LD_INT 34
67401: PUSH
67402: LD_INT 12
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 34
67411: PUSH
67412: LD_INT 51
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 34
67421: PUSH
67422: LD_INT 32
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 34
67431: PUSH
67432: LD_INT 89
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: PPUSH
67446: CALL_OW 72
67450: ST_TO_ADDR
// end ;
67451: LD_VAR 0 2
67455: RET
// export function Negate ( value ) ; begin
67456: LD_INT 0
67458: PPUSH
// result := not value ;
67459: LD_ADDR_VAR 0 2
67463: PUSH
67464: LD_VAR 0 1
67468: NOT
67469: ST_TO_ADDR
// end ;
67470: LD_VAR 0 2
67474: RET
// export function Inc ( value ) ; begin
67475: LD_INT 0
67477: PPUSH
// result := value + 1 ;
67478: LD_ADDR_VAR 0 2
67482: PUSH
67483: LD_VAR 0 1
67487: PUSH
67488: LD_INT 1
67490: PLUS
67491: ST_TO_ADDR
// end ;
67492: LD_VAR 0 2
67496: RET
// export function Dec ( value ) ; begin
67497: LD_INT 0
67499: PPUSH
// result := value - 1 ;
67500: LD_ADDR_VAR 0 2
67504: PUSH
67505: LD_VAR 0 1
67509: PUSH
67510: LD_INT 1
67512: MINUS
67513: ST_TO_ADDR
// end ;
67514: LD_VAR 0 2
67518: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67519: LD_INT 0
67521: PPUSH
67522: PPUSH
67523: PPUSH
67524: PPUSH
67525: PPUSH
67526: PPUSH
67527: PPUSH
67528: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67529: LD_VAR 0 1
67533: PPUSH
67534: LD_VAR 0 2
67538: PPUSH
67539: CALL_OW 488
67543: NOT
67544: PUSH
67545: LD_VAR 0 3
67549: PPUSH
67550: LD_VAR 0 4
67554: PPUSH
67555: CALL_OW 488
67559: NOT
67560: OR
67561: IFFALSE 67574
// begin result := - 1 ;
67563: LD_ADDR_VAR 0 5
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: ST_TO_ADDR
// exit ;
67572: GO 67809
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67574: LD_ADDR_VAR 0 12
67578: PUSH
67579: LD_VAR 0 1
67583: PPUSH
67584: LD_VAR 0 2
67588: PPUSH
67589: LD_VAR 0 3
67593: PPUSH
67594: LD_VAR 0 4
67598: PPUSH
67599: CALL 66659 0 4
67603: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67604: LD_ADDR_VAR 0 11
67608: PUSH
67609: LD_VAR 0 1
67613: PPUSH
67614: LD_VAR 0 2
67618: PPUSH
67619: LD_VAR 0 12
67623: PUSH
67624: LD_INT 1
67626: ARRAY
67627: PPUSH
67628: LD_VAR 0 12
67632: PUSH
67633: LD_INT 2
67635: ARRAY
67636: PPUSH
67637: CALL_OW 298
67641: ST_TO_ADDR
// distance := 9999 ;
67642: LD_ADDR_VAR 0 10
67646: PUSH
67647: LD_INT 9999
67649: ST_TO_ADDR
// for i := 0 to 5 do
67650: LD_ADDR_VAR 0 6
67654: PUSH
67655: DOUBLE
67656: LD_INT 0
67658: DEC
67659: ST_TO_ADDR
67660: LD_INT 5
67662: PUSH
67663: FOR_TO
67664: IFFALSE 67807
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67666: LD_ADDR_VAR 0 7
67670: PUSH
67671: LD_VAR 0 1
67675: PPUSH
67676: LD_VAR 0 6
67680: PPUSH
67681: LD_VAR 0 11
67685: PPUSH
67686: CALL_OW 272
67690: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67691: LD_ADDR_VAR 0 8
67695: PUSH
67696: LD_VAR 0 2
67700: PPUSH
67701: LD_VAR 0 6
67705: PPUSH
67706: LD_VAR 0 11
67710: PPUSH
67711: CALL_OW 273
67715: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67716: LD_VAR 0 7
67720: PPUSH
67721: LD_VAR 0 8
67725: PPUSH
67726: CALL_OW 488
67730: NOT
67731: IFFALSE 67735
// continue ;
67733: GO 67663
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67735: LD_ADDR_VAR 0 9
67739: PUSH
67740: LD_VAR 0 12
67744: PUSH
67745: LD_INT 1
67747: ARRAY
67748: PPUSH
67749: LD_VAR 0 12
67753: PUSH
67754: LD_INT 2
67756: ARRAY
67757: PPUSH
67758: LD_VAR 0 7
67762: PPUSH
67763: LD_VAR 0 8
67767: PPUSH
67768: CALL_OW 298
67772: ST_TO_ADDR
// if tmp < distance then
67773: LD_VAR 0 9
67777: PUSH
67778: LD_VAR 0 10
67782: LESS
67783: IFFALSE 67805
// begin result := i ;
67785: LD_ADDR_VAR 0 5
67789: PUSH
67790: LD_VAR 0 6
67794: ST_TO_ADDR
// distance := tmp ;
67795: LD_ADDR_VAR 0 10
67799: PUSH
67800: LD_VAR 0 9
67804: ST_TO_ADDR
// end ; end ;
67805: GO 67663
67807: POP
67808: POP
// end ;
67809: LD_VAR 0 5
67813: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67814: LD_INT 0
67816: PPUSH
67817: PPUSH
// if not driver or not IsInUnit ( driver ) then
67818: LD_VAR 0 1
67822: NOT
67823: PUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: CALL_OW 310
67833: NOT
67834: OR
67835: IFFALSE 67839
// exit ;
67837: GO 67929
// vehicle := IsInUnit ( driver ) ;
67839: LD_ADDR_VAR 0 3
67843: PUSH
67844: LD_VAR 0 1
67848: PPUSH
67849: CALL_OW 310
67853: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67854: LD_VAR 0 1
67858: PPUSH
67859: LD_STRING \
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: PUSH
67889: LD_STRING E
67891: PUSH
67892: LD_INT 0
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: LD_VAR 0 3
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PPUSH
67925: CALL_OW 446
// end ;
67929: LD_VAR 0 2
67933: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67934: LD_INT 0
67936: PPUSH
67937: PPUSH
// if not driver or not IsInUnit ( driver ) then
67938: LD_VAR 0 1
67942: NOT
67943: PUSH
67944: LD_VAR 0 1
67948: PPUSH
67949: CALL_OW 310
67953: NOT
67954: OR
67955: IFFALSE 67959
// exit ;
67957: GO 68049
// vehicle := IsInUnit ( driver ) ;
67959: LD_ADDR_VAR 0 3
67963: PUSH
67964: LD_VAR 0 1
67968: PPUSH
67969: CALL_OW 310
67973: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67974: LD_VAR 0 1
67978: PPUSH
67979: LD_STRING \
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 0
67993: PUSH
67994: LD_INT 0
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: PUSH
68009: LD_STRING E
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_VAR 0 3
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PPUSH
68045: CALL_OW 447
// end ;
68049: LD_VAR 0 2
68053: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68054: LD_INT 0
68056: PPUSH
68057: PPUSH
68058: PPUSH
// tmp := [ ] ;
68059: LD_ADDR_VAR 0 5
68063: PUSH
68064: EMPTY
68065: ST_TO_ADDR
// for i in units do
68066: LD_ADDR_VAR 0 4
68070: PUSH
68071: LD_VAR 0 1
68075: PUSH
68076: FOR_IN
68077: IFFALSE 68115
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68079: LD_ADDR_VAR 0 5
68083: PUSH
68084: LD_VAR 0 5
68088: PPUSH
68089: LD_VAR 0 5
68093: PUSH
68094: LD_INT 1
68096: PLUS
68097: PPUSH
68098: LD_VAR 0 4
68102: PPUSH
68103: CALL_OW 256
68107: PPUSH
68108: CALL_OW 2
68112: ST_TO_ADDR
68113: GO 68076
68115: POP
68116: POP
// if not tmp then
68117: LD_VAR 0 5
68121: NOT
68122: IFFALSE 68126
// exit ;
68124: GO 68174
// if asc then
68126: LD_VAR 0 2
68130: IFFALSE 68154
// result := SortListByListAsc ( units , tmp ) else
68132: LD_ADDR_VAR 0 3
68136: PUSH
68137: LD_VAR 0 1
68141: PPUSH
68142: LD_VAR 0 5
68146: PPUSH
68147: CALL_OW 76
68151: ST_TO_ADDR
68152: GO 68174
// result := SortListByListDesc ( units , tmp ) ;
68154: LD_ADDR_VAR 0 3
68158: PUSH
68159: LD_VAR 0 1
68163: PPUSH
68164: LD_VAR 0 5
68168: PPUSH
68169: CALL_OW 77
68173: ST_TO_ADDR
// end ;
68174: LD_VAR 0 3
68178: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68179: LD_INT 0
68181: PPUSH
68182: PPUSH
// task := GetTaskList ( mech ) ;
68183: LD_ADDR_VAR 0 4
68187: PUSH
68188: LD_VAR 0 1
68192: PPUSH
68193: CALL_OW 437
68197: ST_TO_ADDR
// if not task then
68198: LD_VAR 0 4
68202: NOT
68203: IFFALSE 68207
// exit ;
68205: GO 68249
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68207: LD_ADDR_VAR 0 3
68211: PUSH
68212: LD_VAR 0 4
68216: PUSH
68217: LD_INT 1
68219: ARRAY
68220: PUSH
68221: LD_INT 1
68223: ARRAY
68224: PUSH
68225: LD_STRING r
68227: EQUAL
68228: PUSH
68229: LD_VAR 0 4
68233: PUSH
68234: LD_INT 1
68236: ARRAY
68237: PUSH
68238: LD_INT 4
68240: ARRAY
68241: PUSH
68242: LD_VAR 0 2
68246: EQUAL
68247: AND
68248: ST_TO_ADDR
// end ;
68249: LD_VAR 0 3
68253: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68254: LD_INT 0
68256: PPUSH
// SetDir ( unit , d ) ;
68257: LD_VAR 0 1
68261: PPUSH
68262: LD_VAR 0 4
68266: PPUSH
68267: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68271: LD_VAR 0 1
68275: PPUSH
68276: LD_VAR 0 2
68280: PPUSH
68281: LD_VAR 0 3
68285: PPUSH
68286: LD_VAR 0 5
68290: PPUSH
68291: CALL_OW 48
// end ;
68295: LD_VAR 0 6
68299: RET
// export function ToNaturalNumber ( number ) ; begin
68300: LD_INT 0
68302: PPUSH
// result := number div 1 ;
68303: LD_ADDR_VAR 0 2
68307: PUSH
68308: LD_VAR 0 1
68312: PUSH
68313: LD_INT 1
68315: DIV
68316: ST_TO_ADDR
// if number < 0 then
68317: LD_VAR 0 1
68321: PUSH
68322: LD_INT 0
68324: LESS
68325: IFFALSE 68335
// result := 0 ;
68327: LD_ADDR_VAR 0 2
68331: PUSH
68332: LD_INT 0
68334: ST_TO_ADDR
// end ;
68335: LD_VAR 0 2
68339: RET
// export function SortByClass ( units , class ) ; var un ; begin
68340: LD_INT 0
68342: PPUSH
68343: PPUSH
// if not units or not class then
68344: LD_VAR 0 1
68348: NOT
68349: PUSH
68350: LD_VAR 0 2
68354: NOT
68355: OR
68356: IFFALSE 68360
// exit ;
68358: GO 68455
// result := [ ] ;
68360: LD_ADDR_VAR 0 3
68364: PUSH
68365: EMPTY
68366: ST_TO_ADDR
// for un in units do
68367: LD_ADDR_VAR 0 4
68371: PUSH
68372: LD_VAR 0 1
68376: PUSH
68377: FOR_IN
68378: IFFALSE 68453
// if GetClass ( un ) = class then
68380: LD_VAR 0 4
68384: PPUSH
68385: CALL_OW 257
68389: PUSH
68390: LD_VAR 0 2
68394: EQUAL
68395: IFFALSE 68422
// result := Insert ( result , 1 , un ) else
68397: LD_ADDR_VAR 0 3
68401: PUSH
68402: LD_VAR 0 3
68406: PPUSH
68407: LD_INT 1
68409: PPUSH
68410: LD_VAR 0 4
68414: PPUSH
68415: CALL_OW 2
68419: ST_TO_ADDR
68420: GO 68451
// result := Replace ( result , result + 1 , un ) ;
68422: LD_ADDR_VAR 0 3
68426: PUSH
68427: LD_VAR 0 3
68431: PPUSH
68432: LD_VAR 0 3
68436: PUSH
68437: LD_INT 1
68439: PLUS
68440: PPUSH
68441: LD_VAR 0 4
68445: PPUSH
68446: CALL_OW 1
68450: ST_TO_ADDR
68451: GO 68377
68453: POP
68454: POP
// end ;
68455: LD_VAR 0 3
68459: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68460: LD_INT 0
68462: PPUSH
68463: PPUSH
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
// result := [ ] ;
68469: LD_ADDR_VAR 0 4
68473: PUSH
68474: EMPTY
68475: ST_TO_ADDR
// if x - r < 0 then
68476: LD_VAR 0 1
68480: PUSH
68481: LD_VAR 0 3
68485: MINUS
68486: PUSH
68487: LD_INT 0
68489: LESS
68490: IFFALSE 68502
// min_x := 0 else
68492: LD_ADDR_VAR 0 8
68496: PUSH
68497: LD_INT 0
68499: ST_TO_ADDR
68500: GO 68518
// min_x := x - r ;
68502: LD_ADDR_VAR 0 8
68506: PUSH
68507: LD_VAR 0 1
68511: PUSH
68512: LD_VAR 0 3
68516: MINUS
68517: ST_TO_ADDR
// if y - r < 0 then
68518: LD_VAR 0 2
68522: PUSH
68523: LD_VAR 0 3
68527: MINUS
68528: PUSH
68529: LD_INT 0
68531: LESS
68532: IFFALSE 68544
// min_y := 0 else
68534: LD_ADDR_VAR 0 7
68538: PUSH
68539: LD_INT 0
68541: ST_TO_ADDR
68542: GO 68560
// min_y := y - r ;
68544: LD_ADDR_VAR 0 7
68548: PUSH
68549: LD_VAR 0 2
68553: PUSH
68554: LD_VAR 0 3
68558: MINUS
68559: ST_TO_ADDR
// max_x := x + r ;
68560: LD_ADDR_VAR 0 9
68564: PUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_VAR 0 3
68574: PLUS
68575: ST_TO_ADDR
// max_y := y + r ;
68576: LD_ADDR_VAR 0 10
68580: PUSH
68581: LD_VAR 0 2
68585: PUSH
68586: LD_VAR 0 3
68590: PLUS
68591: ST_TO_ADDR
// for _x = min_x to max_x do
68592: LD_ADDR_VAR 0 5
68596: PUSH
68597: DOUBLE
68598: LD_VAR 0 8
68602: DEC
68603: ST_TO_ADDR
68604: LD_VAR 0 9
68608: PUSH
68609: FOR_TO
68610: IFFALSE 68711
// for _y = min_y to max_y do
68612: LD_ADDR_VAR 0 6
68616: PUSH
68617: DOUBLE
68618: LD_VAR 0 7
68622: DEC
68623: ST_TO_ADDR
68624: LD_VAR 0 10
68628: PUSH
68629: FOR_TO
68630: IFFALSE 68707
// begin if not ValidHex ( _x , _y ) then
68632: LD_VAR 0 5
68636: PPUSH
68637: LD_VAR 0 6
68641: PPUSH
68642: CALL_OW 488
68646: NOT
68647: IFFALSE 68651
// continue ;
68649: GO 68629
// if GetResourceTypeXY ( _x , _y ) then
68651: LD_VAR 0 5
68655: PPUSH
68656: LD_VAR 0 6
68660: PPUSH
68661: CALL_OW 283
68665: IFFALSE 68705
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68667: LD_ADDR_VAR 0 4
68671: PUSH
68672: LD_VAR 0 4
68676: PPUSH
68677: LD_VAR 0 4
68681: PUSH
68682: LD_INT 1
68684: PLUS
68685: PPUSH
68686: LD_VAR 0 5
68690: PUSH
68691: LD_VAR 0 6
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PPUSH
68700: CALL_OW 1
68704: ST_TO_ADDR
// end ;
68705: GO 68629
68707: POP
68708: POP
68709: GO 68609
68711: POP
68712: POP
// end ;
68713: LD_VAR 0 4
68717: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68718: LD_INT 0
68720: PPUSH
68721: PPUSH
68722: PPUSH
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
68727: PPUSH
// if not units then
68728: LD_VAR 0 1
68732: NOT
68733: IFFALSE 68737
// exit ;
68735: GO 69261
// result := UnitFilter ( units , [ f_ok ] ) ;
68737: LD_ADDR_VAR 0 3
68741: PUSH
68742: LD_VAR 0 1
68746: PPUSH
68747: LD_INT 50
68749: PUSH
68750: EMPTY
68751: LIST
68752: PPUSH
68753: CALL_OW 72
68757: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68758: LD_ADDR_VAR 0 8
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_INT 1
68770: ARRAY
68771: PPUSH
68772: CALL_OW 255
68776: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68777: LD_ADDR_VAR 0 10
68781: PUSH
68782: LD_INT 29
68784: PUSH
68785: LD_INT 91
68787: PUSH
68788: LD_INT 49
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: ST_TO_ADDR
// if not result then
68796: LD_VAR 0 3
68800: NOT
68801: IFFALSE 68805
// exit ;
68803: GO 69261
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68805: LD_ADDR_VAR 0 5
68809: PUSH
68810: LD_INT 81
68812: PUSH
68813: LD_VAR 0 8
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PPUSH
68822: CALL_OW 69
68826: ST_TO_ADDR
// for i in result do
68827: LD_ADDR_VAR 0 4
68831: PUSH
68832: LD_VAR 0 3
68836: PUSH
68837: FOR_IN
68838: IFFALSE 69259
// begin tag := GetTag ( i ) + 1 ;
68840: LD_ADDR_VAR 0 9
68844: PUSH
68845: LD_VAR 0 4
68849: PPUSH
68850: CALL_OW 110
68854: PUSH
68855: LD_INT 1
68857: PLUS
68858: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68859: LD_ADDR_VAR 0 7
68863: PUSH
68864: LD_VAR 0 4
68868: PPUSH
68869: CALL_OW 250
68873: PPUSH
68874: LD_VAR 0 4
68878: PPUSH
68879: CALL_OW 251
68883: PPUSH
68884: LD_INT 6
68886: PPUSH
68887: CALL 68460 0 3
68891: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68892: LD_VAR 0 4
68896: PPUSH
68897: CALL_OW 247
68901: PUSH
68902: LD_INT 2
68904: EQUAL
68905: PUSH
68906: LD_VAR 0 7
68910: AND
68911: PUSH
68912: LD_VAR 0 4
68916: PPUSH
68917: CALL_OW 264
68921: PUSH
68922: LD_VAR 0 10
68926: IN
68927: NOT
68928: AND
68929: IFFALSE 68968
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68931: LD_VAR 0 4
68935: PPUSH
68936: LD_VAR 0 7
68940: PUSH
68941: LD_INT 1
68943: ARRAY
68944: PUSH
68945: LD_INT 1
68947: ARRAY
68948: PPUSH
68949: LD_VAR 0 7
68953: PUSH
68954: LD_INT 1
68956: ARRAY
68957: PUSH
68958: LD_INT 2
68960: ARRAY
68961: PPUSH
68962: CALL_OW 116
68966: GO 69257
// if path > tag then
68968: LD_VAR 0 2
68972: PUSH
68973: LD_VAR 0 9
68977: GREATER
68978: IFFALSE 69186
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68980: LD_ADDR_VAR 0 6
68984: PUSH
68985: LD_VAR 0 5
68989: PPUSH
68990: LD_INT 91
68992: PUSH
68993: LD_VAR 0 4
68997: PUSH
68998: LD_INT 8
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: PPUSH
69006: CALL_OW 72
69010: ST_TO_ADDR
// if nearEnemy then
69011: LD_VAR 0 6
69015: IFFALSE 69084
// begin if GetWeapon ( i ) = ru_time_lapser then
69017: LD_VAR 0 4
69021: PPUSH
69022: CALL_OW 264
69026: PUSH
69027: LD_INT 49
69029: EQUAL
69030: IFFALSE 69058
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69032: LD_VAR 0 4
69036: PPUSH
69037: LD_VAR 0 6
69041: PPUSH
69042: LD_VAR 0 4
69046: PPUSH
69047: CALL_OW 74
69051: PPUSH
69052: CALL_OW 112
69056: GO 69082
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69058: LD_VAR 0 4
69062: PPUSH
69063: LD_VAR 0 6
69067: PPUSH
69068: LD_VAR 0 4
69072: PPUSH
69073: CALL_OW 74
69077: PPUSH
69078: CALL_OW 115
// end else
69082: GO 69184
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69084: LD_VAR 0 4
69088: PPUSH
69089: LD_VAR 0 2
69093: PUSH
69094: LD_VAR 0 9
69098: ARRAY
69099: PUSH
69100: LD_INT 1
69102: ARRAY
69103: PPUSH
69104: LD_VAR 0 2
69108: PUSH
69109: LD_VAR 0 9
69113: ARRAY
69114: PUSH
69115: LD_INT 2
69117: ARRAY
69118: PPUSH
69119: CALL_OW 297
69123: PUSH
69124: LD_INT 6
69126: GREATER
69127: IFFALSE 69170
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69129: LD_VAR 0 4
69133: PPUSH
69134: LD_VAR 0 2
69138: PUSH
69139: LD_VAR 0 9
69143: ARRAY
69144: PUSH
69145: LD_INT 1
69147: ARRAY
69148: PPUSH
69149: LD_VAR 0 2
69153: PUSH
69154: LD_VAR 0 9
69158: ARRAY
69159: PUSH
69160: LD_INT 2
69162: ARRAY
69163: PPUSH
69164: CALL_OW 114
69168: GO 69184
// SetTag ( i , tag ) ;
69170: LD_VAR 0 4
69174: PPUSH
69175: LD_VAR 0 9
69179: PPUSH
69180: CALL_OW 109
// end else
69184: GO 69257
// if enemy then
69186: LD_VAR 0 5
69190: IFFALSE 69257
// begin if GetWeapon ( i ) = ru_time_lapser then
69192: LD_VAR 0 4
69196: PPUSH
69197: CALL_OW 264
69201: PUSH
69202: LD_INT 49
69204: EQUAL
69205: IFFALSE 69233
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69207: LD_VAR 0 4
69211: PPUSH
69212: LD_VAR 0 5
69216: PPUSH
69217: LD_VAR 0 4
69221: PPUSH
69222: CALL_OW 74
69226: PPUSH
69227: CALL_OW 112
69231: GO 69257
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69233: LD_VAR 0 4
69237: PPUSH
69238: LD_VAR 0 5
69242: PPUSH
69243: LD_VAR 0 4
69247: PPUSH
69248: CALL_OW 74
69252: PPUSH
69253: CALL_OW 115
// end ; end ;
69257: GO 68837
69259: POP
69260: POP
// end ;
69261: LD_VAR 0 3
69265: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69266: LD_INT 0
69268: PPUSH
69269: PPUSH
69270: PPUSH
// if not unit or IsInUnit ( unit ) then
69271: LD_VAR 0 1
69275: NOT
69276: PUSH
69277: LD_VAR 0 1
69281: PPUSH
69282: CALL_OW 310
69286: OR
69287: IFFALSE 69291
// exit ;
69289: GO 69382
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69291: LD_ADDR_VAR 0 4
69295: PUSH
69296: LD_VAR 0 1
69300: PPUSH
69301: CALL_OW 250
69305: PPUSH
69306: LD_VAR 0 2
69310: PPUSH
69311: LD_INT 1
69313: PPUSH
69314: CALL_OW 272
69318: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69319: LD_ADDR_VAR 0 5
69323: PUSH
69324: LD_VAR 0 1
69328: PPUSH
69329: CALL_OW 251
69333: PPUSH
69334: LD_VAR 0 2
69338: PPUSH
69339: LD_INT 1
69341: PPUSH
69342: CALL_OW 273
69346: ST_TO_ADDR
// if ValidHex ( x , y ) then
69347: LD_VAR 0 4
69351: PPUSH
69352: LD_VAR 0 5
69356: PPUSH
69357: CALL_OW 488
69361: IFFALSE 69382
// ComTurnXY ( unit , x , y ) ;
69363: LD_VAR 0 1
69367: PPUSH
69368: LD_VAR 0 4
69372: PPUSH
69373: LD_VAR 0 5
69377: PPUSH
69378: CALL_OW 118
// end ;
69382: LD_VAR 0 3
69386: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69387: LD_INT 0
69389: PPUSH
69390: PPUSH
// result := false ;
69391: LD_ADDR_VAR 0 3
69395: PUSH
69396: LD_INT 0
69398: ST_TO_ADDR
// if not units then
69399: LD_VAR 0 2
69403: NOT
69404: IFFALSE 69408
// exit ;
69406: GO 69453
// for i in units do
69408: LD_ADDR_VAR 0 4
69412: PUSH
69413: LD_VAR 0 2
69417: PUSH
69418: FOR_IN
69419: IFFALSE 69451
// if See ( side , i ) then
69421: LD_VAR 0 1
69425: PPUSH
69426: LD_VAR 0 4
69430: PPUSH
69431: CALL_OW 292
69435: IFFALSE 69449
// begin result := true ;
69437: LD_ADDR_VAR 0 3
69441: PUSH
69442: LD_INT 1
69444: ST_TO_ADDR
// exit ;
69445: POP
69446: POP
69447: GO 69453
// end ;
69449: GO 69418
69451: POP
69452: POP
// end ;
69453: LD_VAR 0 3
69457: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69458: LD_INT 0
69460: PPUSH
69461: PPUSH
69462: PPUSH
69463: PPUSH
// if not unit or not points then
69464: LD_VAR 0 1
69468: NOT
69469: PUSH
69470: LD_VAR 0 2
69474: NOT
69475: OR
69476: IFFALSE 69480
// exit ;
69478: GO 69570
// dist := 99999 ;
69480: LD_ADDR_VAR 0 5
69484: PUSH
69485: LD_INT 99999
69487: ST_TO_ADDR
// for i in points do
69488: LD_ADDR_VAR 0 4
69492: PUSH
69493: LD_VAR 0 2
69497: PUSH
69498: FOR_IN
69499: IFFALSE 69568
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69501: LD_ADDR_VAR 0 6
69505: PUSH
69506: LD_VAR 0 1
69510: PPUSH
69511: LD_VAR 0 4
69515: PUSH
69516: LD_INT 1
69518: ARRAY
69519: PPUSH
69520: LD_VAR 0 4
69524: PUSH
69525: LD_INT 2
69527: ARRAY
69528: PPUSH
69529: CALL_OW 297
69533: ST_TO_ADDR
// if tmpDist < dist then
69534: LD_VAR 0 6
69538: PUSH
69539: LD_VAR 0 5
69543: LESS
69544: IFFALSE 69566
// begin result := i ;
69546: LD_ADDR_VAR 0 3
69550: PUSH
69551: LD_VAR 0 4
69555: ST_TO_ADDR
// dist := tmpDist ;
69556: LD_ADDR_VAR 0 5
69560: PUSH
69561: LD_VAR 0 6
69565: ST_TO_ADDR
// end ; end ;
69566: GO 69498
69568: POP
69569: POP
// end ;
69570: LD_VAR 0 3
69574: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69575: LD_INT 0
69577: PPUSH
// uc_side := side ;
69578: LD_ADDR_OWVAR 20
69582: PUSH
69583: LD_VAR 0 1
69587: ST_TO_ADDR
// uc_nation := 3 ;
69588: LD_ADDR_OWVAR 21
69592: PUSH
69593: LD_INT 3
69595: ST_TO_ADDR
// vc_chassis := 25 ;
69596: LD_ADDR_OWVAR 37
69600: PUSH
69601: LD_INT 25
69603: ST_TO_ADDR
// vc_engine := engine_siberite ;
69604: LD_ADDR_OWVAR 39
69608: PUSH
69609: LD_INT 3
69611: ST_TO_ADDR
// vc_control := control_computer ;
69612: LD_ADDR_OWVAR 38
69616: PUSH
69617: LD_INT 3
69619: ST_TO_ADDR
// vc_weapon := 59 ;
69620: LD_ADDR_OWVAR 40
69624: PUSH
69625: LD_INT 59
69627: ST_TO_ADDR
// result := CreateVehicle ;
69628: LD_ADDR_VAR 0 5
69632: PUSH
69633: CALL_OW 45
69637: ST_TO_ADDR
// SetDir ( result , d ) ;
69638: LD_VAR 0 5
69642: PPUSH
69643: LD_VAR 0 4
69647: PPUSH
69648: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69652: LD_VAR 0 5
69656: PPUSH
69657: LD_VAR 0 2
69661: PPUSH
69662: LD_VAR 0 3
69666: PPUSH
69667: LD_INT 0
69669: PPUSH
69670: CALL_OW 48
// end ;
69674: LD_VAR 0 5
69678: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69679: LD_INT 0
69681: PPUSH
69682: PPUSH
69683: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69684: LD_ADDR_VAR 0 2
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69707: LD_VAR 0 1
69711: NOT
69712: PUSH
69713: LD_VAR 0 1
69717: PPUSH
69718: CALL_OW 264
69722: PUSH
69723: LD_INT 12
69725: PUSH
69726: LD_INT 51
69728: PUSH
69729: LD_INT 32
69731: PUSH
69732: LD_INT 89
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: IN
69741: NOT
69742: OR
69743: IFFALSE 69747
// exit ;
69745: GO 69845
// for i := 1 to 3 do
69747: LD_ADDR_VAR 0 3
69751: PUSH
69752: DOUBLE
69753: LD_INT 1
69755: DEC
69756: ST_TO_ADDR
69757: LD_INT 3
69759: PUSH
69760: FOR_TO
69761: IFFALSE 69843
// begin tmp := GetCargo ( cargo , i ) ;
69763: LD_ADDR_VAR 0 4
69767: PUSH
69768: LD_VAR 0 1
69772: PPUSH
69773: LD_VAR 0 3
69777: PPUSH
69778: CALL_OW 289
69782: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69783: LD_ADDR_VAR 0 2
69787: PUSH
69788: LD_VAR 0 2
69792: PPUSH
69793: LD_VAR 0 3
69797: PPUSH
69798: LD_VAR 0 4
69802: PPUSH
69803: CALL_OW 1
69807: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69808: LD_ADDR_VAR 0 2
69812: PUSH
69813: LD_VAR 0 2
69817: PPUSH
69818: LD_INT 4
69820: PPUSH
69821: LD_VAR 0 2
69825: PUSH
69826: LD_INT 4
69828: ARRAY
69829: PUSH
69830: LD_VAR 0 4
69834: PLUS
69835: PPUSH
69836: CALL_OW 1
69840: ST_TO_ADDR
// end ;
69841: GO 69760
69843: POP
69844: POP
// end ;
69845: LD_VAR 0 2
69849: RET
// export function Length ( array ) ; begin
69850: LD_INT 0
69852: PPUSH
// result := array + 0 ;
69853: LD_ADDR_VAR 0 2
69857: PUSH
69858: LD_VAR 0 1
69862: PUSH
69863: LD_INT 0
69865: PLUS
69866: ST_TO_ADDR
// end ;
69867: LD_VAR 0 2
69871: RET
// export function PrepareArray ( array ) ; begin
69872: LD_INT 0
69874: PPUSH
// result := array diff 0 ;
69875: LD_ADDR_VAR 0 2
69879: PUSH
69880: LD_VAR 0 1
69884: PUSH
69885: LD_INT 0
69887: DIFF
69888: ST_TO_ADDR
// if not result [ 1 ] then
69889: LD_VAR 0 2
69893: PUSH
69894: LD_INT 1
69896: ARRAY
69897: NOT
69898: IFFALSE 69918
// result := Delete ( result , 1 ) ;
69900: LD_ADDR_VAR 0 2
69904: PUSH
69905: LD_VAR 0 2
69909: PPUSH
69910: LD_INT 1
69912: PPUSH
69913: CALL_OW 3
69917: ST_TO_ADDR
// end ;
69918: LD_VAR 0 2
69922: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69923: LD_INT 0
69925: PPUSH
69926: PPUSH
69927: PPUSH
69928: PPUSH
// sibRocketRange := 25 ;
69929: LD_ADDR_VAR 0 6
69933: PUSH
69934: LD_INT 25
69936: ST_TO_ADDR
// result := false ;
69937: LD_ADDR_VAR 0 4
69941: PUSH
69942: LD_INT 0
69944: ST_TO_ADDR
// for i := 0 to 5 do
69945: LD_ADDR_VAR 0 5
69949: PUSH
69950: DOUBLE
69951: LD_INT 0
69953: DEC
69954: ST_TO_ADDR
69955: LD_INT 5
69957: PUSH
69958: FOR_TO
69959: IFFALSE 70026
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69961: LD_VAR 0 1
69965: PPUSH
69966: LD_VAR 0 5
69970: PPUSH
69971: LD_VAR 0 6
69975: PPUSH
69976: CALL_OW 272
69980: PPUSH
69981: LD_VAR 0 2
69985: PPUSH
69986: LD_VAR 0 5
69990: PPUSH
69991: LD_VAR 0 6
69995: PPUSH
69996: CALL_OW 273
70000: PPUSH
70001: LD_VAR 0 3
70005: PPUSH
70006: CALL_OW 309
70010: IFFALSE 70024
// begin result := true ;
70012: LD_ADDR_VAR 0 4
70016: PUSH
70017: LD_INT 1
70019: ST_TO_ADDR
// exit ;
70020: POP
70021: POP
70022: GO 70028
// end ;
70024: GO 69958
70026: POP
70027: POP
// end ;
70028: LD_VAR 0 4
70032: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70033: LD_INT 0
70035: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70036: LD_VAR 0 1
70040: PPUSH
70041: LD_VAR 0 2
70045: PPUSH
70046: LD_INT 0
70048: PPUSH
70049: LD_INT 0
70051: PPUSH
70052: LD_INT 1
70054: PPUSH
70055: LD_INT 0
70057: PPUSH
70058: CALL_OW 587
// end ; end_of_file
70062: LD_VAR 0 3
70066: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70067: LD_VAR 0 1
70071: PUSH
70072: LD_INT 200
70074: DOUBLE
70075: GREATEREQUAL
70076: IFFALSE 70084
70078: LD_INT 299
70080: DOUBLE
70081: LESSEQUAL
70082: IFTRUE 70086
70084: GO 70118
70086: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70087: LD_VAR 0 1
70091: PPUSH
70092: LD_VAR 0 2
70096: PPUSH
70097: LD_VAR 0 3
70101: PPUSH
70102: LD_VAR 0 4
70106: PPUSH
70107: LD_VAR 0 5
70111: PPUSH
70112: CALL 24752 0 5
70116: GO 70195
70118: LD_INT 300
70120: DOUBLE
70121: GREATEREQUAL
70122: IFFALSE 70130
70124: LD_INT 399
70126: DOUBLE
70127: LESSEQUAL
70128: IFTRUE 70132
70130: GO 70194
70132: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70133: LD_VAR 0 1
70137: PPUSH
70138: LD_VAR 0 2
70142: PPUSH
70143: LD_VAR 0 3
70147: PPUSH
70148: LD_VAR 0 4
70152: PPUSH
70153: LD_VAR 0 5
70157: PPUSH
70158: LD_VAR 0 6
70162: PPUSH
70163: LD_VAR 0 7
70167: PPUSH
70168: LD_VAR 0 8
70172: PPUSH
70173: LD_VAR 0 9
70177: PPUSH
70178: LD_VAR 0 10
70182: PPUSH
70183: LD_VAR 0 11
70187: PPUSH
70188: CALL 21085 0 11
70192: GO 70195
70194: POP
// end ;
70195: PPOPN 11
70197: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70198: LD_VAR 0 1
70202: PPUSH
70203: LD_VAR 0 2
70207: PPUSH
70208: LD_VAR 0 3
70212: PPUSH
70213: LD_VAR 0 4
70217: PPUSH
70218: LD_VAR 0 5
70222: PPUSH
70223: CALL 24488 0 5
// end ; end_of_file
70227: PPOPN 5
70229: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70230: LD_VAR 0 1
70234: PPUSH
70235: LD_VAR 0 2
70239: PPUSH
70240: LD_VAR 0 3
70244: PPUSH
70245: LD_VAR 0 4
70249: PPUSH
70250: LD_VAR 0 5
70254: PPUSH
70255: LD_VAR 0 6
70259: PPUSH
70260: CALL 8778 0 6
// end ;
70264: PPOPN 6
70266: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70267: LD_INT 0
70269: PPUSH
// begin if not units then
70270: LD_VAR 0 1
70274: NOT
70275: IFFALSE 70279
// exit ;
70277: GO 70279
// end ;
70279: PPOPN 7
70281: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70282: CALL 8749 0 0
// end ;
70286: PPOPN 1
70288: END
