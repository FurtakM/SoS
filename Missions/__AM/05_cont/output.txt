// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 62772 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 62852 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 62732 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 62671 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 62932 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 28815 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 28815 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 28815 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 28815 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 28815 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 28815 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 28815 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 28815 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 28815 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 28815 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if i in UnitsInside ( b ) then
3188: LD_VAR 0 1
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 62563 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL 70202 0 2
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL 70202 0 2
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6326
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5605
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5587: LD_EXP 17
5591: PPUSH
5592: LD_EXP 2
5596: PUSH
5597: LD_STRING Gladstone
5599: STR
5600: PPUSH
5601: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5605: LD_EXP 19
5609: PPUSH
5610: CALL_OW 302
5614: PUSH
5615: LD_EXP 19
5619: PPUSH
5620: CALL_OW 255
5624: PUSH
5625: LD_INT 1
5627: EQUAL
5628: AND
5629: IFFALSE 5659
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5631: LD_EXP 19
5635: PPUSH
5636: LD_EXP 2
5640: PUSH
5641: LD_STRING Denis
5643: STR
5644: PPUSH
5645: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5649: LD_INT 1
5651: PPUSH
5652: LD_STRING DenisInDelta
5654: PPUSH
5655: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5659: LD_EXP 22
5663: PPUSH
5664: CALL_OW 302
5668: IFFALSE 5688
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5670: LD_EXP 22
5674: PPUSH
5675: LD_EXP 2
5679: PUSH
5680: LD_STRING Lisa
5682: STR
5683: PPUSH
5684: CALL_OW 38
// end ; if IsOk ( Frank ) then
5688: LD_EXP 23
5692: PPUSH
5693: CALL_OW 302
5697: IFFALSE 5717
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5699: LD_EXP 23
5703: PPUSH
5704: LD_EXP 2
5708: PUSH
5709: LD_STRING Frank
5711: STR
5712: PPUSH
5713: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5717: LD_EXP 24
5721: PPUSH
5722: CALL_OW 302
5726: IFFALSE 5746
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5728: LD_EXP 24
5732: PPUSH
5733: LD_EXP 2
5737: PUSH
5738: LD_STRING Bobby
5740: STR
5741: PPUSH
5742: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5746: LD_EXP 25
5750: PPUSH
5751: CALL_OW 302
5755: IFFALSE 5775
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5757: LD_EXP 25
5761: PPUSH
5762: LD_EXP 2
5766: PUSH
5767: LD_STRING Cyrus
5769: STR
5770: PPUSH
5771: CALL_OW 38
// end ; if IsOk ( Brown ) then
5775: LD_EXP 20
5779: PPUSH
5780: CALL_OW 302
5784: IFFALSE 5804
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5786: LD_EXP 20
5790: PPUSH
5791: LD_EXP 2
5795: PUSH
5796: LD_STRING Brown
5798: STR
5799: PPUSH
5800: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5804: LD_EXP 21
5808: PPUSH
5809: CALL_OW 302
5813: IFFALSE 5833
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5815: LD_EXP 21
5819: PPUSH
5820: LD_EXP 2
5824: PUSH
5825: LD_STRING Donaldson
5827: STR
5828: PPUSH
5829: CALL_OW 38
// end ; if IsOk ( Mike ) then
5833: LD_EXP 26
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5862
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5844: LD_EXP 26
5848: PPUSH
5849: LD_EXP 2
5853: PUSH
5854: LD_STRING Mike
5856: STR
5857: PPUSH
5858: CALL_OW 38
// if others then
5862: LD_EXP 27
5866: IFFALSE 5880
// SaveCharacters ( others , othersInDelta ) ;
5868: LD_EXP 27
5872: PPUSH
5873: LD_STRING othersInDelta
5875: PPUSH
5876: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5880: LD_INT 22
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: IFFALSE 5952
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 16
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 69
5938: PUSH
5939: LD_EXP 26
5943: DIFF
5944: PPUSH
5945: LD_STRING apeInDelta
5947: PPUSH
5948: CALL_OW 38
// tmp := [ ] ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: EMPTY
5958: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5959: LD_INT 22
5961: PUSH
5962: LD_INT 1
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 21
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: IFFALSE 6098
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5989: LD_ADDR_VAR 0 1
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: PUSH
6023: FOR_IN
6024: IFFALSE 6096
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 248
6045: PUSH
6046: LD_VAR 0 1
6050: PPUSH
6051: CALL_OW 265
6055: PUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 262
6065: PUSH
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL_OW 263
6075: PUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: CALL_OW 264
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ADD
6093: ST_TO_ADDR
6094: GO 6023
6096: POP
6097: POP
// if tmp then
6098: LD_VAR 0 2
6102: IFFALSE 6116
// SaveVariable ( tmp , vehiclesInDelta ) ;
6104: LD_VAR 0 2
6108: PPUSH
6109: LD_STRING vehiclesInDelta
6111: PPUSH
6112: CALL_OW 39
// tmp := [ ] ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: EMPTY
6122: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 21
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PPUSH
6147: CALL_OW 69
6151: IFFALSE 6304
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6153: LD_ADDR_VAR 0 1
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 21
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 69
6186: PUSH
6187: FOR_IN
6188: IFFALSE 6302
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_VAR 0 2
6199: PUSH
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 266
6209: PUSH
6210: LD_VAR 0 1
6214: PPUSH
6215: CALL_OW 267
6219: PUSH
6220: LD_VAR 0 1
6224: PPUSH
6225: CALL_OW 250
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 251
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 254
6249: PUSH
6250: LD_VAR 0 1
6254: PPUSH
6255: LD_INT 1
6257: PPUSH
6258: CALL_OW 268
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: CALL_OW 268
6275: PUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: CALL_OW 269
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: ADD
6299: ST_TO_ADDR
6300: GO 6187
6302: POP
6303: POP
// if tmp then
6304: LD_VAR 0 2
6308: IFFALSE 6322
// SaveVariable ( tmp , buildingsInDelta ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_STRING buildingsInDelta
6317: PPUSH
6318: CALL_OW 39
// YouWin ;
6322: CALL_OW 103
// end ; end_of_file
6326: PPOPN 5
6328: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
6333: PPUSH
6334: PPUSH
// InitHc ;
6335: CALL_OW 19
// InitUc ;
6339: CALL_OW 18
// uc_side := 2 ;
6343: LD_ADDR_OWVAR 20
6347: PUSH
6348: LD_INT 2
6350: ST_TO_ADDR
// uc_nation := 2 ;
6351: LD_ADDR_OWVAR 21
6355: PUSH
6356: LD_INT 2
6358: ST_TO_ADDR
// if not amount then
6359: LD_VAR 0 1
6363: NOT
6364: IFFALSE 6368
// exit ;
6366: GO 6491
// for i = 1 to amount do
6368: LD_ADDR_VAR 0 5
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6479
// begin PrepareHuman ( false , 1 , skill ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 380
// un := CreateHuman ;
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: CALL_OW 44
6410: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6411: LD_ADDR_VAR 0 7
6415: PUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: LD_INT 1
6423: PPUSH
6424: LD_VAR 0 6
6428: PPUSH
6429: CALL_OW 2
6433: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6434: LD_VAR 0 6
6438: PPUSH
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// if i mod 2 = 0 then
6451: LD_VAR 0 5
6455: PUSH
6456: LD_INT 2
6458: MOD
6459: PUSH
6460: LD_INT 0
6462: EQUAL
6463: IFFALSE 6477
// SetTag ( un , 11 ) ;
6465: LD_VAR 0 6
6469: PPUSH
6470: LD_INT 11
6472: PPUSH
6473: CALL_OW 109
// end ;
6477: GO 6383
6479: POP
6480: POP
// result := tmp ;
6481: LD_ADDR_VAR 0 4
6485: PUSH
6486: LD_VAR 0 7
6490: ST_TO_ADDR
// end ;
6491: LD_VAR 0 4
6495: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6496: LD_EXP 6
6500: IFFALSE 7578
6502: GO 6504
6504: DISABLE
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
// begin more_troops := false ;
6515: LD_ADDR_VAR 0 3
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 10500
6559: PUSH
6560: LD_INT 8400
6562: PUSH
6563: LD_INT 6300
6565: PUSH
6566: LD_INT 5250
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_OWVAR 67
6579: ARRAY
6580: ST_TO_ADDR
// force := [ ] ;
6581: LD_ADDR_VAR 0 8
6585: PUSH
6586: EMPTY
6587: ST_TO_ADDR
// ar_forces := [ ] ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: EMPTY
6594: ST_TO_ADDR
// ap_killers := [ ] ;
6595: LD_ADDR_EXP 29
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// Wait ( timer ) ;
6602: LD_VAR 0 2
6606: PPUSH
6607: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6611: LD_EXP 19
6615: PUSH
6616: LD_EXP 19
6620: PPUSH
6621: CALL_OW 255
6625: PUSH
6626: LD_INT 4
6628: EQUAL
6629: AND
6630: IFFALSE 6639
// Wait ( 0 0$45 ) ;
6632: LD_INT 1575
6634: PPUSH
6635: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: IFFALSE 6684
// begin wait ( 1 1$25 ) ;
6669: LD_INT 2975
6671: PPUSH
6672: CALL_OW 67
// more_troops := true ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// end ; if more_troops then
6684: LD_VAR 0 3
6688: IFFALSE 6884
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6690: LD_ADDR_VAR 0 8
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: LD_INT 5
6700: PUSH
6701: LD_INT 6
6703: PUSH
6704: LD_INT 7
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_OWVAR 67
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PPUSH
6724: LD_INT 14
6726: PPUSH
6727: CALL 6329 0 3
6731: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6732: LD_ADDR_VAR 0 7
6736: PUSH
6737: LD_INT 2
6739: PPUSH
6740: LD_INT 3
6742: PPUSH
6743: LD_INT 22
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 42
6754: PUSH
6755: LD_INT 42
6757: PUSH
6758: LD_INT 43
6760: PUSH
6761: LD_INT 44
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: PUSH
6770: LD_OWVAR 67
6774: ARRAY
6775: PPUSH
6776: LD_INT 90
6778: PPUSH
6779: CALL 435 0 7
6783: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 4
6791: PPUSH
6792: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6796: LD_VAR 0 7
6800: PPUSH
6801: LD_INT 13
6803: PPUSH
6804: LD_INT 0
6806: PPUSH
6807: CALL_OW 49
// uc_side := 2 ;
6811: LD_ADDR_OWVAR 20
6815: PUSH
6816: LD_INT 2
6818: ST_TO_ADDR
// uc_nation := 2 ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 2
6826: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6827: LD_INT 0
6829: PPUSH
6830: LD_INT 1
6832: PPUSH
6833: LD_VAR 0 4
6837: PPUSH
6838: CALL_OW 380
// un := CreateHuman ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: CALL_OW 44
6851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6852: LD_VAR 0 6
6856: PPUSH
6857: LD_VAR 0 7
6861: PPUSH
6862: CALL_OW 52
// force := force ^ un ;
6866: LD_ADDR_VAR 0 8
6870: PUSH
6871: LD_VAR 0 8
6875: PUSH
6876: LD_VAR 0 6
6880: ADD
6881: ST_TO_ADDR
// end else
6882: GO 6926
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6884: LD_ADDR_VAR 0 8
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_OWVAR 67
6911: ARRAY
6912: PPUSH
6913: LD_VAR 0 4
6917: PPUSH
6918: LD_INT 14
6920: PPUSH
6921: CALL 6329 0 3
6925: ST_TO_ADDR
// end ; if force then
6926: LD_VAR 0 8
6930: IFFALSE 6942
// ar_forces := force ;
6932: LD_ADDR_EXP 28
6936: PUSH
6937: LD_VAR 0 8
6941: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6949: LD_INT 22
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 21
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PUSH
6978: LD_INT 0
6980: EQUAL
6981: IFFALSE 6942
// wait ( timer ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6992: LD_ADDR_VAR 0 8
6996: PUSH
6997: LD_INT 4
6999: PUSH
7000: LD_INT 5
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: LD_INT 7
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_OWVAR 67
7019: ARRAY
7020: PPUSH
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_INT 13
7028: PUSH
7029: LD_INT 14
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: CALL_OW 12
7046: ARRAY
7047: PPUSH
7048: CALL 6329 0 3
7052: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: PUSH
7062: LD_EXP 6
7066: AND
7067: IFFALSE 7146
// begin uc_side := 2 ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_INT 2
7076: ST_TO_ADDR
// uc_nation := 2 ;
7077: LD_ADDR_OWVAR 21
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7085: LD_INT 0
7087: PPUSH
7088: LD_INT 2
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: CALL_OW 380
// eng := CreateHuman ;
7100: LD_ADDR_VAR 0 5
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7110: LD_VAR 0 5
7114: PPUSH
7115: LD_INT 13
7117: PPUSH
7118: LD_INT 0
7120: PPUSH
7121: CALL_OW 49
// Wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_EXP 6
7141: PPUSH
7142: CALL_OW 180
// end ; if force then
7146: LD_VAR 0 8
7150: IFFALSE 7162
// ar_forces := force ;
7152: LD_ADDR_EXP 28
7156: PUSH
7157: LD_VAR 0 8
7161: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// if eng then
7169: LD_VAR 0 5
7173: IFFALSE 7227
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7175: LD_EXP 6
7179: PPUSH
7180: CALL_OW 255
7184: PUSH
7185: LD_INT 2
7187: EQUAL
7188: PUSH
7189: LD_VAR 0 5
7193: PPUSH
7194: CALL_OW 302
7198: AND
7199: PUSH
7200: LD_VAR 0 5
7204: PPUSH
7205: CALL_OW 310
7209: NOT
7210: AND
7211: IFFALSE 7227
// ComEnterUnit ( eng , Delta ) ;
7213: LD_VAR 0 5
7217: PPUSH
7218: LD_EXP 6
7222: PPUSH
7223: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 69
7255: PUSH
7256: LD_INT 0
7258: EQUAL
7259: IFFALSE 7162
// Wait ( 2 2$00 ) ;
7261: LD_INT 4200
7263: PPUSH
7264: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7268: LD_ADDR_EXP 29
7272: PUSH
7273: LD_INT 1
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_OWVAR 67
7295: ARRAY
7296: PPUSH
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_INT 13
7304: PPUSH
7305: CALL 6329 0 3
7309: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 2
7317: MUL
7318: PPUSH
7319: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7323: LD_ADDR_EXP 28
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: LD_INT 6
7333: PUSH
7334: LD_INT 7
7336: PUSH
7337: LD_INT 8
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 4
7356: PPUSH
7357: LD_INT 13
7359: PPUSH
7360: CALL 6329 0 3
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: LD_INT 4
7373: PUSH
7374: LD_INT 4
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_OWVAR 67
7387: ARRAY
7388: PPUSH
7389: LD_VAR 0 4
7393: PPUSH
7394: LD_INT 14
7396: PPUSH
7397: CALL 6329 0 3
7401: ADD
7402: ST_TO_ADDR
// if Difficulty < 4 then
7403: LD_OWVAR 67
7407: PUSH
7408: LD_INT 4
7410: LESS
7411: IFFALSE 7415
// exit ;
7413: GO 7578
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7415: LD_ADDR_VAR 0 7
7419: PUSH
7420: LD_INT 2
7422: PPUSH
7423: LD_INT 3
7425: PPUSH
7426: LD_INT 22
7428: PPUSH
7429: LD_INT 1
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_INT 44
7437: PPUSH
7438: LD_INT 90
7440: PPUSH
7441: CALL 435 0 7
7445: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7446: LD_VAR 0 7
7450: PPUSH
7451: LD_INT 1
7453: PPUSH
7454: CALL_OW 233
// PlaceUnitXY ( veh , 27 , 51 , false ) ;
7458: LD_VAR 0 7
7462: PPUSH
7463: LD_INT 27
7465: PPUSH
7466: LD_INT 51
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 48
// uc_side := 2 ;
7476: LD_ADDR_OWVAR 20
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// uc_nation := 2 ;
7484: LD_ADDR_OWVAR 21
7488: PUSH
7489: LD_INT 2
7491: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7492: LD_INT 0
7494: PPUSH
7495: LD_INT 1
7497: PPUSH
7498: LD_VAR 0 4
7502: PPUSH
7503: CALL_OW 380
// un := CreateHuman ;
7507: LD_ADDR_VAR 0 6
7511: PUSH
7512: CALL_OW 44
7516: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7517: LD_VAR 0 6
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7531: LD_ADDR_EXP 28
7535: PUSH
7536: LD_EXP 28
7540: PPUSH
7541: LD_VAR 0 6
7545: PPUSH
7546: CALL 66283 0 2
7550: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7551: LD_ADDR_EXP 28
7555: PUSH
7556: LD_EXP 28
7560: PUSH
7561: LD_INT 4
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_INT 19
7571: PPUSH
7572: CALL 6329 0 3
7576: UNION
7577: ST_TO_ADDR
// end ;
7578: PPOPN 8
7580: END
// every 0 0$03 trigger ar_forces do var i , target ;
7581: LD_EXP 28
7585: IFFALSE 7783
7587: GO 7589
7589: DISABLE
7590: LD_INT 0
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// if not ar_forces then
7595: LD_EXP 28
7599: NOT
7600: IFFALSE 7604
// exit ;
7602: GO 7783
// if Delta then
7604: LD_EXP 6
7608: IFFALSE 7622
// target := Delta else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_EXP 6
7619: ST_TO_ADDR
7620: GO 7632
// target := JMM ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_EXP 16
7631: ST_TO_ADDR
// for i in ar_forces do
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_EXP 28
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7781
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7645: LD_VAR 0 1
7649: PUSH
7650: LD_INT 55
7652: PUSH
7653: EMPTY
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: IN
7661: IFFALSE 7704
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7663: LD_VAR 0 1
7667: PPUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: PPUSH
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 310
7692: PPUSH
7693: CALL_OW 74
7697: PPUSH
7698: CALL_OW 115
7702: GO 7779
// if GetDistUnits ( i , target ) > 30 then
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: CALL_OW 296
7718: PUSH
7719: LD_INT 30
7721: GREATER
7722: IFFALSE 7755
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7724: LD_VAR 0 1
7728: PPUSH
7729: LD_VAR 0 2
7733: PPUSH
7734: CALL_OW 250
7738: PPUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: CALL_OW 251
7748: PPUSH
7749: CALL_OW 114
7753: GO 7779
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7755: LD_VAR 0 1
7759: PPUSH
7760: LD_INT 81
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: CALL 927 0 2
// end ;
7779: GO 7642
7781: POP
7782: POP
// end ;
7783: PPOPN 2
7785: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7786: LD_EXP 29
7790: IFFALSE 7950
7792: GO 7794
7794: DISABLE
7795: LD_INT 0
7797: PPUSH
7798: PPUSH
7799: PPUSH
// begin enable ;
7800: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7801: LD_ADDR_VAR 0 1
7805: PUSH
7806: LD_INT 22
7808: PUSH
7809: LD_INT 0
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 12
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// if not filter then
7835: LD_VAR 0 1
7839: NOT
7840: IFFALSE 7867
// begin ar_forces := ar_forces ^ ap_killers ;
7842: LD_ADDR_EXP 28
7846: PUSH
7847: LD_EXP 28
7851: PUSH
7852: LD_EXP 29
7856: ADD
7857: ST_TO_ADDR
// ap_killers := [ ] ;
7858: LD_ADDR_EXP 29
7862: PUSH
7863: EMPTY
7864: ST_TO_ADDR
// exit ;
7865: GO 7950
// end ; for i in ap_killers do
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_EXP 29
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7948
// begin if not IsOk ( i ) then
7880: LD_VAR 0 2
7884: PPUSH
7885: CALL_OW 302
7889: NOT
7890: IFFALSE 7894
// continue ;
7892: GO 7877
// if not HasTask ( i ) then
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL_OW 314
7903: NOT
7904: IFFALSE 7926
// target := NearestUnitToUnit ( filter , i ) ;
7906: LD_ADDR_VAR 0 3
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_VAR 0 2
7920: PPUSH
7921: CALL_OW 74
7925: ST_TO_ADDR
// if target then
7926: LD_VAR 0 3
7930: IFFALSE 7946
// ComAttackUnit ( i , target ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: LD_VAR 0 3
7941: PPUSH
7942: CALL_OW 115
// end ;
7946: GO 7877
7948: POP
7949: POP
// end ; end_of_file
7950: PPOPN 3
7952: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7953: LD_EXP 6
7957: IFFALSE 8093
7959: GO 7961
7961: DISABLE
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7967: LD_ADDR_VAR 0 2
7971: PUSH
7972: LD_INT 300
7974: PUSH
7975: LD_INT 250
7977: PUSH
7978: LD_INT 220
7980: PUSH
7981: LD_INT 210
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: PUSH
7990: LD_OWVAR 67
7994: ARRAY
7995: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7996: LD_INT 1
7998: PPUSH
7999: LD_INT 3
8001: PPUSH
8002: CALL_OW 12
8006: PPUSH
8007: LD_INT 7
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8017: LD_INT 3150
8019: PPUSH
8020: LD_INT 4900
8022: PPUSH
8023: CALL_OW 12
8027: PPUSH
8028: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 5
8042: PPUSH
8043: CALL_OW 12
8047: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8048: LD_VAR 0 3
8052: PPUSH
8053: LD_INT 7
8055: PPUSH
8056: LD_INT 1
8058: PPUSH
8059: CALL_OW 55
// counter := counter - cr * 10 ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_VAR 0 2
8072: PUSH
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 10
8080: MUL
8081: MINUS
8082: ST_TO_ADDR
// until counter <= 0 ;
8083: LD_VAR 0 2
8087: PUSH
8088: LD_INT 0
8090: LESSEQUAL
8091: IFFALSE 8017
// end ;
8093: PPOPN 3
8095: END
// every 0 0$03 trigger not Delta do var i ;
8096: LD_EXP 6
8100: NOT
8101: IFFALSE 8171
8103: GO 8105
8105: DISABLE
8106: LD_INT 0
8108: PPUSH
// begin for i = 1 to 5 - Difficulty do
8109: LD_ADDR_VAR 0 1
8113: PUSH
8114: DOUBLE
8115: LD_INT 1
8117: DEC
8118: ST_TO_ADDR
8119: LD_INT 5
8121: PUSH
8122: LD_OWVAR 67
8126: MINUS
8127: PUSH
8128: FOR_TO
8129: IFFALSE 8169
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8131: LD_INT 2
8133: PPUSH
8134: LD_INT 5
8136: PPUSH
8137: CALL_OW 12
8141: PPUSH
8142: LD_INT 8
8144: PPUSH
8145: LD_INT 1
8147: PPUSH
8148: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8152: LD_INT 560
8154: PPUSH
8155: LD_INT 1365
8157: PPUSH
8158: CALL_OW 12
8162: PPUSH
8163: CALL_OW 67
// end ;
8167: GO 8128
8169: POP
8170: POP
// end ;
8171: PPOPN 1
8173: END
// every 3 3$00 trigger tick < 15 15$00 do
8174: LD_OWVAR 1
8178: PUSH
8179: LD_INT 31500
8181: LESS
8182: IFFALSE 8242
8184: GO 8186
8186: DISABLE
// begin enable ;
8187: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: PPUSH
8199: LD_INT 1
8201: PPUSH
8202: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8206: LD_INT 1330
8208: PPUSH
8209: LD_INT 2065
8211: PPUSH
8212: CALL_OW 12
8216: PPUSH
8217: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8221: LD_INT 1
8223: PPUSH
8224: LD_INT 4
8226: PPUSH
8227: CALL_OW 12
8231: PPUSH
8232: LD_INT 15
8234: PPUSH
8235: LD_INT 1
8237: PPUSH
8238: CALL_OW 55
// end ; end_of_file
8242: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL 24526 0 1
// if un = JMM then
8252: LD_VAR 0 1
8256: PUSH
8257: LD_EXP 16
8261: EQUAL
8262: IFFALSE 8271
// YouLost ( JMM ) ;
8264: LD_STRING JMM
8266: PPUSH
8267: CALL_OW 104
// if un = Delta then
8271: LD_VAR 0 1
8275: PUSH
8276: LD_EXP 6
8280: EQUAL
8281: IFFALSE 8304
// begin Delta := 0 ;
8283: LD_ADDR_EXP 6
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8291: LD_INT 0
8293: PPUSH
8294: LD_INT 1
8296: PPUSH
8297: LD_INT 1
8299: PPUSH
8300: CALL_OW 324
// end ; if un in ar_forces then
8304: LD_VAR 0 1
8308: PUSH
8309: LD_EXP 28
8313: IN
8314: IFFALSE 8332
// ar_forces := ar_forces diff un ;
8316: LD_ADDR_EXP 28
8320: PUSH
8321: LD_EXP 28
8325: PUSH
8326: LD_VAR 0 1
8330: DIFF
8331: ST_TO_ADDR
// if un in ap_killers then
8332: LD_VAR 0 1
8336: PUSH
8337: LD_EXP 29
8341: IN
8342: IFFALSE 8360
// ap_killers := ap_killers diff un ;
8344: LD_ADDR_EXP 29
8348: PUSH
8349: LD_EXP 29
8353: PUSH
8354: LD_VAR 0 1
8358: DIFF
8359: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8360: LD_VAR 0 1
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 16
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: PPUSH
8393: CALL_OW 69
8397: IN
8398: IFFALSE 8414
// apeKillCounter := apeKillCounter + 1 ;
8400: LD_ADDR_EXP 15
8404: PUSH
8405: LD_EXP 15
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: ST_TO_ADDR
// end ;
8414: PPOPN 1
8416: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_VAR 0 2
8426: PPUSH
8427: CALL 24646 0 2
// end ;
8431: PPOPN 2
8433: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8434: LD_VAR 0 1
8438: PUSH
8439: LD_INT 1
8441: EQUAL
8442: PUSH
8443: LD_VAR 0 2
8447: PUSH
8448: LD_INT 2
8450: EQUAL
8451: AND
8452: PUSH
8453: LD_EXP 13
8457: NOT
8458: AND
8459: IFFALSE 8469
// arab_spotted := true ;
8461: LD_ADDR_EXP 13
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ;
8469: PPOPN 2
8471: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8472: LD_ADDR_OWVAR 57
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// end_mission := true ;
8480: LD_ADDR_EXP 14
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// end ;
8488: PPOPN 1
8490: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8491: LD_VAR 0 2
8495: PPUSH
8496: CALL_OW 255
8500: PUSH
8501: LD_INT 1
8503: EQUAL
8504: IFFALSE 8520
// apeman_counter := apeman_counter + 1 ;
8506: LD_ADDR_EXP 12
8510: PUSH
8511: LD_EXP 12
8515: PUSH
8516: LD_INT 1
8518: PLUS
8519: ST_TO_ADDR
// if not first_apeman_tamed then
8520: LD_EXP 8
8524: NOT
8525: IFFALSE 8724
// begin first_apeman_tamed := true ;
8527: LD_ADDR_EXP 8
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// if sci = Gladstone then
8535: LD_VAR 0 2
8539: PUSH
8540: LD_EXP 17
8544: EQUAL
8545: IFFALSE 8559
// Say ( Gladstone , D7b-Glad-1 ) ;
8547: LD_EXP 17
8551: PPUSH
8552: LD_STRING D7b-Glad-1
8554: PPUSH
8555: CALL_OW 88
// if sci = Denis then
8559: LD_VAR 0 2
8563: PUSH
8564: LD_EXP 19
8568: EQUAL
8569: IFFALSE 8583
// Say ( Denis , D7a-Den-1 ) ;
8571: LD_EXP 19
8575: PPUSH
8576: LD_STRING D7a-Den-1
8578: PPUSH
8579: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_EXP 16
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_EXP 19
8602: PUSH
8603: LD_EXP 22
8607: PUSH
8608: LD_EXP 23
8612: PUSH
8613: LD_EXP 24
8617: PUSH
8618: LD_EXP 25
8622: PUSH
8623: LD_EXP 21
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: IN
8638: NOT
8639: IFFALSE 8682
// begin if GetSex ( sci ) = sex_male then
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 258
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 8670
// Say ( sci , D7c-Sci1-1 ) else
8656: LD_VAR 0 2
8660: PPUSH
8661: LD_STRING D7c-Sci1-1
8663: PPUSH
8664: CALL_OW 88
8668: GO 8682
// Say ( sci , D7c-FSci1-1 ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_STRING D7c-FSci1-1
8677: PPUSH
8678: CALL_OW 88
// end ; if sci <> Gladstone then
8682: LD_VAR 0 2
8686: PUSH
8687: LD_EXP 17
8691: NONEQUAL
8692: IFFALSE 8706
// Say ( Gladstone , D7c-Glad-1 ) ;
8694: LD_EXP 17
8698: PPUSH
8699: LD_STRING D7c-Glad-1
8701: PPUSH
8702: CALL_OW 88
// if Lisa then
8706: LD_EXP 22
8710: IFFALSE 8724
// Say ( Lisa , D8-Lisa-1 ) ;
8712: LD_EXP 22
8716: PPUSH
8717: LD_STRING D8-Lisa-1
8719: PPUSH
8720: CALL_OW 88
// end ; end ; end_of_file end_of_file
8724: PPOPN 2
8726: END
// every 0 0$1 do
8727: GO 8729
8729: DISABLE
// begin enable ;
8730: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8731: LD_STRING updateTimer(
8733: PUSH
8734: LD_OWVAR 1
8738: STR
8739: PUSH
8740: LD_STRING );
8742: STR
8743: PPUSH
8744: CALL_OW 559
// end ;
8748: END
// export function SOS_MapStart ( ) ; begin
8749: LD_INT 0
8751: PPUSH
// if streamModeActive then
8752: LD_EXP 31
8756: IFFALSE 8765
// DefineStreamItems ( true ) ;
8758: LD_INT 1
8760: PPUSH
8761: CALL 10569 0 1
// UpdateLuaVariables ( ) ;
8765: CALL 8782 0 0
// UpdateFactoryWaypoints ( ) ;
8769: CALL 23430 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8773: CALL 23687 0 0
// end ;
8777: LD_VAR 0 1
8781: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
8782: LD_INT 0
8784: PPUSH
// if not globalGameSaveCounter then
8785: LD_EXP 30
8789: NOT
8790: IFFALSE 8801
// ToLua ( setGameSaveCounter(0) ) else
8792: LD_STRING setGameSaveCounter(0)
8794: PPUSH
8795: CALL_OW 559
8799: GO 8833
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8801: LD_ADDR_EXP 30
8805: PUSH
8806: LD_EXP 30
8810: PPUSH
8811: CALL 67644 0 1
8815: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8816: LD_STRING setGameSaveCounter(
8818: PUSH
8819: LD_EXP 30
8823: STR
8824: PUSH
8825: LD_STRING )
8827: STR
8828: PPUSH
8829: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8833: LD_STRING setGameDifficulty(
8835: PUSH
8836: LD_OWVAR 67
8840: STR
8841: PUSH
8842: LD_STRING )
8844: STR
8845: PPUSH
8846: CALL_OW 559
// end ;
8850: LD_VAR 0 1
8854: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8855: LD_INT 0
8857: PPUSH
// if p2 = stream_mode then
8858: LD_VAR 0 2
8862: PUSH
8863: LD_INT 100
8865: EQUAL
8866: IFFALSE 9869
// begin if not StreamModeActive then
8868: LD_EXP 31
8872: NOT
8873: IFFALSE 8883
// StreamModeActive := true ;
8875: LD_ADDR_EXP 31
8879: PUSH
8880: LD_INT 1
8882: ST_TO_ADDR
// if p3 = 0 then
8883: LD_VAR 0 3
8887: PUSH
8888: LD_INT 0
8890: EQUAL
8891: IFFALSE 8897
// InitStreamMode ;
8893: CALL 10105 0 0
// if p3 = 1 then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 1
8904: EQUAL
8905: IFFALSE 8915
// sRocket := true ;
8907: LD_ADDR_EXP 36
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 2 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 2
8922: EQUAL
8923: IFFALSE 8933
// sSpeed := true ;
8925: LD_ADDR_EXP 35
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// if p3 = 3 then
8933: LD_VAR 0 3
8937: PUSH
8938: LD_INT 3
8940: EQUAL
8941: IFFALSE 8951
// sEngine := true ;
8943: LD_ADDR_EXP 37
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// if p3 = 4 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 4
8958: EQUAL
8959: IFFALSE 8969
// sSpec := true ;
8961: LD_ADDR_EXP 34
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// if p3 = 5 then
8969: LD_VAR 0 3
8973: PUSH
8974: LD_INT 5
8976: EQUAL
8977: IFFALSE 8987
// sLevel := true ;
8979: LD_ADDR_EXP 38
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// if p3 = 6 then
8987: LD_VAR 0 3
8991: PUSH
8992: LD_INT 6
8994: EQUAL
8995: IFFALSE 9005
// sArmoury := true ;
8997: LD_ADDR_EXP 39
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// if p3 = 7 then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_INT 7
9012: EQUAL
9013: IFFALSE 9023
// sRadar := true ;
9015: LD_ADDR_EXP 40
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// if p3 = 8 then
9023: LD_VAR 0 3
9027: PUSH
9028: LD_INT 8
9030: EQUAL
9031: IFFALSE 9041
// sBunker := true ;
9033: LD_ADDR_EXP 41
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// if p3 = 9 then
9041: LD_VAR 0 3
9045: PUSH
9046: LD_INT 9
9048: EQUAL
9049: IFFALSE 9059
// sHack := true ;
9051: LD_ADDR_EXP 42
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// if p3 = 10 then
9059: LD_VAR 0 3
9063: PUSH
9064: LD_INT 10
9066: EQUAL
9067: IFFALSE 9077
// sFire := true ;
9069: LD_ADDR_EXP 43
9073: PUSH
9074: LD_INT 1
9076: ST_TO_ADDR
// if p3 = 11 then
9077: LD_VAR 0 3
9081: PUSH
9082: LD_INT 11
9084: EQUAL
9085: IFFALSE 9095
// sRefresh := true ;
9087: LD_ADDR_EXP 44
9091: PUSH
9092: LD_INT 1
9094: ST_TO_ADDR
// if p3 = 12 then
9095: LD_VAR 0 3
9099: PUSH
9100: LD_INT 12
9102: EQUAL
9103: IFFALSE 9113
// sExp := true ;
9105: LD_ADDR_EXP 45
9109: PUSH
9110: LD_INT 1
9112: ST_TO_ADDR
// if p3 = 13 then
9113: LD_VAR 0 3
9117: PUSH
9118: LD_INT 13
9120: EQUAL
9121: IFFALSE 9131
// sDepot := true ;
9123: LD_ADDR_EXP 46
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// if p3 = 14 then
9131: LD_VAR 0 3
9135: PUSH
9136: LD_INT 14
9138: EQUAL
9139: IFFALSE 9149
// sFlag := true ;
9141: LD_ADDR_EXP 47
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// if p3 = 15 then
9149: LD_VAR 0 3
9153: PUSH
9154: LD_INT 15
9156: EQUAL
9157: IFFALSE 9167
// sKamikadze := true ;
9159: LD_ADDR_EXP 55
9163: PUSH
9164: LD_INT 1
9166: ST_TO_ADDR
// if p3 = 16 then
9167: LD_VAR 0 3
9171: PUSH
9172: LD_INT 16
9174: EQUAL
9175: IFFALSE 9185
// sTroll := true ;
9177: LD_ADDR_EXP 56
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// if p3 = 17 then
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 17
9192: EQUAL
9193: IFFALSE 9203
// sSlow := true ;
9195: LD_ADDR_EXP 57
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// if p3 = 18 then
9203: LD_VAR 0 3
9207: PUSH
9208: LD_INT 18
9210: EQUAL
9211: IFFALSE 9221
// sLack := true ;
9213: LD_ADDR_EXP 58
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// if p3 = 19 then
9221: LD_VAR 0 3
9225: PUSH
9226: LD_INT 19
9228: EQUAL
9229: IFFALSE 9239
// sTank := true ;
9231: LD_ADDR_EXP 60
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// if p3 = 20 then
9239: LD_VAR 0 3
9243: PUSH
9244: LD_INT 20
9246: EQUAL
9247: IFFALSE 9257
// sRemote := true ;
9249: LD_ADDR_EXP 61
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// if p3 = 21 then
9257: LD_VAR 0 3
9261: PUSH
9262: LD_INT 21
9264: EQUAL
9265: IFFALSE 9275
// sPowell := true ;
9267: LD_ADDR_EXP 62
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// if p3 = 22 then
9275: LD_VAR 0 3
9279: PUSH
9280: LD_INT 22
9282: EQUAL
9283: IFFALSE 9293
// sTeleport := true ;
9285: LD_ADDR_EXP 65
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// if p3 = 23 then
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 23
9300: EQUAL
9301: IFFALSE 9311
// sOilTower := true ;
9303: LD_ADDR_EXP 67
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// if p3 = 24 then
9311: LD_VAR 0 3
9315: PUSH
9316: LD_INT 24
9318: EQUAL
9319: IFFALSE 9329
// sShovel := true ;
9321: LD_ADDR_EXP 68
9325: PUSH
9326: LD_INT 1
9328: ST_TO_ADDR
// if p3 = 25 then
9329: LD_VAR 0 3
9333: PUSH
9334: LD_INT 25
9336: EQUAL
9337: IFFALSE 9347
// sSheik := true ;
9339: LD_ADDR_EXP 69
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// if p3 = 26 then
9347: LD_VAR 0 3
9351: PUSH
9352: LD_INT 26
9354: EQUAL
9355: IFFALSE 9365
// sEarthquake := true ;
9357: LD_ADDR_EXP 71
9361: PUSH
9362: LD_INT 1
9364: ST_TO_ADDR
// if p3 = 27 then
9365: LD_VAR 0 3
9369: PUSH
9370: LD_INT 27
9372: EQUAL
9373: IFFALSE 9383
// sAI := true ;
9375: LD_ADDR_EXP 72
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// if p3 = 28 then
9383: LD_VAR 0 3
9387: PUSH
9388: LD_INT 28
9390: EQUAL
9391: IFFALSE 9401
// sCargo := true ;
9393: LD_ADDR_EXP 75
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// if p3 = 29 then
9401: LD_VAR 0 3
9405: PUSH
9406: LD_INT 29
9408: EQUAL
9409: IFFALSE 9419
// sDLaser := true ;
9411: LD_ADDR_EXP 76
9415: PUSH
9416: LD_INT 1
9418: ST_TO_ADDR
// if p3 = 30 then
9419: LD_VAR 0 3
9423: PUSH
9424: LD_INT 30
9426: EQUAL
9427: IFFALSE 9437
// sExchange := true ;
9429: LD_ADDR_EXP 77
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// if p3 = 31 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 31
9444: EQUAL
9445: IFFALSE 9455
// sFac := true ;
9447: LD_ADDR_EXP 78
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
// if p3 = 32 then
9455: LD_VAR 0 3
9459: PUSH
9460: LD_INT 32
9462: EQUAL
9463: IFFALSE 9473
// sPower := true ;
9465: LD_ADDR_EXP 79
9469: PUSH
9470: LD_INT 1
9472: ST_TO_ADDR
// if p3 = 33 then
9473: LD_VAR 0 3
9477: PUSH
9478: LD_INT 33
9480: EQUAL
9481: IFFALSE 9491
// sRandom := true ;
9483: LD_ADDR_EXP 80
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// if p3 = 34 then
9491: LD_VAR 0 3
9495: PUSH
9496: LD_INT 34
9498: EQUAL
9499: IFFALSE 9509
// sShield := true ;
9501: LD_ADDR_EXP 81
9505: PUSH
9506: LD_INT 1
9508: ST_TO_ADDR
// if p3 = 35 then
9509: LD_VAR 0 3
9513: PUSH
9514: LD_INT 35
9516: EQUAL
9517: IFFALSE 9527
// sTime := true ;
9519: LD_ADDR_EXP 82
9523: PUSH
9524: LD_INT 1
9526: ST_TO_ADDR
// if p3 = 36 then
9527: LD_VAR 0 3
9531: PUSH
9532: LD_INT 36
9534: EQUAL
9535: IFFALSE 9545
// sTools := true ;
9537: LD_ADDR_EXP 83
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// if p3 = 101 then
9545: LD_VAR 0 3
9549: PUSH
9550: LD_INT 101
9552: EQUAL
9553: IFFALSE 9563
// sSold := true ;
9555: LD_ADDR_EXP 48
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// if p3 = 102 then
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 102
9570: EQUAL
9571: IFFALSE 9581
// sDiff := true ;
9573: LD_ADDR_EXP 49
9577: PUSH
9578: LD_INT 1
9580: ST_TO_ADDR
// if p3 = 103 then
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 103
9588: EQUAL
9589: IFFALSE 9599
// sFog := true ;
9591: LD_ADDR_EXP 52
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// if p3 = 104 then
9599: LD_VAR 0 3
9603: PUSH
9604: LD_INT 104
9606: EQUAL
9607: IFFALSE 9617
// sReset := true ;
9609: LD_ADDR_EXP 53
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// if p3 = 105 then
9617: LD_VAR 0 3
9621: PUSH
9622: LD_INT 105
9624: EQUAL
9625: IFFALSE 9635
// sSun := true ;
9627: LD_ADDR_EXP 54
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
// if p3 = 106 then
9635: LD_VAR 0 3
9639: PUSH
9640: LD_INT 106
9642: EQUAL
9643: IFFALSE 9653
// sTiger := true ;
9645: LD_ADDR_EXP 50
9649: PUSH
9650: LD_INT 1
9652: ST_TO_ADDR
// if p3 = 107 then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 107
9660: EQUAL
9661: IFFALSE 9671
// sBomb := true ;
9663: LD_ADDR_EXP 51
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// if p3 = 108 then
9671: LD_VAR 0 3
9675: PUSH
9676: LD_INT 108
9678: EQUAL
9679: IFFALSE 9689
// sWound := true ;
9681: LD_ADDR_EXP 59
9685: PUSH
9686: LD_INT 1
9688: ST_TO_ADDR
// if p3 = 109 then
9689: LD_VAR 0 3
9693: PUSH
9694: LD_INT 109
9696: EQUAL
9697: IFFALSE 9707
// sBetray := true ;
9699: LD_ADDR_EXP 63
9703: PUSH
9704: LD_INT 1
9706: ST_TO_ADDR
// if p3 = 110 then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 110
9714: EQUAL
9715: IFFALSE 9725
// sContamin := true ;
9717: LD_ADDR_EXP 64
9721: PUSH
9722: LD_INT 1
9724: ST_TO_ADDR
// if p3 = 111 then
9725: LD_VAR 0 3
9729: PUSH
9730: LD_INT 111
9732: EQUAL
9733: IFFALSE 9743
// sOil := true ;
9735: LD_ADDR_EXP 66
9739: PUSH
9740: LD_INT 1
9742: ST_TO_ADDR
// if p3 = 112 then
9743: LD_VAR 0 3
9747: PUSH
9748: LD_INT 112
9750: EQUAL
9751: IFFALSE 9761
// sStu := true ;
9753: LD_ADDR_EXP 70
9757: PUSH
9758: LD_INT 1
9760: ST_TO_ADDR
// if p3 = 113 then
9761: LD_VAR 0 3
9765: PUSH
9766: LD_INT 113
9768: EQUAL
9769: IFFALSE 9779
// sBazooka := true ;
9771: LD_ADDR_EXP 73
9775: PUSH
9776: LD_INT 1
9778: ST_TO_ADDR
// if p3 = 114 then
9779: LD_VAR 0 3
9783: PUSH
9784: LD_INT 114
9786: EQUAL
9787: IFFALSE 9797
// sMortar := true ;
9789: LD_ADDR_EXP 74
9793: PUSH
9794: LD_INT 1
9796: ST_TO_ADDR
// if p3 = 115 then
9797: LD_VAR 0 3
9801: PUSH
9802: LD_INT 115
9804: EQUAL
9805: IFFALSE 9815
// sRanger := true ;
9807: LD_ADDR_EXP 84
9811: PUSH
9812: LD_INT 1
9814: ST_TO_ADDR
// if p3 = 116 then
9815: LD_VAR 0 3
9819: PUSH
9820: LD_INT 116
9822: EQUAL
9823: IFFALSE 9833
// sComputer := true ;
9825: LD_ADDR_EXP 85
9829: PUSH
9830: LD_INT 1
9832: ST_TO_ADDR
// if p3 = 117 then
9833: LD_VAR 0 3
9837: PUSH
9838: LD_INT 117
9840: EQUAL
9841: IFFALSE 9851
// s30 := true ;
9843: LD_ADDR_EXP 86
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// if p3 = 118 then
9851: LD_VAR 0 3
9855: PUSH
9856: LD_INT 118
9858: EQUAL
9859: IFFALSE 9869
// s60 := true ;
9861: LD_ADDR_EXP 87
9865: PUSH
9866: LD_INT 1
9868: ST_TO_ADDR
// end ; if p2 = hack_mode then
9869: LD_VAR 0 2
9873: PUSH
9874: LD_INT 101
9876: EQUAL
9877: IFFALSE 10005
// begin case p3 of 1 :
9879: LD_VAR 0 3
9883: PUSH
9884: LD_INT 1
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 9899
9892: POP
// hHackUnlimitedResources ; 2 :
9893: CALL 22176 0 0
9897: GO 10005
9899: LD_INT 2
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9914
9907: POP
// hHackSetLevel10 ; 3 :
9908: CALL 22309 0 0
9912: GO 10005
9914: LD_INT 3
9916: DOUBLE
9917: EQUAL
9918: IFTRUE 9922
9920: GO 9929
9922: POP
// hHackSetLevel10YourUnits ; 4 :
9923: CALL 22394 0 0
9927: GO 10005
9929: LD_INT 4
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9937
9935: GO 9944
9937: POP
// hHackInvincible ; 5 :
9938: CALL 22842 0 0
9942: GO 10005
9944: LD_INT 5
9946: DOUBLE
9947: EQUAL
9948: IFTRUE 9952
9950: GO 9959
9952: POP
// hHackInvisible ; 6 :
9953: CALL 22953 0 0
9957: GO 10005
9959: LD_INT 6
9961: DOUBLE
9962: EQUAL
9963: IFTRUE 9967
9965: GO 9974
9967: POP
// hHackChangeYourSide ; 7 :
9968: CALL 23010 0 0
9972: GO 10005
9974: LD_INT 7
9976: DOUBLE
9977: EQUAL
9978: IFTRUE 9982
9980: GO 9989
9982: POP
// hHackChangeUnitSide ; 8 :
9983: CALL 23052 0 0
9987: GO 10005
9989: LD_INT 8
9991: DOUBLE
9992: EQUAL
9993: IFTRUE 9997
9995: GO 10004
9997: POP
// hHackFog ; end ;
9998: CALL 23153 0 0
10002: GO 10005
10004: POP
// end ; if p2 = game_save_mode then
10005: LD_VAR 0 2
10009: PUSH
10010: LD_INT 102
10012: EQUAL
10013: IFFALSE 10078
// begin if p3 = 1 then
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 1
10022: EQUAL
10023: IFFALSE 10035
// globalGameSaveCounter := p4 ;
10025: LD_ADDR_EXP 30
10029: PUSH
10030: LD_VAR 0 4
10034: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10035: LD_VAR 0 3
10039: PUSH
10040: LD_INT 2
10042: EQUAL
10043: PUSH
10044: LD_EXP 30
10048: AND
10049: IFFALSE 10068
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10051: LD_STRING setGameSaveCounter(
10053: PUSH
10054: LD_EXP 30
10058: STR
10059: PUSH
10060: LD_STRING )
10062: STR
10063: PPUSH
10064: CALL_OW 559
// display_strings := globalGameSaveCounter ;
10068: LD_ADDR_OWVAR 47
10072: PUSH
10073: LD_EXP 30
10077: ST_TO_ADDR
// end ; end ;
10078: LD_VAR 0 7
10082: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10083: GO 10085
10085: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10086: LD_STRING initStreamRollete();
10088: PPUSH
10089: CALL_OW 559
// InitStreamMode ;
10093: CALL 10105 0 0
// DefineStreamItems ( false ) ;
10097: LD_INT 0
10099: PPUSH
10100: CALL 10569 0 1
// end ;
10104: END
// function InitStreamMode ; begin
10105: LD_INT 0
10107: PPUSH
// streamModeActive := false ;
10108: LD_ADDR_EXP 31
10112: PUSH
10113: LD_INT 0
10115: ST_TO_ADDR
// normalCounter := 36 ;
10116: LD_ADDR_EXP 32
10120: PUSH
10121: LD_INT 36
10123: ST_TO_ADDR
// hardcoreCounter := 18 ;
10124: LD_ADDR_EXP 33
10128: PUSH
10129: LD_INT 18
10131: ST_TO_ADDR
// sRocket := false ;
10132: LD_ADDR_EXP 36
10136: PUSH
10137: LD_INT 0
10139: ST_TO_ADDR
// sSpeed := false ;
10140: LD_ADDR_EXP 35
10144: PUSH
10145: LD_INT 0
10147: ST_TO_ADDR
// sEngine := false ;
10148: LD_ADDR_EXP 37
10152: PUSH
10153: LD_INT 0
10155: ST_TO_ADDR
// sSpec := false ;
10156: LD_ADDR_EXP 34
10160: PUSH
10161: LD_INT 0
10163: ST_TO_ADDR
// sLevel := false ;
10164: LD_ADDR_EXP 38
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// sArmoury := false ;
10172: LD_ADDR_EXP 39
10176: PUSH
10177: LD_INT 0
10179: ST_TO_ADDR
// sRadar := false ;
10180: LD_ADDR_EXP 40
10184: PUSH
10185: LD_INT 0
10187: ST_TO_ADDR
// sBunker := false ;
10188: LD_ADDR_EXP 41
10192: PUSH
10193: LD_INT 0
10195: ST_TO_ADDR
// sHack := false ;
10196: LD_ADDR_EXP 42
10200: PUSH
10201: LD_INT 0
10203: ST_TO_ADDR
// sFire := false ;
10204: LD_ADDR_EXP 43
10208: PUSH
10209: LD_INT 0
10211: ST_TO_ADDR
// sRefresh := false ;
10212: LD_ADDR_EXP 44
10216: PUSH
10217: LD_INT 0
10219: ST_TO_ADDR
// sExp := false ;
10220: LD_ADDR_EXP 45
10224: PUSH
10225: LD_INT 0
10227: ST_TO_ADDR
// sDepot := false ;
10228: LD_ADDR_EXP 46
10232: PUSH
10233: LD_INT 0
10235: ST_TO_ADDR
// sFlag := false ;
10236: LD_ADDR_EXP 47
10240: PUSH
10241: LD_INT 0
10243: ST_TO_ADDR
// sKamikadze := false ;
10244: LD_ADDR_EXP 55
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// sTroll := false ;
10252: LD_ADDR_EXP 56
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// sSlow := false ;
10260: LD_ADDR_EXP 57
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// sLack := false ;
10268: LD_ADDR_EXP 58
10272: PUSH
10273: LD_INT 0
10275: ST_TO_ADDR
// sTank := false ;
10276: LD_ADDR_EXP 60
10280: PUSH
10281: LD_INT 0
10283: ST_TO_ADDR
// sRemote := false ;
10284: LD_ADDR_EXP 61
10288: PUSH
10289: LD_INT 0
10291: ST_TO_ADDR
// sPowell := false ;
10292: LD_ADDR_EXP 62
10296: PUSH
10297: LD_INT 0
10299: ST_TO_ADDR
// sTeleport := false ;
10300: LD_ADDR_EXP 65
10304: PUSH
10305: LD_INT 0
10307: ST_TO_ADDR
// sOilTower := false ;
10308: LD_ADDR_EXP 67
10312: PUSH
10313: LD_INT 0
10315: ST_TO_ADDR
// sShovel := false ;
10316: LD_ADDR_EXP 68
10320: PUSH
10321: LD_INT 0
10323: ST_TO_ADDR
// sSheik := false ;
10324: LD_ADDR_EXP 69
10328: PUSH
10329: LD_INT 0
10331: ST_TO_ADDR
// sEarthquake := false ;
10332: LD_ADDR_EXP 71
10336: PUSH
10337: LD_INT 0
10339: ST_TO_ADDR
// sAI := false ;
10340: LD_ADDR_EXP 72
10344: PUSH
10345: LD_INT 0
10347: ST_TO_ADDR
// sCargo := false ;
10348: LD_ADDR_EXP 75
10352: PUSH
10353: LD_INT 0
10355: ST_TO_ADDR
// sDLaser := false ;
10356: LD_ADDR_EXP 76
10360: PUSH
10361: LD_INT 0
10363: ST_TO_ADDR
// sExchange := false ;
10364: LD_ADDR_EXP 77
10368: PUSH
10369: LD_INT 0
10371: ST_TO_ADDR
// sFac := false ;
10372: LD_ADDR_EXP 78
10376: PUSH
10377: LD_INT 0
10379: ST_TO_ADDR
// sPower := false ;
10380: LD_ADDR_EXP 79
10384: PUSH
10385: LD_INT 0
10387: ST_TO_ADDR
// sRandom := false ;
10388: LD_ADDR_EXP 80
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// sShield := false ;
10396: LD_ADDR_EXP 81
10400: PUSH
10401: LD_INT 0
10403: ST_TO_ADDR
// sTime := false ;
10404: LD_ADDR_EXP 82
10408: PUSH
10409: LD_INT 0
10411: ST_TO_ADDR
// sTools := false ;
10412: LD_ADDR_EXP 83
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// sSold := false ;
10420: LD_ADDR_EXP 48
10424: PUSH
10425: LD_INT 0
10427: ST_TO_ADDR
// sDiff := false ;
10428: LD_ADDR_EXP 49
10432: PUSH
10433: LD_INT 0
10435: ST_TO_ADDR
// sFog := false ;
10436: LD_ADDR_EXP 52
10440: PUSH
10441: LD_INT 0
10443: ST_TO_ADDR
// sReset := false ;
10444: LD_ADDR_EXP 53
10448: PUSH
10449: LD_INT 0
10451: ST_TO_ADDR
// sSun := false ;
10452: LD_ADDR_EXP 54
10456: PUSH
10457: LD_INT 0
10459: ST_TO_ADDR
// sTiger := false ;
10460: LD_ADDR_EXP 50
10464: PUSH
10465: LD_INT 0
10467: ST_TO_ADDR
// sBomb := false ;
10468: LD_ADDR_EXP 51
10472: PUSH
10473: LD_INT 0
10475: ST_TO_ADDR
// sWound := false ;
10476: LD_ADDR_EXP 59
10480: PUSH
10481: LD_INT 0
10483: ST_TO_ADDR
// sBetray := false ;
10484: LD_ADDR_EXP 63
10488: PUSH
10489: LD_INT 0
10491: ST_TO_ADDR
// sContamin := false ;
10492: LD_ADDR_EXP 64
10496: PUSH
10497: LD_INT 0
10499: ST_TO_ADDR
// sOil := false ;
10500: LD_ADDR_EXP 66
10504: PUSH
10505: LD_INT 0
10507: ST_TO_ADDR
// sStu := false ;
10508: LD_ADDR_EXP 70
10512: PUSH
10513: LD_INT 0
10515: ST_TO_ADDR
// sBazooka := false ;
10516: LD_ADDR_EXP 73
10520: PUSH
10521: LD_INT 0
10523: ST_TO_ADDR
// sMortar := false ;
10524: LD_ADDR_EXP 74
10528: PUSH
10529: LD_INT 0
10531: ST_TO_ADDR
// sRanger := false ;
10532: LD_ADDR_EXP 84
10536: PUSH
10537: LD_INT 0
10539: ST_TO_ADDR
// sComputer := false ;
10540: LD_ADDR_EXP 85
10544: PUSH
10545: LD_INT 0
10547: ST_TO_ADDR
// s30 := false ;
10548: LD_ADDR_EXP 86
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// s60 := false ;
10556: LD_ADDR_EXP 87
10560: PUSH
10561: LD_INT 0
10563: ST_TO_ADDR
// end ;
10564: LD_VAR 0 1
10568: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10569: LD_INT 0
10571: PPUSH
10572: PPUSH
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
// result := [ ] ;
10578: LD_ADDR_VAR 0 2
10582: PUSH
10583: EMPTY
10584: ST_TO_ADDR
// if campaign_id = 1 then
10585: LD_OWVAR 69
10589: PUSH
10590: LD_INT 1
10592: EQUAL
10593: IFFALSE 13759
// begin case mission_number of 1 :
10595: LD_OWVAR 70
10599: PUSH
10600: LD_INT 1
10602: DOUBLE
10603: EQUAL
10604: IFTRUE 10608
10606: GO 10684
10608: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: LD_INT 11
10622: PUSH
10623: LD_INT 12
10625: PUSH
10626: LD_INT 15
10628: PUSH
10629: LD_INT 16
10631: PUSH
10632: LD_INT 22
10634: PUSH
10635: LD_INT 23
10637: PUSH
10638: LD_INT 26
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 101
10654: PUSH
10655: LD_INT 102
10657: PUSH
10658: LD_INT 106
10660: PUSH
10661: LD_INT 116
10663: PUSH
10664: LD_INT 117
10666: PUSH
10667: LD_INT 118
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: ST_TO_ADDR
10682: GO 13757
10684: LD_INT 2
10686: DOUBLE
10687: EQUAL
10688: IFTRUE 10692
10690: GO 10776
10692: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10693: LD_ADDR_VAR 0 2
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 4
10703: PUSH
10704: LD_INT 11
10706: PUSH
10707: LD_INT 12
10709: PUSH
10710: LD_INT 15
10712: PUSH
10713: LD_INT 16
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 23
10721: PUSH
10722: LD_INT 26
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 101
10738: PUSH
10739: LD_INT 102
10741: PUSH
10742: LD_INT 105
10744: PUSH
10745: LD_INT 106
10747: PUSH
10748: LD_INT 108
10750: PUSH
10751: LD_INT 116
10753: PUSH
10754: LD_INT 117
10756: PUSH
10757: LD_INT 118
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: ST_TO_ADDR
10774: GO 13757
10776: LD_INT 3
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10872
10784: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10785: LD_ADDR_VAR 0 2
10789: PUSH
10790: LD_INT 2
10792: PUSH
10793: LD_INT 4
10795: PUSH
10796: LD_INT 5
10798: PUSH
10799: LD_INT 11
10801: PUSH
10802: LD_INT 12
10804: PUSH
10805: LD_INT 15
10807: PUSH
10808: LD_INT 16
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_INT 26
10816: PUSH
10817: LD_INT 36
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 101
10834: PUSH
10835: LD_INT 102
10837: PUSH
10838: LD_INT 105
10840: PUSH
10841: LD_INT 106
10843: PUSH
10844: LD_INT 108
10846: PUSH
10847: LD_INT 116
10849: PUSH
10850: LD_INT 117
10852: PUSH
10853: LD_INT 118
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: ST_TO_ADDR
10870: GO 13757
10872: LD_INT 4
10874: DOUBLE
10875: EQUAL
10876: IFTRUE 10880
10878: GO 10976
10880: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10881: LD_ADDR_VAR 0 2
10885: PUSH
10886: LD_INT 2
10888: PUSH
10889: LD_INT 4
10891: PUSH
10892: LD_INT 5
10894: PUSH
10895: LD_INT 8
10897: PUSH
10898: LD_INT 11
10900: PUSH
10901: LD_INT 12
10903: PUSH
10904: LD_INT 15
10906: PUSH
10907: LD_INT 16
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_INT 23
10915: PUSH
10916: LD_INT 26
10918: PUSH
10919: LD_INT 36
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 101
10938: PUSH
10939: LD_INT 102
10941: PUSH
10942: LD_INT 105
10944: PUSH
10945: LD_INT 106
10947: PUSH
10948: LD_INT 108
10950: PUSH
10951: LD_INT 116
10953: PUSH
10954: LD_INT 117
10956: PUSH
10957: LD_INT 118
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: ST_TO_ADDR
10974: GO 13757
10976: LD_INT 5
10978: DOUBLE
10979: EQUAL
10980: IFTRUE 10984
10982: GO 11096
10984: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10985: LD_ADDR_VAR 0 2
10989: PUSH
10990: LD_INT 2
10992: PUSH
10993: LD_INT 4
10995: PUSH
10996: LD_INT 5
10998: PUSH
10999: LD_INT 6
11001: PUSH
11002: LD_INT 8
11004: PUSH
11005: LD_INT 11
11007: PUSH
11008: LD_INT 12
11010: PUSH
11011: LD_INT 15
11013: PUSH
11014: LD_INT 16
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 23
11022: PUSH
11023: LD_INT 25
11025: PUSH
11026: LD_INT 26
11028: PUSH
11029: LD_INT 36
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 101
11050: PUSH
11051: LD_INT 102
11053: PUSH
11054: LD_INT 105
11056: PUSH
11057: LD_INT 106
11059: PUSH
11060: LD_INT 108
11062: PUSH
11063: LD_INT 109
11065: PUSH
11066: LD_INT 112
11068: PUSH
11069: LD_INT 116
11071: PUSH
11072: LD_INT 117
11074: PUSH
11075: LD_INT 118
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: ST_TO_ADDR
11094: GO 13757
11096: LD_INT 6
11098: DOUBLE
11099: EQUAL
11100: IFTRUE 11104
11102: GO 11236
11104: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11105: LD_ADDR_VAR 0 2
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: LD_INT 4
11115: PUSH
11116: LD_INT 5
11118: PUSH
11119: LD_INT 6
11121: PUSH
11122: LD_INT 8
11124: PUSH
11125: LD_INT 11
11127: PUSH
11128: LD_INT 12
11130: PUSH
11131: LD_INT 15
11133: PUSH
11134: LD_INT 16
11136: PUSH
11137: LD_INT 20
11139: PUSH
11140: LD_INT 21
11142: PUSH
11143: LD_INT 22
11145: PUSH
11146: LD_INT 23
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 26
11154: PUSH
11155: LD_INT 30
11157: PUSH
11158: LD_INT 31
11160: PUSH
11161: LD_INT 32
11163: PUSH
11164: LD_INT 36
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 101
11190: PUSH
11191: LD_INT 102
11193: PUSH
11194: LD_INT 105
11196: PUSH
11197: LD_INT 106
11199: PUSH
11200: LD_INT 108
11202: PUSH
11203: LD_INT 109
11205: PUSH
11206: LD_INT 112
11208: PUSH
11209: LD_INT 116
11211: PUSH
11212: LD_INT 117
11214: PUSH
11215: LD_INT 118
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: ST_TO_ADDR
11234: GO 13757
11236: LD_INT 7
11238: DOUBLE
11239: EQUAL
11240: IFTRUE 11244
11242: GO 11356
11244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11245: LD_ADDR_VAR 0 2
11249: PUSH
11250: LD_INT 2
11252: PUSH
11253: LD_INT 4
11255: PUSH
11256: LD_INT 5
11258: PUSH
11259: LD_INT 7
11261: PUSH
11262: LD_INT 11
11264: PUSH
11265: LD_INT 12
11267: PUSH
11268: LD_INT 15
11270: PUSH
11271: LD_INT 16
11273: PUSH
11274: LD_INT 20
11276: PUSH
11277: LD_INT 21
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_INT 23
11285: PUSH
11286: LD_INT 25
11288: PUSH
11289: LD_INT 26
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 101
11310: PUSH
11311: LD_INT 102
11313: PUSH
11314: LD_INT 103
11316: PUSH
11317: LD_INT 105
11319: PUSH
11320: LD_INT 106
11322: PUSH
11323: LD_INT 108
11325: PUSH
11326: LD_INT 112
11328: PUSH
11329: LD_INT 116
11331: PUSH
11332: LD_INT 117
11334: PUSH
11335: LD_INT 118
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: ST_TO_ADDR
11354: GO 13757
11356: LD_INT 8
11358: DOUBLE
11359: EQUAL
11360: IFTRUE 11364
11362: GO 11504
11364: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 4
11375: PUSH
11376: LD_INT 5
11378: PUSH
11379: LD_INT 6
11381: PUSH
11382: LD_INT 7
11384: PUSH
11385: LD_INT 8
11387: PUSH
11388: LD_INT 11
11390: PUSH
11391: LD_INT 12
11393: PUSH
11394: LD_INT 15
11396: PUSH
11397: LD_INT 16
11399: PUSH
11400: LD_INT 20
11402: PUSH
11403: LD_INT 21
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_INT 23
11411: PUSH
11412: LD_INT 25
11414: PUSH
11415: LD_INT 26
11417: PUSH
11418: LD_INT 30
11420: PUSH
11421: LD_INT 31
11423: PUSH
11424: LD_INT 32
11426: PUSH
11427: LD_INT 36
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 101
11454: PUSH
11455: LD_INT 102
11457: PUSH
11458: LD_INT 103
11460: PUSH
11461: LD_INT 105
11463: PUSH
11464: LD_INT 106
11466: PUSH
11467: LD_INT 108
11469: PUSH
11470: LD_INT 109
11472: PUSH
11473: LD_INT 112
11475: PUSH
11476: LD_INT 116
11478: PUSH
11479: LD_INT 117
11481: PUSH
11482: LD_INT 118
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: ST_TO_ADDR
11502: GO 13757
11504: LD_INT 9
11506: DOUBLE
11507: EQUAL
11508: IFTRUE 11512
11510: GO 11660
11512: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11513: LD_ADDR_VAR 0 2
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: LD_INT 5
11526: PUSH
11527: LD_INT 6
11529: PUSH
11530: LD_INT 7
11532: PUSH
11533: LD_INT 8
11535: PUSH
11536: LD_INT 11
11538: PUSH
11539: LD_INT 12
11541: PUSH
11542: LD_INT 15
11544: PUSH
11545: LD_INT 16
11547: PUSH
11548: LD_INT 20
11550: PUSH
11551: LD_INT 21
11553: PUSH
11554: LD_INT 22
11556: PUSH
11557: LD_INT 23
11559: PUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 26
11565: PUSH
11566: LD_INT 28
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 31
11574: PUSH
11575: LD_INT 32
11577: PUSH
11578: LD_INT 36
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 101
11606: PUSH
11607: LD_INT 102
11609: PUSH
11610: LD_INT 103
11612: PUSH
11613: LD_INT 105
11615: PUSH
11616: LD_INT 106
11618: PUSH
11619: LD_INT 108
11621: PUSH
11622: LD_INT 109
11624: PUSH
11625: LD_INT 112
11627: PUSH
11628: LD_INT 114
11630: PUSH
11631: LD_INT 116
11633: PUSH
11634: LD_INT 117
11636: PUSH
11637: LD_INT 118
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: ST_TO_ADDR
11658: GO 13757
11660: LD_INT 10
11662: DOUBLE
11663: EQUAL
11664: IFTRUE 11668
11666: GO 11864
11668: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11669: LD_ADDR_VAR 0 2
11673: PUSH
11674: LD_INT 2
11676: PUSH
11677: LD_INT 4
11679: PUSH
11680: LD_INT 5
11682: PUSH
11683: LD_INT 6
11685: PUSH
11686: LD_INT 7
11688: PUSH
11689: LD_INT 8
11691: PUSH
11692: LD_INT 9
11694: PUSH
11695: LD_INT 10
11697: PUSH
11698: LD_INT 11
11700: PUSH
11701: LD_INT 12
11703: PUSH
11704: LD_INT 13
11706: PUSH
11707: LD_INT 14
11709: PUSH
11710: LD_INT 15
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: LD_INT 17
11718: PUSH
11719: LD_INT 18
11721: PUSH
11722: LD_INT 19
11724: PUSH
11725: LD_INT 20
11727: PUSH
11728: LD_INT 21
11730: PUSH
11731: LD_INT 22
11733: PUSH
11734: LD_INT 23
11736: PUSH
11737: LD_INT 24
11739: PUSH
11740: LD_INT 25
11742: PUSH
11743: LD_INT 26
11745: PUSH
11746: LD_INT 28
11748: PUSH
11749: LD_INT 30
11751: PUSH
11752: LD_INT 31
11754: PUSH
11755: LD_INT 32
11757: PUSH
11758: LD_INT 36
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 101
11794: PUSH
11795: LD_INT 102
11797: PUSH
11798: LD_INT 103
11800: PUSH
11801: LD_INT 104
11803: PUSH
11804: LD_INT 105
11806: PUSH
11807: LD_INT 106
11809: PUSH
11810: LD_INT 107
11812: PUSH
11813: LD_INT 108
11815: PUSH
11816: LD_INT 109
11818: PUSH
11819: LD_INT 110
11821: PUSH
11822: LD_INT 111
11824: PUSH
11825: LD_INT 112
11827: PUSH
11828: LD_INT 114
11830: PUSH
11831: LD_INT 116
11833: PUSH
11834: LD_INT 117
11836: PUSH
11837: LD_INT 118
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: ST_TO_ADDR
11862: GO 13757
11864: LD_INT 11
11866: DOUBLE
11867: EQUAL
11868: IFTRUE 11872
11870: GO 12076
11872: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11873: LD_ADDR_VAR 0 2
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 3
11883: PUSH
11884: LD_INT 4
11886: PUSH
11887: LD_INT 5
11889: PUSH
11890: LD_INT 6
11892: PUSH
11893: LD_INT 7
11895: PUSH
11896: LD_INT 8
11898: PUSH
11899: LD_INT 9
11901: PUSH
11902: LD_INT 10
11904: PUSH
11905: LD_INT 11
11907: PUSH
11908: LD_INT 12
11910: PUSH
11911: LD_INT 13
11913: PUSH
11914: LD_INT 14
11916: PUSH
11917: LD_INT 15
11919: PUSH
11920: LD_INT 16
11922: PUSH
11923: LD_INT 17
11925: PUSH
11926: LD_INT 18
11928: PUSH
11929: LD_INT 19
11931: PUSH
11932: LD_INT 20
11934: PUSH
11935: LD_INT 21
11937: PUSH
11938: LD_INT 22
11940: PUSH
11941: LD_INT 23
11943: PUSH
11944: LD_INT 24
11946: PUSH
11947: LD_INT 25
11949: PUSH
11950: LD_INT 26
11952: PUSH
11953: LD_INT 28
11955: PUSH
11956: LD_INT 30
11958: PUSH
11959: LD_INT 31
11961: PUSH
11962: LD_INT 32
11964: PUSH
11965: LD_INT 34
11967: PUSH
11968: LD_INT 36
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 101
12006: PUSH
12007: LD_INT 102
12009: PUSH
12010: LD_INT 103
12012: PUSH
12013: LD_INT 104
12015: PUSH
12016: LD_INT 105
12018: PUSH
12019: LD_INT 106
12021: PUSH
12022: LD_INT 107
12024: PUSH
12025: LD_INT 108
12027: PUSH
12028: LD_INT 109
12030: PUSH
12031: LD_INT 110
12033: PUSH
12034: LD_INT 111
12036: PUSH
12037: LD_INT 112
12039: PUSH
12040: LD_INT 114
12042: PUSH
12043: LD_INT 116
12045: PUSH
12046: LD_INT 117
12048: PUSH
12049: LD_INT 118
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: ST_TO_ADDR
12074: GO 13757
12076: LD_INT 12
12078: DOUBLE
12079: EQUAL
12080: IFTRUE 12084
12082: GO 12304
12084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12085: LD_ADDR_VAR 0 2
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: LD_INT 3
12098: PUSH
12099: LD_INT 4
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: LD_INT 6
12107: PUSH
12108: LD_INT 7
12110: PUSH
12111: LD_INT 8
12113: PUSH
12114: LD_INT 9
12116: PUSH
12117: LD_INT 10
12119: PUSH
12120: LD_INT 11
12122: PUSH
12123: LD_INT 12
12125: PUSH
12126: LD_INT 13
12128: PUSH
12129: LD_INT 14
12131: PUSH
12132: LD_INT 15
12134: PUSH
12135: LD_INT 16
12137: PUSH
12138: LD_INT 17
12140: PUSH
12141: LD_INT 18
12143: PUSH
12144: LD_INT 19
12146: PUSH
12147: LD_INT 20
12149: PUSH
12150: LD_INT 21
12152: PUSH
12153: LD_INT 22
12155: PUSH
12156: LD_INT 23
12158: PUSH
12159: LD_INT 24
12161: PUSH
12162: LD_INT 25
12164: PUSH
12165: LD_INT 26
12167: PUSH
12168: LD_INT 27
12170: PUSH
12171: LD_INT 28
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: LD_INT 34
12188: PUSH
12189: LD_INT 36
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 101
12230: PUSH
12231: LD_INT 102
12233: PUSH
12234: LD_INT 103
12236: PUSH
12237: LD_INT 104
12239: PUSH
12240: LD_INT 105
12242: PUSH
12243: LD_INT 106
12245: PUSH
12246: LD_INT 107
12248: PUSH
12249: LD_INT 108
12251: PUSH
12252: LD_INT 109
12254: PUSH
12255: LD_INT 110
12257: PUSH
12258: LD_INT 111
12260: PUSH
12261: LD_INT 112
12263: PUSH
12264: LD_INT 113
12266: PUSH
12267: LD_INT 114
12269: PUSH
12270: LD_INT 116
12272: PUSH
12273: LD_INT 117
12275: PUSH
12276: LD_INT 118
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: ST_TO_ADDR
12302: GO 13757
12304: LD_INT 13
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12520
12312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12313: LD_ADDR_VAR 0 2
12317: PUSH
12318: LD_INT 1
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 3
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: LD_INT 8
12335: PUSH
12336: LD_INT 9
12338: PUSH
12339: LD_INT 10
12341: PUSH
12342: LD_INT 11
12344: PUSH
12345: LD_INT 12
12347: PUSH
12348: LD_INT 14
12350: PUSH
12351: LD_INT 15
12353: PUSH
12354: LD_INT 16
12356: PUSH
12357: LD_INT 17
12359: PUSH
12360: LD_INT 18
12362: PUSH
12363: LD_INT 19
12365: PUSH
12366: LD_INT 20
12368: PUSH
12369: LD_INT 21
12371: PUSH
12372: LD_INT 22
12374: PUSH
12375: LD_INT 23
12377: PUSH
12378: LD_INT 24
12380: PUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 26
12386: PUSH
12387: LD_INT 27
12389: PUSH
12390: LD_INT 28
12392: PUSH
12393: LD_INT 30
12395: PUSH
12396: LD_INT 31
12398: PUSH
12399: LD_INT 32
12401: PUSH
12402: LD_INT 33
12404: PUSH
12405: LD_INT 34
12407: PUSH
12408: LD_INT 36
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 101
12446: PUSH
12447: LD_INT 102
12449: PUSH
12450: LD_INT 103
12452: PUSH
12453: LD_INT 104
12455: PUSH
12456: LD_INT 105
12458: PUSH
12459: LD_INT 106
12461: PUSH
12462: LD_INT 107
12464: PUSH
12465: LD_INT 108
12467: PUSH
12468: LD_INT 109
12470: PUSH
12471: LD_INT 110
12473: PUSH
12474: LD_INT 111
12476: PUSH
12477: LD_INT 112
12479: PUSH
12480: LD_INT 113
12482: PUSH
12483: LD_INT 114
12485: PUSH
12486: LD_INT 116
12488: PUSH
12489: LD_INT 117
12491: PUSH
12492: LD_INT 118
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: ST_TO_ADDR
12518: GO 13757
12520: LD_INT 14
12522: DOUBLE
12523: EQUAL
12524: IFTRUE 12528
12526: GO 12752
12528: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 1
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: LD_INT 5
12548: PUSH
12549: LD_INT 6
12551: PUSH
12552: LD_INT 7
12554: PUSH
12555: LD_INT 8
12557: PUSH
12558: LD_INT 9
12560: PUSH
12561: LD_INT 10
12563: PUSH
12564: LD_INT 11
12566: PUSH
12567: LD_INT 12
12569: PUSH
12570: LD_INT 13
12572: PUSH
12573: LD_INT 14
12575: PUSH
12576: LD_INT 15
12578: PUSH
12579: LD_INT 16
12581: PUSH
12582: LD_INT 17
12584: PUSH
12585: LD_INT 18
12587: PUSH
12588: LD_INT 19
12590: PUSH
12591: LD_INT 20
12593: PUSH
12594: LD_INT 21
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: LD_INT 23
12602: PUSH
12603: LD_INT 24
12605: PUSH
12606: LD_INT 25
12608: PUSH
12609: LD_INT 26
12611: PUSH
12612: LD_INT 27
12614: PUSH
12615: LD_INT 28
12617: PUSH
12618: LD_INT 29
12620: PUSH
12621: LD_INT 30
12623: PUSH
12624: LD_INT 31
12626: PUSH
12627: LD_INT 32
12629: PUSH
12630: LD_INT 33
12632: PUSH
12633: LD_INT 34
12635: PUSH
12636: LD_INT 36
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 101
12678: PUSH
12679: LD_INT 102
12681: PUSH
12682: LD_INT 103
12684: PUSH
12685: LD_INT 104
12687: PUSH
12688: LD_INT 105
12690: PUSH
12691: LD_INT 106
12693: PUSH
12694: LD_INT 107
12696: PUSH
12697: LD_INT 108
12699: PUSH
12700: LD_INT 109
12702: PUSH
12703: LD_INT 110
12705: PUSH
12706: LD_INT 111
12708: PUSH
12709: LD_INT 112
12711: PUSH
12712: LD_INT 113
12714: PUSH
12715: LD_INT 114
12717: PUSH
12718: LD_INT 116
12720: PUSH
12721: LD_INT 117
12723: PUSH
12724: LD_INT 118
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: ST_TO_ADDR
12750: GO 13757
12752: LD_INT 15
12754: DOUBLE
12755: EQUAL
12756: IFTRUE 12760
12758: GO 12984
12760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12761: LD_ADDR_VAR 0 2
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: LD_INT 2
12771: PUSH
12772: LD_INT 3
12774: PUSH
12775: LD_INT 4
12777: PUSH
12778: LD_INT 5
12780: PUSH
12781: LD_INT 6
12783: PUSH
12784: LD_INT 7
12786: PUSH
12787: LD_INT 8
12789: PUSH
12790: LD_INT 9
12792: PUSH
12793: LD_INT 10
12795: PUSH
12796: LD_INT 11
12798: PUSH
12799: LD_INT 12
12801: PUSH
12802: LD_INT 13
12804: PUSH
12805: LD_INT 14
12807: PUSH
12808: LD_INT 15
12810: PUSH
12811: LD_INT 16
12813: PUSH
12814: LD_INT 17
12816: PUSH
12817: LD_INT 18
12819: PUSH
12820: LD_INT 19
12822: PUSH
12823: LD_INT 20
12825: PUSH
12826: LD_INT 21
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_INT 23
12834: PUSH
12835: LD_INT 24
12837: PUSH
12838: LD_INT 25
12840: PUSH
12841: LD_INT 26
12843: PUSH
12844: LD_INT 27
12846: PUSH
12847: LD_INT 28
12849: PUSH
12850: LD_INT 29
12852: PUSH
12853: LD_INT 30
12855: PUSH
12856: LD_INT 31
12858: PUSH
12859: LD_INT 32
12861: PUSH
12862: LD_INT 33
12864: PUSH
12865: LD_INT 34
12867: PUSH
12868: LD_INT 36
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 101
12910: PUSH
12911: LD_INT 102
12913: PUSH
12914: LD_INT 103
12916: PUSH
12917: LD_INT 104
12919: PUSH
12920: LD_INT 105
12922: PUSH
12923: LD_INT 106
12925: PUSH
12926: LD_INT 107
12928: PUSH
12929: LD_INT 108
12931: PUSH
12932: LD_INT 109
12934: PUSH
12935: LD_INT 110
12937: PUSH
12938: LD_INT 111
12940: PUSH
12941: LD_INT 112
12943: PUSH
12944: LD_INT 113
12946: PUSH
12947: LD_INT 114
12949: PUSH
12950: LD_INT 116
12952: PUSH
12953: LD_INT 117
12955: PUSH
12956: LD_INT 118
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: ST_TO_ADDR
12982: GO 13757
12984: LD_INT 16
12986: DOUBLE
12987: EQUAL
12988: IFTRUE 12992
12990: GO 13128
12992: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 4
13003: PUSH
13004: LD_INT 5
13006: PUSH
13007: LD_INT 7
13009: PUSH
13010: LD_INT 11
13012: PUSH
13013: LD_INT 12
13015: PUSH
13016: LD_INT 15
13018: PUSH
13019: LD_INT 16
13021: PUSH
13022: LD_INT 20
13024: PUSH
13025: LD_INT 21
13027: PUSH
13028: LD_INT 22
13030: PUSH
13031: LD_INT 23
13033: PUSH
13034: LD_INT 25
13036: PUSH
13037: LD_INT 26
13039: PUSH
13040: LD_INT 30
13042: PUSH
13043: LD_INT 31
13045: PUSH
13046: LD_INT 32
13048: PUSH
13049: LD_INT 33
13051: PUSH
13052: LD_INT 34
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 101
13078: PUSH
13079: LD_INT 102
13081: PUSH
13082: LD_INT 103
13084: PUSH
13085: LD_INT 106
13087: PUSH
13088: LD_INT 108
13090: PUSH
13091: LD_INT 112
13093: PUSH
13094: LD_INT 113
13096: PUSH
13097: LD_INT 114
13099: PUSH
13100: LD_INT 116
13102: PUSH
13103: LD_INT 117
13105: PUSH
13106: LD_INT 118
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: ST_TO_ADDR
13126: GO 13757
13128: LD_INT 17
13130: DOUBLE
13131: EQUAL
13132: IFTRUE 13136
13134: GO 13360
13136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 3
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: LD_INT 6
13159: PUSH
13160: LD_INT 7
13162: PUSH
13163: LD_INT 8
13165: PUSH
13166: LD_INT 9
13168: PUSH
13169: LD_INT 10
13171: PUSH
13172: LD_INT 11
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 13
13180: PUSH
13181: LD_INT 14
13183: PUSH
13184: LD_INT 15
13186: PUSH
13187: LD_INT 16
13189: PUSH
13190: LD_INT 17
13192: PUSH
13193: LD_INT 18
13195: PUSH
13196: LD_INT 19
13198: PUSH
13199: LD_INT 20
13201: PUSH
13202: LD_INT 21
13204: PUSH
13205: LD_INT 22
13207: PUSH
13208: LD_INT 23
13210: PUSH
13211: LD_INT 24
13213: PUSH
13214: LD_INT 25
13216: PUSH
13217: LD_INT 26
13219: PUSH
13220: LD_INT 27
13222: PUSH
13223: LD_INT 28
13225: PUSH
13226: LD_INT 29
13228: PUSH
13229: LD_INT 30
13231: PUSH
13232: LD_INT 31
13234: PUSH
13235: LD_INT 32
13237: PUSH
13238: LD_INT 33
13240: PUSH
13241: LD_INT 34
13243: PUSH
13244: LD_INT 36
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 101
13286: PUSH
13287: LD_INT 102
13289: PUSH
13290: LD_INT 103
13292: PUSH
13293: LD_INT 104
13295: PUSH
13296: LD_INT 105
13298: PUSH
13299: LD_INT 106
13301: PUSH
13302: LD_INT 107
13304: PUSH
13305: LD_INT 108
13307: PUSH
13308: LD_INT 109
13310: PUSH
13311: LD_INT 110
13313: PUSH
13314: LD_INT 111
13316: PUSH
13317: LD_INT 112
13319: PUSH
13320: LD_INT 113
13322: PUSH
13323: LD_INT 114
13325: PUSH
13326: LD_INT 116
13328: PUSH
13329: LD_INT 117
13331: PUSH
13332: LD_INT 118
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: ST_TO_ADDR
13358: GO 13757
13360: LD_INT 18
13362: DOUBLE
13363: EQUAL
13364: IFTRUE 13368
13366: GO 13516
13368: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13369: LD_ADDR_VAR 0 2
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: LD_INT 5
13382: PUSH
13383: LD_INT 7
13385: PUSH
13386: LD_INT 11
13388: PUSH
13389: LD_INT 12
13391: PUSH
13392: LD_INT 15
13394: PUSH
13395: LD_INT 16
13397: PUSH
13398: LD_INT 20
13400: PUSH
13401: LD_INT 21
13403: PUSH
13404: LD_INT 22
13406: PUSH
13407: LD_INT 23
13409: PUSH
13410: LD_INT 25
13412: PUSH
13413: LD_INT 26
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 31
13421: PUSH
13422: LD_INT 32
13424: PUSH
13425: LD_INT 33
13427: PUSH
13428: LD_INT 34
13430: PUSH
13431: LD_INT 35
13433: PUSH
13434: LD_INT 36
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 101
13462: PUSH
13463: LD_INT 102
13465: PUSH
13466: LD_INT 103
13468: PUSH
13469: LD_INT 106
13471: PUSH
13472: LD_INT 108
13474: PUSH
13475: LD_INT 112
13477: PUSH
13478: LD_INT 113
13480: PUSH
13481: LD_INT 114
13483: PUSH
13484: LD_INT 115
13486: PUSH
13487: LD_INT 116
13489: PUSH
13490: LD_INT 117
13492: PUSH
13493: LD_INT 118
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: ST_TO_ADDR
13514: GO 13757
13516: LD_INT 19
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13756
13524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13525: LD_ADDR_VAR 0 2
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: LD_INT 3
13538: PUSH
13539: LD_INT 4
13541: PUSH
13542: LD_INT 5
13544: PUSH
13545: LD_INT 6
13547: PUSH
13548: LD_INT 7
13550: PUSH
13551: LD_INT 8
13553: PUSH
13554: LD_INT 9
13556: PUSH
13557: LD_INT 10
13559: PUSH
13560: LD_INT 11
13562: PUSH
13563: LD_INT 12
13565: PUSH
13566: LD_INT 13
13568: PUSH
13569: LD_INT 14
13571: PUSH
13572: LD_INT 15
13574: PUSH
13575: LD_INT 16
13577: PUSH
13578: LD_INT 17
13580: PUSH
13581: LD_INT 18
13583: PUSH
13584: LD_INT 19
13586: PUSH
13587: LD_INT 20
13589: PUSH
13590: LD_INT 21
13592: PUSH
13593: LD_INT 22
13595: PUSH
13596: LD_INT 23
13598: PUSH
13599: LD_INT 24
13601: PUSH
13602: LD_INT 25
13604: PUSH
13605: LD_INT 26
13607: PUSH
13608: LD_INT 27
13610: PUSH
13611: LD_INT 28
13613: PUSH
13614: LD_INT 29
13616: PUSH
13617: LD_INT 30
13619: PUSH
13620: LD_INT 31
13622: PUSH
13623: LD_INT 32
13625: PUSH
13626: LD_INT 33
13628: PUSH
13629: LD_INT 34
13631: PUSH
13632: LD_INT 35
13634: PUSH
13635: LD_INT 36
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 101
13678: PUSH
13679: LD_INT 102
13681: PUSH
13682: LD_INT 103
13684: PUSH
13685: LD_INT 104
13687: PUSH
13688: LD_INT 105
13690: PUSH
13691: LD_INT 106
13693: PUSH
13694: LD_INT 107
13696: PUSH
13697: LD_INT 108
13699: PUSH
13700: LD_INT 109
13702: PUSH
13703: LD_INT 110
13705: PUSH
13706: LD_INT 111
13708: PUSH
13709: LD_INT 112
13711: PUSH
13712: LD_INT 113
13714: PUSH
13715: LD_INT 114
13717: PUSH
13718: LD_INT 115
13720: PUSH
13721: LD_INT 116
13723: PUSH
13724: LD_INT 117
13726: PUSH
13727: LD_INT 118
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: ST_TO_ADDR
13754: GO 13757
13756: POP
// end else
13757: GO 13988
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13759: LD_ADDR_VAR 0 2
13763: PUSH
13764: LD_INT 1
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 3
13772: PUSH
13773: LD_INT 4
13775: PUSH
13776: LD_INT 5
13778: PUSH
13779: LD_INT 6
13781: PUSH
13782: LD_INT 7
13784: PUSH
13785: LD_INT 8
13787: PUSH
13788: LD_INT 9
13790: PUSH
13791: LD_INT 10
13793: PUSH
13794: LD_INT 11
13796: PUSH
13797: LD_INT 12
13799: PUSH
13800: LD_INT 13
13802: PUSH
13803: LD_INT 14
13805: PUSH
13806: LD_INT 15
13808: PUSH
13809: LD_INT 16
13811: PUSH
13812: LD_INT 17
13814: PUSH
13815: LD_INT 18
13817: PUSH
13818: LD_INT 19
13820: PUSH
13821: LD_INT 20
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 22
13829: PUSH
13830: LD_INT 23
13832: PUSH
13833: LD_INT 24
13835: PUSH
13836: LD_INT 25
13838: PUSH
13839: LD_INT 26
13841: PUSH
13842: LD_INT 27
13844: PUSH
13845: LD_INT 28
13847: PUSH
13848: LD_INT 29
13850: PUSH
13851: LD_INT 30
13853: PUSH
13854: LD_INT 31
13856: PUSH
13857: LD_INT 32
13859: PUSH
13860: LD_INT 33
13862: PUSH
13863: LD_INT 34
13865: PUSH
13866: LD_INT 35
13868: PUSH
13869: LD_INT 36
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 101
13912: PUSH
13913: LD_INT 102
13915: PUSH
13916: LD_INT 103
13918: PUSH
13919: LD_INT 104
13921: PUSH
13922: LD_INT 105
13924: PUSH
13925: LD_INT 106
13927: PUSH
13928: LD_INT 107
13930: PUSH
13931: LD_INT 108
13933: PUSH
13934: LD_INT 109
13936: PUSH
13937: LD_INT 110
13939: PUSH
13940: LD_INT 111
13942: PUSH
13943: LD_INT 112
13945: PUSH
13946: LD_INT 113
13948: PUSH
13949: LD_INT 114
13951: PUSH
13952: LD_INT 115
13954: PUSH
13955: LD_INT 116
13957: PUSH
13958: LD_INT 117
13960: PUSH
13961: LD_INT 118
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: ST_TO_ADDR
// if result then
13988: LD_VAR 0 2
13992: IFFALSE 14778
// begin normal :=  ;
13994: LD_ADDR_VAR 0 5
13998: PUSH
13999: LD_STRING 
14001: ST_TO_ADDR
// hardcore :=  ;
14002: LD_ADDR_VAR 0 6
14006: PUSH
14007: LD_STRING 
14009: ST_TO_ADDR
// active :=  ;
14010: LD_ADDR_VAR 0 7
14014: PUSH
14015: LD_STRING 
14017: ST_TO_ADDR
// for i = 1 to normalCounter do
14018: LD_ADDR_VAR 0 8
14022: PUSH
14023: DOUBLE
14024: LD_INT 1
14026: DEC
14027: ST_TO_ADDR
14028: LD_EXP 32
14032: PUSH
14033: FOR_TO
14034: IFFALSE 14135
// begin tmp := 0 ;
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: LD_STRING 0
14043: ST_TO_ADDR
// if result [ 1 ] then
14044: LD_VAR 0 2
14048: PUSH
14049: LD_INT 1
14051: ARRAY
14052: IFFALSE 14117
// if result [ 1 ] [ 1 ] = i then
14054: LD_VAR 0 2
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PUSH
14063: LD_INT 1
14065: ARRAY
14066: PUSH
14067: LD_VAR 0 8
14071: EQUAL
14072: IFFALSE 14117
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14074: LD_ADDR_VAR 0 2
14078: PUSH
14079: LD_VAR 0 2
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: LD_VAR 0 2
14091: PUSH
14092: LD_INT 1
14094: ARRAY
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 3
14103: PPUSH
14104: CALL_OW 1
14108: ST_TO_ADDR
// tmp := 1 ;
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_STRING 1
14116: ST_TO_ADDR
// end ; normal := normal & tmp ;
14117: LD_ADDR_VAR 0 5
14121: PUSH
14122: LD_VAR 0 5
14126: PUSH
14127: LD_VAR 0 3
14131: STR
14132: ST_TO_ADDR
// end ;
14133: GO 14033
14135: POP
14136: POP
// for i = 1 to hardcoreCounter do
14137: LD_ADDR_VAR 0 8
14141: PUSH
14142: DOUBLE
14143: LD_INT 1
14145: DEC
14146: ST_TO_ADDR
14147: LD_EXP 33
14151: PUSH
14152: FOR_TO
14153: IFFALSE 14258
// begin tmp := 0 ;
14155: LD_ADDR_VAR 0 3
14159: PUSH
14160: LD_STRING 0
14162: ST_TO_ADDR
// if result [ 2 ] then
14163: LD_VAR 0 2
14167: PUSH
14168: LD_INT 2
14170: ARRAY
14171: IFFALSE 14240
// if result [ 2 ] [ 1 ] = 100 + i then
14173: LD_VAR 0 2
14177: PUSH
14178: LD_INT 2
14180: ARRAY
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: PUSH
14186: LD_INT 100
14188: PUSH
14189: LD_VAR 0 8
14193: PLUS
14194: EQUAL
14195: IFFALSE 14240
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_VAR 0 2
14206: PPUSH
14207: LD_INT 2
14209: PPUSH
14210: LD_VAR 0 2
14214: PUSH
14215: LD_INT 2
14217: ARRAY
14218: PPUSH
14219: LD_INT 1
14221: PPUSH
14222: CALL_OW 3
14226: PPUSH
14227: CALL_OW 1
14231: ST_TO_ADDR
// tmp := 1 ;
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_STRING 1
14239: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14240: LD_ADDR_VAR 0 6
14244: PUSH
14245: LD_VAR 0 6
14249: PUSH
14250: LD_VAR 0 3
14254: STR
14255: ST_TO_ADDR
// end ;
14256: GO 14152
14258: POP
14259: POP
// if isGameLoad then
14260: LD_VAR 0 1
14264: IFFALSE 14739
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14266: LD_ADDR_VAR 0 4
14270: PUSH
14271: LD_EXP 36
14275: PUSH
14276: LD_EXP 35
14280: PUSH
14281: LD_EXP 37
14285: PUSH
14286: LD_EXP 34
14290: PUSH
14291: LD_EXP 38
14295: PUSH
14296: LD_EXP 39
14300: PUSH
14301: LD_EXP 40
14305: PUSH
14306: LD_EXP 41
14310: PUSH
14311: LD_EXP 42
14315: PUSH
14316: LD_EXP 43
14320: PUSH
14321: LD_EXP 44
14325: PUSH
14326: LD_EXP 45
14330: PUSH
14331: LD_EXP 46
14335: PUSH
14336: LD_EXP 47
14340: PUSH
14341: LD_EXP 55
14345: PUSH
14346: LD_EXP 56
14350: PUSH
14351: LD_EXP 57
14355: PUSH
14356: LD_EXP 58
14360: PUSH
14361: LD_EXP 60
14365: PUSH
14366: LD_EXP 61
14370: PUSH
14371: LD_EXP 62
14375: PUSH
14376: LD_EXP 65
14380: PUSH
14381: LD_EXP 67
14385: PUSH
14386: LD_EXP 68
14390: PUSH
14391: LD_EXP 69
14395: PUSH
14396: LD_EXP 71
14400: PUSH
14401: LD_EXP 72
14405: PUSH
14406: LD_EXP 75
14410: PUSH
14411: LD_EXP 76
14415: PUSH
14416: LD_EXP 77
14420: PUSH
14421: LD_EXP 78
14425: PUSH
14426: LD_EXP 79
14430: PUSH
14431: LD_EXP 80
14435: PUSH
14436: LD_EXP 81
14440: PUSH
14441: LD_EXP 82
14445: PUSH
14446: LD_EXP 83
14450: PUSH
14451: LD_EXP 48
14455: PUSH
14456: LD_EXP 49
14460: PUSH
14461: LD_EXP 52
14465: PUSH
14466: LD_EXP 53
14470: PUSH
14471: LD_EXP 54
14475: PUSH
14476: LD_EXP 50
14480: PUSH
14481: LD_EXP 51
14485: PUSH
14486: LD_EXP 59
14490: PUSH
14491: LD_EXP 63
14495: PUSH
14496: LD_EXP 64
14500: PUSH
14501: LD_EXP 66
14505: PUSH
14506: LD_EXP 70
14510: PUSH
14511: LD_EXP 73
14515: PUSH
14516: LD_EXP 74
14520: PUSH
14521: LD_EXP 84
14525: PUSH
14526: LD_EXP 85
14530: PUSH
14531: LD_EXP 86
14535: PUSH
14536: LD_EXP 87
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: ST_TO_ADDR
// tmp :=  ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_STRING 
14604: ST_TO_ADDR
// for i = 1 to normalCounter do
14605: LD_ADDR_VAR 0 8
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_EXP 32
14619: PUSH
14620: FOR_TO
14621: IFFALSE 14657
// begin if flags [ i ] then
14623: LD_VAR 0 4
14627: PUSH
14628: LD_VAR 0 8
14632: ARRAY
14633: IFFALSE 14655
// tmp := tmp & i & ; ;
14635: LD_ADDR_VAR 0 3
14639: PUSH
14640: LD_VAR 0 3
14644: PUSH
14645: LD_VAR 0 8
14649: STR
14650: PUSH
14651: LD_STRING ;
14653: STR
14654: ST_TO_ADDR
// end ;
14655: GO 14620
14657: POP
14658: POP
// for i = 1 to hardcoreCounter do
14659: LD_ADDR_VAR 0 8
14663: PUSH
14664: DOUBLE
14665: LD_INT 1
14667: DEC
14668: ST_TO_ADDR
14669: LD_EXP 33
14673: PUSH
14674: FOR_TO
14675: IFFALSE 14721
// begin if flags [ normalCounter + i ] then
14677: LD_VAR 0 4
14681: PUSH
14682: LD_EXP 32
14686: PUSH
14687: LD_VAR 0 8
14691: PLUS
14692: ARRAY
14693: IFFALSE 14719
// tmp := tmp & ( 100 + i ) & ; ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_VAR 0 3
14704: PUSH
14705: LD_INT 100
14707: PUSH
14708: LD_VAR 0 8
14712: PLUS
14713: STR
14714: PUSH
14715: LD_STRING ;
14717: STR
14718: ST_TO_ADDR
// end ;
14719: GO 14674
14721: POP
14722: POP
// if tmp then
14723: LD_VAR 0 3
14727: IFFALSE 14739
// active := tmp ;
14729: LD_ADDR_VAR 0 7
14733: PUSH
14734: LD_VAR 0 3
14738: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14739: LD_STRING getStreamItemsFromMission("
14741: PUSH
14742: LD_VAR 0 5
14746: STR
14747: PUSH
14748: LD_STRING ","
14750: STR
14751: PUSH
14752: LD_VAR 0 6
14756: STR
14757: PUSH
14758: LD_STRING ","
14760: STR
14761: PUSH
14762: LD_VAR 0 7
14766: STR
14767: PUSH
14768: LD_STRING ")
14770: STR
14771: PPUSH
14772: CALL_OW 559
// end else
14776: GO 14785
// ToLua ( getStreamItemsFromMission("","","") ) ;
14778: LD_STRING getStreamItemsFromMission("","","")
14780: PPUSH
14781: CALL_OW 559
// end ;
14785: LD_VAR 0 2
14789: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14790: LD_EXP 31
14794: PUSH
14795: LD_EXP 36
14799: AND
14800: IFFALSE 14924
14802: GO 14804
14804: DISABLE
14805: LD_INT 0
14807: PPUSH
14808: PPUSH
// begin enable ;
14809: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14810: LD_ADDR_VAR 0 2
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_OWVAR 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 34
14832: PUSH
14833: LD_INT 7
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 34
14842: PUSH
14843: LD_INT 45
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 34
14852: PUSH
14853: LD_INT 28
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 34
14862: PUSH
14863: LD_INT 47
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL_OW 69
14885: ST_TO_ADDR
// if not tmp then
14886: LD_VAR 0 2
14890: NOT
14891: IFFALSE 14895
// exit ;
14893: GO 14924
// for i in tmp do
14895: LD_ADDR_VAR 0 1
14899: PUSH
14900: LD_VAR 0 2
14904: PUSH
14905: FOR_IN
14906: IFFALSE 14922
// begin SetLives ( i , 0 ) ;
14908: LD_VAR 0 1
14912: PPUSH
14913: LD_INT 0
14915: PPUSH
14916: CALL_OW 234
// end ;
14920: GO 14905
14922: POP
14923: POP
// end ;
14924: PPOPN 2
14926: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14927: LD_EXP 31
14931: PUSH
14932: LD_EXP 37
14936: AND
14937: IFFALSE 15021
14939: GO 14941
14941: DISABLE
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
// begin enable ;
14946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_OWVAR 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 32
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PPUSH
14978: CALL_OW 69
14982: ST_TO_ADDR
// if not tmp then
14983: LD_VAR 0 2
14987: NOT
14988: IFFALSE 14992
// exit ;
14990: GO 15021
// for i in tmp do
14992: LD_ADDR_VAR 0 1
14996: PUSH
14997: LD_VAR 0 2
15001: PUSH
15002: FOR_IN
15003: IFFALSE 15019
// begin SetLives ( i , 0 ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: LD_INT 0
15012: PPUSH
15013: CALL_OW 234
// end ;
15017: GO 15002
15019: POP
15020: POP
// end ;
15021: PPOPN 2
15023: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15024: LD_EXP 31
15028: PUSH
15029: LD_EXP 34
15033: AND
15034: IFFALSE 15127
15036: GO 15038
15038: DISABLE
15039: LD_INT 0
15041: PPUSH
// begin enable ;
15042: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_OWVAR 2
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: LD_INT 25
15065: PUSH
15066: LD_INT 5
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 25
15075: PUSH
15076: LD_INT 9
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 25
15085: PUSH
15086: LD_INT 8
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PPUSH
15103: CALL_OW 69
15107: PUSH
15108: FOR_IN
15109: IFFALSE 15125
// begin SetClass ( i , 1 ) ;
15111: LD_VAR 0 1
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: CALL_OW 336
// end ;
15123: GO 15108
15125: POP
15126: POP
// end ;
15127: PPOPN 1
15129: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15130: LD_EXP 31
15134: PUSH
15135: LD_EXP 35
15139: AND
15140: PUSH
15141: LD_OWVAR 65
15145: PUSH
15146: LD_INT 7
15148: LESS
15149: AND
15150: IFFALSE 15164
15152: GO 15154
15154: DISABLE
// begin enable ;
15155: ENABLE
// game_speed := 7 ;
15156: LD_ADDR_OWVAR 65
15160: PUSH
15161: LD_INT 7
15163: ST_TO_ADDR
// end ;
15164: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15165: LD_EXP 31
15169: PUSH
15170: LD_EXP 38
15174: AND
15175: IFFALSE 15377
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
15184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_INT 81
15192: PUSH
15193: LD_OWVAR 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 21
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: ST_TO_ADDR
// if not tmp then
15221: LD_VAR 0 3
15225: NOT
15226: IFFALSE 15230
// exit ;
15228: GO 15377
// if tmp > 5 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 5
15237: GREATER
15238: IFFALSE 15250
// k := 5 else
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_INT 5
15247: ST_TO_ADDR
15248: GO 15260
// k := tmp ;
15250: LD_ADDR_VAR 0 2
15254: PUSH
15255: LD_VAR 0 3
15259: ST_TO_ADDR
// for i := 1 to k do
15260: LD_ADDR_VAR 0 1
15264: PUSH
15265: DOUBLE
15266: LD_INT 1
15268: DEC
15269: ST_TO_ADDR
15270: LD_VAR 0 2
15274: PUSH
15275: FOR_TO
15276: IFFALSE 15375
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_VAR 0 1
15287: ARRAY
15288: PPUSH
15289: LD_VAR 0 1
15293: PUSH
15294: LD_INT 4
15296: MOD
15297: PUSH
15298: LD_INT 1
15300: PLUS
15301: PPUSH
15302: CALL_OW 259
15306: PUSH
15307: LD_INT 10
15309: LESS
15310: IFFALSE 15373
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15312: LD_VAR 0 3
15316: PUSH
15317: LD_VAR 0 1
15321: ARRAY
15322: PPUSH
15323: LD_VAR 0 1
15327: PUSH
15328: LD_INT 4
15330: MOD
15331: PUSH
15332: LD_INT 1
15334: PLUS
15335: PPUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_VAR 0 1
15345: ARRAY
15346: PPUSH
15347: LD_VAR 0 1
15351: PUSH
15352: LD_INT 4
15354: MOD
15355: PUSH
15356: LD_INT 1
15358: PLUS
15359: PPUSH
15360: CALL_OW 259
15364: PUSH
15365: LD_INT 1
15367: PLUS
15368: PPUSH
15369: CALL_OW 237
15373: GO 15275
15375: POP
15376: POP
// end ;
15377: PPOPN 3
15379: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15380: LD_EXP 31
15384: PUSH
15385: LD_EXP 39
15389: AND
15390: IFFALSE 15410
15392: GO 15394
15394: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15395: LD_INT 4
15397: PPUSH
15398: LD_OWVAR 2
15402: PPUSH
15403: LD_INT 0
15405: PPUSH
15406: CALL_OW 324
15410: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15411: LD_EXP 31
15415: PUSH
15416: LD_EXP 68
15420: AND
15421: IFFALSE 15441
15423: GO 15425
15425: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15426: LD_INT 19
15428: PPUSH
15429: LD_OWVAR 2
15433: PPUSH
15434: LD_INT 0
15436: PPUSH
15437: CALL_OW 324
15441: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15442: LD_EXP 31
15446: PUSH
15447: LD_EXP 40
15451: AND
15452: IFFALSE 15554
15454: GO 15456
15456: DISABLE
15457: LD_INT 0
15459: PPUSH
15460: PPUSH
// begin enable ;
15461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: LD_INT 34
15484: PUSH
15485: LD_INT 11
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 34
15494: PUSH
15495: LD_INT 30
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: ST_TO_ADDR
// if not tmp then
15516: LD_VAR 0 2
15520: NOT
15521: IFFALSE 15525
// exit ;
15523: GO 15554
// for i in tmp do
15525: LD_ADDR_VAR 0 1
15529: PUSH
15530: LD_VAR 0 2
15534: PUSH
15535: FOR_IN
15536: IFFALSE 15552
// begin SetLives ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 234
// end ;
15550: GO 15535
15552: POP
15553: POP
// end ;
15554: PPOPN 2
15556: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15557: LD_EXP 31
15561: PUSH
15562: LD_EXP 41
15566: AND
15567: IFFALSE 15587
15569: GO 15571
15571: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15572: LD_INT 32
15574: PPUSH
15575: LD_OWVAR 2
15579: PPUSH
15580: LD_INT 0
15582: PPUSH
15583: CALL_OW 324
15587: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15588: LD_EXP 31
15592: PUSH
15593: LD_EXP 42
15597: AND
15598: IFFALSE 15779
15600: GO 15602
15602: DISABLE
15603: LD_INT 0
15605: PPUSH
15606: PPUSH
15607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15608: LD_ADDR_VAR 0 2
15612: PUSH
15613: LD_INT 22
15615: PUSH
15616: LD_OWVAR 2
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 33
15627: PUSH
15628: LD_INT 3
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: ST_TO_ADDR
// if not tmp then
15644: LD_VAR 0 2
15648: NOT
15649: IFFALSE 15653
// exit ;
15651: GO 15779
// side := 0 ;
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_INT 0
15660: ST_TO_ADDR
// for i := 1 to 8 do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: DOUBLE
15667: LD_INT 1
15669: DEC
15670: ST_TO_ADDR
15671: LD_INT 8
15673: PUSH
15674: FOR_TO
15675: IFFALSE 15723
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15677: LD_OWVAR 2
15681: PUSH
15682: LD_VAR 0 1
15686: NONEQUAL
15687: PUSH
15688: LD_OWVAR 2
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 81
15702: PUSH
15703: LD_INT 2
15705: EQUAL
15706: AND
15707: IFFALSE 15721
// begin side := i ;
15709: LD_ADDR_VAR 0 3
15713: PUSH
15714: LD_VAR 0 1
15718: ST_TO_ADDR
// break ;
15719: GO 15723
// end ;
15721: GO 15674
15723: POP
15724: POP
// if not side then
15725: LD_VAR 0 3
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15779
// for i := 1 to tmp do
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: DOUBLE
15740: LD_INT 1
15742: DEC
15743: ST_TO_ADDR
15744: LD_VAR 0 2
15748: PUSH
15749: FOR_TO
15750: IFFALSE 15777
// if Prob ( 60 ) then
15752: LD_INT 60
15754: PPUSH
15755: CALL_OW 13
15759: IFFALSE 15775
// SetSide ( i , side ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: CALL_OW 235
15775: GO 15749
15777: POP
15778: POP
// end ;
15779: PPOPN 3
15781: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15782: LD_EXP 31
15786: PUSH
15787: LD_EXP 44
15791: AND
15792: IFFALSE 15911
15794: GO 15796
15796: DISABLE
15797: LD_INT 0
15799: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15800: LD_ADDR_VAR 0 1
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_OWVAR 2
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 21
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: LD_INT 23
15832: PUSH
15833: LD_INT 0
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 69
15853: PUSH
15854: FOR_IN
15855: IFFALSE 15909
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL_OW 257
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: LD_INT 3
15875: PUSH
15876: LD_INT 4
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: IN
15885: IFFALSE 15907
// SetClass ( un , rand ( 1 , 4 ) ) ;
15887: LD_VAR 0 1
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: LD_INT 4
15897: PPUSH
15898: CALL_OW 12
15902: PPUSH
15903: CALL_OW 336
15907: GO 15854
15909: POP
15910: POP
// end ;
15911: PPOPN 1
15913: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15914: LD_EXP 31
15918: PUSH
15919: LD_EXP 43
15923: AND
15924: IFFALSE 16003
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 22
15939: PUSH
15940: LD_OWVAR 2
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 21
15951: PUSH
15952: LD_INT 3
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 1
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: PPUSH
15996: LD_INT 100
15998: PPUSH
15999: CALL_OW 234
// end ;
16003: PPOPN 1
16005: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16006: LD_EXP 31
16010: PUSH
16011: LD_EXP 45
16015: AND
16016: IFFALSE 16114
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16024: LD_ADDR_VAR 0 1
16028: PUSH
16029: LD_INT 22
16031: PUSH
16032: LD_OWVAR 2
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 21
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 69
16059: ST_TO_ADDR
// if not tmp then
16060: LD_VAR 0 1
16064: NOT
16065: IFFALSE 16069
// exit ;
16067: GO 16114
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16069: LD_VAR 0 1
16073: PUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 12
16086: ARRAY
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_INT 4
16093: PPUSH
16094: CALL_OW 12
16098: PPUSH
16099: LD_INT 3000
16101: PPUSH
16102: LD_INT 9000
16104: PPUSH
16105: CALL_OW 12
16109: PPUSH
16110: CALL_OW 492
// end ;
16114: PPOPN 1
16116: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16117: LD_EXP 31
16121: PUSH
16122: LD_EXP 46
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16132: LD_INT 1
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16148: LD_EXP 31
16152: PUSH
16153: LD_EXP 47
16157: AND
16158: IFFALSE 16241
16160: GO 16162
16162: DISABLE
16163: LD_INT 0
16165: PPUSH
16166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16167: LD_ADDR_VAR 0 2
16171: PUSH
16172: LD_INT 22
16174: PUSH
16175: LD_OWVAR 2
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 21
16186: PUSH
16187: LD_INT 3
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// if not tmp then
16203: LD_VAR 0 2
16207: NOT
16208: IFFALSE 16212
// exit ;
16210: GO 16241
// for i in tmp do
16212: LD_ADDR_VAR 0 1
16216: PUSH
16217: LD_VAR 0 2
16221: PUSH
16222: FOR_IN
16223: IFFALSE 16239
// SetBLevel ( i , 10 ) ;
16225: LD_VAR 0 1
16229: PPUSH
16230: LD_INT 10
16232: PPUSH
16233: CALL_OW 241
16237: GO 16222
16239: POP
16240: POP
// end ;
16241: PPOPN 2
16243: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16244: LD_EXP 31
16248: PUSH
16249: LD_EXP 48
16253: AND
16254: IFFALSE 16365
16256: GO 16258
16258: DISABLE
16259: LD_INT 0
16261: PPUSH
16262: PPUSH
16263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16264: LD_ADDR_VAR 0 3
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_OWVAR 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 25
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// if not tmp then
16300: LD_VAR 0 3
16304: NOT
16305: IFFALSE 16309
// exit ;
16307: GO 16365
// un := tmp [ rand ( 1 , tmp ) ] ;
16309: LD_ADDR_VAR 0 2
16313: PUSH
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 1
16321: PPUSH
16322: LD_VAR 0 3
16326: PPUSH
16327: CALL_OW 12
16331: ARRAY
16332: ST_TO_ADDR
// if Crawls ( un ) then
16333: LD_VAR 0 2
16337: PPUSH
16338: CALL_OW 318
16342: IFFALSE 16353
// ComWalk ( un ) ;
16344: LD_VAR 0 2
16348: PPUSH
16349: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_INT 5
16360: PPUSH
16361: CALL_OW 336
// end ;
16365: PPOPN 3
16367: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16368: LD_EXP 31
16372: PUSH
16373: LD_EXP 49
16377: AND
16378: PUSH
16379: LD_OWVAR 67
16383: PUSH
16384: LD_INT 4
16386: LESS
16387: AND
16388: IFFALSE 16407
16390: GO 16392
16392: DISABLE
// begin Difficulty := Difficulty + 1 ;
16393: LD_ADDR_OWVAR 67
16397: PUSH
16398: LD_OWVAR 67
16402: PUSH
16403: LD_INT 1
16405: PLUS
16406: ST_TO_ADDR
// end ;
16407: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16408: LD_EXP 31
16412: PUSH
16413: LD_EXP 50
16417: AND
16418: IFFALSE 16521
16420: GO 16422
16422: DISABLE
16423: LD_INT 0
16425: PPUSH
// begin for i := 1 to 5 do
16426: LD_ADDR_VAR 0 1
16430: PUSH
16431: DOUBLE
16432: LD_INT 1
16434: DEC
16435: ST_TO_ADDR
16436: LD_INT 5
16438: PUSH
16439: FOR_TO
16440: IFFALSE 16519
// begin uc_nation := nation_nature ;
16442: LD_ADDR_OWVAR 21
16446: PUSH
16447: LD_INT 0
16449: ST_TO_ADDR
// uc_side := 0 ;
16450: LD_ADDR_OWVAR 20
16454: PUSH
16455: LD_INT 0
16457: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16458: LD_ADDR_OWVAR 29
16462: PUSH
16463: LD_INT 12
16465: PUSH
16466: LD_INT 12
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: ST_TO_ADDR
// hc_agressivity := 20 ;
16473: LD_ADDR_OWVAR 35
16477: PUSH
16478: LD_INT 20
16480: ST_TO_ADDR
// hc_class := class_tiger ;
16481: LD_ADDR_OWVAR 28
16485: PUSH
16486: LD_INT 14
16488: ST_TO_ADDR
// hc_gallery :=  ;
16489: LD_ADDR_OWVAR 33
16493: PUSH
16494: LD_STRING 
16496: ST_TO_ADDR
// hc_name :=  ;
16497: LD_ADDR_OWVAR 26
16501: PUSH
16502: LD_STRING 
16504: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16505: CALL_OW 44
16509: PPUSH
16510: LD_INT 0
16512: PPUSH
16513: CALL_OW 51
// end ;
16517: GO 16439
16519: POP
16520: POP
// end ;
16521: PPOPN 1
16523: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16524: LD_EXP 31
16528: PUSH
16529: LD_EXP 51
16533: AND
16534: IFFALSE 16543
16536: GO 16538
16538: DISABLE
// StreamSibBomb ;
16539: CALL 16544 0 0
16543: END
// export function StreamSibBomb ; var i , x , y ; begin
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
16548: PPUSH
16549: PPUSH
// result := false ;
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_INT 0
16557: ST_TO_ADDR
// for i := 1 to 16 do
16558: LD_ADDR_VAR 0 2
16562: PUSH
16563: DOUBLE
16564: LD_INT 1
16566: DEC
16567: ST_TO_ADDR
16568: LD_INT 16
16570: PUSH
16571: FOR_TO
16572: IFFALSE 16771
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16574: LD_ADDR_VAR 0 3
16578: PUSH
16579: LD_INT 10
16581: PUSH
16582: LD_INT 20
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 40
16590: PUSH
16591: LD_INT 50
16593: PUSH
16594: LD_INT 60
16596: PUSH
16597: LD_INT 70
16599: PUSH
16600: LD_INT 80
16602: PUSH
16603: LD_INT 90
16605: PUSH
16606: LD_INT 100
16608: PUSH
16609: LD_INT 110
16611: PUSH
16612: LD_INT 120
16614: PUSH
16615: LD_INT 130
16617: PUSH
16618: LD_INT 140
16620: PUSH
16621: LD_INT 150
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: PPUSH
16644: LD_INT 15
16646: PPUSH
16647: CALL_OW 12
16651: ARRAY
16652: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16653: LD_ADDR_VAR 0 4
16657: PUSH
16658: LD_INT 10
16660: PUSH
16661: LD_INT 20
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: LD_INT 40
16669: PUSH
16670: LD_INT 50
16672: PUSH
16673: LD_INT 60
16675: PUSH
16676: LD_INT 70
16678: PUSH
16679: LD_INT 80
16681: PUSH
16682: LD_INT 90
16684: PUSH
16685: LD_INT 100
16687: PUSH
16688: LD_INT 110
16690: PUSH
16691: LD_INT 120
16693: PUSH
16694: LD_INT 130
16696: PUSH
16697: LD_INT 140
16699: PUSH
16700: LD_INT 150
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: PPUSH
16723: LD_INT 15
16725: PPUSH
16726: CALL_OW 12
16730: ARRAY
16731: ST_TO_ADDR
// if ValidHex ( x , y ) then
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_VAR 0 4
16741: PPUSH
16742: CALL_OW 488
16746: IFFALSE 16769
// begin result := [ x , y ] ;
16748: LD_ADDR_VAR 0 1
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 4
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: ST_TO_ADDR
// break ;
16767: GO 16771
// end ; end ;
16769: GO 16571
16771: POP
16772: POP
// if result then
16773: LD_VAR 0 1
16777: IFFALSE 16837
// begin ToLua ( playSibBomb() ) ;
16779: LD_STRING playSibBomb()
16781: PPUSH
16782: CALL_OW 559
// wait ( 0 0$14 ) ;
16786: LD_INT 490
16788: PPUSH
16789: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16793: LD_VAR 0 1
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 2
16809: ARRAY
16810: PPUSH
16811: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16815: LD_VAR 0 1
16819: PUSH
16820: LD_INT 1
16822: ARRAY
16823: PPUSH
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: PPUSH
16833: CALL_OW 429
// end ; end ;
16837: LD_VAR 0 1
16841: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16842: LD_EXP 31
16846: PUSH
16847: LD_EXP 53
16851: AND
16852: IFFALSE 16864
16854: GO 16856
16856: DISABLE
// YouLost (  ) ;
16857: LD_STRING 
16859: PPUSH
16860: CALL_OW 104
16864: END
// every 0 0$1 trigger StreamModeActive and sFog do
16865: LD_EXP 31
16869: PUSH
16870: LD_EXP 52
16874: AND
16875: IFFALSE 16889
16877: GO 16879
16879: DISABLE
// FogOff ( your_side ) ;
16880: LD_OWVAR 2
16884: PPUSH
16885: CALL_OW 344
16889: END
// every 0 0$1 trigger StreamModeActive and sSun do
16890: LD_EXP 31
16894: PUSH
16895: LD_EXP 54
16899: AND
16900: IFFALSE 16928
16902: GO 16904
16904: DISABLE
// begin solar_recharge_percent := 0 ;
16905: LD_ADDR_OWVAR 79
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16913: LD_INT 10500
16915: PPUSH
16916: CALL_OW 67
// solar_recharge_percent := 100 ;
16920: LD_ADDR_OWVAR 79
16924: PUSH
16925: LD_INT 100
16927: ST_TO_ADDR
// end ;
16928: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16929: LD_EXP 31
16933: PUSH
16934: LD_EXP 55
16938: AND
16939: IFFALSE 17178
16941: GO 16943
16943: DISABLE
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
16948: PPUSH
// begin tmp := [ ] ;
16949: LD_ADDR_VAR 0 3
16953: PUSH
16954: EMPTY
16955: ST_TO_ADDR
// for i := 1 to 6 do
16956: LD_ADDR_VAR 0 1
16960: PUSH
16961: DOUBLE
16962: LD_INT 1
16964: DEC
16965: ST_TO_ADDR
16966: LD_INT 6
16968: PUSH
16969: FOR_TO
16970: IFFALSE 17075
// begin uc_nation := nation_nature ;
16972: LD_ADDR_OWVAR 21
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// uc_side := 0 ;
16980: LD_ADDR_OWVAR 20
16984: PUSH
16985: LD_INT 0
16987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16988: LD_ADDR_OWVAR 29
16992: PUSH
16993: LD_INT 12
16995: PUSH
16996: LD_INT 12
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// hc_agressivity := 20 ;
17003: LD_ADDR_OWVAR 35
17007: PUSH
17008: LD_INT 20
17010: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17011: LD_ADDR_OWVAR 28
17015: PUSH
17016: LD_INT 17
17018: ST_TO_ADDR
// hc_gallery :=  ;
17019: LD_ADDR_OWVAR 33
17023: PUSH
17024: LD_STRING 
17026: ST_TO_ADDR
// hc_name :=  ;
17027: LD_ADDR_OWVAR 26
17031: PUSH
17032: LD_STRING 
17034: ST_TO_ADDR
// un := CreateHuman ;
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: CALL_OW 44
17044: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17045: LD_VAR 0 2
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 51
// tmp := tmp ^ un ;
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_VAR 0 3
17066: PUSH
17067: LD_VAR 0 2
17071: ADD
17072: ST_TO_ADDR
// end ;
17073: GO 16969
17075: POP
17076: POP
// repeat wait ( 0 0$1 ) ;
17077: LD_INT 35
17079: PPUSH
17080: CALL_OW 67
// for un in tmp do
17084: LD_ADDR_VAR 0 2
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: FOR_IN
17095: IFFALSE 17169
// begin if IsDead ( un ) then
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 301
17106: IFFALSE 17126
// begin tmp := tmp diff un ;
17108: LD_ADDR_VAR 0 3
17112: PUSH
17113: LD_VAR 0 3
17117: PUSH
17118: LD_VAR 0 2
17122: DIFF
17123: ST_TO_ADDR
// continue ;
17124: GO 17094
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_INT 3
17133: PUSH
17134: LD_INT 22
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PPUSH
17148: CALL_OW 69
17152: PPUSH
17153: LD_VAR 0 2
17157: PPUSH
17158: CALL_OW 74
17162: PPUSH
17163: CALL_OW 115
// end ;
17167: GO 17094
17169: POP
17170: POP
// until not tmp ;
17171: LD_VAR 0 3
17175: NOT
17176: IFFALSE 17077
// end ;
17178: PPOPN 3
17180: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17181: LD_EXP 31
17185: PUSH
17186: LD_EXP 56
17190: AND
17191: IFFALSE 17245
17193: GO 17195
17195: DISABLE
// begin ToLua ( displayTroll(); ) ;
17196: LD_STRING displayTroll();
17198: PPUSH
17199: CALL_OW 559
// wait ( 3 3$00 ) ;
17203: LD_INT 6300
17205: PPUSH
17206: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17210: LD_STRING hideTroll();
17212: PPUSH
17213: CALL_OW 559
// wait ( 1 1$00 ) ;
17217: LD_INT 2100
17219: PPUSH
17220: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17224: LD_STRING displayTroll();
17226: PPUSH
17227: CALL_OW 559
// wait ( 1 1$00 ) ;
17231: LD_INT 2100
17233: PPUSH
17234: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17238: LD_STRING hideTroll();
17240: PPUSH
17241: CALL_OW 559
// end ;
17245: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17246: LD_EXP 31
17250: PUSH
17251: LD_EXP 57
17255: AND
17256: IFFALSE 17319
17258: GO 17260
17260: DISABLE
17261: LD_INT 0
17263: PPUSH
// begin p := 0 ;
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// repeat game_speed := 1 ;
17272: LD_ADDR_OWVAR 65
17276: PUSH
17277: LD_INT 1
17279: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17280: LD_INT 35
17282: PPUSH
17283: CALL_OW 67
// p := p + 1 ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_VAR 0 1
17296: PUSH
17297: LD_INT 1
17299: PLUS
17300: ST_TO_ADDR
// until p >= 60 ;
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 60
17308: GREATEREQUAL
17309: IFFALSE 17272
// game_speed := 4 ;
17311: LD_ADDR_OWVAR 65
17315: PUSH
17316: LD_INT 4
17318: ST_TO_ADDR
// end ;
17319: PPOPN 1
17321: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17322: LD_EXP 31
17326: PUSH
17327: LD_EXP 58
17331: AND
17332: IFFALSE 17478
17334: GO 17336
17336: DISABLE
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17341: LD_ADDR_VAR 0 1
17345: PUSH
17346: LD_INT 22
17348: PUSH
17349: LD_OWVAR 2
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 30
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 69
17394: ST_TO_ADDR
// if not depot then
17395: LD_VAR 0 1
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17478
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17404: LD_ADDR_VAR 0 2
17408: PUSH
17409: LD_VAR 0 1
17413: PUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: PPUSH
17428: CALL_OW 274
17432: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: LD_INT 0
17443: PPUSH
17444: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_INT 2
17455: PPUSH
17456: LD_INT 0
17458: PPUSH
17459: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17463: LD_VAR 0 2
17467: PPUSH
17468: LD_INT 3
17470: PPUSH
17471: LD_INT 0
17473: PPUSH
17474: CALL_OW 277
// end ;
17478: PPOPN 2
17480: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17481: LD_EXP 31
17485: PUSH
17486: LD_EXP 59
17490: AND
17491: IFFALSE 17588
17493: GO 17495
17495: DISABLE
17496: LD_INT 0
17498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_OWVAR 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: LD_INT 23
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 69
17552: ST_TO_ADDR
// if not tmp then
17553: LD_VAR 0 1
17557: NOT
17558: IFFALSE 17562
// exit ;
17560: GO 17588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17562: LD_VAR 0 1
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 12
17579: ARRAY
17580: PPUSH
17581: LD_INT 200
17583: PPUSH
17584: CALL_OW 234
// end ;
17588: PPOPN 1
17590: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17591: LD_EXP 31
17595: PUSH
17596: LD_EXP 60
17600: AND
17601: IFFALSE 17680
17603: GO 17605
17605: DISABLE
17606: LD_INT 0
17608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17609: LD_ADDR_VAR 0 1
17613: PUSH
17614: LD_INT 22
17616: PUSH
17617: LD_OWVAR 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 21
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: ST_TO_ADDR
// if not tmp then
17645: LD_VAR 0 1
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 17680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17654: LD_VAR 0 1
17658: PUSH
17659: LD_INT 1
17661: PPUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 12
17671: ARRAY
17672: PPUSH
17673: LD_INT 60
17675: PPUSH
17676: CALL_OW 234
// end ;
17680: PPOPN 1
17682: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17683: LD_EXP 31
17687: PUSH
17688: LD_EXP 61
17692: AND
17693: IFFALSE 17792
17695: GO 17697
17697: DISABLE
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
// begin enable ;
17702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17703: LD_ADDR_VAR 0 1
17707: PUSH
17708: LD_INT 22
17710: PUSH
17711: LD_OWVAR 2
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 61
17722: PUSH
17723: EMPTY
17724: LIST
17725: PUSH
17726: LD_INT 33
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 1
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17792
// for i in tmp do
17755: LD_ADDR_VAR 0 2
17759: PUSH
17760: LD_VAR 0 1
17764: PUSH
17765: FOR_IN
17766: IFFALSE 17790
// if IsControledBy ( i ) then
17768: LD_VAR 0 2
17772: PPUSH
17773: CALL_OW 312
17777: IFFALSE 17788
// ComUnlink ( i ) ;
17779: LD_VAR 0 2
17783: PPUSH
17784: CALL_OW 136
17788: GO 17765
17790: POP
17791: POP
// end ;
17792: PPOPN 2
17794: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17795: LD_EXP 31
17799: PUSH
17800: LD_EXP 62
17804: AND
17805: IFFALSE 17945
17807: GO 17809
17809: DISABLE
17810: LD_INT 0
17812: PPUSH
17813: PPUSH
// begin ToLua ( displayPowell(); ) ;
17814: LD_STRING displayPowell();
17816: PPUSH
17817: CALL_OW 559
// uc_side := 0 ;
17821: LD_ADDR_OWVAR 20
17825: PUSH
17826: LD_INT 0
17828: ST_TO_ADDR
// uc_nation := 2 ;
17829: LD_ADDR_OWVAR 21
17833: PUSH
17834: LD_INT 2
17836: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17837: LD_ADDR_OWVAR 37
17841: PUSH
17842: LD_INT 14
17844: ST_TO_ADDR
// vc_engine := engine_siberite ;
17845: LD_ADDR_OWVAR 39
17849: PUSH
17850: LD_INT 3
17852: ST_TO_ADDR
// vc_control := control_apeman ;
17853: LD_ADDR_OWVAR 38
17857: PUSH
17858: LD_INT 5
17860: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17861: LD_ADDR_OWVAR 40
17865: PUSH
17866: LD_INT 29
17868: ST_TO_ADDR
// un := CreateVehicle ;
17869: LD_ADDR_VAR 0 2
17873: PUSH
17874: CALL_OW 45
17878: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_INT 1
17886: PPUSH
17887: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17891: LD_INT 35
17893: PPUSH
17894: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17898: LD_VAR 0 2
17902: PPUSH
17903: LD_INT 22
17905: PUSH
17906: LD_OWVAR 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PPUSH
17915: CALL_OW 69
17919: PPUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: CALL_OW 74
17929: PPUSH
17930: CALL_OW 115
// until IsDead ( un ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: CALL_OW 301
17943: IFFALSE 17891
// end ;
17945: PPOPN 2
17947: END
// every 0 0$1 trigger StreamModeActive and sStu do
17948: LD_EXP 31
17952: PUSH
17953: LD_EXP 70
17957: AND
17958: IFFALSE 17974
17960: GO 17962
17962: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17963: LD_STRING displayStucuk();
17965: PPUSH
17966: CALL_OW 559
// ResetFog ;
17970: CALL_OW 335
// end ;
17974: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17975: LD_EXP 31
17979: PUSH
17980: LD_EXP 63
17984: AND
17985: IFFALSE 18126
17987: GO 17989
17989: DISABLE
17990: LD_INT 0
17992: PPUSH
17993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17994: LD_ADDR_VAR 0 2
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_OWVAR 2
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 21
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// if not tmp then
18030: LD_VAR 0 2
18034: NOT
18035: IFFALSE 18039
// exit ;
18037: GO 18126
// un := tmp [ rand ( 1 , tmp ) ] ;
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_VAR 0 2
18048: PUSH
18049: LD_INT 1
18051: PPUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: CALL_OW 12
18061: ARRAY
18062: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_INT 0
18070: PPUSH
18071: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18075: LD_VAR 0 1
18079: PPUSH
18080: LD_OWVAR 3
18084: PUSH
18085: LD_VAR 0 1
18089: DIFF
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 115
// wait ( 0 0$20 ) ;
18105: LD_INT 700
18107: PPUSH
18108: CALL_OW 67
// SetSide ( un , your_side ) ;
18112: LD_VAR 0 1
18116: PPUSH
18117: LD_OWVAR 2
18121: PPUSH
18122: CALL_OW 235
// end ;
18126: PPOPN 2
18128: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18129: LD_EXP 31
18133: PUSH
18134: LD_EXP 64
18138: AND
18139: IFFALSE 18245
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18147: LD_ADDR_VAR 0 1
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_OWVAR 2
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 30
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 30
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PPUSH
18196: CALL_OW 69
18200: ST_TO_ADDR
// if not depot then
18201: LD_VAR 0 1
18205: NOT
18206: IFFALSE 18210
// exit ;
18208: GO 18245
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18210: LD_VAR 0 1
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PPUSH
18219: CALL_OW 250
18223: PPUSH
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 1
18231: ARRAY
18232: PPUSH
18233: CALL_OW 251
18237: PPUSH
18238: LD_INT 70
18240: PPUSH
18241: CALL_OW 495
// end ;
18245: PPOPN 1
18247: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18248: LD_EXP 31
18252: PUSH
18253: LD_EXP 65
18257: AND
18258: IFFALSE 18469
18260: GO 18262
18262: DISABLE
18263: LD_INT 0
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18270: LD_ADDR_VAR 0 5
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_OWVAR 2
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 21
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: ST_TO_ADDR
// if not tmp then
18306: LD_VAR 0 5
18310: NOT
18311: IFFALSE 18315
// exit ;
18313: GO 18469
// for i in tmp do
18315: LD_ADDR_VAR 0 1
18319: PUSH
18320: LD_VAR 0 5
18324: PUSH
18325: FOR_IN
18326: IFFALSE 18467
// begin d := rand ( 0 , 5 ) ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: PPUSH
18336: LD_INT 5
18338: PPUSH
18339: CALL_OW 12
18343: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18344: LD_ADDR_VAR 0 2
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 250
18358: PPUSH
18359: LD_VAR 0 4
18363: PPUSH
18364: LD_INT 3
18366: PPUSH
18367: LD_INT 12
18369: PPUSH
18370: CALL_OW 12
18374: PPUSH
18375: CALL_OW 272
18379: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18380: LD_ADDR_VAR 0 3
18384: PUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 251
18394: PPUSH
18395: LD_VAR 0 4
18399: PPUSH
18400: LD_INT 3
18402: PPUSH
18403: LD_INT 12
18405: PPUSH
18406: CALL_OW 12
18410: PPUSH
18411: CALL_OW 273
18415: ST_TO_ADDR
// if ValidHex ( x , y ) then
18416: LD_VAR 0 2
18420: PPUSH
18421: LD_VAR 0 3
18425: PPUSH
18426: CALL_OW 488
18430: IFFALSE 18465
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18432: LD_VAR 0 1
18436: PPUSH
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_VAR 0 3
18446: PPUSH
18447: LD_INT 3
18449: PPUSH
18450: LD_INT 6
18452: PPUSH
18453: CALL_OW 12
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 483
// end ;
18465: GO 18325
18467: POP
18468: POP
// end ;
18469: PPOPN 5
18471: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18472: LD_EXP 31
18476: PUSH
18477: LD_EXP 66
18481: AND
18482: IFFALSE 18576
18484: GO 18486
18486: DISABLE
18487: LD_INT 0
18489: PPUSH
18490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_INT 22
18498: PUSH
18499: LD_OWVAR 2
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 32
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 21
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 69
18537: ST_TO_ADDR
// if not tmp then
18538: LD_VAR 0 2
18542: NOT
18543: IFFALSE 18547
// exit ;
18545: GO 18576
// for i in tmp do
18547: LD_ADDR_VAR 0 1
18551: PUSH
18552: LD_VAR 0 2
18556: PUSH
18557: FOR_IN
18558: IFFALSE 18574
// SetFuel ( i , 0 ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_INT 0
18567: PPUSH
18568: CALL_OW 240
18572: GO 18557
18574: POP
18575: POP
// end ;
18576: PPOPN 2
18578: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18579: LD_EXP 31
18583: PUSH
18584: LD_EXP 67
18588: AND
18589: IFFALSE 18655
18591: GO 18593
18593: DISABLE
18594: LD_INT 0
18596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 30
18616: PUSH
18617: LD_INT 29
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: ST_TO_ADDR
// if not tmp then
18633: LD_VAR 0 1
18637: NOT
18638: IFFALSE 18642
// exit ;
18640: GO 18655
// DestroyUnit ( tmp [ 1 ] ) ;
18642: LD_VAR 0 1
18646: PUSH
18647: LD_INT 1
18649: ARRAY
18650: PPUSH
18651: CALL_OW 65
// end ;
18655: PPOPN 1
18657: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18658: LD_EXP 31
18662: PUSH
18663: LD_EXP 69
18667: AND
18668: IFFALSE 18797
18670: GO 18672
18672: DISABLE
18673: LD_INT 0
18675: PPUSH
// begin uc_side := 0 ;
18676: LD_ADDR_OWVAR 20
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// uc_nation := nation_arabian ;
18684: LD_ADDR_OWVAR 21
18688: PUSH
18689: LD_INT 2
18691: ST_TO_ADDR
// hc_gallery :=  ;
18692: LD_ADDR_OWVAR 33
18696: PUSH
18697: LD_STRING 
18699: ST_TO_ADDR
// hc_name :=  ;
18700: LD_ADDR_OWVAR 26
18704: PUSH
18705: LD_STRING 
18707: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18708: LD_INT 1
18710: PPUSH
18711: LD_INT 11
18713: PPUSH
18714: LD_INT 10
18716: PPUSH
18717: CALL_OW 380
// un := CreateHuman ;
18721: LD_ADDR_VAR 0 1
18725: PUSH
18726: CALL_OW 44
18730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18731: LD_VAR 0 1
18735: PPUSH
18736: LD_INT 1
18738: PPUSH
18739: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18743: LD_INT 35
18745: PPUSH
18746: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18750: LD_VAR 0 1
18754: PPUSH
18755: LD_INT 22
18757: PUSH
18758: LD_OWVAR 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: CALL_OW 69
18771: PPUSH
18772: LD_VAR 0 1
18776: PPUSH
18777: CALL_OW 74
18781: PPUSH
18782: CALL_OW 115
// until IsDead ( un ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: CALL_OW 301
18795: IFFALSE 18743
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18800: LD_EXP 31
18804: PUSH
18805: LD_EXP 71
18809: AND
18810: IFFALSE 18822
18812: GO 18814
18814: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18815: LD_STRING earthquake(getX(game), 0, 32)
18817: PPUSH
18818: CALL_OW 559
18822: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18823: LD_EXP 31
18827: PUSH
18828: LD_EXP 72
18832: AND
18833: IFFALSE 18924
18835: GO 18837
18837: DISABLE
18838: LD_INT 0
18840: PPUSH
// begin enable ;
18841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18842: LD_ADDR_VAR 0 1
18846: PUSH
18847: LD_INT 22
18849: PUSH
18850: LD_OWVAR 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 21
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 33
18871: PUSH
18872: LD_INT 3
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: PPUSH
18884: CALL_OW 69
18888: ST_TO_ADDR
// if not tmp then
18889: LD_VAR 0 1
18893: NOT
18894: IFFALSE 18898
// exit ;
18896: GO 18924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18898: LD_VAR 0 1
18902: PUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_VAR 0 1
18910: PPUSH
18911: CALL_OW 12
18915: ARRAY
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 234
// end ;
18924: PPOPN 1
18926: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18927: LD_EXP 31
18931: PUSH
18932: LD_EXP 73
18936: AND
18937: IFFALSE 19078
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_OWVAR 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 25
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 69
18982: ST_TO_ADDR
// if not tmp then
18983: LD_VAR 0 3
18987: NOT
18988: IFFALSE 18992
// exit ;
18990: GO 19078
// un := tmp [ rand ( 1 , tmp ) ] ;
18992: LD_ADDR_VAR 0 2
18996: PUSH
18997: LD_VAR 0 3
19001: PUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_VAR 0 3
19009: PPUSH
19010: CALL_OW 12
19014: ARRAY
19015: ST_TO_ADDR
// if Crawls ( un ) then
19016: LD_VAR 0 2
19020: PPUSH
19021: CALL_OW 318
19025: IFFALSE 19036
// ComWalk ( un ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_INT 9
19043: PPUSH
19044: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19048: LD_INT 28
19050: PPUSH
19051: LD_OWVAR 2
19055: PPUSH
19056: LD_INT 2
19058: PPUSH
19059: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19063: LD_INT 29
19065: PPUSH
19066: LD_OWVAR 2
19070: PPUSH
19071: LD_INT 2
19073: PPUSH
19074: CALL_OW 322
// end ;
19078: PPOPN 3
19080: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19081: LD_EXP 31
19085: PUSH
19086: LD_EXP 74
19090: AND
19091: IFFALSE 19202
19093: GO 19095
19095: DISABLE
19096: LD_INT 0
19098: PPUSH
19099: PPUSH
19100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: ST_TO_ADDR
// if not tmp then
19137: LD_VAR 0 3
19141: NOT
19142: IFFALSE 19146
// exit ;
19144: GO 19202
// un := tmp [ rand ( 1 , tmp ) ] ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 1
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 12
19168: ARRAY
19169: ST_TO_ADDR
// if Crawls ( un ) then
19170: LD_VAR 0 2
19174: PPUSH
19175: CALL_OW 318
19179: IFFALSE 19190
// ComWalk ( un ) ;
19181: LD_VAR 0 2
19185: PPUSH
19186: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: LD_INT 8
19197: PPUSH
19198: CALL_OW 336
// end ;
19202: PPOPN 3
19204: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19205: LD_EXP 31
19209: PUSH
19210: LD_EXP 75
19214: AND
19215: IFFALSE 19359
19217: GO 19219
19219: DISABLE
19220: LD_INT 0
19222: PPUSH
19223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19224: LD_ADDR_VAR 0 2
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_OWVAR 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 21
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: LD_INT 34
19256: PUSH
19257: LD_INT 12
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 34
19266: PUSH
19267: LD_INT 51
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 34
19276: PUSH
19277: LD_INT 32
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: PPUSH
19295: CALL_OW 69
19299: ST_TO_ADDR
// if not tmp then
19300: LD_VAR 0 2
19304: NOT
19305: IFFALSE 19309
// exit ;
19307: GO 19359
// for i in tmp do
19309: LD_ADDR_VAR 0 1
19313: PUSH
19314: LD_VAR 0 2
19318: PUSH
19319: FOR_IN
19320: IFFALSE 19357
// if GetCargo ( i , mat_artifact ) = 0 then
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_INT 4
19329: PPUSH
19330: CALL_OW 289
19334: PUSH
19335: LD_INT 0
19337: EQUAL
19338: IFFALSE 19355
// SetCargo ( i , mat_siberit , 100 ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_INT 3
19347: PPUSH
19348: LD_INT 100
19350: PPUSH
19351: CALL_OW 290
19355: GO 19319
19357: POP
19358: POP
// end ;
19359: PPOPN 2
19361: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19362: LD_EXP 31
19366: PUSH
19367: LD_EXP 76
19371: AND
19372: IFFALSE 19555
19374: GO 19376
19376: DISABLE
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: ST_TO_ADDR
// if not tmp then
19403: LD_VAR 0 2
19407: NOT
19408: IFFALSE 19412
// exit ;
19410: GO 19555
// for i := 1 to 2 do
19412: LD_ADDR_VAR 0 1
19416: PUSH
19417: DOUBLE
19418: LD_INT 1
19420: DEC
19421: ST_TO_ADDR
19422: LD_INT 2
19424: PUSH
19425: FOR_TO
19426: IFFALSE 19553
// begin uc_side := your_side ;
19428: LD_ADDR_OWVAR 20
19432: PUSH
19433: LD_OWVAR 2
19437: ST_TO_ADDR
// uc_nation := nation_american ;
19438: LD_ADDR_OWVAR 21
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// vc_chassis := us_morphling ;
19446: LD_ADDR_OWVAR 37
19450: PUSH
19451: LD_INT 5
19453: ST_TO_ADDR
// vc_engine := engine_siberite ;
19454: LD_ADDR_OWVAR 39
19458: PUSH
19459: LD_INT 3
19461: ST_TO_ADDR
// vc_control := control_computer ;
19462: LD_ADDR_OWVAR 38
19466: PUSH
19467: LD_INT 3
19469: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19470: LD_ADDR_OWVAR 40
19474: PUSH
19475: LD_INT 10
19477: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19478: LD_VAR 0 2
19482: PUSH
19483: LD_INT 1
19485: ARRAY
19486: PPUSH
19487: CALL_OW 310
19491: NOT
19492: IFFALSE 19539
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19494: CALL_OW 45
19498: PPUSH
19499: LD_VAR 0 2
19503: PUSH
19504: LD_INT 1
19506: ARRAY
19507: PPUSH
19508: CALL_OW 250
19512: PPUSH
19513: LD_VAR 0 2
19517: PUSH
19518: LD_INT 1
19520: ARRAY
19521: PPUSH
19522: CALL_OW 251
19526: PPUSH
19527: LD_INT 12
19529: PPUSH
19530: LD_INT 1
19532: PPUSH
19533: CALL_OW 50
19537: GO 19551
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19539: CALL_OW 45
19543: PPUSH
19544: LD_INT 1
19546: PPUSH
19547: CALL_OW 51
// end ;
19551: GO 19425
19553: POP
19554: POP
// end ;
19555: PPOPN 2
19557: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19558: LD_EXP 31
19562: PUSH
19563: LD_EXP 77
19567: AND
19568: IFFALSE 19790
19570: GO 19572
19572: DISABLE
19573: LD_INT 0
19575: PPUSH
19576: PPUSH
19577: PPUSH
19578: PPUSH
19579: PPUSH
19580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19581: LD_ADDR_VAR 0 6
19585: PUSH
19586: LD_INT 22
19588: PUSH
19589: LD_OWVAR 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 21
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 3
19610: PUSH
19611: LD_INT 23
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: PPUSH
19630: CALL_OW 69
19634: ST_TO_ADDR
// if not tmp then
19635: LD_VAR 0 6
19639: NOT
19640: IFFALSE 19644
// exit ;
19642: GO 19790
// s1 := rand ( 1 , 4 ) ;
19644: LD_ADDR_VAR 0 2
19648: PUSH
19649: LD_INT 1
19651: PPUSH
19652: LD_INT 4
19654: PPUSH
19655: CALL_OW 12
19659: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: LD_VAR 0 6
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: PPUSH
19674: LD_VAR 0 2
19678: PPUSH
19679: CALL_OW 259
19683: ST_TO_ADDR
// if s1 = 1 then
19684: LD_VAR 0 2
19688: PUSH
19689: LD_INT 1
19691: EQUAL
19692: IFFALSE 19712
// s2 := rand ( 2 , 4 ) else
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: LD_INT 2
19701: PPUSH
19702: LD_INT 4
19704: PPUSH
19705: CALL_OW 12
19709: ST_TO_ADDR
19710: GO 19720
// s2 := 1 ;
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: LD_VAR 0 6
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: PPUSH
19734: LD_VAR 0 3
19738: PPUSH
19739: CALL_OW 259
19743: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19744: LD_VAR 0 6
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: PPUSH
19753: LD_VAR 0 2
19757: PPUSH
19758: LD_VAR 0 5
19762: PPUSH
19763: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19767: LD_VAR 0 6
19771: PUSH
19772: LD_INT 1
19774: ARRAY
19775: PPUSH
19776: LD_VAR 0 3
19780: PPUSH
19781: LD_VAR 0 4
19785: PPUSH
19786: CALL_OW 237
// end ;
19790: PPOPN 6
19792: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19793: LD_EXP 31
19797: PUSH
19798: LD_EXP 78
19802: AND
19803: IFFALSE 19882
19805: GO 19807
19807: DISABLE
19808: LD_INT 0
19810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19811: LD_ADDR_VAR 0 1
19815: PUSH
19816: LD_INT 22
19818: PUSH
19819: LD_OWVAR 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 3
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: ST_TO_ADDR
// if not tmp then
19847: LD_VAR 0 1
19851: NOT
19852: IFFALSE 19856
// exit ;
19854: GO 19882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19856: LD_VAR 0 1
19860: PUSH
19861: LD_INT 1
19863: PPUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 12
19873: ARRAY
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: CALL_OW 234
// end ;
19882: PPOPN 1
19884: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19885: LD_EXP 31
19889: PUSH
19890: LD_EXP 79
19894: AND
19895: IFFALSE 20007
19897: GO 19899
19899: DISABLE
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19904: LD_ADDR_VAR 0 2
19908: PUSH
19909: LD_INT 22
19911: PUSH
19912: LD_OWVAR 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 27
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 30
19936: PUSH
19937: LD_INT 26
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 30
19946: PUSH
19947: LD_INT 28
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL_OW 69
19968: ST_TO_ADDR
// if not tmp then
19969: LD_VAR 0 2
19973: NOT
19974: IFFALSE 19978
// exit ;
19976: GO 20007
// for i in tmp do
19978: LD_ADDR_VAR 0 1
19982: PUSH
19983: LD_VAR 0 2
19987: PUSH
19988: FOR_IN
19989: IFFALSE 20005
// SetLives ( i , 1 ) ;
19991: LD_VAR 0 1
19995: PPUSH
19996: LD_INT 1
19998: PPUSH
19999: CALL_OW 234
20003: GO 19988
20005: POP
20006: POP
// end ;
20007: PPOPN 2
20009: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20010: LD_EXP 31
20014: PUSH
20015: LD_EXP 80
20019: AND
20020: IFFALSE 20307
20022: GO 20024
20024: DISABLE
20025: LD_INT 0
20027: PPUSH
20028: PPUSH
20029: PPUSH
// begin i := rand ( 1 , 7 ) ;
20030: LD_ADDR_VAR 0 1
20034: PUSH
20035: LD_INT 1
20037: PPUSH
20038: LD_INT 7
20040: PPUSH
20041: CALL_OW 12
20045: ST_TO_ADDR
// case i of 1 :
20046: LD_VAR 0 1
20050: PUSH
20051: LD_INT 1
20053: DOUBLE
20054: EQUAL
20055: IFTRUE 20059
20057: GO 20069
20059: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20060: LD_STRING earthquake(getX(game), 0, 32)
20062: PPUSH
20063: CALL_OW 559
20067: GO 20307
20069: LD_INT 2
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20091
20077: POP
// begin ToLua ( displayStucuk(); ) ;
20078: LD_STRING displayStucuk();
20080: PPUSH
20081: CALL_OW 559
// ResetFog ;
20085: CALL_OW 335
// end ; 3 :
20089: GO 20307
20091: LD_INT 3
20093: DOUBLE
20094: EQUAL
20095: IFTRUE 20099
20097: GO 20203
20099: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20100: LD_ADDR_VAR 0 2
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_OWVAR 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 25
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 69
20135: ST_TO_ADDR
// if not tmp then
20136: LD_VAR 0 2
20140: NOT
20141: IFFALSE 20145
// exit ;
20143: GO 20307
// un := tmp [ rand ( 1 , tmp ) ] ;
20145: LD_ADDR_VAR 0 3
20149: PUSH
20150: LD_VAR 0 2
20154: PUSH
20155: LD_INT 1
20157: PPUSH
20158: LD_VAR 0 2
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: ST_TO_ADDR
// if Crawls ( un ) then
20169: LD_VAR 0 3
20173: PPUSH
20174: CALL_OW 318
20178: IFFALSE 20189
// ComWalk ( un ) ;
20180: LD_VAR 0 3
20184: PPUSH
20185: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20189: LD_VAR 0 3
20193: PPUSH
20194: LD_INT 8
20196: PPUSH
20197: CALL_OW 336
// end ; 4 :
20201: GO 20307
20203: LD_INT 4
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20285
20211: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_INT 22
20219: PUSH
20220: LD_OWVAR 2
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 30
20231: PUSH
20232: LD_INT 29
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PPUSH
20243: CALL_OW 69
20247: ST_TO_ADDR
// if not tmp then
20248: LD_VAR 0 2
20252: NOT
20253: IFFALSE 20257
// exit ;
20255: GO 20307
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20257: LD_VAR 0 2
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PPUSH
20266: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20270: LD_VAR 0 2
20274: PUSH
20275: LD_INT 1
20277: ARRAY
20278: PPUSH
20279: CALL_OW 65
// end ; 5 .. 7 :
20283: GO 20307
20285: LD_INT 5
20287: DOUBLE
20288: GREATEREQUAL
20289: IFFALSE 20297
20291: LD_INT 7
20293: DOUBLE
20294: LESSEQUAL
20295: IFTRUE 20299
20297: GO 20306
20299: POP
// StreamSibBomb ; end ;
20300: CALL 16544 0 0
20304: GO 20307
20306: POP
// end ;
20307: PPOPN 3
20309: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20310: LD_EXP 31
20314: PUSH
20315: LD_EXP 81
20319: AND
20320: IFFALSE 20476
20322: GO 20324
20324: DISABLE
20325: LD_INT 0
20327: PPUSH
20328: PPUSH
20329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20330: LD_ADDR_VAR 0 2
20334: PUSH
20335: LD_INT 81
20337: PUSH
20338: LD_OWVAR 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 21
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PPUSH
20379: CALL_OW 69
20383: ST_TO_ADDR
// if not tmp then
20384: LD_VAR 0 2
20388: NOT
20389: IFFALSE 20393
// exit ;
20391: GO 20476
// p := 0 ;
20393: LD_ADDR_VAR 0 3
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20401: LD_INT 35
20403: PPUSH
20404: CALL_OW 67
// p := p + 1 ;
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 1
20420: PLUS
20421: ST_TO_ADDR
// for i in tmp do
20422: LD_ADDR_VAR 0 1
20426: PUSH
20427: LD_VAR 0 2
20431: PUSH
20432: FOR_IN
20433: IFFALSE 20464
// if GetLives ( i ) < 1000 then
20435: LD_VAR 0 1
20439: PPUSH
20440: CALL_OW 256
20444: PUSH
20445: LD_INT 1000
20447: LESS
20448: IFFALSE 20462
// SetLives ( i , 1000 ) ;
20450: LD_VAR 0 1
20454: PPUSH
20455: LD_INT 1000
20457: PPUSH
20458: CALL_OW 234
20462: GO 20432
20464: POP
20465: POP
// until p > 20 ;
20466: LD_VAR 0 3
20470: PUSH
20471: LD_INT 20
20473: GREATER
20474: IFFALSE 20401
// end ;
20476: PPOPN 3
20478: END
// every 0 0$1 trigger StreamModeActive and sTime do
20479: LD_EXP 31
20483: PUSH
20484: LD_EXP 82
20488: AND
20489: IFFALSE 20524
20491: GO 20493
20493: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20494: LD_INT 28
20496: PPUSH
20497: LD_OWVAR 2
20501: PPUSH
20502: LD_INT 2
20504: PPUSH
20505: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20509: LD_INT 30
20511: PPUSH
20512: LD_OWVAR 2
20516: PPUSH
20517: LD_INT 2
20519: PPUSH
20520: CALL_OW 322
// end ;
20524: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20525: LD_EXP 31
20529: PUSH
20530: LD_EXP 83
20534: AND
20535: IFFALSE 20656
20537: GO 20539
20539: DISABLE
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_OWVAR 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 21
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: LD_INT 23
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: ST_TO_ADDR
// if not tmp then
20598: LD_VAR 0 2
20602: NOT
20603: IFFALSE 20607
// exit ;
20605: GO 20656
// for i in tmp do
20607: LD_ADDR_VAR 0 1
20611: PUSH
20612: LD_VAR 0 2
20616: PUSH
20617: FOR_IN
20618: IFFALSE 20654
// begin if Crawls ( i ) then
20620: LD_VAR 0 1
20624: PPUSH
20625: CALL_OW 318
20629: IFFALSE 20640
// ComWalk ( i ) ;
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 138
// SetClass ( i , 2 ) ;
20640: LD_VAR 0 1
20644: PPUSH
20645: LD_INT 2
20647: PPUSH
20648: CALL_OW 336
// end ;
20652: GO 20617
20654: POP
20655: POP
// end ;
20656: PPOPN 2
20658: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20659: LD_EXP 31
20663: PUSH
20664: LD_EXP 84
20668: AND
20669: IFFALSE 20957
20671: GO 20673
20673: DISABLE
20674: LD_INT 0
20676: PPUSH
20677: PPUSH
20678: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20679: LD_OWVAR 2
20683: PPUSH
20684: LD_INT 9
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: LD_INT 1
20692: PPUSH
20693: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20697: LD_INT 9
20699: PPUSH
20700: LD_OWVAR 2
20704: PPUSH
20705: CALL_OW 343
// uc_side := 9 ;
20709: LD_ADDR_OWVAR 20
20713: PUSH
20714: LD_INT 9
20716: ST_TO_ADDR
// uc_nation := 2 ;
20717: LD_ADDR_OWVAR 21
20721: PUSH
20722: LD_INT 2
20724: ST_TO_ADDR
// hc_name := Dark Warrior ;
20725: LD_ADDR_OWVAR 26
20729: PUSH
20730: LD_STRING Dark Warrior
20732: ST_TO_ADDR
// hc_gallery :=  ;
20733: LD_ADDR_OWVAR 33
20737: PUSH
20738: LD_STRING 
20740: ST_TO_ADDR
// hc_noskilllimit := true ;
20741: LD_ADDR_OWVAR 76
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20749: LD_ADDR_OWVAR 31
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 30
20759: PUSH
20760: LD_INT 30
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: ST_TO_ADDR
// un := CreateHuman ;
20772: LD_ADDR_VAR 0 3
20776: PUSH
20777: CALL_OW 44
20781: ST_TO_ADDR
// hc_noskilllimit := false ;
20782: LD_ADDR_OWVAR 76
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20790: LD_VAR 0 3
20794: PPUSH
20795: LD_INT 1
20797: PPUSH
20798: CALL_OW 51
// ToLua ( playRanger() ) ;
20802: LD_STRING playRanger()
20804: PPUSH
20805: CALL_OW 559
// p := 0 ;
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20817: LD_INT 35
20819: PPUSH
20820: CALL_OW 67
// p := p + 1 ;
20824: LD_ADDR_VAR 0 2
20828: PUSH
20829: LD_VAR 0 2
20833: PUSH
20834: LD_INT 1
20836: PLUS
20837: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20838: LD_VAR 0 3
20842: PPUSH
20843: CALL_OW 256
20847: PUSH
20848: LD_INT 1000
20850: LESS
20851: IFFALSE 20865
// SetLives ( un , 1000 ) ;
20853: LD_VAR 0 3
20857: PPUSH
20858: LD_INT 1000
20860: PPUSH
20861: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_INT 81
20872: PUSH
20873: LD_OWVAR 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 91
20884: PUSH
20885: LD_VAR 0 3
20889: PUSH
20890: LD_INT 30
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: CALL_OW 69
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: CALL_OW 74
20916: PPUSH
20917: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20921: LD_VAR 0 2
20925: PUSH
20926: LD_INT 80
20928: GREATER
20929: PUSH
20930: LD_VAR 0 3
20934: PPUSH
20935: CALL_OW 301
20939: OR
20940: IFFALSE 20817
// if un then
20942: LD_VAR 0 3
20946: IFFALSE 20957
// RemoveUnit ( un ) ;
20948: LD_VAR 0 3
20952: PPUSH
20953: CALL_OW 64
// end ;
20957: PPOPN 3
20959: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20960: LD_EXP 85
20964: IFFALSE 21080
20966: GO 20968
20968: DISABLE
20969: LD_INT 0
20971: PPUSH
20972: PPUSH
20973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20974: LD_ADDR_VAR 0 2
20978: PUSH
20979: LD_INT 81
20981: PUSH
20982: LD_OWVAR 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 21
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21010: LD_STRING playComputer()
21012: PPUSH
21013: CALL_OW 559
// if not tmp then
21017: LD_VAR 0 2
21021: NOT
21022: IFFALSE 21026
// exit ;
21024: GO 21080
// for i in tmp do
21026: LD_ADDR_VAR 0 1
21030: PUSH
21031: LD_VAR 0 2
21035: PUSH
21036: FOR_IN
21037: IFFALSE 21078
// for j := 1 to 4 do
21039: LD_ADDR_VAR 0 3
21043: PUSH
21044: DOUBLE
21045: LD_INT 1
21047: DEC
21048: ST_TO_ADDR
21049: LD_INT 4
21051: PUSH
21052: FOR_TO
21053: IFFALSE 21074
// SetSkill ( i , j , 10 ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: LD_INT 10
21067: PPUSH
21068: CALL_OW 237
21072: GO 21052
21074: POP
21075: POP
21076: GO 21036
21078: POP
21079: POP
// end ;
21080: PPOPN 3
21082: END
// every 0 0$1 trigger s30 do var i , tmp ;
21083: LD_EXP 86
21087: IFFALSE 21156
21089: GO 21091
21091: DISABLE
21092: LD_INT 0
21094: PPUSH
21095: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_OWVAR 2
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PPUSH
21113: CALL_OW 69
21117: ST_TO_ADDR
// if not tmp then
21118: LD_VAR 0 2
21122: NOT
21123: IFFALSE 21127
// exit ;
21125: GO 21156
// for i in tmp do
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_VAR 0 2
21136: PUSH
21137: FOR_IN
21138: IFFALSE 21154
// SetLives ( i , 300 ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: LD_INT 300
21147: PPUSH
21148: CALL_OW 234
21152: GO 21137
21154: POP
21155: POP
// end ;
21156: PPOPN 2
21158: END
// every 0 0$1 trigger s60 do var i , tmp ;
21159: LD_EXP 87
21163: IFFALSE 21232
21165: GO 21167
21167: DISABLE
21168: LD_INT 0
21170: PPUSH
21171: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21172: LD_ADDR_VAR 0 2
21176: PUSH
21177: LD_INT 22
21179: PUSH
21180: LD_OWVAR 2
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PPUSH
21189: CALL_OW 69
21193: ST_TO_ADDR
// if not tmp then
21194: LD_VAR 0 2
21198: NOT
21199: IFFALSE 21203
// exit ;
21201: GO 21232
// for i in tmp do
21203: LD_ADDR_VAR 0 1
21207: PUSH
21208: LD_VAR 0 2
21212: PUSH
21213: FOR_IN
21214: IFFALSE 21230
// SetLives ( i , 600 ) ;
21216: LD_VAR 0 1
21220: PPUSH
21221: LD_INT 600
21223: PPUSH
21224: CALL_OW 234
21228: GO 21213
21230: POP
21231: POP
// end ;
21232: PPOPN 2
21234: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21235: LD_INT 0
21237: PPUSH
// case cmd of 301 :
21238: LD_VAR 0 1
21242: PUSH
21243: LD_INT 301
21245: DOUBLE
21246: EQUAL
21247: IFTRUE 21251
21249: GO 21283
21251: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21252: LD_VAR 0 6
21256: PPUSH
21257: LD_VAR 0 7
21261: PPUSH
21262: LD_VAR 0 8
21266: PPUSH
21267: LD_VAR 0 4
21271: PPUSH
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL 22484 0 5
21281: GO 21404
21283: LD_INT 302
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21328
21291: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21292: LD_VAR 0 6
21296: PPUSH
21297: LD_VAR 0 7
21301: PPUSH
21302: LD_VAR 0 8
21306: PPUSH
21307: LD_VAR 0 9
21311: PPUSH
21312: LD_VAR 0 4
21316: PPUSH
21317: LD_VAR 0 5
21321: PPUSH
21322: CALL 22575 0 6
21326: GO 21404
21328: LD_INT 303
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21373
21336: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21337: LD_VAR 0 6
21341: PPUSH
21342: LD_VAR 0 7
21346: PPUSH
21347: LD_VAR 0 8
21351: PPUSH
21352: LD_VAR 0 9
21356: PPUSH
21357: LD_VAR 0 4
21361: PPUSH
21362: LD_VAR 0 5
21366: PPUSH
21367: CALL 21409 0 6
21371: GO 21404
21373: LD_INT 304
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21403
21381: POP
// hHackTeleport ( unit , x , y ) ; end ;
21382: LD_VAR 0 2
21386: PPUSH
21387: LD_VAR 0 4
21391: PPUSH
21392: LD_VAR 0 5
21396: PPUSH
21397: CALL 23168 0 3
21401: GO 21404
21403: POP
// end ;
21404: LD_VAR 0 12
21408: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21409: LD_INT 0
21411: PPUSH
21412: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21413: LD_VAR 0 1
21417: PUSH
21418: LD_INT 1
21420: LESS
21421: PUSH
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 3
21429: GREATER
21430: OR
21431: PUSH
21432: LD_VAR 0 5
21436: PPUSH
21437: LD_VAR 0 6
21441: PPUSH
21442: CALL_OW 428
21446: OR
21447: IFFALSE 21451
// exit ;
21449: GO 22171
// uc_side := your_side ;
21451: LD_ADDR_OWVAR 20
21455: PUSH
21456: LD_OWVAR 2
21460: ST_TO_ADDR
// uc_nation := nation ;
21461: LD_ADDR_OWVAR 21
21465: PUSH
21466: LD_VAR 0 1
21470: ST_TO_ADDR
// bc_level = 1 ;
21471: LD_ADDR_OWVAR 43
21475: PUSH
21476: LD_INT 1
21478: ST_TO_ADDR
// case btype of 1 :
21479: LD_VAR 0 2
21483: PUSH
21484: LD_INT 1
21486: DOUBLE
21487: EQUAL
21488: IFTRUE 21492
21490: GO 21503
21492: POP
// bc_type := b_depot ; 2 :
21493: LD_ADDR_OWVAR 42
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
21501: GO 22115
21503: LD_INT 2
21505: DOUBLE
21506: EQUAL
21507: IFTRUE 21511
21509: GO 21522
21511: POP
// bc_type := b_warehouse ; 3 :
21512: LD_ADDR_OWVAR 42
21516: PUSH
21517: LD_INT 1
21519: ST_TO_ADDR
21520: GO 22115
21522: LD_INT 3
21524: DOUBLE
21525: EQUAL
21526: IFTRUE 21530
21528: GO 21541
21530: POP
// bc_type := b_lab ; 4 .. 9 :
21531: LD_ADDR_OWVAR 42
21535: PUSH
21536: LD_INT 6
21538: ST_TO_ADDR
21539: GO 22115
21541: LD_INT 4
21543: DOUBLE
21544: GREATEREQUAL
21545: IFFALSE 21553
21547: LD_INT 9
21549: DOUBLE
21550: LESSEQUAL
21551: IFTRUE 21555
21553: GO 21607
21555: POP
// begin bc_type := b_lab_half ;
21556: LD_ADDR_OWVAR 42
21560: PUSH
21561: LD_INT 7
21563: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21564: LD_ADDR_OWVAR 44
21568: PUSH
21569: LD_INT 10
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 12
21577: PUSH
21578: LD_INT 15
21580: PUSH
21581: LD_INT 14
21583: PUSH
21584: LD_INT 13
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PUSH
21595: LD_VAR 0 2
21599: PUSH
21600: LD_INT 3
21602: MINUS
21603: ARRAY
21604: ST_TO_ADDR
// end ; 10 .. 13 :
21605: GO 22115
21607: LD_INT 10
21609: DOUBLE
21610: GREATEREQUAL
21611: IFFALSE 21619
21613: LD_INT 13
21615: DOUBLE
21616: LESSEQUAL
21617: IFTRUE 21621
21619: GO 21698
21621: POP
// begin bc_type := b_lab_full ;
21622: LD_ADDR_OWVAR 42
21626: PUSH
21627: LD_INT 8
21629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21630: LD_ADDR_OWVAR 44
21634: PUSH
21635: LD_INT 10
21637: PUSH
21638: LD_INT 12
21640: PUSH
21641: LD_INT 14
21643: PUSH
21644: LD_INT 13
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: LD_VAR 0 2
21657: PUSH
21658: LD_INT 9
21660: MINUS
21661: ARRAY
21662: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21663: LD_ADDR_OWVAR 45
21667: PUSH
21668: LD_INT 11
21670: PUSH
21671: LD_INT 15
21673: PUSH
21674: LD_INT 12
21676: PUSH
21677: LD_INT 15
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: LD_VAR 0 2
21690: PUSH
21691: LD_INT 9
21693: MINUS
21694: ARRAY
21695: ST_TO_ADDR
// end ; 14 :
21696: GO 22115
21698: LD_INT 14
21700: DOUBLE
21701: EQUAL
21702: IFTRUE 21706
21704: GO 21717
21706: POP
// bc_type := b_workshop ; 15 :
21707: LD_ADDR_OWVAR 42
21711: PUSH
21712: LD_INT 2
21714: ST_TO_ADDR
21715: GO 22115
21717: LD_INT 15
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21736
21725: POP
// bc_type := b_factory ; 16 :
21726: LD_ADDR_OWVAR 42
21730: PUSH
21731: LD_INT 3
21733: ST_TO_ADDR
21734: GO 22115
21736: LD_INT 16
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21755
21744: POP
// bc_type := b_ext_gun ; 17 :
21745: LD_ADDR_OWVAR 42
21749: PUSH
21750: LD_INT 17
21752: ST_TO_ADDR
21753: GO 22115
21755: LD_INT 17
21757: DOUBLE
21758: EQUAL
21759: IFTRUE 21763
21761: GO 21791
21763: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21764: LD_ADDR_OWVAR 42
21768: PUSH
21769: LD_INT 19
21771: PUSH
21772: LD_INT 23
21774: PUSH
21775: LD_INT 19
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: PUSH
21783: LD_VAR 0 1
21787: ARRAY
21788: ST_TO_ADDR
21789: GO 22115
21791: LD_INT 18
21793: DOUBLE
21794: EQUAL
21795: IFTRUE 21799
21797: GO 21810
21799: POP
// bc_type := b_ext_radar ; 19 :
21800: LD_ADDR_OWVAR 42
21804: PUSH
21805: LD_INT 20
21807: ST_TO_ADDR
21808: GO 22115
21810: LD_INT 19
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21829
21818: POP
// bc_type := b_ext_radio ; 20 :
21819: LD_ADDR_OWVAR 42
21823: PUSH
21824: LD_INT 22
21826: ST_TO_ADDR
21827: GO 22115
21829: LD_INT 20
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21848
21837: POP
// bc_type := b_ext_siberium ; 21 :
21838: LD_ADDR_OWVAR 42
21842: PUSH
21843: LD_INT 21
21845: ST_TO_ADDR
21846: GO 22115
21848: LD_INT 21
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21867
21856: POP
// bc_type := b_ext_computer ; 22 :
21857: LD_ADDR_OWVAR 42
21861: PUSH
21862: LD_INT 24
21864: ST_TO_ADDR
21865: GO 22115
21867: LD_INT 22
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21886
21875: POP
// bc_type := b_ext_track ; 23 :
21876: LD_ADDR_OWVAR 42
21880: PUSH
21881: LD_INT 16
21883: ST_TO_ADDR
21884: GO 22115
21886: LD_INT 23
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 21905
21894: POP
// bc_type := b_ext_laser ; 24 :
21895: LD_ADDR_OWVAR 42
21899: PUSH
21900: LD_INT 25
21902: ST_TO_ADDR
21903: GO 22115
21905: LD_INT 24
21907: DOUBLE
21908: EQUAL
21909: IFTRUE 21913
21911: GO 21924
21913: POP
// bc_type := b_control_tower ; 25 :
21914: LD_ADDR_OWVAR 42
21918: PUSH
21919: LD_INT 36
21921: ST_TO_ADDR
21922: GO 22115
21924: LD_INT 25
21926: DOUBLE
21927: EQUAL
21928: IFTRUE 21932
21930: GO 21943
21932: POP
// bc_type := b_breastwork ; 26 :
21933: LD_ADDR_OWVAR 42
21937: PUSH
21938: LD_INT 31
21940: ST_TO_ADDR
21941: GO 22115
21943: LD_INT 26
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 21962
21951: POP
// bc_type := b_bunker ; 27 :
21952: LD_ADDR_OWVAR 42
21956: PUSH
21957: LD_INT 32
21959: ST_TO_ADDR
21960: GO 22115
21962: LD_INT 27
21964: DOUBLE
21965: EQUAL
21966: IFTRUE 21970
21968: GO 21981
21970: POP
// bc_type := b_turret ; 28 :
21971: LD_ADDR_OWVAR 42
21975: PUSH
21976: LD_INT 33
21978: ST_TO_ADDR
21979: GO 22115
21981: LD_INT 28
21983: DOUBLE
21984: EQUAL
21985: IFTRUE 21989
21987: GO 22000
21989: POP
// bc_type := b_armoury ; 29 :
21990: LD_ADDR_OWVAR 42
21994: PUSH
21995: LD_INT 4
21997: ST_TO_ADDR
21998: GO 22115
22000: LD_INT 29
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22019
22008: POP
// bc_type := b_barracks ; 30 :
22009: LD_ADDR_OWVAR 42
22013: PUSH
22014: LD_INT 5
22016: ST_TO_ADDR
22017: GO 22115
22019: LD_INT 30
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22038
22027: POP
// bc_type := b_solar_power ; 31 :
22028: LD_ADDR_OWVAR 42
22032: PUSH
22033: LD_INT 27
22035: ST_TO_ADDR
22036: GO 22115
22038: LD_INT 31
22040: DOUBLE
22041: EQUAL
22042: IFTRUE 22046
22044: GO 22057
22046: POP
// bc_type := b_oil_power ; 32 :
22047: LD_ADDR_OWVAR 42
22051: PUSH
22052: LD_INT 26
22054: ST_TO_ADDR
22055: GO 22115
22057: LD_INT 32
22059: DOUBLE
22060: EQUAL
22061: IFTRUE 22065
22063: GO 22076
22065: POP
// bc_type := b_siberite_power ; 33 :
22066: LD_ADDR_OWVAR 42
22070: PUSH
22071: LD_INT 28
22073: ST_TO_ADDR
22074: GO 22115
22076: LD_INT 33
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22095
22084: POP
// bc_type := b_oil_mine ; 34 :
22085: LD_ADDR_OWVAR 42
22089: PUSH
22090: LD_INT 29
22092: ST_TO_ADDR
22093: GO 22115
22095: LD_INT 34
22097: DOUBLE
22098: EQUAL
22099: IFTRUE 22103
22101: GO 22114
22103: POP
// bc_type := b_siberite_mine ; end ;
22104: LD_ADDR_OWVAR 42
22108: PUSH
22109: LD_INT 30
22111: ST_TO_ADDR
22112: GO 22115
22114: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22115: LD_ADDR_VAR 0 8
22119: PUSH
22120: LD_VAR 0 5
22124: PPUSH
22125: LD_VAR 0 6
22129: PPUSH
22130: LD_VAR 0 3
22134: PPUSH
22135: CALL_OW 47
22139: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22140: LD_OWVAR 42
22144: PUSH
22145: LD_INT 32
22147: PUSH
22148: LD_INT 33
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: IN
22155: IFFALSE 22171
// PlaceWeaponTurret ( b , weapon ) ;
22157: LD_VAR 0 8
22161: PPUSH
22162: LD_VAR 0 4
22166: PPUSH
22167: CALL_OW 431
// end ;
22171: LD_VAR 0 7
22175: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22176: LD_INT 0
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22182: LD_ADDR_VAR 0 4
22186: PUSH
22187: LD_INT 22
22189: PUSH
22190: LD_OWVAR 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 2
22201: PUSH
22202: LD_INT 30
22204: PUSH
22205: LD_INT 0
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 30
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PPUSH
22231: CALL_OW 69
22235: ST_TO_ADDR
// if not tmp then
22236: LD_VAR 0 4
22240: NOT
22241: IFFALSE 22245
// exit ;
22243: GO 22304
// for i in tmp do
22245: LD_ADDR_VAR 0 2
22249: PUSH
22250: LD_VAR 0 4
22254: PUSH
22255: FOR_IN
22256: IFFALSE 22302
// for j = 1 to 3 do
22258: LD_ADDR_VAR 0 3
22262: PUSH
22263: DOUBLE
22264: LD_INT 1
22266: DEC
22267: ST_TO_ADDR
22268: LD_INT 3
22270: PUSH
22271: FOR_TO
22272: IFFALSE 22298
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22274: LD_VAR 0 2
22278: PPUSH
22279: CALL_OW 274
22283: PPUSH
22284: LD_VAR 0 3
22288: PPUSH
22289: LD_INT 99999
22291: PPUSH
22292: CALL_OW 277
22296: GO 22271
22298: POP
22299: POP
22300: GO 22255
22302: POP
22303: POP
// end ;
22304: LD_VAR 0 1
22308: RET
// export function hHackSetLevel10 ; var i , j ; begin
22309: LD_INT 0
22311: PPUSH
22312: PPUSH
22313: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22314: LD_ADDR_VAR 0 2
22318: PUSH
22319: LD_INT 21
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 69
22333: PUSH
22334: FOR_IN
22335: IFFALSE 22387
// if IsSelected ( i ) then
22337: LD_VAR 0 2
22341: PPUSH
22342: CALL_OW 306
22346: IFFALSE 22385
// begin for j := 1 to 4 do
22348: LD_ADDR_VAR 0 3
22352: PUSH
22353: DOUBLE
22354: LD_INT 1
22356: DEC
22357: ST_TO_ADDR
22358: LD_INT 4
22360: PUSH
22361: FOR_TO
22362: IFFALSE 22383
// SetSkill ( i , j , 10 ) ;
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: LD_INT 10
22376: PPUSH
22377: CALL_OW 237
22381: GO 22361
22383: POP
22384: POP
// end ;
22385: GO 22334
22387: POP
22388: POP
// end ;
22389: LD_VAR 0 1
22393: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22394: LD_INT 0
22396: PPUSH
22397: PPUSH
22398: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22399: LD_ADDR_VAR 0 2
22403: PUSH
22404: LD_INT 22
22406: PUSH
22407: LD_OWVAR 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 21
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PPUSH
22430: CALL_OW 69
22434: PUSH
22435: FOR_IN
22436: IFFALSE 22477
// begin for j := 1 to 4 do
22438: LD_ADDR_VAR 0 3
22442: PUSH
22443: DOUBLE
22444: LD_INT 1
22446: DEC
22447: ST_TO_ADDR
22448: LD_INT 4
22450: PUSH
22451: FOR_TO
22452: IFFALSE 22473
// SetSkill ( i , j , 10 ) ;
22454: LD_VAR 0 2
22458: PPUSH
22459: LD_VAR 0 3
22463: PPUSH
22464: LD_INT 10
22466: PPUSH
22467: CALL_OW 237
22471: GO 22451
22473: POP
22474: POP
// end ;
22475: GO 22435
22477: POP
22478: POP
// end ;
22479: LD_VAR 0 1
22483: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22484: LD_INT 0
22486: PPUSH
// uc_side := your_side ;
22487: LD_ADDR_OWVAR 20
22491: PUSH
22492: LD_OWVAR 2
22496: ST_TO_ADDR
// uc_nation := nation ;
22497: LD_ADDR_OWVAR 21
22501: PUSH
22502: LD_VAR 0 1
22506: ST_TO_ADDR
// InitHc ;
22507: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22511: LD_INT 0
22513: PPUSH
22514: LD_VAR 0 2
22518: PPUSH
22519: LD_VAR 0 3
22523: PPUSH
22524: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22528: LD_VAR 0 4
22532: PPUSH
22533: LD_VAR 0 5
22537: PPUSH
22538: CALL_OW 428
22542: PUSH
22543: LD_INT 0
22545: EQUAL
22546: IFFALSE 22570
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22548: CALL_OW 44
22552: PPUSH
22553: LD_VAR 0 4
22557: PPUSH
22558: LD_VAR 0 5
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL_OW 48
// end ;
22570: LD_VAR 0 6
22574: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22575: LD_INT 0
22577: PPUSH
22578: PPUSH
// uc_side := your_side ;
22579: LD_ADDR_OWVAR 20
22583: PUSH
22584: LD_OWVAR 2
22588: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22589: LD_VAR 0 1
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 3
22602: PUSH
22603: LD_INT 4
22605: PUSH
22606: LD_INT 5
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: IN
22616: IFFALSE 22628
// uc_nation := nation_american else
22618: LD_ADDR_OWVAR 21
22622: PUSH
22623: LD_INT 1
22625: ST_TO_ADDR
22626: GO 22671
// if chassis in [ 11 , 12 , 13 , 14 ] then
22628: LD_VAR 0 1
22632: PUSH
22633: LD_INT 11
22635: PUSH
22636: LD_INT 12
22638: PUSH
22639: LD_INT 13
22641: PUSH
22642: LD_INT 14
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: IN
22651: IFFALSE 22663
// uc_nation := nation_arabian else
22653: LD_ADDR_OWVAR 21
22657: PUSH
22658: LD_INT 2
22660: ST_TO_ADDR
22661: GO 22671
// uc_nation := nation_russian ;
22663: LD_ADDR_OWVAR 21
22667: PUSH
22668: LD_INT 3
22670: ST_TO_ADDR
// vc_chassis := chassis ;
22671: LD_ADDR_OWVAR 37
22675: PUSH
22676: LD_VAR 0 1
22680: ST_TO_ADDR
// vc_engine := engine ;
22681: LD_ADDR_OWVAR 39
22685: PUSH
22686: LD_VAR 0 2
22690: ST_TO_ADDR
// vc_control := control ;
22691: LD_ADDR_OWVAR 38
22695: PUSH
22696: LD_VAR 0 3
22700: ST_TO_ADDR
// vc_weapon := weapon ;
22701: LD_ADDR_OWVAR 40
22705: PUSH
22706: LD_VAR 0 4
22710: ST_TO_ADDR
// un := CreateVehicle ;
22711: LD_ADDR_VAR 0 8
22715: PUSH
22716: CALL_OW 45
22720: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22721: LD_VAR 0 8
22725: PPUSH
22726: LD_INT 0
22728: PPUSH
22729: LD_INT 5
22731: PPUSH
22732: CALL_OW 12
22736: PPUSH
22737: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22741: LD_VAR 0 8
22745: PPUSH
22746: LD_VAR 0 5
22750: PPUSH
22751: LD_VAR 0 6
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 48
// end ;
22763: LD_VAR 0 7
22767: RET
// export hInvincible ; every 1 do
22768: GO 22770
22770: DISABLE
// hInvincible := [ ] ;
22771: LD_ADDR_EXP 88
22775: PUSH
22776: EMPTY
22777: ST_TO_ADDR
22778: END
// every 10 do var i ;
22779: GO 22781
22781: DISABLE
22782: LD_INT 0
22784: PPUSH
// begin enable ;
22785: ENABLE
// if not hInvincible then
22786: LD_EXP 88
22790: NOT
22791: IFFALSE 22795
// exit ;
22793: GO 22839
// for i in hInvincible do
22795: LD_ADDR_VAR 0 1
22799: PUSH
22800: LD_EXP 88
22804: PUSH
22805: FOR_IN
22806: IFFALSE 22837
// if GetLives ( i ) < 1000 then
22808: LD_VAR 0 1
22812: PPUSH
22813: CALL_OW 256
22817: PUSH
22818: LD_INT 1000
22820: LESS
22821: IFFALSE 22835
// SetLives ( i , 1000 ) ;
22823: LD_VAR 0 1
22827: PPUSH
22828: LD_INT 1000
22830: PPUSH
22831: CALL_OW 234
22835: GO 22805
22837: POP
22838: POP
// end ;
22839: PPOPN 1
22841: END
// export function hHackInvincible ; var i ; begin
22842: LD_INT 0
22844: PPUSH
22845: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22846: LD_ADDR_VAR 0 2
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 21
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: LIST
22878: PPUSH
22879: CALL_OW 69
22883: PUSH
22884: FOR_IN
22885: IFFALSE 22946
// if IsSelected ( i ) then
22887: LD_VAR 0 2
22891: PPUSH
22892: CALL_OW 306
22896: IFFALSE 22944
// begin if i in hInvincible then
22898: LD_VAR 0 2
22902: PUSH
22903: LD_EXP 88
22907: IN
22908: IFFALSE 22928
// hInvincible := hInvincible diff i else
22910: LD_ADDR_EXP 88
22914: PUSH
22915: LD_EXP 88
22919: PUSH
22920: LD_VAR 0 2
22924: DIFF
22925: ST_TO_ADDR
22926: GO 22944
// hInvincible := hInvincible union i ;
22928: LD_ADDR_EXP 88
22932: PUSH
22933: LD_EXP 88
22937: PUSH
22938: LD_VAR 0 2
22942: UNION
22943: ST_TO_ADDR
// end ;
22944: GO 22884
22946: POP
22947: POP
// end ;
22948: LD_VAR 0 1
22952: RET
// export function hHackInvisible ; var i , j ; begin
22953: LD_INT 0
22955: PPUSH
22956: PPUSH
22957: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22958: LD_ADDR_VAR 0 2
22962: PUSH
22963: LD_INT 21
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 69
22977: PUSH
22978: FOR_IN
22979: IFFALSE 23003
// if IsSelected ( i ) then
22981: LD_VAR 0 2
22985: PPUSH
22986: CALL_OW 306
22990: IFFALSE 23001
// ComForceInvisible ( i ) ;
22992: LD_VAR 0 2
22996: PPUSH
22997: CALL_OW 496
23001: GO 22978
23003: POP
23004: POP
// end ;
23005: LD_VAR 0 1
23009: RET
// export function hHackChangeYourSide ; begin
23010: LD_INT 0
23012: PPUSH
// if your_side = 8 then
23013: LD_OWVAR 2
23017: PUSH
23018: LD_INT 8
23020: EQUAL
23021: IFFALSE 23033
// your_side := 0 else
23023: LD_ADDR_OWVAR 2
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
23031: GO 23047
// your_side := your_side + 1 ;
23033: LD_ADDR_OWVAR 2
23037: PUSH
23038: LD_OWVAR 2
23042: PUSH
23043: LD_INT 1
23045: PLUS
23046: ST_TO_ADDR
// end ;
23047: LD_VAR 0 1
23051: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23052: LD_INT 0
23054: PPUSH
23055: PPUSH
23056: PPUSH
// for i in all_units do
23057: LD_ADDR_VAR 0 2
23061: PUSH
23062: LD_OWVAR 3
23066: PUSH
23067: FOR_IN
23068: IFFALSE 23146
// if IsSelected ( i ) then
23070: LD_VAR 0 2
23074: PPUSH
23075: CALL_OW 306
23079: IFFALSE 23144
// begin j := GetSide ( i ) ;
23081: LD_ADDR_VAR 0 3
23085: PUSH
23086: LD_VAR 0 2
23090: PPUSH
23091: CALL_OW 255
23095: ST_TO_ADDR
// if j = 8 then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_INT 8
23103: EQUAL
23104: IFFALSE 23116
// j := 0 else
23106: LD_ADDR_VAR 0 3
23110: PUSH
23111: LD_INT 0
23113: ST_TO_ADDR
23114: GO 23130
// j := j + 1 ;
23116: LD_ADDR_VAR 0 3
23120: PUSH
23121: LD_VAR 0 3
23125: PUSH
23126: LD_INT 1
23128: PLUS
23129: ST_TO_ADDR
// SetSide ( i , j ) ;
23130: LD_VAR 0 2
23134: PPUSH
23135: LD_VAR 0 3
23139: PPUSH
23140: CALL_OW 235
// end ;
23144: GO 23067
23146: POP
23147: POP
// end ;
23148: LD_VAR 0 1
23152: RET
// export function hHackFog ; begin
23153: LD_INT 0
23155: PPUSH
// FogOff ( true ) ;
23156: LD_INT 1
23158: PPUSH
23159: CALL_OW 344
// end ;
23163: LD_VAR 0 1
23167: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23168: LD_INT 0
23170: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_VAR 0 2
23180: PPUSH
23181: LD_VAR 0 3
23185: PPUSH
23186: LD_INT 1
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 483
// CenterOnXY ( x , y ) ;
23196: LD_VAR 0 2
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: CALL_OW 84
// end ;
23210: LD_VAR 0 4
23214: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23219: LD_VAR 0 1
23223: NOT
23224: PUSH
23225: LD_VAR 0 2
23229: PPUSH
23230: LD_VAR 0 3
23234: PPUSH
23235: CALL_OW 488
23239: NOT
23240: OR
23241: PUSH
23242: LD_VAR 0 1
23246: PPUSH
23247: CALL_OW 266
23251: PUSH
23252: LD_INT 3
23254: NONEQUAL
23255: PUSH
23256: LD_VAR 0 1
23260: PPUSH
23261: CALL_OW 247
23265: PUSH
23266: LD_INT 1
23268: EQUAL
23269: NOT
23270: AND
23271: OR
23272: IFFALSE 23276
// exit ;
23274: GO 23425
// if GetType ( factory ) = unit_human then
23276: LD_VAR 0 1
23280: PPUSH
23281: CALL_OW 247
23285: PUSH
23286: LD_INT 1
23288: EQUAL
23289: IFFALSE 23306
// factory := IsInUnit ( factory ) ;
23291: LD_ADDR_VAR 0 1
23295: PUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 310
23305: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23306: LD_VAR 0 1
23310: PPUSH
23311: CALL_OW 266
23315: PUSH
23316: LD_INT 3
23318: NONEQUAL
23319: IFFALSE 23323
// exit ;
23321: GO 23425
// if HexInfo ( x , y ) = factory then
23323: LD_VAR 0 2
23327: PPUSH
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 428
23337: PUSH
23338: LD_VAR 0 1
23342: EQUAL
23343: IFFALSE 23370
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23345: LD_ADDR_EXP 89
23349: PUSH
23350: LD_EXP 89
23354: PPUSH
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_INT 0
23362: PPUSH
23363: CALL_OW 1
23367: ST_TO_ADDR
23368: GO 23421
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23370: LD_ADDR_EXP 89
23374: PUSH
23375: LD_EXP 89
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: LD_VAR 0 1
23389: PPUSH
23390: CALL_OW 255
23394: PUSH
23395: LD_VAR 0 1
23399: PUSH
23400: LD_VAR 0 2
23404: PUSH
23405: LD_VAR 0 3
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: PPUSH
23416: CALL_OW 1
23420: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23421: CALL 23430 0 0
// end ;
23425: LD_VAR 0 4
23429: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23435: LD_STRING resetFactoryWaypoint();
23437: PPUSH
23438: CALL_OW 559
// if factoryWaypoints then
23442: LD_EXP 89
23446: IFFALSE 23572
// begin list := PrepareArray ( factoryWaypoints ) ;
23448: LD_ADDR_VAR 0 3
23452: PUSH
23453: LD_EXP 89
23457: PPUSH
23458: CALL 70041 0 1
23462: ST_TO_ADDR
// for i := 1 to list do
23463: LD_ADDR_VAR 0 2
23467: PUSH
23468: DOUBLE
23469: LD_INT 1
23471: DEC
23472: ST_TO_ADDR
23473: LD_VAR 0 3
23477: PUSH
23478: FOR_TO
23479: IFFALSE 23570
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23481: LD_STRING setFactoryWaypointXY(
23483: PUSH
23484: LD_VAR 0 3
23488: PUSH
23489: LD_VAR 0 2
23493: ARRAY
23494: PUSH
23495: LD_INT 1
23497: ARRAY
23498: STR
23499: PUSH
23500: LD_STRING ,
23502: STR
23503: PUSH
23504: LD_VAR 0 3
23508: PUSH
23509: LD_VAR 0 2
23513: ARRAY
23514: PUSH
23515: LD_INT 2
23517: ARRAY
23518: STR
23519: PUSH
23520: LD_STRING ,
23522: STR
23523: PUSH
23524: LD_VAR 0 3
23528: PUSH
23529: LD_VAR 0 2
23533: ARRAY
23534: PUSH
23535: LD_INT 3
23537: ARRAY
23538: STR
23539: PUSH
23540: LD_STRING ,
23542: STR
23543: PUSH
23544: LD_VAR 0 3
23548: PUSH
23549: LD_VAR 0 2
23553: ARRAY
23554: PUSH
23555: LD_INT 4
23557: ARRAY
23558: STR
23559: PUSH
23560: LD_STRING )
23562: STR
23563: PPUSH
23564: CALL_OW 559
23568: GO 23478
23570: POP
23571: POP
// end ; end ;
23572: LD_VAR 0 1
23576: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23577: LD_INT 0
23579: PPUSH
// if HexInfo ( x , y ) = warehouse then
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: CALL_OW 428
23594: PUSH
23595: LD_VAR 0 1
23599: EQUAL
23600: IFFALSE 23627
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23602: LD_ADDR_EXP 90
23606: PUSH
23607: LD_EXP 90
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 0
23619: PPUSH
23620: CALL_OW 1
23624: ST_TO_ADDR
23625: GO 23678
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23627: LD_ADDR_EXP 90
23631: PUSH
23632: LD_EXP 90
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 255
23651: PUSH
23652: LD_VAR 0 1
23656: PUSH
23657: LD_VAR 0 2
23661: PUSH
23662: LD_VAR 0 3
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: PPUSH
23673: CALL_OW 1
23677: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23678: CALL 23687 0 0
// end ;
23682: LD_VAR 0 4
23686: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23687: LD_INT 0
23689: PPUSH
23690: PPUSH
23691: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23692: LD_STRING resetWarehouseGatheringPoints();
23694: PPUSH
23695: CALL_OW 559
// if warehouseGatheringPoints then
23699: LD_EXP 90
23703: IFFALSE 23829
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_EXP 90
23714: PPUSH
23715: CALL 70041 0 1
23719: ST_TO_ADDR
// for i := 1 to list do
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: DOUBLE
23726: LD_INT 1
23728: DEC
23729: ST_TO_ADDR
23730: LD_VAR 0 3
23734: PUSH
23735: FOR_TO
23736: IFFALSE 23827
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23738: LD_STRING setWarehouseGatheringPointXY(
23740: PUSH
23741: LD_VAR 0 3
23745: PUSH
23746: LD_VAR 0 2
23750: ARRAY
23751: PUSH
23752: LD_INT 1
23754: ARRAY
23755: STR
23756: PUSH
23757: LD_STRING ,
23759: STR
23760: PUSH
23761: LD_VAR 0 3
23765: PUSH
23766: LD_VAR 0 2
23770: ARRAY
23771: PUSH
23772: LD_INT 2
23774: ARRAY
23775: STR
23776: PUSH
23777: LD_STRING ,
23779: STR
23780: PUSH
23781: LD_VAR 0 3
23785: PUSH
23786: LD_VAR 0 2
23790: ARRAY
23791: PUSH
23792: LD_INT 3
23794: ARRAY
23795: STR
23796: PUSH
23797: LD_STRING ,
23799: STR
23800: PUSH
23801: LD_VAR 0 3
23805: PUSH
23806: LD_VAR 0 2
23810: ARRAY
23811: PUSH
23812: LD_INT 4
23814: ARRAY
23815: STR
23816: PUSH
23817: LD_STRING )
23819: STR
23820: PPUSH
23821: CALL_OW 559
23825: GO 23735
23827: POP
23828: POP
// end ; end ;
23829: LD_VAR 0 1
23833: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23834: LD_EXP 90
23838: IFFALSE 24523
23840: GO 23842
23842: DISABLE
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
23847: PPUSH
23848: PPUSH
23849: PPUSH
23850: PPUSH
23851: PPUSH
23852: PPUSH
23853: PPUSH
// begin enable ;
23854: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_EXP 90
23864: PPUSH
23865: CALL 70041 0 1
23869: ST_TO_ADDR
// if not list then
23870: LD_VAR 0 3
23874: NOT
23875: IFFALSE 23879
// exit ;
23877: GO 24523
// for i := 1 to list do
23879: LD_ADDR_VAR 0 1
23883: PUSH
23884: DOUBLE
23885: LD_INT 1
23887: DEC
23888: ST_TO_ADDR
23889: LD_VAR 0 3
23893: PUSH
23894: FOR_TO
23895: IFFALSE 24521
// begin depot := list [ i ] [ 2 ] ;
23897: LD_ADDR_VAR 0 8
23901: PUSH
23902: LD_VAR 0 3
23906: PUSH
23907: LD_VAR 0 1
23911: ARRAY
23912: PUSH
23913: LD_INT 2
23915: ARRAY
23916: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23917: LD_ADDR_VAR 0 5
23921: PUSH
23922: LD_VAR 0 3
23926: PUSH
23927: LD_VAR 0 1
23931: ARRAY
23932: PUSH
23933: LD_INT 1
23935: ARRAY
23936: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23937: LD_VAR 0 8
23941: PPUSH
23942: CALL_OW 301
23946: PUSH
23947: LD_VAR 0 5
23951: PUSH
23952: LD_VAR 0 8
23956: PPUSH
23957: CALL_OW 255
23961: NONEQUAL
23962: OR
23963: IFFALSE 23992
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23965: LD_ADDR_EXP 90
23969: PUSH
23970: LD_EXP 90
23974: PPUSH
23975: LD_VAR 0 8
23979: PPUSH
23980: LD_INT 0
23982: PPUSH
23983: CALL_OW 1
23987: ST_TO_ADDR
// exit ;
23988: POP
23989: POP
23990: GO 24523
// end ; x := list [ i ] [ 3 ] ;
23992: LD_ADDR_VAR 0 6
23996: PUSH
23997: LD_VAR 0 3
24001: PUSH
24002: LD_VAR 0 1
24006: ARRAY
24007: PUSH
24008: LD_INT 3
24010: ARRAY
24011: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24012: LD_ADDR_VAR 0 7
24016: PUSH
24017: LD_VAR 0 3
24021: PUSH
24022: LD_VAR 0 1
24026: ARRAY
24027: PUSH
24028: LD_INT 4
24030: ARRAY
24031: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24032: LD_ADDR_VAR 0 9
24036: PUSH
24037: LD_VAR 0 6
24041: PPUSH
24042: LD_VAR 0 7
24046: PPUSH
24047: LD_INT 16
24049: PPUSH
24050: CALL 68629 0 3
24054: ST_TO_ADDR
// if not cratesNearbyPoint then
24055: LD_VAR 0 9
24059: NOT
24060: IFFALSE 24066
// exit ;
24062: POP
24063: POP
24064: GO 24523
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24066: LD_ADDR_VAR 0 4
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_VAR 0 5
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 3
24085: PUSH
24086: LD_INT 60
24088: PUSH
24089: EMPTY
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 91
24098: PUSH
24099: LD_VAR 0 8
24103: PUSH
24104: LD_INT 6
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 25
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 25
24127: PUSH
24128: LD_INT 16
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: PPUSH
24146: CALL_OW 69
24150: PUSH
24151: LD_VAR 0 8
24155: PPUSH
24156: CALL_OW 313
24160: PPUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 60
24166: PUSH
24167: EMPTY
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 25
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 25
24189: PUSH
24190: LD_INT 16
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 72
24210: UNION
24211: ST_TO_ADDR
// if tmp then
24212: LD_VAR 0 4
24216: IFFALSE 24296
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24218: LD_ADDR_VAR 0 4
24222: PUSH
24223: LD_VAR 0 4
24227: PPUSH
24228: LD_INT 3
24230: PPUSH
24231: CALL 66598 0 2
24235: ST_TO_ADDR
// for j in tmp do
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_VAR 0 4
24245: PUSH
24246: FOR_IN
24247: IFFALSE 24290
// begin if IsInUnit ( j ) then
24249: LD_VAR 0 2
24253: PPUSH
24254: CALL_OW 310
24258: IFFALSE 24269
// ComExit ( j ) ;
24260: LD_VAR 0 2
24264: PPUSH
24265: CALL 66681 0 1
// AddComCollect ( j , x , y ) ;
24269: LD_VAR 0 2
24273: PPUSH
24274: LD_VAR 0 6
24278: PPUSH
24279: LD_VAR 0 7
24283: PPUSH
24284: CALL_OW 177
// end ;
24288: GO 24246
24290: POP
24291: POP
// exit ;
24292: POP
24293: POP
24294: GO 24523
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_VAR 0 5
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 91
24315: PUSH
24316: LD_VAR 0 8
24320: PUSH
24321: LD_INT 8
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 34
24334: PUSH
24335: LD_INT 12
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 34
24344: PUSH
24345: LD_INT 51
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 34
24354: PUSH
24355: LD_INT 32
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 34
24364: PUSH
24365: LD_INT 89
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: PPUSH
24384: CALL_OW 69
24388: ST_TO_ADDR
// if tmp then
24389: LD_VAR 0 4
24393: IFFALSE 24519
// begin for j in tmp do
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_VAR 0 4
24404: PUSH
24405: FOR_IN
24406: IFFALSE 24517
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24408: LD_VAR 0 2
24412: PPUSH
24413: CALL_OW 262
24417: PUSH
24418: LD_INT 3
24420: EQUAL
24421: PUSH
24422: LD_VAR 0 2
24426: PPUSH
24427: CALL_OW 261
24431: PUSH
24432: LD_INT 20
24434: GREATER
24435: OR
24436: PUSH
24437: LD_VAR 0 2
24441: PPUSH
24442: CALL_OW 314
24446: NOT
24447: AND
24448: PUSH
24449: LD_VAR 0 2
24453: PPUSH
24454: CALL_OW 263
24458: PUSH
24459: LD_INT 1
24461: NONEQUAL
24462: PUSH
24463: LD_VAR 0 2
24467: PPUSH
24468: CALL_OW 311
24472: OR
24473: AND
24474: IFFALSE 24515
// begin ComCollect ( j , x , y ) ;
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_VAR 0 6
24485: PPUSH
24486: LD_VAR 0 7
24490: PPUSH
24491: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24495: LD_VAR 0 2
24499: PPUSH
24500: LD_VAR 0 8
24504: PPUSH
24505: CALL_OW 172
// exit ;
24509: POP
24510: POP
24511: POP
24512: POP
24513: GO 24523
// end ;
24515: GO 24405
24517: POP
24518: POP
// end ; end ;
24519: GO 23894
24521: POP
24522: POP
// end ; end_of_file
24523: PPOPN 9
24525: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24526: LD_INT 0
24528: PPUSH
24529: PPUSH
24530: PPUSH
24531: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 264
24541: PUSH
24542: LD_INT 91
24544: EQUAL
24545: IFFALSE 24617
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24547: LD_INT 68
24549: PPUSH
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 255
24559: PPUSH
24560: CALL_OW 321
24564: PUSH
24565: LD_INT 2
24567: EQUAL
24568: IFFALSE 24580
// eff := 70 else
24570: LD_ADDR_VAR 0 4
24574: PUSH
24575: LD_INT 70
24577: ST_TO_ADDR
24578: GO 24588
// eff := 30 ;
24580: LD_ADDR_VAR 0 4
24584: PUSH
24585: LD_INT 30
24587: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 250
24597: PPUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 251
24607: PPUSH
24608: LD_VAR 0 4
24612: PPUSH
24613: CALL_OW 495
// end ; end ;
24617: LD_VAR 0 2
24621: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24622: LD_INT 0
24624: PPUSH
// end ;
24625: LD_VAR 0 4
24629: RET
// export function SOS_Command ( cmd ) ; begin
24630: LD_INT 0
24632: PPUSH
// end ;
24633: LD_VAR 0 2
24637: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24638: LD_INT 0
24640: PPUSH
// end ;
24641: LD_VAR 0 6
24645: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24646: LD_INT 0
24648: PPUSH
24649: PPUSH
// if not vehicle or not factory then
24650: LD_VAR 0 1
24654: NOT
24655: PUSH
24656: LD_VAR 0 2
24660: NOT
24661: OR
24662: IFFALSE 24666
// exit ;
24664: GO 24897
// if factoryWaypoints >= factory then
24666: LD_EXP 89
24670: PUSH
24671: LD_VAR 0 2
24675: GREATEREQUAL
24676: IFFALSE 24897
// if factoryWaypoints [ factory ] then
24678: LD_EXP 89
24682: PUSH
24683: LD_VAR 0 2
24687: ARRAY
24688: IFFALSE 24897
// begin if GetControl ( vehicle ) = control_manual then
24690: LD_VAR 0 1
24694: PPUSH
24695: CALL_OW 263
24699: PUSH
24700: LD_INT 1
24702: EQUAL
24703: IFFALSE 24784
// begin driver := IsDrivenBy ( vehicle ) ;
24705: LD_ADDR_VAR 0 4
24709: PUSH
24710: LD_VAR 0 1
24714: PPUSH
24715: CALL_OW 311
24719: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24720: LD_VAR 0 4
24724: PPUSH
24725: LD_EXP 89
24729: PUSH
24730: LD_VAR 0 2
24734: ARRAY
24735: PUSH
24736: LD_INT 3
24738: ARRAY
24739: PPUSH
24740: LD_EXP 89
24744: PUSH
24745: LD_VAR 0 2
24749: ARRAY
24750: PUSH
24751: LD_INT 4
24753: ARRAY
24754: PPUSH
24755: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24759: LD_VAR 0 4
24763: PPUSH
24764: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24768: LD_VAR 0 4
24772: PPUSH
24773: LD_VAR 0 2
24777: PPUSH
24778: CALL_OW 180
// end else
24782: GO 24897
// if GetControl ( vehicle ) = control_remote then
24784: LD_VAR 0 1
24788: PPUSH
24789: CALL_OW 263
24793: PUSH
24794: LD_INT 2
24796: EQUAL
24797: IFFALSE 24858
// begin wait ( 0 0$2 ) ;
24799: LD_INT 70
24801: PPUSH
24802: CALL_OW 67
// if Connect ( vehicle ) then
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL 36921 0 1
24815: IFFALSE 24856
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24817: LD_VAR 0 1
24821: PPUSH
24822: LD_EXP 89
24826: PUSH
24827: LD_VAR 0 2
24831: ARRAY
24832: PUSH
24833: LD_INT 3
24835: ARRAY
24836: PPUSH
24837: LD_EXP 89
24841: PUSH
24842: LD_VAR 0 2
24846: ARRAY
24847: PUSH
24848: LD_INT 4
24850: ARRAY
24851: PPUSH
24852: CALL_OW 171
// end else
24856: GO 24897
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24858: LD_VAR 0 1
24862: PPUSH
24863: LD_EXP 89
24867: PUSH
24868: LD_VAR 0 2
24872: ARRAY
24873: PUSH
24874: LD_INT 3
24876: ARRAY
24877: PPUSH
24878: LD_EXP 89
24882: PUSH
24883: LD_VAR 0 2
24887: ARRAY
24888: PUSH
24889: LD_INT 4
24891: ARRAY
24892: PPUSH
24893: CALL_OW 171
// end ; end ;
24897: LD_VAR 0 3
24901: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24902: LD_INT 0
24904: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24905: LD_VAR 0 1
24909: PUSH
24910: LD_INT 250
24912: EQUAL
24913: PUSH
24914: LD_VAR 0 2
24918: PPUSH
24919: CALL_OW 264
24923: PUSH
24924: LD_INT 81
24926: EQUAL
24927: AND
24928: IFFALSE 24949
// MinerPlaceMine ( unit , x , y ) ;
24930: LD_VAR 0 2
24934: PPUSH
24935: LD_VAR 0 4
24939: PPUSH
24940: LD_VAR 0 5
24944: PPUSH
24945: CALL 27334 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24949: LD_VAR 0 1
24953: PUSH
24954: LD_INT 251
24956: EQUAL
24957: PUSH
24958: LD_VAR 0 2
24962: PPUSH
24963: CALL_OW 264
24967: PUSH
24968: LD_INT 81
24970: EQUAL
24971: AND
24972: IFFALSE 24993
// MinerDetonateMine ( unit , x , y ) ;
24974: LD_VAR 0 2
24978: PPUSH
24979: LD_VAR 0 4
24983: PPUSH
24984: LD_VAR 0 5
24988: PPUSH
24989: CALL 27609 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24993: LD_VAR 0 1
24997: PUSH
24998: LD_INT 252
25000: EQUAL
25001: PUSH
25002: LD_VAR 0 2
25006: PPUSH
25007: CALL_OW 264
25011: PUSH
25012: LD_INT 81
25014: EQUAL
25015: AND
25016: IFFALSE 25037
// MinerCreateMinefield ( unit , x , y ) ;
25018: LD_VAR 0 2
25022: PPUSH
25023: LD_VAR 0 4
25027: PPUSH
25028: LD_VAR 0 5
25032: PPUSH
25033: CALL 28026 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25037: LD_VAR 0 1
25041: PUSH
25042: LD_INT 253
25044: EQUAL
25045: PUSH
25046: LD_VAR 0 2
25050: PPUSH
25051: CALL_OW 257
25055: PUSH
25056: LD_INT 5
25058: EQUAL
25059: AND
25060: IFFALSE 25081
// ComBinocular ( unit , x , y ) ;
25062: LD_VAR 0 2
25066: PPUSH
25067: LD_VAR 0 4
25071: PPUSH
25072: LD_VAR 0 5
25076: PPUSH
25077: CALL 28395 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25081: LD_VAR 0 1
25085: PUSH
25086: LD_INT 254
25088: EQUAL
25089: PUSH
25090: LD_VAR 0 2
25094: PPUSH
25095: CALL_OW 264
25099: PUSH
25100: LD_INT 99
25102: EQUAL
25103: AND
25104: PUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: CALL_OW 263
25114: PUSH
25115: LD_INT 3
25117: EQUAL
25118: AND
25119: IFFALSE 25135
// HackDestroyVehicle ( unit , selectedUnit ) ;
25121: LD_VAR 0 2
25125: PPUSH
25126: LD_VAR 0 3
25130: PPUSH
25131: CALL 26698 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25135: LD_VAR 0 1
25139: PUSH
25140: LD_INT 255
25142: EQUAL
25143: PUSH
25144: LD_VAR 0 2
25148: PPUSH
25149: CALL_OW 264
25153: PUSH
25154: LD_INT 14
25156: PUSH
25157: LD_INT 53
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: IN
25164: AND
25165: PUSH
25166: LD_VAR 0 4
25170: PPUSH
25171: LD_VAR 0 5
25175: PPUSH
25176: CALL_OW 488
25180: AND
25181: IFFALSE 25205
// CutTreeXYR ( unit , x , y , 12 ) ;
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_VAR 0 4
25192: PPUSH
25193: LD_VAR 0 5
25197: PPUSH
25198: LD_INT 12
25200: PPUSH
25201: CALL 25268 0 4
// if cmd = 256 then
25205: LD_VAR 0 1
25209: PUSH
25210: LD_INT 256
25212: EQUAL
25213: IFFALSE 25234
// SetFactoryWaypoint ( unit , x , y ) ;
25215: LD_VAR 0 2
25219: PPUSH
25220: LD_VAR 0 4
25224: PPUSH
25225: LD_VAR 0 5
25229: PPUSH
25230: CALL 23215 0 3
// if cmd = 257 then
25234: LD_VAR 0 1
25238: PUSH
25239: LD_INT 257
25241: EQUAL
25242: IFFALSE 25263
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_VAR 0 4
25253: PPUSH
25254: LD_VAR 0 5
25258: PPUSH
25259: CALL 23577 0 3
// end ;
25263: LD_VAR 0 6
25267: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25279: LD_VAR 0 1
25283: NOT
25284: PUSH
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_VAR 0 3
25294: PPUSH
25295: CALL_OW 488
25299: NOT
25300: OR
25301: PUSH
25302: LD_VAR 0 4
25306: NOT
25307: OR
25308: IFFALSE 25312
// exit ;
25310: GO 25652
// list := [ ] ;
25312: LD_ADDR_VAR 0 13
25316: PUSH
25317: EMPTY
25318: ST_TO_ADDR
// if x - r < 0 then
25319: LD_VAR 0 2
25323: PUSH
25324: LD_VAR 0 4
25328: MINUS
25329: PUSH
25330: LD_INT 0
25332: LESS
25333: IFFALSE 25345
// min_x := 0 else
25335: LD_ADDR_VAR 0 7
25339: PUSH
25340: LD_INT 0
25342: ST_TO_ADDR
25343: GO 25361
// min_x := x - r ;
25345: LD_ADDR_VAR 0 7
25349: PUSH
25350: LD_VAR 0 2
25354: PUSH
25355: LD_VAR 0 4
25359: MINUS
25360: ST_TO_ADDR
// if y - r < 0 then
25361: LD_VAR 0 3
25365: PUSH
25366: LD_VAR 0 4
25370: MINUS
25371: PUSH
25372: LD_INT 0
25374: LESS
25375: IFFALSE 25387
// min_y := 0 else
25377: LD_ADDR_VAR 0 8
25381: PUSH
25382: LD_INT 0
25384: ST_TO_ADDR
25385: GO 25403
// min_y := y - r ;
25387: LD_ADDR_VAR 0 8
25391: PUSH
25392: LD_VAR 0 3
25396: PUSH
25397: LD_VAR 0 4
25401: MINUS
25402: ST_TO_ADDR
// max_x := x + r ;
25403: LD_ADDR_VAR 0 9
25407: PUSH
25408: LD_VAR 0 2
25412: PUSH
25413: LD_VAR 0 4
25417: PLUS
25418: ST_TO_ADDR
// max_y := y + r ;
25419: LD_ADDR_VAR 0 10
25423: PUSH
25424: LD_VAR 0 3
25428: PUSH
25429: LD_VAR 0 4
25433: PLUS
25434: ST_TO_ADDR
// for _x = min_x to max_x do
25435: LD_ADDR_VAR 0 11
25439: PUSH
25440: DOUBLE
25441: LD_VAR 0 7
25445: DEC
25446: ST_TO_ADDR
25447: LD_VAR 0 9
25451: PUSH
25452: FOR_TO
25453: IFFALSE 25570
// for _y = min_y to max_y do
25455: LD_ADDR_VAR 0 12
25459: PUSH
25460: DOUBLE
25461: LD_VAR 0 8
25465: DEC
25466: ST_TO_ADDR
25467: LD_VAR 0 10
25471: PUSH
25472: FOR_TO
25473: IFFALSE 25566
// begin if not ValidHex ( _x , _y ) then
25475: LD_VAR 0 11
25479: PPUSH
25480: LD_VAR 0 12
25484: PPUSH
25485: CALL_OW 488
25489: NOT
25490: IFFALSE 25494
// continue ;
25492: GO 25472
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25494: LD_VAR 0 11
25498: PPUSH
25499: LD_VAR 0 12
25503: PPUSH
25504: CALL_OW 351
25508: PUSH
25509: LD_VAR 0 11
25513: PPUSH
25514: LD_VAR 0 12
25518: PPUSH
25519: CALL_OW 554
25523: AND
25524: IFFALSE 25564
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25526: LD_ADDR_VAR 0 13
25530: PUSH
25531: LD_VAR 0 13
25535: PPUSH
25536: LD_VAR 0 13
25540: PUSH
25541: LD_INT 1
25543: PLUS
25544: PPUSH
25545: LD_VAR 0 11
25549: PUSH
25550: LD_VAR 0 12
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PPUSH
25559: CALL_OW 2
25563: ST_TO_ADDR
// end ;
25564: GO 25472
25566: POP
25567: POP
25568: GO 25452
25570: POP
25571: POP
// if not list then
25572: LD_VAR 0 13
25576: NOT
25577: IFFALSE 25581
// exit ;
25579: GO 25652
// for i in list do
25581: LD_ADDR_VAR 0 6
25585: PUSH
25586: LD_VAR 0 13
25590: PUSH
25591: FOR_IN
25592: IFFALSE 25650
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25594: LD_VAR 0 1
25598: PPUSH
25599: LD_STRING M
25601: PUSH
25602: LD_VAR 0 6
25606: PUSH
25607: LD_INT 1
25609: ARRAY
25610: PUSH
25611: LD_VAR 0 6
25615: PUSH
25616: LD_INT 2
25618: ARRAY
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: PPUSH
25644: CALL_OW 447
25648: GO 25591
25650: POP
25651: POP
// end ;
25652: LD_VAR 0 5
25656: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25657: LD_EXP 92
25661: NOT
25662: IFFALSE 25712
25664: GO 25666
25666: DISABLE
// begin initHack := true ;
25667: LD_ADDR_EXP 92
25671: PUSH
25672: LD_INT 1
25674: ST_TO_ADDR
// hackTanks := [ ] ;
25675: LD_ADDR_EXP 93
25679: PUSH
25680: EMPTY
25681: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25682: LD_ADDR_EXP 94
25686: PUSH
25687: EMPTY
25688: ST_TO_ADDR
// hackLimit := 3 ;
25689: LD_ADDR_EXP 95
25693: PUSH
25694: LD_INT 3
25696: ST_TO_ADDR
// hackDist := 12 ;
25697: LD_ADDR_EXP 96
25701: PUSH
25702: LD_INT 12
25704: ST_TO_ADDR
// hackCounter := [ ] ;
25705: LD_ADDR_EXP 97
25709: PUSH
25710: EMPTY
25711: ST_TO_ADDR
// end ;
25712: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25713: LD_EXP 92
25717: PUSH
25718: LD_INT 34
25720: PUSH
25721: LD_INT 99
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PPUSH
25728: CALL_OW 69
25732: AND
25733: IFFALSE 25986
25735: GO 25737
25737: DISABLE
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
// begin enable ;
25742: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25743: LD_ADDR_VAR 0 1
25747: PUSH
25748: LD_INT 34
25750: PUSH
25751: LD_INT 99
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PPUSH
25758: CALL_OW 69
25762: PUSH
25763: FOR_IN
25764: IFFALSE 25984
// begin if not i in hackTanks then
25766: LD_VAR 0 1
25770: PUSH
25771: LD_EXP 93
25775: IN
25776: NOT
25777: IFFALSE 25860
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25779: LD_ADDR_EXP 93
25783: PUSH
25784: LD_EXP 93
25788: PPUSH
25789: LD_EXP 93
25793: PUSH
25794: LD_INT 1
25796: PLUS
25797: PPUSH
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL_OW 1
25807: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25808: LD_ADDR_EXP 94
25812: PUSH
25813: LD_EXP 94
25817: PPUSH
25818: LD_EXP 94
25822: PUSH
25823: LD_INT 1
25825: PLUS
25826: PPUSH
25827: EMPTY
25828: PPUSH
25829: CALL_OW 1
25833: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25834: LD_ADDR_EXP 97
25838: PUSH
25839: LD_EXP 97
25843: PPUSH
25844: LD_EXP 97
25848: PUSH
25849: LD_INT 1
25851: PLUS
25852: PPUSH
25853: EMPTY
25854: PPUSH
25855: CALL_OW 1
25859: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25860: LD_VAR 0 1
25864: PPUSH
25865: CALL_OW 302
25869: NOT
25870: IFFALSE 25883
// begin HackUnlinkAll ( i ) ;
25872: LD_VAR 0 1
25876: PPUSH
25877: CALL 25989 0 1
// continue ;
25881: GO 25763
// end ; HackCheckCapturedStatus ( i ) ;
25883: LD_VAR 0 1
25887: PPUSH
25888: CALL 26432 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25892: LD_ADDR_VAR 0 2
25896: PUSH
25897: LD_INT 81
25899: PUSH
25900: LD_VAR 0 1
25904: PPUSH
25905: CALL_OW 255
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 33
25916: PUSH
25917: LD_INT 3
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 91
25926: PUSH
25927: LD_VAR 0 1
25931: PUSH
25932: LD_EXP 96
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 50
25944: PUSH
25945: EMPTY
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: ST_TO_ADDR
// if not tmp then
25959: LD_VAR 0 2
25963: NOT
25964: IFFALSE 25968
// continue ;
25966: GO 25763
// HackLink ( i , tmp ) ;
25968: LD_VAR 0 1
25972: PPUSH
25973: LD_VAR 0 2
25977: PPUSH
25978: CALL 26125 0 2
// end ;
25982: GO 25763
25984: POP
25985: POP
// end ;
25986: PPOPN 2
25988: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25989: LD_INT 0
25991: PPUSH
25992: PPUSH
25993: PPUSH
// if not hack in hackTanks then
25994: LD_VAR 0 1
25998: PUSH
25999: LD_EXP 93
26003: IN
26004: NOT
26005: IFFALSE 26009
// exit ;
26007: GO 26120
// index := GetElementIndex ( hackTanks , hack ) ;
26009: LD_ADDR_VAR 0 4
26013: PUSH
26014: LD_EXP 93
26018: PPUSH
26019: LD_VAR 0 1
26023: PPUSH
26024: CALL 33737 0 2
26028: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26029: LD_EXP 94
26033: PUSH
26034: LD_VAR 0 4
26038: ARRAY
26039: IFFALSE 26120
// begin for i in hackTanksCaptured [ index ] do
26041: LD_ADDR_VAR 0 3
26045: PUSH
26046: LD_EXP 94
26050: PUSH
26051: LD_VAR 0 4
26055: ARRAY
26056: PUSH
26057: FOR_IN
26058: IFFALSE 26084
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26060: LD_VAR 0 3
26064: PUSH
26065: LD_INT 1
26067: ARRAY
26068: PPUSH
26069: LD_VAR 0 3
26073: PUSH
26074: LD_INT 2
26076: ARRAY
26077: PPUSH
26078: CALL_OW 235
26082: GO 26057
26084: POP
26085: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26086: LD_ADDR_EXP 94
26090: PUSH
26091: LD_EXP 94
26095: PPUSH
26096: LD_VAR 0 4
26100: PPUSH
26101: EMPTY
26102: PPUSH
26103: CALL_OW 1
26107: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26108: LD_VAR 0 1
26112: PPUSH
26113: LD_INT 0
26115: PPUSH
26116: CALL_OW 505
// end ; end ;
26120: LD_VAR 0 2
26124: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
// if not hack in hackTanks or not vehicles then
26130: LD_VAR 0 1
26134: PUSH
26135: LD_EXP 93
26139: IN
26140: NOT
26141: PUSH
26142: LD_VAR 0 2
26146: NOT
26147: OR
26148: IFFALSE 26152
// exit ;
26150: GO 26427
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_VAR 0 1
26161: PPUSH
26162: LD_VAR 0 2
26166: PPUSH
26167: LD_INT 1
26169: PPUSH
26170: LD_INT 1
26172: PPUSH
26173: CALL 34387 0 4
26177: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26178: LD_ADDR_VAR 0 5
26182: PUSH
26183: LD_EXP 93
26187: PPUSH
26188: LD_VAR 0 1
26192: PPUSH
26193: CALL 33737 0 2
26197: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26198: LD_EXP 94
26202: PUSH
26203: LD_VAR 0 5
26207: ARRAY
26208: PUSH
26209: LD_EXP 95
26213: LESS
26214: IFFALSE 26403
// begin for i := 1 to vehicles do
26216: LD_ADDR_VAR 0 4
26220: PUSH
26221: DOUBLE
26222: LD_INT 1
26224: DEC
26225: ST_TO_ADDR
26226: LD_VAR 0 2
26230: PUSH
26231: FOR_TO
26232: IFFALSE 26401
// begin if hackTanksCaptured [ index ] = hackLimit then
26234: LD_EXP 94
26238: PUSH
26239: LD_VAR 0 5
26243: ARRAY
26244: PUSH
26245: LD_EXP 95
26249: EQUAL
26250: IFFALSE 26254
// break ;
26252: GO 26401
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26254: LD_ADDR_EXP 97
26258: PUSH
26259: LD_EXP 97
26263: PPUSH
26264: LD_VAR 0 5
26268: PPUSH
26269: LD_EXP 97
26273: PUSH
26274: LD_VAR 0 5
26278: ARRAY
26279: PUSH
26280: LD_INT 1
26282: PLUS
26283: PPUSH
26284: CALL_OW 1
26288: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26289: LD_ADDR_EXP 94
26293: PUSH
26294: LD_EXP 94
26298: PPUSH
26299: LD_VAR 0 5
26303: PUSH
26304: LD_EXP 94
26308: PUSH
26309: LD_VAR 0 5
26313: ARRAY
26314: PUSH
26315: LD_INT 1
26317: PLUS
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PPUSH
26323: LD_VAR 0 2
26327: PUSH
26328: LD_VAR 0 4
26332: ARRAY
26333: PUSH
26334: LD_VAR 0 2
26338: PUSH
26339: LD_VAR 0 4
26343: ARRAY
26344: PPUSH
26345: CALL_OW 255
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PPUSH
26354: CALL 33952 0 3
26358: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26359: LD_VAR 0 2
26363: PUSH
26364: LD_VAR 0 4
26368: ARRAY
26369: PPUSH
26370: LD_VAR 0 1
26374: PPUSH
26375: CALL_OW 255
26379: PPUSH
26380: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26384: LD_VAR 0 2
26388: PUSH
26389: LD_VAR 0 4
26393: ARRAY
26394: PPUSH
26395: CALL_OW 141
// end ;
26399: GO 26231
26401: POP
26402: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26403: LD_VAR 0 1
26407: PPUSH
26408: LD_EXP 94
26412: PUSH
26413: LD_VAR 0 5
26417: ARRAY
26418: PUSH
26419: LD_INT 0
26421: PLUS
26422: PPUSH
26423: CALL_OW 505
// end ;
26427: LD_VAR 0 3
26431: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26432: LD_INT 0
26434: PPUSH
26435: PPUSH
26436: PPUSH
26437: PPUSH
// if not hack in hackTanks then
26438: LD_VAR 0 1
26442: PUSH
26443: LD_EXP 93
26447: IN
26448: NOT
26449: IFFALSE 26453
// exit ;
26451: GO 26693
// index := GetElementIndex ( hackTanks , hack ) ;
26453: LD_ADDR_VAR 0 4
26457: PUSH
26458: LD_EXP 93
26462: PPUSH
26463: LD_VAR 0 1
26467: PPUSH
26468: CALL 33737 0 2
26472: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: DOUBLE
26479: LD_EXP 94
26483: PUSH
26484: LD_VAR 0 4
26488: ARRAY
26489: INC
26490: ST_TO_ADDR
26491: LD_INT 1
26493: PUSH
26494: FOR_DOWNTO
26495: IFFALSE 26667
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26497: LD_ADDR_VAR 0 5
26501: PUSH
26502: LD_EXP 94
26506: PUSH
26507: LD_VAR 0 4
26511: ARRAY
26512: PUSH
26513: LD_VAR 0 3
26517: ARRAY
26518: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26519: LD_VAR 0 5
26523: PUSH
26524: LD_INT 1
26526: ARRAY
26527: PPUSH
26528: CALL_OW 302
26532: NOT
26533: PUSH
26534: LD_VAR 0 5
26538: PUSH
26539: LD_INT 1
26541: ARRAY
26542: PPUSH
26543: CALL_OW 255
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 255
26557: NONEQUAL
26558: OR
26559: IFFALSE 26665
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26561: LD_VAR 0 5
26565: PUSH
26566: LD_INT 1
26568: ARRAY
26569: PPUSH
26570: CALL_OW 305
26574: PUSH
26575: LD_VAR 0 5
26579: PUSH
26580: LD_INT 1
26582: ARRAY
26583: PPUSH
26584: CALL_OW 255
26588: PUSH
26589: LD_VAR 0 1
26593: PPUSH
26594: CALL_OW 255
26598: EQUAL
26599: AND
26600: IFFALSE 26624
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26602: LD_VAR 0 5
26606: PUSH
26607: LD_INT 1
26609: ARRAY
26610: PPUSH
26611: LD_VAR 0 5
26615: PUSH
26616: LD_INT 2
26618: ARRAY
26619: PPUSH
26620: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26624: LD_ADDR_EXP 94
26628: PUSH
26629: LD_EXP 94
26633: PPUSH
26634: LD_VAR 0 4
26638: PPUSH
26639: LD_EXP 94
26643: PUSH
26644: LD_VAR 0 4
26648: ARRAY
26649: PPUSH
26650: LD_VAR 0 3
26654: PPUSH
26655: CALL_OW 3
26659: PPUSH
26660: CALL_OW 1
26664: ST_TO_ADDR
// end ; end ;
26665: GO 26494
26667: POP
26668: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26669: LD_VAR 0 1
26673: PPUSH
26674: LD_EXP 94
26678: PUSH
26679: LD_VAR 0 4
26683: ARRAY
26684: PUSH
26685: LD_INT 0
26687: PLUS
26688: PPUSH
26689: CALL_OW 505
// end ;
26693: LD_VAR 0 2
26697: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
// if not hack in hackTanks then
26704: LD_VAR 0 1
26708: PUSH
26709: LD_EXP 93
26713: IN
26714: NOT
26715: IFFALSE 26719
// exit ;
26717: GO 26804
// index := GetElementIndex ( hackTanks , hack ) ;
26719: LD_ADDR_VAR 0 5
26723: PUSH
26724: LD_EXP 93
26728: PPUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL 33737 0 2
26738: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26739: LD_ADDR_VAR 0 4
26743: PUSH
26744: DOUBLE
26745: LD_INT 1
26747: DEC
26748: ST_TO_ADDR
26749: LD_EXP 94
26753: PUSH
26754: LD_VAR 0 5
26758: ARRAY
26759: PUSH
26760: FOR_TO
26761: IFFALSE 26802
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26763: LD_EXP 94
26767: PUSH
26768: LD_VAR 0 5
26772: ARRAY
26773: PUSH
26774: LD_VAR 0 4
26778: ARRAY
26779: PUSH
26780: LD_INT 1
26782: ARRAY
26783: PUSH
26784: LD_VAR 0 2
26788: EQUAL
26789: IFFALSE 26800
// KillUnit ( vehicle ) ;
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 66
26800: GO 26760
26802: POP
26803: POP
// end ;
26804: LD_VAR 0 3
26808: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26809: LD_EXP 98
26813: NOT
26814: IFFALSE 26849
26816: GO 26818
26818: DISABLE
// begin initMiner := true ;
26819: LD_ADDR_EXP 98
26823: PUSH
26824: LD_INT 1
26826: ST_TO_ADDR
// minersList := [ ] ;
26827: LD_ADDR_EXP 99
26831: PUSH
26832: EMPTY
26833: ST_TO_ADDR
// minerMinesList := [ ] ;
26834: LD_ADDR_EXP 100
26838: PUSH
26839: EMPTY
26840: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26841: LD_ADDR_EXP 101
26845: PUSH
26846: LD_INT 5
26848: ST_TO_ADDR
// end ;
26849: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26850: LD_EXP 98
26854: PUSH
26855: LD_INT 34
26857: PUSH
26858: LD_INT 81
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PPUSH
26865: CALL_OW 69
26869: AND
26870: IFFALSE 27331
26872: GO 26874
26874: DISABLE
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
26879: PPUSH
26880: PPUSH
// begin enable ;
26881: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26882: LD_ADDR_VAR 0 1
26886: PUSH
26887: LD_INT 34
26889: PUSH
26890: LD_INT 81
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PPUSH
26897: CALL_OW 69
26901: PUSH
26902: FOR_IN
26903: IFFALSE 26975
// begin if not i in minersList then
26905: LD_VAR 0 1
26909: PUSH
26910: LD_EXP 99
26914: IN
26915: NOT
26916: IFFALSE 26973
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26918: LD_ADDR_EXP 99
26922: PUSH
26923: LD_EXP 99
26927: PPUSH
26928: LD_EXP 99
26932: PUSH
26933: LD_INT 1
26935: PLUS
26936: PPUSH
26937: LD_VAR 0 1
26941: PPUSH
26942: CALL_OW 1
26946: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26947: LD_ADDR_EXP 100
26951: PUSH
26952: LD_EXP 100
26956: PPUSH
26957: LD_EXP 100
26961: PUSH
26962: LD_INT 1
26964: PLUS
26965: PPUSH
26966: EMPTY
26967: PPUSH
26968: CALL_OW 1
26972: ST_TO_ADDR
// end end ;
26973: GO 26902
26975: POP
26976: POP
// for i := minerMinesList downto 1 do
26977: LD_ADDR_VAR 0 1
26981: PUSH
26982: DOUBLE
26983: LD_EXP 100
26987: INC
26988: ST_TO_ADDR
26989: LD_INT 1
26991: PUSH
26992: FOR_DOWNTO
26993: IFFALSE 27329
// begin if IsLive ( minersList [ i ] ) then
26995: LD_EXP 99
26999: PUSH
27000: LD_VAR 0 1
27004: ARRAY
27005: PPUSH
27006: CALL_OW 300
27010: IFFALSE 27038
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27012: LD_EXP 99
27016: PUSH
27017: LD_VAR 0 1
27021: ARRAY
27022: PPUSH
27023: LD_EXP 100
27027: PUSH
27028: LD_VAR 0 1
27032: ARRAY
27033: PPUSH
27034: CALL_OW 505
// if not minerMinesList [ i ] then
27038: LD_EXP 100
27042: PUSH
27043: LD_VAR 0 1
27047: ARRAY
27048: NOT
27049: IFFALSE 27053
// continue ;
27051: GO 26992
// for j := minerMinesList [ i ] downto 1 do
27053: LD_ADDR_VAR 0 2
27057: PUSH
27058: DOUBLE
27059: LD_EXP 100
27063: PUSH
27064: LD_VAR 0 1
27068: ARRAY
27069: INC
27070: ST_TO_ADDR
27071: LD_INT 1
27073: PUSH
27074: FOR_DOWNTO
27075: IFFALSE 27325
// begin side := GetSide ( minersList [ i ] ) ;
27077: LD_ADDR_VAR 0 3
27081: PUSH
27082: LD_EXP 99
27086: PUSH
27087: LD_VAR 0 1
27091: ARRAY
27092: PPUSH
27093: CALL_OW 255
27097: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27098: LD_ADDR_VAR 0 4
27102: PUSH
27103: LD_EXP 100
27107: PUSH
27108: LD_VAR 0 1
27112: ARRAY
27113: PUSH
27114: LD_VAR 0 2
27118: ARRAY
27119: PUSH
27120: LD_INT 1
27122: ARRAY
27123: PPUSH
27124: LD_EXP 100
27128: PUSH
27129: LD_VAR 0 1
27133: ARRAY
27134: PUSH
27135: LD_VAR 0 2
27139: ARRAY
27140: PUSH
27141: LD_INT 2
27143: ARRAY
27144: PPUSH
27145: CALL_OW 428
27149: ST_TO_ADDR
// if not tmp then
27150: LD_VAR 0 4
27154: NOT
27155: IFFALSE 27159
// continue ;
27157: GO 27074
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27159: LD_VAR 0 4
27163: PUSH
27164: LD_INT 81
27166: PUSH
27167: LD_VAR 0 3
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PPUSH
27176: CALL_OW 69
27180: IN
27181: PUSH
27182: LD_EXP 100
27186: PUSH
27187: LD_VAR 0 1
27191: ARRAY
27192: PUSH
27193: LD_VAR 0 2
27197: ARRAY
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: LD_EXP 100
27207: PUSH
27208: LD_VAR 0 1
27212: ARRAY
27213: PUSH
27214: LD_VAR 0 2
27218: ARRAY
27219: PUSH
27220: LD_INT 2
27222: ARRAY
27223: PPUSH
27224: CALL_OW 458
27228: AND
27229: IFFALSE 27323
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27231: LD_EXP 100
27235: PUSH
27236: LD_VAR 0 1
27240: ARRAY
27241: PUSH
27242: LD_VAR 0 2
27246: ARRAY
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PPUSH
27252: LD_EXP 100
27256: PUSH
27257: LD_VAR 0 1
27261: ARRAY
27262: PUSH
27263: LD_VAR 0 2
27267: ARRAY
27268: PUSH
27269: LD_INT 2
27271: ARRAY
27272: PPUSH
27273: LD_VAR 0 3
27277: PPUSH
27278: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27282: LD_ADDR_EXP 100
27286: PUSH
27287: LD_EXP 100
27291: PPUSH
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_EXP 100
27301: PUSH
27302: LD_VAR 0 1
27306: ARRAY
27307: PPUSH
27308: LD_VAR 0 2
27312: PPUSH
27313: CALL_OW 3
27317: PPUSH
27318: CALL_OW 1
27322: ST_TO_ADDR
// end ; end ;
27323: GO 27074
27325: POP
27326: POP
// end ;
27327: GO 26992
27329: POP
27330: POP
// end ;
27331: PPOPN 4
27333: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27334: LD_INT 0
27336: PPUSH
27337: PPUSH
// result := false ;
27338: LD_ADDR_VAR 0 4
27342: PUSH
27343: LD_INT 0
27345: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 264
27355: PUSH
27356: LD_INT 81
27358: EQUAL
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27604
// index := GetElementIndex ( minersList , unit ) ;
27364: LD_ADDR_VAR 0 5
27368: PUSH
27369: LD_EXP 99
27373: PPUSH
27374: LD_VAR 0 1
27378: PPUSH
27379: CALL 33737 0 2
27383: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27384: LD_EXP 100
27388: PUSH
27389: LD_VAR 0 5
27393: ARRAY
27394: PUSH
27395: LD_EXP 101
27399: GREATEREQUAL
27400: IFFALSE 27404
// exit ;
27402: GO 27604
// ComMoveXY ( unit , x , y ) ;
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_VAR 0 3
27418: PPUSH
27419: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27423: LD_INT 35
27425: PPUSH
27426: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27430: LD_VAR 0 1
27434: PPUSH
27435: LD_VAR 0 2
27439: PPUSH
27440: LD_VAR 0 3
27444: PPUSH
27445: CALL 65092 0 3
27449: NOT
27450: PUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 314
27460: AND
27461: IFFALSE 27465
// exit ;
27463: GO 27604
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_VAR 0 3
27474: PPUSH
27475: CALL_OW 428
27479: PUSH
27480: LD_VAR 0 1
27484: EQUAL
27485: PUSH
27486: LD_VAR 0 1
27490: PPUSH
27491: CALL_OW 314
27495: NOT
27496: AND
27497: IFFALSE 27423
// PlaySoundXY ( x , y , PlantMine ) ;
27499: LD_VAR 0 2
27503: PPUSH
27504: LD_VAR 0 3
27508: PPUSH
27509: LD_STRING PlantMine
27511: PPUSH
27512: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27516: LD_VAR 0 2
27520: PPUSH
27521: LD_VAR 0 3
27525: PPUSH
27526: LD_VAR 0 1
27530: PPUSH
27531: CALL_OW 255
27535: PPUSH
27536: LD_INT 0
27538: PPUSH
27539: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27543: LD_ADDR_EXP 100
27547: PUSH
27548: LD_EXP 100
27552: PPUSH
27553: LD_VAR 0 5
27557: PUSH
27558: LD_EXP 100
27562: PUSH
27563: LD_VAR 0 5
27567: ARRAY
27568: PUSH
27569: LD_INT 1
27571: PLUS
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PPUSH
27577: LD_VAR 0 2
27581: PUSH
27582: LD_VAR 0 3
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PPUSH
27591: CALL 33952 0 3
27595: ST_TO_ADDR
// result := true ;
27596: LD_ADDR_VAR 0 4
27600: PUSH
27601: LD_INT 1
27603: ST_TO_ADDR
// end ;
27604: LD_VAR 0 4
27608: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27609: LD_INT 0
27611: PPUSH
27612: PPUSH
27613: PPUSH
// if not unit in minersList then
27614: LD_VAR 0 1
27618: PUSH
27619: LD_EXP 99
27623: IN
27624: NOT
27625: IFFALSE 27629
// exit ;
27627: GO 28021
// index := GetElementIndex ( minersList , unit ) ;
27629: LD_ADDR_VAR 0 6
27633: PUSH
27634: LD_EXP 99
27638: PPUSH
27639: LD_VAR 0 1
27643: PPUSH
27644: CALL 33737 0 2
27648: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27649: LD_ADDR_VAR 0 5
27653: PUSH
27654: DOUBLE
27655: LD_EXP 100
27659: PUSH
27660: LD_VAR 0 6
27664: ARRAY
27665: INC
27666: ST_TO_ADDR
27667: LD_INT 1
27669: PUSH
27670: FOR_DOWNTO
27671: IFFALSE 27832
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27673: LD_EXP 100
27677: PUSH
27678: LD_VAR 0 6
27682: ARRAY
27683: PUSH
27684: LD_VAR 0 5
27688: ARRAY
27689: PUSH
27690: LD_INT 1
27692: ARRAY
27693: PUSH
27694: LD_VAR 0 2
27698: EQUAL
27699: PUSH
27700: LD_EXP 100
27704: PUSH
27705: LD_VAR 0 6
27709: ARRAY
27710: PUSH
27711: LD_VAR 0 5
27715: ARRAY
27716: PUSH
27717: LD_INT 2
27719: ARRAY
27720: PUSH
27721: LD_VAR 0 3
27725: EQUAL
27726: AND
27727: IFFALSE 27830
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27729: LD_EXP 100
27733: PUSH
27734: LD_VAR 0 6
27738: ARRAY
27739: PUSH
27740: LD_VAR 0 5
27744: ARRAY
27745: PUSH
27746: LD_INT 1
27748: ARRAY
27749: PPUSH
27750: LD_EXP 100
27754: PUSH
27755: LD_VAR 0 6
27759: ARRAY
27760: PUSH
27761: LD_VAR 0 5
27765: ARRAY
27766: PUSH
27767: LD_INT 2
27769: ARRAY
27770: PPUSH
27771: LD_VAR 0 1
27775: PPUSH
27776: CALL_OW 255
27780: PPUSH
27781: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27785: LD_ADDR_EXP 100
27789: PUSH
27790: LD_EXP 100
27794: PPUSH
27795: LD_VAR 0 6
27799: PPUSH
27800: LD_EXP 100
27804: PUSH
27805: LD_VAR 0 6
27809: ARRAY
27810: PPUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: CALL_OW 3
27820: PPUSH
27821: CALL_OW 1
27825: ST_TO_ADDR
// exit ;
27826: POP
27827: POP
27828: GO 28021
// end ; end ;
27830: GO 27670
27832: POP
27833: POP
// for i := minerMinesList [ index ] downto 1 do
27834: LD_ADDR_VAR 0 5
27838: PUSH
27839: DOUBLE
27840: LD_EXP 100
27844: PUSH
27845: LD_VAR 0 6
27849: ARRAY
27850: INC
27851: ST_TO_ADDR
27852: LD_INT 1
27854: PUSH
27855: FOR_DOWNTO
27856: IFFALSE 28019
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27858: LD_EXP 100
27862: PUSH
27863: LD_VAR 0 6
27867: ARRAY
27868: PUSH
27869: LD_VAR 0 5
27873: ARRAY
27874: PUSH
27875: LD_INT 1
27877: ARRAY
27878: PPUSH
27879: LD_EXP 100
27883: PUSH
27884: LD_VAR 0 6
27888: ARRAY
27889: PUSH
27890: LD_VAR 0 5
27894: ARRAY
27895: PUSH
27896: LD_INT 2
27898: ARRAY
27899: PPUSH
27900: LD_VAR 0 2
27904: PPUSH
27905: LD_VAR 0 3
27909: PPUSH
27910: CALL_OW 298
27914: PUSH
27915: LD_INT 6
27917: LESS
27918: IFFALSE 28017
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27920: LD_EXP 100
27924: PUSH
27925: LD_VAR 0 6
27929: ARRAY
27930: PUSH
27931: LD_VAR 0 5
27935: ARRAY
27936: PUSH
27937: LD_INT 1
27939: ARRAY
27940: PPUSH
27941: LD_EXP 100
27945: PUSH
27946: LD_VAR 0 6
27950: ARRAY
27951: PUSH
27952: LD_VAR 0 5
27956: ARRAY
27957: PUSH
27958: LD_INT 2
27960: ARRAY
27961: PPUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL_OW 255
27971: PPUSH
27972: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27976: LD_ADDR_EXP 100
27980: PUSH
27981: LD_EXP 100
27985: PPUSH
27986: LD_VAR 0 6
27990: PPUSH
27991: LD_EXP 100
27995: PUSH
27996: LD_VAR 0 6
28000: ARRAY
28001: PPUSH
28002: LD_VAR 0 5
28006: PPUSH
28007: CALL_OW 3
28011: PPUSH
28012: CALL_OW 1
28016: ST_TO_ADDR
// end ; end ;
28017: GO 27855
28019: POP
28020: POP
// end ;
28021: LD_VAR 0 4
28025: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28026: LD_INT 0
28028: PPUSH
28029: PPUSH
28030: PPUSH
28031: PPUSH
28032: PPUSH
28033: PPUSH
28034: PPUSH
28035: PPUSH
28036: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28037: LD_VAR 0 1
28041: PPUSH
28042: CALL_OW 264
28046: PUSH
28047: LD_INT 81
28049: EQUAL
28050: NOT
28051: PUSH
28052: LD_VAR 0 1
28056: PUSH
28057: LD_EXP 99
28061: IN
28062: NOT
28063: OR
28064: IFFALSE 28068
// exit ;
28066: GO 28390
// index := GetElementIndex ( minersList , unit ) ;
28068: LD_ADDR_VAR 0 6
28072: PUSH
28073: LD_EXP 99
28077: PPUSH
28078: LD_VAR 0 1
28082: PPUSH
28083: CALL 33737 0 2
28087: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28088: LD_ADDR_VAR 0 8
28092: PUSH
28093: LD_EXP 101
28097: PUSH
28098: LD_EXP 100
28102: PUSH
28103: LD_VAR 0 6
28107: ARRAY
28108: MINUS
28109: ST_TO_ADDR
// if not minesFreeAmount then
28110: LD_VAR 0 8
28114: NOT
28115: IFFALSE 28119
// exit ;
28117: GO 28390
// tmp := [ ] ;
28119: LD_ADDR_VAR 0 7
28123: PUSH
28124: EMPTY
28125: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28126: LD_ADDR_VAR 0 5
28130: PUSH
28131: DOUBLE
28132: LD_INT 1
28134: DEC
28135: ST_TO_ADDR
28136: LD_VAR 0 8
28140: PUSH
28141: FOR_TO
28142: IFFALSE 28337
// begin _d := rand ( 0 , 5 ) ;
28144: LD_ADDR_VAR 0 11
28148: PUSH
28149: LD_INT 0
28151: PPUSH
28152: LD_INT 5
28154: PPUSH
28155: CALL_OW 12
28159: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28160: LD_ADDR_VAR 0 12
28164: PUSH
28165: LD_INT 2
28167: PPUSH
28168: LD_INT 6
28170: PPUSH
28171: CALL_OW 12
28175: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28176: LD_ADDR_VAR 0 9
28180: PUSH
28181: LD_VAR 0 2
28185: PPUSH
28186: LD_VAR 0 11
28190: PPUSH
28191: LD_VAR 0 12
28195: PPUSH
28196: CALL_OW 272
28200: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28201: LD_ADDR_VAR 0 10
28205: PUSH
28206: LD_VAR 0 3
28210: PPUSH
28211: LD_VAR 0 11
28215: PPUSH
28216: LD_VAR 0 12
28220: PPUSH
28221: CALL_OW 273
28225: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28226: LD_VAR 0 9
28230: PPUSH
28231: LD_VAR 0 10
28235: PPUSH
28236: CALL_OW 488
28240: PUSH
28241: LD_VAR 0 9
28245: PUSH
28246: LD_VAR 0 10
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_VAR 0 7
28259: IN
28260: NOT
28261: AND
28262: PUSH
28263: LD_VAR 0 9
28267: PPUSH
28268: LD_VAR 0 10
28272: PPUSH
28273: CALL_OW 458
28277: NOT
28278: AND
28279: IFFALSE 28321
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28281: LD_ADDR_VAR 0 7
28285: PUSH
28286: LD_VAR 0 7
28290: PPUSH
28291: LD_VAR 0 7
28295: PUSH
28296: LD_INT 1
28298: PLUS
28299: PPUSH
28300: LD_VAR 0 9
28304: PUSH
28305: LD_VAR 0 10
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 1
28318: ST_TO_ADDR
28319: GO 28335
// i := i - 1 ;
28321: LD_ADDR_VAR 0 5
28325: PUSH
28326: LD_VAR 0 5
28330: PUSH
28331: LD_INT 1
28333: MINUS
28334: ST_TO_ADDR
// end ;
28335: GO 28141
28337: POP
28338: POP
// for i in tmp do
28339: LD_ADDR_VAR 0 5
28343: PUSH
28344: LD_VAR 0 7
28348: PUSH
28349: FOR_IN
28350: IFFALSE 28388
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_VAR 0 5
28361: PUSH
28362: LD_INT 1
28364: ARRAY
28365: PPUSH
28366: LD_VAR 0 5
28370: PUSH
28371: LD_INT 2
28373: ARRAY
28374: PPUSH
28375: CALL 27334 0 3
28379: NOT
28380: IFFALSE 28386
// exit ;
28382: POP
28383: POP
28384: GO 28390
28386: GO 28349
28388: POP
28389: POP
// end ;
28390: LD_VAR 0 4
28394: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
// if not GetClass ( unit ) = class_sniper then
28404: LD_VAR 0 1
28408: PPUSH
28409: CALL_OW 257
28413: PUSH
28414: LD_INT 5
28416: EQUAL
28417: NOT
28418: IFFALSE 28422
// exit ;
28420: GO 28810
// dist := 8 ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_INT 8
28429: ST_TO_ADDR
// viewRange := 12 ;
28430: LD_ADDR_VAR 0 7
28434: PUSH
28435: LD_INT 12
28437: ST_TO_ADDR
// side := GetSide ( unit ) ;
28438: LD_ADDR_VAR 0 6
28442: PUSH
28443: LD_VAR 0 1
28447: PPUSH
28448: CALL_OW 255
28452: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28453: LD_INT 61
28455: PPUSH
28456: LD_VAR 0 6
28460: PPUSH
28461: CALL_OW 321
28465: PUSH
28466: LD_INT 2
28468: EQUAL
28469: IFFALSE 28479
// viewRange := 16 ;
28471: LD_ADDR_VAR 0 7
28475: PUSH
28476: LD_INT 16
28478: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28479: LD_VAR 0 1
28483: PPUSH
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_VAR 0 3
28493: PPUSH
28494: CALL_OW 297
28498: PUSH
28499: LD_VAR 0 5
28503: GREATER
28504: IFFALSE 28583
// begin ComMoveXY ( unit , x , y ) ;
28506: LD_VAR 0 1
28510: PPUSH
28511: LD_VAR 0 2
28515: PPUSH
28516: LD_VAR 0 3
28520: PPUSH
28521: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28525: LD_INT 35
28527: PPUSH
28528: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28532: LD_VAR 0 1
28536: PPUSH
28537: LD_VAR 0 2
28541: PPUSH
28542: LD_VAR 0 3
28546: PPUSH
28547: CALL 65092 0 3
28551: NOT
28552: IFFALSE 28556
// exit ;
28554: GO 28810
// until GetDistUnitXY ( unit , x , y ) < dist ;
28556: LD_VAR 0 1
28560: PPUSH
28561: LD_VAR 0 2
28565: PPUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: CALL_OW 297
28575: PUSH
28576: LD_VAR 0 5
28580: LESS
28581: IFFALSE 28525
// end ; ComTurnXY ( unit , x , y ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: LD_VAR 0 2
28592: PPUSH
28593: LD_VAR 0 3
28597: PPUSH
28598: CALL_OW 118
// wait ( 5 ) ;
28602: LD_INT 5
28604: PPUSH
28605: CALL_OW 67
// _d := GetDir ( unit ) ;
28609: LD_ADDR_VAR 0 10
28613: PUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: CALL_OW 254
28623: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28624: LD_ADDR_VAR 0 8
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 250
28638: PPUSH
28639: LD_VAR 0 10
28643: PPUSH
28644: LD_VAR 0 5
28648: PPUSH
28649: CALL_OW 272
28653: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28654: LD_ADDR_VAR 0 9
28658: PUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 251
28668: PPUSH
28669: LD_VAR 0 10
28673: PPUSH
28674: LD_VAR 0 5
28678: PPUSH
28679: CALL_OW 273
28683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28684: LD_VAR 0 8
28688: PPUSH
28689: LD_VAR 0 9
28693: PPUSH
28694: CALL_OW 488
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28810
// ComAnimCustom ( unit , 1 ) ;
28703: LD_VAR 0 1
28707: PPUSH
28708: LD_INT 1
28710: PPUSH
28711: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28715: LD_VAR 0 8
28719: PPUSH
28720: LD_VAR 0 9
28724: PPUSH
28725: LD_VAR 0 6
28729: PPUSH
28730: LD_VAR 0 7
28734: PPUSH
28735: CALL_OW 330
// repeat wait ( 1 ) ;
28739: LD_INT 1
28741: PPUSH
28742: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 316
28755: PUSH
28756: LD_VAR 0 1
28760: PPUSH
28761: CALL_OW 314
28765: OR
28766: PUSH
28767: LD_VAR 0 1
28771: PPUSH
28772: CALL_OW 302
28776: NOT
28777: OR
28778: PUSH
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 301
28788: OR
28789: IFFALSE 28739
// RemoveSeeing ( _x , _y , side ) ;
28791: LD_VAR 0 8
28795: PPUSH
28796: LD_VAR 0 9
28800: PPUSH
28801: LD_VAR 0 6
28805: PPUSH
28806: CALL_OW 331
// end ; end_of_file
28810: LD_VAR 0 4
28814: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
// if exist_mode then
28819: LD_VAR 0 2
28823: IFFALSE 28848
// unit := CreateCharacter ( prefix & ident ) else
28825: LD_ADDR_VAR 0 5
28829: PUSH
28830: LD_VAR 0 3
28834: PUSH
28835: LD_VAR 0 1
28839: STR
28840: PPUSH
28841: CALL_OW 34
28845: ST_TO_ADDR
28846: GO 28863
// unit := NewCharacter ( ident ) ;
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 25
28862: ST_TO_ADDR
// result := unit ;
28863: LD_ADDR_VAR 0 4
28867: PUSH
28868: LD_VAR 0 5
28872: ST_TO_ADDR
// end ;
28873: LD_VAR 0 4
28877: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28878: LD_INT 0
28880: PPUSH
28881: PPUSH
// if not side or not nation then
28882: LD_VAR 0 1
28886: NOT
28887: PUSH
28888: LD_VAR 0 2
28892: NOT
28893: OR
28894: IFFALSE 28898
// exit ;
28896: GO 29666
// case nation of nation_american :
28898: LD_VAR 0 2
28902: PUSH
28903: LD_INT 1
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 29125
28911: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28912: LD_ADDR_VAR 0 4
28916: PUSH
28917: LD_INT 35
28919: PUSH
28920: LD_INT 45
28922: PUSH
28923: LD_INT 46
28925: PUSH
28926: LD_INT 47
28928: PUSH
28929: LD_INT 82
28931: PUSH
28932: LD_INT 83
28934: PUSH
28935: LD_INT 84
28937: PUSH
28938: LD_INT 85
28940: PUSH
28941: LD_INT 86
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: LD_INT 6
28952: PUSH
28953: LD_INT 15
28955: PUSH
28956: LD_INT 16
28958: PUSH
28959: LD_INT 7
28961: PUSH
28962: LD_INT 12
28964: PUSH
28965: LD_INT 13
28967: PUSH
28968: LD_INT 10
28970: PUSH
28971: LD_INT 14
28973: PUSH
28974: LD_INT 20
28976: PUSH
28977: LD_INT 21
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_INT 25
28985: PUSH
28986: LD_INT 32
28988: PUSH
28989: LD_INT 27
28991: PUSH
28992: LD_INT 36
28994: PUSH
28995: LD_INT 69
28997: PUSH
28998: LD_INT 39
29000: PUSH
29001: LD_INT 34
29003: PUSH
29004: LD_INT 40
29006: PUSH
29007: LD_INT 48
29009: PUSH
29010: LD_INT 49
29012: PUSH
29013: LD_INT 50
29015: PUSH
29016: LD_INT 51
29018: PUSH
29019: LD_INT 52
29021: PUSH
29022: LD_INT 53
29024: PUSH
29025: LD_INT 54
29027: PUSH
29028: LD_INT 55
29030: PUSH
29031: LD_INT 56
29033: PUSH
29034: LD_INT 57
29036: PUSH
29037: LD_INT 58
29039: PUSH
29040: LD_INT 59
29042: PUSH
29043: LD_INT 60
29045: PUSH
29046: LD_INT 61
29048: PUSH
29049: LD_INT 62
29051: PUSH
29052: LD_INT 80
29054: PUSH
29055: LD_INT 82
29057: PUSH
29058: LD_INT 83
29060: PUSH
29061: LD_INT 84
29063: PUSH
29064: LD_INT 85
29066: PUSH
29067: LD_INT 86
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: ST_TO_ADDR
29123: GO 29590
29125: LD_INT 2
29127: DOUBLE
29128: EQUAL
29129: IFTRUE 29133
29131: GO 29359
29133: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29134: LD_ADDR_VAR 0 4
29138: PUSH
29139: LD_INT 35
29141: PUSH
29142: LD_INT 45
29144: PUSH
29145: LD_INT 46
29147: PUSH
29148: LD_INT 47
29150: PUSH
29151: LD_INT 82
29153: PUSH
29154: LD_INT 83
29156: PUSH
29157: LD_INT 84
29159: PUSH
29160: LD_INT 85
29162: PUSH
29163: LD_INT 87
29165: PUSH
29166: LD_INT 70
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 11
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: LD_INT 4
29180: PUSH
29181: LD_INT 5
29183: PUSH
29184: LD_INT 6
29186: PUSH
29187: LD_INT 15
29189: PUSH
29190: LD_INT 18
29192: PUSH
29193: LD_INT 7
29195: PUSH
29196: LD_INT 17
29198: PUSH
29199: LD_INT 8
29201: PUSH
29202: LD_INT 20
29204: PUSH
29205: LD_INT 21
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_INT 72
29213: PUSH
29214: LD_INT 26
29216: PUSH
29217: LD_INT 69
29219: PUSH
29220: LD_INT 39
29222: PUSH
29223: LD_INT 40
29225: PUSH
29226: LD_INT 41
29228: PUSH
29229: LD_INT 42
29231: PUSH
29232: LD_INT 43
29234: PUSH
29235: LD_INT 48
29237: PUSH
29238: LD_INT 49
29240: PUSH
29241: LD_INT 50
29243: PUSH
29244: LD_INT 51
29246: PUSH
29247: LD_INT 52
29249: PUSH
29250: LD_INT 53
29252: PUSH
29253: LD_INT 54
29255: PUSH
29256: LD_INT 55
29258: PUSH
29259: LD_INT 56
29261: PUSH
29262: LD_INT 60
29264: PUSH
29265: LD_INT 61
29267: PUSH
29268: LD_INT 62
29270: PUSH
29271: LD_INT 66
29273: PUSH
29274: LD_INT 67
29276: PUSH
29277: LD_INT 68
29279: PUSH
29280: LD_INT 81
29282: PUSH
29283: LD_INT 82
29285: PUSH
29286: LD_INT 83
29288: PUSH
29289: LD_INT 84
29291: PUSH
29292: LD_INT 85
29294: PUSH
29295: LD_INT 87
29297: PUSH
29298: LD_INT 88
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
29357: GO 29590
29359: LD_INT 3
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29589
29367: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29368: LD_ADDR_VAR 0 4
29372: PUSH
29373: LD_INT 46
29375: PUSH
29376: LD_INT 47
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: LD_INT 82
29387: PUSH
29388: LD_INT 83
29390: PUSH
29391: LD_INT 84
29393: PUSH
29394: LD_INT 85
29396: PUSH
29397: LD_INT 86
29399: PUSH
29400: LD_INT 11
29402: PUSH
29403: LD_INT 9
29405: PUSH
29406: LD_INT 20
29408: PUSH
29409: LD_INT 19
29411: PUSH
29412: LD_INT 21
29414: PUSH
29415: LD_INT 24
29417: PUSH
29418: LD_INT 22
29420: PUSH
29421: LD_INT 25
29423: PUSH
29424: LD_INT 28
29426: PUSH
29427: LD_INT 29
29429: PUSH
29430: LD_INT 30
29432: PUSH
29433: LD_INT 31
29435: PUSH
29436: LD_INT 37
29438: PUSH
29439: LD_INT 38
29441: PUSH
29442: LD_INT 32
29444: PUSH
29445: LD_INT 27
29447: PUSH
29448: LD_INT 33
29450: PUSH
29451: LD_INT 69
29453: PUSH
29454: LD_INT 39
29456: PUSH
29457: LD_INT 34
29459: PUSH
29460: LD_INT 40
29462: PUSH
29463: LD_INT 71
29465: PUSH
29466: LD_INT 23
29468: PUSH
29469: LD_INT 44
29471: PUSH
29472: LD_INT 48
29474: PUSH
29475: LD_INT 49
29477: PUSH
29478: LD_INT 50
29480: PUSH
29481: LD_INT 51
29483: PUSH
29484: LD_INT 52
29486: PUSH
29487: LD_INT 53
29489: PUSH
29490: LD_INT 54
29492: PUSH
29493: LD_INT 55
29495: PUSH
29496: LD_INT 56
29498: PUSH
29499: LD_INT 57
29501: PUSH
29502: LD_INT 58
29504: PUSH
29505: LD_INT 59
29507: PUSH
29508: LD_INT 63
29510: PUSH
29511: LD_INT 64
29513: PUSH
29514: LD_INT 65
29516: PUSH
29517: LD_INT 82
29519: PUSH
29520: LD_INT 83
29522: PUSH
29523: LD_INT 84
29525: PUSH
29526: LD_INT 85
29528: PUSH
29529: LD_INT 86
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: ST_TO_ADDR
29587: GO 29590
29589: POP
// if state > - 1 and state < 3 then
29590: LD_VAR 0 3
29594: PUSH
29595: LD_INT 1
29597: NEG
29598: GREATER
29599: PUSH
29600: LD_VAR 0 3
29604: PUSH
29605: LD_INT 3
29607: LESS
29608: AND
29609: IFFALSE 29666
// for i in result do
29611: LD_ADDR_VAR 0 5
29615: PUSH
29616: LD_VAR 0 4
29620: PUSH
29621: FOR_IN
29622: IFFALSE 29664
// if GetTech ( i , side ) <> state then
29624: LD_VAR 0 5
29628: PPUSH
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 321
29638: PUSH
29639: LD_VAR 0 3
29643: NONEQUAL
29644: IFFALSE 29662
// result := result diff i ;
29646: LD_ADDR_VAR 0 4
29650: PUSH
29651: LD_VAR 0 4
29655: PUSH
29656: LD_VAR 0 5
29660: DIFF
29661: ST_TO_ADDR
29662: GO 29621
29664: POP
29665: POP
// end ;
29666: LD_VAR 0 4
29670: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29671: LD_INT 0
29673: PPUSH
29674: PPUSH
29675: PPUSH
// result := true ;
29676: LD_ADDR_VAR 0 3
29680: PUSH
29681: LD_INT 1
29683: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29684: LD_ADDR_VAR 0 5
29688: PUSH
29689: LD_VAR 0 2
29693: PPUSH
29694: CALL_OW 480
29698: ST_TO_ADDR
// if not tmp then
29699: LD_VAR 0 5
29703: NOT
29704: IFFALSE 29708
// exit ;
29706: GO 29757
// for i in tmp do
29708: LD_ADDR_VAR 0 4
29712: PUSH
29713: LD_VAR 0 5
29717: PUSH
29718: FOR_IN
29719: IFFALSE 29755
// if GetTech ( i , side ) <> state_researched then
29721: LD_VAR 0 4
29725: PPUSH
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL_OW 321
29735: PUSH
29736: LD_INT 2
29738: NONEQUAL
29739: IFFALSE 29753
// begin result := false ;
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 0
29748: ST_TO_ADDR
// exit ;
29749: POP
29750: POP
29751: GO 29757
// end ;
29753: GO 29718
29755: POP
29756: POP
// end ;
29757: LD_VAR 0 3
29761: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29762: LD_INT 0
29764: PPUSH
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29777: LD_VAR 0 1
29781: NOT
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 257
29792: PUSH
29793: LD_INT 9
29795: NONEQUAL
29796: OR
29797: IFFALSE 29801
// exit ;
29799: GO 30374
// side := GetSide ( unit ) ;
29801: LD_ADDR_VAR 0 9
29805: PUSH
29806: LD_VAR 0 1
29810: PPUSH
29811: CALL_OW 255
29815: ST_TO_ADDR
// tech_space := tech_spacanom ;
29816: LD_ADDR_VAR 0 12
29820: PUSH
29821: LD_INT 29
29823: ST_TO_ADDR
// tech_time := tech_taurad ;
29824: LD_ADDR_VAR 0 13
29828: PUSH
29829: LD_INT 28
29831: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29832: LD_ADDR_VAR 0 11
29836: PUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 310
29846: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29847: LD_VAR 0 11
29851: PPUSH
29852: CALL_OW 247
29856: PUSH
29857: LD_INT 2
29859: EQUAL
29860: IFFALSE 29864
// exit ;
29862: GO 30374
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29864: LD_ADDR_VAR 0 8
29868: PUSH
29869: LD_INT 81
29871: PUSH
29872: LD_VAR 0 9
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: LD_INT 21
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PPUSH
29902: CALL_OW 69
29906: ST_TO_ADDR
// if not tmp then
29907: LD_VAR 0 8
29911: NOT
29912: IFFALSE 29916
// exit ;
29914: GO 30374
// if in_unit then
29916: LD_VAR 0 11
29920: IFFALSE 29944
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29922: LD_ADDR_VAR 0 10
29926: PUSH
29927: LD_VAR 0 8
29931: PPUSH
29932: LD_VAR 0 11
29936: PPUSH
29937: CALL_OW 74
29941: ST_TO_ADDR
29942: GO 29964
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29944: LD_ADDR_VAR 0 10
29948: PUSH
29949: LD_VAR 0 8
29953: PPUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 74
29963: ST_TO_ADDR
// if not enemy then
29964: LD_VAR 0 10
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30374
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29973: LD_VAR 0 11
29977: PUSH
29978: LD_VAR 0 11
29982: PPUSH
29983: LD_VAR 0 10
29987: PPUSH
29988: CALL_OW 296
29992: PUSH
29993: LD_INT 13
29995: GREATER
29996: AND
29997: PUSH
29998: LD_VAR 0 1
30002: PPUSH
30003: LD_VAR 0 10
30007: PPUSH
30008: CALL_OW 296
30012: PUSH
30013: LD_INT 12
30015: GREATER
30016: OR
30017: IFFALSE 30021
// exit ;
30019: GO 30374
// missile := [ 1 ] ;
30021: LD_ADDR_VAR 0 14
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: EMPTY
30030: LIST
30031: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30032: LD_VAR 0 9
30036: PPUSH
30037: LD_VAR 0 12
30041: PPUSH
30042: CALL_OW 325
30046: IFFALSE 30075
// missile := Replace ( missile , missile + 1 , 2 ) ;
30048: LD_ADDR_VAR 0 14
30052: PUSH
30053: LD_VAR 0 14
30057: PPUSH
30058: LD_VAR 0 14
30062: PUSH
30063: LD_INT 1
30065: PLUS
30066: PPUSH
30067: LD_INT 2
30069: PPUSH
30070: CALL_OW 1
30074: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30075: LD_VAR 0 9
30079: PPUSH
30080: LD_VAR 0 13
30084: PPUSH
30085: CALL_OW 325
30089: PUSH
30090: LD_VAR 0 10
30094: PPUSH
30095: CALL_OW 255
30099: PPUSH
30100: LD_VAR 0 13
30104: PPUSH
30105: CALL_OW 325
30109: NOT
30110: AND
30111: IFFALSE 30140
// missile := Replace ( missile , missile + 1 , 3 ) ;
30113: LD_ADDR_VAR 0 14
30117: PUSH
30118: LD_VAR 0 14
30122: PPUSH
30123: LD_VAR 0 14
30127: PUSH
30128: LD_INT 1
30130: PLUS
30131: PPUSH
30132: LD_INT 3
30134: PPUSH
30135: CALL_OW 1
30139: ST_TO_ADDR
// if missile < 2 then
30140: LD_VAR 0 14
30144: PUSH
30145: LD_INT 2
30147: LESS
30148: IFFALSE 30152
// exit ;
30150: GO 30374
// x := GetX ( enemy ) ;
30152: LD_ADDR_VAR 0 4
30156: PUSH
30157: LD_VAR 0 10
30161: PPUSH
30162: CALL_OW 250
30166: ST_TO_ADDR
// y := GetY ( enemy ) ;
30167: LD_ADDR_VAR 0 5
30171: PUSH
30172: LD_VAR 0 10
30176: PPUSH
30177: CALL_OW 251
30181: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30182: LD_ADDR_VAR 0 6
30186: PUSH
30187: LD_VAR 0 4
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PPUSH
30196: LD_INT 1
30198: PPUSH
30199: CALL_OW 12
30203: PLUS
30204: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30205: LD_ADDR_VAR 0 7
30209: PUSH
30210: LD_VAR 0 5
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PPUSH
30219: LD_INT 1
30221: PPUSH
30222: CALL_OW 12
30226: PLUS
30227: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30228: LD_VAR 0 6
30232: PPUSH
30233: LD_VAR 0 7
30237: PPUSH
30238: CALL_OW 488
30242: NOT
30243: IFFALSE 30265
// begin _x := x ;
30245: LD_ADDR_VAR 0 6
30249: PUSH
30250: LD_VAR 0 4
30254: ST_TO_ADDR
// _y := y ;
30255: LD_ADDR_VAR 0 7
30259: PUSH
30260: LD_VAR 0 5
30264: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30265: LD_ADDR_VAR 0 3
30269: PUSH
30270: LD_INT 1
30272: PPUSH
30273: LD_VAR 0 14
30277: PPUSH
30278: CALL_OW 12
30282: ST_TO_ADDR
// case i of 1 :
30283: LD_VAR 0 3
30287: PUSH
30288: LD_INT 1
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30313
30296: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_VAR 0 10
30306: PPUSH
30307: CALL_OW 115
30311: GO 30374
30313: LD_INT 2
30315: DOUBLE
30316: EQUAL
30317: IFTRUE 30321
30319: GO 30343
30321: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30322: LD_VAR 0 1
30326: PPUSH
30327: LD_VAR 0 6
30331: PPUSH
30332: LD_VAR 0 7
30336: PPUSH
30337: CALL_OW 153
30341: GO 30374
30343: LD_INT 3
30345: DOUBLE
30346: EQUAL
30347: IFTRUE 30351
30349: GO 30373
30351: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30352: LD_VAR 0 1
30356: PPUSH
30357: LD_VAR 0 6
30361: PPUSH
30362: LD_VAR 0 7
30366: PPUSH
30367: CALL_OW 154
30371: GO 30374
30373: POP
// end ;
30374: LD_VAR 0 2
30378: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30379: LD_INT 0
30381: PPUSH
30382: PPUSH
30383: PPUSH
30384: PPUSH
30385: PPUSH
30386: PPUSH
// if not unit or not building then
30387: LD_VAR 0 1
30391: NOT
30392: PUSH
30393: LD_VAR 0 2
30397: NOT
30398: OR
30399: IFFALSE 30403
// exit ;
30401: GO 30561
// x := GetX ( building ) ;
30403: LD_ADDR_VAR 0 5
30407: PUSH
30408: LD_VAR 0 2
30412: PPUSH
30413: CALL_OW 250
30417: ST_TO_ADDR
// y := GetY ( building ) ;
30418: LD_ADDR_VAR 0 6
30422: PUSH
30423: LD_VAR 0 2
30427: PPUSH
30428: CALL_OW 251
30432: ST_TO_ADDR
// for i = 0 to 5 do
30433: LD_ADDR_VAR 0 4
30437: PUSH
30438: DOUBLE
30439: LD_INT 0
30441: DEC
30442: ST_TO_ADDR
30443: LD_INT 5
30445: PUSH
30446: FOR_TO
30447: IFFALSE 30559
// begin _x := ShiftX ( x , i , 3 ) ;
30449: LD_ADDR_VAR 0 7
30453: PUSH
30454: LD_VAR 0 5
30458: PPUSH
30459: LD_VAR 0 4
30463: PPUSH
30464: LD_INT 3
30466: PPUSH
30467: CALL_OW 272
30471: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30472: LD_ADDR_VAR 0 8
30476: PUSH
30477: LD_VAR 0 6
30481: PPUSH
30482: LD_VAR 0 4
30486: PPUSH
30487: LD_INT 3
30489: PPUSH
30490: CALL_OW 273
30494: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30495: LD_VAR 0 7
30499: PPUSH
30500: LD_VAR 0 8
30504: PPUSH
30505: CALL_OW 488
30509: NOT
30510: IFFALSE 30514
// continue ;
30512: GO 30446
// if HexInfo ( _x , _y ) = 0 then
30514: LD_VAR 0 7
30518: PPUSH
30519: LD_VAR 0 8
30523: PPUSH
30524: CALL_OW 428
30528: PUSH
30529: LD_INT 0
30531: EQUAL
30532: IFFALSE 30557
// begin ComMoveXY ( unit , _x , _y ) ;
30534: LD_VAR 0 1
30538: PPUSH
30539: LD_VAR 0 7
30543: PPUSH
30544: LD_VAR 0 8
30548: PPUSH
30549: CALL_OW 111
// exit ;
30553: POP
30554: POP
30555: GO 30561
// end ; end ;
30557: GO 30446
30559: POP
30560: POP
// end ;
30561: LD_VAR 0 3
30565: RET
// export function ScanBase ( side , base_area ) ; begin
30566: LD_INT 0
30568: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30569: LD_ADDR_VAR 0 3
30573: PUSH
30574: LD_VAR 0 2
30578: PPUSH
30579: LD_INT 81
30581: PUSH
30582: LD_VAR 0 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 70
30595: ST_TO_ADDR
// end ;
30596: LD_VAR 0 3
30600: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30601: LD_INT 0
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
// result := false ;
30607: LD_ADDR_VAR 0 2
30611: PUSH
30612: LD_INT 0
30614: ST_TO_ADDR
// side := GetSide ( unit ) ;
30615: LD_ADDR_VAR 0 3
30619: PUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: CALL_OW 255
30629: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30630: LD_ADDR_VAR 0 4
30634: PUSH
30635: LD_VAR 0 1
30639: PPUSH
30640: CALL_OW 248
30644: ST_TO_ADDR
// case nat of 1 :
30645: LD_VAR 0 4
30649: PUSH
30650: LD_INT 1
30652: DOUBLE
30653: EQUAL
30654: IFTRUE 30658
30656: GO 30669
30658: POP
// tech := tech_lassight ; 2 :
30659: LD_ADDR_VAR 0 5
30663: PUSH
30664: LD_INT 12
30666: ST_TO_ADDR
30667: GO 30708
30669: LD_INT 2
30671: DOUBLE
30672: EQUAL
30673: IFTRUE 30677
30675: GO 30688
30677: POP
// tech := tech_mortar ; 3 :
30678: LD_ADDR_VAR 0 5
30682: PUSH
30683: LD_INT 41
30685: ST_TO_ADDR
30686: GO 30708
30688: LD_INT 3
30690: DOUBLE
30691: EQUAL
30692: IFTRUE 30696
30694: GO 30707
30696: POP
// tech := tech_bazooka ; end ;
30697: LD_ADDR_VAR 0 5
30701: PUSH
30702: LD_INT 44
30704: ST_TO_ADDR
30705: GO 30708
30707: POP
// if Researched ( side , tech ) then
30708: LD_VAR 0 3
30712: PPUSH
30713: LD_VAR 0 5
30717: PPUSH
30718: CALL_OW 325
30722: IFFALSE 30749
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30724: LD_ADDR_VAR 0 2
30728: PUSH
30729: LD_INT 5
30731: PUSH
30732: LD_INT 8
30734: PUSH
30735: LD_INT 9
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: PUSH
30743: LD_VAR 0 4
30747: ARRAY
30748: ST_TO_ADDR
// end ;
30749: LD_VAR 0 2
30753: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30754: LD_INT 0
30756: PPUSH
30757: PPUSH
30758: PPUSH
// if not mines then
30759: LD_VAR 0 2
30763: NOT
30764: IFFALSE 30768
// exit ;
30766: GO 30912
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30768: LD_ADDR_VAR 0 5
30772: PUSH
30773: LD_INT 81
30775: PUSH
30776: LD_VAR 0 1
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 21
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PPUSH
30806: CALL_OW 69
30810: ST_TO_ADDR
// for i in mines do
30811: LD_ADDR_VAR 0 4
30815: PUSH
30816: LD_VAR 0 2
30820: PUSH
30821: FOR_IN
30822: IFFALSE 30910
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30824: LD_VAR 0 4
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PPUSH
30833: LD_VAR 0 4
30837: PUSH
30838: LD_INT 2
30840: ARRAY
30841: PPUSH
30842: CALL_OW 458
30846: NOT
30847: IFFALSE 30851
// continue ;
30849: GO 30821
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30851: LD_VAR 0 4
30855: PUSH
30856: LD_INT 1
30858: ARRAY
30859: PPUSH
30860: LD_VAR 0 4
30864: PUSH
30865: LD_INT 2
30867: ARRAY
30868: PPUSH
30869: CALL_OW 428
30873: PUSH
30874: LD_VAR 0 5
30878: IN
30879: IFFALSE 30908
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30881: LD_VAR 0 4
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: PPUSH
30890: LD_VAR 0 4
30894: PUSH
30895: LD_INT 2
30897: ARRAY
30898: PPUSH
30899: LD_VAR 0 1
30903: PPUSH
30904: CALL_OW 456
// end ;
30908: GO 30821
30910: POP
30911: POP
// end ;
30912: LD_VAR 0 3
30916: RET
// export function Count ( array ) ; var i ; begin
30917: LD_INT 0
30919: PPUSH
30920: PPUSH
// result := 0 ;
30921: LD_ADDR_VAR 0 2
30925: PUSH
30926: LD_INT 0
30928: ST_TO_ADDR
// for i in array do
30929: LD_ADDR_VAR 0 3
30933: PUSH
30934: LD_VAR 0 1
30938: PUSH
30939: FOR_IN
30940: IFFALSE 30964
// if i then
30942: LD_VAR 0 3
30946: IFFALSE 30962
// result := result + 1 ;
30948: LD_ADDR_VAR 0 2
30952: PUSH
30953: LD_VAR 0 2
30957: PUSH
30958: LD_INT 1
30960: PLUS
30961: ST_TO_ADDR
30962: GO 30939
30964: POP
30965: POP
// end ;
30966: LD_VAR 0 2
30970: RET
// export function IsEmpty ( building ) ; begin
30971: LD_INT 0
30973: PPUSH
// if not building then
30974: LD_VAR 0 1
30978: NOT
30979: IFFALSE 30983
// exit ;
30981: GO 31026
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30983: LD_ADDR_VAR 0 2
30987: PUSH
30988: LD_VAR 0 1
30992: PUSH
30993: LD_INT 22
30995: PUSH
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 255
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 58
31012: PUSH
31013: EMPTY
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PPUSH
31020: CALL_OW 69
31024: IN
31025: ST_TO_ADDR
// end ;
31026: LD_VAR 0 2
31030: RET
// export function IsNotFull ( building ) ; var places ; begin
31031: LD_INT 0
31033: PPUSH
31034: PPUSH
// if not building then
31035: LD_VAR 0 1
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31215
// result := false ;
31044: LD_ADDR_VAR 0 2
31048: PUSH
31049: LD_INT 0
31051: ST_TO_ADDR
// places := 0 ;
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 0
31059: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31060: LD_VAR 0 1
31064: PPUSH
31065: CALL_OW 266
31069: PUSH
31070: LD_INT 0
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31132
31076: LD_INT 1
31078: DOUBLE
31079: EQUAL
31080: IFTRUE 31132
31082: LD_INT 6
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31132
31088: LD_INT 7
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31132
31094: LD_INT 8
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31132
31100: LD_INT 4
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31132
31106: LD_INT 5
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31132
31112: LD_INT 2
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31132
31118: LD_INT 3
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31132
31124: LD_INT 35
31126: DOUBLE
31127: EQUAL
31128: IFTRUE 31132
31130: GO 31143
31132: POP
// places := 6 ; b_bunker , b_breastwork :
31133: LD_ADDR_VAR 0 3
31137: PUSH
31138: LD_INT 6
31140: ST_TO_ADDR
31141: GO 31188
31143: LD_INT 32
31145: DOUBLE
31146: EQUAL
31147: IFTRUE 31157
31149: LD_INT 31
31151: DOUBLE
31152: EQUAL
31153: IFTRUE 31157
31155: GO 31168
31157: POP
// places := 1 ; b_control_tower :
31158: LD_ADDR_VAR 0 3
31162: PUSH
31163: LD_INT 1
31165: ST_TO_ADDR
31166: GO 31188
31168: LD_INT 36
31170: DOUBLE
31171: EQUAL
31172: IFTRUE 31176
31174: GO 31187
31176: POP
// places := 3 ; end ;
31177: LD_ADDR_VAR 0 3
31181: PUSH
31182: LD_INT 3
31184: ST_TO_ADDR
31185: GO 31188
31187: POP
// if places then
31188: LD_VAR 0 3
31192: IFFALSE 31215
// result := UnitsInside ( building ) < places ;
31194: LD_ADDR_VAR 0 2
31198: PUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 313
31208: PUSH
31209: LD_VAR 0 3
31213: LESS
31214: ST_TO_ADDR
// end ;
31215: LD_VAR 0 2
31219: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31220: LD_INT 0
31222: PPUSH
31223: PPUSH
31224: PPUSH
31225: PPUSH
// tmp := [ ] ;
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: EMPTY
31232: ST_TO_ADDR
// list := [ ] ;
31233: LD_ADDR_VAR 0 5
31237: PUSH
31238: EMPTY
31239: ST_TO_ADDR
// for i = 16 to 25 do
31240: LD_ADDR_VAR 0 4
31244: PUSH
31245: DOUBLE
31246: LD_INT 16
31248: DEC
31249: ST_TO_ADDR
31250: LD_INT 25
31252: PUSH
31253: FOR_TO
31254: IFFALSE 31327
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_VAR 0 3
31265: PUSH
31266: LD_INT 22
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 255
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 91
31285: PUSH
31286: LD_VAR 0 1
31290: PUSH
31291: LD_INT 6
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 30
31301: PUSH
31302: LD_VAR 0 4
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: PPUSH
31319: CALL_OW 69
31323: ADD
31324: ST_TO_ADDR
31325: GO 31253
31327: POP
31328: POP
// for i = 1 to tmp do
31329: LD_ADDR_VAR 0 4
31333: PUSH
31334: DOUBLE
31335: LD_INT 1
31337: DEC
31338: ST_TO_ADDR
31339: LD_VAR 0 3
31343: PUSH
31344: FOR_TO
31345: IFFALSE 31433
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31347: LD_ADDR_VAR 0 5
31351: PUSH
31352: LD_VAR 0 5
31356: PUSH
31357: LD_VAR 0 3
31361: PUSH
31362: LD_VAR 0 4
31366: ARRAY
31367: PPUSH
31368: CALL_OW 266
31372: PUSH
31373: LD_VAR 0 3
31377: PUSH
31378: LD_VAR 0 4
31382: ARRAY
31383: PPUSH
31384: CALL_OW 250
31388: PUSH
31389: LD_VAR 0 3
31393: PUSH
31394: LD_VAR 0 4
31398: ARRAY
31399: PPUSH
31400: CALL_OW 251
31404: PUSH
31405: LD_VAR 0 3
31409: PUSH
31410: LD_VAR 0 4
31414: ARRAY
31415: PPUSH
31416: CALL_OW 254
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: PUSH
31427: EMPTY
31428: LIST
31429: ADD
31430: ST_TO_ADDR
31431: GO 31344
31433: POP
31434: POP
// result := list ;
31435: LD_ADDR_VAR 0 2
31439: PUSH
31440: LD_VAR 0 5
31444: ST_TO_ADDR
// end ;
31445: LD_VAR 0 2
31449: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31450: LD_INT 0
31452: PPUSH
31453: PPUSH
31454: PPUSH
31455: PPUSH
31456: PPUSH
31457: PPUSH
31458: PPUSH
// if not factory then
31459: LD_VAR 0 1
31463: NOT
31464: IFFALSE 31468
// exit ;
31466: GO 32061
// if control = control_apeman then
31468: LD_VAR 0 4
31472: PUSH
31473: LD_INT 5
31475: EQUAL
31476: IFFALSE 31585
// begin tmp := UnitsInside ( factory ) ;
31478: LD_ADDR_VAR 0 8
31482: PUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 313
31492: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31493: LD_VAR 0 8
31497: PPUSH
31498: LD_INT 25
31500: PUSH
31501: LD_INT 12
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PPUSH
31508: CALL_OW 72
31512: NOT
31513: IFFALSE 31523
// control := control_manual ;
31515: LD_ADDR_VAR 0 4
31519: PUSH
31520: LD_INT 1
31522: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31523: LD_ADDR_VAR 0 8
31527: PUSH
31528: LD_VAR 0 1
31532: PPUSH
31533: CALL 31220 0 1
31537: ST_TO_ADDR
// if tmp then
31538: LD_VAR 0 8
31542: IFFALSE 31585
// begin for i in tmp do
31544: LD_ADDR_VAR 0 7
31548: PUSH
31549: LD_VAR 0 8
31553: PUSH
31554: FOR_IN
31555: IFFALSE 31583
// if i [ 1 ] = b_ext_radio then
31557: LD_VAR 0 7
31561: PUSH
31562: LD_INT 1
31564: ARRAY
31565: PUSH
31566: LD_INT 22
31568: EQUAL
31569: IFFALSE 31581
// begin control := control_remote ;
31571: LD_ADDR_VAR 0 4
31575: PUSH
31576: LD_INT 2
31578: ST_TO_ADDR
// break ;
31579: GO 31583
// end ;
31581: GO 31554
31583: POP
31584: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31585: LD_VAR 0 1
31589: PPUSH
31590: LD_VAR 0 2
31594: PPUSH
31595: LD_VAR 0 3
31599: PPUSH
31600: LD_VAR 0 4
31604: PPUSH
31605: LD_VAR 0 5
31609: PPUSH
31610: CALL_OW 448
31614: IFFALSE 31649
// begin result := [ chassis , engine , control , weapon ] ;
31616: LD_ADDR_VAR 0 6
31620: PUSH
31621: LD_VAR 0 2
31625: PUSH
31626: LD_VAR 0 3
31630: PUSH
31631: LD_VAR 0 4
31635: PUSH
31636: LD_VAR 0 5
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: ST_TO_ADDR
// exit ;
31647: GO 32061
// end ; _chassis := AvailableChassisList ( factory ) ;
31649: LD_ADDR_VAR 0 9
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 475
31663: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31664: LD_ADDR_VAR 0 11
31668: PUSH
31669: LD_VAR 0 1
31673: PPUSH
31674: CALL_OW 476
31678: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31679: LD_ADDR_VAR 0 12
31683: PUSH
31684: LD_VAR 0 1
31688: PPUSH
31689: CALL_OW 477
31693: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31694: LD_ADDR_VAR 0 10
31698: PUSH
31699: LD_VAR 0 1
31703: PPUSH
31704: CALL_OW 478
31708: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31709: LD_VAR 0 9
31713: NOT
31714: PUSH
31715: LD_VAR 0 11
31719: NOT
31720: OR
31721: PUSH
31722: LD_VAR 0 12
31726: NOT
31727: OR
31728: PUSH
31729: LD_VAR 0 10
31733: NOT
31734: OR
31735: IFFALSE 31770
// begin result := [ chassis , engine , control , weapon ] ;
31737: LD_ADDR_VAR 0 6
31741: PUSH
31742: LD_VAR 0 2
31746: PUSH
31747: LD_VAR 0 3
31751: PUSH
31752: LD_VAR 0 4
31756: PUSH
31757: LD_VAR 0 5
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: ST_TO_ADDR
// exit ;
31768: GO 32061
// end ; if not chassis in _chassis then
31770: LD_VAR 0 2
31774: PUSH
31775: LD_VAR 0 9
31779: IN
31780: NOT
31781: IFFALSE 31807
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31783: LD_ADDR_VAR 0 2
31787: PUSH
31788: LD_VAR 0 9
31792: PUSH
31793: LD_INT 1
31795: PPUSH
31796: LD_VAR 0 9
31800: PPUSH
31801: CALL_OW 12
31805: ARRAY
31806: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31807: LD_VAR 0 2
31811: PPUSH
31812: LD_VAR 0 3
31816: PPUSH
31817: CALL 32066 0 2
31821: NOT
31822: IFFALSE 31881
// repeat engine := _engine [ 1 ] ;
31824: LD_ADDR_VAR 0 3
31828: PUSH
31829: LD_VAR 0 11
31833: PUSH
31834: LD_INT 1
31836: ARRAY
31837: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31838: LD_ADDR_VAR 0 11
31842: PUSH
31843: LD_VAR 0 11
31847: PPUSH
31848: LD_INT 1
31850: PPUSH
31851: CALL_OW 3
31855: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31856: LD_VAR 0 2
31860: PPUSH
31861: LD_VAR 0 3
31865: PPUSH
31866: CALL 32066 0 2
31870: PUSH
31871: LD_VAR 0 11
31875: PUSH
31876: EMPTY
31877: EQUAL
31878: OR
31879: IFFALSE 31824
// if not control in _control then
31881: LD_VAR 0 4
31885: PUSH
31886: LD_VAR 0 12
31890: IN
31891: NOT
31892: IFFALSE 31918
// control := _control [ rand ( 1 , _control ) ] ;
31894: LD_ADDR_VAR 0 4
31898: PUSH
31899: LD_VAR 0 12
31903: PUSH
31904: LD_INT 1
31906: PPUSH
31907: LD_VAR 0 12
31911: PPUSH
31912: CALL_OW 12
31916: ARRAY
31917: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31918: LD_VAR 0 2
31922: PPUSH
31923: LD_VAR 0 5
31927: PPUSH
31928: CALL 32286 0 2
31932: NOT
31933: IFFALSE 31992
// repeat weapon := _weapon [ 1 ] ;
31935: LD_ADDR_VAR 0 5
31939: PUSH
31940: LD_VAR 0 10
31944: PUSH
31945: LD_INT 1
31947: ARRAY
31948: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31949: LD_ADDR_VAR 0 10
31953: PUSH
31954: LD_VAR 0 10
31958: PPUSH
31959: LD_INT 1
31961: PPUSH
31962: CALL_OW 3
31966: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31967: LD_VAR 0 2
31971: PPUSH
31972: LD_VAR 0 5
31976: PPUSH
31977: CALL 32286 0 2
31981: PUSH
31982: LD_VAR 0 10
31986: PUSH
31987: EMPTY
31988: EQUAL
31989: OR
31990: IFFALSE 31935
// result := [ ] ;
31992: LD_ADDR_VAR 0 6
31996: PUSH
31997: EMPTY
31998: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31999: LD_VAR 0 1
32003: PPUSH
32004: LD_VAR 0 2
32008: PPUSH
32009: LD_VAR 0 3
32013: PPUSH
32014: LD_VAR 0 4
32018: PPUSH
32019: LD_VAR 0 5
32023: PPUSH
32024: CALL_OW 448
32028: IFFALSE 32061
// result := [ chassis , engine , control , weapon ] ;
32030: LD_ADDR_VAR 0 6
32034: PUSH
32035: LD_VAR 0 2
32039: PUSH
32040: LD_VAR 0 3
32044: PUSH
32045: LD_VAR 0 4
32049: PUSH
32050: LD_VAR 0 5
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: ST_TO_ADDR
// end ;
32061: LD_VAR 0 6
32065: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32066: LD_INT 0
32068: PPUSH
// if not chassis or not engine then
32069: LD_VAR 0 1
32073: NOT
32074: PUSH
32075: LD_VAR 0 2
32079: NOT
32080: OR
32081: IFFALSE 32085
// exit ;
32083: GO 32281
// case engine of engine_solar :
32085: LD_VAR 0 2
32089: PUSH
32090: LD_INT 2
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32136
32098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32099: LD_ADDR_VAR 0 3
32103: PUSH
32104: LD_INT 11
32106: PUSH
32107: LD_INT 12
32109: PUSH
32110: LD_INT 13
32112: PUSH
32113: LD_INT 14
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
32134: GO 32265
32136: LD_INT 1
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32144
32142: GO 32206
32144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32145: LD_ADDR_VAR 0 3
32149: PUSH
32150: LD_INT 11
32152: PUSH
32153: LD_INT 12
32155: PUSH
32156: LD_INT 13
32158: PUSH
32159: LD_INT 14
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 3
32170: PUSH
32171: LD_INT 4
32173: PUSH
32174: LD_INT 5
32176: PUSH
32177: LD_INT 21
32179: PUSH
32180: LD_INT 23
32182: PUSH
32183: LD_INT 22
32185: PUSH
32186: LD_INT 24
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: ST_TO_ADDR
32204: GO 32265
32206: LD_INT 3
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32214
32212: GO 32264
32214: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32215: LD_ADDR_VAR 0 3
32219: PUSH
32220: LD_INT 13
32222: PUSH
32223: LD_INT 14
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: LD_INT 4
32234: PUSH
32235: LD_INT 5
32237: PUSH
32238: LD_INT 21
32240: PUSH
32241: LD_INT 22
32243: PUSH
32244: LD_INT 23
32246: PUSH
32247: LD_INT 24
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: ST_TO_ADDR
32262: GO 32265
32264: POP
// result := ( chassis in result ) ;
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: LD_VAR 0 1
32274: PUSH
32275: LD_VAR 0 3
32279: IN
32280: ST_TO_ADDR
// end ;
32281: LD_VAR 0 3
32285: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32286: LD_INT 0
32288: PPUSH
// if not chassis or not weapon then
32289: LD_VAR 0 1
32293: NOT
32294: PUSH
32295: LD_VAR 0 2
32299: NOT
32300: OR
32301: IFFALSE 32305
// exit ;
32303: GO 33365
// case weapon of us_machine_gun :
32305: LD_VAR 0 2
32309: PUSH
32310: LD_INT 2
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32318
32316: GO 32348
32318: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: LD_INT 4
32335: PUSH
32336: LD_INT 5
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: ST_TO_ADDR
32346: GO 33349
32348: LD_INT 3
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32386
32356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32357: LD_ADDR_VAR 0 3
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: LD_INT 4
32373: PUSH
32374: LD_INT 5
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: ST_TO_ADDR
32384: GO 33349
32386: LD_INT 11
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32424
32394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: LD_INT 4
32411: PUSH
32412: LD_INT 5
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
32422: GO 33349
32424: LD_INT 4
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32458
32432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: LD_INT 4
32446: PUSH
32447: LD_INT 5
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
32456: GO 33349
32458: LD_INT 5
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32492
32466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32467: LD_ADDR_VAR 0 3
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: LD_INT 4
32480: PUSH
32481: LD_INT 5
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
32490: GO 33349
32492: LD_INT 9
32494: DOUBLE
32495: EQUAL
32496: IFTRUE 32500
32498: GO 32526
32500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32501: LD_ADDR_VAR 0 3
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: LD_INT 3
32511: PUSH
32512: LD_INT 4
32514: PUSH
32515: LD_INT 5
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
32524: GO 33349
32526: LD_INT 7
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32534
32532: GO 32560
32534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32535: LD_ADDR_VAR 0 3
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 3
32545: PUSH
32546: LD_INT 4
32548: PUSH
32549: LD_INT 5
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
32558: GO 33349
32560: LD_INT 12
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32594
32568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32569: LD_ADDR_VAR 0 3
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
32592: GO 33349
32594: LD_INT 13
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32602
32600: GO 32628
32602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32603: LD_ADDR_VAR 0 3
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 4
32616: PUSH
32617: LD_INT 5
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
32626: GO 33349
32628: LD_INT 14
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32654
32636: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 4
32644: PUSH
32645: LD_INT 5
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: ST_TO_ADDR
32652: GO 33349
32654: LD_INT 6
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32680
32662: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32663: LD_ADDR_VAR 0 3
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: ST_TO_ADDR
32678: GO 33349
32680: LD_INT 10
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32706
32688: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 4
32696: PUSH
32697: LD_INT 5
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: ST_TO_ADDR
32704: GO 33349
32706: LD_INT 22
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32740
32714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: LD_INT 13
32728: PUSH
32729: LD_INT 14
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
32738: GO 33349
32740: LD_INT 23
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32774
32748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32749: LD_ADDR_VAR 0 3
32753: PUSH
32754: LD_INT 11
32756: PUSH
32757: LD_INT 12
32759: PUSH
32760: LD_INT 13
32762: PUSH
32763: LD_INT 14
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: ST_TO_ADDR
32772: GO 33349
32774: LD_INT 24
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32808
32782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: LD_INT 11
32790: PUSH
32791: LD_INT 12
32793: PUSH
32794: LD_INT 13
32796: PUSH
32797: LD_INT 14
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: ST_TO_ADDR
32806: GO 33349
32808: LD_INT 30
32810: DOUBLE
32811: EQUAL
32812: IFTRUE 32816
32814: GO 32842
32816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32817: LD_ADDR_VAR 0 3
32821: PUSH
32822: LD_INT 11
32824: PUSH
32825: LD_INT 12
32827: PUSH
32828: LD_INT 13
32830: PUSH
32831: LD_INT 14
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
32840: GO 33349
32842: LD_INT 25
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32868
32850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_INT 13
32858: PUSH
32859: LD_INT 14
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: ST_TO_ADDR
32866: GO 33349
32868: LD_INT 27
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32894
32876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32877: LD_ADDR_VAR 0 3
32881: PUSH
32882: LD_INT 13
32884: PUSH
32885: LD_INT 14
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: ST_TO_ADDR
32892: GO 33349
32894: LD_INT 92
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32928
32902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: LD_INT 11
32910: PUSH
32911: LD_INT 12
32913: PUSH
32914: LD_INT 13
32916: PUSH
32917: LD_INT 14
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
32926: GO 33349
32928: LD_INT 28
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32936
32934: GO 32954
32936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32937: LD_ADDR_VAR 0 3
32941: PUSH
32942: LD_INT 13
32944: PUSH
32945: LD_INT 14
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: ST_TO_ADDR
32952: GO 33349
32954: LD_INT 29
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32980
32962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_INT 13
32970: PUSH
32971: LD_INT 14
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: ST_TO_ADDR
32978: GO 33349
32980: LD_INT 31
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 33006
32988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_INT 13
32996: PUSH
32997: LD_INT 14
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: ST_TO_ADDR
33004: GO 33349
33006: LD_INT 26
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33032
33014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33015: LD_ADDR_VAR 0 3
33019: PUSH
33020: LD_INT 13
33022: PUSH
33023: LD_INT 14
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: ST_TO_ADDR
33030: GO 33349
33032: LD_INT 42
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33040
33038: GO 33066
33040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_INT 21
33048: PUSH
33049: LD_INT 22
33051: PUSH
33052: LD_INT 23
33054: PUSH
33055: LD_INT 24
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: ST_TO_ADDR
33064: GO 33349
33066: LD_INT 43
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33100
33074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_INT 21
33082: PUSH
33083: LD_INT 22
33085: PUSH
33086: LD_INT 23
33088: PUSH
33089: LD_INT 24
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
33098: GO 33349
33100: LD_INT 44
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33134
33108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_INT 21
33116: PUSH
33117: LD_INT 22
33119: PUSH
33120: LD_INT 23
33122: PUSH
33123: LD_INT 24
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
33132: GO 33349
33134: LD_INT 45
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33168
33142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_INT 21
33150: PUSH
33151: LD_INT 22
33153: PUSH
33154: LD_INT 23
33156: PUSH
33157: LD_INT 24
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
33166: GO 33349
33168: LD_INT 49
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33202
33176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33177: LD_ADDR_VAR 0 3
33181: PUSH
33182: LD_INT 21
33184: PUSH
33185: LD_INT 22
33187: PUSH
33188: LD_INT 23
33190: PUSH
33191: LD_INT 24
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
33200: GO 33349
33202: LD_INT 51
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33210
33208: GO 33236
33210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_INT 21
33218: PUSH
33219: LD_INT 22
33221: PUSH
33222: LD_INT 23
33224: PUSH
33225: LD_INT 24
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
33234: GO 33349
33236: LD_INT 52
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33270
33244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: LD_INT 21
33252: PUSH
33253: LD_INT 22
33255: PUSH
33256: LD_INT 23
33258: PUSH
33259: LD_INT 24
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
33268: GO 33349
33270: LD_INT 53
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33278
33276: GO 33296
33278: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33279: LD_ADDR_VAR 0 3
33283: PUSH
33284: LD_INT 23
33286: PUSH
33287: LD_INT 24
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: ST_TO_ADDR
33294: GO 33349
33296: LD_INT 46
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33322
33304: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33305: LD_ADDR_VAR 0 3
33309: PUSH
33310: LD_INT 23
33312: PUSH
33313: LD_INT 24
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: ST_TO_ADDR
33320: GO 33349
33322: LD_INT 47
33324: DOUBLE
33325: EQUAL
33326: IFTRUE 33330
33328: GO 33348
33330: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_INT 23
33338: PUSH
33339: LD_INT 24
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: ST_TO_ADDR
33346: GO 33349
33348: POP
// result := ( chassis in result ) ;
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: LD_VAR 0 1
33358: PUSH
33359: LD_VAR 0 3
33363: IN
33364: ST_TO_ADDR
// end ;
33365: LD_VAR 0 3
33369: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33370: LD_INT 0
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
// result := array ;
33379: LD_ADDR_VAR 0 5
33383: PUSH
33384: LD_VAR 0 1
33388: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33389: LD_VAR 0 1
33393: NOT
33394: PUSH
33395: LD_VAR 0 2
33399: NOT
33400: OR
33401: PUSH
33402: LD_VAR 0 3
33406: NOT
33407: OR
33408: PUSH
33409: LD_VAR 0 2
33413: PUSH
33414: LD_VAR 0 1
33418: GREATER
33419: OR
33420: PUSH
33421: LD_VAR 0 3
33425: PUSH
33426: LD_VAR 0 1
33430: GREATER
33431: OR
33432: IFFALSE 33436
// exit ;
33434: GO 33732
// if direction then
33436: LD_VAR 0 4
33440: IFFALSE 33504
// begin d := 1 ;
33442: LD_ADDR_VAR 0 9
33446: PUSH
33447: LD_INT 1
33449: ST_TO_ADDR
// if i_from > i_to then
33450: LD_VAR 0 2
33454: PUSH
33455: LD_VAR 0 3
33459: GREATER
33460: IFFALSE 33486
// length := ( array - i_from ) + i_to else
33462: LD_ADDR_VAR 0 11
33466: PUSH
33467: LD_VAR 0 1
33471: PUSH
33472: LD_VAR 0 2
33476: MINUS
33477: PUSH
33478: LD_VAR 0 3
33482: PLUS
33483: ST_TO_ADDR
33484: GO 33502
// length := i_to - i_from ;
33486: LD_ADDR_VAR 0 11
33490: PUSH
33491: LD_VAR 0 3
33495: PUSH
33496: LD_VAR 0 2
33500: MINUS
33501: ST_TO_ADDR
// end else
33502: GO 33565
// begin d := - 1 ;
33504: LD_ADDR_VAR 0 9
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: ST_TO_ADDR
// if i_from > i_to then
33513: LD_VAR 0 2
33517: PUSH
33518: LD_VAR 0 3
33522: GREATER
33523: IFFALSE 33543
// length := i_from - i_to else
33525: LD_ADDR_VAR 0 11
33529: PUSH
33530: LD_VAR 0 2
33534: PUSH
33535: LD_VAR 0 3
33539: MINUS
33540: ST_TO_ADDR
33541: GO 33565
// length := ( array - i_to ) + i_from ;
33543: LD_ADDR_VAR 0 11
33547: PUSH
33548: LD_VAR 0 1
33552: PUSH
33553: LD_VAR 0 3
33557: MINUS
33558: PUSH
33559: LD_VAR 0 2
33563: PLUS
33564: ST_TO_ADDR
// end ; if not length then
33565: LD_VAR 0 11
33569: NOT
33570: IFFALSE 33574
// exit ;
33572: GO 33732
// tmp := array ;
33574: LD_ADDR_VAR 0 10
33578: PUSH
33579: LD_VAR 0 1
33583: ST_TO_ADDR
// for i = 1 to length do
33584: LD_ADDR_VAR 0 6
33588: PUSH
33589: DOUBLE
33590: LD_INT 1
33592: DEC
33593: ST_TO_ADDR
33594: LD_VAR 0 11
33598: PUSH
33599: FOR_TO
33600: IFFALSE 33720
// begin for j = 1 to array do
33602: LD_ADDR_VAR 0 7
33606: PUSH
33607: DOUBLE
33608: LD_INT 1
33610: DEC
33611: ST_TO_ADDR
33612: LD_VAR 0 1
33616: PUSH
33617: FOR_TO
33618: IFFALSE 33706
// begin k := j + d ;
33620: LD_ADDR_VAR 0 8
33624: PUSH
33625: LD_VAR 0 7
33629: PUSH
33630: LD_VAR 0 9
33634: PLUS
33635: ST_TO_ADDR
// if k > array then
33636: LD_VAR 0 8
33640: PUSH
33641: LD_VAR 0 1
33645: GREATER
33646: IFFALSE 33656
// k := 1 ;
33648: LD_ADDR_VAR 0 8
33652: PUSH
33653: LD_INT 1
33655: ST_TO_ADDR
// if not k then
33656: LD_VAR 0 8
33660: NOT
33661: IFFALSE 33673
// k := array ;
33663: LD_ADDR_VAR 0 8
33667: PUSH
33668: LD_VAR 0 1
33672: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33673: LD_ADDR_VAR 0 10
33677: PUSH
33678: LD_VAR 0 10
33682: PPUSH
33683: LD_VAR 0 8
33687: PPUSH
33688: LD_VAR 0 1
33692: PUSH
33693: LD_VAR 0 7
33697: ARRAY
33698: PPUSH
33699: CALL_OW 1
33703: ST_TO_ADDR
// end ;
33704: GO 33617
33706: POP
33707: POP
// array := tmp ;
33708: LD_ADDR_VAR 0 1
33712: PUSH
33713: LD_VAR 0 10
33717: ST_TO_ADDR
// end ;
33718: GO 33599
33720: POP
33721: POP
// result := array ;
33722: LD_ADDR_VAR 0 5
33726: PUSH
33727: LD_VAR 0 1
33731: ST_TO_ADDR
// end ;
33732: LD_VAR 0 5
33736: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33737: LD_INT 0
33739: PPUSH
33740: PPUSH
// result := 0 ;
33741: LD_ADDR_VAR 0 3
33745: PUSH
33746: LD_INT 0
33748: ST_TO_ADDR
// if not array or not value in array then
33749: LD_VAR 0 1
33753: NOT
33754: PUSH
33755: LD_VAR 0 2
33759: PUSH
33760: LD_VAR 0 1
33764: IN
33765: NOT
33766: OR
33767: IFFALSE 33771
// exit ;
33769: GO 33825
// for i = 1 to array do
33771: LD_ADDR_VAR 0 4
33775: PUSH
33776: DOUBLE
33777: LD_INT 1
33779: DEC
33780: ST_TO_ADDR
33781: LD_VAR 0 1
33785: PUSH
33786: FOR_TO
33787: IFFALSE 33823
// if value = array [ i ] then
33789: LD_VAR 0 2
33793: PUSH
33794: LD_VAR 0 1
33798: PUSH
33799: LD_VAR 0 4
33803: ARRAY
33804: EQUAL
33805: IFFALSE 33821
// begin result := i ;
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_VAR 0 4
33816: ST_TO_ADDR
// exit ;
33817: POP
33818: POP
33819: GO 33825
// end ;
33821: GO 33786
33823: POP
33824: POP
// end ;
33825: LD_VAR 0 3
33829: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33830: LD_INT 0
33832: PPUSH
// vc_chassis := chassis ;
33833: LD_ADDR_OWVAR 37
33837: PUSH
33838: LD_VAR 0 1
33842: ST_TO_ADDR
// vc_engine := engine ;
33843: LD_ADDR_OWVAR 39
33847: PUSH
33848: LD_VAR 0 2
33852: ST_TO_ADDR
// vc_control := control ;
33853: LD_ADDR_OWVAR 38
33857: PUSH
33858: LD_VAR 0 3
33862: ST_TO_ADDR
// vc_weapon := weapon ;
33863: LD_ADDR_OWVAR 40
33867: PUSH
33868: LD_VAR 0 4
33872: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33873: LD_ADDR_OWVAR 41
33877: PUSH
33878: LD_VAR 0 5
33882: ST_TO_ADDR
// end ;
33883: LD_VAR 0 6
33887: RET
// export function WantPlant ( unit ) ; var task ; begin
33888: LD_INT 0
33890: PPUSH
33891: PPUSH
// result := false ;
33892: LD_ADDR_VAR 0 2
33896: PUSH
33897: LD_INT 0
33899: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 437
33914: ST_TO_ADDR
// if task then
33915: LD_VAR 0 3
33919: IFFALSE 33947
// if task [ 1 ] [ 1 ] = p then
33921: LD_VAR 0 3
33925: PUSH
33926: LD_INT 1
33928: ARRAY
33929: PUSH
33930: LD_INT 1
33932: ARRAY
33933: PUSH
33934: LD_STRING p
33936: EQUAL
33937: IFFALSE 33947
// result := true ;
33939: LD_ADDR_VAR 0 2
33943: PUSH
33944: LD_INT 1
33946: ST_TO_ADDR
// end ;
33947: LD_VAR 0 2
33951: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33952: LD_INT 0
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
// if pos < 1 then
33958: LD_VAR 0 2
33962: PUSH
33963: LD_INT 1
33965: LESS
33966: IFFALSE 33970
// exit ;
33968: GO 34273
// if pos = 1 then
33970: LD_VAR 0 2
33974: PUSH
33975: LD_INT 1
33977: EQUAL
33978: IFFALSE 34011
// result := Replace ( arr , pos [ 1 ] , value ) else
33980: LD_ADDR_VAR 0 4
33984: PUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: LD_VAR 0 2
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: PPUSH
33999: LD_VAR 0 3
34003: PPUSH
34004: CALL_OW 1
34008: ST_TO_ADDR
34009: GO 34273
// begin tmp := arr ;
34011: LD_ADDR_VAR 0 6
34015: PUSH
34016: LD_VAR 0 1
34020: ST_TO_ADDR
// s_arr := [ tmp ] ;
34021: LD_ADDR_VAR 0 7
34025: PUSH
34026: LD_VAR 0 6
34030: PUSH
34031: EMPTY
34032: LIST
34033: ST_TO_ADDR
// for i = 1 to pos - 1 do
34034: LD_ADDR_VAR 0 5
34038: PUSH
34039: DOUBLE
34040: LD_INT 1
34042: DEC
34043: ST_TO_ADDR
34044: LD_VAR 0 2
34048: PUSH
34049: LD_INT 1
34051: MINUS
34052: PUSH
34053: FOR_TO
34054: IFFALSE 34099
// begin tmp := tmp [ pos [ i ] ] ;
34056: LD_ADDR_VAR 0 6
34060: PUSH
34061: LD_VAR 0 6
34065: PUSH
34066: LD_VAR 0 2
34070: PUSH
34071: LD_VAR 0 5
34075: ARRAY
34076: ARRAY
34077: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34078: LD_ADDR_VAR 0 7
34082: PUSH
34083: LD_VAR 0 7
34087: PUSH
34088: LD_VAR 0 6
34092: PUSH
34093: EMPTY
34094: LIST
34095: ADD
34096: ST_TO_ADDR
// end ;
34097: GO 34053
34099: POP
34100: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34101: LD_ADDR_VAR 0 6
34105: PUSH
34106: LD_VAR 0 6
34110: PPUSH
34111: LD_VAR 0 2
34115: PUSH
34116: LD_VAR 0 2
34120: ARRAY
34121: PPUSH
34122: LD_VAR 0 3
34126: PPUSH
34127: CALL_OW 1
34131: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34132: LD_ADDR_VAR 0 7
34136: PUSH
34137: LD_VAR 0 7
34141: PPUSH
34142: LD_VAR 0 7
34146: PPUSH
34147: LD_VAR 0 6
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
// for i = s_arr downto 2 do
34157: LD_ADDR_VAR 0 5
34161: PUSH
34162: DOUBLE
34163: LD_VAR 0 7
34167: INC
34168: ST_TO_ADDR
34169: LD_INT 2
34171: PUSH
34172: FOR_DOWNTO
34173: IFFALSE 34257
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34175: LD_ADDR_VAR 0 6
34179: PUSH
34180: LD_VAR 0 7
34184: PUSH
34185: LD_VAR 0 5
34189: PUSH
34190: LD_INT 1
34192: MINUS
34193: ARRAY
34194: PPUSH
34195: LD_VAR 0 2
34199: PUSH
34200: LD_VAR 0 5
34204: PUSH
34205: LD_INT 1
34207: MINUS
34208: ARRAY
34209: PPUSH
34210: LD_VAR 0 7
34214: PUSH
34215: LD_VAR 0 5
34219: ARRAY
34220: PPUSH
34221: CALL_OW 1
34225: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34226: LD_ADDR_VAR 0 7
34230: PUSH
34231: LD_VAR 0 7
34235: PPUSH
34236: LD_VAR 0 5
34240: PUSH
34241: LD_INT 1
34243: MINUS
34244: PPUSH
34245: LD_VAR 0 6
34249: PPUSH
34250: CALL_OW 1
34254: ST_TO_ADDR
// end ;
34255: GO 34172
34257: POP
34258: POP
// result := s_arr [ 1 ] ;
34259: LD_ADDR_VAR 0 4
34263: PUSH
34264: LD_VAR 0 7
34268: PUSH
34269: LD_INT 1
34271: ARRAY
34272: ST_TO_ADDR
// end ; end ;
34273: LD_VAR 0 4
34277: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34278: LD_INT 0
34280: PPUSH
34281: PPUSH
// if not list then
34282: LD_VAR 0 1
34286: NOT
34287: IFFALSE 34291
// exit ;
34289: GO 34382
// i := list [ pos1 ] ;
34291: LD_ADDR_VAR 0 5
34295: PUSH
34296: LD_VAR 0 1
34300: PUSH
34301: LD_VAR 0 2
34305: ARRAY
34306: ST_TO_ADDR
// if not i then
34307: LD_VAR 0 5
34311: NOT
34312: IFFALSE 34316
// exit ;
34314: GO 34382
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34316: LD_ADDR_VAR 0 1
34320: PUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: LD_VAR 0 2
34330: PPUSH
34331: LD_VAR 0 1
34335: PUSH
34336: LD_VAR 0 3
34340: ARRAY
34341: PPUSH
34342: CALL_OW 1
34346: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34347: LD_ADDR_VAR 0 1
34351: PUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: LD_VAR 0 3
34361: PPUSH
34362: LD_VAR 0 5
34366: PPUSH
34367: CALL_OW 1
34371: ST_TO_ADDR
// result := list ;
34372: LD_ADDR_VAR 0 4
34376: PUSH
34377: LD_VAR 0 1
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 4
34386: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34387: LD_INT 0
34389: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34390: LD_ADDR_VAR 0 5
34394: PUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: CALL_OW 250
34404: PPUSH
34405: LD_VAR 0 1
34409: PPUSH
34410: CALL_OW 251
34414: PPUSH
34415: LD_VAR 0 2
34419: PPUSH
34420: LD_VAR 0 3
34424: PPUSH
34425: LD_VAR 0 4
34429: PPUSH
34430: CALL 34440 0 5
34434: ST_TO_ADDR
// end ;
34435: LD_VAR 0 5
34439: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34440: LD_INT 0
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
// if not list then
34446: LD_VAR 0 3
34450: NOT
34451: IFFALSE 34455
// exit ;
34453: GO 34843
// result := [ ] ;
34455: LD_ADDR_VAR 0 6
34459: PUSH
34460: EMPTY
34461: ST_TO_ADDR
// for i in list do
34462: LD_ADDR_VAR 0 7
34466: PUSH
34467: LD_VAR 0 3
34471: PUSH
34472: FOR_IN
34473: IFFALSE 34675
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34475: LD_ADDR_VAR 0 9
34479: PUSH
34480: LD_VAR 0 7
34484: PPUSH
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: CALL_OW 297
34499: ST_TO_ADDR
// if not result then
34500: LD_VAR 0 6
34504: NOT
34505: IFFALSE 34531
// result := [ [ i , tmp ] ] else
34507: LD_ADDR_VAR 0 6
34511: PUSH
34512: LD_VAR 0 7
34516: PUSH
34517: LD_VAR 0 9
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: ST_TO_ADDR
34529: GO 34673
// begin if result [ result ] [ 2 ] < tmp then
34531: LD_VAR 0 6
34535: PUSH
34536: LD_VAR 0 6
34540: ARRAY
34541: PUSH
34542: LD_INT 2
34544: ARRAY
34545: PUSH
34546: LD_VAR 0 9
34550: LESS
34551: IFFALSE 34593
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34553: LD_ADDR_VAR 0 6
34557: PUSH
34558: LD_VAR 0 6
34562: PPUSH
34563: LD_VAR 0 6
34567: PUSH
34568: LD_INT 1
34570: PLUS
34571: PPUSH
34572: LD_VAR 0 7
34576: PUSH
34577: LD_VAR 0 9
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PPUSH
34586: CALL_OW 2
34590: ST_TO_ADDR
34591: GO 34673
// for j = 1 to result do
34593: LD_ADDR_VAR 0 8
34597: PUSH
34598: DOUBLE
34599: LD_INT 1
34601: DEC
34602: ST_TO_ADDR
34603: LD_VAR 0 6
34607: PUSH
34608: FOR_TO
34609: IFFALSE 34671
// begin if tmp < result [ j ] [ 2 ] then
34611: LD_VAR 0 9
34615: PUSH
34616: LD_VAR 0 6
34620: PUSH
34621: LD_VAR 0 8
34625: ARRAY
34626: PUSH
34627: LD_INT 2
34629: ARRAY
34630: LESS
34631: IFFALSE 34669
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34633: LD_ADDR_VAR 0 6
34637: PUSH
34638: LD_VAR 0 6
34642: PPUSH
34643: LD_VAR 0 8
34647: PPUSH
34648: LD_VAR 0 7
34652: PUSH
34653: LD_VAR 0 9
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PPUSH
34662: CALL_OW 2
34666: ST_TO_ADDR
// break ;
34667: GO 34671
// end ; end ;
34669: GO 34608
34671: POP
34672: POP
// end ; end ;
34673: GO 34472
34675: POP
34676: POP
// if result and not asc then
34677: LD_VAR 0 6
34681: PUSH
34682: LD_VAR 0 4
34686: NOT
34687: AND
34688: IFFALSE 34763
// begin tmp := result ;
34690: LD_ADDR_VAR 0 9
34694: PUSH
34695: LD_VAR 0 6
34699: ST_TO_ADDR
// for i = tmp downto 1 do
34700: LD_ADDR_VAR 0 7
34704: PUSH
34705: DOUBLE
34706: LD_VAR 0 9
34710: INC
34711: ST_TO_ADDR
34712: LD_INT 1
34714: PUSH
34715: FOR_DOWNTO
34716: IFFALSE 34761
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34718: LD_ADDR_VAR 0 6
34722: PUSH
34723: LD_VAR 0 6
34727: PPUSH
34728: LD_VAR 0 9
34732: PUSH
34733: LD_VAR 0 7
34737: MINUS
34738: PUSH
34739: LD_INT 1
34741: PLUS
34742: PPUSH
34743: LD_VAR 0 9
34747: PUSH
34748: LD_VAR 0 7
34752: ARRAY
34753: PPUSH
34754: CALL_OW 1
34758: ST_TO_ADDR
34759: GO 34715
34761: POP
34762: POP
// end ; tmp := [ ] ;
34763: LD_ADDR_VAR 0 9
34767: PUSH
34768: EMPTY
34769: ST_TO_ADDR
// if mode then
34770: LD_VAR 0 5
34774: IFFALSE 34843
// begin for i = 1 to result do
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_VAR 0 6
34790: PUSH
34791: FOR_TO
34792: IFFALSE 34831
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: LD_VAR 0 9
34803: PPUSH
34804: LD_VAR 0 7
34808: PPUSH
34809: LD_VAR 0 6
34813: PUSH
34814: LD_VAR 0 7
34818: ARRAY
34819: PUSH
34820: LD_INT 1
34822: ARRAY
34823: PPUSH
34824: CALL_OW 1
34828: ST_TO_ADDR
34829: GO 34791
34831: POP
34832: POP
// result := tmp ;
34833: LD_ADDR_VAR 0 6
34837: PUSH
34838: LD_VAR 0 9
34842: ST_TO_ADDR
// end ; end ;
34843: LD_VAR 0 6
34847: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34848: LD_INT 0
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34856: LD_ADDR_VAR 0 5
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: ST_TO_ADDR
// if not x or not y then
34878: LD_VAR 0 2
34882: NOT
34883: PUSH
34884: LD_VAR 0 3
34888: NOT
34889: OR
34890: IFFALSE 34894
// exit ;
34892: GO 36544
// if not range then
34894: LD_VAR 0 4
34898: NOT
34899: IFFALSE 34909
// range := 10 ;
34901: LD_ADDR_VAR 0 4
34905: PUSH
34906: LD_INT 10
34908: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34909: LD_ADDR_VAR 0 8
34913: PUSH
34914: LD_INT 81
34916: PUSH
34917: LD_VAR 0 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 92
34928: PUSH
34929: LD_VAR 0 2
34933: PUSH
34934: LD_VAR 0 3
34938: PUSH
34939: LD_VAR 0 4
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: PUSH
34953: LD_INT 21
34955: PUSH
34956: LD_INT 3
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: PPUSH
34972: CALL_OW 69
34976: ST_TO_ADDR
// if not tmp then
34977: LD_VAR 0 8
34981: NOT
34982: IFFALSE 34986
// exit ;
34984: GO 36544
// for i in tmp do
34986: LD_ADDR_VAR 0 6
34990: PUSH
34991: LD_VAR 0 8
34995: PUSH
34996: FOR_IN
34997: IFFALSE 36519
// begin points := [ 0 , 0 , 0 ] ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: LIST
35017: ST_TO_ADDR
// bpoints := 1 ;
35018: LD_ADDR_VAR 0 10
35022: PUSH
35023: LD_INT 1
35025: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35026: LD_VAR 0 6
35030: PPUSH
35031: CALL_OW 247
35035: PUSH
35036: LD_INT 1
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35622
35044: POP
// begin if GetClass ( i ) = 1 then
35045: LD_VAR 0 6
35049: PPUSH
35050: CALL_OW 257
35054: PUSH
35055: LD_INT 1
35057: EQUAL
35058: IFFALSE 35079
// points := [ 10 , 5 , 3 ] ;
35060: LD_ADDR_VAR 0 9
35064: PUSH
35065: LD_INT 10
35067: PUSH
35068: LD_INT 5
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35079: LD_VAR 0 6
35083: PPUSH
35084: CALL_OW 257
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: LD_INT 4
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: IN
35103: IFFALSE 35124
// points := [ 3 , 2 , 1 ] ;
35105: LD_ADDR_VAR 0 9
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35124: LD_VAR 0 6
35128: PPUSH
35129: CALL_OW 257
35133: PUSH
35134: LD_INT 5
35136: EQUAL
35137: IFFALSE 35158
// points := [ 130 , 5 , 2 ] ;
35139: LD_ADDR_VAR 0 9
35143: PUSH
35144: LD_INT 130
35146: PUSH
35147: LD_INT 5
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35158: LD_VAR 0 6
35162: PPUSH
35163: CALL_OW 257
35167: PUSH
35168: LD_INT 8
35170: EQUAL
35171: IFFALSE 35192
// points := [ 35 , 35 , 30 ] ;
35173: LD_ADDR_VAR 0 9
35177: PUSH
35178: LD_INT 35
35180: PUSH
35181: LD_INT 35
35183: PUSH
35184: LD_INT 30
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35192: LD_VAR 0 6
35196: PPUSH
35197: CALL_OW 257
35201: PUSH
35202: LD_INT 9
35204: EQUAL
35205: IFFALSE 35226
// points := [ 20 , 55 , 40 ] ;
35207: LD_ADDR_VAR 0 9
35211: PUSH
35212: LD_INT 20
35214: PUSH
35215: LD_INT 55
35217: PUSH
35218: LD_INT 40
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35226: LD_VAR 0 6
35230: PPUSH
35231: CALL_OW 257
35235: PUSH
35236: LD_INT 12
35238: PUSH
35239: LD_INT 16
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: IN
35246: IFFALSE 35267
// points := [ 5 , 3 , 2 ] ;
35248: LD_ADDR_VAR 0 9
35252: PUSH
35253: LD_INT 5
35255: PUSH
35256: LD_INT 3
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35267: LD_VAR 0 6
35271: PPUSH
35272: CALL_OW 257
35276: PUSH
35277: LD_INT 17
35279: EQUAL
35280: IFFALSE 35301
// points := [ 100 , 50 , 75 ] ;
35282: LD_ADDR_VAR 0 9
35286: PUSH
35287: LD_INT 100
35289: PUSH
35290: LD_INT 50
35292: PUSH
35293: LD_INT 75
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35301: LD_VAR 0 6
35305: PPUSH
35306: CALL_OW 257
35310: PUSH
35311: LD_INT 15
35313: EQUAL
35314: IFFALSE 35335
// points := [ 10 , 5 , 3 ] ;
35316: LD_ADDR_VAR 0 9
35320: PUSH
35321: LD_INT 10
35323: PUSH
35324: LD_INT 5
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35335: LD_VAR 0 6
35339: PPUSH
35340: CALL_OW 257
35344: PUSH
35345: LD_INT 14
35347: EQUAL
35348: IFFALSE 35369
// points := [ 10 , 0 , 0 ] ;
35350: LD_ADDR_VAR 0 9
35354: PUSH
35355: LD_INT 10
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35369: LD_VAR 0 6
35373: PPUSH
35374: CALL_OW 257
35378: PUSH
35379: LD_INT 11
35381: EQUAL
35382: IFFALSE 35403
// points := [ 30 , 10 , 5 ] ;
35384: LD_ADDR_VAR 0 9
35388: PUSH
35389: LD_INT 30
35391: PUSH
35392: LD_INT 10
35394: PUSH
35395: LD_INT 5
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35403: LD_VAR 0 1
35407: PPUSH
35408: LD_INT 5
35410: PPUSH
35411: CALL_OW 321
35415: PUSH
35416: LD_INT 2
35418: EQUAL
35419: IFFALSE 35436
// bpoints := bpoints * 1.8 ;
35421: LD_ADDR_VAR 0 10
35425: PUSH
35426: LD_VAR 0 10
35430: PUSH
35431: LD_REAL  1.80000000000000E+0000
35434: MUL
35435: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35436: LD_VAR 0 6
35440: PPUSH
35441: CALL_OW 257
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 3
35454: PUSH
35455: LD_INT 4
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: IN
35464: PUSH
35465: LD_VAR 0 1
35469: PPUSH
35470: LD_INT 51
35472: PPUSH
35473: CALL_OW 321
35477: PUSH
35478: LD_INT 2
35480: EQUAL
35481: AND
35482: IFFALSE 35499
// bpoints := bpoints * 1.2 ;
35484: LD_ADDR_VAR 0 10
35488: PUSH
35489: LD_VAR 0 10
35493: PUSH
35494: LD_REAL  1.20000000000000E+0000
35497: MUL
35498: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35499: LD_VAR 0 6
35503: PPUSH
35504: CALL_OW 257
35508: PUSH
35509: LD_INT 5
35511: PUSH
35512: LD_INT 7
35514: PUSH
35515: LD_INT 9
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: IN
35523: PUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: LD_INT 52
35531: PPUSH
35532: CALL_OW 321
35536: PUSH
35537: LD_INT 2
35539: EQUAL
35540: AND
35541: IFFALSE 35558
// bpoints := bpoints * 1.5 ;
35543: LD_ADDR_VAR 0 10
35547: PUSH
35548: LD_VAR 0 10
35552: PUSH
35553: LD_REAL  1.50000000000000E+0000
35556: MUL
35557: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35558: LD_VAR 0 1
35562: PPUSH
35563: LD_INT 66
35565: PPUSH
35566: CALL_OW 321
35570: PUSH
35571: LD_INT 2
35573: EQUAL
35574: IFFALSE 35591
// bpoints := bpoints * 1.1 ;
35576: LD_ADDR_VAR 0 10
35580: PUSH
35581: LD_VAR 0 10
35585: PUSH
35586: LD_REAL  1.10000000000000E+0000
35589: MUL
35590: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35591: LD_ADDR_VAR 0 10
35595: PUSH
35596: LD_VAR 0 10
35600: PUSH
35601: LD_VAR 0 6
35605: PPUSH
35606: LD_INT 1
35608: PPUSH
35609: CALL_OW 259
35613: PUSH
35614: LD_REAL  1.15000000000000E+0000
35617: MUL
35618: MUL
35619: ST_TO_ADDR
// end ; unit_vehicle :
35620: GO 36448
35622: LD_INT 2
35624: DOUBLE
35625: EQUAL
35626: IFTRUE 35630
35628: GO 36436
35630: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35631: LD_VAR 0 6
35635: PPUSH
35636: CALL_OW 264
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 42
35646: PUSH
35647: LD_INT 24
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: IN
35655: IFFALSE 35676
// points := [ 25 , 5 , 3 ] ;
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_INT 25
35664: PUSH
35665: LD_INT 5
35667: PUSH
35668: LD_INT 3
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35676: LD_VAR 0 6
35680: PPUSH
35681: CALL_OW 264
35685: PUSH
35686: LD_INT 4
35688: PUSH
35689: LD_INT 43
35691: PUSH
35692: LD_INT 25
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: IN
35700: IFFALSE 35721
// points := [ 40 , 15 , 5 ] ;
35702: LD_ADDR_VAR 0 9
35706: PUSH
35707: LD_INT 40
35709: PUSH
35710: LD_INT 15
35712: PUSH
35713: LD_INT 5
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35721: LD_VAR 0 6
35725: PPUSH
35726: CALL_OW 264
35730: PUSH
35731: LD_INT 3
35733: PUSH
35734: LD_INT 23
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: IN
35741: IFFALSE 35762
// points := [ 7 , 25 , 8 ] ;
35743: LD_ADDR_VAR 0 9
35747: PUSH
35748: LD_INT 7
35750: PUSH
35751: LD_INT 25
35753: PUSH
35754: LD_INT 8
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35762: LD_VAR 0 6
35766: PPUSH
35767: CALL_OW 264
35771: PUSH
35772: LD_INT 5
35774: PUSH
35775: LD_INT 27
35777: PUSH
35778: LD_INT 44
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: IN
35786: IFFALSE 35807
// points := [ 14 , 50 , 16 ] ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_INT 14
35795: PUSH
35796: LD_INT 50
35798: PUSH
35799: LD_INT 16
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 264
35816: PUSH
35817: LD_INT 6
35819: PUSH
35820: LD_INT 46
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: IN
35827: IFFALSE 35848
// points := [ 32 , 120 , 70 ] ;
35829: LD_ADDR_VAR 0 9
35833: PUSH
35834: LD_INT 32
35836: PUSH
35837: LD_INT 120
35839: PUSH
35840: LD_INT 70
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35848: LD_VAR 0 6
35852: PPUSH
35853: CALL_OW 264
35857: PUSH
35858: LD_INT 7
35860: PUSH
35861: LD_INT 28
35863: PUSH
35864: LD_INT 45
35866: PUSH
35867: LD_INT 92
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: IN
35876: IFFALSE 35897
// points := [ 35 , 20 , 45 ] ;
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_INT 35
35885: PUSH
35886: LD_INT 20
35888: PUSH
35889: LD_INT 45
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL_OW 264
35906: PUSH
35907: LD_INT 47
35909: PUSH
35910: EMPTY
35911: LIST
35912: IN
35913: IFFALSE 35934
// points := [ 67 , 45 , 75 ] ;
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_INT 67
35922: PUSH
35923: LD_INT 45
35925: PUSH
35926: LD_INT 75
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35934: LD_VAR 0 6
35938: PPUSH
35939: CALL_OW 264
35943: PUSH
35944: LD_INT 26
35946: PUSH
35947: EMPTY
35948: LIST
35949: IN
35950: IFFALSE 35971
// points := [ 120 , 30 , 80 ] ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: LD_INT 120
35959: PUSH
35960: LD_INT 30
35962: PUSH
35963: LD_INT 80
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35971: LD_VAR 0 6
35975: PPUSH
35976: CALL_OW 264
35980: PUSH
35981: LD_INT 22
35983: PUSH
35984: EMPTY
35985: LIST
35986: IN
35987: IFFALSE 36008
// points := [ 40 , 1 , 1 ] ;
35989: LD_ADDR_VAR 0 9
35993: PUSH
35994: LD_INT 40
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36008: LD_VAR 0 6
36012: PPUSH
36013: CALL_OW 264
36017: PUSH
36018: LD_INT 29
36020: PUSH
36021: EMPTY
36022: LIST
36023: IN
36024: IFFALSE 36045
// points := [ 70 , 200 , 400 ] ;
36026: LD_ADDR_VAR 0 9
36030: PUSH
36031: LD_INT 70
36033: PUSH
36034: LD_INT 200
36036: PUSH
36037: LD_INT 400
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36045: LD_VAR 0 6
36049: PPUSH
36050: CALL_OW 264
36054: PUSH
36055: LD_INT 14
36057: PUSH
36058: LD_INT 53
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: IN
36065: IFFALSE 36086
// points := [ 40 , 10 , 20 ] ;
36067: LD_ADDR_VAR 0 9
36071: PUSH
36072: LD_INT 40
36074: PUSH
36075: LD_INT 10
36077: PUSH
36078: LD_INT 20
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36086: LD_VAR 0 6
36090: PPUSH
36091: CALL_OW 264
36095: PUSH
36096: LD_INT 9
36098: PUSH
36099: EMPTY
36100: LIST
36101: IN
36102: IFFALSE 36123
// points := [ 5 , 70 , 20 ] ;
36104: LD_ADDR_VAR 0 9
36108: PUSH
36109: LD_INT 5
36111: PUSH
36112: LD_INT 70
36114: PUSH
36115: LD_INT 20
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36123: LD_VAR 0 6
36127: PPUSH
36128: CALL_OW 264
36132: PUSH
36133: LD_INT 10
36135: PUSH
36136: EMPTY
36137: LIST
36138: IN
36139: IFFALSE 36160
// points := [ 35 , 110 , 70 ] ;
36141: LD_ADDR_VAR 0 9
36145: PUSH
36146: LD_INT 35
36148: PUSH
36149: LD_INT 110
36151: PUSH
36152: LD_INT 70
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36160: LD_VAR 0 6
36164: PPUSH
36165: CALL_OW 265
36169: PUSH
36170: LD_INT 25
36172: EQUAL
36173: IFFALSE 36194
// points := [ 80 , 65 , 100 ] ;
36175: LD_ADDR_VAR 0 9
36179: PUSH
36180: LD_INT 80
36182: PUSH
36183: LD_INT 65
36185: PUSH
36186: LD_INT 100
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36194: LD_VAR 0 6
36198: PPUSH
36199: CALL_OW 263
36203: PUSH
36204: LD_INT 1
36206: EQUAL
36207: IFFALSE 36242
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36209: LD_ADDR_VAR 0 10
36213: PUSH
36214: LD_VAR 0 10
36218: PUSH
36219: LD_VAR 0 6
36223: PPUSH
36224: CALL_OW 311
36228: PPUSH
36229: LD_INT 3
36231: PPUSH
36232: CALL_OW 259
36236: PUSH
36237: LD_INT 4
36239: MUL
36240: MUL
36241: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36242: LD_VAR 0 6
36246: PPUSH
36247: CALL_OW 263
36251: PUSH
36252: LD_INT 2
36254: EQUAL
36255: IFFALSE 36306
// begin j := IsControledBy ( i ) ;
36257: LD_ADDR_VAR 0 7
36261: PUSH
36262: LD_VAR 0 6
36266: PPUSH
36267: CALL_OW 312
36271: ST_TO_ADDR
// if j then
36272: LD_VAR 0 7
36276: IFFALSE 36306
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36278: LD_ADDR_VAR 0 10
36282: PUSH
36283: LD_VAR 0 10
36287: PUSH
36288: LD_VAR 0 7
36292: PPUSH
36293: LD_INT 3
36295: PPUSH
36296: CALL_OW 259
36300: PUSH
36301: LD_INT 3
36303: MUL
36304: MUL
36305: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36306: LD_VAR 0 6
36310: PPUSH
36311: CALL_OW 264
36315: PUSH
36316: LD_INT 5
36318: PUSH
36319: LD_INT 6
36321: PUSH
36322: LD_INT 46
36324: PUSH
36325: LD_INT 44
36327: PUSH
36328: LD_INT 47
36330: PUSH
36331: LD_INT 45
36333: PUSH
36334: LD_INT 28
36336: PUSH
36337: LD_INT 7
36339: PUSH
36340: LD_INT 27
36342: PUSH
36343: LD_INT 29
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: IN
36358: PUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: LD_INT 52
36366: PPUSH
36367: CALL_OW 321
36371: PUSH
36372: LD_INT 2
36374: EQUAL
36375: AND
36376: IFFALSE 36393
// bpoints := bpoints * 1.2 ;
36378: LD_ADDR_VAR 0 10
36382: PUSH
36383: LD_VAR 0 10
36387: PUSH
36388: LD_REAL  1.20000000000000E+0000
36391: MUL
36392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36393: LD_VAR 0 6
36397: PPUSH
36398: CALL_OW 264
36402: PUSH
36403: LD_INT 6
36405: PUSH
36406: LD_INT 46
36408: PUSH
36409: LD_INT 47
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: IN
36417: IFFALSE 36434
// bpoints := bpoints * 1.2 ;
36419: LD_ADDR_VAR 0 10
36423: PUSH
36424: LD_VAR 0 10
36428: PUSH
36429: LD_REAL  1.20000000000000E+0000
36432: MUL
36433: ST_TO_ADDR
// end ; unit_building :
36434: GO 36448
36436: LD_INT 3
36438: DOUBLE
36439: EQUAL
36440: IFTRUE 36444
36442: GO 36447
36444: POP
// ; end ;
36445: GO 36448
36447: POP
// for j = 1 to 3 do
36448: LD_ADDR_VAR 0 7
36452: PUSH
36453: DOUBLE
36454: LD_INT 1
36456: DEC
36457: ST_TO_ADDR
36458: LD_INT 3
36460: PUSH
36461: FOR_TO
36462: IFFALSE 36515
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36464: LD_ADDR_VAR 0 5
36468: PUSH
36469: LD_VAR 0 5
36473: PPUSH
36474: LD_VAR 0 7
36478: PPUSH
36479: LD_VAR 0 5
36483: PUSH
36484: LD_VAR 0 7
36488: ARRAY
36489: PUSH
36490: LD_VAR 0 9
36494: PUSH
36495: LD_VAR 0 7
36499: ARRAY
36500: PUSH
36501: LD_VAR 0 10
36505: MUL
36506: PLUS
36507: PPUSH
36508: CALL_OW 1
36512: ST_TO_ADDR
36513: GO 36461
36515: POP
36516: POP
// end ;
36517: GO 34996
36519: POP
36520: POP
// result := Replace ( result , 4 , tmp ) ;
36521: LD_ADDR_VAR 0 5
36525: PUSH
36526: LD_VAR 0 5
36530: PPUSH
36531: LD_INT 4
36533: PPUSH
36534: LD_VAR 0 8
36538: PPUSH
36539: CALL_OW 1
36543: ST_TO_ADDR
// end ;
36544: LD_VAR 0 5
36548: RET
// export function DangerAtRange ( unit , range ) ; begin
36549: LD_INT 0
36551: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36552: LD_ADDR_VAR 0 3
36556: PUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 255
36566: PPUSH
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 250
36576: PPUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 251
36586: PPUSH
36587: LD_VAR 0 2
36591: PPUSH
36592: CALL 34848 0 4
36596: ST_TO_ADDR
// end ;
36597: LD_VAR 0 3
36601: RET
// export function DangerInArea ( side , area ) ; begin
36602: LD_INT 0
36604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_INT 81
36617: PUSH
36618: LD_VAR 0 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PPUSH
36627: CALL_OW 70
36631: ST_TO_ADDR
// end ;
36632: LD_VAR 0 3
36636: RET
// export function IsExtension ( b ) ; begin
36637: LD_INT 0
36639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36640: LD_ADDR_VAR 0 2
36644: PUSH
36645: LD_VAR 0 1
36649: PUSH
36650: LD_INT 23
36652: PUSH
36653: LD_INT 20
36655: PUSH
36656: LD_INT 22
36658: PUSH
36659: LD_INT 17
36661: PUSH
36662: LD_INT 24
36664: PUSH
36665: LD_INT 21
36667: PUSH
36668: LD_INT 19
36670: PUSH
36671: LD_INT 16
36673: PUSH
36674: LD_INT 25
36676: PUSH
36677: LD_INT 18
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: IN
36692: ST_TO_ADDR
// end ;
36693: LD_VAR 0 2
36697: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36698: LD_INT 0
36700: PPUSH
36701: PPUSH
36702: PPUSH
// result := [ ] ;
36703: LD_ADDR_VAR 0 4
36707: PUSH
36708: EMPTY
36709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36710: LD_ADDR_VAR 0 5
36714: PUSH
36715: LD_VAR 0 2
36719: PPUSH
36720: LD_INT 21
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PPUSH
36730: CALL_OW 70
36734: ST_TO_ADDR
// if not tmp then
36735: LD_VAR 0 5
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 36808
// if checkLink then
36744: LD_VAR 0 3
36748: IFFALSE 36798
// begin for i in tmp do
36750: LD_ADDR_VAR 0 6
36754: PUSH
36755: LD_VAR 0 5
36759: PUSH
36760: FOR_IN
36761: IFFALSE 36796
// if GetBase ( i ) <> base then
36763: LD_VAR 0 6
36767: PPUSH
36768: CALL_OW 274
36772: PUSH
36773: LD_VAR 0 1
36777: NONEQUAL
36778: IFFALSE 36794
// ComLinkToBase ( base , i ) ;
36780: LD_VAR 0 1
36784: PPUSH
36785: LD_VAR 0 6
36789: PPUSH
36790: CALL_OW 169
36794: GO 36760
36796: POP
36797: POP
// end ; result := tmp ;
36798: LD_ADDR_VAR 0 4
36802: PUSH
36803: LD_VAR 0 5
36807: ST_TO_ADDR
// end ;
36808: LD_VAR 0 4
36812: RET
// export function ComComplete ( units , b ) ; var i ; begin
36813: LD_INT 0
36815: PPUSH
36816: PPUSH
// if not units then
36817: LD_VAR 0 1
36821: NOT
36822: IFFALSE 36826
// exit ;
36824: GO 36916
// for i in units do
36826: LD_ADDR_VAR 0 4
36830: PUSH
36831: LD_VAR 0 1
36835: PUSH
36836: FOR_IN
36837: IFFALSE 36914
// if BuildingStatus ( b ) = bs_build then
36839: LD_VAR 0 2
36843: PPUSH
36844: CALL_OW 461
36848: PUSH
36849: LD_INT 1
36851: EQUAL
36852: IFFALSE 36912
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36854: LD_VAR 0 4
36858: PPUSH
36859: LD_STRING h
36861: PUSH
36862: LD_VAR 0 2
36866: PPUSH
36867: CALL_OW 250
36871: PUSH
36872: LD_VAR 0 2
36876: PPUSH
36877: CALL_OW 251
36881: PUSH
36882: LD_VAR 0 2
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: PPUSH
36908: CALL_OW 446
36912: GO 36836
36914: POP
36915: POP
// end ;
36916: LD_VAR 0 3
36920: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36921: LD_INT 0
36923: PPUSH
36924: PPUSH
36925: PPUSH
36926: PPUSH
36927: PPUSH
36928: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36929: LD_VAR 0 1
36933: NOT
36934: PUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 263
36944: PUSH
36945: LD_INT 2
36947: NONEQUAL
36948: OR
36949: IFFALSE 36953
// exit ;
36951: GO 37269
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36953: LD_ADDR_VAR 0 6
36957: PUSH
36958: LD_INT 22
36960: PUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: CALL_OW 255
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 30
36980: PUSH
36981: LD_INT 36
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 34
36990: PUSH
36991: LD_INT 31
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PPUSH
37007: CALL_OW 69
37011: ST_TO_ADDR
// if not tmp then
37012: LD_VAR 0 6
37016: NOT
37017: IFFALSE 37021
// exit ;
37019: GO 37269
// result := [ ] ;
37021: LD_ADDR_VAR 0 2
37025: PUSH
37026: EMPTY
37027: ST_TO_ADDR
// for i in tmp do
37028: LD_ADDR_VAR 0 3
37032: PUSH
37033: LD_VAR 0 6
37037: PUSH
37038: FOR_IN
37039: IFFALSE 37110
// begin t := UnitsInside ( i ) ;
37041: LD_ADDR_VAR 0 4
37045: PUSH
37046: LD_VAR 0 3
37050: PPUSH
37051: CALL_OW 313
37055: ST_TO_ADDR
// if t then
37056: LD_VAR 0 4
37060: IFFALSE 37108
// for j in t do
37062: LD_ADDR_VAR 0 7
37066: PUSH
37067: LD_VAR 0 4
37071: PUSH
37072: FOR_IN
37073: IFFALSE 37106
// result := Replace ( result , result + 1 , j ) ;
37075: LD_ADDR_VAR 0 2
37079: PUSH
37080: LD_VAR 0 2
37084: PPUSH
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 1
37092: PLUS
37093: PPUSH
37094: LD_VAR 0 7
37098: PPUSH
37099: CALL_OW 1
37103: ST_TO_ADDR
37104: GO 37072
37106: POP
37107: POP
// end ;
37108: GO 37038
37110: POP
37111: POP
// if not result then
37112: LD_VAR 0 2
37116: NOT
37117: IFFALSE 37121
// exit ;
37119: GO 37269
// mech := result [ 1 ] ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_VAR 0 2
37130: PUSH
37131: LD_INT 1
37133: ARRAY
37134: ST_TO_ADDR
// if result > 1 then
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 1
37142: GREATER
37143: IFFALSE 37255
// begin for i = 2 to result do
37145: LD_ADDR_VAR 0 3
37149: PUSH
37150: DOUBLE
37151: LD_INT 2
37153: DEC
37154: ST_TO_ADDR
37155: LD_VAR 0 2
37159: PUSH
37160: FOR_TO
37161: IFFALSE 37253
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37163: LD_ADDR_VAR 0 4
37167: PUSH
37168: LD_VAR 0 2
37172: PUSH
37173: LD_VAR 0 3
37177: ARRAY
37178: PPUSH
37179: LD_INT 3
37181: PPUSH
37182: CALL_OW 259
37186: PUSH
37187: LD_VAR 0 2
37191: PUSH
37192: LD_VAR 0 3
37196: ARRAY
37197: PPUSH
37198: CALL_OW 432
37202: MINUS
37203: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37204: LD_VAR 0 4
37208: PUSH
37209: LD_VAR 0 5
37213: PPUSH
37214: LD_INT 3
37216: PPUSH
37217: CALL_OW 259
37221: PUSH
37222: LD_VAR 0 5
37226: PPUSH
37227: CALL_OW 432
37231: MINUS
37232: GREATEREQUAL
37233: IFFALSE 37251
// mech := result [ i ] ;
37235: LD_ADDR_VAR 0 5
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_VAR 0 3
37249: ARRAY
37250: ST_TO_ADDR
// end ;
37251: GO 37160
37253: POP
37254: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37255: LD_VAR 0 1
37259: PPUSH
37260: LD_VAR 0 5
37264: PPUSH
37265: CALL_OW 135
// end ;
37269: LD_VAR 0 2
37273: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37274: LD_INT 0
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
37288: PPUSH
// result := [ ] ;
37289: LD_ADDR_VAR 0 7
37293: PUSH
37294: EMPTY
37295: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 266
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: IN
37316: NOT
37317: IFFALSE 37321
// exit ;
37319: GO 38955
// if name then
37321: LD_VAR 0 3
37325: IFFALSE 37341
// SetBName ( base_dep , name ) ;
37327: LD_VAR 0 1
37331: PPUSH
37332: LD_VAR 0 3
37336: PPUSH
37337: CALL_OW 500
// base := GetBase ( base_dep ) ;
37341: LD_ADDR_VAR 0 15
37345: PUSH
37346: LD_VAR 0 1
37350: PPUSH
37351: CALL_OW 274
37355: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37356: LD_ADDR_VAR 0 16
37360: PUSH
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL_OW 255
37370: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37371: LD_ADDR_VAR 0 17
37375: PUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 248
37385: ST_TO_ADDR
// if sources then
37386: LD_VAR 0 5
37390: IFFALSE 37437
// for i = 1 to 3 do
37392: LD_ADDR_VAR 0 8
37396: PUSH
37397: DOUBLE
37398: LD_INT 1
37400: DEC
37401: ST_TO_ADDR
37402: LD_INT 3
37404: PUSH
37405: FOR_TO
37406: IFFALSE 37435
// AddResourceType ( base , i , sources [ i ] ) ;
37408: LD_VAR 0 15
37412: PPUSH
37413: LD_VAR 0 8
37417: PPUSH
37418: LD_VAR 0 5
37422: PUSH
37423: LD_VAR 0 8
37427: ARRAY
37428: PPUSH
37429: CALL_OW 276
37433: GO 37405
37435: POP
37436: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37437: LD_ADDR_VAR 0 18
37441: PUSH
37442: LD_VAR 0 15
37446: PPUSH
37447: LD_VAR 0 2
37451: PPUSH
37452: LD_INT 1
37454: PPUSH
37455: CALL 36698 0 3
37459: ST_TO_ADDR
// InitHc ;
37460: CALL_OW 19
// InitUc ;
37464: CALL_OW 18
// uc_side := side ;
37468: LD_ADDR_OWVAR 20
37472: PUSH
37473: LD_VAR 0 16
37477: ST_TO_ADDR
// uc_nation := nation ;
37478: LD_ADDR_OWVAR 21
37482: PUSH
37483: LD_VAR 0 17
37487: ST_TO_ADDR
// if buildings then
37488: LD_VAR 0 18
37492: IFFALSE 38814
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37494: LD_ADDR_VAR 0 19
37498: PUSH
37499: LD_VAR 0 18
37503: PPUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 30
37509: PUSH
37510: LD_INT 29
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 30
37519: PUSH
37520: LD_INT 30
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: LIST
37531: PPUSH
37532: CALL_OW 72
37536: ST_TO_ADDR
// if tmp then
37537: LD_VAR 0 19
37541: IFFALSE 37589
// for i in tmp do
37543: LD_ADDR_VAR 0 8
37547: PUSH
37548: LD_VAR 0 19
37552: PUSH
37553: FOR_IN
37554: IFFALSE 37587
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37556: LD_VAR 0 8
37560: PPUSH
37561: CALL_OW 250
37565: PPUSH
37566: LD_VAR 0 8
37570: PPUSH
37571: CALL_OW 251
37575: PPUSH
37576: LD_VAR 0 16
37580: PPUSH
37581: CALL_OW 441
37585: GO 37553
37587: POP
37588: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37589: LD_VAR 0 18
37593: PPUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 30
37599: PUSH
37600: LD_INT 32
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 30
37609: PUSH
37610: LD_INT 33
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: PPUSH
37622: CALL_OW 72
37626: IFFALSE 37714
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37628: LD_ADDR_VAR 0 8
37632: PUSH
37633: LD_VAR 0 18
37637: PPUSH
37638: LD_INT 2
37640: PUSH
37641: LD_INT 30
37643: PUSH
37644: LD_INT 32
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 30
37653: PUSH
37654: LD_INT 33
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: PPUSH
37666: CALL_OW 72
37670: PUSH
37671: FOR_IN
37672: IFFALSE 37712
// begin if not GetBWeapon ( i ) then
37674: LD_VAR 0 8
37678: PPUSH
37679: CALL_OW 269
37683: NOT
37684: IFFALSE 37710
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37686: LD_VAR 0 8
37690: PPUSH
37691: LD_VAR 0 8
37695: PPUSH
37696: LD_VAR 0 2
37700: PPUSH
37701: CALL 38960 0 2
37705: PPUSH
37706: CALL_OW 431
// end ;
37710: GO 37671
37712: POP
37713: POP
// end ; for i = 1 to personel do
37714: LD_ADDR_VAR 0 8
37718: PUSH
37719: DOUBLE
37720: LD_INT 1
37722: DEC
37723: ST_TO_ADDR
37724: LD_VAR 0 6
37728: PUSH
37729: FOR_TO
37730: IFFALSE 38794
// begin if i > 4 then
37732: LD_VAR 0 8
37736: PUSH
37737: LD_INT 4
37739: GREATER
37740: IFFALSE 37744
// break ;
37742: GO 38794
// case i of 1 :
37744: LD_VAR 0 8
37748: PUSH
37749: LD_INT 1
37751: DOUBLE
37752: EQUAL
37753: IFTRUE 37757
37755: GO 37837
37757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37758: LD_ADDR_VAR 0 12
37762: PUSH
37763: LD_VAR 0 18
37767: PPUSH
37768: LD_INT 22
37770: PUSH
37771: LD_VAR 0 16
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 58
37782: PUSH
37783: EMPTY
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: LD_INT 30
37791: PUSH
37792: LD_INT 32
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 30
37801: PUSH
37802: LD_INT 4
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 30
37811: PUSH
37812: LD_INT 5
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: PPUSH
37830: CALL_OW 72
37834: ST_TO_ADDR
37835: GO 38059
37837: LD_INT 2
37839: DOUBLE
37840: EQUAL
37841: IFTRUE 37845
37843: GO 37907
37845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37846: LD_ADDR_VAR 0 12
37850: PUSH
37851: LD_VAR 0 18
37855: PPUSH
37856: LD_INT 22
37858: PUSH
37859: LD_VAR 0 16
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: LD_INT 30
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 30
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PPUSH
37900: CALL_OW 72
37904: ST_TO_ADDR
37905: GO 38059
37907: LD_INT 3
37909: DOUBLE
37910: EQUAL
37911: IFTRUE 37915
37913: GO 37977
37915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37916: LD_ADDR_VAR 0 12
37920: PUSH
37921: LD_VAR 0 18
37925: PPUSH
37926: LD_INT 22
37928: PUSH
37929: LD_VAR 0 16
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: LD_INT 30
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 30
37953: PUSH
37954: LD_INT 3
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PPUSH
37970: CALL_OW 72
37974: ST_TO_ADDR
37975: GO 38059
37977: LD_INT 4
37979: DOUBLE
37980: EQUAL
37981: IFTRUE 37985
37983: GO 38058
37985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37986: LD_ADDR_VAR 0 12
37990: PUSH
37991: LD_VAR 0 18
37995: PPUSH
37996: LD_INT 22
37998: PUSH
37999: LD_VAR 0 16
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: LD_INT 30
38013: PUSH
38014: LD_INT 6
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 30
38023: PUSH
38024: LD_INT 7
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 30
38033: PUSH
38034: LD_INT 8
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PPUSH
38051: CALL_OW 72
38055: ST_TO_ADDR
38056: GO 38059
38058: POP
// if i = 1 then
38059: LD_VAR 0 8
38063: PUSH
38064: LD_INT 1
38066: EQUAL
38067: IFFALSE 38178
// begin tmp := [ ] ;
38069: LD_ADDR_VAR 0 19
38073: PUSH
38074: EMPTY
38075: ST_TO_ADDR
// for j in f do
38076: LD_ADDR_VAR 0 9
38080: PUSH
38081: LD_VAR 0 12
38085: PUSH
38086: FOR_IN
38087: IFFALSE 38160
// if GetBType ( j ) = b_bunker then
38089: LD_VAR 0 9
38093: PPUSH
38094: CALL_OW 266
38098: PUSH
38099: LD_INT 32
38101: EQUAL
38102: IFFALSE 38129
// tmp := Insert ( tmp , 1 , j ) else
38104: LD_ADDR_VAR 0 19
38108: PUSH
38109: LD_VAR 0 19
38113: PPUSH
38114: LD_INT 1
38116: PPUSH
38117: LD_VAR 0 9
38121: PPUSH
38122: CALL_OW 2
38126: ST_TO_ADDR
38127: GO 38158
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38129: LD_ADDR_VAR 0 19
38133: PUSH
38134: LD_VAR 0 19
38138: PPUSH
38139: LD_VAR 0 19
38143: PUSH
38144: LD_INT 1
38146: PLUS
38147: PPUSH
38148: LD_VAR 0 9
38152: PPUSH
38153: CALL_OW 2
38157: ST_TO_ADDR
38158: GO 38086
38160: POP
38161: POP
// if tmp then
38162: LD_VAR 0 19
38166: IFFALSE 38178
// f := tmp ;
38168: LD_ADDR_VAR 0 12
38172: PUSH
38173: LD_VAR 0 19
38177: ST_TO_ADDR
// end ; x := personel [ i ] ;
38178: LD_ADDR_VAR 0 13
38182: PUSH
38183: LD_VAR 0 6
38187: PUSH
38188: LD_VAR 0 8
38192: ARRAY
38193: ST_TO_ADDR
// if x = - 1 then
38194: LD_VAR 0 13
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: EQUAL
38203: IFFALSE 38412
// begin for j in f do
38205: LD_ADDR_VAR 0 9
38209: PUSH
38210: LD_VAR 0 12
38214: PUSH
38215: FOR_IN
38216: IFFALSE 38408
// repeat InitHc ;
38218: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38222: LD_VAR 0 9
38226: PPUSH
38227: CALL_OW 266
38231: PUSH
38232: LD_INT 5
38234: EQUAL
38235: IFFALSE 38305
// begin if UnitsInside ( j ) < 3 then
38237: LD_VAR 0 9
38241: PPUSH
38242: CALL_OW 313
38246: PUSH
38247: LD_INT 3
38249: LESS
38250: IFFALSE 38286
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38252: LD_INT 0
38254: PPUSH
38255: LD_INT 5
38257: PUSH
38258: LD_INT 8
38260: PUSH
38261: LD_INT 9
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: PUSH
38269: LD_VAR 0 17
38273: ARRAY
38274: PPUSH
38275: LD_VAR 0 4
38279: PPUSH
38280: CALL_OW 380
38284: GO 38303
// PrepareHuman ( false , i , skill ) ;
38286: LD_INT 0
38288: PPUSH
38289: LD_VAR 0 8
38293: PPUSH
38294: LD_VAR 0 4
38298: PPUSH
38299: CALL_OW 380
// end else
38303: GO 38322
// PrepareHuman ( false , i , skill ) ;
38305: LD_INT 0
38307: PPUSH
38308: LD_VAR 0 8
38312: PPUSH
38313: LD_VAR 0 4
38317: PPUSH
38318: CALL_OW 380
// un := CreateHuman ;
38322: LD_ADDR_VAR 0 14
38326: PUSH
38327: CALL_OW 44
38331: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38332: LD_ADDR_VAR 0 7
38336: PUSH
38337: LD_VAR 0 7
38341: PPUSH
38342: LD_INT 1
38344: PPUSH
38345: LD_VAR 0 14
38349: PPUSH
38350: CALL_OW 2
38354: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38355: LD_VAR 0 14
38359: PPUSH
38360: LD_VAR 0 9
38364: PPUSH
38365: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38369: LD_VAR 0 9
38373: PPUSH
38374: CALL_OW 313
38378: PUSH
38379: LD_INT 6
38381: EQUAL
38382: PUSH
38383: LD_VAR 0 9
38387: PPUSH
38388: CALL_OW 266
38392: PUSH
38393: LD_INT 32
38395: PUSH
38396: LD_INT 31
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: IN
38403: OR
38404: IFFALSE 38218
38406: GO 38215
38408: POP
38409: POP
// end else
38410: GO 38792
// for j = 1 to x do
38412: LD_ADDR_VAR 0 9
38416: PUSH
38417: DOUBLE
38418: LD_INT 1
38420: DEC
38421: ST_TO_ADDR
38422: LD_VAR 0 13
38426: PUSH
38427: FOR_TO
38428: IFFALSE 38790
// begin InitHc ;
38430: CALL_OW 19
// if not f then
38434: LD_VAR 0 12
38438: NOT
38439: IFFALSE 38528
// begin PrepareHuman ( false , i , skill ) ;
38441: LD_INT 0
38443: PPUSH
38444: LD_VAR 0 8
38448: PPUSH
38449: LD_VAR 0 4
38453: PPUSH
38454: CALL_OW 380
// un := CreateHuman ;
38458: LD_ADDR_VAR 0 14
38462: PUSH
38463: CALL_OW 44
38467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38468: LD_ADDR_VAR 0 7
38472: PUSH
38473: LD_VAR 0 7
38477: PPUSH
38478: LD_INT 1
38480: PPUSH
38481: LD_VAR 0 14
38485: PPUSH
38486: CALL_OW 2
38490: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38491: LD_VAR 0 14
38495: PPUSH
38496: LD_VAR 0 1
38500: PPUSH
38501: CALL_OW 250
38505: PPUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL_OW 251
38515: PPUSH
38516: LD_INT 10
38518: PPUSH
38519: LD_INT 0
38521: PPUSH
38522: CALL_OW 50
// continue ;
38526: GO 38427
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38528: LD_VAR 0 12
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PPUSH
38537: CALL_OW 313
38541: PUSH
38542: LD_VAR 0 12
38546: PUSH
38547: LD_INT 1
38549: ARRAY
38550: PPUSH
38551: CALL_OW 266
38555: PUSH
38556: LD_INT 32
38558: PUSH
38559: LD_INT 31
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: IN
38566: AND
38567: PUSH
38568: LD_VAR 0 12
38572: PUSH
38573: LD_INT 1
38575: ARRAY
38576: PPUSH
38577: CALL_OW 313
38581: PUSH
38582: LD_INT 6
38584: EQUAL
38585: OR
38586: IFFALSE 38606
// f := Delete ( f , 1 ) ;
38588: LD_ADDR_VAR 0 12
38592: PUSH
38593: LD_VAR 0 12
38597: PPUSH
38598: LD_INT 1
38600: PPUSH
38601: CALL_OW 3
38605: ST_TO_ADDR
// if not f then
38606: LD_VAR 0 12
38610: NOT
38611: IFFALSE 38629
// begin x := x + 2 ;
38613: LD_ADDR_VAR 0 13
38617: PUSH
38618: LD_VAR 0 13
38622: PUSH
38623: LD_INT 2
38625: PLUS
38626: ST_TO_ADDR
// continue ;
38627: GO 38427
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38629: LD_VAR 0 12
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PPUSH
38638: CALL_OW 266
38642: PUSH
38643: LD_INT 5
38645: EQUAL
38646: IFFALSE 38720
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38648: LD_VAR 0 12
38652: PUSH
38653: LD_INT 1
38655: ARRAY
38656: PPUSH
38657: CALL_OW 313
38661: PUSH
38662: LD_INT 3
38664: LESS
38665: IFFALSE 38701
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38667: LD_INT 0
38669: PPUSH
38670: LD_INT 5
38672: PUSH
38673: LD_INT 8
38675: PUSH
38676: LD_INT 9
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: LD_VAR 0 17
38688: ARRAY
38689: PPUSH
38690: LD_VAR 0 4
38694: PPUSH
38695: CALL_OW 380
38699: GO 38718
// PrepareHuman ( false , i , skill ) ;
38701: LD_INT 0
38703: PPUSH
38704: LD_VAR 0 8
38708: PPUSH
38709: LD_VAR 0 4
38713: PPUSH
38714: CALL_OW 380
// end else
38718: GO 38737
// PrepareHuman ( false , i , skill ) ;
38720: LD_INT 0
38722: PPUSH
38723: LD_VAR 0 8
38727: PPUSH
38728: LD_VAR 0 4
38732: PPUSH
38733: CALL_OW 380
// un := CreateHuman ;
38737: LD_ADDR_VAR 0 14
38741: PUSH
38742: CALL_OW 44
38746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38747: LD_ADDR_VAR 0 7
38751: PUSH
38752: LD_VAR 0 7
38756: PPUSH
38757: LD_INT 1
38759: PPUSH
38760: LD_VAR 0 14
38764: PPUSH
38765: CALL_OW 2
38769: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38770: LD_VAR 0 14
38774: PPUSH
38775: LD_VAR 0 12
38779: PUSH
38780: LD_INT 1
38782: ARRAY
38783: PPUSH
38784: CALL_OW 52
// end ;
38788: GO 38427
38790: POP
38791: POP
// end ;
38792: GO 37729
38794: POP
38795: POP
// result := result ^ buildings ;
38796: LD_ADDR_VAR 0 7
38800: PUSH
38801: LD_VAR 0 7
38805: PUSH
38806: LD_VAR 0 18
38810: ADD
38811: ST_TO_ADDR
// end else
38812: GO 38955
// begin for i = 1 to personel do
38814: LD_ADDR_VAR 0 8
38818: PUSH
38819: DOUBLE
38820: LD_INT 1
38822: DEC
38823: ST_TO_ADDR
38824: LD_VAR 0 6
38828: PUSH
38829: FOR_TO
38830: IFFALSE 38953
// begin if i > 4 then
38832: LD_VAR 0 8
38836: PUSH
38837: LD_INT 4
38839: GREATER
38840: IFFALSE 38844
// break ;
38842: GO 38953
// x := personel [ i ] ;
38844: LD_ADDR_VAR 0 13
38848: PUSH
38849: LD_VAR 0 6
38853: PUSH
38854: LD_VAR 0 8
38858: ARRAY
38859: ST_TO_ADDR
// if x = - 1 then
38860: LD_VAR 0 13
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: EQUAL
38869: IFFALSE 38873
// continue ;
38871: GO 38829
// PrepareHuman ( false , i , skill ) ;
38873: LD_INT 0
38875: PPUSH
38876: LD_VAR 0 8
38880: PPUSH
38881: LD_VAR 0 4
38885: PPUSH
38886: CALL_OW 380
// un := CreateHuman ;
38890: LD_ADDR_VAR 0 14
38894: PUSH
38895: CALL_OW 44
38899: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38900: LD_VAR 0 14
38904: PPUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 250
38914: PPUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 251
38924: PPUSH
38925: LD_INT 10
38927: PPUSH
38928: LD_INT 0
38930: PPUSH
38931: CALL_OW 50
// result := result ^ un ;
38935: LD_ADDR_VAR 0 7
38939: PUSH
38940: LD_VAR 0 7
38944: PUSH
38945: LD_VAR 0 14
38949: ADD
38950: ST_TO_ADDR
// end ;
38951: GO 38829
38953: POP
38954: POP
// end ; end ;
38955: LD_VAR 0 7
38959: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38960: LD_INT 0
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
// result := false ;
38978: LD_ADDR_VAR 0 3
38982: PUSH
38983: LD_INT 0
38985: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38986: LD_VAR 0 1
38990: NOT
38991: PUSH
38992: LD_VAR 0 1
38996: PPUSH
38997: CALL_OW 266
39001: PUSH
39002: LD_INT 32
39004: PUSH
39005: LD_INT 33
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: IN
39012: NOT
39013: OR
39014: IFFALSE 39018
// exit ;
39016: GO 40127
// nat := GetNation ( tower ) ;
39018: LD_ADDR_VAR 0 12
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: CALL_OW 248
39032: ST_TO_ADDR
// side := GetSide ( tower ) ;
39033: LD_ADDR_VAR 0 16
39037: PUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 255
39047: ST_TO_ADDR
// x := GetX ( tower ) ;
39048: LD_ADDR_VAR 0 10
39052: PUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 250
39062: ST_TO_ADDR
// y := GetY ( tower ) ;
39063: LD_ADDR_VAR 0 11
39067: PUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 251
39077: ST_TO_ADDR
// if not x or not y then
39078: LD_VAR 0 10
39082: NOT
39083: PUSH
39084: LD_VAR 0 11
39088: NOT
39089: OR
39090: IFFALSE 39094
// exit ;
39092: GO 40127
// weapon := 0 ;
39094: LD_ADDR_VAR 0 18
39098: PUSH
39099: LD_INT 0
39101: ST_TO_ADDR
// fac_list := [ ] ;
39102: LD_ADDR_VAR 0 17
39106: PUSH
39107: EMPTY
39108: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39109: LD_ADDR_VAR 0 6
39113: PUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 274
39123: PPUSH
39124: LD_VAR 0 2
39128: PPUSH
39129: LD_INT 0
39131: PPUSH
39132: CALL 36698 0 3
39136: PPUSH
39137: LD_INT 30
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PPUSH
39147: CALL_OW 72
39151: ST_TO_ADDR
// if not factories then
39152: LD_VAR 0 6
39156: NOT
39157: IFFALSE 39161
// exit ;
39159: GO 40127
// for i in factories do
39161: LD_ADDR_VAR 0 8
39165: PUSH
39166: LD_VAR 0 6
39170: PUSH
39171: FOR_IN
39172: IFFALSE 39197
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39174: LD_ADDR_VAR 0 17
39178: PUSH
39179: LD_VAR 0 17
39183: PUSH
39184: LD_VAR 0 8
39188: PPUSH
39189: CALL_OW 478
39193: UNION
39194: ST_TO_ADDR
39195: GO 39171
39197: POP
39198: POP
// if not fac_list then
39199: LD_VAR 0 17
39203: NOT
39204: IFFALSE 39208
// exit ;
39206: GO 40127
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39208: LD_ADDR_VAR 0 5
39212: PUSH
39213: LD_INT 4
39215: PUSH
39216: LD_INT 5
39218: PUSH
39219: LD_INT 9
39221: PUSH
39222: LD_INT 10
39224: PUSH
39225: LD_INT 6
39227: PUSH
39228: LD_INT 7
39230: PUSH
39231: LD_INT 11
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 27
39245: PUSH
39246: LD_INT 28
39248: PUSH
39249: LD_INT 26
39251: PUSH
39252: LD_INT 30
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 43
39263: PUSH
39264: LD_INT 44
39266: PUSH
39267: LD_INT 46
39269: PUSH
39270: LD_INT 45
39272: PUSH
39273: LD_INT 47
39275: PUSH
39276: LD_INT 49
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: PUSH
39292: LD_VAR 0 12
39296: ARRAY
39297: ST_TO_ADDR
// list := list isect fac_list ;
39298: LD_ADDR_VAR 0 5
39302: PUSH
39303: LD_VAR 0 5
39307: PUSH
39308: LD_VAR 0 17
39312: ISECT
39313: ST_TO_ADDR
// if not list then
39314: LD_VAR 0 5
39318: NOT
39319: IFFALSE 39323
// exit ;
39321: GO 40127
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39323: LD_VAR 0 12
39327: PUSH
39328: LD_INT 3
39330: EQUAL
39331: PUSH
39332: LD_INT 49
39334: PUSH
39335: LD_VAR 0 5
39339: IN
39340: AND
39341: PUSH
39342: LD_INT 31
39344: PPUSH
39345: LD_VAR 0 16
39349: PPUSH
39350: CALL_OW 321
39354: PUSH
39355: LD_INT 2
39357: EQUAL
39358: AND
39359: IFFALSE 39419
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39361: LD_INT 22
39363: PUSH
39364: LD_VAR 0 16
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 35
39375: PUSH
39376: LD_INT 49
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 91
39385: PUSH
39386: LD_VAR 0 1
39390: PUSH
39391: LD_INT 10
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: PPUSH
39404: CALL_OW 69
39408: NOT
39409: IFFALSE 39419
// weapon := ru_time_lapser ;
39411: LD_ADDR_VAR 0 18
39415: PUSH
39416: LD_INT 49
39418: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39419: LD_VAR 0 12
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: IN
39434: PUSH
39435: LD_INT 11
39437: PUSH
39438: LD_VAR 0 5
39442: IN
39443: PUSH
39444: LD_INT 30
39446: PUSH
39447: LD_VAR 0 5
39451: IN
39452: OR
39453: AND
39454: PUSH
39455: LD_INT 6
39457: PPUSH
39458: LD_VAR 0 16
39462: PPUSH
39463: CALL_OW 321
39467: PUSH
39468: LD_INT 2
39470: EQUAL
39471: AND
39472: IFFALSE 39637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39474: LD_INT 22
39476: PUSH
39477: LD_VAR 0 16
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 35
39491: PUSH
39492: LD_INT 11
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 35
39501: PUSH
39502: LD_INT 30
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 91
39516: PUSH
39517: LD_VAR 0 1
39521: PUSH
39522: LD_INT 18
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: PPUSH
39535: CALL_OW 69
39539: NOT
39540: PUSH
39541: LD_INT 22
39543: PUSH
39544: LD_VAR 0 16
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 30
39558: PUSH
39559: LD_INT 32
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 30
39568: PUSH
39569: LD_INT 33
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 91
39583: PUSH
39584: LD_VAR 0 1
39588: PUSH
39589: LD_INT 12
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: PPUSH
39605: CALL_OW 69
39609: PUSH
39610: LD_INT 2
39612: GREATER
39613: AND
39614: IFFALSE 39637
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39616: LD_ADDR_VAR 0 18
39620: PUSH
39621: LD_INT 11
39623: PUSH
39624: LD_INT 30
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_VAR 0 12
39635: ARRAY
39636: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39637: LD_VAR 0 18
39641: NOT
39642: PUSH
39643: LD_INT 40
39645: PPUSH
39646: LD_VAR 0 16
39650: PPUSH
39651: CALL_OW 321
39655: PUSH
39656: LD_INT 2
39658: EQUAL
39659: AND
39660: PUSH
39661: LD_INT 7
39663: PUSH
39664: LD_VAR 0 5
39668: IN
39669: PUSH
39670: LD_INT 28
39672: PUSH
39673: LD_VAR 0 5
39677: IN
39678: OR
39679: PUSH
39680: LD_INT 45
39682: PUSH
39683: LD_VAR 0 5
39687: IN
39688: OR
39689: AND
39690: IFFALSE 39944
// begin hex := GetHexInfo ( x , y ) ;
39692: LD_ADDR_VAR 0 4
39696: PUSH
39697: LD_VAR 0 10
39701: PPUSH
39702: LD_VAR 0 11
39706: PPUSH
39707: CALL_OW 546
39711: ST_TO_ADDR
// if hex [ 1 ] then
39712: LD_VAR 0 4
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: IFFALSE 39724
// exit ;
39722: GO 40127
// height := hex [ 2 ] ;
39724: LD_ADDR_VAR 0 15
39728: PUSH
39729: LD_VAR 0 4
39733: PUSH
39734: LD_INT 2
39736: ARRAY
39737: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39738: LD_ADDR_VAR 0 14
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: LD_INT 5
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// for i in tmp do
39761: LD_ADDR_VAR 0 8
39765: PUSH
39766: LD_VAR 0 14
39770: PUSH
39771: FOR_IN
39772: IFFALSE 39942
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39774: LD_ADDR_VAR 0 9
39778: PUSH
39779: LD_VAR 0 10
39783: PPUSH
39784: LD_VAR 0 8
39788: PPUSH
39789: LD_INT 5
39791: PPUSH
39792: CALL_OW 272
39796: PUSH
39797: LD_VAR 0 11
39801: PPUSH
39802: LD_VAR 0 8
39806: PPUSH
39807: LD_INT 5
39809: PPUSH
39810: CALL_OW 273
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39819: LD_VAR 0 9
39823: PUSH
39824: LD_INT 1
39826: ARRAY
39827: PPUSH
39828: LD_VAR 0 9
39832: PUSH
39833: LD_INT 2
39835: ARRAY
39836: PPUSH
39837: CALL_OW 488
39841: IFFALSE 39940
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39843: LD_ADDR_VAR 0 4
39847: PUSH
39848: LD_VAR 0 9
39852: PUSH
39853: LD_INT 1
39855: ARRAY
39856: PPUSH
39857: LD_VAR 0 9
39861: PUSH
39862: LD_INT 2
39864: ARRAY
39865: PPUSH
39866: CALL_OW 546
39870: ST_TO_ADDR
// if hex [ 1 ] then
39871: LD_VAR 0 4
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: IFFALSE 39883
// continue ;
39881: GO 39771
// h := hex [ 2 ] ;
39883: LD_ADDR_VAR 0 13
39887: PUSH
39888: LD_VAR 0 4
39892: PUSH
39893: LD_INT 2
39895: ARRAY
39896: ST_TO_ADDR
// if h + 7 < height then
39897: LD_VAR 0 13
39901: PUSH
39902: LD_INT 7
39904: PLUS
39905: PUSH
39906: LD_VAR 0 15
39910: LESS
39911: IFFALSE 39940
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39913: LD_ADDR_VAR 0 18
39917: PUSH
39918: LD_INT 7
39920: PUSH
39921: LD_INT 28
39923: PUSH
39924: LD_INT 45
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: LD_VAR 0 12
39936: ARRAY
39937: ST_TO_ADDR
// break ;
39938: GO 39942
// end ; end ; end ;
39940: GO 39771
39942: POP
39943: POP
// end ; if not weapon then
39944: LD_VAR 0 18
39948: NOT
39949: IFFALSE 40009
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39951: LD_ADDR_VAR 0 5
39955: PUSH
39956: LD_VAR 0 5
39960: PUSH
39961: LD_INT 11
39963: PUSH
39964: LD_INT 30
39966: PUSH
39967: LD_INT 49
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: DIFF
39975: ST_TO_ADDR
// if not list then
39976: LD_VAR 0 5
39980: NOT
39981: IFFALSE 39985
// exit ;
39983: GO 40127
// weapon := list [ rand ( 1 , list ) ] ;
39985: LD_ADDR_VAR 0 18
39989: PUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_INT 1
39997: PPUSH
39998: LD_VAR 0 5
40002: PPUSH
40003: CALL_OW 12
40007: ARRAY
40008: ST_TO_ADDR
// end ; if weapon then
40009: LD_VAR 0 18
40013: IFFALSE 40127
// begin tmp := CostOfWeapon ( weapon ) ;
40015: LD_ADDR_VAR 0 14
40019: PUSH
40020: LD_VAR 0 18
40024: PPUSH
40025: CALL_OW 451
40029: ST_TO_ADDR
// j := GetBase ( tower ) ;
40030: LD_ADDR_VAR 0 9
40034: PUSH
40035: LD_VAR 0 1
40039: PPUSH
40040: CALL_OW 274
40044: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40045: LD_VAR 0 9
40049: PPUSH
40050: LD_INT 1
40052: PPUSH
40053: CALL_OW 275
40057: PUSH
40058: LD_VAR 0 14
40062: PUSH
40063: LD_INT 1
40065: ARRAY
40066: GREATEREQUAL
40067: PUSH
40068: LD_VAR 0 9
40072: PPUSH
40073: LD_INT 2
40075: PPUSH
40076: CALL_OW 275
40080: PUSH
40081: LD_VAR 0 14
40085: PUSH
40086: LD_INT 2
40088: ARRAY
40089: GREATEREQUAL
40090: AND
40091: PUSH
40092: LD_VAR 0 9
40096: PPUSH
40097: LD_INT 3
40099: PPUSH
40100: CALL_OW 275
40104: PUSH
40105: LD_VAR 0 14
40109: PUSH
40110: LD_INT 3
40112: ARRAY
40113: GREATEREQUAL
40114: AND
40115: IFFALSE 40127
// result := weapon ;
40117: LD_ADDR_VAR 0 3
40121: PUSH
40122: LD_VAR 0 18
40126: ST_TO_ADDR
// end ; end ;
40127: LD_VAR 0 3
40131: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40132: LD_INT 0
40134: PPUSH
40135: PPUSH
// result := true ;
40136: LD_ADDR_VAR 0 3
40140: PUSH
40141: LD_INT 1
40143: ST_TO_ADDR
// if array1 = array2 then
40144: LD_VAR 0 1
40148: PUSH
40149: LD_VAR 0 2
40153: EQUAL
40154: IFFALSE 40214
// begin for i = 1 to array1 do
40156: LD_ADDR_VAR 0 4
40160: PUSH
40161: DOUBLE
40162: LD_INT 1
40164: DEC
40165: ST_TO_ADDR
40166: LD_VAR 0 1
40170: PUSH
40171: FOR_TO
40172: IFFALSE 40210
// if array1 [ i ] <> array2 [ i ] then
40174: LD_VAR 0 1
40178: PUSH
40179: LD_VAR 0 4
40183: ARRAY
40184: PUSH
40185: LD_VAR 0 2
40189: PUSH
40190: LD_VAR 0 4
40194: ARRAY
40195: NONEQUAL
40196: IFFALSE 40208
// begin result := false ;
40198: LD_ADDR_VAR 0 3
40202: PUSH
40203: LD_INT 0
40205: ST_TO_ADDR
// break ;
40206: GO 40210
// end ;
40208: GO 40171
40210: POP
40211: POP
// end else
40212: GO 40222
// result := false ;
40214: LD_ADDR_VAR 0 3
40218: PUSH
40219: LD_INT 0
40221: ST_TO_ADDR
// end ;
40222: LD_VAR 0 3
40226: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40227: LD_INT 0
40229: PPUSH
40230: PPUSH
// if not array1 or not array2 then
40231: LD_VAR 0 1
40235: NOT
40236: PUSH
40237: LD_VAR 0 2
40241: NOT
40242: OR
40243: IFFALSE 40247
// exit ;
40245: GO 40311
// result := true ;
40247: LD_ADDR_VAR 0 3
40251: PUSH
40252: LD_INT 1
40254: ST_TO_ADDR
// for i = 1 to array1 do
40255: LD_ADDR_VAR 0 4
40259: PUSH
40260: DOUBLE
40261: LD_INT 1
40263: DEC
40264: ST_TO_ADDR
40265: LD_VAR 0 1
40269: PUSH
40270: FOR_TO
40271: IFFALSE 40309
// if array1 [ i ] <> array2 [ i ] then
40273: LD_VAR 0 1
40277: PUSH
40278: LD_VAR 0 4
40282: ARRAY
40283: PUSH
40284: LD_VAR 0 2
40288: PUSH
40289: LD_VAR 0 4
40293: ARRAY
40294: NONEQUAL
40295: IFFALSE 40307
// begin result := false ;
40297: LD_ADDR_VAR 0 3
40301: PUSH
40302: LD_INT 0
40304: ST_TO_ADDR
// break ;
40305: GO 40309
// end ;
40307: GO 40270
40309: POP
40310: POP
// end ;
40311: LD_VAR 0 3
40315: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40316: LD_INT 0
40318: PPUSH
40319: PPUSH
40320: PPUSH
// pom := GetBase ( fac ) ;
40321: LD_ADDR_VAR 0 5
40325: PUSH
40326: LD_VAR 0 1
40330: PPUSH
40331: CALL_OW 274
40335: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40336: LD_ADDR_VAR 0 4
40340: PUSH
40341: LD_VAR 0 2
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PPUSH
40350: LD_VAR 0 2
40354: PUSH
40355: LD_INT 2
40357: ARRAY
40358: PPUSH
40359: LD_VAR 0 2
40363: PUSH
40364: LD_INT 3
40366: ARRAY
40367: PPUSH
40368: LD_VAR 0 2
40372: PUSH
40373: LD_INT 4
40375: ARRAY
40376: PPUSH
40377: CALL_OW 449
40381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40382: LD_ADDR_VAR 0 3
40386: PUSH
40387: LD_VAR 0 5
40391: PPUSH
40392: LD_INT 1
40394: PPUSH
40395: CALL_OW 275
40399: PUSH
40400: LD_VAR 0 4
40404: PUSH
40405: LD_INT 1
40407: ARRAY
40408: GREATEREQUAL
40409: PUSH
40410: LD_VAR 0 5
40414: PPUSH
40415: LD_INT 2
40417: PPUSH
40418: CALL_OW 275
40422: PUSH
40423: LD_VAR 0 4
40427: PUSH
40428: LD_INT 2
40430: ARRAY
40431: GREATEREQUAL
40432: AND
40433: PUSH
40434: LD_VAR 0 5
40438: PPUSH
40439: LD_INT 3
40441: PPUSH
40442: CALL_OW 275
40446: PUSH
40447: LD_VAR 0 4
40451: PUSH
40452: LD_INT 3
40454: ARRAY
40455: GREATEREQUAL
40456: AND
40457: ST_TO_ADDR
// end ;
40458: LD_VAR 0 3
40462: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40463: LD_INT 0
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
// pom := GetBase ( building ) ;
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_VAR 0 1
40478: PPUSH
40479: CALL_OW 274
40483: ST_TO_ADDR
// if not pom then
40484: LD_VAR 0 3
40488: NOT
40489: IFFALSE 40493
// exit ;
40491: GO 40663
// btype := GetBType ( building ) ;
40493: LD_ADDR_VAR 0 5
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 266
40507: ST_TO_ADDR
// if btype = b_armoury then
40508: LD_VAR 0 5
40512: PUSH
40513: LD_INT 4
40515: EQUAL
40516: IFFALSE 40526
// btype := b_barracks ;
40518: LD_ADDR_VAR 0 5
40522: PUSH
40523: LD_INT 5
40525: ST_TO_ADDR
// if btype = b_depot then
40526: LD_VAR 0 5
40530: PUSH
40531: LD_INT 0
40533: EQUAL
40534: IFFALSE 40544
// btype := b_warehouse ;
40536: LD_ADDR_VAR 0 5
40540: PUSH
40541: LD_INT 1
40543: ST_TO_ADDR
// if btype = b_workshop then
40544: LD_VAR 0 5
40548: PUSH
40549: LD_INT 2
40551: EQUAL
40552: IFFALSE 40562
// btype := b_factory ;
40554: LD_ADDR_VAR 0 5
40558: PUSH
40559: LD_INT 3
40561: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: LD_VAR 0 5
40571: PPUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 248
40581: PPUSH
40582: CALL_OW 450
40586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40587: LD_ADDR_VAR 0 2
40591: PUSH
40592: LD_VAR 0 3
40596: PPUSH
40597: LD_INT 1
40599: PPUSH
40600: CALL_OW 275
40604: PUSH
40605: LD_VAR 0 4
40609: PUSH
40610: LD_INT 1
40612: ARRAY
40613: GREATEREQUAL
40614: PUSH
40615: LD_VAR 0 3
40619: PPUSH
40620: LD_INT 2
40622: PPUSH
40623: CALL_OW 275
40627: PUSH
40628: LD_VAR 0 4
40632: PUSH
40633: LD_INT 2
40635: ARRAY
40636: GREATEREQUAL
40637: AND
40638: PUSH
40639: LD_VAR 0 3
40643: PPUSH
40644: LD_INT 3
40646: PPUSH
40647: CALL_OW 275
40651: PUSH
40652: LD_VAR 0 4
40656: PUSH
40657: LD_INT 3
40659: ARRAY
40660: GREATEREQUAL
40661: AND
40662: ST_TO_ADDR
// end ;
40663: LD_VAR 0 2
40667: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40668: LD_INT 0
40670: PPUSH
40671: PPUSH
40672: PPUSH
// pom := GetBase ( building ) ;
40673: LD_ADDR_VAR 0 4
40677: PUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 274
40687: ST_TO_ADDR
// if not pom then
40688: LD_VAR 0 4
40692: NOT
40693: IFFALSE 40697
// exit ;
40695: GO 40798
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40697: LD_ADDR_VAR 0 5
40701: PUSH
40702: LD_VAR 0 2
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: CALL_OW 248
40716: PPUSH
40717: CALL_OW 450
40721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_VAR 0 4
40731: PPUSH
40732: LD_INT 1
40734: PPUSH
40735: CALL_OW 275
40739: PUSH
40740: LD_VAR 0 5
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: GREATEREQUAL
40749: PUSH
40750: LD_VAR 0 4
40754: PPUSH
40755: LD_INT 2
40757: PPUSH
40758: CALL_OW 275
40762: PUSH
40763: LD_VAR 0 5
40767: PUSH
40768: LD_INT 2
40770: ARRAY
40771: GREATEREQUAL
40772: AND
40773: PUSH
40774: LD_VAR 0 4
40778: PPUSH
40779: LD_INT 3
40781: PPUSH
40782: CALL_OW 275
40786: PUSH
40787: LD_VAR 0 5
40791: PUSH
40792: LD_INT 3
40794: ARRAY
40795: GREATEREQUAL
40796: AND
40797: ST_TO_ADDR
// end ;
40798: LD_VAR 0 3
40802: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40803: LD_INT 0
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
// result := false ;
40816: LD_ADDR_VAR 0 8
40820: PUSH
40821: LD_INT 0
40823: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40824: LD_VAR 0 5
40828: NOT
40829: PUSH
40830: LD_VAR 0 1
40834: NOT
40835: OR
40836: PUSH
40837: LD_VAR 0 2
40841: NOT
40842: OR
40843: PUSH
40844: LD_VAR 0 3
40848: NOT
40849: OR
40850: IFFALSE 40854
// exit ;
40852: GO 41668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40854: LD_ADDR_VAR 0 14
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_VAR 0 2
40868: PPUSH
40869: LD_VAR 0 3
40873: PPUSH
40874: LD_VAR 0 4
40878: PPUSH
40879: LD_VAR 0 5
40883: PUSH
40884: LD_INT 1
40886: ARRAY
40887: PPUSH
40888: CALL_OW 248
40892: PPUSH
40893: LD_INT 0
40895: PPUSH
40896: CALL 42901 0 6
40900: ST_TO_ADDR
// if not hexes then
40901: LD_VAR 0 14
40905: NOT
40906: IFFALSE 40910
// exit ;
40908: GO 41668
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40910: LD_ADDR_VAR 0 17
40914: PUSH
40915: LD_VAR 0 5
40919: PPUSH
40920: LD_INT 22
40922: PUSH
40923: LD_VAR 0 13
40927: PPUSH
40928: CALL_OW 255
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 30
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 30
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PPUSH
40969: CALL_OW 72
40973: ST_TO_ADDR
// for i = 1 to hexes do
40974: LD_ADDR_VAR 0 9
40978: PUSH
40979: DOUBLE
40980: LD_INT 1
40982: DEC
40983: ST_TO_ADDR
40984: LD_VAR 0 14
40988: PUSH
40989: FOR_TO
40990: IFFALSE 41666
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40992: LD_ADDR_VAR 0 13
40996: PUSH
40997: LD_VAR 0 14
41001: PUSH
41002: LD_VAR 0 9
41006: ARRAY
41007: PUSH
41008: LD_INT 1
41010: ARRAY
41011: PPUSH
41012: LD_VAR 0 14
41016: PUSH
41017: LD_VAR 0 9
41021: ARRAY
41022: PUSH
41023: LD_INT 2
41025: ARRAY
41026: PPUSH
41027: CALL_OW 428
41031: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41032: LD_VAR 0 14
41036: PUSH
41037: LD_VAR 0 9
41041: ARRAY
41042: PUSH
41043: LD_INT 1
41045: ARRAY
41046: PPUSH
41047: LD_VAR 0 14
41051: PUSH
41052: LD_VAR 0 9
41056: ARRAY
41057: PUSH
41058: LD_INT 2
41060: ARRAY
41061: PPUSH
41062: CALL_OW 351
41066: PUSH
41067: LD_VAR 0 14
41071: PUSH
41072: LD_VAR 0 9
41076: ARRAY
41077: PUSH
41078: LD_INT 1
41080: ARRAY
41081: PPUSH
41082: LD_VAR 0 14
41086: PUSH
41087: LD_VAR 0 9
41091: ARRAY
41092: PUSH
41093: LD_INT 2
41095: ARRAY
41096: PPUSH
41097: CALL_OW 488
41101: NOT
41102: OR
41103: PUSH
41104: LD_VAR 0 13
41108: PPUSH
41109: CALL_OW 247
41113: PUSH
41114: LD_INT 3
41116: EQUAL
41117: OR
41118: IFFALSE 41124
// exit ;
41120: POP
41121: POP
41122: GO 41668
// if not tmp then
41124: LD_VAR 0 13
41128: NOT
41129: IFFALSE 41133
// continue ;
41131: GO 40989
// result := true ;
41133: LD_ADDR_VAR 0 8
41137: PUSH
41138: LD_INT 1
41140: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41141: LD_VAR 0 6
41145: PUSH
41146: LD_VAR 0 13
41150: PPUSH
41151: CALL_OW 247
41155: PUSH
41156: LD_INT 2
41158: EQUAL
41159: AND
41160: PUSH
41161: LD_VAR 0 13
41165: PPUSH
41166: CALL_OW 263
41170: PUSH
41171: LD_INT 1
41173: EQUAL
41174: AND
41175: IFFALSE 41339
// begin if IsDrivenBy ( tmp ) then
41177: LD_VAR 0 13
41181: PPUSH
41182: CALL_OW 311
41186: IFFALSE 41190
// continue ;
41188: GO 40989
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41190: LD_VAR 0 6
41194: PPUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 60
41200: PUSH
41201: EMPTY
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: LD_INT 55
41213: PUSH
41214: EMPTY
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PPUSH
41225: CALL_OW 72
41229: IFFALSE 41337
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41231: LD_ADDR_VAR 0 18
41235: PUSH
41236: LD_VAR 0 6
41240: PPUSH
41241: LD_INT 3
41243: PUSH
41244: LD_INT 60
41246: PUSH
41247: EMPTY
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: LD_INT 55
41259: PUSH
41260: EMPTY
41261: LIST
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PPUSH
41271: CALL_OW 72
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: ST_TO_ADDR
// if IsInUnit ( driver ) then
41280: LD_VAR 0 18
41284: PPUSH
41285: CALL_OW 310
41289: IFFALSE 41300
// ComExit ( driver ) ;
41291: LD_VAR 0 18
41295: PPUSH
41296: CALL 66681 0 1
// AddComEnterUnit ( driver , tmp ) ;
41300: LD_VAR 0 18
41304: PPUSH
41305: LD_VAR 0 13
41309: PPUSH
41310: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41314: LD_VAR 0 18
41318: PPUSH
41319: LD_VAR 0 7
41323: PPUSH
41324: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41328: LD_VAR 0 18
41332: PPUSH
41333: CALL_OW 181
// end ; continue ;
41337: GO 40989
// end ; if not cleaners or not tmp in cleaners then
41339: LD_VAR 0 6
41343: NOT
41344: PUSH
41345: LD_VAR 0 13
41349: PUSH
41350: LD_VAR 0 6
41354: IN
41355: NOT
41356: OR
41357: IFFALSE 41664
// begin if dep then
41359: LD_VAR 0 17
41363: IFFALSE 41499
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41365: LD_ADDR_VAR 0 16
41369: PUSH
41370: LD_VAR 0 17
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: PPUSH
41379: CALL_OW 250
41383: PPUSH
41384: LD_VAR 0 17
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: PPUSH
41393: CALL_OW 254
41397: PPUSH
41398: LD_INT 5
41400: PPUSH
41401: CALL_OW 272
41405: PUSH
41406: LD_VAR 0 17
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: CALL_OW 251
41419: PPUSH
41420: LD_VAR 0 17
41424: PUSH
41425: LD_INT 1
41427: ARRAY
41428: PPUSH
41429: CALL_OW 254
41433: PPUSH
41434: LD_INT 5
41436: PPUSH
41437: CALL_OW 273
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41446: LD_VAR 0 16
41450: PUSH
41451: LD_INT 1
41453: ARRAY
41454: PPUSH
41455: LD_VAR 0 16
41459: PUSH
41460: LD_INT 2
41462: ARRAY
41463: PPUSH
41464: CALL_OW 488
41468: IFFALSE 41499
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41470: LD_VAR 0 13
41474: PPUSH
41475: LD_VAR 0 16
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: PPUSH
41484: LD_VAR 0 16
41488: PUSH
41489: LD_INT 2
41491: ARRAY
41492: PPUSH
41493: CALL_OW 111
// continue ;
41497: GO 40989
// end ; end ; r := GetDir ( tmp ) ;
41499: LD_ADDR_VAR 0 15
41503: PUSH
41504: LD_VAR 0 13
41508: PPUSH
41509: CALL_OW 254
41513: ST_TO_ADDR
// if r = 5 then
41514: LD_VAR 0 15
41518: PUSH
41519: LD_INT 5
41521: EQUAL
41522: IFFALSE 41532
// r := 0 ;
41524: LD_ADDR_VAR 0 15
41528: PUSH
41529: LD_INT 0
41531: ST_TO_ADDR
// for j = r to 5 do
41532: LD_ADDR_VAR 0 10
41536: PUSH
41537: DOUBLE
41538: LD_VAR 0 15
41542: DEC
41543: ST_TO_ADDR
41544: LD_INT 5
41546: PUSH
41547: FOR_TO
41548: IFFALSE 41662
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41550: LD_ADDR_VAR 0 11
41554: PUSH
41555: LD_VAR 0 13
41559: PPUSH
41560: CALL_OW 250
41564: PPUSH
41565: LD_VAR 0 10
41569: PPUSH
41570: LD_INT 2
41572: PPUSH
41573: CALL_OW 272
41577: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41578: LD_ADDR_VAR 0 12
41582: PUSH
41583: LD_VAR 0 13
41587: PPUSH
41588: CALL_OW 251
41592: PPUSH
41593: LD_VAR 0 10
41597: PPUSH
41598: LD_INT 2
41600: PPUSH
41601: CALL_OW 273
41605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41606: LD_VAR 0 11
41610: PPUSH
41611: LD_VAR 0 12
41615: PPUSH
41616: CALL_OW 488
41620: PUSH
41621: LD_VAR 0 11
41625: PPUSH
41626: LD_VAR 0 12
41630: PPUSH
41631: CALL_OW 428
41635: NOT
41636: AND
41637: IFFALSE 41660
// begin ComMoveXY ( tmp , _x , _y ) ;
41639: LD_VAR 0 13
41643: PPUSH
41644: LD_VAR 0 11
41648: PPUSH
41649: LD_VAR 0 12
41653: PPUSH
41654: CALL_OW 111
// break ;
41658: GO 41662
// end ; end ;
41660: GO 41547
41662: POP
41663: POP
// end ; end ;
41664: GO 40989
41666: POP
41667: POP
// end ;
41668: LD_VAR 0 8
41672: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41673: LD_INT 0
41675: PPUSH
// result := true ;
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_INT 1
41683: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41684: LD_VAR 0 2
41688: PUSH
41689: LD_INT 24
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41703
41695: LD_INT 33
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41703
41701: GO 41728
41703: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41704: LD_ADDR_VAR 0 3
41708: PUSH
41709: LD_INT 32
41711: PPUSH
41712: LD_VAR 0 1
41716: PPUSH
41717: CALL_OW 321
41721: PUSH
41722: LD_INT 2
41724: EQUAL
41725: ST_TO_ADDR
41726: GO 42044
41728: LD_INT 20
41730: DOUBLE
41731: EQUAL
41732: IFTRUE 41736
41734: GO 41761
41736: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41737: LD_ADDR_VAR 0 3
41741: PUSH
41742: LD_INT 6
41744: PPUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: CALL_OW 321
41754: PUSH
41755: LD_INT 2
41757: EQUAL
41758: ST_TO_ADDR
41759: GO 42044
41761: LD_INT 22
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41775
41767: LD_INT 36
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41775
41773: GO 41800
41775: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41776: LD_ADDR_VAR 0 3
41780: PUSH
41781: LD_INT 15
41783: PPUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: CALL_OW 321
41793: PUSH
41794: LD_INT 2
41796: EQUAL
41797: ST_TO_ADDR
41798: GO 42044
41800: LD_INT 30
41802: DOUBLE
41803: EQUAL
41804: IFTRUE 41808
41806: GO 41833
41808: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41809: LD_ADDR_VAR 0 3
41813: PUSH
41814: LD_INT 20
41816: PPUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 321
41826: PUSH
41827: LD_INT 2
41829: EQUAL
41830: ST_TO_ADDR
41831: GO 42044
41833: LD_INT 28
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41847
41839: LD_INT 21
41841: DOUBLE
41842: EQUAL
41843: IFTRUE 41847
41845: GO 41872
41847: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41848: LD_ADDR_VAR 0 3
41852: PUSH
41853: LD_INT 21
41855: PPUSH
41856: LD_VAR 0 1
41860: PPUSH
41861: CALL_OW 321
41865: PUSH
41866: LD_INT 2
41868: EQUAL
41869: ST_TO_ADDR
41870: GO 42044
41872: LD_INT 16
41874: DOUBLE
41875: EQUAL
41876: IFTRUE 41880
41878: GO 41905
41880: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41881: LD_ADDR_VAR 0 3
41885: PUSH
41886: LD_INT 84
41888: PPUSH
41889: LD_VAR 0 1
41893: PPUSH
41894: CALL_OW 321
41898: PUSH
41899: LD_INT 2
41901: EQUAL
41902: ST_TO_ADDR
41903: GO 42044
41905: LD_INT 19
41907: DOUBLE
41908: EQUAL
41909: IFTRUE 41919
41911: LD_INT 23
41913: DOUBLE
41914: EQUAL
41915: IFTRUE 41919
41917: GO 41944
41919: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41920: LD_ADDR_VAR 0 3
41924: PUSH
41925: LD_INT 83
41927: PPUSH
41928: LD_VAR 0 1
41932: PPUSH
41933: CALL_OW 321
41937: PUSH
41938: LD_INT 2
41940: EQUAL
41941: ST_TO_ADDR
41942: GO 42044
41944: LD_INT 17
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 41977
41952: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41953: LD_ADDR_VAR 0 3
41957: PUSH
41958: LD_INT 39
41960: PPUSH
41961: LD_VAR 0 1
41965: PPUSH
41966: CALL_OW 321
41970: PUSH
41971: LD_INT 2
41973: EQUAL
41974: ST_TO_ADDR
41975: GO 42044
41977: LD_INT 18
41979: DOUBLE
41980: EQUAL
41981: IFTRUE 41985
41983: GO 42010
41985: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_INT 40
41993: PPUSH
41994: LD_VAR 0 1
41998: PPUSH
41999: CALL_OW 321
42003: PUSH
42004: LD_INT 2
42006: EQUAL
42007: ST_TO_ADDR
42008: GO 42044
42010: LD_INT 27
42012: DOUBLE
42013: EQUAL
42014: IFTRUE 42018
42016: GO 42043
42018: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42019: LD_ADDR_VAR 0 3
42023: PUSH
42024: LD_INT 35
42026: PPUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: CALL_OW 321
42036: PUSH
42037: LD_INT 2
42039: EQUAL
42040: ST_TO_ADDR
42041: GO 42044
42043: POP
// end ;
42044: LD_VAR 0 3
42048: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42049: LD_INT 0
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
42055: PPUSH
42056: PPUSH
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
// result := false ;
42062: LD_ADDR_VAR 0 6
42066: PUSH
42067: LD_INT 0
42069: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42070: LD_VAR 0 1
42074: NOT
42075: PUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: CALL_OW 266
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: IN
42096: NOT
42097: OR
42098: PUSH
42099: LD_VAR 0 2
42103: NOT
42104: OR
42105: PUSH
42106: LD_VAR 0 5
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 3
42122: PUSH
42123: LD_INT 4
42125: PUSH
42126: LD_INT 5
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: IN
42137: NOT
42138: OR
42139: PUSH
42140: LD_VAR 0 3
42144: PPUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: CALL_OW 488
42154: NOT
42155: OR
42156: IFFALSE 42160
// exit ;
42158: GO 42896
// side := GetSide ( depot ) ;
42160: LD_ADDR_VAR 0 9
42164: PUSH
42165: LD_VAR 0 1
42169: PPUSH
42170: CALL_OW 255
42174: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42175: LD_VAR 0 9
42179: PPUSH
42180: LD_VAR 0 2
42184: PPUSH
42185: CALL 41673 0 2
42189: NOT
42190: IFFALSE 42194
// exit ;
42192: GO 42896
// pom := GetBase ( depot ) ;
42194: LD_ADDR_VAR 0 10
42198: PUSH
42199: LD_VAR 0 1
42203: PPUSH
42204: CALL_OW 274
42208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42209: LD_ADDR_VAR 0 11
42213: PUSH
42214: LD_VAR 0 2
42218: PPUSH
42219: LD_VAR 0 1
42223: PPUSH
42224: CALL_OW 248
42228: PPUSH
42229: CALL_OW 450
42233: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42234: LD_VAR 0 10
42238: PPUSH
42239: LD_INT 1
42241: PPUSH
42242: CALL_OW 275
42246: PUSH
42247: LD_VAR 0 11
42251: PUSH
42252: LD_INT 1
42254: ARRAY
42255: GREATEREQUAL
42256: PUSH
42257: LD_VAR 0 10
42261: PPUSH
42262: LD_INT 2
42264: PPUSH
42265: CALL_OW 275
42269: PUSH
42270: LD_VAR 0 11
42274: PUSH
42275: LD_INT 2
42277: ARRAY
42278: GREATEREQUAL
42279: AND
42280: PUSH
42281: LD_VAR 0 10
42285: PPUSH
42286: LD_INT 3
42288: PPUSH
42289: CALL_OW 275
42293: PUSH
42294: LD_VAR 0 11
42298: PUSH
42299: LD_INT 3
42301: ARRAY
42302: GREATEREQUAL
42303: AND
42304: NOT
42305: IFFALSE 42309
// exit ;
42307: GO 42896
// if GetBType ( depot ) = b_depot then
42309: LD_VAR 0 1
42313: PPUSH
42314: CALL_OW 266
42318: PUSH
42319: LD_INT 0
42321: EQUAL
42322: IFFALSE 42334
// dist := 28 else
42324: LD_ADDR_VAR 0 14
42328: PUSH
42329: LD_INT 28
42331: ST_TO_ADDR
42332: GO 42342
// dist := 36 ;
42334: LD_ADDR_VAR 0 14
42338: PUSH
42339: LD_INT 36
42341: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42342: LD_VAR 0 1
42346: PPUSH
42347: LD_VAR 0 3
42351: PPUSH
42352: LD_VAR 0 4
42356: PPUSH
42357: CALL_OW 297
42361: PUSH
42362: LD_VAR 0 14
42366: GREATER
42367: IFFALSE 42371
// exit ;
42369: GO 42896
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42371: LD_ADDR_VAR 0 12
42375: PUSH
42376: LD_VAR 0 2
42380: PPUSH
42381: LD_VAR 0 3
42385: PPUSH
42386: LD_VAR 0 4
42390: PPUSH
42391: LD_VAR 0 5
42395: PPUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 248
42405: PPUSH
42406: LD_INT 0
42408: PPUSH
42409: CALL 42901 0 6
42413: ST_TO_ADDR
// if not hexes then
42414: LD_VAR 0 12
42418: NOT
42419: IFFALSE 42423
// exit ;
42421: GO 42896
// hex := GetHexInfo ( x , y ) ;
42423: LD_ADDR_VAR 0 15
42427: PUSH
42428: LD_VAR 0 3
42432: PPUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: CALL_OW 546
42442: ST_TO_ADDR
// if hex [ 1 ] then
42443: LD_VAR 0 15
42447: PUSH
42448: LD_INT 1
42450: ARRAY
42451: IFFALSE 42455
// exit ;
42453: GO 42896
// height := hex [ 2 ] ;
42455: LD_ADDR_VAR 0 13
42459: PUSH
42460: LD_VAR 0 15
42464: PUSH
42465: LD_INT 2
42467: ARRAY
42468: ST_TO_ADDR
// for i = 1 to hexes do
42469: LD_ADDR_VAR 0 7
42473: PUSH
42474: DOUBLE
42475: LD_INT 1
42477: DEC
42478: ST_TO_ADDR
42479: LD_VAR 0 12
42483: PUSH
42484: FOR_TO
42485: IFFALSE 42815
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42487: LD_VAR 0 12
42491: PUSH
42492: LD_VAR 0 7
42496: ARRAY
42497: PUSH
42498: LD_INT 1
42500: ARRAY
42501: PPUSH
42502: LD_VAR 0 12
42506: PUSH
42507: LD_VAR 0 7
42511: ARRAY
42512: PUSH
42513: LD_INT 2
42515: ARRAY
42516: PPUSH
42517: CALL_OW 488
42521: NOT
42522: PUSH
42523: LD_VAR 0 12
42527: PUSH
42528: LD_VAR 0 7
42532: ARRAY
42533: PUSH
42534: LD_INT 1
42536: ARRAY
42537: PPUSH
42538: LD_VAR 0 12
42542: PUSH
42543: LD_VAR 0 7
42547: ARRAY
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: PPUSH
42553: CALL_OW 428
42557: PUSH
42558: LD_INT 0
42560: GREATER
42561: OR
42562: PUSH
42563: LD_VAR 0 12
42567: PUSH
42568: LD_VAR 0 7
42572: ARRAY
42573: PUSH
42574: LD_INT 1
42576: ARRAY
42577: PPUSH
42578: LD_VAR 0 12
42582: PUSH
42583: LD_VAR 0 7
42587: ARRAY
42588: PUSH
42589: LD_INT 2
42591: ARRAY
42592: PPUSH
42593: CALL_OW 351
42597: OR
42598: IFFALSE 42604
// exit ;
42600: POP
42601: POP
42602: GO 42896
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42604: LD_ADDR_VAR 0 8
42608: PUSH
42609: LD_VAR 0 12
42613: PUSH
42614: LD_VAR 0 7
42618: ARRAY
42619: PUSH
42620: LD_INT 1
42622: ARRAY
42623: PPUSH
42624: LD_VAR 0 12
42628: PUSH
42629: LD_VAR 0 7
42633: ARRAY
42634: PUSH
42635: LD_INT 2
42637: ARRAY
42638: PPUSH
42639: CALL_OW 546
42643: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42644: LD_VAR 0 8
42648: PUSH
42649: LD_INT 1
42651: ARRAY
42652: PUSH
42653: LD_VAR 0 8
42657: PUSH
42658: LD_INT 2
42660: ARRAY
42661: PUSH
42662: LD_VAR 0 13
42666: PUSH
42667: LD_INT 2
42669: PLUS
42670: GREATER
42671: OR
42672: PUSH
42673: LD_VAR 0 8
42677: PUSH
42678: LD_INT 2
42680: ARRAY
42681: PUSH
42682: LD_VAR 0 13
42686: PUSH
42687: LD_INT 2
42689: MINUS
42690: LESS
42691: OR
42692: PUSH
42693: LD_VAR 0 8
42697: PUSH
42698: LD_INT 3
42700: ARRAY
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 8
42707: PUSH
42708: LD_INT 9
42710: PUSH
42711: LD_INT 10
42713: PUSH
42714: LD_INT 11
42716: PUSH
42717: LD_INT 12
42719: PUSH
42720: LD_INT 13
42722: PUSH
42723: LD_INT 16
42725: PUSH
42726: LD_INT 17
42728: PUSH
42729: LD_INT 18
42731: PUSH
42732: LD_INT 19
42734: PUSH
42735: LD_INT 20
42737: PUSH
42738: LD_INT 21
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: IN
42756: NOT
42757: OR
42758: PUSH
42759: LD_VAR 0 8
42763: PUSH
42764: LD_INT 5
42766: ARRAY
42767: NOT
42768: OR
42769: PUSH
42770: LD_VAR 0 8
42774: PUSH
42775: LD_INT 6
42777: ARRAY
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 7
42787: PUSH
42788: LD_INT 9
42790: PUSH
42791: LD_INT 10
42793: PUSH
42794: LD_INT 11
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: IN
42805: NOT
42806: OR
42807: IFFALSE 42813
// exit ;
42809: POP
42810: POP
42811: GO 42896
// end ;
42813: GO 42484
42815: POP
42816: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42817: LD_VAR 0 9
42821: PPUSH
42822: LD_VAR 0 3
42826: PPUSH
42827: LD_VAR 0 4
42831: PPUSH
42832: LD_INT 20
42834: PPUSH
42835: CALL 34848 0 4
42839: PUSH
42840: LD_INT 4
42842: ARRAY
42843: IFFALSE 42847
// exit ;
42845: GO 42896
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42847: LD_VAR 0 2
42851: PUSH
42852: LD_INT 29
42854: PUSH
42855: LD_INT 30
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: IN
42862: PUSH
42863: LD_VAR 0 3
42867: PPUSH
42868: LD_VAR 0 4
42872: PPUSH
42873: LD_VAR 0 9
42877: PPUSH
42878: CALL_OW 440
42882: NOT
42883: AND
42884: IFFALSE 42888
// exit ;
42886: GO 42896
// result := true ;
42888: LD_ADDR_VAR 0 6
42892: PUSH
42893: LD_INT 1
42895: ST_TO_ADDR
// end ;
42896: LD_VAR 0 6
42900: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42901: LD_INT 0
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
// result = [ ] ;
42961: LD_ADDR_VAR 0 7
42965: PUSH
42966: EMPTY
42967: ST_TO_ADDR
// temp_list = [ ] ;
42968: LD_ADDR_VAR 0 9
42972: PUSH
42973: EMPTY
42974: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42975: LD_VAR 0 4
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: LD_INT 5
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: IN
43006: NOT
43007: PUSH
43008: LD_VAR 0 1
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: IN
43023: PUSH
43024: LD_VAR 0 5
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: IN
43043: NOT
43044: AND
43045: OR
43046: IFFALSE 43050
// exit ;
43048: GO 61441
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43050: LD_VAR 0 1
43054: PUSH
43055: LD_INT 6
43057: PUSH
43058: LD_INT 7
43060: PUSH
43061: LD_INT 8
43063: PUSH
43064: LD_INT 13
43066: PUSH
43067: LD_INT 12
43069: PUSH
43070: LD_INT 15
43072: PUSH
43073: LD_INT 11
43075: PUSH
43076: LD_INT 14
43078: PUSH
43079: LD_INT 10
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: IN
43093: IFFALSE 43103
// btype = b_lab ;
43095: LD_ADDR_VAR 0 1
43099: PUSH
43100: LD_INT 6
43102: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43103: LD_VAR 0 6
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: IN
43122: NOT
43123: PUSH
43124: LD_VAR 0 1
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 6
43143: PUSH
43144: LD_INT 36
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: LD_INT 5
43152: PUSH
43153: LD_INT 31
43155: PUSH
43156: LD_INT 32
43158: PUSH
43159: LD_INT 33
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: IN
43175: NOT
43176: PUSH
43177: LD_VAR 0 6
43181: PUSH
43182: LD_INT 1
43184: EQUAL
43185: AND
43186: OR
43187: PUSH
43188: LD_VAR 0 1
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: IN
43203: NOT
43204: PUSH
43205: LD_VAR 0 6
43209: PUSH
43210: LD_INT 2
43212: EQUAL
43213: AND
43214: OR
43215: IFFALSE 43225
// mode = 0 ;
43217: LD_ADDR_VAR 0 6
43221: PUSH
43222: LD_INT 0
43224: ST_TO_ADDR
// case mode of 0 :
43225: LD_VAR 0 6
43229: PUSH
43230: LD_INT 0
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 54691
43238: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43239: LD_ADDR_VAR 0 11
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43432: LD_ADDR_VAR 0 12
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43628: LD_ADDR_VAR 0 13
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: LD_INT 3
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 3
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 3
43799: NEG
43800: PUSH
43801: LD_INT 3
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43827: LD_ADDR_VAR 0 14
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 3
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44023: LD_ADDR_VAR 0 15
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44216: LD_ADDR_VAR 0 16
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44409: LD_ADDR_VAR 0 17
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44639: LD_ADDR_VAR 0 18
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44869: LD_ADDR_VAR 0 19
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45099: LD_ADDR_VAR 0 20
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45329: LD_ADDR_VAR 0 21
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45559: LD_ADDR_VAR 0 22
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45789: LD_ADDR_VAR 0 23
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46069: LD_ADDR_VAR 0 24
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46345: LD_ADDR_VAR 0 25
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46619: LD_ADDR_VAR 0 26
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46895: LD_ADDR_VAR 0 27
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47175: LD_ADDR_VAR 0 28
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47457: LD_ADDR_VAR 0 29
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47736: LD_ADDR_VAR 0 30
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 3
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48014: LD_ADDR_VAR 0 31
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48292: LD_ADDR_VAR 0 32
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 3
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48570: LD_ADDR_VAR 0 33
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48849: LD_ADDR_VAR 0 34
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49129: LD_ADDR_VAR 0 35
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49241: LD_ADDR_VAR 0 36
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49353: LD_ADDR_VAR 0 37
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49465: LD_ADDR_VAR 0 38
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49577: LD_ADDR_VAR 0 39
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49689: LD_ADDR_VAR 0 40
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49801: LD_ADDR_VAR 0 41
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50151: LD_ADDR_VAR 0 42
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50501: LD_ADDR_VAR 0 43
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 3
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50849: LD_ADDR_VAR 0 44
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: NEG
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51199: LD_ADDR_VAR 0 45
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 3
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51549: LD_ADDR_VAR 0 46
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51897: LD_ADDR_VAR 0 47
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52048: LD_ADDR_VAR 0 48
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52195: LD_ADDR_VAR 0 49
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52339: LD_ADDR_VAR 0 50
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52483: LD_ADDR_VAR 0 51
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52630: LD_ADDR_VAR 0 52
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52781: LD_ADDR_VAR 0 53
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53011: LD_ADDR_VAR 0 54
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53241: LD_ADDR_VAR 0 55
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53471: LD_ADDR_VAR 0 56
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53701: LD_ADDR_VAR 0 57
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53931: LD_ADDR_VAR 0 58
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54161: LD_ADDR_VAR 0 59
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54249: LD_ADDR_VAR 0 60
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54337: LD_ADDR_VAR 0 61
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54425: LD_ADDR_VAR 0 62
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54513: LD_ADDR_VAR 0 63
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54601: LD_ADDR_VAR 0 64
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: ST_TO_ADDR
// end ; 1 :
54689: GO 60586
54691: LD_INT 1
54693: DOUBLE
54694: EQUAL
54695: IFTRUE 54699
54697: GO 57322
54699: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54700: LD_ADDR_VAR 0 11
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54744: LD_ADDR_VAR 0 12
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54785: LD_ADDR_VAR 0 13
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54825: LD_ADDR_VAR 0 14
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54866: LD_ADDR_VAR 0 15
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54910: LD_ADDR_VAR 0 16
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54956: LD_ADDR_VAR 0 17
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55000: LD_ADDR_VAR 0 18
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55041: LD_ADDR_VAR 0 19
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55081: LD_ADDR_VAR 0 20
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55122: LD_ADDR_VAR 0 21
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55166: LD_ADDR_VAR 0 22
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55212: LD_ADDR_VAR 0 23
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 4
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55256: LD_ADDR_VAR 0 24
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 4
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55297: LD_ADDR_VAR 0 25
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 4
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: LD_INT 4
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55337: LD_ADDR_VAR 0 26
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55378: LD_ADDR_VAR 0 27
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 4
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55422: LD_ADDR_VAR 0 28
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: LD_INT 4
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 4
55453: NEG
55454: PUSH
55455: LD_INT 3
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55468: LD_ADDR_VAR 0 29
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 4
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 4
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 5
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 5
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 6
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 6
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 5
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55623: LD_ADDR_VAR 0 30
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 5
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 5
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 5
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 6
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 6
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55766: LD_ADDR_VAR 0 31
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 4
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 5
55833: PUSH
55834: LD_INT 4
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 5
55843: PUSH
55844: LD_INT 5
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 5
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 6
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 6
55873: PUSH
55874: LD_INT 6
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: PUSH
55884: LD_INT 6
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55905: LD_ADDR_VAR 0 32
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 4
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 4
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 5
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 5
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 4
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 6
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 6
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56048: LD_ADDR_VAR 0 33
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 4
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: NEG
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 5
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 5
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 6
56168: NEG
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 6
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56203: LD_ADDR_VAR 0 34
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: LD_INT 4
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 4
56258: NEG
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 4
56270: NEG
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: NEG
56283: PUSH
56284: LD_INT 5
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 5
56294: NEG
56295: PUSH
56296: LD_INT 4
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 5
56306: NEG
56307: PUSH
56308: LD_INT 5
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 5
56318: NEG
56319: PUSH
56320: LD_INT 6
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 6
56330: NEG
56331: PUSH
56332: LD_INT 5
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 6
56342: NEG
56343: PUSH
56344: LD_INT 6
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56366: LD_ADDR_VAR 0 41
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56410: LD_ADDR_VAR 0 42
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56451: LD_ADDR_VAR 0 43
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56491: LD_ADDR_VAR 0 44
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56532: LD_ADDR_VAR 0 45
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56576: LD_ADDR_VAR 0 46
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56622: LD_ADDR_VAR 0 47
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56655: LD_ADDR_VAR 0 48
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56686: LD_ADDR_VAR 0 49
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56715: LD_ADDR_VAR 0 50
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56744: LD_ADDR_VAR 0 51
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56775: LD_ADDR_VAR 0 52
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56808: LD_ADDR_VAR 0 53
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56852: LD_ADDR_VAR 0 54
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56893: LD_ADDR_VAR 0 55
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56933: LD_ADDR_VAR 0 56
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56974: LD_ADDR_VAR 0 57
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57018: LD_ADDR_VAR 0 58
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57064: LD_ADDR_VAR 0 59
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57108: LD_ADDR_VAR 0 60
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57149: LD_ADDR_VAR 0 61
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57189: LD_ADDR_VAR 0 62
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57230: LD_ADDR_VAR 0 63
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57274: LD_ADDR_VAR 0 64
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// end ; 2 :
57320: GO 60586
57322: LD_INT 2
57324: DOUBLE
57325: EQUAL
57326: IFTRUE 57330
57328: GO 60585
57330: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57331: LD_ADDR_VAR 0 29
57335: PUSH
57336: LD_INT 4
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 4
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 4
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 4
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 4
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 5
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 5
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 4
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 4
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 4
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 4
57716: NEG
57717: PUSH
57718: LD_INT 4
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 4
57728: NEG
57729: PUSH
57730: LD_INT 5
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: LD_INT 4
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 4
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 5
57776: NEG
57777: PUSH
57778: LD_INT 4
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 5
57788: NEG
57789: PUSH
57790: LD_INT 5
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: LD_INT 5
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 5
57812: NEG
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57869: LD_ADDR_VAR 0 30
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 5
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 5
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 4
57916: PUSH
57917: LD_INT 5
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 5
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 4
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 4
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 4
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 4
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 4
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 5
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 5
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 5
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: LD_INT 4
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 4
58233: NEG
58234: PUSH
58235: LD_INT 4
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 4
58257: NEG
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 4
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 5
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 4
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 3
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 4
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 5
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 5
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58416: LD_ADDR_VAR 0 31
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 4
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: LD_INT 5
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: LD_INT 4
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 4
58666: NEG
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 5
58678: NEG
58679: PUSH
58680: LD_INT 4
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 5
58690: NEG
58691: PUSH
58692: LD_INT 5
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 5
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 5
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 4
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 3
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 4
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 4
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 5
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 5
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 5
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58966: LD_ADDR_VAR 0 32
58970: PUSH
58971: LD_INT 4
58973: NEG
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 4
58984: NEG
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 4
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 5
59029: NEG
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: NEG
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 5
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: NEG
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 4
59135: NEG
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 4
59147: NEG
59148: PUSH
59149: LD_INT 4
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 4
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 4
59171: NEG
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 4
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 5
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 3
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 4
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 5
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: LD_INT 3
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 5
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 3
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: LD_INT 5
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: PUSH
59419: LD_INT 5
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: LD_INT 5
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59513: LD_ADDR_VAR 0 33
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: LD_INT 5
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 5
59580: NEG
59581: PUSH
59582: LD_INT 4
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 5
59592: NEG
59593: PUSH
59594: LD_INT 5
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: LD_INT 5
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 5
59616: NEG
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 3
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 4
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 4
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 5
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: LD_INT 3
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 4
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: LD_INT 4
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 4
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 4
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 3
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 4
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 5
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 5
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 3
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 5
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60051: LD_ADDR_VAR 0 34
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: LD_INT 4
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 5
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 4
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 4
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: LD_INT 5
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: LD_INT 5
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 4
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 4
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 4
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 5
60273: PUSH
60274: LD_INT 4
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 5
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 4
60293: PUSH
60294: LD_INT 5
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 4
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: LD_INT 5
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 4
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 4
60436: NEG
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 4
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 5
60492: NEG
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 5
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 5
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: ST_TO_ADDR
// end ; end ;
60583: GO 60586
60585: POP
// case btype of b_depot , b_warehouse :
60586: LD_VAR 0 1
60590: PUSH
60591: LD_INT 0
60593: DOUBLE
60594: EQUAL
60595: IFTRUE 60605
60597: LD_INT 1
60599: DOUBLE
60600: EQUAL
60601: IFTRUE 60605
60603: GO 60806
60605: POP
// case nation of nation_american :
60606: LD_VAR 0 5
60610: PUSH
60611: LD_INT 1
60613: DOUBLE
60614: EQUAL
60615: IFTRUE 60619
60617: GO 60675
60619: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60620: LD_ADDR_VAR 0 9
60624: PUSH
60625: LD_VAR 0 11
60629: PUSH
60630: LD_VAR 0 12
60634: PUSH
60635: LD_VAR 0 13
60639: PUSH
60640: LD_VAR 0 14
60644: PUSH
60645: LD_VAR 0 15
60649: PUSH
60650: LD_VAR 0 16
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: PUSH
60663: LD_VAR 0 4
60667: PUSH
60668: LD_INT 1
60670: PLUS
60671: ARRAY
60672: ST_TO_ADDR
60673: GO 60804
60675: LD_INT 2
60677: DOUBLE
60678: EQUAL
60679: IFTRUE 60683
60681: GO 60739
60683: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60684: LD_ADDR_VAR 0 9
60688: PUSH
60689: LD_VAR 0 17
60693: PUSH
60694: LD_VAR 0 18
60698: PUSH
60699: LD_VAR 0 19
60703: PUSH
60704: LD_VAR 0 20
60708: PUSH
60709: LD_VAR 0 21
60713: PUSH
60714: LD_VAR 0 22
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: PUSH
60727: LD_VAR 0 4
60731: PUSH
60732: LD_INT 1
60734: PLUS
60735: ARRAY
60736: ST_TO_ADDR
60737: GO 60804
60739: LD_INT 3
60741: DOUBLE
60742: EQUAL
60743: IFTRUE 60747
60745: GO 60803
60747: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60748: LD_ADDR_VAR 0 9
60752: PUSH
60753: LD_VAR 0 23
60757: PUSH
60758: LD_VAR 0 24
60762: PUSH
60763: LD_VAR 0 25
60767: PUSH
60768: LD_VAR 0 26
60772: PUSH
60773: LD_VAR 0 27
60777: PUSH
60778: LD_VAR 0 28
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: PUSH
60791: LD_VAR 0 4
60795: PUSH
60796: LD_INT 1
60798: PLUS
60799: ARRAY
60800: ST_TO_ADDR
60801: GO 60804
60803: POP
60804: GO 61359
60806: LD_INT 2
60808: DOUBLE
60809: EQUAL
60810: IFTRUE 60820
60812: LD_INT 3
60814: DOUBLE
60815: EQUAL
60816: IFTRUE 60820
60818: GO 60876
60820: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60821: LD_ADDR_VAR 0 9
60825: PUSH
60826: LD_VAR 0 29
60830: PUSH
60831: LD_VAR 0 30
60835: PUSH
60836: LD_VAR 0 31
60840: PUSH
60841: LD_VAR 0 32
60845: PUSH
60846: LD_VAR 0 33
60850: PUSH
60851: LD_VAR 0 34
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: PUSH
60864: LD_VAR 0 4
60868: PUSH
60869: LD_INT 1
60871: PLUS
60872: ARRAY
60873: ST_TO_ADDR
60874: GO 61359
60876: LD_INT 16
60878: DOUBLE
60879: EQUAL
60880: IFTRUE 60938
60882: LD_INT 17
60884: DOUBLE
60885: EQUAL
60886: IFTRUE 60938
60888: LD_INT 18
60890: DOUBLE
60891: EQUAL
60892: IFTRUE 60938
60894: LD_INT 19
60896: DOUBLE
60897: EQUAL
60898: IFTRUE 60938
60900: LD_INT 22
60902: DOUBLE
60903: EQUAL
60904: IFTRUE 60938
60906: LD_INT 20
60908: DOUBLE
60909: EQUAL
60910: IFTRUE 60938
60912: LD_INT 21
60914: DOUBLE
60915: EQUAL
60916: IFTRUE 60938
60918: LD_INT 23
60920: DOUBLE
60921: EQUAL
60922: IFTRUE 60938
60924: LD_INT 24
60926: DOUBLE
60927: EQUAL
60928: IFTRUE 60938
60930: LD_INT 25
60932: DOUBLE
60933: EQUAL
60934: IFTRUE 60938
60936: GO 60994
60938: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60939: LD_ADDR_VAR 0 9
60943: PUSH
60944: LD_VAR 0 35
60948: PUSH
60949: LD_VAR 0 36
60953: PUSH
60954: LD_VAR 0 37
60958: PUSH
60959: LD_VAR 0 38
60963: PUSH
60964: LD_VAR 0 39
60968: PUSH
60969: LD_VAR 0 40
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: PUSH
60982: LD_VAR 0 4
60986: PUSH
60987: LD_INT 1
60989: PLUS
60990: ARRAY
60991: ST_TO_ADDR
60992: GO 61359
60994: LD_INT 6
60996: DOUBLE
60997: EQUAL
60998: IFTRUE 61050
61000: LD_INT 7
61002: DOUBLE
61003: EQUAL
61004: IFTRUE 61050
61006: LD_INT 8
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61050
61012: LD_INT 13
61014: DOUBLE
61015: EQUAL
61016: IFTRUE 61050
61018: LD_INT 12
61020: DOUBLE
61021: EQUAL
61022: IFTRUE 61050
61024: LD_INT 15
61026: DOUBLE
61027: EQUAL
61028: IFTRUE 61050
61030: LD_INT 11
61032: DOUBLE
61033: EQUAL
61034: IFTRUE 61050
61036: LD_INT 14
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61050
61042: LD_INT 10
61044: DOUBLE
61045: EQUAL
61046: IFTRUE 61050
61048: GO 61106
61050: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61051: LD_ADDR_VAR 0 9
61055: PUSH
61056: LD_VAR 0 41
61060: PUSH
61061: LD_VAR 0 42
61065: PUSH
61066: LD_VAR 0 43
61070: PUSH
61071: LD_VAR 0 44
61075: PUSH
61076: LD_VAR 0 45
61080: PUSH
61081: LD_VAR 0 46
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: PUSH
61094: LD_VAR 0 4
61098: PUSH
61099: LD_INT 1
61101: PLUS
61102: ARRAY
61103: ST_TO_ADDR
61104: GO 61359
61106: LD_INT 36
61108: DOUBLE
61109: EQUAL
61110: IFTRUE 61114
61112: GO 61170
61114: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61115: LD_ADDR_VAR 0 9
61119: PUSH
61120: LD_VAR 0 47
61124: PUSH
61125: LD_VAR 0 48
61129: PUSH
61130: LD_VAR 0 49
61134: PUSH
61135: LD_VAR 0 50
61139: PUSH
61140: LD_VAR 0 51
61144: PUSH
61145: LD_VAR 0 52
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: PUSH
61158: LD_VAR 0 4
61162: PUSH
61163: LD_INT 1
61165: PLUS
61166: ARRAY
61167: ST_TO_ADDR
61168: GO 61359
61170: LD_INT 4
61172: DOUBLE
61173: EQUAL
61174: IFTRUE 61196
61176: LD_INT 5
61178: DOUBLE
61179: EQUAL
61180: IFTRUE 61196
61182: LD_INT 34
61184: DOUBLE
61185: EQUAL
61186: IFTRUE 61196
61188: LD_INT 37
61190: DOUBLE
61191: EQUAL
61192: IFTRUE 61196
61194: GO 61252
61196: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61197: LD_ADDR_VAR 0 9
61201: PUSH
61202: LD_VAR 0 53
61206: PUSH
61207: LD_VAR 0 54
61211: PUSH
61212: LD_VAR 0 55
61216: PUSH
61217: LD_VAR 0 56
61221: PUSH
61222: LD_VAR 0 57
61226: PUSH
61227: LD_VAR 0 58
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: PUSH
61240: LD_VAR 0 4
61244: PUSH
61245: LD_INT 1
61247: PLUS
61248: ARRAY
61249: ST_TO_ADDR
61250: GO 61359
61252: LD_INT 31
61254: DOUBLE
61255: EQUAL
61256: IFTRUE 61302
61258: LD_INT 32
61260: DOUBLE
61261: EQUAL
61262: IFTRUE 61302
61264: LD_INT 33
61266: DOUBLE
61267: EQUAL
61268: IFTRUE 61302
61270: LD_INT 27
61272: DOUBLE
61273: EQUAL
61274: IFTRUE 61302
61276: LD_INT 26
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61302
61282: LD_INT 28
61284: DOUBLE
61285: EQUAL
61286: IFTRUE 61302
61288: LD_INT 29
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61302
61294: LD_INT 30
61296: DOUBLE
61297: EQUAL
61298: IFTRUE 61302
61300: GO 61358
61302: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61303: LD_ADDR_VAR 0 9
61307: PUSH
61308: LD_VAR 0 59
61312: PUSH
61313: LD_VAR 0 60
61317: PUSH
61318: LD_VAR 0 61
61322: PUSH
61323: LD_VAR 0 62
61327: PUSH
61328: LD_VAR 0 63
61332: PUSH
61333: LD_VAR 0 64
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: PUSH
61346: LD_VAR 0 4
61350: PUSH
61351: LD_INT 1
61353: PLUS
61354: ARRAY
61355: ST_TO_ADDR
61356: GO 61359
61358: POP
// temp_list2 = [ ] ;
61359: LD_ADDR_VAR 0 10
61363: PUSH
61364: EMPTY
61365: ST_TO_ADDR
// for i in temp_list do
61366: LD_ADDR_VAR 0 8
61370: PUSH
61371: LD_VAR 0 9
61375: PUSH
61376: FOR_IN
61377: IFFALSE 61429
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61379: LD_ADDR_VAR 0 10
61383: PUSH
61384: LD_VAR 0 10
61388: PUSH
61389: LD_VAR 0 8
61393: PUSH
61394: LD_INT 1
61396: ARRAY
61397: PUSH
61398: LD_VAR 0 2
61402: PLUS
61403: PUSH
61404: LD_VAR 0 8
61408: PUSH
61409: LD_INT 2
61411: ARRAY
61412: PUSH
61413: LD_VAR 0 3
61417: PLUS
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: ADD
61426: ST_TO_ADDR
61427: GO 61376
61429: POP
61430: POP
// result = temp_list2 ;
61431: LD_ADDR_VAR 0 7
61435: PUSH
61436: LD_VAR 0 10
61440: ST_TO_ADDR
// end ;
61441: LD_VAR 0 7
61445: RET
// export function EnemyInRange ( unit , dist ) ; begin
61446: LD_INT 0
61448: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61449: LD_ADDR_VAR 0 3
61453: PUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 255
61463: PPUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 250
61473: PPUSH
61474: LD_VAR 0 1
61478: PPUSH
61479: CALL_OW 251
61483: PPUSH
61484: LD_VAR 0 2
61488: PPUSH
61489: CALL 34848 0 4
61493: PUSH
61494: LD_INT 4
61496: ARRAY
61497: ST_TO_ADDR
// end ;
61498: LD_VAR 0 3
61502: RET
// export function PlayerSeeMe ( unit ) ; begin
61503: LD_INT 0
61505: PPUSH
// result := See ( your_side , unit ) ;
61506: LD_ADDR_VAR 0 2
61510: PUSH
61511: LD_OWVAR 2
61515: PPUSH
61516: LD_VAR 0 1
61520: PPUSH
61521: CALL_OW 292
61525: ST_TO_ADDR
// end ;
61526: LD_VAR 0 2
61530: RET
// export function ReverseDir ( unit ) ; begin
61531: LD_INT 0
61533: PPUSH
// if not unit then
61534: LD_VAR 0 1
61538: NOT
61539: IFFALSE 61543
// exit ;
61541: GO 61566
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61543: LD_ADDR_VAR 0 2
61547: PUSH
61548: LD_VAR 0 1
61552: PPUSH
61553: CALL_OW 254
61557: PUSH
61558: LD_INT 3
61560: PLUS
61561: PUSH
61562: LD_INT 6
61564: MOD
61565: ST_TO_ADDR
// end ;
61566: LD_VAR 0 2
61570: RET
// export function ReverseArray ( array ) ; var i ; begin
61571: LD_INT 0
61573: PPUSH
61574: PPUSH
// if not array then
61575: LD_VAR 0 1
61579: NOT
61580: IFFALSE 61584
// exit ;
61582: GO 61639
// result := [ ] ;
61584: LD_ADDR_VAR 0 2
61588: PUSH
61589: EMPTY
61590: ST_TO_ADDR
// for i := array downto 1 do
61591: LD_ADDR_VAR 0 3
61595: PUSH
61596: DOUBLE
61597: LD_VAR 0 1
61601: INC
61602: ST_TO_ADDR
61603: LD_INT 1
61605: PUSH
61606: FOR_DOWNTO
61607: IFFALSE 61637
// result := Join ( result , array [ i ] ) ;
61609: LD_ADDR_VAR 0 2
61613: PUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: LD_VAR 0 1
61623: PUSH
61624: LD_VAR 0 3
61628: ARRAY
61629: PPUSH
61630: CALL 66283 0 2
61634: ST_TO_ADDR
61635: GO 61606
61637: POP
61638: POP
// end ;
61639: LD_VAR 0 2
61643: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61644: LD_INT 0
61646: PPUSH
61647: PPUSH
61648: PPUSH
61649: PPUSH
61650: PPUSH
61651: PPUSH
// if not unit or not hexes then
61652: LD_VAR 0 1
61656: NOT
61657: PUSH
61658: LD_VAR 0 2
61662: NOT
61663: OR
61664: IFFALSE 61668
// exit ;
61666: GO 61791
// dist := 9999 ;
61668: LD_ADDR_VAR 0 5
61672: PUSH
61673: LD_INT 9999
61675: ST_TO_ADDR
// for i = 1 to hexes do
61676: LD_ADDR_VAR 0 4
61680: PUSH
61681: DOUBLE
61682: LD_INT 1
61684: DEC
61685: ST_TO_ADDR
61686: LD_VAR 0 2
61690: PUSH
61691: FOR_TO
61692: IFFALSE 61779
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61694: LD_ADDR_VAR 0 6
61698: PUSH
61699: LD_VAR 0 1
61703: PPUSH
61704: LD_VAR 0 2
61708: PUSH
61709: LD_VAR 0 4
61713: ARRAY
61714: PUSH
61715: LD_INT 1
61717: ARRAY
61718: PPUSH
61719: LD_VAR 0 2
61723: PUSH
61724: LD_VAR 0 4
61728: ARRAY
61729: PUSH
61730: LD_INT 2
61732: ARRAY
61733: PPUSH
61734: CALL_OW 297
61738: ST_TO_ADDR
// if tdist < dist then
61739: LD_VAR 0 6
61743: PUSH
61744: LD_VAR 0 5
61748: LESS
61749: IFFALSE 61777
// begin hex := hexes [ i ] ;
61751: LD_ADDR_VAR 0 8
61755: PUSH
61756: LD_VAR 0 2
61760: PUSH
61761: LD_VAR 0 4
61765: ARRAY
61766: ST_TO_ADDR
// dist := tdist ;
61767: LD_ADDR_VAR 0 5
61771: PUSH
61772: LD_VAR 0 6
61776: ST_TO_ADDR
// end ; end ;
61777: GO 61691
61779: POP
61780: POP
// result := hex ;
61781: LD_ADDR_VAR 0 3
61785: PUSH
61786: LD_VAR 0 8
61790: ST_TO_ADDR
// end ;
61791: LD_VAR 0 3
61795: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61796: LD_INT 0
61798: PPUSH
61799: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61800: LD_VAR 0 1
61804: NOT
61805: PUSH
61806: LD_VAR 0 1
61810: PUSH
61811: LD_INT 21
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 23
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PPUSH
61835: CALL_OW 69
61839: IN
61840: NOT
61841: OR
61842: IFFALSE 61846
// exit ;
61844: GO 61893
// for i = 1 to 3 do
61846: LD_ADDR_VAR 0 3
61850: PUSH
61851: DOUBLE
61852: LD_INT 1
61854: DEC
61855: ST_TO_ADDR
61856: LD_INT 3
61858: PUSH
61859: FOR_TO
61860: IFFALSE 61891
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61862: LD_VAR 0 1
61866: PPUSH
61867: CALL_OW 250
61871: PPUSH
61872: LD_VAR 0 1
61876: PPUSH
61877: CALL_OW 251
61881: PPUSH
61882: LD_INT 1
61884: PPUSH
61885: CALL_OW 453
61889: GO 61859
61891: POP
61892: POP
// end ;
61893: LD_VAR 0 2
61897: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61898: LD_INT 0
61900: PPUSH
61901: PPUSH
61902: PPUSH
61903: PPUSH
61904: PPUSH
61905: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61906: LD_VAR 0 1
61910: NOT
61911: PUSH
61912: LD_VAR 0 2
61916: NOT
61917: OR
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 314
61928: OR
61929: IFFALSE 61933
// exit ;
61931: GO 62400
// if GetLives ( i ) < 250 then
61933: LD_VAR 0 4
61937: PPUSH
61938: CALL_OW 256
61942: PUSH
61943: LD_INT 250
61945: LESS
61946: IFFALSE 61959
// begin ComAutodestruct ( i ) ;
61948: LD_VAR 0 4
61952: PPUSH
61953: CALL 61796 0 1
// exit ;
61957: GO 62400
// end ; x := GetX ( enemy_unit ) ;
61959: LD_ADDR_VAR 0 7
61963: PUSH
61964: LD_VAR 0 2
61968: PPUSH
61969: CALL_OW 250
61973: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61974: LD_ADDR_VAR 0 8
61978: PUSH
61979: LD_VAR 0 2
61983: PPUSH
61984: CALL_OW 251
61988: ST_TO_ADDR
// if not x or not y then
61989: LD_VAR 0 7
61993: NOT
61994: PUSH
61995: LD_VAR 0 8
61999: NOT
62000: OR
62001: IFFALSE 62005
// exit ;
62003: GO 62400
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62005: LD_ADDR_VAR 0 6
62009: PUSH
62010: LD_VAR 0 7
62014: PPUSH
62015: LD_INT 0
62017: PPUSH
62018: LD_INT 4
62020: PPUSH
62021: CALL_OW 272
62025: PUSH
62026: LD_VAR 0 8
62030: PPUSH
62031: LD_INT 0
62033: PPUSH
62034: LD_INT 4
62036: PPUSH
62037: CALL_OW 273
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_VAR 0 7
62050: PPUSH
62051: LD_INT 1
62053: PPUSH
62054: LD_INT 4
62056: PPUSH
62057: CALL_OW 272
62061: PUSH
62062: LD_VAR 0 8
62066: PPUSH
62067: LD_INT 1
62069: PPUSH
62070: LD_INT 4
62072: PPUSH
62073: CALL_OW 273
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 7
62086: PPUSH
62087: LD_INT 2
62089: PPUSH
62090: LD_INT 4
62092: PPUSH
62093: CALL_OW 272
62097: PUSH
62098: LD_VAR 0 8
62102: PPUSH
62103: LD_INT 2
62105: PPUSH
62106: LD_INT 4
62108: PPUSH
62109: CALL_OW 273
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 7
62122: PPUSH
62123: LD_INT 3
62125: PPUSH
62126: LD_INT 4
62128: PPUSH
62129: CALL_OW 272
62133: PUSH
62134: LD_VAR 0 8
62138: PPUSH
62139: LD_INT 3
62141: PPUSH
62142: LD_INT 4
62144: PPUSH
62145: CALL_OW 273
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_VAR 0 7
62158: PPUSH
62159: LD_INT 4
62161: PPUSH
62162: LD_INT 4
62164: PPUSH
62165: CALL_OW 272
62169: PUSH
62170: LD_VAR 0 8
62174: PPUSH
62175: LD_INT 4
62177: PPUSH
62178: LD_INT 4
62180: PPUSH
62181: CALL_OW 273
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_VAR 0 7
62194: PPUSH
62195: LD_INT 5
62197: PPUSH
62198: LD_INT 4
62200: PPUSH
62201: CALL_OW 272
62205: PUSH
62206: LD_VAR 0 8
62210: PPUSH
62211: LD_INT 5
62213: PPUSH
62214: LD_INT 4
62216: PPUSH
62217: CALL_OW 273
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: ST_TO_ADDR
// for i = tmp downto 1 do
62234: LD_ADDR_VAR 0 4
62238: PUSH
62239: DOUBLE
62240: LD_VAR 0 6
62244: INC
62245: ST_TO_ADDR
62246: LD_INT 1
62248: PUSH
62249: FOR_DOWNTO
62250: IFFALSE 62351
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62252: LD_VAR 0 6
62256: PUSH
62257: LD_VAR 0 4
62261: ARRAY
62262: PUSH
62263: LD_INT 1
62265: ARRAY
62266: PPUSH
62267: LD_VAR 0 6
62271: PUSH
62272: LD_VAR 0 4
62276: ARRAY
62277: PUSH
62278: LD_INT 2
62280: ARRAY
62281: PPUSH
62282: CALL_OW 488
62286: NOT
62287: PUSH
62288: LD_VAR 0 6
62292: PUSH
62293: LD_VAR 0 4
62297: ARRAY
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PPUSH
62303: LD_VAR 0 6
62307: PUSH
62308: LD_VAR 0 4
62312: ARRAY
62313: PUSH
62314: LD_INT 2
62316: ARRAY
62317: PPUSH
62318: CALL_OW 428
62322: PUSH
62323: LD_INT 0
62325: NONEQUAL
62326: OR
62327: IFFALSE 62349
// tmp := Delete ( tmp , i ) ;
62329: LD_ADDR_VAR 0 6
62333: PUSH
62334: LD_VAR 0 6
62338: PPUSH
62339: LD_VAR 0 4
62343: PPUSH
62344: CALL_OW 3
62348: ST_TO_ADDR
62349: GO 62249
62351: POP
62352: POP
// j := GetClosestHex ( unit , tmp ) ;
62353: LD_ADDR_VAR 0 5
62357: PUSH
62358: LD_VAR 0 1
62362: PPUSH
62363: LD_VAR 0 6
62367: PPUSH
62368: CALL 61644 0 2
62372: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62373: LD_VAR 0 1
62377: PPUSH
62378: LD_VAR 0 5
62382: PUSH
62383: LD_INT 1
62385: ARRAY
62386: PPUSH
62387: LD_VAR 0 5
62391: PUSH
62392: LD_INT 2
62394: ARRAY
62395: PPUSH
62396: CALL_OW 111
// end ;
62400: LD_VAR 0 3
62404: RET
// export function PrepareApemanSoldier ( ) ; begin
62405: LD_INT 0
62407: PPUSH
// uc_nation := 0 ;
62408: LD_ADDR_OWVAR 21
62412: PUSH
62413: LD_INT 0
62415: ST_TO_ADDR
// hc_sex := sex_male ;
62416: LD_ADDR_OWVAR 27
62420: PUSH
62421: LD_INT 1
62423: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62424: LD_ADDR_OWVAR 28
62428: PUSH
62429: LD_INT 15
62431: ST_TO_ADDR
// hc_gallery :=  ;
62432: LD_ADDR_OWVAR 33
62436: PUSH
62437: LD_STRING 
62439: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62440: LD_ADDR_OWVAR 31
62444: PUSH
62445: LD_INT 0
62447: PPUSH
62448: LD_INT 3
62450: PPUSH
62451: CALL_OW 12
62455: PUSH
62456: LD_INT 0
62458: PPUSH
62459: LD_INT 3
62461: PPUSH
62462: CALL_OW 12
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: ST_TO_ADDR
// end ;
62479: LD_VAR 0 1
62483: RET
// export function PrepareApemanEngineer ( ) ; begin
62484: LD_INT 0
62486: PPUSH
// uc_nation := 0 ;
62487: LD_ADDR_OWVAR 21
62491: PUSH
62492: LD_INT 0
62494: ST_TO_ADDR
// hc_sex := sex_male ;
62495: LD_ADDR_OWVAR 27
62499: PUSH
62500: LD_INT 1
62502: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62503: LD_ADDR_OWVAR 28
62507: PUSH
62508: LD_INT 16
62510: ST_TO_ADDR
// hc_gallery :=  ;
62511: LD_ADDR_OWVAR 33
62515: PUSH
62516: LD_STRING 
62518: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62519: LD_ADDR_OWVAR 31
62523: PUSH
62524: LD_INT 0
62526: PPUSH
62527: LD_INT 3
62529: PPUSH
62530: CALL_OW 12
62534: PUSH
62535: LD_INT 0
62537: PPUSH
62538: LD_INT 3
62540: PPUSH
62541: CALL_OW 12
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// end ;
62558: LD_VAR 0 1
62562: RET
// export function PrepareApeman ( agressivity ) ; begin
62563: LD_INT 0
62565: PPUSH
// uc_side := 0 ;
62566: LD_ADDR_OWVAR 20
62570: PUSH
62571: LD_INT 0
62573: ST_TO_ADDR
// uc_nation := 0 ;
62574: LD_ADDR_OWVAR 21
62578: PUSH
62579: LD_INT 0
62581: ST_TO_ADDR
// hc_sex := sex_male ;
62582: LD_ADDR_OWVAR 27
62586: PUSH
62587: LD_INT 1
62589: ST_TO_ADDR
// hc_class := class_apeman ;
62590: LD_ADDR_OWVAR 28
62594: PUSH
62595: LD_INT 12
62597: ST_TO_ADDR
// hc_gallery :=  ;
62598: LD_ADDR_OWVAR 33
62602: PUSH
62603: LD_STRING 
62605: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62606: LD_ADDR_OWVAR 35
62610: PUSH
62611: LD_VAR 0 1
62615: NEG
62616: PPUSH
62617: LD_VAR 0 1
62621: PPUSH
62622: CALL_OW 12
62626: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62627: LD_ADDR_OWVAR 31
62631: PUSH
62632: LD_INT 0
62634: PPUSH
62635: LD_INT 3
62637: PPUSH
62638: CALL_OW 12
62642: PUSH
62643: LD_INT 0
62645: PPUSH
62646: LD_INT 3
62648: PPUSH
62649: CALL_OW 12
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: ST_TO_ADDR
// end ;
62666: LD_VAR 0 2
62670: RET
// export function PrepareTiger ( agressivity ) ; begin
62671: LD_INT 0
62673: PPUSH
// uc_side := 0 ;
62674: LD_ADDR_OWVAR 20
62678: PUSH
62679: LD_INT 0
62681: ST_TO_ADDR
// uc_nation := 0 ;
62682: LD_ADDR_OWVAR 21
62686: PUSH
62687: LD_INT 0
62689: ST_TO_ADDR
// hc_class := class_tiger ;
62690: LD_ADDR_OWVAR 28
62694: PUSH
62695: LD_INT 14
62697: ST_TO_ADDR
// hc_gallery :=  ;
62698: LD_ADDR_OWVAR 33
62702: PUSH
62703: LD_STRING 
62705: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62706: LD_ADDR_OWVAR 35
62710: PUSH
62711: LD_VAR 0 1
62715: NEG
62716: PPUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 12
62726: ST_TO_ADDR
// end ;
62727: LD_VAR 0 2
62731: RET
// export function PrepareEnchidna ( ) ; begin
62732: LD_INT 0
62734: PPUSH
// uc_side := 0 ;
62735: LD_ADDR_OWVAR 20
62739: PUSH
62740: LD_INT 0
62742: ST_TO_ADDR
// uc_nation := 0 ;
62743: LD_ADDR_OWVAR 21
62747: PUSH
62748: LD_INT 0
62750: ST_TO_ADDR
// hc_class := class_baggie ;
62751: LD_ADDR_OWVAR 28
62755: PUSH
62756: LD_INT 13
62758: ST_TO_ADDR
// hc_gallery :=  ;
62759: LD_ADDR_OWVAR 33
62763: PUSH
62764: LD_STRING 
62766: ST_TO_ADDR
// end ;
62767: LD_VAR 0 1
62771: RET
// export function PrepareFrog ( ) ; begin
62772: LD_INT 0
62774: PPUSH
// uc_side := 0 ;
62775: LD_ADDR_OWVAR 20
62779: PUSH
62780: LD_INT 0
62782: ST_TO_ADDR
// uc_nation := 0 ;
62783: LD_ADDR_OWVAR 21
62787: PUSH
62788: LD_INT 0
62790: ST_TO_ADDR
// hc_class := class_frog ;
62791: LD_ADDR_OWVAR 28
62795: PUSH
62796: LD_INT 19
62798: ST_TO_ADDR
// hc_gallery :=  ;
62799: LD_ADDR_OWVAR 33
62803: PUSH
62804: LD_STRING 
62806: ST_TO_ADDR
// end ;
62807: LD_VAR 0 1
62811: RET
// export function PrepareFish ( ) ; begin
62812: LD_INT 0
62814: PPUSH
// uc_side := 0 ;
62815: LD_ADDR_OWVAR 20
62819: PUSH
62820: LD_INT 0
62822: ST_TO_ADDR
// uc_nation := 0 ;
62823: LD_ADDR_OWVAR 21
62827: PUSH
62828: LD_INT 0
62830: ST_TO_ADDR
// hc_class := class_fish ;
62831: LD_ADDR_OWVAR 28
62835: PUSH
62836: LD_INT 20
62838: ST_TO_ADDR
// hc_gallery :=  ;
62839: LD_ADDR_OWVAR 33
62843: PUSH
62844: LD_STRING 
62846: ST_TO_ADDR
// end ;
62847: LD_VAR 0 1
62851: RET
// export function PrepareBird ( ) ; begin
62852: LD_INT 0
62854: PPUSH
// uc_side := 0 ;
62855: LD_ADDR_OWVAR 20
62859: PUSH
62860: LD_INT 0
62862: ST_TO_ADDR
// uc_nation := 0 ;
62863: LD_ADDR_OWVAR 21
62867: PUSH
62868: LD_INT 0
62870: ST_TO_ADDR
// hc_class := class_phororhacos ;
62871: LD_ADDR_OWVAR 28
62875: PUSH
62876: LD_INT 18
62878: ST_TO_ADDR
// hc_gallery :=  ;
62879: LD_ADDR_OWVAR 33
62883: PUSH
62884: LD_STRING 
62886: ST_TO_ADDR
// end ;
62887: LD_VAR 0 1
62891: RET
// export function PrepareHorse ( ) ; begin
62892: LD_INT 0
62894: PPUSH
// uc_side := 0 ;
62895: LD_ADDR_OWVAR 20
62899: PUSH
62900: LD_INT 0
62902: ST_TO_ADDR
// uc_nation := 0 ;
62903: LD_ADDR_OWVAR 21
62907: PUSH
62908: LD_INT 0
62910: ST_TO_ADDR
// hc_class := class_horse ;
62911: LD_ADDR_OWVAR 28
62915: PUSH
62916: LD_INT 21
62918: ST_TO_ADDR
// hc_gallery :=  ;
62919: LD_ADDR_OWVAR 33
62923: PUSH
62924: LD_STRING 
62926: ST_TO_ADDR
// end ;
62927: LD_VAR 0 1
62931: RET
// export function PrepareMastodont ( ) ; begin
62932: LD_INT 0
62934: PPUSH
// uc_side := 0 ;
62935: LD_ADDR_OWVAR 20
62939: PUSH
62940: LD_INT 0
62942: ST_TO_ADDR
// uc_nation := 0 ;
62943: LD_ADDR_OWVAR 21
62947: PUSH
62948: LD_INT 0
62950: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62951: LD_ADDR_OWVAR 37
62955: PUSH
62956: LD_INT 31
62958: ST_TO_ADDR
// vc_control := control_rider ;
62959: LD_ADDR_OWVAR 38
62963: PUSH
62964: LD_INT 4
62966: ST_TO_ADDR
// end ;
62967: LD_VAR 0 1
62971: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62972: LD_INT 0
62974: PPUSH
62975: PPUSH
62976: PPUSH
// uc_side = 0 ;
62977: LD_ADDR_OWVAR 20
62981: PUSH
62982: LD_INT 0
62984: ST_TO_ADDR
// uc_nation = 0 ;
62985: LD_ADDR_OWVAR 21
62989: PUSH
62990: LD_INT 0
62992: ST_TO_ADDR
// InitHc_All ( ) ;
62993: CALL_OW 584
// InitVc ;
62997: CALL_OW 20
// if mastodonts then
63001: LD_VAR 0 6
63005: IFFALSE 63072
// for i = 1 to mastodonts do
63007: LD_ADDR_VAR 0 11
63011: PUSH
63012: DOUBLE
63013: LD_INT 1
63015: DEC
63016: ST_TO_ADDR
63017: LD_VAR 0 6
63021: PUSH
63022: FOR_TO
63023: IFFALSE 63070
// begin vc_chassis := 31 ;
63025: LD_ADDR_OWVAR 37
63029: PUSH
63030: LD_INT 31
63032: ST_TO_ADDR
// vc_control := control_rider ;
63033: LD_ADDR_OWVAR 38
63037: PUSH
63038: LD_INT 4
63040: ST_TO_ADDR
// animal := CreateVehicle ;
63041: LD_ADDR_VAR 0 12
63045: PUSH
63046: CALL_OW 45
63050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63051: LD_VAR 0 12
63055: PPUSH
63056: LD_VAR 0 8
63060: PPUSH
63061: LD_INT 0
63063: PPUSH
63064: CALL 65200 0 3
// end ;
63068: GO 63022
63070: POP
63071: POP
// if horses then
63072: LD_VAR 0 5
63076: IFFALSE 63143
// for i = 1 to horses do
63078: LD_ADDR_VAR 0 11
63082: PUSH
63083: DOUBLE
63084: LD_INT 1
63086: DEC
63087: ST_TO_ADDR
63088: LD_VAR 0 5
63092: PUSH
63093: FOR_TO
63094: IFFALSE 63141
// begin hc_class := 21 ;
63096: LD_ADDR_OWVAR 28
63100: PUSH
63101: LD_INT 21
63103: ST_TO_ADDR
// hc_gallery :=  ;
63104: LD_ADDR_OWVAR 33
63108: PUSH
63109: LD_STRING 
63111: ST_TO_ADDR
// animal := CreateHuman ;
63112: LD_ADDR_VAR 0 12
63116: PUSH
63117: CALL_OW 44
63121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63122: LD_VAR 0 12
63126: PPUSH
63127: LD_VAR 0 8
63131: PPUSH
63132: LD_INT 0
63134: PPUSH
63135: CALL 65200 0 3
// end ;
63139: GO 63093
63141: POP
63142: POP
// if birds then
63143: LD_VAR 0 1
63147: IFFALSE 63214
// for i = 1 to birds do
63149: LD_ADDR_VAR 0 11
63153: PUSH
63154: DOUBLE
63155: LD_INT 1
63157: DEC
63158: ST_TO_ADDR
63159: LD_VAR 0 1
63163: PUSH
63164: FOR_TO
63165: IFFALSE 63212
// begin hc_class = 18 ;
63167: LD_ADDR_OWVAR 28
63171: PUSH
63172: LD_INT 18
63174: ST_TO_ADDR
// hc_gallery =  ;
63175: LD_ADDR_OWVAR 33
63179: PUSH
63180: LD_STRING 
63182: ST_TO_ADDR
// animal := CreateHuman ;
63183: LD_ADDR_VAR 0 12
63187: PUSH
63188: CALL_OW 44
63192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63193: LD_VAR 0 12
63197: PPUSH
63198: LD_VAR 0 8
63202: PPUSH
63203: LD_INT 0
63205: PPUSH
63206: CALL 65200 0 3
// end ;
63210: GO 63164
63212: POP
63213: POP
// if tigers then
63214: LD_VAR 0 2
63218: IFFALSE 63302
// for i = 1 to tigers do
63220: LD_ADDR_VAR 0 11
63224: PUSH
63225: DOUBLE
63226: LD_INT 1
63228: DEC
63229: ST_TO_ADDR
63230: LD_VAR 0 2
63234: PUSH
63235: FOR_TO
63236: IFFALSE 63300
// begin hc_class = class_tiger ;
63238: LD_ADDR_OWVAR 28
63242: PUSH
63243: LD_INT 14
63245: ST_TO_ADDR
// hc_gallery =  ;
63246: LD_ADDR_OWVAR 33
63250: PUSH
63251: LD_STRING 
63253: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63254: LD_ADDR_OWVAR 35
63258: PUSH
63259: LD_INT 7
63261: NEG
63262: PPUSH
63263: LD_INT 7
63265: PPUSH
63266: CALL_OW 12
63270: ST_TO_ADDR
// animal := CreateHuman ;
63271: LD_ADDR_VAR 0 12
63275: PUSH
63276: CALL_OW 44
63280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63281: LD_VAR 0 12
63285: PPUSH
63286: LD_VAR 0 8
63290: PPUSH
63291: LD_INT 0
63293: PPUSH
63294: CALL 65200 0 3
// end ;
63298: GO 63235
63300: POP
63301: POP
// if apemans then
63302: LD_VAR 0 3
63306: IFFALSE 63429
// for i = 1 to apemans do
63308: LD_ADDR_VAR 0 11
63312: PUSH
63313: DOUBLE
63314: LD_INT 1
63316: DEC
63317: ST_TO_ADDR
63318: LD_VAR 0 3
63322: PUSH
63323: FOR_TO
63324: IFFALSE 63427
// begin hc_class = class_apeman ;
63326: LD_ADDR_OWVAR 28
63330: PUSH
63331: LD_INT 12
63333: ST_TO_ADDR
// hc_gallery =  ;
63334: LD_ADDR_OWVAR 33
63338: PUSH
63339: LD_STRING 
63341: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63342: LD_ADDR_OWVAR 35
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PPUSH
63351: LD_INT 2
63353: PPUSH
63354: CALL_OW 12
63358: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63359: LD_ADDR_OWVAR 31
63363: PUSH
63364: LD_INT 1
63366: PPUSH
63367: LD_INT 3
63369: PPUSH
63370: CALL_OW 12
63374: PUSH
63375: LD_INT 1
63377: PPUSH
63378: LD_INT 3
63380: PPUSH
63381: CALL_OW 12
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// animal := CreateHuman ;
63398: LD_ADDR_VAR 0 12
63402: PUSH
63403: CALL_OW 44
63407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63408: LD_VAR 0 12
63412: PPUSH
63413: LD_VAR 0 8
63417: PPUSH
63418: LD_INT 0
63420: PPUSH
63421: CALL 65200 0 3
// end ;
63425: GO 63323
63427: POP
63428: POP
// if enchidnas then
63429: LD_VAR 0 4
63433: IFFALSE 63500
// for i = 1 to enchidnas do
63435: LD_ADDR_VAR 0 11
63439: PUSH
63440: DOUBLE
63441: LD_INT 1
63443: DEC
63444: ST_TO_ADDR
63445: LD_VAR 0 4
63449: PUSH
63450: FOR_TO
63451: IFFALSE 63498
// begin hc_class = 13 ;
63453: LD_ADDR_OWVAR 28
63457: PUSH
63458: LD_INT 13
63460: ST_TO_ADDR
// hc_gallery =  ;
63461: LD_ADDR_OWVAR 33
63465: PUSH
63466: LD_STRING 
63468: ST_TO_ADDR
// animal := CreateHuman ;
63469: LD_ADDR_VAR 0 12
63473: PUSH
63474: CALL_OW 44
63478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63479: LD_VAR 0 12
63483: PPUSH
63484: LD_VAR 0 8
63488: PPUSH
63489: LD_INT 0
63491: PPUSH
63492: CALL 65200 0 3
// end ;
63496: GO 63450
63498: POP
63499: POP
// if fishes then
63500: LD_VAR 0 7
63504: IFFALSE 63571
// for i = 1 to fishes do
63506: LD_ADDR_VAR 0 11
63510: PUSH
63511: DOUBLE
63512: LD_INT 1
63514: DEC
63515: ST_TO_ADDR
63516: LD_VAR 0 7
63520: PUSH
63521: FOR_TO
63522: IFFALSE 63569
// begin hc_class = 20 ;
63524: LD_ADDR_OWVAR 28
63528: PUSH
63529: LD_INT 20
63531: ST_TO_ADDR
// hc_gallery =  ;
63532: LD_ADDR_OWVAR 33
63536: PUSH
63537: LD_STRING 
63539: ST_TO_ADDR
// animal := CreateHuman ;
63540: LD_ADDR_VAR 0 12
63544: PUSH
63545: CALL_OW 44
63549: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63550: LD_VAR 0 12
63554: PPUSH
63555: LD_VAR 0 9
63559: PPUSH
63560: LD_INT 0
63562: PPUSH
63563: CALL 65200 0 3
// end ;
63567: GO 63521
63569: POP
63570: POP
// end ;
63571: LD_VAR 0 10
63575: RET
// export function WantHeal ( sci , unit ) ; begin
63576: LD_INT 0
63578: PPUSH
// if GetTaskList ( sci ) > 0 then
63579: LD_VAR 0 1
63583: PPUSH
63584: CALL_OW 437
63588: PUSH
63589: LD_INT 0
63591: GREATER
63592: IFFALSE 63662
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63594: LD_VAR 0 1
63598: PPUSH
63599: CALL_OW 437
63603: PUSH
63604: LD_INT 1
63606: ARRAY
63607: PUSH
63608: LD_INT 1
63610: ARRAY
63611: PUSH
63612: LD_STRING l
63614: EQUAL
63615: PUSH
63616: LD_VAR 0 1
63620: PPUSH
63621: CALL_OW 437
63625: PUSH
63626: LD_INT 1
63628: ARRAY
63629: PUSH
63630: LD_INT 4
63632: ARRAY
63633: PUSH
63634: LD_VAR 0 2
63638: EQUAL
63639: AND
63640: IFFALSE 63652
// result := true else
63642: LD_ADDR_VAR 0 3
63646: PUSH
63647: LD_INT 1
63649: ST_TO_ADDR
63650: GO 63660
// result := false ;
63652: LD_ADDR_VAR 0 3
63656: PUSH
63657: LD_INT 0
63659: ST_TO_ADDR
// end else
63660: GO 63670
// result := false ;
63662: LD_ADDR_VAR 0 3
63666: PUSH
63667: LD_INT 0
63669: ST_TO_ADDR
// end ;
63670: LD_VAR 0 3
63674: RET
// export function HealTarget ( sci ) ; begin
63675: LD_INT 0
63677: PPUSH
// if not sci then
63678: LD_VAR 0 1
63682: NOT
63683: IFFALSE 63687
// exit ;
63685: GO 63752
// result := 0 ;
63687: LD_ADDR_VAR 0 2
63691: PUSH
63692: LD_INT 0
63694: ST_TO_ADDR
// if GetTaskList ( sci ) then
63695: LD_VAR 0 1
63699: PPUSH
63700: CALL_OW 437
63704: IFFALSE 63752
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63706: LD_VAR 0 1
63710: PPUSH
63711: CALL_OW 437
63715: PUSH
63716: LD_INT 1
63718: ARRAY
63719: PUSH
63720: LD_INT 1
63722: ARRAY
63723: PUSH
63724: LD_STRING l
63726: EQUAL
63727: IFFALSE 63752
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63729: LD_ADDR_VAR 0 2
63733: PUSH
63734: LD_VAR 0 1
63738: PPUSH
63739: CALL_OW 437
63743: PUSH
63744: LD_INT 1
63746: ARRAY
63747: PUSH
63748: LD_INT 4
63750: ARRAY
63751: ST_TO_ADDR
// end ;
63752: LD_VAR 0 2
63756: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63757: LD_INT 0
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
// if not base_units then
63763: LD_VAR 0 1
63767: NOT
63768: IFFALSE 63772
// exit ;
63770: GO 63859
// result := false ;
63772: LD_ADDR_VAR 0 2
63776: PUSH
63777: LD_INT 0
63779: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63780: LD_ADDR_VAR 0 5
63784: PUSH
63785: LD_VAR 0 1
63789: PPUSH
63790: LD_INT 21
63792: PUSH
63793: LD_INT 3
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PPUSH
63800: CALL_OW 72
63804: ST_TO_ADDR
// if not tmp then
63805: LD_VAR 0 5
63809: NOT
63810: IFFALSE 63814
// exit ;
63812: GO 63859
// for i in tmp do
63814: LD_ADDR_VAR 0 3
63818: PUSH
63819: LD_VAR 0 5
63823: PUSH
63824: FOR_IN
63825: IFFALSE 63857
// begin result := EnemyInRange ( i , 22 ) ;
63827: LD_ADDR_VAR 0 2
63831: PUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: LD_INT 22
63839: PPUSH
63840: CALL 61446 0 2
63844: ST_TO_ADDR
// if result then
63845: LD_VAR 0 2
63849: IFFALSE 63855
// exit ;
63851: POP
63852: POP
63853: GO 63859
// end ;
63855: GO 63824
63857: POP
63858: POP
// end ;
63859: LD_VAR 0 2
63863: RET
// export function FilterByTag ( units , tag ) ; begin
63864: LD_INT 0
63866: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63867: LD_ADDR_VAR 0 3
63871: PUSH
63872: LD_VAR 0 1
63876: PPUSH
63877: LD_INT 120
63879: PUSH
63880: LD_VAR 0 2
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PPUSH
63889: CALL_OW 72
63893: ST_TO_ADDR
// end ;
63894: LD_VAR 0 3
63898: RET
// export function IsDriver ( un ) ; begin
63899: LD_INT 0
63901: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63902: LD_ADDR_VAR 0 2
63906: PUSH
63907: LD_VAR 0 1
63911: PUSH
63912: LD_INT 55
63914: PUSH
63915: EMPTY
63916: LIST
63917: PPUSH
63918: CALL_OW 69
63922: IN
63923: ST_TO_ADDR
// end ;
63924: LD_VAR 0 2
63928: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63929: LD_INT 0
63931: PPUSH
63932: PPUSH
// list := [ ] ;
63933: LD_ADDR_VAR 0 5
63937: PUSH
63938: EMPTY
63939: ST_TO_ADDR
// case d of 0 :
63940: LD_VAR 0 3
63944: PUSH
63945: LD_INT 0
63947: DOUBLE
63948: EQUAL
63949: IFTRUE 63953
63951: GO 64086
63953: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_INT 4
63966: MINUS
63967: PUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 4
63975: MINUS
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: PUSH
63985: LD_VAR 0 1
63989: PUSH
63990: LD_INT 3
63992: MINUS
63993: PUSH
63994: LD_VAR 0 2
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: PUSH
64007: LD_VAR 0 1
64011: PUSH
64012: LD_INT 4
64014: PLUS
64015: PUSH
64016: LD_VAR 0 2
64020: PUSH
64021: LD_INT 4
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: PUSH
64029: LD_VAR 0 1
64033: PUSH
64034: LD_INT 3
64036: PLUS
64037: PUSH
64038: LD_VAR 0 2
64042: PUSH
64043: LD_INT 3
64045: PLUS
64046: PUSH
64047: LD_INT 5
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: PUSH
64055: LD_VAR 0 1
64059: PUSH
64060: LD_VAR 0 2
64064: PUSH
64065: LD_INT 4
64067: PLUS
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: ST_TO_ADDR
// end ; 1 :
64084: GO 64784
64086: LD_INT 1
64088: DOUBLE
64089: EQUAL
64090: IFTRUE 64094
64092: GO 64227
64094: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64095: LD_ADDR_VAR 0 5
64099: PUSH
64100: LD_VAR 0 1
64104: PUSH
64105: LD_VAR 0 2
64109: PUSH
64110: LD_INT 4
64112: MINUS
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: PUSH
64122: LD_VAR 0 1
64126: PUSH
64127: LD_INT 3
64129: MINUS
64130: PUSH
64131: LD_VAR 0 2
64135: PUSH
64136: LD_INT 3
64138: MINUS
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: PUSH
64148: LD_VAR 0 1
64152: PUSH
64153: LD_INT 4
64155: MINUS
64156: PUSH
64157: LD_VAR 0 2
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: PUSH
64170: LD_VAR 0 1
64174: PUSH
64175: LD_VAR 0 2
64179: PUSH
64180: LD_INT 3
64182: PLUS
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: PUSH
64192: LD_VAR 0 1
64196: PUSH
64197: LD_INT 4
64199: PLUS
64200: PUSH
64201: LD_VAR 0 2
64205: PUSH
64206: LD_INT 4
64208: PLUS
64209: PUSH
64210: LD_INT 5
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: ST_TO_ADDR
// end ; 2 :
64225: GO 64784
64227: LD_INT 2
64229: DOUBLE
64230: EQUAL
64231: IFTRUE 64235
64233: GO 64364
64235: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64236: LD_ADDR_VAR 0 5
64240: PUSH
64241: LD_VAR 0 1
64245: PUSH
64246: LD_VAR 0 2
64250: PUSH
64251: LD_INT 3
64253: MINUS
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: PUSH
64263: LD_VAR 0 1
64267: PUSH
64268: LD_INT 4
64270: PLUS
64271: PUSH
64272: LD_VAR 0 2
64276: PUSH
64277: LD_INT 4
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: PUSH
64285: LD_VAR 0 1
64289: PUSH
64290: LD_VAR 0 2
64294: PUSH
64295: LD_INT 4
64297: PLUS
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: PUSH
64307: LD_VAR 0 1
64311: PUSH
64312: LD_INT 3
64314: MINUS
64315: PUSH
64316: LD_VAR 0 2
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: PUSH
64329: LD_VAR 0 1
64333: PUSH
64334: LD_INT 4
64336: MINUS
64337: PUSH
64338: LD_VAR 0 2
64342: PUSH
64343: LD_INT 4
64345: MINUS
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// end ; 3 :
64362: GO 64784
64364: LD_INT 3
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64372
64370: GO 64505
64372: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64373: LD_ADDR_VAR 0 5
64377: PUSH
64378: LD_VAR 0 1
64382: PUSH
64383: LD_INT 3
64385: PLUS
64386: PUSH
64387: LD_VAR 0 2
64391: PUSH
64392: LD_INT 4
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: LD_VAR 0 1
64404: PUSH
64405: LD_INT 4
64407: PLUS
64408: PUSH
64409: LD_VAR 0 2
64413: PUSH
64414: LD_INT 4
64416: PLUS
64417: PUSH
64418: LD_INT 5
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: PUSH
64426: LD_VAR 0 1
64430: PUSH
64431: LD_INT 4
64433: MINUS
64434: PUSH
64435: LD_VAR 0 2
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: PUSH
64448: LD_VAR 0 1
64452: PUSH
64453: LD_VAR 0 2
64457: PUSH
64458: LD_INT 4
64460: MINUS
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: PUSH
64470: LD_VAR 0 1
64474: PUSH
64475: LD_INT 3
64477: MINUS
64478: PUSH
64479: LD_VAR 0 2
64483: PUSH
64484: LD_INT 3
64486: MINUS
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// end ; 4 :
64503: GO 64784
64505: LD_INT 4
64507: DOUBLE
64508: EQUAL
64509: IFTRUE 64513
64511: GO 64646
64513: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64514: LD_ADDR_VAR 0 5
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 4
64531: PLUS
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: LD_INT 3
64548: PLUS
64549: PUSH
64550: LD_VAR 0 2
64554: PUSH
64555: LD_INT 3
64557: PLUS
64558: PUSH
64559: LD_INT 5
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: PUSH
64567: LD_VAR 0 1
64571: PUSH
64572: LD_INT 4
64574: PLUS
64575: PUSH
64576: LD_VAR 0 2
64580: PUSH
64581: LD_INT 4
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: PUSH
64589: LD_VAR 0 1
64593: PUSH
64594: LD_VAR 0 2
64598: PUSH
64599: LD_INT 3
64601: MINUS
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: PUSH
64611: LD_VAR 0 1
64615: PUSH
64616: LD_INT 4
64618: MINUS
64619: PUSH
64620: LD_VAR 0 2
64624: PUSH
64625: LD_INT 4
64627: MINUS
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: ST_TO_ADDR
// end ; 5 :
64644: GO 64784
64646: LD_INT 5
64648: DOUBLE
64649: EQUAL
64650: IFTRUE 64654
64652: GO 64783
64654: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64655: LD_ADDR_VAR 0 5
64659: PUSH
64660: LD_VAR 0 1
64664: PUSH
64665: LD_INT 4
64667: MINUS
64668: PUSH
64669: LD_VAR 0 2
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: PUSH
64682: LD_VAR 0 1
64686: PUSH
64687: LD_VAR 0 2
64691: PUSH
64692: LD_INT 4
64694: MINUS
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: PUSH
64704: LD_VAR 0 1
64708: PUSH
64709: LD_INT 4
64711: PLUS
64712: PUSH
64713: LD_VAR 0 2
64717: PUSH
64718: LD_INT 4
64720: PLUS
64721: PUSH
64722: LD_INT 5
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: PUSH
64730: LD_VAR 0 1
64734: PUSH
64735: LD_INT 3
64737: PLUS
64738: PUSH
64739: LD_VAR 0 2
64743: PUSH
64744: LD_INT 4
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: LIST
64751: PUSH
64752: LD_VAR 0 1
64756: PUSH
64757: LD_VAR 0 2
64761: PUSH
64762: LD_INT 3
64764: PLUS
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// end ; end ;
64781: GO 64784
64783: POP
// result := list ;
64784: LD_ADDR_VAR 0 4
64788: PUSH
64789: LD_VAR 0 5
64793: ST_TO_ADDR
// end ;
64794: LD_VAR 0 4
64798: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64799: LD_INT 0
64801: PPUSH
64802: PPUSH
64803: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64804: LD_VAR 0 1
64808: NOT
64809: PUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: LD_INT 4
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: IN
64833: NOT
64834: OR
64835: IFFALSE 64839
// exit ;
64837: GO 64922
// tmp := [ ] ;
64839: LD_ADDR_VAR 0 5
64843: PUSH
64844: EMPTY
64845: ST_TO_ADDR
// for i in units do
64846: LD_ADDR_VAR 0 4
64850: PUSH
64851: LD_VAR 0 1
64855: PUSH
64856: FOR_IN
64857: IFFALSE 64891
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64859: LD_ADDR_VAR 0 5
64863: PUSH
64864: LD_VAR 0 5
64868: PPUSH
64869: LD_VAR 0 4
64873: PPUSH
64874: LD_VAR 0 2
64878: PPUSH
64879: CALL_OW 259
64883: PPUSH
64884: CALL 66283 0 2
64888: ST_TO_ADDR
64889: GO 64856
64891: POP
64892: POP
// if not tmp then
64893: LD_VAR 0 5
64897: NOT
64898: IFFALSE 64902
// exit ;
64900: GO 64922
// result := SortListByListDesc ( units , tmp ) ;
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: LD_VAR 0 1
64911: PPUSH
64912: LD_VAR 0 5
64916: PPUSH
64917: CALL_OW 77
64921: ST_TO_ADDR
// end ;
64922: LD_VAR 0 3
64926: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64927: LD_INT 0
64929: PPUSH
64930: PPUSH
64931: PPUSH
// result := false ;
64932: LD_ADDR_VAR 0 3
64936: PUSH
64937: LD_INT 0
64939: ST_TO_ADDR
// if not building then
64940: LD_VAR 0 2
64944: NOT
64945: IFFALSE 64949
// exit ;
64947: GO 65087
// x := GetX ( building ) ;
64949: LD_ADDR_VAR 0 4
64953: PUSH
64954: LD_VAR 0 2
64958: PPUSH
64959: CALL_OW 250
64963: ST_TO_ADDR
// y := GetY ( building ) ;
64964: LD_ADDR_VAR 0 5
64968: PUSH
64969: LD_VAR 0 2
64973: PPUSH
64974: CALL_OW 251
64978: ST_TO_ADDR
// if not x or not y then
64979: LD_VAR 0 4
64983: NOT
64984: PUSH
64985: LD_VAR 0 5
64989: NOT
64990: OR
64991: IFFALSE 64995
// exit ;
64993: GO 65087
// if GetTaskList ( unit ) then
64995: LD_VAR 0 1
64999: PPUSH
65000: CALL_OW 437
65004: IFFALSE 65087
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65006: LD_STRING e
65008: PUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 437
65018: PUSH
65019: LD_INT 1
65021: ARRAY
65022: PUSH
65023: LD_INT 1
65025: ARRAY
65026: EQUAL
65027: PUSH
65028: LD_VAR 0 4
65032: PUSH
65033: LD_VAR 0 1
65037: PPUSH
65038: CALL_OW 437
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: PUSH
65047: LD_INT 2
65049: ARRAY
65050: EQUAL
65051: AND
65052: PUSH
65053: LD_VAR 0 5
65057: PUSH
65058: LD_VAR 0 1
65062: PPUSH
65063: CALL_OW 437
65067: PUSH
65068: LD_INT 1
65070: ARRAY
65071: PUSH
65072: LD_INT 3
65074: ARRAY
65075: EQUAL
65076: AND
65077: IFFALSE 65087
// result := true end ;
65079: LD_ADDR_VAR 0 3
65083: PUSH
65084: LD_INT 1
65086: ST_TO_ADDR
// end ;
65087: LD_VAR 0 3
65091: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65092: LD_INT 0
65094: PPUSH
// result := false ;
65095: LD_ADDR_VAR 0 4
65099: PUSH
65100: LD_INT 0
65102: ST_TO_ADDR
// if GetTaskList ( unit ) then
65103: LD_VAR 0 1
65107: PPUSH
65108: CALL_OW 437
65112: IFFALSE 65195
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65114: LD_STRING M
65116: PUSH
65117: LD_VAR 0 1
65121: PPUSH
65122: CALL_OW 437
65126: PUSH
65127: LD_INT 1
65129: ARRAY
65130: PUSH
65131: LD_INT 1
65133: ARRAY
65134: EQUAL
65135: PUSH
65136: LD_VAR 0 2
65140: PUSH
65141: LD_VAR 0 1
65145: PPUSH
65146: CALL_OW 437
65150: PUSH
65151: LD_INT 1
65153: ARRAY
65154: PUSH
65155: LD_INT 2
65157: ARRAY
65158: EQUAL
65159: AND
65160: PUSH
65161: LD_VAR 0 3
65165: PUSH
65166: LD_VAR 0 1
65170: PPUSH
65171: CALL_OW 437
65175: PUSH
65176: LD_INT 1
65178: ARRAY
65179: PUSH
65180: LD_INT 3
65182: ARRAY
65183: EQUAL
65184: AND
65185: IFFALSE 65195
// result := true ;
65187: LD_ADDR_VAR 0 4
65191: PUSH
65192: LD_INT 1
65194: ST_TO_ADDR
// end ; end ;
65195: LD_VAR 0 4
65199: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65200: LD_INT 0
65202: PPUSH
65203: PPUSH
65204: PPUSH
65205: PPUSH
// if not unit or not area then
65206: LD_VAR 0 1
65210: NOT
65211: PUSH
65212: LD_VAR 0 2
65216: NOT
65217: OR
65218: IFFALSE 65222
// exit ;
65220: GO 65386
// tmp := AreaToList ( area , i ) ;
65222: LD_ADDR_VAR 0 6
65226: PUSH
65227: LD_VAR 0 2
65231: PPUSH
65232: LD_VAR 0 5
65236: PPUSH
65237: CALL_OW 517
65241: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65242: LD_ADDR_VAR 0 5
65246: PUSH
65247: DOUBLE
65248: LD_INT 1
65250: DEC
65251: ST_TO_ADDR
65252: LD_VAR 0 6
65256: PUSH
65257: LD_INT 1
65259: ARRAY
65260: PUSH
65261: FOR_TO
65262: IFFALSE 65384
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65264: LD_ADDR_VAR 0 7
65268: PUSH
65269: LD_VAR 0 6
65273: PUSH
65274: LD_INT 1
65276: ARRAY
65277: PUSH
65278: LD_VAR 0 5
65282: ARRAY
65283: PUSH
65284: LD_VAR 0 6
65288: PUSH
65289: LD_INT 2
65291: ARRAY
65292: PUSH
65293: LD_VAR 0 5
65297: ARRAY
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65303: LD_VAR 0 7
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: PPUSH
65312: LD_VAR 0 7
65316: PUSH
65317: LD_INT 2
65319: ARRAY
65320: PPUSH
65321: CALL_OW 428
65325: PUSH
65326: LD_INT 0
65328: EQUAL
65329: IFFALSE 65382
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65331: LD_VAR 0 1
65335: PPUSH
65336: LD_VAR 0 7
65340: PUSH
65341: LD_INT 1
65343: ARRAY
65344: PPUSH
65345: LD_VAR 0 7
65349: PUSH
65350: LD_INT 2
65352: ARRAY
65353: PPUSH
65354: LD_VAR 0 3
65358: PPUSH
65359: CALL_OW 48
// result := IsPlaced ( unit ) ;
65363: LD_ADDR_VAR 0 4
65367: PUSH
65368: LD_VAR 0 1
65372: PPUSH
65373: CALL_OW 305
65377: ST_TO_ADDR
// exit ;
65378: POP
65379: POP
65380: GO 65386
// end ; end ;
65382: GO 65261
65384: POP
65385: POP
// end ;
65386: LD_VAR 0 4
65390: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65391: LD_INT 0
65393: PPUSH
65394: PPUSH
65395: PPUSH
// if not side or side > 8 then
65396: LD_VAR 0 1
65400: NOT
65401: PUSH
65402: LD_VAR 0 1
65406: PUSH
65407: LD_INT 8
65409: GREATER
65410: OR
65411: IFFALSE 65415
// exit ;
65413: GO 65602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65415: LD_ADDR_VAR 0 4
65419: PUSH
65420: LD_INT 22
65422: PUSH
65423: LD_VAR 0 1
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 21
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PPUSH
65446: CALL_OW 69
65450: ST_TO_ADDR
// if not tmp then
65451: LD_VAR 0 4
65455: NOT
65456: IFFALSE 65460
// exit ;
65458: GO 65602
// enable_addtolog := true ;
65460: LD_ADDR_OWVAR 81
65464: PUSH
65465: LD_INT 1
65467: ST_TO_ADDR
// AddToLog ( [ ) ;
65468: LD_STRING [
65470: PPUSH
65471: CALL_OW 561
// for i in tmp do
65475: LD_ADDR_VAR 0 3
65479: PUSH
65480: LD_VAR 0 4
65484: PUSH
65485: FOR_IN
65486: IFFALSE 65593
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65488: LD_STRING [
65490: PUSH
65491: LD_VAR 0 3
65495: PPUSH
65496: CALL_OW 266
65500: STR
65501: PUSH
65502: LD_STRING , 
65504: STR
65505: PUSH
65506: LD_VAR 0 3
65510: PPUSH
65511: CALL_OW 250
65515: STR
65516: PUSH
65517: LD_STRING , 
65519: STR
65520: PUSH
65521: LD_VAR 0 3
65525: PPUSH
65526: CALL_OW 251
65530: STR
65531: PUSH
65532: LD_STRING , 
65534: STR
65535: PUSH
65536: LD_VAR 0 3
65540: PPUSH
65541: CALL_OW 254
65545: STR
65546: PUSH
65547: LD_STRING , 
65549: STR
65550: PUSH
65551: LD_VAR 0 3
65555: PPUSH
65556: LD_INT 1
65558: PPUSH
65559: CALL_OW 268
65563: STR
65564: PUSH
65565: LD_STRING , 
65567: STR
65568: PUSH
65569: LD_VAR 0 3
65573: PPUSH
65574: LD_INT 2
65576: PPUSH
65577: CALL_OW 268
65581: STR
65582: PUSH
65583: LD_STRING ],
65585: STR
65586: PPUSH
65587: CALL_OW 561
// end ;
65591: GO 65485
65593: POP
65594: POP
// AddToLog ( ]; ) ;
65595: LD_STRING ];
65597: PPUSH
65598: CALL_OW 561
// end ;
65602: LD_VAR 0 2
65606: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65607: LD_INT 0
65609: PPUSH
65610: PPUSH
65611: PPUSH
65612: PPUSH
65613: PPUSH
// if not area or not rate or not max then
65614: LD_VAR 0 1
65618: NOT
65619: PUSH
65620: LD_VAR 0 2
65624: NOT
65625: OR
65626: PUSH
65627: LD_VAR 0 4
65631: NOT
65632: OR
65633: IFFALSE 65637
// exit ;
65635: GO 65826
// while 1 do
65637: LD_INT 1
65639: IFFALSE 65826
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65641: LD_ADDR_VAR 0 9
65645: PUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_INT 1
65653: PPUSH
65654: CALL_OW 287
65658: PUSH
65659: LD_INT 10
65661: MUL
65662: ST_TO_ADDR
// r := rate / 10 ;
65663: LD_ADDR_VAR 0 7
65667: PUSH
65668: LD_VAR 0 2
65672: PUSH
65673: LD_INT 10
65675: DIVREAL
65676: ST_TO_ADDR
// time := 1 1$00 ;
65677: LD_ADDR_VAR 0 8
65681: PUSH
65682: LD_INT 2100
65684: ST_TO_ADDR
// if amount < min then
65685: LD_VAR 0 9
65689: PUSH
65690: LD_VAR 0 3
65694: LESS
65695: IFFALSE 65713
// r := r * 2 else
65697: LD_ADDR_VAR 0 7
65701: PUSH
65702: LD_VAR 0 7
65706: PUSH
65707: LD_INT 2
65709: MUL
65710: ST_TO_ADDR
65711: GO 65739
// if amount > max then
65713: LD_VAR 0 9
65717: PUSH
65718: LD_VAR 0 4
65722: GREATER
65723: IFFALSE 65739
// r := r / 2 ;
65725: LD_ADDR_VAR 0 7
65729: PUSH
65730: LD_VAR 0 7
65734: PUSH
65735: LD_INT 2
65737: DIVREAL
65738: ST_TO_ADDR
// time := time / r ;
65739: LD_ADDR_VAR 0 8
65743: PUSH
65744: LD_VAR 0 8
65748: PUSH
65749: LD_VAR 0 7
65753: DIVREAL
65754: ST_TO_ADDR
// if time < 0 then
65755: LD_VAR 0 8
65759: PUSH
65760: LD_INT 0
65762: LESS
65763: IFFALSE 65780
// time := time * - 1 ;
65765: LD_ADDR_VAR 0 8
65769: PUSH
65770: LD_VAR 0 8
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: MUL
65779: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65780: LD_VAR 0 8
65784: PUSH
65785: LD_INT 35
65787: PPUSH
65788: LD_INT 875
65790: PPUSH
65791: CALL_OW 12
65795: PLUS
65796: PPUSH
65797: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65801: LD_INT 1
65803: PPUSH
65804: LD_INT 5
65806: PPUSH
65807: CALL_OW 12
65811: PPUSH
65812: LD_VAR 0 1
65816: PPUSH
65817: LD_INT 1
65819: PPUSH
65820: CALL_OW 55
// end ;
65824: GO 65637
// end ;
65826: LD_VAR 0 5
65830: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65831: LD_INT 0
65833: PPUSH
65834: PPUSH
65835: PPUSH
65836: PPUSH
65837: PPUSH
65838: PPUSH
65839: PPUSH
65840: PPUSH
// if not turrets or not factories then
65841: LD_VAR 0 1
65845: NOT
65846: PUSH
65847: LD_VAR 0 2
65851: NOT
65852: OR
65853: IFFALSE 65857
// exit ;
65855: GO 66164
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65857: LD_ADDR_VAR 0 10
65861: PUSH
65862: LD_INT 5
65864: PUSH
65865: LD_INT 6
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 4
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 3
65884: PUSH
65885: LD_INT 5
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 24
65899: PUSH
65900: LD_INT 25
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 23
65909: PUSH
65910: LD_INT 27
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 42
65923: PUSH
65924: LD_INT 43
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 44
65933: PUSH
65934: LD_INT 46
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 45
65943: PUSH
65944: LD_INT 47
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: ST_TO_ADDR
// result := [ ] ;
65961: LD_ADDR_VAR 0 3
65965: PUSH
65966: EMPTY
65967: ST_TO_ADDR
// for i in turrets do
65968: LD_ADDR_VAR 0 4
65972: PUSH
65973: LD_VAR 0 1
65977: PUSH
65978: FOR_IN
65979: IFFALSE 66162
// begin nat := GetNation ( i ) ;
65981: LD_ADDR_VAR 0 7
65985: PUSH
65986: LD_VAR 0 4
65990: PPUSH
65991: CALL_OW 248
65995: ST_TO_ADDR
// weapon := 0 ;
65996: LD_ADDR_VAR 0 8
66000: PUSH
66001: LD_INT 0
66003: ST_TO_ADDR
// if not nat then
66004: LD_VAR 0 7
66008: NOT
66009: IFFALSE 66013
// continue ;
66011: GO 65978
// for j in list [ nat ] do
66013: LD_ADDR_VAR 0 5
66017: PUSH
66018: LD_VAR 0 10
66022: PUSH
66023: LD_VAR 0 7
66027: ARRAY
66028: PUSH
66029: FOR_IN
66030: IFFALSE 66071
// if GetBWeapon ( i ) = j [ 1 ] then
66032: LD_VAR 0 4
66036: PPUSH
66037: CALL_OW 269
66041: PUSH
66042: LD_VAR 0 5
66046: PUSH
66047: LD_INT 1
66049: ARRAY
66050: EQUAL
66051: IFFALSE 66069
// begin weapon := j [ 2 ] ;
66053: LD_ADDR_VAR 0 8
66057: PUSH
66058: LD_VAR 0 5
66062: PUSH
66063: LD_INT 2
66065: ARRAY
66066: ST_TO_ADDR
// break ;
66067: GO 66071
// end ;
66069: GO 66029
66071: POP
66072: POP
// if not weapon then
66073: LD_VAR 0 8
66077: NOT
66078: IFFALSE 66082
// continue ;
66080: GO 65978
// for k in factories do
66082: LD_ADDR_VAR 0 6
66086: PUSH
66087: LD_VAR 0 2
66091: PUSH
66092: FOR_IN
66093: IFFALSE 66158
// begin weapons := AvailableWeaponList ( k ) ;
66095: LD_ADDR_VAR 0 9
66099: PUSH
66100: LD_VAR 0 6
66104: PPUSH
66105: CALL_OW 478
66109: ST_TO_ADDR
// if not weapons then
66110: LD_VAR 0 9
66114: NOT
66115: IFFALSE 66119
// continue ;
66117: GO 66092
// if weapon in weapons then
66119: LD_VAR 0 8
66123: PUSH
66124: LD_VAR 0 9
66128: IN
66129: IFFALSE 66156
// begin result := [ i , weapon ] ;
66131: LD_ADDR_VAR 0 3
66135: PUSH
66136: LD_VAR 0 4
66140: PUSH
66141: LD_VAR 0 8
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// exit ;
66150: POP
66151: POP
66152: POP
66153: POP
66154: GO 66164
// end ; end ;
66156: GO 66092
66158: POP
66159: POP
// end ;
66160: GO 65978
66162: POP
66163: POP
// end ;
66164: LD_VAR 0 3
66168: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66169: LD_INT 0
66171: PPUSH
// if not side or side > 8 then
66172: LD_VAR 0 3
66176: NOT
66177: PUSH
66178: LD_VAR 0 3
66182: PUSH
66183: LD_INT 8
66185: GREATER
66186: OR
66187: IFFALSE 66191
// exit ;
66189: GO 66250
// if not range then
66191: LD_VAR 0 4
66195: NOT
66196: IFFALSE 66207
// range := - 12 ;
66198: LD_ADDR_VAR 0 4
66202: PUSH
66203: LD_INT 12
66205: NEG
66206: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66207: LD_VAR 0 1
66211: PPUSH
66212: LD_VAR 0 2
66216: PPUSH
66217: LD_VAR 0 3
66221: PPUSH
66222: LD_VAR 0 4
66226: PPUSH
66227: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66231: LD_VAR 0 1
66235: PPUSH
66236: LD_VAR 0 2
66240: PPUSH
66241: LD_VAR 0 3
66245: PPUSH
66246: CALL_OW 331
// end ;
66250: LD_VAR 0 5
66254: RET
// export function Video ( mode ) ; begin
66255: LD_INT 0
66257: PPUSH
// ingame_video = mode ;
66258: LD_ADDR_OWVAR 52
66262: PUSH
66263: LD_VAR 0 1
66267: ST_TO_ADDR
// interface_hidden = mode ;
66268: LD_ADDR_OWVAR 54
66272: PUSH
66273: LD_VAR 0 1
66277: ST_TO_ADDR
// end ;
66278: LD_VAR 0 2
66282: RET
// export function Join ( array , element ) ; begin
66283: LD_INT 0
66285: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66286: LD_ADDR_VAR 0 3
66290: PUSH
66291: LD_VAR 0 1
66295: PPUSH
66296: LD_VAR 0 1
66300: PUSH
66301: LD_INT 1
66303: PLUS
66304: PPUSH
66305: LD_VAR 0 2
66309: PPUSH
66310: CALL_OW 1
66314: ST_TO_ADDR
// end ;
66315: LD_VAR 0 3
66319: RET
// export function JoinUnion ( array , element ) ; begin
66320: LD_INT 0
66322: PPUSH
// result := array union element ;
66323: LD_ADDR_VAR 0 3
66327: PUSH
66328: LD_VAR 0 1
66332: PUSH
66333: LD_VAR 0 2
66337: UNION
66338: ST_TO_ADDR
// end ;
66339: LD_VAR 0 3
66343: RET
// export function GetBehemoths ( side ) ; begin
66344: LD_INT 0
66346: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66347: LD_ADDR_VAR 0 2
66351: PUSH
66352: LD_INT 22
66354: PUSH
66355: LD_VAR 0 1
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 31
66366: PUSH
66367: LD_INT 25
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PPUSH
66378: CALL_OW 69
66382: ST_TO_ADDR
// end ;
66383: LD_VAR 0 2
66387: RET
// export function Shuffle ( array ) ; var i , index ; begin
66388: LD_INT 0
66390: PPUSH
66391: PPUSH
66392: PPUSH
// result := [ ] ;
66393: LD_ADDR_VAR 0 2
66397: PUSH
66398: EMPTY
66399: ST_TO_ADDR
// if not array then
66400: LD_VAR 0 1
66404: NOT
66405: IFFALSE 66409
// exit ;
66407: GO 66508
// Randomize ;
66409: CALL_OW 10
// for i = array downto 1 do
66413: LD_ADDR_VAR 0 3
66417: PUSH
66418: DOUBLE
66419: LD_VAR 0 1
66423: INC
66424: ST_TO_ADDR
66425: LD_INT 1
66427: PUSH
66428: FOR_DOWNTO
66429: IFFALSE 66506
// begin index := rand ( 1 , array ) ;
66431: LD_ADDR_VAR 0 4
66435: PUSH
66436: LD_INT 1
66438: PPUSH
66439: LD_VAR 0 1
66443: PPUSH
66444: CALL_OW 12
66448: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66449: LD_ADDR_VAR 0 2
66453: PUSH
66454: LD_VAR 0 2
66458: PPUSH
66459: LD_VAR 0 2
66463: PUSH
66464: LD_INT 1
66466: PLUS
66467: PPUSH
66468: LD_VAR 0 1
66472: PUSH
66473: LD_VAR 0 4
66477: ARRAY
66478: PPUSH
66479: CALL_OW 2
66483: ST_TO_ADDR
// array := Delete ( array , index ) ;
66484: LD_ADDR_VAR 0 1
66488: PUSH
66489: LD_VAR 0 1
66493: PPUSH
66494: LD_VAR 0 4
66498: PPUSH
66499: CALL_OW 3
66503: ST_TO_ADDR
// end ;
66504: GO 66428
66506: POP
66507: POP
// end ;
66508: LD_VAR 0 2
66512: RET
// export function GetBaseMaterials ( base ) ; begin
66513: LD_INT 0
66515: PPUSH
// result := [ 0 , 0 , 0 ] ;
66516: LD_ADDR_VAR 0 2
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: LIST
66534: ST_TO_ADDR
// if not base then
66535: LD_VAR 0 1
66539: NOT
66540: IFFALSE 66544
// exit ;
66542: GO 66593
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66544: LD_ADDR_VAR 0 2
66548: PUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_INT 1
66556: PPUSH
66557: CALL_OW 275
66561: PUSH
66562: LD_VAR 0 1
66566: PPUSH
66567: LD_INT 2
66569: PPUSH
66570: CALL_OW 275
66574: PUSH
66575: LD_VAR 0 1
66579: PPUSH
66580: LD_INT 3
66582: PPUSH
66583: CALL_OW 275
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: ST_TO_ADDR
// end ;
66593: LD_VAR 0 2
66597: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66598: LD_INT 0
66600: PPUSH
66601: PPUSH
// result := array ;
66602: LD_ADDR_VAR 0 3
66606: PUSH
66607: LD_VAR 0 1
66611: ST_TO_ADDR
// if size >= result then
66612: LD_VAR 0 2
66616: PUSH
66617: LD_VAR 0 3
66621: GREATEREQUAL
66622: IFFALSE 66626
// exit ;
66624: GO 66676
// if size then
66626: LD_VAR 0 2
66630: IFFALSE 66676
// for i := array downto size do
66632: LD_ADDR_VAR 0 4
66636: PUSH
66637: DOUBLE
66638: LD_VAR 0 1
66642: INC
66643: ST_TO_ADDR
66644: LD_VAR 0 2
66648: PUSH
66649: FOR_DOWNTO
66650: IFFALSE 66674
// result := Delete ( result , result ) ;
66652: LD_ADDR_VAR 0 3
66656: PUSH
66657: LD_VAR 0 3
66661: PPUSH
66662: LD_VAR 0 3
66666: PPUSH
66667: CALL_OW 3
66671: ST_TO_ADDR
66672: GO 66649
66674: POP
66675: POP
// end ;
66676: LD_VAR 0 3
66680: RET
// export function ComExit ( unit ) ; var tmp ; begin
66681: LD_INT 0
66683: PPUSH
66684: PPUSH
// if not IsInUnit ( unit ) then
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 310
66694: NOT
66695: IFFALSE 66699
// exit ;
66697: GO 66759
// tmp := IsInUnit ( unit ) ;
66699: LD_ADDR_VAR 0 3
66703: PUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: CALL_OW 310
66713: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66714: LD_VAR 0 3
66718: PPUSH
66719: CALL_OW 247
66723: PUSH
66724: LD_INT 2
66726: EQUAL
66727: IFFALSE 66740
// ComExitVehicle ( unit ) else
66729: LD_VAR 0 1
66733: PPUSH
66734: CALL_OW 121
66738: GO 66749
// ComExitBuilding ( unit ) ;
66740: LD_VAR 0 1
66744: PPUSH
66745: CALL_OW 122
// result := tmp ;
66749: LD_ADDR_VAR 0 2
66753: PUSH
66754: LD_VAR 0 3
66758: ST_TO_ADDR
// end ;
66759: LD_VAR 0 2
66763: RET
// export function ComExitAll ( units ) ; var i ; begin
66764: LD_INT 0
66766: PPUSH
66767: PPUSH
// if not units then
66768: LD_VAR 0 1
66772: NOT
66773: IFFALSE 66777
// exit ;
66775: GO 66803
// for i in units do
66777: LD_ADDR_VAR 0 3
66781: PUSH
66782: LD_VAR 0 1
66786: PUSH
66787: FOR_IN
66788: IFFALSE 66801
// ComExit ( i ) ;
66790: LD_VAR 0 3
66794: PPUSH
66795: CALL 66681 0 1
66799: GO 66787
66801: POP
66802: POP
// end ;
66803: LD_VAR 0 2
66807: RET
// export function ResetHc ; begin
66808: LD_INT 0
66810: PPUSH
// InitHc ;
66811: CALL_OW 19
// hc_importance := 0 ;
66815: LD_ADDR_OWVAR 32
66819: PUSH
66820: LD_INT 0
66822: ST_TO_ADDR
// end ;
66823: LD_VAR 0 1
66827: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66828: LD_INT 0
66830: PPUSH
66831: PPUSH
66832: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66833: LD_ADDR_VAR 0 6
66837: PUSH
66838: LD_VAR 0 1
66842: PUSH
66843: LD_VAR 0 3
66847: PLUS
66848: PUSH
66849: LD_INT 2
66851: DIV
66852: ST_TO_ADDR
// if _x < 0 then
66853: LD_VAR 0 6
66857: PUSH
66858: LD_INT 0
66860: LESS
66861: IFFALSE 66878
// _x := _x * - 1 ;
66863: LD_ADDR_VAR 0 6
66867: PUSH
66868: LD_VAR 0 6
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: MUL
66877: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66878: LD_ADDR_VAR 0 7
66882: PUSH
66883: LD_VAR 0 2
66887: PUSH
66888: LD_VAR 0 4
66892: PLUS
66893: PUSH
66894: LD_INT 2
66896: DIV
66897: ST_TO_ADDR
// if _y < 0 then
66898: LD_VAR 0 7
66902: PUSH
66903: LD_INT 0
66905: LESS
66906: IFFALSE 66923
// _y := _y * - 1 ;
66908: LD_ADDR_VAR 0 7
66912: PUSH
66913: LD_VAR 0 7
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: MUL
66922: ST_TO_ADDR
// result := [ _x , _y ] ;
66923: LD_ADDR_VAR 0 5
66927: PUSH
66928: LD_VAR 0 6
66932: PUSH
66933: LD_VAR 0 7
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: ST_TO_ADDR
// end ;
66942: LD_VAR 0 5
66946: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66947: LD_INT 0
66949: PPUSH
66950: PPUSH
66951: PPUSH
66952: PPUSH
// task := GetTaskList ( unit ) ;
66953: LD_ADDR_VAR 0 7
66957: PUSH
66958: LD_VAR 0 1
66962: PPUSH
66963: CALL_OW 437
66967: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66968: LD_VAR 0 7
66972: NOT
66973: PUSH
66974: LD_VAR 0 1
66978: PPUSH
66979: LD_VAR 0 2
66983: PPUSH
66984: CALL_OW 308
66988: NOT
66989: AND
66990: IFFALSE 66994
// exit ;
66992: GO 67112
// if IsInArea ( unit , area ) then
66994: LD_VAR 0 1
66998: PPUSH
66999: LD_VAR 0 2
67003: PPUSH
67004: CALL_OW 308
67008: IFFALSE 67026
// begin ComMoveToArea ( unit , goAway ) ;
67010: LD_VAR 0 1
67014: PPUSH
67015: LD_VAR 0 3
67019: PPUSH
67020: CALL_OW 113
// exit ;
67024: GO 67112
// end ; if task [ 1 ] [ 1 ] <> M then
67026: LD_VAR 0 7
67030: PUSH
67031: LD_INT 1
67033: ARRAY
67034: PUSH
67035: LD_INT 1
67037: ARRAY
67038: PUSH
67039: LD_STRING M
67041: NONEQUAL
67042: IFFALSE 67046
// exit ;
67044: GO 67112
// x := task [ 1 ] [ 2 ] ;
67046: LD_ADDR_VAR 0 5
67050: PUSH
67051: LD_VAR 0 7
67055: PUSH
67056: LD_INT 1
67058: ARRAY
67059: PUSH
67060: LD_INT 2
67062: ARRAY
67063: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67064: LD_ADDR_VAR 0 6
67068: PUSH
67069: LD_VAR 0 7
67073: PUSH
67074: LD_INT 1
67076: ARRAY
67077: PUSH
67078: LD_INT 3
67080: ARRAY
67081: ST_TO_ADDR
// if InArea ( x , y , area ) then
67082: LD_VAR 0 5
67086: PPUSH
67087: LD_VAR 0 6
67091: PPUSH
67092: LD_VAR 0 2
67096: PPUSH
67097: CALL_OW 309
67101: IFFALSE 67112
// ComStop ( unit ) ;
67103: LD_VAR 0 1
67107: PPUSH
67108: CALL_OW 141
// end ;
67112: LD_VAR 0 4
67116: RET
// export function Abs ( value ) ; begin
67117: LD_INT 0
67119: PPUSH
// result := value ;
67120: LD_ADDR_VAR 0 2
67124: PUSH
67125: LD_VAR 0 1
67129: ST_TO_ADDR
// if value < 0 then
67130: LD_VAR 0 1
67134: PUSH
67135: LD_INT 0
67137: LESS
67138: IFFALSE 67155
// result := value * - 1 ;
67140: LD_ADDR_VAR 0 2
67144: PUSH
67145: LD_VAR 0 1
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: MUL
67154: ST_TO_ADDR
// end ;
67155: LD_VAR 0 2
67159: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67160: LD_INT 0
67162: PPUSH
67163: PPUSH
67164: PPUSH
67165: PPUSH
67166: PPUSH
67167: PPUSH
67168: PPUSH
67169: PPUSH
// if not unit or not building then
67170: LD_VAR 0 1
67174: NOT
67175: PUSH
67176: LD_VAR 0 2
67180: NOT
67181: OR
67182: IFFALSE 67186
// exit ;
67184: GO 67412
// x := GetX ( building ) ;
67186: LD_ADDR_VAR 0 4
67190: PUSH
67191: LD_VAR 0 2
67195: PPUSH
67196: CALL_OW 250
67200: ST_TO_ADDR
// y := GetY ( building ) ;
67201: LD_ADDR_VAR 0 6
67205: PUSH
67206: LD_VAR 0 2
67210: PPUSH
67211: CALL_OW 251
67215: ST_TO_ADDR
// d := GetDir ( building ) ;
67216: LD_ADDR_VAR 0 8
67220: PUSH
67221: LD_VAR 0 2
67225: PPUSH
67226: CALL_OW 254
67230: ST_TO_ADDR
// r := 4 ;
67231: LD_ADDR_VAR 0 9
67235: PUSH
67236: LD_INT 4
67238: ST_TO_ADDR
// for i := 1 to 5 do
67239: LD_ADDR_VAR 0 10
67243: PUSH
67244: DOUBLE
67245: LD_INT 1
67247: DEC
67248: ST_TO_ADDR
67249: LD_INT 5
67251: PUSH
67252: FOR_TO
67253: IFFALSE 67410
// begin _x := ShiftX ( x , d , r + i ) ;
67255: LD_ADDR_VAR 0 5
67259: PUSH
67260: LD_VAR 0 4
67264: PPUSH
67265: LD_VAR 0 8
67269: PPUSH
67270: LD_VAR 0 9
67274: PUSH
67275: LD_VAR 0 10
67279: PLUS
67280: PPUSH
67281: CALL_OW 272
67285: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67286: LD_ADDR_VAR 0 7
67290: PUSH
67291: LD_VAR 0 6
67295: PPUSH
67296: LD_VAR 0 8
67300: PPUSH
67301: LD_VAR 0 9
67305: PUSH
67306: LD_VAR 0 10
67310: PLUS
67311: PPUSH
67312: CALL_OW 273
67316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67317: LD_VAR 0 5
67321: PPUSH
67322: LD_VAR 0 7
67326: PPUSH
67327: CALL_OW 488
67331: PUSH
67332: LD_VAR 0 5
67336: PPUSH
67337: LD_VAR 0 7
67341: PPUSH
67342: CALL_OW 428
67346: PPUSH
67347: CALL_OW 247
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: LD_INT 2
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: IN
67362: NOT
67363: AND
67364: IFFALSE 67408
// begin ComMoveXY ( unit , _x , _y ) ;
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_VAR 0 5
67375: PPUSH
67376: LD_VAR 0 7
67380: PPUSH
67381: CALL_OW 111
// result := [ _x , _y ] ;
67385: LD_ADDR_VAR 0 3
67389: PUSH
67390: LD_VAR 0 5
67394: PUSH
67395: LD_VAR 0 7
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: ST_TO_ADDR
// exit ;
67404: POP
67405: POP
67406: GO 67412
// end ; end ;
67408: GO 67252
67410: POP
67411: POP
// end ;
67412: LD_VAR 0 3
67416: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67417: LD_INT 0
67419: PPUSH
67420: PPUSH
67421: PPUSH
// result := 0 ;
67422: LD_ADDR_VAR 0 3
67426: PUSH
67427: LD_INT 0
67429: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67430: LD_VAR 0 1
67434: PUSH
67435: LD_INT 0
67437: LESS
67438: PUSH
67439: LD_VAR 0 1
67443: PUSH
67444: LD_INT 8
67446: GREATER
67447: OR
67448: PUSH
67449: LD_VAR 0 2
67453: PUSH
67454: LD_INT 0
67456: LESS
67457: OR
67458: PUSH
67459: LD_VAR 0 2
67463: PUSH
67464: LD_INT 8
67466: GREATER
67467: OR
67468: IFFALSE 67472
// exit ;
67470: GO 67547
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67472: LD_ADDR_VAR 0 4
67476: PUSH
67477: LD_INT 22
67479: PUSH
67480: LD_VAR 0 2
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PPUSH
67489: CALL_OW 69
67493: PUSH
67494: FOR_IN
67495: IFFALSE 67545
// begin un := UnitShoot ( i ) ;
67497: LD_ADDR_VAR 0 5
67501: PUSH
67502: LD_VAR 0 4
67506: PPUSH
67507: CALL_OW 504
67511: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67512: LD_VAR 0 5
67516: PPUSH
67517: CALL_OW 255
67521: PUSH
67522: LD_VAR 0 1
67526: EQUAL
67527: IFFALSE 67543
// begin result := un ;
67529: LD_ADDR_VAR 0 3
67533: PUSH
67534: LD_VAR 0 5
67538: ST_TO_ADDR
// exit ;
67539: POP
67540: POP
67541: GO 67547
// end ; end ;
67543: GO 67494
67545: POP
67546: POP
// end ;
67547: LD_VAR 0 3
67551: RET
// export function GetCargoBay ( units ) ; begin
67552: LD_INT 0
67554: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67555: LD_ADDR_VAR 0 2
67559: PUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 34
67570: PUSH
67571: LD_INT 12
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 34
67580: PUSH
67581: LD_INT 51
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 34
67590: PUSH
67591: LD_INT 32
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 34
67600: PUSH
67601: LD_INT 89
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: PPUSH
67615: CALL_OW 72
67619: ST_TO_ADDR
// end ;
67620: LD_VAR 0 2
67624: RET
// export function Negate ( value ) ; begin
67625: LD_INT 0
67627: PPUSH
// result := not value ;
67628: LD_ADDR_VAR 0 2
67632: PUSH
67633: LD_VAR 0 1
67637: NOT
67638: ST_TO_ADDR
// end ;
67639: LD_VAR 0 2
67643: RET
// export function Inc ( value ) ; begin
67644: LD_INT 0
67646: PPUSH
// result := value + 1 ;
67647: LD_ADDR_VAR 0 2
67651: PUSH
67652: LD_VAR 0 1
67656: PUSH
67657: LD_INT 1
67659: PLUS
67660: ST_TO_ADDR
// end ;
67661: LD_VAR 0 2
67665: RET
// export function Dec ( value ) ; begin
67666: LD_INT 0
67668: PPUSH
// result := value - 1 ;
67669: LD_ADDR_VAR 0 2
67673: PUSH
67674: LD_VAR 0 1
67678: PUSH
67679: LD_INT 1
67681: MINUS
67682: ST_TO_ADDR
// end ;
67683: LD_VAR 0 2
67687: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67688: LD_INT 0
67690: PPUSH
67691: PPUSH
67692: PPUSH
67693: PPUSH
67694: PPUSH
67695: PPUSH
67696: PPUSH
67697: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67698: LD_VAR 0 1
67702: PPUSH
67703: LD_VAR 0 2
67707: PPUSH
67708: CALL_OW 488
67712: NOT
67713: PUSH
67714: LD_VAR 0 3
67718: PPUSH
67719: LD_VAR 0 4
67723: PPUSH
67724: CALL_OW 488
67728: NOT
67729: OR
67730: IFFALSE 67743
// begin result := - 1 ;
67732: LD_ADDR_VAR 0 5
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: ST_TO_ADDR
// exit ;
67741: GO 67978
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67743: LD_ADDR_VAR 0 12
67747: PUSH
67748: LD_VAR 0 1
67752: PPUSH
67753: LD_VAR 0 2
67757: PPUSH
67758: LD_VAR 0 3
67762: PPUSH
67763: LD_VAR 0 4
67767: PPUSH
67768: CALL 66828 0 4
67772: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67773: LD_ADDR_VAR 0 11
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: LD_VAR 0 2
67787: PPUSH
67788: LD_VAR 0 12
67792: PUSH
67793: LD_INT 1
67795: ARRAY
67796: PPUSH
67797: LD_VAR 0 12
67801: PUSH
67802: LD_INT 2
67804: ARRAY
67805: PPUSH
67806: CALL_OW 298
67810: ST_TO_ADDR
// distance := 9999 ;
67811: LD_ADDR_VAR 0 10
67815: PUSH
67816: LD_INT 9999
67818: ST_TO_ADDR
// for i := 0 to 5 do
67819: LD_ADDR_VAR 0 6
67823: PUSH
67824: DOUBLE
67825: LD_INT 0
67827: DEC
67828: ST_TO_ADDR
67829: LD_INT 5
67831: PUSH
67832: FOR_TO
67833: IFFALSE 67976
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67835: LD_ADDR_VAR 0 7
67839: PUSH
67840: LD_VAR 0 1
67844: PPUSH
67845: LD_VAR 0 6
67849: PPUSH
67850: LD_VAR 0 11
67854: PPUSH
67855: CALL_OW 272
67859: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67860: LD_ADDR_VAR 0 8
67864: PUSH
67865: LD_VAR 0 2
67869: PPUSH
67870: LD_VAR 0 6
67874: PPUSH
67875: LD_VAR 0 11
67879: PPUSH
67880: CALL_OW 273
67884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67885: LD_VAR 0 7
67889: PPUSH
67890: LD_VAR 0 8
67894: PPUSH
67895: CALL_OW 488
67899: NOT
67900: IFFALSE 67904
// continue ;
67902: GO 67832
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67904: LD_ADDR_VAR 0 9
67908: PUSH
67909: LD_VAR 0 12
67913: PUSH
67914: LD_INT 1
67916: ARRAY
67917: PPUSH
67918: LD_VAR 0 12
67922: PUSH
67923: LD_INT 2
67925: ARRAY
67926: PPUSH
67927: LD_VAR 0 7
67931: PPUSH
67932: LD_VAR 0 8
67936: PPUSH
67937: CALL_OW 298
67941: ST_TO_ADDR
// if tmp < distance then
67942: LD_VAR 0 9
67946: PUSH
67947: LD_VAR 0 10
67951: LESS
67952: IFFALSE 67974
// begin result := i ;
67954: LD_ADDR_VAR 0 5
67958: PUSH
67959: LD_VAR 0 6
67963: ST_TO_ADDR
// distance := tmp ;
67964: LD_ADDR_VAR 0 10
67968: PUSH
67969: LD_VAR 0 9
67973: ST_TO_ADDR
// end ; end ;
67974: GO 67832
67976: POP
67977: POP
// end ;
67978: LD_VAR 0 5
67982: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67983: LD_INT 0
67985: PPUSH
67986: PPUSH
// if not driver or not IsInUnit ( driver ) then
67987: LD_VAR 0 1
67991: NOT
67992: PUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: CALL_OW 310
68002: NOT
68003: OR
68004: IFFALSE 68008
// exit ;
68006: GO 68098
// vehicle := IsInUnit ( driver ) ;
68008: LD_ADDR_VAR 0 3
68012: PUSH
68013: LD_VAR 0 1
68017: PPUSH
68018: CALL_OW 310
68022: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68023: LD_VAR 0 1
68027: PPUSH
68028: LD_STRING \
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: PUSH
68058: LD_STRING E
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_VAR 0 3
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PPUSH
68094: CALL_OW 446
// end ;
68098: LD_VAR 0 2
68102: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68103: LD_INT 0
68105: PPUSH
68106: PPUSH
// if not driver or not IsInUnit ( driver ) then
68107: LD_VAR 0 1
68111: NOT
68112: PUSH
68113: LD_VAR 0 1
68117: PPUSH
68118: CALL_OW 310
68122: NOT
68123: OR
68124: IFFALSE 68128
// exit ;
68126: GO 68218
// vehicle := IsInUnit ( driver ) ;
68128: LD_ADDR_VAR 0 3
68132: PUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: CALL_OW 310
68142: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_STRING \
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: PUSH
68178: LD_STRING E
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_VAR 0 3
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PPUSH
68214: CALL_OW 447
// end ;
68218: LD_VAR 0 2
68222: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68223: LD_INT 0
68225: PPUSH
68226: PPUSH
68227: PPUSH
// tmp := [ ] ;
68228: LD_ADDR_VAR 0 5
68232: PUSH
68233: EMPTY
68234: ST_TO_ADDR
// for i in units do
68235: LD_ADDR_VAR 0 4
68239: PUSH
68240: LD_VAR 0 1
68244: PUSH
68245: FOR_IN
68246: IFFALSE 68284
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68248: LD_ADDR_VAR 0 5
68252: PUSH
68253: LD_VAR 0 5
68257: PPUSH
68258: LD_VAR 0 5
68262: PUSH
68263: LD_INT 1
68265: PLUS
68266: PPUSH
68267: LD_VAR 0 4
68271: PPUSH
68272: CALL_OW 256
68276: PPUSH
68277: CALL_OW 2
68281: ST_TO_ADDR
68282: GO 68245
68284: POP
68285: POP
// if not tmp then
68286: LD_VAR 0 5
68290: NOT
68291: IFFALSE 68295
// exit ;
68293: GO 68343
// if asc then
68295: LD_VAR 0 2
68299: IFFALSE 68323
// result := SortListByListAsc ( units , tmp ) else
68301: LD_ADDR_VAR 0 3
68305: PUSH
68306: LD_VAR 0 1
68310: PPUSH
68311: LD_VAR 0 5
68315: PPUSH
68316: CALL_OW 76
68320: ST_TO_ADDR
68321: GO 68343
// result := SortListByListDesc ( units , tmp ) ;
68323: LD_ADDR_VAR 0 3
68327: PUSH
68328: LD_VAR 0 1
68332: PPUSH
68333: LD_VAR 0 5
68337: PPUSH
68338: CALL_OW 77
68342: ST_TO_ADDR
// end ;
68343: LD_VAR 0 3
68347: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
// task := GetTaskList ( mech ) ;
68352: LD_ADDR_VAR 0 4
68356: PUSH
68357: LD_VAR 0 1
68361: PPUSH
68362: CALL_OW 437
68366: ST_TO_ADDR
// if not task then
68367: LD_VAR 0 4
68371: NOT
68372: IFFALSE 68376
// exit ;
68374: GO 68418
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68376: LD_ADDR_VAR 0 3
68380: PUSH
68381: LD_VAR 0 4
68385: PUSH
68386: LD_INT 1
68388: ARRAY
68389: PUSH
68390: LD_INT 1
68392: ARRAY
68393: PUSH
68394: LD_STRING r
68396: EQUAL
68397: PUSH
68398: LD_VAR 0 4
68402: PUSH
68403: LD_INT 1
68405: ARRAY
68406: PUSH
68407: LD_INT 4
68409: ARRAY
68410: PUSH
68411: LD_VAR 0 2
68415: EQUAL
68416: AND
68417: ST_TO_ADDR
// end ;
68418: LD_VAR 0 3
68422: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68423: LD_INT 0
68425: PPUSH
// SetDir ( unit , d ) ;
68426: LD_VAR 0 1
68430: PPUSH
68431: LD_VAR 0 4
68435: PPUSH
68436: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68440: LD_VAR 0 1
68444: PPUSH
68445: LD_VAR 0 2
68449: PPUSH
68450: LD_VAR 0 3
68454: PPUSH
68455: LD_VAR 0 5
68459: PPUSH
68460: CALL_OW 48
// end ;
68464: LD_VAR 0 6
68468: RET
// export function ToNaturalNumber ( number ) ; begin
68469: LD_INT 0
68471: PPUSH
// result := number div 1 ;
68472: LD_ADDR_VAR 0 2
68476: PUSH
68477: LD_VAR 0 1
68481: PUSH
68482: LD_INT 1
68484: DIV
68485: ST_TO_ADDR
// if number < 0 then
68486: LD_VAR 0 1
68490: PUSH
68491: LD_INT 0
68493: LESS
68494: IFFALSE 68504
// result := 0 ;
68496: LD_ADDR_VAR 0 2
68500: PUSH
68501: LD_INT 0
68503: ST_TO_ADDR
// end ;
68504: LD_VAR 0 2
68508: RET
// export function SortByClass ( units , class ) ; var un ; begin
68509: LD_INT 0
68511: PPUSH
68512: PPUSH
// if not units or not class then
68513: LD_VAR 0 1
68517: NOT
68518: PUSH
68519: LD_VAR 0 2
68523: NOT
68524: OR
68525: IFFALSE 68529
// exit ;
68527: GO 68624
// result := [ ] ;
68529: LD_ADDR_VAR 0 3
68533: PUSH
68534: EMPTY
68535: ST_TO_ADDR
// for un in units do
68536: LD_ADDR_VAR 0 4
68540: PUSH
68541: LD_VAR 0 1
68545: PUSH
68546: FOR_IN
68547: IFFALSE 68622
// if GetClass ( un ) = class then
68549: LD_VAR 0 4
68553: PPUSH
68554: CALL_OW 257
68558: PUSH
68559: LD_VAR 0 2
68563: EQUAL
68564: IFFALSE 68591
// result := Insert ( result , 1 , un ) else
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 3
68575: PPUSH
68576: LD_INT 1
68578: PPUSH
68579: LD_VAR 0 4
68583: PPUSH
68584: CALL_OW 2
68588: ST_TO_ADDR
68589: GO 68620
// result := Replace ( result , result + 1 , un ) ;
68591: LD_ADDR_VAR 0 3
68595: PUSH
68596: LD_VAR 0 3
68600: PPUSH
68601: LD_VAR 0 3
68605: PUSH
68606: LD_INT 1
68608: PLUS
68609: PPUSH
68610: LD_VAR 0 4
68614: PPUSH
68615: CALL_OW 1
68619: ST_TO_ADDR
68620: GO 68546
68622: POP
68623: POP
// end ;
68624: LD_VAR 0 3
68628: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68629: LD_INT 0
68631: PPUSH
68632: PPUSH
68633: PPUSH
68634: PPUSH
68635: PPUSH
68636: PPUSH
68637: PPUSH
// result := [ ] ;
68638: LD_ADDR_VAR 0 4
68642: PUSH
68643: EMPTY
68644: ST_TO_ADDR
// if x - r < 0 then
68645: LD_VAR 0 1
68649: PUSH
68650: LD_VAR 0 3
68654: MINUS
68655: PUSH
68656: LD_INT 0
68658: LESS
68659: IFFALSE 68671
// min_x := 0 else
68661: LD_ADDR_VAR 0 8
68665: PUSH
68666: LD_INT 0
68668: ST_TO_ADDR
68669: GO 68687
// min_x := x - r ;
68671: LD_ADDR_VAR 0 8
68675: PUSH
68676: LD_VAR 0 1
68680: PUSH
68681: LD_VAR 0 3
68685: MINUS
68686: ST_TO_ADDR
// if y - r < 0 then
68687: LD_VAR 0 2
68691: PUSH
68692: LD_VAR 0 3
68696: MINUS
68697: PUSH
68698: LD_INT 0
68700: LESS
68701: IFFALSE 68713
// min_y := 0 else
68703: LD_ADDR_VAR 0 7
68707: PUSH
68708: LD_INT 0
68710: ST_TO_ADDR
68711: GO 68729
// min_y := y - r ;
68713: LD_ADDR_VAR 0 7
68717: PUSH
68718: LD_VAR 0 2
68722: PUSH
68723: LD_VAR 0 3
68727: MINUS
68728: ST_TO_ADDR
// max_x := x + r ;
68729: LD_ADDR_VAR 0 9
68733: PUSH
68734: LD_VAR 0 1
68738: PUSH
68739: LD_VAR 0 3
68743: PLUS
68744: ST_TO_ADDR
// max_y := y + r ;
68745: LD_ADDR_VAR 0 10
68749: PUSH
68750: LD_VAR 0 2
68754: PUSH
68755: LD_VAR 0 3
68759: PLUS
68760: ST_TO_ADDR
// for _x = min_x to max_x do
68761: LD_ADDR_VAR 0 5
68765: PUSH
68766: DOUBLE
68767: LD_VAR 0 8
68771: DEC
68772: ST_TO_ADDR
68773: LD_VAR 0 9
68777: PUSH
68778: FOR_TO
68779: IFFALSE 68880
// for _y = min_y to max_y do
68781: LD_ADDR_VAR 0 6
68785: PUSH
68786: DOUBLE
68787: LD_VAR 0 7
68791: DEC
68792: ST_TO_ADDR
68793: LD_VAR 0 10
68797: PUSH
68798: FOR_TO
68799: IFFALSE 68876
// begin if not ValidHex ( _x , _y ) then
68801: LD_VAR 0 5
68805: PPUSH
68806: LD_VAR 0 6
68810: PPUSH
68811: CALL_OW 488
68815: NOT
68816: IFFALSE 68820
// continue ;
68818: GO 68798
// if GetResourceTypeXY ( _x , _y ) then
68820: LD_VAR 0 5
68824: PPUSH
68825: LD_VAR 0 6
68829: PPUSH
68830: CALL_OW 283
68834: IFFALSE 68874
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68836: LD_ADDR_VAR 0 4
68840: PUSH
68841: LD_VAR 0 4
68845: PPUSH
68846: LD_VAR 0 4
68850: PUSH
68851: LD_INT 1
68853: PLUS
68854: PPUSH
68855: LD_VAR 0 5
68859: PUSH
68860: LD_VAR 0 6
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PPUSH
68869: CALL_OW 1
68873: ST_TO_ADDR
// end ;
68874: GO 68798
68876: POP
68877: POP
68878: GO 68778
68880: POP
68881: POP
// end ;
68882: LD_VAR 0 4
68886: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68887: LD_INT 0
68889: PPUSH
68890: PPUSH
68891: PPUSH
68892: PPUSH
68893: PPUSH
68894: PPUSH
68895: PPUSH
68896: PPUSH
// if not units then
68897: LD_VAR 0 1
68901: NOT
68902: IFFALSE 68906
// exit ;
68904: GO 69430
// result := UnitFilter ( units , [ f_ok ] ) ;
68906: LD_ADDR_VAR 0 3
68910: PUSH
68911: LD_VAR 0 1
68915: PPUSH
68916: LD_INT 50
68918: PUSH
68919: EMPTY
68920: LIST
68921: PPUSH
68922: CALL_OW 72
68926: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68927: LD_ADDR_VAR 0 8
68931: PUSH
68932: LD_VAR 0 1
68936: PUSH
68937: LD_INT 1
68939: ARRAY
68940: PPUSH
68941: CALL_OW 255
68945: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68946: LD_ADDR_VAR 0 10
68950: PUSH
68951: LD_INT 29
68953: PUSH
68954: LD_INT 91
68956: PUSH
68957: LD_INT 49
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: ST_TO_ADDR
// if not result then
68965: LD_VAR 0 3
68969: NOT
68970: IFFALSE 68974
// exit ;
68972: GO 69430
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68974: LD_ADDR_VAR 0 5
68978: PUSH
68979: LD_INT 81
68981: PUSH
68982: LD_VAR 0 8
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PPUSH
68991: CALL_OW 69
68995: ST_TO_ADDR
// for i in result do
68996: LD_ADDR_VAR 0 4
69000: PUSH
69001: LD_VAR 0 3
69005: PUSH
69006: FOR_IN
69007: IFFALSE 69428
// begin tag := GetTag ( i ) + 1 ;
69009: LD_ADDR_VAR 0 9
69013: PUSH
69014: LD_VAR 0 4
69018: PPUSH
69019: CALL_OW 110
69023: PUSH
69024: LD_INT 1
69026: PLUS
69027: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69028: LD_ADDR_VAR 0 7
69032: PUSH
69033: LD_VAR 0 4
69037: PPUSH
69038: CALL_OW 250
69042: PPUSH
69043: LD_VAR 0 4
69047: PPUSH
69048: CALL_OW 251
69052: PPUSH
69053: LD_INT 6
69055: PPUSH
69056: CALL 68629 0 3
69060: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69061: LD_VAR 0 4
69065: PPUSH
69066: CALL_OW 247
69070: PUSH
69071: LD_INT 2
69073: EQUAL
69074: PUSH
69075: LD_VAR 0 7
69079: AND
69080: PUSH
69081: LD_VAR 0 4
69085: PPUSH
69086: CALL_OW 264
69090: PUSH
69091: LD_VAR 0 10
69095: IN
69096: NOT
69097: AND
69098: IFFALSE 69137
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69100: LD_VAR 0 4
69104: PPUSH
69105: LD_VAR 0 7
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: PUSH
69114: LD_INT 1
69116: ARRAY
69117: PPUSH
69118: LD_VAR 0 7
69122: PUSH
69123: LD_INT 1
69125: ARRAY
69126: PUSH
69127: LD_INT 2
69129: ARRAY
69130: PPUSH
69131: CALL_OW 116
69135: GO 69426
// if path > tag then
69137: LD_VAR 0 2
69141: PUSH
69142: LD_VAR 0 9
69146: GREATER
69147: IFFALSE 69355
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69149: LD_ADDR_VAR 0 6
69153: PUSH
69154: LD_VAR 0 5
69158: PPUSH
69159: LD_INT 91
69161: PUSH
69162: LD_VAR 0 4
69166: PUSH
69167: LD_INT 8
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: PPUSH
69175: CALL_OW 72
69179: ST_TO_ADDR
// if nearEnemy then
69180: LD_VAR 0 6
69184: IFFALSE 69253
// begin if GetWeapon ( i ) = ru_time_lapser then
69186: LD_VAR 0 4
69190: PPUSH
69191: CALL_OW 264
69195: PUSH
69196: LD_INT 49
69198: EQUAL
69199: IFFALSE 69227
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69201: LD_VAR 0 4
69205: PPUSH
69206: LD_VAR 0 6
69210: PPUSH
69211: LD_VAR 0 4
69215: PPUSH
69216: CALL_OW 74
69220: PPUSH
69221: CALL_OW 112
69225: GO 69251
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69227: LD_VAR 0 4
69231: PPUSH
69232: LD_VAR 0 6
69236: PPUSH
69237: LD_VAR 0 4
69241: PPUSH
69242: CALL_OW 74
69246: PPUSH
69247: CALL_OW 115
// end else
69251: GO 69353
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69253: LD_VAR 0 4
69257: PPUSH
69258: LD_VAR 0 2
69262: PUSH
69263: LD_VAR 0 9
69267: ARRAY
69268: PUSH
69269: LD_INT 1
69271: ARRAY
69272: PPUSH
69273: LD_VAR 0 2
69277: PUSH
69278: LD_VAR 0 9
69282: ARRAY
69283: PUSH
69284: LD_INT 2
69286: ARRAY
69287: PPUSH
69288: CALL_OW 297
69292: PUSH
69293: LD_INT 6
69295: GREATER
69296: IFFALSE 69339
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69298: LD_VAR 0 4
69302: PPUSH
69303: LD_VAR 0 2
69307: PUSH
69308: LD_VAR 0 9
69312: ARRAY
69313: PUSH
69314: LD_INT 1
69316: ARRAY
69317: PPUSH
69318: LD_VAR 0 2
69322: PUSH
69323: LD_VAR 0 9
69327: ARRAY
69328: PUSH
69329: LD_INT 2
69331: ARRAY
69332: PPUSH
69333: CALL_OW 114
69337: GO 69353
// SetTag ( i , tag ) ;
69339: LD_VAR 0 4
69343: PPUSH
69344: LD_VAR 0 9
69348: PPUSH
69349: CALL_OW 109
// end else
69353: GO 69426
// if enemy then
69355: LD_VAR 0 5
69359: IFFALSE 69426
// begin if GetWeapon ( i ) = ru_time_lapser then
69361: LD_VAR 0 4
69365: PPUSH
69366: CALL_OW 264
69370: PUSH
69371: LD_INT 49
69373: EQUAL
69374: IFFALSE 69402
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69376: LD_VAR 0 4
69380: PPUSH
69381: LD_VAR 0 5
69385: PPUSH
69386: LD_VAR 0 4
69390: PPUSH
69391: CALL_OW 74
69395: PPUSH
69396: CALL_OW 112
69400: GO 69426
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69402: LD_VAR 0 4
69406: PPUSH
69407: LD_VAR 0 5
69411: PPUSH
69412: LD_VAR 0 4
69416: PPUSH
69417: CALL_OW 74
69421: PPUSH
69422: CALL_OW 115
// end ; end ;
69426: GO 69006
69428: POP
69429: POP
// end ;
69430: LD_VAR 0 3
69434: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69435: LD_INT 0
69437: PPUSH
69438: PPUSH
69439: PPUSH
// if not unit or IsInUnit ( unit ) then
69440: LD_VAR 0 1
69444: NOT
69445: PUSH
69446: LD_VAR 0 1
69450: PPUSH
69451: CALL_OW 310
69455: OR
69456: IFFALSE 69460
// exit ;
69458: GO 69551
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69460: LD_ADDR_VAR 0 4
69464: PUSH
69465: LD_VAR 0 1
69469: PPUSH
69470: CALL_OW 250
69474: PPUSH
69475: LD_VAR 0 2
69479: PPUSH
69480: LD_INT 1
69482: PPUSH
69483: CALL_OW 272
69487: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69488: LD_ADDR_VAR 0 5
69492: PUSH
69493: LD_VAR 0 1
69497: PPUSH
69498: CALL_OW 251
69502: PPUSH
69503: LD_VAR 0 2
69507: PPUSH
69508: LD_INT 1
69510: PPUSH
69511: CALL_OW 273
69515: ST_TO_ADDR
// if ValidHex ( x , y ) then
69516: LD_VAR 0 4
69520: PPUSH
69521: LD_VAR 0 5
69525: PPUSH
69526: CALL_OW 488
69530: IFFALSE 69551
// ComTurnXY ( unit , x , y ) ;
69532: LD_VAR 0 1
69536: PPUSH
69537: LD_VAR 0 4
69541: PPUSH
69542: LD_VAR 0 5
69546: PPUSH
69547: CALL_OW 118
// end ;
69551: LD_VAR 0 3
69555: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69556: LD_INT 0
69558: PPUSH
69559: PPUSH
// result := false ;
69560: LD_ADDR_VAR 0 3
69564: PUSH
69565: LD_INT 0
69567: ST_TO_ADDR
// if not units then
69568: LD_VAR 0 2
69572: NOT
69573: IFFALSE 69577
// exit ;
69575: GO 69622
// for i in units do
69577: LD_ADDR_VAR 0 4
69581: PUSH
69582: LD_VAR 0 2
69586: PUSH
69587: FOR_IN
69588: IFFALSE 69620
// if See ( side , i ) then
69590: LD_VAR 0 1
69594: PPUSH
69595: LD_VAR 0 4
69599: PPUSH
69600: CALL_OW 292
69604: IFFALSE 69618
// begin result := true ;
69606: LD_ADDR_VAR 0 3
69610: PUSH
69611: LD_INT 1
69613: ST_TO_ADDR
// exit ;
69614: POP
69615: POP
69616: GO 69622
// end ;
69618: GO 69587
69620: POP
69621: POP
// end ;
69622: LD_VAR 0 3
69626: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69627: LD_INT 0
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
// if not unit or not points then
69633: LD_VAR 0 1
69637: NOT
69638: PUSH
69639: LD_VAR 0 2
69643: NOT
69644: OR
69645: IFFALSE 69649
// exit ;
69647: GO 69739
// dist := 99999 ;
69649: LD_ADDR_VAR 0 5
69653: PUSH
69654: LD_INT 99999
69656: ST_TO_ADDR
// for i in points do
69657: LD_ADDR_VAR 0 4
69661: PUSH
69662: LD_VAR 0 2
69666: PUSH
69667: FOR_IN
69668: IFFALSE 69737
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69670: LD_ADDR_VAR 0 6
69674: PUSH
69675: LD_VAR 0 1
69679: PPUSH
69680: LD_VAR 0 4
69684: PUSH
69685: LD_INT 1
69687: ARRAY
69688: PPUSH
69689: LD_VAR 0 4
69693: PUSH
69694: LD_INT 2
69696: ARRAY
69697: PPUSH
69698: CALL_OW 297
69702: ST_TO_ADDR
// if tmpDist < dist then
69703: LD_VAR 0 6
69707: PUSH
69708: LD_VAR 0 5
69712: LESS
69713: IFFALSE 69735
// begin result := i ;
69715: LD_ADDR_VAR 0 3
69719: PUSH
69720: LD_VAR 0 4
69724: ST_TO_ADDR
// dist := tmpDist ;
69725: LD_ADDR_VAR 0 5
69729: PUSH
69730: LD_VAR 0 6
69734: ST_TO_ADDR
// end ; end ;
69735: GO 69667
69737: POP
69738: POP
// end ;
69739: LD_VAR 0 3
69743: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69744: LD_INT 0
69746: PPUSH
// uc_side := side ;
69747: LD_ADDR_OWVAR 20
69751: PUSH
69752: LD_VAR 0 1
69756: ST_TO_ADDR
// uc_nation := 3 ;
69757: LD_ADDR_OWVAR 21
69761: PUSH
69762: LD_INT 3
69764: ST_TO_ADDR
// vc_chassis := 25 ;
69765: LD_ADDR_OWVAR 37
69769: PUSH
69770: LD_INT 25
69772: ST_TO_ADDR
// vc_engine := engine_siberite ;
69773: LD_ADDR_OWVAR 39
69777: PUSH
69778: LD_INT 3
69780: ST_TO_ADDR
// vc_control := control_computer ;
69781: LD_ADDR_OWVAR 38
69785: PUSH
69786: LD_INT 3
69788: ST_TO_ADDR
// vc_weapon := 59 ;
69789: LD_ADDR_OWVAR 40
69793: PUSH
69794: LD_INT 59
69796: ST_TO_ADDR
// result := CreateVehicle ;
69797: LD_ADDR_VAR 0 5
69801: PUSH
69802: CALL_OW 45
69806: ST_TO_ADDR
// SetDir ( result , d ) ;
69807: LD_VAR 0 5
69811: PPUSH
69812: LD_VAR 0 4
69816: PPUSH
69817: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69821: LD_VAR 0 5
69825: PPUSH
69826: LD_VAR 0 2
69830: PPUSH
69831: LD_VAR 0 3
69835: PPUSH
69836: LD_INT 0
69838: PPUSH
69839: CALL_OW 48
// end ;
69843: LD_VAR 0 5
69847: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69848: LD_INT 0
69850: PPUSH
69851: PPUSH
69852: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69853: LD_ADDR_VAR 0 2
69857: PUSH
69858: LD_INT 0
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69876: LD_VAR 0 1
69880: NOT
69881: PUSH
69882: LD_VAR 0 1
69886: PPUSH
69887: CALL_OW 264
69891: PUSH
69892: LD_INT 12
69894: PUSH
69895: LD_INT 51
69897: PUSH
69898: LD_INT 32
69900: PUSH
69901: LD_INT 89
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: IN
69910: NOT
69911: OR
69912: IFFALSE 69916
// exit ;
69914: GO 70014
// for i := 1 to 3 do
69916: LD_ADDR_VAR 0 3
69920: PUSH
69921: DOUBLE
69922: LD_INT 1
69924: DEC
69925: ST_TO_ADDR
69926: LD_INT 3
69928: PUSH
69929: FOR_TO
69930: IFFALSE 70012
// begin tmp := GetCargo ( cargo , i ) ;
69932: LD_ADDR_VAR 0 4
69936: PUSH
69937: LD_VAR 0 1
69941: PPUSH
69942: LD_VAR 0 3
69946: PPUSH
69947: CALL_OW 289
69951: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69952: LD_ADDR_VAR 0 2
69956: PUSH
69957: LD_VAR 0 2
69961: PPUSH
69962: LD_VAR 0 3
69966: PPUSH
69967: LD_VAR 0 4
69971: PPUSH
69972: CALL_OW 1
69976: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69977: LD_ADDR_VAR 0 2
69981: PUSH
69982: LD_VAR 0 2
69986: PPUSH
69987: LD_INT 4
69989: PPUSH
69990: LD_VAR 0 2
69994: PUSH
69995: LD_INT 4
69997: ARRAY
69998: PUSH
69999: LD_VAR 0 4
70003: PLUS
70004: PPUSH
70005: CALL_OW 1
70009: ST_TO_ADDR
// end ;
70010: GO 69929
70012: POP
70013: POP
// end ;
70014: LD_VAR 0 2
70018: RET
// export function Length ( array ) ; begin
70019: LD_INT 0
70021: PPUSH
// result := array + 0 ;
70022: LD_ADDR_VAR 0 2
70026: PUSH
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 0
70034: PLUS
70035: ST_TO_ADDR
// end ;
70036: LD_VAR 0 2
70040: RET
// export function PrepareArray ( array ) ; begin
70041: LD_INT 0
70043: PPUSH
// result := array diff 0 ;
70044: LD_ADDR_VAR 0 2
70048: PUSH
70049: LD_VAR 0 1
70053: PUSH
70054: LD_INT 0
70056: DIFF
70057: ST_TO_ADDR
// if not result [ 1 ] then
70058: LD_VAR 0 2
70062: PUSH
70063: LD_INT 1
70065: ARRAY
70066: NOT
70067: IFFALSE 70087
// result := Delete ( result , 1 ) ;
70069: LD_ADDR_VAR 0 2
70073: PUSH
70074: LD_VAR 0 2
70078: PPUSH
70079: LD_INT 1
70081: PPUSH
70082: CALL_OW 3
70086: ST_TO_ADDR
// end ;
70087: LD_VAR 0 2
70091: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70092: LD_INT 0
70094: PPUSH
70095: PPUSH
70096: PPUSH
70097: PPUSH
// sibRocketRange := 25 ;
70098: LD_ADDR_VAR 0 6
70102: PUSH
70103: LD_INT 25
70105: ST_TO_ADDR
// result := false ;
70106: LD_ADDR_VAR 0 4
70110: PUSH
70111: LD_INT 0
70113: ST_TO_ADDR
// for i := 0 to 5 do
70114: LD_ADDR_VAR 0 5
70118: PUSH
70119: DOUBLE
70120: LD_INT 0
70122: DEC
70123: ST_TO_ADDR
70124: LD_INT 5
70126: PUSH
70127: FOR_TO
70128: IFFALSE 70195
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70130: LD_VAR 0 1
70134: PPUSH
70135: LD_VAR 0 5
70139: PPUSH
70140: LD_VAR 0 6
70144: PPUSH
70145: CALL_OW 272
70149: PPUSH
70150: LD_VAR 0 2
70154: PPUSH
70155: LD_VAR 0 5
70159: PPUSH
70160: LD_VAR 0 6
70164: PPUSH
70165: CALL_OW 273
70169: PPUSH
70170: LD_VAR 0 3
70174: PPUSH
70175: CALL_OW 309
70179: IFFALSE 70193
// begin result := true ;
70181: LD_ADDR_VAR 0 4
70185: PUSH
70186: LD_INT 1
70188: ST_TO_ADDR
// exit ;
70189: POP
70190: POP
70191: GO 70197
// end ;
70193: GO 70127
70195: POP
70196: POP
// end ;
70197: LD_VAR 0 4
70201: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70202: LD_INT 0
70204: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70205: LD_VAR 0 1
70209: PPUSH
70210: LD_VAR 0 2
70214: PPUSH
70215: LD_INT 0
70217: PPUSH
70218: LD_INT 0
70220: PPUSH
70221: LD_INT 1
70223: PPUSH
70224: LD_INT 0
70226: PPUSH
70227: CALL_OW 587
// end ; end_of_file
70231: LD_VAR 0 3
70235: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70236: LD_VAR 0 1
70240: PUSH
70241: LD_INT 200
70243: DOUBLE
70244: GREATEREQUAL
70245: IFFALSE 70253
70247: LD_INT 299
70249: DOUBLE
70250: LESSEQUAL
70251: IFTRUE 70255
70253: GO 70287
70255: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70256: LD_VAR 0 1
70260: PPUSH
70261: LD_VAR 0 2
70265: PPUSH
70266: LD_VAR 0 3
70270: PPUSH
70271: LD_VAR 0 4
70275: PPUSH
70276: LD_VAR 0 5
70280: PPUSH
70281: CALL 24902 0 5
70285: GO 70364
70287: LD_INT 300
70289: DOUBLE
70290: GREATEREQUAL
70291: IFFALSE 70299
70293: LD_INT 399
70295: DOUBLE
70296: LESSEQUAL
70297: IFTRUE 70301
70299: GO 70363
70301: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70302: LD_VAR 0 1
70306: PPUSH
70307: LD_VAR 0 2
70311: PPUSH
70312: LD_VAR 0 3
70316: PPUSH
70317: LD_VAR 0 4
70321: PPUSH
70322: LD_VAR 0 5
70326: PPUSH
70327: LD_VAR 0 6
70331: PPUSH
70332: LD_VAR 0 7
70336: PPUSH
70337: LD_VAR 0 8
70341: PPUSH
70342: LD_VAR 0 9
70346: PPUSH
70347: LD_VAR 0 10
70351: PPUSH
70352: LD_VAR 0 11
70356: PPUSH
70357: CALL 21235 0 11
70361: GO 70364
70363: POP
// end ;
70364: PPOPN 11
70366: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70367: LD_VAR 0 1
70371: PPUSH
70372: LD_VAR 0 2
70376: PPUSH
70377: LD_VAR 0 3
70381: PPUSH
70382: LD_VAR 0 4
70386: PPUSH
70387: LD_VAR 0 5
70391: PPUSH
70392: CALL 24638 0 5
// end ; end_of_file
70396: PPOPN 5
70398: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70399: LD_VAR 0 1
70403: PPUSH
70404: LD_VAR 0 2
70408: PPUSH
70409: LD_VAR 0 3
70413: PPUSH
70414: LD_VAR 0 4
70418: PPUSH
70419: LD_VAR 0 5
70423: PPUSH
70424: LD_VAR 0 6
70428: PPUSH
70429: CALL 8855 0 6
// end ;
70433: PPOPN 6
70435: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70436: LD_INT 0
70438: PPUSH
// begin if not units then
70439: LD_VAR 0 1
70443: NOT
70444: IFFALSE 70448
// exit ;
70446: GO 70448
// end ;
70448: PPOPN 7
70450: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70451: CALL 8749 0 0
// end ;
70455: PPOPN 1
70457: END
