// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 79 0 0
// InitRestrictions ;
  19: CALL 207 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 288 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 595 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: LIST
  59: PUSH
  60: LD_OWVAR 67
  64: ARRAY
  65: PPUSH
  66: CALL 595 0 2
// PrepareAmericans ;
  70: CALL 1194 0 0
// Action ;
  74: CALL 2130 0 0
// end ;
  78: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := 1 ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// mission_prefix := 05_ ;
  90: LD_ADDR_EXP 2
  94: PUSH
  95: LD_STRING 05_
  97: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
  98: LD_ADDR_EXP 3
 102: PUSH
 103: LD_STRING 05a_
 105: ST_TO_ADDR
// deltaBuilded := false ;
 106: LD_ADDR_EXP 4
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// denisArrives := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// radar_allowed := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// first_apeman_tamed := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// arab_spotted := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// end_mission := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// apeman_army := false ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// radar_researched := false ;
 162: LD_ADDR_EXP 10
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_builded := false ;
 170: LD_ADDR_EXP 11
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// apeman_counter := 0 ;
 178: LD_ADDR_EXP 12
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// Delta := 0 ;
 186: LD_ADDR_EXP 6
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// apeKillCounter := 0 ;
 194: LD_ADDR_EXP 15
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// end ;
 202: LD_VAR 0 1
 206: RET
// function InitRestrictions ; begin
 207: LD_INT 0
 209: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 210: LD_INT 7
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 223: LD_INT 8
 225: PPUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 236: LD_INT 10
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 249: LD_INT 69
 251: PPUSH
 252: LD_INT 1
 254: PPUSH
 255: LD_STRING GatlingInGamma
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 30
 265: PPUSH
 266: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 270: LD_INT 51
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 1
 278: PPUSH
 279: CALL_OW 322
// end ;
 283: LD_VAR 0 1
 287: RET
// function DebugMode ; begin
 288: LD_INT 0
 290: PPUSH
// FogOff ( 1 ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// Difficulty := 2 ;
 298: LD_ADDR_OWVAR 67
 302: PUSH
 303: LD_INT 2
 305: ST_TO_ADDR
// end ;
 306: LD_VAR 0 1
 310: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 23
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: LD_INT 7
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_TAME ) ;
 348: LD_STRING ACH_TAME
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 35
 368: PUSH
 369: LD_INT 11
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 34
 397: PUSH
 398: LD_INT 11
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PPUSH
 409: CALL_OW 69
 413: AND
 414: IFFALSE 426
 416: GO 418
 418: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 419: LD_STRING ACH_RADAR
 421: PPUSH
 422: CALL_OW 543
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 5
 679: NEG
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
// if not unit then
 737: LD_VAR 0 1
 741: NOT
 742: IFFALSE 746
// exit ;
 744: GO 1189
// if IsInUnit ( unit ) then
 746: LD_VAR 0 1
 750: PPUSH
 751: CALL_OW 310
 755: IFFALSE 772
// unit := IsDrivenBy ( unit ) ;
 757: LD_ADDR_VAR 0 1
 761: PUSH
 762: LD_VAR 0 1
 766: PPUSH
 767: CALL_OW 311
 771: ST_TO_ADDR
// targets_list := [ ] ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: EMPTY
 778: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 250
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 3
 801: PUSH
 802: LD_INT 34
 804: PUSH
 805: LD_INT 12
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 21
 818: PUSH
 819: LD_INT 2
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: EMPTY
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 72
 842: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 843: LD_VAR 0 4
 847: PPUSH
 848: LD_VAR 0 1
 852: PPUSH
 853: CALL_OW 74
 857: PPUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 296
 867: PUSH
 868: LD_INT 11
 870: LESS
 871: PUSH
 872: LD_VAR 0 1
 876: PPUSH
 877: CALL_OW 310
 881: NOT
 882: AND
 883: IFFALSE 911
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: CALL_OW 74
 904: PPUSH
 905: CALL_OW 120
// exit ;
 909: GO 1189
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 911: LD_ADDR_VAR 0 5
 915: PUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: LD_INT 21
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: LD_INT 54
 936: PUSH
 937: EMPTY
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 72
 952: PUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PPUSH
 968: CALL_OW 72
 972: PUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 21
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: LD_INT 58
 993: PUSH
 994: EMPTY
 995: LIST
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PPUSH
1005: CALL_OW 72
1009: PUSH
1010: LD_VAR 0 2
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: ST_TO_ADDR
// for target in targets_list do
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_VAR 0 5
1030: PUSH
1031: FOR_IN
1032: IFFALSE 1187
// begin if target then
1034: LD_VAR 0 4
1038: IFFALSE 1185
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 110
1049: PUSH
1050: LD_INT 11
1052: EQUAL
1053: PUSH
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL_OW 74
1068: PPUSH
1069: CALL_OW 247
1073: PUSH
1074: LD_INT 3
1076: EQUAL
1077: PUSH
1078: LD_VAR 0 4
1082: PPUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 74
1092: PPUSH
1093: CALL_OW 264
1097: PUSH
1098: LD_INT 12
1100: EQUAL
1101: OR
1102: AND
1103: IFFALSE 1149
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1105: LD_VAR 0 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_VAR 0 1
1125: PPUSH
1126: CALL_OW 74
1130: PPUSH
1131: CALL_OW 132
// SetTag ( unit , 0 ) ;
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 109
// end else
1147: GO 1185
// if not HasTask ( unit ) then
1149: LD_VAR 0 1
1153: PPUSH
1154: CALL_OW 314
1158: NOT
1159: IFFALSE 1185
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 74
1180: PPUSH
1181: CALL_OW 115
// end ;
1185: GO 1031
1187: POP
1188: POP
// end ; end_of_file
1189: LD_VAR 0 3
1193: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
// uc_nation := 1 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// uc_side := 4 ;
1209: LD_ADDR_OWVAR 20
1213: PUSH
1214: LD_INT 4
1216: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1217: LD_ADDR_EXP 19
1221: PUSH
1222: LD_STRING Denis
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_STRING 
1230: PPUSH
1231: CALL 22450 0 3
1235: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1236: LD_ADDR_EXP 18
1240: PUSH
1241: LD_STRING Harisson
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: LD_STRING 
1249: PPUSH
1250: CALL 22450 0 3
1254: ST_TO_ADDR
// uc_side := 1 ;
1255: LD_ADDR_OWVAR 20
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1263: LD_ADDR_EXP 16
1267: PUSH
1268: LD_STRING JMM
1270: PPUSH
1271: LD_EXP 1
1275: NOT
1276: PPUSH
1277: LD_EXP 3
1281: PPUSH
1282: CALL 22450 0 3
1286: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1287: LD_ADDR_EXP 17
1291: PUSH
1292: LD_STRING Gladstone
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: LD_EXP 3
1302: PPUSH
1303: CALL 22450 0 3
1307: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1308: LD_STRING BrownInDelta
1310: PPUSH
1311: LD_EXP 1
1315: PPUSH
1316: CALL_OW 30
1320: IFFALSE 1362
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1322: LD_ADDR_EXP 20
1326: PUSH
1327: LD_STRING Brown
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 3
1340: PPUSH
1341: CALL 22450 0 3
1345: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1346: LD_ADDR_VAR 0 5
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_EXP 20
1360: ADD
1361: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1362: LD_STRING DonaldsonInDelta
1364: PPUSH
1365: LD_EXP 1
1369: PPUSH
1370: CALL_OW 30
1374: IFFALSE 1416
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1376: LD_ADDR_EXP 21
1380: PUSH
1381: LD_STRING Donaldson
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_EXP 3
1394: PPUSH
1395: CALL 22450 0 3
1399: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1400: LD_ADDR_VAR 0 5
1404: PUSH
1405: LD_VAR 0 5
1409: PUSH
1410: LD_EXP 21
1414: ADD
1415: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1416: LD_STRING LisaInDelta
1418: PPUSH
1419: LD_EXP 1
1423: PPUSH
1424: CALL_OW 30
1428: IFFALSE 1470
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1430: LD_ADDR_EXP 22
1434: PUSH
1435: LD_STRING Lisa
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 3
1448: PPUSH
1449: CALL 22450 0 3
1453: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1454: LD_ADDR_VAR 0 5
1458: PUSH
1459: LD_VAR 0 5
1463: PUSH
1464: LD_EXP 22
1468: ADD
1469: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1470: LD_STRING FrankInDelta
1472: PPUSH
1473: LD_EXP 1
1477: PPUSH
1478: CALL_OW 30
1482: IFFALSE 1524
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1484: LD_ADDR_EXP 23
1488: PUSH
1489: LD_STRING Frank
1491: PPUSH
1492: LD_EXP 1
1496: NOT
1497: PPUSH
1498: LD_EXP 3
1502: PPUSH
1503: CALL 22450 0 3
1507: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_EXP 23
1522: ADD
1523: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1524: LD_STRING BobbyInDelta
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 30
1534: IFFALSE 1576
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1536: LD_ADDR_EXP 24
1540: PUSH
1541: LD_STRING Bobby
1543: PPUSH
1544: LD_EXP 1
1548: NOT
1549: PPUSH
1550: LD_EXP 3
1554: PPUSH
1555: CALL 22450 0 3
1559: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1560: LD_ADDR_VAR 0 5
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_EXP 24
1574: ADD
1575: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1576: LD_STRING CyrusInDelta
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 30
1586: IFFALSE 1628
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1588: LD_ADDR_EXP 25
1592: PUSH
1593: LD_STRING Cyrus
1595: PPUSH
1596: LD_EXP 1
1600: NOT
1601: PPUSH
1602: LD_EXP 3
1606: PPUSH
1607: CALL 22450 0 3
1611: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1612: LD_ADDR_VAR 0 5
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_EXP 25
1626: ADD
1627: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1628: LD_ADDR_EXP 26
1632: PUSH
1633: LD_STRING othersDelta
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// if not others and debug then
1641: LD_EXP 26
1645: NOT
1646: PUSH
1647: LD_EXP 1
1651: AND
1652: IFFALSE 1717
// begin InitHc ;
1654: CALL_OW 19
// for i = 1 to 2 do
1658: LD_ADDR_VAR 0 2
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1715
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1674: LD_INT 0
1676: PPUSH
1677: LD_VAR 0 2
1681: PUSH
1682: LD_INT 4
1684: MOD
1685: PUSH
1686: LD_INT 1
1688: PLUS
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: CALL_OW 380
// others := others ^ CreateHuman ;
1697: LD_ADDR_EXP 26
1701: PUSH
1702: LD_EXP 26
1706: PUSH
1707: CALL_OW 44
1711: ADD
1712: ST_TO_ADDR
// end ;
1713: GO 1671
1715: POP
1716: POP
// end ; if others then
1717: LD_EXP 26
1721: IFFALSE 1739
// tmp := tmp ^ others ;
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 5
1732: PUSH
1733: LD_EXP 26
1737: ADD
1738: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1739: LD_ADDR_VAR 0 3
1743: PUSH
1744: LD_INT 28
1746: PUSH
1747: LD_INT 49
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 33
1756: PUSH
1757: LD_INT 54
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 56
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 12
1801: PPUSH
1802: LD_INT 80
1804: PPUSH
1805: CALL 427 0 7
1809: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1822: LD_VAR 0 4
1826: PPUSH
1827: LD_VAR 0 3
1831: PUSH
1832: LD_INT 1
1834: ARRAY
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PPUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PUSH
1849: LD_INT 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: LD_INT 100
1870: PPUSH
1871: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1875: LD_EXP 26
1879: PUSH
1880: LD_INT 1
1882: ARRAY
1883: PPUSH
1884: LD_VAR 0 4
1888: PPUSH
1889: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: LD_INT 80
1918: PPUSH
1919: CALL 427 0 7
1923: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1924: LD_VAR 0 4
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PUSH
1950: LD_INT 1
1952: ARRAY
1953: PPUSH
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 2
1961: ARRAY
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1974: LD_EXP 17
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1988: LD_ADDR_VAR 0 4
1992: PUSH
1993: LD_INT 1
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: LD_INT 80
2013: PPUSH
2014: CALL 427 0 7
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 3
2056: ARRAY
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2069: LD_EXP 16
2073: PPUSH
2074: LD_VAR 0 4
2078: PPUSH
2079: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: LD_VAR 0 5
2092: PUSH
2093: LD_EXP 26
2097: PUSH
2098: LD_INT 1
2100: ARRAY
2101: DIFF
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2123
// PlaceUnitArea ( i , startArea , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 5
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
2121: GO 2103
2123: POP
2124: POP
// end ; end_of_file
2125: LD_VAR 0 1
2129: RET
// export function Action ; var m ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
// InGameOn ;
2134: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2138: LD_INT 28
2140: PPUSH
2141: LD_INT 51
2143: PPUSH
2144: CALL_OW 86
// Wait ( 3 ) ;
2148: LD_INT 3
2150: PPUSH
2151: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2155: LD_EXP 16
2159: PPUSH
2160: LD_STRING D1d-JMM-1a
2162: PPUSH
2163: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2167: LD_EXP 18
2171: PPUSH
2172: LD_STRING D1d-Har-1
2174: PPUSH
2175: CALL_OW 94
// InGameOff ;
2179: CALL_OW 9
// SaveForQuickRestart ;
2183: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2187: LD_STRING M1
2189: PPUSH
2190: CALL_OW 337
// Wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2201: LD_EXP 16
2205: PPUSH
2206: LD_STRING D2-JMM-1
2208: PPUSH
2209: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2213: LD_EXP 17
2217: PPUSH
2218: LD_STRING D2-Glad-1
2220: PPUSH
2221: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2225: LD_EXP 16
2229: PPUSH
2230: LD_STRING D2-JMM-2
2232: PPUSH
2233: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2237: LD_EXP 17
2241: PPUSH
2242: LD_STRING D2-Glad-2
2244: PPUSH
2245: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2249: LD_EXP 16
2253: PPUSH
2254: LD_STRING D2-JMM-3
2256: PPUSH
2257: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2261: LD_INT 1050
2263: PPUSH
2264: LD_INT 2100
2266: PPUSH
2267: CALL_OW 12
2271: PPUSH
2272: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 570
2281: PPUSH
2282: LD_INT 350
2284: PPUSH
2285: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2289: LD_INT 6300
2291: PPUSH
2292: LD_INT 10500
2294: PPUSH
2295: CALL_OW 12
2299: PPUSH
2300: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2304: LD_INT 0
2306: PPUSH
2307: LD_INT 570
2309: PPUSH
2310: LD_INT 350
2312: PPUSH
2313: CALL_OW 550
// end ;
2317: LD_VAR 0 1
2321: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2322: LD_INT 22
2324: PUSH
2325: LD_INT 1
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: LD_INT 57
2337: PUSH
2338: EMPTY
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 30
2347: PUSH
2348: LD_INT 0
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PUSH
2368: LD_EXP 4
2372: NOT
2373: AND
2374: IFFALSE 2387
2376: GO 2378
2378: DISABLE
// begin deltaBuilded := true ;
2379: LD_ADDR_EXP 4
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// end ;
2387: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_EXP 4
2398: AND
2399: PUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 3
2412: PUSH
2413: LD_INT 57
2415: PUSH
2416: EMPTY
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: AND
2446: IFFALSE 2532
2448: GO 2450
2450: DISABLE
// begin enable ;
2451: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2465: LD_ADDR_EXP 6
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 1
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 57
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: PPUSH
2511: CALL_OW 69
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2520: LD_EXP 6
2524: PPUSH
2525: LD_STRING Delta
2527: PPUSH
2528: CALL_OW 500
// end ;
2532: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 321
2543: PUSH
2544: LD_INT 2
2546: EQUAL
2547: PUSH
2548: LD_EXP 17
2552: PPUSH
2553: CALL_OW 302
2557: AND
2558: IFFALSE 2619
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D3-Glad-1
2574: PPUSH
2575: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2579: LD_EXP 16
2583: PPUSH
2584: LD_STRING D3-JMM-1
2586: PPUSH
2587: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D3-Glad-2
2598: PPUSH
2599: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2603: LD_EXP 16
2607: PPUSH
2608: LD_STRING D3-JMM-2
2610: PPUSH
2611: CALL_OW 88
// DialogueOff ;
2615: CALL_OW 7
// end ;
2619: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2620: LD_INT 2
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: CALL_OW 321
2630: PUSH
2631: LD_INT 2
2633: EQUAL
2634: IFFALSE 2811
2636: GO 2638
2638: DISABLE
2639: LD_INT 0
2641: PPUSH
// begin DialogueOn ;
2642: CALL_OW 6
// if Frank then
2646: LD_EXP 23
2650: IFFALSE 2664
// Say ( Frank , D8a-Frank-1 ) ;
2652: LD_EXP 23
2656: PPUSH
2657: LD_STRING D8a-Frank-1
2659: PPUSH
2660: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2664: LD_ADDR_VAR 0 1
2668: PUSH
2669: LD_EXP 26
2673: PPUSH
2674: LD_INT 26
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PPUSH
2689: LD_STRING D8a-Sol1-1
2691: PPUSH
2692: CALL 515 0 2
2696: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2697: LD_EXP 19
2701: PUSH
2702: LD_EXP 19
2706: PPUSH
2707: CALL_OW 255
2711: PUSH
2712: LD_INT 1
2714: EQUAL
2715: AND
2716: IFFALSE 2730
// Say ( Denis , D8a-Den-1 ) ;
2718: LD_EXP 19
2722: PPUSH
2723: LD_STRING D8a-Den-1
2725: PPUSH
2726: CALL_OW 88
// if sol or Denis or Frank then
2730: LD_VAR 0 1
2734: PUSH
2735: LD_EXP 19
2739: OR
2740: PUSH
2741: LD_EXP 23
2745: OR
2746: IFFALSE 2807
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2748: LD_EXP 26
2752: PPUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 4
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 26
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PUSH
2782: LD_VAR 0 1
2786: DIFF
2787: PPUSH
2788: LD_STRING D8a-Sci1-1
2790: PPUSH
2791: CALL 515 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2795: LD_EXP 16
2799: PPUSH
2800: LD_STRING D8a-JMM-1
2802: PPUSH
2803: CALL_OW 88
// end ; DialogueOff ;
2807: CALL_OW 7
// end ;
2811: PPOPN 1
2813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2814: LD_INT 22
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 25
2826: PUSH
2827: LD_INT 16
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: IFFALSE 2901
2844: GO 2846
2846: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2847: LD_STRING M1a
2849: PPUSH
2850: CALL_OW 337
// case Query ( Q2 ) of 1 :
2854: LD_STRING Q2
2856: PPUSH
2857: CALL_OW 97
2861: PUSH
2862: LD_INT 1
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2881
2870: POP
// end_mission := true ; 2 :
2871: LD_ADDR_EXP 14
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
2879: GO 2901
2881: LD_INT 2
2883: DOUBLE
2884: EQUAL
2885: IFTRUE 2889
2887: GO 2900
2889: POP
// end_the_mission_allowed := true ; end ;
2890: LD_ADDR_OWVAR 57
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
2898: GO 2901
2900: POP
// end ;
2901: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2902: LD_INT 22
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 6
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 7
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 69
2948: PUSH
2949: LD_INT 22
2951: PUSH
2952: LD_INT 1
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 2
2961: PUSH
2962: LD_INT 30
2964: PUSH
2965: LD_INT 2
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 30
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: AND
2996: PUSH
2997: LD_EXP 6
3001: AND
3002: IFFALSE 3513
3004: GO 3006
3006: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3007: LD_INT 1050
3009: PPUSH
3010: LD_INT 1750
3012: PPUSH
3013: CALL_OW 12
3017: PPUSH
3018: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 ] [ Difficulty ] , false ) ;
3022: LD_EXP 19
3026: PPUSH
3027: LD_INT 6
3029: PUSH
3030: LD_INT 9
3032: PUSH
3033: LD_INT 10
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_OWVAR 67
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// ComHold ( Denis ) ;
3054: LD_EXP 19
3058: PPUSH
3059: CALL_OW 140
// InGameOn ;
3063: CALL_OW 8
// DialogueOn ;
3067: CALL_OW 6
// if Delta then
3071: LD_EXP 6
3075: IFFALSE 3088
// CenterNowOnUnits ( Delta ) else
3077: LD_EXP 6
3081: PPUSH
3082: CALL_OW 87
3086: GO 3097
// CenterNowOnUnits ( JMM ) ;
3088: LD_EXP 16
3092: PPUSH
3093: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3097: LD_EXP 19
3101: PPUSH
3102: LD_STRING DD-Den-1
3104: PPUSH
3105: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3109: LD_EXP 16
3113: PPUSH
3114: LD_STRING DD-JMM-1
3116: PPUSH
3117: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3121: LD_EXP 19
3125: PPUSH
3126: LD_STRING DD-Den-2
3128: PPUSH
3129: CALL_OW 94
// Wait ( 3 ) ;
3133: LD_INT 3
3135: PPUSH
3136: CALL_OW 67
// DialogueOff ;
3140: CALL_OW 7
// InGameOff ;
3144: CALL_OW 9
// if Difficulty = 1 then
3148: LD_OWVAR 67
3152: PUSH
3153: LD_INT 1
3155: EQUAL
3156: IFFALSE 3232
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3158: LD_EXP 19
3162: PPUSH
3163: CALL_OW 250
3167: PPUSH
3168: LD_EXP 19
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_INT 12
3183: NEG
3184: PPUSH
3185: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3189: LD_EXP 19
3193: PPUSH
3194: CALL_OW 87
// wait ( 0 0$5 ) ;
3198: LD_INT 175
3200: PPUSH
3201: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3205: LD_EXP 19
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 19
3219: PPUSH
3220: CALL_OW 251
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 19
3246: PPUSH
3247: CALL_OW 292
3251: PUSH
3252: LD_EXP 19
3256: PPUSH
3257: CALL_OW 301
3261: OR
3262: IFFALSE 3232
// if IsDead ( Denis ) then
3264: LD_EXP 19
3268: PPUSH
3269: CALL_OW 301
3273: IFFALSE 3277
// exit ;
3275: GO 3513
// SetSide ( Denis , 1 ) ;
3277: LD_EXP 19
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3289: LD_EXP 19
3293: PPUSH
3294: LD_STRING DD-Den-2a
3296: PPUSH
3297: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3301: LD_INT 35
3303: PPUSH
3304: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3308: LD_EXP 19
3312: PPUSH
3313: CALL_OW 310
3317: PPUSH
3318: CALL_OW 266
3322: PUSH
3323: LD_INT 6
3325: PUSH
3326: LD_INT 7
3328: PUSH
3329: LD_INT 8
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: IN
3337: PUSH
3338: LD_EXP 19
3342: PPUSH
3343: CALL_OW 301
3347: OR
3348: IFFALSE 3301
// if IsDead ( Denis ) then
3350: LD_EXP 19
3354: PPUSH
3355: CALL_OW 301
3359: IFFALSE 3363
// exit ;
3361: GO 3513
// Say ( Denis , DD-Den-2b ) ;
3363: LD_EXP 19
3367: PPUSH
3368: LD_STRING DD-Den-2b
3370: PPUSH
3371: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3375: LD_EXP 19
3379: PPUSH
3380: LD_INT 4
3382: PPUSH
3383: CALL_OW 123
// Wait ( 0 0$02 ) ;
3387: LD_INT 70
3389: PPUSH
3390: CALL_OW 67
// DialogueOn ;
3394: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3398: LD_EXP 19
3402: PPUSH
3403: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING D4-JMM-1
3414: PPUSH
3415: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3419: LD_EXP 19
3423: PPUSH
3424: LD_STRING D4-Den-1
3426: PPUSH
3427: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING D4-JMM-2
3438: PPUSH
3439: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3443: LD_EXP 19
3447: PPUSH
3448: LD_STRING D4-Den-2
3450: PPUSH
3451: CALL_OW 88
// DialogueOff ;
3455: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3459: LD_STRING M2
3461: PPUSH
3462: CALL_OW 337
// radar_allowed := true ;
3466: LD_ADDR_EXP 7
3470: PUSH
3471: LD_INT 1
3473: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3474: LD_INT 6
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3487: LD_INT 15
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3500: LD_INT 20
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 324
// end ;
3513: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3514: LD_EXP 13
3518: IFFALSE 4141
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_EXP 26
3536: PPUSH
3537: LD_INT 26
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 72
3551: PPUSH
3552: LD_STRING D5-Sol1-1
3554: PPUSH
3555: CALL 515 0 2
3559: ST_TO_ADDR
// if not sol then
3560: LD_VAR 0 1
3564: NOT
3565: IFFALSE 3569
// exit ;
3567: GO 4141
// repeat wait ( 0 0$01 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3576: LD_INT 22
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 69
3604: PUSH
3605: LD_INT 0
3607: EQUAL
3608: IFFALSE 3569
// if IsOk ( sol ) then
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 302
3619: IFFALSE 3639
// begin sol2 := others diff sol ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_EXP 26
3630: PUSH
3631: LD_VAR 0 1
3635: DIFF
3636: ST_TO_ADDR
// end else
3637: GO 3641
// exit ;
3639: GO 4141
// if not Lisa and not sol2 then
3641: LD_EXP 22
3645: NOT
3646: PUSH
3647: LD_VAR 0 2
3651: NOT
3652: AND
3653: IFFALSE 3657
// exit ;
3655: GO 4141
// DialogueOn ;
3657: CALL_OW 6
// if Lisa then
3661: LD_EXP 22
3665: IFFALSE 3681
// Say ( Lisa , D5a-Lisa-1 ) else
3667: LD_EXP 22
3671: PPUSH
3672: LD_STRING D5a-Lisa-1
3674: PPUSH
3675: CALL_OW 88
3679: GO 3756
// if sol2 then
3681: LD_VAR 0 2
3685: IFFALSE 3756
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3687: LD_VAR 0 2
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 258
3700: PUSH
3701: LD_INT 1
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3728
3709: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3710: LD_VAR 0 2
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: PPUSH
3719: LD_STRING D5-Sol2-1
3721: PPUSH
3722: CALL_OW 88
3726: GO 3756
3728: LD_INT 2
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3755
3736: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3737: LD_VAR 0 2
3741: PUSH
3742: LD_INT 1
3744: ARRAY
3745: PPUSH
3746: LD_STRING D5-FSol2-1
3748: PPUSH
3749: CALL_OW 88
3753: GO 3756
3755: POP
// Say ( sol , D5-Sol1-2 ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: LD_STRING D5-Sol1-2
3763: PPUSH
3764: CALL_OW 88
// if Lisa then
3768: LD_EXP 22
3772: IFFALSE 3788
// Say ( Lisa , D5a-Lisa-2 ) else
3774: LD_EXP 22
3778: PPUSH
3779: LD_STRING D5a-Lisa-2
3781: PPUSH
3782: CALL_OW 88
3786: GO 3863
// if sol2 then
3788: LD_VAR 0 2
3792: IFFALSE 3863
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3794: LD_VAR 0 2
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: CALL_OW 258
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3817: LD_VAR 0 2
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_STRING D5-Sol2-2
3828: PPUSH
3829: CALL_OW 88
3833: GO 3863
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3862
3843: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3844: LD_VAR 0 2
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_STRING D5-FSol2-2
3855: PPUSH
3856: CALL_OW 88
3860: GO 3863
3862: POP
// Say ( sol , D5a-Sol1-3 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_STRING D5a-Sol1-3
3870: PPUSH
3871: CALL_OW 88
// if Lisa then
3875: LD_EXP 22
3879: IFFALSE 3893
// Say ( Lisa , D5a-Lisa-3 ) ;
3881: LD_EXP 22
3885: PPUSH
3886: LD_STRING D5a-Lisa-3
3888: PPUSH
3889: CALL_OW 88
// if not sol2 then
3893: LD_VAR 0 2
3897: NOT
3898: IFFALSE 3906
// begin DialogueOff ;
3900: CALL_OW 7
// exit ;
3904: GO 4141
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 1
3913: ARRAY
3914: PPUSH
3915: CALL_OW 258
3919: PUSH
3920: LD_INT 1
3922: DOUBLE
3923: EQUAL
3924: IFTRUE 3928
3926: GO 3947
3928: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3929: LD_VAR 0 2
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: PPUSH
3938: LD_STRING D5-Sol2-3
3940: PPUSH
3941: CALL_OW 88
3945: GO 3975
3947: LD_INT 2
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 3974
3955: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 1
3963: ARRAY
3964: PPUSH
3965: LD_STRING D5-FSol2-3
3967: PPUSH
3968: CALL_OW 88
3972: GO 3975
3974: POP
// Say ( sol , D5-Sol1-4 ) ;
3975: LD_VAR 0 1
3979: PPUSH
3980: LD_STRING D5-Sol1-4
3982: PPUSH
3983: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3987: LD_VAR 0 2
3991: PUSH
3992: LD_INT 1
3994: ARRAY
3995: PPUSH
3996: CALL_OW 258
4000: PUSH
4001: LD_INT 1
4003: DOUBLE
4004: EQUAL
4005: IFTRUE 4009
4007: GO 4028
4009: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: LD_STRING D5-Sol2-4
4021: PPUSH
4022: CALL_OW 88
4026: GO 4056
4028: LD_INT 2
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4055
4036: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 1
4044: ARRAY
4045: PPUSH
4046: LD_STRING D5-FSol2-4
4048: PPUSH
4049: CALL_OW 88
4053: GO 4056
4055: POP
// Say ( sol , D5-Sol1-5 ) ;
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_STRING D5-Sol1-5
4063: PPUSH
4064: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4068: LD_VAR 0 2
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 258
4081: PUSH
4082: LD_INT 1
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4109
4090: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4091: LD_VAR 0 2
4095: PUSH
4096: LD_INT 1
4098: ARRAY
4099: PPUSH
4100: LD_STRING D5-Sol2-5
4102: PPUSH
4103: CALL_OW 88
4107: GO 4137
4109: LD_INT 2
4111: DOUBLE
4112: EQUAL
4113: IFTRUE 4117
4115: GO 4136
4117: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4118: LD_VAR 0 2
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_STRING D5-FSol2-5
4129: PPUSH
4130: CALL_OW 88
4134: GO 4137
4136: POP
// DialogueOff ;
4137: CALL_OW 7
// end ;
4141: PPOPN 2
4143: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4144: LD_INT 22
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 25
4156: PUSH
4157: LD_INT 16
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 69
4172: PUSH
4173: LD_INT 5
4175: GREATEREQUAL
4176: IFFALSE 4196
4178: GO 4180
4180: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4181: LD_STRING M1b
4183: PPUSH
4184: CALL_OW 337
// apeman_army := true ;
4188: LD_ADDR_EXP 9
4192: PUSH
4193: LD_INT 1
4195: ST_TO_ADDR
// end ;
4196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4197: LD_INT 22
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 57
4219: PUSH
4220: EMPTY
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 69
4232: IFFALSE 4244
4234: GO 4236
4236: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4237: LD_STRING M1c
4239: PPUSH
4240: CALL_OW 337
4244: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 321
4255: PUSH
4256: LD_INT 2
4258: EQUAL
4259: IFFALSE 4279
4261: GO 4263
4263: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4264: LD_STRING M2a
4266: PPUSH
4267: CALL_OW 337
// radar_researched := true ;
4271: LD_ADDR_EXP 10
4275: PUSH
4276: LD_INT 1
4278: ST_TO_ADDR
// end ;
4279: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4280: LD_INT 22
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 34
4295: PUSH
4296: LD_INT 11
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 35
4305: PUSH
4306: LD_INT 11
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: IFFALSE 4346
4328: GO 4330
4330: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4331: LD_STRING M2b
4333: PPUSH
4334: CALL_OW 337
// radar_builded := true ;
4338: LD_ADDR_EXP 11
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// end ;
4346: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4347: LD_INT 22
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 12
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 0
4378: EQUAL
4379: PUSH
4380: LD_EXP 8
4384: NOT
4385: AND
4386: IFFALSE 4398
4388: GO 4390
4390: DISABLE
// YouLost ( Apeman ) ;
4391: LD_STRING Apeman
4393: PPUSH
4394: CALL_OW 104
4398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 16
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 7
4430: GREATEREQUAL
4431: IFFALSE 4529
4433: GO 4435
4435: DISABLE
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 4
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: PUSH
4485: LD_EXP 16
4489: ADD
4490: ST_TO_ADDR
// if filter then
4491: LD_VAR 0 2
4495: IFFALSE 4529
// for i in filter do
4497: LD_ADDR_VAR 0 1
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4527
// AddExperience ( i , 4 , 3500 ) ;
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_INT 4
4517: PPUSH
4518: LD_INT 3500
4520: PPUSH
4521: CALL_OW 492
4525: GO 4507
4527: POP
4528: POP
// end ;
4529: PPOPN 2
4531: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4532: LD_EXP 14
4536: IFFALSE 5670
4538: GO 4540
4540: DISABLE
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// begin if apeKillCounter = 0 then
4548: LD_EXP 15
4552: PUSH
4553: LD_INT 0
4555: EQUAL
4556: IFFALSE 4565
// SetAchievement ( ACH_APEKILLER ) ;
4558: LD_STRING ACH_APEKILLER
4560: PPUSH
4561: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4565: LD_INT 22
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: IFFALSE 4617
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4581: LD_ADDR_VAR 0 1
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: FOR_IN
4602: IFFALSE 4615
// RemoveUnit ( i ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: CALL_OW 64
4613: GO 4601
4615: POP
4616: POP
// m1 := false ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 0
4624: ST_TO_ADDR
// m2 := false ;
4625: LD_ADDR_VAR 0 4
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m3 := false ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// if apeman_army then
4641: LD_EXP 9
4645: IFFALSE 4667
// begin AddMedal ( Tame , 1 ) ;
4647: LD_STRING Tame
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: CALL_OW 101
// m1 := true ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// end else
4665: GO 4678
// AddMedal ( Tame , - 1 ) ;
4667: LD_STRING Tame
4669: PPUSH
4670: LD_INT 1
4672: NEG
4673: PPUSH
4674: CALL_OW 101
// if radar_researched then
4678: LD_EXP 10
4682: IFFALSE 4714
// begin SaveVariable ( true , radarResInDelta ) ;
4684: LD_INT 1
4686: PPUSH
4687: LD_STRING radarResInDelta
4689: PPUSH
4690: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4694: LD_STRING Radar
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 101
// m2 := true ;
4704: LD_ADDR_VAR 0 4
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// end else
4712: GO 4744
// if radar_allowed then
4714: LD_EXP 7
4718: IFFALSE 4733
// AddMedal ( Radar , - 2 ) else
4720: LD_STRING Radar
4722: PPUSH
4723: LD_INT 2
4725: NEG
4726: PPUSH
4727: CALL_OW 101
4731: GO 4744
// AddMedal ( Radar , - 1 ) ;
4733: LD_STRING Radar
4735: PPUSH
4736: LD_INT 1
4738: NEG
4739: PPUSH
4740: CALL_OW 101
// if radar_builded then
4744: LD_EXP 11
4748: IFFALSE 4770
// begin AddMedal ( BuildRadar , 1 ) ;
4750: LD_STRING BuildRadar
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 101
// m3 := true ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end else
4768: GO 4781
// AddMedal ( BuildRadar , - 1 ) ;
4770: LD_STRING BuildRadar
4772: PPUSH
4773: LD_INT 1
4775: NEG
4776: PPUSH
4777: CALL_OW 101
// if tick <= 7 7$00 then
4781: LD_OWVAR 1
4785: PUSH
4786: LD_INT 14700
4788: LESSEQUAL
4789: IFFALSE 4798
// SetAchievement ( ACH_ASPEED_5 ) ;
4791: LD_STRING ACH_ASPEED_5
4793: PPUSH
4794: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_VAR 0 4
4807: AND
4808: PUSH
4809: LD_VAR 0 5
4813: AND
4814: PUSH
4815: LD_OWVAR 67
4819: PUSH
4820: LD_INT 3
4822: EQUAL
4823: AND
4824: IFFALSE 4836
// SetAchievementEX ( ACH_AMER , 5 ) ;
4826: LD_STRING ACH_AMER
4828: PPUSH
4829: LD_INT 5
4831: PPUSH
4832: CALL_OW 564
// GiveMedals ( MAIN ) ;
4836: LD_STRING MAIN
4838: PPUSH
4839: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 25
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4928: LD_VAR 0 2
4932: PPUSH
4933: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4937: LD_EXP 16
4941: PPUSH
4942: LD_EXP 2
4946: PUSH
4947: LD_STRING JMM
4949: STR
4950: PPUSH
4951: CALL_OW 38
// if IsOk ( Gladstone ) then
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: IFFALSE 4984
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4966: LD_EXP 17
4970: PPUSH
4971: LD_EXP 2
4975: PUSH
4976: LD_STRING Gladstone
4978: STR
4979: PPUSH
4980: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4984: LD_EXP 19
4988: PPUSH
4989: CALL_OW 302
4993: PUSH
4994: LD_EXP 19
4998: PPUSH
4999: CALL_OW 255
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5038
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5010: LD_EXP 19
5014: PPUSH
5015: LD_EXP 2
5019: PUSH
5020: LD_STRING Denis
5022: STR
5023: PPUSH
5024: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5028: LD_INT 1
5030: PPUSH
5031: LD_STRING DenisInDelta
5033: PPUSH
5034: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5038: LD_EXP 22
5042: PPUSH
5043: CALL_OW 302
5047: IFFALSE 5067
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5049: LD_EXP 22
5053: PPUSH
5054: LD_EXP 2
5058: PUSH
5059: LD_STRING Lisa
5061: STR
5062: PPUSH
5063: CALL_OW 38
// end ; if IsOk ( Frank ) then
5067: LD_EXP 23
5071: PPUSH
5072: CALL_OW 302
5076: IFFALSE 5096
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5078: LD_EXP 23
5082: PPUSH
5083: LD_EXP 2
5087: PUSH
5088: LD_STRING Frank
5090: STR
5091: PPUSH
5092: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5096: LD_EXP 24
5100: PPUSH
5101: CALL_OW 302
5105: IFFALSE 5125
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5107: LD_EXP 24
5111: PPUSH
5112: LD_EXP 2
5116: PUSH
5117: LD_STRING Bobby
5119: STR
5120: PPUSH
5121: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5125: LD_EXP 25
5129: PPUSH
5130: CALL_OW 302
5134: IFFALSE 5154
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5136: LD_EXP 25
5140: PPUSH
5141: LD_EXP 2
5145: PUSH
5146: LD_STRING Cyrus
5148: STR
5149: PPUSH
5150: CALL_OW 38
// end ; if IsOk ( Brown ) then
5154: LD_EXP 20
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5183
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5165: LD_EXP 20
5169: PPUSH
5170: LD_EXP 2
5174: PUSH
5175: LD_STRING Brown
5177: STR
5178: PPUSH
5179: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5183: LD_EXP 21
5187: PPUSH
5188: CALL_OW 302
5192: IFFALSE 5212
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 21
5198: PPUSH
5199: LD_EXP 2
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// end ; if others then
5212: LD_EXP 26
5216: IFFALSE 5230
// SaveCharacters ( others , othersInDelta ) ;
5218: LD_EXP 26
5222: PPUSH
5223: LD_STRING othersInDelta
5225: PPUSH
5226: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 16
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: IFFALSE 5296
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5260: LD_INT 22
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 16
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PPUSH
5289: LD_STRING apeInDelta
5291: PPUSH
5292: CALL_OW 38
// tmp := [ ] ;
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: EMPTY
5302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 21
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: IFFALSE 5442
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 21
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 69
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5440
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_VAR 0 2
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 248
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 265
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 262
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 263
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 264
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ADD
5437: ST_TO_ADDR
5438: GO 5367
5440: POP
5441: POP
// if tmp then
5442: LD_VAR 0 2
5446: IFFALSE 5460
// SaveVariable ( tmp , vehiclesInDelta ) ;
5448: LD_VAR 0 2
5452: PPUSH
5453: LD_STRING vehiclesInDelta
5455: PPUSH
5456: CALL_OW 39
// tmp := [ ] ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: EMPTY
5466: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5467: LD_INT 22
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: IFFALSE 5648
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5497: LD_ADDR_VAR 0 1
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 21
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: PUSH
5531: FOR_IN
5532: IFFALSE 5646
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 266
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 267
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 250
5573: PUSH
5574: LD_VAR 0 1
5578: PPUSH
5579: CALL_OW 251
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 254
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 1
5601: PPUSH
5602: CALL_OW 268
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: CALL_OW 268
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 269
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
5644: GO 5531
5646: POP
5647: POP
// if tmp then
5648: LD_VAR 0 2
5652: IFFALSE 5666
// SaveVariable ( tmp , buildingsInDelta ) ;
5654: LD_VAR 0 2
5658: PPUSH
5659: LD_STRING buildingsInDelta
5661: PPUSH
5662: CALL_OW 39
// YouWin ;
5666: CALL_OW 103
// end ; end_of_file
5670: PPOPN 5
5672: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
5677: PPUSH
5678: PPUSH
// InitHc ;
5679: CALL_OW 19
// InitUc ;
5683: CALL_OW 18
// uc_side := 2 ;
5687: LD_ADDR_OWVAR 20
5691: PUSH
5692: LD_INT 2
5694: ST_TO_ADDR
// uc_nation := 2 ;
5695: LD_ADDR_OWVAR 21
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// if not amount then
5703: LD_VAR 0 1
5707: NOT
5708: IFFALSE 5712
// exit ;
5710: GO 5835
// for i = 1 to amount do
5712: LD_ADDR_VAR 0 5
5716: PUSH
5717: DOUBLE
5718: LD_INT 1
5720: DEC
5721: ST_TO_ADDR
5722: LD_VAR 0 1
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5823
// begin PrepareHuman ( false , 1 , skill ) ;
5730: LD_INT 0
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 6
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5755: LD_ADDR_VAR 0 7
5759: PUSH
5760: LD_VAR 0 7
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_VAR 0 6
5772: PPUSH
5773: CALL_OW 2
5777: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_INT 0
5790: PPUSH
5791: CALL_OW 49
// if i mod 2 = 0 then
5795: LD_VAR 0 5
5799: PUSH
5800: LD_INT 2
5802: MOD
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5821
// SetTag ( un , 11 ) ;
5809: LD_VAR 0 6
5813: PPUSH
5814: LD_INT 11
5816: PPUSH
5817: CALL_OW 109
// end ;
5821: GO 5727
5823: POP
5824: POP
// result := tmp ;
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 7
5834: ST_TO_ADDR
// end ;
5835: LD_VAR 0 4
5839: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5840: LD_EXP 6
5844: IFFALSE 6711
5846: GO 5848
5848: DISABLE
5849: LD_INT 0
5851: PPUSH
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin more_troops := false ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_OWVAR 67
5890: ARRAY
5891: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 ] [ Difficulty ] ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 10500
5899: PUSH
5900: LD_INT 8400
5902: PUSH
5903: LD_INT 6300
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_OWVAR 67
5915: ARRAY
5916: ST_TO_ADDR
// force := [ ] ;
5917: LD_ADDR_VAR 0 8
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// ar_forces := [ ] ;
5924: LD_ADDR_EXP 27
5928: PUSH
5929: EMPTY
5930: ST_TO_ADDR
// ap_killers := [ ] ;
5931: LD_ADDR_EXP 28
5935: PUSH
5936: EMPTY
5937: ST_TO_ADDR
// Wait ( timer ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5947: LD_EXP 19
5951: PUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 255
5961: PUSH
5962: LD_INT 4
5964: EQUAL
5965: AND
5966: IFFALSE 5975
// Wait ( 0 0$45 ) ;
5968: LD_INT 1575
5970: PPUSH
5971: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5975: LD_INT 22
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 30
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 69
6003: IFFALSE 6020
// begin Wait ( 1 1$25 ) ;
6005: LD_INT 2975
6007: PPUSH
6008: CALL_OW 67
// more_troops := true ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_INT 1
6019: ST_TO_ADDR
// end ; if more_troops then
6020: LD_VAR 0 3
6024: IFFALSE 6212
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6026: LD_ADDR_VAR 0 8
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: LD_INT 6
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_OWVAR 67
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: LD_INT 14
6058: PPUSH
6059: CALL 5673 0 3
6063: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun ] [ Difficulty ] , 90 ) ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 22
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 42
6086: PUSH
6087: LD_INT 42
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PUSH
6098: LD_OWVAR 67
6102: ARRAY
6103: PPUSH
6104: LD_INT 90
6106: PPUSH
6107: CALL 427 0 7
6111: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6112: LD_VAR 0 7
6116: PPUSH
6117: LD_INT 4
6119: PPUSH
6120: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6124: LD_VAR 0 7
6128: PPUSH
6129: LD_INT 13
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 49
// uc_side := 2 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 2
6146: ST_TO_ADDR
// uc_nation := 2 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_VAR 0 4
6165: PPUSH
6166: CALL_OW 380
// un := CreateHuman ;
6170: LD_ADDR_VAR 0 6
6174: PUSH
6175: CALL_OW 44
6179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6180: LD_VAR 0 6
6184: PPUSH
6185: LD_VAR 0 7
6189: PPUSH
6190: CALL_OW 52
// force := force ^ un ;
6194: LD_ADDR_VAR 0 8
6198: PUSH
6199: LD_VAR 0 8
6203: PUSH
6204: LD_VAR 0 6
6208: ADD
6209: ST_TO_ADDR
// end else
6210: GO 6250
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 ] [ Difficulty ] , skill , arArea2 ) ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: LD_OWVAR 67
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PPUSH
6242: LD_INT 14
6244: PPUSH
6245: CALL 5673 0 3
6249: ST_TO_ADDR
// end ; if force then
6250: LD_VAR 0 8
6254: IFFALSE 6266
// ar_forces := force ;
6256: LD_ADDR_EXP 27
6260: PUSH
6261: LD_VAR 0 8
6265: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6266: LD_INT 35
6268: PPUSH
6269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6273: LD_INT 22
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PUSH
6302: LD_INT 0
6304: EQUAL
6305: IFFALSE 6266
// Wait ( timer ) ;
6307: LD_VAR 0 2
6311: PPUSH
6312: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6316: LD_ADDR_VAR 0 8
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_INT 13
6348: PUSH
6349: LD_INT 14
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_INT 2
6361: PPUSH
6362: CALL_OW 12
6366: ARRAY
6367: PPUSH
6368: CALL 5673 0 3
6372: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6373: LD_OWVAR 67
6377: PUSH
6378: LD_INT 1
6380: GREATER
6381: PUSH
6382: LD_EXP 6
6386: AND
6387: IFFALSE 6466
// begin uc_side := 2 ;
6389: LD_ADDR_OWVAR 20
6393: PUSH
6394: LD_INT 2
6396: ST_TO_ADDR
// uc_nation := 2 ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_INT 2
6404: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6405: LD_INT 0
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// eng := CreateHuman ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6430: LD_VAR 0 5
6434: PPUSH
6435: LD_INT 13
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 49
// Wait ( 3 ) ;
6445: LD_INT 3
6447: PPUSH
6448: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6452: LD_VAR 0 5
6456: PPUSH
6457: LD_EXP 6
6461: PPUSH
6462: CALL_OW 180
// end ; if force then
6466: LD_VAR 0 8
6470: IFFALSE 6482
// ar_forces := force ;
6472: LD_ADDR_EXP 27
6476: PUSH
6477: LD_VAR 0 8
6481: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// if eng then
6489: LD_VAR 0 5
6493: IFFALSE 6547
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6495: LD_EXP 6
6499: PPUSH
6500: CALL_OW 255
6504: PUSH
6505: LD_INT 2
6507: EQUAL
6508: PUSH
6509: LD_VAR 0 5
6513: PPUSH
6514: CALL_OW 302
6518: AND
6519: PUSH
6520: LD_VAR 0 5
6524: PPUSH
6525: CALL_OW 310
6529: NOT
6530: AND
6531: IFFALSE 6547
// ComEnterUnit ( eng , Delta ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_EXP 6
6542: PPUSH
6543: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6547: LD_INT 22
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 21
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 69
6575: PUSH
6576: LD_INT 0
6578: EQUAL
6579: IFFALSE 6482
// Wait ( 2 2$00 ) ;
6581: LD_INT 4200
6583: PPUSH
6584: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: LD_INT 1
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_OWVAR 67
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_INT 13
6620: PPUSH
6621: CALL 5673 0 3
6625: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6626: LD_VAR 0 2
6630: PUSH
6631: LD_INT 2
6633: MUL
6634: PPUSH
6635: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6639: LD_ADDR_EXP 27
6643: PUSH
6644: LD_INT 5
6646: PUSH
6647: LD_INT 6
6649: PUSH
6650: LD_INT 7
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_OWVAR 67
6662: ARRAY
6663: PPUSH
6664: LD_VAR 0 4
6668: PPUSH
6669: LD_INT 13
6671: PPUSH
6672: CALL 5673 0 3
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_OWVAR 67
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 4
6701: PPUSH
6702: LD_INT 14
6704: PPUSH
6705: CALL 5673 0 3
6709: ADD
6710: ST_TO_ADDR
// end ;
6711: PPOPN 8
6713: END
// every 0 0$03 trigger ar_forces do var i , target ;
6714: LD_EXP 27
6718: IFFALSE 6916
6720: GO 6722
6722: DISABLE
6723: LD_INT 0
6725: PPUSH
6726: PPUSH
// begin enable ;
6727: ENABLE
// if not ar_forces then
6728: LD_EXP 27
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6916
// if Delta then
6737: LD_EXP 6
6741: IFFALSE 6755
// target := Delta else
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 6
6752: ST_TO_ADDR
6753: GO 6765
// target := JMM ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_EXP 16
6764: ST_TO_ADDR
// for i in ar_forces do
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_EXP 27
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6914
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 55
6785: PUSH
6786: EMPTY
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: IN
6794: IFFALSE 6837
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: PPUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 310
6825: PPUSH
6826: CALL_OW 74
6830: PPUSH
6831: CALL_OW 115
6835: GO 6912
// if GetDistUnits ( i , target ) > 30 then
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: CALL_OW 296
6851: PUSH
6852: LD_INT 30
6854: GREATER
6855: IFFALSE 6888
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 2
6876: PPUSH
6877: CALL_OW 251
6881: PPUSH
6882: CALL_OW 114
6886: GO 6912
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_INT 81
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PPUSH
6908: CALL 732 0 2
// end ;
6912: GO 6775
6914: POP
6915: POP
// end ;
6916: PPOPN 2
6918: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6919: LD_EXP 28
6923: IFFALSE 7083
6925: GO 6927
6927: DISABLE
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
// begin enable ;
6933: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6934: LD_ADDR_VAR 0 1
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: ST_TO_ADDR
// if not filter then
6968: LD_VAR 0 1
6972: NOT
6973: IFFALSE 7000
// begin ar_forces := ar_forces ^ ap_killers ;
6975: LD_ADDR_EXP 27
6979: PUSH
6980: LD_EXP 27
6984: PUSH
6985: LD_EXP 28
6989: ADD
6990: ST_TO_ADDR
// ap_killers := [ ] ;
6991: LD_ADDR_EXP 28
6995: PUSH
6996: EMPTY
6997: ST_TO_ADDR
// exit ;
6998: GO 7083
// end ; for i in ap_killers do
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 28
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7081
// begin if not IsOk ( i ) then
7013: LD_VAR 0 2
7017: PPUSH
7018: CALL_OW 302
7022: NOT
7023: IFFALSE 7027
// continue ;
7025: GO 7010
// if not HasTask ( i ) then
7027: LD_VAR 0 2
7031: PPUSH
7032: CALL_OW 314
7036: NOT
7037: IFFALSE 7059
// target := NearestUnitToUnit ( filter , i ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 74
7058: ST_TO_ADDR
// if target then
7059: LD_VAR 0 3
7063: IFFALSE 7079
// ComAttackUnit ( i , target ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 7010
7081: POP
7082: POP
// end ; end_of_file
7083: PPOPN 3
7085: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7086: LD_EXP 6
7090: IFFALSE 7222
7092: GO 7094
7094: DISABLE
7095: LD_INT 0
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin counter := [ 300 , 250 , 220 ] [ Difficulty ] ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 300
7107: PUSH
7108: LD_INT 250
7110: PUSH
7111: LD_INT 220
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_OWVAR 67
7123: ARRAY
7124: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 3
7130: PPUSH
7131: CALL_OW 12
7135: PPUSH
7136: LD_INT 7
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7146: LD_INT 3150
7148: PPUSH
7149: LD_INT 4900
7151: PPUSH
7152: CALL_OW 12
7156: PPUSH
7157: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_INT 5
7171: PPUSH
7172: CALL_OW 12
7176: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_INT 7
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 55
// counter := counter - cr * 10 ;
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 10
7209: MUL
7210: MINUS
7211: ST_TO_ADDR
// until counter <= 0 ;
7212: LD_VAR 0 2
7216: PUSH
7217: LD_INT 0
7219: LESSEQUAL
7220: IFFALSE 7146
// end ;
7222: PPOPN 3
7224: END
// every 0 0$03 trigger not Delta do var i ;
7225: LD_EXP 6
7229: NOT
7230: IFFALSE 7300
7232: GO 7234
7234: DISABLE
7235: LD_INT 0
7237: PPUSH
// begin for i = 1 to 4 - Difficulty do
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: DOUBLE
7244: LD_INT 1
7246: DEC
7247: ST_TO_ADDR
7248: LD_INT 4
7250: PUSH
7251: LD_OWVAR 67
7255: MINUS
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7298
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7260: LD_INT 2
7262: PPUSH
7263: LD_INT 5
7265: PPUSH
7266: CALL_OW 12
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7281: LD_INT 560
7283: PPUSH
7284: LD_INT 1365
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 67
// end ;
7296: GO 7257
7298: POP
7299: POP
// end ;
7300: PPOPN 1
7302: END
// every 3 3$00 trigger tick < 15 15$00 do
7303: LD_OWVAR 1
7307: PUSH
7308: LD_INT 31500
7310: LESS
7311: IFFALSE 7371
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7317: LD_INT 1
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 12
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7335: LD_INT 1330
7337: PPUSH
7338: LD_INT 2065
7340: PPUSH
7341: CALL_OW 12
7345: PPUSH
7346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 4
7355: PPUSH
7356: CALL_OW 12
7360: PPUSH
7361: LD_INT 15
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: CALL_OW 55
// end ; end_of_file
7371: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 16
7381: EQUAL
7382: IFFALSE 7391
// YouLost ( JMM ) ;
7384: LD_STRING JMM
7386: PPUSH
7387: CALL_OW 104
// if un = Delta then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_EXP 6
7400: EQUAL
7401: IFFALSE 7424
// begin Delta := 0 ;
7403: LD_ADDR_EXP 6
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7411: LD_INT 0
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: CALL_OW 324
// end ; if un in ar_forces then
7424: LD_VAR 0 1
7428: PUSH
7429: LD_EXP 27
7433: IN
7434: IFFALSE 7452
// ar_forces := ar_forces diff un ;
7436: LD_ADDR_EXP 27
7440: PUSH
7441: LD_EXP 27
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: ST_TO_ADDR
// if un in ap_killers then
7452: LD_VAR 0 1
7456: PUSH
7457: LD_EXP 28
7461: IN
7462: IFFALSE 7480
// ap_killers := ap_killers diff un ;
7464: LD_ADDR_EXP 28
7468: PUSH
7469: LD_EXP 28
7473: PUSH
7474: LD_VAR 0 1
7478: DIFF
7479: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7480: LD_VAR 0 1
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 12
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 16
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IN
7518: IFFALSE 7534
// apeKillCounter := apeKillCounter + 1 ;
7520: LD_ADDR_EXP 15
7524: PUSH
7525: LD_EXP 15
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ST_TO_ADDR
// end ;
7534: PPOPN 1
7536: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: EQUAL
7554: AND
7555: PUSH
7556: LD_EXP 13
7560: NOT
7561: AND
7562: IFFALSE 7572
// arab_spotted := true ;
7564: LD_ADDR_EXP 13
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
7572: PPOPN 2
7574: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7575: LD_ADDR_OWVAR 57
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// end_mission := true ;
7583: LD_ADDR_EXP 14
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 1
7606: EQUAL
7607: IFFALSE 7623
// apeman_counter := apeman_counter + 1 ;
7609: LD_ADDR_EXP 12
7613: PUSH
7614: LD_EXP 12
7618: PUSH
7619: LD_INT 1
7621: PLUS
7622: ST_TO_ADDR
// if not first_apeman_tamed then
7623: LD_EXP 8
7627: NOT
7628: IFFALSE 7828
// begin first_apeman_tamed := true ;
7630: LD_ADDR_EXP 8
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if sci = Gladstone then
7638: LD_VAR 0 2
7642: PUSH
7643: LD_EXP 17
7647: EQUAL
7648: IFFALSE 7662
// Say ( Gladstone , D7b-Glad-1 ) ;
7650: LD_EXP 17
7654: PPUSH
7655: LD_STRING D7b-Glad-1
7657: PPUSH
7658: CALL_OW 88
// if sci = Denis then
7662: LD_VAR 0 2
7666: PUSH
7667: LD_EXP 19
7671: EQUAL
7672: IFFALSE 7686
// Say ( Denis , D7a-Den-1 ) ;
7674: LD_EXP 19
7678: PPUSH
7679: LD_STRING D7a-Den-1
7681: PPUSH
7682: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 16
7695: PUSH
7696: LD_EXP 17
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_EXP 22
7710: PUSH
7711: LD_EXP 23
7715: PUSH
7716: LD_EXP 24
7720: PUSH
7721: LD_EXP 25
7725: PUSH
7726: LD_EXP 21
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: IN
7741: NOT
7742: IFFALSE 7785
// begin if GetSex ( sci ) = sex_male then
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 258
7753: PUSH
7754: LD_INT 1
7756: EQUAL
7757: IFFALSE 7773
// Say ( sci , D7c-Sci1-1 ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_STRING D7c-Sci1-1
7766: PPUSH
7767: CALL_OW 88
7771: GO 7785
// Say ( sci , D7c-FSci1-1 ) ;
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_STRING D7c-FSci1-1
7780: PPUSH
7781: CALL_OW 88
// end ; if not sci = Gladstone then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_EXP 17
7794: EQUAL
7795: NOT
7796: IFFALSE 7810
// Say ( Gladstone , D7c-Glad-1 ) ;
7798: LD_EXP 17
7802: PPUSH
7803: LD_STRING D7c-Glad-1
7805: PPUSH
7806: CALL_OW 88
// if Lisa then
7810: LD_EXP 22
7814: IFFALSE 7828
// Say ( Lisa , D8-Lisa-1 ) ;
7816: LD_EXP 22
7820: PPUSH
7821: LD_STRING D8-Lisa-1
7823: PPUSH
7824: CALL_OW 88
// end ; end ; end_of_file
7828: PPOPN 2
7830: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7831: LD_INT 0
7833: PPUSH
// ar_crane := 88 ;
7834: LD_ADDR_EXP 35
7838: PUSH
7839: LD_INT 88
7841: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7842: LD_ADDR_EXP 30
7846: PUSH
7847: LD_INT 89
7849: ST_TO_ADDR
// us_hack := 99 ;
7850: LD_ADDR_EXP 31
7854: PUSH
7855: LD_INT 99
7857: ST_TO_ADDR
// us_artillery := 97 ;
7858: LD_ADDR_EXP 32
7862: PUSH
7863: LD_INT 97
7865: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7866: LD_ADDR_EXP 33
7870: PUSH
7871: LD_INT 91
7873: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7874: LD_ADDR_EXP 34
7878: PUSH
7879: LD_INT 92
7881: ST_TO_ADDR
// ru_radar := 98 ;
7882: LD_ADDR_EXP 29
7886: PUSH
7887: LD_INT 98
7889: ST_TO_ADDR
// tech_Artillery := 80 ;
7890: LD_ADDR_EXP 36
7894: PUSH
7895: LD_INT 80
7897: ST_TO_ADDR
// tech_RadMat := 81 ;
7898: LD_ADDR_EXP 37
7902: PUSH
7903: LD_INT 81
7905: ST_TO_ADDR
// tech_BasicTools := 82 ;
7906: LD_ADDR_EXP 38
7910: PUSH
7911: LD_INT 82
7913: ST_TO_ADDR
// tech_Cargo := 83 ;
7914: LD_ADDR_EXP 39
7918: PUSH
7919: LD_INT 83
7921: ST_TO_ADDR
// tech_Track := 84 ;
7922: LD_ADDR_EXP 40
7926: PUSH
7927: LD_INT 84
7929: ST_TO_ADDR
// tech_Crane := 85 ;
7930: LD_ADDR_EXP 41
7934: PUSH
7935: LD_INT 85
7937: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7938: LD_ADDR_EXP 42
7942: PUSH
7943: LD_INT 86
7945: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7946: LD_ADDR_EXP 43
7950: PUSH
7951: LD_INT 87
7953: ST_TO_ADDR
// end ;
7954: LD_VAR 0 1
7958: RET
// every 1 do
7959: GO 7961
7961: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7962: CALL 7831 0 0
7966: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_VAR 0 2
7976: PPUSH
7977: LD_VAR 0 3
7981: PPUSH
7982: LD_VAR 0 4
7986: PPUSH
7987: LD_VAR 0 5
7991: PPUSH
7992: CALL 20771 0 5
// end ;
7996: PPOPN 5
7998: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7999: LD_VAR 0 2
8003: PUSH
8004: LD_INT 100
8006: EQUAL
8007: IFFALSE 8956
// begin if not StreamModeActive then
8009: LD_EXP 44
8013: NOT
8014: IFFALSE 8024
// StreamModeActive := true ;
8016: LD_ADDR_EXP 44
8020: PUSH
8021: LD_INT 1
8023: ST_TO_ADDR
// if p3 = 0 then
8024: LD_VAR 0 3
8028: PUSH
8029: LD_INT 0
8031: EQUAL
8032: IFFALSE 8038
// InitStreamMode ;
8034: CALL 9189 0 0
// if p3 = 1 then
8038: LD_VAR 0 3
8042: PUSH
8043: LD_INT 1
8045: EQUAL
8046: IFFALSE 8056
// sRocket := true ;
8048: LD_ADDR_EXP 49
8052: PUSH
8053: LD_INT 1
8055: ST_TO_ADDR
// if p3 = 2 then
8056: LD_VAR 0 3
8060: PUSH
8061: LD_INT 2
8063: EQUAL
8064: IFFALSE 8074
// sSpeed := true ;
8066: LD_ADDR_EXP 48
8070: PUSH
8071: LD_INT 1
8073: ST_TO_ADDR
// if p3 = 3 then
8074: LD_VAR 0 3
8078: PUSH
8079: LD_INT 3
8081: EQUAL
8082: IFFALSE 8092
// sEngine := true ;
8084: LD_ADDR_EXP 50
8088: PUSH
8089: LD_INT 1
8091: ST_TO_ADDR
// if p3 = 4 then
8092: LD_VAR 0 3
8096: PUSH
8097: LD_INT 4
8099: EQUAL
8100: IFFALSE 8110
// sSpec := true ;
8102: LD_ADDR_EXP 47
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// if p3 = 5 then
8110: LD_VAR 0 3
8114: PUSH
8115: LD_INT 5
8117: EQUAL
8118: IFFALSE 8128
// sLevel := true ;
8120: LD_ADDR_EXP 51
8124: PUSH
8125: LD_INT 1
8127: ST_TO_ADDR
// if p3 = 6 then
8128: LD_VAR 0 3
8132: PUSH
8133: LD_INT 6
8135: EQUAL
8136: IFFALSE 8146
// sArmoury := true ;
8138: LD_ADDR_EXP 52
8142: PUSH
8143: LD_INT 1
8145: ST_TO_ADDR
// if p3 = 7 then
8146: LD_VAR 0 3
8150: PUSH
8151: LD_INT 7
8153: EQUAL
8154: IFFALSE 8164
// sRadar := true ;
8156: LD_ADDR_EXP 53
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// if p3 = 8 then
8164: LD_VAR 0 3
8168: PUSH
8169: LD_INT 8
8171: EQUAL
8172: IFFALSE 8182
// sBunker := true ;
8174: LD_ADDR_EXP 54
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// if p3 = 9 then
8182: LD_VAR 0 3
8186: PUSH
8187: LD_INT 9
8189: EQUAL
8190: IFFALSE 8200
// sHack := true ;
8192: LD_ADDR_EXP 55
8196: PUSH
8197: LD_INT 1
8199: ST_TO_ADDR
// if p3 = 10 then
8200: LD_VAR 0 3
8204: PUSH
8205: LD_INT 10
8207: EQUAL
8208: IFFALSE 8218
// sFire := true ;
8210: LD_ADDR_EXP 56
8214: PUSH
8215: LD_INT 1
8217: ST_TO_ADDR
// if p3 = 11 then
8218: LD_VAR 0 3
8222: PUSH
8223: LD_INT 11
8225: EQUAL
8226: IFFALSE 8236
// sRefresh := true ;
8228: LD_ADDR_EXP 57
8232: PUSH
8233: LD_INT 1
8235: ST_TO_ADDR
// if p3 = 12 then
8236: LD_VAR 0 3
8240: PUSH
8241: LD_INT 12
8243: EQUAL
8244: IFFALSE 8254
// sExp := true ;
8246: LD_ADDR_EXP 58
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// if p3 = 13 then
8254: LD_VAR 0 3
8258: PUSH
8259: LD_INT 13
8261: EQUAL
8262: IFFALSE 8272
// sDepot := true ;
8264: LD_ADDR_EXP 59
8268: PUSH
8269: LD_INT 1
8271: ST_TO_ADDR
// if p3 = 14 then
8272: LD_VAR 0 3
8276: PUSH
8277: LD_INT 14
8279: EQUAL
8280: IFFALSE 8290
// sFlag := true ;
8282: LD_ADDR_EXP 60
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// if p3 = 15 then
8290: LD_VAR 0 3
8294: PUSH
8295: LD_INT 15
8297: EQUAL
8298: IFFALSE 8308
// sKamikadze := true ;
8300: LD_ADDR_EXP 68
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// if p3 = 16 then
8308: LD_VAR 0 3
8312: PUSH
8313: LD_INT 16
8315: EQUAL
8316: IFFALSE 8326
// sTroll := true ;
8318: LD_ADDR_EXP 69
8322: PUSH
8323: LD_INT 1
8325: ST_TO_ADDR
// if p3 = 17 then
8326: LD_VAR 0 3
8330: PUSH
8331: LD_INT 17
8333: EQUAL
8334: IFFALSE 8344
// sSlow := true ;
8336: LD_ADDR_EXP 70
8340: PUSH
8341: LD_INT 1
8343: ST_TO_ADDR
// if p3 = 18 then
8344: LD_VAR 0 3
8348: PUSH
8349: LD_INT 18
8351: EQUAL
8352: IFFALSE 8362
// sLack := true ;
8354: LD_ADDR_EXP 71
8358: PUSH
8359: LD_INT 1
8361: ST_TO_ADDR
// if p3 = 19 then
8362: LD_VAR 0 3
8366: PUSH
8367: LD_INT 19
8369: EQUAL
8370: IFFALSE 8380
// sTank := true ;
8372: LD_ADDR_EXP 73
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// if p3 = 20 then
8380: LD_VAR 0 3
8384: PUSH
8385: LD_INT 20
8387: EQUAL
8388: IFFALSE 8398
// sRemote := true ;
8390: LD_ADDR_EXP 74
8394: PUSH
8395: LD_INT 1
8397: ST_TO_ADDR
// if p3 = 21 then
8398: LD_VAR 0 3
8402: PUSH
8403: LD_INT 21
8405: EQUAL
8406: IFFALSE 8416
// sPowell := true ;
8408: LD_ADDR_EXP 75
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// if p3 = 22 then
8416: LD_VAR 0 3
8420: PUSH
8421: LD_INT 22
8423: EQUAL
8424: IFFALSE 8434
// sTeleport := true ;
8426: LD_ADDR_EXP 78
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// if p3 = 23 then
8434: LD_VAR 0 3
8438: PUSH
8439: LD_INT 23
8441: EQUAL
8442: IFFALSE 8452
// sOilTower := true ;
8444: LD_ADDR_EXP 80
8448: PUSH
8449: LD_INT 1
8451: ST_TO_ADDR
// if p3 = 24 then
8452: LD_VAR 0 3
8456: PUSH
8457: LD_INT 24
8459: EQUAL
8460: IFFALSE 8470
// sShovel := true ;
8462: LD_ADDR_EXP 81
8466: PUSH
8467: LD_INT 1
8469: ST_TO_ADDR
// if p3 = 25 then
8470: LD_VAR 0 3
8474: PUSH
8475: LD_INT 25
8477: EQUAL
8478: IFFALSE 8488
// sSheik := true ;
8480: LD_ADDR_EXP 82
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// if p3 = 26 then
8488: LD_VAR 0 3
8492: PUSH
8493: LD_INT 26
8495: EQUAL
8496: IFFALSE 8506
// sEarthquake := true ;
8498: LD_ADDR_EXP 84
8502: PUSH
8503: LD_INT 1
8505: ST_TO_ADDR
// if p3 = 27 then
8506: LD_VAR 0 3
8510: PUSH
8511: LD_INT 27
8513: EQUAL
8514: IFFALSE 8524
// sAI := true ;
8516: LD_ADDR_EXP 85
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// if p3 = 28 then
8524: LD_VAR 0 3
8528: PUSH
8529: LD_INT 28
8531: EQUAL
8532: IFFALSE 8542
// sCargo := true ;
8534: LD_ADDR_EXP 88
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// if p3 = 29 then
8542: LD_VAR 0 3
8546: PUSH
8547: LD_INT 29
8549: EQUAL
8550: IFFALSE 8560
// sDLaser := true ;
8552: LD_ADDR_EXP 89
8556: PUSH
8557: LD_INT 1
8559: ST_TO_ADDR
// if p3 = 30 then
8560: LD_VAR 0 3
8564: PUSH
8565: LD_INT 30
8567: EQUAL
8568: IFFALSE 8578
// sExchange := true ;
8570: LD_ADDR_EXP 90
8574: PUSH
8575: LD_INT 1
8577: ST_TO_ADDR
// if p3 = 31 then
8578: LD_VAR 0 3
8582: PUSH
8583: LD_INT 31
8585: EQUAL
8586: IFFALSE 8596
// sFac := true ;
8588: LD_ADDR_EXP 91
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// if p3 = 32 then
8596: LD_VAR 0 3
8600: PUSH
8601: LD_INT 32
8603: EQUAL
8604: IFFALSE 8614
// sPower := true ;
8606: LD_ADDR_EXP 92
8610: PUSH
8611: LD_INT 1
8613: ST_TO_ADDR
// if p3 = 33 then
8614: LD_VAR 0 3
8618: PUSH
8619: LD_INT 33
8621: EQUAL
8622: IFFALSE 8632
// sRandom := true ;
8624: LD_ADDR_EXP 93
8628: PUSH
8629: LD_INT 1
8631: ST_TO_ADDR
// if p3 = 34 then
8632: LD_VAR 0 3
8636: PUSH
8637: LD_INT 34
8639: EQUAL
8640: IFFALSE 8650
// sShield := true ;
8642: LD_ADDR_EXP 94
8646: PUSH
8647: LD_INT 1
8649: ST_TO_ADDR
// if p3 = 35 then
8650: LD_VAR 0 3
8654: PUSH
8655: LD_INT 35
8657: EQUAL
8658: IFFALSE 8668
// sTime := true ;
8660: LD_ADDR_EXP 95
8664: PUSH
8665: LD_INT 1
8667: ST_TO_ADDR
// if p3 = 36 then
8668: LD_VAR 0 3
8672: PUSH
8673: LD_INT 36
8675: EQUAL
8676: IFFALSE 8686
// sTools := true ;
8678: LD_ADDR_EXP 96
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// if p3 = 101 then
8686: LD_VAR 0 3
8690: PUSH
8691: LD_INT 101
8693: EQUAL
8694: IFFALSE 8704
// sSold := true ;
8696: LD_ADDR_EXP 61
8700: PUSH
8701: LD_INT 1
8703: ST_TO_ADDR
// if p3 = 102 then
8704: LD_VAR 0 3
8708: PUSH
8709: LD_INT 102
8711: EQUAL
8712: IFFALSE 8722
// sDiff := true ;
8714: LD_ADDR_EXP 62
8718: PUSH
8719: LD_INT 1
8721: ST_TO_ADDR
// if p3 = 103 then
8722: LD_VAR 0 3
8726: PUSH
8727: LD_INT 103
8729: EQUAL
8730: IFFALSE 8740
// sFog := true ;
8732: LD_ADDR_EXP 65
8736: PUSH
8737: LD_INT 1
8739: ST_TO_ADDR
// if p3 = 104 then
8740: LD_VAR 0 3
8744: PUSH
8745: LD_INT 104
8747: EQUAL
8748: IFFALSE 8758
// sReset := true ;
8750: LD_ADDR_EXP 66
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// if p3 = 105 then
8758: LD_VAR 0 3
8762: PUSH
8763: LD_INT 105
8765: EQUAL
8766: IFFALSE 8776
// sSun := true ;
8768: LD_ADDR_EXP 67
8772: PUSH
8773: LD_INT 1
8775: ST_TO_ADDR
// if p3 = 106 then
8776: LD_VAR 0 3
8780: PUSH
8781: LD_INT 106
8783: EQUAL
8784: IFFALSE 8794
// sTiger := true ;
8786: LD_ADDR_EXP 63
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
// if p3 = 107 then
8794: LD_VAR 0 3
8798: PUSH
8799: LD_INT 107
8801: EQUAL
8802: IFFALSE 8812
// sBomb := true ;
8804: LD_ADDR_EXP 64
8808: PUSH
8809: LD_INT 1
8811: ST_TO_ADDR
// if p3 = 108 then
8812: LD_VAR 0 3
8816: PUSH
8817: LD_INT 108
8819: EQUAL
8820: IFFALSE 8830
// sWound := true ;
8822: LD_ADDR_EXP 72
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// if p3 = 109 then
8830: LD_VAR 0 3
8834: PUSH
8835: LD_INT 109
8837: EQUAL
8838: IFFALSE 8848
// sBetray := true ;
8840: LD_ADDR_EXP 76
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// if p3 = 110 then
8848: LD_VAR 0 3
8852: PUSH
8853: LD_INT 110
8855: EQUAL
8856: IFFALSE 8866
// sContamin := true ;
8858: LD_ADDR_EXP 77
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// if p3 = 111 then
8866: LD_VAR 0 3
8870: PUSH
8871: LD_INT 111
8873: EQUAL
8874: IFFALSE 8884
// sOil := true ;
8876: LD_ADDR_EXP 79
8880: PUSH
8881: LD_INT 1
8883: ST_TO_ADDR
// if p3 = 112 then
8884: LD_VAR 0 3
8888: PUSH
8889: LD_INT 112
8891: EQUAL
8892: IFFALSE 8902
// sStu := true ;
8894: LD_ADDR_EXP 83
8898: PUSH
8899: LD_INT 1
8901: ST_TO_ADDR
// if p3 = 113 then
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 113
8909: EQUAL
8910: IFFALSE 8920
// sBazooka := true ;
8912: LD_ADDR_EXP 86
8916: PUSH
8917: LD_INT 1
8919: ST_TO_ADDR
// if p3 = 114 then
8920: LD_VAR 0 3
8924: PUSH
8925: LD_INT 114
8927: EQUAL
8928: IFFALSE 8938
// sMortar := true ;
8930: LD_ADDR_EXP 87
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// if p3 = 115 then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 115
8945: EQUAL
8946: IFFALSE 8956
// sRanger := true ;
8948: LD_ADDR_EXP 97
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// end ; if p2 = 101 then
8956: LD_VAR 0 2
8960: PUSH
8961: LD_INT 101
8963: EQUAL
8964: IFFALSE 9167
// begin case p3 of 1 :
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: DOUBLE
8974: EQUAL
8975: IFTRUE 8979
8977: GO 8986
8979: POP
// hHackUnlimitedResources ; 2 :
8980: CALL 19261 0 0
8984: GO 9167
8986: LD_INT 2
8988: DOUBLE
8989: EQUAL
8990: IFTRUE 8994
8992: GO 9001
8994: POP
// hHackSetLevel10 ; 3 :
8995: CALL 19394 0 0
8999: GO 9167
9001: LD_INT 3
9003: DOUBLE
9004: EQUAL
9005: IFTRUE 9009
9007: GO 9016
9009: POP
// hHackSetLevel10YourUnits ; 4 :
9010: CALL 19479 0 0
9014: GO 9167
9016: LD_INT 4
9018: DOUBLE
9019: EQUAL
9020: IFTRUE 9024
9022: GO 9046
9024: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
9025: LD_VAR 0 4
9029: PPUSH
9030: LD_VAR 0 5
9034: PPUSH
9035: LD_VAR 0 6
9039: PPUSH
9040: CALL 19569 0 3
9044: GO 9167
9046: LD_INT 5
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9061
9054: POP
// hHackSpawnVehicle ; 6 :
9055: CALL 19630 0 0
9059: GO 9167
9061: LD_INT 6
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9076
9069: POP
// hHackInvincible ; 7 :
9070: CALL 20176 0 0
9074: GO 9167
9076: LD_INT 7
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9091
9084: POP
// hHackInvisible ; 8 :
9085: CALL 20287 0 0
9089: GO 9167
9091: LD_INT 8
9093: DOUBLE
9094: EQUAL
9095: IFTRUE 9099
9097: GO 9106
9099: POP
// hHackChangeYourSide ; 9 :
9100: CALL 20344 0 0
9104: GO 9167
9106: LD_INT 9
9108: DOUBLE
9109: EQUAL
9110: IFTRUE 9114
9112: GO 9121
9114: POP
// hHackChangeUnitSide ; 10 :
9115: CALL 20386 0 0
9119: GO 9167
9121: LD_INT 10
9123: DOUBLE
9124: EQUAL
9125: IFTRUE 9129
9127: GO 9136
9129: POP
// hHackFog ; 11 :
9130: CALL 20487 0 0
9134: GO 9167
9136: LD_INT 11
9138: DOUBLE
9139: EQUAL
9140: IFTRUE 9144
9142: GO 9151
9144: POP
// hHackApeman ; 12 :
9145: CALL 20502 0 0
9149: GO 9167
9151: LD_INT 12
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9166
9159: POP
// hHackBoom ; end ;
9160: CALL 20587 0 0
9164: GO 9167
9166: POP
// end ; end ;
9167: PPOPN 6
9169: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9170: GO 9172
9172: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9173: LD_STRING initStreamRollete();
9175: PPUSH
9176: CALL_OW 559
// InitStreamMode ;
9180: CALL 9189 0 0
// DefineStreamItems ( ) ;
9184: CALL 9629 0 0
// end ;
9188: END
// function InitStreamMode ; begin
9189: LD_INT 0
9191: PPUSH
// streamModeActive := false ;
9192: LD_ADDR_EXP 44
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// normalCounter := 36 ;
9200: LD_ADDR_EXP 45
9204: PUSH
9205: LD_INT 36
9207: ST_TO_ADDR
// hardcoreCounter := 16 ;
9208: LD_ADDR_EXP 46
9212: PUSH
9213: LD_INT 16
9215: ST_TO_ADDR
// sRocket := false ;
9216: LD_ADDR_EXP 49
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sSpeed := false ;
9224: LD_ADDR_EXP 48
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sEngine := false ;
9232: LD_ADDR_EXP 50
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sSpec := false ;
9240: LD_ADDR_EXP 47
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sLevel := false ;
9248: LD_ADDR_EXP 51
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sArmoury := false ;
9256: LD_ADDR_EXP 52
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sRadar := false ;
9264: LD_ADDR_EXP 53
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sBunker := false ;
9272: LD_ADDR_EXP 54
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sHack := false ;
9280: LD_ADDR_EXP 55
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sFire := false ;
9288: LD_ADDR_EXP 56
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sRefresh := false ;
9296: LD_ADDR_EXP 57
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sExp := false ;
9304: LD_ADDR_EXP 58
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sDepot := false ;
9312: LD_ADDR_EXP 59
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sFlag := false ;
9320: LD_ADDR_EXP 60
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sKamikadze := false ;
9328: LD_ADDR_EXP 68
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sTroll := false ;
9336: LD_ADDR_EXP 69
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sSlow := false ;
9344: LD_ADDR_EXP 70
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sLack := false ;
9352: LD_ADDR_EXP 71
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sTank := false ;
9360: LD_ADDR_EXP 73
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sRemote := false ;
9368: LD_ADDR_EXP 74
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sPowell := false ;
9376: LD_ADDR_EXP 75
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sTeleport := false ;
9384: LD_ADDR_EXP 78
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sOilTower := false ;
9392: LD_ADDR_EXP 80
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sShovel := false ;
9400: LD_ADDR_EXP 81
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sSheik := false ;
9408: LD_ADDR_EXP 82
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sEarthquake := false ;
9416: LD_ADDR_EXP 84
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sAI := false ;
9424: LD_ADDR_EXP 85
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sCargo := false ;
9432: LD_ADDR_EXP 88
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sDLaser := false ;
9440: LD_ADDR_EXP 89
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sExchange := false ;
9448: LD_ADDR_EXP 90
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sFac := false ;
9456: LD_ADDR_EXP 91
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sPower := false ;
9464: LD_ADDR_EXP 92
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sRandom := false ;
9472: LD_ADDR_EXP 93
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sShield := false ;
9480: LD_ADDR_EXP 94
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sTime := false ;
9488: LD_ADDR_EXP 95
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sTools := false ;
9496: LD_ADDR_EXP 96
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sSold := false ;
9504: LD_ADDR_EXP 61
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sDiff := false ;
9512: LD_ADDR_EXP 62
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sFog := false ;
9520: LD_ADDR_EXP 65
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sReset := false ;
9528: LD_ADDR_EXP 66
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sSun := false ;
9536: LD_ADDR_EXP 67
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sTiger := false ;
9544: LD_ADDR_EXP 63
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sBomb := false ;
9552: LD_ADDR_EXP 64
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sWound := false ;
9560: LD_ADDR_EXP 72
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sBetray := false ;
9568: LD_ADDR_EXP 76
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sContamin := false ;
9576: LD_ADDR_EXP 77
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sOil := false ;
9584: LD_ADDR_EXP 79
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// sStu := false ;
9592: LD_ADDR_EXP 83
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// sBazooka := false ;
9600: LD_ADDR_EXP 86
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// sMortar := false ;
9608: LD_ADDR_EXP 87
9612: PUSH
9613: LD_INT 0
9615: ST_TO_ADDR
// sRanger := false ;
9616: LD_ADDR_EXP 97
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// end ;
9624: LD_VAR 0 1
9628: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9629: LD_INT 0
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
// result := [ ] ;
9636: LD_ADDR_VAR 0 1
9640: PUSH
9641: EMPTY
9642: ST_TO_ADDR
// if campaign_id = 1 then
9643: LD_OWVAR 69
9647: PUSH
9648: LD_INT 1
9650: EQUAL
9651: IFFALSE 12589
// begin case mission_number of 1 :
9653: LD_OWVAR 70
9657: PUSH
9658: LD_INT 1
9660: DOUBLE
9661: EQUAL
9662: IFTRUE 9666
9664: GO 9730
9666: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9667: LD_ADDR_VAR 0 1
9671: PUSH
9672: LD_INT 2
9674: PUSH
9675: LD_INT 4
9677: PUSH
9678: LD_INT 11
9680: PUSH
9681: LD_INT 12
9683: PUSH
9684: LD_INT 15
9686: PUSH
9687: LD_INT 16
9689: PUSH
9690: LD_INT 22
9692: PUSH
9693: LD_INT 23
9695: PUSH
9696: LD_INT 26
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 101
9712: PUSH
9713: LD_INT 102
9715: PUSH
9716: LD_INT 106
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: ST_TO_ADDR
9728: GO 12587
9730: LD_INT 2
9732: DOUBLE
9733: EQUAL
9734: IFTRUE 9738
9736: GO 9810
9738: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9739: LD_ADDR_VAR 0 1
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 4
9749: PUSH
9750: LD_INT 11
9752: PUSH
9753: LD_INT 12
9755: PUSH
9756: LD_INT 15
9758: PUSH
9759: LD_INT 16
9761: PUSH
9762: LD_INT 22
9764: PUSH
9765: LD_INT 23
9767: PUSH
9768: LD_INT 26
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 101
9784: PUSH
9785: LD_INT 102
9787: PUSH
9788: LD_INT 105
9790: PUSH
9791: LD_INT 106
9793: PUSH
9794: LD_INT 108
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: ST_TO_ADDR
9808: GO 12587
9810: LD_INT 3
9812: DOUBLE
9813: EQUAL
9814: IFTRUE 9818
9816: GO 9894
9818: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9819: LD_ADDR_VAR 0 1
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: LD_INT 4
9829: PUSH
9830: LD_INT 5
9832: PUSH
9833: LD_INT 11
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 15
9841: PUSH
9842: LD_INT 16
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 26
9850: PUSH
9851: LD_INT 36
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 101
9868: PUSH
9869: LD_INT 102
9871: PUSH
9872: LD_INT 105
9874: PUSH
9875: LD_INT 106
9877: PUSH
9878: LD_INT 108
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: ST_TO_ADDR
9892: GO 12587
9894: LD_INT 4
9896: DOUBLE
9897: EQUAL
9898: IFTRUE 9902
9900: GO 9986
9902: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9903: LD_ADDR_VAR 0 1
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: LD_INT 4
9913: PUSH
9914: LD_INT 5
9916: PUSH
9917: LD_INT 8
9919: PUSH
9920: LD_INT 11
9922: PUSH
9923: LD_INT 12
9925: PUSH
9926: LD_INT 15
9928: PUSH
9929: LD_INT 16
9931: PUSH
9932: LD_INT 22
9934: PUSH
9935: LD_INT 23
9937: PUSH
9938: LD_INT 26
9940: PUSH
9941: LD_INT 36
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 101
9960: PUSH
9961: LD_INT 102
9963: PUSH
9964: LD_INT 105
9966: PUSH
9967: LD_INT 106
9969: PUSH
9970: LD_INT 108
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: ST_TO_ADDR
9984: GO 12587
9986: LD_INT 5
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 9994
9992: GO 10094
9994: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9995: LD_ADDR_VAR 0 1
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 4
10005: PUSH
10006: LD_INT 5
10008: PUSH
10009: LD_INT 6
10011: PUSH
10012: LD_INT 8
10014: PUSH
10015: LD_INT 11
10017: PUSH
10018: LD_INT 12
10020: PUSH
10021: LD_INT 15
10023: PUSH
10024: LD_INT 16
10026: PUSH
10027: LD_INT 22
10029: PUSH
10030: LD_INT 23
10032: PUSH
10033: LD_INT 25
10035: PUSH
10036: LD_INT 26
10038: PUSH
10039: LD_INT 36
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 101
10060: PUSH
10061: LD_INT 102
10063: PUSH
10064: LD_INT 105
10066: PUSH
10067: LD_INT 106
10069: PUSH
10070: LD_INT 108
10072: PUSH
10073: LD_INT 109
10075: PUSH
10076: LD_INT 112
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: ST_TO_ADDR
10092: GO 12587
10094: LD_INT 6
10096: DOUBLE
10097: EQUAL
10098: IFTRUE 10102
10100: GO 10222
10102: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10103: LD_ADDR_VAR 0 1
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: LD_INT 4
10113: PUSH
10114: LD_INT 5
10116: PUSH
10117: LD_INT 6
10119: PUSH
10120: LD_INT 8
10122: PUSH
10123: LD_INT 11
10125: PUSH
10126: LD_INT 12
10128: PUSH
10129: LD_INT 15
10131: PUSH
10132: LD_INT 16
10134: PUSH
10135: LD_INT 20
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 22
10143: PUSH
10144: LD_INT 23
10146: PUSH
10147: LD_INT 25
10149: PUSH
10150: LD_INT 26
10152: PUSH
10153: LD_INT 30
10155: PUSH
10156: LD_INT 31
10158: PUSH
10159: LD_INT 32
10161: PUSH
10162: LD_INT 36
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 101
10188: PUSH
10189: LD_INT 102
10191: PUSH
10192: LD_INT 105
10194: PUSH
10195: LD_INT 106
10197: PUSH
10198: LD_INT 108
10200: PUSH
10201: LD_INT 109
10203: PUSH
10204: LD_INT 112
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: ST_TO_ADDR
10220: GO 12587
10222: LD_INT 7
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10330
10230: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10231: LD_ADDR_VAR 0 1
10235: PUSH
10236: LD_INT 2
10238: PUSH
10239: LD_INT 4
10241: PUSH
10242: LD_INT 5
10244: PUSH
10245: LD_INT 7
10247: PUSH
10248: LD_INT 11
10250: PUSH
10251: LD_INT 12
10253: PUSH
10254: LD_INT 15
10256: PUSH
10257: LD_INT 16
10259: PUSH
10260: LD_INT 20
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 23
10271: PUSH
10272: LD_INT 25
10274: PUSH
10275: LD_INT 26
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 101
10296: PUSH
10297: LD_INT 102
10299: PUSH
10300: LD_INT 103
10302: PUSH
10303: LD_INT 105
10305: PUSH
10306: LD_INT 106
10308: PUSH
10309: LD_INT 108
10311: PUSH
10312: LD_INT 112
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: ST_TO_ADDR
10328: GO 12587
10330: LD_INT 8
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10466
10338: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10339: LD_ADDR_VAR 0 1
10343: PUSH
10344: LD_INT 2
10346: PUSH
10347: LD_INT 4
10349: PUSH
10350: LD_INT 5
10352: PUSH
10353: LD_INT 6
10355: PUSH
10356: LD_INT 7
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: LD_INT 11
10364: PUSH
10365: LD_INT 12
10367: PUSH
10368: LD_INT 15
10370: PUSH
10371: LD_INT 16
10373: PUSH
10374: LD_INT 20
10376: PUSH
10377: LD_INT 21
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 23
10385: PUSH
10386: LD_INT 25
10388: PUSH
10389: LD_INT 26
10391: PUSH
10392: LD_INT 30
10394: PUSH
10395: LD_INT 31
10397: PUSH
10398: LD_INT 32
10400: PUSH
10401: LD_INT 36
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 101
10428: PUSH
10429: LD_INT 102
10431: PUSH
10432: LD_INT 103
10434: PUSH
10435: LD_INT 105
10437: PUSH
10438: LD_INT 106
10440: PUSH
10441: LD_INT 108
10443: PUSH
10444: LD_INT 109
10446: PUSH
10447: LD_INT 112
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: ST_TO_ADDR
10464: GO 12587
10466: LD_INT 9
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10610
10474: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10475: LD_ADDR_VAR 0 1
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: LD_INT 6
10491: PUSH
10492: LD_INT 7
10494: PUSH
10495: LD_INT 8
10497: PUSH
10498: LD_INT 11
10500: PUSH
10501: LD_INT 12
10503: PUSH
10504: LD_INT 15
10506: PUSH
10507: LD_INT 16
10509: PUSH
10510: LD_INT 20
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 22
10518: PUSH
10519: LD_INT 23
10521: PUSH
10522: LD_INT 25
10524: PUSH
10525: LD_INT 26
10527: PUSH
10528: LD_INT 28
10530: PUSH
10531: LD_INT 30
10533: PUSH
10534: LD_INT 31
10536: PUSH
10537: LD_INT 32
10539: PUSH
10540: LD_INT 36
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 101
10568: PUSH
10569: LD_INT 102
10571: PUSH
10572: LD_INT 103
10574: PUSH
10575: LD_INT 105
10577: PUSH
10578: LD_INT 106
10580: PUSH
10581: LD_INT 108
10583: PUSH
10584: LD_INT 109
10586: PUSH
10587: LD_INT 112
10589: PUSH
10590: LD_INT 114
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: ST_TO_ADDR
10608: GO 12587
10610: LD_INT 10
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10802
10618: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10619: LD_ADDR_VAR 0 1
10623: PUSH
10624: LD_INT 2
10626: PUSH
10627: LD_INT 4
10629: PUSH
10630: LD_INT 5
10632: PUSH
10633: LD_INT 6
10635: PUSH
10636: LD_INT 7
10638: PUSH
10639: LD_INT 8
10641: PUSH
10642: LD_INT 9
10644: PUSH
10645: LD_INT 10
10647: PUSH
10648: LD_INT 11
10650: PUSH
10651: LD_INT 12
10653: PUSH
10654: LD_INT 13
10656: PUSH
10657: LD_INT 14
10659: PUSH
10660: LD_INT 15
10662: PUSH
10663: LD_INT 16
10665: PUSH
10666: LD_INT 17
10668: PUSH
10669: LD_INT 18
10671: PUSH
10672: LD_INT 19
10674: PUSH
10675: LD_INT 20
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 22
10683: PUSH
10684: LD_INT 23
10686: PUSH
10687: LD_INT 24
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 26
10695: PUSH
10696: LD_INT 28
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 31
10704: PUSH
10705: LD_INT 32
10707: PUSH
10708: LD_INT 36
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 101
10744: PUSH
10745: LD_INT 102
10747: PUSH
10748: LD_INT 103
10750: PUSH
10751: LD_INT 104
10753: PUSH
10754: LD_INT 105
10756: PUSH
10757: LD_INT 106
10759: PUSH
10760: LD_INT 107
10762: PUSH
10763: LD_INT 108
10765: PUSH
10766: LD_INT 109
10768: PUSH
10769: LD_INT 110
10771: PUSH
10772: LD_INT 111
10774: PUSH
10775: LD_INT 112
10777: PUSH
10778: LD_INT 114
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
10800: GO 12587
10802: LD_INT 11
10804: DOUBLE
10805: EQUAL
10806: IFTRUE 10810
10808: GO 11002
10810: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 4
10824: PUSH
10825: LD_INT 5
10827: PUSH
10828: LD_INT 6
10830: PUSH
10831: LD_INT 7
10833: PUSH
10834: LD_INT 8
10836: PUSH
10837: LD_INT 9
10839: PUSH
10840: LD_INT 10
10842: PUSH
10843: LD_INT 11
10845: PUSH
10846: LD_INT 12
10848: PUSH
10849: LD_INT 13
10851: PUSH
10852: LD_INT 14
10854: PUSH
10855: LD_INT 15
10857: PUSH
10858: LD_INT 16
10860: PUSH
10861: LD_INT 17
10863: PUSH
10864: LD_INT 18
10866: PUSH
10867: LD_INT 19
10869: PUSH
10870: LD_INT 20
10872: PUSH
10873: LD_INT 21
10875: PUSH
10876: LD_INT 22
10878: PUSH
10879: LD_INT 23
10881: PUSH
10882: LD_INT 24
10884: PUSH
10885: LD_INT 25
10887: PUSH
10888: LD_INT 26
10890: PUSH
10891: LD_INT 28
10893: PUSH
10894: LD_INT 30
10896: PUSH
10897: LD_INT 31
10899: PUSH
10900: LD_INT 32
10902: PUSH
10903: LD_INT 34
10905: PUSH
10906: LD_INT 36
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 101
10944: PUSH
10945: LD_INT 102
10947: PUSH
10948: LD_INT 103
10950: PUSH
10951: LD_INT 104
10953: PUSH
10954: LD_INT 105
10956: PUSH
10957: LD_INT 106
10959: PUSH
10960: LD_INT 107
10962: PUSH
10963: LD_INT 108
10965: PUSH
10966: LD_INT 109
10968: PUSH
10969: LD_INT 110
10971: PUSH
10972: LD_INT 111
10974: PUSH
10975: LD_INT 112
10977: PUSH
10978: LD_INT 114
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: ST_TO_ADDR
11000: GO 12587
11002: LD_INT 12
11004: DOUBLE
11005: EQUAL
11006: IFTRUE 11010
11008: GO 11218
11010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11011: LD_ADDR_VAR 0 1
11015: PUSH
11016: LD_INT 1
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 3
11024: PUSH
11025: LD_INT 4
11027: PUSH
11028: LD_INT 5
11030: PUSH
11031: LD_INT 6
11033: PUSH
11034: LD_INT 7
11036: PUSH
11037: LD_INT 8
11039: PUSH
11040: LD_INT 9
11042: PUSH
11043: LD_INT 10
11045: PUSH
11046: LD_INT 11
11048: PUSH
11049: LD_INT 12
11051: PUSH
11052: LD_INT 13
11054: PUSH
11055: LD_INT 14
11057: PUSH
11058: LD_INT 15
11060: PUSH
11061: LD_INT 16
11063: PUSH
11064: LD_INT 17
11066: PUSH
11067: LD_INT 18
11069: PUSH
11070: LD_INT 19
11072: PUSH
11073: LD_INT 20
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 22
11081: PUSH
11082: LD_INT 23
11084: PUSH
11085: LD_INT 24
11087: PUSH
11088: LD_INT 25
11090: PUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 27
11096: PUSH
11097: LD_INT 28
11099: PUSH
11100: LD_INT 30
11102: PUSH
11103: LD_INT 31
11105: PUSH
11106: LD_INT 32
11108: PUSH
11109: LD_INT 33
11111: PUSH
11112: LD_INT 34
11114: PUSH
11115: LD_INT 36
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 101
11156: PUSH
11157: LD_INT 102
11159: PUSH
11160: LD_INT 103
11162: PUSH
11163: LD_INT 104
11165: PUSH
11166: LD_INT 105
11168: PUSH
11169: LD_INT 106
11171: PUSH
11172: LD_INT 107
11174: PUSH
11175: LD_INT 108
11177: PUSH
11178: LD_INT 109
11180: PUSH
11181: LD_INT 110
11183: PUSH
11184: LD_INT 111
11186: PUSH
11187: LD_INT 112
11189: PUSH
11190: LD_INT 113
11192: PUSH
11193: LD_INT 114
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: ST_TO_ADDR
11216: GO 12587
11218: LD_INT 13
11220: DOUBLE
11221: EQUAL
11222: IFTRUE 11226
11224: GO 11422
11226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11227: LD_ADDR_VAR 0 1
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: LD_INT 5
11246: PUSH
11247: LD_INT 8
11249: PUSH
11250: LD_INT 9
11252: PUSH
11253: LD_INT 10
11255: PUSH
11256: LD_INT 11
11258: PUSH
11259: LD_INT 12
11261: PUSH
11262: LD_INT 14
11264: PUSH
11265: LD_INT 15
11267: PUSH
11268: LD_INT 16
11270: PUSH
11271: LD_INT 17
11273: PUSH
11274: LD_INT 18
11276: PUSH
11277: LD_INT 19
11279: PUSH
11280: LD_INT 20
11282: PUSH
11283: LD_INT 21
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_INT 23
11291: PUSH
11292: LD_INT 24
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 26
11300: PUSH
11301: LD_INT 27
11303: PUSH
11304: LD_INT 28
11306: PUSH
11307: LD_INT 30
11309: PUSH
11310: LD_INT 31
11312: PUSH
11313: LD_INT 32
11315: PUSH
11316: LD_INT 33
11318: PUSH
11319: LD_INT 34
11321: PUSH
11322: LD_INT 36
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 101
11360: PUSH
11361: LD_INT 102
11363: PUSH
11364: LD_INT 103
11366: PUSH
11367: LD_INT 104
11369: PUSH
11370: LD_INT 105
11372: PUSH
11373: LD_INT 106
11375: PUSH
11376: LD_INT 107
11378: PUSH
11379: LD_INT 108
11381: PUSH
11382: LD_INT 109
11384: PUSH
11385: LD_INT 110
11387: PUSH
11388: LD_INT 111
11390: PUSH
11391: LD_INT 112
11393: PUSH
11394: LD_INT 113
11396: PUSH
11397: LD_INT 114
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: ST_TO_ADDR
11420: GO 12587
11422: LD_INT 14
11424: DOUBLE
11425: EQUAL
11426: IFTRUE 11430
11428: GO 11642
11430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11431: LD_ADDR_VAR 0 1
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: LD_INT 2
11441: PUSH
11442: LD_INT 3
11444: PUSH
11445: LD_INT 4
11447: PUSH
11448: LD_INT 5
11450: PUSH
11451: LD_INT 6
11453: PUSH
11454: LD_INT 7
11456: PUSH
11457: LD_INT 8
11459: PUSH
11460: LD_INT 9
11462: PUSH
11463: LD_INT 10
11465: PUSH
11466: LD_INT 11
11468: PUSH
11469: LD_INT 12
11471: PUSH
11472: LD_INT 13
11474: PUSH
11475: LD_INT 14
11477: PUSH
11478: LD_INT 15
11480: PUSH
11481: LD_INT 16
11483: PUSH
11484: LD_INT 17
11486: PUSH
11487: LD_INT 18
11489: PUSH
11490: LD_INT 19
11492: PUSH
11493: LD_INT 20
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_INT 23
11504: PUSH
11505: LD_INT 24
11507: PUSH
11508: LD_INT 25
11510: PUSH
11511: LD_INT 26
11513: PUSH
11514: LD_INT 27
11516: PUSH
11517: LD_INT 28
11519: PUSH
11520: LD_INT 29
11522: PUSH
11523: LD_INT 30
11525: PUSH
11526: LD_INT 31
11528: PUSH
11529: LD_INT 32
11531: PUSH
11532: LD_INT 33
11534: PUSH
11535: LD_INT 34
11537: PUSH
11538: LD_INT 36
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 101
11580: PUSH
11581: LD_INT 102
11583: PUSH
11584: LD_INT 103
11586: PUSH
11587: LD_INT 104
11589: PUSH
11590: LD_INT 105
11592: PUSH
11593: LD_INT 106
11595: PUSH
11596: LD_INT 107
11598: PUSH
11599: LD_INT 108
11601: PUSH
11602: LD_INT 109
11604: PUSH
11605: LD_INT 110
11607: PUSH
11608: LD_INT 111
11610: PUSH
11611: LD_INT 112
11613: PUSH
11614: LD_INT 113
11616: PUSH
11617: LD_INT 114
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: ST_TO_ADDR
11640: GO 12587
11642: LD_INT 15
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11862
11650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11651: LD_ADDR_VAR 0 1
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: LD_INT 2
11661: PUSH
11662: LD_INT 3
11664: PUSH
11665: LD_INT 4
11667: PUSH
11668: LD_INT 5
11670: PUSH
11671: LD_INT 6
11673: PUSH
11674: LD_INT 7
11676: PUSH
11677: LD_INT 8
11679: PUSH
11680: LD_INT 9
11682: PUSH
11683: LD_INT 10
11685: PUSH
11686: LD_INT 11
11688: PUSH
11689: LD_INT 12
11691: PUSH
11692: LD_INT 13
11694: PUSH
11695: LD_INT 14
11697: PUSH
11698: LD_INT 15
11700: PUSH
11701: LD_INT 16
11703: PUSH
11704: LD_INT 17
11706: PUSH
11707: LD_INT 18
11709: PUSH
11710: LD_INT 19
11712: PUSH
11713: LD_INT 20
11715: PUSH
11716: LD_INT 21
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_INT 23
11724: PUSH
11725: LD_INT 24
11727: PUSH
11728: LD_INT 25
11730: PUSH
11731: LD_INT 26
11733: PUSH
11734: LD_INT 27
11736: PUSH
11737: LD_INT 28
11739: PUSH
11740: LD_INT 29
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: LD_INT 31
11748: PUSH
11749: LD_INT 32
11751: PUSH
11752: LD_INT 33
11754: PUSH
11755: LD_INT 34
11757: PUSH
11758: LD_INT 36
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 101
11800: PUSH
11801: LD_INT 102
11803: PUSH
11804: LD_INT 103
11806: PUSH
11807: LD_INT 104
11809: PUSH
11810: LD_INT 105
11812: PUSH
11813: LD_INT 106
11815: PUSH
11816: LD_INT 107
11818: PUSH
11819: LD_INT 108
11821: PUSH
11822: LD_INT 109
11824: PUSH
11825: LD_INT 110
11827: PUSH
11828: LD_INT 111
11830: PUSH
11831: LD_INT 112
11833: PUSH
11834: LD_INT 113
11836: PUSH
11837: LD_INT 114
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: ST_TO_ADDR
11860: GO 12587
11862: LD_INT 16
11864: DOUBLE
11865: EQUAL
11866: IFTRUE 11870
11868: GO 11994
11870: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11871: LD_ADDR_VAR 0 1
11875: PUSH
11876: LD_INT 2
11878: PUSH
11879: LD_INT 4
11881: PUSH
11882: LD_INT 5
11884: PUSH
11885: LD_INT 7
11887: PUSH
11888: LD_INT 11
11890: PUSH
11891: LD_INT 12
11893: PUSH
11894: LD_INT 15
11896: PUSH
11897: LD_INT 16
11899: PUSH
11900: LD_INT 20
11902: PUSH
11903: LD_INT 21
11905: PUSH
11906: LD_INT 22
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 25
11914: PUSH
11915: LD_INT 26
11917: PUSH
11918: LD_INT 30
11920: PUSH
11921: LD_INT 31
11923: PUSH
11924: LD_INT 32
11926: PUSH
11927: LD_INT 33
11929: PUSH
11930: LD_INT 34
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 101
11956: PUSH
11957: LD_INT 102
11959: PUSH
11960: LD_INT 103
11962: PUSH
11963: LD_INT 106
11965: PUSH
11966: LD_INT 108
11968: PUSH
11969: LD_INT 112
11971: PUSH
11972: LD_INT 113
11974: PUSH
11975: LD_INT 114
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: ST_TO_ADDR
11992: GO 12587
11994: LD_INT 17
11996: DOUBLE
11997: EQUAL
11998: IFTRUE 12002
12000: GO 12214
12002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12003: LD_ADDR_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: LD_INT 3
12016: PUSH
12017: LD_INT 4
12019: PUSH
12020: LD_INT 5
12022: PUSH
12023: LD_INT 6
12025: PUSH
12026: LD_INT 7
12028: PUSH
12029: LD_INT 8
12031: PUSH
12032: LD_INT 9
12034: PUSH
12035: LD_INT 10
12037: PUSH
12038: LD_INT 11
12040: PUSH
12041: LD_INT 12
12043: PUSH
12044: LD_INT 13
12046: PUSH
12047: LD_INT 14
12049: PUSH
12050: LD_INT 15
12052: PUSH
12053: LD_INT 16
12055: PUSH
12056: LD_INT 17
12058: PUSH
12059: LD_INT 18
12061: PUSH
12062: LD_INT 19
12064: PUSH
12065: LD_INT 20
12067: PUSH
12068: LD_INT 21
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_INT 23
12076: PUSH
12077: LD_INT 24
12079: PUSH
12080: LD_INT 25
12082: PUSH
12083: LD_INT 26
12085: PUSH
12086: LD_INT 27
12088: PUSH
12089: LD_INT 28
12091: PUSH
12092: LD_INT 29
12094: PUSH
12095: LD_INT 30
12097: PUSH
12098: LD_INT 31
12100: PUSH
12101: LD_INT 32
12103: PUSH
12104: LD_INT 33
12106: PUSH
12107: LD_INT 34
12109: PUSH
12110: LD_INT 36
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 101
12152: PUSH
12153: LD_INT 102
12155: PUSH
12156: LD_INT 103
12158: PUSH
12159: LD_INT 104
12161: PUSH
12162: LD_INT 105
12164: PUSH
12165: LD_INT 106
12167: PUSH
12168: LD_INT 107
12170: PUSH
12171: LD_INT 108
12173: PUSH
12174: LD_INT 109
12176: PUSH
12177: LD_INT 110
12179: PUSH
12180: LD_INT 111
12182: PUSH
12183: LD_INT 112
12185: PUSH
12186: LD_INT 113
12188: PUSH
12189: LD_INT 114
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: ST_TO_ADDR
12212: GO 12587
12214: LD_INT 18
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12358
12222: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12223: LD_ADDR_VAR 0 1
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 4
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: LD_INT 7
12239: PUSH
12240: LD_INT 11
12242: PUSH
12243: LD_INT 12
12245: PUSH
12246: LD_INT 15
12248: PUSH
12249: LD_INT 16
12251: PUSH
12252: LD_INT 20
12254: PUSH
12255: LD_INT 21
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 23
12263: PUSH
12264: LD_INT 25
12266: PUSH
12267: LD_INT 26
12269: PUSH
12270: LD_INT 30
12272: PUSH
12273: LD_INT 31
12275: PUSH
12276: LD_INT 32
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 34
12284: PUSH
12285: LD_INT 35
12287: PUSH
12288: LD_INT 36
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 101
12316: PUSH
12317: LD_INT 102
12319: PUSH
12320: LD_INT 103
12322: PUSH
12323: LD_INT 106
12325: PUSH
12326: LD_INT 108
12328: PUSH
12329: LD_INT 112
12331: PUSH
12332: LD_INT 113
12334: PUSH
12335: LD_INT 114
12337: PUSH
12338: LD_INT 115
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: ST_TO_ADDR
12356: GO 12587
12358: LD_INT 19
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12586
12366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12367: LD_ADDR_VAR 0 1
12371: PUSH
12372: LD_INT 1
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: LD_INT 3
12380: PUSH
12381: LD_INT 4
12383: PUSH
12384: LD_INT 5
12386: PUSH
12387: LD_INT 6
12389: PUSH
12390: LD_INT 7
12392: PUSH
12393: LD_INT 8
12395: PUSH
12396: LD_INT 9
12398: PUSH
12399: LD_INT 10
12401: PUSH
12402: LD_INT 11
12404: PUSH
12405: LD_INT 12
12407: PUSH
12408: LD_INT 13
12410: PUSH
12411: LD_INT 14
12413: PUSH
12414: LD_INT 15
12416: PUSH
12417: LD_INT 16
12419: PUSH
12420: LD_INT 17
12422: PUSH
12423: LD_INT 18
12425: PUSH
12426: LD_INT 19
12428: PUSH
12429: LD_INT 20
12431: PUSH
12432: LD_INT 21
12434: PUSH
12435: LD_INT 22
12437: PUSH
12438: LD_INT 23
12440: PUSH
12441: LD_INT 24
12443: PUSH
12444: LD_INT 25
12446: PUSH
12447: LD_INT 26
12449: PUSH
12450: LD_INT 27
12452: PUSH
12453: LD_INT 28
12455: PUSH
12456: LD_INT 29
12458: PUSH
12459: LD_INT 30
12461: PUSH
12462: LD_INT 31
12464: PUSH
12465: LD_INT 32
12467: PUSH
12468: LD_INT 33
12470: PUSH
12471: LD_INT 34
12473: PUSH
12474: LD_INT 35
12476: PUSH
12477: LD_INT 36
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 101
12520: PUSH
12521: LD_INT 102
12523: PUSH
12524: LD_INT 103
12526: PUSH
12527: LD_INT 104
12529: PUSH
12530: LD_INT 105
12532: PUSH
12533: LD_INT 106
12535: PUSH
12536: LD_INT 107
12538: PUSH
12539: LD_INT 108
12541: PUSH
12542: LD_INT 109
12544: PUSH
12545: LD_INT 110
12547: PUSH
12548: LD_INT 111
12550: PUSH
12551: LD_INT 112
12553: PUSH
12554: LD_INT 113
12556: PUSH
12557: LD_INT 114
12559: PUSH
12560: LD_INT 115
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: ST_TO_ADDR
12584: GO 12587
12586: POP
// end else
12587: GO 12806
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12589: LD_ADDR_VAR 0 1
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: LD_INT 3
12602: PUSH
12603: LD_INT 4
12605: PUSH
12606: LD_INT 5
12608: PUSH
12609: LD_INT 6
12611: PUSH
12612: LD_INT 7
12614: PUSH
12615: LD_INT 8
12617: PUSH
12618: LD_INT 9
12620: PUSH
12621: LD_INT 10
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: LD_INT 12
12629: PUSH
12630: LD_INT 13
12632: PUSH
12633: LD_INT 14
12635: PUSH
12636: LD_INT 15
12638: PUSH
12639: LD_INT 16
12641: PUSH
12642: LD_INT 17
12644: PUSH
12645: LD_INT 18
12647: PUSH
12648: LD_INT 19
12650: PUSH
12651: LD_INT 20
12653: PUSH
12654: LD_INT 21
12656: PUSH
12657: LD_INT 22
12659: PUSH
12660: LD_INT 23
12662: PUSH
12663: LD_INT 24
12665: PUSH
12666: LD_INT 25
12668: PUSH
12669: LD_INT 26
12671: PUSH
12672: LD_INT 27
12674: PUSH
12675: LD_INT 28
12677: PUSH
12678: LD_INT 29
12680: PUSH
12681: LD_INT 30
12683: PUSH
12684: LD_INT 31
12686: PUSH
12687: LD_INT 32
12689: PUSH
12690: LD_INT 33
12692: PUSH
12693: LD_INT 34
12695: PUSH
12696: LD_INT 35
12698: PUSH
12699: LD_INT 36
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 101
12742: PUSH
12743: LD_INT 102
12745: PUSH
12746: LD_INT 103
12748: PUSH
12749: LD_INT 104
12751: PUSH
12752: LD_INT 105
12754: PUSH
12755: LD_INT 106
12757: PUSH
12758: LD_INT 107
12760: PUSH
12761: LD_INT 108
12763: PUSH
12764: LD_INT 109
12766: PUSH
12767: LD_INT 110
12769: PUSH
12770: LD_INT 111
12772: PUSH
12773: LD_INT 112
12775: PUSH
12776: LD_INT 113
12778: PUSH
12779: LD_INT 114
12781: PUSH
12782: LD_INT 115
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: ST_TO_ADDR
// if result then
12806: LD_VAR 0 1
12810: IFFALSE 13099
// begin normal :=  ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_STRING 
12819: ST_TO_ADDR
// hardcore :=  ;
12820: LD_ADDR_VAR 0 4
12824: PUSH
12825: LD_STRING 
12827: ST_TO_ADDR
// for i = 1 to normalCounter do
12828: LD_ADDR_VAR 0 5
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_EXP 45
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12945
// begin tmp := 0 ;
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_STRING 0
12853: ST_TO_ADDR
// if result [ 1 ] then
12854: LD_VAR 0 1
12858: PUSH
12859: LD_INT 1
12861: ARRAY
12862: IFFALSE 12927
// if result [ 1 ] [ 1 ] = i then
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PUSH
12877: LD_VAR 0 5
12881: EQUAL
12882: IFFALSE 12927
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12884: LD_ADDR_VAR 0 1
12888: PUSH
12889: LD_VAR 0 1
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_VAR 0 1
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: PPUSH
12906: LD_INT 1
12908: PPUSH
12909: CALL_OW 3
12913: PPUSH
12914: CALL_OW 1
12918: ST_TO_ADDR
// tmp := 1 ;
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: LD_STRING 1
12926: ST_TO_ADDR
// end ; normal := normal & tmp ;
12927: LD_ADDR_VAR 0 3
12931: PUSH
12932: LD_VAR 0 3
12936: PUSH
12937: LD_VAR 0 2
12941: STR
12942: ST_TO_ADDR
// end ;
12943: GO 12843
12945: POP
12946: POP
// for i = 1 to hardcoreCounter do
12947: LD_ADDR_VAR 0 5
12951: PUSH
12952: DOUBLE
12953: LD_INT 1
12955: DEC
12956: ST_TO_ADDR
12957: LD_EXP 46
12961: PUSH
12962: FOR_TO
12963: IFFALSE 13068
// begin tmp := 0 ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_STRING 0
12972: ST_TO_ADDR
// if result [ 2 ] then
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 2
12980: ARRAY
12981: IFFALSE 13050
// if result [ 2 ] [ 1 ] = 100 + i then
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 2
12990: ARRAY
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PUSH
12996: LD_INT 100
12998: PUSH
12999: LD_VAR 0 5
13003: PLUS
13004: EQUAL
13005: IFFALSE 13050
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13007: LD_ADDR_VAR 0 1
13011: PUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: LD_INT 2
13019: PPUSH
13020: LD_VAR 0 1
13024: PUSH
13025: LD_INT 2
13027: ARRAY
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL_OW 3
13036: PPUSH
13037: CALL_OW 1
13041: ST_TO_ADDR
// tmp := 1 ;
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_STRING 1
13049: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13050: LD_ADDR_VAR 0 4
13054: PUSH
13055: LD_VAR 0 4
13059: PUSH
13060: LD_VAR 0 2
13064: STR
13065: ST_TO_ADDR
// end ;
13066: GO 12962
13068: POP
13069: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13070: LD_STRING getStreamItemsFromMission("
13072: PUSH
13073: LD_VAR 0 3
13077: STR
13078: PUSH
13079: LD_STRING ","
13081: STR
13082: PUSH
13083: LD_VAR 0 4
13087: STR
13088: PUSH
13089: LD_STRING ")
13091: STR
13092: PPUSH
13093: CALL_OW 559
// end else
13097: GO 13106
// ToLua ( getStreamItemsFromMission("","") ) ;
13099: LD_STRING getStreamItemsFromMission("","")
13101: PPUSH
13102: CALL_OW 559
// end ;
13106: LD_VAR 0 1
13110: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13111: LD_EXP 44
13115: PUSH
13116: LD_EXP 49
13120: AND
13121: IFFALSE 13245
13123: GO 13125
13125: DISABLE
13126: LD_INT 0
13128: PPUSH
13129: PPUSH
// begin enable ;
13130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13131: LD_ADDR_VAR 0 2
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_OWVAR 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 34
13153: PUSH
13154: LD_INT 7
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 34
13163: PUSH
13164: LD_INT 45
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 34
13173: PUSH
13174: LD_INT 28
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 34
13183: PUSH
13184: LD_INT 47
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: ST_TO_ADDR
// if not tmp then
13207: LD_VAR 0 2
13211: NOT
13212: IFFALSE 13216
// exit ;
13214: GO 13245
// for i in tmp do
13216: LD_ADDR_VAR 0 1
13220: PUSH
13221: LD_VAR 0 2
13225: PUSH
13226: FOR_IN
13227: IFFALSE 13243
// begin SetLives ( i , 0 ) ;
13229: LD_VAR 0 1
13233: PPUSH
13234: LD_INT 0
13236: PPUSH
13237: CALL_OW 234
// end ;
13241: GO 13226
13243: POP
13244: POP
// end ;
13245: PPOPN 2
13247: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13248: LD_EXP 44
13252: PUSH
13253: LD_EXP 50
13257: AND
13258: IFFALSE 13342
13260: GO 13262
13262: DISABLE
13263: LD_INT 0
13265: PPUSH
13266: PPUSH
// begin enable ;
13267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13268: LD_ADDR_VAR 0 2
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_OWVAR 2
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 32
13287: PUSH
13288: LD_INT 3
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: ST_TO_ADDR
// if not tmp then
13304: LD_VAR 0 2
13308: NOT
13309: IFFALSE 13313
// exit ;
13311: GO 13342
// for i in tmp do
13313: LD_ADDR_VAR 0 1
13317: PUSH
13318: LD_VAR 0 2
13322: PUSH
13323: FOR_IN
13324: IFFALSE 13340
// begin SetLives ( i , 0 ) ;
13326: LD_VAR 0 1
13330: PPUSH
13331: LD_INT 0
13333: PPUSH
13334: CALL_OW 234
// end ;
13338: GO 13323
13340: POP
13341: POP
// end ;
13342: PPOPN 2
13344: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13345: LD_EXP 44
13349: PUSH
13350: LD_EXP 47
13354: AND
13355: IFFALSE 13448
13357: GO 13359
13359: DISABLE
13360: LD_INT 0
13362: PPUSH
// begin enable ;
13363: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13364: LD_ADDR_VAR 0 1
13368: PUSH
13369: LD_INT 22
13371: PUSH
13372: LD_OWVAR 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: LD_INT 25
13386: PUSH
13387: LD_INT 5
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 25
13396: PUSH
13397: LD_INT 9
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 25
13406: PUSH
13407: LD_INT 8
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PPUSH
13424: CALL_OW 69
13428: PUSH
13429: FOR_IN
13430: IFFALSE 13446
// begin SetClass ( i , 1 ) ;
13432: LD_VAR 0 1
13436: PPUSH
13437: LD_INT 1
13439: PPUSH
13440: CALL_OW 336
// end ;
13444: GO 13429
13446: POP
13447: POP
// end ;
13448: PPOPN 1
13450: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13451: LD_EXP 44
13455: PUSH
13456: LD_EXP 48
13460: AND
13461: PUSH
13462: LD_OWVAR 65
13466: PUSH
13467: LD_INT 7
13469: LESS
13470: AND
13471: IFFALSE 13485
13473: GO 13475
13475: DISABLE
// begin enable ;
13476: ENABLE
// game_speed := 7 ;
13477: LD_ADDR_OWVAR 65
13481: PUSH
13482: LD_INT 7
13484: ST_TO_ADDR
// end ;
13485: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13486: LD_EXP 44
13490: PUSH
13491: LD_EXP 51
13495: AND
13496: IFFALSE 13698
13498: GO 13500
13500: DISABLE
13501: LD_INT 0
13503: PPUSH
13504: PPUSH
13505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: LD_INT 81
13513: PUSH
13514: LD_OWVAR 2
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 21
13525: PUSH
13526: LD_INT 1
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: ST_TO_ADDR
// if not tmp then
13542: LD_VAR 0 3
13546: NOT
13547: IFFALSE 13551
// exit ;
13549: GO 13698
// if tmp > 5 then
13551: LD_VAR 0 3
13555: PUSH
13556: LD_INT 5
13558: GREATER
13559: IFFALSE 13571
// k := 5 else
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_INT 5
13568: ST_TO_ADDR
13569: GO 13581
// k := tmp ;
13571: LD_ADDR_VAR 0 2
13575: PUSH
13576: LD_VAR 0 3
13580: ST_TO_ADDR
// for i := 1 to k do
13581: LD_ADDR_VAR 0 1
13585: PUSH
13586: DOUBLE
13587: LD_INT 1
13589: DEC
13590: ST_TO_ADDR
13591: LD_VAR 0 2
13595: PUSH
13596: FOR_TO
13597: IFFALSE 13696
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13599: LD_VAR 0 3
13603: PUSH
13604: LD_VAR 0 1
13608: ARRAY
13609: PPUSH
13610: LD_VAR 0 1
13614: PUSH
13615: LD_INT 4
13617: MOD
13618: PUSH
13619: LD_INT 1
13621: PLUS
13622: PPUSH
13623: CALL_OW 259
13627: PUSH
13628: LD_INT 10
13630: LESS
13631: IFFALSE 13694
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13633: LD_VAR 0 3
13637: PUSH
13638: LD_VAR 0 1
13642: ARRAY
13643: PPUSH
13644: LD_VAR 0 1
13648: PUSH
13649: LD_INT 4
13651: MOD
13652: PUSH
13653: LD_INT 1
13655: PLUS
13656: PPUSH
13657: LD_VAR 0 3
13661: PUSH
13662: LD_VAR 0 1
13666: ARRAY
13667: PPUSH
13668: LD_VAR 0 1
13672: PUSH
13673: LD_INT 4
13675: MOD
13676: PUSH
13677: LD_INT 1
13679: PLUS
13680: PPUSH
13681: CALL_OW 259
13685: PUSH
13686: LD_INT 1
13688: PLUS
13689: PPUSH
13690: CALL_OW 237
13694: GO 13596
13696: POP
13697: POP
// end ;
13698: PPOPN 3
13700: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13701: LD_EXP 44
13705: PUSH
13706: LD_EXP 52
13710: AND
13711: IFFALSE 13731
13713: GO 13715
13715: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13716: LD_INT 4
13718: PPUSH
13719: LD_OWVAR 2
13723: PPUSH
13724: LD_INT 0
13726: PPUSH
13727: CALL_OW 324
13731: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13732: LD_EXP 44
13736: PUSH
13737: LD_EXP 81
13741: AND
13742: IFFALSE 13762
13744: GO 13746
13746: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13747: LD_INT 19
13749: PPUSH
13750: LD_OWVAR 2
13754: PPUSH
13755: LD_INT 0
13757: PPUSH
13758: CALL_OW 324
13762: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13763: LD_EXP 44
13767: PUSH
13768: LD_EXP 53
13772: AND
13773: IFFALSE 13875
13775: GO 13777
13777: DISABLE
13778: LD_INT 0
13780: PPUSH
13781: PPUSH
// begin enable ;
13782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_INT 22
13790: PUSH
13791: LD_OWVAR 2
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 2
13802: PUSH
13803: LD_INT 34
13805: PUSH
13806: LD_INT 11
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 34
13815: PUSH
13816: LD_INT 30
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 69
13836: ST_TO_ADDR
// if not tmp then
13837: LD_VAR 0 2
13841: NOT
13842: IFFALSE 13846
// exit ;
13844: GO 13875
// for i in tmp do
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: LD_VAR 0 2
13855: PUSH
13856: FOR_IN
13857: IFFALSE 13873
// begin SetLives ( i , 0 ) ;
13859: LD_VAR 0 1
13863: PPUSH
13864: LD_INT 0
13866: PPUSH
13867: CALL_OW 234
// end ;
13871: GO 13856
13873: POP
13874: POP
// end ;
13875: PPOPN 2
13877: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13878: LD_EXP 44
13882: PUSH
13883: LD_EXP 54
13887: AND
13888: IFFALSE 13908
13890: GO 13892
13892: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13893: LD_INT 32
13895: PPUSH
13896: LD_OWVAR 2
13900: PPUSH
13901: LD_INT 0
13903: PPUSH
13904: CALL_OW 324
13908: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13909: LD_EXP 44
13913: PUSH
13914: LD_EXP 55
13918: AND
13919: IFFALSE 14100
13921: GO 13923
13923: DISABLE
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
13928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13929: LD_ADDR_VAR 0 2
13933: PUSH
13934: LD_INT 22
13936: PUSH
13937: LD_OWVAR 2
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 33
13948: PUSH
13949: LD_INT 3
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: ST_TO_ADDR
// if not tmp then
13965: LD_VAR 0 2
13969: NOT
13970: IFFALSE 13974
// exit ;
13972: GO 14100
// side := 0 ;
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// for i := 1 to 8 do
13982: LD_ADDR_VAR 0 1
13986: PUSH
13987: DOUBLE
13988: LD_INT 1
13990: DEC
13991: ST_TO_ADDR
13992: LD_INT 8
13994: PUSH
13995: FOR_TO
13996: IFFALSE 14044
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13998: LD_OWVAR 2
14002: PUSH
14003: LD_VAR 0 1
14007: NONEQUAL
14008: PUSH
14009: LD_OWVAR 2
14013: PPUSH
14014: LD_VAR 0 1
14018: PPUSH
14019: CALL_OW 81
14023: PUSH
14024: LD_INT 2
14026: EQUAL
14027: AND
14028: IFFALSE 14042
// begin side := i ;
14030: LD_ADDR_VAR 0 3
14034: PUSH
14035: LD_VAR 0 1
14039: ST_TO_ADDR
// break ;
14040: GO 14044
// end ;
14042: GO 13995
14044: POP
14045: POP
// if not side then
14046: LD_VAR 0 3
14050: NOT
14051: IFFALSE 14055
// exit ;
14053: GO 14100
// for i := 1 to tmp do
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: DOUBLE
14061: LD_INT 1
14063: DEC
14064: ST_TO_ADDR
14065: LD_VAR 0 2
14069: PUSH
14070: FOR_TO
14071: IFFALSE 14098
// if Prob ( 60 ) then
14073: LD_INT 60
14075: PPUSH
14076: CALL_OW 13
14080: IFFALSE 14096
// SetSide ( i , side ) ;
14082: LD_VAR 0 1
14086: PPUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: CALL_OW 235
14096: GO 14070
14098: POP
14099: POP
// end ;
14100: PPOPN 3
14102: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14103: LD_EXP 44
14107: PUSH
14108: LD_EXP 57
14112: AND
14113: IFFALSE 14232
14115: GO 14117
14117: DISABLE
14118: LD_INT 0
14120: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14121: LD_ADDR_VAR 0 1
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_OWVAR 2
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 23
14153: PUSH
14154: LD_INT 0
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: PUSH
14175: FOR_IN
14176: IFFALSE 14230
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 257
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: LD_INT 3
14196: PUSH
14197: LD_INT 4
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: IN
14206: IFFALSE 14228
// SetClass ( un , rand ( 1 , 4 ) ) ;
14208: LD_VAR 0 1
14212: PPUSH
14213: LD_INT 1
14215: PPUSH
14216: LD_INT 4
14218: PPUSH
14219: CALL_OW 12
14223: PPUSH
14224: CALL_OW 336
14228: GO 14175
14230: POP
14231: POP
// end ;
14232: PPOPN 1
14234: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14235: LD_EXP 44
14239: PUSH
14240: LD_EXP 56
14244: AND
14245: IFFALSE 14324
14247: GO 14249
14249: DISABLE
14250: LD_INT 0
14252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14253: LD_ADDR_VAR 0 1
14257: PUSH
14258: LD_INT 22
14260: PUSH
14261: LD_OWVAR 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 21
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 69
14288: ST_TO_ADDR
// if not tmp then
14289: LD_VAR 0 1
14293: NOT
14294: IFFALSE 14298
// exit ;
14296: GO 14324
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14298: LD_VAR 0 1
14302: PUSH
14303: LD_INT 1
14305: PPUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: CALL_OW 12
14315: ARRAY
14316: PPUSH
14317: LD_INT 100
14319: PPUSH
14320: CALL_OW 234
// end ;
14324: PPOPN 1
14326: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14327: LD_EXP 44
14331: PUSH
14332: LD_EXP 58
14336: AND
14337: IFFALSE 14435
14339: GO 14341
14341: DISABLE
14342: LD_INT 0
14344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14345: LD_ADDR_VAR 0 1
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_OWVAR 2
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 21
14364: PUSH
14365: LD_INT 1
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// if not tmp then
14381: LD_VAR 0 1
14385: NOT
14386: IFFALSE 14390
// exit ;
14388: GO 14435
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14390: LD_VAR 0 1
14394: PUSH
14395: LD_INT 1
14397: PPUSH
14398: LD_VAR 0 1
14402: PPUSH
14403: CALL_OW 12
14407: ARRAY
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: LD_INT 4
14414: PPUSH
14415: CALL_OW 12
14419: PPUSH
14420: LD_INT 3000
14422: PPUSH
14423: LD_INT 9000
14425: PPUSH
14426: CALL_OW 12
14430: PPUSH
14431: CALL_OW 492
// end ;
14435: PPOPN 1
14437: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14438: LD_EXP 44
14442: PUSH
14443: LD_EXP 59
14447: AND
14448: IFFALSE 14468
14450: GO 14452
14452: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14453: LD_INT 1
14455: PPUSH
14456: LD_OWVAR 2
14460: PPUSH
14461: LD_INT 0
14463: PPUSH
14464: CALL_OW 324
14468: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14469: LD_EXP 44
14473: PUSH
14474: LD_EXP 60
14478: AND
14479: IFFALSE 14562
14481: GO 14483
14483: DISABLE
14484: LD_INT 0
14486: PPUSH
14487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14488: LD_ADDR_VAR 0 2
14492: PUSH
14493: LD_INT 22
14495: PUSH
14496: LD_OWVAR 2
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 21
14507: PUSH
14508: LD_INT 3
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 69
14523: ST_TO_ADDR
// if not tmp then
14524: LD_VAR 0 2
14528: NOT
14529: IFFALSE 14533
// exit ;
14531: GO 14562
// for i in tmp do
14533: LD_ADDR_VAR 0 1
14537: PUSH
14538: LD_VAR 0 2
14542: PUSH
14543: FOR_IN
14544: IFFALSE 14560
// SetBLevel ( i , 10 ) ;
14546: LD_VAR 0 1
14550: PPUSH
14551: LD_INT 10
14553: PPUSH
14554: CALL_OW 241
14558: GO 14543
14560: POP
14561: POP
// end ;
14562: PPOPN 2
14564: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14565: LD_EXP 44
14569: PUSH
14570: LD_EXP 61
14574: AND
14575: IFFALSE 14686
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14585: LD_ADDR_VAR 0 3
14589: PUSH
14590: LD_INT 22
14592: PUSH
14593: LD_OWVAR 2
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PPUSH
14616: CALL_OW 69
14620: ST_TO_ADDR
// if not tmp then
14621: LD_VAR 0 3
14625: NOT
14626: IFFALSE 14630
// exit ;
14628: GO 14686
// un := tmp [ rand ( 1 , tmp ) ] ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: LD_INT 1
14642: PPUSH
14643: LD_VAR 0 3
14647: PPUSH
14648: CALL_OW 12
14652: ARRAY
14653: ST_TO_ADDR
// if Crawls ( un ) then
14654: LD_VAR 0 2
14658: PPUSH
14659: CALL_OW 318
14663: IFFALSE 14674
// ComWalk ( un ) ;
14665: LD_VAR 0 2
14669: PPUSH
14670: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14674: LD_VAR 0 2
14678: PPUSH
14679: LD_INT 5
14681: PPUSH
14682: CALL_OW 336
// end ;
14686: PPOPN 3
14688: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14689: LD_EXP 44
14693: PUSH
14694: LD_EXP 62
14698: AND
14699: PUSH
14700: LD_OWVAR 67
14704: PUSH
14705: LD_INT 3
14707: LESS
14708: AND
14709: IFFALSE 14728
14711: GO 14713
14713: DISABLE
// Difficulty := Difficulty + 1 ;
14714: LD_ADDR_OWVAR 67
14718: PUSH
14719: LD_OWVAR 67
14723: PUSH
14724: LD_INT 1
14726: PLUS
14727: ST_TO_ADDR
14728: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14729: LD_EXP 44
14733: PUSH
14734: LD_EXP 63
14738: AND
14739: IFFALSE 14842
14741: GO 14743
14743: DISABLE
14744: LD_INT 0
14746: PPUSH
// begin for i := 1 to 5 do
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: DOUBLE
14753: LD_INT 1
14755: DEC
14756: ST_TO_ADDR
14757: LD_INT 5
14759: PUSH
14760: FOR_TO
14761: IFFALSE 14840
// begin uc_nation := nation_nature ;
14763: LD_ADDR_OWVAR 21
14767: PUSH
14768: LD_INT 0
14770: ST_TO_ADDR
// uc_side := 0 ;
14771: LD_ADDR_OWVAR 20
14775: PUSH
14776: LD_INT 0
14778: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14779: LD_ADDR_OWVAR 29
14783: PUSH
14784: LD_INT 12
14786: PUSH
14787: LD_INT 12
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: ST_TO_ADDR
// hc_agressivity := 20 ;
14794: LD_ADDR_OWVAR 35
14798: PUSH
14799: LD_INT 20
14801: ST_TO_ADDR
// hc_class := class_tiger ;
14802: LD_ADDR_OWVAR 28
14806: PUSH
14807: LD_INT 14
14809: ST_TO_ADDR
// hc_gallery :=  ;
14810: LD_ADDR_OWVAR 33
14814: PUSH
14815: LD_STRING 
14817: ST_TO_ADDR
// hc_name :=  ;
14818: LD_ADDR_OWVAR 26
14822: PUSH
14823: LD_STRING 
14825: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14826: CALL_OW 44
14830: PPUSH
14831: LD_INT 0
14833: PPUSH
14834: CALL_OW 51
// end ;
14838: GO 14760
14840: POP
14841: POP
// end ;
14842: PPOPN 1
14844: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14845: LD_EXP 44
14849: PUSH
14850: LD_EXP 64
14854: AND
14855: IFFALSE 14864
14857: GO 14859
14859: DISABLE
// StreamSibBomb ;
14860: CALL 14865 0 0
14864: END
// export function StreamSibBomb ; var i , x , y ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
14869: PPUSH
14870: PPUSH
// result := false ;
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_INT 0
14878: ST_TO_ADDR
// for i := 1 to 16 do
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: DOUBLE
14885: LD_INT 1
14887: DEC
14888: ST_TO_ADDR
14889: LD_INT 16
14891: PUSH
14892: FOR_TO
14893: IFFALSE 15092
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14895: LD_ADDR_VAR 0 3
14899: PUSH
14900: LD_INT 10
14902: PUSH
14903: LD_INT 20
14905: PUSH
14906: LD_INT 30
14908: PUSH
14909: LD_INT 40
14911: PUSH
14912: LD_INT 50
14914: PUSH
14915: LD_INT 60
14917: PUSH
14918: LD_INT 70
14920: PUSH
14921: LD_INT 80
14923: PUSH
14924: LD_INT 90
14926: PUSH
14927: LD_INT 100
14929: PUSH
14930: LD_INT 110
14932: PUSH
14933: LD_INT 120
14935: PUSH
14936: LD_INT 130
14938: PUSH
14939: LD_INT 140
14941: PUSH
14942: LD_INT 150
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 15
14967: PPUSH
14968: CALL_OW 12
14972: ARRAY
14973: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14974: LD_ADDR_VAR 0 4
14978: PUSH
14979: LD_INT 10
14981: PUSH
14982: LD_INT 20
14984: PUSH
14985: LD_INT 30
14987: PUSH
14988: LD_INT 40
14990: PUSH
14991: LD_INT 50
14993: PUSH
14994: LD_INT 60
14996: PUSH
14997: LD_INT 70
14999: PUSH
15000: LD_INT 80
15002: PUSH
15003: LD_INT 90
15005: PUSH
15006: LD_INT 100
15008: PUSH
15009: LD_INT 110
15011: PUSH
15012: LD_INT 120
15014: PUSH
15015: LD_INT 130
15017: PUSH
15018: LD_INT 140
15020: PUSH
15021: LD_INT 150
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 1
15043: PPUSH
15044: LD_INT 15
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// if ValidHex ( x , y ) then
15053: LD_VAR 0 3
15057: PPUSH
15058: LD_VAR 0 4
15062: PPUSH
15063: CALL_OW 488
15067: IFFALSE 15090
// begin result := [ x , y ] ;
15069: LD_ADDR_VAR 0 1
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_VAR 0 4
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: ST_TO_ADDR
// break ;
15088: GO 15092
// end ; end ;
15090: GO 14892
15092: POP
15093: POP
// if result then
15094: LD_VAR 0 1
15098: IFFALSE 15158
// begin ToLua ( playSibBomb() ) ;
15100: LD_STRING playSibBomb()
15102: PPUSH
15103: CALL_OW 559
// wait ( 0 0$14 ) ;
15107: LD_INT 490
15109: PPUSH
15110: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15114: LD_VAR 0 1
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 2
15130: ARRAY
15131: PPUSH
15132: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15136: LD_VAR 0 1
15140: PUSH
15141: LD_INT 1
15143: ARRAY
15144: PPUSH
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 2
15152: ARRAY
15153: PPUSH
15154: CALL_OW 429
// end ; end ;
15158: LD_VAR 0 1
15162: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15163: LD_EXP 44
15167: PUSH
15168: LD_EXP 66
15172: AND
15173: IFFALSE 15185
15175: GO 15177
15177: DISABLE
// YouLost (  ) ;
15178: LD_STRING 
15180: PPUSH
15181: CALL_OW 104
15185: END
// every 0 0$1 trigger StreamModeActive and sFog do
15186: LD_EXP 44
15190: PUSH
15191: LD_EXP 65
15195: AND
15196: IFFALSE 15210
15198: GO 15200
15200: DISABLE
// FogOff ( your_side ) ;
15201: LD_OWVAR 2
15205: PPUSH
15206: CALL_OW 344
15210: END
// every 0 0$1 trigger StreamModeActive and sSun do
15211: LD_EXP 44
15215: PUSH
15216: LD_EXP 67
15220: AND
15221: IFFALSE 15249
15223: GO 15225
15225: DISABLE
// begin solar_recharge_percent := 0 ;
15226: LD_ADDR_OWVAR 79
15230: PUSH
15231: LD_INT 0
15233: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15234: LD_INT 10500
15236: PPUSH
15237: CALL_OW 67
// solar_recharge_percent := 100 ;
15241: LD_ADDR_OWVAR 79
15245: PUSH
15246: LD_INT 100
15248: ST_TO_ADDR
// end ;
15249: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15250: LD_EXP 44
15254: PUSH
15255: LD_EXP 68
15259: AND
15260: IFFALSE 15499
15262: GO 15264
15264: DISABLE
15265: LD_INT 0
15267: PPUSH
15268: PPUSH
15269: PPUSH
// begin tmp := [ ] ;
15270: LD_ADDR_VAR 0 3
15274: PUSH
15275: EMPTY
15276: ST_TO_ADDR
// for i := 1 to 6 do
15277: LD_ADDR_VAR 0 1
15281: PUSH
15282: DOUBLE
15283: LD_INT 1
15285: DEC
15286: ST_TO_ADDR
15287: LD_INT 6
15289: PUSH
15290: FOR_TO
15291: IFFALSE 15396
// begin uc_nation := nation_nature ;
15293: LD_ADDR_OWVAR 21
15297: PUSH
15298: LD_INT 0
15300: ST_TO_ADDR
// uc_side := 0 ;
15301: LD_ADDR_OWVAR 20
15305: PUSH
15306: LD_INT 0
15308: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15309: LD_ADDR_OWVAR 29
15313: PUSH
15314: LD_INT 12
15316: PUSH
15317: LD_INT 12
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: ST_TO_ADDR
// hc_agressivity := 20 ;
15324: LD_ADDR_OWVAR 35
15328: PUSH
15329: LD_INT 20
15331: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15332: LD_ADDR_OWVAR 28
15336: PUSH
15337: LD_INT 17
15339: ST_TO_ADDR
// hc_gallery :=  ;
15340: LD_ADDR_OWVAR 33
15344: PUSH
15345: LD_STRING 
15347: ST_TO_ADDR
// hc_name :=  ;
15348: LD_ADDR_OWVAR 26
15352: PUSH
15353: LD_STRING 
15355: ST_TO_ADDR
// un := CreateHuman ;
15356: LD_ADDR_VAR 0 2
15360: PUSH
15361: CALL_OW 44
15365: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15366: LD_VAR 0 2
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 51
// tmp := tmp ^ un ;
15378: LD_ADDR_VAR 0 3
15382: PUSH
15383: LD_VAR 0 3
15387: PUSH
15388: LD_VAR 0 2
15392: ADD
15393: ST_TO_ADDR
// end ;
15394: GO 15290
15396: POP
15397: POP
// repeat wait ( 0 0$1 ) ;
15398: LD_INT 35
15400: PPUSH
15401: CALL_OW 67
// for un in tmp do
15405: LD_ADDR_VAR 0 2
15409: PUSH
15410: LD_VAR 0 3
15414: PUSH
15415: FOR_IN
15416: IFFALSE 15490
// begin if IsDead ( un ) then
15418: LD_VAR 0 2
15422: PPUSH
15423: CALL_OW 301
15427: IFFALSE 15447
// begin tmp := tmp diff un ;
15429: LD_ADDR_VAR 0 3
15433: PUSH
15434: LD_VAR 0 3
15438: PUSH
15439: LD_VAR 0 2
15443: DIFF
15444: ST_TO_ADDR
// continue ;
15445: GO 15415
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15447: LD_VAR 0 2
15451: PPUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 22
15457: PUSH
15458: LD_INT 0
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: PPUSH
15474: LD_VAR 0 2
15478: PPUSH
15479: CALL_OW 74
15483: PPUSH
15484: CALL_OW 115
// end ;
15488: GO 15415
15490: POP
15491: POP
// until not tmp ;
15492: LD_VAR 0 3
15496: NOT
15497: IFFALSE 15398
// end ;
15499: PPOPN 3
15501: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15502: LD_EXP 44
15506: PUSH
15507: LD_EXP 69
15511: AND
15512: IFFALSE 15566
15514: GO 15516
15516: DISABLE
// begin ToLua ( displayTroll(); ) ;
15517: LD_STRING displayTroll();
15519: PPUSH
15520: CALL_OW 559
// wait ( 3 3$00 ) ;
15524: LD_INT 6300
15526: PPUSH
15527: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15531: LD_STRING hideTroll();
15533: PPUSH
15534: CALL_OW 559
// wait ( 1 1$00 ) ;
15538: LD_INT 2100
15540: PPUSH
15541: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15545: LD_STRING displayTroll();
15547: PPUSH
15548: CALL_OW 559
// wait ( 1 1$00 ) ;
15552: LD_INT 2100
15554: PPUSH
15555: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15559: LD_STRING hideTroll();
15561: PPUSH
15562: CALL_OW 559
// end ;
15566: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15567: LD_EXP 44
15571: PUSH
15572: LD_EXP 70
15576: AND
15577: IFFALSE 15640
15579: GO 15581
15581: DISABLE
15582: LD_INT 0
15584: PPUSH
// begin p := 0 ;
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_INT 0
15592: ST_TO_ADDR
// repeat game_speed := 1 ;
15593: LD_ADDR_OWVAR 65
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15601: LD_INT 35
15603: PPUSH
15604: CALL_OW 67
// p := p + 1 ;
15608: LD_ADDR_VAR 0 1
15612: PUSH
15613: LD_VAR 0 1
15617: PUSH
15618: LD_INT 1
15620: PLUS
15621: ST_TO_ADDR
// until p >= 60 ;
15622: LD_VAR 0 1
15626: PUSH
15627: LD_INT 60
15629: GREATEREQUAL
15630: IFFALSE 15593
// game_speed := 4 ;
15632: LD_ADDR_OWVAR 65
15636: PUSH
15637: LD_INT 4
15639: ST_TO_ADDR
// end ;
15640: PPOPN 1
15642: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15643: LD_EXP 44
15647: PUSH
15648: LD_EXP 71
15652: AND
15653: IFFALSE 15799
15655: GO 15657
15657: DISABLE
15658: LD_INT 0
15660: PPUSH
15661: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15662: LD_ADDR_VAR 0 1
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_OWVAR 2
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 0
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 30
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: ST_TO_ADDR
// if not depot then
15716: LD_VAR 0 1
15720: NOT
15721: IFFALSE 15725
// exit ;
15723: GO 15799
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15725: LD_ADDR_VAR 0 2
15729: PUSH
15730: LD_VAR 0 1
15734: PUSH
15735: LD_INT 1
15737: PPUSH
15738: LD_VAR 0 1
15742: PPUSH
15743: CALL_OW 12
15747: ARRAY
15748: PPUSH
15749: CALL_OW 274
15753: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15754: LD_VAR 0 2
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: LD_INT 0
15764: PPUSH
15765: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15769: LD_VAR 0 2
15773: PPUSH
15774: LD_INT 2
15776: PPUSH
15777: LD_INT 0
15779: PPUSH
15780: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15784: LD_VAR 0 2
15788: PPUSH
15789: LD_INT 3
15791: PPUSH
15792: LD_INT 0
15794: PPUSH
15795: CALL_OW 277
// end ;
15799: PPOPN 2
15801: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15802: LD_EXP 44
15806: PUSH
15807: LD_EXP 72
15811: AND
15812: IFFALSE 15909
15814: GO 15816
15816: DISABLE
15817: LD_INT 0
15819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15820: LD_ADDR_VAR 0 1
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_OWVAR 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 21
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 3
15849: PUSH
15850: LD_INT 23
15852: PUSH
15853: LD_INT 0
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 69
15873: ST_TO_ADDR
// if not tmp then
15874: LD_VAR 0 1
15878: NOT
15879: IFFALSE 15883
// exit ;
15881: GO 15909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 12
15900: ARRAY
15901: PPUSH
15902: LD_INT 200
15904: PPUSH
15905: CALL_OW 234
// end ;
15909: PPOPN 1
15911: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15912: LD_EXP 44
15916: PUSH
15917: LD_EXP 73
15921: AND
15922: IFFALSE 16001
15924: GO 15926
15926: DISABLE
15927: LD_INT 0
15929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15930: LD_ADDR_VAR 0 1
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_OWVAR 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PPUSH
15961: CALL_OW 69
15965: ST_TO_ADDR
// if not tmp then
15966: LD_VAR 0 1
15970: NOT
15971: IFFALSE 15975
// exit ;
15973: GO 16001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15975: LD_VAR 0 1
15979: PUSH
15980: LD_INT 1
15982: PPUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: CALL_OW 12
15992: ARRAY
15993: PPUSH
15994: LD_INT 60
15996: PPUSH
15997: CALL_OW 234
// end ;
16001: PPOPN 1
16003: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16004: LD_EXP 44
16008: PUSH
16009: LD_EXP 74
16013: AND
16014: IFFALSE 16113
16016: GO 16018
16018: DISABLE
16019: LD_INT 0
16021: PPUSH
16022: PPUSH
// begin enable ;
16023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16024: LD_ADDR_VAR 0 1
16028: PUSH
16029: LD_INT 22
16031: PUSH
16032: LD_OWVAR 2
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 61
16043: PUSH
16044: EMPTY
16045: LIST
16046: PUSH
16047: LD_INT 33
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: ST_TO_ADDR
// if not tmp then
16067: LD_VAR 0 1
16071: NOT
16072: IFFALSE 16076
// exit ;
16074: GO 16113
// for i in tmp do
16076: LD_ADDR_VAR 0 2
16080: PUSH
16081: LD_VAR 0 1
16085: PUSH
16086: FOR_IN
16087: IFFALSE 16111
// if IsControledBy ( i ) then
16089: LD_VAR 0 2
16093: PPUSH
16094: CALL_OW 312
16098: IFFALSE 16109
// ComUnlink ( i ) ;
16100: LD_VAR 0 2
16104: PPUSH
16105: CALL_OW 136
16109: GO 16086
16111: POP
16112: POP
// end ;
16113: PPOPN 2
16115: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16116: LD_EXP 44
16120: PUSH
16121: LD_EXP 75
16125: AND
16126: IFFALSE 16266
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// begin ToLua ( displayPowell(); ) ;
16135: LD_STRING displayPowell();
16137: PPUSH
16138: CALL_OW 559
// uc_side := 0 ;
16142: LD_ADDR_OWVAR 20
16146: PUSH
16147: LD_INT 0
16149: ST_TO_ADDR
// uc_nation := 2 ;
16150: LD_ADDR_OWVAR 21
16154: PUSH
16155: LD_INT 2
16157: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16158: LD_ADDR_OWVAR 37
16162: PUSH
16163: LD_INT 14
16165: ST_TO_ADDR
// vc_engine := engine_siberite ;
16166: LD_ADDR_OWVAR 39
16170: PUSH
16171: LD_INT 3
16173: ST_TO_ADDR
// vc_control := control_apeman ;
16174: LD_ADDR_OWVAR 38
16178: PUSH
16179: LD_INT 5
16181: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16182: LD_ADDR_OWVAR 40
16186: PUSH
16187: LD_INT 29
16189: ST_TO_ADDR
// un := CreateVehicle ;
16190: LD_ADDR_VAR 0 2
16194: PUSH
16195: CALL_OW 45
16199: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16200: LD_VAR 0 2
16204: PPUSH
16205: LD_INT 1
16207: PPUSH
16208: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16212: LD_INT 35
16214: PPUSH
16215: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16219: LD_VAR 0 2
16223: PPUSH
16224: LD_INT 22
16226: PUSH
16227: LD_OWVAR 2
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PPUSH
16236: CALL_OW 69
16240: PPUSH
16241: LD_VAR 0 2
16245: PPUSH
16246: CALL_OW 74
16250: PPUSH
16251: CALL_OW 115
// until IsDead ( un ) ;
16255: LD_VAR 0 2
16259: PPUSH
16260: CALL_OW 301
16264: IFFALSE 16212
// end ;
16266: PPOPN 2
16268: END
// every 0 0$1 trigger StreamModeActive and sStu do
16269: LD_EXP 44
16273: PUSH
16274: LD_EXP 83
16278: AND
16279: IFFALSE 16295
16281: GO 16283
16283: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16284: LD_STRING displayStucuk();
16286: PPUSH
16287: CALL_OW 559
// ResetFog ;
16291: CALL_OW 335
// end ;
16295: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16296: LD_EXP 44
16300: PUSH
16301: LD_EXP 76
16305: AND
16306: IFFALSE 16447
16308: GO 16310
16310: DISABLE
16311: LD_INT 0
16313: PPUSH
16314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16315: LD_ADDR_VAR 0 2
16319: PUSH
16320: LD_INT 22
16322: PUSH
16323: LD_OWVAR 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 21
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PPUSH
16346: CALL_OW 69
16350: ST_TO_ADDR
// if not tmp then
16351: LD_VAR 0 2
16355: NOT
16356: IFFALSE 16360
// exit ;
16358: GO 16447
// un := tmp [ rand ( 1 , tmp ) ] ;
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 2
16369: PUSH
16370: LD_INT 1
16372: PPUSH
16373: LD_VAR 0 2
16377: PPUSH
16378: CALL_OW 12
16382: ARRAY
16383: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16384: LD_VAR 0 1
16388: PPUSH
16389: LD_INT 0
16391: PPUSH
16392: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: LD_OWVAR 3
16405: PUSH
16406: LD_VAR 0 1
16410: DIFF
16411: PPUSH
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 74
16421: PPUSH
16422: CALL_OW 115
// wait ( 0 0$20 ) ;
16426: LD_INT 700
16428: PPUSH
16429: CALL_OW 67
// SetSide ( un , your_side ) ;
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_OWVAR 2
16442: PPUSH
16443: CALL_OW 235
// end ;
16447: PPOPN 2
16449: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16450: LD_EXP 44
16454: PUSH
16455: LD_EXP 77
16459: AND
16460: IFFALSE 16566
16462: GO 16464
16464: DISABLE
16465: LD_INT 0
16467: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 22
16475: PUSH
16476: LD_OWVAR 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 30
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 30
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PPUSH
16517: CALL_OW 69
16521: ST_TO_ADDR
// if not depot then
16522: LD_VAR 0 1
16526: NOT
16527: IFFALSE 16531
// exit ;
16529: GO 16566
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16531: LD_VAR 0 1
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: PPUSH
16540: CALL_OW 250
16544: PPUSH
16545: LD_VAR 0 1
16549: PUSH
16550: LD_INT 1
16552: ARRAY
16553: PPUSH
16554: CALL_OW 251
16558: PPUSH
16559: LD_INT 70
16561: PPUSH
16562: CALL_OW 495
// end ;
16566: PPOPN 1
16568: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16569: LD_EXP 44
16573: PUSH
16574: LD_EXP 78
16578: AND
16579: IFFALSE 16790
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16591: LD_ADDR_VAR 0 5
16595: PUSH
16596: LD_INT 22
16598: PUSH
16599: LD_OWVAR 2
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 21
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: ST_TO_ADDR
// if not tmp then
16627: LD_VAR 0 5
16631: NOT
16632: IFFALSE 16636
// exit ;
16634: GO 16790
// for i in tmp do
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: LD_VAR 0 5
16645: PUSH
16646: FOR_IN
16647: IFFALSE 16788
// begin d := rand ( 0 , 5 ) ;
16649: LD_ADDR_VAR 0 4
16653: PUSH
16654: LD_INT 0
16656: PPUSH
16657: LD_INT 5
16659: PPUSH
16660: CALL_OW 12
16664: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16665: LD_ADDR_VAR 0 2
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 250
16679: PPUSH
16680: LD_VAR 0 4
16684: PPUSH
16685: LD_INT 3
16687: PPUSH
16688: LD_INT 12
16690: PPUSH
16691: CALL_OW 12
16695: PPUSH
16696: CALL_OW 272
16700: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 251
16715: PPUSH
16716: LD_VAR 0 4
16720: PPUSH
16721: LD_INT 3
16723: PPUSH
16724: LD_INT 12
16726: PPUSH
16727: CALL_OW 12
16731: PPUSH
16732: CALL_OW 273
16736: ST_TO_ADDR
// if ValidHex ( x , y ) then
16737: LD_VAR 0 2
16741: PPUSH
16742: LD_VAR 0 3
16746: PPUSH
16747: CALL_OW 488
16751: IFFALSE 16786
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16753: LD_VAR 0 1
16757: PPUSH
16758: LD_VAR 0 2
16762: PPUSH
16763: LD_VAR 0 3
16767: PPUSH
16768: LD_INT 3
16770: PPUSH
16771: LD_INT 6
16773: PPUSH
16774: CALL_OW 12
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL_OW 483
// end ;
16786: GO 16646
16788: POP
16789: POP
// end ;
16790: PPOPN 5
16792: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16793: LD_EXP 44
16797: PUSH
16798: LD_EXP 79
16802: AND
16803: IFFALSE 16897
16805: GO 16807
16807: DISABLE
16808: LD_INT 0
16810: PPUSH
16811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_OWVAR 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 32
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 21
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 69
16858: ST_TO_ADDR
// if not tmp then
16859: LD_VAR 0 2
16863: NOT
16864: IFFALSE 16868
// exit ;
16866: GO 16897
// for i in tmp do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_VAR 0 2
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16895
// SetFuel ( i , 0 ) ;
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 0
16888: PPUSH
16889: CALL_OW 240
16893: GO 16878
16895: POP
16896: POP
// end ;
16897: PPOPN 2
16899: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16900: LD_EXP 44
16904: PUSH
16905: LD_EXP 80
16909: AND
16910: IFFALSE 16976
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16918: LD_ADDR_VAR 0 1
16922: PUSH
16923: LD_INT 22
16925: PUSH
16926: LD_OWVAR 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 29
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: ST_TO_ADDR
// if not tmp then
16954: LD_VAR 0 1
16958: NOT
16959: IFFALSE 16963
// exit ;
16961: GO 16976
// DestroyUnit ( tmp [ 1 ] ) ;
16963: LD_VAR 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: CALL_OW 65
// end ;
16976: PPOPN 1
16978: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16979: LD_EXP 44
16983: PUSH
16984: LD_EXP 82
16988: AND
16989: IFFALSE 17118
16991: GO 16993
16993: DISABLE
16994: LD_INT 0
16996: PPUSH
// begin uc_side := 0 ;
16997: LD_ADDR_OWVAR 20
17001: PUSH
17002: LD_INT 0
17004: ST_TO_ADDR
// uc_nation := nation_arabian ;
17005: LD_ADDR_OWVAR 21
17009: PUSH
17010: LD_INT 2
17012: ST_TO_ADDR
// hc_gallery :=  ;
17013: LD_ADDR_OWVAR 33
17017: PUSH
17018: LD_STRING 
17020: ST_TO_ADDR
// hc_name :=  ;
17021: LD_ADDR_OWVAR 26
17025: PUSH
17026: LD_STRING 
17028: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17029: LD_INT 1
17031: PPUSH
17032: LD_INT 11
17034: PPUSH
17035: LD_INT 10
17037: PPUSH
17038: CALL_OW 380
// un := CreateHuman ;
17042: LD_ADDR_VAR 0 1
17046: PUSH
17047: CALL_OW 44
17051: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17052: LD_VAR 0 1
17056: PPUSH
17057: LD_INT 1
17059: PPUSH
17060: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17064: LD_INT 35
17066: PPUSH
17067: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_INT 22
17078: PUSH
17079: LD_OWVAR 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PPUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: CALL_OW 74
17102: PPUSH
17103: CALL_OW 115
// until IsDead ( un ) ;
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 301
17116: IFFALSE 17064
// end ;
17118: PPOPN 1
17120: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17121: LD_EXP 44
17125: PUSH
17126: LD_EXP 84
17130: AND
17131: IFFALSE 17143
17133: GO 17135
17135: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17136: LD_STRING earthquake(getX(game), 0, 32)
17138: PPUSH
17139: CALL_OW 559
17143: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17144: LD_EXP 44
17148: PUSH
17149: LD_EXP 85
17153: AND
17154: IFFALSE 17245
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
// begin enable ;
17162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: LD_INT 22
17170: PUSH
17171: LD_OWVAR 2
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 21
17182: PUSH
17183: LD_INT 2
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 33
17192: PUSH
17193: LD_INT 3
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: PPUSH
17205: CALL_OW 69
17209: ST_TO_ADDR
// if not tmp then
17210: LD_VAR 0 1
17214: NOT
17215: IFFALSE 17219
// exit ;
17217: GO 17245
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17219: LD_VAR 0 1
17223: PUSH
17224: LD_INT 1
17226: PPUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 12
17236: ARRAY
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 234
// end ;
17245: PPOPN 1
17247: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17248: LD_EXP 44
17252: PUSH
17253: LD_EXP 86
17257: AND
17258: IFFALSE 17399
17260: GO 17262
17262: DISABLE
17263: LD_INT 0
17265: PPUSH
17266: PPUSH
17267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_INT 22
17275: PUSH
17276: LD_OWVAR 2
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 25
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 69
17303: ST_TO_ADDR
// if not tmp then
17304: LD_VAR 0 3
17308: NOT
17309: IFFALSE 17313
// exit ;
17311: GO 17399
// un := tmp [ rand ( 1 , tmp ) ] ;
17313: LD_ADDR_VAR 0 2
17317: PUSH
17318: LD_VAR 0 3
17322: PUSH
17323: LD_INT 1
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 12
17335: ARRAY
17336: ST_TO_ADDR
// if Crawls ( un ) then
17337: LD_VAR 0 2
17341: PPUSH
17342: CALL_OW 318
17346: IFFALSE 17357
// ComWalk ( un ) ;
17348: LD_VAR 0 2
17352: PPUSH
17353: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17357: LD_VAR 0 2
17361: PPUSH
17362: LD_INT 9
17364: PPUSH
17365: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17369: LD_INT 28
17371: PPUSH
17372: LD_OWVAR 2
17376: PPUSH
17377: LD_INT 2
17379: PPUSH
17380: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17384: LD_INT 29
17386: PPUSH
17387: LD_OWVAR 2
17391: PPUSH
17392: LD_INT 2
17394: PPUSH
17395: CALL_OW 322
// end ;
17399: PPOPN 3
17401: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17402: LD_EXP 44
17406: PUSH
17407: LD_EXP 87
17411: AND
17412: IFFALSE 17523
17414: GO 17416
17416: DISABLE
17417: LD_INT 0
17419: PPUSH
17420: PPUSH
17421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17422: LD_ADDR_VAR 0 3
17426: PUSH
17427: LD_INT 22
17429: PUSH
17430: LD_OWVAR 2
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 25
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PPUSH
17453: CALL_OW 69
17457: ST_TO_ADDR
// if not tmp then
17458: LD_VAR 0 3
17462: NOT
17463: IFFALSE 17467
// exit ;
17465: GO 17523
// un := tmp [ rand ( 1 , tmp ) ] ;
17467: LD_ADDR_VAR 0 2
17471: PUSH
17472: LD_VAR 0 3
17476: PUSH
17477: LD_INT 1
17479: PPUSH
17480: LD_VAR 0 3
17484: PPUSH
17485: CALL_OW 12
17489: ARRAY
17490: ST_TO_ADDR
// if Crawls ( un ) then
17491: LD_VAR 0 2
17495: PPUSH
17496: CALL_OW 318
17500: IFFALSE 17511
// ComWalk ( un ) ;
17502: LD_VAR 0 2
17506: PPUSH
17507: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17511: LD_VAR 0 2
17515: PPUSH
17516: LD_INT 8
17518: PPUSH
17519: CALL_OW 336
// end ;
17523: PPOPN 3
17525: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17526: LD_EXP 44
17530: PUSH
17531: LD_EXP 88
17535: AND
17536: IFFALSE 17680
17538: GO 17540
17540: DISABLE
17541: LD_INT 0
17543: PPUSH
17544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: LD_INT 22
17552: PUSH
17553: LD_OWVAR 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 21
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: LD_INT 34
17577: PUSH
17578: LD_INT 12
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 34
17587: PUSH
17588: LD_INT 51
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 34
17597: PUSH
17598: LD_INT 32
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PPUSH
17616: CALL_OW 69
17620: ST_TO_ADDR
// if not tmp then
17621: LD_VAR 0 2
17625: NOT
17626: IFFALSE 17630
// exit ;
17628: GO 17680
// for i in tmp do
17630: LD_ADDR_VAR 0 1
17634: PUSH
17635: LD_VAR 0 2
17639: PUSH
17640: FOR_IN
17641: IFFALSE 17678
// if GetCargo ( i , mat_artifact ) = 0 then
17643: LD_VAR 0 1
17647: PPUSH
17648: LD_INT 4
17650: PPUSH
17651: CALL_OW 289
17655: PUSH
17656: LD_INT 0
17658: EQUAL
17659: IFFALSE 17676
// SetCargo ( i , mat_siberit , 100 ) ;
17661: LD_VAR 0 1
17665: PPUSH
17666: LD_INT 3
17668: PPUSH
17669: LD_INT 100
17671: PPUSH
17672: CALL_OW 290
17676: GO 17640
17678: POP
17679: POP
// end ;
17680: PPOPN 2
17682: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17683: LD_EXP 44
17687: PUSH
17688: LD_EXP 89
17692: AND
17693: IFFALSE 17876
17695: GO 17697
17697: DISABLE
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_OWVAR 2
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PPUSH
17719: CALL_OW 69
17723: ST_TO_ADDR
// if not tmp then
17724: LD_VAR 0 2
17728: NOT
17729: IFFALSE 17733
// exit ;
17731: GO 17876
// for i := 1 to 2 do
17733: LD_ADDR_VAR 0 1
17737: PUSH
17738: DOUBLE
17739: LD_INT 1
17741: DEC
17742: ST_TO_ADDR
17743: LD_INT 2
17745: PUSH
17746: FOR_TO
17747: IFFALSE 17874
// begin uc_side := your_side ;
17749: LD_ADDR_OWVAR 20
17753: PUSH
17754: LD_OWVAR 2
17758: ST_TO_ADDR
// uc_nation := nation_american ;
17759: LD_ADDR_OWVAR 21
17763: PUSH
17764: LD_INT 1
17766: ST_TO_ADDR
// vc_chassis := us_morphling ;
17767: LD_ADDR_OWVAR 37
17771: PUSH
17772: LD_INT 5
17774: ST_TO_ADDR
// vc_engine := engine_siberite ;
17775: LD_ADDR_OWVAR 39
17779: PUSH
17780: LD_INT 3
17782: ST_TO_ADDR
// vc_control := control_computer ;
17783: LD_ADDR_OWVAR 38
17787: PUSH
17788: LD_INT 3
17790: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17791: LD_ADDR_OWVAR 40
17795: PUSH
17796: LD_INT 10
17798: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17799: LD_VAR 0 2
17803: PUSH
17804: LD_INT 1
17806: ARRAY
17807: PPUSH
17808: CALL_OW 310
17812: NOT
17813: IFFALSE 17860
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17815: CALL_OW 45
17819: PPUSH
17820: LD_VAR 0 2
17824: PUSH
17825: LD_INT 1
17827: ARRAY
17828: PPUSH
17829: CALL_OW 250
17833: PPUSH
17834: LD_VAR 0 2
17838: PUSH
17839: LD_INT 1
17841: ARRAY
17842: PPUSH
17843: CALL_OW 251
17847: PPUSH
17848: LD_INT 12
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 50
17858: GO 17872
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17860: CALL_OW 45
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: CALL_OW 51
// end ;
17872: GO 17746
17874: POP
17875: POP
// end ;
17876: PPOPN 2
17878: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17879: LD_EXP 44
17883: PUSH
17884: LD_EXP 90
17888: AND
17889: IFFALSE 18111
17891: GO 17893
17893: DISABLE
17894: LD_INT 0
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17902: LD_ADDR_VAR 0 6
17906: PUSH
17907: LD_INT 22
17909: PUSH
17910: LD_OWVAR 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 21
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: LD_INT 23
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: ST_TO_ADDR
// if not tmp then
17956: LD_VAR 0 6
17960: NOT
17961: IFFALSE 17965
// exit ;
17963: GO 18111
// s1 := rand ( 1 , 4 ) ;
17965: LD_ADDR_VAR 0 2
17969: PUSH
17970: LD_INT 1
17972: PPUSH
17973: LD_INT 4
17975: PPUSH
17976: CALL_OW 12
17980: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17981: LD_ADDR_VAR 0 4
17985: PUSH
17986: LD_VAR 0 6
17990: PUSH
17991: LD_INT 1
17993: ARRAY
17994: PPUSH
17995: LD_VAR 0 2
17999: PPUSH
18000: CALL_OW 259
18004: ST_TO_ADDR
// if s1 = 1 then
18005: LD_VAR 0 2
18009: PUSH
18010: LD_INT 1
18012: EQUAL
18013: IFFALSE 18033
// s2 := rand ( 2 , 4 ) else
18015: LD_ADDR_VAR 0 3
18019: PUSH
18020: LD_INT 2
18022: PPUSH
18023: LD_INT 4
18025: PPUSH
18026: CALL_OW 12
18030: ST_TO_ADDR
18031: GO 18041
// s2 := 1 ;
18033: LD_ADDR_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_VAR 0 6
18050: PUSH
18051: LD_INT 1
18053: ARRAY
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: CALL_OW 259
18064: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18065: LD_VAR 0 6
18069: PUSH
18070: LD_INT 1
18072: ARRAY
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_VAR 0 5
18083: PPUSH
18084: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18088: LD_VAR 0 6
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: PPUSH
18097: LD_VAR 0 3
18101: PPUSH
18102: LD_VAR 0 4
18106: PPUSH
18107: CALL_OW 237
// end ;
18111: PPOPN 6
18113: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18114: LD_EXP 44
18118: PUSH
18119: LD_EXP 91
18123: AND
18124: IFFALSE 18203
18126: GO 18128
18128: DISABLE
18129: LD_INT 0
18131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18132: LD_ADDR_VAR 0 1
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_OWVAR 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 30
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: ST_TO_ADDR
// if not tmp then
18168: LD_VAR 0 1
18172: NOT
18173: IFFALSE 18177
// exit ;
18175: GO 18203
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 12
18194: ARRAY
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL_OW 234
// end ;
18203: PPOPN 1
18205: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18206: LD_EXP 44
18210: PUSH
18211: LD_EXP 92
18215: AND
18216: IFFALSE 18328
18218: GO 18220
18220: DISABLE
18221: LD_INT 0
18223: PPUSH
18224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18225: LD_ADDR_VAR 0 2
18229: PUSH
18230: LD_INT 22
18232: PUSH
18233: LD_OWVAR 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 27
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 30
18257: PUSH
18258: LD_INT 26
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 30
18267: PUSH
18268: LD_INT 28
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 2
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18328
// for i in tmp do
18299: LD_ADDR_VAR 0 1
18303: PUSH
18304: LD_VAR 0 2
18308: PUSH
18309: FOR_IN
18310: IFFALSE 18326
// SetLives ( i , 1 ) ;
18312: LD_VAR 0 1
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 234
18324: GO 18309
18326: POP
18327: POP
// end ;
18328: PPOPN 2
18330: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18331: LD_EXP 44
18335: PUSH
18336: LD_EXP 93
18340: AND
18341: IFFALSE 18615
18343: GO 18345
18345: DISABLE
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
18350: PPUSH
// begin i := rand ( 1 , 7 ) ;
18351: LD_ADDR_VAR 0 1
18355: PUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 7
18361: PPUSH
18362: CALL_OW 12
18366: ST_TO_ADDR
// case i of 1 :
18367: LD_VAR 0 1
18371: PUSH
18372: LD_INT 1
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18390
18380: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18381: LD_STRING earthquake(getX(game), 0, 32)
18383: PPUSH
18384: CALL_OW 559
18388: GO 18615
18390: LD_INT 2
18392: DOUBLE
18393: EQUAL
18394: IFTRUE 18398
18396: GO 18412
18398: POP
// begin ToLua ( displayStucuk(); ) ;
18399: LD_STRING displayStucuk();
18401: PPUSH
18402: CALL_OW 559
// ResetFog ;
18406: CALL_OW 335
// end ; 3 :
18410: GO 18615
18412: LD_INT 3
18414: DOUBLE
18415: EQUAL
18416: IFTRUE 18420
18418: GO 18524
18420: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18421: LD_ADDR_VAR 0 2
18425: PUSH
18426: LD_INT 22
18428: PUSH
18429: LD_OWVAR 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 25
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PPUSH
18452: CALL_OW 69
18456: ST_TO_ADDR
// if not tmp then
18457: LD_VAR 0 2
18461: NOT
18462: IFFALSE 18466
// exit ;
18464: GO 18615
// un := tmp [ rand ( 1 , tmp ) ] ;
18466: LD_ADDR_VAR 0 3
18470: PUSH
18471: LD_VAR 0 2
18475: PUSH
18476: LD_INT 1
18478: PPUSH
18479: LD_VAR 0 2
18483: PPUSH
18484: CALL_OW 12
18488: ARRAY
18489: ST_TO_ADDR
// if Crawls ( un ) then
18490: LD_VAR 0 3
18494: PPUSH
18495: CALL_OW 318
18499: IFFALSE 18510
// ComWalk ( un ) ;
18501: LD_VAR 0 3
18505: PPUSH
18506: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18510: LD_VAR 0 3
18514: PPUSH
18515: LD_INT 8
18517: PPUSH
18518: CALL_OW 336
// end ; 4 :
18522: GO 18615
18524: LD_INT 4
18526: DOUBLE
18527: EQUAL
18528: IFTRUE 18532
18530: GO 18593
18532: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18533: LD_ADDR_VAR 0 2
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 30
18552: PUSH
18553: LD_INT 29
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 2
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18615
// DestroyUnit ( tmp [ 1 ] ) ;
18578: LD_VAR 0 2
18582: PUSH
18583: LD_INT 1
18585: ARRAY
18586: PPUSH
18587: CALL_OW 65
// end ; 5 .. 7 :
18591: GO 18615
18593: LD_INT 5
18595: DOUBLE
18596: GREATEREQUAL
18597: IFFALSE 18605
18599: LD_INT 7
18601: DOUBLE
18602: LESSEQUAL
18603: IFTRUE 18607
18605: GO 18614
18607: POP
// StreamSibBomb ; end ;
18608: CALL 14865 0 0
18612: GO 18615
18614: POP
// end ;
18615: PPOPN 3
18617: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18618: LD_EXP 44
18622: PUSH
18623: LD_EXP 94
18627: AND
18628: IFFALSE 18784
18630: GO 18632
18632: DISABLE
18633: LD_INT 0
18635: PPUSH
18636: PPUSH
18637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18638: LD_ADDR_VAR 0 2
18642: PUSH
18643: LD_INT 81
18645: PUSH
18646: LD_OWVAR 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 21
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 69
18691: ST_TO_ADDR
// if not tmp then
18692: LD_VAR 0 2
18696: NOT
18697: IFFALSE 18701
// exit ;
18699: GO 18784
// p := 0 ;
18701: LD_ADDR_VAR 0 3
18705: PUSH
18706: LD_INT 0
18708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18709: LD_INT 35
18711: PPUSH
18712: CALL_OW 67
// p := p + 1 ;
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_VAR 0 3
18725: PUSH
18726: LD_INT 1
18728: PLUS
18729: ST_TO_ADDR
// for i in tmp do
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: LD_VAR 0 2
18739: PUSH
18740: FOR_IN
18741: IFFALSE 18772
// if GetLives ( i ) < 1000 then
18743: LD_VAR 0 1
18747: PPUSH
18748: CALL_OW 256
18752: PUSH
18753: LD_INT 1000
18755: LESS
18756: IFFALSE 18770
// SetLives ( i , 1000 ) ;
18758: LD_VAR 0 1
18762: PPUSH
18763: LD_INT 1000
18765: PPUSH
18766: CALL_OW 234
18770: GO 18740
18772: POP
18773: POP
// until p > 20 ;
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 20
18781: GREATER
18782: IFFALSE 18709
// end ;
18784: PPOPN 3
18786: END
// every 0 0$1 trigger StreamModeActive and sTime do
18787: LD_EXP 44
18791: PUSH
18792: LD_EXP 95
18796: AND
18797: IFFALSE 18832
18799: GO 18801
18801: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18802: LD_INT 28
18804: PPUSH
18805: LD_OWVAR 2
18809: PPUSH
18810: LD_INT 2
18812: PPUSH
18813: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18817: LD_INT 30
18819: PPUSH
18820: LD_OWVAR 2
18824: PPUSH
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 322
// end ;
18832: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18833: LD_EXP 44
18837: PUSH
18838: LD_EXP 96
18842: AND
18843: IFFALSE 18964
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
18851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18852: LD_ADDR_VAR 0 2
18856: PUSH
18857: LD_INT 22
18859: PUSH
18860: LD_OWVAR 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 21
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: LD_INT 23
18884: PUSH
18885: LD_INT 0
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: ST_TO_ADDR
// if not tmp then
18906: LD_VAR 0 2
18910: NOT
18911: IFFALSE 18915
// exit ;
18913: GO 18964
// for i in tmp do
18915: LD_ADDR_VAR 0 1
18919: PUSH
18920: LD_VAR 0 2
18924: PUSH
18925: FOR_IN
18926: IFFALSE 18962
// begin if Crawls ( i ) then
18928: LD_VAR 0 1
18932: PPUSH
18933: CALL_OW 318
18937: IFFALSE 18948
// ComWalk ( i ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 138
// SetClass ( i , 2 ) ;
18948: LD_VAR 0 1
18952: PPUSH
18953: LD_INT 2
18955: PPUSH
18956: CALL_OW 336
// end ;
18960: GO 18925
18962: POP
18963: POP
// end ;
18964: PPOPN 2
18966: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18967: LD_EXP 44
18971: PUSH
18972: LD_EXP 97
18976: AND
18977: IFFALSE 19258
18979: GO 18981
18981: DISABLE
18982: LD_INT 0
18984: PPUSH
18985: PPUSH
18986: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18987: LD_OWVAR 2
18991: PPUSH
18992: LD_INT 9
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19005: LD_INT 9
19007: PPUSH
19008: LD_OWVAR 2
19012: PPUSH
19013: CALL_OW 343
// uc_side := 9 ;
19017: LD_ADDR_OWVAR 20
19021: PUSH
19022: LD_INT 9
19024: ST_TO_ADDR
// uc_nation := 2 ;
19025: LD_ADDR_OWVAR 21
19029: PUSH
19030: LD_INT 2
19032: ST_TO_ADDR
// hc_name := Dark Warrior ;
19033: LD_ADDR_OWVAR 26
19037: PUSH
19038: LD_STRING Dark Warrior
19040: ST_TO_ADDR
// hc_gallery :=  ;
19041: LD_ADDR_OWVAR 33
19045: PUSH
19046: LD_STRING 
19048: ST_TO_ADDR
// hc_noskilllimit := true ;
19049: LD_ADDR_OWVAR 76
19053: PUSH
19054: LD_INT 1
19056: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19057: LD_ADDR_OWVAR 31
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 30
19067: PUSH
19068: LD_INT 30
19070: PUSH
19071: LD_INT 30
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: ST_TO_ADDR
// un := CreateHuman ;
19080: LD_ADDR_VAR 0 3
19084: PUSH
19085: CALL_OW 44
19089: ST_TO_ADDR
// hc_noskilllimit := false ;
19090: LD_ADDR_OWVAR 76
19094: PUSH
19095: LD_INT 0
19097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19098: LD_VAR 0 3
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 51
// p := 0 ;
19110: LD_ADDR_VAR 0 2
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19118: LD_INT 35
19120: PPUSH
19121: CALL_OW 67
// p := p + 1 ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_VAR 0 2
19134: PUSH
19135: LD_INT 1
19137: PLUS
19138: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19139: LD_VAR 0 3
19143: PPUSH
19144: CALL_OW 256
19148: PUSH
19149: LD_INT 1000
19151: LESS
19152: IFFALSE 19166
// SetLives ( un , 1000 ) ;
19154: LD_VAR 0 3
19158: PPUSH
19159: LD_INT 1000
19161: PPUSH
19162: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19166: LD_VAR 0 3
19170: PPUSH
19171: LD_INT 81
19173: PUSH
19174: LD_OWVAR 2
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 91
19185: PUSH
19186: LD_VAR 0 3
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 69
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: CALL_OW 74
19217: PPUSH
19218: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19222: LD_VAR 0 2
19226: PUSH
19227: LD_INT 60
19229: GREATER
19230: PUSH
19231: LD_VAR 0 3
19235: PPUSH
19236: CALL_OW 301
19240: OR
19241: IFFALSE 19118
// if un then
19243: LD_VAR 0 3
19247: IFFALSE 19258
// RemoveUnit ( un ) ;
19249: LD_VAR 0 3
19253: PPUSH
19254: CALL_OW 64
// end ;
19258: PPOPN 3
19260: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
19265: PPUSH
19266: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19267: LD_ADDR_VAR 0 4
19271: PUSH
19272: LD_INT 22
19274: PUSH
19275: LD_OWVAR 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 30
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 30
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PPUSH
19316: CALL_OW 69
19320: ST_TO_ADDR
// if not tmp then
19321: LD_VAR 0 4
19325: NOT
19326: IFFALSE 19330
// exit ;
19328: GO 19389
// for i in tmp do
19330: LD_ADDR_VAR 0 2
19334: PUSH
19335: LD_VAR 0 4
19339: PUSH
19340: FOR_IN
19341: IFFALSE 19387
// for j = 1 to 3 do
19343: LD_ADDR_VAR 0 3
19347: PUSH
19348: DOUBLE
19349: LD_INT 1
19351: DEC
19352: ST_TO_ADDR
19353: LD_INT 3
19355: PUSH
19356: FOR_TO
19357: IFFALSE 19383
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19359: LD_VAR 0 2
19363: PPUSH
19364: CALL_OW 274
19368: PPUSH
19369: LD_VAR 0 3
19373: PPUSH
19374: LD_INT 99999
19376: PPUSH
19377: CALL_OW 277
19381: GO 19356
19383: POP
19384: POP
19385: GO 19340
19387: POP
19388: POP
// end ;
19389: LD_VAR 0 1
19393: RET
// export function hHackSetLevel10 ; var i , j ; begin
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: LD_INT 21
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 69
19418: PUSH
19419: FOR_IN
19420: IFFALSE 19472
// if IsSelected ( i ) then
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 306
19431: IFFALSE 19470
// begin for j := 1 to 4 do
19433: LD_ADDR_VAR 0 3
19437: PUSH
19438: DOUBLE
19439: LD_INT 1
19441: DEC
19442: ST_TO_ADDR
19443: LD_INT 4
19445: PUSH
19446: FOR_TO
19447: IFFALSE 19468
// SetSkill ( i , j , 10 ) ;
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: LD_INT 10
19461: PPUSH
19462: CALL_OW 237
19466: GO 19446
19468: POP
19469: POP
// end ;
19470: GO 19419
19472: POP
19473: POP
// end ;
19474: LD_VAR 0 1
19478: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19479: LD_INT 0
19481: PPUSH
19482: PPUSH
19483: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19484: LD_ADDR_VAR 0 2
19488: PUSH
19489: LD_INT 22
19491: PUSH
19492: LD_OWVAR 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 21
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 69
19519: PUSH
19520: FOR_IN
19521: IFFALSE 19562
// begin for j := 1 to 4 do
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: DOUBLE
19529: LD_INT 1
19531: DEC
19532: ST_TO_ADDR
19533: LD_INT 4
19535: PUSH
19536: FOR_TO
19537: IFFALSE 19558
// SetSkill ( i , j , 10 ) ;
19539: LD_VAR 0 2
19543: PPUSH
19544: LD_VAR 0 3
19548: PPUSH
19549: LD_INT 10
19551: PPUSH
19552: CALL_OW 237
19556: GO 19536
19558: POP
19559: POP
// end ;
19560: GO 19520
19562: POP
19563: POP
// end ;
19564: LD_VAR 0 1
19568: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
19569: LD_INT 0
19571: PPUSH
// uc_side := your_side ;
19572: LD_ADDR_OWVAR 20
19576: PUSH
19577: LD_OWVAR 2
19581: ST_TO_ADDR
// uc_nation := nation ;
19582: LD_ADDR_OWVAR 21
19586: PUSH
19587: LD_VAR 0 1
19591: ST_TO_ADDR
// InitHc ;
19592: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19596: LD_INT 0
19598: PPUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_VAR 0 3
19608: PPUSH
19609: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
19613: CALL_OW 44
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: CALL_OW 51
// end ;
19625: LD_VAR 0 4
19629: RET
// export function hHackSpawnVehicle ; begin
19630: LD_INT 0
19632: PPUSH
// uc_side := your_side ;
19633: LD_ADDR_OWVAR 20
19637: PUSH
19638: LD_OWVAR 2
19642: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
19643: LD_ADDR_OWVAR 21
19647: PUSH
19648: LD_INT 1
19650: PPUSH
19651: LD_INT 3
19653: PPUSH
19654: CALL_OW 12
19658: ST_TO_ADDR
// InitVc ;
19659: CALL_OW 20
// case uc_nation of 1 :
19663: LD_OWVAR 21
19667: PUSH
19668: LD_INT 1
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19820
19676: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
19677: LD_ADDR_OWVAR 37
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: LD_INT 4
19693: PUSH
19694: LD_INT 5
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: PPUSH
19707: LD_INT 5
19709: PPUSH
19710: CALL_OW 12
19714: ARRAY
19715: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19716: LD_ADDR_OWVAR 39
19720: PUSH
19721: LD_INT 1
19723: PPUSH
19724: LD_INT 3
19726: PPUSH
19727: CALL_OW 12
19731: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
19732: LD_ADDR_OWVAR 38
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: PPUSH
19754: LD_INT 3
19756: PPUSH
19757: CALL_OW 12
19761: ARRAY
19762: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
19763: LD_ADDR_OWVAR 40
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: LD_INT 4
19773: PUSH
19774: LD_INT 5
19776: PUSH
19777: LD_INT 3
19779: PUSH
19780: LD_INT 7
19782: PUSH
19783: LD_INT 8
19785: PUSH
19786: LD_INT 9
19788: PUSH
19789: LD_INT 10
19791: PUSH
19792: LD_INT 6
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: PPUSH
19809: LD_INT 9
19811: PPUSH
19812: CALL_OW 12
19816: ARRAY
19817: ST_TO_ADDR
// end ; 2 :
19818: GO 20085
19820: LD_INT 2
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19952
19828: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
19829: LD_ADDR_OWVAR 37
19833: PUSH
19834: LD_INT 11
19836: PUSH
19837: LD_INT 12
19839: PUSH
19840: LD_INT 13
19842: PUSH
19843: LD_INT 14
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: PPUSH
19855: LD_INT 4
19857: PPUSH
19858: CALL_OW 12
19862: ARRAY
19863: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19864: LD_ADDR_OWVAR 39
19868: PUSH
19869: LD_INT 1
19871: PPUSH
19872: LD_INT 3
19874: PPUSH
19875: CALL_OW 12
19879: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
19880: LD_ADDR_OWVAR 38
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: LD_INT 5
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_INT 3
19904: PPUSH
19905: CALL_OW 12
19909: ARRAY
19910: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
19911: LD_ADDR_OWVAR 40
19915: PUSH
19916: LD_INT 24
19918: PUSH
19919: LD_INT 26
19921: PUSH
19922: LD_INT 27
19924: PUSH
19925: LD_INT 28
19927: PUSH
19928: LD_INT 29
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PPUSH
19941: LD_INT 5
19943: PPUSH
19944: CALL_OW 12
19948: ARRAY
19949: ST_TO_ADDR
// end ; 3 :
19950: GO 20085
19952: LD_INT 3
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 20084
19960: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
19961: LD_ADDR_OWVAR 37
19965: PUSH
19966: LD_INT 21
19968: PUSH
19969: LD_INT 23
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_INT 24
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: PPUSH
19987: LD_INT 4
19989: PPUSH
19990: CALL_OW 12
19994: ARRAY
19995: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19996: LD_ADDR_OWVAR 39
20000: PUSH
20001: LD_INT 1
20003: PPUSH
20004: LD_INT 3
20006: PPUSH
20007: CALL_OW 12
20011: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
20012: LD_ADDR_OWVAR 38
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 1
20029: PPUSH
20030: LD_INT 2
20032: PPUSH
20033: CALL_OW 12
20037: ARRAY
20038: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
20039: LD_ADDR_OWVAR 40
20043: PUSH
20044: LD_INT 42
20046: PUSH
20047: LD_INT 43
20049: PUSH
20050: LD_INT 44
20052: PUSH
20053: LD_INT 46
20055: PUSH
20056: LD_INT 48
20058: PUSH
20059: LD_INT 47
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: PPUSH
20073: LD_INT 6
20075: PPUSH
20076: CALL_OW 12
20080: ARRAY
20081: ST_TO_ADDR
// end ; end ;
20082: GO 20085
20084: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20085: CALL_OW 45
20089: PPUSH
20090: LD_INT 1
20092: PPUSH
20093: CALL_OW 51
// end ;
20097: LD_VAR 0 1
20101: RET
// export hInvincible ; every 1 do
20102: GO 20104
20104: DISABLE
// hInvincible := [ ] ;
20105: LD_ADDR_EXP 98
20109: PUSH
20110: EMPTY
20111: ST_TO_ADDR
20112: END
// every 10 do var i ;
20113: GO 20115
20115: DISABLE
20116: LD_INT 0
20118: PPUSH
// begin enable ;
20119: ENABLE
// if not hInvincible then
20120: LD_EXP 98
20124: NOT
20125: IFFALSE 20129
// exit ;
20127: GO 20173
// for i in hInvincible do
20129: LD_ADDR_VAR 0 1
20133: PUSH
20134: LD_EXP 98
20138: PUSH
20139: FOR_IN
20140: IFFALSE 20171
// if GetLives ( i ) < 1000 then
20142: LD_VAR 0 1
20146: PPUSH
20147: CALL_OW 256
20151: PUSH
20152: LD_INT 1000
20154: LESS
20155: IFFALSE 20169
// SetLives ( i , 1000 ) ;
20157: LD_VAR 0 1
20161: PPUSH
20162: LD_INT 1000
20164: PPUSH
20165: CALL_OW 234
20169: GO 20139
20171: POP
20172: POP
// end ;
20173: PPOPN 1
20175: END
// export function hHackInvincible ; var i ; begin
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: LD_INT 21
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 21
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: PPUSH
20213: CALL_OW 69
20217: PUSH
20218: FOR_IN
20219: IFFALSE 20280
// if IsSelected ( i ) then
20221: LD_VAR 0 2
20225: PPUSH
20226: CALL_OW 306
20230: IFFALSE 20278
// begin if i in hInvincible then
20232: LD_VAR 0 2
20236: PUSH
20237: LD_EXP 98
20241: IN
20242: IFFALSE 20262
// hInvincible := hInvincible diff i else
20244: LD_ADDR_EXP 98
20248: PUSH
20249: LD_EXP 98
20253: PUSH
20254: LD_VAR 0 2
20258: DIFF
20259: ST_TO_ADDR
20260: GO 20278
// hInvincible := hInvincible union i ;
20262: LD_ADDR_EXP 98
20266: PUSH
20267: LD_EXP 98
20271: PUSH
20272: LD_VAR 0 2
20276: UNION
20277: ST_TO_ADDR
// end ;
20278: GO 20218
20280: POP
20281: POP
// end ;
20282: LD_VAR 0 1
20286: RET
// export function hHackInvisible ; var i , j ; begin
20287: LD_INT 0
20289: PPUSH
20290: PPUSH
20291: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20292: LD_ADDR_VAR 0 2
20296: PUSH
20297: LD_INT 21
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PPUSH
20307: CALL_OW 69
20311: PUSH
20312: FOR_IN
20313: IFFALSE 20337
// if IsSelected ( i ) then
20315: LD_VAR 0 2
20319: PPUSH
20320: CALL_OW 306
20324: IFFALSE 20335
// ComForceInvisible ( i ) ;
20326: LD_VAR 0 2
20330: PPUSH
20331: CALL_OW 496
20335: GO 20312
20337: POP
20338: POP
// end ;
20339: LD_VAR 0 1
20343: RET
// export function hHackChangeYourSide ; begin
20344: LD_INT 0
20346: PPUSH
// if your_side = 8 then
20347: LD_OWVAR 2
20351: PUSH
20352: LD_INT 8
20354: EQUAL
20355: IFFALSE 20367
// your_side := 0 else
20357: LD_ADDR_OWVAR 2
20361: PUSH
20362: LD_INT 0
20364: ST_TO_ADDR
20365: GO 20381
// your_side := your_side + 1 ;
20367: LD_ADDR_OWVAR 2
20371: PUSH
20372: LD_OWVAR 2
20376: PUSH
20377: LD_INT 1
20379: PLUS
20380: ST_TO_ADDR
// end ;
20381: LD_VAR 0 1
20385: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
20390: PPUSH
// for i in all_units do
20391: LD_ADDR_VAR 0 2
20395: PUSH
20396: LD_OWVAR 3
20400: PUSH
20401: FOR_IN
20402: IFFALSE 20480
// if IsSelected ( i ) then
20404: LD_VAR 0 2
20408: PPUSH
20409: CALL_OW 306
20413: IFFALSE 20478
// begin j := GetSide ( i ) ;
20415: LD_ADDR_VAR 0 3
20419: PUSH
20420: LD_VAR 0 2
20424: PPUSH
20425: CALL_OW 255
20429: ST_TO_ADDR
// if j = 8 then
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 8
20437: EQUAL
20438: IFFALSE 20450
// j := 0 else
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
20448: GO 20464
// j := j + 1 ;
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: LD_VAR 0 3
20459: PUSH
20460: LD_INT 1
20462: PLUS
20463: ST_TO_ADDR
// SetSide ( i , j ) ;
20464: LD_VAR 0 2
20468: PPUSH
20469: LD_VAR 0 3
20473: PPUSH
20474: CALL_OW 235
// end ;
20478: GO 20401
20480: POP
20481: POP
// end ;
20482: LD_VAR 0 1
20486: RET
// export function hHackFog ; begin
20487: LD_INT 0
20489: PPUSH
// FogOff ( true ) ;
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 344
// end ;
20497: LD_VAR 0 1
20501: RET
// export function hHackApeman ; begin
20502: LD_INT 0
20504: PPUSH
// uc_side := your_side ;
20505: LD_ADDR_OWVAR 20
20509: PUSH
20510: LD_OWVAR 2
20514: ST_TO_ADDR
// uc_nation := 0 ;
20515: LD_ADDR_OWVAR 21
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
// hc_name :=  ;
20523: LD_ADDR_OWVAR 26
20527: PUSH
20528: LD_STRING 
20530: ST_TO_ADDR
// hc_gallery :=  ;
20531: LD_ADDR_OWVAR 33
20535: PUSH
20536: LD_STRING 
20538: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
20539: LD_ADDR_OWVAR 31
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// hc_class := class_apeman ;
20562: LD_ADDR_OWVAR 28
20566: PUSH
20567: LD_INT 12
20569: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
20570: CALL_OW 44
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL_OW 51
// end ;
20582: LD_VAR 0 1
20586: RET
// export function hHackBoom ; begin
20587: LD_INT 0
20589: PPUSH
// uc_side := your_side ;
20590: LD_ADDR_OWVAR 20
20594: PUSH
20595: LD_OWVAR 2
20599: ST_TO_ADDR
// uc_nation := 1 ;
20600: LD_ADDR_OWVAR 21
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// vc_chassis := us_morphling ;
20608: LD_ADDR_OWVAR 37
20612: PUSH
20613: LD_INT 5
20615: ST_TO_ADDR
// vc_engine := engine_siberite ;
20616: LD_ADDR_OWVAR 39
20620: PUSH
20621: LD_INT 3
20623: ST_TO_ADDR
// vc_control := control_computer ;
20624: LD_ADDR_OWVAR 38
20628: PUSH
20629: LD_INT 3
20631: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
20632: LD_ADDR_OWVAR 40
20636: PUSH
20637: LD_INT 8
20639: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20640: CALL_OW 45
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 51
// end ; end_of_file
20652: LD_VAR 0 1
20656: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20657: LD_INT 0
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 264
20672: PUSH
20673: LD_EXP 33
20677: EQUAL
20678: IFFALSE 20750
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20680: LD_INT 68
20682: PPUSH
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 255
20692: PPUSH
20693: CALL_OW 321
20697: PUSH
20698: LD_INT 2
20700: EQUAL
20701: IFFALSE 20713
// eff := 70 else
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_INT 70
20710: ST_TO_ADDR
20711: GO 20721
// eff := 30 ;
20713: LD_ADDR_VAR 0 4
20717: PUSH
20718: LD_INT 30
20720: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 250
20730: PPUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: CALL_OW 251
20740: PPUSH
20741: LD_VAR 0 4
20745: PPUSH
20746: CALL_OW 495
// end ; end ;
20750: LD_VAR 0 2
20754: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20755: LD_INT 0
20757: PPUSH
// end ;
20758: LD_VAR 0 4
20762: RET
// export function SOS_Command ( cmd ) ; begin
20763: LD_INT 0
20765: PPUSH
// end ;
20766: LD_VAR 0 2
20770: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20771: LD_INT 0
20773: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20774: LD_VAR 0 1
20778: PUSH
20779: LD_INT 254
20781: EQUAL
20782: PUSH
20783: LD_VAR 0 2
20787: PPUSH
20788: CALL_OW 264
20792: PUSH
20793: LD_EXP 31
20797: EQUAL
20798: AND
20799: PUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: CALL_OW 263
20809: PUSH
20810: LD_INT 3
20812: EQUAL
20813: AND
20814: IFFALSE 20830
// HackDestroyVehicle ( unit , selectedUnit ) ;
20816: LD_VAR 0 2
20820: PPUSH
20821: LD_VAR 0 3
20825: PPUSH
20826: CALL 22339 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20830: LD_VAR 0 1
20834: PUSH
20835: LD_INT 255
20837: EQUAL
20838: PUSH
20839: LD_VAR 0 2
20843: PPUSH
20844: CALL_OW 264
20848: PUSH
20849: LD_INT 14
20851: PUSH
20852: LD_INT 53
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: IN
20859: AND
20860: PUSH
20861: LD_VAR 0 4
20865: PPUSH
20866: LD_VAR 0 5
20870: PPUSH
20871: CALL_OW 488
20875: AND
20876: IFFALSE 20900
// CutTreeXYR ( unit , x , y , 12 ) ;
20878: LD_VAR 0 2
20882: PPUSH
20883: LD_VAR 0 4
20887: PPUSH
20888: LD_VAR 0 5
20892: PPUSH
20893: LD_INT 12
20895: PPUSH
20896: CALL 20905 0 4
// end ;
20900: LD_VAR 0 6
20904: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20905: LD_INT 0
20907: PPUSH
20908: PPUSH
20909: PPUSH
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20916: LD_VAR 0 1
20920: NOT
20921: PUSH
20922: LD_VAR 0 2
20926: PPUSH
20927: LD_VAR 0 3
20931: PPUSH
20932: CALL_OW 488
20936: NOT
20937: OR
20938: PUSH
20939: LD_VAR 0 4
20943: NOT
20944: OR
20945: IFFALSE 20949
// exit ;
20947: GO 21289
// list := [ ] ;
20949: LD_ADDR_VAR 0 13
20953: PUSH
20954: EMPTY
20955: ST_TO_ADDR
// if x - r < 0 then
20956: LD_VAR 0 2
20960: PUSH
20961: LD_VAR 0 4
20965: MINUS
20966: PUSH
20967: LD_INT 0
20969: LESS
20970: IFFALSE 20982
// min_x := 0 else
20972: LD_ADDR_VAR 0 7
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
20980: GO 20998
// min_x := x - r ;
20982: LD_ADDR_VAR 0 7
20986: PUSH
20987: LD_VAR 0 2
20991: PUSH
20992: LD_VAR 0 4
20996: MINUS
20997: ST_TO_ADDR
// if y - r < 0 then
20998: LD_VAR 0 3
21002: PUSH
21003: LD_VAR 0 4
21007: MINUS
21008: PUSH
21009: LD_INT 0
21011: LESS
21012: IFFALSE 21024
// min_y := 0 else
21014: LD_ADDR_VAR 0 8
21018: PUSH
21019: LD_INT 0
21021: ST_TO_ADDR
21022: GO 21040
// min_y := y - r ;
21024: LD_ADDR_VAR 0 8
21028: PUSH
21029: LD_VAR 0 3
21033: PUSH
21034: LD_VAR 0 4
21038: MINUS
21039: ST_TO_ADDR
// max_x := x + r ;
21040: LD_ADDR_VAR 0 9
21044: PUSH
21045: LD_VAR 0 2
21049: PUSH
21050: LD_VAR 0 4
21054: PLUS
21055: ST_TO_ADDR
// max_y := y + r ;
21056: LD_ADDR_VAR 0 10
21060: PUSH
21061: LD_VAR 0 3
21065: PUSH
21066: LD_VAR 0 4
21070: PLUS
21071: ST_TO_ADDR
// for _x = min_x to max_x do
21072: LD_ADDR_VAR 0 11
21076: PUSH
21077: DOUBLE
21078: LD_VAR 0 7
21082: DEC
21083: ST_TO_ADDR
21084: LD_VAR 0 9
21088: PUSH
21089: FOR_TO
21090: IFFALSE 21207
// for _y = min_y to max_y do
21092: LD_ADDR_VAR 0 12
21096: PUSH
21097: DOUBLE
21098: LD_VAR 0 8
21102: DEC
21103: ST_TO_ADDR
21104: LD_VAR 0 10
21108: PUSH
21109: FOR_TO
21110: IFFALSE 21203
// begin if not ValidHex ( _x , _y ) then
21112: LD_VAR 0 11
21116: PPUSH
21117: LD_VAR 0 12
21121: PPUSH
21122: CALL_OW 488
21126: NOT
21127: IFFALSE 21131
// continue ;
21129: GO 21109
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21131: LD_VAR 0 11
21135: PPUSH
21136: LD_VAR 0 12
21140: PPUSH
21141: CALL_OW 351
21145: PUSH
21146: LD_VAR 0 11
21150: PPUSH
21151: LD_VAR 0 12
21155: PPUSH
21156: CALL_OW 554
21160: AND
21161: IFFALSE 21201
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21163: LD_ADDR_VAR 0 13
21167: PUSH
21168: LD_VAR 0 13
21172: PPUSH
21173: LD_VAR 0 13
21177: PUSH
21178: LD_INT 1
21180: PLUS
21181: PPUSH
21182: LD_VAR 0 11
21186: PUSH
21187: LD_VAR 0 12
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PPUSH
21196: CALL_OW 2
21200: ST_TO_ADDR
// end ;
21201: GO 21109
21203: POP
21204: POP
21205: GO 21089
21207: POP
21208: POP
// if not list then
21209: LD_VAR 0 13
21213: NOT
21214: IFFALSE 21218
// exit ;
21216: GO 21289
// for i in list do
21218: LD_ADDR_VAR 0 6
21222: PUSH
21223: LD_VAR 0 13
21227: PUSH
21228: FOR_IN
21229: IFFALSE 21287
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21231: LD_VAR 0 1
21235: PPUSH
21236: LD_STRING M
21238: PUSH
21239: LD_VAR 0 6
21243: PUSH
21244: LD_INT 1
21246: ARRAY
21247: PUSH
21248: LD_VAR 0 6
21252: PUSH
21253: LD_INT 2
21255: ARRAY
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: PPUSH
21281: CALL_OW 447
21285: GO 21228
21287: POP
21288: POP
// end ;
21289: LD_VAR 0 5
21293: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21294: LD_EXP 99
21298: NOT
21299: IFFALSE 21349
21301: GO 21303
21303: DISABLE
// begin initHack := true ;
21304: LD_ADDR_EXP 99
21308: PUSH
21309: LD_INT 1
21311: ST_TO_ADDR
// hackTanks := [ ] ;
21312: LD_ADDR_EXP 100
21316: PUSH
21317: EMPTY
21318: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21319: LD_ADDR_EXP 101
21323: PUSH
21324: EMPTY
21325: ST_TO_ADDR
// hackLimit := 3 ;
21326: LD_ADDR_EXP 102
21330: PUSH
21331: LD_INT 3
21333: ST_TO_ADDR
// hackDist := 12 ;
21334: LD_ADDR_EXP 103
21338: PUSH
21339: LD_INT 12
21341: ST_TO_ADDR
// hackCounter := [ ] ;
21342: LD_ADDR_EXP 104
21346: PUSH
21347: EMPTY
21348: ST_TO_ADDR
// end ;
21349: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21350: LD_EXP 99
21354: PUSH
21355: LD_INT 34
21357: PUSH
21358: LD_EXP 31
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PPUSH
21367: CALL_OW 69
21371: AND
21372: IFFALSE 21627
21374: GO 21376
21376: DISABLE
21377: LD_INT 0
21379: PPUSH
21380: PPUSH
// begin enable ;
21381: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21382: LD_ADDR_VAR 0 1
21386: PUSH
21387: LD_INT 34
21389: PUSH
21390: LD_EXP 31
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: PUSH
21404: FOR_IN
21405: IFFALSE 21625
// begin if not i in hackTanks then
21407: LD_VAR 0 1
21411: PUSH
21412: LD_EXP 100
21416: IN
21417: NOT
21418: IFFALSE 21501
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21420: LD_ADDR_EXP 100
21424: PUSH
21425: LD_EXP 100
21429: PPUSH
21430: LD_EXP 100
21434: PUSH
21435: LD_INT 1
21437: PLUS
21438: PPUSH
21439: LD_VAR 0 1
21443: PPUSH
21444: CALL_OW 1
21448: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21449: LD_ADDR_EXP 101
21453: PUSH
21454: LD_EXP 101
21458: PPUSH
21459: LD_EXP 101
21463: PUSH
21464: LD_INT 1
21466: PLUS
21467: PPUSH
21468: EMPTY
21469: PPUSH
21470: CALL_OW 1
21474: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21475: LD_ADDR_EXP 104
21479: PUSH
21480: LD_EXP 104
21484: PPUSH
21485: LD_EXP 104
21489: PUSH
21490: LD_INT 1
21492: PLUS
21493: PPUSH
21494: EMPTY
21495: PPUSH
21496: CALL_OW 1
21500: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21501: LD_VAR 0 1
21505: PPUSH
21506: CALL_OW 302
21510: NOT
21511: IFFALSE 21524
// begin HackUnlinkAll ( i ) ;
21513: LD_VAR 0 1
21517: PPUSH
21518: CALL 21630 0 1
// continue ;
21522: GO 21404
// end ; HackCheckCapturedStatus ( i ) ;
21524: LD_VAR 0 1
21528: PPUSH
21529: CALL 22073 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21533: LD_ADDR_VAR 0 2
21537: PUSH
21538: LD_INT 81
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 255
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 33
21557: PUSH
21558: LD_INT 3
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 91
21567: PUSH
21568: LD_VAR 0 1
21572: PUSH
21573: LD_EXP 103
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 50
21585: PUSH
21586: EMPTY
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PPUSH
21595: CALL_OW 69
21599: ST_TO_ADDR
// if not tmp then
21600: LD_VAR 0 2
21604: NOT
21605: IFFALSE 21609
// continue ;
21607: GO 21404
// HackLink ( i , tmp ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_VAR 0 2
21618: PPUSH
21619: CALL 21766 0 2
// end ;
21623: GO 21404
21625: POP
21626: POP
// end ;
21627: PPOPN 2
21629: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
21634: PPUSH
// if not hack in hackTanks then
21635: LD_VAR 0 1
21639: PUSH
21640: LD_EXP 100
21644: IN
21645: NOT
21646: IFFALSE 21650
// exit ;
21648: GO 21761
// index := GetElementIndex ( hackTanks , hack ) ;
21650: LD_ADDR_VAR 0 4
21654: PUSH
21655: LD_EXP 100
21659: PPUSH
21660: LD_VAR 0 1
21664: PPUSH
21665: CALL 27181 0 2
21669: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21670: LD_EXP 101
21674: PUSH
21675: LD_VAR 0 4
21679: ARRAY
21680: IFFALSE 21761
// begin for i in hackTanksCaptured [ index ] do
21682: LD_ADDR_VAR 0 3
21686: PUSH
21687: LD_EXP 101
21691: PUSH
21692: LD_VAR 0 4
21696: ARRAY
21697: PUSH
21698: FOR_IN
21699: IFFALSE 21725
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21701: LD_VAR 0 3
21705: PUSH
21706: LD_INT 1
21708: ARRAY
21709: PPUSH
21710: LD_VAR 0 3
21714: PUSH
21715: LD_INT 2
21717: ARRAY
21718: PPUSH
21719: CALL_OW 235
21723: GO 21698
21725: POP
21726: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21727: LD_ADDR_EXP 101
21731: PUSH
21732: LD_EXP 101
21736: PPUSH
21737: LD_VAR 0 4
21741: PPUSH
21742: EMPTY
21743: PPUSH
21744: CALL_OW 1
21748: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21749: LD_VAR 0 1
21753: PPUSH
21754: LD_INT 0
21756: PPUSH
21757: CALL_OW 505
// end ; end ;
21761: LD_VAR 0 2
21765: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21766: LD_INT 0
21768: PPUSH
21769: PPUSH
21770: PPUSH
// if not hack in hackTanks or not vehicles then
21771: LD_VAR 0 1
21775: PUSH
21776: LD_EXP 100
21780: IN
21781: NOT
21782: PUSH
21783: LD_VAR 0 2
21787: NOT
21788: OR
21789: IFFALSE 21793
// exit ;
21791: GO 22068
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21793: LD_ADDR_VAR 0 2
21797: PUSH
21798: LD_VAR 0 1
21802: PPUSH
21803: LD_VAR 0 2
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: LD_INT 1
21813: PPUSH
21814: CALL 27831 0 4
21818: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21819: LD_ADDR_VAR 0 5
21823: PUSH
21824: LD_EXP 100
21828: PPUSH
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL 27181 0 2
21838: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21839: LD_EXP 101
21843: PUSH
21844: LD_VAR 0 5
21848: ARRAY
21849: PUSH
21850: LD_EXP 102
21854: LESS
21855: IFFALSE 22044
// begin for i := 1 to vehicles do
21857: LD_ADDR_VAR 0 4
21861: PUSH
21862: DOUBLE
21863: LD_INT 1
21865: DEC
21866: ST_TO_ADDR
21867: LD_VAR 0 2
21871: PUSH
21872: FOR_TO
21873: IFFALSE 22042
// begin if hackTanksCaptured [ index ] = hackLimit then
21875: LD_EXP 101
21879: PUSH
21880: LD_VAR 0 5
21884: ARRAY
21885: PUSH
21886: LD_EXP 102
21890: EQUAL
21891: IFFALSE 21895
// break ;
21893: GO 22042
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21895: LD_ADDR_EXP 104
21899: PUSH
21900: LD_EXP 104
21904: PPUSH
21905: LD_VAR 0 5
21909: PPUSH
21910: LD_EXP 104
21914: PUSH
21915: LD_VAR 0 5
21919: ARRAY
21920: PUSH
21921: LD_INT 1
21923: PLUS
21924: PPUSH
21925: CALL_OW 1
21929: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21930: LD_ADDR_EXP 101
21934: PUSH
21935: LD_EXP 101
21939: PPUSH
21940: LD_VAR 0 5
21944: PUSH
21945: LD_EXP 101
21949: PUSH
21950: LD_VAR 0 5
21954: ARRAY
21955: PUSH
21956: LD_INT 1
21958: PLUS
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PPUSH
21964: LD_VAR 0 2
21968: PUSH
21969: LD_VAR 0 4
21973: ARRAY
21974: PUSH
21975: LD_VAR 0 2
21979: PUSH
21980: LD_VAR 0 4
21984: ARRAY
21985: PPUSH
21986: CALL_OW 255
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL 27396 0 3
21999: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22000: LD_VAR 0 2
22004: PUSH
22005: LD_VAR 0 4
22009: ARRAY
22010: PPUSH
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 255
22020: PPUSH
22021: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22025: LD_VAR 0 2
22029: PUSH
22030: LD_VAR 0 4
22034: ARRAY
22035: PPUSH
22036: CALL_OW 141
// end ;
22040: GO 21872
22042: POP
22043: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_EXP 101
22053: PUSH
22054: LD_VAR 0 5
22058: ARRAY
22059: PUSH
22060: LD_INT 0
22062: PLUS
22063: PPUSH
22064: CALL_OW 505
// end ;
22068: LD_VAR 0 3
22072: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22073: LD_INT 0
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
// if not hack in hackTanks then
22079: LD_VAR 0 1
22083: PUSH
22084: LD_EXP 100
22088: IN
22089: NOT
22090: IFFALSE 22094
// exit ;
22092: GO 22334
// index := GetElementIndex ( hackTanks , hack ) ;
22094: LD_ADDR_VAR 0 4
22098: PUSH
22099: LD_EXP 100
22103: PPUSH
22104: LD_VAR 0 1
22108: PPUSH
22109: CALL 27181 0 2
22113: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22114: LD_ADDR_VAR 0 3
22118: PUSH
22119: DOUBLE
22120: LD_EXP 101
22124: PUSH
22125: LD_VAR 0 4
22129: ARRAY
22130: INC
22131: ST_TO_ADDR
22132: LD_INT 1
22134: PUSH
22135: FOR_DOWNTO
22136: IFFALSE 22308
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22138: LD_ADDR_VAR 0 5
22142: PUSH
22143: LD_EXP 101
22147: PUSH
22148: LD_VAR 0 4
22152: ARRAY
22153: PUSH
22154: LD_VAR 0 3
22158: ARRAY
22159: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22160: LD_VAR 0 5
22164: PUSH
22165: LD_INT 1
22167: ARRAY
22168: PPUSH
22169: CALL_OW 302
22173: NOT
22174: PUSH
22175: LD_VAR 0 5
22179: PUSH
22180: LD_INT 1
22182: ARRAY
22183: PPUSH
22184: CALL_OW 255
22188: PUSH
22189: LD_VAR 0 1
22193: PPUSH
22194: CALL_OW 255
22198: NONEQUAL
22199: OR
22200: IFFALSE 22306
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22202: LD_VAR 0 5
22206: PUSH
22207: LD_INT 1
22209: ARRAY
22210: PPUSH
22211: CALL_OW 305
22215: PUSH
22216: LD_VAR 0 5
22220: PUSH
22221: LD_INT 1
22223: ARRAY
22224: PPUSH
22225: CALL_OW 255
22229: PUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 255
22239: EQUAL
22240: AND
22241: IFFALSE 22265
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22243: LD_VAR 0 5
22247: PUSH
22248: LD_INT 1
22250: ARRAY
22251: PPUSH
22252: LD_VAR 0 5
22256: PUSH
22257: LD_INT 2
22259: ARRAY
22260: PPUSH
22261: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22265: LD_ADDR_EXP 101
22269: PUSH
22270: LD_EXP 101
22274: PPUSH
22275: LD_VAR 0 4
22279: PPUSH
22280: LD_EXP 101
22284: PUSH
22285: LD_VAR 0 4
22289: ARRAY
22290: PPUSH
22291: LD_VAR 0 3
22295: PPUSH
22296: CALL_OW 3
22300: PPUSH
22301: CALL_OW 1
22305: ST_TO_ADDR
// end ; end ;
22306: GO 22135
22308: POP
22309: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22310: LD_VAR 0 1
22314: PPUSH
22315: LD_EXP 101
22319: PUSH
22320: LD_VAR 0 4
22324: ARRAY
22325: PUSH
22326: LD_INT 0
22328: PLUS
22329: PPUSH
22330: CALL_OW 505
// end ;
22334: LD_VAR 0 2
22338: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
// if not hack in hackTanks then
22345: LD_VAR 0 1
22349: PUSH
22350: LD_EXP 100
22354: IN
22355: NOT
22356: IFFALSE 22360
// exit ;
22358: GO 22445
// index := GetElementIndex ( hackTanks , hack ) ;
22360: LD_ADDR_VAR 0 5
22364: PUSH
22365: LD_EXP 100
22369: PPUSH
22370: LD_VAR 0 1
22374: PPUSH
22375: CALL 27181 0 2
22379: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22380: LD_ADDR_VAR 0 4
22384: PUSH
22385: DOUBLE
22386: LD_INT 1
22388: DEC
22389: ST_TO_ADDR
22390: LD_EXP 101
22394: PUSH
22395: LD_VAR 0 5
22399: ARRAY
22400: PUSH
22401: FOR_TO
22402: IFFALSE 22443
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22404: LD_EXP 101
22408: PUSH
22409: LD_VAR 0 5
22413: ARRAY
22414: PUSH
22415: LD_VAR 0 4
22419: ARRAY
22420: PUSH
22421: LD_INT 1
22423: ARRAY
22424: PUSH
22425: LD_VAR 0 2
22429: EQUAL
22430: IFFALSE 22441
// KillUnit ( vehicle ) ;
22432: LD_VAR 0 2
22436: PPUSH
22437: CALL_OW 66
22441: GO 22401
22443: POP
22444: POP
// end ; end_of_file
22445: LD_VAR 0 3
22449: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22450: LD_INT 0
22452: PPUSH
22453: PPUSH
// if exist_mode then
22454: LD_VAR 0 2
22458: IFFALSE 22483
// unit := CreateCharacter ( prefix & ident ) else
22460: LD_ADDR_VAR 0 5
22464: PUSH
22465: LD_VAR 0 3
22469: PUSH
22470: LD_VAR 0 1
22474: STR
22475: PPUSH
22476: CALL_OW 34
22480: ST_TO_ADDR
22481: GO 22498
// unit := NewCharacter ( ident ) ;
22483: LD_ADDR_VAR 0 5
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 25
22497: ST_TO_ADDR
// result := unit ;
22498: LD_ADDR_VAR 0 4
22502: PUSH
22503: LD_VAR 0 5
22507: ST_TO_ADDR
// end ;
22508: LD_VAR 0 4
22512: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22513: LD_INT 0
22515: PPUSH
22516: PPUSH
// if not side or not nation then
22517: LD_VAR 0 1
22521: NOT
22522: PUSH
22523: LD_VAR 0 2
22527: NOT
22528: OR
22529: IFFALSE 22533
// exit ;
22531: GO 23297
// case nation of nation_american :
22533: LD_VAR 0 2
22537: PUSH
22538: LD_INT 1
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22760
22546: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22547: LD_ADDR_VAR 0 4
22551: PUSH
22552: LD_INT 35
22554: PUSH
22555: LD_INT 45
22557: PUSH
22558: LD_INT 46
22560: PUSH
22561: LD_INT 47
22563: PUSH
22564: LD_INT 82
22566: PUSH
22567: LD_INT 83
22569: PUSH
22570: LD_INT 84
22572: PUSH
22573: LD_INT 85
22575: PUSH
22576: LD_INT 86
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 6
22587: PUSH
22588: LD_INT 15
22590: PUSH
22591: LD_INT 16
22593: PUSH
22594: LD_INT 7
22596: PUSH
22597: LD_INT 12
22599: PUSH
22600: LD_INT 13
22602: PUSH
22603: LD_INT 10
22605: PUSH
22606: LD_INT 14
22608: PUSH
22609: LD_INT 20
22611: PUSH
22612: LD_INT 21
22614: PUSH
22615: LD_INT 22
22617: PUSH
22618: LD_INT 25
22620: PUSH
22621: LD_INT 32
22623: PUSH
22624: LD_INT 27
22626: PUSH
22627: LD_INT 36
22629: PUSH
22630: LD_INT 69
22632: PUSH
22633: LD_INT 39
22635: PUSH
22636: LD_INT 34
22638: PUSH
22639: LD_INT 40
22641: PUSH
22642: LD_INT 48
22644: PUSH
22645: LD_INT 49
22647: PUSH
22648: LD_INT 50
22650: PUSH
22651: LD_INT 51
22653: PUSH
22654: LD_INT 52
22656: PUSH
22657: LD_INT 53
22659: PUSH
22660: LD_INT 54
22662: PUSH
22663: LD_INT 55
22665: PUSH
22666: LD_INT 56
22668: PUSH
22669: LD_INT 57
22671: PUSH
22672: LD_INT 58
22674: PUSH
22675: LD_INT 59
22677: PUSH
22678: LD_INT 60
22680: PUSH
22681: LD_INT 61
22683: PUSH
22684: LD_INT 62
22686: PUSH
22687: LD_INT 80
22689: PUSH
22690: LD_INT 82
22692: PUSH
22693: LD_INT 83
22695: PUSH
22696: LD_INT 84
22698: PUSH
22699: LD_INT 85
22701: PUSH
22702: LD_INT 86
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: ST_TO_ADDR
22758: GO 23221
22760: LD_INT 2
22762: DOUBLE
22763: EQUAL
22764: IFTRUE 22768
22766: GO 22990
22768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22769: LD_ADDR_VAR 0 4
22773: PUSH
22774: LD_INT 35
22776: PUSH
22777: LD_INT 45
22779: PUSH
22780: LD_INT 46
22782: PUSH
22783: LD_INT 47
22785: PUSH
22786: LD_INT 82
22788: PUSH
22789: LD_INT 83
22791: PUSH
22792: LD_INT 84
22794: PUSH
22795: LD_INT 85
22797: PUSH
22798: LD_INT 87
22800: PUSH
22801: LD_INT 70
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: LD_INT 11
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: LD_INT 4
22815: PUSH
22816: LD_INT 5
22818: PUSH
22819: LD_INT 6
22821: PUSH
22822: LD_INT 15
22824: PUSH
22825: LD_INT 18
22827: PUSH
22828: LD_INT 7
22830: PUSH
22831: LD_INT 17
22833: PUSH
22834: LD_INT 8
22836: PUSH
22837: LD_INT 20
22839: PUSH
22840: LD_INT 21
22842: PUSH
22843: LD_INT 22
22845: PUSH
22846: LD_INT 72
22848: PUSH
22849: LD_INT 26
22851: PUSH
22852: LD_INT 69
22854: PUSH
22855: LD_INT 39
22857: PUSH
22858: LD_INT 40
22860: PUSH
22861: LD_INT 41
22863: PUSH
22864: LD_INT 42
22866: PUSH
22867: LD_INT 43
22869: PUSH
22870: LD_INT 48
22872: PUSH
22873: LD_INT 49
22875: PUSH
22876: LD_INT 50
22878: PUSH
22879: LD_INT 51
22881: PUSH
22882: LD_INT 52
22884: PUSH
22885: LD_INT 53
22887: PUSH
22888: LD_INT 54
22890: PUSH
22891: LD_INT 55
22893: PUSH
22894: LD_INT 56
22896: PUSH
22897: LD_INT 60
22899: PUSH
22900: LD_INT 61
22902: PUSH
22903: LD_INT 62
22905: PUSH
22906: LD_INT 66
22908: PUSH
22909: LD_INT 67
22911: PUSH
22912: LD_INT 68
22914: PUSH
22915: LD_INT 81
22917: PUSH
22918: LD_INT 82
22920: PUSH
22921: LD_INT 83
22923: PUSH
22924: LD_INT 84
22926: PUSH
22927: LD_INT 85
22929: PUSH
22930: LD_INT 87
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: ST_TO_ADDR
22988: GO 23221
22990: LD_INT 3
22992: DOUBLE
22993: EQUAL
22994: IFTRUE 22998
22996: GO 23220
22998: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22999: LD_ADDR_VAR 0 4
23003: PUSH
23004: LD_INT 46
23006: PUSH
23007: LD_INT 47
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 82
23018: PUSH
23019: LD_INT 83
23021: PUSH
23022: LD_INT 84
23024: PUSH
23025: LD_INT 85
23027: PUSH
23028: LD_INT 86
23030: PUSH
23031: LD_INT 11
23033: PUSH
23034: LD_INT 9
23036: PUSH
23037: LD_INT 20
23039: PUSH
23040: LD_INT 19
23042: PUSH
23043: LD_INT 21
23045: PUSH
23046: LD_INT 24
23048: PUSH
23049: LD_INT 22
23051: PUSH
23052: LD_INT 25
23054: PUSH
23055: LD_INT 28
23057: PUSH
23058: LD_INT 29
23060: PUSH
23061: LD_INT 30
23063: PUSH
23064: LD_INT 31
23066: PUSH
23067: LD_INT 37
23069: PUSH
23070: LD_INT 38
23072: PUSH
23073: LD_INT 32
23075: PUSH
23076: LD_INT 27
23078: PUSH
23079: LD_INT 33
23081: PUSH
23082: LD_INT 69
23084: PUSH
23085: LD_INT 39
23087: PUSH
23088: LD_INT 34
23090: PUSH
23091: LD_INT 40
23093: PUSH
23094: LD_INT 71
23096: PUSH
23097: LD_INT 23
23099: PUSH
23100: LD_INT 44
23102: PUSH
23103: LD_INT 48
23105: PUSH
23106: LD_INT 49
23108: PUSH
23109: LD_INT 50
23111: PUSH
23112: LD_INT 51
23114: PUSH
23115: LD_INT 52
23117: PUSH
23118: LD_INT 53
23120: PUSH
23121: LD_INT 54
23123: PUSH
23124: LD_INT 55
23126: PUSH
23127: LD_INT 56
23129: PUSH
23130: LD_INT 57
23132: PUSH
23133: LD_INT 58
23135: PUSH
23136: LD_INT 59
23138: PUSH
23139: LD_INT 63
23141: PUSH
23142: LD_INT 64
23144: PUSH
23145: LD_INT 65
23147: PUSH
23148: LD_INT 82
23150: PUSH
23151: LD_INT 83
23153: PUSH
23154: LD_INT 84
23156: PUSH
23157: LD_INT 85
23159: PUSH
23160: LD_INT 86
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: ST_TO_ADDR
23218: GO 23221
23220: POP
// if state > - 1 and state < 3 then
23221: LD_VAR 0 3
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: GREATER
23230: PUSH
23231: LD_VAR 0 3
23235: PUSH
23236: LD_INT 3
23238: LESS
23239: AND
23240: IFFALSE 23297
// for i in result do
23242: LD_ADDR_VAR 0 5
23246: PUSH
23247: LD_VAR 0 4
23251: PUSH
23252: FOR_IN
23253: IFFALSE 23295
// if GetTech ( i , side ) <> state then
23255: LD_VAR 0 5
23259: PPUSH
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL_OW 321
23269: PUSH
23270: LD_VAR 0 3
23274: NONEQUAL
23275: IFFALSE 23293
// result := result diff i ;
23277: LD_ADDR_VAR 0 4
23281: PUSH
23282: LD_VAR 0 4
23286: PUSH
23287: LD_VAR 0 5
23291: DIFF
23292: ST_TO_ADDR
23293: GO 23252
23295: POP
23296: POP
// end ;
23297: LD_VAR 0 4
23301: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23302: LD_INT 0
23304: PPUSH
23305: PPUSH
23306: PPUSH
// result := true ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_INT 1
23314: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23315: LD_ADDR_VAR 0 5
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 480
23329: ST_TO_ADDR
// if not tmp then
23330: LD_VAR 0 5
23334: NOT
23335: IFFALSE 23339
// exit ;
23337: GO 23388
// for i in tmp do
23339: LD_ADDR_VAR 0 4
23343: PUSH
23344: LD_VAR 0 5
23348: PUSH
23349: FOR_IN
23350: IFFALSE 23386
// if GetTech ( i , side ) <> state_researched then
23352: LD_VAR 0 4
23356: PPUSH
23357: LD_VAR 0 1
23361: PPUSH
23362: CALL_OW 321
23366: PUSH
23367: LD_INT 2
23369: NONEQUAL
23370: IFFALSE 23384
// begin result := false ;
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_INT 0
23379: ST_TO_ADDR
// exit ;
23380: POP
23381: POP
23382: GO 23388
// end ;
23384: GO 23349
23386: POP
23387: POP
// end ;
23388: LD_VAR 0 3
23392: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23393: LD_INT 0
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
23407: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23408: LD_VAR 0 1
23412: NOT
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 257
23423: PUSH
23424: LD_INT 9
23426: NONEQUAL
23427: OR
23428: IFFALSE 23432
// exit ;
23430: GO 24005
// side := GetSide ( unit ) ;
23432: LD_ADDR_VAR 0 9
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 255
23446: ST_TO_ADDR
// tech_space := tech_spacanom ;
23447: LD_ADDR_VAR 0 12
23451: PUSH
23452: LD_INT 29
23454: ST_TO_ADDR
// tech_time := tech_taurad ;
23455: LD_ADDR_VAR 0 13
23459: PUSH
23460: LD_INT 28
23462: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23463: LD_ADDR_VAR 0 11
23467: PUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 310
23477: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23478: LD_VAR 0 11
23482: PPUSH
23483: CALL_OW 247
23487: PUSH
23488: LD_INT 2
23490: EQUAL
23491: IFFALSE 23495
// exit ;
23493: GO 24005
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23495: LD_ADDR_VAR 0 8
23499: PUSH
23500: LD_INT 81
23502: PUSH
23503: LD_VAR 0 9
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: LD_INT 21
23517: PUSH
23518: LD_INT 3
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PPUSH
23533: CALL_OW 69
23537: ST_TO_ADDR
// if not tmp then
23538: LD_VAR 0 8
23542: NOT
23543: IFFALSE 23547
// exit ;
23545: GO 24005
// if in_unit then
23547: LD_VAR 0 11
23551: IFFALSE 23575
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23553: LD_ADDR_VAR 0 10
23557: PUSH
23558: LD_VAR 0 8
23562: PPUSH
23563: LD_VAR 0 11
23567: PPUSH
23568: CALL_OW 74
23572: ST_TO_ADDR
23573: GO 23595
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23575: LD_ADDR_VAR 0 10
23579: PUSH
23580: LD_VAR 0 8
23584: PPUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 74
23594: ST_TO_ADDR
// if not enemy then
23595: LD_VAR 0 10
23599: NOT
23600: IFFALSE 23604
// exit ;
23602: GO 24005
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23604: LD_VAR 0 11
23608: PUSH
23609: LD_VAR 0 11
23613: PPUSH
23614: LD_VAR 0 10
23618: PPUSH
23619: CALL_OW 296
23623: PUSH
23624: LD_INT 13
23626: GREATER
23627: AND
23628: PUSH
23629: LD_VAR 0 1
23633: PPUSH
23634: LD_VAR 0 10
23638: PPUSH
23639: CALL_OW 296
23643: PUSH
23644: LD_INT 12
23646: GREATER
23647: OR
23648: IFFALSE 23652
// exit ;
23650: GO 24005
// missile := [ 1 ] ;
23652: LD_ADDR_VAR 0 14
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: EMPTY
23661: LIST
23662: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23663: LD_VAR 0 9
23667: PPUSH
23668: LD_VAR 0 12
23672: PPUSH
23673: CALL_OW 325
23677: IFFALSE 23706
// missile := Insert ( missile , missile + 1 , 2 ) ;
23679: LD_ADDR_VAR 0 14
23683: PUSH
23684: LD_VAR 0 14
23688: PPUSH
23689: LD_VAR 0 14
23693: PUSH
23694: LD_INT 1
23696: PLUS
23697: PPUSH
23698: LD_INT 2
23700: PPUSH
23701: CALL_OW 2
23705: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23706: LD_VAR 0 9
23710: PPUSH
23711: LD_VAR 0 13
23715: PPUSH
23716: CALL_OW 325
23720: PUSH
23721: LD_VAR 0 10
23725: PPUSH
23726: CALL_OW 255
23730: PPUSH
23731: LD_VAR 0 13
23735: PPUSH
23736: CALL_OW 325
23740: NOT
23741: AND
23742: IFFALSE 23771
// missile := Insert ( missile , missile + 1 , 3 ) ;
23744: LD_ADDR_VAR 0 14
23748: PUSH
23749: LD_VAR 0 14
23753: PPUSH
23754: LD_VAR 0 14
23758: PUSH
23759: LD_INT 1
23761: PLUS
23762: PPUSH
23763: LD_INT 3
23765: PPUSH
23766: CALL_OW 2
23770: ST_TO_ADDR
// if missile < 2 then
23771: LD_VAR 0 14
23775: PUSH
23776: LD_INT 2
23778: LESS
23779: IFFALSE 23783
// exit ;
23781: GO 24005
// x := GetX ( enemy ) ;
23783: LD_ADDR_VAR 0 4
23787: PUSH
23788: LD_VAR 0 10
23792: PPUSH
23793: CALL_OW 250
23797: ST_TO_ADDR
// y := GetY ( enemy ) ;
23798: LD_ADDR_VAR 0 5
23802: PUSH
23803: LD_VAR 0 10
23807: PPUSH
23808: CALL_OW 251
23812: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23813: LD_ADDR_VAR 0 6
23817: PUSH
23818: LD_VAR 0 4
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PPUSH
23827: LD_INT 1
23829: PPUSH
23830: CALL_OW 12
23834: PLUS
23835: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23836: LD_ADDR_VAR 0 7
23840: PUSH
23841: LD_VAR 0 5
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PPUSH
23850: LD_INT 1
23852: PPUSH
23853: CALL_OW 12
23857: PLUS
23858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23859: LD_VAR 0 6
23863: PPUSH
23864: LD_VAR 0 7
23868: PPUSH
23869: CALL_OW 488
23873: NOT
23874: IFFALSE 23896
// begin _x := x ;
23876: LD_ADDR_VAR 0 6
23880: PUSH
23881: LD_VAR 0 4
23885: ST_TO_ADDR
// _y := y ;
23886: LD_ADDR_VAR 0 7
23890: PUSH
23891: LD_VAR 0 5
23895: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23896: LD_ADDR_VAR 0 3
23900: PUSH
23901: LD_INT 1
23903: PPUSH
23904: LD_VAR 0 14
23908: PPUSH
23909: CALL_OW 12
23913: ST_TO_ADDR
// case i of 1 :
23914: LD_VAR 0 3
23918: PUSH
23919: LD_INT 1
23921: DOUBLE
23922: EQUAL
23923: IFTRUE 23927
23925: GO 23944
23927: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23928: LD_VAR 0 1
23932: PPUSH
23933: LD_VAR 0 10
23937: PPUSH
23938: CALL_OW 115
23942: GO 24005
23944: LD_INT 2
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23952
23950: GO 23974
23952: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23953: LD_VAR 0 1
23957: PPUSH
23958: LD_VAR 0 6
23962: PPUSH
23963: LD_VAR 0 7
23967: PPUSH
23968: CALL_OW 153
23972: GO 24005
23974: LD_INT 3
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 24004
23982: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23983: LD_VAR 0 1
23987: PPUSH
23988: LD_VAR 0 6
23992: PPUSH
23993: LD_VAR 0 7
23997: PPUSH
23998: CALL_OW 154
24002: GO 24005
24004: POP
// end ;
24005: LD_VAR 0 2
24009: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24010: LD_INT 0
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
// if not unit or not building then
24018: LD_VAR 0 1
24022: NOT
24023: PUSH
24024: LD_VAR 0 2
24028: NOT
24029: OR
24030: IFFALSE 24034
// exit ;
24032: GO 24192
// x := GetX ( building ) ;
24034: LD_ADDR_VAR 0 5
24038: PUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL_OW 250
24048: ST_TO_ADDR
// y := GetY ( building ) ;
24049: LD_ADDR_VAR 0 6
24053: PUSH
24054: LD_VAR 0 2
24058: PPUSH
24059: CALL_OW 251
24063: ST_TO_ADDR
// for i = 0 to 5 do
24064: LD_ADDR_VAR 0 4
24068: PUSH
24069: DOUBLE
24070: LD_INT 0
24072: DEC
24073: ST_TO_ADDR
24074: LD_INT 5
24076: PUSH
24077: FOR_TO
24078: IFFALSE 24190
// begin _x := ShiftX ( x , i , 3 ) ;
24080: LD_ADDR_VAR 0 7
24084: PUSH
24085: LD_VAR 0 5
24089: PPUSH
24090: LD_VAR 0 4
24094: PPUSH
24095: LD_INT 3
24097: PPUSH
24098: CALL_OW 272
24102: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24103: LD_ADDR_VAR 0 8
24107: PUSH
24108: LD_VAR 0 6
24112: PPUSH
24113: LD_VAR 0 4
24117: PPUSH
24118: LD_INT 3
24120: PPUSH
24121: CALL_OW 273
24125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24126: LD_VAR 0 7
24130: PPUSH
24131: LD_VAR 0 8
24135: PPUSH
24136: CALL_OW 488
24140: NOT
24141: IFFALSE 24145
// continue ;
24143: GO 24077
// if HexInfo ( _x , _y ) = 0 then
24145: LD_VAR 0 7
24149: PPUSH
24150: LD_VAR 0 8
24154: PPUSH
24155: CALL_OW 428
24159: PUSH
24160: LD_INT 0
24162: EQUAL
24163: IFFALSE 24188
// begin ComMoveXY ( unit , _x , _y ) ;
24165: LD_VAR 0 1
24169: PPUSH
24170: LD_VAR 0 7
24174: PPUSH
24175: LD_VAR 0 8
24179: PPUSH
24180: CALL_OW 111
// exit ;
24184: POP
24185: POP
24186: GO 24192
// end ; end ;
24188: GO 24077
24190: POP
24191: POP
// end ;
24192: LD_VAR 0 3
24196: RET
// export function ScanBase ( side , base_area ) ; begin
24197: LD_INT 0
24199: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24200: LD_ADDR_VAR 0 3
24204: PUSH
24205: LD_VAR 0 2
24209: PPUSH
24210: LD_INT 81
24212: PUSH
24213: LD_VAR 0 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PPUSH
24222: CALL_OW 70
24226: ST_TO_ADDR
// end ;
24227: LD_VAR 0 3
24231: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24232: LD_INT 0
24234: PPUSH
24235: PPUSH
24236: PPUSH
24237: PPUSH
// result := false ;
24238: LD_ADDR_VAR 0 2
24242: PUSH
24243: LD_INT 0
24245: ST_TO_ADDR
// side := GetSide ( unit ) ;
24246: LD_ADDR_VAR 0 3
24250: PUSH
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL_OW 255
24260: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24261: LD_ADDR_VAR 0 4
24265: PUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 248
24275: ST_TO_ADDR
// case nat of 1 :
24276: LD_VAR 0 4
24280: PUSH
24281: LD_INT 1
24283: DOUBLE
24284: EQUAL
24285: IFTRUE 24289
24287: GO 24300
24289: POP
// tech := tech_lassight ; 2 :
24290: LD_ADDR_VAR 0 5
24294: PUSH
24295: LD_INT 12
24297: ST_TO_ADDR
24298: GO 24339
24300: LD_INT 2
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24319
24308: POP
// tech := tech_mortar ; 3 :
24309: LD_ADDR_VAR 0 5
24313: PUSH
24314: LD_INT 41
24316: ST_TO_ADDR
24317: GO 24339
24319: LD_INT 3
24321: DOUBLE
24322: EQUAL
24323: IFTRUE 24327
24325: GO 24338
24327: POP
// tech := tech_bazooka ; end ;
24328: LD_ADDR_VAR 0 5
24332: PUSH
24333: LD_INT 44
24335: ST_TO_ADDR
24336: GO 24339
24338: POP
// if Researched ( side , tech ) then
24339: LD_VAR 0 3
24343: PPUSH
24344: LD_VAR 0 5
24348: PPUSH
24349: CALL_OW 325
24353: IFFALSE 24380
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24355: LD_ADDR_VAR 0 2
24359: PUSH
24360: LD_INT 5
24362: PUSH
24363: LD_INT 8
24365: PUSH
24366: LD_INT 9
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: LD_VAR 0 4
24378: ARRAY
24379: ST_TO_ADDR
// end ;
24380: LD_VAR 0 2
24384: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24385: LD_INT 0
24387: PPUSH
24388: PPUSH
24389: PPUSH
// if not mines then
24390: LD_VAR 0 2
24394: NOT
24395: IFFALSE 24399
// exit ;
24397: GO 24543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24399: LD_ADDR_VAR 0 5
24403: PUSH
24404: LD_INT 81
24406: PUSH
24407: LD_VAR 0 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 3
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PPUSH
24437: CALL_OW 69
24441: ST_TO_ADDR
// for i in mines do
24442: LD_ADDR_VAR 0 4
24446: PUSH
24447: LD_VAR 0 2
24451: PUSH
24452: FOR_IN
24453: IFFALSE 24541
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24455: LD_VAR 0 4
24459: PUSH
24460: LD_INT 1
24462: ARRAY
24463: PPUSH
24464: LD_VAR 0 4
24468: PUSH
24469: LD_INT 2
24471: ARRAY
24472: PPUSH
24473: CALL_OW 458
24477: NOT
24478: IFFALSE 24482
// continue ;
24480: GO 24452
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24482: LD_VAR 0 4
24486: PUSH
24487: LD_INT 1
24489: ARRAY
24490: PPUSH
24491: LD_VAR 0 4
24495: PUSH
24496: LD_INT 2
24498: ARRAY
24499: PPUSH
24500: CALL_OW 428
24504: PUSH
24505: LD_VAR 0 5
24509: IN
24510: IFFALSE 24539
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24512: LD_VAR 0 4
24516: PUSH
24517: LD_INT 1
24519: ARRAY
24520: PPUSH
24521: LD_VAR 0 4
24525: PUSH
24526: LD_INT 2
24528: ARRAY
24529: PPUSH
24530: LD_VAR 0 1
24534: PPUSH
24535: CALL_OW 456
// end ;
24539: GO 24452
24541: POP
24542: POP
// end ;
24543: LD_VAR 0 3
24547: RET
// export function Count ( array ) ; var i ; begin
24548: LD_INT 0
24550: PPUSH
24551: PPUSH
// result := 0 ;
24552: LD_ADDR_VAR 0 2
24556: PUSH
24557: LD_INT 0
24559: ST_TO_ADDR
// for i in array do
24560: LD_ADDR_VAR 0 3
24564: PUSH
24565: LD_VAR 0 1
24569: PUSH
24570: FOR_IN
24571: IFFALSE 24595
// if i then
24573: LD_VAR 0 3
24577: IFFALSE 24593
// result := result + 1 ;
24579: LD_ADDR_VAR 0 2
24583: PUSH
24584: LD_VAR 0 2
24588: PUSH
24589: LD_INT 1
24591: PLUS
24592: ST_TO_ADDR
24593: GO 24570
24595: POP
24596: POP
// end ;
24597: LD_VAR 0 2
24601: RET
// export function IsEmpty ( building ) ; begin
24602: LD_INT 0
24604: PPUSH
// if not building then
24605: LD_VAR 0 1
24609: NOT
24610: IFFALSE 24614
// exit ;
24612: GO 24657
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: LD_VAR 0 1
24623: PUSH
24624: LD_INT 22
24626: PUSH
24627: LD_VAR 0 1
24631: PPUSH
24632: CALL_OW 255
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 58
24643: PUSH
24644: EMPTY
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PPUSH
24651: CALL_OW 69
24655: IN
24656: ST_TO_ADDR
// end ;
24657: LD_VAR 0 2
24661: RET
// export function IsNotFull ( building ) ; begin
24662: LD_INT 0
24664: PPUSH
// if not building then
24665: LD_VAR 0 1
24669: NOT
24670: IFFALSE 24674
// exit ;
24672: GO 24693
// result := UnitsInside ( building ) < 6 ;
24674: LD_ADDR_VAR 0 2
24678: PUSH
24679: LD_VAR 0 1
24683: PPUSH
24684: CALL_OW 313
24688: PUSH
24689: LD_INT 6
24691: LESS
24692: ST_TO_ADDR
// end ;
24693: LD_VAR 0 2
24697: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24698: LD_INT 0
24700: PPUSH
24701: PPUSH
24702: PPUSH
24703: PPUSH
// tmp := [ ] ;
24704: LD_ADDR_VAR 0 3
24708: PUSH
24709: EMPTY
24710: ST_TO_ADDR
// list := [ ] ;
24711: LD_ADDR_VAR 0 5
24715: PUSH
24716: EMPTY
24717: ST_TO_ADDR
// for i = 16 to 25 do
24718: LD_ADDR_VAR 0 4
24722: PUSH
24723: DOUBLE
24724: LD_INT 16
24726: DEC
24727: ST_TO_ADDR
24728: LD_INT 25
24730: PUSH
24731: FOR_TO
24732: IFFALSE 24805
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: LD_VAR 0 3
24743: PUSH
24744: LD_INT 22
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 255
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 91
24763: PUSH
24764: LD_VAR 0 1
24768: PUSH
24769: LD_INT 6
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 30
24779: PUSH
24780: LD_VAR 0 4
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: PPUSH
24797: CALL_OW 69
24801: ADD
24802: ST_TO_ADDR
24803: GO 24731
24805: POP
24806: POP
// for i = 1 to tmp do
24807: LD_ADDR_VAR 0 4
24811: PUSH
24812: DOUBLE
24813: LD_INT 1
24815: DEC
24816: ST_TO_ADDR
24817: LD_VAR 0 3
24821: PUSH
24822: FOR_TO
24823: IFFALSE 24911
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24825: LD_ADDR_VAR 0 5
24829: PUSH
24830: LD_VAR 0 5
24834: PUSH
24835: LD_VAR 0 3
24839: PUSH
24840: LD_VAR 0 4
24844: ARRAY
24845: PPUSH
24846: CALL_OW 266
24850: PUSH
24851: LD_VAR 0 3
24855: PUSH
24856: LD_VAR 0 4
24860: ARRAY
24861: PPUSH
24862: CALL_OW 250
24866: PUSH
24867: LD_VAR 0 3
24871: PUSH
24872: LD_VAR 0 4
24876: ARRAY
24877: PPUSH
24878: CALL_OW 251
24882: PUSH
24883: LD_VAR 0 3
24887: PUSH
24888: LD_VAR 0 4
24892: ARRAY
24893: PPUSH
24894: CALL_OW 254
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: ADD
24908: ST_TO_ADDR
24909: GO 24822
24911: POP
24912: POP
// result := list ;
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_VAR 0 5
24922: ST_TO_ADDR
// end ;
24923: LD_VAR 0 2
24927: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24928: LD_INT 0
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
// if not factory then
24937: LD_VAR 0 1
24941: NOT
24942: IFFALSE 24946
// exit ;
24944: GO 25539
// if control = control_apeman then
24946: LD_VAR 0 4
24950: PUSH
24951: LD_INT 5
24953: EQUAL
24954: IFFALSE 25063
// begin tmp := UnitsInside ( factory ) ;
24956: LD_ADDR_VAR 0 8
24960: PUSH
24961: LD_VAR 0 1
24965: PPUSH
24966: CALL_OW 313
24970: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24971: LD_VAR 0 8
24975: PPUSH
24976: LD_INT 25
24978: PUSH
24979: LD_INT 12
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 72
24990: NOT
24991: IFFALSE 25001
// control := control_manual ;
24993: LD_ADDR_VAR 0 4
24997: PUSH
24998: LD_INT 1
25000: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25001: LD_ADDR_VAR 0 8
25005: PUSH
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL 24698 0 1
25015: ST_TO_ADDR
// if tmp then
25016: LD_VAR 0 8
25020: IFFALSE 25063
// begin for i in tmp do
25022: LD_ADDR_VAR 0 7
25026: PUSH
25027: LD_VAR 0 8
25031: PUSH
25032: FOR_IN
25033: IFFALSE 25061
// if i [ 1 ] = b_ext_radio then
25035: LD_VAR 0 7
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PUSH
25044: LD_INT 22
25046: EQUAL
25047: IFFALSE 25059
// begin control := control_remote ;
25049: LD_ADDR_VAR 0 4
25053: PUSH
25054: LD_INT 2
25056: ST_TO_ADDR
// break ;
25057: GO 25061
// end ;
25059: GO 25032
25061: POP
25062: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25063: LD_VAR 0 1
25067: PPUSH
25068: LD_VAR 0 2
25072: PPUSH
25073: LD_VAR 0 3
25077: PPUSH
25078: LD_VAR 0 4
25082: PPUSH
25083: LD_VAR 0 5
25087: PPUSH
25088: CALL_OW 448
25092: IFFALSE 25127
// begin result := [ chassis , engine , control , weapon ] ;
25094: LD_ADDR_VAR 0 6
25098: PUSH
25099: LD_VAR 0 2
25103: PUSH
25104: LD_VAR 0 3
25108: PUSH
25109: LD_VAR 0 4
25113: PUSH
25114: LD_VAR 0 5
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: ST_TO_ADDR
// exit ;
25125: GO 25539
// end ; _chassis := AvailableChassisList ( factory ) ;
25127: LD_ADDR_VAR 0 9
25131: PUSH
25132: LD_VAR 0 1
25136: PPUSH
25137: CALL_OW 475
25141: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25142: LD_ADDR_VAR 0 11
25146: PUSH
25147: LD_VAR 0 1
25151: PPUSH
25152: CALL_OW 476
25156: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25157: LD_ADDR_VAR 0 12
25161: PUSH
25162: LD_VAR 0 1
25166: PPUSH
25167: CALL_OW 477
25171: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25172: LD_ADDR_VAR 0 10
25176: PUSH
25177: LD_VAR 0 1
25181: PPUSH
25182: CALL_OW 478
25186: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25187: LD_VAR 0 9
25191: NOT
25192: PUSH
25193: LD_VAR 0 11
25197: NOT
25198: OR
25199: PUSH
25200: LD_VAR 0 12
25204: NOT
25205: OR
25206: PUSH
25207: LD_VAR 0 10
25211: NOT
25212: OR
25213: IFFALSE 25248
// begin result := [ chassis , engine , control , weapon ] ;
25215: LD_ADDR_VAR 0 6
25219: PUSH
25220: LD_VAR 0 2
25224: PUSH
25225: LD_VAR 0 3
25229: PUSH
25230: LD_VAR 0 4
25234: PUSH
25235: LD_VAR 0 5
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: ST_TO_ADDR
// exit ;
25246: GO 25539
// end ; if not chassis in _chassis then
25248: LD_VAR 0 2
25252: PUSH
25253: LD_VAR 0 9
25257: IN
25258: NOT
25259: IFFALSE 25285
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25261: LD_ADDR_VAR 0 2
25265: PUSH
25266: LD_VAR 0 9
25270: PUSH
25271: LD_INT 1
25273: PPUSH
25274: LD_VAR 0 9
25278: PPUSH
25279: CALL_OW 12
25283: ARRAY
25284: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_VAR 0 3
25294: PPUSH
25295: CALL 25544 0 2
25299: NOT
25300: IFFALSE 25359
// repeat engine := _engine [ 1 ] ;
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_VAR 0 11
25311: PUSH
25312: LD_INT 1
25314: ARRAY
25315: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25316: LD_ADDR_VAR 0 11
25320: PUSH
25321: LD_VAR 0 11
25325: PPUSH
25326: LD_INT 1
25328: PPUSH
25329: CALL_OW 3
25333: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25334: LD_VAR 0 2
25338: PPUSH
25339: LD_VAR 0 3
25343: PPUSH
25344: CALL 25544 0 2
25348: PUSH
25349: LD_VAR 0 11
25353: PUSH
25354: EMPTY
25355: EQUAL
25356: OR
25357: IFFALSE 25302
// if not control in _control then
25359: LD_VAR 0 4
25363: PUSH
25364: LD_VAR 0 12
25368: IN
25369: NOT
25370: IFFALSE 25396
// control := _control [ rand ( 1 , _control ) ] ;
25372: LD_ADDR_VAR 0 4
25376: PUSH
25377: LD_VAR 0 12
25381: PUSH
25382: LD_INT 1
25384: PPUSH
25385: LD_VAR 0 12
25389: PPUSH
25390: CALL_OW 12
25394: ARRAY
25395: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25396: LD_VAR 0 2
25400: PPUSH
25401: LD_VAR 0 5
25405: PPUSH
25406: CALL 25764 0 2
25410: NOT
25411: IFFALSE 25470
// repeat weapon := _weapon [ 1 ] ;
25413: LD_ADDR_VAR 0 5
25417: PUSH
25418: LD_VAR 0 10
25422: PUSH
25423: LD_INT 1
25425: ARRAY
25426: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25427: LD_ADDR_VAR 0 10
25431: PUSH
25432: LD_VAR 0 10
25436: PPUSH
25437: LD_INT 1
25439: PPUSH
25440: CALL_OW 3
25444: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_VAR 0 5
25454: PPUSH
25455: CALL 25764 0 2
25459: PUSH
25460: LD_VAR 0 10
25464: PUSH
25465: EMPTY
25466: EQUAL
25467: OR
25468: IFFALSE 25413
// result := [ ] ;
25470: LD_ADDR_VAR 0 6
25474: PUSH
25475: EMPTY
25476: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25477: LD_VAR 0 1
25481: PPUSH
25482: LD_VAR 0 2
25486: PPUSH
25487: LD_VAR 0 3
25491: PPUSH
25492: LD_VAR 0 4
25496: PPUSH
25497: LD_VAR 0 5
25501: PPUSH
25502: CALL_OW 448
25506: IFFALSE 25539
// result := [ chassis , engine , control , weapon ] ;
25508: LD_ADDR_VAR 0 6
25512: PUSH
25513: LD_VAR 0 2
25517: PUSH
25518: LD_VAR 0 3
25522: PUSH
25523: LD_VAR 0 4
25527: PUSH
25528: LD_VAR 0 5
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: ST_TO_ADDR
// end ;
25539: LD_VAR 0 6
25543: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25544: LD_INT 0
25546: PPUSH
// if not chassis or not engine then
25547: LD_VAR 0 1
25551: NOT
25552: PUSH
25553: LD_VAR 0 2
25557: NOT
25558: OR
25559: IFFALSE 25563
// exit ;
25561: GO 25759
// case engine of engine_solar :
25563: LD_VAR 0 2
25567: PUSH
25568: LD_INT 2
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25614
25576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_INT 11
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 13
25590: PUSH
25591: LD_INT 14
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 3
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: ST_TO_ADDR
25612: GO 25743
25614: LD_INT 1
25616: DOUBLE
25617: EQUAL
25618: IFTRUE 25622
25620: GO 25684
25622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_INT 11
25630: PUSH
25631: LD_INT 12
25633: PUSH
25634: LD_INT 13
25636: PUSH
25637: LD_INT 14
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 4
25651: PUSH
25652: LD_INT 5
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 23
25660: PUSH
25661: LD_INT 22
25663: PUSH
25664: LD_INT 24
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: ST_TO_ADDR
25682: GO 25743
25684: LD_INT 3
25686: DOUBLE
25687: EQUAL
25688: IFTRUE 25692
25690: GO 25742
25692: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_INT 13
25700: PUSH
25701: LD_INT 14
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 3
25709: PUSH
25710: LD_INT 4
25712: PUSH
25713: LD_INT 5
25715: PUSH
25716: LD_INT 21
25718: PUSH
25719: LD_INT 22
25721: PUSH
25722: LD_INT 23
25724: PUSH
25725: LD_INT 24
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: ST_TO_ADDR
25740: GO 25743
25742: POP
// result := ( chassis in result ) ;
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_VAR 0 1
25752: PUSH
25753: LD_VAR 0 3
25757: IN
25758: ST_TO_ADDR
// end ;
25759: LD_VAR 0 3
25763: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25764: LD_INT 0
25766: PPUSH
// if not chassis or not weapon then
25767: LD_VAR 0 1
25771: NOT
25772: PUSH
25773: LD_VAR 0 2
25777: NOT
25778: OR
25779: IFFALSE 25783
// exit ;
25781: GO 26809
// case weapon of us_machine_gun :
25783: LD_VAR 0 2
25787: PUSH
25788: LD_INT 2
25790: DOUBLE
25791: EQUAL
25792: IFTRUE 25796
25794: GO 25826
25796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25797: LD_ADDR_VAR 0 3
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 2
25807: PUSH
25808: LD_INT 3
25810: PUSH
25811: LD_INT 4
25813: PUSH
25814: LD_INT 5
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: ST_TO_ADDR
25824: GO 26793
25826: LD_INT 3
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25864
25834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 4
25851: PUSH
25852: LD_INT 5
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
25862: GO 26793
25864: LD_INT 11
25866: DOUBLE
25867: EQUAL
25868: IFTRUE 25872
25870: GO 25902
25872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25873: LD_ADDR_VAR 0 3
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: LD_INT 3
25886: PUSH
25887: LD_INT 4
25889: PUSH
25890: LD_INT 5
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: ST_TO_ADDR
25900: GO 26793
25902: LD_INT 4
25904: DOUBLE
25905: EQUAL
25906: IFTRUE 25910
25908: GO 25936
25910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: LD_INT 4
25924: PUSH
25925: LD_INT 5
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: ST_TO_ADDR
25934: GO 26793
25936: LD_INT 5
25938: DOUBLE
25939: EQUAL
25940: IFTRUE 25944
25942: GO 25970
25944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25945: LD_ADDR_VAR 0 3
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: LD_INT 4
25958: PUSH
25959: LD_INT 5
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
25968: GO 26793
25970: LD_INT 9
25972: DOUBLE
25973: EQUAL
25974: IFTRUE 25978
25976: GO 26004
25978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: LD_INT 4
25992: PUSH
25993: LD_INT 5
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: ST_TO_ADDR
26002: GO 26793
26004: LD_INT 7
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 26038
26012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26013: LD_ADDR_VAR 0 3
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: LD_INT 4
26026: PUSH
26027: LD_INT 5
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
26036: GO 26793
26038: LD_INT 12
26040: DOUBLE
26041: EQUAL
26042: IFTRUE 26046
26044: GO 26072
26046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
26070: GO 26793
26072: LD_INT 13
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26106
26080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26081: LD_ADDR_VAR 0 3
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 3
26091: PUSH
26092: LD_INT 4
26094: PUSH
26095: LD_INT 5
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
26104: GO 26793
26106: LD_INT 14
26108: DOUBLE
26109: EQUAL
26110: IFTRUE 26114
26112: GO 26132
26114: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26115: LD_ADDR_VAR 0 3
26119: PUSH
26120: LD_INT 4
26122: PUSH
26123: LD_INT 5
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: ST_TO_ADDR
26130: GO 26793
26132: LD_INT 6
26134: DOUBLE
26135: EQUAL
26136: IFTRUE 26140
26138: GO 26158
26140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26141: LD_ADDR_VAR 0 3
26145: PUSH
26146: LD_INT 4
26148: PUSH
26149: LD_INT 5
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: ST_TO_ADDR
26156: GO 26793
26158: LD_INT 10
26160: DOUBLE
26161: EQUAL
26162: IFTRUE 26166
26164: GO 26184
26166: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26167: LD_ADDR_VAR 0 3
26171: PUSH
26172: LD_INT 4
26174: PUSH
26175: LD_INT 5
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: ST_TO_ADDR
26182: GO 26793
26184: LD_INT 22
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26218
26192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26193: LD_ADDR_VAR 0 3
26197: PUSH
26198: LD_INT 11
26200: PUSH
26201: LD_INT 12
26203: PUSH
26204: LD_INT 13
26206: PUSH
26207: LD_INT 14
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: ST_TO_ADDR
26216: GO 26793
26218: LD_INT 23
26220: DOUBLE
26221: EQUAL
26222: IFTRUE 26226
26224: GO 26252
26226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26227: LD_ADDR_VAR 0 3
26231: PUSH
26232: LD_INT 11
26234: PUSH
26235: LD_INT 12
26237: PUSH
26238: LD_INT 13
26240: PUSH
26241: LD_INT 14
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
26250: GO 26793
26252: LD_INT 24
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26260
26258: GO 26286
26260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_INT 11
26268: PUSH
26269: LD_INT 12
26271: PUSH
26272: LD_INT 13
26274: PUSH
26275: LD_INT 14
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
26284: GO 26793
26286: LD_INT 30
26288: DOUBLE
26289: EQUAL
26290: IFTRUE 26294
26292: GO 26320
26294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26295: LD_ADDR_VAR 0 3
26299: PUSH
26300: LD_INT 11
26302: PUSH
26303: LD_INT 12
26305: PUSH
26306: LD_INT 13
26308: PUSH
26309: LD_INT 14
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: ST_TO_ADDR
26318: GO 26793
26320: LD_INT 25
26322: DOUBLE
26323: EQUAL
26324: IFTRUE 26328
26326: GO 26346
26328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26329: LD_ADDR_VAR 0 3
26333: PUSH
26334: LD_INT 13
26336: PUSH
26337: LD_INT 14
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: ST_TO_ADDR
26344: GO 26793
26346: LD_INT 27
26348: DOUBLE
26349: EQUAL
26350: IFTRUE 26354
26352: GO 26372
26354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26355: LD_ADDR_VAR 0 3
26359: PUSH
26360: LD_INT 13
26362: PUSH
26363: LD_INT 14
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: ST_TO_ADDR
26370: GO 26793
26372: LD_INT 28
26374: DOUBLE
26375: EQUAL
26376: IFTRUE 26380
26378: GO 26398
26380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26381: LD_ADDR_VAR 0 3
26385: PUSH
26386: LD_INT 13
26388: PUSH
26389: LD_INT 14
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: ST_TO_ADDR
26396: GO 26793
26398: LD_INT 29
26400: DOUBLE
26401: EQUAL
26402: IFTRUE 26406
26404: GO 26424
26406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26407: LD_ADDR_VAR 0 3
26411: PUSH
26412: LD_INT 13
26414: PUSH
26415: LD_INT 14
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: ST_TO_ADDR
26422: GO 26793
26424: LD_INT 31
26426: DOUBLE
26427: EQUAL
26428: IFTRUE 26432
26430: GO 26450
26432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26433: LD_ADDR_VAR 0 3
26437: PUSH
26438: LD_INT 13
26440: PUSH
26441: LD_INT 14
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: ST_TO_ADDR
26448: GO 26793
26450: LD_INT 26
26452: DOUBLE
26453: EQUAL
26454: IFTRUE 26458
26456: GO 26476
26458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26459: LD_ADDR_VAR 0 3
26463: PUSH
26464: LD_INT 13
26466: PUSH
26467: LD_INT 14
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: ST_TO_ADDR
26474: GO 26793
26476: LD_INT 42
26478: DOUBLE
26479: EQUAL
26480: IFTRUE 26484
26482: GO 26510
26484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26485: LD_ADDR_VAR 0 3
26489: PUSH
26490: LD_INT 21
26492: PUSH
26493: LD_INT 22
26495: PUSH
26496: LD_INT 23
26498: PUSH
26499: LD_INT 24
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: ST_TO_ADDR
26508: GO 26793
26510: LD_INT 43
26512: DOUBLE
26513: EQUAL
26514: IFTRUE 26518
26516: GO 26544
26518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: LD_INT 21
26526: PUSH
26527: LD_INT 22
26529: PUSH
26530: LD_INT 23
26532: PUSH
26533: LD_INT 24
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: ST_TO_ADDR
26542: GO 26793
26544: LD_INT 44
26546: DOUBLE
26547: EQUAL
26548: IFTRUE 26552
26550: GO 26578
26552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: LD_INT 21
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_INT 23
26566: PUSH
26567: LD_INT 24
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: ST_TO_ADDR
26576: GO 26793
26578: LD_INT 45
26580: DOUBLE
26581: EQUAL
26582: IFTRUE 26586
26584: GO 26612
26586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 21
26594: PUSH
26595: LD_INT 22
26597: PUSH
26598: LD_INT 23
26600: PUSH
26601: LD_INT 24
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: ST_TO_ADDR
26610: GO 26793
26612: LD_INT 49
26614: DOUBLE
26615: EQUAL
26616: IFTRUE 26620
26618: GO 26646
26620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 21
26628: PUSH
26629: LD_INT 22
26631: PUSH
26632: LD_INT 23
26634: PUSH
26635: LD_INT 24
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: ST_TO_ADDR
26644: GO 26793
26646: LD_INT 51
26648: DOUBLE
26649: EQUAL
26650: IFTRUE 26654
26652: GO 26680
26654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26655: LD_ADDR_VAR 0 3
26659: PUSH
26660: LD_INT 21
26662: PUSH
26663: LD_INT 22
26665: PUSH
26666: LD_INT 23
26668: PUSH
26669: LD_INT 24
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: ST_TO_ADDR
26678: GO 26793
26680: LD_INT 52
26682: DOUBLE
26683: EQUAL
26684: IFTRUE 26688
26686: GO 26714
26688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26689: LD_ADDR_VAR 0 3
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_INT 23
26702: PUSH
26703: LD_INT 24
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: ST_TO_ADDR
26712: GO 26793
26714: LD_INT 53
26716: DOUBLE
26717: EQUAL
26718: IFTRUE 26722
26720: GO 26740
26722: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_INT 23
26730: PUSH
26731: LD_INT 24
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: ST_TO_ADDR
26738: GO 26793
26740: LD_INT 46
26742: DOUBLE
26743: EQUAL
26744: IFTRUE 26748
26746: GO 26766
26748: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26749: LD_ADDR_VAR 0 3
26753: PUSH
26754: LD_INT 23
26756: PUSH
26757: LD_INT 24
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: ST_TO_ADDR
26764: GO 26793
26766: LD_INT 47
26768: DOUBLE
26769: EQUAL
26770: IFTRUE 26774
26772: GO 26792
26774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26775: LD_ADDR_VAR 0 3
26779: PUSH
26780: LD_INT 23
26782: PUSH
26783: LD_INT 24
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: ST_TO_ADDR
26790: GO 26793
26792: POP
// result := ( chassis in result ) ;
26793: LD_ADDR_VAR 0 3
26797: PUSH
26798: LD_VAR 0 1
26802: PUSH
26803: LD_VAR 0 3
26807: IN
26808: ST_TO_ADDR
// end ;
26809: LD_VAR 0 3
26813: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
26820: PPUSH
26821: PPUSH
26822: PPUSH
// result := array ;
26823: LD_ADDR_VAR 0 5
26827: PUSH
26828: LD_VAR 0 1
26832: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26833: LD_VAR 0 1
26837: NOT
26838: PUSH
26839: LD_VAR 0 2
26843: NOT
26844: OR
26845: PUSH
26846: LD_VAR 0 3
26850: NOT
26851: OR
26852: PUSH
26853: LD_VAR 0 2
26857: PUSH
26858: LD_VAR 0 1
26862: GREATER
26863: OR
26864: PUSH
26865: LD_VAR 0 3
26869: PUSH
26870: LD_VAR 0 1
26874: GREATER
26875: OR
26876: IFFALSE 26880
// exit ;
26878: GO 27176
// if direction then
26880: LD_VAR 0 4
26884: IFFALSE 26948
// begin d := 1 ;
26886: LD_ADDR_VAR 0 9
26890: PUSH
26891: LD_INT 1
26893: ST_TO_ADDR
// if i_from > i_to then
26894: LD_VAR 0 2
26898: PUSH
26899: LD_VAR 0 3
26903: GREATER
26904: IFFALSE 26930
// length := ( array - i_from ) + i_to else
26906: LD_ADDR_VAR 0 11
26910: PUSH
26911: LD_VAR 0 1
26915: PUSH
26916: LD_VAR 0 2
26920: MINUS
26921: PUSH
26922: LD_VAR 0 3
26926: PLUS
26927: ST_TO_ADDR
26928: GO 26946
// length := i_to - i_from ;
26930: LD_ADDR_VAR 0 11
26934: PUSH
26935: LD_VAR 0 3
26939: PUSH
26940: LD_VAR 0 2
26944: MINUS
26945: ST_TO_ADDR
// end else
26946: GO 27009
// begin d := - 1 ;
26948: LD_ADDR_VAR 0 9
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: ST_TO_ADDR
// if i_from > i_to then
26957: LD_VAR 0 2
26961: PUSH
26962: LD_VAR 0 3
26966: GREATER
26967: IFFALSE 26987
// length := i_from - i_to else
26969: LD_ADDR_VAR 0 11
26973: PUSH
26974: LD_VAR 0 2
26978: PUSH
26979: LD_VAR 0 3
26983: MINUS
26984: ST_TO_ADDR
26985: GO 27009
// length := ( array - i_to ) + i_from ;
26987: LD_ADDR_VAR 0 11
26991: PUSH
26992: LD_VAR 0 1
26996: PUSH
26997: LD_VAR 0 3
27001: MINUS
27002: PUSH
27003: LD_VAR 0 2
27007: PLUS
27008: ST_TO_ADDR
// end ; if not length then
27009: LD_VAR 0 11
27013: NOT
27014: IFFALSE 27018
// exit ;
27016: GO 27176
// tmp := array ;
27018: LD_ADDR_VAR 0 10
27022: PUSH
27023: LD_VAR 0 1
27027: ST_TO_ADDR
// for i = 1 to length do
27028: LD_ADDR_VAR 0 6
27032: PUSH
27033: DOUBLE
27034: LD_INT 1
27036: DEC
27037: ST_TO_ADDR
27038: LD_VAR 0 11
27042: PUSH
27043: FOR_TO
27044: IFFALSE 27164
// begin for j = 1 to array do
27046: LD_ADDR_VAR 0 7
27050: PUSH
27051: DOUBLE
27052: LD_INT 1
27054: DEC
27055: ST_TO_ADDR
27056: LD_VAR 0 1
27060: PUSH
27061: FOR_TO
27062: IFFALSE 27150
// begin k := j + d ;
27064: LD_ADDR_VAR 0 8
27068: PUSH
27069: LD_VAR 0 7
27073: PUSH
27074: LD_VAR 0 9
27078: PLUS
27079: ST_TO_ADDR
// if k > array then
27080: LD_VAR 0 8
27084: PUSH
27085: LD_VAR 0 1
27089: GREATER
27090: IFFALSE 27100
// k := 1 ;
27092: LD_ADDR_VAR 0 8
27096: PUSH
27097: LD_INT 1
27099: ST_TO_ADDR
// if not k then
27100: LD_VAR 0 8
27104: NOT
27105: IFFALSE 27117
// k := array ;
27107: LD_ADDR_VAR 0 8
27111: PUSH
27112: LD_VAR 0 1
27116: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27117: LD_ADDR_VAR 0 10
27121: PUSH
27122: LD_VAR 0 10
27126: PPUSH
27127: LD_VAR 0 8
27131: PPUSH
27132: LD_VAR 0 1
27136: PUSH
27137: LD_VAR 0 7
27141: ARRAY
27142: PPUSH
27143: CALL_OW 1
27147: ST_TO_ADDR
// end ;
27148: GO 27061
27150: POP
27151: POP
// array := tmp ;
27152: LD_ADDR_VAR 0 1
27156: PUSH
27157: LD_VAR 0 10
27161: ST_TO_ADDR
// end ;
27162: GO 27043
27164: POP
27165: POP
// result := array ;
27166: LD_ADDR_VAR 0 5
27170: PUSH
27171: LD_VAR 0 1
27175: ST_TO_ADDR
// end ;
27176: LD_VAR 0 5
27180: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27181: LD_INT 0
27183: PPUSH
27184: PPUSH
// result := 0 ;
27185: LD_ADDR_VAR 0 3
27189: PUSH
27190: LD_INT 0
27192: ST_TO_ADDR
// if not array or not value in array then
27193: LD_VAR 0 1
27197: NOT
27198: PUSH
27199: LD_VAR 0 2
27203: PUSH
27204: LD_VAR 0 1
27208: IN
27209: NOT
27210: OR
27211: IFFALSE 27215
// exit ;
27213: GO 27269
// for i = 1 to array do
27215: LD_ADDR_VAR 0 4
27219: PUSH
27220: DOUBLE
27221: LD_INT 1
27223: DEC
27224: ST_TO_ADDR
27225: LD_VAR 0 1
27229: PUSH
27230: FOR_TO
27231: IFFALSE 27267
// if value = array [ i ] then
27233: LD_VAR 0 2
27237: PUSH
27238: LD_VAR 0 1
27242: PUSH
27243: LD_VAR 0 4
27247: ARRAY
27248: EQUAL
27249: IFFALSE 27265
// begin result := i ;
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_VAR 0 4
27260: ST_TO_ADDR
// exit ;
27261: POP
27262: POP
27263: GO 27269
// end ;
27265: GO 27230
27267: POP
27268: POP
// end ;
27269: LD_VAR 0 3
27273: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27274: LD_INT 0
27276: PPUSH
// vc_chassis := chassis ;
27277: LD_ADDR_OWVAR 37
27281: PUSH
27282: LD_VAR 0 1
27286: ST_TO_ADDR
// vc_engine := engine ;
27287: LD_ADDR_OWVAR 39
27291: PUSH
27292: LD_VAR 0 2
27296: ST_TO_ADDR
// vc_control := control ;
27297: LD_ADDR_OWVAR 38
27301: PUSH
27302: LD_VAR 0 3
27306: ST_TO_ADDR
// vc_weapon := weapon ;
27307: LD_ADDR_OWVAR 40
27311: PUSH
27312: LD_VAR 0 4
27316: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27317: LD_ADDR_OWVAR 41
27321: PUSH
27322: LD_VAR 0 5
27326: ST_TO_ADDR
// end ;
27327: LD_VAR 0 6
27331: RET
// export function WantPlant ( unit ) ; var task ; begin
27332: LD_INT 0
27334: PPUSH
27335: PPUSH
// result := false ;
27336: LD_ADDR_VAR 0 2
27340: PUSH
27341: LD_INT 0
27343: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_VAR 0 1
27353: PPUSH
27354: CALL_OW 437
27358: ST_TO_ADDR
// if task then
27359: LD_VAR 0 3
27363: IFFALSE 27391
// if task [ 1 ] [ 1 ] = p then
27365: LD_VAR 0 3
27369: PUSH
27370: LD_INT 1
27372: ARRAY
27373: PUSH
27374: LD_INT 1
27376: ARRAY
27377: PUSH
27378: LD_STRING p
27380: EQUAL
27381: IFFALSE 27391
// result := true ;
27383: LD_ADDR_VAR 0 2
27387: PUSH
27388: LD_INT 1
27390: ST_TO_ADDR
// end ;
27391: LD_VAR 0 2
27395: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
// if pos < 1 then
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 1
27409: LESS
27410: IFFALSE 27414
// exit ;
27412: GO 27717
// if pos = 1 then
27414: LD_VAR 0 2
27418: PUSH
27419: LD_INT 1
27421: EQUAL
27422: IFFALSE 27455
// result := Replace ( arr , pos [ 1 ] , value ) else
27424: LD_ADDR_VAR 0 4
27428: PUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: LD_VAR 0 2
27438: PUSH
27439: LD_INT 1
27441: ARRAY
27442: PPUSH
27443: LD_VAR 0 3
27447: PPUSH
27448: CALL_OW 1
27452: ST_TO_ADDR
27453: GO 27717
// begin tmp := arr ;
27455: LD_ADDR_VAR 0 6
27459: PUSH
27460: LD_VAR 0 1
27464: ST_TO_ADDR
// s_arr := [ tmp ] ;
27465: LD_ADDR_VAR 0 7
27469: PUSH
27470: LD_VAR 0 6
27474: PUSH
27475: EMPTY
27476: LIST
27477: ST_TO_ADDR
// for i = 1 to pos - 1 do
27478: LD_ADDR_VAR 0 5
27482: PUSH
27483: DOUBLE
27484: LD_INT 1
27486: DEC
27487: ST_TO_ADDR
27488: LD_VAR 0 2
27492: PUSH
27493: LD_INT 1
27495: MINUS
27496: PUSH
27497: FOR_TO
27498: IFFALSE 27543
// begin tmp := tmp [ pos [ i ] ] ;
27500: LD_ADDR_VAR 0 6
27504: PUSH
27505: LD_VAR 0 6
27509: PUSH
27510: LD_VAR 0 2
27514: PUSH
27515: LD_VAR 0 5
27519: ARRAY
27520: ARRAY
27521: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27522: LD_ADDR_VAR 0 7
27526: PUSH
27527: LD_VAR 0 7
27531: PUSH
27532: LD_VAR 0 6
27536: PUSH
27537: EMPTY
27538: LIST
27539: ADD
27540: ST_TO_ADDR
// end ;
27541: GO 27497
27543: POP
27544: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27545: LD_ADDR_VAR 0 6
27549: PUSH
27550: LD_VAR 0 6
27554: PPUSH
27555: LD_VAR 0 2
27559: PUSH
27560: LD_VAR 0 2
27564: ARRAY
27565: PPUSH
27566: LD_VAR 0 3
27570: PPUSH
27571: CALL_OW 1
27575: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27576: LD_ADDR_VAR 0 7
27580: PUSH
27581: LD_VAR 0 7
27585: PPUSH
27586: LD_VAR 0 7
27590: PPUSH
27591: LD_VAR 0 6
27595: PPUSH
27596: CALL_OW 1
27600: ST_TO_ADDR
// for i = s_arr downto 2 do
27601: LD_ADDR_VAR 0 5
27605: PUSH
27606: DOUBLE
27607: LD_VAR 0 7
27611: INC
27612: ST_TO_ADDR
27613: LD_INT 2
27615: PUSH
27616: FOR_DOWNTO
27617: IFFALSE 27701
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27619: LD_ADDR_VAR 0 6
27623: PUSH
27624: LD_VAR 0 7
27628: PUSH
27629: LD_VAR 0 5
27633: PUSH
27634: LD_INT 1
27636: MINUS
27637: ARRAY
27638: PPUSH
27639: LD_VAR 0 2
27643: PUSH
27644: LD_VAR 0 5
27648: PUSH
27649: LD_INT 1
27651: MINUS
27652: ARRAY
27653: PPUSH
27654: LD_VAR 0 7
27658: PUSH
27659: LD_VAR 0 5
27663: ARRAY
27664: PPUSH
27665: CALL_OW 1
27669: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27670: LD_ADDR_VAR 0 7
27674: PUSH
27675: LD_VAR 0 7
27679: PPUSH
27680: LD_VAR 0 5
27684: PUSH
27685: LD_INT 1
27687: MINUS
27688: PPUSH
27689: LD_VAR 0 6
27693: PPUSH
27694: CALL_OW 1
27698: ST_TO_ADDR
// end ;
27699: GO 27616
27701: POP
27702: POP
// result := s_arr [ 1 ] ;
27703: LD_ADDR_VAR 0 4
27707: PUSH
27708: LD_VAR 0 7
27712: PUSH
27713: LD_INT 1
27715: ARRAY
27716: ST_TO_ADDR
// end ; end ;
27717: LD_VAR 0 4
27721: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27722: LD_INT 0
27724: PPUSH
27725: PPUSH
// if not list then
27726: LD_VAR 0 1
27730: NOT
27731: IFFALSE 27735
// exit ;
27733: GO 27826
// i := list [ pos1 ] ;
27735: LD_ADDR_VAR 0 5
27739: PUSH
27740: LD_VAR 0 1
27744: PUSH
27745: LD_VAR 0 2
27749: ARRAY
27750: ST_TO_ADDR
// if not i then
27751: LD_VAR 0 5
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27826
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27760: LD_ADDR_VAR 0 1
27764: PUSH
27765: LD_VAR 0 1
27769: PPUSH
27770: LD_VAR 0 2
27774: PPUSH
27775: LD_VAR 0 1
27779: PUSH
27780: LD_VAR 0 3
27784: ARRAY
27785: PPUSH
27786: CALL_OW 1
27790: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27791: LD_ADDR_VAR 0 1
27795: PUSH
27796: LD_VAR 0 1
27800: PPUSH
27801: LD_VAR 0 3
27805: PPUSH
27806: LD_VAR 0 5
27810: PPUSH
27811: CALL_OW 1
27815: ST_TO_ADDR
// result := list ;
27816: LD_ADDR_VAR 0 4
27820: PUSH
27821: LD_VAR 0 1
27825: ST_TO_ADDR
// end ;
27826: LD_VAR 0 4
27830: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27831: LD_INT 0
27833: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27834: LD_ADDR_VAR 0 5
27838: PUSH
27839: LD_VAR 0 1
27843: PPUSH
27844: CALL_OW 250
27848: PPUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 251
27858: PPUSH
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 3
27868: PPUSH
27869: LD_VAR 0 4
27873: PPUSH
27874: CALL 27884 0 5
27878: ST_TO_ADDR
// end ;
27879: LD_VAR 0 5
27883: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27884: LD_INT 0
27886: PPUSH
27887: PPUSH
27888: PPUSH
27889: PPUSH
// if not list then
27890: LD_VAR 0 3
27894: NOT
27895: IFFALSE 27899
// exit ;
27897: GO 28287
// result := [ ] ;
27899: LD_ADDR_VAR 0 6
27903: PUSH
27904: EMPTY
27905: ST_TO_ADDR
// for i in list do
27906: LD_ADDR_VAR 0 7
27910: PUSH
27911: LD_VAR 0 3
27915: PUSH
27916: FOR_IN
27917: IFFALSE 28119
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27919: LD_ADDR_VAR 0 9
27923: PUSH
27924: LD_VAR 0 7
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: LD_VAR 0 2
27938: PPUSH
27939: CALL_OW 297
27943: ST_TO_ADDR
// if not result then
27944: LD_VAR 0 6
27948: NOT
27949: IFFALSE 27975
// result := [ [ i , tmp ] ] else
27951: LD_ADDR_VAR 0 6
27955: PUSH
27956: LD_VAR 0 7
27960: PUSH
27961: LD_VAR 0 9
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: ST_TO_ADDR
27973: GO 28117
// begin if result [ result ] [ 2 ] < tmp then
27975: LD_VAR 0 6
27979: PUSH
27980: LD_VAR 0 6
27984: ARRAY
27985: PUSH
27986: LD_INT 2
27988: ARRAY
27989: PUSH
27990: LD_VAR 0 9
27994: LESS
27995: IFFALSE 28037
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27997: LD_ADDR_VAR 0 6
28001: PUSH
28002: LD_VAR 0 6
28006: PPUSH
28007: LD_VAR 0 6
28011: PUSH
28012: LD_INT 1
28014: PLUS
28015: PPUSH
28016: LD_VAR 0 7
28020: PUSH
28021: LD_VAR 0 9
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PPUSH
28030: CALL_OW 2
28034: ST_TO_ADDR
28035: GO 28117
// for j = 1 to result do
28037: LD_ADDR_VAR 0 8
28041: PUSH
28042: DOUBLE
28043: LD_INT 1
28045: DEC
28046: ST_TO_ADDR
28047: LD_VAR 0 6
28051: PUSH
28052: FOR_TO
28053: IFFALSE 28115
// begin if tmp < result [ j ] [ 2 ] then
28055: LD_VAR 0 9
28059: PUSH
28060: LD_VAR 0 6
28064: PUSH
28065: LD_VAR 0 8
28069: ARRAY
28070: PUSH
28071: LD_INT 2
28073: ARRAY
28074: LESS
28075: IFFALSE 28113
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28077: LD_ADDR_VAR 0 6
28081: PUSH
28082: LD_VAR 0 6
28086: PPUSH
28087: LD_VAR 0 8
28091: PPUSH
28092: LD_VAR 0 7
28096: PUSH
28097: LD_VAR 0 9
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PPUSH
28106: CALL_OW 2
28110: ST_TO_ADDR
// break ;
28111: GO 28115
// end ; end ;
28113: GO 28052
28115: POP
28116: POP
// end ; end ;
28117: GO 27916
28119: POP
28120: POP
// if result and not asc then
28121: LD_VAR 0 6
28125: PUSH
28126: LD_VAR 0 4
28130: NOT
28131: AND
28132: IFFALSE 28207
// begin tmp := result ;
28134: LD_ADDR_VAR 0 9
28138: PUSH
28139: LD_VAR 0 6
28143: ST_TO_ADDR
// for i = tmp downto 1 do
28144: LD_ADDR_VAR 0 7
28148: PUSH
28149: DOUBLE
28150: LD_VAR 0 9
28154: INC
28155: ST_TO_ADDR
28156: LD_INT 1
28158: PUSH
28159: FOR_DOWNTO
28160: IFFALSE 28205
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28162: LD_ADDR_VAR 0 6
28166: PUSH
28167: LD_VAR 0 6
28171: PPUSH
28172: LD_VAR 0 9
28176: PUSH
28177: LD_VAR 0 7
28181: MINUS
28182: PUSH
28183: LD_INT 1
28185: PLUS
28186: PPUSH
28187: LD_VAR 0 9
28191: PUSH
28192: LD_VAR 0 7
28196: ARRAY
28197: PPUSH
28198: CALL_OW 1
28202: ST_TO_ADDR
28203: GO 28159
28205: POP
28206: POP
// end ; tmp := [ ] ;
28207: LD_ADDR_VAR 0 9
28211: PUSH
28212: EMPTY
28213: ST_TO_ADDR
// if mode then
28214: LD_VAR 0 5
28218: IFFALSE 28287
// begin for i = 1 to result do
28220: LD_ADDR_VAR 0 7
28224: PUSH
28225: DOUBLE
28226: LD_INT 1
28228: DEC
28229: ST_TO_ADDR
28230: LD_VAR 0 6
28234: PUSH
28235: FOR_TO
28236: IFFALSE 28275
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28238: LD_ADDR_VAR 0 9
28242: PUSH
28243: LD_VAR 0 9
28247: PPUSH
28248: LD_VAR 0 7
28252: PPUSH
28253: LD_VAR 0 6
28257: PUSH
28258: LD_VAR 0 7
28262: ARRAY
28263: PUSH
28264: LD_INT 1
28266: ARRAY
28267: PPUSH
28268: CALL_OW 1
28272: ST_TO_ADDR
28273: GO 28235
28275: POP
28276: POP
// result := tmp ;
28277: LD_ADDR_VAR 0 6
28281: PUSH
28282: LD_VAR 0 9
28286: ST_TO_ADDR
// end ; end ;
28287: LD_VAR 0 6
28291: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28292: LD_INT 0
28294: PPUSH
28295: PPUSH
28296: PPUSH
28297: PPUSH
28298: PPUSH
28299: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28300: LD_ADDR_VAR 0 5
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: EMPTY
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// if not x or not y then
28322: LD_VAR 0 2
28326: NOT
28327: PUSH
28328: LD_VAR 0 3
28332: NOT
28333: OR
28334: IFFALSE 28338
// exit ;
28336: GO 29984
// if not range then
28338: LD_VAR 0 4
28342: NOT
28343: IFFALSE 28353
// range := 10 ;
28345: LD_ADDR_VAR 0 4
28349: PUSH
28350: LD_INT 10
28352: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28353: LD_ADDR_VAR 0 8
28357: PUSH
28358: LD_INT 81
28360: PUSH
28361: LD_VAR 0 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 92
28372: PUSH
28373: LD_VAR 0 2
28377: PUSH
28378: LD_VAR 0 3
28382: PUSH
28383: LD_VAR 0 4
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 3
28396: PUSH
28397: LD_INT 21
28399: PUSH
28400: LD_INT 3
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 69
28420: ST_TO_ADDR
// if not tmp then
28421: LD_VAR 0 8
28425: NOT
28426: IFFALSE 28430
// exit ;
28428: GO 29984
// for i in tmp do
28430: LD_ADDR_VAR 0 6
28434: PUSH
28435: LD_VAR 0 8
28439: PUSH
28440: FOR_IN
28441: IFFALSE 29959
// begin points := [ 0 , 0 , 0 ] ;
28443: LD_ADDR_VAR 0 9
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// bpoints := 1 ;
28462: LD_ADDR_VAR 0 10
28466: PUSH
28467: LD_INT 1
28469: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28470: LD_VAR 0 6
28474: PPUSH
28475: CALL_OW 247
28479: PUSH
28480: LD_INT 1
28482: DOUBLE
28483: EQUAL
28484: IFTRUE 28488
28486: GO 29066
28488: POP
// begin if GetClass ( i ) = 1 then
28489: LD_VAR 0 6
28493: PPUSH
28494: CALL_OW 257
28498: PUSH
28499: LD_INT 1
28501: EQUAL
28502: IFFALSE 28523
// points := [ 10 , 5 , 3 ] ;
28504: LD_ADDR_VAR 0 9
28508: PUSH
28509: LD_INT 10
28511: PUSH
28512: LD_INT 5
28514: PUSH
28515: LD_INT 3
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28523: LD_VAR 0 6
28527: PPUSH
28528: CALL_OW 257
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: LD_INT 4
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: IN
28547: IFFALSE 28568
// points := [ 3 , 2 , 1 ] ;
28549: LD_ADDR_VAR 0 9
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28568: LD_VAR 0 6
28572: PPUSH
28573: CALL_OW 257
28577: PUSH
28578: LD_INT 5
28580: EQUAL
28581: IFFALSE 28602
// points := [ 130 , 5 , 2 ] ;
28583: LD_ADDR_VAR 0 9
28587: PUSH
28588: LD_INT 130
28590: PUSH
28591: LD_INT 5
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28602: LD_VAR 0 6
28606: PPUSH
28607: CALL_OW 257
28611: PUSH
28612: LD_INT 8
28614: EQUAL
28615: IFFALSE 28636
// points := [ 35 , 35 , 30 ] ;
28617: LD_ADDR_VAR 0 9
28621: PUSH
28622: LD_INT 35
28624: PUSH
28625: LD_INT 35
28627: PUSH
28628: LD_INT 30
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28636: LD_VAR 0 6
28640: PPUSH
28641: CALL_OW 257
28645: PUSH
28646: LD_INT 9
28648: EQUAL
28649: IFFALSE 28670
// points := [ 20 , 55 , 40 ] ;
28651: LD_ADDR_VAR 0 9
28655: PUSH
28656: LD_INT 20
28658: PUSH
28659: LD_INT 55
28661: PUSH
28662: LD_INT 40
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: LIST
28669: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28670: LD_VAR 0 6
28674: PPUSH
28675: CALL_OW 257
28679: PUSH
28680: LD_INT 12
28682: PUSH
28683: LD_INT 16
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: IN
28690: IFFALSE 28711
// points := [ 5 , 3 , 2 ] ;
28692: LD_ADDR_VAR 0 9
28696: PUSH
28697: LD_INT 5
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28711: LD_VAR 0 6
28715: PPUSH
28716: CALL_OW 257
28720: PUSH
28721: LD_INT 17
28723: EQUAL
28724: IFFALSE 28745
// points := [ 100 , 50 , 75 ] ;
28726: LD_ADDR_VAR 0 9
28730: PUSH
28731: LD_INT 100
28733: PUSH
28734: LD_INT 50
28736: PUSH
28737: LD_INT 75
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28745: LD_VAR 0 6
28749: PPUSH
28750: CALL_OW 257
28754: PUSH
28755: LD_INT 15
28757: EQUAL
28758: IFFALSE 28779
// points := [ 10 , 5 , 3 ] ;
28760: LD_ADDR_VAR 0 9
28764: PUSH
28765: LD_INT 10
28767: PUSH
28768: LD_INT 5
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28779: LD_VAR 0 6
28783: PPUSH
28784: CALL_OW 257
28788: PUSH
28789: LD_INT 14
28791: EQUAL
28792: IFFALSE 28813
// points := [ 10 , 0 , 0 ] ;
28794: LD_ADDR_VAR 0 9
28798: PUSH
28799: LD_INT 10
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28813: LD_VAR 0 6
28817: PPUSH
28818: CALL_OW 257
28822: PUSH
28823: LD_INT 11
28825: EQUAL
28826: IFFALSE 28847
// points := [ 30 , 10 , 5 ] ;
28828: LD_ADDR_VAR 0 9
28832: PUSH
28833: LD_INT 30
28835: PUSH
28836: LD_INT 10
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28847: LD_VAR 0 1
28851: PPUSH
28852: LD_INT 5
28854: PPUSH
28855: CALL_OW 321
28859: PUSH
28860: LD_INT 2
28862: EQUAL
28863: IFFALSE 28880
// bpoints := bpoints * 1.8 ;
28865: LD_ADDR_VAR 0 10
28869: PUSH
28870: LD_VAR 0 10
28874: PUSH
28875: LD_REAL  1.80000000000000E+0000
28878: MUL
28879: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28880: LD_VAR 0 6
28884: PPUSH
28885: CALL_OW 257
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: LD_INT 3
28898: PUSH
28899: LD_INT 4
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: IN
28908: PUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: LD_INT 51
28916: PPUSH
28917: CALL_OW 321
28921: PUSH
28922: LD_INT 2
28924: EQUAL
28925: AND
28926: IFFALSE 28943
// bpoints := bpoints * 1.2 ;
28928: LD_ADDR_VAR 0 10
28932: PUSH
28933: LD_VAR 0 10
28937: PUSH
28938: LD_REAL  1.20000000000000E+0000
28941: MUL
28942: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28943: LD_VAR 0 6
28947: PPUSH
28948: CALL_OW 257
28952: PUSH
28953: LD_INT 5
28955: PUSH
28956: LD_INT 7
28958: PUSH
28959: LD_INT 9
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: IN
28967: PUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: LD_INT 52
28975: PPUSH
28976: CALL_OW 321
28980: PUSH
28981: LD_INT 2
28983: EQUAL
28984: AND
28985: IFFALSE 29002
// bpoints := bpoints * 1.5 ;
28987: LD_ADDR_VAR 0 10
28991: PUSH
28992: LD_VAR 0 10
28996: PUSH
28997: LD_REAL  1.50000000000000E+0000
29000: MUL
29001: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29002: LD_VAR 0 1
29006: PPUSH
29007: LD_INT 66
29009: PPUSH
29010: CALL_OW 321
29014: PUSH
29015: LD_INT 2
29017: EQUAL
29018: IFFALSE 29035
// bpoints := bpoints * 1.1 ;
29020: LD_ADDR_VAR 0 10
29024: PUSH
29025: LD_VAR 0 10
29029: PUSH
29030: LD_REAL  1.10000000000000E+0000
29033: MUL
29034: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 10
29044: PUSH
29045: LD_VAR 0 6
29049: PPUSH
29050: LD_INT 1
29052: PPUSH
29053: CALL_OW 259
29057: PUSH
29058: LD_REAL  1.15000000000000E+0000
29061: MUL
29062: MUL
29063: ST_TO_ADDR
// end ; unit_vehicle :
29064: GO 29888
29066: LD_INT 2
29068: DOUBLE
29069: EQUAL
29070: IFTRUE 29074
29072: GO 29876
29074: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29075: LD_VAR 0 6
29079: PPUSH
29080: CALL_OW 264
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 42
29090: PUSH
29091: LD_INT 24
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: IN
29099: IFFALSE 29120
// points := [ 25 , 5 , 3 ] ;
29101: LD_ADDR_VAR 0 9
29105: PUSH
29106: LD_INT 25
29108: PUSH
29109: LD_INT 5
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29120: LD_VAR 0 6
29124: PPUSH
29125: CALL_OW 264
29129: PUSH
29130: LD_INT 4
29132: PUSH
29133: LD_INT 43
29135: PUSH
29136: LD_INT 25
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: IN
29144: IFFALSE 29165
// points := [ 40 , 15 , 5 ] ;
29146: LD_ADDR_VAR 0 9
29150: PUSH
29151: LD_INT 40
29153: PUSH
29154: LD_INT 15
29156: PUSH
29157: LD_INT 5
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29165: LD_VAR 0 6
29169: PPUSH
29170: CALL_OW 264
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: LD_INT 23
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: IN
29185: IFFALSE 29206
// points := [ 7 , 25 , 8 ] ;
29187: LD_ADDR_VAR 0 9
29191: PUSH
29192: LD_INT 7
29194: PUSH
29195: LD_INT 25
29197: PUSH
29198: LD_INT 8
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29206: LD_VAR 0 6
29210: PPUSH
29211: CALL_OW 264
29215: PUSH
29216: LD_INT 5
29218: PUSH
29219: LD_INT 27
29221: PUSH
29222: LD_INT 44
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: IN
29230: IFFALSE 29251
// points := [ 14 , 50 , 16 ] ;
29232: LD_ADDR_VAR 0 9
29236: PUSH
29237: LD_INT 14
29239: PUSH
29240: LD_INT 50
29242: PUSH
29243: LD_INT 16
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29251: LD_VAR 0 6
29255: PPUSH
29256: CALL_OW 264
29260: PUSH
29261: LD_INT 6
29263: PUSH
29264: LD_INT 46
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: IN
29271: IFFALSE 29292
// points := [ 32 , 120 , 70 ] ;
29273: LD_ADDR_VAR 0 9
29277: PUSH
29278: LD_INT 32
29280: PUSH
29281: LD_INT 120
29283: PUSH
29284: LD_INT 70
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29292: LD_VAR 0 6
29296: PPUSH
29297: CALL_OW 264
29301: PUSH
29302: LD_INT 7
29304: PUSH
29305: LD_INT 28
29307: PUSH
29308: LD_INT 45
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: IN
29316: IFFALSE 29337
// points := [ 35 , 20 , 45 ] ;
29318: LD_ADDR_VAR 0 9
29322: PUSH
29323: LD_INT 35
29325: PUSH
29326: LD_INT 20
29328: PUSH
29329: LD_INT 45
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29337: LD_VAR 0 6
29341: PPUSH
29342: CALL_OW 264
29346: PUSH
29347: LD_INT 47
29349: PUSH
29350: EMPTY
29351: LIST
29352: IN
29353: IFFALSE 29374
// points := [ 67 , 45 , 75 ] ;
29355: LD_ADDR_VAR 0 9
29359: PUSH
29360: LD_INT 67
29362: PUSH
29363: LD_INT 45
29365: PUSH
29366: LD_INT 75
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29374: LD_VAR 0 6
29378: PPUSH
29379: CALL_OW 264
29383: PUSH
29384: LD_INT 26
29386: PUSH
29387: EMPTY
29388: LIST
29389: IN
29390: IFFALSE 29411
// points := [ 120 , 30 , 80 ] ;
29392: LD_ADDR_VAR 0 9
29396: PUSH
29397: LD_INT 120
29399: PUSH
29400: LD_INT 30
29402: PUSH
29403: LD_INT 80
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29411: LD_VAR 0 6
29415: PPUSH
29416: CALL_OW 264
29420: PUSH
29421: LD_INT 22
29423: PUSH
29424: EMPTY
29425: LIST
29426: IN
29427: IFFALSE 29448
// points := [ 40 , 1 , 1 ] ;
29429: LD_ADDR_VAR 0 9
29433: PUSH
29434: LD_INT 40
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29448: LD_VAR 0 6
29452: PPUSH
29453: CALL_OW 264
29457: PUSH
29458: LD_INT 29
29460: PUSH
29461: EMPTY
29462: LIST
29463: IN
29464: IFFALSE 29485
// points := [ 70 , 200 , 400 ] ;
29466: LD_ADDR_VAR 0 9
29470: PUSH
29471: LD_INT 70
29473: PUSH
29474: LD_INT 200
29476: PUSH
29477: LD_INT 400
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29485: LD_VAR 0 6
29489: PPUSH
29490: CALL_OW 264
29494: PUSH
29495: LD_INT 14
29497: PUSH
29498: LD_INT 53
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: IN
29505: IFFALSE 29526
// points := [ 40 , 10 , 20 ] ;
29507: LD_ADDR_VAR 0 9
29511: PUSH
29512: LD_INT 40
29514: PUSH
29515: LD_INT 10
29517: PUSH
29518: LD_INT 20
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29526: LD_VAR 0 6
29530: PPUSH
29531: CALL_OW 264
29535: PUSH
29536: LD_INT 9
29538: PUSH
29539: EMPTY
29540: LIST
29541: IN
29542: IFFALSE 29563
// points := [ 5 , 70 , 20 ] ;
29544: LD_ADDR_VAR 0 9
29548: PUSH
29549: LD_INT 5
29551: PUSH
29552: LD_INT 70
29554: PUSH
29555: LD_INT 20
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29563: LD_VAR 0 6
29567: PPUSH
29568: CALL_OW 264
29572: PUSH
29573: LD_INT 10
29575: PUSH
29576: EMPTY
29577: LIST
29578: IN
29579: IFFALSE 29600
// points := [ 35 , 110 , 70 ] ;
29581: LD_ADDR_VAR 0 9
29585: PUSH
29586: LD_INT 35
29588: PUSH
29589: LD_INT 110
29591: PUSH
29592: LD_INT 70
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29600: LD_VAR 0 6
29604: PPUSH
29605: CALL_OW 265
29609: PUSH
29610: LD_INT 25
29612: EQUAL
29613: IFFALSE 29634
// points := [ 80 , 65 , 100 ] ;
29615: LD_ADDR_VAR 0 9
29619: PUSH
29620: LD_INT 80
29622: PUSH
29623: LD_INT 65
29625: PUSH
29626: LD_INT 100
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29634: LD_VAR 0 6
29638: PPUSH
29639: CALL_OW 263
29643: PUSH
29644: LD_INT 1
29646: EQUAL
29647: IFFALSE 29682
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29649: LD_ADDR_VAR 0 10
29653: PUSH
29654: LD_VAR 0 10
29658: PUSH
29659: LD_VAR 0 6
29663: PPUSH
29664: CALL_OW 311
29668: PPUSH
29669: LD_INT 3
29671: PPUSH
29672: CALL_OW 259
29676: PUSH
29677: LD_INT 4
29679: MUL
29680: MUL
29681: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29682: LD_VAR 0 6
29686: PPUSH
29687: CALL_OW 263
29691: PUSH
29692: LD_INT 2
29694: EQUAL
29695: IFFALSE 29746
// begin j := IsControledBy ( i ) ;
29697: LD_ADDR_VAR 0 7
29701: PUSH
29702: LD_VAR 0 6
29706: PPUSH
29707: CALL_OW 312
29711: ST_TO_ADDR
// if j then
29712: LD_VAR 0 7
29716: IFFALSE 29746
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29718: LD_ADDR_VAR 0 10
29722: PUSH
29723: LD_VAR 0 10
29727: PUSH
29728: LD_VAR 0 7
29732: PPUSH
29733: LD_INT 3
29735: PPUSH
29736: CALL_OW 259
29740: PUSH
29741: LD_INT 3
29743: MUL
29744: MUL
29745: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29746: LD_VAR 0 6
29750: PPUSH
29751: CALL_OW 264
29755: PUSH
29756: LD_INT 5
29758: PUSH
29759: LD_INT 6
29761: PUSH
29762: LD_INT 46
29764: PUSH
29765: LD_INT 44
29767: PUSH
29768: LD_INT 47
29770: PUSH
29771: LD_INT 45
29773: PUSH
29774: LD_INT 28
29776: PUSH
29777: LD_INT 7
29779: PUSH
29780: LD_INT 27
29782: PUSH
29783: LD_INT 29
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: IN
29798: PUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: LD_INT 52
29806: PPUSH
29807: CALL_OW 321
29811: PUSH
29812: LD_INT 2
29814: EQUAL
29815: AND
29816: IFFALSE 29833
// bpoints := bpoints * 1.2 ;
29818: LD_ADDR_VAR 0 10
29822: PUSH
29823: LD_VAR 0 10
29827: PUSH
29828: LD_REAL  1.20000000000000E+0000
29831: MUL
29832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29833: LD_VAR 0 6
29837: PPUSH
29838: CALL_OW 264
29842: PUSH
29843: LD_INT 6
29845: PUSH
29846: LD_INT 46
29848: PUSH
29849: LD_INT 47
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: IN
29857: IFFALSE 29874
// bpoints := bpoints * 1.2 ;
29859: LD_ADDR_VAR 0 10
29863: PUSH
29864: LD_VAR 0 10
29868: PUSH
29869: LD_REAL  1.20000000000000E+0000
29872: MUL
29873: ST_TO_ADDR
// end ; unit_building :
29874: GO 29888
29876: LD_INT 3
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 29887
29884: POP
// ; end ;
29885: GO 29888
29887: POP
// for j = 1 to 3 do
29888: LD_ADDR_VAR 0 7
29892: PUSH
29893: DOUBLE
29894: LD_INT 1
29896: DEC
29897: ST_TO_ADDR
29898: LD_INT 3
29900: PUSH
29901: FOR_TO
29902: IFFALSE 29955
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29904: LD_ADDR_VAR 0 5
29908: PUSH
29909: LD_VAR 0 5
29913: PPUSH
29914: LD_VAR 0 7
29918: PPUSH
29919: LD_VAR 0 5
29923: PUSH
29924: LD_VAR 0 7
29928: ARRAY
29929: PUSH
29930: LD_VAR 0 9
29934: PUSH
29935: LD_VAR 0 7
29939: ARRAY
29940: PUSH
29941: LD_VAR 0 10
29945: MUL
29946: PLUS
29947: PPUSH
29948: CALL_OW 1
29952: ST_TO_ADDR
29953: GO 29901
29955: POP
29956: POP
// end ;
29957: GO 28440
29959: POP
29960: POP
// result := Replace ( result , 4 , tmp ) ;
29961: LD_ADDR_VAR 0 5
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_INT 4
29973: PPUSH
29974: LD_VAR 0 8
29978: PPUSH
29979: CALL_OW 1
29983: ST_TO_ADDR
// end ;
29984: LD_VAR 0 5
29988: RET
// export function DangerAtRange ( unit , range ) ; begin
29989: LD_INT 0
29991: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29992: LD_ADDR_VAR 0 3
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 255
30006: PPUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 250
30016: PPUSH
30017: LD_VAR 0 1
30021: PPUSH
30022: CALL_OW 251
30026: PPUSH
30027: LD_VAR 0 2
30031: PPUSH
30032: CALL 28292 0 4
30036: ST_TO_ADDR
// end ;
30037: LD_VAR 0 3
30041: RET
// export function DangerInArea ( side , area ) ; begin
30042: LD_INT 0
30044: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: LD_VAR 0 2
30054: PPUSH
30055: LD_INT 81
30057: PUSH
30058: LD_VAR 0 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PPUSH
30067: CALL_OW 70
30071: ST_TO_ADDR
// end ;
30072: LD_VAR 0 3
30076: RET
// export function IsExtension ( b ) ; begin
30077: LD_INT 0
30079: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_VAR 0 1
30089: PUSH
30090: LD_INT 23
30092: PUSH
30093: LD_INT 20
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_INT 17
30101: PUSH
30102: LD_INT 24
30104: PUSH
30105: LD_INT 21
30107: PUSH
30108: LD_INT 19
30110: PUSH
30111: LD_INT 16
30113: PUSH
30114: LD_INT 25
30116: PUSH
30117: LD_INT 18
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: IN
30132: ST_TO_ADDR
// end ;
30133: LD_VAR 0 2
30137: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30138: LD_INT 0
30140: PPUSH
30141: PPUSH
30142: PPUSH
// result := [ ] ;
30143: LD_ADDR_VAR 0 3
30147: PUSH
30148: EMPTY
30149: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30150: LD_ADDR_VAR 0 4
30154: PUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: LD_INT 21
30162: PUSH
30163: LD_INT 3
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PPUSH
30170: CALL_OW 70
30174: ST_TO_ADDR
// if not tmp then
30175: LD_VAR 0 4
30179: NOT
30180: IFFALSE 30184
// exit ;
30182: GO 30242
// for i in tmp do
30184: LD_ADDR_VAR 0 5
30188: PUSH
30189: LD_VAR 0 4
30193: PUSH
30194: FOR_IN
30195: IFFALSE 30230
// if GetBase ( i ) <> base then
30197: LD_VAR 0 5
30201: PPUSH
30202: CALL_OW 274
30206: PUSH
30207: LD_VAR 0 1
30211: NONEQUAL
30212: IFFALSE 30228
// ComLinkToBase ( base , i ) ;
30214: LD_VAR 0 1
30218: PPUSH
30219: LD_VAR 0 5
30223: PPUSH
30224: CALL_OW 169
30228: GO 30194
30230: POP
30231: POP
// result := tmp ;
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: LD_VAR 0 4
30241: ST_TO_ADDR
// end ;
30242: LD_VAR 0 3
30246: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30247: LD_INT 0
30249: PPUSH
30250: PPUSH
// if BuildingStatus ( b ) = bs_build then
30251: LD_VAR 0 2
30255: PPUSH
30256: CALL_OW 461
30260: PUSH
30261: LD_INT 1
30263: EQUAL
30264: IFFALSE 30324
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30266: LD_VAR 0 1
30270: PPUSH
30271: LD_STRING h
30273: PUSH
30274: LD_VAR 0 2
30278: PPUSH
30279: CALL_OW 250
30283: PUSH
30284: LD_VAR 0 2
30288: PPUSH
30289: CALL_OW 251
30293: PUSH
30294: LD_VAR 0 2
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: PUSH
30317: EMPTY
30318: LIST
30319: PPUSH
30320: CALL_OW 446
// end ;
30324: LD_VAR 0 3
30328: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30329: LD_INT 0
30331: PPUSH
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30337: LD_VAR 0 1
30341: NOT
30342: PUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 263
30352: PUSH
30353: LD_INT 2
30355: EQUAL
30356: NOT
30357: OR
30358: IFFALSE 30362
// exit ;
30360: GO 30678
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30362: LD_ADDR_VAR 0 6
30366: PUSH
30367: LD_INT 22
30369: PUSH
30370: LD_VAR 0 1
30374: PPUSH
30375: CALL_OW 255
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 30
30389: PUSH
30390: LD_INT 36
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 34
30399: PUSH
30400: LD_INT 31
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PPUSH
30416: CALL_OW 69
30420: ST_TO_ADDR
// if not tmp then
30421: LD_VAR 0 6
30425: NOT
30426: IFFALSE 30430
// exit ;
30428: GO 30678
// result := [ ] ;
30430: LD_ADDR_VAR 0 2
30434: PUSH
30435: EMPTY
30436: ST_TO_ADDR
// for i in tmp do
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_VAR 0 6
30446: PUSH
30447: FOR_IN
30448: IFFALSE 30519
// begin t := UnitsInside ( i ) ;
30450: LD_ADDR_VAR 0 4
30454: PUSH
30455: LD_VAR 0 3
30459: PPUSH
30460: CALL_OW 313
30464: ST_TO_ADDR
// if t then
30465: LD_VAR 0 4
30469: IFFALSE 30517
// for j in t do
30471: LD_ADDR_VAR 0 7
30475: PUSH
30476: LD_VAR 0 4
30480: PUSH
30481: FOR_IN
30482: IFFALSE 30515
// result := Insert ( result , result + 1 , j ) ;
30484: LD_ADDR_VAR 0 2
30488: PUSH
30489: LD_VAR 0 2
30493: PPUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_INT 1
30501: PLUS
30502: PPUSH
30503: LD_VAR 0 7
30507: PPUSH
30508: CALL_OW 2
30512: ST_TO_ADDR
30513: GO 30481
30515: POP
30516: POP
// end ;
30517: GO 30447
30519: POP
30520: POP
// if not result then
30521: LD_VAR 0 2
30525: NOT
30526: IFFALSE 30530
// exit ;
30528: GO 30678
// mech := result [ 1 ] ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_VAR 0 2
30539: PUSH
30540: LD_INT 1
30542: ARRAY
30543: ST_TO_ADDR
// if result > 1 then
30544: LD_VAR 0 2
30548: PUSH
30549: LD_INT 1
30551: GREATER
30552: IFFALSE 30664
// for i = 2 to result do
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: DOUBLE
30560: LD_INT 2
30562: DEC
30563: ST_TO_ADDR
30564: LD_VAR 0 2
30568: PUSH
30569: FOR_TO
30570: IFFALSE 30662
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30572: LD_ADDR_VAR 0 4
30576: PUSH
30577: LD_VAR 0 2
30581: PUSH
30582: LD_VAR 0 3
30586: ARRAY
30587: PPUSH
30588: LD_INT 3
30590: PPUSH
30591: CALL_OW 259
30595: PUSH
30596: LD_VAR 0 2
30600: PUSH
30601: LD_VAR 0 3
30605: ARRAY
30606: PPUSH
30607: CALL_OW 432
30611: MINUS
30612: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30613: LD_VAR 0 4
30617: PUSH
30618: LD_VAR 0 5
30622: PPUSH
30623: LD_INT 3
30625: PPUSH
30626: CALL_OW 259
30630: PUSH
30631: LD_VAR 0 5
30635: PPUSH
30636: CALL_OW 432
30640: MINUS
30641: GREATEREQUAL
30642: IFFALSE 30660
// mech := result [ i ] ;
30644: LD_ADDR_VAR 0 5
30648: PUSH
30649: LD_VAR 0 2
30653: PUSH
30654: LD_VAR 0 3
30658: ARRAY
30659: ST_TO_ADDR
// end ;
30660: GO 30569
30662: POP
30663: POP
// ComLinkTo ( vehicle , mech ) ;
30664: LD_VAR 0 1
30668: PPUSH
30669: LD_VAR 0 5
30673: PPUSH
30674: CALL_OW 135
// end ;
30678: LD_VAR 0 2
30682: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30683: LD_INT 0
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
// result := [ ] ;
30698: LD_ADDR_VAR 0 7
30702: PUSH
30703: EMPTY
30704: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 266
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: IN
30725: NOT
30726: IFFALSE 30730
// exit ;
30728: GO 32361
// if name then
30730: LD_VAR 0 3
30734: IFFALSE 30750
// SetBName ( base_dep , name ) ;
30736: LD_VAR 0 1
30740: PPUSH
30741: LD_VAR 0 3
30745: PPUSH
30746: CALL_OW 500
// base := GetBase ( base_dep ) ;
30750: LD_ADDR_VAR 0 15
30754: PUSH
30755: LD_VAR 0 1
30759: PPUSH
30760: CALL_OW 274
30764: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30765: LD_ADDR_VAR 0 16
30769: PUSH
30770: LD_VAR 0 1
30774: PPUSH
30775: CALL_OW 255
30779: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30780: LD_ADDR_VAR 0 17
30784: PUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 248
30794: ST_TO_ADDR
// if sources then
30795: LD_VAR 0 5
30799: IFFALSE 30846
// for i = 1 to 3 do
30801: LD_ADDR_VAR 0 8
30805: PUSH
30806: DOUBLE
30807: LD_INT 1
30809: DEC
30810: ST_TO_ADDR
30811: LD_INT 3
30813: PUSH
30814: FOR_TO
30815: IFFALSE 30844
// AddResourceType ( base , i , sources [ i ] ) ;
30817: LD_VAR 0 15
30821: PPUSH
30822: LD_VAR 0 8
30826: PPUSH
30827: LD_VAR 0 5
30831: PUSH
30832: LD_VAR 0 8
30836: ARRAY
30837: PPUSH
30838: CALL_OW 276
30842: GO 30814
30844: POP
30845: POP
// buildings := GetBaseBuildings ( base , area ) ;
30846: LD_ADDR_VAR 0 18
30850: PUSH
30851: LD_VAR 0 15
30855: PPUSH
30856: LD_VAR 0 2
30860: PPUSH
30861: CALL 30138 0 2
30865: ST_TO_ADDR
// InitHc ;
30866: CALL_OW 19
// InitUc ;
30870: CALL_OW 18
// uc_side := side ;
30874: LD_ADDR_OWVAR 20
30878: PUSH
30879: LD_VAR 0 16
30883: ST_TO_ADDR
// uc_nation := nation ;
30884: LD_ADDR_OWVAR 21
30888: PUSH
30889: LD_VAR 0 17
30893: ST_TO_ADDR
// if buildings then
30894: LD_VAR 0 18
30898: IFFALSE 32220
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30900: LD_ADDR_VAR 0 19
30904: PUSH
30905: LD_VAR 0 18
30909: PPUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 30
30915: PUSH
30916: LD_INT 29
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 30
30925: PUSH
30926: LD_INT 30
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: PPUSH
30938: CALL_OW 72
30942: ST_TO_ADDR
// if tmp then
30943: LD_VAR 0 19
30947: IFFALSE 30995
// for i in tmp do
30949: LD_ADDR_VAR 0 8
30953: PUSH
30954: LD_VAR 0 19
30958: PUSH
30959: FOR_IN
30960: IFFALSE 30993
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30962: LD_VAR 0 8
30966: PPUSH
30967: CALL_OW 250
30971: PPUSH
30972: LD_VAR 0 8
30976: PPUSH
30977: CALL_OW 251
30981: PPUSH
30982: LD_VAR 0 16
30986: PPUSH
30987: CALL_OW 441
30991: GO 30959
30993: POP
30994: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30995: LD_VAR 0 18
30999: PPUSH
31000: LD_INT 2
31002: PUSH
31003: LD_INT 30
31005: PUSH
31006: LD_INT 32
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 30
31015: PUSH
31016: LD_INT 33
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: PPUSH
31028: CALL_OW 72
31032: IFFALSE 31120
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31034: LD_ADDR_VAR 0 8
31038: PUSH
31039: LD_VAR 0 18
31043: PPUSH
31044: LD_INT 2
31046: PUSH
31047: LD_INT 30
31049: PUSH
31050: LD_INT 32
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 30
31059: PUSH
31060: LD_INT 33
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: PPUSH
31072: CALL_OW 72
31076: PUSH
31077: FOR_IN
31078: IFFALSE 31118
// begin if not GetBWeapon ( i ) then
31080: LD_VAR 0 8
31084: PPUSH
31085: CALL_OW 269
31089: NOT
31090: IFFALSE 31116
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31092: LD_VAR 0 8
31096: PPUSH
31097: LD_VAR 0 8
31101: PPUSH
31102: LD_VAR 0 2
31106: PPUSH
31107: CALL 32366 0 2
31111: PPUSH
31112: CALL_OW 431
// end ;
31116: GO 31077
31118: POP
31119: POP
// end ; for i = 1 to personel do
31120: LD_ADDR_VAR 0 8
31124: PUSH
31125: DOUBLE
31126: LD_INT 1
31128: DEC
31129: ST_TO_ADDR
31130: LD_VAR 0 6
31134: PUSH
31135: FOR_TO
31136: IFFALSE 32200
// begin if i > 4 then
31138: LD_VAR 0 8
31142: PUSH
31143: LD_INT 4
31145: GREATER
31146: IFFALSE 31150
// break ;
31148: GO 32200
// case i of 1 :
31150: LD_VAR 0 8
31154: PUSH
31155: LD_INT 1
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31243
31163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31164: LD_ADDR_VAR 0 12
31168: PUSH
31169: LD_VAR 0 18
31173: PPUSH
31174: LD_INT 22
31176: PUSH
31177: LD_VAR 0 16
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 58
31188: PUSH
31189: EMPTY
31190: LIST
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: LD_INT 30
31197: PUSH
31198: LD_INT 32
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 30
31207: PUSH
31208: LD_INT 4
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 30
31217: PUSH
31218: LD_INT 5
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: PPUSH
31236: CALL_OW 72
31240: ST_TO_ADDR
31241: GO 31465
31243: LD_INT 2
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31251
31249: GO 31313
31251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31252: LD_ADDR_VAR 0 12
31256: PUSH
31257: LD_VAR 0 18
31261: PPUSH
31262: LD_INT 22
31264: PUSH
31265: LD_VAR 0 16
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 30
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 30
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PPUSH
31306: CALL_OW 72
31310: ST_TO_ADDR
31311: GO 31465
31313: LD_INT 3
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31383
31321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31322: LD_ADDR_VAR 0 12
31326: PUSH
31327: LD_VAR 0 18
31331: PPUSH
31332: LD_INT 22
31334: PUSH
31335: LD_VAR 0 16
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: LD_INT 30
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 30
31359: PUSH
31360: LD_INT 3
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PPUSH
31376: CALL_OW 72
31380: ST_TO_ADDR
31381: GO 31465
31383: LD_INT 4
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31464
31391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31392: LD_ADDR_VAR 0 12
31396: PUSH
31397: LD_VAR 0 18
31401: PPUSH
31402: LD_INT 22
31404: PUSH
31405: LD_VAR 0 16
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 30
31419: PUSH
31420: LD_INT 6
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 30
31429: PUSH
31430: LD_INT 7
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 30
31439: PUSH
31440: LD_INT 8
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PPUSH
31457: CALL_OW 72
31461: ST_TO_ADDR
31462: GO 31465
31464: POP
// if i = 1 then
31465: LD_VAR 0 8
31469: PUSH
31470: LD_INT 1
31472: EQUAL
31473: IFFALSE 31584
// begin tmp := [ ] ;
31475: LD_ADDR_VAR 0 19
31479: PUSH
31480: EMPTY
31481: ST_TO_ADDR
// for j in f do
31482: LD_ADDR_VAR 0 9
31486: PUSH
31487: LD_VAR 0 12
31491: PUSH
31492: FOR_IN
31493: IFFALSE 31566
// if GetBType ( j ) = b_bunker then
31495: LD_VAR 0 9
31499: PPUSH
31500: CALL_OW 266
31504: PUSH
31505: LD_INT 32
31507: EQUAL
31508: IFFALSE 31535
// tmp := Insert ( tmp , 1 , j ) else
31510: LD_ADDR_VAR 0 19
31514: PUSH
31515: LD_VAR 0 19
31519: PPUSH
31520: LD_INT 1
31522: PPUSH
31523: LD_VAR 0 9
31527: PPUSH
31528: CALL_OW 2
31532: ST_TO_ADDR
31533: GO 31564
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31535: LD_ADDR_VAR 0 19
31539: PUSH
31540: LD_VAR 0 19
31544: PPUSH
31545: LD_VAR 0 19
31549: PUSH
31550: LD_INT 1
31552: PLUS
31553: PPUSH
31554: LD_VAR 0 9
31558: PPUSH
31559: CALL_OW 2
31563: ST_TO_ADDR
31564: GO 31492
31566: POP
31567: POP
// if tmp then
31568: LD_VAR 0 19
31572: IFFALSE 31584
// f := tmp ;
31574: LD_ADDR_VAR 0 12
31578: PUSH
31579: LD_VAR 0 19
31583: ST_TO_ADDR
// end ; x := personel [ i ] ;
31584: LD_ADDR_VAR 0 13
31588: PUSH
31589: LD_VAR 0 6
31593: PUSH
31594: LD_VAR 0 8
31598: ARRAY
31599: ST_TO_ADDR
// if x = - 1 then
31600: LD_VAR 0 13
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: EQUAL
31609: IFFALSE 31818
// begin for j in f do
31611: LD_ADDR_VAR 0 9
31615: PUSH
31616: LD_VAR 0 12
31620: PUSH
31621: FOR_IN
31622: IFFALSE 31814
// repeat InitHc ;
31624: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31628: LD_VAR 0 9
31632: PPUSH
31633: CALL_OW 266
31637: PUSH
31638: LD_INT 5
31640: EQUAL
31641: IFFALSE 31711
// begin if UnitsInside ( j ) < 3 then
31643: LD_VAR 0 9
31647: PPUSH
31648: CALL_OW 313
31652: PUSH
31653: LD_INT 3
31655: LESS
31656: IFFALSE 31692
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31658: LD_INT 0
31660: PPUSH
31661: LD_INT 5
31663: PUSH
31664: LD_INT 8
31666: PUSH
31667: LD_INT 9
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: PUSH
31675: LD_VAR 0 17
31679: ARRAY
31680: PPUSH
31681: LD_VAR 0 4
31685: PPUSH
31686: CALL_OW 380
31690: GO 31709
// PrepareHuman ( false , i , skill ) ;
31692: LD_INT 0
31694: PPUSH
31695: LD_VAR 0 8
31699: PPUSH
31700: LD_VAR 0 4
31704: PPUSH
31705: CALL_OW 380
// end else
31709: GO 31728
// PrepareHuman ( false , i , skill ) ;
31711: LD_INT 0
31713: PPUSH
31714: LD_VAR 0 8
31718: PPUSH
31719: LD_VAR 0 4
31723: PPUSH
31724: CALL_OW 380
// un := CreateHuman ;
31728: LD_ADDR_VAR 0 14
31732: PUSH
31733: CALL_OW 44
31737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31738: LD_ADDR_VAR 0 7
31742: PUSH
31743: LD_VAR 0 7
31747: PPUSH
31748: LD_INT 1
31750: PPUSH
31751: LD_VAR 0 14
31755: PPUSH
31756: CALL_OW 2
31760: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31761: LD_VAR 0 14
31765: PPUSH
31766: LD_VAR 0 9
31770: PPUSH
31771: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31775: LD_VAR 0 9
31779: PPUSH
31780: CALL_OW 313
31784: PUSH
31785: LD_INT 6
31787: EQUAL
31788: PUSH
31789: LD_VAR 0 9
31793: PPUSH
31794: CALL_OW 266
31798: PUSH
31799: LD_INT 32
31801: PUSH
31802: LD_INT 31
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: IN
31809: OR
31810: IFFALSE 31624
31812: GO 31621
31814: POP
31815: POP
// end else
31816: GO 32198
// for j = 1 to x do
31818: LD_ADDR_VAR 0 9
31822: PUSH
31823: DOUBLE
31824: LD_INT 1
31826: DEC
31827: ST_TO_ADDR
31828: LD_VAR 0 13
31832: PUSH
31833: FOR_TO
31834: IFFALSE 32196
// begin InitHc ;
31836: CALL_OW 19
// if not f then
31840: LD_VAR 0 12
31844: NOT
31845: IFFALSE 31934
// begin PrepareHuman ( false , i , skill ) ;
31847: LD_INT 0
31849: PPUSH
31850: LD_VAR 0 8
31854: PPUSH
31855: LD_VAR 0 4
31859: PPUSH
31860: CALL_OW 380
// un := CreateHuman ;
31864: LD_ADDR_VAR 0 14
31868: PUSH
31869: CALL_OW 44
31873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31874: LD_ADDR_VAR 0 7
31878: PUSH
31879: LD_VAR 0 7
31883: PPUSH
31884: LD_INT 1
31886: PPUSH
31887: LD_VAR 0 14
31891: PPUSH
31892: CALL_OW 2
31896: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31897: LD_VAR 0 14
31901: PPUSH
31902: LD_VAR 0 1
31906: PPUSH
31907: CALL_OW 250
31911: PPUSH
31912: LD_VAR 0 1
31916: PPUSH
31917: CALL_OW 251
31921: PPUSH
31922: LD_INT 10
31924: PPUSH
31925: LD_INT 0
31927: PPUSH
31928: CALL_OW 50
// continue ;
31932: GO 31833
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31934: LD_VAR 0 12
31938: PUSH
31939: LD_INT 1
31941: ARRAY
31942: PPUSH
31943: CALL_OW 313
31947: PUSH
31948: LD_VAR 0 12
31952: PUSH
31953: LD_INT 1
31955: ARRAY
31956: PPUSH
31957: CALL_OW 266
31961: PUSH
31962: LD_INT 32
31964: PUSH
31965: LD_INT 31
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: IN
31972: AND
31973: PUSH
31974: LD_VAR 0 12
31978: PUSH
31979: LD_INT 1
31981: ARRAY
31982: PPUSH
31983: CALL_OW 313
31987: PUSH
31988: LD_INT 6
31990: EQUAL
31991: OR
31992: IFFALSE 32012
// f := Delete ( f , 1 ) ;
31994: LD_ADDR_VAR 0 12
31998: PUSH
31999: LD_VAR 0 12
32003: PPUSH
32004: LD_INT 1
32006: PPUSH
32007: CALL_OW 3
32011: ST_TO_ADDR
// if not f then
32012: LD_VAR 0 12
32016: NOT
32017: IFFALSE 32035
// begin x := x + 2 ;
32019: LD_ADDR_VAR 0 13
32023: PUSH
32024: LD_VAR 0 13
32028: PUSH
32029: LD_INT 2
32031: PLUS
32032: ST_TO_ADDR
// continue ;
32033: GO 31833
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32035: LD_VAR 0 12
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PPUSH
32044: CALL_OW 266
32048: PUSH
32049: LD_INT 5
32051: EQUAL
32052: IFFALSE 32126
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32054: LD_VAR 0 12
32058: PUSH
32059: LD_INT 1
32061: ARRAY
32062: PPUSH
32063: CALL_OW 313
32067: PUSH
32068: LD_INT 3
32070: LESS
32071: IFFALSE 32107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32073: LD_INT 0
32075: PPUSH
32076: LD_INT 5
32078: PUSH
32079: LD_INT 8
32081: PUSH
32082: LD_INT 9
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: PUSH
32090: LD_VAR 0 17
32094: ARRAY
32095: PPUSH
32096: LD_VAR 0 4
32100: PPUSH
32101: CALL_OW 380
32105: GO 32124
// PrepareHuman ( false , i , skill ) ;
32107: LD_INT 0
32109: PPUSH
32110: LD_VAR 0 8
32114: PPUSH
32115: LD_VAR 0 4
32119: PPUSH
32120: CALL_OW 380
// end else
32124: GO 32143
// PrepareHuman ( false , i , skill ) ;
32126: LD_INT 0
32128: PPUSH
32129: LD_VAR 0 8
32133: PPUSH
32134: LD_VAR 0 4
32138: PPUSH
32139: CALL_OW 380
// un := CreateHuman ;
32143: LD_ADDR_VAR 0 14
32147: PUSH
32148: CALL_OW 44
32152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32153: LD_ADDR_VAR 0 7
32157: PUSH
32158: LD_VAR 0 7
32162: PPUSH
32163: LD_INT 1
32165: PPUSH
32166: LD_VAR 0 14
32170: PPUSH
32171: CALL_OW 2
32175: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32176: LD_VAR 0 14
32180: PPUSH
32181: LD_VAR 0 12
32185: PUSH
32186: LD_INT 1
32188: ARRAY
32189: PPUSH
32190: CALL_OW 52
// end ;
32194: GO 31833
32196: POP
32197: POP
// end ;
32198: GO 31135
32200: POP
32201: POP
// result := result ^ buildings ;
32202: LD_ADDR_VAR 0 7
32206: PUSH
32207: LD_VAR 0 7
32211: PUSH
32212: LD_VAR 0 18
32216: ADD
32217: ST_TO_ADDR
// end else
32218: GO 32361
// begin for i = 1 to personel do
32220: LD_ADDR_VAR 0 8
32224: PUSH
32225: DOUBLE
32226: LD_INT 1
32228: DEC
32229: ST_TO_ADDR
32230: LD_VAR 0 6
32234: PUSH
32235: FOR_TO
32236: IFFALSE 32359
// begin if i > 4 then
32238: LD_VAR 0 8
32242: PUSH
32243: LD_INT 4
32245: GREATER
32246: IFFALSE 32250
// break ;
32248: GO 32359
// x := personel [ i ] ;
32250: LD_ADDR_VAR 0 13
32254: PUSH
32255: LD_VAR 0 6
32259: PUSH
32260: LD_VAR 0 8
32264: ARRAY
32265: ST_TO_ADDR
// if x = - 1 then
32266: LD_VAR 0 13
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: EQUAL
32275: IFFALSE 32279
// continue ;
32277: GO 32235
// PrepareHuman ( false , i , skill ) ;
32279: LD_INT 0
32281: PPUSH
32282: LD_VAR 0 8
32286: PPUSH
32287: LD_VAR 0 4
32291: PPUSH
32292: CALL_OW 380
// un := CreateHuman ;
32296: LD_ADDR_VAR 0 14
32300: PUSH
32301: CALL_OW 44
32305: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32306: LD_VAR 0 14
32310: PPUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 250
32320: PPUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL_OW 251
32330: PPUSH
32331: LD_INT 10
32333: PPUSH
32334: LD_INT 0
32336: PPUSH
32337: CALL_OW 50
// result := result ^ un ;
32341: LD_ADDR_VAR 0 7
32345: PUSH
32346: LD_VAR 0 7
32350: PUSH
32351: LD_VAR 0 14
32355: ADD
32356: ST_TO_ADDR
// end ;
32357: GO 32235
32359: POP
32360: POP
// end ; end ;
32361: LD_VAR 0 7
32365: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
32370: PPUSH
32371: PPUSH
32372: PPUSH
32373: PPUSH
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
// result := false ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 0
32391: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32392: LD_VAR 0 1
32396: NOT
32397: PUSH
32398: LD_VAR 0 1
32402: PPUSH
32403: CALL_OW 266
32407: PUSH
32408: LD_INT 32
32410: PUSH
32411: LD_INT 33
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: IN
32418: NOT
32419: OR
32420: IFFALSE 32424
// exit ;
32422: GO 33560
// nat := GetNation ( tower ) ;
32424: LD_ADDR_VAR 0 12
32428: PUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: CALL_OW 248
32438: ST_TO_ADDR
// side := GetSide ( tower ) ;
32439: LD_ADDR_VAR 0 16
32443: PUSH
32444: LD_VAR 0 1
32448: PPUSH
32449: CALL_OW 255
32453: ST_TO_ADDR
// x := GetX ( tower ) ;
32454: LD_ADDR_VAR 0 10
32458: PUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: CALL_OW 250
32468: ST_TO_ADDR
// y := GetY ( tower ) ;
32469: LD_ADDR_VAR 0 11
32473: PUSH
32474: LD_VAR 0 1
32478: PPUSH
32479: CALL_OW 251
32483: ST_TO_ADDR
// if not x or not y then
32484: LD_VAR 0 10
32488: NOT
32489: PUSH
32490: LD_VAR 0 11
32494: NOT
32495: OR
32496: IFFALSE 32500
// exit ;
32498: GO 33560
// weapon := 0 ;
32500: LD_ADDR_VAR 0 18
32504: PUSH
32505: LD_INT 0
32507: ST_TO_ADDR
// fac_list := [ ] ;
32508: LD_ADDR_VAR 0 17
32512: PUSH
32513: EMPTY
32514: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32515: LD_ADDR_VAR 0 6
32519: PUSH
32520: LD_VAR 0 1
32524: PPUSH
32525: CALL_OW 274
32529: PPUSH
32530: LD_VAR 0 2
32534: PPUSH
32535: CALL 30138 0 2
32539: PPUSH
32540: LD_INT 30
32542: PUSH
32543: LD_INT 3
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PPUSH
32550: CALL_OW 72
32554: ST_TO_ADDR
// if not factories then
32555: LD_VAR 0 6
32559: NOT
32560: IFFALSE 32564
// exit ;
32562: GO 33560
// for i in factories do
32564: LD_ADDR_VAR 0 8
32568: PUSH
32569: LD_VAR 0 6
32573: PUSH
32574: FOR_IN
32575: IFFALSE 32600
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32577: LD_ADDR_VAR 0 17
32581: PUSH
32582: LD_VAR 0 17
32586: PUSH
32587: LD_VAR 0 8
32591: PPUSH
32592: CALL_OW 478
32596: UNION
32597: ST_TO_ADDR
32598: GO 32574
32600: POP
32601: POP
// if not fac_list then
32602: LD_VAR 0 17
32606: NOT
32607: IFFALSE 32611
// exit ;
32609: GO 33560
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32611: LD_ADDR_VAR 0 5
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: LD_INT 9
32624: PUSH
32625: LD_INT 10
32627: PUSH
32628: LD_INT 6
32630: PUSH
32631: LD_INT 7
32633: PUSH
32634: LD_INT 11
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 27
32648: PUSH
32649: LD_INT 28
32651: PUSH
32652: LD_INT 26
32654: PUSH
32655: LD_INT 30
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 43
32666: PUSH
32667: LD_INT 44
32669: PUSH
32670: LD_INT 46
32672: PUSH
32673: LD_INT 45
32675: PUSH
32676: LD_INT 47
32678: PUSH
32679: LD_INT 49
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: LD_VAR 0 12
32699: ARRAY
32700: ST_TO_ADDR
// for i in list do
32701: LD_ADDR_VAR 0 8
32705: PUSH
32706: LD_VAR 0 5
32710: PUSH
32711: FOR_IN
32712: IFFALSE 32745
// if not i in fac_list then
32714: LD_VAR 0 8
32718: PUSH
32719: LD_VAR 0 17
32723: IN
32724: NOT
32725: IFFALSE 32743
// list := list diff i ;
32727: LD_ADDR_VAR 0 5
32731: PUSH
32732: LD_VAR 0 5
32736: PUSH
32737: LD_VAR 0 8
32741: DIFF
32742: ST_TO_ADDR
32743: GO 32711
32745: POP
32746: POP
// if not list then
32747: LD_VAR 0 5
32751: NOT
32752: IFFALSE 32756
// exit ;
32754: GO 33560
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32756: LD_VAR 0 12
32760: PUSH
32761: LD_INT 3
32763: EQUAL
32764: PUSH
32765: LD_INT 49
32767: PUSH
32768: LD_VAR 0 5
32772: IN
32773: AND
32774: PUSH
32775: LD_INT 31
32777: PPUSH
32778: LD_VAR 0 16
32782: PPUSH
32783: CALL_OW 321
32787: PUSH
32788: LD_INT 2
32790: EQUAL
32791: AND
32792: IFFALSE 32852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32794: LD_INT 22
32796: PUSH
32797: LD_VAR 0 16
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 35
32808: PUSH
32809: LD_INT 49
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 91
32818: PUSH
32819: LD_VAR 0 1
32823: PUSH
32824: LD_INT 10
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: LIST
32836: PPUSH
32837: CALL_OW 69
32841: NOT
32842: IFFALSE 32852
// weapon := ru_time_lapser ;
32844: LD_ADDR_VAR 0 18
32848: PUSH
32849: LD_INT 49
32851: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32852: LD_VAR 0 12
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: IN
32867: PUSH
32868: LD_INT 11
32870: PUSH
32871: LD_VAR 0 5
32875: IN
32876: PUSH
32877: LD_INT 30
32879: PUSH
32880: LD_VAR 0 5
32884: IN
32885: OR
32886: AND
32887: PUSH
32888: LD_INT 6
32890: PPUSH
32891: LD_VAR 0 16
32895: PPUSH
32896: CALL_OW 321
32900: PUSH
32901: LD_INT 2
32903: EQUAL
32904: AND
32905: IFFALSE 33070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32907: LD_INT 22
32909: PUSH
32910: LD_VAR 0 16
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 35
32924: PUSH
32925: LD_INT 11
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 35
32934: PUSH
32935: LD_INT 30
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 91
32949: PUSH
32950: LD_VAR 0 1
32954: PUSH
32955: LD_INT 18
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: PPUSH
32968: CALL_OW 69
32972: NOT
32973: PUSH
32974: LD_INT 22
32976: PUSH
32977: LD_VAR 0 16
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 30
32991: PUSH
32992: LD_INT 32
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 30
33001: PUSH
33002: LD_INT 33
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 91
33016: PUSH
33017: LD_VAR 0 1
33021: PUSH
33022: LD_INT 12
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: PUSH
33035: EMPTY
33036: LIST
33037: PPUSH
33038: CALL_OW 69
33042: PUSH
33043: LD_INT 2
33045: GREATER
33046: AND
33047: IFFALSE 33070
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33049: LD_ADDR_VAR 0 18
33053: PUSH
33054: LD_INT 11
33056: PUSH
33057: LD_INT 30
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_VAR 0 12
33068: ARRAY
33069: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33070: LD_VAR 0 18
33074: NOT
33075: PUSH
33076: LD_INT 40
33078: PPUSH
33079: LD_VAR 0 16
33083: PPUSH
33084: CALL_OW 321
33088: PUSH
33089: LD_INT 2
33091: EQUAL
33092: AND
33093: PUSH
33094: LD_INT 7
33096: PUSH
33097: LD_VAR 0 5
33101: IN
33102: PUSH
33103: LD_INT 28
33105: PUSH
33106: LD_VAR 0 5
33110: IN
33111: OR
33112: PUSH
33113: LD_INT 45
33115: PUSH
33116: LD_VAR 0 5
33120: IN
33121: OR
33122: AND
33123: IFFALSE 33377
// begin hex := GetHexInfo ( x , y ) ;
33125: LD_ADDR_VAR 0 4
33129: PUSH
33130: LD_VAR 0 10
33134: PPUSH
33135: LD_VAR 0 11
33139: PPUSH
33140: CALL_OW 546
33144: ST_TO_ADDR
// if hex [ 1 ] then
33145: LD_VAR 0 4
33149: PUSH
33150: LD_INT 1
33152: ARRAY
33153: IFFALSE 33157
// exit ;
33155: GO 33560
// height := hex [ 2 ] ;
33157: LD_ADDR_VAR 0 15
33161: PUSH
33162: LD_VAR 0 4
33166: PUSH
33167: LD_INT 2
33169: ARRAY
33170: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33171: LD_ADDR_VAR 0 14
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: LD_INT 5
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// for i in tmp do
33194: LD_ADDR_VAR 0 8
33198: PUSH
33199: LD_VAR 0 14
33203: PUSH
33204: FOR_IN
33205: IFFALSE 33375
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33207: LD_ADDR_VAR 0 9
33211: PUSH
33212: LD_VAR 0 10
33216: PPUSH
33217: LD_VAR 0 8
33221: PPUSH
33222: LD_INT 5
33224: PPUSH
33225: CALL_OW 272
33229: PUSH
33230: LD_VAR 0 11
33234: PPUSH
33235: LD_VAR 0 8
33239: PPUSH
33240: LD_INT 5
33242: PPUSH
33243: CALL_OW 273
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33252: LD_VAR 0 9
33256: PUSH
33257: LD_INT 1
33259: ARRAY
33260: PPUSH
33261: LD_VAR 0 9
33265: PUSH
33266: LD_INT 2
33268: ARRAY
33269: PPUSH
33270: CALL_OW 488
33274: IFFALSE 33373
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33276: LD_ADDR_VAR 0 4
33280: PUSH
33281: LD_VAR 0 9
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: PPUSH
33290: LD_VAR 0 9
33294: PUSH
33295: LD_INT 2
33297: ARRAY
33298: PPUSH
33299: CALL_OW 546
33303: ST_TO_ADDR
// if hex [ 1 ] then
33304: LD_VAR 0 4
33308: PUSH
33309: LD_INT 1
33311: ARRAY
33312: IFFALSE 33316
// continue ;
33314: GO 33204
// h := hex [ 2 ] ;
33316: LD_ADDR_VAR 0 13
33320: PUSH
33321: LD_VAR 0 4
33325: PUSH
33326: LD_INT 2
33328: ARRAY
33329: ST_TO_ADDR
// if h + 7 < height then
33330: LD_VAR 0 13
33334: PUSH
33335: LD_INT 7
33337: PLUS
33338: PUSH
33339: LD_VAR 0 15
33343: LESS
33344: IFFALSE 33373
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33346: LD_ADDR_VAR 0 18
33350: PUSH
33351: LD_INT 7
33353: PUSH
33354: LD_INT 28
33356: PUSH
33357: LD_INT 45
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: PUSH
33365: LD_VAR 0 12
33369: ARRAY
33370: ST_TO_ADDR
// break ;
33371: GO 33375
// end ; end ; end ;
33373: GO 33204
33375: POP
33376: POP
// end ; if not weapon then
33377: LD_VAR 0 18
33381: NOT
33382: IFFALSE 33442
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33384: LD_ADDR_VAR 0 5
33388: PUSH
33389: LD_VAR 0 5
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: LD_INT 30
33399: PUSH
33400: LD_INT 49
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: DIFF
33408: ST_TO_ADDR
// if not list then
33409: LD_VAR 0 5
33413: NOT
33414: IFFALSE 33418
// exit ;
33416: GO 33560
// weapon := list [ rand ( 1 , list ) ] ;
33418: LD_ADDR_VAR 0 18
33422: PUSH
33423: LD_VAR 0 5
33427: PUSH
33428: LD_INT 1
33430: PPUSH
33431: LD_VAR 0 5
33435: PPUSH
33436: CALL_OW 12
33440: ARRAY
33441: ST_TO_ADDR
// end ; if weapon then
33442: LD_VAR 0 18
33446: IFFALSE 33560
// begin tmp := CostOfWeapon ( weapon ) ;
33448: LD_ADDR_VAR 0 14
33452: PUSH
33453: LD_VAR 0 18
33457: PPUSH
33458: CALL_OW 451
33462: ST_TO_ADDR
// j := GetBase ( tower ) ;
33463: LD_ADDR_VAR 0 9
33467: PUSH
33468: LD_VAR 0 1
33472: PPUSH
33473: CALL_OW 274
33477: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33478: LD_VAR 0 9
33482: PPUSH
33483: LD_INT 1
33485: PPUSH
33486: CALL_OW 275
33490: PUSH
33491: LD_VAR 0 14
33495: PUSH
33496: LD_INT 1
33498: ARRAY
33499: GREATEREQUAL
33500: PUSH
33501: LD_VAR 0 9
33505: PPUSH
33506: LD_INT 2
33508: PPUSH
33509: CALL_OW 275
33513: PUSH
33514: LD_VAR 0 14
33518: PUSH
33519: LD_INT 2
33521: ARRAY
33522: GREATEREQUAL
33523: AND
33524: PUSH
33525: LD_VAR 0 9
33529: PPUSH
33530: LD_INT 3
33532: PPUSH
33533: CALL_OW 275
33537: PUSH
33538: LD_VAR 0 14
33542: PUSH
33543: LD_INT 3
33545: ARRAY
33546: GREATEREQUAL
33547: AND
33548: IFFALSE 33560
// result := weapon ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_VAR 0 18
33559: ST_TO_ADDR
// end ; end ;
33560: LD_VAR 0 3
33564: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33565: LD_INT 0
33567: PPUSH
33568: PPUSH
// result := true ;
33569: LD_ADDR_VAR 0 3
33573: PUSH
33574: LD_INT 1
33576: ST_TO_ADDR
// if array1 = array2 then
33577: LD_VAR 0 1
33581: PUSH
33582: LD_VAR 0 2
33586: EQUAL
33587: IFFALSE 33647
// begin for i = 1 to array1 do
33589: LD_ADDR_VAR 0 4
33593: PUSH
33594: DOUBLE
33595: LD_INT 1
33597: DEC
33598: ST_TO_ADDR
33599: LD_VAR 0 1
33603: PUSH
33604: FOR_TO
33605: IFFALSE 33643
// if array1 [ i ] <> array2 [ i ] then
33607: LD_VAR 0 1
33611: PUSH
33612: LD_VAR 0 4
33616: ARRAY
33617: PUSH
33618: LD_VAR 0 2
33622: PUSH
33623: LD_VAR 0 4
33627: ARRAY
33628: NONEQUAL
33629: IFFALSE 33641
// begin result := false ;
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: LD_INT 0
33638: ST_TO_ADDR
// break ;
33639: GO 33643
// end ;
33641: GO 33604
33643: POP
33644: POP
// end else
33645: GO 33655
// result := false ;
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_INT 0
33654: ST_TO_ADDR
// end ;
33655: LD_VAR 0 3
33659: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33660: LD_INT 0
33662: PPUSH
33663: PPUSH
33664: PPUSH
// pom := GetBase ( fac ) ;
33665: LD_ADDR_VAR 0 5
33669: PUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 274
33679: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33680: LD_ADDR_VAR 0 4
33684: PUSH
33685: LD_VAR 0 2
33689: PUSH
33690: LD_INT 1
33692: ARRAY
33693: PPUSH
33694: LD_VAR 0 2
33698: PUSH
33699: LD_INT 2
33701: ARRAY
33702: PPUSH
33703: LD_VAR 0 2
33707: PUSH
33708: LD_INT 3
33710: ARRAY
33711: PPUSH
33712: LD_VAR 0 2
33716: PUSH
33717: LD_INT 4
33719: ARRAY
33720: PPUSH
33721: CALL_OW 449
33725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_VAR 0 5
33735: PPUSH
33736: LD_INT 1
33738: PPUSH
33739: CALL_OW 275
33743: PUSH
33744: LD_VAR 0 4
33748: PUSH
33749: LD_INT 1
33751: ARRAY
33752: GREATEREQUAL
33753: PUSH
33754: LD_VAR 0 5
33758: PPUSH
33759: LD_INT 2
33761: PPUSH
33762: CALL_OW 275
33766: PUSH
33767: LD_VAR 0 4
33771: PUSH
33772: LD_INT 2
33774: ARRAY
33775: GREATEREQUAL
33776: AND
33777: PUSH
33778: LD_VAR 0 5
33782: PPUSH
33783: LD_INT 3
33785: PPUSH
33786: CALL_OW 275
33790: PUSH
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 3
33798: ARRAY
33799: GREATEREQUAL
33800: AND
33801: ST_TO_ADDR
// end ;
33802: LD_VAR 0 3
33806: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33807: LD_INT 0
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
// pom := GetBase ( building ) ;
33813: LD_ADDR_VAR 0 3
33817: PUSH
33818: LD_VAR 0 1
33822: PPUSH
33823: CALL_OW 274
33827: ST_TO_ADDR
// if not pom then
33828: LD_VAR 0 3
33832: NOT
33833: IFFALSE 33837
// exit ;
33835: GO 34007
// btype := GetBType ( building ) ;
33837: LD_ADDR_VAR 0 5
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 266
33851: ST_TO_ADDR
// if btype = b_armoury then
33852: LD_VAR 0 5
33856: PUSH
33857: LD_INT 4
33859: EQUAL
33860: IFFALSE 33870
// btype := b_barracks ;
33862: LD_ADDR_VAR 0 5
33866: PUSH
33867: LD_INT 5
33869: ST_TO_ADDR
// if btype = b_depot then
33870: LD_VAR 0 5
33874: PUSH
33875: LD_INT 0
33877: EQUAL
33878: IFFALSE 33888
// btype := b_warehouse ;
33880: LD_ADDR_VAR 0 5
33884: PUSH
33885: LD_INT 1
33887: ST_TO_ADDR
// if btype = b_workshop then
33888: LD_VAR 0 5
33892: PUSH
33893: LD_INT 2
33895: EQUAL
33896: IFFALSE 33906
// btype := b_factory ;
33898: LD_ADDR_VAR 0 5
33902: PUSH
33903: LD_INT 3
33905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33906: LD_ADDR_VAR 0 4
33910: PUSH
33911: LD_VAR 0 5
33915: PPUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: CALL_OW 248
33925: PPUSH
33926: CALL_OW 450
33930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33931: LD_ADDR_VAR 0 2
33935: PUSH
33936: LD_VAR 0 3
33940: PPUSH
33941: LD_INT 1
33943: PPUSH
33944: CALL_OW 275
33948: PUSH
33949: LD_VAR 0 4
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: GREATEREQUAL
33958: PUSH
33959: LD_VAR 0 3
33963: PPUSH
33964: LD_INT 2
33966: PPUSH
33967: CALL_OW 275
33971: PUSH
33972: LD_VAR 0 4
33976: PUSH
33977: LD_INT 2
33979: ARRAY
33980: GREATEREQUAL
33981: AND
33982: PUSH
33983: LD_VAR 0 3
33987: PPUSH
33988: LD_INT 3
33990: PPUSH
33991: CALL_OW 275
33995: PUSH
33996: LD_VAR 0 4
34000: PUSH
34001: LD_INT 3
34003: ARRAY
34004: GREATEREQUAL
34005: AND
34006: ST_TO_ADDR
// end ;
34007: LD_VAR 0 2
34011: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34012: LD_INT 0
34014: PPUSH
34015: PPUSH
34016: PPUSH
// pom := GetBase ( building ) ;
34017: LD_ADDR_VAR 0 4
34021: PUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: CALL_OW 274
34031: ST_TO_ADDR
// if not pom then
34032: LD_VAR 0 4
34036: NOT
34037: IFFALSE 34041
// exit ;
34039: GO 34142
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34041: LD_ADDR_VAR 0 5
34045: PUSH
34046: LD_VAR 0 2
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 248
34060: PPUSH
34061: CALL_OW 450
34065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_VAR 0 4
34075: PPUSH
34076: LD_INT 1
34078: PPUSH
34079: CALL_OW 275
34083: PUSH
34084: LD_VAR 0 5
34088: PUSH
34089: LD_INT 1
34091: ARRAY
34092: GREATEREQUAL
34093: PUSH
34094: LD_VAR 0 4
34098: PPUSH
34099: LD_INT 2
34101: PPUSH
34102: CALL_OW 275
34106: PUSH
34107: LD_VAR 0 5
34111: PUSH
34112: LD_INT 2
34114: ARRAY
34115: GREATEREQUAL
34116: AND
34117: PUSH
34118: LD_VAR 0 4
34122: PPUSH
34123: LD_INT 3
34125: PPUSH
34126: CALL_OW 275
34130: PUSH
34131: LD_VAR 0 5
34135: PUSH
34136: LD_INT 3
34138: ARRAY
34139: GREATEREQUAL
34140: AND
34141: ST_TO_ADDR
// end ;
34142: LD_VAR 0 3
34146: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34147: LD_INT 0
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
// result := false ;
34159: LD_ADDR_VAR 0 6
34163: PUSH
34164: LD_INT 0
34166: ST_TO_ADDR
// if not base or not btype or not x or not y then
34167: LD_VAR 0 1
34171: NOT
34172: PUSH
34173: LD_VAR 0 2
34177: NOT
34178: OR
34179: PUSH
34180: LD_VAR 0 3
34184: NOT
34185: OR
34186: PUSH
34187: LD_VAR 0 4
34191: NOT
34192: OR
34193: IFFALSE 34197
// exit ;
34195: GO 34806
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34197: LD_ADDR_VAR 0 12
34201: PUSH
34202: LD_VAR 0 2
34206: PPUSH
34207: LD_VAR 0 3
34211: PPUSH
34212: LD_VAR 0 4
34216: PPUSH
34217: LD_VAR 0 5
34221: PPUSH
34222: LD_VAR 0 1
34226: PUSH
34227: LD_INT 1
34229: ARRAY
34230: PPUSH
34231: CALL_OW 248
34235: PPUSH
34236: LD_INT 0
34238: PPUSH
34239: CALL 35643 0 6
34243: ST_TO_ADDR
// if not hexes then
34244: LD_VAR 0 12
34248: NOT
34249: IFFALSE 34253
// exit ;
34251: GO 34806
// for i = 1 to hexes do
34253: LD_ADDR_VAR 0 7
34257: PUSH
34258: DOUBLE
34259: LD_INT 1
34261: DEC
34262: ST_TO_ADDR
34263: LD_VAR 0 12
34267: PUSH
34268: FOR_TO
34269: IFFALSE 34804
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34271: LD_ADDR_VAR 0 11
34275: PUSH
34276: LD_VAR 0 12
34280: PUSH
34281: LD_VAR 0 7
34285: ARRAY
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: PPUSH
34291: LD_VAR 0 12
34295: PUSH
34296: LD_VAR 0 7
34300: ARRAY
34301: PUSH
34302: LD_INT 2
34304: ARRAY
34305: PPUSH
34306: CALL_OW 428
34310: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34311: LD_VAR 0 12
34315: PUSH
34316: LD_VAR 0 7
34320: ARRAY
34321: PUSH
34322: LD_INT 1
34324: ARRAY
34325: PPUSH
34326: LD_VAR 0 12
34330: PUSH
34331: LD_VAR 0 7
34335: ARRAY
34336: PUSH
34337: LD_INT 2
34339: ARRAY
34340: PPUSH
34341: CALL_OW 351
34345: PUSH
34346: LD_VAR 0 12
34350: PUSH
34351: LD_VAR 0 7
34355: ARRAY
34356: PUSH
34357: LD_INT 1
34359: ARRAY
34360: PPUSH
34361: LD_VAR 0 12
34365: PUSH
34366: LD_VAR 0 7
34370: ARRAY
34371: PUSH
34372: LD_INT 2
34374: ARRAY
34375: PPUSH
34376: CALL_OW 488
34380: NOT
34381: OR
34382: PUSH
34383: LD_VAR 0 11
34387: PPUSH
34388: CALL_OW 247
34392: PUSH
34393: LD_INT 3
34395: EQUAL
34396: OR
34397: IFFALSE 34403
// exit ;
34399: POP
34400: POP
34401: GO 34806
// if not tmp or not tmp in base then
34403: LD_VAR 0 11
34407: NOT
34408: PUSH
34409: LD_VAR 0 11
34413: PUSH
34414: LD_VAR 0 1
34418: IN
34419: NOT
34420: OR
34421: IFFALSE 34425
// continue ;
34423: GO 34268
// result := true ;
34425: LD_ADDR_VAR 0 6
34429: PUSH
34430: LD_INT 1
34432: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34433: LD_ADDR_VAR 0 15
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: LD_INT 22
34445: PUSH
34446: LD_VAR 0 11
34450: PPUSH
34451: CALL_OW 255
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 30
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 30
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PPUSH
34492: CALL_OW 72
34496: ST_TO_ADDR
// if dep then
34497: LD_VAR 0 15
34501: IFFALSE 34637
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34503: LD_ADDR_VAR 0 14
34507: PUSH
34508: LD_VAR 0 15
34512: PUSH
34513: LD_INT 1
34515: ARRAY
34516: PPUSH
34517: CALL_OW 250
34521: PPUSH
34522: LD_VAR 0 15
34526: PUSH
34527: LD_INT 1
34529: ARRAY
34530: PPUSH
34531: CALL_OW 254
34535: PPUSH
34536: LD_INT 5
34538: PPUSH
34539: CALL_OW 272
34543: PUSH
34544: LD_VAR 0 15
34548: PUSH
34549: LD_INT 1
34551: ARRAY
34552: PPUSH
34553: CALL_OW 251
34557: PPUSH
34558: LD_VAR 0 15
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: PPUSH
34567: CALL_OW 254
34571: PPUSH
34572: LD_INT 5
34574: PPUSH
34575: CALL_OW 273
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34584: LD_VAR 0 14
34588: PUSH
34589: LD_INT 1
34591: ARRAY
34592: PPUSH
34593: LD_VAR 0 14
34597: PUSH
34598: LD_INT 2
34600: ARRAY
34601: PPUSH
34602: CALL_OW 488
34606: IFFALSE 34637
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34608: LD_VAR 0 11
34612: PPUSH
34613: LD_VAR 0 14
34617: PUSH
34618: LD_INT 1
34620: ARRAY
34621: PPUSH
34622: LD_VAR 0 14
34626: PUSH
34627: LD_INT 2
34629: ARRAY
34630: PPUSH
34631: CALL_OW 111
// continue ;
34635: GO 34268
// end ; end ; r := GetDir ( tmp ) ;
34637: LD_ADDR_VAR 0 13
34641: PUSH
34642: LD_VAR 0 11
34646: PPUSH
34647: CALL_OW 254
34651: ST_TO_ADDR
// if r = 5 then
34652: LD_VAR 0 13
34656: PUSH
34657: LD_INT 5
34659: EQUAL
34660: IFFALSE 34670
// r := 0 ;
34662: LD_ADDR_VAR 0 13
34666: PUSH
34667: LD_INT 0
34669: ST_TO_ADDR
// for j = r to 5 do
34670: LD_ADDR_VAR 0 8
34674: PUSH
34675: DOUBLE
34676: LD_VAR 0 13
34680: DEC
34681: ST_TO_ADDR
34682: LD_INT 5
34684: PUSH
34685: FOR_TO
34686: IFFALSE 34800
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_VAR 0 11
34697: PPUSH
34698: CALL_OW 250
34702: PPUSH
34703: LD_VAR 0 8
34707: PPUSH
34708: LD_INT 2
34710: PPUSH
34711: CALL_OW 272
34715: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34716: LD_ADDR_VAR 0 10
34720: PUSH
34721: LD_VAR 0 11
34725: PPUSH
34726: CALL_OW 251
34730: PPUSH
34731: LD_VAR 0 8
34735: PPUSH
34736: LD_INT 2
34738: PPUSH
34739: CALL_OW 273
34743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34744: LD_VAR 0 9
34748: PPUSH
34749: LD_VAR 0 10
34753: PPUSH
34754: CALL_OW 488
34758: PUSH
34759: LD_VAR 0 9
34763: PPUSH
34764: LD_VAR 0 10
34768: PPUSH
34769: CALL_OW 428
34773: NOT
34774: AND
34775: IFFALSE 34798
// begin ComMoveXY ( tmp , _x , _y ) ;
34777: LD_VAR 0 11
34781: PPUSH
34782: LD_VAR 0 9
34786: PPUSH
34787: LD_VAR 0 10
34791: PPUSH
34792: CALL_OW 111
// break ;
34796: GO 34800
// end ; end ;
34798: GO 34685
34800: POP
34801: POP
// end ;
34802: GO 34268
34804: POP
34805: POP
// end ;
34806: LD_VAR 0 6
34810: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34811: LD_INT 0
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
34820: PPUSH
34821: PPUSH
34822: PPUSH
// result := false ;
34823: LD_ADDR_VAR 0 6
34827: PUSH
34828: LD_INT 0
34830: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34831: LD_VAR 0 1
34835: NOT
34836: PUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 266
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: IN
34857: NOT
34858: OR
34859: PUSH
34860: LD_VAR 0 2
34864: NOT
34865: OR
34866: PUSH
34867: LD_VAR 0 5
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: LD_INT 4
34886: PUSH
34887: LD_INT 5
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: IN
34898: NOT
34899: OR
34900: PUSH
34901: LD_VAR 0 3
34905: PPUSH
34906: LD_VAR 0 4
34910: PPUSH
34911: CALL_OW 488
34915: NOT
34916: OR
34917: IFFALSE 34921
// exit ;
34919: GO 35638
// pom := GetBase ( depot ) ;
34921: LD_ADDR_VAR 0 10
34925: PUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: CALL_OW 274
34935: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34936: LD_ADDR_VAR 0 11
34940: PUSH
34941: LD_VAR 0 2
34945: PPUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 248
34955: PPUSH
34956: CALL_OW 450
34960: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34961: LD_VAR 0 10
34965: PPUSH
34966: LD_INT 1
34968: PPUSH
34969: CALL_OW 275
34973: PUSH
34974: LD_VAR 0 11
34978: PUSH
34979: LD_INT 1
34981: ARRAY
34982: GREATEREQUAL
34983: PUSH
34984: LD_VAR 0 10
34988: PPUSH
34989: LD_INT 2
34991: PPUSH
34992: CALL_OW 275
34996: PUSH
34997: LD_VAR 0 11
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: GREATEREQUAL
35006: AND
35007: PUSH
35008: LD_VAR 0 10
35012: PPUSH
35013: LD_INT 3
35015: PPUSH
35016: CALL_OW 275
35020: PUSH
35021: LD_VAR 0 11
35025: PUSH
35026: LD_INT 3
35028: ARRAY
35029: GREATEREQUAL
35030: AND
35031: NOT
35032: IFFALSE 35036
// exit ;
35034: GO 35638
// if GetBType ( depot ) = b_depot then
35036: LD_VAR 0 1
35040: PPUSH
35041: CALL_OW 266
35045: PUSH
35046: LD_INT 0
35048: EQUAL
35049: IFFALSE 35061
// dist := 28 else
35051: LD_ADDR_VAR 0 14
35055: PUSH
35056: LD_INT 28
35058: ST_TO_ADDR
35059: GO 35069
// dist := 36 ;
35061: LD_ADDR_VAR 0 14
35065: PUSH
35066: LD_INT 36
35068: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35069: LD_VAR 0 1
35073: PPUSH
35074: LD_VAR 0 3
35078: PPUSH
35079: LD_VAR 0 4
35083: PPUSH
35084: CALL_OW 297
35088: PUSH
35089: LD_VAR 0 14
35093: GREATER
35094: IFFALSE 35098
// exit ;
35096: GO 35638
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35098: LD_ADDR_VAR 0 12
35102: PUSH
35103: LD_VAR 0 2
35107: PPUSH
35108: LD_VAR 0 3
35112: PPUSH
35113: LD_VAR 0 4
35117: PPUSH
35118: LD_VAR 0 5
35122: PPUSH
35123: LD_VAR 0 1
35127: PPUSH
35128: CALL_OW 248
35132: PPUSH
35133: LD_INT 0
35135: PPUSH
35136: CALL 35643 0 6
35140: ST_TO_ADDR
// if not hexes then
35141: LD_VAR 0 12
35145: NOT
35146: IFFALSE 35150
// exit ;
35148: GO 35638
// hex := GetHexInfo ( x , y ) ;
35150: LD_ADDR_VAR 0 15
35154: PUSH
35155: LD_VAR 0 3
35159: PPUSH
35160: LD_VAR 0 4
35164: PPUSH
35165: CALL_OW 546
35169: ST_TO_ADDR
// if hex [ 1 ] then
35170: LD_VAR 0 15
35174: PUSH
35175: LD_INT 1
35177: ARRAY
35178: IFFALSE 35182
// exit ;
35180: GO 35638
// height := hex [ 2 ] ;
35182: LD_ADDR_VAR 0 13
35186: PUSH
35187: LD_VAR 0 15
35191: PUSH
35192: LD_INT 2
35194: ARRAY
35195: ST_TO_ADDR
// for i = 1 to hexes do
35196: LD_ADDR_VAR 0 7
35200: PUSH
35201: DOUBLE
35202: LD_INT 1
35204: DEC
35205: ST_TO_ADDR
35206: LD_VAR 0 12
35210: PUSH
35211: FOR_TO
35212: IFFALSE 35542
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35214: LD_VAR 0 12
35218: PUSH
35219: LD_VAR 0 7
35223: ARRAY
35224: PUSH
35225: LD_INT 1
35227: ARRAY
35228: PPUSH
35229: LD_VAR 0 12
35233: PUSH
35234: LD_VAR 0 7
35238: ARRAY
35239: PUSH
35240: LD_INT 2
35242: ARRAY
35243: PPUSH
35244: CALL_OW 488
35248: NOT
35249: PUSH
35250: LD_VAR 0 12
35254: PUSH
35255: LD_VAR 0 7
35259: ARRAY
35260: PUSH
35261: LD_INT 1
35263: ARRAY
35264: PPUSH
35265: LD_VAR 0 12
35269: PUSH
35270: LD_VAR 0 7
35274: ARRAY
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: PPUSH
35280: CALL_OW 428
35284: PUSH
35285: LD_INT 0
35287: GREATER
35288: OR
35289: PUSH
35290: LD_VAR 0 12
35294: PUSH
35295: LD_VAR 0 7
35299: ARRAY
35300: PUSH
35301: LD_INT 1
35303: ARRAY
35304: PPUSH
35305: LD_VAR 0 12
35309: PUSH
35310: LD_VAR 0 7
35314: ARRAY
35315: PUSH
35316: LD_INT 2
35318: ARRAY
35319: PPUSH
35320: CALL_OW 351
35324: OR
35325: IFFALSE 35331
// exit ;
35327: POP
35328: POP
35329: GO 35638
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35331: LD_ADDR_VAR 0 8
35335: PUSH
35336: LD_VAR 0 12
35340: PUSH
35341: LD_VAR 0 7
35345: ARRAY
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: PPUSH
35351: LD_VAR 0 12
35355: PUSH
35356: LD_VAR 0 7
35360: ARRAY
35361: PUSH
35362: LD_INT 2
35364: ARRAY
35365: PPUSH
35366: CALL_OW 546
35370: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35371: LD_VAR 0 8
35375: PUSH
35376: LD_INT 1
35378: ARRAY
35379: PUSH
35380: LD_VAR 0 8
35384: PUSH
35385: LD_INT 2
35387: ARRAY
35388: PUSH
35389: LD_VAR 0 13
35393: PUSH
35394: LD_INT 2
35396: PLUS
35397: GREATER
35398: OR
35399: PUSH
35400: LD_VAR 0 8
35404: PUSH
35405: LD_INT 2
35407: ARRAY
35408: PUSH
35409: LD_VAR 0 13
35413: PUSH
35414: LD_INT 2
35416: MINUS
35417: LESS
35418: OR
35419: PUSH
35420: LD_VAR 0 8
35424: PUSH
35425: LD_INT 3
35427: ARRAY
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 8
35434: PUSH
35435: LD_INT 9
35437: PUSH
35438: LD_INT 10
35440: PUSH
35441: LD_INT 11
35443: PUSH
35444: LD_INT 12
35446: PUSH
35447: LD_INT 13
35449: PUSH
35450: LD_INT 16
35452: PUSH
35453: LD_INT 17
35455: PUSH
35456: LD_INT 18
35458: PUSH
35459: LD_INT 19
35461: PUSH
35462: LD_INT 20
35464: PUSH
35465: LD_INT 21
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: IN
35483: NOT
35484: OR
35485: PUSH
35486: LD_VAR 0 8
35490: PUSH
35491: LD_INT 5
35493: ARRAY
35494: NOT
35495: OR
35496: PUSH
35497: LD_VAR 0 8
35501: PUSH
35502: LD_INT 6
35504: ARRAY
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 7
35514: PUSH
35515: LD_INT 9
35517: PUSH
35518: LD_INT 10
35520: PUSH
35521: LD_INT 11
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: IN
35532: NOT
35533: OR
35534: IFFALSE 35540
// exit ;
35536: POP
35537: POP
35538: GO 35638
// end ;
35540: GO 35211
35542: POP
35543: POP
// side := GetSide ( depot ) ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 255
35558: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35559: LD_VAR 0 9
35563: PPUSH
35564: LD_VAR 0 3
35568: PPUSH
35569: LD_VAR 0 4
35573: PPUSH
35574: LD_INT 20
35576: PPUSH
35577: CALL 28292 0 4
35581: PUSH
35582: LD_INT 4
35584: ARRAY
35585: IFFALSE 35589
// exit ;
35587: GO 35638
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35589: LD_VAR 0 2
35593: PUSH
35594: LD_INT 29
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: IN
35604: PUSH
35605: LD_VAR 0 3
35609: PPUSH
35610: LD_VAR 0 4
35614: PPUSH
35615: LD_VAR 0 9
35619: PPUSH
35620: CALL_OW 440
35624: NOT
35625: AND
35626: IFFALSE 35630
// exit ;
35628: GO 35638
// result := true ;
35630: LD_ADDR_VAR 0 6
35634: PUSH
35635: LD_INT 1
35637: ST_TO_ADDR
// end ;
35638: LD_VAR 0 6
35642: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
35643: LD_INT 0
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
// result = [ ] ;
35703: LD_ADDR_VAR 0 7
35707: PUSH
35708: EMPTY
35709: ST_TO_ADDR
// temp_list = [ ] ;
35710: LD_ADDR_VAR 0 9
35714: PUSH
35715: EMPTY
35716: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35717: LD_VAR 0 4
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 3
35733: PUSH
35734: LD_INT 4
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: IN
35748: NOT
35749: PUSH
35750: LD_VAR 0 1
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: IN
35765: PUSH
35766: LD_VAR 0 5
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: IN
35785: NOT
35786: AND
35787: OR
35788: IFFALSE 35792
// exit ;
35790: GO 54183
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35792: LD_VAR 0 1
35796: PUSH
35797: LD_INT 6
35799: PUSH
35800: LD_INT 7
35802: PUSH
35803: LD_INT 8
35805: PUSH
35806: LD_INT 13
35808: PUSH
35809: LD_INT 12
35811: PUSH
35812: LD_INT 15
35814: PUSH
35815: LD_INT 11
35817: PUSH
35818: LD_INT 14
35820: PUSH
35821: LD_INT 10
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: IN
35835: IFFALSE 35845
// btype = b_lab ;
35837: LD_ADDR_VAR 0 1
35841: PUSH
35842: LD_INT 6
35844: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35845: LD_VAR 0 6
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: IN
35864: NOT
35865: PUSH
35866: LD_VAR 0 1
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 6
35885: PUSH
35886: LD_INT 36
35888: PUSH
35889: LD_INT 4
35891: PUSH
35892: LD_INT 5
35894: PUSH
35895: LD_INT 31
35897: PUSH
35898: LD_INT 32
35900: PUSH
35901: LD_INT 33
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: IN
35917: NOT
35918: PUSH
35919: LD_VAR 0 6
35923: PUSH
35924: LD_INT 1
35926: EQUAL
35927: AND
35928: OR
35929: PUSH
35930: LD_VAR 0 1
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: LD_INT 3
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: IN
35945: NOT
35946: PUSH
35947: LD_VAR 0 6
35951: PUSH
35952: LD_INT 2
35954: EQUAL
35955: AND
35956: OR
35957: IFFALSE 35967
// mode = 0 ;
35959: LD_ADDR_VAR 0 6
35963: PUSH
35964: LD_INT 0
35966: ST_TO_ADDR
// case mode of 0 :
35967: LD_VAR 0 6
35971: PUSH
35972: LD_INT 0
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 35980
35978: GO 47433
35980: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35981: LD_ADDR_VAR 0 11
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 3
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 3
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36174: LD_ADDR_VAR 0 12
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 2
36320: NEG
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 3
36331: NEG
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 3
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36370: LD_ADDR_VAR 0 13
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: LD_INT 2
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: LD_INT 3
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 3
36529: NEG
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 3
36541: NEG
36542: PUSH
36543: LD_INT 3
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36569: LD_ADDR_VAR 0 14
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: LD_INT 2
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 3
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36765: LD_ADDR_VAR 0 15
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36958: LD_ADDR_VAR 0 16
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 3
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37151: LD_ADDR_VAR 0 17
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 2
37350: NEG
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37381: LD_ADDR_VAR 0 18
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37611: LD_ADDR_VAR 0 19
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37841: LD_ADDR_VAR 0 20
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38071: LD_ADDR_VAR 0 21
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38301: LD_ADDR_VAR 0 22
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 2
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38531: LD_ADDR_VAR 0 23
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 2
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 3
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: LD_INT 3
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38811: LD_ADDR_VAR 0 24
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 3
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39087: LD_ADDR_VAR 0 25
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 2
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 3
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 3
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39361: LD_ADDR_VAR 0 26
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39637: LD_ADDR_VAR 0 27
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 3
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39917: LD_ADDR_VAR 0 28
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 3
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: NEG
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40199: LD_ADDR_VAR 0 29
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: NEG
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 3
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 3
40443: NEG
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40478: LD_ADDR_VAR 0 30
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 3
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 3
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40756: LD_ADDR_VAR 0 31
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 3
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 3
40999: NEG
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41034: LD_ADDR_VAR 0 32
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 3
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 3
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41312: LD_ADDR_VAR 0 33
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 3
41556: NEG
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41591: LD_ADDR_VAR 0 34
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 3
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 3
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41871: LD_ADDR_VAR 0 35
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41983: LD_ADDR_VAR 0 36
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42095: LD_ADDR_VAR 0 37
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42207: LD_ADDR_VAR 0 38
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42319: LD_ADDR_VAR 0 39
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42431: LD_ADDR_VAR 0 40
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42543: LD_ADDR_VAR 0 41
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: LD_INT 3
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: LD_INT 3
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42893: LD_ADDR_VAR 0 42
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 3
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 3
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: NEG
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: LD_INT 3
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43243: LD_ADDR_VAR 0 43
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43591: LD_ADDR_VAR 0 44
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 3
43865: NEG
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: NEG
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43941: LD_ADDR_VAR 0 45
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 3
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 3
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 3
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44291: LD_ADDR_VAR 0 46
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 3
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 3
44587: NEG
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44639: LD_ADDR_VAR 0 47
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44790: LD_ADDR_VAR 0 48
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44937: LD_ADDR_VAR 0 49
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45081: LD_ADDR_VAR 0 50
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45225: LD_ADDR_VAR 0 51
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45372: LD_ADDR_VAR 0 52
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45523: LD_ADDR_VAR 0 53
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45753: LD_ADDR_VAR 0 54
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45983: LD_ADDR_VAR 0 55
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46213: LD_ADDR_VAR 0 56
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46443: LD_ADDR_VAR 0 57
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46673: LD_ADDR_VAR 0 58
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46903: LD_ADDR_VAR 0 59
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46991: LD_ADDR_VAR 0 60
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47079: LD_ADDR_VAR 0 61
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47167: LD_ADDR_VAR 0 62
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47255: LD_ADDR_VAR 0 63
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47343: LD_ADDR_VAR 0 64
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: ST_TO_ADDR
// end ; 1 :
47431: GO 53328
47433: LD_INT 1
47435: DOUBLE
47436: EQUAL
47437: IFTRUE 47441
47439: GO 50064
47441: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47442: LD_ADDR_VAR 0 11
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47486: LD_ADDR_VAR 0 12
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47527: LD_ADDR_VAR 0 13
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: LD_INT 3
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47567: LD_ADDR_VAR 0 14
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47608: LD_ADDR_VAR 0 15
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47652: LD_ADDR_VAR 0 16
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 3
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: LD_INT 3
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47698: LD_ADDR_VAR 0 17
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47742: LD_ADDR_VAR 0 18
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47783: LD_ADDR_VAR 0 19
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47823: LD_ADDR_VAR 0 20
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47864: LD_ADDR_VAR 0 21
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47908: LD_ADDR_VAR 0 22
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47954: LD_ADDR_VAR 0 23
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 4
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 3
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47998: LD_ADDR_VAR 0 24
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48039: LD_ADDR_VAR 0 25
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 4
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 4
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48079: LD_ADDR_VAR 0 26
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 4
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48120: LD_ADDR_VAR 0 27
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 3
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 4
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48164: LD_ADDR_VAR 0 28
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 3
48183: NEG
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: NEG
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48210: LD_ADDR_VAR 0 29
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 4
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 4
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 3
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 5
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 5
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 4
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 6
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 6
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 5
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48365: LD_ADDR_VAR 0 30
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 4
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 4
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 4
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 5
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 5
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 5
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 6
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 6
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48508: LD_ADDR_VAR 0 31
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 4
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: LD_INT 4
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: LD_INT 4
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 5
48575: PUSH
48576: LD_INT 4
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 5
48585: PUSH
48586: LD_INT 5
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 4
48595: PUSH
48596: LD_INT 5
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 6
48605: PUSH
48606: LD_INT 5
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 6
48615: PUSH
48616: LD_INT 6
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 5
48625: PUSH
48626: LD_INT 6
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48647: LD_ADDR_VAR 0 32
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 3
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 4
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 4
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 5
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 5
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 4
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 6
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 6
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 5
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48790: LD_ADDR_VAR 0 33
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 3
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 3
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 4
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 4
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 4
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 5
48876: NEG
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 5
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 5
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 6
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 6
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48945: LD_ADDR_VAR 0 34
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 3
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 3
48964: NEG
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: LD_INT 3
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: LD_INT 4
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 4
49000: NEG
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 4
49012: NEG
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 4
49024: NEG
49025: PUSH
49026: LD_INT 5
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 5
49036: NEG
49037: PUSH
49038: LD_INT 4
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 5
49048: NEG
49049: PUSH
49050: LD_INT 5
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 5
49060: NEG
49061: PUSH
49062: LD_INT 6
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 6
49072: NEG
49073: PUSH
49074: LD_INT 5
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 6
49084: NEG
49085: PUSH
49086: LD_INT 6
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49108: LD_ADDR_VAR 0 41
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49152: LD_ADDR_VAR 0 42
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 3
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49193: LD_ADDR_VAR 0 43
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49233: LD_ADDR_VAR 0 44
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49274: LD_ADDR_VAR 0 45
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49318: LD_ADDR_VAR 0 46
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49364: LD_ADDR_VAR 0 47
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49397: LD_ADDR_VAR 0 48
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49428: LD_ADDR_VAR 0 49
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49457: LD_ADDR_VAR 0 50
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49486: LD_ADDR_VAR 0 51
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49517: LD_ADDR_VAR 0 52
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: NEG
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49550: LD_ADDR_VAR 0 53
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49594: LD_ADDR_VAR 0 54
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49635: LD_ADDR_VAR 0 55
49639: PUSH
49640: LD_INT 3
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 3
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49675: LD_ADDR_VAR 0 56
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49716: LD_ADDR_VAR 0 57
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49760: LD_ADDR_VAR 0 58
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: LD_INT 3
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 3
49791: NEG
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49806: LD_ADDR_VAR 0 59
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49850: LD_ADDR_VAR 0 60
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49891: LD_ADDR_VAR 0 61
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49931: LD_ADDR_VAR 0 62
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49972: LD_ADDR_VAR 0 63
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50016: LD_ADDR_VAR 0 64
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: ST_TO_ADDR
// end ; 2 :
50062: GO 53328
50064: LD_INT 2
50066: DOUBLE
50067: EQUAL
50068: IFTRUE 50072
50070: GO 53327
50072: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50073: LD_ADDR_VAR 0 29
50077: PUSH
50078: LD_INT 4
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 4
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 5
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 5
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 4
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 5
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 3
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 4
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 4
50203: PUSH
50204: LD_INT 4
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 4
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 4
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 4
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 5
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 5
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 4
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 5
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 4
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: LD_INT 4
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 4
50470: NEG
50471: PUSH
50472: LD_INT 5
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: LD_INT 4
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: LD_INT 3
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 4
50506: NEG
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 5
50518: NEG
50519: PUSH
50520: LD_INT 4
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 5
50530: NEG
50531: PUSH
50532: LD_INT 5
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: LD_INT 5
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50611: LD_ADDR_VAR 0 30
50615: PUSH
50616: LD_INT 4
50618: PUSH
50619: LD_INT 4
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 4
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 5
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 5
50648: PUSH
50649: LD_INT 5
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: LD_INT 5
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 4
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 3
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 5
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: LD_INT 5
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 4
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 4
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 4
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 4
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 4
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 3
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 4
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 5
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 5
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 5
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 3
50903: NEG
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 4
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: LD_INT 3
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 4
50963: NEG
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 4
50975: NEG
50976: PUSH
50977: LD_INT 4
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 4
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 4
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 5
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 4
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 4
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 5
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: LD_INT 5
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51158: LD_ADDR_VAR 0 31
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 5
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 5
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 5
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 4
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 4
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 4
51360: NEG
51361: PUSH
51362: LD_INT 4
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 4
51372: NEG
51373: PUSH
51374: LD_INT 5
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 4
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 4
51408: NEG
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 5
51420: NEG
51421: PUSH
51422: LD_INT 4
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 5
51432: NEG
51433: PUSH
51434: LD_INT 5
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 5
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: NEG
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 4
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 4
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 4
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 4
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 4
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 5
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 4
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 5
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51708: LD_ADDR_VAR 0 32
51712: PUSH
51713: LD_INT 4
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 4
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 4
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 5
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 5
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 5
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: NEG
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: LD_INT 4
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: NEG
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 4
51877: NEG
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 4
51889: NEG
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 4
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 4
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 5
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 4
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 3
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 4
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 5
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 5
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 4
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 4
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 4
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 5
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 5
52150: PUSH
52151: LD_INT 5
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 4
52160: PUSH
52161: LD_INT 5
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 4
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 5
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 5
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52255: LD_ADDR_VAR 0 33
52259: PUSH
52260: LD_INT 4
52262: NEG
52263: PUSH
52264: LD_INT 4
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: NEG
52275: PUSH
52276: LD_INT 5
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: LD_INT 4
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 4
52310: NEG
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 5
52322: NEG
52323: PUSH
52324: LD_INT 4
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 5
52334: NEG
52335: PUSH
52336: LD_INT 5
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: NEG
52347: PUSH
52348: LD_INT 5
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 5
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 4
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 3
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 4
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 4
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 4
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 5
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 5
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 4
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 5
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 4
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 4
52595: PUSH
52596: LD_INT 4
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: LD_INT 4
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 3
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 4
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 4
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 4
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 5
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 5
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 4
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 5
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52793: LD_ADDR_VAR 0 34
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 4
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 5
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 4
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 5
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 5
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 4
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 4
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 4
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 4
52995: PUSH
52996: LD_INT 4
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 4
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 5
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 5
53025: PUSH
53026: LD_INT 5
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 4
53035: PUSH
53036: LD_INT 5
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: LD_INT 4
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 5
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: LD_INT 5
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 3
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 4
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 4
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 4
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 4
53178: NEG
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 4
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 5
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 5
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 5
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// end ; end ;
53325: GO 53328
53327: POP
// case btype of b_depot , b_warehouse :
53328: LD_VAR 0 1
53332: PUSH
53333: LD_INT 0
53335: DOUBLE
53336: EQUAL
53337: IFTRUE 53347
53339: LD_INT 1
53341: DOUBLE
53342: EQUAL
53343: IFTRUE 53347
53345: GO 53548
53347: POP
// case nation of nation_american :
53348: LD_VAR 0 5
53352: PUSH
53353: LD_INT 1
53355: DOUBLE
53356: EQUAL
53357: IFTRUE 53361
53359: GO 53417
53361: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
53362: LD_ADDR_VAR 0 9
53366: PUSH
53367: LD_VAR 0 11
53371: PUSH
53372: LD_VAR 0 12
53376: PUSH
53377: LD_VAR 0 13
53381: PUSH
53382: LD_VAR 0 14
53386: PUSH
53387: LD_VAR 0 15
53391: PUSH
53392: LD_VAR 0 16
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: PUSH
53405: LD_VAR 0 4
53409: PUSH
53410: LD_INT 1
53412: PLUS
53413: ARRAY
53414: ST_TO_ADDR
53415: GO 53546
53417: LD_INT 2
53419: DOUBLE
53420: EQUAL
53421: IFTRUE 53425
53423: GO 53481
53425: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
53426: LD_ADDR_VAR 0 9
53430: PUSH
53431: LD_VAR 0 17
53435: PUSH
53436: LD_VAR 0 18
53440: PUSH
53441: LD_VAR 0 19
53445: PUSH
53446: LD_VAR 0 20
53450: PUSH
53451: LD_VAR 0 21
53455: PUSH
53456: LD_VAR 0 22
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: PUSH
53469: LD_VAR 0 4
53473: PUSH
53474: LD_INT 1
53476: PLUS
53477: ARRAY
53478: ST_TO_ADDR
53479: GO 53546
53481: LD_INT 3
53483: DOUBLE
53484: EQUAL
53485: IFTRUE 53489
53487: GO 53545
53489: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53490: LD_ADDR_VAR 0 9
53494: PUSH
53495: LD_VAR 0 23
53499: PUSH
53500: LD_VAR 0 24
53504: PUSH
53505: LD_VAR 0 25
53509: PUSH
53510: LD_VAR 0 26
53514: PUSH
53515: LD_VAR 0 27
53519: PUSH
53520: LD_VAR 0 28
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: PUSH
53533: LD_VAR 0 4
53537: PUSH
53538: LD_INT 1
53540: PLUS
53541: ARRAY
53542: ST_TO_ADDR
53543: GO 53546
53545: POP
53546: GO 54101
53548: LD_INT 2
53550: DOUBLE
53551: EQUAL
53552: IFTRUE 53562
53554: LD_INT 3
53556: DOUBLE
53557: EQUAL
53558: IFTRUE 53562
53560: GO 53618
53562: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53563: LD_ADDR_VAR 0 9
53567: PUSH
53568: LD_VAR 0 29
53572: PUSH
53573: LD_VAR 0 30
53577: PUSH
53578: LD_VAR 0 31
53582: PUSH
53583: LD_VAR 0 32
53587: PUSH
53588: LD_VAR 0 33
53592: PUSH
53593: LD_VAR 0 34
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: PUSH
53606: LD_VAR 0 4
53610: PUSH
53611: LD_INT 1
53613: PLUS
53614: ARRAY
53615: ST_TO_ADDR
53616: GO 54101
53618: LD_INT 16
53620: DOUBLE
53621: EQUAL
53622: IFTRUE 53680
53624: LD_INT 17
53626: DOUBLE
53627: EQUAL
53628: IFTRUE 53680
53630: LD_INT 18
53632: DOUBLE
53633: EQUAL
53634: IFTRUE 53680
53636: LD_INT 19
53638: DOUBLE
53639: EQUAL
53640: IFTRUE 53680
53642: LD_INT 22
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53680
53648: LD_INT 20
53650: DOUBLE
53651: EQUAL
53652: IFTRUE 53680
53654: LD_INT 21
53656: DOUBLE
53657: EQUAL
53658: IFTRUE 53680
53660: LD_INT 23
53662: DOUBLE
53663: EQUAL
53664: IFTRUE 53680
53666: LD_INT 24
53668: DOUBLE
53669: EQUAL
53670: IFTRUE 53680
53672: LD_INT 25
53674: DOUBLE
53675: EQUAL
53676: IFTRUE 53680
53678: GO 53736
53680: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53681: LD_ADDR_VAR 0 9
53685: PUSH
53686: LD_VAR 0 35
53690: PUSH
53691: LD_VAR 0 36
53695: PUSH
53696: LD_VAR 0 37
53700: PUSH
53701: LD_VAR 0 38
53705: PUSH
53706: LD_VAR 0 39
53710: PUSH
53711: LD_VAR 0 40
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: PUSH
53724: LD_VAR 0 4
53728: PUSH
53729: LD_INT 1
53731: PLUS
53732: ARRAY
53733: ST_TO_ADDR
53734: GO 54101
53736: LD_INT 6
53738: DOUBLE
53739: EQUAL
53740: IFTRUE 53792
53742: LD_INT 7
53744: DOUBLE
53745: EQUAL
53746: IFTRUE 53792
53748: LD_INT 8
53750: DOUBLE
53751: EQUAL
53752: IFTRUE 53792
53754: LD_INT 13
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53792
53760: LD_INT 12
53762: DOUBLE
53763: EQUAL
53764: IFTRUE 53792
53766: LD_INT 15
53768: DOUBLE
53769: EQUAL
53770: IFTRUE 53792
53772: LD_INT 11
53774: DOUBLE
53775: EQUAL
53776: IFTRUE 53792
53778: LD_INT 14
53780: DOUBLE
53781: EQUAL
53782: IFTRUE 53792
53784: LD_INT 10
53786: DOUBLE
53787: EQUAL
53788: IFTRUE 53792
53790: GO 53848
53792: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53793: LD_ADDR_VAR 0 9
53797: PUSH
53798: LD_VAR 0 41
53802: PUSH
53803: LD_VAR 0 42
53807: PUSH
53808: LD_VAR 0 43
53812: PUSH
53813: LD_VAR 0 44
53817: PUSH
53818: LD_VAR 0 45
53822: PUSH
53823: LD_VAR 0 46
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: PUSH
53836: LD_VAR 0 4
53840: PUSH
53841: LD_INT 1
53843: PLUS
53844: ARRAY
53845: ST_TO_ADDR
53846: GO 54101
53848: LD_INT 36
53850: DOUBLE
53851: EQUAL
53852: IFTRUE 53856
53854: GO 53912
53856: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53857: LD_ADDR_VAR 0 9
53861: PUSH
53862: LD_VAR 0 47
53866: PUSH
53867: LD_VAR 0 48
53871: PUSH
53872: LD_VAR 0 49
53876: PUSH
53877: LD_VAR 0 50
53881: PUSH
53882: LD_VAR 0 51
53886: PUSH
53887: LD_VAR 0 52
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: PUSH
53900: LD_VAR 0 4
53904: PUSH
53905: LD_INT 1
53907: PLUS
53908: ARRAY
53909: ST_TO_ADDR
53910: GO 54101
53912: LD_INT 4
53914: DOUBLE
53915: EQUAL
53916: IFTRUE 53938
53918: LD_INT 5
53920: DOUBLE
53921: EQUAL
53922: IFTRUE 53938
53924: LD_INT 34
53926: DOUBLE
53927: EQUAL
53928: IFTRUE 53938
53930: LD_INT 37
53932: DOUBLE
53933: EQUAL
53934: IFTRUE 53938
53936: GO 53994
53938: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53939: LD_ADDR_VAR 0 9
53943: PUSH
53944: LD_VAR 0 53
53948: PUSH
53949: LD_VAR 0 54
53953: PUSH
53954: LD_VAR 0 55
53958: PUSH
53959: LD_VAR 0 56
53963: PUSH
53964: LD_VAR 0 57
53968: PUSH
53969: LD_VAR 0 58
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: PUSH
53982: LD_VAR 0 4
53986: PUSH
53987: LD_INT 1
53989: PLUS
53990: ARRAY
53991: ST_TO_ADDR
53992: GO 54101
53994: LD_INT 31
53996: DOUBLE
53997: EQUAL
53998: IFTRUE 54044
54000: LD_INT 32
54002: DOUBLE
54003: EQUAL
54004: IFTRUE 54044
54006: LD_INT 33
54008: DOUBLE
54009: EQUAL
54010: IFTRUE 54044
54012: LD_INT 27
54014: DOUBLE
54015: EQUAL
54016: IFTRUE 54044
54018: LD_INT 26
54020: DOUBLE
54021: EQUAL
54022: IFTRUE 54044
54024: LD_INT 28
54026: DOUBLE
54027: EQUAL
54028: IFTRUE 54044
54030: LD_INT 29
54032: DOUBLE
54033: EQUAL
54034: IFTRUE 54044
54036: LD_INT 30
54038: DOUBLE
54039: EQUAL
54040: IFTRUE 54044
54042: GO 54100
54044: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54045: LD_ADDR_VAR 0 9
54049: PUSH
54050: LD_VAR 0 59
54054: PUSH
54055: LD_VAR 0 60
54059: PUSH
54060: LD_VAR 0 61
54064: PUSH
54065: LD_VAR 0 62
54069: PUSH
54070: LD_VAR 0 63
54074: PUSH
54075: LD_VAR 0 64
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: PUSH
54088: LD_VAR 0 4
54092: PUSH
54093: LD_INT 1
54095: PLUS
54096: ARRAY
54097: ST_TO_ADDR
54098: GO 54101
54100: POP
// temp_list2 = [ ] ;
54101: LD_ADDR_VAR 0 10
54105: PUSH
54106: EMPTY
54107: ST_TO_ADDR
// for i in temp_list do
54108: LD_ADDR_VAR 0 8
54112: PUSH
54113: LD_VAR 0 9
54117: PUSH
54118: FOR_IN
54119: IFFALSE 54171
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54121: LD_ADDR_VAR 0 10
54125: PUSH
54126: LD_VAR 0 10
54130: PUSH
54131: LD_VAR 0 8
54135: PUSH
54136: LD_INT 1
54138: ARRAY
54139: PUSH
54140: LD_VAR 0 2
54144: PLUS
54145: PUSH
54146: LD_VAR 0 8
54150: PUSH
54151: LD_INT 2
54153: ARRAY
54154: PUSH
54155: LD_VAR 0 3
54159: PLUS
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: ADD
54168: ST_TO_ADDR
54169: GO 54118
54171: POP
54172: POP
// result = temp_list2 ;
54173: LD_ADDR_VAR 0 7
54177: PUSH
54178: LD_VAR 0 10
54182: ST_TO_ADDR
// end ;
54183: LD_VAR 0 7
54187: RET
// export function EnemyInRange ( unit , dist ) ; begin
54188: LD_INT 0
54190: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54191: LD_ADDR_VAR 0 3
54195: PUSH
54196: LD_VAR 0 1
54200: PPUSH
54201: CALL_OW 255
54205: PPUSH
54206: LD_VAR 0 1
54210: PPUSH
54211: CALL_OW 250
54215: PPUSH
54216: LD_VAR 0 1
54220: PPUSH
54221: CALL_OW 251
54225: PPUSH
54226: LD_VAR 0 2
54230: PPUSH
54231: CALL 28292 0 4
54235: PUSH
54236: LD_INT 4
54238: ARRAY
54239: ST_TO_ADDR
// end ;
54240: LD_VAR 0 3
54244: RET
// export function PlayerSeeMe ( unit ) ; begin
54245: LD_INT 0
54247: PPUSH
// result := See ( your_side , unit ) ;
54248: LD_ADDR_VAR 0 2
54252: PUSH
54253: LD_OWVAR 2
54257: PPUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: CALL_OW 292
54267: ST_TO_ADDR
// end ;
54268: LD_VAR 0 2
54272: RET
// export function ReverseDir ( unit ) ; begin
54273: LD_INT 0
54275: PPUSH
// if not unit then
54276: LD_VAR 0 1
54280: NOT
54281: IFFALSE 54285
// exit ;
54283: GO 54308
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54285: LD_ADDR_VAR 0 2
54289: PUSH
54290: LD_VAR 0 1
54294: PPUSH
54295: CALL_OW 254
54299: PUSH
54300: LD_INT 3
54302: PLUS
54303: PUSH
54304: LD_INT 6
54306: MOD
54307: ST_TO_ADDR
// end ;
54308: LD_VAR 0 2
54312: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54313: LD_INT 0
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
54319: PPUSH
// if not hexes then
54320: LD_VAR 0 2
54324: NOT
54325: IFFALSE 54329
// exit ;
54327: GO 54477
// dist := 9999 ;
54329: LD_ADDR_VAR 0 5
54333: PUSH
54334: LD_INT 9999
54336: ST_TO_ADDR
// for i = 1 to hexes do
54337: LD_ADDR_VAR 0 4
54341: PUSH
54342: DOUBLE
54343: LD_INT 1
54345: DEC
54346: ST_TO_ADDR
54347: LD_VAR 0 2
54351: PUSH
54352: FOR_TO
54353: IFFALSE 54465
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54355: LD_VAR 0 1
54359: PPUSH
54360: LD_VAR 0 2
54364: PUSH
54365: LD_VAR 0 4
54369: ARRAY
54370: PUSH
54371: LD_INT 1
54373: ARRAY
54374: PPUSH
54375: LD_VAR 0 2
54379: PUSH
54380: LD_VAR 0 4
54384: ARRAY
54385: PUSH
54386: LD_INT 2
54388: ARRAY
54389: PPUSH
54390: CALL_OW 297
54394: PUSH
54395: LD_VAR 0 5
54399: LESS
54400: IFFALSE 54463
// begin hex := hexes [ i ] ;
54402: LD_ADDR_VAR 0 7
54406: PUSH
54407: LD_VAR 0 2
54411: PUSH
54412: LD_VAR 0 4
54416: ARRAY
54417: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54418: LD_ADDR_VAR 0 5
54422: PUSH
54423: LD_VAR 0 1
54427: PPUSH
54428: LD_VAR 0 2
54432: PUSH
54433: LD_VAR 0 4
54437: ARRAY
54438: PUSH
54439: LD_INT 1
54441: ARRAY
54442: PPUSH
54443: LD_VAR 0 2
54447: PUSH
54448: LD_VAR 0 4
54452: ARRAY
54453: PUSH
54454: LD_INT 2
54456: ARRAY
54457: PPUSH
54458: CALL_OW 297
54462: ST_TO_ADDR
// end ; end ;
54463: GO 54352
54465: POP
54466: POP
// result := hex ;
54467: LD_ADDR_VAR 0 3
54471: PUSH
54472: LD_VAR 0 7
54476: ST_TO_ADDR
// end ;
54477: LD_VAR 0 3
54481: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54482: LD_INT 0
54484: PPUSH
54485: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54486: LD_VAR 0 1
54490: NOT
54491: PUSH
54492: LD_VAR 0 1
54496: PUSH
54497: LD_INT 21
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 23
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PPUSH
54521: CALL_OW 69
54525: IN
54526: NOT
54527: OR
54528: IFFALSE 54532
// exit ;
54530: GO 54579
// for i = 1 to 3 do
54532: LD_ADDR_VAR 0 3
54536: PUSH
54537: DOUBLE
54538: LD_INT 1
54540: DEC
54541: ST_TO_ADDR
54542: LD_INT 3
54544: PUSH
54545: FOR_TO
54546: IFFALSE 54577
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54548: LD_VAR 0 1
54552: PPUSH
54553: CALL_OW 250
54557: PPUSH
54558: LD_VAR 0 1
54562: PPUSH
54563: CALL_OW 251
54567: PPUSH
54568: LD_INT 1
54570: PPUSH
54571: CALL_OW 453
54575: GO 54545
54577: POP
54578: POP
// end ;
54579: LD_VAR 0 2
54583: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54584: LD_INT 0
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54592: LD_VAR 0 1
54596: NOT
54597: PUSH
54598: LD_VAR 0 2
54602: NOT
54603: OR
54604: PUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: CALL_OW 314
54614: OR
54615: IFFALSE 54619
// exit ;
54617: GO 55060
// x := GetX ( enemy_unit ) ;
54619: LD_ADDR_VAR 0 7
54623: PUSH
54624: LD_VAR 0 2
54628: PPUSH
54629: CALL_OW 250
54633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54634: LD_ADDR_VAR 0 8
54638: PUSH
54639: LD_VAR 0 2
54643: PPUSH
54644: CALL_OW 251
54648: ST_TO_ADDR
// if not x or not y then
54649: LD_VAR 0 7
54653: NOT
54654: PUSH
54655: LD_VAR 0 8
54659: NOT
54660: OR
54661: IFFALSE 54665
// exit ;
54663: GO 55060
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54665: LD_ADDR_VAR 0 6
54669: PUSH
54670: LD_VAR 0 7
54674: PPUSH
54675: LD_INT 0
54677: PPUSH
54678: LD_INT 4
54680: PPUSH
54681: CALL_OW 272
54685: PUSH
54686: LD_VAR 0 8
54690: PPUSH
54691: LD_INT 0
54693: PPUSH
54694: LD_INT 4
54696: PPUSH
54697: CALL_OW 273
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_VAR 0 7
54710: PPUSH
54711: LD_INT 1
54713: PPUSH
54714: LD_INT 4
54716: PPUSH
54717: CALL_OW 272
54721: PUSH
54722: LD_VAR 0 8
54726: PPUSH
54727: LD_INT 1
54729: PPUSH
54730: LD_INT 4
54732: PPUSH
54733: CALL_OW 273
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_VAR 0 7
54746: PPUSH
54747: LD_INT 2
54749: PPUSH
54750: LD_INT 4
54752: PPUSH
54753: CALL_OW 272
54757: PUSH
54758: LD_VAR 0 8
54762: PPUSH
54763: LD_INT 2
54765: PPUSH
54766: LD_INT 4
54768: PPUSH
54769: CALL_OW 273
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_VAR 0 7
54782: PPUSH
54783: LD_INT 3
54785: PPUSH
54786: LD_INT 4
54788: PPUSH
54789: CALL_OW 272
54793: PUSH
54794: LD_VAR 0 8
54798: PPUSH
54799: LD_INT 3
54801: PPUSH
54802: LD_INT 4
54804: PPUSH
54805: CALL_OW 273
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_VAR 0 7
54818: PPUSH
54819: LD_INT 4
54821: PPUSH
54822: LD_INT 4
54824: PPUSH
54825: CALL_OW 272
54829: PUSH
54830: LD_VAR 0 8
54834: PPUSH
54835: LD_INT 4
54837: PPUSH
54838: LD_INT 4
54840: PPUSH
54841: CALL_OW 273
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_VAR 0 7
54854: PPUSH
54855: LD_INT 5
54857: PPUSH
54858: LD_INT 4
54860: PPUSH
54861: CALL_OW 272
54865: PUSH
54866: LD_VAR 0 8
54870: PPUSH
54871: LD_INT 5
54873: PPUSH
54874: LD_INT 4
54876: PPUSH
54877: CALL_OW 273
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// for i = tmp downto 1 do
54894: LD_ADDR_VAR 0 4
54898: PUSH
54899: DOUBLE
54900: LD_VAR 0 6
54904: INC
54905: ST_TO_ADDR
54906: LD_INT 1
54908: PUSH
54909: FOR_DOWNTO
54910: IFFALSE 55011
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54912: LD_VAR 0 6
54916: PUSH
54917: LD_VAR 0 4
54921: ARRAY
54922: PUSH
54923: LD_INT 1
54925: ARRAY
54926: PPUSH
54927: LD_VAR 0 6
54931: PUSH
54932: LD_VAR 0 4
54936: ARRAY
54937: PUSH
54938: LD_INT 2
54940: ARRAY
54941: PPUSH
54942: CALL_OW 488
54946: NOT
54947: PUSH
54948: LD_VAR 0 6
54952: PUSH
54953: LD_VAR 0 4
54957: ARRAY
54958: PUSH
54959: LD_INT 1
54961: ARRAY
54962: PPUSH
54963: LD_VAR 0 6
54967: PUSH
54968: LD_VAR 0 4
54972: ARRAY
54973: PUSH
54974: LD_INT 2
54976: ARRAY
54977: PPUSH
54978: CALL_OW 428
54982: PUSH
54983: LD_INT 0
54985: NONEQUAL
54986: OR
54987: IFFALSE 55009
// tmp := Delete ( tmp , i ) ;
54989: LD_ADDR_VAR 0 6
54993: PUSH
54994: LD_VAR 0 6
54998: PPUSH
54999: LD_VAR 0 4
55003: PPUSH
55004: CALL_OW 3
55008: ST_TO_ADDR
55009: GO 54909
55011: POP
55012: POP
// j := GetClosestHex ( unit , tmp ) ;
55013: LD_ADDR_VAR 0 5
55017: PUSH
55018: LD_VAR 0 1
55022: PPUSH
55023: LD_VAR 0 6
55027: PPUSH
55028: CALL 54313 0 2
55032: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55033: LD_VAR 0 1
55037: PPUSH
55038: LD_VAR 0 5
55042: PUSH
55043: LD_INT 1
55045: ARRAY
55046: PPUSH
55047: LD_VAR 0 5
55051: PUSH
55052: LD_INT 2
55054: ARRAY
55055: PPUSH
55056: CALL_OW 111
// end ;
55060: LD_VAR 0 3
55064: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55065: LD_INT 0
55067: PPUSH
55068: PPUSH
55069: PPUSH
// uc_side = 0 ;
55070: LD_ADDR_OWVAR 20
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
// uc_nation = 0 ;
55078: LD_ADDR_OWVAR 21
55082: PUSH
55083: LD_INT 0
55085: ST_TO_ADDR
// InitHc ;
55086: CALL_OW 19
// InitVc ;
55090: CALL_OW 20
// if mastodonts then
55094: LD_VAR 0 6
55098: IFFALSE 55165
// for i = 1 to mastodonts do
55100: LD_ADDR_VAR 0 11
55104: PUSH
55105: DOUBLE
55106: LD_INT 1
55108: DEC
55109: ST_TO_ADDR
55110: LD_VAR 0 6
55114: PUSH
55115: FOR_TO
55116: IFFALSE 55163
// begin vc_chassis := 31 ;
55118: LD_ADDR_OWVAR 37
55122: PUSH
55123: LD_INT 31
55125: ST_TO_ADDR
// vc_control := control_rider ;
55126: LD_ADDR_OWVAR 38
55130: PUSH
55131: LD_INT 4
55133: ST_TO_ADDR
// animal := CreateVehicle ;
55134: LD_ADDR_VAR 0 12
55138: PUSH
55139: CALL_OW 45
55143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55144: LD_VAR 0 12
55148: PPUSH
55149: LD_VAR 0 8
55153: PPUSH
55154: LD_INT 0
55156: PPUSH
55157: CALL 57234 0 3
// end ;
55161: GO 55115
55163: POP
55164: POP
// if horses then
55165: LD_VAR 0 5
55169: IFFALSE 55236
// for i = 1 to horses do
55171: LD_ADDR_VAR 0 11
55175: PUSH
55176: DOUBLE
55177: LD_INT 1
55179: DEC
55180: ST_TO_ADDR
55181: LD_VAR 0 5
55185: PUSH
55186: FOR_TO
55187: IFFALSE 55234
// begin hc_class := 21 ;
55189: LD_ADDR_OWVAR 28
55193: PUSH
55194: LD_INT 21
55196: ST_TO_ADDR
// hc_gallery :=  ;
55197: LD_ADDR_OWVAR 33
55201: PUSH
55202: LD_STRING 
55204: ST_TO_ADDR
// animal := CreateHuman ;
55205: LD_ADDR_VAR 0 12
55209: PUSH
55210: CALL_OW 44
55214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55215: LD_VAR 0 12
55219: PPUSH
55220: LD_VAR 0 8
55224: PPUSH
55225: LD_INT 0
55227: PPUSH
55228: CALL 57234 0 3
// end ;
55232: GO 55186
55234: POP
55235: POP
// if birds then
55236: LD_VAR 0 1
55240: IFFALSE 55307
// for i = 1 to birds do
55242: LD_ADDR_VAR 0 11
55246: PUSH
55247: DOUBLE
55248: LD_INT 1
55250: DEC
55251: ST_TO_ADDR
55252: LD_VAR 0 1
55256: PUSH
55257: FOR_TO
55258: IFFALSE 55305
// begin hc_class = 18 ;
55260: LD_ADDR_OWVAR 28
55264: PUSH
55265: LD_INT 18
55267: ST_TO_ADDR
// hc_gallery =  ;
55268: LD_ADDR_OWVAR 33
55272: PUSH
55273: LD_STRING 
55275: ST_TO_ADDR
// animal := CreateHuman ;
55276: LD_ADDR_VAR 0 12
55280: PUSH
55281: CALL_OW 44
55285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55286: LD_VAR 0 12
55290: PPUSH
55291: LD_VAR 0 8
55295: PPUSH
55296: LD_INT 0
55298: PPUSH
55299: CALL 57234 0 3
// end ;
55303: GO 55257
55305: POP
55306: POP
// if tigers then
55307: LD_VAR 0 2
55311: IFFALSE 55395
// for i = 1 to tigers do
55313: LD_ADDR_VAR 0 11
55317: PUSH
55318: DOUBLE
55319: LD_INT 1
55321: DEC
55322: ST_TO_ADDR
55323: LD_VAR 0 2
55327: PUSH
55328: FOR_TO
55329: IFFALSE 55393
// begin hc_class = class_tiger ;
55331: LD_ADDR_OWVAR 28
55335: PUSH
55336: LD_INT 14
55338: ST_TO_ADDR
// hc_gallery =  ;
55339: LD_ADDR_OWVAR 33
55343: PUSH
55344: LD_STRING 
55346: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55347: LD_ADDR_OWVAR 35
55351: PUSH
55352: LD_INT 7
55354: NEG
55355: PPUSH
55356: LD_INT 7
55358: PPUSH
55359: CALL_OW 12
55363: ST_TO_ADDR
// animal := CreateHuman ;
55364: LD_ADDR_VAR 0 12
55368: PUSH
55369: CALL_OW 44
55373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55374: LD_VAR 0 12
55378: PPUSH
55379: LD_VAR 0 8
55383: PPUSH
55384: LD_INT 0
55386: PPUSH
55387: CALL 57234 0 3
// end ;
55391: GO 55328
55393: POP
55394: POP
// if apemans then
55395: LD_VAR 0 3
55399: IFFALSE 55522
// for i = 1 to apemans do
55401: LD_ADDR_VAR 0 11
55405: PUSH
55406: DOUBLE
55407: LD_INT 1
55409: DEC
55410: ST_TO_ADDR
55411: LD_VAR 0 3
55415: PUSH
55416: FOR_TO
55417: IFFALSE 55520
// begin hc_class = class_apeman ;
55419: LD_ADDR_OWVAR 28
55423: PUSH
55424: LD_INT 12
55426: ST_TO_ADDR
// hc_gallery =  ;
55427: LD_ADDR_OWVAR 33
55431: PUSH
55432: LD_STRING 
55434: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55435: LD_ADDR_OWVAR 35
55439: PUSH
55440: LD_INT 5
55442: NEG
55443: PPUSH
55444: LD_INT 5
55446: PPUSH
55447: CALL_OW 12
55451: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55452: LD_ADDR_OWVAR 31
55456: PUSH
55457: LD_INT 1
55459: PPUSH
55460: LD_INT 3
55462: PPUSH
55463: CALL_OW 12
55467: PUSH
55468: LD_INT 1
55470: PPUSH
55471: LD_INT 3
55473: PPUSH
55474: CALL_OW 12
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// animal := CreateHuman ;
55491: LD_ADDR_VAR 0 12
55495: PUSH
55496: CALL_OW 44
55500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55501: LD_VAR 0 12
55505: PPUSH
55506: LD_VAR 0 8
55510: PPUSH
55511: LD_INT 0
55513: PPUSH
55514: CALL 57234 0 3
// end ;
55518: GO 55416
55520: POP
55521: POP
// if enchidnas then
55522: LD_VAR 0 4
55526: IFFALSE 55593
// for i = 1 to enchidnas do
55528: LD_ADDR_VAR 0 11
55532: PUSH
55533: DOUBLE
55534: LD_INT 1
55536: DEC
55537: ST_TO_ADDR
55538: LD_VAR 0 4
55542: PUSH
55543: FOR_TO
55544: IFFALSE 55591
// begin hc_class = 13 ;
55546: LD_ADDR_OWVAR 28
55550: PUSH
55551: LD_INT 13
55553: ST_TO_ADDR
// hc_gallery =  ;
55554: LD_ADDR_OWVAR 33
55558: PUSH
55559: LD_STRING 
55561: ST_TO_ADDR
// animal := CreateHuman ;
55562: LD_ADDR_VAR 0 12
55566: PUSH
55567: CALL_OW 44
55571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55572: LD_VAR 0 12
55576: PPUSH
55577: LD_VAR 0 8
55581: PPUSH
55582: LD_INT 0
55584: PPUSH
55585: CALL 57234 0 3
// end ;
55589: GO 55543
55591: POP
55592: POP
// if fishes then
55593: LD_VAR 0 7
55597: IFFALSE 55664
// for i = 1 to fishes do
55599: LD_ADDR_VAR 0 11
55603: PUSH
55604: DOUBLE
55605: LD_INT 1
55607: DEC
55608: ST_TO_ADDR
55609: LD_VAR 0 7
55613: PUSH
55614: FOR_TO
55615: IFFALSE 55662
// begin hc_class = 20 ;
55617: LD_ADDR_OWVAR 28
55621: PUSH
55622: LD_INT 20
55624: ST_TO_ADDR
// hc_gallery =  ;
55625: LD_ADDR_OWVAR 33
55629: PUSH
55630: LD_STRING 
55632: ST_TO_ADDR
// animal := CreateHuman ;
55633: LD_ADDR_VAR 0 12
55637: PUSH
55638: CALL_OW 44
55642: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55643: LD_VAR 0 12
55647: PPUSH
55648: LD_VAR 0 9
55652: PPUSH
55653: LD_INT 0
55655: PPUSH
55656: CALL 57234 0 3
// end ;
55660: GO 55614
55662: POP
55663: POP
// end ;
55664: LD_VAR 0 10
55668: RET
// export function WantHeal ( sci , unit ) ; begin
55669: LD_INT 0
55671: PPUSH
// if GetTaskList ( sci ) > 0 then
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL_OW 437
55681: PUSH
55682: LD_INT 0
55684: GREATER
55685: IFFALSE 55755
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55687: LD_VAR 0 1
55691: PPUSH
55692: CALL_OW 437
55696: PUSH
55697: LD_INT 1
55699: ARRAY
55700: PUSH
55701: LD_INT 1
55703: ARRAY
55704: PUSH
55705: LD_STRING l
55707: EQUAL
55708: PUSH
55709: LD_VAR 0 1
55713: PPUSH
55714: CALL_OW 437
55718: PUSH
55719: LD_INT 1
55721: ARRAY
55722: PUSH
55723: LD_INT 4
55725: ARRAY
55726: PUSH
55727: LD_VAR 0 2
55731: EQUAL
55732: AND
55733: IFFALSE 55745
// result := true else
55735: LD_ADDR_VAR 0 3
55739: PUSH
55740: LD_INT 1
55742: ST_TO_ADDR
55743: GO 55753
// result := false ;
55745: LD_ADDR_VAR 0 3
55749: PUSH
55750: LD_INT 0
55752: ST_TO_ADDR
// end else
55753: GO 55763
// result := false ;
55755: LD_ADDR_VAR 0 3
55759: PUSH
55760: LD_INT 0
55762: ST_TO_ADDR
// end ;
55763: LD_VAR 0 3
55767: RET
// export function HealTarget ( sci ) ; begin
55768: LD_INT 0
55770: PPUSH
// if not sci then
55771: LD_VAR 0 1
55775: NOT
55776: IFFALSE 55780
// exit ;
55778: GO 55845
// result := 0 ;
55780: LD_ADDR_VAR 0 2
55784: PUSH
55785: LD_INT 0
55787: ST_TO_ADDR
// if GetTaskList ( sci ) then
55788: LD_VAR 0 1
55792: PPUSH
55793: CALL_OW 437
55797: IFFALSE 55845
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55799: LD_VAR 0 1
55803: PPUSH
55804: CALL_OW 437
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PUSH
55813: LD_INT 1
55815: ARRAY
55816: PUSH
55817: LD_STRING l
55819: EQUAL
55820: IFFALSE 55845
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55822: LD_ADDR_VAR 0 2
55826: PUSH
55827: LD_VAR 0 1
55831: PPUSH
55832: CALL_OW 437
55836: PUSH
55837: LD_INT 1
55839: ARRAY
55840: PUSH
55841: LD_INT 4
55843: ARRAY
55844: ST_TO_ADDR
// end ;
55845: LD_VAR 0 2
55849: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55850: LD_INT 0
55852: PPUSH
55853: PPUSH
55854: PPUSH
55855: PPUSH
// if not base_units then
55856: LD_VAR 0 1
55860: NOT
55861: IFFALSE 55865
// exit ;
55863: GO 55952
// result := false ;
55865: LD_ADDR_VAR 0 2
55869: PUSH
55870: LD_INT 0
55872: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55873: LD_ADDR_VAR 0 5
55877: PUSH
55878: LD_VAR 0 1
55882: PPUSH
55883: LD_INT 21
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PPUSH
55893: CALL_OW 72
55897: ST_TO_ADDR
// if not tmp then
55898: LD_VAR 0 5
55902: NOT
55903: IFFALSE 55907
// exit ;
55905: GO 55952
// for i in tmp do
55907: LD_ADDR_VAR 0 3
55911: PUSH
55912: LD_VAR 0 5
55916: PUSH
55917: FOR_IN
55918: IFFALSE 55950
// begin result := EnemyInRange ( i , 22 ) ;
55920: LD_ADDR_VAR 0 2
55924: PUSH
55925: LD_VAR 0 3
55929: PPUSH
55930: LD_INT 22
55932: PPUSH
55933: CALL 54188 0 2
55937: ST_TO_ADDR
// if result then
55938: LD_VAR 0 2
55942: IFFALSE 55948
// exit ;
55944: POP
55945: POP
55946: GO 55952
// end ;
55948: GO 55917
55950: POP
55951: POP
// end ;
55952: LD_VAR 0 2
55956: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55957: LD_INT 0
55959: PPUSH
55960: PPUSH
// if not units then
55961: LD_VAR 0 1
55965: NOT
55966: IFFALSE 55970
// exit ;
55968: GO 56040
// result := [ ] ;
55970: LD_ADDR_VAR 0 3
55974: PUSH
55975: EMPTY
55976: ST_TO_ADDR
// for i in units do
55977: LD_ADDR_VAR 0 4
55981: PUSH
55982: LD_VAR 0 1
55986: PUSH
55987: FOR_IN
55988: IFFALSE 56038
// if GetTag ( i ) = tag then
55990: LD_VAR 0 4
55994: PPUSH
55995: CALL_OW 110
55999: PUSH
56000: LD_VAR 0 2
56004: EQUAL
56005: IFFALSE 56036
// result := Insert ( result , result + 1 , i ) ;
56007: LD_ADDR_VAR 0 3
56011: PUSH
56012: LD_VAR 0 3
56016: PPUSH
56017: LD_VAR 0 3
56021: PUSH
56022: LD_INT 1
56024: PLUS
56025: PPUSH
56026: LD_VAR 0 4
56030: PPUSH
56031: CALL_OW 2
56035: ST_TO_ADDR
56036: GO 55987
56038: POP
56039: POP
// end ;
56040: LD_VAR 0 3
56044: RET
// export function IsDriver ( un ) ; begin
56045: LD_INT 0
56047: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56048: LD_ADDR_VAR 0 2
56052: PUSH
56053: LD_VAR 0 1
56057: PUSH
56058: LD_INT 55
56060: PUSH
56061: EMPTY
56062: LIST
56063: PPUSH
56064: CALL_OW 69
56068: IN
56069: ST_TO_ADDR
// end ;
56070: LD_VAR 0 2
56074: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56075: LD_INT 0
56077: PPUSH
56078: PPUSH
// list := [ ] ;
56079: LD_ADDR_VAR 0 5
56083: PUSH
56084: EMPTY
56085: ST_TO_ADDR
// case d of 0 :
56086: LD_VAR 0 3
56090: PUSH
56091: LD_INT 0
56093: DOUBLE
56094: EQUAL
56095: IFTRUE 56099
56097: GO 56232
56099: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56100: LD_ADDR_VAR 0 5
56104: PUSH
56105: LD_VAR 0 1
56109: PUSH
56110: LD_INT 4
56112: MINUS
56113: PUSH
56114: LD_VAR 0 2
56118: PUSH
56119: LD_INT 4
56121: MINUS
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: PUSH
56131: LD_VAR 0 1
56135: PUSH
56136: LD_INT 3
56138: MINUS
56139: PUSH
56140: LD_VAR 0 2
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: PUSH
56153: LD_VAR 0 1
56157: PUSH
56158: LD_INT 4
56160: PLUS
56161: PUSH
56162: LD_VAR 0 2
56166: PUSH
56167: LD_INT 4
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: PUSH
56175: LD_VAR 0 1
56179: PUSH
56180: LD_INT 3
56182: PLUS
56183: PUSH
56184: LD_VAR 0 2
56188: PUSH
56189: LD_INT 3
56191: PLUS
56192: PUSH
56193: LD_INT 5
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: PUSH
56201: LD_VAR 0 1
56205: PUSH
56206: LD_VAR 0 2
56210: PUSH
56211: LD_INT 4
56213: PLUS
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// end ; 1 :
56230: GO 56930
56232: LD_INT 1
56234: DOUBLE
56235: EQUAL
56236: IFTRUE 56240
56238: GO 56373
56240: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56241: LD_ADDR_VAR 0 5
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: LD_VAR 0 2
56255: PUSH
56256: LD_INT 4
56258: MINUS
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: PUSH
56268: LD_VAR 0 1
56272: PUSH
56273: LD_INT 3
56275: MINUS
56276: PUSH
56277: LD_VAR 0 2
56281: PUSH
56282: LD_INT 3
56284: MINUS
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: PUSH
56294: LD_VAR 0 1
56298: PUSH
56299: LD_INT 4
56301: MINUS
56302: PUSH
56303: LD_VAR 0 2
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: PUSH
56316: LD_VAR 0 1
56320: PUSH
56321: LD_VAR 0 2
56325: PUSH
56326: LD_INT 3
56328: PLUS
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: PUSH
56338: LD_VAR 0 1
56342: PUSH
56343: LD_INT 4
56345: PLUS
56346: PUSH
56347: LD_VAR 0 2
56351: PUSH
56352: LD_INT 4
56354: PLUS
56355: PUSH
56356: LD_INT 5
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// end ; 2 :
56371: GO 56930
56373: LD_INT 2
56375: DOUBLE
56376: EQUAL
56377: IFTRUE 56381
56379: GO 56510
56381: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56382: LD_ADDR_VAR 0 5
56386: PUSH
56387: LD_VAR 0 1
56391: PUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_INT 3
56399: MINUS
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_INT 4
56416: PLUS
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 4
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: PUSH
56431: LD_VAR 0 1
56435: PUSH
56436: LD_VAR 0 2
56440: PUSH
56441: LD_INT 4
56443: PLUS
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: PUSH
56453: LD_VAR 0 1
56457: PUSH
56458: LD_INT 3
56460: MINUS
56461: PUSH
56462: LD_VAR 0 2
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: PUSH
56475: LD_VAR 0 1
56479: PUSH
56480: LD_INT 4
56482: MINUS
56483: PUSH
56484: LD_VAR 0 2
56488: PUSH
56489: LD_INT 4
56491: MINUS
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: ST_TO_ADDR
// end ; 3 :
56508: GO 56930
56510: LD_INT 3
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56518
56516: GO 56651
56518: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56519: LD_ADDR_VAR 0 5
56523: PUSH
56524: LD_VAR 0 1
56528: PUSH
56529: LD_INT 3
56531: PLUS
56532: PUSH
56533: LD_VAR 0 2
56537: PUSH
56538: LD_INT 4
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: LIST
56545: PUSH
56546: LD_VAR 0 1
56550: PUSH
56551: LD_INT 4
56553: PLUS
56554: PUSH
56555: LD_VAR 0 2
56559: PUSH
56560: LD_INT 4
56562: PLUS
56563: PUSH
56564: LD_INT 5
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: PUSH
56572: LD_VAR 0 1
56576: PUSH
56577: LD_INT 4
56579: MINUS
56580: PUSH
56581: LD_VAR 0 2
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: PUSH
56594: LD_VAR 0 1
56598: PUSH
56599: LD_VAR 0 2
56603: PUSH
56604: LD_INT 4
56606: MINUS
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: PUSH
56616: LD_VAR 0 1
56620: PUSH
56621: LD_INT 3
56623: MINUS
56624: PUSH
56625: LD_VAR 0 2
56629: PUSH
56630: LD_INT 3
56632: MINUS
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// end ; 4 :
56649: GO 56930
56651: LD_INT 4
56653: DOUBLE
56654: EQUAL
56655: IFTRUE 56659
56657: GO 56792
56659: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56660: LD_ADDR_VAR 0 5
56664: PUSH
56665: LD_VAR 0 1
56669: PUSH
56670: LD_VAR 0 2
56674: PUSH
56675: LD_INT 4
56677: PLUS
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: PUSH
56687: LD_VAR 0 1
56691: PUSH
56692: LD_INT 3
56694: PLUS
56695: PUSH
56696: LD_VAR 0 2
56700: PUSH
56701: LD_INT 3
56703: PLUS
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: PUSH
56713: LD_VAR 0 1
56717: PUSH
56718: LD_INT 4
56720: PLUS
56721: PUSH
56722: LD_VAR 0 2
56726: PUSH
56727: LD_INT 4
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: PUSH
56735: LD_VAR 0 1
56739: PUSH
56740: LD_VAR 0 2
56744: PUSH
56745: LD_INT 3
56747: MINUS
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: PUSH
56757: LD_VAR 0 1
56761: PUSH
56762: LD_INT 4
56764: MINUS
56765: PUSH
56766: LD_VAR 0 2
56770: PUSH
56771: LD_INT 4
56773: MINUS
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// end ; 5 :
56790: GO 56930
56792: LD_INT 5
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56800
56798: GO 56929
56800: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56801: LD_ADDR_VAR 0 5
56805: PUSH
56806: LD_VAR 0 1
56810: PUSH
56811: LD_INT 4
56813: MINUS
56814: PUSH
56815: LD_VAR 0 2
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_VAR 0 2
56837: PUSH
56838: LD_INT 4
56840: MINUS
56841: PUSH
56842: LD_INT 3
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: PUSH
56850: LD_VAR 0 1
56854: PUSH
56855: LD_INT 4
56857: PLUS
56858: PUSH
56859: LD_VAR 0 2
56863: PUSH
56864: LD_INT 4
56866: PLUS
56867: PUSH
56868: LD_INT 5
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_INT 3
56883: PLUS
56884: PUSH
56885: LD_VAR 0 2
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 1
56902: PUSH
56903: LD_VAR 0 2
56907: PUSH
56908: LD_INT 3
56910: PLUS
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// end ; end ;
56927: GO 56930
56929: POP
// result := list ;
56930: LD_ADDR_VAR 0 4
56934: PUSH
56935: LD_VAR 0 5
56939: ST_TO_ADDR
// end ;
56940: LD_VAR 0 4
56944: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56945: LD_INT 0
56947: PPUSH
56948: PPUSH
56949: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56950: LD_VAR 0 1
56954: NOT
56955: PUSH
56956: LD_VAR 0 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 4
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: IN
56979: NOT
56980: OR
56981: IFFALSE 56985
// exit ;
56983: GO 57077
// tmp := [ ] ;
56985: LD_ADDR_VAR 0 5
56989: PUSH
56990: EMPTY
56991: ST_TO_ADDR
// for i in units do
56992: LD_ADDR_VAR 0 4
56996: PUSH
56997: LD_VAR 0 1
57001: PUSH
57002: FOR_IN
57003: IFFALSE 57046
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57005: LD_ADDR_VAR 0 5
57009: PUSH
57010: LD_VAR 0 5
57014: PPUSH
57015: LD_VAR 0 5
57019: PUSH
57020: LD_INT 1
57022: PLUS
57023: PPUSH
57024: LD_VAR 0 4
57028: PPUSH
57029: LD_VAR 0 2
57033: PPUSH
57034: CALL_OW 259
57038: PPUSH
57039: CALL_OW 2
57043: ST_TO_ADDR
57044: GO 57002
57046: POP
57047: POP
// if not tmp then
57048: LD_VAR 0 5
57052: NOT
57053: IFFALSE 57057
// exit ;
57055: GO 57077
// result := SortListByListDesc ( units , tmp ) ;
57057: LD_ADDR_VAR 0 3
57061: PUSH
57062: LD_VAR 0 1
57066: PPUSH
57067: LD_VAR 0 5
57071: PPUSH
57072: CALL_OW 77
57076: ST_TO_ADDR
// end ;
57077: LD_VAR 0 3
57081: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57082: LD_INT 0
57084: PPUSH
57085: PPUSH
57086: PPUSH
// x := GetX ( building ) ;
57087: LD_ADDR_VAR 0 4
57091: PUSH
57092: LD_VAR 0 2
57096: PPUSH
57097: CALL_OW 250
57101: ST_TO_ADDR
// y := GetY ( building ) ;
57102: LD_ADDR_VAR 0 5
57106: PUSH
57107: LD_VAR 0 2
57111: PPUSH
57112: CALL_OW 251
57116: ST_TO_ADDR
// if GetTaskList ( unit ) then
57117: LD_VAR 0 1
57121: PPUSH
57122: CALL_OW 437
57126: IFFALSE 57221
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57128: LD_STRING e
57130: PUSH
57131: LD_VAR 0 1
57135: PPUSH
57136: CALL_OW 437
57140: PUSH
57141: LD_INT 1
57143: ARRAY
57144: PUSH
57145: LD_INT 1
57147: ARRAY
57148: EQUAL
57149: PUSH
57150: LD_VAR 0 4
57154: PUSH
57155: LD_VAR 0 1
57159: PPUSH
57160: CALL_OW 437
57164: PUSH
57165: LD_INT 1
57167: ARRAY
57168: PUSH
57169: LD_INT 2
57171: ARRAY
57172: EQUAL
57173: AND
57174: PUSH
57175: LD_VAR 0 5
57179: PUSH
57180: LD_VAR 0 1
57184: PPUSH
57185: CALL_OW 437
57189: PUSH
57190: LD_INT 1
57192: ARRAY
57193: PUSH
57194: LD_INT 3
57196: ARRAY
57197: EQUAL
57198: AND
57199: IFFALSE 57211
// result := true else
57201: LD_ADDR_VAR 0 3
57205: PUSH
57206: LD_INT 1
57208: ST_TO_ADDR
57209: GO 57219
// result := false ;
57211: LD_ADDR_VAR 0 3
57215: PUSH
57216: LD_INT 0
57218: ST_TO_ADDR
// end else
57219: GO 57229
// result := false ;
57221: LD_ADDR_VAR 0 3
57225: PUSH
57226: LD_INT 0
57228: ST_TO_ADDR
// end ;
57229: LD_VAR 0 3
57233: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57234: LD_INT 0
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
// if not unit or not area then
57240: LD_VAR 0 1
57244: NOT
57245: PUSH
57246: LD_VAR 0 2
57250: NOT
57251: OR
57252: IFFALSE 57256
// exit ;
57254: GO 57420
// tmp := AreaToList ( area , i ) ;
57256: LD_ADDR_VAR 0 6
57260: PUSH
57261: LD_VAR 0 2
57265: PPUSH
57266: LD_VAR 0 5
57270: PPUSH
57271: CALL_OW 517
57275: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57276: LD_ADDR_VAR 0 5
57280: PUSH
57281: DOUBLE
57282: LD_INT 1
57284: DEC
57285: ST_TO_ADDR
57286: LD_VAR 0 6
57290: PUSH
57291: LD_INT 1
57293: ARRAY
57294: PUSH
57295: FOR_TO
57296: IFFALSE 57418
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57298: LD_ADDR_VAR 0 7
57302: PUSH
57303: LD_VAR 0 6
57307: PUSH
57308: LD_INT 1
57310: ARRAY
57311: PUSH
57312: LD_VAR 0 5
57316: ARRAY
57317: PUSH
57318: LD_VAR 0 6
57322: PUSH
57323: LD_INT 2
57325: ARRAY
57326: PUSH
57327: LD_VAR 0 5
57331: ARRAY
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57337: LD_VAR 0 7
57341: PUSH
57342: LD_INT 1
57344: ARRAY
57345: PPUSH
57346: LD_VAR 0 7
57350: PUSH
57351: LD_INT 2
57353: ARRAY
57354: PPUSH
57355: CALL_OW 428
57359: PUSH
57360: LD_INT 0
57362: EQUAL
57363: IFFALSE 57416
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57365: LD_VAR 0 1
57369: PPUSH
57370: LD_VAR 0 7
57374: PUSH
57375: LD_INT 1
57377: ARRAY
57378: PPUSH
57379: LD_VAR 0 7
57383: PUSH
57384: LD_INT 2
57386: ARRAY
57387: PPUSH
57388: LD_VAR 0 3
57392: PPUSH
57393: CALL_OW 48
// result := IsPlaced ( unit ) ;
57397: LD_ADDR_VAR 0 4
57401: PUSH
57402: LD_VAR 0 1
57406: PPUSH
57407: CALL_OW 305
57411: ST_TO_ADDR
// exit ;
57412: POP
57413: POP
57414: GO 57420
// end ; end ;
57416: GO 57295
57418: POP
57419: POP
// end ;
57420: LD_VAR 0 4
57424: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57425: LD_INT 0
57427: PPUSH
57428: PPUSH
57429: PPUSH
// if not side or side > 8 then
57430: LD_VAR 0 1
57434: NOT
57435: PUSH
57436: LD_VAR 0 1
57440: PUSH
57441: LD_INT 8
57443: GREATER
57444: OR
57445: IFFALSE 57449
// exit ;
57447: GO 57636
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57449: LD_ADDR_VAR 0 4
57453: PUSH
57454: LD_INT 22
57456: PUSH
57457: LD_VAR 0 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 21
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PPUSH
57480: CALL_OW 69
57484: ST_TO_ADDR
// if not tmp then
57485: LD_VAR 0 4
57489: NOT
57490: IFFALSE 57494
// exit ;
57492: GO 57636
// enable_addtolog := true ;
57494: LD_ADDR_OWVAR 81
57498: PUSH
57499: LD_INT 1
57501: ST_TO_ADDR
// AddToLog ( [ ) ;
57502: LD_STRING [
57504: PPUSH
57505: CALL_OW 561
// for i in tmp do
57509: LD_ADDR_VAR 0 3
57513: PUSH
57514: LD_VAR 0 4
57518: PUSH
57519: FOR_IN
57520: IFFALSE 57627
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57522: LD_STRING [
57524: PUSH
57525: LD_VAR 0 3
57529: PPUSH
57530: CALL_OW 266
57534: STR
57535: PUSH
57536: LD_STRING , 
57538: STR
57539: PUSH
57540: LD_VAR 0 3
57544: PPUSH
57545: CALL_OW 250
57549: STR
57550: PUSH
57551: LD_STRING , 
57553: STR
57554: PUSH
57555: LD_VAR 0 3
57559: PPUSH
57560: CALL_OW 251
57564: STR
57565: PUSH
57566: LD_STRING , 
57568: STR
57569: PUSH
57570: LD_VAR 0 3
57574: PPUSH
57575: CALL_OW 254
57579: STR
57580: PUSH
57581: LD_STRING , 
57583: STR
57584: PUSH
57585: LD_VAR 0 3
57589: PPUSH
57590: LD_INT 1
57592: PPUSH
57593: CALL_OW 268
57597: STR
57598: PUSH
57599: LD_STRING , 
57601: STR
57602: PUSH
57603: LD_VAR 0 3
57607: PPUSH
57608: LD_INT 2
57610: PPUSH
57611: CALL_OW 268
57615: STR
57616: PUSH
57617: LD_STRING ],
57619: STR
57620: PPUSH
57621: CALL_OW 561
// end ;
57625: GO 57519
57627: POP
57628: POP
// AddToLog ( ]; ) ;
57629: LD_STRING ];
57631: PPUSH
57632: CALL_OW 561
// end ;
57636: LD_VAR 0 2
57640: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57641: LD_INT 0
57643: PPUSH
57644: PPUSH
57645: PPUSH
57646: PPUSH
57647: PPUSH
// if not area or not rate or not max then
57648: LD_VAR 0 1
57652: NOT
57653: PUSH
57654: LD_VAR 0 2
57658: NOT
57659: OR
57660: PUSH
57661: LD_VAR 0 4
57665: NOT
57666: OR
57667: IFFALSE 57671
// exit ;
57669: GO 57863
// while 1 do
57671: LD_INT 1
57673: IFFALSE 57863
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57675: LD_ADDR_VAR 0 9
57679: PUSH
57680: LD_VAR 0 1
57684: PPUSH
57685: LD_INT 1
57687: PPUSH
57688: CALL_OW 287
57692: PUSH
57693: LD_INT 10
57695: MUL
57696: ST_TO_ADDR
// r := rate / 10 ;
57697: LD_ADDR_VAR 0 7
57701: PUSH
57702: LD_VAR 0 2
57706: PUSH
57707: LD_INT 10
57709: DIVREAL
57710: ST_TO_ADDR
// time := 1 1$00 ;
57711: LD_ADDR_VAR 0 8
57715: PUSH
57716: LD_INT 2100
57718: ST_TO_ADDR
// if amount < min then
57719: LD_VAR 0 9
57723: PUSH
57724: LD_VAR 0 3
57728: LESS
57729: IFFALSE 57747
// r := r * 2 else
57731: LD_ADDR_VAR 0 7
57735: PUSH
57736: LD_VAR 0 7
57740: PUSH
57741: LD_INT 2
57743: MUL
57744: ST_TO_ADDR
57745: GO 57773
// if amount > max then
57747: LD_VAR 0 9
57751: PUSH
57752: LD_VAR 0 4
57756: GREATER
57757: IFFALSE 57773
// r := r / 2 ;
57759: LD_ADDR_VAR 0 7
57763: PUSH
57764: LD_VAR 0 7
57768: PUSH
57769: LD_INT 2
57771: DIVREAL
57772: ST_TO_ADDR
// time := time / r ;
57773: LD_ADDR_VAR 0 8
57777: PUSH
57778: LD_VAR 0 8
57782: PUSH
57783: LD_VAR 0 7
57787: DIVREAL
57788: ST_TO_ADDR
// if time < 0 then
57789: LD_VAR 0 8
57793: PUSH
57794: LD_INT 0
57796: LESS
57797: IFFALSE 57814
// time := time * - 1 ;
57799: LD_ADDR_VAR 0 8
57803: PUSH
57804: LD_VAR 0 8
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: MUL
57813: ST_TO_ADDR
// wait ( time ) ;
57814: LD_VAR 0 8
57818: PPUSH
57819: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57823: LD_INT 35
57825: PPUSH
57826: LD_INT 875
57828: PPUSH
57829: CALL_OW 12
57833: PPUSH
57834: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57838: LD_INT 1
57840: PPUSH
57841: LD_INT 5
57843: PPUSH
57844: CALL_OW 12
57848: PPUSH
57849: LD_VAR 0 1
57853: PPUSH
57854: LD_INT 1
57856: PPUSH
57857: CALL_OW 55
// end ;
57861: GO 57671
// end ;
57863: LD_VAR 0 5
57867: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57868: LD_INT 0
57870: PPUSH
57871: PPUSH
57872: PPUSH
57873: PPUSH
57874: PPUSH
57875: PPUSH
57876: PPUSH
57877: PPUSH
// if not turrets or not factories then
57878: LD_VAR 0 1
57882: NOT
57883: PUSH
57884: LD_VAR 0 2
57888: NOT
57889: OR
57890: IFFALSE 57894
// exit ;
57892: GO 58201
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57894: LD_ADDR_VAR 0 10
57898: PUSH
57899: LD_INT 5
57901: PUSH
57902: LD_INT 6
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 4
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 24
57936: PUSH
57937: LD_INT 25
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 23
57946: PUSH
57947: LD_INT 27
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 42
57960: PUSH
57961: LD_INT 43
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 44
57970: PUSH
57971: LD_INT 46
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 45
57980: PUSH
57981: LD_INT 47
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: ST_TO_ADDR
// result := [ ] ;
57998: LD_ADDR_VAR 0 3
58002: PUSH
58003: EMPTY
58004: ST_TO_ADDR
// for i in turrets do
58005: LD_ADDR_VAR 0 4
58009: PUSH
58010: LD_VAR 0 1
58014: PUSH
58015: FOR_IN
58016: IFFALSE 58199
// begin nat := GetNation ( i ) ;
58018: LD_ADDR_VAR 0 7
58022: PUSH
58023: LD_VAR 0 4
58027: PPUSH
58028: CALL_OW 248
58032: ST_TO_ADDR
// weapon := 0 ;
58033: LD_ADDR_VAR 0 8
58037: PUSH
58038: LD_INT 0
58040: ST_TO_ADDR
// if not nat then
58041: LD_VAR 0 7
58045: NOT
58046: IFFALSE 58050
// continue ;
58048: GO 58015
// for j in list [ nat ] do
58050: LD_ADDR_VAR 0 5
58054: PUSH
58055: LD_VAR 0 10
58059: PUSH
58060: LD_VAR 0 7
58064: ARRAY
58065: PUSH
58066: FOR_IN
58067: IFFALSE 58108
// if GetBWeapon ( i ) = j [ 1 ] then
58069: LD_VAR 0 4
58073: PPUSH
58074: CALL_OW 269
58078: PUSH
58079: LD_VAR 0 5
58083: PUSH
58084: LD_INT 1
58086: ARRAY
58087: EQUAL
58088: IFFALSE 58106
// begin weapon := j [ 2 ] ;
58090: LD_ADDR_VAR 0 8
58094: PUSH
58095: LD_VAR 0 5
58099: PUSH
58100: LD_INT 2
58102: ARRAY
58103: ST_TO_ADDR
// break ;
58104: GO 58108
// end ;
58106: GO 58066
58108: POP
58109: POP
// if not weapon then
58110: LD_VAR 0 8
58114: NOT
58115: IFFALSE 58119
// continue ;
58117: GO 58015
// for k in factories do
58119: LD_ADDR_VAR 0 6
58123: PUSH
58124: LD_VAR 0 2
58128: PUSH
58129: FOR_IN
58130: IFFALSE 58195
// begin weapons := AvailableWeaponList ( k ) ;
58132: LD_ADDR_VAR 0 9
58136: PUSH
58137: LD_VAR 0 6
58141: PPUSH
58142: CALL_OW 478
58146: ST_TO_ADDR
// if not weapons then
58147: LD_VAR 0 9
58151: NOT
58152: IFFALSE 58156
// continue ;
58154: GO 58129
// if weapon in weapons then
58156: LD_VAR 0 8
58160: PUSH
58161: LD_VAR 0 9
58165: IN
58166: IFFALSE 58193
// begin result := [ i , weapon ] ;
58168: LD_ADDR_VAR 0 3
58172: PUSH
58173: LD_VAR 0 4
58177: PUSH
58178: LD_VAR 0 8
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// exit ;
58187: POP
58188: POP
58189: POP
58190: POP
58191: GO 58201
// end ; end ;
58193: GO 58129
58195: POP
58196: POP
// end ;
58197: GO 58015
58199: POP
58200: POP
// end ;
58201: LD_VAR 0 3
58205: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58206: LD_INT 0
58208: PPUSH
// if not side or side > 8 then
58209: LD_VAR 0 3
58213: NOT
58214: PUSH
58215: LD_VAR 0 3
58219: PUSH
58220: LD_INT 8
58222: GREATER
58223: OR
58224: IFFALSE 58228
// exit ;
58226: GO 58287
// if not range then
58228: LD_VAR 0 4
58232: NOT
58233: IFFALSE 58244
// range := - 12 ;
58235: LD_ADDR_VAR 0 4
58239: PUSH
58240: LD_INT 12
58242: NEG
58243: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58244: LD_VAR 0 1
58248: PPUSH
58249: LD_VAR 0 2
58253: PPUSH
58254: LD_VAR 0 3
58258: PPUSH
58259: LD_VAR 0 4
58263: PPUSH
58264: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58268: LD_VAR 0 1
58272: PPUSH
58273: LD_VAR 0 2
58277: PPUSH
58278: LD_VAR 0 3
58282: PPUSH
58283: CALL_OW 331
// end ;
58287: LD_VAR 0 5
58291: RET
// export function Video ( mode ) ; begin
58292: LD_INT 0
58294: PPUSH
// ingame_video = mode ;
58295: LD_ADDR_OWVAR 52
58299: PUSH
58300: LD_VAR 0 1
58304: ST_TO_ADDR
// interface_hidden = mode ;
58305: LD_ADDR_OWVAR 54
58309: PUSH
58310: LD_VAR 0 1
58314: ST_TO_ADDR
// end ;
58315: LD_VAR 0 2
58319: RET
// export function Join ( array , element ) ; begin
58320: LD_INT 0
58322: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58323: LD_ADDR_VAR 0 3
58327: PUSH
58328: LD_VAR 0 1
58332: PPUSH
58333: LD_VAR 0 1
58337: PUSH
58338: LD_INT 1
58340: PLUS
58341: PPUSH
58342: LD_VAR 0 2
58346: PPUSH
58347: CALL_OW 1
58351: ST_TO_ADDR
// end ;
58352: LD_VAR 0 3
58356: RET
// export function JoinUnion ( array , element ) ; begin
58357: LD_INT 0
58359: PPUSH
// result := array union element ;
58360: LD_ADDR_VAR 0 3
58364: PUSH
58365: LD_VAR 0 1
58369: PUSH
58370: LD_VAR 0 2
58374: UNION
58375: ST_TO_ADDR
// end ;
58376: LD_VAR 0 3
58380: RET
// export function GetBehemoths ( side ) ; begin
58381: LD_INT 0
58383: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: LD_INT 22
58391: PUSH
58392: LD_VAR 0 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 31
58403: PUSH
58404: LD_INT 25
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PPUSH
58415: CALL_OW 69
58419: ST_TO_ADDR
// end ;
58420: LD_VAR 0 2
58424: RET
// export function Shuffle ( array ) ; var i , index ; begin
58425: LD_INT 0
58427: PPUSH
58428: PPUSH
58429: PPUSH
// result := [ ] ;
58430: LD_ADDR_VAR 0 2
58434: PUSH
58435: EMPTY
58436: ST_TO_ADDR
// if not array then
58437: LD_VAR 0 1
58441: NOT
58442: IFFALSE 58446
// exit ;
58444: GO 58545
// Randomize ;
58446: CALL_OW 10
// for i = array downto 1 do
58450: LD_ADDR_VAR 0 3
58454: PUSH
58455: DOUBLE
58456: LD_VAR 0 1
58460: INC
58461: ST_TO_ADDR
58462: LD_INT 1
58464: PUSH
58465: FOR_DOWNTO
58466: IFFALSE 58543
// begin index := rand ( 1 , array ) ;
58468: LD_ADDR_VAR 0 4
58472: PUSH
58473: LD_INT 1
58475: PPUSH
58476: LD_VAR 0 1
58480: PPUSH
58481: CALL_OW 12
58485: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58486: LD_ADDR_VAR 0 2
58490: PUSH
58491: LD_VAR 0 2
58495: PPUSH
58496: LD_VAR 0 2
58500: PUSH
58501: LD_INT 1
58503: PLUS
58504: PPUSH
58505: LD_VAR 0 1
58509: PUSH
58510: LD_VAR 0 4
58514: ARRAY
58515: PPUSH
58516: CALL_OW 2
58520: ST_TO_ADDR
// array := Delete ( array , index ) ;
58521: LD_ADDR_VAR 0 1
58525: PUSH
58526: LD_VAR 0 1
58530: PPUSH
58531: LD_VAR 0 4
58535: PPUSH
58536: CALL_OW 3
58540: ST_TO_ADDR
// end ;
58541: GO 58465
58543: POP
58544: POP
// end ;
58545: LD_VAR 0 2
58549: RET
// export function GetBaseMaterials ( base ) ; begin
58550: LD_INT 0
58552: PPUSH
// result := [ 0 , 0 , 0 ] ;
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// if not base then
58572: LD_VAR 0 1
58576: NOT
58577: IFFALSE 58581
// exit ;
58579: GO 58630
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58581: LD_ADDR_VAR 0 2
58585: PUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: LD_INT 1
58593: PPUSH
58594: CALL_OW 275
58598: PUSH
58599: LD_VAR 0 1
58603: PPUSH
58604: LD_INT 2
58606: PPUSH
58607: CALL_OW 275
58611: PUSH
58612: LD_VAR 0 1
58616: PPUSH
58617: LD_INT 3
58619: PPUSH
58620: CALL_OW 275
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// end ;
58630: LD_VAR 0 2
58634: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58635: LD_INT 0
58637: PPUSH
58638: PPUSH
// result := array ;
58639: LD_ADDR_VAR 0 3
58643: PUSH
58644: LD_VAR 0 1
58648: ST_TO_ADDR
// if size > 0 then
58649: LD_VAR 0 2
58653: PUSH
58654: LD_INT 0
58656: GREATER
58657: IFFALSE 58703
// for i := array downto size do
58659: LD_ADDR_VAR 0 4
58663: PUSH
58664: DOUBLE
58665: LD_VAR 0 1
58669: INC
58670: ST_TO_ADDR
58671: LD_VAR 0 2
58675: PUSH
58676: FOR_DOWNTO
58677: IFFALSE 58701
// result := Delete ( result , result ) ;
58679: LD_ADDR_VAR 0 3
58683: PUSH
58684: LD_VAR 0 3
58688: PPUSH
58689: LD_VAR 0 3
58693: PPUSH
58694: CALL_OW 3
58698: ST_TO_ADDR
58699: GO 58676
58701: POP
58702: POP
// end ;
58703: LD_VAR 0 3
58707: RET
// export function ComExit ( unit ) ; var tmp ; begin
58708: LD_INT 0
58710: PPUSH
58711: PPUSH
// if not IsInUnit ( unit ) then
58712: LD_VAR 0 1
58716: PPUSH
58717: CALL_OW 310
58721: NOT
58722: IFFALSE 58726
// exit ;
58724: GO 58786
// tmp := IsInUnit ( unit ) ;
58726: LD_ADDR_VAR 0 3
58730: PUSH
58731: LD_VAR 0 1
58735: PPUSH
58736: CALL_OW 310
58740: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58741: LD_VAR 0 3
58745: PPUSH
58746: CALL_OW 247
58750: PUSH
58751: LD_INT 2
58753: EQUAL
58754: IFFALSE 58767
// ComExitVehicle ( unit ) else
58756: LD_VAR 0 1
58760: PPUSH
58761: CALL_OW 121
58765: GO 58776
// ComExitBuilding ( unit ) ;
58767: LD_VAR 0 1
58771: PPUSH
58772: CALL_OW 122
// result := tmp ;
58776: LD_ADDR_VAR 0 2
58780: PUSH
58781: LD_VAR 0 3
58785: ST_TO_ADDR
// end ;
58786: LD_VAR 0 2
58790: RET
// export function ResetHc ; begin
58791: LD_INT 0
58793: PPUSH
// InitHc ;
58794: CALL_OW 19
// hc_importance := 0 ;
58798: LD_ADDR_OWVAR 32
58802: PUSH
58803: LD_INT 0
58805: ST_TO_ADDR
// end ;
58806: LD_VAR 0 1
58810: RET
