// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 62606 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 62686 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 62566 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 62505 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 62766 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 28824 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 28824 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 28824 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 28824 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 28824 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 28824 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 28824 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 28824 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 28824 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 28824 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if i in UnitsInside ( b ) then
3188: LD_VAR 0 1
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 62397 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL 70035 0 2
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL 70035 0 2
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6340
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5612
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5587: LD_STRING enableBioCharacter(BIO_TIM)
5589: PPUSH
5590: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_EXP 2
5603: PUSH
5604: LD_STRING Gladstone
5606: STR
5607: PPUSH
5608: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5612: LD_EXP 19
5616: PPUSH
5617: CALL_OW 302
5621: PUSH
5622: LD_EXP 19
5626: PPUSH
5627: CALL_OW 255
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: AND
5636: IFFALSE 5673
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5638: LD_STRING enableBioCharacter(BIO_DENIS)
5640: PPUSH
5641: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5645: LD_EXP 19
5649: PPUSH
5650: LD_EXP 2
5654: PUSH
5655: LD_STRING Denis
5657: STR
5658: PPUSH
5659: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5663: LD_INT 1
5665: PPUSH
5666: LD_STRING DenisInDelta
5668: PPUSH
5669: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5673: LD_EXP 22
5677: PPUSH
5678: CALL_OW 302
5682: IFFALSE 5702
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5684: LD_EXP 22
5688: PPUSH
5689: LD_EXP 2
5693: PUSH
5694: LD_STRING Lisa
5696: STR
5697: PPUSH
5698: CALL_OW 38
// end ; if IsOk ( Frank ) then
5702: LD_EXP 23
5706: PPUSH
5707: CALL_OW 302
5711: IFFALSE 5731
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5713: LD_EXP 23
5717: PPUSH
5718: LD_EXP 2
5722: PUSH
5723: LD_STRING Frank
5725: STR
5726: PPUSH
5727: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5731: LD_EXP 24
5735: PPUSH
5736: CALL_OW 302
5740: IFFALSE 5760
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5742: LD_EXP 24
5746: PPUSH
5747: LD_EXP 2
5751: PUSH
5752: LD_STRING Bobby
5754: STR
5755: PPUSH
5756: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5760: LD_EXP 25
5764: PPUSH
5765: CALL_OW 302
5769: IFFALSE 5789
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5771: LD_EXP 25
5775: PPUSH
5776: LD_EXP 2
5780: PUSH
5781: LD_STRING Cyrus
5783: STR
5784: PPUSH
5785: CALL_OW 38
// end ; if IsOk ( Brown ) then
5789: LD_EXP 20
5793: PPUSH
5794: CALL_OW 302
5798: IFFALSE 5818
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 2
5809: PUSH
5810: LD_STRING Brown
5812: STR
5813: PPUSH
5814: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5818: LD_EXP 21
5822: PPUSH
5823: CALL_OW 302
5827: IFFALSE 5847
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5829: LD_EXP 21
5833: PPUSH
5834: LD_EXP 2
5838: PUSH
5839: LD_STRING Donaldson
5841: STR
5842: PPUSH
5843: CALL_OW 38
// end ; if IsOk ( Mike ) then
5847: LD_EXP 26
5851: PPUSH
5852: CALL_OW 302
5856: IFFALSE 5876
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5858: LD_EXP 26
5862: PPUSH
5863: LD_EXP 2
5867: PUSH
5868: LD_STRING Mike
5870: STR
5871: PPUSH
5872: CALL_OW 38
// if others then
5876: LD_EXP 27
5880: IFFALSE 5894
// SaveCharacters ( others , othersInDelta ) ;
5882: LD_EXP 27
5886: PPUSH
5887: LD_STRING othersInDelta
5889: PPUSH
5890: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5894: LD_INT 22
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 25
5906: PUSH
5907: LD_INT 16
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 69
5922: IFFALSE 5966
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5924: LD_INT 22
5926: PUSH
5927: LD_INT 1
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 25
5936: PUSH
5937: LD_INT 16
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: LD_EXP 26
5957: DIFF
5958: PPUSH
5959: LD_STRING apeInDelta
5961: PPUSH
5962: CALL_OW 38
// tmp := [ ] ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: EMPTY
5972: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5973: LD_INT 22
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 21
5985: PUSH
5986: LD_INT 2
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 69
6001: IFFALSE 6112
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_INT 1
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 21
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PPUSH
6032: CALL_OW 69
6036: PUSH
6037: FOR_IN
6038: IFFALSE 6110
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 248
6059: PUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 265
6069: PUSH
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 262
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: CALL_OW 263
6089: PUSH
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 264
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: ADD
6107: ST_TO_ADDR
6108: GO 6037
6110: POP
6111: POP
// if tmp then
6112: LD_VAR 0 2
6116: IFFALSE 6130
// SaveVariable ( tmp , vehiclesInDelta ) ;
6118: LD_VAR 0 2
6122: PPUSH
6123: LD_STRING vehiclesInDelta
6125: PPUSH
6126: CALL_OW 39
// tmp := [ ] ;
6130: LD_ADDR_VAR 0 2
6134: PUSH
6135: EMPTY
6136: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6137: LD_INT 22
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 21
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: IFFALSE 6318
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6316
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6204: LD_ADDR_VAR 0 2
6208: PUSH
6209: LD_VAR 0 2
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 266
6223: PUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 267
6233: PUSH
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 250
6243: PUSH
6244: LD_VAR 0 1
6248: PPUSH
6249: CALL_OW 251
6253: PUSH
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 254
6263: PUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 268
6276: PUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: LD_INT 2
6284: PPUSH
6285: CALL_OW 268
6289: PUSH
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 269
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: ADD
6313: ST_TO_ADDR
6314: GO 6201
6316: POP
6317: POP
// if tmp then
6318: LD_VAR 0 2
6322: IFFALSE 6336
// SaveVariable ( tmp , buildingsInDelta ) ;
6324: LD_VAR 0 2
6328: PPUSH
6329: LD_STRING buildingsInDelta
6331: PPUSH
6332: CALL_OW 39
// YouWin ;
6336: CALL_OW 103
// end ; end_of_file
6340: PPOPN 5
6342: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6343: LD_INT 0
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// InitHc ;
6349: CALL_OW 19
// InitUc ;
6353: CALL_OW 18
// uc_side := 2 ;
6357: LD_ADDR_OWVAR 20
6361: PUSH
6362: LD_INT 2
6364: ST_TO_ADDR
// uc_nation := 2 ;
6365: LD_ADDR_OWVAR 21
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// if not amount then
6373: LD_VAR 0 1
6377: NOT
6378: IFFALSE 6382
// exit ;
6380: GO 6505
// for i = 1 to amount do
6382: LD_ADDR_VAR 0 5
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 1
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6493
// begin PrepareHuman ( false , 1 , skill ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_VAR 0 2
6410: PPUSH
6411: CALL_OW 380
// un := CreateHuman ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: CALL_OW 44
6424: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6425: LD_ADDR_VAR 0 7
6429: PUSH
6430: LD_VAR 0 7
6434: PPUSH
6435: LD_INT 1
6437: PPUSH
6438: LD_VAR 0 6
6442: PPUSH
6443: CALL_OW 2
6447: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6448: LD_VAR 0 6
6452: PPUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 0
6460: PPUSH
6461: CALL_OW 49
// if i mod 2 = 0 then
6465: LD_VAR 0 5
6469: PUSH
6470: LD_INT 2
6472: MOD
6473: PUSH
6474: LD_INT 0
6476: EQUAL
6477: IFFALSE 6491
// SetTag ( un , 11 ) ;
6479: LD_VAR 0 6
6483: PPUSH
6484: LD_INT 11
6486: PPUSH
6487: CALL_OW 109
// end ;
6491: GO 6397
6493: POP
6494: POP
// result := tmp ;
6495: LD_ADDR_VAR 0 4
6499: PUSH
6500: LD_VAR 0 7
6504: ST_TO_ADDR
// end ;
6505: LD_VAR 0 4
6509: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6510: LD_EXP 6
6514: IFFALSE 7592
6516: GO 6518
6518: DISABLE
6519: LD_INT 0
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// begin more_troops := false ;
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6537: LD_ADDR_VAR 0 4
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 4
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: LD_INT 5
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: LD_INT 10500
6573: PUSH
6574: LD_INT 8400
6576: PUSH
6577: LD_INT 6300
6579: PUSH
6580: LD_INT 5250
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_OWVAR 67
6593: ARRAY
6594: ST_TO_ADDR
// force := [ ] ;
6595: LD_ADDR_VAR 0 8
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// ar_forces := [ ] ;
6602: LD_ADDR_EXP 28
6606: PUSH
6607: EMPTY
6608: ST_TO_ADDR
// ap_killers := [ ] ;
6609: LD_ADDR_EXP 29
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// Wait ( timer ) ;
6616: LD_VAR 0 2
6620: PPUSH
6621: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6625: LD_EXP 19
6629: PUSH
6630: LD_EXP 19
6634: PPUSH
6635: CALL_OW 255
6639: PUSH
6640: LD_INT 4
6642: EQUAL
6643: AND
6644: IFFALSE 6653
// Wait ( 0 0$45 ) ;
6646: LD_INT 1575
6648: PPUSH
6649: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 22
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 30
6665: PUSH
6666: LD_INT 4
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: IFFALSE 6698
// begin wait ( 1 1$25 ) ;
6683: LD_INT 2975
6685: PPUSH
6686: CALL_OW 67
// more_troops := true ;
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// end ; if more_troops then
6698: LD_VAR 0 3
6702: IFFALSE 6898
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6704: LD_ADDR_VAR 0 8
6708: PUSH
6709: LD_INT 4
6711: PUSH
6712: LD_INT 5
6714: PUSH
6715: LD_INT 6
6717: PUSH
6718: LD_INT 7
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_OWVAR 67
6731: ARRAY
6732: PPUSH
6733: LD_VAR 0 4
6737: PPUSH
6738: LD_INT 14
6740: PPUSH
6741: CALL 6343 0 3
6745: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6746: LD_ADDR_VAR 0 7
6750: PUSH
6751: LD_INT 2
6753: PPUSH
6754: LD_INT 3
6756: PPUSH
6757: LD_INT 22
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 42
6768: PUSH
6769: LD_INT 42
6771: PUSH
6772: LD_INT 43
6774: PUSH
6775: LD_INT 44
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: PUSH
6784: LD_OWVAR 67
6788: ARRAY
6789: PPUSH
6790: LD_INT 90
6792: PPUSH
6793: CALL 435 0 7
6797: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6798: LD_VAR 0 7
6802: PPUSH
6803: LD_INT 4
6805: PPUSH
6806: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6810: LD_VAR 0 7
6814: PPUSH
6815: LD_INT 13
6817: PPUSH
6818: LD_INT 0
6820: PPUSH
6821: CALL_OW 49
// uc_side := 2 ;
6825: LD_ADDR_OWVAR 20
6829: PUSH
6830: LD_INT 2
6832: ST_TO_ADDR
// uc_nation := 2 ;
6833: LD_ADDR_OWVAR 21
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6841: LD_INT 0
6843: PPUSH
6844: LD_INT 1
6846: PPUSH
6847: LD_VAR 0 4
6851: PPUSH
6852: CALL_OW 380
// un := CreateHuman ;
6856: LD_ADDR_VAR 0 6
6860: PUSH
6861: CALL_OW 44
6865: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6866: LD_VAR 0 6
6870: PPUSH
6871: LD_VAR 0 7
6875: PPUSH
6876: CALL_OW 52
// force := force ^ un ;
6880: LD_ADDR_VAR 0 8
6884: PUSH
6885: LD_VAR 0 8
6889: PUSH
6890: LD_VAR 0 6
6894: ADD
6895: ST_TO_ADDR
// end else
6896: GO 6940
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6898: LD_ADDR_VAR 0 8
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: LD_INT 4
6908: PUSH
6909: LD_INT 5
6911: PUSH
6912: LD_INT 6
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_OWVAR 67
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: LD_INT 14
6934: PPUSH
6935: CALL 6343 0 3
6939: ST_TO_ADDR
// end ; if force then
6940: LD_VAR 0 8
6944: IFFALSE 6956
// ar_forces := force ;
6946: LD_ADDR_EXP 28
6950: PUSH
6951: LD_VAR 0 8
6955: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6956: LD_INT 35
6958: PPUSH
6959: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6963: LD_INT 22
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_INT 0
6994: EQUAL
6995: IFFALSE 6956
// wait ( timer ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7006: LD_ADDR_VAR 0 8
7010: PUSH
7011: LD_INT 4
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: LD_INT 6
7019: PUSH
7020: LD_INT 7
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: LD_OWVAR 67
7033: ARRAY
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: LD_INT 13
7042: PUSH
7043: LD_INT 14
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 2
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL 6343 0 3
7066: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7067: LD_OWVAR 67
7071: PUSH
7072: LD_INT 1
7074: GREATER
7075: PUSH
7076: LD_EXP 6
7080: AND
7081: IFFALSE 7160
// begin uc_side := 2 ;
7083: LD_ADDR_OWVAR 20
7087: PUSH
7088: LD_INT 2
7090: ST_TO_ADDR
// uc_nation := 2 ;
7091: LD_ADDR_OWVAR 21
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7099: LD_INT 0
7101: PPUSH
7102: LD_INT 2
7104: PPUSH
7105: LD_VAR 0 4
7109: PPUSH
7110: CALL_OW 380
// eng := CreateHuman ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: CALL_OW 44
7123: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7124: LD_VAR 0 5
7128: PPUSH
7129: LD_INT 13
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: CALL_OW 49
// Wait ( 3 ) ;
7139: LD_INT 3
7141: PPUSH
7142: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7146: LD_VAR 0 5
7150: PPUSH
7151: LD_EXP 6
7155: PPUSH
7156: CALL_OW 180
// end ; if force then
7160: LD_VAR 0 8
7164: IFFALSE 7176
// ar_forces := force ;
7166: LD_ADDR_EXP 28
7170: PUSH
7171: LD_VAR 0 8
7175: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7176: LD_INT 35
7178: PPUSH
7179: CALL_OW 67
// if eng then
7183: LD_VAR 0 5
7187: IFFALSE 7241
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7189: LD_EXP 6
7193: PPUSH
7194: CALL_OW 255
7198: PUSH
7199: LD_INT 2
7201: EQUAL
7202: PUSH
7203: LD_VAR 0 5
7207: PPUSH
7208: CALL_OW 302
7212: AND
7213: PUSH
7214: LD_VAR 0 5
7218: PPUSH
7219: CALL_OW 310
7223: NOT
7224: AND
7225: IFFALSE 7241
// ComEnterUnit ( eng , Delta ) ;
7227: LD_VAR 0 5
7231: PPUSH
7232: LD_EXP 6
7236: PPUSH
7237: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7241: LD_INT 22
7243: PUSH
7244: LD_INT 2
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 21
7253: PUSH
7254: LD_INT 1
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PPUSH
7265: CALL_OW 69
7269: PUSH
7270: LD_INT 0
7272: EQUAL
7273: IFFALSE 7176
// Wait ( 2 2$00 ) ;
7275: LD_INT 4200
7277: PPUSH
7278: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7282: LD_ADDR_EXP 29
7286: PUSH
7287: LD_INT 1
7289: PUSH
7290: LD_INT 2
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 2
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: LD_OWVAR 67
7309: ARRAY
7310: PPUSH
7311: LD_VAR 0 4
7315: PPUSH
7316: LD_INT 13
7318: PPUSH
7319: CALL 6343 0 3
7323: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7324: LD_VAR 0 2
7328: PUSH
7329: LD_INT 2
7331: MUL
7332: PPUSH
7333: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7337: LD_ADDR_EXP 28
7341: PUSH
7342: LD_INT 5
7344: PUSH
7345: LD_INT 6
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: LD_INT 8
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: PUSH
7360: LD_OWVAR 67
7364: ARRAY
7365: PPUSH
7366: LD_VAR 0 4
7370: PPUSH
7371: LD_INT 13
7373: PPUSH
7374: CALL 6343 0 3
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: LD_INT 4
7387: PUSH
7388: LD_INT 4
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: PUSH
7397: LD_OWVAR 67
7401: ARRAY
7402: PPUSH
7403: LD_VAR 0 4
7407: PPUSH
7408: LD_INT 14
7410: PPUSH
7411: CALL 6343 0 3
7415: ADD
7416: ST_TO_ADDR
// if Difficulty < 4 then
7417: LD_OWVAR 67
7421: PUSH
7422: LD_INT 4
7424: LESS
7425: IFFALSE 7429
// exit ;
7427: GO 7592
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7429: LD_ADDR_VAR 0 7
7433: PUSH
7434: LD_INT 2
7436: PPUSH
7437: LD_INT 3
7439: PPUSH
7440: LD_INT 22
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 44
7451: PPUSH
7452: LD_INT 90
7454: PPUSH
7455: CALL 435 0 7
7459: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7460: LD_VAR 0 7
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7472: LD_VAR 0 7
7476: PPUSH
7477: LD_INT 28
7479: PPUSH
7480: LD_INT 51
7482: PPUSH
7483: LD_INT 0
7485: PPUSH
7486: CALL_OW 48
// uc_side := 2 ;
7490: LD_ADDR_OWVAR 20
7494: PUSH
7495: LD_INT 2
7497: ST_TO_ADDR
// uc_nation := 2 ;
7498: LD_ADDR_OWVAR 21
7502: PUSH
7503: LD_INT 2
7505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7506: LD_INT 0
7508: PPUSH
7509: LD_INT 1
7511: PPUSH
7512: LD_VAR 0 4
7516: PPUSH
7517: CALL_OW 380
// un := CreateHuman ;
7521: LD_ADDR_VAR 0 6
7525: PUSH
7526: CALL_OW 44
7530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7531: LD_VAR 0 6
7535: PPUSH
7536: LD_VAR 0 7
7540: PPUSH
7541: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7545: LD_ADDR_EXP 28
7549: PUSH
7550: LD_EXP 28
7554: PPUSH
7555: LD_VAR 0 6
7559: PPUSH
7560: CALL 66116 0 2
7564: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7565: LD_ADDR_EXP 28
7569: PUSH
7570: LD_EXP 28
7574: PUSH
7575: LD_INT 4
7577: PPUSH
7578: LD_VAR 0 4
7582: PPUSH
7583: LD_INT 19
7585: PPUSH
7586: CALL 6343 0 3
7590: UNION
7591: ST_TO_ADDR
// end ;
7592: PPOPN 8
7594: END
// every 0 0$03 trigger ar_forces do var i , target ;
7595: LD_EXP 28
7599: IFFALSE 7797
7601: GO 7603
7603: DISABLE
7604: LD_INT 0
7606: PPUSH
7607: PPUSH
// begin enable ;
7608: ENABLE
// if not ar_forces then
7609: LD_EXP 28
7613: NOT
7614: IFFALSE 7618
// exit ;
7616: GO 7797
// if Delta then
7618: LD_EXP 6
7622: IFFALSE 7636
// target := Delta else
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 6
7633: ST_TO_ADDR
7634: GO 7646
// target := JMM ;
7636: LD_ADDR_VAR 0 2
7640: PUSH
7641: LD_EXP 16
7645: ST_TO_ADDR
// for i in ar_forces do
7646: LD_ADDR_VAR 0 1
7650: PUSH
7651: LD_EXP 28
7655: PUSH
7656: FOR_IN
7657: IFFALSE 7795
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7659: LD_VAR 0 1
7663: PUSH
7664: LD_INT 55
7666: PUSH
7667: EMPTY
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: IN
7675: IFFALSE 7718
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7677: LD_VAR 0 1
7681: PPUSH
7682: LD_INT 22
7684: PUSH
7685: LD_INT 1
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 310
7706: PPUSH
7707: CALL_OW 74
7711: PPUSH
7712: CALL_OW 115
7716: GO 7793
// if GetDistUnits ( i , target ) > 30 then
7718: LD_VAR 0 1
7722: PPUSH
7723: LD_VAR 0 2
7727: PPUSH
7728: CALL_OW 296
7732: PUSH
7733: LD_INT 30
7735: GREATER
7736: IFFALSE 7769
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7738: LD_VAR 0 1
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: CALL_OW 250
7752: PPUSH
7753: LD_VAR 0 2
7757: PPUSH
7758: CALL_OW 251
7762: PPUSH
7763: CALL_OW 114
7767: GO 7793
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7769: LD_VAR 0 1
7773: PPUSH
7774: LD_INT 81
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PPUSH
7789: CALL 927 0 2
// end ;
7793: GO 7656
7795: POP
7796: POP
// end ;
7797: PPOPN 2
7799: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7800: LD_EXP 29
7804: IFFALSE 7964
7806: GO 7808
7808: DISABLE
7809: LD_INT 0
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin enable ;
7814: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7815: LD_ADDR_VAR 0 1
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_INT 0
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 12
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: ST_TO_ADDR
// if not filter then
7849: LD_VAR 0 1
7853: NOT
7854: IFFALSE 7881
// begin ar_forces := ar_forces ^ ap_killers ;
7856: LD_ADDR_EXP 28
7860: PUSH
7861: LD_EXP 28
7865: PUSH
7866: LD_EXP 29
7870: ADD
7871: ST_TO_ADDR
// ap_killers := [ ] ;
7872: LD_ADDR_EXP 29
7876: PUSH
7877: EMPTY
7878: ST_TO_ADDR
// exit ;
7879: GO 7964
// end ; for i in ap_killers do
7881: LD_ADDR_VAR 0 2
7885: PUSH
7886: LD_EXP 29
7890: PUSH
7891: FOR_IN
7892: IFFALSE 7962
// begin if not IsOk ( i ) then
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL_OW 302
7903: NOT
7904: IFFALSE 7908
// continue ;
7906: GO 7891
// if not HasTask ( i ) then
7908: LD_VAR 0 2
7912: PPUSH
7913: CALL_OW 314
7917: NOT
7918: IFFALSE 7940
// target := NearestUnitToUnit ( filter , i ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 2
7934: PPUSH
7935: CALL_OW 74
7939: ST_TO_ADDR
// if target then
7940: LD_VAR 0 3
7944: IFFALSE 7960
// ComAttackUnit ( i , target ) ;
7946: LD_VAR 0 2
7950: PPUSH
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 115
// end ;
7960: GO 7891
7962: POP
7963: POP
// end ; end_of_file
7964: PPOPN 3
7966: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7967: LD_EXP 6
7971: IFFALSE 8107
7973: GO 7975
7975: DISABLE
7976: LD_INT 0
7978: PPUSH
7979: PPUSH
7980: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: LD_INT 300
7988: PUSH
7989: LD_INT 250
7991: PUSH
7992: LD_INT 220
7994: PUSH
7995: LD_INT 210
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: LD_OWVAR 67
8008: ARRAY
8009: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 7
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8031: LD_INT 3150
8033: PPUSH
8034: LD_INT 4900
8036: PPUSH
8037: CALL_OW 12
8041: PPUSH
8042: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8046: LD_ADDR_VAR 0 3
8050: PUSH
8051: LD_INT 1
8053: PPUSH
8054: LD_INT 5
8056: PPUSH
8057: CALL_OW 12
8061: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8062: LD_VAR 0 3
8066: PPUSH
8067: LD_INT 7
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 55
// counter := counter - cr * 10 ;
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_VAR 0 2
8086: PUSH
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 10
8094: MUL
8095: MINUS
8096: ST_TO_ADDR
// until counter <= 0 ;
8097: LD_VAR 0 2
8101: PUSH
8102: LD_INT 0
8104: LESSEQUAL
8105: IFFALSE 8031
// end ;
8107: PPOPN 3
8109: END
// every 0 0$03 trigger not Delta do var i ;
8110: LD_EXP 6
8114: NOT
8115: IFFALSE 8185
8117: GO 8119
8119: DISABLE
8120: LD_INT 0
8122: PPUSH
// begin for i = 1 to 5 - Difficulty do
8123: LD_ADDR_VAR 0 1
8127: PUSH
8128: DOUBLE
8129: LD_INT 1
8131: DEC
8132: ST_TO_ADDR
8133: LD_INT 5
8135: PUSH
8136: LD_OWVAR 67
8140: MINUS
8141: PUSH
8142: FOR_TO
8143: IFFALSE 8183
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8145: LD_INT 2
8147: PPUSH
8148: LD_INT 5
8150: PPUSH
8151: CALL_OW 12
8155: PPUSH
8156: LD_INT 8
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8166: LD_INT 560
8168: PPUSH
8169: LD_INT 1365
8171: PPUSH
8172: CALL_OW 12
8176: PPUSH
8177: CALL_OW 67
// end ;
8181: GO 8142
8183: POP
8184: POP
// end ;
8185: PPOPN 1
8187: END
// every 3 3$00 trigger tick < 15 15$00 do
8188: LD_OWVAR 1
8192: PUSH
8193: LD_INT 31500
8195: LESS
8196: IFFALSE 8256
8198: GO 8200
8200: DISABLE
// begin enable ;
8201: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8202: LD_INT 1
8204: PPUSH
8205: LD_INT 3
8207: PPUSH
8208: CALL_OW 12
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8220: LD_INT 1330
8222: PPUSH
8223: LD_INT 2065
8225: PPUSH
8226: CALL_OW 12
8230: PPUSH
8231: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8235: LD_INT 1
8237: PPUSH
8238: LD_INT 4
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: LD_INT 15
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: CALL_OW 55
// end ; end_of_file
8256: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8257: LD_VAR 0 1
8261: PPUSH
8262: CALL 24535 0 1
// if un = JMM then
8266: LD_VAR 0 1
8270: PUSH
8271: LD_EXP 16
8275: EQUAL
8276: IFFALSE 8285
// YouLost ( JMM ) ;
8278: LD_STRING JMM
8280: PPUSH
8281: CALL_OW 104
// if un = Delta then
8285: LD_VAR 0 1
8289: PUSH
8290: LD_EXP 6
8294: EQUAL
8295: IFFALSE 8318
// begin Delta := 0 ;
8297: LD_ADDR_EXP 6
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8305: LD_INT 0
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: CALL_OW 324
// end ; if un in ar_forces then
8318: LD_VAR 0 1
8322: PUSH
8323: LD_EXP 28
8327: IN
8328: IFFALSE 8346
// ar_forces := ar_forces diff un ;
8330: LD_ADDR_EXP 28
8334: PUSH
8335: LD_EXP 28
8339: PUSH
8340: LD_VAR 0 1
8344: DIFF
8345: ST_TO_ADDR
// if un in ap_killers then
8346: LD_VAR 0 1
8350: PUSH
8351: LD_EXP 29
8355: IN
8356: IFFALSE 8374
// ap_killers := ap_killers diff un ;
8358: LD_ADDR_EXP 29
8362: PUSH
8363: LD_EXP 29
8367: PUSH
8368: LD_VAR 0 1
8372: DIFF
8373: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8374: LD_VAR 0 1
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 25
8384: PUSH
8385: LD_INT 12
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 25
8394: PUSH
8395: LD_INT 16
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: PPUSH
8407: CALL_OW 69
8411: IN
8412: IFFALSE 8428
// apeKillCounter := apeKillCounter + 1 ;
8414: LD_ADDR_EXP 15
8418: PUSH
8419: LD_EXP 15
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: ST_TO_ADDR
// end ;
8428: PPOPN 1
8430: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: CALL 24655 0 2
// end ;
8445: PPOPN 2
8447: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8448: LD_VAR 0 1
8452: PUSH
8453: LD_INT 1
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 2
8461: PUSH
8462: LD_INT 2
8464: EQUAL
8465: AND
8466: PUSH
8467: LD_EXP 13
8471: NOT
8472: AND
8473: IFFALSE 8483
// arab_spotted := true ;
8475: LD_ADDR_EXP 13
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ;
8483: PPOPN 2
8485: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8486: LD_ADDR_OWVAR 57
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// end_mission := true ;
8494: LD_ADDR_EXP 14
8498: PUSH
8499: LD_INT 1
8501: ST_TO_ADDR
// end ;
8502: PPOPN 1
8504: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 255
8514: PUSH
8515: LD_INT 1
8517: EQUAL
8518: IFFALSE 8534
// apeman_counter := apeman_counter + 1 ;
8520: LD_ADDR_EXP 12
8524: PUSH
8525: LD_EXP 12
8529: PUSH
8530: LD_INT 1
8532: PLUS
8533: ST_TO_ADDR
// if not first_apeman_tamed then
8534: LD_EXP 8
8538: NOT
8539: IFFALSE 8738
// begin first_apeman_tamed := true ;
8541: LD_ADDR_EXP 8
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// if sci = Gladstone then
8549: LD_VAR 0 2
8553: PUSH
8554: LD_EXP 17
8558: EQUAL
8559: IFFALSE 8573
// Say ( Gladstone , D7b-Glad-1 ) ;
8561: LD_EXP 17
8565: PPUSH
8566: LD_STRING D7b-Glad-1
8568: PPUSH
8569: CALL_OW 88
// if sci = Denis then
8573: LD_VAR 0 2
8577: PUSH
8578: LD_EXP 19
8582: EQUAL
8583: IFFALSE 8597
// Say ( Denis , D7a-Den-1 ) ;
8585: LD_EXP 19
8589: PPUSH
8590: LD_STRING D7a-Den-1
8592: PPUSH
8593: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8597: LD_VAR 0 2
8601: PUSH
8602: LD_EXP 16
8606: PUSH
8607: LD_EXP 17
8611: PUSH
8612: LD_EXP 19
8616: PUSH
8617: LD_EXP 22
8621: PUSH
8622: LD_EXP 23
8626: PUSH
8627: LD_EXP 24
8631: PUSH
8632: LD_EXP 25
8636: PUSH
8637: LD_EXP 21
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: IN
8652: NOT
8653: IFFALSE 8696
// begin if GetSex ( sci ) = sex_male then
8655: LD_VAR 0 2
8659: PPUSH
8660: CALL_OW 258
8664: PUSH
8665: LD_INT 1
8667: EQUAL
8668: IFFALSE 8684
// Say ( sci , D7c-Sci1-1 ) else
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_STRING D7c-Sci1-1
8677: PPUSH
8678: CALL_OW 88
8682: GO 8696
// Say ( sci , D7c-FSci1-1 ) ;
8684: LD_VAR 0 2
8688: PPUSH
8689: LD_STRING D7c-FSci1-1
8691: PPUSH
8692: CALL_OW 88
// end ; if sci <> Gladstone then
8696: LD_VAR 0 2
8700: PUSH
8701: LD_EXP 17
8705: NONEQUAL
8706: IFFALSE 8720
// Say ( Gladstone , D7c-Glad-1 ) ;
8708: LD_EXP 17
8712: PPUSH
8713: LD_STRING D7c-Glad-1
8715: PPUSH
8716: CALL_OW 88
// if Lisa then
8720: LD_EXP 22
8724: IFFALSE 8738
// Say ( Lisa , D8-Lisa-1 ) ;
8726: LD_EXP 22
8730: PPUSH
8731: LD_STRING D8-Lisa-1
8733: PPUSH
8734: CALL_OW 88
// end ; end ; end_of_file end_of_file
8738: PPOPN 2
8740: END
// export globalGameSaveCounter ; every 0 0$1 do
8741: GO 8743
8743: DISABLE
// begin enable ;
8744: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8745: LD_STRING updateTimer(
8747: PUSH
8748: LD_OWVAR 1
8752: STR
8753: PUSH
8754: LD_STRING );
8756: STR
8757: PPUSH
8758: CALL_OW 559
// end ;
8762: END
// every 0 0$1 do
8763: GO 8765
8765: DISABLE
// begin globalGameSaveCounter := 0 ;
8766: LD_ADDR_EXP 30
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8774: LD_STRING setGameSaveCounter(0)
8776: PPUSH
8777: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8781: LD_STRING initStreamRollete();
8783: PPUSH
8784: CALL_OW 559
// InitStreamMode ;
8788: CALL 10114 0 0
// DefineStreamItems ( false ) ;
8792: LD_INT 0
8794: PPUSH
8795: CALL 10578 0 1
// end ;
8799: END
// export function SOS_MapStart ( ) ; begin
8800: LD_INT 0
8802: PPUSH
// if streamModeActive then
8803: LD_EXP 31
8807: IFFALSE 8816
// DefineStreamItems ( true ) ;
8809: LD_INT 1
8811: PPUSH
8812: CALL 10578 0 1
// UpdateLuaVariables ( ) ;
8816: CALL 8833 0 0
// UpdateFactoryWaypoints ( ) ;
8820: CALL 23439 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8824: CALL 23696 0 0
// end ;
8828: LD_VAR 0 1
8832: RET
// function UpdateLuaVariables ( ) ; begin
8833: LD_INT 0
8835: PPUSH
// if globalGameSaveCounter then
8836: LD_EXP 30
8840: IFFALSE 8874
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8842: LD_ADDR_EXP 30
8846: PUSH
8847: LD_EXP 30
8851: PPUSH
8852: CALL 67477 0 1
8856: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8857: LD_STRING setGameSaveCounter(
8859: PUSH
8860: LD_EXP 30
8864: STR
8865: PUSH
8866: LD_STRING )
8868: STR
8869: PPUSH
8870: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8874: LD_STRING setGameDifficulty(
8876: PUSH
8877: LD_OWVAR 67
8881: STR
8882: PUSH
8883: LD_STRING )
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: LD_VAR 0 1
8895: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8896: LD_INT 0
8898: PPUSH
// if p2 = stream_mode then
8899: LD_VAR 0 2
8903: PUSH
8904: LD_INT 100
8906: EQUAL
8907: IFFALSE 9910
// begin if not StreamModeActive then
8909: LD_EXP 31
8913: NOT
8914: IFFALSE 8924
// StreamModeActive := true ;
8916: LD_ADDR_EXP 31
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// if p3 = 0 then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: IFFALSE 8938
// InitStreamMode ;
8934: CALL 10114 0 0
// if p3 = 1 then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: EQUAL
8946: IFFALSE 8956
// sRocket := true ;
8948: LD_ADDR_EXP 36
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// if p3 = 2 then
8956: LD_VAR 0 3
8960: PUSH
8961: LD_INT 2
8963: EQUAL
8964: IFFALSE 8974
// sSpeed := true ;
8966: LD_ADDR_EXP 35
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// if p3 = 3 then
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 3
8981: EQUAL
8982: IFFALSE 8992
// sEngine := true ;
8984: LD_ADDR_EXP 37
8988: PUSH
8989: LD_INT 1
8991: ST_TO_ADDR
// if p3 = 4 then
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 4
8999: EQUAL
9000: IFFALSE 9010
// sSpec := true ;
9002: LD_ADDR_EXP 34
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// if p3 = 5 then
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 5
9017: EQUAL
9018: IFFALSE 9028
// sLevel := true ;
9020: LD_ADDR_EXP 38
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// if p3 = 6 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 6
9035: EQUAL
9036: IFFALSE 9046
// sArmoury := true ;
9038: LD_ADDR_EXP 39
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// if p3 = 7 then
9046: LD_VAR 0 3
9050: PUSH
9051: LD_INT 7
9053: EQUAL
9054: IFFALSE 9064
// sRadar := true ;
9056: LD_ADDR_EXP 40
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// if p3 = 8 then
9064: LD_VAR 0 3
9068: PUSH
9069: LD_INT 8
9071: EQUAL
9072: IFFALSE 9082
// sBunker := true ;
9074: LD_ADDR_EXP 41
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// if p3 = 9 then
9082: LD_VAR 0 3
9086: PUSH
9087: LD_INT 9
9089: EQUAL
9090: IFFALSE 9100
// sHack := true ;
9092: LD_ADDR_EXP 42
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if p3 = 10 then
9100: LD_VAR 0 3
9104: PUSH
9105: LD_INT 10
9107: EQUAL
9108: IFFALSE 9118
// sFire := true ;
9110: LD_ADDR_EXP 43
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// if p3 = 11 then
9118: LD_VAR 0 3
9122: PUSH
9123: LD_INT 11
9125: EQUAL
9126: IFFALSE 9136
// sRefresh := true ;
9128: LD_ADDR_EXP 44
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// if p3 = 12 then
9136: LD_VAR 0 3
9140: PUSH
9141: LD_INT 12
9143: EQUAL
9144: IFFALSE 9154
// sExp := true ;
9146: LD_ADDR_EXP 45
9150: PUSH
9151: LD_INT 1
9153: ST_TO_ADDR
// if p3 = 13 then
9154: LD_VAR 0 3
9158: PUSH
9159: LD_INT 13
9161: EQUAL
9162: IFFALSE 9172
// sDepot := true ;
9164: LD_ADDR_EXP 46
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// if p3 = 14 then
9172: LD_VAR 0 3
9176: PUSH
9177: LD_INT 14
9179: EQUAL
9180: IFFALSE 9190
// sFlag := true ;
9182: LD_ADDR_EXP 47
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// if p3 = 15 then
9190: LD_VAR 0 3
9194: PUSH
9195: LD_INT 15
9197: EQUAL
9198: IFFALSE 9208
// sKamikadze := true ;
9200: LD_ADDR_EXP 55
9204: PUSH
9205: LD_INT 1
9207: ST_TO_ADDR
// if p3 = 16 then
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 16
9215: EQUAL
9216: IFFALSE 9226
// sTroll := true ;
9218: LD_ADDR_EXP 56
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// if p3 = 17 then
9226: LD_VAR 0 3
9230: PUSH
9231: LD_INT 17
9233: EQUAL
9234: IFFALSE 9244
// sSlow := true ;
9236: LD_ADDR_EXP 57
9240: PUSH
9241: LD_INT 1
9243: ST_TO_ADDR
// if p3 = 18 then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 18
9251: EQUAL
9252: IFFALSE 9262
// sLack := true ;
9254: LD_ADDR_EXP 58
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// if p3 = 19 then
9262: LD_VAR 0 3
9266: PUSH
9267: LD_INT 19
9269: EQUAL
9270: IFFALSE 9280
// sTank := true ;
9272: LD_ADDR_EXP 60
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// if p3 = 20 then
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 20
9287: EQUAL
9288: IFFALSE 9298
// sRemote := true ;
9290: LD_ADDR_EXP 61
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if p3 = 21 then
9298: LD_VAR 0 3
9302: PUSH
9303: LD_INT 21
9305: EQUAL
9306: IFFALSE 9316
// sPowell := true ;
9308: LD_ADDR_EXP 62
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// if p3 = 22 then
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 22
9323: EQUAL
9324: IFFALSE 9334
// sTeleport := true ;
9326: LD_ADDR_EXP 65
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// if p3 = 23 then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 23
9341: EQUAL
9342: IFFALSE 9352
// sOilTower := true ;
9344: LD_ADDR_EXP 67
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// if p3 = 24 then
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 24
9359: EQUAL
9360: IFFALSE 9370
// sShovel := true ;
9362: LD_ADDR_EXP 68
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// if p3 = 25 then
9370: LD_VAR 0 3
9374: PUSH
9375: LD_INT 25
9377: EQUAL
9378: IFFALSE 9388
// sSheik := true ;
9380: LD_ADDR_EXP 69
9384: PUSH
9385: LD_INT 1
9387: ST_TO_ADDR
// if p3 = 26 then
9388: LD_VAR 0 3
9392: PUSH
9393: LD_INT 26
9395: EQUAL
9396: IFFALSE 9406
// sEarthquake := true ;
9398: LD_ADDR_EXP 71
9402: PUSH
9403: LD_INT 1
9405: ST_TO_ADDR
// if p3 = 27 then
9406: LD_VAR 0 3
9410: PUSH
9411: LD_INT 27
9413: EQUAL
9414: IFFALSE 9424
// sAI := true ;
9416: LD_ADDR_EXP 72
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if p3 = 28 then
9424: LD_VAR 0 3
9428: PUSH
9429: LD_INT 28
9431: EQUAL
9432: IFFALSE 9442
// sCargo := true ;
9434: LD_ADDR_EXP 75
9438: PUSH
9439: LD_INT 1
9441: ST_TO_ADDR
// if p3 = 29 then
9442: LD_VAR 0 3
9446: PUSH
9447: LD_INT 29
9449: EQUAL
9450: IFFALSE 9460
// sDLaser := true ;
9452: LD_ADDR_EXP 76
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// if p3 = 30 then
9460: LD_VAR 0 3
9464: PUSH
9465: LD_INT 30
9467: EQUAL
9468: IFFALSE 9478
// sExchange := true ;
9470: LD_ADDR_EXP 77
9474: PUSH
9475: LD_INT 1
9477: ST_TO_ADDR
// if p3 = 31 then
9478: LD_VAR 0 3
9482: PUSH
9483: LD_INT 31
9485: EQUAL
9486: IFFALSE 9496
// sFac := true ;
9488: LD_ADDR_EXP 78
9492: PUSH
9493: LD_INT 1
9495: ST_TO_ADDR
// if p3 = 32 then
9496: LD_VAR 0 3
9500: PUSH
9501: LD_INT 32
9503: EQUAL
9504: IFFALSE 9514
// sPower := true ;
9506: LD_ADDR_EXP 79
9510: PUSH
9511: LD_INT 1
9513: ST_TO_ADDR
// if p3 = 33 then
9514: LD_VAR 0 3
9518: PUSH
9519: LD_INT 33
9521: EQUAL
9522: IFFALSE 9532
// sRandom := true ;
9524: LD_ADDR_EXP 80
9528: PUSH
9529: LD_INT 1
9531: ST_TO_ADDR
// if p3 = 34 then
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 34
9539: EQUAL
9540: IFFALSE 9550
// sShield := true ;
9542: LD_ADDR_EXP 81
9546: PUSH
9547: LD_INT 1
9549: ST_TO_ADDR
// if p3 = 35 then
9550: LD_VAR 0 3
9554: PUSH
9555: LD_INT 35
9557: EQUAL
9558: IFFALSE 9568
// sTime := true ;
9560: LD_ADDR_EXP 82
9564: PUSH
9565: LD_INT 1
9567: ST_TO_ADDR
// if p3 = 36 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_INT 36
9575: EQUAL
9576: IFFALSE 9586
// sTools := true ;
9578: LD_ADDR_EXP 83
9582: PUSH
9583: LD_INT 1
9585: ST_TO_ADDR
// if p3 = 101 then
9586: LD_VAR 0 3
9590: PUSH
9591: LD_INT 101
9593: EQUAL
9594: IFFALSE 9604
// sSold := true ;
9596: LD_ADDR_EXP 48
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// if p3 = 102 then
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 102
9611: EQUAL
9612: IFFALSE 9622
// sDiff := true ;
9614: LD_ADDR_EXP 49
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// if p3 = 103 then
9622: LD_VAR 0 3
9626: PUSH
9627: LD_INT 103
9629: EQUAL
9630: IFFALSE 9640
// sFog := true ;
9632: LD_ADDR_EXP 52
9636: PUSH
9637: LD_INT 1
9639: ST_TO_ADDR
// if p3 = 104 then
9640: LD_VAR 0 3
9644: PUSH
9645: LD_INT 104
9647: EQUAL
9648: IFFALSE 9658
// sReset := true ;
9650: LD_ADDR_EXP 53
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// if p3 = 105 then
9658: LD_VAR 0 3
9662: PUSH
9663: LD_INT 105
9665: EQUAL
9666: IFFALSE 9676
// sSun := true ;
9668: LD_ADDR_EXP 54
9672: PUSH
9673: LD_INT 1
9675: ST_TO_ADDR
// if p3 = 106 then
9676: LD_VAR 0 3
9680: PUSH
9681: LD_INT 106
9683: EQUAL
9684: IFFALSE 9694
// sTiger := true ;
9686: LD_ADDR_EXP 50
9690: PUSH
9691: LD_INT 1
9693: ST_TO_ADDR
// if p3 = 107 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 107
9701: EQUAL
9702: IFFALSE 9712
// sBomb := true ;
9704: LD_ADDR_EXP 51
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// if p3 = 108 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 108
9719: EQUAL
9720: IFFALSE 9730
// sWound := true ;
9722: LD_ADDR_EXP 59
9726: PUSH
9727: LD_INT 1
9729: ST_TO_ADDR
// if p3 = 109 then
9730: LD_VAR 0 3
9734: PUSH
9735: LD_INT 109
9737: EQUAL
9738: IFFALSE 9748
// sBetray := true ;
9740: LD_ADDR_EXP 63
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// if p3 = 110 then
9748: LD_VAR 0 3
9752: PUSH
9753: LD_INT 110
9755: EQUAL
9756: IFFALSE 9766
// sContamin := true ;
9758: LD_ADDR_EXP 64
9762: PUSH
9763: LD_INT 1
9765: ST_TO_ADDR
// if p3 = 111 then
9766: LD_VAR 0 3
9770: PUSH
9771: LD_INT 111
9773: EQUAL
9774: IFFALSE 9784
// sOil := true ;
9776: LD_ADDR_EXP 66
9780: PUSH
9781: LD_INT 1
9783: ST_TO_ADDR
// if p3 = 112 then
9784: LD_VAR 0 3
9788: PUSH
9789: LD_INT 112
9791: EQUAL
9792: IFFALSE 9802
// sStu := true ;
9794: LD_ADDR_EXP 70
9798: PUSH
9799: LD_INT 1
9801: ST_TO_ADDR
// if p3 = 113 then
9802: LD_VAR 0 3
9806: PUSH
9807: LD_INT 113
9809: EQUAL
9810: IFFALSE 9820
// sBazooka := true ;
9812: LD_ADDR_EXP 73
9816: PUSH
9817: LD_INT 1
9819: ST_TO_ADDR
// if p3 = 114 then
9820: LD_VAR 0 3
9824: PUSH
9825: LD_INT 114
9827: EQUAL
9828: IFFALSE 9838
// sMortar := true ;
9830: LD_ADDR_EXP 74
9834: PUSH
9835: LD_INT 1
9837: ST_TO_ADDR
// if p3 = 115 then
9838: LD_VAR 0 3
9842: PUSH
9843: LD_INT 115
9845: EQUAL
9846: IFFALSE 9856
// sRanger := true ;
9848: LD_ADDR_EXP 84
9852: PUSH
9853: LD_INT 1
9855: ST_TO_ADDR
// if p3 = 116 then
9856: LD_VAR 0 3
9860: PUSH
9861: LD_INT 116
9863: EQUAL
9864: IFFALSE 9874
// sComputer := true ;
9866: LD_ADDR_EXP 85
9870: PUSH
9871: LD_INT 1
9873: ST_TO_ADDR
// if p3 = 117 then
9874: LD_VAR 0 3
9878: PUSH
9879: LD_INT 117
9881: EQUAL
9882: IFFALSE 9892
// s30 := true ;
9884: LD_ADDR_EXP 86
9888: PUSH
9889: LD_INT 1
9891: ST_TO_ADDR
// if p3 = 118 then
9892: LD_VAR 0 3
9896: PUSH
9897: LD_INT 118
9899: EQUAL
9900: IFFALSE 9910
// s60 := true ;
9902: LD_ADDR_EXP 87
9906: PUSH
9907: LD_INT 1
9909: ST_TO_ADDR
// end ; if p2 = hack_mode then
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 101
9917: EQUAL
9918: IFFALSE 10046
// begin case p3 of 1 :
9920: LD_VAR 0 3
9924: PUSH
9925: LD_INT 1
9927: DOUBLE
9928: EQUAL
9929: IFTRUE 9933
9931: GO 9940
9933: POP
// hHackUnlimitedResources ; 2 :
9934: CALL 22185 0 0
9938: GO 10046
9940: LD_INT 2
9942: DOUBLE
9943: EQUAL
9944: IFTRUE 9948
9946: GO 9955
9948: POP
// hHackSetLevel10 ; 3 :
9949: CALL 22318 0 0
9953: GO 10046
9955: LD_INT 3
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9963
9961: GO 9970
9963: POP
// hHackSetLevel10YourUnits ; 4 :
9964: CALL 22403 0 0
9968: GO 10046
9970: LD_INT 4
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 9985
9978: POP
// hHackInvincible ; 5 :
9979: CALL 22851 0 0
9983: GO 10046
9985: LD_INT 5
9987: DOUBLE
9988: EQUAL
9989: IFTRUE 9993
9991: GO 10000
9993: POP
// hHackInvisible ; 6 :
9994: CALL 22962 0 0
9998: GO 10046
10000: LD_INT 6
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10008
10006: GO 10015
10008: POP
// hHackChangeYourSide ; 7 :
10009: CALL 23019 0 0
10013: GO 10046
10015: LD_INT 7
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10030
10023: POP
// hHackChangeUnitSide ; 8 :
10024: CALL 23061 0 0
10028: GO 10046
10030: LD_INT 8
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10045
10038: POP
// hHackFog ; end ;
10039: CALL 23162 0 0
10043: GO 10046
10045: POP
// end ; if p2 = game_save_mode then
10046: LD_VAR 0 2
10050: PUSH
10051: LD_INT 102
10053: EQUAL
10054: IFFALSE 10109
// begin if p3 = 1 then
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: IFFALSE 10076
// globalGameSaveCounter := p4 ;
10066: LD_ADDR_EXP 30
10070: PUSH
10071: LD_VAR 0 4
10075: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10076: LD_VAR 0 3
10080: PUSH
10081: LD_INT 2
10083: EQUAL
10084: PUSH
10085: LD_EXP 30
10089: AND
10090: IFFALSE 10109
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10092: LD_STRING setGameSaveCounter(
10094: PUSH
10095: LD_EXP 30
10099: STR
10100: PUSH
10101: LD_STRING )
10103: STR
10104: PPUSH
10105: CALL_OW 559
// end ; end ;
10109: LD_VAR 0 7
10113: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10114: LD_INT 0
10116: PPUSH
// streamModeActive := false ;
10117: LD_ADDR_EXP 31
10121: PUSH
10122: LD_INT 0
10124: ST_TO_ADDR
// normalCounter := 36 ;
10125: LD_ADDR_EXP 32
10129: PUSH
10130: LD_INT 36
10132: ST_TO_ADDR
// hardcoreCounter := 18 ;
10133: LD_ADDR_EXP 33
10137: PUSH
10138: LD_INT 18
10140: ST_TO_ADDR
// sRocket := false ;
10141: LD_ADDR_EXP 36
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// sSpeed := false ;
10149: LD_ADDR_EXP 35
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// sEngine := false ;
10157: LD_ADDR_EXP 37
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// sSpec := false ;
10165: LD_ADDR_EXP 34
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// sLevel := false ;
10173: LD_ADDR_EXP 38
10177: PUSH
10178: LD_INT 0
10180: ST_TO_ADDR
// sArmoury := false ;
10181: LD_ADDR_EXP 39
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
// sRadar := false ;
10189: LD_ADDR_EXP 40
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// sBunker := false ;
10197: LD_ADDR_EXP 41
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// sHack := false ;
10205: LD_ADDR_EXP 42
10209: PUSH
10210: LD_INT 0
10212: ST_TO_ADDR
// sFire := false ;
10213: LD_ADDR_EXP 43
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// sRefresh := false ;
10221: LD_ADDR_EXP 44
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// sExp := false ;
10229: LD_ADDR_EXP 45
10233: PUSH
10234: LD_INT 0
10236: ST_TO_ADDR
// sDepot := false ;
10237: LD_ADDR_EXP 46
10241: PUSH
10242: LD_INT 0
10244: ST_TO_ADDR
// sFlag := false ;
10245: LD_ADDR_EXP 47
10249: PUSH
10250: LD_INT 0
10252: ST_TO_ADDR
// sKamikadze := false ;
10253: LD_ADDR_EXP 55
10257: PUSH
10258: LD_INT 0
10260: ST_TO_ADDR
// sTroll := false ;
10261: LD_ADDR_EXP 56
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// sSlow := false ;
10269: LD_ADDR_EXP 57
10273: PUSH
10274: LD_INT 0
10276: ST_TO_ADDR
// sLack := false ;
10277: LD_ADDR_EXP 58
10281: PUSH
10282: LD_INT 0
10284: ST_TO_ADDR
// sTank := false ;
10285: LD_ADDR_EXP 60
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// sRemote := false ;
10293: LD_ADDR_EXP 61
10297: PUSH
10298: LD_INT 0
10300: ST_TO_ADDR
// sPowell := false ;
10301: LD_ADDR_EXP 62
10305: PUSH
10306: LD_INT 0
10308: ST_TO_ADDR
// sTeleport := false ;
10309: LD_ADDR_EXP 65
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// sOilTower := false ;
10317: LD_ADDR_EXP 67
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// sShovel := false ;
10325: LD_ADDR_EXP 68
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// sSheik := false ;
10333: LD_ADDR_EXP 69
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// sEarthquake := false ;
10341: LD_ADDR_EXP 71
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// sAI := false ;
10349: LD_ADDR_EXP 72
10353: PUSH
10354: LD_INT 0
10356: ST_TO_ADDR
// sCargo := false ;
10357: LD_ADDR_EXP 75
10361: PUSH
10362: LD_INT 0
10364: ST_TO_ADDR
// sDLaser := false ;
10365: LD_ADDR_EXP 76
10369: PUSH
10370: LD_INT 0
10372: ST_TO_ADDR
// sExchange := false ;
10373: LD_ADDR_EXP 77
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// sFac := false ;
10381: LD_ADDR_EXP 78
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// sPower := false ;
10389: LD_ADDR_EXP 79
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// sRandom := false ;
10397: LD_ADDR_EXP 80
10401: PUSH
10402: LD_INT 0
10404: ST_TO_ADDR
// sShield := false ;
10405: LD_ADDR_EXP 81
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
// sTime := false ;
10413: LD_ADDR_EXP 82
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// sTools := false ;
10421: LD_ADDR_EXP 83
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// sSold := false ;
10429: LD_ADDR_EXP 48
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
// sDiff := false ;
10437: LD_ADDR_EXP 49
10441: PUSH
10442: LD_INT 0
10444: ST_TO_ADDR
// sFog := false ;
10445: LD_ADDR_EXP 52
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
// sReset := false ;
10453: LD_ADDR_EXP 53
10457: PUSH
10458: LD_INT 0
10460: ST_TO_ADDR
// sSun := false ;
10461: LD_ADDR_EXP 54
10465: PUSH
10466: LD_INT 0
10468: ST_TO_ADDR
// sTiger := false ;
10469: LD_ADDR_EXP 50
10473: PUSH
10474: LD_INT 0
10476: ST_TO_ADDR
// sBomb := false ;
10477: LD_ADDR_EXP 51
10481: PUSH
10482: LD_INT 0
10484: ST_TO_ADDR
// sWound := false ;
10485: LD_ADDR_EXP 59
10489: PUSH
10490: LD_INT 0
10492: ST_TO_ADDR
// sBetray := false ;
10493: LD_ADDR_EXP 63
10497: PUSH
10498: LD_INT 0
10500: ST_TO_ADDR
// sContamin := false ;
10501: LD_ADDR_EXP 64
10505: PUSH
10506: LD_INT 0
10508: ST_TO_ADDR
// sOil := false ;
10509: LD_ADDR_EXP 66
10513: PUSH
10514: LD_INT 0
10516: ST_TO_ADDR
// sStu := false ;
10517: LD_ADDR_EXP 70
10521: PUSH
10522: LD_INT 0
10524: ST_TO_ADDR
// sBazooka := false ;
10525: LD_ADDR_EXP 73
10529: PUSH
10530: LD_INT 0
10532: ST_TO_ADDR
// sMortar := false ;
10533: LD_ADDR_EXP 74
10537: PUSH
10538: LD_INT 0
10540: ST_TO_ADDR
// sRanger := false ;
10541: LD_ADDR_EXP 84
10545: PUSH
10546: LD_INT 0
10548: ST_TO_ADDR
// sComputer := false ;
10549: LD_ADDR_EXP 85
10553: PUSH
10554: LD_INT 0
10556: ST_TO_ADDR
// s30 := false ;
10557: LD_ADDR_EXP 86
10561: PUSH
10562: LD_INT 0
10564: ST_TO_ADDR
// s60 := false ;
10565: LD_ADDR_EXP 87
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// end ;
10573: LD_VAR 0 1
10577: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10578: LD_INT 0
10580: PPUSH
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
10585: PPUSH
10586: PPUSH
// result := [ ] ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: EMPTY
10593: ST_TO_ADDR
// if campaign_id = 1 then
10594: LD_OWVAR 69
10598: PUSH
10599: LD_INT 1
10601: EQUAL
10602: IFFALSE 13768
// begin case mission_number of 1 :
10604: LD_OWVAR 70
10608: PUSH
10609: LD_INT 1
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10693
10617: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10618: LD_ADDR_VAR 0 2
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 4
10628: PUSH
10629: LD_INT 11
10631: PUSH
10632: LD_INT 12
10634: PUSH
10635: LD_INT 15
10637: PUSH
10638: LD_INT 16
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: LD_INT 23
10646: PUSH
10647: LD_INT 26
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 101
10663: PUSH
10664: LD_INT 102
10666: PUSH
10667: LD_INT 106
10669: PUSH
10670: LD_INT 116
10672: PUSH
10673: LD_INT 117
10675: PUSH
10676: LD_INT 118
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: ST_TO_ADDR
10691: GO 13766
10693: LD_INT 2
10695: DOUBLE
10696: EQUAL
10697: IFTRUE 10701
10699: GO 10785
10701: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_INT 2
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: LD_INT 11
10715: PUSH
10716: LD_INT 12
10718: PUSH
10719: LD_INT 15
10721: PUSH
10722: LD_INT 16
10724: PUSH
10725: LD_INT 22
10727: PUSH
10728: LD_INT 23
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 101
10747: PUSH
10748: LD_INT 102
10750: PUSH
10751: LD_INT 105
10753: PUSH
10754: LD_INT 106
10756: PUSH
10757: LD_INT 108
10759: PUSH
10760: LD_INT 116
10762: PUSH
10763: LD_INT 117
10765: PUSH
10766: LD_INT 118
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: ST_TO_ADDR
10783: GO 13766
10785: LD_INT 3
10787: DOUBLE
10788: EQUAL
10789: IFTRUE 10793
10791: GO 10881
10793: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10794: LD_ADDR_VAR 0 2
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 4
10804: PUSH
10805: LD_INT 5
10807: PUSH
10808: LD_INT 11
10810: PUSH
10811: LD_INT 12
10813: PUSH
10814: LD_INT 15
10816: PUSH
10817: LD_INT 16
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_INT 26
10825: PUSH
10826: LD_INT 36
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 102
10846: PUSH
10847: LD_INT 105
10849: PUSH
10850: LD_INT 106
10852: PUSH
10853: LD_INT 108
10855: PUSH
10856: LD_INT 116
10858: PUSH
10859: LD_INT 117
10861: PUSH
10862: LD_INT 118
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 13766
10881: LD_INT 4
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10985
10889: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10890: LD_ADDR_VAR 0 2
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 4
10900: PUSH
10901: LD_INT 5
10903: PUSH
10904: LD_INT 8
10906: PUSH
10907: LD_INT 11
10909: PUSH
10910: LD_INT 12
10912: PUSH
10913: LD_INT 15
10915: PUSH
10916: LD_INT 16
10918: PUSH
10919: LD_INT 22
10921: PUSH
10922: LD_INT 23
10924: PUSH
10925: LD_INT 26
10927: PUSH
10928: LD_INT 36
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 101
10947: PUSH
10948: LD_INT 102
10950: PUSH
10951: LD_INT 105
10953: PUSH
10954: LD_INT 106
10956: PUSH
10957: LD_INT 108
10959: PUSH
10960: LD_INT 116
10962: PUSH
10963: LD_INT 117
10965: PUSH
10966: LD_INT 118
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: ST_TO_ADDR
10983: GO 13766
10985: LD_INT 5
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11105
10993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: LD_INT 5
11007: PUSH
11008: LD_INT 6
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: LD_INT 11
11016: PUSH
11017: LD_INT 12
11019: PUSH
11020: LD_INT 15
11022: PUSH
11023: LD_INT 16
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_INT 23
11031: PUSH
11032: LD_INT 25
11034: PUSH
11035: LD_INT 26
11037: PUSH
11038: LD_INT 36
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 101
11059: PUSH
11060: LD_INT 102
11062: PUSH
11063: LD_INT 105
11065: PUSH
11066: LD_INT 106
11068: PUSH
11069: LD_INT 108
11071: PUSH
11072: LD_INT 109
11074: PUSH
11075: LD_INT 112
11077: PUSH
11078: LD_INT 116
11080: PUSH
11081: LD_INT 117
11083: PUSH
11084: LD_INT 118
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: ST_TO_ADDR
11103: GO 13766
11105: LD_INT 6
11107: DOUBLE
11108: EQUAL
11109: IFTRUE 11113
11111: GO 11245
11113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 4
11124: PUSH
11125: LD_INT 5
11127: PUSH
11128: LD_INT 6
11130: PUSH
11131: LD_INT 8
11133: PUSH
11134: LD_INT 11
11136: PUSH
11137: LD_INT 12
11139: PUSH
11140: LD_INT 15
11142: PUSH
11143: LD_INT 16
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 23
11157: PUSH
11158: LD_INT 25
11160: PUSH
11161: LD_INT 26
11163: PUSH
11164: LD_INT 30
11166: PUSH
11167: LD_INT 31
11169: PUSH
11170: LD_INT 32
11172: PUSH
11173: LD_INT 36
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 102
11202: PUSH
11203: LD_INT 105
11205: PUSH
11206: LD_INT 106
11208: PUSH
11209: LD_INT 108
11211: PUSH
11212: LD_INT 109
11214: PUSH
11215: LD_INT 112
11217: PUSH
11218: LD_INT 116
11220: PUSH
11221: LD_INT 117
11223: PUSH
11224: LD_INT 118
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: ST_TO_ADDR
11243: GO 13766
11245: LD_INT 7
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11365
11253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: LD_INT 4
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 7
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: LD_INT 12
11276: PUSH
11277: LD_INT 15
11279: PUSH
11280: LD_INT 16
11282: PUSH
11283: LD_INT 20
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 22
11291: PUSH
11292: LD_INT 23
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 26
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 101
11319: PUSH
11320: LD_INT 102
11322: PUSH
11323: LD_INT 103
11325: PUSH
11326: LD_INT 105
11328: PUSH
11329: LD_INT 106
11331: PUSH
11332: LD_INT 108
11334: PUSH
11335: LD_INT 112
11337: PUSH
11338: LD_INT 116
11340: PUSH
11341: LD_INT 117
11343: PUSH
11344: LD_INT 118
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: ST_TO_ADDR
11363: GO 13766
11365: LD_INT 8
11367: DOUBLE
11368: EQUAL
11369: IFTRUE 11373
11371: GO 11513
11373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 4
11384: PUSH
11385: LD_INT 5
11387: PUSH
11388: LD_INT 6
11390: PUSH
11391: LD_INT 7
11393: PUSH
11394: LD_INT 8
11396: PUSH
11397: LD_INT 11
11399: PUSH
11400: LD_INT 12
11402: PUSH
11403: LD_INT 15
11405: PUSH
11406: LD_INT 16
11408: PUSH
11409: LD_INT 20
11411: PUSH
11412: LD_INT 21
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_INT 23
11420: PUSH
11421: LD_INT 25
11423: PUSH
11424: LD_INT 26
11426: PUSH
11427: LD_INT 30
11429: PUSH
11430: LD_INT 31
11432: PUSH
11433: LD_INT 32
11435: PUSH
11436: LD_INT 36
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 101
11463: PUSH
11464: LD_INT 102
11466: PUSH
11467: LD_INT 103
11469: PUSH
11470: LD_INT 105
11472: PUSH
11473: LD_INT 106
11475: PUSH
11476: LD_INT 108
11478: PUSH
11479: LD_INT 109
11481: PUSH
11482: LD_INT 112
11484: PUSH
11485: LD_INT 116
11487: PUSH
11488: LD_INT 117
11490: PUSH
11491: LD_INT 118
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 13766
11513: LD_INT 9
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11669
11521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 6
11538: PUSH
11539: LD_INT 7
11541: PUSH
11542: LD_INT 8
11544: PUSH
11545: LD_INT 11
11547: PUSH
11548: LD_INT 12
11550: PUSH
11551: LD_INT 15
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: LD_INT 20
11559: PUSH
11560: LD_INT 21
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 23
11568: PUSH
11569: LD_INT 25
11571: PUSH
11572: LD_INT 26
11574: PUSH
11575: LD_INT 28
11577: PUSH
11578: LD_INT 30
11580: PUSH
11581: LD_INT 31
11583: PUSH
11584: LD_INT 32
11586: PUSH
11587: LD_INT 36
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 101
11615: PUSH
11616: LD_INT 102
11618: PUSH
11619: LD_INT 103
11621: PUSH
11622: LD_INT 105
11624: PUSH
11625: LD_INT 106
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 112
11636: PUSH
11637: LD_INT 114
11639: PUSH
11640: LD_INT 116
11642: PUSH
11643: LD_INT 117
11645: PUSH
11646: LD_INT 118
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: ST_TO_ADDR
11667: GO 13766
11669: LD_INT 10
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11873
11677: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11678: LD_ADDR_VAR 0 2
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: LD_INT 5
11691: PUSH
11692: LD_INT 6
11694: PUSH
11695: LD_INT 7
11697: PUSH
11698: LD_INT 8
11700: PUSH
11701: LD_INT 9
11703: PUSH
11704: LD_INT 10
11706: PUSH
11707: LD_INT 11
11709: PUSH
11710: LD_INT 12
11712: PUSH
11713: LD_INT 13
11715: PUSH
11716: LD_INT 14
11718: PUSH
11719: LD_INT 15
11721: PUSH
11722: LD_INT 16
11724: PUSH
11725: LD_INT 17
11727: PUSH
11728: LD_INT 18
11730: PUSH
11731: LD_INT 19
11733: PUSH
11734: LD_INT 20
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 22
11742: PUSH
11743: LD_INT 23
11745: PUSH
11746: LD_INT 24
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 26
11754: PUSH
11755: LD_INT 28
11757: PUSH
11758: LD_INT 30
11760: PUSH
11761: LD_INT 31
11763: PUSH
11764: LD_INT 32
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 101
11803: PUSH
11804: LD_INT 102
11806: PUSH
11807: LD_INT 103
11809: PUSH
11810: LD_INT 104
11812: PUSH
11813: LD_INT 105
11815: PUSH
11816: LD_INT 106
11818: PUSH
11819: LD_INT 107
11821: PUSH
11822: LD_INT 108
11824: PUSH
11825: LD_INT 109
11827: PUSH
11828: LD_INT 110
11830: PUSH
11831: LD_INT 111
11833: PUSH
11834: LD_INT 112
11836: PUSH
11837: LD_INT 114
11839: PUSH
11840: LD_INT 116
11842: PUSH
11843: LD_INT 117
11845: PUSH
11846: LD_INT 118
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: ST_TO_ADDR
11871: GO 13766
11873: LD_INT 11
11875: DOUBLE
11876: EQUAL
11877: IFTRUE 11881
11879: GO 12085
11881: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11882: LD_ADDR_VAR 0 2
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 3
11892: PUSH
11893: LD_INT 4
11895: PUSH
11896: LD_INT 5
11898: PUSH
11899: LD_INT 6
11901: PUSH
11902: LD_INT 7
11904: PUSH
11905: LD_INT 8
11907: PUSH
11908: LD_INT 9
11910: PUSH
11911: LD_INT 10
11913: PUSH
11914: LD_INT 11
11916: PUSH
11917: LD_INT 12
11919: PUSH
11920: LD_INT 13
11922: PUSH
11923: LD_INT 14
11925: PUSH
11926: LD_INT 15
11928: PUSH
11929: LD_INT 16
11931: PUSH
11932: LD_INT 17
11934: PUSH
11935: LD_INT 18
11937: PUSH
11938: LD_INT 19
11940: PUSH
11941: LD_INT 20
11943: PUSH
11944: LD_INT 21
11946: PUSH
11947: LD_INT 22
11949: PUSH
11950: LD_INT 23
11952: PUSH
11953: LD_INT 24
11955: PUSH
11956: LD_INT 25
11958: PUSH
11959: LD_INT 26
11961: PUSH
11962: LD_INT 28
11964: PUSH
11965: LD_INT 30
11967: PUSH
11968: LD_INT 31
11970: PUSH
11971: LD_INT 32
11973: PUSH
11974: LD_INT 34
11976: PUSH
11977: LD_INT 36
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 101
12015: PUSH
12016: LD_INT 102
12018: PUSH
12019: LD_INT 103
12021: PUSH
12022: LD_INT 104
12024: PUSH
12025: LD_INT 105
12027: PUSH
12028: LD_INT 106
12030: PUSH
12031: LD_INT 107
12033: PUSH
12034: LD_INT 108
12036: PUSH
12037: LD_INT 109
12039: PUSH
12040: LD_INT 110
12042: PUSH
12043: LD_INT 111
12045: PUSH
12046: LD_INT 112
12048: PUSH
12049: LD_INT 114
12051: PUSH
12052: LD_INT 116
12054: PUSH
12055: LD_INT 117
12057: PUSH
12058: LD_INT 118
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: ST_TO_ADDR
12083: GO 13766
12085: LD_INT 12
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12313
12093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: LD_INT 3
12107: PUSH
12108: LD_INT 4
12110: PUSH
12111: LD_INT 5
12113: PUSH
12114: LD_INT 6
12116: PUSH
12117: LD_INT 7
12119: PUSH
12120: LD_INT 8
12122: PUSH
12123: LD_INT 9
12125: PUSH
12126: LD_INT 10
12128: PUSH
12129: LD_INT 11
12131: PUSH
12132: LD_INT 12
12134: PUSH
12135: LD_INT 13
12137: PUSH
12138: LD_INT 14
12140: PUSH
12141: LD_INT 15
12143: PUSH
12144: LD_INT 16
12146: PUSH
12147: LD_INT 17
12149: PUSH
12150: LD_INT 18
12152: PUSH
12153: LD_INT 19
12155: PUSH
12156: LD_INT 20
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 24
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 27
12179: PUSH
12180: LD_INT 28
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 31
12188: PUSH
12189: LD_INT 32
12191: PUSH
12192: LD_INT 33
12194: PUSH
12195: LD_INT 34
12197: PUSH
12198: LD_INT 36
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 101
12239: PUSH
12240: LD_INT 102
12242: PUSH
12243: LD_INT 103
12245: PUSH
12246: LD_INT 104
12248: PUSH
12249: LD_INT 105
12251: PUSH
12252: LD_INT 106
12254: PUSH
12255: LD_INT 107
12257: PUSH
12258: LD_INT 108
12260: PUSH
12261: LD_INT 109
12263: PUSH
12264: LD_INT 110
12266: PUSH
12267: LD_INT 111
12269: PUSH
12270: LD_INT 112
12272: PUSH
12273: LD_INT 113
12275: PUSH
12276: LD_INT 114
12278: PUSH
12279: LD_INT 116
12281: PUSH
12282: LD_INT 117
12284: PUSH
12285: LD_INT 118
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
12311: GO 13766
12313: LD_INT 13
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12529
12321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12322: LD_ADDR_VAR 0 2
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 4
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: LD_INT 8
12344: PUSH
12345: LD_INT 9
12347: PUSH
12348: LD_INT 10
12350: PUSH
12351: LD_INT 11
12353: PUSH
12354: LD_INT 12
12356: PUSH
12357: LD_INT 14
12359: PUSH
12360: LD_INT 15
12362: PUSH
12363: LD_INT 16
12365: PUSH
12366: LD_INT 17
12368: PUSH
12369: LD_INT 18
12371: PUSH
12372: LD_INT 19
12374: PUSH
12375: LD_INT 20
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 22
12383: PUSH
12384: LD_INT 23
12386: PUSH
12387: LD_INT 24
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 27
12398: PUSH
12399: LD_INT 28
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 31
12407: PUSH
12408: LD_INT 32
12410: PUSH
12411: LD_INT 33
12413: PUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 36
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 101
12455: PUSH
12456: LD_INT 102
12458: PUSH
12459: LD_INT 103
12461: PUSH
12462: LD_INT 104
12464: PUSH
12465: LD_INT 105
12467: PUSH
12468: LD_INT 106
12470: PUSH
12471: LD_INT 107
12473: PUSH
12474: LD_INT 108
12476: PUSH
12477: LD_INT 109
12479: PUSH
12480: LD_INT 110
12482: PUSH
12483: LD_INT 111
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 113
12491: PUSH
12492: LD_INT 114
12494: PUSH
12495: LD_INT 116
12497: PUSH
12498: LD_INT 117
12500: PUSH
12501: LD_INT 118
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: ST_TO_ADDR
12527: GO 13766
12529: LD_INT 14
12531: DOUBLE
12532: EQUAL
12533: IFTRUE 12537
12535: GO 12761
12537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: LD_INT 4
12554: PUSH
12555: LD_INT 5
12557: PUSH
12558: LD_INT 6
12560: PUSH
12561: LD_INT 7
12563: PUSH
12564: LD_INT 8
12566: PUSH
12567: LD_INT 9
12569: PUSH
12570: LD_INT 10
12572: PUSH
12573: LD_INT 11
12575: PUSH
12576: LD_INT 12
12578: PUSH
12579: LD_INT 13
12581: PUSH
12582: LD_INT 14
12584: PUSH
12585: LD_INT 15
12587: PUSH
12588: LD_INT 16
12590: PUSH
12591: LD_INT 17
12593: PUSH
12594: LD_INT 18
12596: PUSH
12597: LD_INT 19
12599: PUSH
12600: LD_INT 20
12602: PUSH
12603: LD_INT 21
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 23
12611: PUSH
12612: LD_INT 24
12614: PUSH
12615: LD_INT 25
12617: PUSH
12618: LD_INT 26
12620: PUSH
12621: LD_INT 27
12623: PUSH
12624: LD_INT 28
12626: PUSH
12627: LD_INT 29
12629: PUSH
12630: LD_INT 30
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: LD_INT 32
12638: PUSH
12639: LD_INT 33
12641: PUSH
12642: LD_INT 34
12644: PUSH
12645: LD_INT 36
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 101
12687: PUSH
12688: LD_INT 102
12690: PUSH
12691: LD_INT 103
12693: PUSH
12694: LD_INT 104
12696: PUSH
12697: LD_INT 105
12699: PUSH
12700: LD_INT 106
12702: PUSH
12703: LD_INT 107
12705: PUSH
12706: LD_INT 108
12708: PUSH
12709: LD_INT 109
12711: PUSH
12712: LD_INT 110
12714: PUSH
12715: LD_INT 111
12717: PUSH
12718: LD_INT 112
12720: PUSH
12721: LD_INT 113
12723: PUSH
12724: LD_INT 114
12726: PUSH
12727: LD_INT 116
12729: PUSH
12730: LD_INT 117
12732: PUSH
12733: LD_INT 118
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: ST_TO_ADDR
12759: GO 13766
12761: LD_INT 15
12763: DOUBLE
12764: EQUAL
12765: IFTRUE 12769
12767: GO 12993
12769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12770: LD_ADDR_VAR 0 2
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: LD_INT 3
12783: PUSH
12784: LD_INT 4
12786: PUSH
12787: LD_INT 5
12789: PUSH
12790: LD_INT 6
12792: PUSH
12793: LD_INT 7
12795: PUSH
12796: LD_INT 8
12798: PUSH
12799: LD_INT 9
12801: PUSH
12802: LD_INT 10
12804: PUSH
12805: LD_INT 11
12807: PUSH
12808: LD_INT 12
12810: PUSH
12811: LD_INT 13
12813: PUSH
12814: LD_INT 14
12816: PUSH
12817: LD_INT 15
12819: PUSH
12820: LD_INT 16
12822: PUSH
12823: LD_INT 17
12825: PUSH
12826: LD_INT 18
12828: PUSH
12829: LD_INT 19
12831: PUSH
12832: LD_INT 20
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 22
12840: PUSH
12841: LD_INT 23
12843: PUSH
12844: LD_INT 24
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 26
12852: PUSH
12853: LD_INT 27
12855: PUSH
12856: LD_INT 28
12858: PUSH
12859: LD_INT 29
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 31
12867: PUSH
12868: LD_INT 32
12870: PUSH
12871: LD_INT 33
12873: PUSH
12874: LD_INT 34
12876: PUSH
12877: LD_INT 36
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 101
12919: PUSH
12920: LD_INT 102
12922: PUSH
12923: LD_INT 103
12925: PUSH
12926: LD_INT 104
12928: PUSH
12929: LD_INT 105
12931: PUSH
12932: LD_INT 106
12934: PUSH
12935: LD_INT 107
12937: PUSH
12938: LD_INT 108
12940: PUSH
12941: LD_INT 109
12943: PUSH
12944: LD_INT 110
12946: PUSH
12947: LD_INT 111
12949: PUSH
12950: LD_INT 112
12952: PUSH
12953: LD_INT 113
12955: PUSH
12956: LD_INT 114
12958: PUSH
12959: LD_INT 116
12961: PUSH
12962: LD_INT 117
12964: PUSH
12965: LD_INT 118
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: ST_TO_ADDR
12991: GO 13766
12993: LD_INT 16
12995: DOUBLE
12996: EQUAL
12997: IFTRUE 13001
12999: GO 13137
13001: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: LD_INT 4
13012: PUSH
13013: LD_INT 5
13015: PUSH
13016: LD_INT 7
13018: PUSH
13019: LD_INT 11
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: LD_INT 15
13027: PUSH
13028: LD_INT 16
13030: PUSH
13031: LD_INT 20
13033: PUSH
13034: LD_INT 21
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 23
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 26
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 32
13057: PUSH
13058: LD_INT 33
13060: PUSH
13061: LD_INT 34
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 101
13087: PUSH
13088: LD_INT 102
13090: PUSH
13091: LD_INT 103
13093: PUSH
13094: LD_INT 106
13096: PUSH
13097: LD_INT 108
13099: PUSH
13100: LD_INT 112
13102: PUSH
13103: LD_INT 113
13105: PUSH
13106: LD_INT 114
13108: PUSH
13109: LD_INT 116
13111: PUSH
13112: LD_INT 117
13114: PUSH
13115: LD_INT 118
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: ST_TO_ADDR
13135: GO 13766
13137: LD_INT 17
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13369
13145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 4
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: LD_INT 6
13168: PUSH
13169: LD_INT 7
13171: PUSH
13172: LD_INT 8
13174: PUSH
13175: LD_INT 9
13177: PUSH
13178: LD_INT 10
13180: PUSH
13181: LD_INT 11
13183: PUSH
13184: LD_INT 12
13186: PUSH
13187: LD_INT 13
13189: PUSH
13190: LD_INT 14
13192: PUSH
13193: LD_INT 15
13195: PUSH
13196: LD_INT 16
13198: PUSH
13199: LD_INT 17
13201: PUSH
13202: LD_INT 18
13204: PUSH
13205: LD_INT 19
13207: PUSH
13208: LD_INT 20
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 23
13219: PUSH
13220: LD_INT 24
13222: PUSH
13223: LD_INT 25
13225: PUSH
13226: LD_INT 26
13228: PUSH
13229: LD_INT 27
13231: PUSH
13232: LD_INT 28
13234: PUSH
13235: LD_INT 29
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 31
13243: PUSH
13244: LD_INT 32
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 36
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 101
13295: PUSH
13296: LD_INT 102
13298: PUSH
13299: LD_INT 103
13301: PUSH
13302: LD_INT 104
13304: PUSH
13305: LD_INT 105
13307: PUSH
13308: LD_INT 106
13310: PUSH
13311: LD_INT 107
13313: PUSH
13314: LD_INT 108
13316: PUSH
13317: LD_INT 109
13319: PUSH
13320: LD_INT 110
13322: PUSH
13323: LD_INT 111
13325: PUSH
13326: LD_INT 112
13328: PUSH
13329: LD_INT 113
13331: PUSH
13332: LD_INT 114
13334: PUSH
13335: LD_INT 116
13337: PUSH
13338: LD_INT 117
13340: PUSH
13341: LD_INT 118
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: ST_TO_ADDR
13367: GO 13766
13369: LD_INT 18
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13525
13377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: LD_INT 7
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 33
13436: PUSH
13437: LD_INT 34
13439: PUSH
13440: LD_INT 35
13442: PUSH
13443: LD_INT 36
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 103
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: LD_INT 112
13486: PUSH
13487: LD_INT 113
13489: PUSH
13490: LD_INT 114
13492: PUSH
13493: LD_INT 115
13495: PUSH
13496: LD_INT 116
13498: PUSH
13499: LD_INT 117
13501: PUSH
13502: LD_INT 118
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: ST_TO_ADDR
13523: GO 13766
13525: LD_INT 19
13527: DOUBLE
13528: EQUAL
13529: IFTRUE 13533
13531: GO 13765
13533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: LD_INT 2
13544: PUSH
13545: LD_INT 3
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: LD_INT 5
13553: PUSH
13554: LD_INT 6
13556: PUSH
13557: LD_INT 7
13559: PUSH
13560: LD_INT 8
13562: PUSH
13563: LD_INT 9
13565: PUSH
13566: LD_INT 10
13568: PUSH
13569: LD_INT 11
13571: PUSH
13572: LD_INT 12
13574: PUSH
13575: LD_INT 13
13577: PUSH
13578: LD_INT 14
13580: PUSH
13581: LD_INT 15
13583: PUSH
13584: LD_INT 16
13586: PUSH
13587: LD_INT 17
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 19
13595: PUSH
13596: LD_INT 20
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 22
13604: PUSH
13605: LD_INT 23
13607: PUSH
13608: LD_INT 24
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 26
13616: PUSH
13617: LD_INT 27
13619: PUSH
13620: LD_INT 28
13622: PUSH
13623: LD_INT 29
13625: PUSH
13626: LD_INT 30
13628: PUSH
13629: LD_INT 31
13631: PUSH
13632: LD_INT 32
13634: PUSH
13635: LD_INT 33
13637: PUSH
13638: LD_INT 34
13640: PUSH
13641: LD_INT 35
13643: PUSH
13644: LD_INT 36
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 101
13687: PUSH
13688: LD_INT 102
13690: PUSH
13691: LD_INT 103
13693: PUSH
13694: LD_INT 104
13696: PUSH
13697: LD_INT 105
13699: PUSH
13700: LD_INT 106
13702: PUSH
13703: LD_INT 107
13705: PUSH
13706: LD_INT 108
13708: PUSH
13709: LD_INT 109
13711: PUSH
13712: LD_INT 110
13714: PUSH
13715: LD_INT 111
13717: PUSH
13718: LD_INT 112
13720: PUSH
13721: LD_INT 113
13723: PUSH
13724: LD_INT 114
13726: PUSH
13727: LD_INT 115
13729: PUSH
13730: LD_INT 116
13732: PUSH
13733: LD_INT 117
13735: PUSH
13736: LD_INT 118
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: ST_TO_ADDR
13763: GO 13766
13765: POP
// end else
13766: GO 13997
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 3
13781: PUSH
13782: LD_INT 4
13784: PUSH
13785: LD_INT 5
13787: PUSH
13788: LD_INT 6
13790: PUSH
13791: LD_INT 7
13793: PUSH
13794: LD_INT 8
13796: PUSH
13797: LD_INT 9
13799: PUSH
13800: LD_INT 10
13802: PUSH
13803: LD_INT 11
13805: PUSH
13806: LD_INT 12
13808: PUSH
13809: LD_INT 13
13811: PUSH
13812: LD_INT 14
13814: PUSH
13815: LD_INT 15
13817: PUSH
13818: LD_INT 16
13820: PUSH
13821: LD_INT 17
13823: PUSH
13824: LD_INT 18
13826: PUSH
13827: LD_INT 19
13829: PUSH
13830: LD_INT 20
13832: PUSH
13833: LD_INT 21
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_INT 23
13841: PUSH
13842: LD_INT 24
13844: PUSH
13845: LD_INT 25
13847: PUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 27
13853: PUSH
13854: LD_INT 28
13856: PUSH
13857: LD_INT 29
13859: PUSH
13860: LD_INT 30
13862: PUSH
13863: LD_INT 31
13865: PUSH
13866: LD_INT 32
13868: PUSH
13869: LD_INT 33
13871: PUSH
13872: LD_INT 34
13874: PUSH
13875: LD_INT 35
13877: PUSH
13878: LD_INT 36
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 101
13921: PUSH
13922: LD_INT 102
13924: PUSH
13925: LD_INT 103
13927: PUSH
13928: LD_INT 104
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 107
13939: PUSH
13940: LD_INT 108
13942: PUSH
13943: LD_INT 109
13945: PUSH
13946: LD_INT 110
13948: PUSH
13949: LD_INT 111
13951: PUSH
13952: LD_INT 112
13954: PUSH
13955: LD_INT 113
13957: PUSH
13958: LD_INT 114
13960: PUSH
13961: LD_INT 115
13963: PUSH
13964: LD_INT 116
13966: PUSH
13967: LD_INT 117
13969: PUSH
13970: LD_INT 118
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
// if result then
13997: LD_VAR 0 2
14001: IFFALSE 14787
// begin normal :=  ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_STRING 
14010: ST_TO_ADDR
// hardcore :=  ;
14011: LD_ADDR_VAR 0 6
14015: PUSH
14016: LD_STRING 
14018: ST_TO_ADDR
// active :=  ;
14019: LD_ADDR_VAR 0 7
14023: PUSH
14024: LD_STRING 
14026: ST_TO_ADDR
// for i = 1 to normalCounter do
14027: LD_ADDR_VAR 0 8
14031: PUSH
14032: DOUBLE
14033: LD_INT 1
14035: DEC
14036: ST_TO_ADDR
14037: LD_EXP 32
14041: PUSH
14042: FOR_TO
14043: IFFALSE 14144
// begin tmp := 0 ;
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_STRING 0
14052: ST_TO_ADDR
// if result [ 1 ] then
14053: LD_VAR 0 2
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: IFFALSE 14126
// if result [ 1 ] [ 1 ] = i then
14063: LD_VAR 0 2
14067: PUSH
14068: LD_INT 1
14070: ARRAY
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PUSH
14076: LD_VAR 0 8
14080: EQUAL
14081: IFFALSE 14126
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14083: LD_ADDR_VAR 0 2
14087: PUSH
14088: LD_VAR 0 2
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: LD_VAR 0 2
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: PPUSH
14105: LD_INT 1
14107: PPUSH
14108: CALL_OW 3
14112: PPUSH
14113: CALL_OW 1
14117: ST_TO_ADDR
// tmp := 1 ;
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: LD_STRING 1
14125: ST_TO_ADDR
// end ; normal := normal & tmp ;
14126: LD_ADDR_VAR 0 5
14130: PUSH
14131: LD_VAR 0 5
14135: PUSH
14136: LD_VAR 0 3
14140: STR
14141: ST_TO_ADDR
// end ;
14142: GO 14042
14144: POP
14145: POP
// for i = 1 to hardcoreCounter do
14146: LD_ADDR_VAR 0 8
14150: PUSH
14151: DOUBLE
14152: LD_INT 1
14154: DEC
14155: ST_TO_ADDR
14156: LD_EXP 33
14160: PUSH
14161: FOR_TO
14162: IFFALSE 14267
// begin tmp := 0 ;
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_STRING 0
14171: ST_TO_ADDR
// if result [ 2 ] then
14172: LD_VAR 0 2
14176: PUSH
14177: LD_INT 2
14179: ARRAY
14180: IFFALSE 14249
// if result [ 2 ] [ 1 ] = 100 + i then
14182: LD_VAR 0 2
14186: PUSH
14187: LD_INT 2
14189: ARRAY
14190: PUSH
14191: LD_INT 1
14193: ARRAY
14194: PUSH
14195: LD_INT 100
14197: PUSH
14198: LD_VAR 0 8
14202: PLUS
14203: EQUAL
14204: IFFALSE 14249
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_INT 2
14218: PPUSH
14219: LD_VAR 0 2
14223: PUSH
14224: LD_INT 2
14226: ARRAY
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 3
14235: PPUSH
14236: CALL_OW 1
14240: ST_TO_ADDR
// tmp := 1 ;
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_STRING 1
14248: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14249: LD_ADDR_VAR 0 6
14253: PUSH
14254: LD_VAR 0 6
14258: PUSH
14259: LD_VAR 0 3
14263: STR
14264: ST_TO_ADDR
// end ;
14265: GO 14161
14267: POP
14268: POP
// if isGameLoad then
14269: LD_VAR 0 1
14273: IFFALSE 14748
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14275: LD_ADDR_VAR 0 4
14279: PUSH
14280: LD_EXP 36
14284: PUSH
14285: LD_EXP 35
14289: PUSH
14290: LD_EXP 37
14294: PUSH
14295: LD_EXP 34
14299: PUSH
14300: LD_EXP 38
14304: PUSH
14305: LD_EXP 39
14309: PUSH
14310: LD_EXP 40
14314: PUSH
14315: LD_EXP 41
14319: PUSH
14320: LD_EXP 42
14324: PUSH
14325: LD_EXP 43
14329: PUSH
14330: LD_EXP 44
14334: PUSH
14335: LD_EXP 45
14339: PUSH
14340: LD_EXP 46
14344: PUSH
14345: LD_EXP 47
14349: PUSH
14350: LD_EXP 55
14354: PUSH
14355: LD_EXP 56
14359: PUSH
14360: LD_EXP 57
14364: PUSH
14365: LD_EXP 58
14369: PUSH
14370: LD_EXP 60
14374: PUSH
14375: LD_EXP 61
14379: PUSH
14380: LD_EXP 62
14384: PUSH
14385: LD_EXP 65
14389: PUSH
14390: LD_EXP 67
14394: PUSH
14395: LD_EXP 68
14399: PUSH
14400: LD_EXP 69
14404: PUSH
14405: LD_EXP 71
14409: PUSH
14410: LD_EXP 72
14414: PUSH
14415: LD_EXP 75
14419: PUSH
14420: LD_EXP 76
14424: PUSH
14425: LD_EXP 77
14429: PUSH
14430: LD_EXP 78
14434: PUSH
14435: LD_EXP 79
14439: PUSH
14440: LD_EXP 80
14444: PUSH
14445: LD_EXP 81
14449: PUSH
14450: LD_EXP 82
14454: PUSH
14455: LD_EXP 83
14459: PUSH
14460: LD_EXP 48
14464: PUSH
14465: LD_EXP 49
14469: PUSH
14470: LD_EXP 52
14474: PUSH
14475: LD_EXP 53
14479: PUSH
14480: LD_EXP 54
14484: PUSH
14485: LD_EXP 50
14489: PUSH
14490: LD_EXP 51
14494: PUSH
14495: LD_EXP 59
14499: PUSH
14500: LD_EXP 63
14504: PUSH
14505: LD_EXP 64
14509: PUSH
14510: LD_EXP 66
14514: PUSH
14515: LD_EXP 70
14519: PUSH
14520: LD_EXP 73
14524: PUSH
14525: LD_EXP 74
14529: PUSH
14530: LD_EXP 84
14534: PUSH
14535: LD_EXP 85
14539: PUSH
14540: LD_EXP 86
14544: PUSH
14545: LD_EXP 87
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: ST_TO_ADDR
// tmp :=  ;
14606: LD_ADDR_VAR 0 3
14610: PUSH
14611: LD_STRING 
14613: ST_TO_ADDR
// for i = 1 to normalCounter do
14614: LD_ADDR_VAR 0 8
14618: PUSH
14619: DOUBLE
14620: LD_INT 1
14622: DEC
14623: ST_TO_ADDR
14624: LD_EXP 32
14628: PUSH
14629: FOR_TO
14630: IFFALSE 14666
// begin if flags [ i ] then
14632: LD_VAR 0 4
14636: PUSH
14637: LD_VAR 0 8
14641: ARRAY
14642: IFFALSE 14664
// tmp := tmp & i & ; ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_VAR 0 3
14653: PUSH
14654: LD_VAR 0 8
14658: STR
14659: PUSH
14660: LD_STRING ;
14662: STR
14663: ST_TO_ADDR
// end ;
14664: GO 14629
14666: POP
14667: POP
// for i = 1 to hardcoreCounter do
14668: LD_ADDR_VAR 0 8
14672: PUSH
14673: DOUBLE
14674: LD_INT 1
14676: DEC
14677: ST_TO_ADDR
14678: LD_EXP 33
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14730
// begin if flags [ normalCounter + i ] then
14686: LD_VAR 0 4
14690: PUSH
14691: LD_EXP 32
14695: PUSH
14696: LD_VAR 0 8
14700: PLUS
14701: ARRAY
14702: IFFALSE 14728
// tmp := tmp & ( 100 + i ) & ; ;
14704: LD_ADDR_VAR 0 3
14708: PUSH
14709: LD_VAR 0 3
14713: PUSH
14714: LD_INT 100
14716: PUSH
14717: LD_VAR 0 8
14721: PLUS
14722: STR
14723: PUSH
14724: LD_STRING ;
14726: STR
14727: ST_TO_ADDR
// end ;
14728: GO 14683
14730: POP
14731: POP
// if tmp then
14732: LD_VAR 0 3
14736: IFFALSE 14748
// active := tmp ;
14738: LD_ADDR_VAR 0 7
14742: PUSH
14743: LD_VAR 0 3
14747: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14748: LD_STRING getStreamItemsFromMission("
14750: PUSH
14751: LD_VAR 0 5
14755: STR
14756: PUSH
14757: LD_STRING ","
14759: STR
14760: PUSH
14761: LD_VAR 0 6
14765: STR
14766: PUSH
14767: LD_STRING ","
14769: STR
14770: PUSH
14771: LD_VAR 0 7
14775: STR
14776: PUSH
14777: LD_STRING ")
14779: STR
14780: PPUSH
14781: CALL_OW 559
// end else
14785: GO 14794
// ToLua ( getStreamItemsFromMission("","","") ) ;
14787: LD_STRING getStreamItemsFromMission("","","")
14789: PPUSH
14790: CALL_OW 559
// end ;
14794: LD_VAR 0 2
14798: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14799: LD_EXP 31
14803: PUSH
14804: LD_EXP 36
14808: AND
14809: IFFALSE 14933
14811: GO 14813
14813: DISABLE
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
// begin enable ;
14818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_INT 22
14826: PUSH
14827: LD_OWVAR 2
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: LD_INT 34
14841: PUSH
14842: LD_INT 7
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 34
14851: PUSH
14852: LD_INT 45
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 34
14861: PUSH
14862: LD_INT 28
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 34
14871: PUSH
14872: LD_INT 47
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ST_TO_ADDR
// if not tmp then
14895: LD_VAR 0 2
14899: NOT
14900: IFFALSE 14904
// exit ;
14902: GO 14933
// for i in tmp do
14904: LD_ADDR_VAR 0 1
14908: PUSH
14909: LD_VAR 0 2
14913: PUSH
14914: FOR_IN
14915: IFFALSE 14931
// begin SetLives ( i , 0 ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: LD_INT 0
14924: PPUSH
14925: CALL_OW 234
// end ;
14929: GO 14914
14931: POP
14932: POP
// end ;
14933: PPOPN 2
14935: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14936: LD_EXP 31
14940: PUSH
14941: LD_EXP 37
14945: AND
14946: IFFALSE 15030
14948: GO 14950
14950: DISABLE
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
// begin enable ;
14955: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 32
14975: PUSH
14976: LD_INT 3
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: ST_TO_ADDR
// if not tmp then
14992: LD_VAR 0 2
14996: NOT
14997: IFFALSE 15001
// exit ;
14999: GO 15030
// for i in tmp do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 2
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15028
// begin SetLives ( i , 0 ) ;
15014: LD_VAR 0 1
15018: PPUSH
15019: LD_INT 0
15021: PPUSH
15022: CALL_OW 234
// end ;
15026: GO 15011
15028: POP
15029: POP
// end ;
15030: PPOPN 2
15032: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15033: LD_EXP 31
15037: PUSH
15038: LD_EXP 34
15042: AND
15043: IFFALSE 15136
15045: GO 15047
15047: DISABLE
15048: LD_INT 0
15050: PPUSH
// begin enable ;
15051: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: LD_INT 22
15059: PUSH
15060: LD_OWVAR 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: LD_INT 25
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 9
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 25
15094: PUSH
15095: LD_INT 8
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 69
15116: PUSH
15117: FOR_IN
15118: IFFALSE 15134
// begin SetClass ( i , 1 ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 336
// end ;
15132: GO 15117
15134: POP
15135: POP
// end ;
15136: PPOPN 1
15138: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15139: LD_EXP 31
15143: PUSH
15144: LD_EXP 35
15148: AND
15149: PUSH
15150: LD_OWVAR 65
15154: PUSH
15155: LD_INT 7
15157: LESS
15158: AND
15159: IFFALSE 15173
15161: GO 15163
15163: DISABLE
// begin enable ;
15164: ENABLE
// game_speed := 7 ;
15165: LD_ADDR_OWVAR 65
15169: PUSH
15170: LD_INT 7
15172: ST_TO_ADDR
// end ;
15173: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15174: LD_EXP 31
15178: PUSH
15179: LD_EXP 38
15183: AND
15184: IFFALSE 15386
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
15193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15194: LD_ADDR_VAR 0 3
15198: PUSH
15199: LD_INT 81
15201: PUSH
15202: LD_OWVAR 2
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 69
15229: ST_TO_ADDR
// if not tmp then
15230: LD_VAR 0 3
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15386
// if tmp > 5 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 5
15246: GREATER
15247: IFFALSE 15259
// k := 5 else
15249: LD_ADDR_VAR 0 2
15253: PUSH
15254: LD_INT 5
15256: ST_TO_ADDR
15257: GO 15269
// k := tmp ;
15259: LD_ADDR_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: ST_TO_ADDR
// for i := 1 to k do
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: DOUBLE
15275: LD_INT 1
15277: DEC
15278: ST_TO_ADDR
15279: LD_VAR 0 2
15283: PUSH
15284: FOR_TO
15285: IFFALSE 15384
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_VAR 0 1
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 1
15302: PUSH
15303: LD_INT 4
15305: MOD
15306: PUSH
15307: LD_INT 1
15309: PLUS
15310: PPUSH
15311: CALL_OW 259
15315: PUSH
15316: LD_INT 10
15318: LESS
15319: IFFALSE 15382
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15321: LD_VAR 0 3
15325: PUSH
15326: LD_VAR 0 1
15330: ARRAY
15331: PPUSH
15332: LD_VAR 0 1
15336: PUSH
15337: LD_INT 4
15339: MOD
15340: PUSH
15341: LD_INT 1
15343: PLUS
15344: PPUSH
15345: LD_VAR 0 3
15349: PUSH
15350: LD_VAR 0 1
15354: ARRAY
15355: PPUSH
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 4
15363: MOD
15364: PUSH
15365: LD_INT 1
15367: PLUS
15368: PPUSH
15369: CALL_OW 259
15373: PUSH
15374: LD_INT 1
15376: PLUS
15377: PPUSH
15378: CALL_OW 237
15382: GO 15284
15384: POP
15385: POP
// end ;
15386: PPOPN 3
15388: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15389: LD_EXP 31
15393: PUSH
15394: LD_EXP 39
15398: AND
15399: IFFALSE 15419
15401: GO 15403
15403: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15404: LD_INT 4
15406: PPUSH
15407: LD_OWVAR 2
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: CALL_OW 324
15419: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15420: LD_EXP 31
15424: PUSH
15425: LD_EXP 68
15429: AND
15430: IFFALSE 15450
15432: GO 15434
15434: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15435: LD_INT 19
15437: PPUSH
15438: LD_OWVAR 2
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL_OW 324
15450: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15451: LD_EXP 31
15455: PUSH
15456: LD_EXP 40
15460: AND
15461: IFFALSE 15563
15463: GO 15465
15465: DISABLE
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
// begin enable ;
15470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_OWVAR 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 34
15493: PUSH
15494: LD_INT 11
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 34
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: ST_TO_ADDR
// if not tmp then
15525: LD_VAR 0 2
15529: NOT
15530: IFFALSE 15534
// exit ;
15532: GO 15563
// for i in tmp do
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: LD_VAR 0 2
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15561
// begin SetLives ( i , 0 ) ;
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 234
// end ;
15559: GO 15544
15561: POP
15562: POP
// end ;
15563: PPOPN 2
15565: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15566: LD_EXP 31
15570: PUSH
15571: LD_EXP 41
15575: AND
15576: IFFALSE 15596
15578: GO 15580
15580: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15581: LD_INT 32
15583: PPUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 0
15591: PPUSH
15592: CALL_OW 324
15596: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15597: LD_EXP 31
15601: PUSH
15602: LD_EXP 42
15606: AND
15607: IFFALSE 15788
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
15616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 33
15636: PUSH
15637: LD_INT 3
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PPUSH
15648: CALL_OW 69
15652: ST_TO_ADDR
// if not tmp then
15653: LD_VAR 0 2
15657: NOT
15658: IFFALSE 15662
// exit ;
15660: GO 15788
// side := 0 ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_INT 0
15669: ST_TO_ADDR
// for i := 1 to 8 do
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: DOUBLE
15676: LD_INT 1
15678: DEC
15679: ST_TO_ADDR
15680: LD_INT 8
15682: PUSH
15683: FOR_TO
15684: IFFALSE 15732
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15686: LD_OWVAR 2
15690: PUSH
15691: LD_VAR 0 1
15695: NONEQUAL
15696: PUSH
15697: LD_OWVAR 2
15701: PPUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 81
15711: PUSH
15712: LD_INT 2
15714: EQUAL
15715: AND
15716: IFFALSE 15730
// begin side := i ;
15718: LD_ADDR_VAR 0 3
15722: PUSH
15723: LD_VAR 0 1
15727: ST_TO_ADDR
// break ;
15728: GO 15732
// end ;
15730: GO 15683
15732: POP
15733: POP
// if not side then
15734: LD_VAR 0 3
15738: NOT
15739: IFFALSE 15743
// exit ;
15741: GO 15788
// for i := 1 to tmp do
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: DOUBLE
15749: LD_INT 1
15751: DEC
15752: ST_TO_ADDR
15753: LD_VAR 0 2
15757: PUSH
15758: FOR_TO
15759: IFFALSE 15786
// if Prob ( 60 ) then
15761: LD_INT 60
15763: PPUSH
15764: CALL_OW 13
15768: IFFALSE 15784
// SetSide ( i , side ) ;
15770: LD_VAR 0 1
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 235
15784: GO 15758
15786: POP
15787: POP
// end ;
15788: PPOPN 3
15790: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15791: LD_EXP 31
15795: PUSH
15796: LD_EXP 44
15800: AND
15801: IFFALSE 15920
15803: GO 15805
15805: DISABLE
15806: LD_INT 0
15808: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_OWVAR 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 21
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: LD_INT 23
15841: PUSH
15842: LD_INT 0
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: PPUSH
15858: CALL_OW 69
15862: PUSH
15863: FOR_IN
15864: IFFALSE 15918
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 257
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 3
15884: PUSH
15885: LD_INT 4
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: IN
15894: IFFALSE 15916
// SetClass ( un , rand ( 1 , 4 ) ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: LD_INT 4
15906: PPUSH
15907: CALL_OW 12
15911: PPUSH
15912: CALL_OW 336
15916: GO 15863
15918: POP
15919: POP
// end ;
15920: PPOPN 1
15922: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15923: LD_EXP 31
15927: PUSH
15928: LD_EXP 43
15932: AND
15933: IFFALSE 16012
15935: GO 15937
15937: DISABLE
15938: LD_INT 0
15940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15941: LD_ADDR_VAR 0 1
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_OWVAR 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 3
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not tmp then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15986: LD_VAR 0 1
15990: PUSH
15991: LD_INT 1
15993: PPUSH
15994: LD_VAR 0 1
15998: PPUSH
15999: CALL_OW 12
16003: ARRAY
16004: PPUSH
16005: LD_INT 100
16007: PPUSH
16008: CALL_OW 234
// end ;
16012: PPOPN 1
16014: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16015: LD_EXP 31
16019: PUSH
16020: LD_EXP 45
16024: AND
16025: IFFALSE 16123
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_INT 22
16040: PUSH
16041: LD_OWVAR 2
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 1
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 1
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16123
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16078: LD_VAR 0 1
16082: PUSH
16083: LD_INT 1
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 12
16095: ARRAY
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: LD_INT 4
16102: PPUSH
16103: CALL_OW 12
16107: PPUSH
16108: LD_INT 3000
16110: PPUSH
16111: LD_INT 9000
16113: PPUSH
16114: CALL_OW 12
16118: PPUSH
16119: CALL_OW 492
// end ;
16123: PPOPN 1
16125: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16126: LD_EXP 31
16130: PUSH
16131: LD_EXP 46
16135: AND
16136: IFFALSE 16156
16138: GO 16140
16140: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16141: LD_INT 1
16143: PPUSH
16144: LD_OWVAR 2
16148: PPUSH
16149: LD_INT 0
16151: PPUSH
16152: CALL_OW 324
16156: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16157: LD_EXP 31
16161: PUSH
16162: LD_EXP 47
16166: AND
16167: IFFALSE 16250
16169: GO 16171
16171: DISABLE
16172: LD_INT 0
16174: PPUSH
16175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_OWVAR 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 21
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 2
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16250
// for i in tmp do
16221: LD_ADDR_VAR 0 1
16225: PUSH
16226: LD_VAR 0 2
16230: PUSH
16231: FOR_IN
16232: IFFALSE 16248
// SetBLevel ( i , 10 ) ;
16234: LD_VAR 0 1
16238: PPUSH
16239: LD_INT 10
16241: PPUSH
16242: CALL_OW 241
16246: GO 16231
16248: POP
16249: POP
// end ;
16250: PPOPN 2
16252: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16253: LD_EXP 31
16257: PUSH
16258: LD_EXP 48
16262: AND
16263: IFFALSE 16374
16265: GO 16267
16267: DISABLE
16268: LD_INT 0
16270: PPUSH
16271: PPUSH
16272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_OWVAR 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: ST_TO_ADDR
// if not tmp then
16309: LD_VAR 0 3
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 16374
// un := tmp [ rand ( 1 , tmp ) ] ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_VAR 0 3
16327: PUSH
16328: LD_INT 1
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: CALL_OW 12
16340: ARRAY
16341: ST_TO_ADDR
// if Crawls ( un ) then
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 318
16351: IFFALSE 16362
// ComWalk ( un ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16362: LD_VAR 0 2
16366: PPUSH
16367: LD_INT 5
16369: PPUSH
16370: CALL_OW 336
// end ;
16374: PPOPN 3
16376: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16377: LD_EXP 31
16381: PUSH
16382: LD_EXP 49
16386: AND
16387: PUSH
16388: LD_OWVAR 67
16392: PUSH
16393: LD_INT 4
16395: LESS
16396: AND
16397: IFFALSE 16416
16399: GO 16401
16401: DISABLE
// begin Difficulty := Difficulty + 1 ;
16402: LD_ADDR_OWVAR 67
16406: PUSH
16407: LD_OWVAR 67
16411: PUSH
16412: LD_INT 1
16414: PLUS
16415: ST_TO_ADDR
// end ;
16416: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16417: LD_EXP 31
16421: PUSH
16422: LD_EXP 50
16426: AND
16427: IFFALSE 16530
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
// begin for i := 1 to 5 do
16435: LD_ADDR_VAR 0 1
16439: PUSH
16440: DOUBLE
16441: LD_INT 1
16443: DEC
16444: ST_TO_ADDR
16445: LD_INT 5
16447: PUSH
16448: FOR_TO
16449: IFFALSE 16528
// begin uc_nation := nation_nature ;
16451: LD_ADDR_OWVAR 21
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// uc_side := 0 ;
16459: LD_ADDR_OWVAR 20
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16467: LD_ADDR_OWVAR 29
16471: PUSH
16472: LD_INT 12
16474: PUSH
16475: LD_INT 12
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: ST_TO_ADDR
// hc_agressivity := 20 ;
16482: LD_ADDR_OWVAR 35
16486: PUSH
16487: LD_INT 20
16489: ST_TO_ADDR
// hc_class := class_tiger ;
16490: LD_ADDR_OWVAR 28
16494: PUSH
16495: LD_INT 14
16497: ST_TO_ADDR
// hc_gallery :=  ;
16498: LD_ADDR_OWVAR 33
16502: PUSH
16503: LD_STRING 
16505: ST_TO_ADDR
// hc_name :=  ;
16506: LD_ADDR_OWVAR 26
16510: PUSH
16511: LD_STRING 
16513: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16514: CALL_OW 44
16518: PPUSH
16519: LD_INT 0
16521: PPUSH
16522: CALL_OW 51
// end ;
16526: GO 16448
16528: POP
16529: POP
// end ;
16530: PPOPN 1
16532: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16533: LD_EXP 31
16537: PUSH
16538: LD_EXP 51
16542: AND
16543: IFFALSE 16552
16545: GO 16547
16547: DISABLE
// StreamSibBomb ;
16548: CALL 16553 0 0
16552: END
// export function StreamSibBomb ; var i , x , y ; begin
16553: LD_INT 0
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
// result := false ;
16559: LD_ADDR_VAR 0 1
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// for i := 1 to 16 do
16567: LD_ADDR_VAR 0 2
16571: PUSH
16572: DOUBLE
16573: LD_INT 1
16575: DEC
16576: ST_TO_ADDR
16577: LD_INT 16
16579: PUSH
16580: FOR_TO
16581: IFFALSE 16780
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 10
16590: PUSH
16591: LD_INT 20
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 40
16599: PUSH
16600: LD_INT 50
16602: PUSH
16603: LD_INT 60
16605: PUSH
16606: LD_INT 70
16608: PUSH
16609: LD_INT 80
16611: PUSH
16612: LD_INT 90
16614: PUSH
16615: LD_INT 100
16617: PUSH
16618: LD_INT 110
16620: PUSH
16621: LD_INT 120
16623: PUSH
16624: LD_INT 130
16626: PUSH
16627: LD_INT 140
16629: PUSH
16630: LD_INT 150
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_INT 15
16655: PPUSH
16656: CALL_OW 12
16660: ARRAY
16661: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_INT 10
16669: PUSH
16670: LD_INT 20
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: LD_INT 40
16678: PUSH
16679: LD_INT 50
16681: PUSH
16682: LD_INT 60
16684: PUSH
16685: LD_INT 70
16687: PUSH
16688: LD_INT 80
16690: PUSH
16691: LD_INT 90
16693: PUSH
16694: LD_INT 100
16696: PUSH
16697: LD_INT 110
16699: PUSH
16700: LD_INT 120
16702: PUSH
16703: LD_INT 130
16705: PUSH
16706: LD_INT 140
16708: PUSH
16709: LD_INT 150
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 1
16731: PPUSH
16732: LD_INT 15
16734: PPUSH
16735: CALL_OW 12
16739: ARRAY
16740: ST_TO_ADDR
// if ValidHex ( x , y ) then
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_VAR 0 4
16750: PPUSH
16751: CALL_OW 488
16755: IFFALSE 16778
// begin result := [ x , y ] ;
16757: LD_ADDR_VAR 0 1
16761: PUSH
16762: LD_VAR 0 3
16766: PUSH
16767: LD_VAR 0 4
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: ST_TO_ADDR
// break ;
16776: GO 16780
// end ; end ;
16778: GO 16580
16780: POP
16781: POP
// if result then
16782: LD_VAR 0 1
16786: IFFALSE 16846
// begin ToLua ( playSibBomb() ) ;
16788: LD_STRING playSibBomb()
16790: PPUSH
16791: CALL_OW 559
// wait ( 0 0$14 ) ;
16795: LD_INT 490
16797: PPUSH
16798: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 1
16809: ARRAY
16810: PPUSH
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 2
16818: ARRAY
16819: PPUSH
16820: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 1
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 1
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: PPUSH
16842: CALL_OW 429
// end ; end ;
16846: LD_VAR 0 1
16850: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16851: LD_EXP 31
16855: PUSH
16856: LD_EXP 53
16860: AND
16861: IFFALSE 16873
16863: GO 16865
16865: DISABLE
// YouLost (  ) ;
16866: LD_STRING 
16868: PPUSH
16869: CALL_OW 104
16873: END
// every 0 0$1 trigger StreamModeActive and sFog do
16874: LD_EXP 31
16878: PUSH
16879: LD_EXP 52
16883: AND
16884: IFFALSE 16898
16886: GO 16888
16888: DISABLE
// FogOff ( your_side ) ;
16889: LD_OWVAR 2
16893: PPUSH
16894: CALL_OW 344
16898: END
// every 0 0$1 trigger StreamModeActive and sSun do
16899: LD_EXP 31
16903: PUSH
16904: LD_EXP 54
16908: AND
16909: IFFALSE 16937
16911: GO 16913
16913: DISABLE
// begin solar_recharge_percent := 0 ;
16914: LD_ADDR_OWVAR 79
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16922: LD_INT 10500
16924: PPUSH
16925: CALL_OW 67
// solar_recharge_percent := 100 ;
16929: LD_ADDR_OWVAR 79
16933: PUSH
16934: LD_INT 100
16936: ST_TO_ADDR
// end ;
16937: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16938: LD_EXP 31
16942: PUSH
16943: LD_EXP 55
16947: AND
16948: IFFALSE 17187
16950: GO 16952
16952: DISABLE
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
16957: PPUSH
// begin tmp := [ ] ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: EMPTY
16964: ST_TO_ADDR
// for i := 1 to 6 do
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: DOUBLE
16971: LD_INT 1
16973: DEC
16974: ST_TO_ADDR
16975: LD_INT 6
16977: PUSH
16978: FOR_TO
16979: IFFALSE 17084
// begin uc_nation := nation_nature ;
16981: LD_ADDR_OWVAR 21
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// uc_side := 0 ;
16989: LD_ADDR_OWVAR 20
16993: PUSH
16994: LD_INT 0
16996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16997: LD_ADDR_OWVAR 29
17001: PUSH
17002: LD_INT 12
17004: PUSH
17005: LD_INT 12
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: ST_TO_ADDR
// hc_agressivity := 20 ;
17012: LD_ADDR_OWVAR 35
17016: PUSH
17017: LD_INT 20
17019: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17020: LD_ADDR_OWVAR 28
17024: PUSH
17025: LD_INT 17
17027: ST_TO_ADDR
// hc_gallery :=  ;
17028: LD_ADDR_OWVAR 33
17032: PUSH
17033: LD_STRING 
17035: ST_TO_ADDR
// hc_name :=  ;
17036: LD_ADDR_OWVAR 26
17040: PUSH
17041: LD_STRING 
17043: ST_TO_ADDR
// un := CreateHuman ;
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: CALL_OW 44
17053: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17054: LD_VAR 0 2
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 51
// tmp := tmp ^ un ;
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: LD_VAR 0 3
17075: PUSH
17076: LD_VAR 0 2
17080: ADD
17081: ST_TO_ADDR
// end ;
17082: GO 16978
17084: POP
17085: POP
// repeat wait ( 0 0$1 ) ;
17086: LD_INT 35
17088: PPUSH
17089: CALL_OW 67
// for un in tmp do
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: LD_VAR 0 3
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17178
// begin if IsDead ( un ) then
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 301
17115: IFFALSE 17135
// begin tmp := tmp diff un ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_VAR 0 3
17126: PUSH
17127: LD_VAR 0 2
17131: DIFF
17132: ST_TO_ADDR
// continue ;
17133: GO 17103
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17135: LD_VAR 0 2
17139: PPUSH
17140: LD_INT 3
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 2
17166: PPUSH
17167: CALL_OW 74
17171: PPUSH
17172: CALL_OW 115
// end ;
17176: GO 17103
17178: POP
17179: POP
// until not tmp ;
17180: LD_VAR 0 3
17184: NOT
17185: IFFALSE 17086
// end ;
17187: PPOPN 3
17189: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17190: LD_EXP 31
17194: PUSH
17195: LD_EXP 56
17199: AND
17200: IFFALSE 17254
17202: GO 17204
17204: DISABLE
// begin ToLua ( displayTroll(); ) ;
17205: LD_STRING displayTroll();
17207: PPUSH
17208: CALL_OW 559
// wait ( 3 3$00 ) ;
17212: LD_INT 6300
17214: PPUSH
17215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17219: LD_STRING hideTroll();
17221: PPUSH
17222: CALL_OW 559
// wait ( 1 1$00 ) ;
17226: LD_INT 2100
17228: PPUSH
17229: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17233: LD_STRING displayTroll();
17235: PPUSH
17236: CALL_OW 559
// wait ( 1 1$00 ) ;
17240: LD_INT 2100
17242: PPUSH
17243: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17247: LD_STRING hideTroll();
17249: PPUSH
17250: CALL_OW 559
// end ;
17254: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17255: LD_EXP 31
17259: PUSH
17260: LD_EXP 57
17264: AND
17265: IFFALSE 17328
17267: GO 17269
17269: DISABLE
17270: LD_INT 0
17272: PPUSH
// begin p := 0 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 0
17280: ST_TO_ADDR
// repeat game_speed := 1 ;
17281: LD_ADDR_OWVAR 65
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17289: LD_INT 35
17291: PPUSH
17292: CALL_OW 67
// p := p + 1 ;
17296: LD_ADDR_VAR 0 1
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 1
17308: PLUS
17309: ST_TO_ADDR
// until p >= 60 ;
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 60
17317: GREATEREQUAL
17318: IFFALSE 17281
// game_speed := 4 ;
17320: LD_ADDR_OWVAR 65
17324: PUSH
17325: LD_INT 4
17327: ST_TO_ADDR
// end ;
17328: PPOPN 1
17330: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17331: LD_EXP 31
17335: PUSH
17336: LD_EXP 58
17340: AND
17341: IFFALSE 17487
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
17349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17350: LD_ADDR_VAR 0 1
17354: PUSH
17355: LD_INT 22
17357: PUSH
17358: LD_OWVAR 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 30
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 30
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: ST_TO_ADDR
// if not depot then
17404: LD_VAR 0 1
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17487
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17413: LD_ADDR_VAR 0 2
17417: PUSH
17418: LD_VAR 0 1
17422: PUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL_OW 12
17435: ARRAY
17436: PPUSH
17437: CALL_OW 274
17441: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17442: LD_VAR 0 2
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 0
17452: PPUSH
17453: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17457: LD_VAR 0 2
17461: PPUSH
17462: LD_INT 2
17464: PPUSH
17465: LD_INT 0
17467: PPUSH
17468: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17472: LD_VAR 0 2
17476: PPUSH
17477: LD_INT 3
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: CALL_OW 277
// end ;
17487: PPOPN 2
17489: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17490: LD_EXP 31
17494: PUSH
17495: LD_EXP 59
17499: AND
17500: IFFALSE 17597
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 21
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: LD_INT 23
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// if not tmp then
17562: LD_VAR 0 1
17566: NOT
17567: IFFALSE 17571
// exit ;
17569: GO 17597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 12
17588: ARRAY
17589: PPUSH
17590: LD_INT 200
17592: PPUSH
17593: CALL_OW 234
// end ;
17597: PPOPN 1
17599: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17600: LD_EXP 31
17604: PUSH
17605: LD_EXP 60
17609: AND
17610: IFFALSE 17689
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17618: LD_ADDR_VAR 0 1
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_OWVAR 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 21
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: ST_TO_ADDR
// if not tmp then
17654: LD_VAR 0 1
17658: NOT
17659: IFFALSE 17663
// exit ;
17661: GO 17689
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17663: LD_VAR 0 1
17667: PUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 12
17680: ARRAY
17681: PPUSH
17682: LD_INT 60
17684: PPUSH
17685: CALL_OW 234
// end ;
17689: PPOPN 1
17691: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17692: LD_EXP 31
17696: PUSH
17697: LD_EXP 61
17701: AND
17702: IFFALSE 17801
17704: GO 17706
17706: DISABLE
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
// begin enable ;
17711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_OWVAR 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 61
17731: PUSH
17732: EMPTY
17733: LIST
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: PPUSH
17750: CALL_OW 69
17754: ST_TO_ADDR
// if not tmp then
17755: LD_VAR 0 1
17759: NOT
17760: IFFALSE 17764
// exit ;
17762: GO 17801
// for i in tmp do
17764: LD_ADDR_VAR 0 2
17768: PUSH
17769: LD_VAR 0 1
17773: PUSH
17774: FOR_IN
17775: IFFALSE 17799
// if IsControledBy ( i ) then
17777: LD_VAR 0 2
17781: PPUSH
17782: CALL_OW 312
17786: IFFALSE 17797
// ComUnlink ( i ) ;
17788: LD_VAR 0 2
17792: PPUSH
17793: CALL_OW 136
17797: GO 17774
17799: POP
17800: POP
// end ;
17801: PPOPN 2
17803: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17804: LD_EXP 31
17808: PUSH
17809: LD_EXP 62
17813: AND
17814: IFFALSE 17954
17816: GO 17818
17818: DISABLE
17819: LD_INT 0
17821: PPUSH
17822: PPUSH
// begin ToLua ( displayPowell(); ) ;
17823: LD_STRING displayPowell();
17825: PPUSH
17826: CALL_OW 559
// uc_side := 0 ;
17830: LD_ADDR_OWVAR 20
17834: PUSH
17835: LD_INT 0
17837: ST_TO_ADDR
// uc_nation := 2 ;
17838: LD_ADDR_OWVAR 21
17842: PUSH
17843: LD_INT 2
17845: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17846: LD_ADDR_OWVAR 37
17850: PUSH
17851: LD_INT 14
17853: ST_TO_ADDR
// vc_engine := engine_siberite ;
17854: LD_ADDR_OWVAR 39
17858: PUSH
17859: LD_INT 3
17861: ST_TO_ADDR
// vc_control := control_apeman ;
17862: LD_ADDR_OWVAR 38
17866: PUSH
17867: LD_INT 5
17869: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17870: LD_ADDR_OWVAR 40
17874: PUSH
17875: LD_INT 29
17877: ST_TO_ADDR
// un := CreateVehicle ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: CALL_OW 45
17887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17900: LD_INT 35
17902: PPUSH
17903: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PPUSH
17924: CALL_OW 69
17928: PPUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: CALL_OW 74
17938: PPUSH
17939: CALL_OW 115
// until IsDead ( un ) ;
17943: LD_VAR 0 2
17947: PPUSH
17948: CALL_OW 301
17952: IFFALSE 17900
// end ;
17954: PPOPN 2
17956: END
// every 0 0$1 trigger StreamModeActive and sStu do
17957: LD_EXP 31
17961: PUSH
17962: LD_EXP 70
17966: AND
17967: IFFALSE 17983
17969: GO 17971
17971: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17972: LD_STRING displayStucuk();
17974: PPUSH
17975: CALL_OW 559
// ResetFog ;
17979: CALL_OW 335
// end ;
17983: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17984: LD_EXP 31
17988: PUSH
17989: LD_EXP 63
17993: AND
17994: IFFALSE 18135
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18003: LD_ADDR_VAR 0 2
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18135
// un := tmp [ rand ( 1 , tmp ) ] ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_VAR 0 2
18057: PUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_VAR 0 2
18065: PPUSH
18066: CALL_OW 12
18070: ARRAY
18071: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_INT 0
18079: PPUSH
18080: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_OWVAR 3
18093: PUSH
18094: LD_VAR 0 1
18098: DIFF
18099: PPUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 74
18109: PPUSH
18110: CALL_OW 115
// wait ( 0 0$20 ) ;
18114: LD_INT 700
18116: PPUSH
18117: CALL_OW 67
// SetSide ( un , your_side ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_OWVAR 2
18130: PPUSH
18131: CALL_OW 235
// end ;
18135: PPOPN 2
18137: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18138: LD_EXP 31
18142: PUSH
18143: LD_EXP 64
18147: AND
18148: IFFALSE 18254
18150: GO 18152
18152: DISABLE
18153: LD_INT 0
18155: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18156: LD_ADDR_VAR 0 1
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_OWVAR 2
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 30
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: ST_TO_ADDR
// if not depot then
18210: LD_VAR 0 1
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18254
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: CALL_OW 250
18232: PPUSH
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 1
18240: ARRAY
18241: PPUSH
18242: CALL_OW 251
18246: PPUSH
18247: LD_INT 70
18249: PPUSH
18250: CALL_OW 495
// end ;
18254: PPOPN 1
18256: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18257: LD_EXP 31
18261: PUSH
18262: LD_EXP 65
18266: AND
18267: IFFALSE 18478
18269: GO 18271
18271: DISABLE
18272: LD_INT 0
18274: PPUSH
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_OWVAR 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 21
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 69
18314: ST_TO_ADDR
// if not tmp then
18315: LD_VAR 0 5
18319: NOT
18320: IFFALSE 18324
// exit ;
18322: GO 18478
// for i in tmp do
18324: LD_ADDR_VAR 0 1
18328: PUSH
18329: LD_VAR 0 5
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18476
// begin d := rand ( 0 , 5 ) ;
18337: LD_ADDR_VAR 0 4
18341: PUSH
18342: LD_INT 0
18344: PPUSH
18345: LD_INT 5
18347: PPUSH
18348: CALL_OW 12
18352: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 250
18367: PPUSH
18368: LD_VAR 0 4
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: LD_INT 12
18378: PPUSH
18379: CALL_OW 12
18383: PPUSH
18384: CALL_OW 272
18388: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18389: LD_ADDR_VAR 0 3
18393: PUSH
18394: LD_VAR 0 1
18398: PPUSH
18399: CALL_OW 251
18403: PPUSH
18404: LD_VAR 0 4
18408: PPUSH
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 12
18414: PPUSH
18415: CALL_OW 12
18419: PPUSH
18420: CALL_OW 273
18424: ST_TO_ADDR
// if ValidHex ( x , y ) then
18425: LD_VAR 0 2
18429: PPUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: CALL_OW 488
18439: IFFALSE 18474
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_INT 3
18458: PPUSH
18459: LD_INT 6
18461: PPUSH
18462: CALL_OW 12
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 483
// end ;
18474: GO 18334
18476: POP
18477: POP
// end ;
18478: PPOPN 5
18480: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18481: LD_EXP 31
18485: PUSH
18486: LD_EXP 66
18490: AND
18491: IFFALSE 18585
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18500: LD_ADDR_VAR 0 2
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_OWVAR 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 32
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 21
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 2
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18585
// for i in tmp do
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_VAR 0 2
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18583
// SetFuel ( i , 0 ) ;
18569: LD_VAR 0 1
18573: PPUSH
18574: LD_INT 0
18576: PPUSH
18577: CALL_OW 240
18581: GO 18566
18583: POP
18584: POP
// end ;
18585: PPOPN 2
18587: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18588: LD_EXP 31
18592: PUSH
18593: LD_EXP 67
18597: AND
18598: IFFALSE 18664
18600: GO 18602
18602: DISABLE
18603: LD_INT 0
18605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_OWVAR 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 30
18625: PUSH
18626: LD_INT 29
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 69
18641: ST_TO_ADDR
// if not tmp then
18642: LD_VAR 0 1
18646: NOT
18647: IFFALSE 18651
// exit ;
18649: GO 18664
// DestroyUnit ( tmp [ 1 ] ) ;
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: CALL_OW 65
// end ;
18664: PPOPN 1
18666: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18667: LD_EXP 31
18671: PUSH
18672: LD_EXP 69
18676: AND
18677: IFFALSE 18806
18679: GO 18681
18681: DISABLE
18682: LD_INT 0
18684: PPUSH
// begin uc_side := 0 ;
18685: LD_ADDR_OWVAR 20
18689: PUSH
18690: LD_INT 0
18692: ST_TO_ADDR
// uc_nation := nation_arabian ;
18693: LD_ADDR_OWVAR 21
18697: PUSH
18698: LD_INT 2
18700: ST_TO_ADDR
// hc_gallery :=  ;
18701: LD_ADDR_OWVAR 33
18705: PUSH
18706: LD_STRING 
18708: ST_TO_ADDR
// hc_name :=  ;
18709: LD_ADDR_OWVAR 26
18713: PUSH
18714: LD_STRING 
18716: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18717: LD_INT 1
18719: PPUSH
18720: LD_INT 11
18722: PPUSH
18723: LD_INT 10
18725: PPUSH
18726: CALL_OW 380
// un := CreateHuman ;
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: CALL_OW 44
18739: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18740: LD_VAR 0 1
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18752: LD_INT 35
18754: PPUSH
18755: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 22
18766: PUSH
18767: LD_OWVAR 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 74
18790: PPUSH
18791: CALL_OW 115
// until IsDead ( un ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 301
18804: IFFALSE 18752
// end ;
18806: PPOPN 1
18808: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18809: LD_EXP 31
18813: PUSH
18814: LD_EXP 71
18818: AND
18819: IFFALSE 18831
18821: GO 18823
18823: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18824: LD_STRING earthquake(getX(game), 0, 32)
18826: PPUSH
18827: CALL_OW 559
18831: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18832: LD_EXP 31
18836: PUSH
18837: LD_EXP 72
18841: AND
18842: IFFALSE 18933
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
// begin enable ;
18850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18851: LD_ADDR_VAR 0 1
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_OWVAR 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 33
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL_OW 69
18897: ST_TO_ADDR
// if not tmp then
18898: LD_VAR 0 1
18902: NOT
18903: IFFALSE 18907
// exit ;
18905: GO 18933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 1
18914: PPUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 12
18924: ARRAY
18925: PPUSH
18926: LD_INT 1
18928: PPUSH
18929: CALL_OW 234
// end ;
18933: PPOPN 1
18935: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18936: LD_EXP 31
18940: PUSH
18941: LD_EXP 73
18945: AND
18946: IFFALSE 19087
18948: GO 18950
18950: DISABLE
18951: LD_INT 0
18953: PPUSH
18954: PPUSH
18955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_OWVAR 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 25
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if not tmp then
18992: LD_VAR 0 3
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19087
// un := tmp [ rand ( 1 , tmp ) ] ;
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: LD_VAR 0 3
19010: PUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: CALL_OW 12
19023: ARRAY
19024: ST_TO_ADDR
// if Crawls ( un ) then
19025: LD_VAR 0 2
19029: PPUSH
19030: CALL_OW 318
19034: IFFALSE 19045
// ComWalk ( un ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19045: LD_VAR 0 2
19049: PPUSH
19050: LD_INT 9
19052: PPUSH
19053: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19057: LD_INT 28
19059: PPUSH
19060: LD_OWVAR 2
19064: PPUSH
19065: LD_INT 2
19067: PPUSH
19068: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19072: LD_INT 29
19074: PPUSH
19075: LD_OWVAR 2
19079: PPUSH
19080: LD_INT 2
19082: PPUSH
19083: CALL_OW 322
// end ;
19087: PPOPN 3
19089: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19090: LD_EXP 31
19094: PUSH
19095: LD_EXP 74
19099: AND
19100: IFFALSE 19211
19102: GO 19104
19104: DISABLE
19105: LD_INT 0
19107: PPUSH
19108: PPUSH
19109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 22
19117: PUSH
19118: LD_OWVAR 2
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 25
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL_OW 69
19145: ST_TO_ADDR
// if not tmp then
19146: LD_VAR 0 3
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19211
// un := tmp [ rand ( 1 , tmp ) ] ;
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 1
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 12
19177: ARRAY
19178: ST_TO_ADDR
// if Crawls ( un ) then
19179: LD_VAR 0 2
19183: PPUSH
19184: CALL_OW 318
19188: IFFALSE 19199
// ComWalk ( un ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19199: LD_VAR 0 2
19203: PPUSH
19204: LD_INT 8
19206: PPUSH
19207: CALL_OW 336
// end ;
19211: PPOPN 3
19213: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19214: LD_EXP 31
19218: PUSH
19219: LD_EXP 75
19223: AND
19224: IFFALSE 19368
19226: GO 19228
19228: DISABLE
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 21
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 34
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 34
19275: PUSH
19276: LD_INT 51
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 34
19285: PUSH
19286: LD_INT 32
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: ST_TO_ADDR
// if not tmp then
19309: LD_VAR 0 2
19313: NOT
19314: IFFALSE 19318
// exit ;
19316: GO 19368
// for i in tmp do
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: LD_VAR 0 2
19327: PUSH
19328: FOR_IN
19329: IFFALSE 19366
// if GetCargo ( i , mat_artifact ) = 0 then
19331: LD_VAR 0 1
19335: PPUSH
19336: LD_INT 4
19338: PPUSH
19339: CALL_OW 289
19343: PUSH
19344: LD_INT 0
19346: EQUAL
19347: IFFALSE 19364
// SetCargo ( i , mat_siberit , 100 ) ;
19349: LD_VAR 0 1
19353: PPUSH
19354: LD_INT 3
19356: PPUSH
19357: LD_INT 100
19359: PPUSH
19360: CALL_OW 290
19364: GO 19328
19366: POP
19367: POP
// end ;
19368: PPOPN 2
19370: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19371: LD_EXP 31
19375: PUSH
19376: LD_EXP 76
19380: AND
19381: IFFALSE 19564
19383: GO 19385
19385: DISABLE
19386: LD_INT 0
19388: PPUSH
19389: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19390: LD_ADDR_VAR 0 2
19394: PUSH
19395: LD_INT 22
19397: PUSH
19398: LD_OWVAR 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 2
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19564
// for i := 1 to 2 do
19421: LD_ADDR_VAR 0 1
19425: PUSH
19426: DOUBLE
19427: LD_INT 1
19429: DEC
19430: ST_TO_ADDR
19431: LD_INT 2
19433: PUSH
19434: FOR_TO
19435: IFFALSE 19562
// begin uc_side := your_side ;
19437: LD_ADDR_OWVAR 20
19441: PUSH
19442: LD_OWVAR 2
19446: ST_TO_ADDR
// uc_nation := nation_american ;
19447: LD_ADDR_OWVAR 21
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// vc_chassis := us_morphling ;
19455: LD_ADDR_OWVAR 37
19459: PUSH
19460: LD_INT 5
19462: ST_TO_ADDR
// vc_engine := engine_siberite ;
19463: LD_ADDR_OWVAR 39
19467: PUSH
19468: LD_INT 3
19470: ST_TO_ADDR
// vc_control := control_computer ;
19471: LD_ADDR_OWVAR 38
19475: PUSH
19476: LD_INT 3
19478: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19479: LD_ADDR_OWVAR 40
19483: PUSH
19484: LD_INT 10
19486: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19487: LD_VAR 0 2
19491: PUSH
19492: LD_INT 1
19494: ARRAY
19495: PPUSH
19496: CALL_OW 310
19500: NOT
19501: IFFALSE 19548
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19503: CALL_OW 45
19507: PPUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 250
19521: PPUSH
19522: LD_VAR 0 2
19526: PUSH
19527: LD_INT 1
19529: ARRAY
19530: PPUSH
19531: CALL_OW 251
19535: PPUSH
19536: LD_INT 12
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: CALL_OW 50
19546: GO 19560
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19548: CALL_OW 45
19552: PPUSH
19553: LD_INT 1
19555: PPUSH
19556: CALL_OW 51
// end ;
19560: GO 19434
19562: POP
19563: POP
// end ;
19564: PPOPN 2
19566: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19567: LD_EXP 31
19571: PUSH
19572: LD_EXP 77
19576: AND
19577: IFFALSE 19799
19579: GO 19581
19581: DISABLE
19582: LD_INT 0
19584: PPUSH
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19590: LD_ADDR_VAR 0 6
19594: PUSH
19595: LD_INT 22
19597: PUSH
19598: LD_OWVAR 2
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 21
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 3
19619: PUSH
19620: LD_INT 23
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: PPUSH
19639: CALL_OW 69
19643: ST_TO_ADDR
// if not tmp then
19644: LD_VAR 0 6
19648: NOT
19649: IFFALSE 19653
// exit ;
19651: GO 19799
// s1 := rand ( 1 , 4 ) ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: PPUSH
19661: LD_INT 4
19663: PPUSH
19664: CALL_OW 12
19668: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19669: LD_ADDR_VAR 0 4
19673: PUSH
19674: LD_VAR 0 6
19678: PUSH
19679: LD_INT 1
19681: ARRAY
19682: PPUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 259
19692: ST_TO_ADDR
// if s1 = 1 then
19693: LD_VAR 0 2
19697: PUSH
19698: LD_INT 1
19700: EQUAL
19701: IFFALSE 19721
// s2 := rand ( 2 , 4 ) else
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: LD_INT 2
19710: PPUSH
19711: LD_INT 4
19713: PPUSH
19714: CALL_OW 12
19718: ST_TO_ADDR
19719: GO 19729
// s2 := 1 ;
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 1
19728: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19729: LD_ADDR_VAR 0 5
19733: PUSH
19734: LD_VAR 0 6
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: CALL_OW 259
19752: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19753: LD_VAR 0 6
19757: PUSH
19758: LD_INT 1
19760: ARRAY
19761: PPUSH
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_VAR 0 5
19771: PPUSH
19772: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19776: LD_VAR 0 6
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_VAR 0 4
19794: PPUSH
19795: CALL_OW 237
// end ;
19799: PPOPN 6
19801: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19802: LD_EXP 31
19806: PUSH
19807: LD_EXP 78
19811: AND
19812: IFFALSE 19891
19814: GO 19816
19816: DISABLE
19817: LD_INT 0
19819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19820: LD_ADDR_VAR 0 1
19824: PUSH
19825: LD_INT 22
19827: PUSH
19828: LD_OWVAR 2
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 30
19839: PUSH
19840: LD_INT 3
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: ST_TO_ADDR
// if not tmp then
19856: LD_VAR 0 1
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 19891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19865: LD_VAR 0 1
19869: PUSH
19870: LD_INT 1
19872: PPUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 12
19882: ARRAY
19883: PPUSH
19884: LD_INT 1
19886: PPUSH
19887: CALL_OW 234
// end ;
19891: PPOPN 1
19893: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19894: LD_EXP 31
19898: PUSH
19899: LD_EXP 79
19903: AND
19904: IFFALSE 20016
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19913: LD_ADDR_VAR 0 2
19917: PUSH
19918: LD_INT 22
19920: PUSH
19921: LD_OWVAR 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: LD_INT 27
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_INT 26
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 30
19955: PUSH
19956: LD_INT 28
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PPUSH
19973: CALL_OW 69
19977: ST_TO_ADDR
// if not tmp then
19978: LD_VAR 0 2
19982: NOT
19983: IFFALSE 19987
// exit ;
19985: GO 20016
// for i in tmp do
19987: LD_ADDR_VAR 0 1
19991: PUSH
19992: LD_VAR 0 2
19996: PUSH
19997: FOR_IN
19998: IFFALSE 20014
// SetLives ( i , 1 ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 234
20012: GO 19997
20014: POP
20015: POP
// end ;
20016: PPOPN 2
20018: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20019: LD_EXP 31
20023: PUSH
20024: LD_EXP 80
20028: AND
20029: IFFALSE 20316
20031: GO 20033
20033: DISABLE
20034: LD_INT 0
20036: PPUSH
20037: PPUSH
20038: PPUSH
// begin i := rand ( 1 , 7 ) ;
20039: LD_ADDR_VAR 0 1
20043: PUSH
20044: LD_INT 1
20046: PPUSH
20047: LD_INT 7
20049: PPUSH
20050: CALL_OW 12
20054: ST_TO_ADDR
// case i of 1 :
20055: LD_VAR 0 1
20059: PUSH
20060: LD_INT 1
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20078
20068: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20069: LD_STRING earthquake(getX(game), 0, 32)
20071: PPUSH
20072: CALL_OW 559
20076: GO 20316
20078: LD_INT 2
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20100
20086: POP
// begin ToLua ( displayStucuk(); ) ;
20087: LD_STRING displayStucuk();
20089: PPUSH
20090: CALL_OW 559
// ResetFog ;
20094: CALL_OW 335
// end ; 3 :
20098: GO 20316
20100: LD_INT 3
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20212
20108: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_OWVAR 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 25
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 69
20144: ST_TO_ADDR
// if not tmp then
20145: LD_VAR 0 2
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20316
// un := tmp [ rand ( 1 , tmp ) ] ;
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_VAR 0 2
20163: PUSH
20164: LD_INT 1
20166: PPUSH
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 12
20176: ARRAY
20177: ST_TO_ADDR
// if Crawls ( un ) then
20178: LD_VAR 0 3
20182: PPUSH
20183: CALL_OW 318
20187: IFFALSE 20198
// ComWalk ( un ) ;
20189: LD_VAR 0 3
20193: PPUSH
20194: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20198: LD_VAR 0 3
20202: PPUSH
20203: LD_INT 8
20205: PPUSH
20206: CALL_OW 336
// end ; 4 :
20210: GO 20316
20212: LD_INT 4
20214: DOUBLE
20215: EQUAL
20216: IFTRUE 20220
20218: GO 20294
20220: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 30
20240: PUSH
20241: LD_INT 29
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not tmp then
20257: LD_VAR 0 2
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20316
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20266: LD_VAR 0 2
20270: PUSH
20271: LD_INT 1
20273: ARRAY
20274: PPUSH
20275: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20279: LD_VAR 0 2
20283: PUSH
20284: LD_INT 1
20286: ARRAY
20287: PPUSH
20288: CALL_OW 65
// end ; 5 .. 7 :
20292: GO 20316
20294: LD_INT 5
20296: DOUBLE
20297: GREATEREQUAL
20298: IFFALSE 20306
20300: LD_INT 7
20302: DOUBLE
20303: LESSEQUAL
20304: IFTRUE 20308
20306: GO 20315
20308: POP
// StreamSibBomb ; end ;
20309: CALL 16553 0 0
20313: GO 20316
20315: POP
// end ;
20316: PPOPN 3
20318: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20319: LD_EXP 31
20323: PUSH
20324: LD_EXP 81
20328: AND
20329: IFFALSE 20485
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 81
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: LD_INT 21
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 21
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: ST_TO_ADDR
// if not tmp then
20393: LD_VAR 0 2
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20485
// p := 0 ;
20402: LD_ADDR_VAR 0 3
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20410: LD_INT 35
20412: PPUSH
20413: CALL_OW 67
// p := p + 1 ;
20417: LD_ADDR_VAR 0 3
20421: PUSH
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 1
20429: PLUS
20430: ST_TO_ADDR
// for i in tmp do
20431: LD_ADDR_VAR 0 1
20435: PUSH
20436: LD_VAR 0 2
20440: PUSH
20441: FOR_IN
20442: IFFALSE 20473
// if GetLives ( i ) < 1000 then
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 256
20453: PUSH
20454: LD_INT 1000
20456: LESS
20457: IFFALSE 20471
// SetLives ( i , 1000 ) ;
20459: LD_VAR 0 1
20463: PPUSH
20464: LD_INT 1000
20466: PPUSH
20467: CALL_OW 234
20471: GO 20441
20473: POP
20474: POP
// until p > 20 ;
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 20
20482: GREATER
20483: IFFALSE 20410
// end ;
20485: PPOPN 3
20487: END
// every 0 0$1 trigger StreamModeActive and sTime do
20488: LD_EXP 31
20492: PUSH
20493: LD_EXP 82
20497: AND
20498: IFFALSE 20533
20500: GO 20502
20502: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20503: LD_INT 28
20505: PPUSH
20506: LD_OWVAR 2
20510: PPUSH
20511: LD_INT 2
20513: PPUSH
20514: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20518: LD_INT 30
20520: PPUSH
20521: LD_OWVAR 2
20525: PPUSH
20526: LD_INT 2
20528: PPUSH
20529: CALL_OW 322
// end ;
20533: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20534: LD_EXP 31
20538: PUSH
20539: LD_EXP 83
20543: AND
20544: IFFALSE 20665
20546: GO 20548
20548: DISABLE
20549: LD_INT 0
20551: PPUSH
20552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20553: LD_ADDR_VAR 0 2
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_OWVAR 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: PUSH
20583: LD_INT 23
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: ST_TO_ADDR
// if not tmp then
20607: LD_VAR 0 2
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 20665
// for i in tmp do
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_VAR 0 2
20625: PUSH
20626: FOR_IN
20627: IFFALSE 20663
// begin if Crawls ( i ) then
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 318
20638: IFFALSE 20649
// ComWalk ( i ) ;
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 138
// SetClass ( i , 2 ) ;
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 2
20656: PPUSH
20657: CALL_OW 336
// end ;
20661: GO 20626
20663: POP
20664: POP
// end ;
20665: PPOPN 2
20667: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20668: LD_EXP 31
20672: PUSH
20673: LD_EXP 84
20677: AND
20678: IFFALSE 20966
20680: GO 20682
20682: DISABLE
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20688: LD_OWVAR 2
20692: PPUSH
20693: LD_INT 9
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: LD_INT 1
20701: PPUSH
20702: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20706: LD_INT 9
20708: PPUSH
20709: LD_OWVAR 2
20713: PPUSH
20714: CALL_OW 343
// uc_side := 9 ;
20718: LD_ADDR_OWVAR 20
20722: PUSH
20723: LD_INT 9
20725: ST_TO_ADDR
// uc_nation := 2 ;
20726: LD_ADDR_OWVAR 21
20730: PUSH
20731: LD_INT 2
20733: ST_TO_ADDR
// hc_name := Dark Warrior ;
20734: LD_ADDR_OWVAR 26
20738: PUSH
20739: LD_STRING Dark Warrior
20741: ST_TO_ADDR
// hc_gallery :=  ;
20742: LD_ADDR_OWVAR 33
20746: PUSH
20747: LD_STRING 
20749: ST_TO_ADDR
// hc_noskilllimit := true ;
20750: LD_ADDR_OWVAR 76
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20758: LD_ADDR_OWVAR 31
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
// un := CreateHuman ;
20781: LD_ADDR_VAR 0 3
20785: PUSH
20786: CALL_OW 44
20790: ST_TO_ADDR
// hc_noskilllimit := false ;
20791: LD_ADDR_OWVAR 76
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20799: LD_VAR 0 3
20803: PPUSH
20804: LD_INT 1
20806: PPUSH
20807: CALL_OW 51
// ToLua ( playRanger() ) ;
20811: LD_STRING playRanger()
20813: PPUSH
20814: CALL_OW 559
// p := 0 ;
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20826: LD_INT 35
20828: PPUSH
20829: CALL_OW 67
// p := p + 1 ;
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_VAR 0 2
20842: PUSH
20843: LD_INT 1
20845: PLUS
20846: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20847: LD_VAR 0 3
20851: PPUSH
20852: CALL_OW 256
20856: PUSH
20857: LD_INT 1000
20859: LESS
20860: IFFALSE 20874
// SetLives ( un , 1000 ) ;
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 1000
20869: PPUSH
20870: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20874: LD_VAR 0 3
20878: PPUSH
20879: LD_INT 81
20881: PUSH
20882: LD_OWVAR 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 91
20893: PUSH
20894: LD_VAR 0 3
20898: PUSH
20899: LD_INT 30
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: CALL_OW 74
20925: PPUSH
20926: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20930: LD_VAR 0 2
20934: PUSH
20935: LD_INT 80
20937: GREATER
20938: PUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: CALL_OW 301
20948: OR
20949: IFFALSE 20826
// if un then
20951: LD_VAR 0 3
20955: IFFALSE 20966
// RemoveUnit ( un ) ;
20957: LD_VAR 0 3
20961: PPUSH
20962: CALL_OW 64
// end ;
20966: PPOPN 3
20968: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20969: LD_EXP 85
20973: IFFALSE 21089
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20983: LD_ADDR_VAR 0 2
20987: PUSH
20988: LD_INT 81
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 21
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21019: LD_STRING playComputer()
21021: PPUSH
21022: CALL_OW 559
// if not tmp then
21026: LD_VAR 0 2
21030: NOT
21031: IFFALSE 21035
// exit ;
21033: GO 21089
// for i in tmp do
21035: LD_ADDR_VAR 0 1
21039: PUSH
21040: LD_VAR 0 2
21044: PUSH
21045: FOR_IN
21046: IFFALSE 21087
// for j := 1 to 4 do
21048: LD_ADDR_VAR 0 3
21052: PUSH
21053: DOUBLE
21054: LD_INT 1
21056: DEC
21057: ST_TO_ADDR
21058: LD_INT 4
21060: PUSH
21061: FOR_TO
21062: IFFALSE 21083
// SetSkill ( i , j , 10 ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: LD_VAR 0 3
21073: PPUSH
21074: LD_INT 10
21076: PPUSH
21077: CALL_OW 237
21081: GO 21061
21083: POP
21084: POP
21085: GO 21045
21087: POP
21088: POP
// end ;
21089: PPOPN 3
21091: END
// every 0 0$1 trigger s30 do var i , tmp ;
21092: LD_EXP 86
21096: IFFALSE 21165
21098: GO 21100
21100: DISABLE
21101: LD_INT 0
21103: PPUSH
21104: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21105: LD_ADDR_VAR 0 2
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_OWVAR 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: ST_TO_ADDR
// if not tmp then
21127: LD_VAR 0 2
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21165
// for i in tmp do
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_VAR 0 2
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21163
// SetLives ( i , 300 ) ;
21149: LD_VAR 0 1
21153: PPUSH
21154: LD_INT 300
21156: PPUSH
21157: CALL_OW 234
21161: GO 21146
21163: POP
21164: POP
// end ;
21165: PPOPN 2
21167: END
// every 0 0$1 trigger s60 do var i , tmp ;
21168: LD_EXP 87
21172: IFFALSE 21241
21174: GO 21176
21176: DISABLE
21177: LD_INT 0
21179: PPUSH
21180: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21181: LD_ADDR_VAR 0 2
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 69
21202: ST_TO_ADDR
// if not tmp then
21203: LD_VAR 0 2
21207: NOT
21208: IFFALSE 21212
// exit ;
21210: GO 21241
// for i in tmp do
21212: LD_ADDR_VAR 0 1
21216: PUSH
21217: LD_VAR 0 2
21221: PUSH
21222: FOR_IN
21223: IFFALSE 21239
// SetLives ( i , 600 ) ;
21225: LD_VAR 0 1
21229: PPUSH
21230: LD_INT 600
21232: PPUSH
21233: CALL_OW 234
21237: GO 21222
21239: POP
21240: POP
// end ;
21241: PPOPN 2
21243: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21244: LD_INT 0
21246: PPUSH
// case cmd of 301 :
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 301
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21292
21260: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21261: LD_VAR 0 6
21265: PPUSH
21266: LD_VAR 0 7
21270: PPUSH
21271: LD_VAR 0 8
21275: PPUSH
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: CALL 22493 0 5
21290: GO 21413
21292: LD_INT 302
21294: DOUBLE
21295: EQUAL
21296: IFTRUE 21300
21298: GO 21337
21300: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21301: LD_VAR 0 6
21305: PPUSH
21306: LD_VAR 0 7
21310: PPUSH
21311: LD_VAR 0 8
21315: PPUSH
21316: LD_VAR 0 9
21320: PPUSH
21321: LD_VAR 0 4
21325: PPUSH
21326: LD_VAR 0 5
21330: PPUSH
21331: CALL 22584 0 6
21335: GO 21413
21337: LD_INT 303
21339: DOUBLE
21340: EQUAL
21341: IFTRUE 21345
21343: GO 21382
21345: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21346: LD_VAR 0 6
21350: PPUSH
21351: LD_VAR 0 7
21355: PPUSH
21356: LD_VAR 0 8
21360: PPUSH
21361: LD_VAR 0 9
21365: PPUSH
21366: LD_VAR 0 4
21370: PPUSH
21371: LD_VAR 0 5
21375: PPUSH
21376: CALL 21418 0 6
21380: GO 21413
21382: LD_INT 304
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21412
21390: POP
// hHackTeleport ( unit , x , y ) ; end ;
21391: LD_VAR 0 2
21395: PPUSH
21396: LD_VAR 0 4
21400: PPUSH
21401: LD_VAR 0 5
21405: PPUSH
21406: CALL 23177 0 3
21410: GO 21413
21412: POP
// end ;
21413: LD_VAR 0 12
21417: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 1
21429: LESS
21430: PUSH
21431: LD_VAR 0 1
21435: PUSH
21436: LD_INT 3
21438: GREATER
21439: OR
21440: PUSH
21441: LD_VAR 0 5
21445: PPUSH
21446: LD_VAR 0 6
21450: PPUSH
21451: CALL_OW 428
21455: OR
21456: IFFALSE 21460
// exit ;
21458: GO 22180
// uc_side := your_side ;
21460: LD_ADDR_OWVAR 20
21464: PUSH
21465: LD_OWVAR 2
21469: ST_TO_ADDR
// uc_nation := nation ;
21470: LD_ADDR_OWVAR 21
21474: PUSH
21475: LD_VAR 0 1
21479: ST_TO_ADDR
// bc_level = 1 ;
21480: LD_ADDR_OWVAR 43
21484: PUSH
21485: LD_INT 1
21487: ST_TO_ADDR
// case btype of 1 :
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 1
21495: DOUBLE
21496: EQUAL
21497: IFTRUE 21501
21499: GO 21512
21501: POP
// bc_type := b_depot ; 2 :
21502: LD_ADDR_OWVAR 42
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
21510: GO 22124
21512: LD_INT 2
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21531
21520: POP
// bc_type := b_warehouse ; 3 :
21521: LD_ADDR_OWVAR 42
21525: PUSH
21526: LD_INT 1
21528: ST_TO_ADDR
21529: GO 22124
21531: LD_INT 3
21533: DOUBLE
21534: EQUAL
21535: IFTRUE 21539
21537: GO 21550
21539: POP
// bc_type := b_lab ; 4 .. 9 :
21540: LD_ADDR_OWVAR 42
21544: PUSH
21545: LD_INT 6
21547: ST_TO_ADDR
21548: GO 22124
21550: LD_INT 4
21552: DOUBLE
21553: GREATEREQUAL
21554: IFFALSE 21562
21556: LD_INT 9
21558: DOUBLE
21559: LESSEQUAL
21560: IFTRUE 21564
21562: GO 21616
21564: POP
// begin bc_type := b_lab_half ;
21565: LD_ADDR_OWVAR 42
21569: PUSH
21570: LD_INT 7
21572: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21573: LD_ADDR_OWVAR 44
21577: PUSH
21578: LD_INT 10
21580: PUSH
21581: LD_INT 11
21583: PUSH
21584: LD_INT 12
21586: PUSH
21587: LD_INT 15
21589: PUSH
21590: LD_INT 14
21592: PUSH
21593: LD_INT 13
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: LD_VAR 0 2
21608: PUSH
21609: LD_INT 3
21611: MINUS
21612: ARRAY
21613: ST_TO_ADDR
// end ; 10 .. 13 :
21614: GO 22124
21616: LD_INT 10
21618: DOUBLE
21619: GREATEREQUAL
21620: IFFALSE 21628
21622: LD_INT 13
21624: DOUBLE
21625: LESSEQUAL
21626: IFTRUE 21630
21628: GO 21707
21630: POP
// begin bc_type := b_lab_full ;
21631: LD_ADDR_OWVAR 42
21635: PUSH
21636: LD_INT 8
21638: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21639: LD_ADDR_OWVAR 44
21643: PUSH
21644: LD_INT 10
21646: PUSH
21647: LD_INT 12
21649: PUSH
21650: LD_INT 14
21652: PUSH
21653: LD_INT 13
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_VAR 0 2
21666: PUSH
21667: LD_INT 9
21669: MINUS
21670: ARRAY
21671: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21672: LD_ADDR_OWVAR 45
21676: PUSH
21677: LD_INT 11
21679: PUSH
21680: LD_INT 15
21682: PUSH
21683: LD_INT 12
21685: PUSH
21686: LD_INT 15
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: PUSH
21695: LD_VAR 0 2
21699: PUSH
21700: LD_INT 9
21702: MINUS
21703: ARRAY
21704: ST_TO_ADDR
// end ; 14 :
21705: GO 22124
21707: LD_INT 14
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21726
21715: POP
// bc_type := b_workshop ; 15 :
21716: LD_ADDR_OWVAR 42
21720: PUSH
21721: LD_INT 2
21723: ST_TO_ADDR
21724: GO 22124
21726: LD_INT 15
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21745
21734: POP
// bc_type := b_factory ; 16 :
21735: LD_ADDR_OWVAR 42
21739: PUSH
21740: LD_INT 3
21742: ST_TO_ADDR
21743: GO 22124
21745: LD_INT 16
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21764
21753: POP
// bc_type := b_ext_gun ; 17 :
21754: LD_ADDR_OWVAR 42
21758: PUSH
21759: LD_INT 17
21761: ST_TO_ADDR
21762: GO 22124
21764: LD_INT 17
21766: DOUBLE
21767: EQUAL
21768: IFTRUE 21772
21770: GO 21800
21772: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21773: LD_ADDR_OWVAR 42
21777: PUSH
21778: LD_INT 19
21780: PUSH
21781: LD_INT 23
21783: PUSH
21784: LD_INT 19
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: LD_VAR 0 1
21796: ARRAY
21797: ST_TO_ADDR
21798: GO 22124
21800: LD_INT 18
21802: DOUBLE
21803: EQUAL
21804: IFTRUE 21808
21806: GO 21819
21808: POP
// bc_type := b_ext_radar ; 19 :
21809: LD_ADDR_OWVAR 42
21813: PUSH
21814: LD_INT 20
21816: ST_TO_ADDR
21817: GO 22124
21819: LD_INT 19
21821: DOUBLE
21822: EQUAL
21823: IFTRUE 21827
21825: GO 21838
21827: POP
// bc_type := b_ext_radio ; 20 :
21828: LD_ADDR_OWVAR 42
21832: PUSH
21833: LD_INT 22
21835: ST_TO_ADDR
21836: GO 22124
21838: LD_INT 20
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21846
21844: GO 21857
21846: POP
// bc_type := b_ext_siberium ; 21 :
21847: LD_ADDR_OWVAR 42
21851: PUSH
21852: LD_INT 21
21854: ST_TO_ADDR
21855: GO 22124
21857: LD_INT 21
21859: DOUBLE
21860: EQUAL
21861: IFTRUE 21865
21863: GO 21876
21865: POP
// bc_type := b_ext_computer ; 22 :
21866: LD_ADDR_OWVAR 42
21870: PUSH
21871: LD_INT 24
21873: ST_TO_ADDR
21874: GO 22124
21876: LD_INT 22
21878: DOUBLE
21879: EQUAL
21880: IFTRUE 21884
21882: GO 21895
21884: POP
// bc_type := b_ext_track ; 23 :
21885: LD_ADDR_OWVAR 42
21889: PUSH
21890: LD_INT 16
21892: ST_TO_ADDR
21893: GO 22124
21895: LD_INT 23
21897: DOUBLE
21898: EQUAL
21899: IFTRUE 21903
21901: GO 21914
21903: POP
// bc_type := b_ext_laser ; 24 :
21904: LD_ADDR_OWVAR 42
21908: PUSH
21909: LD_INT 25
21911: ST_TO_ADDR
21912: GO 22124
21914: LD_INT 24
21916: DOUBLE
21917: EQUAL
21918: IFTRUE 21922
21920: GO 21933
21922: POP
// bc_type := b_control_tower ; 25 :
21923: LD_ADDR_OWVAR 42
21927: PUSH
21928: LD_INT 36
21930: ST_TO_ADDR
21931: GO 22124
21933: LD_INT 25
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 21952
21941: POP
// bc_type := b_breastwork ; 26 :
21942: LD_ADDR_OWVAR 42
21946: PUSH
21947: LD_INT 31
21949: ST_TO_ADDR
21950: GO 22124
21952: LD_INT 26
21954: DOUBLE
21955: EQUAL
21956: IFTRUE 21960
21958: GO 21971
21960: POP
// bc_type := b_bunker ; 27 :
21961: LD_ADDR_OWVAR 42
21965: PUSH
21966: LD_INT 32
21968: ST_TO_ADDR
21969: GO 22124
21971: LD_INT 27
21973: DOUBLE
21974: EQUAL
21975: IFTRUE 21979
21977: GO 21990
21979: POP
// bc_type := b_turret ; 28 :
21980: LD_ADDR_OWVAR 42
21984: PUSH
21985: LD_INT 33
21987: ST_TO_ADDR
21988: GO 22124
21990: LD_INT 28
21992: DOUBLE
21993: EQUAL
21994: IFTRUE 21998
21996: GO 22009
21998: POP
// bc_type := b_armoury ; 29 :
21999: LD_ADDR_OWVAR 42
22003: PUSH
22004: LD_INT 4
22006: ST_TO_ADDR
22007: GO 22124
22009: LD_INT 29
22011: DOUBLE
22012: EQUAL
22013: IFTRUE 22017
22015: GO 22028
22017: POP
// bc_type := b_barracks ; 30 :
22018: LD_ADDR_OWVAR 42
22022: PUSH
22023: LD_INT 5
22025: ST_TO_ADDR
22026: GO 22124
22028: LD_INT 30
22030: DOUBLE
22031: EQUAL
22032: IFTRUE 22036
22034: GO 22047
22036: POP
// bc_type := b_solar_power ; 31 :
22037: LD_ADDR_OWVAR 42
22041: PUSH
22042: LD_INT 27
22044: ST_TO_ADDR
22045: GO 22124
22047: LD_INT 31
22049: DOUBLE
22050: EQUAL
22051: IFTRUE 22055
22053: GO 22066
22055: POP
// bc_type := b_oil_power ; 32 :
22056: LD_ADDR_OWVAR 42
22060: PUSH
22061: LD_INT 26
22063: ST_TO_ADDR
22064: GO 22124
22066: LD_INT 32
22068: DOUBLE
22069: EQUAL
22070: IFTRUE 22074
22072: GO 22085
22074: POP
// bc_type := b_siberite_power ; 33 :
22075: LD_ADDR_OWVAR 42
22079: PUSH
22080: LD_INT 28
22082: ST_TO_ADDR
22083: GO 22124
22085: LD_INT 33
22087: DOUBLE
22088: EQUAL
22089: IFTRUE 22093
22091: GO 22104
22093: POP
// bc_type := b_oil_mine ; 34 :
22094: LD_ADDR_OWVAR 42
22098: PUSH
22099: LD_INT 29
22101: ST_TO_ADDR
22102: GO 22124
22104: LD_INT 34
22106: DOUBLE
22107: EQUAL
22108: IFTRUE 22112
22110: GO 22123
22112: POP
// bc_type := b_siberite_mine ; end ;
22113: LD_ADDR_OWVAR 42
22117: PUSH
22118: LD_INT 30
22120: ST_TO_ADDR
22121: GO 22124
22123: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22124: LD_ADDR_VAR 0 8
22128: PUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: LD_VAR 0 6
22138: PPUSH
22139: LD_VAR 0 3
22143: PPUSH
22144: CALL_OW 47
22148: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22149: LD_OWVAR 42
22153: PUSH
22154: LD_INT 32
22156: PUSH
22157: LD_INT 33
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: IN
22164: IFFALSE 22180
// PlaceWeaponTurret ( b , weapon ) ;
22166: LD_VAR 0 8
22170: PPUSH
22171: LD_VAR 0 4
22175: PPUSH
22176: CALL_OW 431
// end ;
22180: LD_VAR 0 7
22184: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22185: LD_INT 0
22187: PPUSH
22188: PPUSH
22189: PPUSH
22190: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22191: LD_ADDR_VAR 0 4
22195: PUSH
22196: LD_INT 22
22198: PUSH
22199: LD_OWVAR 2
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 30
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PPUSH
22240: CALL_OW 69
22244: ST_TO_ADDR
// if not tmp then
22245: LD_VAR 0 4
22249: NOT
22250: IFFALSE 22254
// exit ;
22252: GO 22313
// for i in tmp do
22254: LD_ADDR_VAR 0 2
22258: PUSH
22259: LD_VAR 0 4
22263: PUSH
22264: FOR_IN
22265: IFFALSE 22311
// for j = 1 to 3 do
22267: LD_ADDR_VAR 0 3
22271: PUSH
22272: DOUBLE
22273: LD_INT 1
22275: DEC
22276: ST_TO_ADDR
22277: LD_INT 3
22279: PUSH
22280: FOR_TO
22281: IFFALSE 22307
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22283: LD_VAR 0 2
22287: PPUSH
22288: CALL_OW 274
22292: PPUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: LD_INT 99999
22300: PPUSH
22301: CALL_OW 277
22305: GO 22280
22307: POP
22308: POP
22309: GO 22264
22311: POP
22312: POP
// end ;
22313: LD_VAR 0 1
22317: RET
// export function hHackSetLevel10 ; var i , j ; begin
22318: LD_INT 0
22320: PPUSH
22321: PPUSH
22322: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22323: LD_ADDR_VAR 0 2
22327: PUSH
22328: LD_INT 21
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 69
22342: PUSH
22343: FOR_IN
22344: IFFALSE 22396
// if IsSelected ( i ) then
22346: LD_VAR 0 2
22350: PPUSH
22351: CALL_OW 306
22355: IFFALSE 22394
// begin for j := 1 to 4 do
22357: LD_ADDR_VAR 0 3
22361: PUSH
22362: DOUBLE
22363: LD_INT 1
22365: DEC
22366: ST_TO_ADDR
22367: LD_INT 4
22369: PUSH
22370: FOR_TO
22371: IFFALSE 22392
// SetSkill ( i , j , 10 ) ;
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: LD_INT 10
22385: PPUSH
22386: CALL_OW 237
22390: GO 22370
22392: POP
22393: POP
// end ;
22394: GO 22343
22396: POP
22397: POP
// end ;
22398: LD_VAR 0 1
22402: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22403: LD_INT 0
22405: PPUSH
22406: PPUSH
22407: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22408: LD_ADDR_VAR 0 2
22412: PUSH
22413: LD_INT 22
22415: PUSH
22416: LD_OWVAR 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 21
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 69
22443: PUSH
22444: FOR_IN
22445: IFFALSE 22486
// begin for j := 1 to 4 do
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: DOUBLE
22453: LD_INT 1
22455: DEC
22456: ST_TO_ADDR
22457: LD_INT 4
22459: PUSH
22460: FOR_TO
22461: IFFALSE 22482
// SetSkill ( i , j , 10 ) ;
22463: LD_VAR 0 2
22467: PPUSH
22468: LD_VAR 0 3
22472: PPUSH
22473: LD_INT 10
22475: PPUSH
22476: CALL_OW 237
22480: GO 22460
22482: POP
22483: POP
// end ;
22484: GO 22444
22486: POP
22487: POP
// end ;
22488: LD_VAR 0 1
22492: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22493: LD_INT 0
22495: PPUSH
// uc_side := your_side ;
22496: LD_ADDR_OWVAR 20
22500: PUSH
22501: LD_OWVAR 2
22505: ST_TO_ADDR
// uc_nation := nation ;
22506: LD_ADDR_OWVAR 21
22510: PUSH
22511: LD_VAR 0 1
22515: ST_TO_ADDR
// InitHc ;
22516: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22520: LD_INT 0
22522: PPUSH
22523: LD_VAR 0 2
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22537: LD_VAR 0 4
22541: PPUSH
22542: LD_VAR 0 5
22546: PPUSH
22547: CALL_OW 428
22551: PUSH
22552: LD_INT 0
22554: EQUAL
22555: IFFALSE 22579
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22557: CALL_OW 44
22561: PPUSH
22562: LD_VAR 0 4
22566: PPUSH
22567: LD_VAR 0 5
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: CALL_OW 48
// end ;
22579: LD_VAR 0 6
22583: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22584: LD_INT 0
22586: PPUSH
22587: PPUSH
// uc_side := your_side ;
22588: LD_ADDR_OWVAR 20
22592: PUSH
22593: LD_OWVAR 2
22597: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22598: LD_VAR 0 1
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: LD_INT 4
22614: PUSH
22615: LD_INT 5
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: IN
22625: IFFALSE 22637
// uc_nation := nation_american else
22627: LD_ADDR_OWVAR 21
22631: PUSH
22632: LD_INT 1
22634: ST_TO_ADDR
22635: GO 22680
// if chassis in [ 11 , 12 , 13 , 14 ] then
22637: LD_VAR 0 1
22641: PUSH
22642: LD_INT 11
22644: PUSH
22645: LD_INT 12
22647: PUSH
22648: LD_INT 13
22650: PUSH
22651: LD_INT 14
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: IN
22660: IFFALSE 22672
// uc_nation := nation_arabian else
22662: LD_ADDR_OWVAR 21
22666: PUSH
22667: LD_INT 2
22669: ST_TO_ADDR
22670: GO 22680
// uc_nation := nation_russian ;
22672: LD_ADDR_OWVAR 21
22676: PUSH
22677: LD_INT 3
22679: ST_TO_ADDR
// vc_chassis := chassis ;
22680: LD_ADDR_OWVAR 37
22684: PUSH
22685: LD_VAR 0 1
22689: ST_TO_ADDR
// vc_engine := engine ;
22690: LD_ADDR_OWVAR 39
22694: PUSH
22695: LD_VAR 0 2
22699: ST_TO_ADDR
// vc_control := control ;
22700: LD_ADDR_OWVAR 38
22704: PUSH
22705: LD_VAR 0 3
22709: ST_TO_ADDR
// vc_weapon := weapon ;
22710: LD_ADDR_OWVAR 40
22714: PUSH
22715: LD_VAR 0 4
22719: ST_TO_ADDR
// un := CreateVehicle ;
22720: LD_ADDR_VAR 0 8
22724: PUSH
22725: CALL_OW 45
22729: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22730: LD_VAR 0 8
22734: PPUSH
22735: LD_INT 0
22737: PPUSH
22738: LD_INT 5
22740: PPUSH
22741: CALL_OW 12
22745: PPUSH
22746: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22750: LD_VAR 0 8
22754: PPUSH
22755: LD_VAR 0 5
22759: PPUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: CALL_OW 48
// end ;
22772: LD_VAR 0 7
22776: RET
// export hInvincible ; every 1 do
22777: GO 22779
22779: DISABLE
// hInvincible := [ ] ;
22780: LD_ADDR_EXP 88
22784: PUSH
22785: EMPTY
22786: ST_TO_ADDR
22787: END
// every 10 do var i ;
22788: GO 22790
22790: DISABLE
22791: LD_INT 0
22793: PPUSH
// begin enable ;
22794: ENABLE
// if not hInvincible then
22795: LD_EXP 88
22799: NOT
22800: IFFALSE 22804
// exit ;
22802: GO 22848
// for i in hInvincible do
22804: LD_ADDR_VAR 0 1
22808: PUSH
22809: LD_EXP 88
22813: PUSH
22814: FOR_IN
22815: IFFALSE 22846
// if GetLives ( i ) < 1000 then
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 256
22826: PUSH
22827: LD_INT 1000
22829: LESS
22830: IFFALSE 22844
// SetLives ( i , 1000 ) ;
22832: LD_VAR 0 1
22836: PPUSH
22837: LD_INT 1000
22839: PPUSH
22840: CALL_OW 234
22844: GO 22814
22846: POP
22847: POP
// end ;
22848: PPOPN 1
22850: END
// export function hHackInvincible ; var i ; begin
22851: LD_INT 0
22853: PPUSH
22854: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22855: LD_ADDR_VAR 0 2
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 21
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: PUSH
22893: FOR_IN
22894: IFFALSE 22955
// if IsSelected ( i ) then
22896: LD_VAR 0 2
22900: PPUSH
22901: CALL_OW 306
22905: IFFALSE 22953
// begin if i in hInvincible then
22907: LD_VAR 0 2
22911: PUSH
22912: LD_EXP 88
22916: IN
22917: IFFALSE 22937
// hInvincible := hInvincible diff i else
22919: LD_ADDR_EXP 88
22923: PUSH
22924: LD_EXP 88
22928: PUSH
22929: LD_VAR 0 2
22933: DIFF
22934: ST_TO_ADDR
22935: GO 22953
// hInvincible := hInvincible union i ;
22937: LD_ADDR_EXP 88
22941: PUSH
22942: LD_EXP 88
22946: PUSH
22947: LD_VAR 0 2
22951: UNION
22952: ST_TO_ADDR
// end ;
22953: GO 22893
22955: POP
22956: POP
// end ;
22957: LD_VAR 0 1
22961: RET
// export function hHackInvisible ; var i , j ; begin
22962: LD_INT 0
22964: PPUSH
22965: PPUSH
22966: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22967: LD_ADDR_VAR 0 2
22971: PUSH
22972: LD_INT 21
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PPUSH
22982: CALL_OW 69
22986: PUSH
22987: FOR_IN
22988: IFFALSE 23012
// if IsSelected ( i ) then
22990: LD_VAR 0 2
22994: PPUSH
22995: CALL_OW 306
22999: IFFALSE 23010
// ComForceInvisible ( i ) ;
23001: LD_VAR 0 2
23005: PPUSH
23006: CALL_OW 496
23010: GO 22987
23012: POP
23013: POP
// end ;
23014: LD_VAR 0 1
23018: RET
// export function hHackChangeYourSide ; begin
23019: LD_INT 0
23021: PPUSH
// if your_side = 8 then
23022: LD_OWVAR 2
23026: PUSH
23027: LD_INT 8
23029: EQUAL
23030: IFFALSE 23042
// your_side := 0 else
23032: LD_ADDR_OWVAR 2
23036: PUSH
23037: LD_INT 0
23039: ST_TO_ADDR
23040: GO 23056
// your_side := your_side + 1 ;
23042: LD_ADDR_OWVAR 2
23046: PUSH
23047: LD_OWVAR 2
23051: PUSH
23052: LD_INT 1
23054: PLUS
23055: ST_TO_ADDR
// end ;
23056: LD_VAR 0 1
23060: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23061: LD_INT 0
23063: PPUSH
23064: PPUSH
23065: PPUSH
// for i in all_units do
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_OWVAR 3
23075: PUSH
23076: FOR_IN
23077: IFFALSE 23155
// if IsSelected ( i ) then
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 306
23088: IFFALSE 23153
// begin j := GetSide ( i ) ;
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: LD_VAR 0 2
23099: PPUSH
23100: CALL_OW 255
23104: ST_TO_ADDR
// if j = 8 then
23105: LD_VAR 0 3
23109: PUSH
23110: LD_INT 8
23112: EQUAL
23113: IFFALSE 23125
// j := 0 else
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 0
23122: ST_TO_ADDR
23123: GO 23139
// j := j + 1 ;
23125: LD_ADDR_VAR 0 3
23129: PUSH
23130: LD_VAR 0 3
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: ST_TO_ADDR
// SetSide ( i , j ) ;
23139: LD_VAR 0 2
23143: PPUSH
23144: LD_VAR 0 3
23148: PPUSH
23149: CALL_OW 235
// end ;
23153: GO 23076
23155: POP
23156: POP
// end ;
23157: LD_VAR 0 1
23161: RET
// export function hHackFog ; begin
23162: LD_INT 0
23164: PPUSH
// FogOff ( true ) ;
23165: LD_INT 1
23167: PPUSH
23168: CALL_OW 344
// end ;
23172: LD_VAR 0 1
23176: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23177: LD_INT 0
23179: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23180: LD_VAR 0 1
23184: PPUSH
23185: LD_VAR 0 2
23189: PPUSH
23190: LD_VAR 0 3
23194: PPUSH
23195: LD_INT 1
23197: PPUSH
23198: LD_INT 1
23200: PPUSH
23201: CALL_OW 483
// CenterOnXY ( x , y ) ;
23205: LD_VAR 0 2
23209: PPUSH
23210: LD_VAR 0 3
23214: PPUSH
23215: CALL_OW 84
// end ;
23219: LD_VAR 0 4
23223: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23224: LD_INT 0
23226: PPUSH
23227: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23228: LD_VAR 0 1
23232: NOT
23233: PUSH
23234: LD_VAR 0 2
23238: PPUSH
23239: LD_VAR 0 3
23243: PPUSH
23244: CALL_OW 488
23248: NOT
23249: OR
23250: PUSH
23251: LD_VAR 0 1
23255: PPUSH
23256: CALL_OW 266
23260: PUSH
23261: LD_INT 3
23263: NONEQUAL
23264: PUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 247
23274: PUSH
23275: LD_INT 1
23277: EQUAL
23278: NOT
23279: AND
23280: OR
23281: IFFALSE 23285
// exit ;
23283: GO 23434
// if GetType ( factory ) = unit_human then
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL_OW 247
23294: PUSH
23295: LD_INT 1
23297: EQUAL
23298: IFFALSE 23315
// factory := IsInUnit ( factory ) ;
23300: LD_ADDR_VAR 0 1
23304: PUSH
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 310
23314: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23315: LD_VAR 0 1
23319: PPUSH
23320: CALL_OW 266
23324: PUSH
23325: LD_INT 3
23327: NONEQUAL
23328: IFFALSE 23332
// exit ;
23330: GO 23434
// if HexInfo ( x , y ) = factory then
23332: LD_VAR 0 2
23336: PPUSH
23337: LD_VAR 0 3
23341: PPUSH
23342: CALL_OW 428
23346: PUSH
23347: LD_VAR 0 1
23351: EQUAL
23352: IFFALSE 23379
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23354: LD_ADDR_EXP 89
23358: PUSH
23359: LD_EXP 89
23363: PPUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: LD_INT 0
23371: PPUSH
23372: CALL_OW 1
23376: ST_TO_ADDR
23377: GO 23430
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23379: LD_ADDR_EXP 89
23383: PUSH
23384: LD_EXP 89
23388: PPUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 255
23403: PUSH
23404: LD_VAR 0 1
23408: PUSH
23409: LD_VAR 0 2
23413: PUSH
23414: LD_VAR 0 3
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: PPUSH
23425: CALL_OW 1
23429: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23430: CALL 23439 0 0
// end ;
23434: LD_VAR 0 4
23438: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23439: LD_INT 0
23441: PPUSH
23442: PPUSH
23443: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23444: LD_STRING resetFactoryWaypoint();
23446: PPUSH
23447: CALL_OW 559
// if factoryWaypoints then
23451: LD_EXP 89
23455: IFFALSE 23581
// begin list := PrepareArray ( factoryWaypoints ) ;
23457: LD_ADDR_VAR 0 3
23461: PUSH
23462: LD_EXP 89
23466: PPUSH
23467: CALL 69874 0 1
23471: ST_TO_ADDR
// for i := 1 to list do
23472: LD_ADDR_VAR 0 2
23476: PUSH
23477: DOUBLE
23478: LD_INT 1
23480: DEC
23481: ST_TO_ADDR
23482: LD_VAR 0 3
23486: PUSH
23487: FOR_TO
23488: IFFALSE 23579
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23490: LD_STRING setFactoryWaypointXY(
23492: PUSH
23493: LD_VAR 0 3
23497: PUSH
23498: LD_VAR 0 2
23502: ARRAY
23503: PUSH
23504: LD_INT 1
23506: ARRAY
23507: STR
23508: PUSH
23509: LD_STRING ,
23511: STR
23512: PUSH
23513: LD_VAR 0 3
23517: PUSH
23518: LD_VAR 0 2
23522: ARRAY
23523: PUSH
23524: LD_INT 2
23526: ARRAY
23527: STR
23528: PUSH
23529: LD_STRING ,
23531: STR
23532: PUSH
23533: LD_VAR 0 3
23537: PUSH
23538: LD_VAR 0 2
23542: ARRAY
23543: PUSH
23544: LD_INT 3
23546: ARRAY
23547: STR
23548: PUSH
23549: LD_STRING ,
23551: STR
23552: PUSH
23553: LD_VAR 0 3
23557: PUSH
23558: LD_VAR 0 2
23562: ARRAY
23563: PUSH
23564: LD_INT 4
23566: ARRAY
23567: STR
23568: PUSH
23569: LD_STRING )
23571: STR
23572: PPUSH
23573: CALL_OW 559
23577: GO 23487
23579: POP
23580: POP
// end ; end ;
23581: LD_VAR 0 1
23585: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23586: LD_INT 0
23588: PPUSH
// if HexInfo ( x , y ) = warehouse then
23589: LD_VAR 0 2
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: CALL_OW 428
23603: PUSH
23604: LD_VAR 0 1
23608: EQUAL
23609: IFFALSE 23636
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23611: LD_ADDR_EXP 90
23615: PUSH
23616: LD_EXP 90
23620: PPUSH
23621: LD_VAR 0 1
23625: PPUSH
23626: LD_INT 0
23628: PPUSH
23629: CALL_OW 1
23633: ST_TO_ADDR
23634: GO 23687
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23636: LD_ADDR_EXP 90
23640: PUSH
23641: LD_EXP 90
23645: PPUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: LD_VAR 0 1
23655: PPUSH
23656: CALL_OW 255
23660: PUSH
23661: LD_VAR 0 1
23665: PUSH
23666: LD_VAR 0 2
23670: PUSH
23671: LD_VAR 0 3
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 1
23686: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23687: CALL 23696 0 0
// end ;
23691: LD_VAR 0 4
23695: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23696: LD_INT 0
23698: PPUSH
23699: PPUSH
23700: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23701: LD_STRING resetWarehouseGatheringPoints();
23703: PPUSH
23704: CALL_OW 559
// if warehouseGatheringPoints then
23708: LD_EXP 90
23712: IFFALSE 23838
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23714: LD_ADDR_VAR 0 3
23718: PUSH
23719: LD_EXP 90
23723: PPUSH
23724: CALL 69874 0 1
23728: ST_TO_ADDR
// for i := 1 to list do
23729: LD_ADDR_VAR 0 2
23733: PUSH
23734: DOUBLE
23735: LD_INT 1
23737: DEC
23738: ST_TO_ADDR
23739: LD_VAR 0 3
23743: PUSH
23744: FOR_TO
23745: IFFALSE 23836
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23747: LD_STRING setWarehouseGatheringPointXY(
23749: PUSH
23750: LD_VAR 0 3
23754: PUSH
23755: LD_VAR 0 2
23759: ARRAY
23760: PUSH
23761: LD_INT 1
23763: ARRAY
23764: STR
23765: PUSH
23766: LD_STRING ,
23768: STR
23769: PUSH
23770: LD_VAR 0 3
23774: PUSH
23775: LD_VAR 0 2
23779: ARRAY
23780: PUSH
23781: LD_INT 2
23783: ARRAY
23784: STR
23785: PUSH
23786: LD_STRING ,
23788: STR
23789: PUSH
23790: LD_VAR 0 3
23794: PUSH
23795: LD_VAR 0 2
23799: ARRAY
23800: PUSH
23801: LD_INT 3
23803: ARRAY
23804: STR
23805: PUSH
23806: LD_STRING ,
23808: STR
23809: PUSH
23810: LD_VAR 0 3
23814: PUSH
23815: LD_VAR 0 2
23819: ARRAY
23820: PUSH
23821: LD_INT 4
23823: ARRAY
23824: STR
23825: PUSH
23826: LD_STRING )
23828: STR
23829: PPUSH
23830: CALL_OW 559
23834: GO 23744
23836: POP
23837: POP
// end ; end ;
23838: LD_VAR 0 1
23842: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23843: LD_EXP 90
23847: IFFALSE 24532
23849: GO 23851
23851: DISABLE
23852: LD_INT 0
23854: PPUSH
23855: PPUSH
23856: PPUSH
23857: PPUSH
23858: PPUSH
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
// begin enable ;
23863: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23864: LD_ADDR_VAR 0 3
23868: PUSH
23869: LD_EXP 90
23873: PPUSH
23874: CALL 69874 0 1
23878: ST_TO_ADDR
// if not list then
23879: LD_VAR 0 3
23883: NOT
23884: IFFALSE 23888
// exit ;
23886: GO 24532
// for i := 1 to list do
23888: LD_ADDR_VAR 0 1
23892: PUSH
23893: DOUBLE
23894: LD_INT 1
23896: DEC
23897: ST_TO_ADDR
23898: LD_VAR 0 3
23902: PUSH
23903: FOR_TO
23904: IFFALSE 24530
// begin depot := list [ i ] [ 2 ] ;
23906: LD_ADDR_VAR 0 8
23910: PUSH
23911: LD_VAR 0 3
23915: PUSH
23916: LD_VAR 0 1
23920: ARRAY
23921: PUSH
23922: LD_INT 2
23924: ARRAY
23925: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23926: LD_ADDR_VAR 0 5
23930: PUSH
23931: LD_VAR 0 3
23935: PUSH
23936: LD_VAR 0 1
23940: ARRAY
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23946: LD_VAR 0 8
23950: PPUSH
23951: CALL_OW 301
23955: PUSH
23956: LD_VAR 0 5
23960: PUSH
23961: LD_VAR 0 8
23965: PPUSH
23966: CALL_OW 255
23970: NONEQUAL
23971: OR
23972: IFFALSE 24001
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23974: LD_ADDR_EXP 90
23978: PUSH
23979: LD_EXP 90
23983: PPUSH
23984: LD_VAR 0 8
23988: PPUSH
23989: LD_INT 0
23991: PPUSH
23992: CALL_OW 1
23996: ST_TO_ADDR
// exit ;
23997: POP
23998: POP
23999: GO 24532
// end ; x := list [ i ] [ 3 ] ;
24001: LD_ADDR_VAR 0 6
24005: PUSH
24006: LD_VAR 0 3
24010: PUSH
24011: LD_VAR 0 1
24015: ARRAY
24016: PUSH
24017: LD_INT 3
24019: ARRAY
24020: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24021: LD_ADDR_VAR 0 7
24025: PUSH
24026: LD_VAR 0 3
24030: PUSH
24031: LD_VAR 0 1
24035: ARRAY
24036: PUSH
24037: LD_INT 4
24039: ARRAY
24040: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24041: LD_ADDR_VAR 0 9
24045: PUSH
24046: LD_VAR 0 6
24050: PPUSH
24051: LD_VAR 0 7
24055: PPUSH
24056: LD_INT 16
24058: PPUSH
24059: CALL 68462 0 3
24063: ST_TO_ADDR
// if not cratesNearbyPoint then
24064: LD_VAR 0 9
24068: NOT
24069: IFFALSE 24075
// exit ;
24071: POP
24072: POP
24073: GO 24532
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_INT 22
24082: PUSH
24083: LD_VAR 0 5
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 3
24094: PUSH
24095: LD_INT 60
24097: PUSH
24098: EMPTY
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 91
24107: PUSH
24108: LD_VAR 0 8
24112: PUSH
24113: LD_INT 6
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 25
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 25
24136: PUSH
24137: LD_INT 16
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 69
24159: PUSH
24160: LD_VAR 0 8
24164: PPUSH
24165: CALL_OW 313
24169: PPUSH
24170: LD_INT 3
24172: PUSH
24173: LD_INT 60
24175: PUSH
24176: EMPTY
24177: LIST
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: LD_INT 25
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 25
24198: PUSH
24199: LD_INT 16
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PPUSH
24215: CALL_OW 72
24219: UNION
24220: ST_TO_ADDR
// if tmp then
24221: LD_VAR 0 4
24225: IFFALSE 24305
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24227: LD_ADDR_VAR 0 4
24231: PUSH
24232: LD_VAR 0 4
24236: PPUSH
24237: LD_INT 3
24239: PPUSH
24240: CALL 66431 0 2
24244: ST_TO_ADDR
// for j in tmp do
24245: LD_ADDR_VAR 0 2
24249: PUSH
24250: LD_VAR 0 4
24254: PUSH
24255: FOR_IN
24256: IFFALSE 24299
// begin if IsInUnit ( j ) then
24258: LD_VAR 0 2
24262: PPUSH
24263: CALL_OW 310
24267: IFFALSE 24278
// ComExit ( j ) ;
24269: LD_VAR 0 2
24273: PPUSH
24274: CALL 66514 0 1
// AddComCollect ( j , x , y ) ;
24278: LD_VAR 0 2
24282: PPUSH
24283: LD_VAR 0 6
24287: PPUSH
24288: LD_VAR 0 7
24292: PPUSH
24293: CALL_OW 177
// end ;
24297: GO 24255
24299: POP
24300: POP
// exit ;
24301: POP
24302: POP
24303: GO 24532
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24305: LD_ADDR_VAR 0 4
24309: PUSH
24310: LD_INT 22
24312: PUSH
24313: LD_VAR 0 5
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 91
24324: PUSH
24325: LD_VAR 0 8
24329: PUSH
24330: LD_INT 8
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: LD_INT 34
24343: PUSH
24344: LD_INT 12
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 34
24353: PUSH
24354: LD_INT 51
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 34
24363: PUSH
24364: LD_INT 32
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 34
24373: PUSH
24374: LD_INT 89
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: PPUSH
24393: CALL_OW 69
24397: ST_TO_ADDR
// if tmp then
24398: LD_VAR 0 4
24402: IFFALSE 24528
// begin for j in tmp do
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: LD_VAR 0 4
24413: PUSH
24414: FOR_IN
24415: IFFALSE 24526
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24417: LD_VAR 0 2
24421: PPUSH
24422: CALL_OW 262
24426: PUSH
24427: LD_INT 3
24429: EQUAL
24430: PUSH
24431: LD_VAR 0 2
24435: PPUSH
24436: CALL_OW 261
24440: PUSH
24441: LD_INT 20
24443: GREATER
24444: OR
24445: PUSH
24446: LD_VAR 0 2
24450: PPUSH
24451: CALL_OW 314
24455: NOT
24456: AND
24457: PUSH
24458: LD_VAR 0 2
24462: PPUSH
24463: CALL_OW 263
24467: PUSH
24468: LD_INT 1
24470: NONEQUAL
24471: PUSH
24472: LD_VAR 0 2
24476: PPUSH
24477: CALL_OW 311
24481: OR
24482: AND
24483: IFFALSE 24524
// begin ComCollect ( j , x , y ) ;
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 6
24494: PPUSH
24495: LD_VAR 0 7
24499: PPUSH
24500: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24504: LD_VAR 0 2
24508: PPUSH
24509: LD_VAR 0 8
24513: PPUSH
24514: CALL_OW 172
// exit ;
24518: POP
24519: POP
24520: POP
24521: POP
24522: GO 24532
// end ;
24524: GO 24414
24526: POP
24527: POP
// end ; end ;
24528: GO 23903
24530: POP
24531: POP
// end ; end_of_file
24532: PPOPN 9
24534: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
24539: PPUSH
24540: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 264
24550: PUSH
24551: LD_INT 91
24553: EQUAL
24554: IFFALSE 24626
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24556: LD_INT 68
24558: PPUSH
24559: LD_VAR 0 1
24563: PPUSH
24564: CALL_OW 255
24568: PPUSH
24569: CALL_OW 321
24573: PUSH
24574: LD_INT 2
24576: EQUAL
24577: IFFALSE 24589
// eff := 70 else
24579: LD_ADDR_VAR 0 4
24583: PUSH
24584: LD_INT 70
24586: ST_TO_ADDR
24587: GO 24597
// eff := 30 ;
24589: LD_ADDR_VAR 0 4
24593: PUSH
24594: LD_INT 30
24596: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 250
24606: PPUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: CALL_OW 251
24616: PPUSH
24617: LD_VAR 0 4
24621: PPUSH
24622: CALL_OW 495
// end ; end ;
24626: LD_VAR 0 2
24630: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24631: LD_INT 0
24633: PPUSH
// end ;
24634: LD_VAR 0 4
24638: RET
// export function SOS_Command ( cmd ) ; begin
24639: LD_INT 0
24641: PPUSH
// end ;
24642: LD_VAR 0 2
24646: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24647: LD_INT 0
24649: PPUSH
// end ;
24650: LD_VAR 0 6
24654: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24655: LD_INT 0
24657: PPUSH
24658: PPUSH
// if not vehicle or not factory then
24659: LD_VAR 0 1
24663: NOT
24664: PUSH
24665: LD_VAR 0 2
24669: NOT
24670: OR
24671: IFFALSE 24675
// exit ;
24673: GO 24906
// if factoryWaypoints >= factory then
24675: LD_EXP 89
24679: PUSH
24680: LD_VAR 0 2
24684: GREATEREQUAL
24685: IFFALSE 24906
// if factoryWaypoints [ factory ] then
24687: LD_EXP 89
24691: PUSH
24692: LD_VAR 0 2
24696: ARRAY
24697: IFFALSE 24906
// begin if GetControl ( vehicle ) = control_manual then
24699: LD_VAR 0 1
24703: PPUSH
24704: CALL_OW 263
24708: PUSH
24709: LD_INT 1
24711: EQUAL
24712: IFFALSE 24793
// begin driver := IsDrivenBy ( vehicle ) ;
24714: LD_ADDR_VAR 0 4
24718: PUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 311
24728: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24729: LD_VAR 0 4
24733: PPUSH
24734: LD_EXP 89
24738: PUSH
24739: LD_VAR 0 2
24743: ARRAY
24744: PUSH
24745: LD_INT 3
24747: ARRAY
24748: PPUSH
24749: LD_EXP 89
24753: PUSH
24754: LD_VAR 0 2
24758: ARRAY
24759: PUSH
24760: LD_INT 4
24762: ARRAY
24763: PPUSH
24764: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24768: LD_VAR 0 4
24772: PPUSH
24773: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24777: LD_VAR 0 4
24781: PPUSH
24782: LD_VAR 0 2
24786: PPUSH
24787: CALL_OW 180
// end else
24791: GO 24906
// if GetControl ( vehicle ) = control_remote then
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 263
24802: PUSH
24803: LD_INT 2
24805: EQUAL
24806: IFFALSE 24867
// begin wait ( 0 0$2 ) ;
24808: LD_INT 70
24810: PPUSH
24811: CALL_OW 67
// if Connect ( vehicle ) then
24815: LD_VAR 0 1
24819: PPUSH
24820: CALL 36755 0 1
24824: IFFALSE 24865
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24826: LD_VAR 0 1
24830: PPUSH
24831: LD_EXP 89
24835: PUSH
24836: LD_VAR 0 2
24840: ARRAY
24841: PUSH
24842: LD_INT 3
24844: ARRAY
24845: PPUSH
24846: LD_EXP 89
24850: PUSH
24851: LD_VAR 0 2
24855: ARRAY
24856: PUSH
24857: LD_INT 4
24859: ARRAY
24860: PPUSH
24861: CALL_OW 171
// end else
24865: GO 24906
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24867: LD_VAR 0 1
24871: PPUSH
24872: LD_EXP 89
24876: PUSH
24877: LD_VAR 0 2
24881: ARRAY
24882: PUSH
24883: LD_INT 3
24885: ARRAY
24886: PPUSH
24887: LD_EXP 89
24891: PUSH
24892: LD_VAR 0 2
24896: ARRAY
24897: PUSH
24898: LD_INT 4
24900: ARRAY
24901: PPUSH
24902: CALL_OW 171
// end ; end ;
24906: LD_VAR 0 3
24910: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24911: LD_INT 0
24913: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24914: LD_VAR 0 1
24918: PUSH
24919: LD_INT 250
24921: EQUAL
24922: PUSH
24923: LD_VAR 0 2
24927: PPUSH
24928: CALL_OW 264
24932: PUSH
24933: LD_INT 81
24935: EQUAL
24936: AND
24937: IFFALSE 24958
// MinerPlaceMine ( unit , x , y ) ;
24939: LD_VAR 0 2
24943: PPUSH
24944: LD_VAR 0 4
24948: PPUSH
24949: LD_VAR 0 5
24953: PPUSH
24954: CALL 27343 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24958: LD_VAR 0 1
24962: PUSH
24963: LD_INT 251
24965: EQUAL
24966: PUSH
24967: LD_VAR 0 2
24971: PPUSH
24972: CALL_OW 264
24976: PUSH
24977: LD_INT 81
24979: EQUAL
24980: AND
24981: IFFALSE 25002
// MinerDetonateMine ( unit , x , y ) ;
24983: LD_VAR 0 2
24987: PPUSH
24988: LD_VAR 0 4
24992: PPUSH
24993: LD_VAR 0 5
24997: PPUSH
24998: CALL 27618 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25002: LD_VAR 0 1
25006: PUSH
25007: LD_INT 252
25009: EQUAL
25010: PUSH
25011: LD_VAR 0 2
25015: PPUSH
25016: CALL_OW 264
25020: PUSH
25021: LD_INT 81
25023: EQUAL
25024: AND
25025: IFFALSE 25046
// MinerCreateMinefield ( unit , x , y ) ;
25027: LD_VAR 0 2
25031: PPUSH
25032: LD_VAR 0 4
25036: PPUSH
25037: LD_VAR 0 5
25041: PPUSH
25042: CALL 28035 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25046: LD_VAR 0 1
25050: PUSH
25051: LD_INT 253
25053: EQUAL
25054: PUSH
25055: LD_VAR 0 2
25059: PPUSH
25060: CALL_OW 257
25064: PUSH
25065: LD_INT 5
25067: EQUAL
25068: AND
25069: IFFALSE 25090
// ComBinocular ( unit , x , y ) ;
25071: LD_VAR 0 2
25075: PPUSH
25076: LD_VAR 0 4
25080: PPUSH
25081: LD_VAR 0 5
25085: PPUSH
25086: CALL 28404 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25090: LD_VAR 0 1
25094: PUSH
25095: LD_INT 254
25097: EQUAL
25098: PUSH
25099: LD_VAR 0 2
25103: PPUSH
25104: CALL_OW 264
25108: PUSH
25109: LD_INT 99
25111: EQUAL
25112: AND
25113: PUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: CALL_OW 263
25123: PUSH
25124: LD_INT 3
25126: EQUAL
25127: AND
25128: IFFALSE 25144
// HackDestroyVehicle ( unit , selectedUnit ) ;
25130: LD_VAR 0 2
25134: PPUSH
25135: LD_VAR 0 3
25139: PPUSH
25140: CALL 26707 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25144: LD_VAR 0 1
25148: PUSH
25149: LD_INT 255
25151: EQUAL
25152: PUSH
25153: LD_VAR 0 2
25157: PPUSH
25158: CALL_OW 264
25162: PUSH
25163: LD_INT 14
25165: PUSH
25166: LD_INT 53
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: IN
25173: AND
25174: PUSH
25175: LD_VAR 0 4
25179: PPUSH
25180: LD_VAR 0 5
25184: PPUSH
25185: CALL_OW 488
25189: AND
25190: IFFALSE 25214
// CutTreeXYR ( unit , x , y , 12 ) ;
25192: LD_VAR 0 2
25196: PPUSH
25197: LD_VAR 0 4
25201: PPUSH
25202: LD_VAR 0 5
25206: PPUSH
25207: LD_INT 12
25209: PPUSH
25210: CALL 25277 0 4
// if cmd = 256 then
25214: LD_VAR 0 1
25218: PUSH
25219: LD_INT 256
25221: EQUAL
25222: IFFALSE 25243
// SetFactoryWaypoint ( unit , x , y ) ;
25224: LD_VAR 0 2
25228: PPUSH
25229: LD_VAR 0 4
25233: PPUSH
25234: LD_VAR 0 5
25238: PPUSH
25239: CALL 23224 0 3
// if cmd = 257 then
25243: LD_VAR 0 1
25247: PUSH
25248: LD_INT 257
25250: EQUAL
25251: IFFALSE 25272
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25253: LD_VAR 0 2
25257: PPUSH
25258: LD_VAR 0 4
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: CALL 23586 0 3
// end ;
25272: LD_VAR 0 6
25276: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25277: LD_INT 0
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25288: LD_VAR 0 1
25292: NOT
25293: PUSH
25294: LD_VAR 0 2
25298: PPUSH
25299: LD_VAR 0 3
25303: PPUSH
25304: CALL_OW 488
25308: NOT
25309: OR
25310: PUSH
25311: LD_VAR 0 4
25315: NOT
25316: OR
25317: IFFALSE 25321
// exit ;
25319: GO 25661
// list := [ ] ;
25321: LD_ADDR_VAR 0 13
25325: PUSH
25326: EMPTY
25327: ST_TO_ADDR
// if x - r < 0 then
25328: LD_VAR 0 2
25332: PUSH
25333: LD_VAR 0 4
25337: MINUS
25338: PUSH
25339: LD_INT 0
25341: LESS
25342: IFFALSE 25354
// min_x := 0 else
25344: LD_ADDR_VAR 0 7
25348: PUSH
25349: LD_INT 0
25351: ST_TO_ADDR
25352: GO 25370
// min_x := x - r ;
25354: LD_ADDR_VAR 0 7
25358: PUSH
25359: LD_VAR 0 2
25363: PUSH
25364: LD_VAR 0 4
25368: MINUS
25369: ST_TO_ADDR
// if y - r < 0 then
25370: LD_VAR 0 3
25374: PUSH
25375: LD_VAR 0 4
25379: MINUS
25380: PUSH
25381: LD_INT 0
25383: LESS
25384: IFFALSE 25396
// min_y := 0 else
25386: LD_ADDR_VAR 0 8
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
25394: GO 25412
// min_y := y - r ;
25396: LD_ADDR_VAR 0 8
25400: PUSH
25401: LD_VAR 0 3
25405: PUSH
25406: LD_VAR 0 4
25410: MINUS
25411: ST_TO_ADDR
// max_x := x + r ;
25412: LD_ADDR_VAR 0 9
25416: PUSH
25417: LD_VAR 0 2
25421: PUSH
25422: LD_VAR 0 4
25426: PLUS
25427: ST_TO_ADDR
// max_y := y + r ;
25428: LD_ADDR_VAR 0 10
25432: PUSH
25433: LD_VAR 0 3
25437: PUSH
25438: LD_VAR 0 4
25442: PLUS
25443: ST_TO_ADDR
// for _x = min_x to max_x do
25444: LD_ADDR_VAR 0 11
25448: PUSH
25449: DOUBLE
25450: LD_VAR 0 7
25454: DEC
25455: ST_TO_ADDR
25456: LD_VAR 0 9
25460: PUSH
25461: FOR_TO
25462: IFFALSE 25579
// for _y = min_y to max_y do
25464: LD_ADDR_VAR 0 12
25468: PUSH
25469: DOUBLE
25470: LD_VAR 0 8
25474: DEC
25475: ST_TO_ADDR
25476: LD_VAR 0 10
25480: PUSH
25481: FOR_TO
25482: IFFALSE 25575
// begin if not ValidHex ( _x , _y ) then
25484: LD_VAR 0 11
25488: PPUSH
25489: LD_VAR 0 12
25493: PPUSH
25494: CALL_OW 488
25498: NOT
25499: IFFALSE 25503
// continue ;
25501: GO 25481
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25503: LD_VAR 0 11
25507: PPUSH
25508: LD_VAR 0 12
25512: PPUSH
25513: CALL_OW 351
25517: PUSH
25518: LD_VAR 0 11
25522: PPUSH
25523: LD_VAR 0 12
25527: PPUSH
25528: CALL_OW 554
25532: AND
25533: IFFALSE 25573
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25535: LD_ADDR_VAR 0 13
25539: PUSH
25540: LD_VAR 0 13
25544: PPUSH
25545: LD_VAR 0 13
25549: PUSH
25550: LD_INT 1
25552: PLUS
25553: PPUSH
25554: LD_VAR 0 11
25558: PUSH
25559: LD_VAR 0 12
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 2
25572: ST_TO_ADDR
// end ;
25573: GO 25481
25575: POP
25576: POP
25577: GO 25461
25579: POP
25580: POP
// if not list then
25581: LD_VAR 0 13
25585: NOT
25586: IFFALSE 25590
// exit ;
25588: GO 25661
// for i in list do
25590: LD_ADDR_VAR 0 6
25594: PUSH
25595: LD_VAR 0 13
25599: PUSH
25600: FOR_IN
25601: IFFALSE 25659
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_STRING M
25610: PUSH
25611: LD_VAR 0 6
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: PUSH
25620: LD_VAR 0 6
25624: PUSH
25625: LD_INT 2
25627: ARRAY
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: PPUSH
25653: CALL_OW 447
25657: GO 25600
25659: POP
25660: POP
// end ;
25661: LD_VAR 0 5
25665: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25666: LD_EXP 92
25670: NOT
25671: IFFALSE 25721
25673: GO 25675
25675: DISABLE
// begin initHack := true ;
25676: LD_ADDR_EXP 92
25680: PUSH
25681: LD_INT 1
25683: ST_TO_ADDR
// hackTanks := [ ] ;
25684: LD_ADDR_EXP 93
25688: PUSH
25689: EMPTY
25690: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25691: LD_ADDR_EXP 94
25695: PUSH
25696: EMPTY
25697: ST_TO_ADDR
// hackLimit := 3 ;
25698: LD_ADDR_EXP 95
25702: PUSH
25703: LD_INT 3
25705: ST_TO_ADDR
// hackDist := 12 ;
25706: LD_ADDR_EXP 96
25710: PUSH
25711: LD_INT 12
25713: ST_TO_ADDR
// hackCounter := [ ] ;
25714: LD_ADDR_EXP 97
25718: PUSH
25719: EMPTY
25720: ST_TO_ADDR
// end ;
25721: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25722: LD_EXP 92
25726: PUSH
25727: LD_INT 34
25729: PUSH
25730: LD_INT 99
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PPUSH
25737: CALL_OW 69
25741: AND
25742: IFFALSE 25995
25744: GO 25746
25746: DISABLE
25747: LD_INT 0
25749: PPUSH
25750: PPUSH
// begin enable ;
25751: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25752: LD_ADDR_VAR 0 1
25756: PUSH
25757: LD_INT 34
25759: PUSH
25760: LD_INT 99
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PPUSH
25767: CALL_OW 69
25771: PUSH
25772: FOR_IN
25773: IFFALSE 25993
// begin if not i in hackTanks then
25775: LD_VAR 0 1
25779: PUSH
25780: LD_EXP 93
25784: IN
25785: NOT
25786: IFFALSE 25869
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25788: LD_ADDR_EXP 93
25792: PUSH
25793: LD_EXP 93
25797: PPUSH
25798: LD_EXP 93
25802: PUSH
25803: LD_INT 1
25805: PLUS
25806: PPUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: CALL_OW 1
25816: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25817: LD_ADDR_EXP 94
25821: PUSH
25822: LD_EXP 94
25826: PPUSH
25827: LD_EXP 94
25831: PUSH
25832: LD_INT 1
25834: PLUS
25835: PPUSH
25836: EMPTY
25837: PPUSH
25838: CALL_OW 1
25842: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25843: LD_ADDR_EXP 97
25847: PUSH
25848: LD_EXP 97
25852: PPUSH
25853: LD_EXP 97
25857: PUSH
25858: LD_INT 1
25860: PLUS
25861: PPUSH
25862: EMPTY
25863: PPUSH
25864: CALL_OW 1
25868: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 302
25878: NOT
25879: IFFALSE 25892
// begin HackUnlinkAll ( i ) ;
25881: LD_VAR 0 1
25885: PPUSH
25886: CALL 25998 0 1
// continue ;
25890: GO 25772
// end ; HackCheckCapturedStatus ( i ) ;
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL 26441 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25901: LD_ADDR_VAR 0 2
25905: PUSH
25906: LD_INT 81
25908: PUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 255
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 33
25925: PUSH
25926: LD_INT 3
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 91
25935: PUSH
25936: LD_VAR 0 1
25940: PUSH
25941: LD_EXP 96
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 50
25953: PUSH
25954: EMPTY
25955: LIST
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: PPUSH
25963: CALL_OW 69
25967: ST_TO_ADDR
// if not tmp then
25968: LD_VAR 0 2
25972: NOT
25973: IFFALSE 25977
// continue ;
25975: GO 25772
// HackLink ( i , tmp ) ;
25977: LD_VAR 0 1
25981: PPUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: CALL 26134 0 2
// end ;
25991: GO 25772
25993: POP
25994: POP
// end ;
25995: PPOPN 2
25997: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25998: LD_INT 0
26000: PPUSH
26001: PPUSH
26002: PPUSH
// if not hack in hackTanks then
26003: LD_VAR 0 1
26007: PUSH
26008: LD_EXP 93
26012: IN
26013: NOT
26014: IFFALSE 26018
// exit ;
26016: GO 26129
// index := GetElementIndex ( hackTanks , hack ) ;
26018: LD_ADDR_VAR 0 4
26022: PUSH
26023: LD_EXP 93
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL 33571 0 2
26037: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26038: LD_EXP 94
26042: PUSH
26043: LD_VAR 0 4
26047: ARRAY
26048: IFFALSE 26129
// begin for i in hackTanksCaptured [ index ] do
26050: LD_ADDR_VAR 0 3
26054: PUSH
26055: LD_EXP 94
26059: PUSH
26060: LD_VAR 0 4
26064: ARRAY
26065: PUSH
26066: FOR_IN
26067: IFFALSE 26093
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26069: LD_VAR 0 3
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 3
26082: PUSH
26083: LD_INT 2
26085: ARRAY
26086: PPUSH
26087: CALL_OW 235
26091: GO 26066
26093: POP
26094: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26095: LD_ADDR_EXP 94
26099: PUSH
26100: LD_EXP 94
26104: PPUSH
26105: LD_VAR 0 4
26109: PPUSH
26110: EMPTY
26111: PPUSH
26112: CALL_OW 1
26116: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26117: LD_VAR 0 1
26121: PPUSH
26122: LD_INT 0
26124: PPUSH
26125: CALL_OW 505
// end ; end ;
26129: LD_VAR 0 2
26133: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26134: LD_INT 0
26136: PPUSH
26137: PPUSH
26138: PPUSH
// if not hack in hackTanks or not vehicles then
26139: LD_VAR 0 1
26143: PUSH
26144: LD_EXP 93
26148: IN
26149: NOT
26150: PUSH
26151: LD_VAR 0 2
26155: NOT
26156: OR
26157: IFFALSE 26161
// exit ;
26159: GO 26436
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26161: LD_ADDR_VAR 0 2
26165: PUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: LD_INT 1
26178: PPUSH
26179: LD_INT 1
26181: PPUSH
26182: CALL 34221 0 4
26186: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26187: LD_ADDR_VAR 0 5
26191: PUSH
26192: LD_EXP 93
26196: PPUSH
26197: LD_VAR 0 1
26201: PPUSH
26202: CALL 33571 0 2
26206: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26207: LD_EXP 94
26211: PUSH
26212: LD_VAR 0 5
26216: ARRAY
26217: PUSH
26218: LD_EXP 95
26222: LESS
26223: IFFALSE 26412
// begin for i := 1 to vehicles do
26225: LD_ADDR_VAR 0 4
26229: PUSH
26230: DOUBLE
26231: LD_INT 1
26233: DEC
26234: ST_TO_ADDR
26235: LD_VAR 0 2
26239: PUSH
26240: FOR_TO
26241: IFFALSE 26410
// begin if hackTanksCaptured [ index ] = hackLimit then
26243: LD_EXP 94
26247: PUSH
26248: LD_VAR 0 5
26252: ARRAY
26253: PUSH
26254: LD_EXP 95
26258: EQUAL
26259: IFFALSE 26263
// break ;
26261: GO 26410
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26263: LD_ADDR_EXP 97
26267: PUSH
26268: LD_EXP 97
26272: PPUSH
26273: LD_VAR 0 5
26277: PPUSH
26278: LD_EXP 97
26282: PUSH
26283: LD_VAR 0 5
26287: ARRAY
26288: PUSH
26289: LD_INT 1
26291: PLUS
26292: PPUSH
26293: CALL_OW 1
26297: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26298: LD_ADDR_EXP 94
26302: PUSH
26303: LD_EXP 94
26307: PPUSH
26308: LD_VAR 0 5
26312: PUSH
26313: LD_EXP 94
26317: PUSH
26318: LD_VAR 0 5
26322: ARRAY
26323: PUSH
26324: LD_INT 1
26326: PLUS
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: LD_VAR 0 2
26336: PUSH
26337: LD_VAR 0 4
26341: ARRAY
26342: PUSH
26343: LD_VAR 0 2
26347: PUSH
26348: LD_VAR 0 4
26352: ARRAY
26353: PPUSH
26354: CALL_OW 255
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PPUSH
26363: CALL 33786 0 3
26367: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26368: LD_VAR 0 2
26372: PUSH
26373: LD_VAR 0 4
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 1
26383: PPUSH
26384: CALL_OW 255
26388: PPUSH
26389: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26393: LD_VAR 0 2
26397: PUSH
26398: LD_VAR 0 4
26402: ARRAY
26403: PPUSH
26404: CALL_OW 141
// end ;
26408: GO 26240
26410: POP
26411: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_EXP 94
26421: PUSH
26422: LD_VAR 0 5
26426: ARRAY
26427: PUSH
26428: LD_INT 0
26430: PLUS
26431: PPUSH
26432: CALL_OW 505
// end ;
26436: LD_VAR 0 3
26440: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
26445: PPUSH
26446: PPUSH
// if not hack in hackTanks then
26447: LD_VAR 0 1
26451: PUSH
26452: LD_EXP 93
26456: IN
26457: NOT
26458: IFFALSE 26462
// exit ;
26460: GO 26702
// index := GetElementIndex ( hackTanks , hack ) ;
26462: LD_ADDR_VAR 0 4
26466: PUSH
26467: LD_EXP 93
26471: PPUSH
26472: LD_VAR 0 1
26476: PPUSH
26477: CALL 33571 0 2
26481: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26482: LD_ADDR_VAR 0 3
26486: PUSH
26487: DOUBLE
26488: LD_EXP 94
26492: PUSH
26493: LD_VAR 0 4
26497: ARRAY
26498: INC
26499: ST_TO_ADDR
26500: LD_INT 1
26502: PUSH
26503: FOR_DOWNTO
26504: IFFALSE 26676
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26506: LD_ADDR_VAR 0 5
26510: PUSH
26511: LD_EXP 94
26515: PUSH
26516: LD_VAR 0 4
26520: ARRAY
26521: PUSH
26522: LD_VAR 0 3
26526: ARRAY
26527: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26528: LD_VAR 0 5
26532: PUSH
26533: LD_INT 1
26535: ARRAY
26536: PPUSH
26537: CALL_OW 302
26541: NOT
26542: PUSH
26543: LD_VAR 0 5
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PPUSH
26552: CALL_OW 255
26556: PUSH
26557: LD_VAR 0 1
26561: PPUSH
26562: CALL_OW 255
26566: NONEQUAL
26567: OR
26568: IFFALSE 26674
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26570: LD_VAR 0 5
26574: PUSH
26575: LD_INT 1
26577: ARRAY
26578: PPUSH
26579: CALL_OW 305
26583: PUSH
26584: LD_VAR 0 5
26588: PUSH
26589: LD_INT 1
26591: ARRAY
26592: PPUSH
26593: CALL_OW 255
26597: PUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 255
26607: EQUAL
26608: AND
26609: IFFALSE 26633
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26611: LD_VAR 0 5
26615: PUSH
26616: LD_INT 1
26618: ARRAY
26619: PPUSH
26620: LD_VAR 0 5
26624: PUSH
26625: LD_INT 2
26627: ARRAY
26628: PPUSH
26629: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26633: LD_ADDR_EXP 94
26637: PUSH
26638: LD_EXP 94
26642: PPUSH
26643: LD_VAR 0 4
26647: PPUSH
26648: LD_EXP 94
26652: PUSH
26653: LD_VAR 0 4
26657: ARRAY
26658: PPUSH
26659: LD_VAR 0 3
26663: PPUSH
26664: CALL_OW 3
26668: PPUSH
26669: CALL_OW 1
26673: ST_TO_ADDR
// end ; end ;
26674: GO 26503
26676: POP
26677: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26678: LD_VAR 0 1
26682: PPUSH
26683: LD_EXP 94
26687: PUSH
26688: LD_VAR 0 4
26692: ARRAY
26693: PUSH
26694: LD_INT 0
26696: PLUS
26697: PPUSH
26698: CALL_OW 505
// end ;
26702: LD_VAR 0 2
26706: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26707: LD_INT 0
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
// if not hack in hackTanks then
26713: LD_VAR 0 1
26717: PUSH
26718: LD_EXP 93
26722: IN
26723: NOT
26724: IFFALSE 26728
// exit ;
26726: GO 26813
// index := GetElementIndex ( hackTanks , hack ) ;
26728: LD_ADDR_VAR 0 5
26732: PUSH
26733: LD_EXP 93
26737: PPUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL 33571 0 2
26747: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26748: LD_ADDR_VAR 0 4
26752: PUSH
26753: DOUBLE
26754: LD_INT 1
26756: DEC
26757: ST_TO_ADDR
26758: LD_EXP 94
26762: PUSH
26763: LD_VAR 0 5
26767: ARRAY
26768: PUSH
26769: FOR_TO
26770: IFFALSE 26811
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26772: LD_EXP 94
26776: PUSH
26777: LD_VAR 0 5
26781: ARRAY
26782: PUSH
26783: LD_VAR 0 4
26787: ARRAY
26788: PUSH
26789: LD_INT 1
26791: ARRAY
26792: PUSH
26793: LD_VAR 0 2
26797: EQUAL
26798: IFFALSE 26809
// KillUnit ( vehicle ) ;
26800: LD_VAR 0 2
26804: PPUSH
26805: CALL_OW 66
26809: GO 26769
26811: POP
26812: POP
// end ;
26813: LD_VAR 0 3
26817: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26818: LD_EXP 98
26822: NOT
26823: IFFALSE 26858
26825: GO 26827
26827: DISABLE
// begin initMiner := true ;
26828: LD_ADDR_EXP 98
26832: PUSH
26833: LD_INT 1
26835: ST_TO_ADDR
// minersList := [ ] ;
26836: LD_ADDR_EXP 99
26840: PUSH
26841: EMPTY
26842: ST_TO_ADDR
// minerMinesList := [ ] ;
26843: LD_ADDR_EXP 100
26847: PUSH
26848: EMPTY
26849: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26850: LD_ADDR_EXP 101
26854: PUSH
26855: LD_INT 5
26857: ST_TO_ADDR
// end ;
26858: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26859: LD_EXP 98
26863: PUSH
26864: LD_INT 34
26866: PUSH
26867: LD_INT 81
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PPUSH
26874: CALL_OW 69
26878: AND
26879: IFFALSE 27340
26881: GO 26883
26883: DISABLE
26884: LD_INT 0
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
// begin enable ;
26890: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26891: LD_ADDR_VAR 0 1
26895: PUSH
26896: LD_INT 34
26898: PUSH
26899: LD_INT 81
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PPUSH
26906: CALL_OW 69
26910: PUSH
26911: FOR_IN
26912: IFFALSE 26984
// begin if not i in minersList then
26914: LD_VAR 0 1
26918: PUSH
26919: LD_EXP 99
26923: IN
26924: NOT
26925: IFFALSE 26982
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26927: LD_ADDR_EXP 99
26931: PUSH
26932: LD_EXP 99
26936: PPUSH
26937: LD_EXP 99
26941: PUSH
26942: LD_INT 1
26944: PLUS
26945: PPUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 1
26955: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26956: LD_ADDR_EXP 100
26960: PUSH
26961: LD_EXP 100
26965: PPUSH
26966: LD_EXP 100
26970: PUSH
26971: LD_INT 1
26973: PLUS
26974: PPUSH
26975: EMPTY
26976: PPUSH
26977: CALL_OW 1
26981: ST_TO_ADDR
// end end ;
26982: GO 26911
26984: POP
26985: POP
// for i := minerMinesList downto 1 do
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: DOUBLE
26992: LD_EXP 100
26996: INC
26997: ST_TO_ADDR
26998: LD_INT 1
27000: PUSH
27001: FOR_DOWNTO
27002: IFFALSE 27338
// begin if IsLive ( minersList [ i ] ) then
27004: LD_EXP 99
27008: PUSH
27009: LD_VAR 0 1
27013: ARRAY
27014: PPUSH
27015: CALL_OW 300
27019: IFFALSE 27047
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27021: LD_EXP 99
27025: PUSH
27026: LD_VAR 0 1
27030: ARRAY
27031: PPUSH
27032: LD_EXP 100
27036: PUSH
27037: LD_VAR 0 1
27041: ARRAY
27042: PPUSH
27043: CALL_OW 505
// if not minerMinesList [ i ] then
27047: LD_EXP 100
27051: PUSH
27052: LD_VAR 0 1
27056: ARRAY
27057: NOT
27058: IFFALSE 27062
// continue ;
27060: GO 27001
// for j := minerMinesList [ i ] downto 1 do
27062: LD_ADDR_VAR 0 2
27066: PUSH
27067: DOUBLE
27068: LD_EXP 100
27072: PUSH
27073: LD_VAR 0 1
27077: ARRAY
27078: INC
27079: ST_TO_ADDR
27080: LD_INT 1
27082: PUSH
27083: FOR_DOWNTO
27084: IFFALSE 27334
// begin side := GetSide ( minersList [ i ] ) ;
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_EXP 99
27095: PUSH
27096: LD_VAR 0 1
27100: ARRAY
27101: PPUSH
27102: CALL_OW 255
27106: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27107: LD_ADDR_VAR 0 4
27111: PUSH
27112: LD_EXP 100
27116: PUSH
27117: LD_VAR 0 1
27121: ARRAY
27122: PUSH
27123: LD_VAR 0 2
27127: ARRAY
27128: PUSH
27129: LD_INT 1
27131: ARRAY
27132: PPUSH
27133: LD_EXP 100
27137: PUSH
27138: LD_VAR 0 1
27142: ARRAY
27143: PUSH
27144: LD_VAR 0 2
27148: ARRAY
27149: PUSH
27150: LD_INT 2
27152: ARRAY
27153: PPUSH
27154: CALL_OW 428
27158: ST_TO_ADDR
// if not tmp then
27159: LD_VAR 0 4
27163: NOT
27164: IFFALSE 27168
// continue ;
27166: GO 27083
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27168: LD_VAR 0 4
27172: PUSH
27173: LD_INT 81
27175: PUSH
27176: LD_VAR 0 3
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PPUSH
27185: CALL_OW 69
27189: IN
27190: PUSH
27191: LD_EXP 100
27195: PUSH
27196: LD_VAR 0 1
27200: ARRAY
27201: PUSH
27202: LD_VAR 0 2
27206: ARRAY
27207: PUSH
27208: LD_INT 1
27210: ARRAY
27211: PPUSH
27212: LD_EXP 100
27216: PUSH
27217: LD_VAR 0 1
27221: ARRAY
27222: PUSH
27223: LD_VAR 0 2
27227: ARRAY
27228: PUSH
27229: LD_INT 2
27231: ARRAY
27232: PPUSH
27233: CALL_OW 458
27237: AND
27238: IFFALSE 27332
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27240: LD_EXP 100
27244: PUSH
27245: LD_VAR 0 1
27249: ARRAY
27250: PUSH
27251: LD_VAR 0 2
27255: ARRAY
27256: PUSH
27257: LD_INT 1
27259: ARRAY
27260: PPUSH
27261: LD_EXP 100
27265: PUSH
27266: LD_VAR 0 1
27270: ARRAY
27271: PUSH
27272: LD_VAR 0 2
27276: ARRAY
27277: PUSH
27278: LD_INT 2
27280: ARRAY
27281: PPUSH
27282: LD_VAR 0 3
27286: PPUSH
27287: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27291: LD_ADDR_EXP 100
27295: PUSH
27296: LD_EXP 100
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: LD_EXP 100
27310: PUSH
27311: LD_VAR 0 1
27315: ARRAY
27316: PPUSH
27317: LD_VAR 0 2
27321: PPUSH
27322: CALL_OW 3
27326: PPUSH
27327: CALL_OW 1
27331: ST_TO_ADDR
// end ; end ;
27332: GO 27083
27334: POP
27335: POP
// end ;
27336: GO 27001
27338: POP
27339: POP
// end ;
27340: PPOPN 4
27342: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27343: LD_INT 0
27345: PPUSH
27346: PPUSH
// result := false ;
27347: LD_ADDR_VAR 0 4
27351: PUSH
27352: LD_INT 0
27354: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 264
27364: PUSH
27365: LD_INT 81
27367: EQUAL
27368: NOT
27369: IFFALSE 27373
// exit ;
27371: GO 27613
// index := GetElementIndex ( minersList , unit ) ;
27373: LD_ADDR_VAR 0 5
27377: PUSH
27378: LD_EXP 99
27382: PPUSH
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL 33571 0 2
27392: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27393: LD_EXP 100
27397: PUSH
27398: LD_VAR 0 5
27402: ARRAY
27403: PUSH
27404: LD_EXP 101
27408: GREATEREQUAL
27409: IFFALSE 27413
// exit ;
27411: GO 27613
// ComMoveXY ( unit , x , y ) ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_VAR 0 2
27422: PPUSH
27423: LD_VAR 0 3
27427: PPUSH
27428: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27432: LD_INT 35
27434: PPUSH
27435: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27439: LD_VAR 0 1
27443: PPUSH
27444: LD_VAR 0 2
27448: PPUSH
27449: LD_VAR 0 3
27453: PPUSH
27454: CALL 64926 0 3
27458: NOT
27459: PUSH
27460: LD_VAR 0 1
27464: PPUSH
27465: CALL_OW 314
27469: AND
27470: IFFALSE 27474
// exit ;
27472: GO 27613
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27474: LD_VAR 0 2
27478: PPUSH
27479: LD_VAR 0 3
27483: PPUSH
27484: CALL_OW 428
27488: PUSH
27489: LD_VAR 0 1
27493: EQUAL
27494: PUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 314
27504: NOT
27505: AND
27506: IFFALSE 27432
// PlaySoundXY ( x , y , PlantMine ) ;
27508: LD_VAR 0 2
27512: PPUSH
27513: LD_VAR 0 3
27517: PPUSH
27518: LD_STRING PlantMine
27520: PPUSH
27521: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27525: LD_VAR 0 2
27529: PPUSH
27530: LD_VAR 0 3
27534: PPUSH
27535: LD_VAR 0 1
27539: PPUSH
27540: CALL_OW 255
27544: PPUSH
27545: LD_INT 0
27547: PPUSH
27548: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27552: LD_ADDR_EXP 100
27556: PUSH
27557: LD_EXP 100
27561: PPUSH
27562: LD_VAR 0 5
27566: PUSH
27567: LD_EXP 100
27571: PUSH
27572: LD_VAR 0 5
27576: ARRAY
27577: PUSH
27578: LD_INT 1
27580: PLUS
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: LD_VAR 0 2
27590: PUSH
27591: LD_VAR 0 3
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PPUSH
27600: CALL 33786 0 3
27604: ST_TO_ADDR
// result := true ;
27605: LD_ADDR_VAR 0 4
27609: PUSH
27610: LD_INT 1
27612: ST_TO_ADDR
// end ;
27613: LD_VAR 0 4
27617: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27618: LD_INT 0
27620: PPUSH
27621: PPUSH
27622: PPUSH
// if not unit in minersList then
27623: LD_VAR 0 1
27627: PUSH
27628: LD_EXP 99
27632: IN
27633: NOT
27634: IFFALSE 27638
// exit ;
27636: GO 28030
// index := GetElementIndex ( minersList , unit ) ;
27638: LD_ADDR_VAR 0 6
27642: PUSH
27643: LD_EXP 99
27647: PPUSH
27648: LD_VAR 0 1
27652: PPUSH
27653: CALL 33571 0 2
27657: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27658: LD_ADDR_VAR 0 5
27662: PUSH
27663: DOUBLE
27664: LD_EXP 100
27668: PUSH
27669: LD_VAR 0 6
27673: ARRAY
27674: INC
27675: ST_TO_ADDR
27676: LD_INT 1
27678: PUSH
27679: FOR_DOWNTO
27680: IFFALSE 27841
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27682: LD_EXP 100
27686: PUSH
27687: LD_VAR 0 6
27691: ARRAY
27692: PUSH
27693: LD_VAR 0 5
27697: ARRAY
27698: PUSH
27699: LD_INT 1
27701: ARRAY
27702: PUSH
27703: LD_VAR 0 2
27707: EQUAL
27708: PUSH
27709: LD_EXP 100
27713: PUSH
27714: LD_VAR 0 6
27718: ARRAY
27719: PUSH
27720: LD_VAR 0 5
27724: ARRAY
27725: PUSH
27726: LD_INT 2
27728: ARRAY
27729: PUSH
27730: LD_VAR 0 3
27734: EQUAL
27735: AND
27736: IFFALSE 27839
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27738: LD_EXP 100
27742: PUSH
27743: LD_VAR 0 6
27747: ARRAY
27748: PUSH
27749: LD_VAR 0 5
27753: ARRAY
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: LD_EXP 100
27763: PUSH
27764: LD_VAR 0 6
27768: ARRAY
27769: PUSH
27770: LD_VAR 0 5
27774: ARRAY
27775: PUSH
27776: LD_INT 2
27778: ARRAY
27779: PPUSH
27780: LD_VAR 0 1
27784: PPUSH
27785: CALL_OW 255
27789: PPUSH
27790: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27794: LD_ADDR_EXP 100
27798: PUSH
27799: LD_EXP 100
27803: PPUSH
27804: LD_VAR 0 6
27808: PPUSH
27809: LD_EXP 100
27813: PUSH
27814: LD_VAR 0 6
27818: ARRAY
27819: PPUSH
27820: LD_VAR 0 5
27824: PPUSH
27825: CALL_OW 3
27829: PPUSH
27830: CALL_OW 1
27834: ST_TO_ADDR
// exit ;
27835: POP
27836: POP
27837: GO 28030
// end ; end ;
27839: GO 27679
27841: POP
27842: POP
// for i := minerMinesList [ index ] downto 1 do
27843: LD_ADDR_VAR 0 5
27847: PUSH
27848: DOUBLE
27849: LD_EXP 100
27853: PUSH
27854: LD_VAR 0 6
27858: ARRAY
27859: INC
27860: ST_TO_ADDR
27861: LD_INT 1
27863: PUSH
27864: FOR_DOWNTO
27865: IFFALSE 28028
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27867: LD_EXP 100
27871: PUSH
27872: LD_VAR 0 6
27876: ARRAY
27877: PUSH
27878: LD_VAR 0 5
27882: ARRAY
27883: PUSH
27884: LD_INT 1
27886: ARRAY
27887: PPUSH
27888: LD_EXP 100
27892: PUSH
27893: LD_VAR 0 6
27897: ARRAY
27898: PUSH
27899: LD_VAR 0 5
27903: ARRAY
27904: PUSH
27905: LD_INT 2
27907: ARRAY
27908: PPUSH
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_VAR 0 3
27918: PPUSH
27919: CALL_OW 298
27923: PUSH
27924: LD_INT 6
27926: LESS
27927: IFFALSE 28026
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27929: LD_EXP 100
27933: PUSH
27934: LD_VAR 0 6
27938: ARRAY
27939: PUSH
27940: LD_VAR 0 5
27944: ARRAY
27945: PUSH
27946: LD_INT 1
27948: ARRAY
27949: PPUSH
27950: LD_EXP 100
27954: PUSH
27955: LD_VAR 0 6
27959: ARRAY
27960: PUSH
27961: LD_VAR 0 5
27965: ARRAY
27966: PUSH
27967: LD_INT 2
27969: ARRAY
27970: PPUSH
27971: LD_VAR 0 1
27975: PPUSH
27976: CALL_OW 255
27980: PPUSH
27981: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27985: LD_ADDR_EXP 100
27989: PUSH
27990: LD_EXP 100
27994: PPUSH
27995: LD_VAR 0 6
27999: PPUSH
28000: LD_EXP 100
28004: PUSH
28005: LD_VAR 0 6
28009: ARRAY
28010: PPUSH
28011: LD_VAR 0 5
28015: PPUSH
28016: CALL_OW 3
28020: PPUSH
28021: CALL_OW 1
28025: ST_TO_ADDR
// end ; end ;
28026: GO 27864
28028: POP
28029: POP
// end ;
28030: LD_VAR 0 4
28034: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28035: LD_INT 0
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
28043: PPUSH
28044: PPUSH
28045: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 264
28055: PUSH
28056: LD_INT 81
28058: EQUAL
28059: NOT
28060: PUSH
28061: LD_VAR 0 1
28065: PUSH
28066: LD_EXP 99
28070: IN
28071: NOT
28072: OR
28073: IFFALSE 28077
// exit ;
28075: GO 28399
// index := GetElementIndex ( minersList , unit ) ;
28077: LD_ADDR_VAR 0 6
28081: PUSH
28082: LD_EXP 99
28086: PPUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL 33571 0 2
28096: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28097: LD_ADDR_VAR 0 8
28101: PUSH
28102: LD_EXP 101
28106: PUSH
28107: LD_EXP 100
28111: PUSH
28112: LD_VAR 0 6
28116: ARRAY
28117: MINUS
28118: ST_TO_ADDR
// if not minesFreeAmount then
28119: LD_VAR 0 8
28123: NOT
28124: IFFALSE 28128
// exit ;
28126: GO 28399
// tmp := [ ] ;
28128: LD_ADDR_VAR 0 7
28132: PUSH
28133: EMPTY
28134: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28135: LD_ADDR_VAR 0 5
28139: PUSH
28140: DOUBLE
28141: LD_INT 1
28143: DEC
28144: ST_TO_ADDR
28145: LD_VAR 0 8
28149: PUSH
28150: FOR_TO
28151: IFFALSE 28346
// begin _d := rand ( 0 , 5 ) ;
28153: LD_ADDR_VAR 0 11
28157: PUSH
28158: LD_INT 0
28160: PPUSH
28161: LD_INT 5
28163: PPUSH
28164: CALL_OW 12
28168: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28169: LD_ADDR_VAR 0 12
28173: PUSH
28174: LD_INT 2
28176: PPUSH
28177: LD_INT 6
28179: PPUSH
28180: CALL_OW 12
28184: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28185: LD_ADDR_VAR 0 9
28189: PUSH
28190: LD_VAR 0 2
28194: PPUSH
28195: LD_VAR 0 11
28199: PPUSH
28200: LD_VAR 0 12
28204: PPUSH
28205: CALL_OW 272
28209: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28210: LD_ADDR_VAR 0 10
28214: PUSH
28215: LD_VAR 0 3
28219: PPUSH
28220: LD_VAR 0 11
28224: PPUSH
28225: LD_VAR 0 12
28229: PPUSH
28230: CALL_OW 273
28234: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28235: LD_VAR 0 9
28239: PPUSH
28240: LD_VAR 0 10
28244: PPUSH
28245: CALL_OW 488
28249: PUSH
28250: LD_VAR 0 9
28254: PUSH
28255: LD_VAR 0 10
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_VAR 0 7
28268: IN
28269: NOT
28270: AND
28271: PUSH
28272: LD_VAR 0 9
28276: PPUSH
28277: LD_VAR 0 10
28281: PPUSH
28282: CALL_OW 458
28286: NOT
28287: AND
28288: IFFALSE 28330
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28290: LD_ADDR_VAR 0 7
28294: PUSH
28295: LD_VAR 0 7
28299: PPUSH
28300: LD_VAR 0 7
28304: PUSH
28305: LD_INT 1
28307: PLUS
28308: PPUSH
28309: LD_VAR 0 9
28313: PUSH
28314: LD_VAR 0 10
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PPUSH
28323: CALL_OW 1
28327: ST_TO_ADDR
28328: GO 28344
// i := i - 1 ;
28330: LD_ADDR_VAR 0 5
28334: PUSH
28335: LD_VAR 0 5
28339: PUSH
28340: LD_INT 1
28342: MINUS
28343: ST_TO_ADDR
// end ;
28344: GO 28150
28346: POP
28347: POP
// for i in tmp do
28348: LD_ADDR_VAR 0 5
28352: PUSH
28353: LD_VAR 0 7
28357: PUSH
28358: FOR_IN
28359: IFFALSE 28397
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28361: LD_VAR 0 1
28365: PPUSH
28366: LD_VAR 0 5
28370: PUSH
28371: LD_INT 1
28373: ARRAY
28374: PPUSH
28375: LD_VAR 0 5
28379: PUSH
28380: LD_INT 2
28382: ARRAY
28383: PPUSH
28384: CALL 27343 0 3
28388: NOT
28389: IFFALSE 28395
// exit ;
28391: POP
28392: POP
28393: GO 28399
28395: GO 28358
28397: POP
28398: POP
// end ;
28399: LD_VAR 0 4
28403: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28404: LD_INT 0
28406: PPUSH
28407: PPUSH
28408: PPUSH
28409: PPUSH
28410: PPUSH
28411: PPUSH
28412: PPUSH
// if not GetClass ( unit ) = class_sniper then
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL_OW 257
28422: PUSH
28423: LD_INT 5
28425: EQUAL
28426: NOT
28427: IFFALSE 28431
// exit ;
28429: GO 28819
// dist := 8 ;
28431: LD_ADDR_VAR 0 5
28435: PUSH
28436: LD_INT 8
28438: ST_TO_ADDR
// viewRange := 12 ;
28439: LD_ADDR_VAR 0 7
28443: PUSH
28444: LD_INT 12
28446: ST_TO_ADDR
// side := GetSide ( unit ) ;
28447: LD_ADDR_VAR 0 6
28451: PUSH
28452: LD_VAR 0 1
28456: PPUSH
28457: CALL_OW 255
28461: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28462: LD_INT 61
28464: PPUSH
28465: LD_VAR 0 6
28469: PPUSH
28470: CALL_OW 321
28474: PUSH
28475: LD_INT 2
28477: EQUAL
28478: IFFALSE 28488
// viewRange := 16 ;
28480: LD_ADDR_VAR 0 7
28484: PUSH
28485: LD_INT 16
28487: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28488: LD_VAR 0 1
28492: PPUSH
28493: LD_VAR 0 2
28497: PPUSH
28498: LD_VAR 0 3
28502: PPUSH
28503: CALL_OW 297
28507: PUSH
28508: LD_VAR 0 5
28512: GREATER
28513: IFFALSE 28592
// begin ComMoveXY ( unit , x , y ) ;
28515: LD_VAR 0 1
28519: PPUSH
28520: LD_VAR 0 2
28524: PPUSH
28525: LD_VAR 0 3
28529: PPUSH
28530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28534: LD_INT 35
28536: PPUSH
28537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28541: LD_VAR 0 1
28545: PPUSH
28546: LD_VAR 0 2
28550: PPUSH
28551: LD_VAR 0 3
28555: PPUSH
28556: CALL 64926 0 3
28560: NOT
28561: IFFALSE 28565
// exit ;
28563: GO 28819
// until GetDistUnitXY ( unit , x , y ) < dist ;
28565: LD_VAR 0 1
28569: PPUSH
28570: LD_VAR 0 2
28574: PPUSH
28575: LD_VAR 0 3
28579: PPUSH
28580: CALL_OW 297
28584: PUSH
28585: LD_VAR 0 5
28589: LESS
28590: IFFALSE 28534
// end ; ComTurnXY ( unit , x , y ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_VAR 0 2
28601: PPUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: CALL_OW 118
// wait ( 5 ) ;
28611: LD_INT 5
28613: PPUSH
28614: CALL_OW 67
// _d := GetDir ( unit ) ;
28618: LD_ADDR_VAR 0 10
28622: PUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 254
28632: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28633: LD_ADDR_VAR 0 8
28637: PUSH
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 250
28647: PPUSH
28648: LD_VAR 0 10
28652: PPUSH
28653: LD_VAR 0 5
28657: PPUSH
28658: CALL_OW 272
28662: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28663: LD_ADDR_VAR 0 9
28667: PUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 251
28677: PPUSH
28678: LD_VAR 0 10
28682: PPUSH
28683: LD_VAR 0 5
28687: PPUSH
28688: CALL_OW 273
28692: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28693: LD_VAR 0 8
28697: PPUSH
28698: LD_VAR 0 9
28702: PPUSH
28703: CALL_OW 488
28707: NOT
28708: IFFALSE 28712
// exit ;
28710: GO 28819
// ComAnimCustom ( unit , 1 ) ;
28712: LD_VAR 0 1
28716: PPUSH
28717: LD_INT 1
28719: PPUSH
28720: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28724: LD_VAR 0 8
28728: PPUSH
28729: LD_VAR 0 9
28733: PPUSH
28734: LD_VAR 0 6
28738: PPUSH
28739: LD_VAR 0 7
28743: PPUSH
28744: CALL_OW 330
// repeat wait ( 1 ) ;
28748: LD_INT 1
28750: PPUSH
28751: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 316
28764: PUSH
28765: LD_VAR 0 1
28769: PPUSH
28770: CALL_OW 314
28774: OR
28775: PUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 302
28785: NOT
28786: OR
28787: PUSH
28788: LD_VAR 0 1
28792: PPUSH
28793: CALL_OW 301
28797: OR
28798: IFFALSE 28748
// RemoveSeeing ( _x , _y , side ) ;
28800: LD_VAR 0 8
28804: PPUSH
28805: LD_VAR 0 9
28809: PPUSH
28810: LD_VAR 0 6
28814: PPUSH
28815: CALL_OW 331
// end ; end_of_file
28819: LD_VAR 0 4
28823: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28824: LD_INT 0
28826: PPUSH
28827: PPUSH
// if exist_mode then
28828: LD_VAR 0 2
28832: IFFALSE 28857
// unit := CreateCharacter ( prefix & ident ) else
28834: LD_ADDR_VAR 0 5
28838: PUSH
28839: LD_VAR 0 3
28843: PUSH
28844: LD_VAR 0 1
28848: STR
28849: PPUSH
28850: CALL_OW 34
28854: ST_TO_ADDR
28855: GO 28872
// unit := NewCharacter ( ident ) ;
28857: LD_ADDR_VAR 0 5
28861: PUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: CALL_OW 25
28871: ST_TO_ADDR
// result := unit ;
28872: LD_ADDR_VAR 0 4
28876: PUSH
28877: LD_VAR 0 5
28881: ST_TO_ADDR
// end ;
28882: LD_VAR 0 4
28886: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
// if not side or not nation then
28891: LD_VAR 0 1
28895: NOT
28896: PUSH
28897: LD_VAR 0 2
28901: NOT
28902: OR
28903: IFFALSE 28907
// exit ;
28905: GO 29675
// case nation of nation_american :
28907: LD_VAR 0 2
28911: PUSH
28912: LD_INT 1
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 29134
28920: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28921: LD_ADDR_VAR 0 4
28925: PUSH
28926: LD_INT 35
28928: PUSH
28929: LD_INT 45
28931: PUSH
28932: LD_INT 46
28934: PUSH
28935: LD_INT 47
28937: PUSH
28938: LD_INT 82
28940: PUSH
28941: LD_INT 83
28943: PUSH
28944: LD_INT 84
28946: PUSH
28947: LD_INT 85
28949: PUSH
28950: LD_INT 86
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 6
28961: PUSH
28962: LD_INT 15
28964: PUSH
28965: LD_INT 16
28967: PUSH
28968: LD_INT 7
28970: PUSH
28971: LD_INT 12
28973: PUSH
28974: LD_INT 13
28976: PUSH
28977: LD_INT 10
28979: PUSH
28980: LD_INT 14
28982: PUSH
28983: LD_INT 20
28985: PUSH
28986: LD_INT 21
28988: PUSH
28989: LD_INT 22
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 32
28997: PUSH
28998: LD_INT 27
29000: PUSH
29001: LD_INT 36
29003: PUSH
29004: LD_INT 69
29006: PUSH
29007: LD_INT 39
29009: PUSH
29010: LD_INT 34
29012: PUSH
29013: LD_INT 40
29015: PUSH
29016: LD_INT 48
29018: PUSH
29019: LD_INT 49
29021: PUSH
29022: LD_INT 50
29024: PUSH
29025: LD_INT 51
29027: PUSH
29028: LD_INT 52
29030: PUSH
29031: LD_INT 53
29033: PUSH
29034: LD_INT 54
29036: PUSH
29037: LD_INT 55
29039: PUSH
29040: LD_INT 56
29042: PUSH
29043: LD_INT 57
29045: PUSH
29046: LD_INT 58
29048: PUSH
29049: LD_INT 59
29051: PUSH
29052: LD_INT 60
29054: PUSH
29055: LD_INT 61
29057: PUSH
29058: LD_INT 62
29060: PUSH
29061: LD_INT 80
29063: PUSH
29064: LD_INT 82
29066: PUSH
29067: LD_INT 83
29069: PUSH
29070: LD_INT 84
29072: PUSH
29073: LD_INT 85
29075: PUSH
29076: LD_INT 86
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: ST_TO_ADDR
29132: GO 29599
29134: LD_INT 2
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29368
29142: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29143: LD_ADDR_VAR 0 4
29147: PUSH
29148: LD_INT 35
29150: PUSH
29151: LD_INT 45
29153: PUSH
29154: LD_INT 46
29156: PUSH
29157: LD_INT 47
29159: PUSH
29160: LD_INT 82
29162: PUSH
29163: LD_INT 83
29165: PUSH
29166: LD_INT 84
29168: PUSH
29169: LD_INT 85
29171: PUSH
29172: LD_INT 87
29174: PUSH
29175: LD_INT 70
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 11
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 4
29189: PUSH
29190: LD_INT 5
29192: PUSH
29193: LD_INT 6
29195: PUSH
29196: LD_INT 15
29198: PUSH
29199: LD_INT 18
29201: PUSH
29202: LD_INT 7
29204: PUSH
29205: LD_INT 17
29207: PUSH
29208: LD_INT 8
29210: PUSH
29211: LD_INT 20
29213: PUSH
29214: LD_INT 21
29216: PUSH
29217: LD_INT 22
29219: PUSH
29220: LD_INT 72
29222: PUSH
29223: LD_INT 26
29225: PUSH
29226: LD_INT 69
29228: PUSH
29229: LD_INT 39
29231: PUSH
29232: LD_INT 40
29234: PUSH
29235: LD_INT 41
29237: PUSH
29238: LD_INT 42
29240: PUSH
29241: LD_INT 43
29243: PUSH
29244: LD_INT 48
29246: PUSH
29247: LD_INT 49
29249: PUSH
29250: LD_INT 50
29252: PUSH
29253: LD_INT 51
29255: PUSH
29256: LD_INT 52
29258: PUSH
29259: LD_INT 53
29261: PUSH
29262: LD_INT 54
29264: PUSH
29265: LD_INT 55
29267: PUSH
29268: LD_INT 56
29270: PUSH
29271: LD_INT 60
29273: PUSH
29274: LD_INT 61
29276: PUSH
29277: LD_INT 62
29279: PUSH
29280: LD_INT 66
29282: PUSH
29283: LD_INT 67
29285: PUSH
29286: LD_INT 68
29288: PUSH
29289: LD_INT 81
29291: PUSH
29292: LD_INT 82
29294: PUSH
29295: LD_INT 83
29297: PUSH
29298: LD_INT 84
29300: PUSH
29301: LD_INT 85
29303: PUSH
29304: LD_INT 87
29306: PUSH
29307: LD_INT 88
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: ST_TO_ADDR
29366: GO 29599
29368: LD_INT 3
29370: DOUBLE
29371: EQUAL
29372: IFTRUE 29376
29374: GO 29598
29376: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29377: LD_ADDR_VAR 0 4
29381: PUSH
29382: LD_INT 46
29384: PUSH
29385: LD_INT 47
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: LD_INT 82
29396: PUSH
29397: LD_INT 83
29399: PUSH
29400: LD_INT 84
29402: PUSH
29403: LD_INT 85
29405: PUSH
29406: LD_INT 86
29408: PUSH
29409: LD_INT 11
29411: PUSH
29412: LD_INT 9
29414: PUSH
29415: LD_INT 20
29417: PUSH
29418: LD_INT 19
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 24
29426: PUSH
29427: LD_INT 22
29429: PUSH
29430: LD_INT 25
29432: PUSH
29433: LD_INT 28
29435: PUSH
29436: LD_INT 29
29438: PUSH
29439: LD_INT 30
29441: PUSH
29442: LD_INT 31
29444: PUSH
29445: LD_INT 37
29447: PUSH
29448: LD_INT 38
29450: PUSH
29451: LD_INT 32
29453: PUSH
29454: LD_INT 27
29456: PUSH
29457: LD_INT 33
29459: PUSH
29460: LD_INT 69
29462: PUSH
29463: LD_INT 39
29465: PUSH
29466: LD_INT 34
29468: PUSH
29469: LD_INT 40
29471: PUSH
29472: LD_INT 71
29474: PUSH
29475: LD_INT 23
29477: PUSH
29478: LD_INT 44
29480: PUSH
29481: LD_INT 48
29483: PUSH
29484: LD_INT 49
29486: PUSH
29487: LD_INT 50
29489: PUSH
29490: LD_INT 51
29492: PUSH
29493: LD_INT 52
29495: PUSH
29496: LD_INT 53
29498: PUSH
29499: LD_INT 54
29501: PUSH
29502: LD_INT 55
29504: PUSH
29505: LD_INT 56
29507: PUSH
29508: LD_INT 57
29510: PUSH
29511: LD_INT 58
29513: PUSH
29514: LD_INT 59
29516: PUSH
29517: LD_INT 63
29519: PUSH
29520: LD_INT 64
29522: PUSH
29523: LD_INT 65
29525: PUSH
29526: LD_INT 82
29528: PUSH
29529: LD_INT 83
29531: PUSH
29532: LD_INT 84
29534: PUSH
29535: LD_INT 85
29537: PUSH
29538: LD_INT 86
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
29596: GO 29599
29598: POP
// if state > - 1 and state < 3 then
29599: LD_VAR 0 3
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: GREATER
29608: PUSH
29609: LD_VAR 0 3
29613: PUSH
29614: LD_INT 3
29616: LESS
29617: AND
29618: IFFALSE 29675
// for i in result do
29620: LD_ADDR_VAR 0 5
29624: PUSH
29625: LD_VAR 0 4
29629: PUSH
29630: FOR_IN
29631: IFFALSE 29673
// if GetTech ( i , side ) <> state then
29633: LD_VAR 0 5
29637: PPUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 321
29647: PUSH
29648: LD_VAR 0 3
29652: NONEQUAL
29653: IFFALSE 29671
// result := result diff i ;
29655: LD_ADDR_VAR 0 4
29659: PUSH
29660: LD_VAR 0 4
29664: PUSH
29665: LD_VAR 0 5
29669: DIFF
29670: ST_TO_ADDR
29671: GO 29630
29673: POP
29674: POP
// end ;
29675: LD_VAR 0 4
29679: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29680: LD_INT 0
29682: PPUSH
29683: PPUSH
29684: PPUSH
// result := true ;
29685: LD_ADDR_VAR 0 3
29689: PUSH
29690: LD_INT 1
29692: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29693: LD_ADDR_VAR 0 5
29697: PUSH
29698: LD_VAR 0 2
29702: PPUSH
29703: CALL_OW 480
29707: ST_TO_ADDR
// if not tmp then
29708: LD_VAR 0 5
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29766
// for i in tmp do
29717: LD_ADDR_VAR 0 4
29721: PUSH
29722: LD_VAR 0 5
29726: PUSH
29727: FOR_IN
29728: IFFALSE 29764
// if GetTech ( i , side ) <> state_researched then
29730: LD_VAR 0 4
29734: PPUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: NONEQUAL
29748: IFFALSE 29762
// begin result := false ;
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 0
29757: ST_TO_ADDR
// exit ;
29758: POP
29759: POP
29760: GO 29766
// end ;
29762: GO 29727
29764: POP
29765: POP
// end ;
29766: LD_VAR 0 3
29770: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29771: LD_INT 0
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29786: LD_VAR 0 1
29790: NOT
29791: PUSH
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL_OW 257
29801: PUSH
29802: LD_INT 9
29804: NONEQUAL
29805: OR
29806: IFFALSE 29810
// exit ;
29808: GO 30383
// side := GetSide ( unit ) ;
29810: LD_ADDR_VAR 0 9
29814: PUSH
29815: LD_VAR 0 1
29819: PPUSH
29820: CALL_OW 255
29824: ST_TO_ADDR
// tech_space := tech_spacanom ;
29825: LD_ADDR_VAR 0 12
29829: PUSH
29830: LD_INT 29
29832: ST_TO_ADDR
// tech_time := tech_taurad ;
29833: LD_ADDR_VAR 0 13
29837: PUSH
29838: LD_INT 28
29840: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29841: LD_ADDR_VAR 0 11
29845: PUSH
29846: LD_VAR 0 1
29850: PPUSH
29851: CALL_OW 310
29855: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29856: LD_VAR 0 11
29860: PPUSH
29861: CALL_OW 247
29865: PUSH
29866: LD_INT 2
29868: EQUAL
29869: IFFALSE 29873
// exit ;
29871: GO 30383
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29873: LD_ADDR_VAR 0 8
29877: PUSH
29878: LD_INT 81
29880: PUSH
29881: LD_VAR 0 9
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 21
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: ST_TO_ADDR
// if not tmp then
29916: LD_VAR 0 8
29920: NOT
29921: IFFALSE 29925
// exit ;
29923: GO 30383
// if in_unit then
29925: LD_VAR 0 11
29929: IFFALSE 29953
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29931: LD_ADDR_VAR 0 10
29935: PUSH
29936: LD_VAR 0 8
29940: PPUSH
29941: LD_VAR 0 11
29945: PPUSH
29946: CALL_OW 74
29950: ST_TO_ADDR
29951: GO 29973
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29953: LD_ADDR_VAR 0 10
29957: PUSH
29958: LD_VAR 0 8
29962: PPUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 74
29972: ST_TO_ADDR
// if not enemy then
29973: LD_VAR 0 10
29977: NOT
29978: IFFALSE 29982
// exit ;
29980: GO 30383
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29982: LD_VAR 0 11
29986: PUSH
29987: LD_VAR 0 11
29991: PPUSH
29992: LD_VAR 0 10
29996: PPUSH
29997: CALL_OW 296
30001: PUSH
30002: LD_INT 13
30004: GREATER
30005: AND
30006: PUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: LD_VAR 0 10
30016: PPUSH
30017: CALL_OW 296
30021: PUSH
30022: LD_INT 12
30024: GREATER
30025: OR
30026: IFFALSE 30030
// exit ;
30028: GO 30383
// missile := [ 1 ] ;
30030: LD_ADDR_VAR 0 14
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30041: LD_VAR 0 9
30045: PPUSH
30046: LD_VAR 0 12
30050: PPUSH
30051: CALL_OW 325
30055: IFFALSE 30084
// missile := Replace ( missile , missile + 1 , 2 ) ;
30057: LD_ADDR_VAR 0 14
30061: PUSH
30062: LD_VAR 0 14
30066: PPUSH
30067: LD_VAR 0 14
30071: PUSH
30072: LD_INT 1
30074: PLUS
30075: PPUSH
30076: LD_INT 2
30078: PPUSH
30079: CALL_OW 1
30083: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30084: LD_VAR 0 9
30088: PPUSH
30089: LD_VAR 0 13
30093: PPUSH
30094: CALL_OW 325
30098: PUSH
30099: LD_VAR 0 10
30103: PPUSH
30104: CALL_OW 255
30108: PPUSH
30109: LD_VAR 0 13
30113: PPUSH
30114: CALL_OW 325
30118: NOT
30119: AND
30120: IFFALSE 30149
// missile := Replace ( missile , missile + 1 , 3 ) ;
30122: LD_ADDR_VAR 0 14
30126: PUSH
30127: LD_VAR 0 14
30131: PPUSH
30132: LD_VAR 0 14
30136: PUSH
30137: LD_INT 1
30139: PLUS
30140: PPUSH
30141: LD_INT 3
30143: PPUSH
30144: CALL_OW 1
30148: ST_TO_ADDR
// if missile < 2 then
30149: LD_VAR 0 14
30153: PUSH
30154: LD_INT 2
30156: LESS
30157: IFFALSE 30161
// exit ;
30159: GO 30383
// x := GetX ( enemy ) ;
30161: LD_ADDR_VAR 0 4
30165: PUSH
30166: LD_VAR 0 10
30170: PPUSH
30171: CALL_OW 250
30175: ST_TO_ADDR
// y := GetY ( enemy ) ;
30176: LD_ADDR_VAR 0 5
30180: PUSH
30181: LD_VAR 0 10
30185: PPUSH
30186: CALL_OW 251
30190: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30191: LD_ADDR_VAR 0 6
30195: PUSH
30196: LD_VAR 0 4
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PPUSH
30205: LD_INT 1
30207: PPUSH
30208: CALL_OW 12
30212: PLUS
30213: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30214: LD_ADDR_VAR 0 7
30218: PUSH
30219: LD_VAR 0 5
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 12
30235: PLUS
30236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30237: LD_VAR 0 6
30241: PPUSH
30242: LD_VAR 0 7
30246: PPUSH
30247: CALL_OW 488
30251: NOT
30252: IFFALSE 30274
// begin _x := x ;
30254: LD_ADDR_VAR 0 6
30258: PUSH
30259: LD_VAR 0 4
30263: ST_TO_ADDR
// _y := y ;
30264: LD_ADDR_VAR 0 7
30268: PUSH
30269: LD_VAR 0 5
30273: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30274: LD_ADDR_VAR 0 3
30278: PUSH
30279: LD_INT 1
30281: PPUSH
30282: LD_VAR 0 14
30286: PPUSH
30287: CALL_OW 12
30291: ST_TO_ADDR
// case i of 1 :
30292: LD_VAR 0 3
30296: PUSH
30297: LD_INT 1
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30322
30305: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30306: LD_VAR 0 1
30310: PPUSH
30311: LD_VAR 0 10
30315: PPUSH
30316: CALL_OW 115
30320: GO 30383
30322: LD_INT 2
30324: DOUBLE
30325: EQUAL
30326: IFTRUE 30330
30328: GO 30352
30330: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30331: LD_VAR 0 1
30335: PPUSH
30336: LD_VAR 0 6
30340: PPUSH
30341: LD_VAR 0 7
30345: PPUSH
30346: CALL_OW 153
30350: GO 30383
30352: LD_INT 3
30354: DOUBLE
30355: EQUAL
30356: IFTRUE 30360
30358: GO 30382
30360: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_VAR 0 6
30370: PPUSH
30371: LD_VAR 0 7
30375: PPUSH
30376: CALL_OW 154
30380: GO 30383
30382: POP
// end ;
30383: LD_VAR 0 2
30387: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30388: LD_INT 0
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
// if not unit or not building then
30396: LD_VAR 0 1
30400: NOT
30401: PUSH
30402: LD_VAR 0 2
30406: NOT
30407: OR
30408: IFFALSE 30412
// exit ;
30410: GO 30570
// x := GetX ( building ) ;
30412: LD_ADDR_VAR 0 5
30416: PUSH
30417: LD_VAR 0 2
30421: PPUSH
30422: CALL_OW 250
30426: ST_TO_ADDR
// y := GetY ( building ) ;
30427: LD_ADDR_VAR 0 6
30431: PUSH
30432: LD_VAR 0 2
30436: PPUSH
30437: CALL_OW 251
30441: ST_TO_ADDR
// for i = 0 to 5 do
30442: LD_ADDR_VAR 0 4
30446: PUSH
30447: DOUBLE
30448: LD_INT 0
30450: DEC
30451: ST_TO_ADDR
30452: LD_INT 5
30454: PUSH
30455: FOR_TO
30456: IFFALSE 30568
// begin _x := ShiftX ( x , i , 3 ) ;
30458: LD_ADDR_VAR 0 7
30462: PUSH
30463: LD_VAR 0 5
30467: PPUSH
30468: LD_VAR 0 4
30472: PPUSH
30473: LD_INT 3
30475: PPUSH
30476: CALL_OW 272
30480: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30481: LD_ADDR_VAR 0 8
30485: PUSH
30486: LD_VAR 0 6
30490: PPUSH
30491: LD_VAR 0 4
30495: PPUSH
30496: LD_INT 3
30498: PPUSH
30499: CALL_OW 273
30503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30504: LD_VAR 0 7
30508: PPUSH
30509: LD_VAR 0 8
30513: PPUSH
30514: CALL_OW 488
30518: NOT
30519: IFFALSE 30523
// continue ;
30521: GO 30455
// if HexInfo ( _x , _y ) = 0 then
30523: LD_VAR 0 7
30527: PPUSH
30528: LD_VAR 0 8
30532: PPUSH
30533: CALL_OW 428
30537: PUSH
30538: LD_INT 0
30540: EQUAL
30541: IFFALSE 30566
// begin ComMoveXY ( unit , _x , _y ) ;
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_VAR 0 7
30552: PPUSH
30553: LD_VAR 0 8
30557: PPUSH
30558: CALL_OW 111
// exit ;
30562: POP
30563: POP
30564: GO 30570
// end ; end ;
30566: GO 30455
30568: POP
30569: POP
// end ;
30570: LD_VAR 0 3
30574: RET
// export function ScanBase ( side , base_area ) ; begin
30575: LD_INT 0
30577: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30578: LD_ADDR_VAR 0 3
30582: PUSH
30583: LD_VAR 0 2
30587: PPUSH
30588: LD_INT 81
30590: PUSH
30591: LD_VAR 0 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PPUSH
30600: CALL_OW 70
30604: ST_TO_ADDR
// end ;
30605: LD_VAR 0 3
30609: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30610: LD_INT 0
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
// result := false ;
30616: LD_ADDR_VAR 0 2
30620: PUSH
30621: LD_INT 0
30623: ST_TO_ADDR
// side := GetSide ( unit ) ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 255
30638: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30639: LD_ADDR_VAR 0 4
30643: PUSH
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 248
30653: ST_TO_ADDR
// case nat of 1 :
30654: LD_VAR 0 4
30658: PUSH
30659: LD_INT 1
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 30678
30667: POP
// tech := tech_lassight ; 2 :
30668: LD_ADDR_VAR 0 5
30672: PUSH
30673: LD_INT 12
30675: ST_TO_ADDR
30676: GO 30717
30678: LD_INT 2
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30697
30686: POP
// tech := tech_mortar ; 3 :
30687: LD_ADDR_VAR 0 5
30691: PUSH
30692: LD_INT 41
30694: ST_TO_ADDR
30695: GO 30717
30697: LD_INT 3
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30705
30703: GO 30716
30705: POP
// tech := tech_bazooka ; end ;
30706: LD_ADDR_VAR 0 5
30710: PUSH
30711: LD_INT 44
30713: ST_TO_ADDR
30714: GO 30717
30716: POP
// if Researched ( side , tech ) then
30717: LD_VAR 0 3
30721: PPUSH
30722: LD_VAR 0 5
30726: PPUSH
30727: CALL_OW 325
30731: IFFALSE 30758
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30733: LD_ADDR_VAR 0 2
30737: PUSH
30738: LD_INT 5
30740: PUSH
30741: LD_INT 8
30743: PUSH
30744: LD_INT 9
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: PUSH
30752: LD_VAR 0 4
30756: ARRAY
30757: ST_TO_ADDR
// end ;
30758: LD_VAR 0 2
30762: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30763: LD_INT 0
30765: PPUSH
30766: PPUSH
30767: PPUSH
// if not mines then
30768: LD_VAR 0 2
30772: NOT
30773: IFFALSE 30777
// exit ;
30775: GO 30921
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30777: LD_ADDR_VAR 0 5
30781: PUSH
30782: LD_INT 81
30784: PUSH
30785: LD_VAR 0 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 3
30796: PUSH
30797: LD_INT 21
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 69
30819: ST_TO_ADDR
// for i in mines do
30820: LD_ADDR_VAR 0 4
30824: PUSH
30825: LD_VAR 0 2
30829: PUSH
30830: FOR_IN
30831: IFFALSE 30919
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30833: LD_VAR 0 4
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_VAR 0 4
30846: PUSH
30847: LD_INT 2
30849: ARRAY
30850: PPUSH
30851: CALL_OW 458
30855: NOT
30856: IFFALSE 30860
// continue ;
30858: GO 30830
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30860: LD_VAR 0 4
30864: PUSH
30865: LD_INT 1
30867: ARRAY
30868: PPUSH
30869: LD_VAR 0 4
30873: PUSH
30874: LD_INT 2
30876: ARRAY
30877: PPUSH
30878: CALL_OW 428
30882: PUSH
30883: LD_VAR 0 5
30887: IN
30888: IFFALSE 30917
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30890: LD_VAR 0 4
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PPUSH
30899: LD_VAR 0 4
30903: PUSH
30904: LD_INT 2
30906: ARRAY
30907: PPUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 456
// end ;
30917: GO 30830
30919: POP
30920: POP
// end ;
30921: LD_VAR 0 3
30925: RET
// export function Count ( array ) ; begin
30926: LD_INT 0
30928: PPUSH
// result := array + 0 ;
30929: LD_ADDR_VAR 0 2
30933: PUSH
30934: LD_VAR 0 1
30938: PUSH
30939: LD_INT 0
30941: PLUS
30942: ST_TO_ADDR
// end ;
30943: LD_VAR 0 2
30947: RET
// export function IsEmpty ( building ) ; begin
30948: LD_INT 0
30950: PPUSH
// if not building then
30951: LD_VAR 0 1
30955: NOT
30956: IFFALSE 30960
// exit ;
30958: GO 31003
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30960: LD_ADDR_VAR 0 2
30964: PUSH
30965: LD_VAR 0 1
30969: PUSH
30970: LD_INT 22
30972: PUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: CALL_OW 255
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 58
30989: PUSH
30990: EMPTY
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PPUSH
30997: CALL_OW 69
31001: IN
31002: ST_TO_ADDR
// end ;
31003: LD_VAR 0 2
31007: RET
// export function IsNotFull ( building ) ; var places ; begin
31008: LD_INT 0
31010: PPUSH
31011: PPUSH
// if not building then
31012: LD_VAR 0 1
31016: NOT
31017: IFFALSE 31021
// exit ;
31019: GO 31049
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31021: LD_ADDR_VAR 0 2
31025: PUSH
31026: LD_VAR 0 1
31030: PPUSH
31031: LD_INT 3
31033: PUSH
31034: LD_INT 62
31036: PUSH
31037: EMPTY
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PPUSH
31044: CALL_OW 72
31048: ST_TO_ADDR
// end ;
31049: LD_VAR 0 2
31053: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31054: LD_INT 0
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
// tmp := [ ] ;
31060: LD_ADDR_VAR 0 3
31064: PUSH
31065: EMPTY
31066: ST_TO_ADDR
// list := [ ] ;
31067: LD_ADDR_VAR 0 5
31071: PUSH
31072: EMPTY
31073: ST_TO_ADDR
// for i = 16 to 25 do
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: DOUBLE
31080: LD_INT 16
31082: DEC
31083: ST_TO_ADDR
31084: LD_INT 25
31086: PUSH
31087: FOR_TO
31088: IFFALSE 31161
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31090: LD_ADDR_VAR 0 3
31094: PUSH
31095: LD_VAR 0 3
31099: PUSH
31100: LD_INT 22
31102: PUSH
31103: LD_VAR 0 1
31107: PPUSH
31108: CALL_OW 255
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 91
31119: PUSH
31120: LD_VAR 0 1
31124: PUSH
31125: LD_INT 6
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 30
31135: PUSH
31136: LD_VAR 0 4
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: PUSH
31150: EMPTY
31151: LIST
31152: PPUSH
31153: CALL_OW 69
31157: ADD
31158: ST_TO_ADDR
31159: GO 31087
31161: POP
31162: POP
// for i = 1 to tmp do
31163: LD_ADDR_VAR 0 4
31167: PUSH
31168: DOUBLE
31169: LD_INT 1
31171: DEC
31172: ST_TO_ADDR
31173: LD_VAR 0 3
31177: PUSH
31178: FOR_TO
31179: IFFALSE 31267
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31181: LD_ADDR_VAR 0 5
31185: PUSH
31186: LD_VAR 0 5
31190: PUSH
31191: LD_VAR 0 3
31195: PUSH
31196: LD_VAR 0 4
31200: ARRAY
31201: PPUSH
31202: CALL_OW 266
31206: PUSH
31207: LD_VAR 0 3
31211: PUSH
31212: LD_VAR 0 4
31216: ARRAY
31217: PPUSH
31218: CALL_OW 250
31222: PUSH
31223: LD_VAR 0 3
31227: PUSH
31228: LD_VAR 0 4
31232: ARRAY
31233: PPUSH
31234: CALL_OW 251
31238: PUSH
31239: LD_VAR 0 3
31243: PUSH
31244: LD_VAR 0 4
31248: ARRAY
31249: PPUSH
31250: CALL_OW 254
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: ADD
31264: ST_TO_ADDR
31265: GO 31178
31267: POP
31268: POP
// result := list ;
31269: LD_ADDR_VAR 0 2
31273: PUSH
31274: LD_VAR 0 5
31278: ST_TO_ADDR
// end ;
31279: LD_VAR 0 2
31283: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31284: LD_INT 0
31286: PPUSH
31287: PPUSH
31288: PPUSH
31289: PPUSH
31290: PPUSH
31291: PPUSH
31292: PPUSH
// if not factory then
31293: LD_VAR 0 1
31297: NOT
31298: IFFALSE 31302
// exit ;
31300: GO 31895
// if control = control_apeman then
31302: LD_VAR 0 4
31306: PUSH
31307: LD_INT 5
31309: EQUAL
31310: IFFALSE 31419
// begin tmp := UnitsInside ( factory ) ;
31312: LD_ADDR_VAR 0 8
31316: PUSH
31317: LD_VAR 0 1
31321: PPUSH
31322: CALL_OW 313
31326: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31327: LD_VAR 0 8
31331: PPUSH
31332: LD_INT 25
31334: PUSH
31335: LD_INT 12
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PPUSH
31342: CALL_OW 72
31346: NOT
31347: IFFALSE 31357
// control := control_manual ;
31349: LD_ADDR_VAR 0 4
31353: PUSH
31354: LD_INT 1
31356: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31357: LD_ADDR_VAR 0 8
31361: PUSH
31362: LD_VAR 0 1
31366: PPUSH
31367: CALL 31054 0 1
31371: ST_TO_ADDR
// if tmp then
31372: LD_VAR 0 8
31376: IFFALSE 31419
// begin for i in tmp do
31378: LD_ADDR_VAR 0 7
31382: PUSH
31383: LD_VAR 0 8
31387: PUSH
31388: FOR_IN
31389: IFFALSE 31417
// if i [ 1 ] = b_ext_radio then
31391: LD_VAR 0 7
31395: PUSH
31396: LD_INT 1
31398: ARRAY
31399: PUSH
31400: LD_INT 22
31402: EQUAL
31403: IFFALSE 31415
// begin control := control_remote ;
31405: LD_ADDR_VAR 0 4
31409: PUSH
31410: LD_INT 2
31412: ST_TO_ADDR
// break ;
31413: GO 31417
// end ;
31415: GO 31388
31417: POP
31418: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31419: LD_VAR 0 1
31423: PPUSH
31424: LD_VAR 0 2
31428: PPUSH
31429: LD_VAR 0 3
31433: PPUSH
31434: LD_VAR 0 4
31438: PPUSH
31439: LD_VAR 0 5
31443: PPUSH
31444: CALL_OW 448
31448: IFFALSE 31483
// begin result := [ chassis , engine , control , weapon ] ;
31450: LD_ADDR_VAR 0 6
31454: PUSH
31455: LD_VAR 0 2
31459: PUSH
31460: LD_VAR 0 3
31464: PUSH
31465: LD_VAR 0 4
31469: PUSH
31470: LD_VAR 0 5
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// exit ;
31481: GO 31895
// end ; _chassis := AvailableChassisList ( factory ) ;
31483: LD_ADDR_VAR 0 9
31487: PUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: CALL_OW 475
31497: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31498: LD_ADDR_VAR 0 11
31502: PUSH
31503: LD_VAR 0 1
31507: PPUSH
31508: CALL_OW 476
31512: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31513: LD_ADDR_VAR 0 12
31517: PUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 477
31527: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31528: LD_ADDR_VAR 0 10
31532: PUSH
31533: LD_VAR 0 1
31537: PPUSH
31538: CALL_OW 478
31542: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31543: LD_VAR 0 9
31547: NOT
31548: PUSH
31549: LD_VAR 0 11
31553: NOT
31554: OR
31555: PUSH
31556: LD_VAR 0 12
31560: NOT
31561: OR
31562: PUSH
31563: LD_VAR 0 10
31567: NOT
31568: OR
31569: IFFALSE 31604
// begin result := [ chassis , engine , control , weapon ] ;
31571: LD_ADDR_VAR 0 6
31575: PUSH
31576: LD_VAR 0 2
31580: PUSH
31581: LD_VAR 0 3
31585: PUSH
31586: LD_VAR 0 4
31590: PUSH
31591: LD_VAR 0 5
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
// exit ;
31602: GO 31895
// end ; if not chassis in _chassis then
31604: LD_VAR 0 2
31608: PUSH
31609: LD_VAR 0 9
31613: IN
31614: NOT
31615: IFFALSE 31641
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31617: LD_ADDR_VAR 0 2
31621: PUSH
31622: LD_VAR 0 9
31626: PUSH
31627: LD_INT 1
31629: PPUSH
31630: LD_VAR 0 9
31634: PPUSH
31635: CALL_OW 12
31639: ARRAY
31640: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31641: LD_VAR 0 2
31645: PPUSH
31646: LD_VAR 0 3
31650: PPUSH
31651: CALL 31900 0 2
31655: NOT
31656: IFFALSE 31715
// repeat engine := _engine [ 1 ] ;
31658: LD_ADDR_VAR 0 3
31662: PUSH
31663: LD_VAR 0 11
31667: PUSH
31668: LD_INT 1
31670: ARRAY
31671: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31672: LD_ADDR_VAR 0 11
31676: PUSH
31677: LD_VAR 0 11
31681: PPUSH
31682: LD_INT 1
31684: PPUSH
31685: CALL_OW 3
31689: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31690: LD_VAR 0 2
31694: PPUSH
31695: LD_VAR 0 3
31699: PPUSH
31700: CALL 31900 0 2
31704: PUSH
31705: LD_VAR 0 11
31709: PUSH
31710: EMPTY
31711: EQUAL
31712: OR
31713: IFFALSE 31658
// if not control in _control then
31715: LD_VAR 0 4
31719: PUSH
31720: LD_VAR 0 12
31724: IN
31725: NOT
31726: IFFALSE 31752
// control := _control [ rand ( 1 , _control ) ] ;
31728: LD_ADDR_VAR 0 4
31732: PUSH
31733: LD_VAR 0 12
31737: PUSH
31738: LD_INT 1
31740: PPUSH
31741: LD_VAR 0 12
31745: PPUSH
31746: CALL_OW 12
31750: ARRAY
31751: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31752: LD_VAR 0 2
31756: PPUSH
31757: LD_VAR 0 5
31761: PPUSH
31762: CALL 32120 0 2
31766: NOT
31767: IFFALSE 31826
// repeat weapon := _weapon [ 1 ] ;
31769: LD_ADDR_VAR 0 5
31773: PUSH
31774: LD_VAR 0 10
31778: PUSH
31779: LD_INT 1
31781: ARRAY
31782: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31783: LD_ADDR_VAR 0 10
31787: PUSH
31788: LD_VAR 0 10
31792: PPUSH
31793: LD_INT 1
31795: PPUSH
31796: CALL_OW 3
31800: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31801: LD_VAR 0 2
31805: PPUSH
31806: LD_VAR 0 5
31810: PPUSH
31811: CALL 32120 0 2
31815: PUSH
31816: LD_VAR 0 10
31820: PUSH
31821: EMPTY
31822: EQUAL
31823: OR
31824: IFFALSE 31769
// result := [ ] ;
31826: LD_ADDR_VAR 0 6
31830: PUSH
31831: EMPTY
31832: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31833: LD_VAR 0 1
31837: PPUSH
31838: LD_VAR 0 2
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: LD_VAR 0 4
31852: PPUSH
31853: LD_VAR 0 5
31857: PPUSH
31858: CALL_OW 448
31862: IFFALSE 31895
// result := [ chassis , engine , control , weapon ] ;
31864: LD_ADDR_VAR 0 6
31868: PUSH
31869: LD_VAR 0 2
31873: PUSH
31874: LD_VAR 0 3
31878: PUSH
31879: LD_VAR 0 4
31883: PUSH
31884: LD_VAR 0 5
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: ST_TO_ADDR
// end ;
31895: LD_VAR 0 6
31899: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31900: LD_INT 0
31902: PPUSH
// if not chassis or not engine then
31903: LD_VAR 0 1
31907: NOT
31908: PUSH
31909: LD_VAR 0 2
31913: NOT
31914: OR
31915: IFFALSE 31919
// exit ;
31917: GO 32115
// case engine of engine_solar :
31919: LD_VAR 0 2
31923: PUSH
31924: LD_INT 2
31926: DOUBLE
31927: EQUAL
31928: IFTRUE 31932
31930: GO 31970
31932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31933: LD_ADDR_VAR 0 3
31937: PUSH
31938: LD_INT 11
31940: PUSH
31941: LD_INT 12
31943: PUSH
31944: LD_INT 13
31946: PUSH
31947: LD_INT 14
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: ST_TO_ADDR
31968: GO 32099
31970: LD_INT 1
31972: DOUBLE
31973: EQUAL
31974: IFTRUE 31978
31976: GO 32040
31978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31979: LD_ADDR_VAR 0 3
31983: PUSH
31984: LD_INT 11
31986: PUSH
31987: LD_INT 12
31989: PUSH
31990: LD_INT 13
31992: PUSH
31993: LD_INT 14
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: LD_INT 5
32010: PUSH
32011: LD_INT 21
32013: PUSH
32014: LD_INT 23
32016: PUSH
32017: LD_INT 22
32019: PUSH
32020: LD_INT 24
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32099
32040: LD_INT 3
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32098
32048: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 13
32056: PUSH
32057: LD_INT 14
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 3
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: LD_INT 5
32071: PUSH
32072: LD_INT 21
32074: PUSH
32075: LD_INT 22
32077: PUSH
32078: LD_INT 23
32080: PUSH
32081: LD_INT 24
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
32096: GO 32099
32098: POP
// result := ( chassis in result ) ;
32099: LD_ADDR_VAR 0 3
32103: PUSH
32104: LD_VAR 0 1
32108: PUSH
32109: LD_VAR 0 3
32113: IN
32114: ST_TO_ADDR
// end ;
32115: LD_VAR 0 3
32119: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32120: LD_INT 0
32122: PPUSH
// if not chassis or not weapon then
32123: LD_VAR 0 1
32127: NOT
32128: PUSH
32129: LD_VAR 0 2
32133: NOT
32134: OR
32135: IFFALSE 32139
// exit ;
32137: GO 33199
// case weapon of us_machine_gun :
32139: LD_VAR 0 2
32143: PUSH
32144: LD_INT 2
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32182
32152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32153: LD_ADDR_VAR 0 3
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
32180: GO 33183
32182: LD_INT 3
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32220
32190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32191: LD_ADDR_VAR 0 3
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: LD_INT 4
32207: PUSH
32208: LD_INT 5
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
32218: GO 33183
32220: LD_INT 11
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32258
32228: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: LD_INT 4
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
32256: GO 33183
32258: LD_INT 4
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32292
32266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32267: LD_ADDR_VAR 0 3
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 3
32277: PUSH
32278: LD_INT 4
32280: PUSH
32281: LD_INT 5
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
32290: GO 33183
32292: LD_INT 5
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32326
32300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: LD_INT 5
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
32324: GO 33183
32326: LD_INT 9
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32360
32334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 3
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: LD_INT 5
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
32358: GO 33183
32360: LD_INT 7
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32394
32368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 3
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: LD_INT 5
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: ST_TO_ADDR
32392: GO 33183
32394: LD_INT 12
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32428
32402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 4
32416: PUSH
32417: LD_INT 5
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
32426: GO 33183
32428: LD_INT 13
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32462
32436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32437: LD_ADDR_VAR 0 3
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 4
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: ST_TO_ADDR
32460: GO 33183
32462: LD_INT 14
32464: DOUBLE
32465: EQUAL
32466: IFTRUE 32470
32468: GO 32488
32470: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32471: LD_ADDR_VAR 0 3
32475: PUSH
32476: LD_INT 4
32478: PUSH
32479: LD_INT 5
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: ST_TO_ADDR
32486: GO 33183
32488: LD_INT 6
32490: DOUBLE
32491: EQUAL
32492: IFTRUE 32496
32494: GO 32514
32496: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32497: LD_ADDR_VAR 0 3
32501: PUSH
32502: LD_INT 4
32504: PUSH
32505: LD_INT 5
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: ST_TO_ADDR
32512: GO 33183
32514: LD_INT 10
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32540
32522: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_INT 4
32530: PUSH
32531: LD_INT 5
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: ST_TO_ADDR
32538: GO 33183
32540: LD_INT 22
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32548
32546: GO 32574
32548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32549: LD_ADDR_VAR 0 3
32553: PUSH
32554: LD_INT 11
32556: PUSH
32557: LD_INT 12
32559: PUSH
32560: LD_INT 13
32562: PUSH
32563: LD_INT 14
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
32572: GO 33183
32574: LD_INT 23
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32608
32582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_INT 11
32590: PUSH
32591: LD_INT 12
32593: PUSH
32594: LD_INT 13
32596: PUSH
32597: LD_INT 14
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
32606: GO 33183
32608: LD_INT 24
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32642
32616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32617: LD_ADDR_VAR 0 3
32621: PUSH
32622: LD_INT 11
32624: PUSH
32625: LD_INT 12
32627: PUSH
32628: LD_INT 13
32630: PUSH
32631: LD_INT 14
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
32640: GO 33183
32642: LD_INT 30
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32676
32650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32651: LD_ADDR_VAR 0 3
32655: PUSH
32656: LD_INT 11
32658: PUSH
32659: LD_INT 12
32661: PUSH
32662: LD_INT 13
32664: PUSH
32665: LD_INT 14
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
32674: GO 33183
32676: LD_INT 25
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32702
32684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32685: LD_ADDR_VAR 0 3
32689: PUSH
32690: LD_INT 13
32692: PUSH
32693: LD_INT 14
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: ST_TO_ADDR
32700: GO 33183
32702: LD_INT 27
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32728
32710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32711: LD_ADDR_VAR 0 3
32715: PUSH
32716: LD_INT 13
32718: PUSH
32719: LD_INT 14
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: ST_TO_ADDR
32726: GO 33183
32728: LD_INT 92
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32762
32736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 11
32744: PUSH
32745: LD_INT 12
32747: PUSH
32748: LD_INT 13
32750: PUSH
32751: LD_INT 14
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: ST_TO_ADDR
32760: GO 33183
32762: LD_INT 28
32764: DOUBLE
32765: EQUAL
32766: IFTRUE 32770
32768: GO 32788
32770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32771: LD_ADDR_VAR 0 3
32775: PUSH
32776: LD_INT 13
32778: PUSH
32779: LD_INT 14
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: ST_TO_ADDR
32786: GO 33183
32788: LD_INT 29
32790: DOUBLE
32791: EQUAL
32792: IFTRUE 32796
32794: GO 32814
32796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32797: LD_ADDR_VAR 0 3
32801: PUSH
32802: LD_INT 13
32804: PUSH
32805: LD_INT 14
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: ST_TO_ADDR
32812: GO 33183
32814: LD_INT 31
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32840
32822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32823: LD_ADDR_VAR 0 3
32827: PUSH
32828: LD_INT 13
32830: PUSH
32831: LD_INT 14
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: ST_TO_ADDR
32838: GO 33183
32840: LD_INT 26
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32866
32848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32849: LD_ADDR_VAR 0 3
32853: PUSH
32854: LD_INT 13
32856: PUSH
32857: LD_INT 14
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: ST_TO_ADDR
32864: GO 33183
32866: LD_INT 42
32868: DOUBLE
32869: EQUAL
32870: IFTRUE 32874
32872: GO 32900
32874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32875: LD_ADDR_VAR 0 3
32879: PUSH
32880: LD_INT 21
32882: PUSH
32883: LD_INT 22
32885: PUSH
32886: LD_INT 23
32888: PUSH
32889: LD_INT 24
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: ST_TO_ADDR
32898: GO 33183
32900: LD_INT 43
32902: DOUBLE
32903: EQUAL
32904: IFTRUE 32908
32906: GO 32934
32908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32909: LD_ADDR_VAR 0 3
32913: PUSH
32914: LD_INT 21
32916: PUSH
32917: LD_INT 22
32919: PUSH
32920: LD_INT 23
32922: PUSH
32923: LD_INT 24
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
32932: GO 33183
32934: LD_INT 44
32936: DOUBLE
32937: EQUAL
32938: IFTRUE 32942
32940: GO 32968
32942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32943: LD_ADDR_VAR 0 3
32947: PUSH
32948: LD_INT 21
32950: PUSH
32951: LD_INT 22
32953: PUSH
32954: LD_INT 23
32956: PUSH
32957: LD_INT 24
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
32966: GO 33183
32968: LD_INT 45
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 33002
32976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_INT 21
32984: PUSH
32985: LD_INT 22
32987: PUSH
32988: LD_INT 23
32990: PUSH
32991: LD_INT 24
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
33000: GO 33183
33002: LD_INT 49
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33036
33010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33011: LD_ADDR_VAR 0 3
33015: PUSH
33016: LD_INT 21
33018: PUSH
33019: LD_INT 22
33021: PUSH
33022: LD_INT 23
33024: PUSH
33025: LD_INT 24
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: ST_TO_ADDR
33034: GO 33183
33036: LD_INT 51
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33070
33044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33045: LD_ADDR_VAR 0 3
33049: PUSH
33050: LD_INT 21
33052: PUSH
33053: LD_INT 22
33055: PUSH
33056: LD_INT 23
33058: PUSH
33059: LD_INT 24
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
33068: GO 33183
33070: LD_INT 52
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33104
33078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33079: LD_ADDR_VAR 0 3
33083: PUSH
33084: LD_INT 21
33086: PUSH
33087: LD_INT 22
33089: PUSH
33090: LD_INT 23
33092: PUSH
33093: LD_INT 24
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: ST_TO_ADDR
33102: GO 33183
33104: LD_INT 53
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33112
33110: GO 33130
33112: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33113: LD_ADDR_VAR 0 3
33117: PUSH
33118: LD_INT 23
33120: PUSH
33121: LD_INT 24
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33183
33130: LD_INT 46
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33156
33138: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_INT 23
33146: PUSH
33147: LD_INT 24
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: ST_TO_ADDR
33154: GO 33183
33156: LD_INT 47
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33164
33162: GO 33182
33164: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33165: LD_ADDR_VAR 0 3
33169: PUSH
33170: LD_INT 23
33172: PUSH
33173: LD_INT 24
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: ST_TO_ADDR
33180: GO 33183
33182: POP
// result := ( chassis in result ) ;
33183: LD_ADDR_VAR 0 3
33187: PUSH
33188: LD_VAR 0 1
33192: PUSH
33193: LD_VAR 0 3
33197: IN
33198: ST_TO_ADDR
// end ;
33199: LD_VAR 0 3
33203: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33204: LD_INT 0
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
33210: PPUSH
33211: PPUSH
33212: PPUSH
// result := array ;
33213: LD_ADDR_VAR 0 5
33217: PUSH
33218: LD_VAR 0 1
33222: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33223: LD_VAR 0 1
33227: NOT
33228: PUSH
33229: LD_VAR 0 2
33233: NOT
33234: OR
33235: PUSH
33236: LD_VAR 0 3
33240: NOT
33241: OR
33242: PUSH
33243: LD_VAR 0 2
33247: PUSH
33248: LD_VAR 0 1
33252: GREATER
33253: OR
33254: PUSH
33255: LD_VAR 0 3
33259: PUSH
33260: LD_VAR 0 1
33264: GREATER
33265: OR
33266: IFFALSE 33270
// exit ;
33268: GO 33566
// if direction then
33270: LD_VAR 0 4
33274: IFFALSE 33338
// begin d := 1 ;
33276: LD_ADDR_VAR 0 9
33280: PUSH
33281: LD_INT 1
33283: ST_TO_ADDR
// if i_from > i_to then
33284: LD_VAR 0 2
33288: PUSH
33289: LD_VAR 0 3
33293: GREATER
33294: IFFALSE 33320
// length := ( array - i_from ) + i_to else
33296: LD_ADDR_VAR 0 11
33300: PUSH
33301: LD_VAR 0 1
33305: PUSH
33306: LD_VAR 0 2
33310: MINUS
33311: PUSH
33312: LD_VAR 0 3
33316: PLUS
33317: ST_TO_ADDR
33318: GO 33336
// length := i_to - i_from ;
33320: LD_ADDR_VAR 0 11
33324: PUSH
33325: LD_VAR 0 3
33329: PUSH
33330: LD_VAR 0 2
33334: MINUS
33335: ST_TO_ADDR
// end else
33336: GO 33399
// begin d := - 1 ;
33338: LD_ADDR_VAR 0 9
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: ST_TO_ADDR
// if i_from > i_to then
33347: LD_VAR 0 2
33351: PUSH
33352: LD_VAR 0 3
33356: GREATER
33357: IFFALSE 33377
// length := i_from - i_to else
33359: LD_ADDR_VAR 0 11
33363: PUSH
33364: LD_VAR 0 2
33368: PUSH
33369: LD_VAR 0 3
33373: MINUS
33374: ST_TO_ADDR
33375: GO 33399
// length := ( array - i_to ) + i_from ;
33377: LD_ADDR_VAR 0 11
33381: PUSH
33382: LD_VAR 0 1
33386: PUSH
33387: LD_VAR 0 3
33391: MINUS
33392: PUSH
33393: LD_VAR 0 2
33397: PLUS
33398: ST_TO_ADDR
// end ; if not length then
33399: LD_VAR 0 11
33403: NOT
33404: IFFALSE 33408
// exit ;
33406: GO 33566
// tmp := array ;
33408: LD_ADDR_VAR 0 10
33412: PUSH
33413: LD_VAR 0 1
33417: ST_TO_ADDR
// for i = 1 to length do
33418: LD_ADDR_VAR 0 6
33422: PUSH
33423: DOUBLE
33424: LD_INT 1
33426: DEC
33427: ST_TO_ADDR
33428: LD_VAR 0 11
33432: PUSH
33433: FOR_TO
33434: IFFALSE 33554
// begin for j = 1 to array do
33436: LD_ADDR_VAR 0 7
33440: PUSH
33441: DOUBLE
33442: LD_INT 1
33444: DEC
33445: ST_TO_ADDR
33446: LD_VAR 0 1
33450: PUSH
33451: FOR_TO
33452: IFFALSE 33540
// begin k := j + d ;
33454: LD_ADDR_VAR 0 8
33458: PUSH
33459: LD_VAR 0 7
33463: PUSH
33464: LD_VAR 0 9
33468: PLUS
33469: ST_TO_ADDR
// if k > array then
33470: LD_VAR 0 8
33474: PUSH
33475: LD_VAR 0 1
33479: GREATER
33480: IFFALSE 33490
// k := 1 ;
33482: LD_ADDR_VAR 0 8
33486: PUSH
33487: LD_INT 1
33489: ST_TO_ADDR
// if not k then
33490: LD_VAR 0 8
33494: NOT
33495: IFFALSE 33507
// k := array ;
33497: LD_ADDR_VAR 0 8
33501: PUSH
33502: LD_VAR 0 1
33506: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33507: LD_ADDR_VAR 0 10
33511: PUSH
33512: LD_VAR 0 10
33516: PPUSH
33517: LD_VAR 0 8
33521: PPUSH
33522: LD_VAR 0 1
33526: PUSH
33527: LD_VAR 0 7
33531: ARRAY
33532: PPUSH
33533: CALL_OW 1
33537: ST_TO_ADDR
// end ;
33538: GO 33451
33540: POP
33541: POP
// array := tmp ;
33542: LD_ADDR_VAR 0 1
33546: PUSH
33547: LD_VAR 0 10
33551: ST_TO_ADDR
// end ;
33552: GO 33433
33554: POP
33555: POP
// result := array ;
33556: LD_ADDR_VAR 0 5
33560: PUSH
33561: LD_VAR 0 1
33565: ST_TO_ADDR
// end ;
33566: LD_VAR 0 5
33570: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33571: LD_INT 0
33573: PPUSH
33574: PPUSH
// result := 0 ;
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_INT 0
33582: ST_TO_ADDR
// if not array or not value in array then
33583: LD_VAR 0 1
33587: NOT
33588: PUSH
33589: LD_VAR 0 2
33593: PUSH
33594: LD_VAR 0 1
33598: IN
33599: NOT
33600: OR
33601: IFFALSE 33605
// exit ;
33603: GO 33659
// for i = 1 to array do
33605: LD_ADDR_VAR 0 4
33609: PUSH
33610: DOUBLE
33611: LD_INT 1
33613: DEC
33614: ST_TO_ADDR
33615: LD_VAR 0 1
33619: PUSH
33620: FOR_TO
33621: IFFALSE 33657
// if value = array [ i ] then
33623: LD_VAR 0 2
33627: PUSH
33628: LD_VAR 0 1
33632: PUSH
33633: LD_VAR 0 4
33637: ARRAY
33638: EQUAL
33639: IFFALSE 33655
// begin result := i ;
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_VAR 0 4
33650: ST_TO_ADDR
// exit ;
33651: POP
33652: POP
33653: GO 33659
// end ;
33655: GO 33620
33657: POP
33658: POP
// end ;
33659: LD_VAR 0 3
33663: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33664: LD_INT 0
33666: PPUSH
// vc_chassis := chassis ;
33667: LD_ADDR_OWVAR 37
33671: PUSH
33672: LD_VAR 0 1
33676: ST_TO_ADDR
// vc_engine := engine ;
33677: LD_ADDR_OWVAR 39
33681: PUSH
33682: LD_VAR 0 2
33686: ST_TO_ADDR
// vc_control := control ;
33687: LD_ADDR_OWVAR 38
33691: PUSH
33692: LD_VAR 0 3
33696: ST_TO_ADDR
// vc_weapon := weapon ;
33697: LD_ADDR_OWVAR 40
33701: PUSH
33702: LD_VAR 0 4
33706: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33707: LD_ADDR_OWVAR 41
33711: PUSH
33712: LD_VAR 0 5
33716: ST_TO_ADDR
// end ;
33717: LD_VAR 0 6
33721: RET
// export function WantPlant ( unit ) ; var task ; begin
33722: LD_INT 0
33724: PPUSH
33725: PPUSH
// result := false ;
33726: LD_ADDR_VAR 0 2
33730: PUSH
33731: LD_INT 0
33733: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33734: LD_ADDR_VAR 0 3
33738: PUSH
33739: LD_VAR 0 1
33743: PPUSH
33744: CALL_OW 437
33748: ST_TO_ADDR
// if task then
33749: LD_VAR 0 3
33753: IFFALSE 33781
// if task [ 1 ] [ 1 ] = p then
33755: LD_VAR 0 3
33759: PUSH
33760: LD_INT 1
33762: ARRAY
33763: PUSH
33764: LD_INT 1
33766: ARRAY
33767: PUSH
33768: LD_STRING p
33770: EQUAL
33771: IFFALSE 33781
// result := true ;
33773: LD_ADDR_VAR 0 2
33777: PUSH
33778: LD_INT 1
33780: ST_TO_ADDR
// end ;
33781: LD_VAR 0 2
33785: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33786: LD_INT 0
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
// if pos < 1 then
33792: LD_VAR 0 2
33796: PUSH
33797: LD_INT 1
33799: LESS
33800: IFFALSE 33804
// exit ;
33802: GO 34107
// if pos = 1 then
33804: LD_VAR 0 2
33808: PUSH
33809: LD_INT 1
33811: EQUAL
33812: IFFALSE 33845
// result := Replace ( arr , pos [ 1 ] , value ) else
33814: LD_ADDR_VAR 0 4
33818: PUSH
33819: LD_VAR 0 1
33823: PPUSH
33824: LD_VAR 0 2
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PPUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: CALL_OW 1
33842: ST_TO_ADDR
33843: GO 34107
// begin tmp := arr ;
33845: LD_ADDR_VAR 0 6
33849: PUSH
33850: LD_VAR 0 1
33854: ST_TO_ADDR
// s_arr := [ tmp ] ;
33855: LD_ADDR_VAR 0 7
33859: PUSH
33860: LD_VAR 0 6
33864: PUSH
33865: EMPTY
33866: LIST
33867: ST_TO_ADDR
// for i = 1 to pos - 1 do
33868: LD_ADDR_VAR 0 5
33872: PUSH
33873: DOUBLE
33874: LD_INT 1
33876: DEC
33877: ST_TO_ADDR
33878: LD_VAR 0 2
33882: PUSH
33883: LD_INT 1
33885: MINUS
33886: PUSH
33887: FOR_TO
33888: IFFALSE 33933
// begin tmp := tmp [ pos [ i ] ] ;
33890: LD_ADDR_VAR 0 6
33894: PUSH
33895: LD_VAR 0 6
33899: PUSH
33900: LD_VAR 0 2
33904: PUSH
33905: LD_VAR 0 5
33909: ARRAY
33910: ARRAY
33911: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33912: LD_ADDR_VAR 0 7
33916: PUSH
33917: LD_VAR 0 7
33921: PUSH
33922: LD_VAR 0 6
33926: PUSH
33927: EMPTY
33928: LIST
33929: ADD
33930: ST_TO_ADDR
// end ;
33931: GO 33887
33933: POP
33934: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33935: LD_ADDR_VAR 0 6
33939: PUSH
33940: LD_VAR 0 6
33944: PPUSH
33945: LD_VAR 0 2
33949: PUSH
33950: LD_VAR 0 2
33954: ARRAY
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL_OW 1
33965: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33966: LD_ADDR_VAR 0 7
33970: PUSH
33971: LD_VAR 0 7
33975: PPUSH
33976: LD_VAR 0 7
33980: PPUSH
33981: LD_VAR 0 6
33985: PPUSH
33986: CALL_OW 1
33990: ST_TO_ADDR
// for i = s_arr downto 2 do
33991: LD_ADDR_VAR 0 5
33995: PUSH
33996: DOUBLE
33997: LD_VAR 0 7
34001: INC
34002: ST_TO_ADDR
34003: LD_INT 2
34005: PUSH
34006: FOR_DOWNTO
34007: IFFALSE 34091
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34009: LD_ADDR_VAR 0 6
34013: PUSH
34014: LD_VAR 0 7
34018: PUSH
34019: LD_VAR 0 5
34023: PUSH
34024: LD_INT 1
34026: MINUS
34027: ARRAY
34028: PPUSH
34029: LD_VAR 0 2
34033: PUSH
34034: LD_VAR 0 5
34038: PUSH
34039: LD_INT 1
34041: MINUS
34042: ARRAY
34043: PPUSH
34044: LD_VAR 0 7
34048: PUSH
34049: LD_VAR 0 5
34053: ARRAY
34054: PPUSH
34055: CALL_OW 1
34059: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34060: LD_ADDR_VAR 0 7
34064: PUSH
34065: LD_VAR 0 7
34069: PPUSH
34070: LD_VAR 0 5
34074: PUSH
34075: LD_INT 1
34077: MINUS
34078: PPUSH
34079: LD_VAR 0 6
34083: PPUSH
34084: CALL_OW 1
34088: ST_TO_ADDR
// end ;
34089: GO 34006
34091: POP
34092: POP
// result := s_arr [ 1 ] ;
34093: LD_ADDR_VAR 0 4
34097: PUSH
34098: LD_VAR 0 7
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: ST_TO_ADDR
// end ; end ;
34107: LD_VAR 0 4
34111: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
// if not list then
34116: LD_VAR 0 1
34120: NOT
34121: IFFALSE 34125
// exit ;
34123: GO 34216
// i := list [ pos1 ] ;
34125: LD_ADDR_VAR 0 5
34129: PUSH
34130: LD_VAR 0 1
34134: PUSH
34135: LD_VAR 0 2
34139: ARRAY
34140: ST_TO_ADDR
// if not i then
34141: LD_VAR 0 5
34145: NOT
34146: IFFALSE 34150
// exit ;
34148: GO 34216
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34150: LD_ADDR_VAR 0 1
34154: PUSH
34155: LD_VAR 0 1
34159: PPUSH
34160: LD_VAR 0 2
34164: PPUSH
34165: LD_VAR 0 1
34169: PUSH
34170: LD_VAR 0 3
34174: ARRAY
34175: PPUSH
34176: CALL_OW 1
34180: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34181: LD_ADDR_VAR 0 1
34185: PUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: LD_VAR 0 3
34195: PPUSH
34196: LD_VAR 0 5
34200: PPUSH
34201: CALL_OW 1
34205: ST_TO_ADDR
// result := list ;
34206: LD_ADDR_VAR 0 4
34210: PUSH
34211: LD_VAR 0 1
34215: ST_TO_ADDR
// end ;
34216: LD_VAR 0 4
34220: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34221: LD_INT 0
34223: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34224: LD_ADDR_VAR 0 5
34228: PUSH
34229: LD_VAR 0 1
34233: PPUSH
34234: CALL_OW 250
34238: PPUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 251
34248: PPUSH
34249: LD_VAR 0 2
34253: PPUSH
34254: LD_VAR 0 3
34258: PPUSH
34259: LD_VAR 0 4
34263: PPUSH
34264: CALL 34274 0 5
34268: ST_TO_ADDR
// end ;
34269: LD_VAR 0 5
34273: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34274: LD_INT 0
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
// if not list then
34280: LD_VAR 0 3
34284: NOT
34285: IFFALSE 34289
// exit ;
34287: GO 34677
// result := [ ] ;
34289: LD_ADDR_VAR 0 6
34293: PUSH
34294: EMPTY
34295: ST_TO_ADDR
// for i in list do
34296: LD_ADDR_VAR 0 7
34300: PUSH
34301: LD_VAR 0 3
34305: PUSH
34306: FOR_IN
34307: IFFALSE 34509
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34309: LD_ADDR_VAR 0 9
34313: PUSH
34314: LD_VAR 0 7
34318: PPUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: LD_VAR 0 2
34328: PPUSH
34329: CALL_OW 297
34333: ST_TO_ADDR
// if not result then
34334: LD_VAR 0 6
34338: NOT
34339: IFFALSE 34365
// result := [ [ i , tmp ] ] else
34341: LD_ADDR_VAR 0 6
34345: PUSH
34346: LD_VAR 0 7
34350: PUSH
34351: LD_VAR 0 9
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: ST_TO_ADDR
34363: GO 34507
// begin if result [ result ] [ 2 ] < tmp then
34365: LD_VAR 0 6
34369: PUSH
34370: LD_VAR 0 6
34374: ARRAY
34375: PUSH
34376: LD_INT 2
34378: ARRAY
34379: PUSH
34380: LD_VAR 0 9
34384: LESS
34385: IFFALSE 34427
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34387: LD_ADDR_VAR 0 6
34391: PUSH
34392: LD_VAR 0 6
34396: PPUSH
34397: LD_VAR 0 6
34401: PUSH
34402: LD_INT 1
34404: PLUS
34405: PPUSH
34406: LD_VAR 0 7
34410: PUSH
34411: LD_VAR 0 9
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PPUSH
34420: CALL_OW 2
34424: ST_TO_ADDR
34425: GO 34507
// for j = 1 to result do
34427: LD_ADDR_VAR 0 8
34431: PUSH
34432: DOUBLE
34433: LD_INT 1
34435: DEC
34436: ST_TO_ADDR
34437: LD_VAR 0 6
34441: PUSH
34442: FOR_TO
34443: IFFALSE 34505
// begin if tmp < result [ j ] [ 2 ] then
34445: LD_VAR 0 9
34449: PUSH
34450: LD_VAR 0 6
34454: PUSH
34455: LD_VAR 0 8
34459: ARRAY
34460: PUSH
34461: LD_INT 2
34463: ARRAY
34464: LESS
34465: IFFALSE 34503
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34467: LD_ADDR_VAR 0 6
34471: PUSH
34472: LD_VAR 0 6
34476: PPUSH
34477: LD_VAR 0 8
34481: PPUSH
34482: LD_VAR 0 7
34486: PUSH
34487: LD_VAR 0 9
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 2
34500: ST_TO_ADDR
// break ;
34501: GO 34505
// end ; end ;
34503: GO 34442
34505: POP
34506: POP
// end ; end ;
34507: GO 34306
34509: POP
34510: POP
// if result and not asc then
34511: LD_VAR 0 6
34515: PUSH
34516: LD_VAR 0 4
34520: NOT
34521: AND
34522: IFFALSE 34597
// begin tmp := result ;
34524: LD_ADDR_VAR 0 9
34528: PUSH
34529: LD_VAR 0 6
34533: ST_TO_ADDR
// for i = tmp downto 1 do
34534: LD_ADDR_VAR 0 7
34538: PUSH
34539: DOUBLE
34540: LD_VAR 0 9
34544: INC
34545: ST_TO_ADDR
34546: LD_INT 1
34548: PUSH
34549: FOR_DOWNTO
34550: IFFALSE 34595
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_VAR 0 6
34561: PPUSH
34562: LD_VAR 0 9
34566: PUSH
34567: LD_VAR 0 7
34571: MINUS
34572: PUSH
34573: LD_INT 1
34575: PLUS
34576: PPUSH
34577: LD_VAR 0 9
34581: PUSH
34582: LD_VAR 0 7
34586: ARRAY
34587: PPUSH
34588: CALL_OW 1
34592: ST_TO_ADDR
34593: GO 34549
34595: POP
34596: POP
// end ; tmp := [ ] ;
34597: LD_ADDR_VAR 0 9
34601: PUSH
34602: EMPTY
34603: ST_TO_ADDR
// if mode then
34604: LD_VAR 0 5
34608: IFFALSE 34677
// begin for i = 1 to result do
34610: LD_ADDR_VAR 0 7
34614: PUSH
34615: DOUBLE
34616: LD_INT 1
34618: DEC
34619: ST_TO_ADDR
34620: LD_VAR 0 6
34624: PUSH
34625: FOR_TO
34626: IFFALSE 34665
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34628: LD_ADDR_VAR 0 9
34632: PUSH
34633: LD_VAR 0 9
34637: PPUSH
34638: LD_VAR 0 7
34642: PPUSH
34643: LD_VAR 0 6
34647: PUSH
34648: LD_VAR 0 7
34652: ARRAY
34653: PUSH
34654: LD_INT 1
34656: ARRAY
34657: PPUSH
34658: CALL_OW 1
34662: ST_TO_ADDR
34663: GO 34625
34665: POP
34666: POP
// result := tmp ;
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_VAR 0 9
34676: ST_TO_ADDR
// end ; end ;
34677: LD_VAR 0 6
34681: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34682: LD_INT 0
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
34689: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34690: LD_ADDR_VAR 0 5
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
// if not x or not y then
34712: LD_VAR 0 2
34716: NOT
34717: PUSH
34718: LD_VAR 0 3
34722: NOT
34723: OR
34724: IFFALSE 34728
// exit ;
34726: GO 36378
// if not range then
34728: LD_VAR 0 4
34732: NOT
34733: IFFALSE 34743
// range := 10 ;
34735: LD_ADDR_VAR 0 4
34739: PUSH
34740: LD_INT 10
34742: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34743: LD_ADDR_VAR 0 8
34747: PUSH
34748: LD_INT 81
34750: PUSH
34751: LD_VAR 0 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 92
34762: PUSH
34763: LD_VAR 0 2
34767: PUSH
34768: LD_VAR 0 3
34772: PUSH
34773: LD_VAR 0 4
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 3
34786: PUSH
34787: LD_INT 21
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: PPUSH
34806: CALL_OW 69
34810: ST_TO_ADDR
// if not tmp then
34811: LD_VAR 0 8
34815: NOT
34816: IFFALSE 34820
// exit ;
34818: GO 36378
// for i in tmp do
34820: LD_ADDR_VAR 0 6
34824: PUSH
34825: LD_VAR 0 8
34829: PUSH
34830: FOR_IN
34831: IFFALSE 36353
// begin points := [ 0 , 0 , 0 ] ;
34833: LD_ADDR_VAR 0 9
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
// bpoints := 1 ;
34852: LD_ADDR_VAR 0 10
34856: PUSH
34857: LD_INT 1
34859: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34860: LD_VAR 0 6
34864: PPUSH
34865: CALL_OW 247
34869: PUSH
34870: LD_INT 1
34872: DOUBLE
34873: EQUAL
34874: IFTRUE 34878
34876: GO 35456
34878: POP
// begin if GetClass ( i ) = 1 then
34879: LD_VAR 0 6
34883: PPUSH
34884: CALL_OW 257
34888: PUSH
34889: LD_INT 1
34891: EQUAL
34892: IFFALSE 34913
// points := [ 10 , 5 , 3 ] ;
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: LD_INT 10
34901: PUSH
34902: LD_INT 5
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34913: LD_VAR 0 6
34917: PPUSH
34918: CALL_OW 257
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: IN
34937: IFFALSE 34958
// points := [ 3 , 2 , 1 ] ;
34939: LD_ADDR_VAR 0 9
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34958: LD_VAR 0 6
34962: PPUSH
34963: CALL_OW 257
34967: PUSH
34968: LD_INT 5
34970: EQUAL
34971: IFFALSE 34992
// points := [ 130 , 5 , 2 ] ;
34973: LD_ADDR_VAR 0 9
34977: PUSH
34978: LD_INT 130
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34992: LD_VAR 0 6
34996: PPUSH
34997: CALL_OW 257
35001: PUSH
35002: LD_INT 8
35004: EQUAL
35005: IFFALSE 35026
// points := [ 35 , 35 , 30 ] ;
35007: LD_ADDR_VAR 0 9
35011: PUSH
35012: LD_INT 35
35014: PUSH
35015: LD_INT 35
35017: PUSH
35018: LD_INT 30
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35026: LD_VAR 0 6
35030: PPUSH
35031: CALL_OW 257
35035: PUSH
35036: LD_INT 9
35038: EQUAL
35039: IFFALSE 35060
// points := [ 20 , 55 , 40 ] ;
35041: LD_ADDR_VAR 0 9
35045: PUSH
35046: LD_INT 20
35048: PUSH
35049: LD_INT 55
35051: PUSH
35052: LD_INT 40
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35060: LD_VAR 0 6
35064: PPUSH
35065: CALL_OW 257
35069: PUSH
35070: LD_INT 12
35072: PUSH
35073: LD_INT 16
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: IN
35080: IFFALSE 35101
// points := [ 5 , 3 , 2 ] ;
35082: LD_ADDR_VAR 0 9
35086: PUSH
35087: LD_INT 5
35089: PUSH
35090: LD_INT 3
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35101: LD_VAR 0 6
35105: PPUSH
35106: CALL_OW 257
35110: PUSH
35111: LD_INT 17
35113: EQUAL
35114: IFFALSE 35135
// points := [ 100 , 50 , 75 ] ;
35116: LD_ADDR_VAR 0 9
35120: PUSH
35121: LD_INT 100
35123: PUSH
35124: LD_INT 50
35126: PUSH
35127: LD_INT 75
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: LIST
35134: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35135: LD_VAR 0 6
35139: PPUSH
35140: CALL_OW 257
35144: PUSH
35145: LD_INT 15
35147: EQUAL
35148: IFFALSE 35169
// points := [ 10 , 5 , 3 ] ;
35150: LD_ADDR_VAR 0 9
35154: PUSH
35155: LD_INT 10
35157: PUSH
35158: LD_INT 5
35160: PUSH
35161: LD_INT 3
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35169: LD_VAR 0 6
35173: PPUSH
35174: CALL_OW 257
35178: PUSH
35179: LD_INT 14
35181: EQUAL
35182: IFFALSE 35203
// points := [ 10 , 0 , 0 ] ;
35184: LD_ADDR_VAR 0 9
35188: PUSH
35189: LD_INT 10
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35203: LD_VAR 0 6
35207: PPUSH
35208: CALL_OW 257
35212: PUSH
35213: LD_INT 11
35215: EQUAL
35216: IFFALSE 35237
// points := [ 30 , 10 , 5 ] ;
35218: LD_ADDR_VAR 0 9
35222: PUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 10
35228: PUSH
35229: LD_INT 5
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35237: LD_VAR 0 1
35241: PPUSH
35242: LD_INT 5
35244: PPUSH
35245: CALL_OW 321
35249: PUSH
35250: LD_INT 2
35252: EQUAL
35253: IFFALSE 35270
// bpoints := bpoints * 1.8 ;
35255: LD_ADDR_VAR 0 10
35259: PUSH
35260: LD_VAR 0 10
35264: PUSH
35265: LD_REAL  1.80000000000000E+0000
35268: MUL
35269: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35270: LD_VAR 0 6
35274: PPUSH
35275: CALL_OW 257
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: LD_INT 3
35288: PUSH
35289: LD_INT 4
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: IN
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: LD_INT 51
35306: PPUSH
35307: CALL_OW 321
35311: PUSH
35312: LD_INT 2
35314: EQUAL
35315: AND
35316: IFFALSE 35333
// bpoints := bpoints * 1.2 ;
35318: LD_ADDR_VAR 0 10
35322: PUSH
35323: LD_VAR 0 10
35327: PUSH
35328: LD_REAL  1.20000000000000E+0000
35331: MUL
35332: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35333: LD_VAR 0 6
35337: PPUSH
35338: CALL_OW 257
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: LD_INT 7
35348: PUSH
35349: LD_INT 9
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: IN
35357: PUSH
35358: LD_VAR 0 1
35362: PPUSH
35363: LD_INT 52
35365: PPUSH
35366: CALL_OW 321
35370: PUSH
35371: LD_INT 2
35373: EQUAL
35374: AND
35375: IFFALSE 35392
// bpoints := bpoints * 1.5 ;
35377: LD_ADDR_VAR 0 10
35381: PUSH
35382: LD_VAR 0 10
35386: PUSH
35387: LD_REAL  1.50000000000000E+0000
35390: MUL
35391: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35392: LD_VAR 0 1
35396: PPUSH
35397: LD_INT 66
35399: PPUSH
35400: CALL_OW 321
35404: PUSH
35405: LD_INT 2
35407: EQUAL
35408: IFFALSE 35425
// bpoints := bpoints * 1.1 ;
35410: LD_ADDR_VAR 0 10
35414: PUSH
35415: LD_VAR 0 10
35419: PUSH
35420: LD_REAL  1.10000000000000E+0000
35423: MUL
35424: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35425: LD_ADDR_VAR 0 10
35429: PUSH
35430: LD_VAR 0 10
35434: PUSH
35435: LD_VAR 0 6
35439: PPUSH
35440: LD_INT 1
35442: PPUSH
35443: CALL_OW 259
35447: PUSH
35448: LD_REAL  1.15000000000000E+0000
35451: MUL
35452: MUL
35453: ST_TO_ADDR
// end ; unit_vehicle :
35454: GO 36282
35456: LD_INT 2
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 36270
35464: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35465: LD_VAR 0 6
35469: PPUSH
35470: CALL_OW 264
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: LD_INT 42
35480: PUSH
35481: LD_INT 24
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: IN
35489: IFFALSE 35510
// points := [ 25 , 5 , 3 ] ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: LD_INT 25
35498: PUSH
35499: LD_INT 5
35501: PUSH
35502: LD_INT 3
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35510: LD_VAR 0 6
35514: PPUSH
35515: CALL_OW 264
35519: PUSH
35520: LD_INT 4
35522: PUSH
35523: LD_INT 43
35525: PUSH
35526: LD_INT 25
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: IN
35534: IFFALSE 35555
// points := [ 40 , 15 , 5 ] ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_INT 40
35543: PUSH
35544: LD_INT 15
35546: PUSH
35547: LD_INT 5
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35555: LD_VAR 0 6
35559: PPUSH
35560: CALL_OW 264
35564: PUSH
35565: LD_INT 3
35567: PUSH
35568: LD_INT 23
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: IN
35575: IFFALSE 35596
// points := [ 7 , 25 , 8 ] ;
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_INT 7
35584: PUSH
35585: LD_INT 25
35587: PUSH
35588: LD_INT 8
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 264
35605: PUSH
35606: LD_INT 5
35608: PUSH
35609: LD_INT 27
35611: PUSH
35612: LD_INT 44
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: IN
35620: IFFALSE 35641
// points := [ 14 , 50 , 16 ] ;
35622: LD_ADDR_VAR 0 9
35626: PUSH
35627: LD_INT 14
35629: PUSH
35630: LD_INT 50
35632: PUSH
35633: LD_INT 16
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35641: LD_VAR 0 6
35645: PPUSH
35646: CALL_OW 264
35650: PUSH
35651: LD_INT 6
35653: PUSH
35654: LD_INT 46
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: IN
35661: IFFALSE 35682
// points := [ 32 , 120 , 70 ] ;
35663: LD_ADDR_VAR 0 9
35667: PUSH
35668: LD_INT 32
35670: PUSH
35671: LD_INT 120
35673: PUSH
35674: LD_INT 70
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35682: LD_VAR 0 6
35686: PPUSH
35687: CALL_OW 264
35691: PUSH
35692: LD_INT 7
35694: PUSH
35695: LD_INT 28
35697: PUSH
35698: LD_INT 45
35700: PUSH
35701: LD_INT 92
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: IN
35710: IFFALSE 35731
// points := [ 35 , 20 , 45 ] ;
35712: LD_ADDR_VAR 0 9
35716: PUSH
35717: LD_INT 35
35719: PUSH
35720: LD_INT 20
35722: PUSH
35723: LD_INT 45
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35731: LD_VAR 0 6
35735: PPUSH
35736: CALL_OW 264
35740: PUSH
35741: LD_INT 47
35743: PUSH
35744: EMPTY
35745: LIST
35746: IN
35747: IFFALSE 35768
// points := [ 67 , 45 , 75 ] ;
35749: LD_ADDR_VAR 0 9
35753: PUSH
35754: LD_INT 67
35756: PUSH
35757: LD_INT 45
35759: PUSH
35760: LD_INT 75
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35768: LD_VAR 0 6
35772: PPUSH
35773: CALL_OW 264
35777: PUSH
35778: LD_INT 26
35780: PUSH
35781: EMPTY
35782: LIST
35783: IN
35784: IFFALSE 35805
// points := [ 120 , 30 , 80 ] ;
35786: LD_ADDR_VAR 0 9
35790: PUSH
35791: LD_INT 120
35793: PUSH
35794: LD_INT 30
35796: PUSH
35797: LD_INT 80
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35805: LD_VAR 0 6
35809: PPUSH
35810: CALL_OW 264
35814: PUSH
35815: LD_INT 22
35817: PUSH
35818: EMPTY
35819: LIST
35820: IN
35821: IFFALSE 35842
// points := [ 40 , 1 , 1 ] ;
35823: LD_ADDR_VAR 0 9
35827: PUSH
35828: LD_INT 40
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35842: LD_VAR 0 6
35846: PPUSH
35847: CALL_OW 264
35851: PUSH
35852: LD_INT 29
35854: PUSH
35855: EMPTY
35856: LIST
35857: IN
35858: IFFALSE 35879
// points := [ 70 , 200 , 400 ] ;
35860: LD_ADDR_VAR 0 9
35864: PUSH
35865: LD_INT 70
35867: PUSH
35868: LD_INT 200
35870: PUSH
35871: LD_INT 400
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35879: LD_VAR 0 6
35883: PPUSH
35884: CALL_OW 264
35888: PUSH
35889: LD_INT 14
35891: PUSH
35892: LD_INT 53
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: IN
35899: IFFALSE 35920
// points := [ 40 , 10 , 20 ] ;
35901: LD_ADDR_VAR 0 9
35905: PUSH
35906: LD_INT 40
35908: PUSH
35909: LD_INT 10
35911: PUSH
35912: LD_INT 20
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35920: LD_VAR 0 6
35924: PPUSH
35925: CALL_OW 264
35929: PUSH
35930: LD_INT 9
35932: PUSH
35933: EMPTY
35934: LIST
35935: IN
35936: IFFALSE 35957
// points := [ 5 , 70 , 20 ] ;
35938: LD_ADDR_VAR 0 9
35942: PUSH
35943: LD_INT 5
35945: PUSH
35946: LD_INT 70
35948: PUSH
35949: LD_INT 20
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35957: LD_VAR 0 6
35961: PPUSH
35962: CALL_OW 264
35966: PUSH
35967: LD_INT 10
35969: PUSH
35970: EMPTY
35971: LIST
35972: IN
35973: IFFALSE 35994
// points := [ 35 , 110 , 70 ] ;
35975: LD_ADDR_VAR 0 9
35979: PUSH
35980: LD_INT 35
35982: PUSH
35983: LD_INT 110
35985: PUSH
35986: LD_INT 70
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35994: LD_VAR 0 6
35998: PPUSH
35999: CALL_OW 265
36003: PUSH
36004: LD_INT 25
36006: EQUAL
36007: IFFALSE 36028
// points := [ 80 , 65 , 100 ] ;
36009: LD_ADDR_VAR 0 9
36013: PUSH
36014: LD_INT 80
36016: PUSH
36017: LD_INT 65
36019: PUSH
36020: LD_INT 100
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 263
36037: PUSH
36038: LD_INT 1
36040: EQUAL
36041: IFFALSE 36076
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36043: LD_ADDR_VAR 0 10
36047: PUSH
36048: LD_VAR 0 10
36052: PUSH
36053: LD_VAR 0 6
36057: PPUSH
36058: CALL_OW 311
36062: PPUSH
36063: LD_INT 3
36065: PPUSH
36066: CALL_OW 259
36070: PUSH
36071: LD_INT 4
36073: MUL
36074: MUL
36075: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36076: LD_VAR 0 6
36080: PPUSH
36081: CALL_OW 263
36085: PUSH
36086: LD_INT 2
36088: EQUAL
36089: IFFALSE 36140
// begin j := IsControledBy ( i ) ;
36091: LD_ADDR_VAR 0 7
36095: PUSH
36096: LD_VAR 0 6
36100: PPUSH
36101: CALL_OW 312
36105: ST_TO_ADDR
// if j then
36106: LD_VAR 0 7
36110: IFFALSE 36140
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36112: LD_ADDR_VAR 0 10
36116: PUSH
36117: LD_VAR 0 10
36121: PUSH
36122: LD_VAR 0 7
36126: PPUSH
36127: LD_INT 3
36129: PPUSH
36130: CALL_OW 259
36134: PUSH
36135: LD_INT 3
36137: MUL
36138: MUL
36139: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36140: LD_VAR 0 6
36144: PPUSH
36145: CALL_OW 264
36149: PUSH
36150: LD_INT 5
36152: PUSH
36153: LD_INT 6
36155: PUSH
36156: LD_INT 46
36158: PUSH
36159: LD_INT 44
36161: PUSH
36162: LD_INT 47
36164: PUSH
36165: LD_INT 45
36167: PUSH
36168: LD_INT 28
36170: PUSH
36171: LD_INT 7
36173: PUSH
36174: LD_INT 27
36176: PUSH
36177: LD_INT 29
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: IN
36192: PUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: LD_INT 52
36200: PPUSH
36201: CALL_OW 321
36205: PUSH
36206: LD_INT 2
36208: EQUAL
36209: AND
36210: IFFALSE 36227
// bpoints := bpoints * 1.2 ;
36212: LD_ADDR_VAR 0 10
36216: PUSH
36217: LD_VAR 0 10
36221: PUSH
36222: LD_REAL  1.20000000000000E+0000
36225: MUL
36226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36227: LD_VAR 0 6
36231: PPUSH
36232: CALL_OW 264
36236: PUSH
36237: LD_INT 6
36239: PUSH
36240: LD_INT 46
36242: PUSH
36243: LD_INT 47
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: IN
36251: IFFALSE 36268
// bpoints := bpoints * 1.2 ;
36253: LD_ADDR_VAR 0 10
36257: PUSH
36258: LD_VAR 0 10
36262: PUSH
36263: LD_REAL  1.20000000000000E+0000
36266: MUL
36267: ST_TO_ADDR
// end ; unit_building :
36268: GO 36282
36270: LD_INT 3
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36281
36278: POP
// ; end ;
36279: GO 36282
36281: POP
// for j = 1 to 3 do
36282: LD_ADDR_VAR 0 7
36286: PUSH
36287: DOUBLE
36288: LD_INT 1
36290: DEC
36291: ST_TO_ADDR
36292: LD_INT 3
36294: PUSH
36295: FOR_TO
36296: IFFALSE 36349
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36298: LD_ADDR_VAR 0 5
36302: PUSH
36303: LD_VAR 0 5
36307: PPUSH
36308: LD_VAR 0 7
36312: PPUSH
36313: LD_VAR 0 5
36317: PUSH
36318: LD_VAR 0 7
36322: ARRAY
36323: PUSH
36324: LD_VAR 0 9
36328: PUSH
36329: LD_VAR 0 7
36333: ARRAY
36334: PUSH
36335: LD_VAR 0 10
36339: MUL
36340: PLUS
36341: PPUSH
36342: CALL_OW 1
36346: ST_TO_ADDR
36347: GO 36295
36349: POP
36350: POP
// end ;
36351: GO 34830
36353: POP
36354: POP
// result := Replace ( result , 4 , tmp ) ;
36355: LD_ADDR_VAR 0 5
36359: PUSH
36360: LD_VAR 0 5
36364: PPUSH
36365: LD_INT 4
36367: PPUSH
36368: LD_VAR 0 8
36372: PPUSH
36373: CALL_OW 1
36377: ST_TO_ADDR
// end ;
36378: LD_VAR 0 5
36382: RET
// export function DangerAtRange ( unit , range ) ; begin
36383: LD_INT 0
36385: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36386: LD_ADDR_VAR 0 3
36390: PUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL_OW 255
36400: PPUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL_OW 250
36410: PPUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 251
36420: PPUSH
36421: LD_VAR 0 2
36425: PPUSH
36426: CALL 34682 0 4
36430: ST_TO_ADDR
// end ;
36431: LD_VAR 0 3
36435: RET
// export function DangerInArea ( side , area ) ; begin
36436: LD_INT 0
36438: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: LD_VAR 0 2
36448: PPUSH
36449: LD_INT 81
36451: PUSH
36452: LD_VAR 0 1
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PPUSH
36461: CALL_OW 70
36465: ST_TO_ADDR
// end ;
36466: LD_VAR 0 3
36470: RET
// export function IsExtension ( b ) ; begin
36471: LD_INT 0
36473: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36474: LD_ADDR_VAR 0 2
36478: PUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_INT 23
36486: PUSH
36487: LD_INT 20
36489: PUSH
36490: LD_INT 22
36492: PUSH
36493: LD_INT 17
36495: PUSH
36496: LD_INT 24
36498: PUSH
36499: LD_INT 21
36501: PUSH
36502: LD_INT 19
36504: PUSH
36505: LD_INT 16
36507: PUSH
36508: LD_INT 25
36510: PUSH
36511: LD_INT 18
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: IN
36526: ST_TO_ADDR
// end ;
36527: LD_VAR 0 2
36531: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36532: LD_INT 0
36534: PPUSH
36535: PPUSH
36536: PPUSH
// result := [ ] ;
36537: LD_ADDR_VAR 0 4
36541: PUSH
36542: EMPTY
36543: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36544: LD_ADDR_VAR 0 5
36548: PUSH
36549: LD_VAR 0 2
36553: PPUSH
36554: LD_INT 21
36556: PUSH
36557: LD_INT 3
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PPUSH
36564: CALL_OW 70
36568: ST_TO_ADDR
// if not tmp then
36569: LD_VAR 0 5
36573: NOT
36574: IFFALSE 36578
// exit ;
36576: GO 36642
// if checkLink then
36578: LD_VAR 0 3
36582: IFFALSE 36632
// begin for i in tmp do
36584: LD_ADDR_VAR 0 6
36588: PUSH
36589: LD_VAR 0 5
36593: PUSH
36594: FOR_IN
36595: IFFALSE 36630
// if GetBase ( i ) <> base then
36597: LD_VAR 0 6
36601: PPUSH
36602: CALL_OW 274
36606: PUSH
36607: LD_VAR 0 1
36611: NONEQUAL
36612: IFFALSE 36628
// ComLinkToBase ( base , i ) ;
36614: LD_VAR 0 1
36618: PPUSH
36619: LD_VAR 0 6
36623: PPUSH
36624: CALL_OW 169
36628: GO 36594
36630: POP
36631: POP
// end ; result := tmp ;
36632: LD_ADDR_VAR 0 4
36636: PUSH
36637: LD_VAR 0 5
36641: ST_TO_ADDR
// end ;
36642: LD_VAR 0 4
36646: RET
// export function ComComplete ( units , b ) ; var i ; begin
36647: LD_INT 0
36649: PPUSH
36650: PPUSH
// if not units then
36651: LD_VAR 0 1
36655: NOT
36656: IFFALSE 36660
// exit ;
36658: GO 36750
// for i in units do
36660: LD_ADDR_VAR 0 4
36664: PUSH
36665: LD_VAR 0 1
36669: PUSH
36670: FOR_IN
36671: IFFALSE 36748
// if BuildingStatus ( b ) = bs_build then
36673: LD_VAR 0 2
36677: PPUSH
36678: CALL_OW 461
36682: PUSH
36683: LD_INT 1
36685: EQUAL
36686: IFFALSE 36746
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36688: LD_VAR 0 4
36692: PPUSH
36693: LD_STRING h
36695: PUSH
36696: LD_VAR 0 2
36700: PPUSH
36701: CALL_OW 250
36705: PUSH
36706: LD_VAR 0 2
36710: PPUSH
36711: CALL_OW 251
36715: PUSH
36716: LD_VAR 0 2
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: PPUSH
36742: CALL_OW 446
36746: GO 36670
36748: POP
36749: POP
// end ;
36750: LD_VAR 0 3
36754: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36755: LD_INT 0
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36763: LD_VAR 0 1
36767: NOT
36768: PUSH
36769: LD_VAR 0 1
36773: PPUSH
36774: CALL_OW 263
36778: PUSH
36779: LD_INT 2
36781: NONEQUAL
36782: OR
36783: IFFALSE 36787
// exit ;
36785: GO 37103
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36787: LD_ADDR_VAR 0 6
36791: PUSH
36792: LD_INT 22
36794: PUSH
36795: LD_VAR 0 1
36799: PPUSH
36800: CALL_OW 255
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 30
36814: PUSH
36815: LD_INT 36
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 34
36824: PUSH
36825: LD_INT 31
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PPUSH
36841: CALL_OW 69
36845: ST_TO_ADDR
// if not tmp then
36846: LD_VAR 0 6
36850: NOT
36851: IFFALSE 36855
// exit ;
36853: GO 37103
// result := [ ] ;
36855: LD_ADDR_VAR 0 2
36859: PUSH
36860: EMPTY
36861: ST_TO_ADDR
// for i in tmp do
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_VAR 0 6
36871: PUSH
36872: FOR_IN
36873: IFFALSE 36944
// begin t := UnitsInside ( i ) ;
36875: LD_ADDR_VAR 0 4
36879: PUSH
36880: LD_VAR 0 3
36884: PPUSH
36885: CALL_OW 313
36889: ST_TO_ADDR
// if t then
36890: LD_VAR 0 4
36894: IFFALSE 36942
// for j in t do
36896: LD_ADDR_VAR 0 7
36900: PUSH
36901: LD_VAR 0 4
36905: PUSH
36906: FOR_IN
36907: IFFALSE 36940
// result := Replace ( result , result + 1 , j ) ;
36909: LD_ADDR_VAR 0 2
36913: PUSH
36914: LD_VAR 0 2
36918: PPUSH
36919: LD_VAR 0 2
36923: PUSH
36924: LD_INT 1
36926: PLUS
36927: PPUSH
36928: LD_VAR 0 7
36932: PPUSH
36933: CALL_OW 1
36937: ST_TO_ADDR
36938: GO 36906
36940: POP
36941: POP
// end ;
36942: GO 36872
36944: POP
36945: POP
// if not result then
36946: LD_VAR 0 2
36950: NOT
36951: IFFALSE 36955
// exit ;
36953: GO 37103
// mech := result [ 1 ] ;
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_VAR 0 2
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: ST_TO_ADDR
// if result > 1 then
36969: LD_VAR 0 2
36973: PUSH
36974: LD_INT 1
36976: GREATER
36977: IFFALSE 37089
// begin for i = 2 to result do
36979: LD_ADDR_VAR 0 3
36983: PUSH
36984: DOUBLE
36985: LD_INT 2
36987: DEC
36988: ST_TO_ADDR
36989: LD_VAR 0 2
36993: PUSH
36994: FOR_TO
36995: IFFALSE 37087
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36997: LD_ADDR_VAR 0 4
37001: PUSH
37002: LD_VAR 0 2
37006: PUSH
37007: LD_VAR 0 3
37011: ARRAY
37012: PPUSH
37013: LD_INT 3
37015: PPUSH
37016: CALL_OW 259
37020: PUSH
37021: LD_VAR 0 2
37025: PUSH
37026: LD_VAR 0 3
37030: ARRAY
37031: PPUSH
37032: CALL_OW 432
37036: MINUS
37037: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37038: LD_VAR 0 4
37042: PUSH
37043: LD_VAR 0 5
37047: PPUSH
37048: LD_INT 3
37050: PPUSH
37051: CALL_OW 259
37055: PUSH
37056: LD_VAR 0 5
37060: PPUSH
37061: CALL_OW 432
37065: MINUS
37066: GREATEREQUAL
37067: IFFALSE 37085
// mech := result [ i ] ;
37069: LD_ADDR_VAR 0 5
37073: PUSH
37074: LD_VAR 0 2
37078: PUSH
37079: LD_VAR 0 3
37083: ARRAY
37084: ST_TO_ADDR
// end ;
37085: GO 36994
37087: POP
37088: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37089: LD_VAR 0 1
37093: PPUSH
37094: LD_VAR 0 5
37098: PPUSH
37099: CALL_OW 135
// end ;
37103: LD_VAR 0 2
37107: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37108: LD_INT 0
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
// result := [ ] ;
37123: LD_ADDR_VAR 0 7
37127: PUSH
37128: EMPTY
37129: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37130: LD_VAR 0 1
37134: PPUSH
37135: CALL_OW 266
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: IN
37150: NOT
37151: IFFALSE 37155
// exit ;
37153: GO 38789
// if name then
37155: LD_VAR 0 3
37159: IFFALSE 37175
// SetBName ( base_dep , name ) ;
37161: LD_VAR 0 1
37165: PPUSH
37166: LD_VAR 0 3
37170: PPUSH
37171: CALL_OW 500
// base := GetBase ( base_dep ) ;
37175: LD_ADDR_VAR 0 15
37179: PUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 274
37189: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37190: LD_ADDR_VAR 0 16
37194: PUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: CALL_OW 255
37204: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37205: LD_ADDR_VAR 0 17
37209: PUSH
37210: LD_VAR 0 1
37214: PPUSH
37215: CALL_OW 248
37219: ST_TO_ADDR
// if sources then
37220: LD_VAR 0 5
37224: IFFALSE 37271
// for i = 1 to 3 do
37226: LD_ADDR_VAR 0 8
37230: PUSH
37231: DOUBLE
37232: LD_INT 1
37234: DEC
37235: ST_TO_ADDR
37236: LD_INT 3
37238: PUSH
37239: FOR_TO
37240: IFFALSE 37269
// AddResourceType ( base , i , sources [ i ] ) ;
37242: LD_VAR 0 15
37246: PPUSH
37247: LD_VAR 0 8
37251: PPUSH
37252: LD_VAR 0 5
37256: PUSH
37257: LD_VAR 0 8
37261: ARRAY
37262: PPUSH
37263: CALL_OW 276
37267: GO 37239
37269: POP
37270: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37271: LD_ADDR_VAR 0 18
37275: PUSH
37276: LD_VAR 0 15
37280: PPUSH
37281: LD_VAR 0 2
37285: PPUSH
37286: LD_INT 1
37288: PPUSH
37289: CALL 36532 0 3
37293: ST_TO_ADDR
// InitHc ;
37294: CALL_OW 19
// InitUc ;
37298: CALL_OW 18
// uc_side := side ;
37302: LD_ADDR_OWVAR 20
37306: PUSH
37307: LD_VAR 0 16
37311: ST_TO_ADDR
// uc_nation := nation ;
37312: LD_ADDR_OWVAR 21
37316: PUSH
37317: LD_VAR 0 17
37321: ST_TO_ADDR
// if buildings then
37322: LD_VAR 0 18
37326: IFFALSE 38648
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37328: LD_ADDR_VAR 0 19
37332: PUSH
37333: LD_VAR 0 18
37337: PPUSH
37338: LD_INT 2
37340: PUSH
37341: LD_INT 30
37343: PUSH
37344: LD_INT 29
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 30
37353: PUSH
37354: LD_INT 30
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: PPUSH
37366: CALL_OW 72
37370: ST_TO_ADDR
// if tmp then
37371: LD_VAR 0 19
37375: IFFALSE 37423
// for i in tmp do
37377: LD_ADDR_VAR 0 8
37381: PUSH
37382: LD_VAR 0 19
37386: PUSH
37387: FOR_IN
37388: IFFALSE 37421
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37390: LD_VAR 0 8
37394: PPUSH
37395: CALL_OW 250
37399: PPUSH
37400: LD_VAR 0 8
37404: PPUSH
37405: CALL_OW 251
37409: PPUSH
37410: LD_VAR 0 16
37414: PPUSH
37415: CALL_OW 441
37419: GO 37387
37421: POP
37422: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37423: LD_VAR 0 18
37427: PPUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 30
37433: PUSH
37434: LD_INT 32
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 30
37443: PUSH
37444: LD_INT 33
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 72
37460: IFFALSE 37548
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37462: LD_ADDR_VAR 0 8
37466: PUSH
37467: LD_VAR 0 18
37471: PPUSH
37472: LD_INT 2
37474: PUSH
37475: LD_INT 30
37477: PUSH
37478: LD_INT 32
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 30
37487: PUSH
37488: LD_INT 33
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: PPUSH
37500: CALL_OW 72
37504: PUSH
37505: FOR_IN
37506: IFFALSE 37546
// begin if not GetBWeapon ( i ) then
37508: LD_VAR 0 8
37512: PPUSH
37513: CALL_OW 269
37517: NOT
37518: IFFALSE 37544
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37520: LD_VAR 0 8
37524: PPUSH
37525: LD_VAR 0 8
37529: PPUSH
37530: LD_VAR 0 2
37534: PPUSH
37535: CALL 38794 0 2
37539: PPUSH
37540: CALL_OW 431
// end ;
37544: GO 37505
37546: POP
37547: POP
// end ; for i = 1 to personel do
37548: LD_ADDR_VAR 0 8
37552: PUSH
37553: DOUBLE
37554: LD_INT 1
37556: DEC
37557: ST_TO_ADDR
37558: LD_VAR 0 6
37562: PUSH
37563: FOR_TO
37564: IFFALSE 38628
// begin if i > 4 then
37566: LD_VAR 0 8
37570: PUSH
37571: LD_INT 4
37573: GREATER
37574: IFFALSE 37578
// break ;
37576: GO 38628
// case i of 1 :
37578: LD_VAR 0 8
37582: PUSH
37583: LD_INT 1
37585: DOUBLE
37586: EQUAL
37587: IFTRUE 37591
37589: GO 37671
37591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37592: LD_ADDR_VAR 0 12
37596: PUSH
37597: LD_VAR 0 18
37601: PPUSH
37602: LD_INT 22
37604: PUSH
37605: LD_VAR 0 16
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 58
37616: PUSH
37617: EMPTY
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 30
37625: PUSH
37626: LD_INT 32
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 30
37635: PUSH
37636: LD_INT 4
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 30
37645: PUSH
37646: LD_INT 5
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: PPUSH
37664: CALL_OW 72
37668: ST_TO_ADDR
37669: GO 37893
37671: LD_INT 2
37673: DOUBLE
37674: EQUAL
37675: IFTRUE 37679
37677: GO 37741
37679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37680: LD_ADDR_VAR 0 12
37684: PUSH
37685: LD_VAR 0 18
37689: PPUSH
37690: LD_INT 22
37692: PUSH
37693: LD_VAR 0 16
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: LD_INT 30
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 30
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PPUSH
37734: CALL_OW 72
37738: ST_TO_ADDR
37739: GO 37893
37741: LD_INT 3
37743: DOUBLE
37744: EQUAL
37745: IFTRUE 37749
37747: GO 37811
37749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37750: LD_ADDR_VAR 0 12
37754: PUSH
37755: LD_VAR 0 18
37759: PPUSH
37760: LD_INT 22
37762: PUSH
37763: LD_VAR 0 16
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 30
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 30
37787: PUSH
37788: LD_INT 3
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PPUSH
37804: CALL_OW 72
37808: ST_TO_ADDR
37809: GO 37893
37811: LD_INT 4
37813: DOUBLE
37814: EQUAL
37815: IFTRUE 37819
37817: GO 37892
37819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37820: LD_ADDR_VAR 0 12
37824: PUSH
37825: LD_VAR 0 18
37829: PPUSH
37830: LD_INT 22
37832: PUSH
37833: LD_VAR 0 16
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 30
37847: PUSH
37848: LD_INT 6
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 30
37857: PUSH
37858: LD_INT 7
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 30
37867: PUSH
37868: LD_INT 8
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PPUSH
37885: CALL_OW 72
37889: ST_TO_ADDR
37890: GO 37893
37892: POP
// if i = 1 then
37893: LD_VAR 0 8
37897: PUSH
37898: LD_INT 1
37900: EQUAL
37901: IFFALSE 38012
// begin tmp := [ ] ;
37903: LD_ADDR_VAR 0 19
37907: PUSH
37908: EMPTY
37909: ST_TO_ADDR
// for j in f do
37910: LD_ADDR_VAR 0 9
37914: PUSH
37915: LD_VAR 0 12
37919: PUSH
37920: FOR_IN
37921: IFFALSE 37994
// if GetBType ( j ) = b_bunker then
37923: LD_VAR 0 9
37927: PPUSH
37928: CALL_OW 266
37932: PUSH
37933: LD_INT 32
37935: EQUAL
37936: IFFALSE 37963
// tmp := Insert ( tmp , 1 , j ) else
37938: LD_ADDR_VAR 0 19
37942: PUSH
37943: LD_VAR 0 19
37947: PPUSH
37948: LD_INT 1
37950: PPUSH
37951: LD_VAR 0 9
37955: PPUSH
37956: CALL_OW 2
37960: ST_TO_ADDR
37961: GO 37992
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37963: LD_ADDR_VAR 0 19
37967: PUSH
37968: LD_VAR 0 19
37972: PPUSH
37973: LD_VAR 0 19
37977: PUSH
37978: LD_INT 1
37980: PLUS
37981: PPUSH
37982: LD_VAR 0 9
37986: PPUSH
37987: CALL_OW 2
37991: ST_TO_ADDR
37992: GO 37920
37994: POP
37995: POP
// if tmp then
37996: LD_VAR 0 19
38000: IFFALSE 38012
// f := tmp ;
38002: LD_ADDR_VAR 0 12
38006: PUSH
38007: LD_VAR 0 19
38011: ST_TO_ADDR
// end ; x := personel [ i ] ;
38012: LD_ADDR_VAR 0 13
38016: PUSH
38017: LD_VAR 0 6
38021: PUSH
38022: LD_VAR 0 8
38026: ARRAY
38027: ST_TO_ADDR
// if x = - 1 then
38028: LD_VAR 0 13
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: EQUAL
38037: IFFALSE 38246
// begin for j in f do
38039: LD_ADDR_VAR 0 9
38043: PUSH
38044: LD_VAR 0 12
38048: PUSH
38049: FOR_IN
38050: IFFALSE 38242
// repeat InitHc ;
38052: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38056: LD_VAR 0 9
38060: PPUSH
38061: CALL_OW 266
38065: PUSH
38066: LD_INT 5
38068: EQUAL
38069: IFFALSE 38139
// begin if UnitsInside ( j ) < 3 then
38071: LD_VAR 0 9
38075: PPUSH
38076: CALL_OW 313
38080: PUSH
38081: LD_INT 3
38083: LESS
38084: IFFALSE 38120
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38086: LD_INT 0
38088: PPUSH
38089: LD_INT 5
38091: PUSH
38092: LD_INT 8
38094: PUSH
38095: LD_INT 9
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: PUSH
38103: LD_VAR 0 17
38107: ARRAY
38108: PPUSH
38109: LD_VAR 0 4
38113: PPUSH
38114: CALL_OW 380
38118: GO 38137
// PrepareHuman ( false , i , skill ) ;
38120: LD_INT 0
38122: PPUSH
38123: LD_VAR 0 8
38127: PPUSH
38128: LD_VAR 0 4
38132: PPUSH
38133: CALL_OW 380
// end else
38137: GO 38156
// PrepareHuman ( false , i , skill ) ;
38139: LD_INT 0
38141: PPUSH
38142: LD_VAR 0 8
38146: PPUSH
38147: LD_VAR 0 4
38151: PPUSH
38152: CALL_OW 380
// un := CreateHuman ;
38156: LD_ADDR_VAR 0 14
38160: PUSH
38161: CALL_OW 44
38165: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38166: LD_ADDR_VAR 0 7
38170: PUSH
38171: LD_VAR 0 7
38175: PPUSH
38176: LD_INT 1
38178: PPUSH
38179: LD_VAR 0 14
38183: PPUSH
38184: CALL_OW 2
38188: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38189: LD_VAR 0 14
38193: PPUSH
38194: LD_VAR 0 9
38198: PPUSH
38199: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38203: LD_VAR 0 9
38207: PPUSH
38208: CALL_OW 313
38212: PUSH
38213: LD_INT 6
38215: EQUAL
38216: PUSH
38217: LD_VAR 0 9
38221: PPUSH
38222: CALL_OW 266
38226: PUSH
38227: LD_INT 32
38229: PUSH
38230: LD_INT 31
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: IN
38237: OR
38238: IFFALSE 38052
38240: GO 38049
38242: POP
38243: POP
// end else
38244: GO 38626
// for j = 1 to x do
38246: LD_ADDR_VAR 0 9
38250: PUSH
38251: DOUBLE
38252: LD_INT 1
38254: DEC
38255: ST_TO_ADDR
38256: LD_VAR 0 13
38260: PUSH
38261: FOR_TO
38262: IFFALSE 38624
// begin InitHc ;
38264: CALL_OW 19
// if not f then
38268: LD_VAR 0 12
38272: NOT
38273: IFFALSE 38362
// begin PrepareHuman ( false , i , skill ) ;
38275: LD_INT 0
38277: PPUSH
38278: LD_VAR 0 8
38282: PPUSH
38283: LD_VAR 0 4
38287: PPUSH
38288: CALL_OW 380
// un := CreateHuman ;
38292: LD_ADDR_VAR 0 14
38296: PUSH
38297: CALL_OW 44
38301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38302: LD_ADDR_VAR 0 7
38306: PUSH
38307: LD_VAR 0 7
38311: PPUSH
38312: LD_INT 1
38314: PPUSH
38315: LD_VAR 0 14
38319: PPUSH
38320: CALL_OW 2
38324: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38325: LD_VAR 0 14
38329: PPUSH
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL_OW 250
38339: PPUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 251
38349: PPUSH
38350: LD_INT 10
38352: PPUSH
38353: LD_INT 0
38355: PPUSH
38356: CALL_OW 50
// continue ;
38360: GO 38261
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38362: LD_VAR 0 12
38366: PUSH
38367: LD_INT 1
38369: ARRAY
38370: PPUSH
38371: CALL_OW 313
38375: PUSH
38376: LD_VAR 0 12
38380: PUSH
38381: LD_INT 1
38383: ARRAY
38384: PPUSH
38385: CALL_OW 266
38389: PUSH
38390: LD_INT 32
38392: PUSH
38393: LD_INT 31
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: IN
38400: AND
38401: PUSH
38402: LD_VAR 0 12
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: CALL_OW 313
38415: PUSH
38416: LD_INT 6
38418: EQUAL
38419: OR
38420: IFFALSE 38440
// f := Delete ( f , 1 ) ;
38422: LD_ADDR_VAR 0 12
38426: PUSH
38427: LD_VAR 0 12
38431: PPUSH
38432: LD_INT 1
38434: PPUSH
38435: CALL_OW 3
38439: ST_TO_ADDR
// if not f then
38440: LD_VAR 0 12
38444: NOT
38445: IFFALSE 38463
// begin x := x + 2 ;
38447: LD_ADDR_VAR 0 13
38451: PUSH
38452: LD_VAR 0 13
38456: PUSH
38457: LD_INT 2
38459: PLUS
38460: ST_TO_ADDR
// continue ;
38461: GO 38261
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38463: LD_VAR 0 12
38467: PUSH
38468: LD_INT 1
38470: ARRAY
38471: PPUSH
38472: CALL_OW 266
38476: PUSH
38477: LD_INT 5
38479: EQUAL
38480: IFFALSE 38554
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38482: LD_VAR 0 12
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: PPUSH
38491: CALL_OW 313
38495: PUSH
38496: LD_INT 3
38498: LESS
38499: IFFALSE 38535
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38501: LD_INT 0
38503: PPUSH
38504: LD_INT 5
38506: PUSH
38507: LD_INT 8
38509: PUSH
38510: LD_INT 9
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: PUSH
38518: LD_VAR 0 17
38522: ARRAY
38523: PPUSH
38524: LD_VAR 0 4
38528: PPUSH
38529: CALL_OW 380
38533: GO 38552
// PrepareHuman ( false , i , skill ) ;
38535: LD_INT 0
38537: PPUSH
38538: LD_VAR 0 8
38542: PPUSH
38543: LD_VAR 0 4
38547: PPUSH
38548: CALL_OW 380
// end else
38552: GO 38571
// PrepareHuman ( false , i , skill ) ;
38554: LD_INT 0
38556: PPUSH
38557: LD_VAR 0 8
38561: PPUSH
38562: LD_VAR 0 4
38566: PPUSH
38567: CALL_OW 380
// un := CreateHuman ;
38571: LD_ADDR_VAR 0 14
38575: PUSH
38576: CALL_OW 44
38580: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38581: LD_ADDR_VAR 0 7
38585: PUSH
38586: LD_VAR 0 7
38590: PPUSH
38591: LD_INT 1
38593: PPUSH
38594: LD_VAR 0 14
38598: PPUSH
38599: CALL_OW 2
38603: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38604: LD_VAR 0 14
38608: PPUSH
38609: LD_VAR 0 12
38613: PUSH
38614: LD_INT 1
38616: ARRAY
38617: PPUSH
38618: CALL_OW 52
// end ;
38622: GO 38261
38624: POP
38625: POP
// end ;
38626: GO 37563
38628: POP
38629: POP
// result := result ^ buildings ;
38630: LD_ADDR_VAR 0 7
38634: PUSH
38635: LD_VAR 0 7
38639: PUSH
38640: LD_VAR 0 18
38644: ADD
38645: ST_TO_ADDR
// end else
38646: GO 38789
// begin for i = 1 to personel do
38648: LD_ADDR_VAR 0 8
38652: PUSH
38653: DOUBLE
38654: LD_INT 1
38656: DEC
38657: ST_TO_ADDR
38658: LD_VAR 0 6
38662: PUSH
38663: FOR_TO
38664: IFFALSE 38787
// begin if i > 4 then
38666: LD_VAR 0 8
38670: PUSH
38671: LD_INT 4
38673: GREATER
38674: IFFALSE 38678
// break ;
38676: GO 38787
// x := personel [ i ] ;
38678: LD_ADDR_VAR 0 13
38682: PUSH
38683: LD_VAR 0 6
38687: PUSH
38688: LD_VAR 0 8
38692: ARRAY
38693: ST_TO_ADDR
// if x = - 1 then
38694: LD_VAR 0 13
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: EQUAL
38703: IFFALSE 38707
// continue ;
38705: GO 38663
// PrepareHuman ( false , i , skill ) ;
38707: LD_INT 0
38709: PPUSH
38710: LD_VAR 0 8
38714: PPUSH
38715: LD_VAR 0 4
38719: PPUSH
38720: CALL_OW 380
// un := CreateHuman ;
38724: LD_ADDR_VAR 0 14
38728: PUSH
38729: CALL_OW 44
38733: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38734: LD_VAR 0 14
38738: PPUSH
38739: LD_VAR 0 1
38743: PPUSH
38744: CALL_OW 250
38748: PPUSH
38749: LD_VAR 0 1
38753: PPUSH
38754: CALL_OW 251
38758: PPUSH
38759: LD_INT 10
38761: PPUSH
38762: LD_INT 0
38764: PPUSH
38765: CALL_OW 50
// result := result ^ un ;
38769: LD_ADDR_VAR 0 7
38773: PUSH
38774: LD_VAR 0 7
38778: PUSH
38779: LD_VAR 0 14
38783: ADD
38784: ST_TO_ADDR
// end ;
38785: GO 38663
38787: POP
38788: POP
// end ; end ;
38789: LD_VAR 0 7
38793: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38794: LD_INT 0
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
// result := false ;
38812: LD_ADDR_VAR 0 3
38816: PUSH
38817: LD_INT 0
38819: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38820: LD_VAR 0 1
38824: NOT
38825: PUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 266
38835: PUSH
38836: LD_INT 32
38838: PUSH
38839: LD_INT 33
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: IN
38846: NOT
38847: OR
38848: IFFALSE 38852
// exit ;
38850: GO 39961
// nat := GetNation ( tower ) ;
38852: LD_ADDR_VAR 0 12
38856: PUSH
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL_OW 248
38866: ST_TO_ADDR
// side := GetSide ( tower ) ;
38867: LD_ADDR_VAR 0 16
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL_OW 255
38881: ST_TO_ADDR
// x := GetX ( tower ) ;
38882: LD_ADDR_VAR 0 10
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: CALL_OW 250
38896: ST_TO_ADDR
// y := GetY ( tower ) ;
38897: LD_ADDR_VAR 0 11
38901: PUSH
38902: LD_VAR 0 1
38906: PPUSH
38907: CALL_OW 251
38911: ST_TO_ADDR
// if not x or not y then
38912: LD_VAR 0 10
38916: NOT
38917: PUSH
38918: LD_VAR 0 11
38922: NOT
38923: OR
38924: IFFALSE 38928
// exit ;
38926: GO 39961
// weapon := 0 ;
38928: LD_ADDR_VAR 0 18
38932: PUSH
38933: LD_INT 0
38935: ST_TO_ADDR
// fac_list := [ ] ;
38936: LD_ADDR_VAR 0 17
38940: PUSH
38941: EMPTY
38942: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38943: LD_ADDR_VAR 0 6
38947: PUSH
38948: LD_VAR 0 1
38952: PPUSH
38953: CALL_OW 274
38957: PPUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_INT 0
38965: PPUSH
38966: CALL 36532 0 3
38970: PPUSH
38971: LD_INT 30
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PPUSH
38981: CALL_OW 72
38985: ST_TO_ADDR
// if not factories then
38986: LD_VAR 0 6
38990: NOT
38991: IFFALSE 38995
// exit ;
38993: GO 39961
// for i in factories do
38995: LD_ADDR_VAR 0 8
38999: PUSH
39000: LD_VAR 0 6
39004: PUSH
39005: FOR_IN
39006: IFFALSE 39031
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39008: LD_ADDR_VAR 0 17
39012: PUSH
39013: LD_VAR 0 17
39017: PUSH
39018: LD_VAR 0 8
39022: PPUSH
39023: CALL_OW 478
39027: UNION
39028: ST_TO_ADDR
39029: GO 39005
39031: POP
39032: POP
// if not fac_list then
39033: LD_VAR 0 17
39037: NOT
39038: IFFALSE 39042
// exit ;
39040: GO 39961
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: LD_INT 5
39052: PUSH
39053: LD_INT 9
39055: PUSH
39056: LD_INT 10
39058: PUSH
39059: LD_INT 6
39061: PUSH
39062: LD_INT 7
39064: PUSH
39065: LD_INT 11
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 27
39079: PUSH
39080: LD_INT 28
39082: PUSH
39083: LD_INT 26
39085: PUSH
39086: LD_INT 30
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 43
39097: PUSH
39098: LD_INT 44
39100: PUSH
39101: LD_INT 46
39103: PUSH
39104: LD_INT 45
39106: PUSH
39107: LD_INT 47
39109: PUSH
39110: LD_INT 49
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: PUSH
39126: LD_VAR 0 12
39130: ARRAY
39131: ST_TO_ADDR
// list := list isect fac_list ;
39132: LD_ADDR_VAR 0 5
39136: PUSH
39137: LD_VAR 0 5
39141: PUSH
39142: LD_VAR 0 17
39146: ISECT
39147: ST_TO_ADDR
// if not list then
39148: LD_VAR 0 5
39152: NOT
39153: IFFALSE 39157
// exit ;
39155: GO 39961
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39157: LD_VAR 0 12
39161: PUSH
39162: LD_INT 3
39164: EQUAL
39165: PUSH
39166: LD_INT 49
39168: PUSH
39169: LD_VAR 0 5
39173: IN
39174: AND
39175: PUSH
39176: LD_INT 31
39178: PPUSH
39179: LD_VAR 0 16
39183: PPUSH
39184: CALL_OW 321
39188: PUSH
39189: LD_INT 2
39191: EQUAL
39192: AND
39193: IFFALSE 39253
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39195: LD_INT 22
39197: PUSH
39198: LD_VAR 0 16
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 35
39209: PUSH
39210: LD_INT 49
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 91
39219: PUSH
39220: LD_VAR 0 1
39224: PUSH
39225: LD_INT 10
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: PPUSH
39238: CALL_OW 69
39242: NOT
39243: IFFALSE 39253
// weapon := ru_time_lapser ;
39245: LD_ADDR_VAR 0 18
39249: PUSH
39250: LD_INT 49
39252: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39253: LD_VAR 0 12
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: IN
39268: PUSH
39269: LD_INT 11
39271: PUSH
39272: LD_VAR 0 5
39276: IN
39277: PUSH
39278: LD_INT 30
39280: PUSH
39281: LD_VAR 0 5
39285: IN
39286: OR
39287: AND
39288: PUSH
39289: LD_INT 6
39291: PPUSH
39292: LD_VAR 0 16
39296: PPUSH
39297: CALL_OW 321
39301: PUSH
39302: LD_INT 2
39304: EQUAL
39305: AND
39306: IFFALSE 39471
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39308: LD_INT 22
39310: PUSH
39311: LD_VAR 0 16
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 35
39325: PUSH
39326: LD_INT 11
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 35
39335: PUSH
39336: LD_INT 30
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 91
39350: PUSH
39351: LD_VAR 0 1
39355: PUSH
39356: LD_INT 18
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: PPUSH
39369: CALL_OW 69
39373: NOT
39374: PUSH
39375: LD_INT 22
39377: PUSH
39378: LD_VAR 0 16
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 30
39392: PUSH
39393: LD_INT 32
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 30
39402: PUSH
39403: LD_INT 33
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 91
39417: PUSH
39418: LD_VAR 0 1
39422: PUSH
39423: LD_INT 12
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: PPUSH
39439: CALL_OW 69
39443: PUSH
39444: LD_INT 2
39446: GREATER
39447: AND
39448: IFFALSE 39471
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39450: LD_ADDR_VAR 0 18
39454: PUSH
39455: LD_INT 11
39457: PUSH
39458: LD_INT 30
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_VAR 0 12
39469: ARRAY
39470: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39471: LD_VAR 0 18
39475: NOT
39476: PUSH
39477: LD_INT 40
39479: PPUSH
39480: LD_VAR 0 16
39484: PPUSH
39485: CALL_OW 321
39489: PUSH
39490: LD_INT 2
39492: EQUAL
39493: AND
39494: PUSH
39495: LD_INT 7
39497: PUSH
39498: LD_VAR 0 5
39502: IN
39503: PUSH
39504: LD_INT 28
39506: PUSH
39507: LD_VAR 0 5
39511: IN
39512: OR
39513: PUSH
39514: LD_INT 45
39516: PUSH
39517: LD_VAR 0 5
39521: IN
39522: OR
39523: AND
39524: IFFALSE 39778
// begin hex := GetHexInfo ( x , y ) ;
39526: LD_ADDR_VAR 0 4
39530: PUSH
39531: LD_VAR 0 10
39535: PPUSH
39536: LD_VAR 0 11
39540: PPUSH
39541: CALL_OW 546
39545: ST_TO_ADDR
// if hex [ 1 ] then
39546: LD_VAR 0 4
39550: PUSH
39551: LD_INT 1
39553: ARRAY
39554: IFFALSE 39558
// exit ;
39556: GO 39961
// height := hex [ 2 ] ;
39558: LD_ADDR_VAR 0 15
39562: PUSH
39563: LD_VAR 0 4
39567: PUSH
39568: LD_INT 2
39570: ARRAY
39571: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39572: LD_ADDR_VAR 0 14
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: LD_INT 5
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
// for i in tmp do
39595: LD_ADDR_VAR 0 8
39599: PUSH
39600: LD_VAR 0 14
39604: PUSH
39605: FOR_IN
39606: IFFALSE 39776
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39608: LD_ADDR_VAR 0 9
39612: PUSH
39613: LD_VAR 0 10
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: LD_INT 5
39625: PPUSH
39626: CALL_OW 272
39630: PUSH
39631: LD_VAR 0 11
39635: PPUSH
39636: LD_VAR 0 8
39640: PPUSH
39641: LD_INT 5
39643: PPUSH
39644: CALL_OW 273
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39653: LD_VAR 0 9
39657: PUSH
39658: LD_INT 1
39660: ARRAY
39661: PPUSH
39662: LD_VAR 0 9
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: PPUSH
39671: CALL_OW 488
39675: IFFALSE 39774
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39677: LD_ADDR_VAR 0 4
39681: PUSH
39682: LD_VAR 0 9
39686: PUSH
39687: LD_INT 1
39689: ARRAY
39690: PPUSH
39691: LD_VAR 0 9
39695: PUSH
39696: LD_INT 2
39698: ARRAY
39699: PPUSH
39700: CALL_OW 546
39704: ST_TO_ADDR
// if hex [ 1 ] then
39705: LD_VAR 0 4
39709: PUSH
39710: LD_INT 1
39712: ARRAY
39713: IFFALSE 39717
// continue ;
39715: GO 39605
// h := hex [ 2 ] ;
39717: LD_ADDR_VAR 0 13
39721: PUSH
39722: LD_VAR 0 4
39726: PUSH
39727: LD_INT 2
39729: ARRAY
39730: ST_TO_ADDR
// if h + 7 < height then
39731: LD_VAR 0 13
39735: PUSH
39736: LD_INT 7
39738: PLUS
39739: PUSH
39740: LD_VAR 0 15
39744: LESS
39745: IFFALSE 39774
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39747: LD_ADDR_VAR 0 18
39751: PUSH
39752: LD_INT 7
39754: PUSH
39755: LD_INT 28
39757: PUSH
39758: LD_INT 45
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: PUSH
39766: LD_VAR 0 12
39770: ARRAY
39771: ST_TO_ADDR
// break ;
39772: GO 39776
// end ; end ; end ;
39774: GO 39605
39776: POP
39777: POP
// end ; if not weapon then
39778: LD_VAR 0 18
39782: NOT
39783: IFFALSE 39843
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39785: LD_ADDR_VAR 0 5
39789: PUSH
39790: LD_VAR 0 5
39794: PUSH
39795: LD_INT 11
39797: PUSH
39798: LD_INT 30
39800: PUSH
39801: LD_INT 49
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: DIFF
39809: ST_TO_ADDR
// if not list then
39810: LD_VAR 0 5
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 39961
// weapon := list [ rand ( 1 , list ) ] ;
39819: LD_ADDR_VAR 0 18
39823: PUSH
39824: LD_VAR 0 5
39828: PUSH
39829: LD_INT 1
39831: PPUSH
39832: LD_VAR 0 5
39836: PPUSH
39837: CALL_OW 12
39841: ARRAY
39842: ST_TO_ADDR
// end ; if weapon then
39843: LD_VAR 0 18
39847: IFFALSE 39961
// begin tmp := CostOfWeapon ( weapon ) ;
39849: LD_ADDR_VAR 0 14
39853: PUSH
39854: LD_VAR 0 18
39858: PPUSH
39859: CALL_OW 451
39863: ST_TO_ADDR
// j := GetBase ( tower ) ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: CALL_OW 274
39878: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39879: LD_VAR 0 9
39883: PPUSH
39884: LD_INT 1
39886: PPUSH
39887: CALL_OW 275
39891: PUSH
39892: LD_VAR 0 14
39896: PUSH
39897: LD_INT 1
39899: ARRAY
39900: GREATEREQUAL
39901: PUSH
39902: LD_VAR 0 9
39906: PPUSH
39907: LD_INT 2
39909: PPUSH
39910: CALL_OW 275
39914: PUSH
39915: LD_VAR 0 14
39919: PUSH
39920: LD_INT 2
39922: ARRAY
39923: GREATEREQUAL
39924: AND
39925: PUSH
39926: LD_VAR 0 9
39930: PPUSH
39931: LD_INT 3
39933: PPUSH
39934: CALL_OW 275
39938: PUSH
39939: LD_VAR 0 14
39943: PUSH
39944: LD_INT 3
39946: ARRAY
39947: GREATEREQUAL
39948: AND
39949: IFFALSE 39961
// result := weapon ;
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_VAR 0 18
39960: ST_TO_ADDR
// end ; end ;
39961: LD_VAR 0 3
39965: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39966: LD_INT 0
39968: PPUSH
39969: PPUSH
// result := true ;
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_INT 1
39977: ST_TO_ADDR
// if array1 = array2 then
39978: LD_VAR 0 1
39982: PUSH
39983: LD_VAR 0 2
39987: EQUAL
39988: IFFALSE 40048
// begin for i = 1 to array1 do
39990: LD_ADDR_VAR 0 4
39994: PUSH
39995: DOUBLE
39996: LD_INT 1
39998: DEC
39999: ST_TO_ADDR
40000: LD_VAR 0 1
40004: PUSH
40005: FOR_TO
40006: IFFALSE 40044
// if array1 [ i ] <> array2 [ i ] then
40008: LD_VAR 0 1
40012: PUSH
40013: LD_VAR 0 4
40017: ARRAY
40018: PUSH
40019: LD_VAR 0 2
40023: PUSH
40024: LD_VAR 0 4
40028: ARRAY
40029: NONEQUAL
40030: IFFALSE 40042
// begin result := false ;
40032: LD_ADDR_VAR 0 3
40036: PUSH
40037: LD_INT 0
40039: ST_TO_ADDR
// break ;
40040: GO 40044
// end ;
40042: GO 40005
40044: POP
40045: POP
// end else
40046: GO 40056
// result := false ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 0
40055: ST_TO_ADDR
// end ;
40056: LD_VAR 0 3
40060: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40061: LD_INT 0
40063: PPUSH
40064: PPUSH
// if not array1 or not array2 then
40065: LD_VAR 0 1
40069: NOT
40070: PUSH
40071: LD_VAR 0 2
40075: NOT
40076: OR
40077: IFFALSE 40081
// exit ;
40079: GO 40145
// result := true ;
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_INT 1
40088: ST_TO_ADDR
// for i = 1 to array1 do
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: DOUBLE
40095: LD_INT 1
40097: DEC
40098: ST_TO_ADDR
40099: LD_VAR 0 1
40103: PUSH
40104: FOR_TO
40105: IFFALSE 40143
// if array1 [ i ] <> array2 [ i ] then
40107: LD_VAR 0 1
40111: PUSH
40112: LD_VAR 0 4
40116: ARRAY
40117: PUSH
40118: LD_VAR 0 2
40122: PUSH
40123: LD_VAR 0 4
40127: ARRAY
40128: NONEQUAL
40129: IFFALSE 40141
// begin result := false ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 0
40138: ST_TO_ADDR
// break ;
40139: GO 40143
// end ;
40141: GO 40104
40143: POP
40144: POP
// end ;
40145: LD_VAR 0 3
40149: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40150: LD_INT 0
40152: PPUSH
40153: PPUSH
40154: PPUSH
// pom := GetBase ( fac ) ;
40155: LD_ADDR_VAR 0 5
40159: PUSH
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL_OW 274
40169: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40170: LD_ADDR_VAR 0 4
40174: PUSH
40175: LD_VAR 0 2
40179: PUSH
40180: LD_INT 1
40182: ARRAY
40183: PPUSH
40184: LD_VAR 0 2
40188: PUSH
40189: LD_INT 2
40191: ARRAY
40192: PPUSH
40193: LD_VAR 0 2
40197: PUSH
40198: LD_INT 3
40200: ARRAY
40201: PPUSH
40202: LD_VAR 0 2
40206: PUSH
40207: LD_INT 4
40209: ARRAY
40210: PPUSH
40211: CALL_OW 449
40215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40216: LD_ADDR_VAR 0 3
40220: PUSH
40221: LD_VAR 0 5
40225: PPUSH
40226: LD_INT 1
40228: PPUSH
40229: CALL_OW 275
40233: PUSH
40234: LD_VAR 0 4
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: GREATEREQUAL
40243: PUSH
40244: LD_VAR 0 5
40248: PPUSH
40249: LD_INT 2
40251: PPUSH
40252: CALL_OW 275
40256: PUSH
40257: LD_VAR 0 4
40261: PUSH
40262: LD_INT 2
40264: ARRAY
40265: GREATEREQUAL
40266: AND
40267: PUSH
40268: LD_VAR 0 5
40272: PPUSH
40273: LD_INT 3
40275: PPUSH
40276: CALL_OW 275
40280: PUSH
40281: LD_VAR 0 4
40285: PUSH
40286: LD_INT 3
40288: ARRAY
40289: GREATEREQUAL
40290: AND
40291: ST_TO_ADDR
// end ;
40292: LD_VAR 0 3
40296: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40297: LD_INT 0
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
// pom := GetBase ( building ) ;
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 274
40317: ST_TO_ADDR
// if not pom then
40318: LD_VAR 0 3
40322: NOT
40323: IFFALSE 40327
// exit ;
40325: GO 40497
// btype := GetBType ( building ) ;
40327: LD_ADDR_VAR 0 5
40331: PUSH
40332: LD_VAR 0 1
40336: PPUSH
40337: CALL_OW 266
40341: ST_TO_ADDR
// if btype = b_armoury then
40342: LD_VAR 0 5
40346: PUSH
40347: LD_INT 4
40349: EQUAL
40350: IFFALSE 40360
// btype := b_barracks ;
40352: LD_ADDR_VAR 0 5
40356: PUSH
40357: LD_INT 5
40359: ST_TO_ADDR
// if btype = b_depot then
40360: LD_VAR 0 5
40364: PUSH
40365: LD_INT 0
40367: EQUAL
40368: IFFALSE 40378
// btype := b_warehouse ;
40370: LD_ADDR_VAR 0 5
40374: PUSH
40375: LD_INT 1
40377: ST_TO_ADDR
// if btype = b_workshop then
40378: LD_VAR 0 5
40382: PUSH
40383: LD_INT 2
40385: EQUAL
40386: IFFALSE 40396
// btype := b_factory ;
40388: LD_ADDR_VAR 0 5
40392: PUSH
40393: LD_INT 3
40395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40396: LD_ADDR_VAR 0 4
40400: PUSH
40401: LD_VAR 0 5
40405: PPUSH
40406: LD_VAR 0 1
40410: PPUSH
40411: CALL_OW 248
40415: PPUSH
40416: CALL_OW 450
40420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40421: LD_ADDR_VAR 0 2
40425: PUSH
40426: LD_VAR 0 3
40430: PPUSH
40431: LD_INT 1
40433: PPUSH
40434: CALL_OW 275
40438: PUSH
40439: LD_VAR 0 4
40443: PUSH
40444: LD_INT 1
40446: ARRAY
40447: GREATEREQUAL
40448: PUSH
40449: LD_VAR 0 3
40453: PPUSH
40454: LD_INT 2
40456: PPUSH
40457: CALL_OW 275
40461: PUSH
40462: LD_VAR 0 4
40466: PUSH
40467: LD_INT 2
40469: ARRAY
40470: GREATEREQUAL
40471: AND
40472: PUSH
40473: LD_VAR 0 3
40477: PPUSH
40478: LD_INT 3
40480: PPUSH
40481: CALL_OW 275
40485: PUSH
40486: LD_VAR 0 4
40490: PUSH
40491: LD_INT 3
40493: ARRAY
40494: GREATEREQUAL
40495: AND
40496: ST_TO_ADDR
// end ;
40497: LD_VAR 0 2
40501: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40502: LD_INT 0
40504: PPUSH
40505: PPUSH
40506: PPUSH
// pom := GetBase ( building ) ;
40507: LD_ADDR_VAR 0 4
40511: PUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 274
40521: ST_TO_ADDR
// if not pom then
40522: LD_VAR 0 4
40526: NOT
40527: IFFALSE 40531
// exit ;
40529: GO 40632
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40531: LD_ADDR_VAR 0 5
40535: PUSH
40536: LD_VAR 0 2
40540: PPUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 248
40550: PPUSH
40551: CALL_OW 450
40555: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_VAR 0 4
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 275
40573: PUSH
40574: LD_VAR 0 5
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: GREATEREQUAL
40583: PUSH
40584: LD_VAR 0 4
40588: PPUSH
40589: LD_INT 2
40591: PPUSH
40592: CALL_OW 275
40596: PUSH
40597: LD_VAR 0 5
40601: PUSH
40602: LD_INT 2
40604: ARRAY
40605: GREATEREQUAL
40606: AND
40607: PUSH
40608: LD_VAR 0 4
40612: PPUSH
40613: LD_INT 3
40615: PPUSH
40616: CALL_OW 275
40620: PUSH
40621: LD_VAR 0 5
40625: PUSH
40626: LD_INT 3
40628: ARRAY
40629: GREATEREQUAL
40630: AND
40631: ST_TO_ADDR
// end ;
40632: LD_VAR 0 3
40636: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40637: LD_INT 0
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
// result := false ;
40650: LD_ADDR_VAR 0 8
40654: PUSH
40655: LD_INT 0
40657: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40658: LD_VAR 0 5
40662: NOT
40663: PUSH
40664: LD_VAR 0 1
40668: NOT
40669: OR
40670: PUSH
40671: LD_VAR 0 2
40675: NOT
40676: OR
40677: PUSH
40678: LD_VAR 0 3
40682: NOT
40683: OR
40684: IFFALSE 40688
// exit ;
40686: GO 41502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40688: LD_ADDR_VAR 0 14
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: LD_VAR 0 2
40702: PPUSH
40703: LD_VAR 0 3
40707: PPUSH
40708: LD_VAR 0 4
40712: PPUSH
40713: LD_VAR 0 5
40717: PUSH
40718: LD_INT 1
40720: ARRAY
40721: PPUSH
40722: CALL_OW 248
40726: PPUSH
40727: LD_INT 0
40729: PPUSH
40730: CALL 42735 0 6
40734: ST_TO_ADDR
// if not hexes then
40735: LD_VAR 0 14
40739: NOT
40740: IFFALSE 40744
// exit ;
40742: GO 41502
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40744: LD_ADDR_VAR 0 17
40748: PUSH
40749: LD_VAR 0 5
40753: PPUSH
40754: LD_INT 22
40756: PUSH
40757: LD_VAR 0 13
40761: PPUSH
40762: CALL_OW 255
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 30
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 30
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PPUSH
40803: CALL_OW 72
40807: ST_TO_ADDR
// for i = 1 to hexes do
40808: LD_ADDR_VAR 0 9
40812: PUSH
40813: DOUBLE
40814: LD_INT 1
40816: DEC
40817: ST_TO_ADDR
40818: LD_VAR 0 14
40822: PUSH
40823: FOR_TO
40824: IFFALSE 41500
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40826: LD_ADDR_VAR 0 13
40830: PUSH
40831: LD_VAR 0 14
40835: PUSH
40836: LD_VAR 0 9
40840: ARRAY
40841: PUSH
40842: LD_INT 1
40844: ARRAY
40845: PPUSH
40846: LD_VAR 0 14
40850: PUSH
40851: LD_VAR 0 9
40855: ARRAY
40856: PUSH
40857: LD_INT 2
40859: ARRAY
40860: PPUSH
40861: CALL_OW 428
40865: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40866: LD_VAR 0 14
40870: PUSH
40871: LD_VAR 0 9
40875: ARRAY
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: PPUSH
40881: LD_VAR 0 14
40885: PUSH
40886: LD_VAR 0 9
40890: ARRAY
40891: PUSH
40892: LD_INT 2
40894: ARRAY
40895: PPUSH
40896: CALL_OW 351
40900: PUSH
40901: LD_VAR 0 14
40905: PUSH
40906: LD_VAR 0 9
40910: ARRAY
40911: PUSH
40912: LD_INT 1
40914: ARRAY
40915: PPUSH
40916: LD_VAR 0 14
40920: PUSH
40921: LD_VAR 0 9
40925: ARRAY
40926: PUSH
40927: LD_INT 2
40929: ARRAY
40930: PPUSH
40931: CALL_OW 488
40935: NOT
40936: OR
40937: PUSH
40938: LD_VAR 0 13
40942: PPUSH
40943: CALL_OW 247
40947: PUSH
40948: LD_INT 3
40950: EQUAL
40951: OR
40952: IFFALSE 40958
// exit ;
40954: POP
40955: POP
40956: GO 41502
// if not tmp then
40958: LD_VAR 0 13
40962: NOT
40963: IFFALSE 40967
// continue ;
40965: GO 40823
// result := true ;
40967: LD_ADDR_VAR 0 8
40971: PUSH
40972: LD_INT 1
40974: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40975: LD_VAR 0 6
40979: PUSH
40980: LD_VAR 0 13
40984: PPUSH
40985: CALL_OW 247
40989: PUSH
40990: LD_INT 2
40992: EQUAL
40993: AND
40994: PUSH
40995: LD_VAR 0 13
40999: PPUSH
41000: CALL_OW 263
41004: PUSH
41005: LD_INT 1
41007: EQUAL
41008: AND
41009: IFFALSE 41173
// begin if IsDrivenBy ( tmp ) then
41011: LD_VAR 0 13
41015: PPUSH
41016: CALL_OW 311
41020: IFFALSE 41024
// continue ;
41022: GO 40823
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41024: LD_VAR 0 6
41028: PPUSH
41029: LD_INT 3
41031: PUSH
41032: LD_INT 60
41034: PUSH
41035: EMPTY
41036: LIST
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 3
41044: PUSH
41045: LD_INT 55
41047: PUSH
41048: EMPTY
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PPUSH
41059: CALL_OW 72
41063: IFFALSE 41171
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41065: LD_ADDR_VAR 0 18
41069: PUSH
41070: LD_VAR 0 6
41074: PPUSH
41075: LD_INT 3
41077: PUSH
41078: LD_INT 60
41080: PUSH
41081: EMPTY
41082: LIST
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: LD_INT 55
41093: PUSH
41094: EMPTY
41095: LIST
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PPUSH
41105: CALL_OW 72
41109: PUSH
41110: LD_INT 1
41112: ARRAY
41113: ST_TO_ADDR
// if IsInUnit ( driver ) then
41114: LD_VAR 0 18
41118: PPUSH
41119: CALL_OW 310
41123: IFFALSE 41134
// ComExit ( driver ) ;
41125: LD_VAR 0 18
41129: PPUSH
41130: CALL 66514 0 1
// AddComEnterUnit ( driver , tmp ) ;
41134: LD_VAR 0 18
41138: PPUSH
41139: LD_VAR 0 13
41143: PPUSH
41144: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41148: LD_VAR 0 18
41152: PPUSH
41153: LD_VAR 0 7
41157: PPUSH
41158: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41162: LD_VAR 0 18
41166: PPUSH
41167: CALL_OW 181
// end ; continue ;
41171: GO 40823
// end ; if not cleaners or not tmp in cleaners then
41173: LD_VAR 0 6
41177: NOT
41178: PUSH
41179: LD_VAR 0 13
41183: PUSH
41184: LD_VAR 0 6
41188: IN
41189: NOT
41190: OR
41191: IFFALSE 41498
// begin if dep then
41193: LD_VAR 0 17
41197: IFFALSE 41333
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41199: LD_ADDR_VAR 0 16
41203: PUSH
41204: LD_VAR 0 17
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: PPUSH
41213: CALL_OW 250
41217: PPUSH
41218: LD_VAR 0 17
41222: PUSH
41223: LD_INT 1
41225: ARRAY
41226: PPUSH
41227: CALL_OW 254
41231: PPUSH
41232: LD_INT 5
41234: PPUSH
41235: CALL_OW 272
41239: PUSH
41240: LD_VAR 0 17
41244: PUSH
41245: LD_INT 1
41247: ARRAY
41248: PPUSH
41249: CALL_OW 251
41253: PPUSH
41254: LD_VAR 0 17
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: PPUSH
41263: CALL_OW 254
41267: PPUSH
41268: LD_INT 5
41270: PPUSH
41271: CALL_OW 273
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41280: LD_VAR 0 16
41284: PUSH
41285: LD_INT 1
41287: ARRAY
41288: PPUSH
41289: LD_VAR 0 16
41293: PUSH
41294: LD_INT 2
41296: ARRAY
41297: PPUSH
41298: CALL_OW 488
41302: IFFALSE 41333
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41304: LD_VAR 0 13
41308: PPUSH
41309: LD_VAR 0 16
41313: PUSH
41314: LD_INT 1
41316: ARRAY
41317: PPUSH
41318: LD_VAR 0 16
41322: PUSH
41323: LD_INT 2
41325: ARRAY
41326: PPUSH
41327: CALL_OW 111
// continue ;
41331: GO 40823
// end ; end ; r := GetDir ( tmp ) ;
41333: LD_ADDR_VAR 0 15
41337: PUSH
41338: LD_VAR 0 13
41342: PPUSH
41343: CALL_OW 254
41347: ST_TO_ADDR
// if r = 5 then
41348: LD_VAR 0 15
41352: PUSH
41353: LD_INT 5
41355: EQUAL
41356: IFFALSE 41366
// r := 0 ;
41358: LD_ADDR_VAR 0 15
41362: PUSH
41363: LD_INT 0
41365: ST_TO_ADDR
// for j = r to 5 do
41366: LD_ADDR_VAR 0 10
41370: PUSH
41371: DOUBLE
41372: LD_VAR 0 15
41376: DEC
41377: ST_TO_ADDR
41378: LD_INT 5
41380: PUSH
41381: FOR_TO
41382: IFFALSE 41496
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41384: LD_ADDR_VAR 0 11
41388: PUSH
41389: LD_VAR 0 13
41393: PPUSH
41394: CALL_OW 250
41398: PPUSH
41399: LD_VAR 0 10
41403: PPUSH
41404: LD_INT 2
41406: PPUSH
41407: CALL_OW 272
41411: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41412: LD_ADDR_VAR 0 12
41416: PUSH
41417: LD_VAR 0 13
41421: PPUSH
41422: CALL_OW 251
41426: PPUSH
41427: LD_VAR 0 10
41431: PPUSH
41432: LD_INT 2
41434: PPUSH
41435: CALL_OW 273
41439: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41440: LD_VAR 0 11
41444: PPUSH
41445: LD_VAR 0 12
41449: PPUSH
41450: CALL_OW 488
41454: PUSH
41455: LD_VAR 0 11
41459: PPUSH
41460: LD_VAR 0 12
41464: PPUSH
41465: CALL_OW 428
41469: NOT
41470: AND
41471: IFFALSE 41494
// begin ComMoveXY ( tmp , _x , _y ) ;
41473: LD_VAR 0 13
41477: PPUSH
41478: LD_VAR 0 11
41482: PPUSH
41483: LD_VAR 0 12
41487: PPUSH
41488: CALL_OW 111
// break ;
41492: GO 41496
// end ; end ;
41494: GO 41381
41496: POP
41497: POP
// end ; end ;
41498: GO 40823
41500: POP
41501: POP
// end ;
41502: LD_VAR 0 8
41506: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41507: LD_INT 0
41509: PPUSH
// result := true ;
41510: LD_ADDR_VAR 0 3
41514: PUSH
41515: LD_INT 1
41517: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41518: LD_VAR 0 2
41522: PUSH
41523: LD_INT 24
41525: DOUBLE
41526: EQUAL
41527: IFTRUE 41537
41529: LD_INT 33
41531: DOUBLE
41532: EQUAL
41533: IFTRUE 41537
41535: GO 41562
41537: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_INT 32
41545: PPUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 321
41555: PUSH
41556: LD_INT 2
41558: EQUAL
41559: ST_TO_ADDR
41560: GO 41878
41562: LD_INT 20
41564: DOUBLE
41565: EQUAL
41566: IFTRUE 41570
41568: GO 41595
41570: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41571: LD_ADDR_VAR 0 3
41575: PUSH
41576: LD_INT 6
41578: PPUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: CALL_OW 321
41588: PUSH
41589: LD_INT 2
41591: EQUAL
41592: ST_TO_ADDR
41593: GO 41878
41595: LD_INT 22
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41609
41601: LD_INT 36
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41634
41609: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41610: LD_ADDR_VAR 0 3
41614: PUSH
41615: LD_INT 15
41617: PPUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: CALL_OW 321
41627: PUSH
41628: LD_INT 2
41630: EQUAL
41631: ST_TO_ADDR
41632: GO 41878
41634: LD_INT 30
41636: DOUBLE
41637: EQUAL
41638: IFTRUE 41642
41640: GO 41667
41642: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_INT 20
41650: PPUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: CALL_OW 321
41660: PUSH
41661: LD_INT 2
41663: EQUAL
41664: ST_TO_ADDR
41665: GO 41878
41667: LD_INT 28
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41681
41673: LD_INT 21
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41706
41681: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_INT 21
41689: PPUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 321
41699: PUSH
41700: LD_INT 2
41702: EQUAL
41703: ST_TO_ADDR
41704: GO 41878
41706: LD_INT 16
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41739
41714: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_INT 84
41722: PPUSH
41723: LD_VAR 0 1
41727: PPUSH
41728: CALL_OW 321
41732: PUSH
41733: LD_INT 2
41735: EQUAL
41736: ST_TO_ADDR
41737: GO 41878
41739: LD_INT 19
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41753
41745: LD_INT 23
41747: DOUBLE
41748: EQUAL
41749: IFTRUE 41753
41751: GO 41778
41753: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41754: LD_ADDR_VAR 0 3
41758: PUSH
41759: LD_INT 83
41761: PPUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 321
41771: PUSH
41772: LD_INT 2
41774: EQUAL
41775: ST_TO_ADDR
41776: GO 41878
41778: LD_INT 17
41780: DOUBLE
41781: EQUAL
41782: IFTRUE 41786
41784: GO 41811
41786: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_INT 39
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: CALL_OW 321
41804: PUSH
41805: LD_INT 2
41807: EQUAL
41808: ST_TO_ADDR
41809: GO 41878
41811: LD_INT 18
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 41844
41819: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_INT 40
41827: PPUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 321
41837: PUSH
41838: LD_INT 2
41840: EQUAL
41841: ST_TO_ADDR
41842: GO 41878
41844: LD_INT 27
41846: DOUBLE
41847: EQUAL
41848: IFTRUE 41852
41850: GO 41877
41852: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41853: LD_ADDR_VAR 0 3
41857: PUSH
41858: LD_INT 35
41860: PPUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: CALL_OW 321
41870: PUSH
41871: LD_INT 2
41873: EQUAL
41874: ST_TO_ADDR
41875: GO 41878
41877: POP
// end ;
41878: LD_VAR 0 3
41882: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41883: LD_INT 0
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
// result := false ;
41896: LD_ADDR_VAR 0 6
41900: PUSH
41901: LD_INT 0
41903: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41904: LD_VAR 0 1
41908: NOT
41909: PUSH
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: IN
41930: NOT
41931: OR
41932: PUSH
41933: LD_VAR 0 2
41937: NOT
41938: OR
41939: PUSH
41940: LD_VAR 0 5
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: LD_INT 4
41959: PUSH
41960: LD_INT 5
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: IN
41971: NOT
41972: OR
41973: PUSH
41974: LD_VAR 0 3
41978: PPUSH
41979: LD_VAR 0 4
41983: PPUSH
41984: CALL_OW 488
41988: NOT
41989: OR
41990: IFFALSE 41994
// exit ;
41992: GO 42730
// side := GetSide ( depot ) ;
41994: LD_ADDR_VAR 0 9
41998: PUSH
41999: LD_VAR 0 1
42003: PPUSH
42004: CALL_OW 255
42008: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42009: LD_VAR 0 9
42013: PPUSH
42014: LD_VAR 0 2
42018: PPUSH
42019: CALL 41507 0 2
42023: NOT
42024: IFFALSE 42028
// exit ;
42026: GO 42730
// pom := GetBase ( depot ) ;
42028: LD_ADDR_VAR 0 10
42032: PUSH
42033: LD_VAR 0 1
42037: PPUSH
42038: CALL_OW 274
42042: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42043: LD_ADDR_VAR 0 11
42047: PUSH
42048: LD_VAR 0 2
42052: PPUSH
42053: LD_VAR 0 1
42057: PPUSH
42058: CALL_OW 248
42062: PPUSH
42063: CALL_OW 450
42067: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42068: LD_VAR 0 10
42072: PPUSH
42073: LD_INT 1
42075: PPUSH
42076: CALL_OW 275
42080: PUSH
42081: LD_VAR 0 11
42085: PUSH
42086: LD_INT 1
42088: ARRAY
42089: GREATEREQUAL
42090: PUSH
42091: LD_VAR 0 10
42095: PPUSH
42096: LD_INT 2
42098: PPUSH
42099: CALL_OW 275
42103: PUSH
42104: LD_VAR 0 11
42108: PUSH
42109: LD_INT 2
42111: ARRAY
42112: GREATEREQUAL
42113: AND
42114: PUSH
42115: LD_VAR 0 10
42119: PPUSH
42120: LD_INT 3
42122: PPUSH
42123: CALL_OW 275
42127: PUSH
42128: LD_VAR 0 11
42132: PUSH
42133: LD_INT 3
42135: ARRAY
42136: GREATEREQUAL
42137: AND
42138: NOT
42139: IFFALSE 42143
// exit ;
42141: GO 42730
// if GetBType ( depot ) = b_depot then
42143: LD_VAR 0 1
42147: PPUSH
42148: CALL_OW 266
42152: PUSH
42153: LD_INT 0
42155: EQUAL
42156: IFFALSE 42168
// dist := 28 else
42158: LD_ADDR_VAR 0 14
42162: PUSH
42163: LD_INT 28
42165: ST_TO_ADDR
42166: GO 42176
// dist := 36 ;
42168: LD_ADDR_VAR 0 14
42172: PUSH
42173: LD_INT 36
42175: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42176: LD_VAR 0 1
42180: PPUSH
42181: LD_VAR 0 3
42185: PPUSH
42186: LD_VAR 0 4
42190: PPUSH
42191: CALL_OW 297
42195: PUSH
42196: LD_VAR 0 14
42200: GREATER
42201: IFFALSE 42205
// exit ;
42203: GO 42730
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42205: LD_ADDR_VAR 0 12
42209: PUSH
42210: LD_VAR 0 2
42214: PPUSH
42215: LD_VAR 0 3
42219: PPUSH
42220: LD_VAR 0 4
42224: PPUSH
42225: LD_VAR 0 5
42229: PPUSH
42230: LD_VAR 0 1
42234: PPUSH
42235: CALL_OW 248
42239: PPUSH
42240: LD_INT 0
42242: PPUSH
42243: CALL 42735 0 6
42247: ST_TO_ADDR
// if not hexes then
42248: LD_VAR 0 12
42252: NOT
42253: IFFALSE 42257
// exit ;
42255: GO 42730
// hex := GetHexInfo ( x , y ) ;
42257: LD_ADDR_VAR 0 15
42261: PUSH
42262: LD_VAR 0 3
42266: PPUSH
42267: LD_VAR 0 4
42271: PPUSH
42272: CALL_OW 546
42276: ST_TO_ADDR
// if hex [ 1 ] then
42277: LD_VAR 0 15
42281: PUSH
42282: LD_INT 1
42284: ARRAY
42285: IFFALSE 42289
// exit ;
42287: GO 42730
// height := hex [ 2 ] ;
42289: LD_ADDR_VAR 0 13
42293: PUSH
42294: LD_VAR 0 15
42298: PUSH
42299: LD_INT 2
42301: ARRAY
42302: ST_TO_ADDR
// for i = 1 to hexes do
42303: LD_ADDR_VAR 0 7
42307: PUSH
42308: DOUBLE
42309: LD_INT 1
42311: DEC
42312: ST_TO_ADDR
42313: LD_VAR 0 12
42317: PUSH
42318: FOR_TO
42319: IFFALSE 42649
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42321: LD_VAR 0 12
42325: PUSH
42326: LD_VAR 0 7
42330: ARRAY
42331: PUSH
42332: LD_INT 1
42334: ARRAY
42335: PPUSH
42336: LD_VAR 0 12
42340: PUSH
42341: LD_VAR 0 7
42345: ARRAY
42346: PUSH
42347: LD_INT 2
42349: ARRAY
42350: PPUSH
42351: CALL_OW 488
42355: NOT
42356: PUSH
42357: LD_VAR 0 12
42361: PUSH
42362: LD_VAR 0 7
42366: ARRAY
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 12
42376: PUSH
42377: LD_VAR 0 7
42381: ARRAY
42382: PUSH
42383: LD_INT 2
42385: ARRAY
42386: PPUSH
42387: CALL_OW 428
42391: PUSH
42392: LD_INT 0
42394: GREATER
42395: OR
42396: PUSH
42397: LD_VAR 0 12
42401: PUSH
42402: LD_VAR 0 7
42406: ARRAY
42407: PUSH
42408: LD_INT 1
42410: ARRAY
42411: PPUSH
42412: LD_VAR 0 12
42416: PUSH
42417: LD_VAR 0 7
42421: ARRAY
42422: PUSH
42423: LD_INT 2
42425: ARRAY
42426: PPUSH
42427: CALL_OW 351
42431: OR
42432: IFFALSE 42438
// exit ;
42434: POP
42435: POP
42436: GO 42730
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42438: LD_ADDR_VAR 0 8
42442: PUSH
42443: LD_VAR 0 12
42447: PUSH
42448: LD_VAR 0 7
42452: ARRAY
42453: PUSH
42454: LD_INT 1
42456: ARRAY
42457: PPUSH
42458: LD_VAR 0 12
42462: PUSH
42463: LD_VAR 0 7
42467: ARRAY
42468: PUSH
42469: LD_INT 2
42471: ARRAY
42472: PPUSH
42473: CALL_OW 546
42477: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42478: LD_VAR 0 8
42482: PUSH
42483: LD_INT 1
42485: ARRAY
42486: PUSH
42487: LD_VAR 0 8
42491: PUSH
42492: LD_INT 2
42494: ARRAY
42495: PUSH
42496: LD_VAR 0 13
42500: PUSH
42501: LD_INT 2
42503: PLUS
42504: GREATER
42505: OR
42506: PUSH
42507: LD_VAR 0 8
42511: PUSH
42512: LD_INT 2
42514: ARRAY
42515: PUSH
42516: LD_VAR 0 13
42520: PUSH
42521: LD_INT 2
42523: MINUS
42524: LESS
42525: OR
42526: PUSH
42527: LD_VAR 0 8
42531: PUSH
42532: LD_INT 3
42534: ARRAY
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 8
42541: PUSH
42542: LD_INT 9
42544: PUSH
42545: LD_INT 10
42547: PUSH
42548: LD_INT 11
42550: PUSH
42551: LD_INT 12
42553: PUSH
42554: LD_INT 13
42556: PUSH
42557: LD_INT 16
42559: PUSH
42560: LD_INT 17
42562: PUSH
42563: LD_INT 18
42565: PUSH
42566: LD_INT 19
42568: PUSH
42569: LD_INT 20
42571: PUSH
42572: LD_INT 21
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: IN
42590: NOT
42591: OR
42592: PUSH
42593: LD_VAR 0 8
42597: PUSH
42598: LD_INT 5
42600: ARRAY
42601: NOT
42602: OR
42603: PUSH
42604: LD_VAR 0 8
42608: PUSH
42609: LD_INT 6
42611: ARRAY
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 7
42621: PUSH
42622: LD_INT 9
42624: PUSH
42625: LD_INT 10
42627: PUSH
42628: LD_INT 11
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: IN
42639: NOT
42640: OR
42641: IFFALSE 42647
// exit ;
42643: POP
42644: POP
42645: GO 42730
// end ;
42647: GO 42318
42649: POP
42650: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42651: LD_VAR 0 9
42655: PPUSH
42656: LD_VAR 0 3
42660: PPUSH
42661: LD_VAR 0 4
42665: PPUSH
42666: LD_INT 20
42668: PPUSH
42669: CALL 34682 0 4
42673: PUSH
42674: LD_INT 4
42676: ARRAY
42677: IFFALSE 42681
// exit ;
42679: GO 42730
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42681: LD_VAR 0 2
42685: PUSH
42686: LD_INT 29
42688: PUSH
42689: LD_INT 30
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: IN
42696: PUSH
42697: LD_VAR 0 3
42701: PPUSH
42702: LD_VAR 0 4
42706: PPUSH
42707: LD_VAR 0 9
42711: PPUSH
42712: CALL_OW 440
42716: NOT
42717: AND
42718: IFFALSE 42722
// exit ;
42720: GO 42730
// result := true ;
42722: LD_ADDR_VAR 0 6
42726: PUSH
42727: LD_INT 1
42729: ST_TO_ADDR
// end ;
42730: LD_VAR 0 6
42734: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42735: LD_INT 0
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
// result = [ ] ;
42795: LD_ADDR_VAR 0 7
42799: PUSH
42800: EMPTY
42801: ST_TO_ADDR
// temp_list = [ ] ;
42802: LD_ADDR_VAR 0 9
42806: PUSH
42807: EMPTY
42808: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42809: LD_VAR 0 4
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: LD_INT 5
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: IN
42840: NOT
42841: PUSH
42842: LD_VAR 0 1
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: IN
42857: PUSH
42858: LD_VAR 0 5
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: IN
42877: NOT
42878: AND
42879: OR
42880: IFFALSE 42884
// exit ;
42882: GO 61275
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42884: LD_VAR 0 1
42888: PUSH
42889: LD_INT 6
42891: PUSH
42892: LD_INT 7
42894: PUSH
42895: LD_INT 8
42897: PUSH
42898: LD_INT 13
42900: PUSH
42901: LD_INT 12
42903: PUSH
42904: LD_INT 15
42906: PUSH
42907: LD_INT 11
42909: PUSH
42910: LD_INT 14
42912: PUSH
42913: LD_INT 10
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: IN
42927: IFFALSE 42937
// btype = b_lab ;
42929: LD_ADDR_VAR 0 1
42933: PUSH
42934: LD_INT 6
42936: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42937: LD_VAR 0 6
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: IN
42956: NOT
42957: PUSH
42958: LD_VAR 0 1
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: LD_INT 6
42977: PUSH
42978: LD_INT 36
42980: PUSH
42981: LD_INT 4
42983: PUSH
42984: LD_INT 5
42986: PUSH
42987: LD_INT 31
42989: PUSH
42990: LD_INT 32
42992: PUSH
42993: LD_INT 33
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: IN
43009: NOT
43010: PUSH
43011: LD_VAR 0 6
43015: PUSH
43016: LD_INT 1
43018: EQUAL
43019: AND
43020: OR
43021: PUSH
43022: LD_VAR 0 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: IN
43037: NOT
43038: PUSH
43039: LD_VAR 0 6
43043: PUSH
43044: LD_INT 2
43046: EQUAL
43047: AND
43048: OR
43049: IFFALSE 43059
// mode = 0 ;
43051: LD_ADDR_VAR 0 6
43055: PUSH
43056: LD_INT 0
43058: ST_TO_ADDR
// case mode of 0 :
43059: LD_VAR 0 6
43063: PUSH
43064: LD_INT 0
43066: DOUBLE
43067: EQUAL
43068: IFTRUE 43072
43070: GO 54525
43072: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43073: LD_ADDR_VAR 0 11
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 2
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 3
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43266: LD_ADDR_VAR 0 12
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43462: LD_ADDR_VAR 0 13
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 3
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 3
43633: NEG
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43661: LD_ADDR_VAR 0 14
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 3
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43857: LD_ADDR_VAR 0 15
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44050: LD_ADDR_VAR 0 16
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44243: LD_ADDR_VAR 0 17
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44473: LD_ADDR_VAR 0 18
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44703: LD_ADDR_VAR 0 19
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44933: LD_ADDR_VAR 0 20
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45163: LD_ADDR_VAR 0 21
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45393: LD_ADDR_VAR 0 22
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45623: LD_ADDR_VAR 0 23
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 3
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45903: LD_ADDR_VAR 0 24
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46179: LD_ADDR_VAR 0 25
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46453: LD_ADDR_VAR 0 26
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46729: LD_ADDR_VAR 0 27
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 3
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47009: LD_ADDR_VAR 0 28
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47291: LD_ADDR_VAR 0 29
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47570: LD_ADDR_VAR 0 30
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47848: LD_ADDR_VAR 0 31
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 3
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48126: LD_ADDR_VAR 0 32
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 3
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48404: LD_ADDR_VAR 0 33
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 3
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48683: LD_ADDR_VAR 0 34
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 3
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48963: LD_ADDR_VAR 0 35
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49075: LD_ADDR_VAR 0 36
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49187: LD_ADDR_VAR 0 37
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49299: LD_ADDR_VAR 0 38
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49411: LD_ADDR_VAR 0 39
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49523: LD_ADDR_VAR 0 40
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49635: LD_ADDR_VAR 0 41
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49985: LD_ADDR_VAR 0 42
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 3
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50335: LD_ADDR_VAR 0 43
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 3
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50683: LD_ADDR_VAR 0 44
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 3
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51033: LD_ADDR_VAR 0 45
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51383: LD_ADDR_VAR 0 46
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51731: LD_ADDR_VAR 0 47
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51882: LD_ADDR_VAR 0 48
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52029: LD_ADDR_VAR 0 49
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52173: LD_ADDR_VAR 0 50
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52317: LD_ADDR_VAR 0 51
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52464: LD_ADDR_VAR 0 52
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52615: LD_ADDR_VAR 0 53
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52845: LD_ADDR_VAR 0 54
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53075: LD_ADDR_VAR 0 55
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53305: LD_ADDR_VAR 0 56
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53535: LD_ADDR_VAR 0 57
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53765: LD_ADDR_VAR 0 58
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53995: LD_ADDR_VAR 0 59
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54083: LD_ADDR_VAR 0 60
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54171: LD_ADDR_VAR 0 61
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54259: LD_ADDR_VAR 0 62
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54347: LD_ADDR_VAR 0 63
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54435: LD_ADDR_VAR 0 64
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// end ; 1 :
54523: GO 60420
54525: LD_INT 1
54527: DOUBLE
54528: EQUAL
54529: IFTRUE 54533
54531: GO 57156
54533: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54534: LD_ADDR_VAR 0 11
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54578: LD_ADDR_VAR 0 12
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54619: LD_ADDR_VAR 0 13
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: LD_INT 3
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54659: LD_ADDR_VAR 0 14
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54700: LD_ADDR_VAR 0 15
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54744: LD_ADDR_VAR 0 16
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 3
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 3
54775: NEG
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54790: LD_ADDR_VAR 0 17
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 3
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54834: LD_ADDR_VAR 0 18
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54875: LD_ADDR_VAR 0 19
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54915: LD_ADDR_VAR 0 20
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 3
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54956: LD_ADDR_VAR 0 21
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55000: LD_ADDR_VAR 0 22
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55046: LD_ADDR_VAR 0 23
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 3
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 4
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55090: LD_ADDR_VAR 0 24
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 4
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55131: LD_ADDR_VAR 0 25
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: LD_INT 4
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55171: LD_ADDR_VAR 0 26
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 3
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 4
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 3
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55212: LD_ADDR_VAR 0 27
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 4
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55256: LD_ADDR_VAR 0 28
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: LD_INT 4
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55302: LD_ADDR_VAR 0 29
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 4
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 5
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 5
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 4
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 6
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 6
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 5
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55457: LD_ADDR_VAR 0 30
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 4
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 5
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 5
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 5
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 6
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 6
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55600: LD_ADDR_VAR 0 31
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 4
55647: PUSH
55648: LD_INT 4
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 5
55667: PUSH
55668: LD_INT 4
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 5
55677: PUSH
55678: LD_INT 5
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: LD_INT 5
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 6
55697: PUSH
55698: LD_INT 5
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 6
55707: PUSH
55708: LD_INT 6
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: LD_INT 6
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55739: LD_ADDR_VAR 0 32
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 4
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 5
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 5
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 6
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 6
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 5
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55882: LD_ADDR_VAR 0 33
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 4
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 5
55968: NEG
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 5
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 6
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 6
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56037: LD_ADDR_VAR 0 34
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 4
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: NEG
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 5
56128: NEG
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 5
56140: NEG
56141: PUSH
56142: LD_INT 5
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 5
56152: NEG
56153: PUSH
56154: LD_INT 6
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 6
56164: NEG
56165: PUSH
56166: LD_INT 5
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 6
56176: NEG
56177: PUSH
56178: LD_INT 6
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56200: LD_ADDR_VAR 0 41
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56244: LD_ADDR_VAR 0 42
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56285: LD_ADDR_VAR 0 43
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56325: LD_ADDR_VAR 0 44
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56366: LD_ADDR_VAR 0 45
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 3
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56410: LD_ADDR_VAR 0 46
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56456: LD_ADDR_VAR 0 47
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56489: LD_ADDR_VAR 0 48
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56520: LD_ADDR_VAR 0 49
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56549: LD_ADDR_VAR 0 50
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56578: LD_ADDR_VAR 0 51
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56609: LD_ADDR_VAR 0 52
56613: PUSH
56614: LD_INT 3
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56642: LD_ADDR_VAR 0 53
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56686: LD_ADDR_VAR 0 54
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56727: LD_ADDR_VAR 0 55
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56767: LD_ADDR_VAR 0 56
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56808: LD_ADDR_VAR 0 57
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56852: LD_ADDR_VAR 0 58
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: NEG
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56898: LD_ADDR_VAR 0 59
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56942: LD_ADDR_VAR 0 60
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: LIST
56982: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56983: LD_ADDR_VAR 0 61
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57023: LD_ADDR_VAR 0 62
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57064: LD_ADDR_VAR 0 63
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57108: LD_ADDR_VAR 0 64
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// end ; 2 :
57154: GO 60420
57156: LD_INT 2
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57164
57162: GO 60419
57164: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57165: LD_ADDR_VAR 0 29
57169: PUSH
57170: LD_INT 4
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 5
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 5
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 4
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 4
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 4
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 5
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 5
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 5
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 4
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 4
57527: NEG
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: NEG
57551: PUSH
57552: LD_INT 4
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 4
57562: NEG
57563: PUSH
57564: LD_INT 5
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: LD_INT 4
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 4
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 5
57610: NEG
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 5
57622: NEG
57623: PUSH
57624: LD_INT 5
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 5
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 5
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57703: LD_ADDR_VAR 0 30
57707: PUSH
57708: LD_INT 4
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 4
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: PUSH
57731: LD_INT 4
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 5
57740: PUSH
57741: LD_INT 5
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 4
57750: PUSH
57751: LD_INT 5
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 4
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: LD_INT 5
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 4
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 4
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 5
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 5
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 5
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: NEG
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: LD_INT 4
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 4
58067: NEG
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 4
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 4
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 5
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 4
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 5
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 5
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58250: LD_ADDR_VAR 0 31
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 4
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 4
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 5
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 5
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 4
58452: NEG
58453: PUSH
58454: LD_INT 4
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: LD_INT 5
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: LD_INT 4
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 5
58512: NEG
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 5
58524: NEG
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 5
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 5
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 4
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 4
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 4
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 4
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 5
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 5
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 5
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58800: LD_ADDR_VAR 0 32
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 4
58818: NEG
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 5
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 5
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 5
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 3
58921: NEG
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 4
58981: NEG
58982: PUSH
58983: LD_INT 4
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: NEG
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 4
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 5
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 4
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 3
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 4
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 5
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 5
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 4
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 4
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 4
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 4
59212: PUSH
59213: LD_INT 4
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 5
59232: PUSH
59233: LD_INT 4
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: LD_INT 5
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59347: LD_ADDR_VAR 0 33
59351: PUSH
59352: LD_INT 4
59354: NEG
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: NEG
59367: PUSH
59368: LD_INT 5
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 5
59414: NEG
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 5
59426: NEG
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 5
59450: NEG
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 4
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 4
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 4
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 5
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 4
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: PUSH
59688: LD_INT 4
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: LD_INT 4
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 5
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 5
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59885: LD_ADDR_VAR 0 34
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 4
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 5
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 4
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: LD_INT 5
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 5
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 4
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 4
60097: PUSH
60098: LD_INT 3
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 5
60107: PUSH
60108: LD_INT 4
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: LD_INT 5
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: LD_INT 4
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 5
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 4
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: NEG
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 4
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 3
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 5
60326: NEG
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 5
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 5
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: ST_TO_ADDR
// end ; end ;
60417: GO 60420
60419: POP
// case btype of b_depot , b_warehouse :
60420: LD_VAR 0 1
60424: PUSH
60425: LD_INT 0
60427: DOUBLE
60428: EQUAL
60429: IFTRUE 60439
60431: LD_INT 1
60433: DOUBLE
60434: EQUAL
60435: IFTRUE 60439
60437: GO 60640
60439: POP
// case nation of nation_american :
60440: LD_VAR 0 5
60444: PUSH
60445: LD_INT 1
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60509
60453: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60454: LD_ADDR_VAR 0 9
60458: PUSH
60459: LD_VAR 0 11
60463: PUSH
60464: LD_VAR 0 12
60468: PUSH
60469: LD_VAR 0 13
60473: PUSH
60474: LD_VAR 0 14
60478: PUSH
60479: LD_VAR 0 15
60483: PUSH
60484: LD_VAR 0 16
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: PUSH
60497: LD_VAR 0 4
60501: PUSH
60502: LD_INT 1
60504: PLUS
60505: ARRAY
60506: ST_TO_ADDR
60507: GO 60638
60509: LD_INT 2
60511: DOUBLE
60512: EQUAL
60513: IFTRUE 60517
60515: GO 60573
60517: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60518: LD_ADDR_VAR 0 9
60522: PUSH
60523: LD_VAR 0 17
60527: PUSH
60528: LD_VAR 0 18
60532: PUSH
60533: LD_VAR 0 19
60537: PUSH
60538: LD_VAR 0 20
60542: PUSH
60543: LD_VAR 0 21
60547: PUSH
60548: LD_VAR 0 22
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: PUSH
60561: LD_VAR 0 4
60565: PUSH
60566: LD_INT 1
60568: PLUS
60569: ARRAY
60570: ST_TO_ADDR
60571: GO 60638
60573: LD_INT 3
60575: DOUBLE
60576: EQUAL
60577: IFTRUE 60581
60579: GO 60637
60581: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60582: LD_ADDR_VAR 0 9
60586: PUSH
60587: LD_VAR 0 23
60591: PUSH
60592: LD_VAR 0 24
60596: PUSH
60597: LD_VAR 0 25
60601: PUSH
60602: LD_VAR 0 26
60606: PUSH
60607: LD_VAR 0 27
60611: PUSH
60612: LD_VAR 0 28
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: PUSH
60625: LD_VAR 0 4
60629: PUSH
60630: LD_INT 1
60632: PLUS
60633: ARRAY
60634: ST_TO_ADDR
60635: GO 60638
60637: POP
60638: GO 61193
60640: LD_INT 2
60642: DOUBLE
60643: EQUAL
60644: IFTRUE 60654
60646: LD_INT 3
60648: DOUBLE
60649: EQUAL
60650: IFTRUE 60654
60652: GO 60710
60654: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60655: LD_ADDR_VAR 0 9
60659: PUSH
60660: LD_VAR 0 29
60664: PUSH
60665: LD_VAR 0 30
60669: PUSH
60670: LD_VAR 0 31
60674: PUSH
60675: LD_VAR 0 32
60679: PUSH
60680: LD_VAR 0 33
60684: PUSH
60685: LD_VAR 0 34
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: PUSH
60698: LD_VAR 0 4
60702: PUSH
60703: LD_INT 1
60705: PLUS
60706: ARRAY
60707: ST_TO_ADDR
60708: GO 61193
60710: LD_INT 16
60712: DOUBLE
60713: EQUAL
60714: IFTRUE 60772
60716: LD_INT 17
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60772
60722: LD_INT 18
60724: DOUBLE
60725: EQUAL
60726: IFTRUE 60772
60728: LD_INT 19
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60772
60734: LD_INT 22
60736: DOUBLE
60737: EQUAL
60738: IFTRUE 60772
60740: LD_INT 20
60742: DOUBLE
60743: EQUAL
60744: IFTRUE 60772
60746: LD_INT 21
60748: DOUBLE
60749: EQUAL
60750: IFTRUE 60772
60752: LD_INT 23
60754: DOUBLE
60755: EQUAL
60756: IFTRUE 60772
60758: LD_INT 24
60760: DOUBLE
60761: EQUAL
60762: IFTRUE 60772
60764: LD_INT 25
60766: DOUBLE
60767: EQUAL
60768: IFTRUE 60772
60770: GO 60828
60772: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60773: LD_ADDR_VAR 0 9
60777: PUSH
60778: LD_VAR 0 35
60782: PUSH
60783: LD_VAR 0 36
60787: PUSH
60788: LD_VAR 0 37
60792: PUSH
60793: LD_VAR 0 38
60797: PUSH
60798: LD_VAR 0 39
60802: PUSH
60803: LD_VAR 0 40
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: PUSH
60816: LD_VAR 0 4
60820: PUSH
60821: LD_INT 1
60823: PLUS
60824: ARRAY
60825: ST_TO_ADDR
60826: GO 61193
60828: LD_INT 6
60830: DOUBLE
60831: EQUAL
60832: IFTRUE 60884
60834: LD_INT 7
60836: DOUBLE
60837: EQUAL
60838: IFTRUE 60884
60840: LD_INT 8
60842: DOUBLE
60843: EQUAL
60844: IFTRUE 60884
60846: LD_INT 13
60848: DOUBLE
60849: EQUAL
60850: IFTRUE 60884
60852: LD_INT 12
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60884
60858: LD_INT 15
60860: DOUBLE
60861: EQUAL
60862: IFTRUE 60884
60864: LD_INT 11
60866: DOUBLE
60867: EQUAL
60868: IFTRUE 60884
60870: LD_INT 14
60872: DOUBLE
60873: EQUAL
60874: IFTRUE 60884
60876: LD_INT 10
60878: DOUBLE
60879: EQUAL
60880: IFTRUE 60884
60882: GO 60940
60884: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60885: LD_ADDR_VAR 0 9
60889: PUSH
60890: LD_VAR 0 41
60894: PUSH
60895: LD_VAR 0 42
60899: PUSH
60900: LD_VAR 0 43
60904: PUSH
60905: LD_VAR 0 44
60909: PUSH
60910: LD_VAR 0 45
60914: PUSH
60915: LD_VAR 0 46
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: PUSH
60928: LD_VAR 0 4
60932: PUSH
60933: LD_INT 1
60935: PLUS
60936: ARRAY
60937: ST_TO_ADDR
60938: GO 61193
60940: LD_INT 36
60942: DOUBLE
60943: EQUAL
60944: IFTRUE 60948
60946: GO 61004
60948: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60949: LD_ADDR_VAR 0 9
60953: PUSH
60954: LD_VAR 0 47
60958: PUSH
60959: LD_VAR 0 48
60963: PUSH
60964: LD_VAR 0 49
60968: PUSH
60969: LD_VAR 0 50
60973: PUSH
60974: LD_VAR 0 51
60978: PUSH
60979: LD_VAR 0 52
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: LD_VAR 0 4
60996: PUSH
60997: LD_INT 1
60999: PLUS
61000: ARRAY
61001: ST_TO_ADDR
61002: GO 61193
61004: LD_INT 4
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61030
61010: LD_INT 5
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61030
61016: LD_INT 34
61018: DOUBLE
61019: EQUAL
61020: IFTRUE 61030
61022: LD_INT 37
61024: DOUBLE
61025: EQUAL
61026: IFTRUE 61030
61028: GO 61086
61030: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61031: LD_ADDR_VAR 0 9
61035: PUSH
61036: LD_VAR 0 53
61040: PUSH
61041: LD_VAR 0 54
61045: PUSH
61046: LD_VAR 0 55
61050: PUSH
61051: LD_VAR 0 56
61055: PUSH
61056: LD_VAR 0 57
61060: PUSH
61061: LD_VAR 0 58
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: PUSH
61074: LD_VAR 0 4
61078: PUSH
61079: LD_INT 1
61081: PLUS
61082: ARRAY
61083: ST_TO_ADDR
61084: GO 61193
61086: LD_INT 31
61088: DOUBLE
61089: EQUAL
61090: IFTRUE 61136
61092: LD_INT 32
61094: DOUBLE
61095: EQUAL
61096: IFTRUE 61136
61098: LD_INT 33
61100: DOUBLE
61101: EQUAL
61102: IFTRUE 61136
61104: LD_INT 27
61106: DOUBLE
61107: EQUAL
61108: IFTRUE 61136
61110: LD_INT 26
61112: DOUBLE
61113: EQUAL
61114: IFTRUE 61136
61116: LD_INT 28
61118: DOUBLE
61119: EQUAL
61120: IFTRUE 61136
61122: LD_INT 29
61124: DOUBLE
61125: EQUAL
61126: IFTRUE 61136
61128: LD_INT 30
61130: DOUBLE
61131: EQUAL
61132: IFTRUE 61136
61134: GO 61192
61136: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61137: LD_ADDR_VAR 0 9
61141: PUSH
61142: LD_VAR 0 59
61146: PUSH
61147: LD_VAR 0 60
61151: PUSH
61152: LD_VAR 0 61
61156: PUSH
61157: LD_VAR 0 62
61161: PUSH
61162: LD_VAR 0 63
61166: PUSH
61167: LD_VAR 0 64
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: PUSH
61180: LD_VAR 0 4
61184: PUSH
61185: LD_INT 1
61187: PLUS
61188: ARRAY
61189: ST_TO_ADDR
61190: GO 61193
61192: POP
// temp_list2 = [ ] ;
61193: LD_ADDR_VAR 0 10
61197: PUSH
61198: EMPTY
61199: ST_TO_ADDR
// for i in temp_list do
61200: LD_ADDR_VAR 0 8
61204: PUSH
61205: LD_VAR 0 9
61209: PUSH
61210: FOR_IN
61211: IFFALSE 61263
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61213: LD_ADDR_VAR 0 10
61217: PUSH
61218: LD_VAR 0 10
61222: PUSH
61223: LD_VAR 0 8
61227: PUSH
61228: LD_INT 1
61230: ARRAY
61231: PUSH
61232: LD_VAR 0 2
61236: PLUS
61237: PUSH
61238: LD_VAR 0 8
61242: PUSH
61243: LD_INT 2
61245: ARRAY
61246: PUSH
61247: LD_VAR 0 3
61251: PLUS
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: ADD
61260: ST_TO_ADDR
61261: GO 61210
61263: POP
61264: POP
// result = temp_list2 ;
61265: LD_ADDR_VAR 0 7
61269: PUSH
61270: LD_VAR 0 10
61274: ST_TO_ADDR
// end ;
61275: LD_VAR 0 7
61279: RET
// export function EnemyInRange ( unit , dist ) ; begin
61280: LD_INT 0
61282: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61283: LD_ADDR_VAR 0 3
61287: PUSH
61288: LD_VAR 0 1
61292: PPUSH
61293: CALL_OW 255
61297: PPUSH
61298: LD_VAR 0 1
61302: PPUSH
61303: CALL_OW 250
61307: PPUSH
61308: LD_VAR 0 1
61312: PPUSH
61313: CALL_OW 251
61317: PPUSH
61318: LD_VAR 0 2
61322: PPUSH
61323: CALL 34682 0 4
61327: PUSH
61328: LD_INT 4
61330: ARRAY
61331: ST_TO_ADDR
// end ;
61332: LD_VAR 0 3
61336: RET
// export function PlayerSeeMe ( unit ) ; begin
61337: LD_INT 0
61339: PPUSH
// result := See ( your_side , unit ) ;
61340: LD_ADDR_VAR 0 2
61344: PUSH
61345: LD_OWVAR 2
61349: PPUSH
61350: LD_VAR 0 1
61354: PPUSH
61355: CALL_OW 292
61359: ST_TO_ADDR
// end ;
61360: LD_VAR 0 2
61364: RET
// export function ReverseDir ( unit ) ; begin
61365: LD_INT 0
61367: PPUSH
// if not unit then
61368: LD_VAR 0 1
61372: NOT
61373: IFFALSE 61377
// exit ;
61375: GO 61400
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61377: LD_ADDR_VAR 0 2
61381: PUSH
61382: LD_VAR 0 1
61386: PPUSH
61387: CALL_OW 254
61391: PUSH
61392: LD_INT 3
61394: PLUS
61395: PUSH
61396: LD_INT 6
61398: MOD
61399: ST_TO_ADDR
// end ;
61400: LD_VAR 0 2
61404: RET
// export function ReverseArray ( array ) ; var i ; begin
61405: LD_INT 0
61407: PPUSH
61408: PPUSH
// if not array then
61409: LD_VAR 0 1
61413: NOT
61414: IFFALSE 61418
// exit ;
61416: GO 61473
// result := [ ] ;
61418: LD_ADDR_VAR 0 2
61422: PUSH
61423: EMPTY
61424: ST_TO_ADDR
// for i := array downto 1 do
61425: LD_ADDR_VAR 0 3
61429: PUSH
61430: DOUBLE
61431: LD_VAR 0 1
61435: INC
61436: ST_TO_ADDR
61437: LD_INT 1
61439: PUSH
61440: FOR_DOWNTO
61441: IFFALSE 61471
// result := Join ( result , array [ i ] ) ;
61443: LD_ADDR_VAR 0 2
61447: PUSH
61448: LD_VAR 0 2
61452: PPUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_VAR 0 3
61462: ARRAY
61463: PPUSH
61464: CALL 66116 0 2
61468: ST_TO_ADDR
61469: GO 61440
61471: POP
61472: POP
// end ;
61473: LD_VAR 0 2
61477: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61478: LD_INT 0
61480: PPUSH
61481: PPUSH
61482: PPUSH
61483: PPUSH
61484: PPUSH
61485: PPUSH
// if not unit or not hexes then
61486: LD_VAR 0 1
61490: NOT
61491: PUSH
61492: LD_VAR 0 2
61496: NOT
61497: OR
61498: IFFALSE 61502
// exit ;
61500: GO 61625
// dist := 9999 ;
61502: LD_ADDR_VAR 0 5
61506: PUSH
61507: LD_INT 9999
61509: ST_TO_ADDR
// for i = 1 to hexes do
61510: LD_ADDR_VAR 0 4
61514: PUSH
61515: DOUBLE
61516: LD_INT 1
61518: DEC
61519: ST_TO_ADDR
61520: LD_VAR 0 2
61524: PUSH
61525: FOR_TO
61526: IFFALSE 61613
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61528: LD_ADDR_VAR 0 6
61532: PUSH
61533: LD_VAR 0 1
61537: PPUSH
61538: LD_VAR 0 2
61542: PUSH
61543: LD_VAR 0 4
61547: ARRAY
61548: PUSH
61549: LD_INT 1
61551: ARRAY
61552: PPUSH
61553: LD_VAR 0 2
61557: PUSH
61558: LD_VAR 0 4
61562: ARRAY
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: PPUSH
61568: CALL_OW 297
61572: ST_TO_ADDR
// if tdist < dist then
61573: LD_VAR 0 6
61577: PUSH
61578: LD_VAR 0 5
61582: LESS
61583: IFFALSE 61611
// begin hex := hexes [ i ] ;
61585: LD_ADDR_VAR 0 8
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_VAR 0 4
61599: ARRAY
61600: ST_TO_ADDR
// dist := tdist ;
61601: LD_ADDR_VAR 0 5
61605: PUSH
61606: LD_VAR 0 6
61610: ST_TO_ADDR
// end ; end ;
61611: GO 61525
61613: POP
61614: POP
// result := hex ;
61615: LD_ADDR_VAR 0 3
61619: PUSH
61620: LD_VAR 0 8
61624: ST_TO_ADDR
// end ;
61625: LD_VAR 0 3
61629: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61630: LD_INT 0
61632: PPUSH
61633: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61634: LD_VAR 0 1
61638: NOT
61639: PUSH
61640: LD_VAR 0 1
61644: PUSH
61645: LD_INT 21
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 23
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PPUSH
61669: CALL_OW 69
61673: IN
61674: NOT
61675: OR
61676: IFFALSE 61680
// exit ;
61678: GO 61727
// for i = 1 to 3 do
61680: LD_ADDR_VAR 0 3
61684: PUSH
61685: DOUBLE
61686: LD_INT 1
61688: DEC
61689: ST_TO_ADDR
61690: LD_INT 3
61692: PUSH
61693: FOR_TO
61694: IFFALSE 61725
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61696: LD_VAR 0 1
61700: PPUSH
61701: CALL_OW 250
61705: PPUSH
61706: LD_VAR 0 1
61710: PPUSH
61711: CALL_OW 251
61715: PPUSH
61716: LD_INT 1
61718: PPUSH
61719: CALL_OW 453
61723: GO 61693
61725: POP
61726: POP
// end ;
61727: LD_VAR 0 2
61731: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61732: LD_INT 0
61734: PPUSH
61735: PPUSH
61736: PPUSH
61737: PPUSH
61738: PPUSH
61739: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61740: LD_VAR 0 1
61744: NOT
61745: PUSH
61746: LD_VAR 0 2
61750: NOT
61751: OR
61752: PUSH
61753: LD_VAR 0 1
61757: PPUSH
61758: CALL_OW 314
61762: OR
61763: IFFALSE 61767
// exit ;
61765: GO 62234
// if GetLives ( i ) < 250 then
61767: LD_VAR 0 4
61771: PPUSH
61772: CALL_OW 256
61776: PUSH
61777: LD_INT 250
61779: LESS
61780: IFFALSE 61793
// begin ComAutodestruct ( i ) ;
61782: LD_VAR 0 4
61786: PPUSH
61787: CALL 61630 0 1
// exit ;
61791: GO 62234
// end ; x := GetX ( enemy_unit ) ;
61793: LD_ADDR_VAR 0 7
61797: PUSH
61798: LD_VAR 0 2
61802: PPUSH
61803: CALL_OW 250
61807: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61808: LD_ADDR_VAR 0 8
61812: PUSH
61813: LD_VAR 0 2
61817: PPUSH
61818: CALL_OW 251
61822: ST_TO_ADDR
// if not x or not y then
61823: LD_VAR 0 7
61827: NOT
61828: PUSH
61829: LD_VAR 0 8
61833: NOT
61834: OR
61835: IFFALSE 61839
// exit ;
61837: GO 62234
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61839: LD_ADDR_VAR 0 6
61843: PUSH
61844: LD_VAR 0 7
61848: PPUSH
61849: LD_INT 0
61851: PPUSH
61852: LD_INT 4
61854: PPUSH
61855: CALL_OW 272
61859: PUSH
61860: LD_VAR 0 8
61864: PPUSH
61865: LD_INT 0
61867: PPUSH
61868: LD_INT 4
61870: PPUSH
61871: CALL_OW 273
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_VAR 0 7
61884: PPUSH
61885: LD_INT 1
61887: PPUSH
61888: LD_INT 4
61890: PPUSH
61891: CALL_OW 272
61895: PUSH
61896: LD_VAR 0 8
61900: PPUSH
61901: LD_INT 1
61903: PPUSH
61904: LD_INT 4
61906: PPUSH
61907: CALL_OW 273
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 7
61920: PPUSH
61921: LD_INT 2
61923: PPUSH
61924: LD_INT 4
61926: PPUSH
61927: CALL_OW 272
61931: PUSH
61932: LD_VAR 0 8
61936: PPUSH
61937: LD_INT 2
61939: PPUSH
61940: LD_INT 4
61942: PPUSH
61943: CALL_OW 273
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_VAR 0 7
61956: PPUSH
61957: LD_INT 3
61959: PPUSH
61960: LD_INT 4
61962: PPUSH
61963: CALL_OW 272
61967: PUSH
61968: LD_VAR 0 8
61972: PPUSH
61973: LD_INT 3
61975: PPUSH
61976: LD_INT 4
61978: PPUSH
61979: CALL_OW 273
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_VAR 0 7
61992: PPUSH
61993: LD_INT 4
61995: PPUSH
61996: LD_INT 4
61998: PPUSH
61999: CALL_OW 272
62003: PUSH
62004: LD_VAR 0 8
62008: PPUSH
62009: LD_INT 4
62011: PPUSH
62012: LD_INT 4
62014: PPUSH
62015: CALL_OW 273
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 7
62028: PPUSH
62029: LD_INT 5
62031: PPUSH
62032: LD_INT 4
62034: PPUSH
62035: CALL_OW 272
62039: PUSH
62040: LD_VAR 0 8
62044: PPUSH
62045: LD_INT 5
62047: PPUSH
62048: LD_INT 4
62050: PPUSH
62051: CALL_OW 273
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: ST_TO_ADDR
// for i = tmp downto 1 do
62068: LD_ADDR_VAR 0 4
62072: PUSH
62073: DOUBLE
62074: LD_VAR 0 6
62078: INC
62079: ST_TO_ADDR
62080: LD_INT 1
62082: PUSH
62083: FOR_DOWNTO
62084: IFFALSE 62185
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62086: LD_VAR 0 6
62090: PUSH
62091: LD_VAR 0 4
62095: ARRAY
62096: PUSH
62097: LD_INT 1
62099: ARRAY
62100: PPUSH
62101: LD_VAR 0 6
62105: PUSH
62106: LD_VAR 0 4
62110: ARRAY
62111: PUSH
62112: LD_INT 2
62114: ARRAY
62115: PPUSH
62116: CALL_OW 488
62120: NOT
62121: PUSH
62122: LD_VAR 0 6
62126: PUSH
62127: LD_VAR 0 4
62131: ARRAY
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: PPUSH
62137: LD_VAR 0 6
62141: PUSH
62142: LD_VAR 0 4
62146: ARRAY
62147: PUSH
62148: LD_INT 2
62150: ARRAY
62151: PPUSH
62152: CALL_OW 428
62156: PUSH
62157: LD_INT 0
62159: NONEQUAL
62160: OR
62161: IFFALSE 62183
// tmp := Delete ( tmp , i ) ;
62163: LD_ADDR_VAR 0 6
62167: PUSH
62168: LD_VAR 0 6
62172: PPUSH
62173: LD_VAR 0 4
62177: PPUSH
62178: CALL_OW 3
62182: ST_TO_ADDR
62183: GO 62083
62185: POP
62186: POP
// j := GetClosestHex ( unit , tmp ) ;
62187: LD_ADDR_VAR 0 5
62191: PUSH
62192: LD_VAR 0 1
62196: PPUSH
62197: LD_VAR 0 6
62201: PPUSH
62202: CALL 61478 0 2
62206: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62207: LD_VAR 0 1
62211: PPUSH
62212: LD_VAR 0 5
62216: PUSH
62217: LD_INT 1
62219: ARRAY
62220: PPUSH
62221: LD_VAR 0 5
62225: PUSH
62226: LD_INT 2
62228: ARRAY
62229: PPUSH
62230: CALL_OW 111
// end ;
62234: LD_VAR 0 3
62238: RET
// export function PrepareApemanSoldier ( ) ; begin
62239: LD_INT 0
62241: PPUSH
// uc_nation := 0 ;
62242: LD_ADDR_OWVAR 21
62246: PUSH
62247: LD_INT 0
62249: ST_TO_ADDR
// hc_sex := sex_male ;
62250: LD_ADDR_OWVAR 27
62254: PUSH
62255: LD_INT 1
62257: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62258: LD_ADDR_OWVAR 28
62262: PUSH
62263: LD_INT 15
62265: ST_TO_ADDR
// hc_gallery :=  ;
62266: LD_ADDR_OWVAR 33
62270: PUSH
62271: LD_STRING 
62273: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62274: LD_ADDR_OWVAR 31
62278: PUSH
62279: LD_INT 0
62281: PPUSH
62282: LD_INT 3
62284: PPUSH
62285: CALL_OW 12
62289: PUSH
62290: LD_INT 0
62292: PPUSH
62293: LD_INT 3
62295: PPUSH
62296: CALL_OW 12
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: ST_TO_ADDR
// end ;
62313: LD_VAR 0 1
62317: RET
// export function PrepareApemanEngineer ( ) ; begin
62318: LD_INT 0
62320: PPUSH
// uc_nation := 0 ;
62321: LD_ADDR_OWVAR 21
62325: PUSH
62326: LD_INT 0
62328: ST_TO_ADDR
// hc_sex := sex_male ;
62329: LD_ADDR_OWVAR 27
62333: PUSH
62334: LD_INT 1
62336: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62337: LD_ADDR_OWVAR 28
62341: PUSH
62342: LD_INT 16
62344: ST_TO_ADDR
// hc_gallery :=  ;
62345: LD_ADDR_OWVAR 33
62349: PUSH
62350: LD_STRING 
62352: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62353: LD_ADDR_OWVAR 31
62357: PUSH
62358: LD_INT 0
62360: PPUSH
62361: LD_INT 3
62363: PPUSH
62364: CALL_OW 12
62368: PUSH
62369: LD_INT 0
62371: PPUSH
62372: LD_INT 3
62374: PPUSH
62375: CALL_OW 12
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// end ;
62392: LD_VAR 0 1
62396: RET
// export function PrepareApeman ( agressivity ) ; begin
62397: LD_INT 0
62399: PPUSH
// uc_side := 0 ;
62400: LD_ADDR_OWVAR 20
62404: PUSH
62405: LD_INT 0
62407: ST_TO_ADDR
// uc_nation := 0 ;
62408: LD_ADDR_OWVAR 21
62412: PUSH
62413: LD_INT 0
62415: ST_TO_ADDR
// hc_sex := sex_male ;
62416: LD_ADDR_OWVAR 27
62420: PUSH
62421: LD_INT 1
62423: ST_TO_ADDR
// hc_class := class_apeman ;
62424: LD_ADDR_OWVAR 28
62428: PUSH
62429: LD_INT 12
62431: ST_TO_ADDR
// hc_gallery :=  ;
62432: LD_ADDR_OWVAR 33
62436: PUSH
62437: LD_STRING 
62439: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62440: LD_ADDR_OWVAR 35
62444: PUSH
62445: LD_VAR 0 1
62449: NEG
62450: PPUSH
62451: LD_VAR 0 1
62455: PPUSH
62456: CALL_OW 12
62460: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62461: LD_ADDR_OWVAR 31
62465: PUSH
62466: LD_INT 0
62468: PPUSH
62469: LD_INT 3
62471: PPUSH
62472: CALL_OW 12
62476: PUSH
62477: LD_INT 0
62479: PPUSH
62480: LD_INT 3
62482: PPUSH
62483: CALL_OW 12
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: ST_TO_ADDR
// end ;
62500: LD_VAR 0 2
62504: RET
// export function PrepareTiger ( agressivity ) ; begin
62505: LD_INT 0
62507: PPUSH
// uc_side := 0 ;
62508: LD_ADDR_OWVAR 20
62512: PUSH
62513: LD_INT 0
62515: ST_TO_ADDR
// uc_nation := 0 ;
62516: LD_ADDR_OWVAR 21
62520: PUSH
62521: LD_INT 0
62523: ST_TO_ADDR
// hc_class := class_tiger ;
62524: LD_ADDR_OWVAR 28
62528: PUSH
62529: LD_INT 14
62531: ST_TO_ADDR
// hc_gallery :=  ;
62532: LD_ADDR_OWVAR 33
62536: PUSH
62537: LD_STRING 
62539: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62540: LD_ADDR_OWVAR 35
62544: PUSH
62545: LD_VAR 0 1
62549: NEG
62550: PPUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 12
62560: ST_TO_ADDR
// end ;
62561: LD_VAR 0 2
62565: RET
// export function PrepareEnchidna ( ) ; begin
62566: LD_INT 0
62568: PPUSH
// uc_side := 0 ;
62569: LD_ADDR_OWVAR 20
62573: PUSH
62574: LD_INT 0
62576: ST_TO_ADDR
// uc_nation := 0 ;
62577: LD_ADDR_OWVAR 21
62581: PUSH
62582: LD_INT 0
62584: ST_TO_ADDR
// hc_class := class_baggie ;
62585: LD_ADDR_OWVAR 28
62589: PUSH
62590: LD_INT 13
62592: ST_TO_ADDR
// hc_gallery :=  ;
62593: LD_ADDR_OWVAR 33
62597: PUSH
62598: LD_STRING 
62600: ST_TO_ADDR
// end ;
62601: LD_VAR 0 1
62605: RET
// export function PrepareFrog ( ) ; begin
62606: LD_INT 0
62608: PPUSH
// uc_side := 0 ;
62609: LD_ADDR_OWVAR 20
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// uc_nation := 0 ;
62617: LD_ADDR_OWVAR 21
62621: PUSH
62622: LD_INT 0
62624: ST_TO_ADDR
// hc_class := class_frog ;
62625: LD_ADDR_OWVAR 28
62629: PUSH
62630: LD_INT 19
62632: ST_TO_ADDR
// hc_gallery :=  ;
62633: LD_ADDR_OWVAR 33
62637: PUSH
62638: LD_STRING 
62640: ST_TO_ADDR
// end ;
62641: LD_VAR 0 1
62645: RET
// export function PrepareFish ( ) ; begin
62646: LD_INT 0
62648: PPUSH
// uc_side := 0 ;
62649: LD_ADDR_OWVAR 20
62653: PUSH
62654: LD_INT 0
62656: ST_TO_ADDR
// uc_nation := 0 ;
62657: LD_ADDR_OWVAR 21
62661: PUSH
62662: LD_INT 0
62664: ST_TO_ADDR
// hc_class := class_fish ;
62665: LD_ADDR_OWVAR 28
62669: PUSH
62670: LD_INT 20
62672: ST_TO_ADDR
// hc_gallery :=  ;
62673: LD_ADDR_OWVAR 33
62677: PUSH
62678: LD_STRING 
62680: ST_TO_ADDR
// end ;
62681: LD_VAR 0 1
62685: RET
// export function PrepareBird ( ) ; begin
62686: LD_INT 0
62688: PPUSH
// uc_side := 0 ;
62689: LD_ADDR_OWVAR 20
62693: PUSH
62694: LD_INT 0
62696: ST_TO_ADDR
// uc_nation := 0 ;
62697: LD_ADDR_OWVAR 21
62701: PUSH
62702: LD_INT 0
62704: ST_TO_ADDR
// hc_class := class_phororhacos ;
62705: LD_ADDR_OWVAR 28
62709: PUSH
62710: LD_INT 18
62712: ST_TO_ADDR
// hc_gallery :=  ;
62713: LD_ADDR_OWVAR 33
62717: PUSH
62718: LD_STRING 
62720: ST_TO_ADDR
// end ;
62721: LD_VAR 0 1
62725: RET
// export function PrepareHorse ( ) ; begin
62726: LD_INT 0
62728: PPUSH
// uc_side := 0 ;
62729: LD_ADDR_OWVAR 20
62733: PUSH
62734: LD_INT 0
62736: ST_TO_ADDR
// uc_nation := 0 ;
62737: LD_ADDR_OWVAR 21
62741: PUSH
62742: LD_INT 0
62744: ST_TO_ADDR
// hc_class := class_horse ;
62745: LD_ADDR_OWVAR 28
62749: PUSH
62750: LD_INT 21
62752: ST_TO_ADDR
// hc_gallery :=  ;
62753: LD_ADDR_OWVAR 33
62757: PUSH
62758: LD_STRING 
62760: ST_TO_ADDR
// end ;
62761: LD_VAR 0 1
62765: RET
// export function PrepareMastodont ( ) ; begin
62766: LD_INT 0
62768: PPUSH
// uc_side := 0 ;
62769: LD_ADDR_OWVAR 20
62773: PUSH
62774: LD_INT 0
62776: ST_TO_ADDR
// uc_nation := 0 ;
62777: LD_ADDR_OWVAR 21
62781: PUSH
62782: LD_INT 0
62784: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62785: LD_ADDR_OWVAR 37
62789: PUSH
62790: LD_INT 31
62792: ST_TO_ADDR
// vc_control := control_rider ;
62793: LD_ADDR_OWVAR 38
62797: PUSH
62798: LD_INT 4
62800: ST_TO_ADDR
// end ;
62801: LD_VAR 0 1
62805: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62806: LD_INT 0
62808: PPUSH
62809: PPUSH
62810: PPUSH
// uc_side = 0 ;
62811: LD_ADDR_OWVAR 20
62815: PUSH
62816: LD_INT 0
62818: ST_TO_ADDR
// uc_nation = 0 ;
62819: LD_ADDR_OWVAR 21
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// InitHc_All ( ) ;
62827: CALL_OW 584
// InitVc ;
62831: CALL_OW 20
// if mastodonts then
62835: LD_VAR 0 6
62839: IFFALSE 62906
// for i = 1 to mastodonts do
62841: LD_ADDR_VAR 0 11
62845: PUSH
62846: DOUBLE
62847: LD_INT 1
62849: DEC
62850: ST_TO_ADDR
62851: LD_VAR 0 6
62855: PUSH
62856: FOR_TO
62857: IFFALSE 62904
// begin vc_chassis := 31 ;
62859: LD_ADDR_OWVAR 37
62863: PUSH
62864: LD_INT 31
62866: ST_TO_ADDR
// vc_control := control_rider ;
62867: LD_ADDR_OWVAR 38
62871: PUSH
62872: LD_INT 4
62874: ST_TO_ADDR
// animal := CreateVehicle ;
62875: LD_ADDR_VAR 0 12
62879: PUSH
62880: CALL_OW 45
62884: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62885: LD_VAR 0 12
62889: PPUSH
62890: LD_VAR 0 8
62894: PPUSH
62895: LD_INT 0
62897: PPUSH
62898: CALL 65034 0 3
// end ;
62902: GO 62856
62904: POP
62905: POP
// if horses then
62906: LD_VAR 0 5
62910: IFFALSE 62977
// for i = 1 to horses do
62912: LD_ADDR_VAR 0 11
62916: PUSH
62917: DOUBLE
62918: LD_INT 1
62920: DEC
62921: ST_TO_ADDR
62922: LD_VAR 0 5
62926: PUSH
62927: FOR_TO
62928: IFFALSE 62975
// begin hc_class := 21 ;
62930: LD_ADDR_OWVAR 28
62934: PUSH
62935: LD_INT 21
62937: ST_TO_ADDR
// hc_gallery :=  ;
62938: LD_ADDR_OWVAR 33
62942: PUSH
62943: LD_STRING 
62945: ST_TO_ADDR
// animal := CreateHuman ;
62946: LD_ADDR_VAR 0 12
62950: PUSH
62951: CALL_OW 44
62955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62956: LD_VAR 0 12
62960: PPUSH
62961: LD_VAR 0 8
62965: PPUSH
62966: LD_INT 0
62968: PPUSH
62969: CALL 65034 0 3
// end ;
62973: GO 62927
62975: POP
62976: POP
// if birds then
62977: LD_VAR 0 1
62981: IFFALSE 63048
// for i = 1 to birds do
62983: LD_ADDR_VAR 0 11
62987: PUSH
62988: DOUBLE
62989: LD_INT 1
62991: DEC
62992: ST_TO_ADDR
62993: LD_VAR 0 1
62997: PUSH
62998: FOR_TO
62999: IFFALSE 63046
// begin hc_class = 18 ;
63001: LD_ADDR_OWVAR 28
63005: PUSH
63006: LD_INT 18
63008: ST_TO_ADDR
// hc_gallery =  ;
63009: LD_ADDR_OWVAR 33
63013: PUSH
63014: LD_STRING 
63016: ST_TO_ADDR
// animal := CreateHuman ;
63017: LD_ADDR_VAR 0 12
63021: PUSH
63022: CALL_OW 44
63026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63027: LD_VAR 0 12
63031: PPUSH
63032: LD_VAR 0 8
63036: PPUSH
63037: LD_INT 0
63039: PPUSH
63040: CALL 65034 0 3
// end ;
63044: GO 62998
63046: POP
63047: POP
// if tigers then
63048: LD_VAR 0 2
63052: IFFALSE 63136
// for i = 1 to tigers do
63054: LD_ADDR_VAR 0 11
63058: PUSH
63059: DOUBLE
63060: LD_INT 1
63062: DEC
63063: ST_TO_ADDR
63064: LD_VAR 0 2
63068: PUSH
63069: FOR_TO
63070: IFFALSE 63134
// begin hc_class = class_tiger ;
63072: LD_ADDR_OWVAR 28
63076: PUSH
63077: LD_INT 14
63079: ST_TO_ADDR
// hc_gallery =  ;
63080: LD_ADDR_OWVAR 33
63084: PUSH
63085: LD_STRING 
63087: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63088: LD_ADDR_OWVAR 35
63092: PUSH
63093: LD_INT 7
63095: NEG
63096: PPUSH
63097: LD_INT 7
63099: PPUSH
63100: CALL_OW 12
63104: ST_TO_ADDR
// animal := CreateHuman ;
63105: LD_ADDR_VAR 0 12
63109: PUSH
63110: CALL_OW 44
63114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63115: LD_VAR 0 12
63119: PPUSH
63120: LD_VAR 0 8
63124: PPUSH
63125: LD_INT 0
63127: PPUSH
63128: CALL 65034 0 3
// end ;
63132: GO 63069
63134: POP
63135: POP
// if apemans then
63136: LD_VAR 0 3
63140: IFFALSE 63263
// for i = 1 to apemans do
63142: LD_ADDR_VAR 0 11
63146: PUSH
63147: DOUBLE
63148: LD_INT 1
63150: DEC
63151: ST_TO_ADDR
63152: LD_VAR 0 3
63156: PUSH
63157: FOR_TO
63158: IFFALSE 63261
// begin hc_class = class_apeman ;
63160: LD_ADDR_OWVAR 28
63164: PUSH
63165: LD_INT 12
63167: ST_TO_ADDR
// hc_gallery =  ;
63168: LD_ADDR_OWVAR 33
63172: PUSH
63173: LD_STRING 
63175: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63176: LD_ADDR_OWVAR 35
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PPUSH
63185: LD_INT 2
63187: PPUSH
63188: CALL_OW 12
63192: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63193: LD_ADDR_OWVAR 31
63197: PUSH
63198: LD_INT 1
63200: PPUSH
63201: LD_INT 3
63203: PPUSH
63204: CALL_OW 12
63208: PUSH
63209: LD_INT 1
63211: PPUSH
63212: LD_INT 3
63214: PPUSH
63215: CALL_OW 12
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: ST_TO_ADDR
// animal := CreateHuman ;
63232: LD_ADDR_VAR 0 12
63236: PUSH
63237: CALL_OW 44
63241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63242: LD_VAR 0 12
63246: PPUSH
63247: LD_VAR 0 8
63251: PPUSH
63252: LD_INT 0
63254: PPUSH
63255: CALL 65034 0 3
// end ;
63259: GO 63157
63261: POP
63262: POP
// if enchidnas then
63263: LD_VAR 0 4
63267: IFFALSE 63334
// for i = 1 to enchidnas do
63269: LD_ADDR_VAR 0 11
63273: PUSH
63274: DOUBLE
63275: LD_INT 1
63277: DEC
63278: ST_TO_ADDR
63279: LD_VAR 0 4
63283: PUSH
63284: FOR_TO
63285: IFFALSE 63332
// begin hc_class = 13 ;
63287: LD_ADDR_OWVAR 28
63291: PUSH
63292: LD_INT 13
63294: ST_TO_ADDR
// hc_gallery =  ;
63295: LD_ADDR_OWVAR 33
63299: PUSH
63300: LD_STRING 
63302: ST_TO_ADDR
// animal := CreateHuman ;
63303: LD_ADDR_VAR 0 12
63307: PUSH
63308: CALL_OW 44
63312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63313: LD_VAR 0 12
63317: PPUSH
63318: LD_VAR 0 8
63322: PPUSH
63323: LD_INT 0
63325: PPUSH
63326: CALL 65034 0 3
// end ;
63330: GO 63284
63332: POP
63333: POP
// if fishes then
63334: LD_VAR 0 7
63338: IFFALSE 63405
// for i = 1 to fishes do
63340: LD_ADDR_VAR 0 11
63344: PUSH
63345: DOUBLE
63346: LD_INT 1
63348: DEC
63349: ST_TO_ADDR
63350: LD_VAR 0 7
63354: PUSH
63355: FOR_TO
63356: IFFALSE 63403
// begin hc_class = 20 ;
63358: LD_ADDR_OWVAR 28
63362: PUSH
63363: LD_INT 20
63365: ST_TO_ADDR
// hc_gallery =  ;
63366: LD_ADDR_OWVAR 33
63370: PUSH
63371: LD_STRING 
63373: ST_TO_ADDR
// animal := CreateHuman ;
63374: LD_ADDR_VAR 0 12
63378: PUSH
63379: CALL_OW 44
63383: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63384: LD_VAR 0 12
63388: PPUSH
63389: LD_VAR 0 9
63393: PPUSH
63394: LD_INT 0
63396: PPUSH
63397: CALL 65034 0 3
// end ;
63401: GO 63355
63403: POP
63404: POP
// end ;
63405: LD_VAR 0 10
63409: RET
// export function WantHeal ( sci , unit ) ; begin
63410: LD_INT 0
63412: PPUSH
// if GetTaskList ( sci ) > 0 then
63413: LD_VAR 0 1
63417: PPUSH
63418: CALL_OW 437
63422: PUSH
63423: LD_INT 0
63425: GREATER
63426: IFFALSE 63496
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63428: LD_VAR 0 1
63432: PPUSH
63433: CALL_OW 437
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: PUSH
63446: LD_STRING l
63448: EQUAL
63449: PUSH
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 437
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PUSH
63464: LD_INT 4
63466: ARRAY
63467: PUSH
63468: LD_VAR 0 2
63472: EQUAL
63473: AND
63474: IFFALSE 63486
// result := true else
63476: LD_ADDR_VAR 0 3
63480: PUSH
63481: LD_INT 1
63483: ST_TO_ADDR
63484: GO 63494
// result := false ;
63486: LD_ADDR_VAR 0 3
63490: PUSH
63491: LD_INT 0
63493: ST_TO_ADDR
// end else
63494: GO 63504
// result := false ;
63496: LD_ADDR_VAR 0 3
63500: PUSH
63501: LD_INT 0
63503: ST_TO_ADDR
// end ;
63504: LD_VAR 0 3
63508: RET
// export function HealTarget ( sci ) ; begin
63509: LD_INT 0
63511: PPUSH
// if not sci then
63512: LD_VAR 0 1
63516: NOT
63517: IFFALSE 63521
// exit ;
63519: GO 63586
// result := 0 ;
63521: LD_ADDR_VAR 0 2
63525: PUSH
63526: LD_INT 0
63528: ST_TO_ADDR
// if GetTaskList ( sci ) then
63529: LD_VAR 0 1
63533: PPUSH
63534: CALL_OW 437
63538: IFFALSE 63586
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63540: LD_VAR 0 1
63544: PPUSH
63545: CALL_OW 437
63549: PUSH
63550: LD_INT 1
63552: ARRAY
63553: PUSH
63554: LD_INT 1
63556: ARRAY
63557: PUSH
63558: LD_STRING l
63560: EQUAL
63561: IFFALSE 63586
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63563: LD_ADDR_VAR 0 2
63567: PUSH
63568: LD_VAR 0 1
63572: PPUSH
63573: CALL_OW 437
63577: PUSH
63578: LD_INT 1
63580: ARRAY
63581: PUSH
63582: LD_INT 4
63584: ARRAY
63585: ST_TO_ADDR
// end ;
63586: LD_VAR 0 2
63590: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
// if not base_units then
63597: LD_VAR 0 1
63601: NOT
63602: IFFALSE 63606
// exit ;
63604: GO 63693
// result := false ;
63606: LD_ADDR_VAR 0 2
63610: PUSH
63611: LD_INT 0
63613: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63614: LD_ADDR_VAR 0 5
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: LD_INT 21
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PPUSH
63634: CALL_OW 72
63638: ST_TO_ADDR
// if not tmp then
63639: LD_VAR 0 5
63643: NOT
63644: IFFALSE 63648
// exit ;
63646: GO 63693
// for i in tmp do
63648: LD_ADDR_VAR 0 3
63652: PUSH
63653: LD_VAR 0 5
63657: PUSH
63658: FOR_IN
63659: IFFALSE 63691
// begin result := EnemyInRange ( i , 22 ) ;
63661: LD_ADDR_VAR 0 2
63665: PUSH
63666: LD_VAR 0 3
63670: PPUSH
63671: LD_INT 22
63673: PPUSH
63674: CALL 61280 0 2
63678: ST_TO_ADDR
// if result then
63679: LD_VAR 0 2
63683: IFFALSE 63689
// exit ;
63685: POP
63686: POP
63687: GO 63693
// end ;
63689: GO 63658
63691: POP
63692: POP
// end ;
63693: LD_VAR 0 2
63697: RET
// export function FilterByTag ( units , tag ) ; begin
63698: LD_INT 0
63700: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63701: LD_ADDR_VAR 0 3
63705: PUSH
63706: LD_VAR 0 1
63710: PPUSH
63711: LD_INT 120
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PPUSH
63723: CALL_OW 72
63727: ST_TO_ADDR
// end ;
63728: LD_VAR 0 3
63732: RET
// export function IsDriver ( un ) ; begin
63733: LD_INT 0
63735: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63736: LD_ADDR_VAR 0 2
63740: PUSH
63741: LD_VAR 0 1
63745: PUSH
63746: LD_INT 55
63748: PUSH
63749: EMPTY
63750: LIST
63751: PPUSH
63752: CALL_OW 69
63756: IN
63757: ST_TO_ADDR
// end ;
63758: LD_VAR 0 2
63762: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63763: LD_INT 0
63765: PPUSH
63766: PPUSH
// list := [ ] ;
63767: LD_ADDR_VAR 0 5
63771: PUSH
63772: EMPTY
63773: ST_TO_ADDR
// case d of 0 :
63774: LD_VAR 0 3
63778: PUSH
63779: LD_INT 0
63781: DOUBLE
63782: EQUAL
63783: IFTRUE 63787
63785: GO 63920
63787: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63788: LD_ADDR_VAR 0 5
63792: PUSH
63793: LD_VAR 0 1
63797: PUSH
63798: LD_INT 4
63800: MINUS
63801: PUSH
63802: LD_VAR 0 2
63806: PUSH
63807: LD_INT 4
63809: MINUS
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: PUSH
63819: LD_VAR 0 1
63823: PUSH
63824: LD_INT 3
63826: MINUS
63827: PUSH
63828: LD_VAR 0 2
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: LIST
63840: PUSH
63841: LD_VAR 0 1
63845: PUSH
63846: LD_INT 4
63848: PLUS
63849: PUSH
63850: LD_VAR 0 2
63854: PUSH
63855: LD_INT 4
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: PUSH
63863: LD_VAR 0 1
63867: PUSH
63868: LD_INT 3
63870: PLUS
63871: PUSH
63872: LD_VAR 0 2
63876: PUSH
63877: LD_INT 3
63879: PLUS
63880: PUSH
63881: LD_INT 5
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: LIST
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_VAR 0 2
63898: PUSH
63899: LD_INT 4
63901: PLUS
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// end ; 1 :
63918: GO 64618
63920: LD_INT 1
63922: DOUBLE
63923: EQUAL
63924: IFTRUE 63928
63926: GO 64061
63928: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63929: LD_ADDR_VAR 0 5
63933: PUSH
63934: LD_VAR 0 1
63938: PUSH
63939: LD_VAR 0 2
63943: PUSH
63944: LD_INT 4
63946: MINUS
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: PUSH
63956: LD_VAR 0 1
63960: PUSH
63961: LD_INT 3
63963: MINUS
63964: PUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_INT 3
63972: MINUS
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: LIST
63981: PUSH
63982: LD_VAR 0 1
63986: PUSH
63987: LD_INT 4
63989: MINUS
63990: PUSH
63991: LD_VAR 0 2
63995: PUSH
63996: LD_INT 1
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: LIST
64003: PUSH
64004: LD_VAR 0 1
64008: PUSH
64009: LD_VAR 0 2
64013: PUSH
64014: LD_INT 3
64016: PLUS
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: PUSH
64026: LD_VAR 0 1
64030: PUSH
64031: LD_INT 4
64033: PLUS
64034: PUSH
64035: LD_VAR 0 2
64039: PUSH
64040: LD_INT 4
64042: PLUS
64043: PUSH
64044: LD_INT 5
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: ST_TO_ADDR
// end ; 2 :
64059: GO 64618
64061: LD_INT 2
64063: DOUBLE
64064: EQUAL
64065: IFTRUE 64069
64067: GO 64198
64069: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64070: LD_ADDR_VAR 0 5
64074: PUSH
64075: LD_VAR 0 1
64079: PUSH
64080: LD_VAR 0 2
64084: PUSH
64085: LD_INT 3
64087: MINUS
64088: PUSH
64089: LD_INT 3
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: PUSH
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 4
64104: PLUS
64105: PUSH
64106: LD_VAR 0 2
64110: PUSH
64111: LD_INT 4
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 1
64123: PUSH
64124: LD_VAR 0 2
64128: PUSH
64129: LD_INT 4
64131: PLUS
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: PUSH
64141: LD_VAR 0 1
64145: PUSH
64146: LD_INT 3
64148: MINUS
64149: PUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: PUSH
64163: LD_VAR 0 1
64167: PUSH
64168: LD_INT 4
64170: MINUS
64171: PUSH
64172: LD_VAR 0 2
64176: PUSH
64177: LD_INT 4
64179: MINUS
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: ST_TO_ADDR
// end ; 3 :
64196: GO 64618
64198: LD_INT 3
64200: DOUBLE
64201: EQUAL
64202: IFTRUE 64206
64204: GO 64339
64206: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64207: LD_ADDR_VAR 0 5
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: LD_INT 3
64219: PLUS
64220: PUSH
64221: LD_VAR 0 2
64225: PUSH
64226: LD_INT 4
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: LIST
64233: PUSH
64234: LD_VAR 0 1
64238: PUSH
64239: LD_INT 4
64241: PLUS
64242: PUSH
64243: LD_VAR 0 2
64247: PUSH
64248: LD_INT 4
64250: PLUS
64251: PUSH
64252: LD_INT 5
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 4
64267: MINUS
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: PUSH
64282: LD_VAR 0 1
64286: PUSH
64287: LD_VAR 0 2
64291: PUSH
64292: LD_INT 4
64294: MINUS
64295: PUSH
64296: LD_INT 3
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_INT 3
64311: MINUS
64312: PUSH
64313: LD_VAR 0 2
64317: PUSH
64318: LD_INT 3
64320: MINUS
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: ST_TO_ADDR
// end ; 4 :
64337: GO 64618
64339: LD_INT 4
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64480
64347: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64348: LD_ADDR_VAR 0 5
64352: PUSH
64353: LD_VAR 0 1
64357: PUSH
64358: LD_VAR 0 2
64362: PUSH
64363: LD_INT 4
64365: PLUS
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_INT 3
64382: PLUS
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_INT 3
64391: PLUS
64392: PUSH
64393: LD_INT 5
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: PUSH
64401: LD_VAR 0 1
64405: PUSH
64406: LD_INT 4
64408: PLUS
64409: PUSH
64410: LD_VAR 0 2
64414: PUSH
64415: LD_INT 4
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: PUSH
64423: LD_VAR 0 1
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 3
64435: MINUS
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: LD_VAR 0 1
64449: PUSH
64450: LD_INT 4
64452: MINUS
64453: PUSH
64454: LD_VAR 0 2
64458: PUSH
64459: LD_INT 4
64461: MINUS
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: ST_TO_ADDR
// end ; 5 :
64478: GO 64618
64480: LD_INT 5
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64488
64486: GO 64617
64488: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64489: LD_ADDR_VAR 0 5
64493: PUSH
64494: LD_VAR 0 1
64498: PUSH
64499: LD_INT 4
64501: MINUS
64502: PUSH
64503: LD_VAR 0 2
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: PUSH
64516: LD_VAR 0 1
64520: PUSH
64521: LD_VAR 0 2
64525: PUSH
64526: LD_INT 4
64528: MINUS
64529: PUSH
64530: LD_INT 3
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_INT 4
64545: PLUS
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 4
64554: PLUS
64555: PUSH
64556: LD_INT 5
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: LIST
64563: PUSH
64564: LD_VAR 0 1
64568: PUSH
64569: LD_INT 3
64571: PLUS
64572: PUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: PUSH
64586: LD_VAR 0 1
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 3
64598: PLUS
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: ST_TO_ADDR
// end ; end ;
64615: GO 64618
64617: POP
// result := list ;
64618: LD_ADDR_VAR 0 4
64622: PUSH
64623: LD_VAR 0 5
64627: ST_TO_ADDR
// end ;
64628: LD_VAR 0 4
64632: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64633: LD_INT 0
64635: PPUSH
64636: PPUSH
64637: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64638: LD_VAR 0 1
64642: NOT
64643: PUSH
64644: LD_VAR 0 2
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: LD_INT 4
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: IN
64667: NOT
64668: OR
64669: IFFALSE 64673
// exit ;
64671: GO 64756
// tmp := [ ] ;
64673: LD_ADDR_VAR 0 5
64677: PUSH
64678: EMPTY
64679: ST_TO_ADDR
// for i in units do
64680: LD_ADDR_VAR 0 4
64684: PUSH
64685: LD_VAR 0 1
64689: PUSH
64690: FOR_IN
64691: IFFALSE 64725
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64693: LD_ADDR_VAR 0 5
64697: PUSH
64698: LD_VAR 0 5
64702: PPUSH
64703: LD_VAR 0 4
64707: PPUSH
64708: LD_VAR 0 2
64712: PPUSH
64713: CALL_OW 259
64717: PPUSH
64718: CALL 66116 0 2
64722: ST_TO_ADDR
64723: GO 64690
64725: POP
64726: POP
// if not tmp then
64727: LD_VAR 0 5
64731: NOT
64732: IFFALSE 64736
// exit ;
64734: GO 64756
// result := SortListByListDesc ( units , tmp ) ;
64736: LD_ADDR_VAR 0 3
64740: PUSH
64741: LD_VAR 0 1
64745: PPUSH
64746: LD_VAR 0 5
64750: PPUSH
64751: CALL_OW 77
64755: ST_TO_ADDR
// end ;
64756: LD_VAR 0 3
64760: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64761: LD_INT 0
64763: PPUSH
64764: PPUSH
64765: PPUSH
// result := false ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: LD_INT 0
64773: ST_TO_ADDR
// if not building then
64774: LD_VAR 0 2
64778: NOT
64779: IFFALSE 64783
// exit ;
64781: GO 64921
// x := GetX ( building ) ;
64783: LD_ADDR_VAR 0 4
64787: PUSH
64788: LD_VAR 0 2
64792: PPUSH
64793: CALL_OW 250
64797: ST_TO_ADDR
// y := GetY ( building ) ;
64798: LD_ADDR_VAR 0 5
64802: PUSH
64803: LD_VAR 0 2
64807: PPUSH
64808: CALL_OW 251
64812: ST_TO_ADDR
// if not x or not y then
64813: LD_VAR 0 4
64817: NOT
64818: PUSH
64819: LD_VAR 0 5
64823: NOT
64824: OR
64825: IFFALSE 64829
// exit ;
64827: GO 64921
// if GetTaskList ( unit ) then
64829: LD_VAR 0 1
64833: PPUSH
64834: CALL_OW 437
64838: IFFALSE 64921
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64840: LD_STRING e
64842: PUSH
64843: LD_VAR 0 1
64847: PPUSH
64848: CALL_OW 437
64852: PUSH
64853: LD_INT 1
64855: ARRAY
64856: PUSH
64857: LD_INT 1
64859: ARRAY
64860: EQUAL
64861: PUSH
64862: LD_VAR 0 4
64866: PUSH
64867: LD_VAR 0 1
64871: PPUSH
64872: CALL_OW 437
64876: PUSH
64877: LD_INT 1
64879: ARRAY
64880: PUSH
64881: LD_INT 2
64883: ARRAY
64884: EQUAL
64885: AND
64886: PUSH
64887: LD_VAR 0 5
64891: PUSH
64892: LD_VAR 0 1
64896: PPUSH
64897: CALL_OW 437
64901: PUSH
64902: LD_INT 1
64904: ARRAY
64905: PUSH
64906: LD_INT 3
64908: ARRAY
64909: EQUAL
64910: AND
64911: IFFALSE 64921
// result := true end ;
64913: LD_ADDR_VAR 0 3
64917: PUSH
64918: LD_INT 1
64920: ST_TO_ADDR
// end ;
64921: LD_VAR 0 3
64925: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64926: LD_INT 0
64928: PPUSH
// result := false ;
64929: LD_ADDR_VAR 0 4
64933: PUSH
64934: LD_INT 0
64936: ST_TO_ADDR
// if GetTaskList ( unit ) then
64937: LD_VAR 0 1
64941: PPUSH
64942: CALL_OW 437
64946: IFFALSE 65029
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64948: LD_STRING M
64950: PUSH
64951: LD_VAR 0 1
64955: PPUSH
64956: CALL_OW 437
64960: PUSH
64961: LD_INT 1
64963: ARRAY
64964: PUSH
64965: LD_INT 1
64967: ARRAY
64968: EQUAL
64969: PUSH
64970: LD_VAR 0 2
64974: PUSH
64975: LD_VAR 0 1
64979: PPUSH
64980: CALL_OW 437
64984: PUSH
64985: LD_INT 1
64987: ARRAY
64988: PUSH
64989: LD_INT 2
64991: ARRAY
64992: EQUAL
64993: AND
64994: PUSH
64995: LD_VAR 0 3
64999: PUSH
65000: LD_VAR 0 1
65004: PPUSH
65005: CALL_OW 437
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PUSH
65014: LD_INT 3
65016: ARRAY
65017: EQUAL
65018: AND
65019: IFFALSE 65029
// result := true ;
65021: LD_ADDR_VAR 0 4
65025: PUSH
65026: LD_INT 1
65028: ST_TO_ADDR
// end ; end ;
65029: LD_VAR 0 4
65033: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65034: LD_INT 0
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
// if not unit or not area then
65040: LD_VAR 0 1
65044: NOT
65045: PUSH
65046: LD_VAR 0 2
65050: NOT
65051: OR
65052: IFFALSE 65056
// exit ;
65054: GO 65219
// tmp := AreaToList ( area , i ) ;
65056: LD_ADDR_VAR 0 6
65060: PUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: LD_VAR 0 5
65070: PPUSH
65071: CALL_OW 517
65075: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65076: LD_ADDR_VAR 0 5
65080: PUSH
65081: DOUBLE
65082: LD_INT 1
65084: DEC
65085: ST_TO_ADDR
65086: LD_VAR 0 6
65090: PUSH
65091: LD_INT 1
65093: ARRAY
65094: PUSH
65095: FOR_TO
65096: IFFALSE 65217
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65098: LD_ADDR_VAR 0 7
65102: PUSH
65103: LD_VAR 0 6
65107: PUSH
65108: LD_INT 1
65110: ARRAY
65111: PUSH
65112: LD_VAR 0 5
65116: ARRAY
65117: PUSH
65118: LD_VAR 0 6
65122: PUSH
65123: LD_INT 2
65125: ARRAY
65126: PUSH
65127: LD_VAR 0 5
65131: ARRAY
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65137: LD_INT 92
65139: PUSH
65140: LD_VAR 0 7
65144: PUSH
65145: LD_INT 1
65147: ARRAY
65148: PUSH
65149: LD_VAR 0 7
65153: PUSH
65154: LD_INT 2
65156: ARRAY
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: PPUSH
65167: CALL_OW 69
65171: PUSH
65172: LD_INT 0
65174: EQUAL
65175: IFFALSE 65215
// begin PlaceUnitArea ( unit , area , mode ) ;
65177: LD_VAR 0 1
65181: PPUSH
65182: LD_VAR 0 2
65186: PPUSH
65187: LD_VAR 0 3
65191: PPUSH
65192: CALL_OW 49
// result := IsPlaced ( unit ) ;
65196: LD_ADDR_VAR 0 4
65200: PUSH
65201: LD_VAR 0 1
65205: PPUSH
65206: CALL_OW 305
65210: ST_TO_ADDR
// exit ;
65211: POP
65212: POP
65213: GO 65219
// end ; end ;
65215: GO 65095
65217: POP
65218: POP
// end ;
65219: LD_VAR 0 4
65223: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65224: LD_INT 0
65226: PPUSH
65227: PPUSH
65228: PPUSH
// if not side or side > 8 then
65229: LD_VAR 0 1
65233: NOT
65234: PUSH
65235: LD_VAR 0 1
65239: PUSH
65240: LD_INT 8
65242: GREATER
65243: OR
65244: IFFALSE 65248
// exit ;
65246: GO 65435
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65248: LD_ADDR_VAR 0 4
65252: PUSH
65253: LD_INT 22
65255: PUSH
65256: LD_VAR 0 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 21
65267: PUSH
65268: LD_INT 3
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PPUSH
65279: CALL_OW 69
65283: ST_TO_ADDR
// if not tmp then
65284: LD_VAR 0 4
65288: NOT
65289: IFFALSE 65293
// exit ;
65291: GO 65435
// enable_addtolog := true ;
65293: LD_ADDR_OWVAR 81
65297: PUSH
65298: LD_INT 1
65300: ST_TO_ADDR
// AddToLog ( [ ) ;
65301: LD_STRING [
65303: PPUSH
65304: CALL_OW 561
// for i in tmp do
65308: LD_ADDR_VAR 0 3
65312: PUSH
65313: LD_VAR 0 4
65317: PUSH
65318: FOR_IN
65319: IFFALSE 65426
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65321: LD_STRING [
65323: PUSH
65324: LD_VAR 0 3
65328: PPUSH
65329: CALL_OW 266
65333: STR
65334: PUSH
65335: LD_STRING , 
65337: STR
65338: PUSH
65339: LD_VAR 0 3
65343: PPUSH
65344: CALL_OW 250
65348: STR
65349: PUSH
65350: LD_STRING , 
65352: STR
65353: PUSH
65354: LD_VAR 0 3
65358: PPUSH
65359: CALL_OW 251
65363: STR
65364: PUSH
65365: LD_STRING , 
65367: STR
65368: PUSH
65369: LD_VAR 0 3
65373: PPUSH
65374: CALL_OW 254
65378: STR
65379: PUSH
65380: LD_STRING , 
65382: STR
65383: PUSH
65384: LD_VAR 0 3
65388: PPUSH
65389: LD_INT 1
65391: PPUSH
65392: CALL_OW 268
65396: STR
65397: PUSH
65398: LD_STRING , 
65400: STR
65401: PUSH
65402: LD_VAR 0 3
65406: PPUSH
65407: LD_INT 2
65409: PPUSH
65410: CALL_OW 268
65414: STR
65415: PUSH
65416: LD_STRING ],
65418: STR
65419: PPUSH
65420: CALL_OW 561
// end ;
65424: GO 65318
65426: POP
65427: POP
// AddToLog ( ]; ) ;
65428: LD_STRING ];
65430: PPUSH
65431: CALL_OW 561
// end ;
65435: LD_VAR 0 2
65439: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65440: LD_INT 0
65442: PPUSH
65443: PPUSH
65444: PPUSH
65445: PPUSH
65446: PPUSH
// if not area or not rate or not max then
65447: LD_VAR 0 1
65451: NOT
65452: PUSH
65453: LD_VAR 0 2
65457: NOT
65458: OR
65459: PUSH
65460: LD_VAR 0 4
65464: NOT
65465: OR
65466: IFFALSE 65470
// exit ;
65468: GO 65659
// while 1 do
65470: LD_INT 1
65472: IFFALSE 65659
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65474: LD_ADDR_VAR 0 9
65478: PUSH
65479: LD_VAR 0 1
65483: PPUSH
65484: LD_INT 1
65486: PPUSH
65487: CALL_OW 287
65491: PUSH
65492: LD_INT 10
65494: MUL
65495: ST_TO_ADDR
// r := rate / 10 ;
65496: LD_ADDR_VAR 0 7
65500: PUSH
65501: LD_VAR 0 2
65505: PUSH
65506: LD_INT 10
65508: DIVREAL
65509: ST_TO_ADDR
// time := 1 1$00 ;
65510: LD_ADDR_VAR 0 8
65514: PUSH
65515: LD_INT 2100
65517: ST_TO_ADDR
// if amount < min then
65518: LD_VAR 0 9
65522: PUSH
65523: LD_VAR 0 3
65527: LESS
65528: IFFALSE 65546
// r := r * 2 else
65530: LD_ADDR_VAR 0 7
65534: PUSH
65535: LD_VAR 0 7
65539: PUSH
65540: LD_INT 2
65542: MUL
65543: ST_TO_ADDR
65544: GO 65572
// if amount > max then
65546: LD_VAR 0 9
65550: PUSH
65551: LD_VAR 0 4
65555: GREATER
65556: IFFALSE 65572
// r := r / 2 ;
65558: LD_ADDR_VAR 0 7
65562: PUSH
65563: LD_VAR 0 7
65567: PUSH
65568: LD_INT 2
65570: DIVREAL
65571: ST_TO_ADDR
// time := time / r ;
65572: LD_ADDR_VAR 0 8
65576: PUSH
65577: LD_VAR 0 8
65581: PUSH
65582: LD_VAR 0 7
65586: DIVREAL
65587: ST_TO_ADDR
// if time < 0 then
65588: LD_VAR 0 8
65592: PUSH
65593: LD_INT 0
65595: LESS
65596: IFFALSE 65613
// time := time * - 1 ;
65598: LD_ADDR_VAR 0 8
65602: PUSH
65603: LD_VAR 0 8
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: MUL
65612: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65613: LD_VAR 0 8
65617: PUSH
65618: LD_INT 35
65620: PPUSH
65621: LD_INT 875
65623: PPUSH
65624: CALL_OW 12
65628: PLUS
65629: PPUSH
65630: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65634: LD_INT 1
65636: PPUSH
65637: LD_INT 5
65639: PPUSH
65640: CALL_OW 12
65644: PPUSH
65645: LD_VAR 0 1
65649: PPUSH
65650: LD_INT 1
65652: PPUSH
65653: CALL_OW 55
// end ;
65657: GO 65470
// end ;
65659: LD_VAR 0 5
65663: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65664: LD_INT 0
65666: PPUSH
65667: PPUSH
65668: PPUSH
65669: PPUSH
65670: PPUSH
65671: PPUSH
65672: PPUSH
65673: PPUSH
// if not turrets or not factories then
65674: LD_VAR 0 1
65678: NOT
65679: PUSH
65680: LD_VAR 0 2
65684: NOT
65685: OR
65686: IFFALSE 65690
// exit ;
65688: GO 65997
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65690: LD_ADDR_VAR 0 10
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: LD_INT 6
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: LD_INT 5
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 24
65732: PUSH
65733: LD_INT 25
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 23
65742: PUSH
65743: LD_INT 27
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 42
65756: PUSH
65757: LD_INT 43
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 44
65766: PUSH
65767: LD_INT 46
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 45
65776: PUSH
65777: LD_INT 47
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: LIST
65793: ST_TO_ADDR
// result := [ ] ;
65794: LD_ADDR_VAR 0 3
65798: PUSH
65799: EMPTY
65800: ST_TO_ADDR
// for i in turrets do
65801: LD_ADDR_VAR 0 4
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: FOR_IN
65812: IFFALSE 65995
// begin nat := GetNation ( i ) ;
65814: LD_ADDR_VAR 0 7
65818: PUSH
65819: LD_VAR 0 4
65823: PPUSH
65824: CALL_OW 248
65828: ST_TO_ADDR
// weapon := 0 ;
65829: LD_ADDR_VAR 0 8
65833: PUSH
65834: LD_INT 0
65836: ST_TO_ADDR
// if not nat then
65837: LD_VAR 0 7
65841: NOT
65842: IFFALSE 65846
// continue ;
65844: GO 65811
// for j in list [ nat ] do
65846: LD_ADDR_VAR 0 5
65850: PUSH
65851: LD_VAR 0 10
65855: PUSH
65856: LD_VAR 0 7
65860: ARRAY
65861: PUSH
65862: FOR_IN
65863: IFFALSE 65904
// if GetBWeapon ( i ) = j [ 1 ] then
65865: LD_VAR 0 4
65869: PPUSH
65870: CALL_OW 269
65874: PUSH
65875: LD_VAR 0 5
65879: PUSH
65880: LD_INT 1
65882: ARRAY
65883: EQUAL
65884: IFFALSE 65902
// begin weapon := j [ 2 ] ;
65886: LD_ADDR_VAR 0 8
65890: PUSH
65891: LD_VAR 0 5
65895: PUSH
65896: LD_INT 2
65898: ARRAY
65899: ST_TO_ADDR
// break ;
65900: GO 65904
// end ;
65902: GO 65862
65904: POP
65905: POP
// if not weapon then
65906: LD_VAR 0 8
65910: NOT
65911: IFFALSE 65915
// continue ;
65913: GO 65811
// for k in factories do
65915: LD_ADDR_VAR 0 6
65919: PUSH
65920: LD_VAR 0 2
65924: PUSH
65925: FOR_IN
65926: IFFALSE 65991
// begin weapons := AvailableWeaponList ( k ) ;
65928: LD_ADDR_VAR 0 9
65932: PUSH
65933: LD_VAR 0 6
65937: PPUSH
65938: CALL_OW 478
65942: ST_TO_ADDR
// if not weapons then
65943: LD_VAR 0 9
65947: NOT
65948: IFFALSE 65952
// continue ;
65950: GO 65925
// if weapon in weapons then
65952: LD_VAR 0 8
65956: PUSH
65957: LD_VAR 0 9
65961: IN
65962: IFFALSE 65989
// begin result := [ i , weapon ] ;
65964: LD_ADDR_VAR 0 3
65968: PUSH
65969: LD_VAR 0 4
65973: PUSH
65974: LD_VAR 0 8
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: ST_TO_ADDR
// exit ;
65983: POP
65984: POP
65985: POP
65986: POP
65987: GO 65997
// end ; end ;
65989: GO 65925
65991: POP
65992: POP
// end ;
65993: GO 65811
65995: POP
65996: POP
// end ;
65997: LD_VAR 0 3
66001: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66002: LD_INT 0
66004: PPUSH
// if not side or side > 8 then
66005: LD_VAR 0 3
66009: NOT
66010: PUSH
66011: LD_VAR 0 3
66015: PUSH
66016: LD_INT 8
66018: GREATER
66019: OR
66020: IFFALSE 66024
// exit ;
66022: GO 66083
// if not range then
66024: LD_VAR 0 4
66028: NOT
66029: IFFALSE 66040
// range := - 12 ;
66031: LD_ADDR_VAR 0 4
66035: PUSH
66036: LD_INT 12
66038: NEG
66039: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66040: LD_VAR 0 1
66044: PPUSH
66045: LD_VAR 0 2
66049: PPUSH
66050: LD_VAR 0 3
66054: PPUSH
66055: LD_VAR 0 4
66059: PPUSH
66060: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66064: LD_VAR 0 1
66068: PPUSH
66069: LD_VAR 0 2
66073: PPUSH
66074: LD_VAR 0 3
66078: PPUSH
66079: CALL_OW 331
// end ;
66083: LD_VAR 0 5
66087: RET
// export function Video ( mode ) ; begin
66088: LD_INT 0
66090: PPUSH
// ingame_video = mode ;
66091: LD_ADDR_OWVAR 52
66095: PUSH
66096: LD_VAR 0 1
66100: ST_TO_ADDR
// interface_hidden = mode ;
66101: LD_ADDR_OWVAR 54
66105: PUSH
66106: LD_VAR 0 1
66110: ST_TO_ADDR
// end ;
66111: LD_VAR 0 2
66115: RET
// export function Join ( array , element ) ; begin
66116: LD_INT 0
66118: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_VAR 0 1
66128: PPUSH
66129: LD_VAR 0 1
66133: PUSH
66134: LD_INT 1
66136: PLUS
66137: PPUSH
66138: LD_VAR 0 2
66142: PPUSH
66143: CALL_OW 1
66147: ST_TO_ADDR
// end ;
66148: LD_VAR 0 3
66152: RET
// export function JoinUnion ( array , element ) ; begin
66153: LD_INT 0
66155: PPUSH
// result := array union element ;
66156: LD_ADDR_VAR 0 3
66160: PUSH
66161: LD_VAR 0 1
66165: PUSH
66166: LD_VAR 0 2
66170: UNION
66171: ST_TO_ADDR
// end ;
66172: LD_VAR 0 3
66176: RET
// export function GetBehemoths ( side ) ; begin
66177: LD_INT 0
66179: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66180: LD_ADDR_VAR 0 2
66184: PUSH
66185: LD_INT 22
66187: PUSH
66188: LD_VAR 0 1
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 31
66199: PUSH
66200: LD_INT 25
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PPUSH
66211: CALL_OW 69
66215: ST_TO_ADDR
// end ;
66216: LD_VAR 0 2
66220: RET
// export function Shuffle ( array ) ; var i , index ; begin
66221: LD_INT 0
66223: PPUSH
66224: PPUSH
66225: PPUSH
// result := [ ] ;
66226: LD_ADDR_VAR 0 2
66230: PUSH
66231: EMPTY
66232: ST_TO_ADDR
// if not array then
66233: LD_VAR 0 1
66237: NOT
66238: IFFALSE 66242
// exit ;
66240: GO 66341
// Randomize ;
66242: CALL_OW 10
// for i = array downto 1 do
66246: LD_ADDR_VAR 0 3
66250: PUSH
66251: DOUBLE
66252: LD_VAR 0 1
66256: INC
66257: ST_TO_ADDR
66258: LD_INT 1
66260: PUSH
66261: FOR_DOWNTO
66262: IFFALSE 66339
// begin index := rand ( 1 , array ) ;
66264: LD_ADDR_VAR 0 4
66268: PUSH
66269: LD_INT 1
66271: PPUSH
66272: LD_VAR 0 1
66276: PPUSH
66277: CALL_OW 12
66281: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66282: LD_ADDR_VAR 0 2
66286: PUSH
66287: LD_VAR 0 2
66291: PPUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_INT 1
66299: PLUS
66300: PPUSH
66301: LD_VAR 0 1
66305: PUSH
66306: LD_VAR 0 4
66310: ARRAY
66311: PPUSH
66312: CALL_OW 2
66316: ST_TO_ADDR
// array := Delete ( array , index ) ;
66317: LD_ADDR_VAR 0 1
66321: PUSH
66322: LD_VAR 0 1
66326: PPUSH
66327: LD_VAR 0 4
66331: PPUSH
66332: CALL_OW 3
66336: ST_TO_ADDR
// end ;
66337: GO 66261
66339: POP
66340: POP
// end ;
66341: LD_VAR 0 2
66345: RET
// export function GetBaseMaterials ( base ) ; begin
66346: LD_INT 0
66348: PPUSH
// result := [ 0 , 0 , 0 ] ;
66349: LD_ADDR_VAR 0 2
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: ST_TO_ADDR
// if not base then
66368: LD_VAR 0 1
66372: NOT
66373: IFFALSE 66377
// exit ;
66375: GO 66426
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66377: LD_ADDR_VAR 0 2
66381: PUSH
66382: LD_VAR 0 1
66386: PPUSH
66387: LD_INT 1
66389: PPUSH
66390: CALL_OW 275
66394: PUSH
66395: LD_VAR 0 1
66399: PPUSH
66400: LD_INT 2
66402: PPUSH
66403: CALL_OW 275
66407: PUSH
66408: LD_VAR 0 1
66412: PPUSH
66413: LD_INT 3
66415: PPUSH
66416: CALL_OW 275
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: ST_TO_ADDR
// end ;
66426: LD_VAR 0 2
66430: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66431: LD_INT 0
66433: PPUSH
66434: PPUSH
// result := array ;
66435: LD_ADDR_VAR 0 3
66439: PUSH
66440: LD_VAR 0 1
66444: ST_TO_ADDR
// if size >= result then
66445: LD_VAR 0 2
66449: PUSH
66450: LD_VAR 0 3
66454: GREATEREQUAL
66455: IFFALSE 66459
// exit ;
66457: GO 66509
// if size then
66459: LD_VAR 0 2
66463: IFFALSE 66509
// for i := array downto size do
66465: LD_ADDR_VAR 0 4
66469: PUSH
66470: DOUBLE
66471: LD_VAR 0 1
66475: INC
66476: ST_TO_ADDR
66477: LD_VAR 0 2
66481: PUSH
66482: FOR_DOWNTO
66483: IFFALSE 66507
// result := Delete ( result , result ) ;
66485: LD_ADDR_VAR 0 3
66489: PUSH
66490: LD_VAR 0 3
66494: PPUSH
66495: LD_VAR 0 3
66499: PPUSH
66500: CALL_OW 3
66504: ST_TO_ADDR
66505: GO 66482
66507: POP
66508: POP
// end ;
66509: LD_VAR 0 3
66513: RET
// export function ComExit ( unit ) ; var tmp ; begin
66514: LD_INT 0
66516: PPUSH
66517: PPUSH
// if not IsInUnit ( unit ) then
66518: LD_VAR 0 1
66522: PPUSH
66523: CALL_OW 310
66527: NOT
66528: IFFALSE 66532
// exit ;
66530: GO 66592
// tmp := IsInUnit ( unit ) ;
66532: LD_ADDR_VAR 0 3
66536: PUSH
66537: LD_VAR 0 1
66541: PPUSH
66542: CALL_OW 310
66546: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66547: LD_VAR 0 3
66551: PPUSH
66552: CALL_OW 247
66556: PUSH
66557: LD_INT 2
66559: EQUAL
66560: IFFALSE 66573
// ComExitVehicle ( unit ) else
66562: LD_VAR 0 1
66566: PPUSH
66567: CALL_OW 121
66571: GO 66582
// ComExitBuilding ( unit ) ;
66573: LD_VAR 0 1
66577: PPUSH
66578: CALL_OW 122
// result := tmp ;
66582: LD_ADDR_VAR 0 2
66586: PUSH
66587: LD_VAR 0 3
66591: ST_TO_ADDR
// end ;
66592: LD_VAR 0 2
66596: RET
// export function ComExitAll ( units ) ; var i ; begin
66597: LD_INT 0
66599: PPUSH
66600: PPUSH
// if not units then
66601: LD_VAR 0 1
66605: NOT
66606: IFFALSE 66610
// exit ;
66608: GO 66636
// for i in units do
66610: LD_ADDR_VAR 0 3
66614: PUSH
66615: LD_VAR 0 1
66619: PUSH
66620: FOR_IN
66621: IFFALSE 66634
// ComExit ( i ) ;
66623: LD_VAR 0 3
66627: PPUSH
66628: CALL 66514 0 1
66632: GO 66620
66634: POP
66635: POP
// end ;
66636: LD_VAR 0 2
66640: RET
// export function ResetHc ; begin
66641: LD_INT 0
66643: PPUSH
// InitHc ;
66644: CALL_OW 19
// hc_importance := 0 ;
66648: LD_ADDR_OWVAR 32
66652: PUSH
66653: LD_INT 0
66655: ST_TO_ADDR
// end ;
66656: LD_VAR 0 1
66660: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66661: LD_INT 0
66663: PPUSH
66664: PPUSH
66665: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66666: LD_ADDR_VAR 0 6
66670: PUSH
66671: LD_VAR 0 1
66675: PUSH
66676: LD_VAR 0 3
66680: PLUS
66681: PUSH
66682: LD_INT 2
66684: DIV
66685: ST_TO_ADDR
// if _x < 0 then
66686: LD_VAR 0 6
66690: PUSH
66691: LD_INT 0
66693: LESS
66694: IFFALSE 66711
// _x := _x * - 1 ;
66696: LD_ADDR_VAR 0 6
66700: PUSH
66701: LD_VAR 0 6
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: MUL
66710: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66711: LD_ADDR_VAR 0 7
66715: PUSH
66716: LD_VAR 0 2
66720: PUSH
66721: LD_VAR 0 4
66725: PLUS
66726: PUSH
66727: LD_INT 2
66729: DIV
66730: ST_TO_ADDR
// if _y < 0 then
66731: LD_VAR 0 7
66735: PUSH
66736: LD_INT 0
66738: LESS
66739: IFFALSE 66756
// _y := _y * - 1 ;
66741: LD_ADDR_VAR 0 7
66745: PUSH
66746: LD_VAR 0 7
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: MUL
66755: ST_TO_ADDR
// result := [ _x , _y ] ;
66756: LD_ADDR_VAR 0 5
66760: PUSH
66761: LD_VAR 0 6
66765: PUSH
66766: LD_VAR 0 7
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: ST_TO_ADDR
// end ;
66775: LD_VAR 0 5
66779: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66780: LD_INT 0
66782: PPUSH
66783: PPUSH
66784: PPUSH
66785: PPUSH
// task := GetTaskList ( unit ) ;
66786: LD_ADDR_VAR 0 7
66790: PUSH
66791: LD_VAR 0 1
66795: PPUSH
66796: CALL_OW 437
66800: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66801: LD_VAR 0 7
66805: NOT
66806: PUSH
66807: LD_VAR 0 1
66811: PPUSH
66812: LD_VAR 0 2
66816: PPUSH
66817: CALL_OW 308
66821: NOT
66822: AND
66823: IFFALSE 66827
// exit ;
66825: GO 66945
// if IsInArea ( unit , area ) then
66827: LD_VAR 0 1
66831: PPUSH
66832: LD_VAR 0 2
66836: PPUSH
66837: CALL_OW 308
66841: IFFALSE 66859
// begin ComMoveToArea ( unit , goAway ) ;
66843: LD_VAR 0 1
66847: PPUSH
66848: LD_VAR 0 3
66852: PPUSH
66853: CALL_OW 113
// exit ;
66857: GO 66945
// end ; if task [ 1 ] [ 1 ] <> M then
66859: LD_VAR 0 7
66863: PUSH
66864: LD_INT 1
66866: ARRAY
66867: PUSH
66868: LD_INT 1
66870: ARRAY
66871: PUSH
66872: LD_STRING M
66874: NONEQUAL
66875: IFFALSE 66879
// exit ;
66877: GO 66945
// x := task [ 1 ] [ 2 ] ;
66879: LD_ADDR_VAR 0 5
66883: PUSH
66884: LD_VAR 0 7
66888: PUSH
66889: LD_INT 1
66891: ARRAY
66892: PUSH
66893: LD_INT 2
66895: ARRAY
66896: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66897: LD_ADDR_VAR 0 6
66901: PUSH
66902: LD_VAR 0 7
66906: PUSH
66907: LD_INT 1
66909: ARRAY
66910: PUSH
66911: LD_INT 3
66913: ARRAY
66914: ST_TO_ADDR
// if InArea ( x , y , area ) then
66915: LD_VAR 0 5
66919: PPUSH
66920: LD_VAR 0 6
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: CALL_OW 309
66934: IFFALSE 66945
// ComStop ( unit ) ;
66936: LD_VAR 0 1
66940: PPUSH
66941: CALL_OW 141
// end ;
66945: LD_VAR 0 4
66949: RET
// export function Abs ( value ) ; begin
66950: LD_INT 0
66952: PPUSH
// result := value ;
66953: LD_ADDR_VAR 0 2
66957: PUSH
66958: LD_VAR 0 1
66962: ST_TO_ADDR
// if value < 0 then
66963: LD_VAR 0 1
66967: PUSH
66968: LD_INT 0
66970: LESS
66971: IFFALSE 66988
// result := value * - 1 ;
66973: LD_ADDR_VAR 0 2
66977: PUSH
66978: LD_VAR 0 1
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: MUL
66987: ST_TO_ADDR
// end ;
66988: LD_VAR 0 2
66992: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66993: LD_INT 0
66995: PPUSH
66996: PPUSH
66997: PPUSH
66998: PPUSH
66999: PPUSH
67000: PPUSH
67001: PPUSH
67002: PPUSH
// if not unit or not building then
67003: LD_VAR 0 1
67007: NOT
67008: PUSH
67009: LD_VAR 0 2
67013: NOT
67014: OR
67015: IFFALSE 67019
// exit ;
67017: GO 67245
// x := GetX ( building ) ;
67019: LD_ADDR_VAR 0 4
67023: PUSH
67024: LD_VAR 0 2
67028: PPUSH
67029: CALL_OW 250
67033: ST_TO_ADDR
// y := GetY ( building ) ;
67034: LD_ADDR_VAR 0 6
67038: PUSH
67039: LD_VAR 0 2
67043: PPUSH
67044: CALL_OW 251
67048: ST_TO_ADDR
// d := GetDir ( building ) ;
67049: LD_ADDR_VAR 0 8
67053: PUSH
67054: LD_VAR 0 2
67058: PPUSH
67059: CALL_OW 254
67063: ST_TO_ADDR
// r := 4 ;
67064: LD_ADDR_VAR 0 9
67068: PUSH
67069: LD_INT 4
67071: ST_TO_ADDR
// for i := 1 to 5 do
67072: LD_ADDR_VAR 0 10
67076: PUSH
67077: DOUBLE
67078: LD_INT 1
67080: DEC
67081: ST_TO_ADDR
67082: LD_INT 5
67084: PUSH
67085: FOR_TO
67086: IFFALSE 67243
// begin _x := ShiftX ( x , d , r + i ) ;
67088: LD_ADDR_VAR 0 5
67092: PUSH
67093: LD_VAR 0 4
67097: PPUSH
67098: LD_VAR 0 8
67102: PPUSH
67103: LD_VAR 0 9
67107: PUSH
67108: LD_VAR 0 10
67112: PLUS
67113: PPUSH
67114: CALL_OW 272
67118: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67119: LD_ADDR_VAR 0 7
67123: PUSH
67124: LD_VAR 0 6
67128: PPUSH
67129: LD_VAR 0 8
67133: PPUSH
67134: LD_VAR 0 9
67138: PUSH
67139: LD_VAR 0 10
67143: PLUS
67144: PPUSH
67145: CALL_OW 273
67149: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67150: LD_VAR 0 5
67154: PPUSH
67155: LD_VAR 0 7
67159: PPUSH
67160: CALL_OW 488
67164: PUSH
67165: LD_VAR 0 5
67169: PPUSH
67170: LD_VAR 0 7
67174: PPUSH
67175: CALL_OW 428
67179: PPUSH
67180: CALL_OW 247
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: IN
67195: NOT
67196: AND
67197: IFFALSE 67241
// begin ComMoveXY ( unit , _x , _y ) ;
67199: LD_VAR 0 1
67203: PPUSH
67204: LD_VAR 0 5
67208: PPUSH
67209: LD_VAR 0 7
67213: PPUSH
67214: CALL_OW 111
// result := [ _x , _y ] ;
67218: LD_ADDR_VAR 0 3
67222: PUSH
67223: LD_VAR 0 5
67227: PUSH
67228: LD_VAR 0 7
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: ST_TO_ADDR
// exit ;
67237: POP
67238: POP
67239: GO 67245
// end ; end ;
67241: GO 67085
67243: POP
67244: POP
// end ;
67245: LD_VAR 0 3
67249: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
67254: PPUSH
// result := 0 ;
67255: LD_ADDR_VAR 0 3
67259: PUSH
67260: LD_INT 0
67262: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67263: LD_VAR 0 1
67267: PUSH
67268: LD_INT 0
67270: LESS
67271: PUSH
67272: LD_VAR 0 1
67276: PUSH
67277: LD_INT 8
67279: GREATER
67280: OR
67281: PUSH
67282: LD_VAR 0 2
67286: PUSH
67287: LD_INT 0
67289: LESS
67290: OR
67291: PUSH
67292: LD_VAR 0 2
67296: PUSH
67297: LD_INT 8
67299: GREATER
67300: OR
67301: IFFALSE 67305
// exit ;
67303: GO 67380
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67305: LD_ADDR_VAR 0 4
67309: PUSH
67310: LD_INT 22
67312: PUSH
67313: LD_VAR 0 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PPUSH
67322: CALL_OW 69
67326: PUSH
67327: FOR_IN
67328: IFFALSE 67378
// begin un := UnitShoot ( i ) ;
67330: LD_ADDR_VAR 0 5
67334: PUSH
67335: LD_VAR 0 4
67339: PPUSH
67340: CALL_OW 504
67344: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67345: LD_VAR 0 5
67349: PPUSH
67350: CALL_OW 255
67354: PUSH
67355: LD_VAR 0 1
67359: EQUAL
67360: IFFALSE 67376
// begin result := un ;
67362: LD_ADDR_VAR 0 3
67366: PUSH
67367: LD_VAR 0 5
67371: ST_TO_ADDR
// exit ;
67372: POP
67373: POP
67374: GO 67380
// end ; end ;
67376: GO 67327
67378: POP
67379: POP
// end ;
67380: LD_VAR 0 3
67384: RET
// export function GetCargoBay ( units ) ; begin
67385: LD_INT 0
67387: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67388: LD_ADDR_VAR 0 2
67392: PUSH
67393: LD_VAR 0 1
67397: PPUSH
67398: LD_INT 2
67400: PUSH
67401: LD_INT 34
67403: PUSH
67404: LD_INT 12
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 34
67413: PUSH
67414: LD_INT 51
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 34
67423: PUSH
67424: LD_INT 32
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 34
67433: PUSH
67434: LD_INT 89
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: PPUSH
67448: CALL_OW 72
67452: ST_TO_ADDR
// end ;
67453: LD_VAR 0 2
67457: RET
// export function Negate ( value ) ; begin
67458: LD_INT 0
67460: PPUSH
// result := not value ;
67461: LD_ADDR_VAR 0 2
67465: PUSH
67466: LD_VAR 0 1
67470: NOT
67471: ST_TO_ADDR
// end ;
67472: LD_VAR 0 2
67476: RET
// export function Inc ( value ) ; begin
67477: LD_INT 0
67479: PPUSH
// result := value + 1 ;
67480: LD_ADDR_VAR 0 2
67484: PUSH
67485: LD_VAR 0 1
67489: PUSH
67490: LD_INT 1
67492: PLUS
67493: ST_TO_ADDR
// end ;
67494: LD_VAR 0 2
67498: RET
// export function Dec ( value ) ; begin
67499: LD_INT 0
67501: PPUSH
// result := value - 1 ;
67502: LD_ADDR_VAR 0 2
67506: PUSH
67507: LD_VAR 0 1
67511: PUSH
67512: LD_INT 1
67514: MINUS
67515: ST_TO_ADDR
// end ;
67516: LD_VAR 0 2
67520: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67521: LD_INT 0
67523: PPUSH
67524: PPUSH
67525: PPUSH
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67531: LD_VAR 0 1
67535: PPUSH
67536: LD_VAR 0 2
67540: PPUSH
67541: CALL_OW 488
67545: NOT
67546: PUSH
67547: LD_VAR 0 3
67551: PPUSH
67552: LD_VAR 0 4
67556: PPUSH
67557: CALL_OW 488
67561: NOT
67562: OR
67563: IFFALSE 67576
// begin result := - 1 ;
67565: LD_ADDR_VAR 0 5
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: ST_TO_ADDR
// exit ;
67574: GO 67811
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67576: LD_ADDR_VAR 0 12
67580: PUSH
67581: LD_VAR 0 1
67585: PPUSH
67586: LD_VAR 0 2
67590: PPUSH
67591: LD_VAR 0 3
67595: PPUSH
67596: LD_VAR 0 4
67600: PPUSH
67601: CALL 66661 0 4
67605: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67606: LD_ADDR_VAR 0 11
67610: PUSH
67611: LD_VAR 0 1
67615: PPUSH
67616: LD_VAR 0 2
67620: PPUSH
67621: LD_VAR 0 12
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: PPUSH
67630: LD_VAR 0 12
67634: PUSH
67635: LD_INT 2
67637: ARRAY
67638: PPUSH
67639: CALL_OW 298
67643: ST_TO_ADDR
// distance := 9999 ;
67644: LD_ADDR_VAR 0 10
67648: PUSH
67649: LD_INT 9999
67651: ST_TO_ADDR
// for i := 0 to 5 do
67652: LD_ADDR_VAR 0 6
67656: PUSH
67657: DOUBLE
67658: LD_INT 0
67660: DEC
67661: ST_TO_ADDR
67662: LD_INT 5
67664: PUSH
67665: FOR_TO
67666: IFFALSE 67809
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67668: LD_ADDR_VAR 0 7
67672: PUSH
67673: LD_VAR 0 1
67677: PPUSH
67678: LD_VAR 0 6
67682: PPUSH
67683: LD_VAR 0 11
67687: PPUSH
67688: CALL_OW 272
67692: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67693: LD_ADDR_VAR 0 8
67697: PUSH
67698: LD_VAR 0 2
67702: PPUSH
67703: LD_VAR 0 6
67707: PPUSH
67708: LD_VAR 0 11
67712: PPUSH
67713: CALL_OW 273
67717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67718: LD_VAR 0 7
67722: PPUSH
67723: LD_VAR 0 8
67727: PPUSH
67728: CALL_OW 488
67732: NOT
67733: IFFALSE 67737
// continue ;
67735: GO 67665
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67737: LD_ADDR_VAR 0 9
67741: PUSH
67742: LD_VAR 0 12
67746: PUSH
67747: LD_INT 1
67749: ARRAY
67750: PPUSH
67751: LD_VAR 0 12
67755: PUSH
67756: LD_INT 2
67758: ARRAY
67759: PPUSH
67760: LD_VAR 0 7
67764: PPUSH
67765: LD_VAR 0 8
67769: PPUSH
67770: CALL_OW 298
67774: ST_TO_ADDR
// if tmp < distance then
67775: LD_VAR 0 9
67779: PUSH
67780: LD_VAR 0 10
67784: LESS
67785: IFFALSE 67807
// begin result := i ;
67787: LD_ADDR_VAR 0 5
67791: PUSH
67792: LD_VAR 0 6
67796: ST_TO_ADDR
// distance := tmp ;
67797: LD_ADDR_VAR 0 10
67801: PUSH
67802: LD_VAR 0 9
67806: ST_TO_ADDR
// end ; end ;
67807: GO 67665
67809: POP
67810: POP
// end ;
67811: LD_VAR 0 5
67815: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67816: LD_INT 0
67818: PPUSH
67819: PPUSH
// if not driver or not IsInUnit ( driver ) then
67820: LD_VAR 0 1
67824: NOT
67825: PUSH
67826: LD_VAR 0 1
67830: PPUSH
67831: CALL_OW 310
67835: NOT
67836: OR
67837: IFFALSE 67841
// exit ;
67839: GO 67931
// vehicle := IsInUnit ( driver ) ;
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_VAR 0 1
67850: PPUSH
67851: CALL_OW 310
67855: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67856: LD_VAR 0 1
67860: PPUSH
67861: LD_STRING \
67863: PUSH
67864: LD_INT 0
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: PUSH
67891: LD_STRING E
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: LD_VAR 0 3
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PPUSH
67927: CALL_OW 446
// end ;
67931: LD_VAR 0 2
67935: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
// if not driver or not IsInUnit ( driver ) then
67940: LD_VAR 0 1
67944: NOT
67945: PUSH
67946: LD_VAR 0 1
67950: PPUSH
67951: CALL_OW 310
67955: NOT
67956: OR
67957: IFFALSE 67961
// exit ;
67959: GO 68051
// vehicle := IsInUnit ( driver ) ;
67961: LD_ADDR_VAR 0 3
67965: PUSH
67966: LD_VAR 0 1
67970: PPUSH
67971: CALL_OW 310
67975: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67976: LD_VAR 0 1
67980: PPUSH
67981: LD_STRING \
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: PUSH
68011: LD_STRING E
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: LD_VAR 0 3
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PPUSH
68047: CALL_OW 447
// end ;
68051: LD_VAR 0 2
68055: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68056: LD_INT 0
68058: PPUSH
68059: PPUSH
68060: PPUSH
// tmp := [ ] ;
68061: LD_ADDR_VAR 0 5
68065: PUSH
68066: EMPTY
68067: ST_TO_ADDR
// for i in units do
68068: LD_ADDR_VAR 0 4
68072: PUSH
68073: LD_VAR 0 1
68077: PUSH
68078: FOR_IN
68079: IFFALSE 68117
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68081: LD_ADDR_VAR 0 5
68085: PUSH
68086: LD_VAR 0 5
68090: PPUSH
68091: LD_VAR 0 5
68095: PUSH
68096: LD_INT 1
68098: PLUS
68099: PPUSH
68100: LD_VAR 0 4
68104: PPUSH
68105: CALL_OW 256
68109: PPUSH
68110: CALL_OW 2
68114: ST_TO_ADDR
68115: GO 68078
68117: POP
68118: POP
// if not tmp then
68119: LD_VAR 0 5
68123: NOT
68124: IFFALSE 68128
// exit ;
68126: GO 68176
// if asc then
68128: LD_VAR 0 2
68132: IFFALSE 68156
// result := SortListByListAsc ( units , tmp ) else
68134: LD_ADDR_VAR 0 3
68138: PUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: LD_VAR 0 5
68148: PPUSH
68149: CALL_OW 76
68153: ST_TO_ADDR
68154: GO 68176
// result := SortListByListDesc ( units , tmp ) ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_VAR 0 1
68165: PPUSH
68166: LD_VAR 0 5
68170: PPUSH
68171: CALL_OW 77
68175: ST_TO_ADDR
// end ;
68176: LD_VAR 0 3
68180: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68181: LD_INT 0
68183: PPUSH
68184: PPUSH
// task := GetTaskList ( mech ) ;
68185: LD_ADDR_VAR 0 4
68189: PUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: CALL_OW 437
68199: ST_TO_ADDR
// if not task then
68200: LD_VAR 0 4
68204: NOT
68205: IFFALSE 68209
// exit ;
68207: GO 68251
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68209: LD_ADDR_VAR 0 3
68213: PUSH
68214: LD_VAR 0 4
68218: PUSH
68219: LD_INT 1
68221: ARRAY
68222: PUSH
68223: LD_INT 1
68225: ARRAY
68226: PUSH
68227: LD_STRING r
68229: EQUAL
68230: PUSH
68231: LD_VAR 0 4
68235: PUSH
68236: LD_INT 1
68238: ARRAY
68239: PUSH
68240: LD_INT 4
68242: ARRAY
68243: PUSH
68244: LD_VAR 0 2
68248: EQUAL
68249: AND
68250: ST_TO_ADDR
// end ;
68251: LD_VAR 0 3
68255: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68256: LD_INT 0
68258: PPUSH
// SetDir ( unit , d ) ;
68259: LD_VAR 0 1
68263: PPUSH
68264: LD_VAR 0 4
68268: PPUSH
68269: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68273: LD_VAR 0 1
68277: PPUSH
68278: LD_VAR 0 2
68282: PPUSH
68283: LD_VAR 0 3
68287: PPUSH
68288: LD_VAR 0 5
68292: PPUSH
68293: CALL_OW 48
// end ;
68297: LD_VAR 0 6
68301: RET
// export function ToNaturalNumber ( number ) ; begin
68302: LD_INT 0
68304: PPUSH
// result := number div 1 ;
68305: LD_ADDR_VAR 0 2
68309: PUSH
68310: LD_VAR 0 1
68314: PUSH
68315: LD_INT 1
68317: DIV
68318: ST_TO_ADDR
// if number < 0 then
68319: LD_VAR 0 1
68323: PUSH
68324: LD_INT 0
68326: LESS
68327: IFFALSE 68337
// result := 0 ;
68329: LD_ADDR_VAR 0 2
68333: PUSH
68334: LD_INT 0
68336: ST_TO_ADDR
// end ;
68337: LD_VAR 0 2
68341: RET
// export function SortByClass ( units , class ) ; var un ; begin
68342: LD_INT 0
68344: PPUSH
68345: PPUSH
// if not units or not class then
68346: LD_VAR 0 1
68350: NOT
68351: PUSH
68352: LD_VAR 0 2
68356: NOT
68357: OR
68358: IFFALSE 68362
// exit ;
68360: GO 68457
// result := [ ] ;
68362: LD_ADDR_VAR 0 3
68366: PUSH
68367: EMPTY
68368: ST_TO_ADDR
// for un in units do
68369: LD_ADDR_VAR 0 4
68373: PUSH
68374: LD_VAR 0 1
68378: PUSH
68379: FOR_IN
68380: IFFALSE 68455
// if GetClass ( un ) = class then
68382: LD_VAR 0 4
68386: PPUSH
68387: CALL_OW 257
68391: PUSH
68392: LD_VAR 0 2
68396: EQUAL
68397: IFFALSE 68424
// result := Insert ( result , 1 , un ) else
68399: LD_ADDR_VAR 0 3
68403: PUSH
68404: LD_VAR 0 3
68408: PPUSH
68409: LD_INT 1
68411: PPUSH
68412: LD_VAR 0 4
68416: PPUSH
68417: CALL_OW 2
68421: ST_TO_ADDR
68422: GO 68453
// result := Replace ( result , result + 1 , un ) ;
68424: LD_ADDR_VAR 0 3
68428: PUSH
68429: LD_VAR 0 3
68433: PPUSH
68434: LD_VAR 0 3
68438: PUSH
68439: LD_INT 1
68441: PLUS
68442: PPUSH
68443: LD_VAR 0 4
68447: PPUSH
68448: CALL_OW 1
68452: ST_TO_ADDR
68453: GO 68379
68455: POP
68456: POP
// end ;
68457: LD_VAR 0 3
68461: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68462: LD_INT 0
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
68469: PPUSH
68470: PPUSH
// result := [ ] ;
68471: LD_ADDR_VAR 0 4
68475: PUSH
68476: EMPTY
68477: ST_TO_ADDR
// if x - r < 0 then
68478: LD_VAR 0 1
68482: PUSH
68483: LD_VAR 0 3
68487: MINUS
68488: PUSH
68489: LD_INT 0
68491: LESS
68492: IFFALSE 68504
// min_x := 0 else
68494: LD_ADDR_VAR 0 8
68498: PUSH
68499: LD_INT 0
68501: ST_TO_ADDR
68502: GO 68520
// min_x := x - r ;
68504: LD_ADDR_VAR 0 8
68508: PUSH
68509: LD_VAR 0 1
68513: PUSH
68514: LD_VAR 0 3
68518: MINUS
68519: ST_TO_ADDR
// if y - r < 0 then
68520: LD_VAR 0 2
68524: PUSH
68525: LD_VAR 0 3
68529: MINUS
68530: PUSH
68531: LD_INT 0
68533: LESS
68534: IFFALSE 68546
// min_y := 0 else
68536: LD_ADDR_VAR 0 7
68540: PUSH
68541: LD_INT 0
68543: ST_TO_ADDR
68544: GO 68562
// min_y := y - r ;
68546: LD_ADDR_VAR 0 7
68550: PUSH
68551: LD_VAR 0 2
68555: PUSH
68556: LD_VAR 0 3
68560: MINUS
68561: ST_TO_ADDR
// max_x := x + r ;
68562: LD_ADDR_VAR 0 9
68566: PUSH
68567: LD_VAR 0 1
68571: PUSH
68572: LD_VAR 0 3
68576: PLUS
68577: ST_TO_ADDR
// max_y := y + r ;
68578: LD_ADDR_VAR 0 10
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: LD_VAR 0 3
68592: PLUS
68593: ST_TO_ADDR
// for _x = min_x to max_x do
68594: LD_ADDR_VAR 0 5
68598: PUSH
68599: DOUBLE
68600: LD_VAR 0 8
68604: DEC
68605: ST_TO_ADDR
68606: LD_VAR 0 9
68610: PUSH
68611: FOR_TO
68612: IFFALSE 68713
// for _y = min_y to max_y do
68614: LD_ADDR_VAR 0 6
68618: PUSH
68619: DOUBLE
68620: LD_VAR 0 7
68624: DEC
68625: ST_TO_ADDR
68626: LD_VAR 0 10
68630: PUSH
68631: FOR_TO
68632: IFFALSE 68709
// begin if not ValidHex ( _x , _y ) then
68634: LD_VAR 0 5
68638: PPUSH
68639: LD_VAR 0 6
68643: PPUSH
68644: CALL_OW 488
68648: NOT
68649: IFFALSE 68653
// continue ;
68651: GO 68631
// if GetResourceTypeXY ( _x , _y ) then
68653: LD_VAR 0 5
68657: PPUSH
68658: LD_VAR 0 6
68662: PPUSH
68663: CALL_OW 283
68667: IFFALSE 68707
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68669: LD_ADDR_VAR 0 4
68673: PUSH
68674: LD_VAR 0 4
68678: PPUSH
68679: LD_VAR 0 4
68683: PUSH
68684: LD_INT 1
68686: PLUS
68687: PPUSH
68688: LD_VAR 0 5
68692: PUSH
68693: LD_VAR 0 6
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PPUSH
68702: CALL_OW 1
68706: ST_TO_ADDR
// end ;
68707: GO 68631
68709: POP
68710: POP
68711: GO 68611
68713: POP
68714: POP
// end ;
68715: LD_VAR 0 4
68719: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68720: LD_INT 0
68722: PPUSH
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
68727: PPUSH
68728: PPUSH
68729: PPUSH
// if not units then
68730: LD_VAR 0 1
68734: NOT
68735: IFFALSE 68739
// exit ;
68737: GO 69263
// result := UnitFilter ( units , [ f_ok ] ) ;
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: LD_VAR 0 1
68748: PPUSH
68749: LD_INT 50
68751: PUSH
68752: EMPTY
68753: LIST
68754: PPUSH
68755: CALL_OW 72
68759: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68760: LD_ADDR_VAR 0 8
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: LD_INT 1
68772: ARRAY
68773: PPUSH
68774: CALL_OW 255
68778: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68779: LD_ADDR_VAR 0 10
68783: PUSH
68784: LD_INT 29
68786: PUSH
68787: LD_INT 91
68789: PUSH
68790: LD_INT 49
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: LIST
68797: ST_TO_ADDR
// if not result then
68798: LD_VAR 0 3
68802: NOT
68803: IFFALSE 68807
// exit ;
68805: GO 69263
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68807: LD_ADDR_VAR 0 5
68811: PUSH
68812: LD_INT 81
68814: PUSH
68815: LD_VAR 0 8
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PPUSH
68824: CALL_OW 69
68828: ST_TO_ADDR
// for i in result do
68829: LD_ADDR_VAR 0 4
68833: PUSH
68834: LD_VAR 0 3
68838: PUSH
68839: FOR_IN
68840: IFFALSE 69261
// begin tag := GetTag ( i ) + 1 ;
68842: LD_ADDR_VAR 0 9
68846: PUSH
68847: LD_VAR 0 4
68851: PPUSH
68852: CALL_OW 110
68856: PUSH
68857: LD_INT 1
68859: PLUS
68860: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68861: LD_ADDR_VAR 0 7
68865: PUSH
68866: LD_VAR 0 4
68870: PPUSH
68871: CALL_OW 250
68875: PPUSH
68876: LD_VAR 0 4
68880: PPUSH
68881: CALL_OW 251
68885: PPUSH
68886: LD_INT 6
68888: PPUSH
68889: CALL 68462 0 3
68893: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68894: LD_VAR 0 4
68898: PPUSH
68899: CALL_OW 247
68903: PUSH
68904: LD_INT 2
68906: EQUAL
68907: PUSH
68908: LD_VAR 0 7
68912: AND
68913: PUSH
68914: LD_VAR 0 4
68918: PPUSH
68919: CALL_OW 264
68923: PUSH
68924: LD_VAR 0 10
68928: IN
68929: NOT
68930: AND
68931: IFFALSE 68970
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68933: LD_VAR 0 4
68937: PPUSH
68938: LD_VAR 0 7
68942: PUSH
68943: LD_INT 1
68945: ARRAY
68946: PUSH
68947: LD_INT 1
68949: ARRAY
68950: PPUSH
68951: LD_VAR 0 7
68955: PUSH
68956: LD_INT 1
68958: ARRAY
68959: PUSH
68960: LD_INT 2
68962: ARRAY
68963: PPUSH
68964: CALL_OW 116
68968: GO 69259
// if path > tag then
68970: LD_VAR 0 2
68974: PUSH
68975: LD_VAR 0 9
68979: GREATER
68980: IFFALSE 69188
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68982: LD_ADDR_VAR 0 6
68986: PUSH
68987: LD_VAR 0 5
68991: PPUSH
68992: LD_INT 91
68994: PUSH
68995: LD_VAR 0 4
68999: PUSH
69000: LD_INT 8
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: PPUSH
69008: CALL_OW 72
69012: ST_TO_ADDR
// if nearEnemy then
69013: LD_VAR 0 6
69017: IFFALSE 69086
// begin if GetWeapon ( i ) = ru_time_lapser then
69019: LD_VAR 0 4
69023: PPUSH
69024: CALL_OW 264
69028: PUSH
69029: LD_INT 49
69031: EQUAL
69032: IFFALSE 69060
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69034: LD_VAR 0 4
69038: PPUSH
69039: LD_VAR 0 6
69043: PPUSH
69044: LD_VAR 0 4
69048: PPUSH
69049: CALL_OW 74
69053: PPUSH
69054: CALL_OW 112
69058: GO 69084
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69060: LD_VAR 0 4
69064: PPUSH
69065: LD_VAR 0 6
69069: PPUSH
69070: LD_VAR 0 4
69074: PPUSH
69075: CALL_OW 74
69079: PPUSH
69080: CALL_OW 115
// end else
69084: GO 69186
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69086: LD_VAR 0 4
69090: PPUSH
69091: LD_VAR 0 2
69095: PUSH
69096: LD_VAR 0 9
69100: ARRAY
69101: PUSH
69102: LD_INT 1
69104: ARRAY
69105: PPUSH
69106: LD_VAR 0 2
69110: PUSH
69111: LD_VAR 0 9
69115: ARRAY
69116: PUSH
69117: LD_INT 2
69119: ARRAY
69120: PPUSH
69121: CALL_OW 297
69125: PUSH
69126: LD_INT 6
69128: GREATER
69129: IFFALSE 69172
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69131: LD_VAR 0 4
69135: PPUSH
69136: LD_VAR 0 2
69140: PUSH
69141: LD_VAR 0 9
69145: ARRAY
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PPUSH
69151: LD_VAR 0 2
69155: PUSH
69156: LD_VAR 0 9
69160: ARRAY
69161: PUSH
69162: LD_INT 2
69164: ARRAY
69165: PPUSH
69166: CALL_OW 114
69170: GO 69186
// SetTag ( i , tag ) ;
69172: LD_VAR 0 4
69176: PPUSH
69177: LD_VAR 0 9
69181: PPUSH
69182: CALL_OW 109
// end else
69186: GO 69259
// if enemy then
69188: LD_VAR 0 5
69192: IFFALSE 69259
// begin if GetWeapon ( i ) = ru_time_lapser then
69194: LD_VAR 0 4
69198: PPUSH
69199: CALL_OW 264
69203: PUSH
69204: LD_INT 49
69206: EQUAL
69207: IFFALSE 69235
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69209: LD_VAR 0 4
69213: PPUSH
69214: LD_VAR 0 5
69218: PPUSH
69219: LD_VAR 0 4
69223: PPUSH
69224: CALL_OW 74
69228: PPUSH
69229: CALL_OW 112
69233: GO 69259
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69235: LD_VAR 0 4
69239: PPUSH
69240: LD_VAR 0 5
69244: PPUSH
69245: LD_VAR 0 4
69249: PPUSH
69250: CALL_OW 74
69254: PPUSH
69255: CALL_OW 115
// end ; end ;
69259: GO 68839
69261: POP
69262: POP
// end ;
69263: LD_VAR 0 3
69267: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69268: LD_INT 0
69270: PPUSH
69271: PPUSH
69272: PPUSH
// if not unit or IsInUnit ( unit ) then
69273: LD_VAR 0 1
69277: NOT
69278: PUSH
69279: LD_VAR 0 1
69283: PPUSH
69284: CALL_OW 310
69288: OR
69289: IFFALSE 69293
// exit ;
69291: GO 69384
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69293: LD_ADDR_VAR 0 4
69297: PUSH
69298: LD_VAR 0 1
69302: PPUSH
69303: CALL_OW 250
69307: PPUSH
69308: LD_VAR 0 2
69312: PPUSH
69313: LD_INT 1
69315: PPUSH
69316: CALL_OW 272
69320: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69321: LD_ADDR_VAR 0 5
69325: PUSH
69326: LD_VAR 0 1
69330: PPUSH
69331: CALL_OW 251
69335: PPUSH
69336: LD_VAR 0 2
69340: PPUSH
69341: LD_INT 1
69343: PPUSH
69344: CALL_OW 273
69348: ST_TO_ADDR
// if ValidHex ( x , y ) then
69349: LD_VAR 0 4
69353: PPUSH
69354: LD_VAR 0 5
69358: PPUSH
69359: CALL_OW 488
69363: IFFALSE 69384
// ComTurnXY ( unit , x , y ) ;
69365: LD_VAR 0 1
69369: PPUSH
69370: LD_VAR 0 4
69374: PPUSH
69375: LD_VAR 0 5
69379: PPUSH
69380: CALL_OW 118
// end ;
69384: LD_VAR 0 3
69388: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69389: LD_INT 0
69391: PPUSH
69392: PPUSH
// result := false ;
69393: LD_ADDR_VAR 0 3
69397: PUSH
69398: LD_INT 0
69400: ST_TO_ADDR
// if not units then
69401: LD_VAR 0 2
69405: NOT
69406: IFFALSE 69410
// exit ;
69408: GO 69455
// for i in units do
69410: LD_ADDR_VAR 0 4
69414: PUSH
69415: LD_VAR 0 2
69419: PUSH
69420: FOR_IN
69421: IFFALSE 69453
// if See ( side , i ) then
69423: LD_VAR 0 1
69427: PPUSH
69428: LD_VAR 0 4
69432: PPUSH
69433: CALL_OW 292
69437: IFFALSE 69451
// begin result := true ;
69439: LD_ADDR_VAR 0 3
69443: PUSH
69444: LD_INT 1
69446: ST_TO_ADDR
// exit ;
69447: POP
69448: POP
69449: GO 69455
// end ;
69451: GO 69420
69453: POP
69454: POP
// end ;
69455: LD_VAR 0 3
69459: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69460: LD_INT 0
69462: PPUSH
69463: PPUSH
69464: PPUSH
69465: PPUSH
// if not unit or not points then
69466: LD_VAR 0 1
69470: NOT
69471: PUSH
69472: LD_VAR 0 2
69476: NOT
69477: OR
69478: IFFALSE 69482
// exit ;
69480: GO 69572
// dist := 99999 ;
69482: LD_ADDR_VAR 0 5
69486: PUSH
69487: LD_INT 99999
69489: ST_TO_ADDR
// for i in points do
69490: LD_ADDR_VAR 0 4
69494: PUSH
69495: LD_VAR 0 2
69499: PUSH
69500: FOR_IN
69501: IFFALSE 69570
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69503: LD_ADDR_VAR 0 6
69507: PUSH
69508: LD_VAR 0 1
69512: PPUSH
69513: LD_VAR 0 4
69517: PUSH
69518: LD_INT 1
69520: ARRAY
69521: PPUSH
69522: LD_VAR 0 4
69526: PUSH
69527: LD_INT 2
69529: ARRAY
69530: PPUSH
69531: CALL_OW 297
69535: ST_TO_ADDR
// if tmpDist < dist then
69536: LD_VAR 0 6
69540: PUSH
69541: LD_VAR 0 5
69545: LESS
69546: IFFALSE 69568
// begin result := i ;
69548: LD_ADDR_VAR 0 3
69552: PUSH
69553: LD_VAR 0 4
69557: ST_TO_ADDR
// dist := tmpDist ;
69558: LD_ADDR_VAR 0 5
69562: PUSH
69563: LD_VAR 0 6
69567: ST_TO_ADDR
// end ; end ;
69568: GO 69500
69570: POP
69571: POP
// end ;
69572: LD_VAR 0 3
69576: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69577: LD_INT 0
69579: PPUSH
// uc_side := side ;
69580: LD_ADDR_OWVAR 20
69584: PUSH
69585: LD_VAR 0 1
69589: ST_TO_ADDR
// uc_nation := 3 ;
69590: LD_ADDR_OWVAR 21
69594: PUSH
69595: LD_INT 3
69597: ST_TO_ADDR
// vc_chassis := 25 ;
69598: LD_ADDR_OWVAR 37
69602: PUSH
69603: LD_INT 25
69605: ST_TO_ADDR
// vc_engine := engine_siberite ;
69606: LD_ADDR_OWVAR 39
69610: PUSH
69611: LD_INT 3
69613: ST_TO_ADDR
// vc_control := control_computer ;
69614: LD_ADDR_OWVAR 38
69618: PUSH
69619: LD_INT 3
69621: ST_TO_ADDR
// vc_weapon := 59 ;
69622: LD_ADDR_OWVAR 40
69626: PUSH
69627: LD_INT 59
69629: ST_TO_ADDR
// result := CreateVehicle ;
69630: LD_ADDR_VAR 0 5
69634: PUSH
69635: CALL_OW 45
69639: ST_TO_ADDR
// SetDir ( result , d ) ;
69640: LD_VAR 0 5
69644: PPUSH
69645: LD_VAR 0 4
69649: PPUSH
69650: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69654: LD_VAR 0 5
69658: PPUSH
69659: LD_VAR 0 2
69663: PPUSH
69664: LD_VAR 0 3
69668: PPUSH
69669: LD_INT 0
69671: PPUSH
69672: CALL_OW 48
// end ;
69676: LD_VAR 0 5
69680: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69681: LD_INT 0
69683: PPUSH
69684: PPUSH
69685: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69686: LD_ADDR_VAR 0 2
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69709: LD_VAR 0 1
69713: NOT
69714: PUSH
69715: LD_VAR 0 1
69719: PPUSH
69720: CALL_OW 264
69724: PUSH
69725: LD_INT 12
69727: PUSH
69728: LD_INT 51
69730: PUSH
69731: LD_INT 32
69733: PUSH
69734: LD_INT 89
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: IN
69743: NOT
69744: OR
69745: IFFALSE 69749
// exit ;
69747: GO 69847
// for i := 1 to 3 do
69749: LD_ADDR_VAR 0 3
69753: PUSH
69754: DOUBLE
69755: LD_INT 1
69757: DEC
69758: ST_TO_ADDR
69759: LD_INT 3
69761: PUSH
69762: FOR_TO
69763: IFFALSE 69845
// begin tmp := GetCargo ( cargo , i ) ;
69765: LD_ADDR_VAR 0 4
69769: PUSH
69770: LD_VAR 0 1
69774: PPUSH
69775: LD_VAR 0 3
69779: PPUSH
69780: CALL_OW 289
69784: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69785: LD_ADDR_VAR 0 2
69789: PUSH
69790: LD_VAR 0 2
69794: PPUSH
69795: LD_VAR 0 3
69799: PPUSH
69800: LD_VAR 0 4
69804: PPUSH
69805: CALL_OW 1
69809: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69810: LD_ADDR_VAR 0 2
69814: PUSH
69815: LD_VAR 0 2
69819: PPUSH
69820: LD_INT 4
69822: PPUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_INT 4
69830: ARRAY
69831: PUSH
69832: LD_VAR 0 4
69836: PLUS
69837: PPUSH
69838: CALL_OW 1
69842: ST_TO_ADDR
// end ;
69843: GO 69762
69845: POP
69846: POP
// end ;
69847: LD_VAR 0 2
69851: RET
// export function Length ( array ) ; begin
69852: LD_INT 0
69854: PPUSH
// result := array + 0 ;
69855: LD_ADDR_VAR 0 2
69859: PUSH
69860: LD_VAR 0 1
69864: PUSH
69865: LD_INT 0
69867: PLUS
69868: ST_TO_ADDR
// end ;
69869: LD_VAR 0 2
69873: RET
// export function PrepareArray ( array ) ; begin
69874: LD_INT 0
69876: PPUSH
// result := array diff 0 ;
69877: LD_ADDR_VAR 0 2
69881: PUSH
69882: LD_VAR 0 1
69886: PUSH
69887: LD_INT 0
69889: DIFF
69890: ST_TO_ADDR
// if not result [ 1 ] then
69891: LD_VAR 0 2
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: NOT
69900: IFFALSE 69920
// result := Delete ( result , 1 ) ;
69902: LD_ADDR_VAR 0 2
69906: PUSH
69907: LD_VAR 0 2
69911: PPUSH
69912: LD_INT 1
69914: PPUSH
69915: CALL_OW 3
69919: ST_TO_ADDR
// end ;
69920: LD_VAR 0 2
69924: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69925: LD_INT 0
69927: PPUSH
69928: PPUSH
69929: PPUSH
69930: PPUSH
// sibRocketRange := 25 ;
69931: LD_ADDR_VAR 0 6
69935: PUSH
69936: LD_INT 25
69938: ST_TO_ADDR
// result := false ;
69939: LD_ADDR_VAR 0 4
69943: PUSH
69944: LD_INT 0
69946: ST_TO_ADDR
// for i := 0 to 5 do
69947: LD_ADDR_VAR 0 5
69951: PUSH
69952: DOUBLE
69953: LD_INT 0
69955: DEC
69956: ST_TO_ADDR
69957: LD_INT 5
69959: PUSH
69960: FOR_TO
69961: IFFALSE 70028
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69963: LD_VAR 0 1
69967: PPUSH
69968: LD_VAR 0 5
69972: PPUSH
69973: LD_VAR 0 6
69977: PPUSH
69978: CALL_OW 272
69982: PPUSH
69983: LD_VAR 0 2
69987: PPUSH
69988: LD_VAR 0 5
69992: PPUSH
69993: LD_VAR 0 6
69997: PPUSH
69998: CALL_OW 273
70002: PPUSH
70003: LD_VAR 0 3
70007: PPUSH
70008: CALL_OW 309
70012: IFFALSE 70026
// begin result := true ;
70014: LD_ADDR_VAR 0 4
70018: PUSH
70019: LD_INT 1
70021: ST_TO_ADDR
// exit ;
70022: POP
70023: POP
70024: GO 70030
// end ;
70026: GO 69960
70028: POP
70029: POP
// end ;
70030: LD_VAR 0 4
70034: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70035: LD_INT 0
70037: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70038: LD_VAR 0 1
70042: PPUSH
70043: LD_VAR 0 2
70047: PPUSH
70048: LD_INT 0
70050: PPUSH
70051: LD_INT 0
70053: PPUSH
70054: LD_INT 1
70056: PPUSH
70057: LD_INT 0
70059: PPUSH
70060: CALL_OW 587
// end ;
70064: LD_VAR 0 3
70068: RET
// export function CenterOnNow ( unit ) ; begin
70069: LD_INT 0
70071: PPUSH
// result := IsInUnit ( unit ) ;
70072: LD_ADDR_VAR 0 2
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL_OW 310
70086: ST_TO_ADDR
// if not result then
70087: LD_VAR 0 2
70091: NOT
70092: IFFALSE 70104
// result := unit ;
70094: LD_ADDR_VAR 0 2
70098: PUSH
70099: LD_VAR 0 1
70103: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70104: LD_VAR 0 1
70108: PPUSH
70109: CALL_OW 87
// end ;
70113: LD_VAR 0 2
70117: RET
// export function ComMoveHex ( unit , hex ) ; begin
70118: LD_INT 0
70120: PPUSH
// if not hex then
70121: LD_VAR 0 2
70125: NOT
70126: IFFALSE 70130
// exit ;
70128: GO 70183
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70130: LD_VAR 0 2
70134: PUSH
70135: LD_INT 1
70137: ARRAY
70138: PPUSH
70139: LD_VAR 0 2
70143: PUSH
70144: LD_INT 2
70146: ARRAY
70147: PPUSH
70148: CALL_OW 428
70152: IFFALSE 70156
// exit ;
70154: GO 70183
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70156: LD_VAR 0 1
70160: PPUSH
70161: LD_VAR 0 2
70165: PUSH
70166: LD_INT 1
70168: ARRAY
70169: PPUSH
70170: LD_VAR 0 2
70174: PUSH
70175: LD_INT 2
70177: ARRAY
70178: PPUSH
70179: CALL_OW 111
// end ; end_of_file
70183: LD_VAR 0 3
70187: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70188: LD_VAR 0 1
70192: PUSH
70193: LD_INT 200
70195: DOUBLE
70196: GREATEREQUAL
70197: IFFALSE 70205
70199: LD_INT 299
70201: DOUBLE
70202: LESSEQUAL
70203: IFTRUE 70207
70205: GO 70239
70207: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70208: LD_VAR 0 1
70212: PPUSH
70213: LD_VAR 0 2
70217: PPUSH
70218: LD_VAR 0 3
70222: PPUSH
70223: LD_VAR 0 4
70227: PPUSH
70228: LD_VAR 0 5
70232: PPUSH
70233: CALL 24911 0 5
70237: GO 70316
70239: LD_INT 300
70241: DOUBLE
70242: GREATEREQUAL
70243: IFFALSE 70251
70245: LD_INT 399
70247: DOUBLE
70248: LESSEQUAL
70249: IFTRUE 70253
70251: GO 70315
70253: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70254: LD_VAR 0 1
70258: PPUSH
70259: LD_VAR 0 2
70263: PPUSH
70264: LD_VAR 0 3
70268: PPUSH
70269: LD_VAR 0 4
70273: PPUSH
70274: LD_VAR 0 5
70278: PPUSH
70279: LD_VAR 0 6
70283: PPUSH
70284: LD_VAR 0 7
70288: PPUSH
70289: LD_VAR 0 8
70293: PPUSH
70294: LD_VAR 0 9
70298: PPUSH
70299: LD_VAR 0 10
70303: PPUSH
70304: LD_VAR 0 11
70308: PPUSH
70309: CALL 21244 0 11
70313: GO 70316
70315: POP
// end ;
70316: PPOPN 11
70318: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70319: LD_VAR 0 1
70323: PPUSH
70324: LD_VAR 0 2
70328: PPUSH
70329: LD_VAR 0 3
70333: PPUSH
70334: LD_VAR 0 4
70338: PPUSH
70339: LD_VAR 0 5
70343: PPUSH
70344: CALL 24647 0 5
// end ; end_of_file
70348: PPOPN 5
70350: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70351: LD_VAR 0 1
70355: PPUSH
70356: LD_VAR 0 2
70360: PPUSH
70361: LD_VAR 0 3
70365: PPUSH
70366: LD_VAR 0 4
70370: PPUSH
70371: LD_VAR 0 5
70375: PPUSH
70376: LD_VAR 0 6
70380: PPUSH
70381: CALL 8896 0 6
// end ;
70385: PPOPN 6
70387: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70388: LD_INT 0
70390: PPUSH
// begin if not units then
70391: LD_VAR 0 1
70395: NOT
70396: IFFALSE 70400
// exit ;
70398: GO 70400
// end ;
70400: PPOPN 7
70402: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70403: CALL 8800 0 0
// end ;
70407: PPOPN 1
70409: END
